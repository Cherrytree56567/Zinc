<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Vanara.PInvoke.Cryptography</name>
    </assembly>
    <members>
        <member name="T:Vanara.PInvoke.BCrypt">
            <summary>Methods and data types found in BCrypt.dll.</summary>
        </member>
        <member name="T:Vanara.PInvoke.BCrypt.AlgOperations">
            <summary>A value that specifies the algorithm operation types to include in the enumeration.</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.AlgOperations.BCRYPT_CIPHER_OPERATION">
            <summary>Include the cipher algorithms in the enumeration.</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.AlgOperations.BCRYPT_HASH_OPERATION">
            <summary>Include the hash algorithms in the enumeration.</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.AlgOperations.BCRYPT_ASYMMETRIC_ENCRYPTION_OPERATION">
            <summary>Include the asymmetric encryption algorithms in the enumeration.</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.AlgOperations.BCRYPT_SECRET_AGREEMENT_OPERATION">
            <summary>Include the secret agreement algorithms in the enumeration.</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.AlgOperations.BCRYPT_SIGNATURE_OPERATION">
            <summary>Include the signature algorithms in the enumeration.</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.AlgOperations.BCRYPT_RNG_OPERATION">
            <summary>Include the random number generator (RNG) algorithms in the enumeration.</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.AlgOperations.BCRYPT_KEY_DERIVATION_OPERATION">
            <summary>Undocumented.</summary>
        </member>
        <member name="T:Vanara.PInvoke.BCrypt.AlgProviderFlags">
            <summary>Primitive algorithm provider functions.</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.AlgProviderFlags.BCRYPT_PROV_DISPATCH">
            <summary>
            Loads the provider into the nonpaged memory pool. If this flag is not present, the provider is loaded into the paged memory
            pool. When this flag is specified, the handle returned must not be closed before all dependent objects have been freed. <note
            type="note">This flag is only supported in kernel mode and allows subsequent operations on the provider to be processed at
            the Dispatch level. If the provider does not support being called at dispatch level, then it will return an error when opened
            using this flag.</note>
            <para>
            Windows Server 2008 and Windows Vista: This flag is only supported by the Microsoft algorithm providers and only for hashing
            algorithms and symmetric key cryptographic algorithms.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.AlgProviderFlags.BCRYPT_ALG_HANDLE_HMAC_FLAG">
            <summary>
            The provider will perform the Hash-Based Message Authentication Code (HMAC) algorithm with the specified hash algorithm. This
            flag is only used by hash algorithm providers.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.AlgProviderFlags.BCRYPT_HASH_REUSABLE_FLAG">
            <summary>
            Creates a reusable hashing object. The object can be used for a new hashing operation immediately after calling
            BCryptFinishHash. For more information, see Creating a Hash with CNG.
            <para>Windows Server 2008 R2, Windows 7, Windows Server 2008 and Windows Vista: This flag is not supported.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.AlgProviderFlags.BCRYPT_CAPI_AES_FLAG">
            <summary>
            Specifies that the target algorithm is AES and that the key therefore must be double expanded. This flag is only valid with
            the CAPI_KDF algorithm.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.AlgProviderFlags.BCRYPT_MULTI_FLAG">
            <summary>Undocumented</summary>
        </member>
        <member name="T:Vanara.PInvoke.BCrypt.BCRYPT_HASH_OPERATION_TYPE">
            <summary>The BCRYPT_HASH_OPERATION_TYPE enumeration specifies the hash operation type.</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.BCRYPT_HASH_OPERATION_TYPE.BCRYPT_HASH_OPERATION_HASH_DATA">
            <summary>
            The operation performed is equivalent to calling the BCryptHashData function on the hash object array element with
            pbBuffer/cbBuffer pointing to the buffer to be hashed.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.BCRYPT_HASH_OPERATION_TYPE.BCRYPT_HASH_OPERATION_FINISH_HASH">
            <summary>
            The operation performed is equivalent to calling the BCryptFinishHash function on the hash object array element with
            pbBuffer/cbBuffer pointing to the output buffer that receives the result.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.BCrypt.BCRYPT_MULTI_OPERATION_TYPE">
            <summary>
            The BCRYPT_MULTI_OPERATION_TYPE enumeration specifies type of multi-operation that is passed to the BCryptProcessMultiOperations function.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.BCRYPT_MULTI_OPERATION_TYPE.BCRYPT_OPERATION_TYPE_HASH">
            <summary>
            A hash operation. This value identifies the hObject parameter as a multi-hash object and the pOperations pointer as pointing
            to an array of BCRYPT_MULTI_HASH_OPERATION elements.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.BCrypt.BlobMagicNumber">
            <summary>Magic numbers for the various blobs.</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.BlobMagicNumber.BCRYPT_DH_PARAMETERS_MAGIC">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.BlobMagicNumber.BCRYPT_DH_PRIVATE_MAGIC">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.BlobMagicNumber.BCRYPT_DH_PUBLIC_MAGIC">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.BlobMagicNumber.BCRYPT_DSA_PARAMETERS_MAGIC_V2">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.BlobMagicNumber.BCRYPT_DSA_PRIVATE_MAGIC">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.BlobMagicNumber.BCRYPT_DSA_PRIVATE_MAGIC_V2">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.BlobMagicNumber.BCRYPT_DSA_PUBLIC_MAGIC">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.BlobMagicNumber.BCRYPT_DSA_PUBLIC_MAGIC_V2">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.BlobMagicNumber.BCRYPT_ECC_PARAMETERS_MAGIC">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.BlobMagicNumber.BCRYPT_ECDH_PRIVATE_GENERIC_MAGIC">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.BlobMagicNumber.BCRYPT_ECDH_PRIVATE_P256_MAGIC">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.BlobMagicNumber.BCRYPT_ECDH_PRIVATE_P384_MAGIC">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.BlobMagicNumber.BCRYPT_ECDH_PRIVATE_P521_MAGIC">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.BlobMagicNumber.BCRYPT_ECDH_PUBLIC_GENERIC_MAGIC">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.BlobMagicNumber.BCRYPT_ECDH_PUBLIC_P256_MAGIC">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.BlobMagicNumber.BCRYPT_ECDH_PUBLIC_P384_MAGIC">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.BlobMagicNumber.BCRYPT_ECDH_PUBLIC_P521_MAGIC">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.BlobMagicNumber.BCRYPT_ECDSA_PRIVATE_GENERIC_MAGIC">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.BlobMagicNumber.BCRYPT_ECDSA_PRIVATE_P256_MAGIC">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.BlobMagicNumber.BCRYPT_ECDSA_PRIVATE_P384_MAGIC">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.BlobMagicNumber.BCRYPT_ECDSA_PRIVATE_P521_MAGIC">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.BlobMagicNumber.BCRYPT_ECDSA_PUBLIC_GENERIC_MAGIC">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.BlobMagicNumber.BCRYPT_ECDSA_PUBLIC_P256_MAGIC">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.BlobMagicNumber.BCRYPT_ECDSA_PUBLIC_P384_MAGIC">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.BlobMagicNumber.BCRYPT_ECDSA_PUBLIC_P521_MAGIC">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.BlobMagicNumber.BCRYPT_KEY_DATA_BLOB_MAGIC">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.BlobMagicNumber.BCRYPT_RSAFULLPRIVATE_MAGIC">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.BlobMagicNumber.BCRYPT_RSAPRIVATE_MAGIC">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.BlobMagicNumber.BCRYPT_RSAPUBLIC_MAGIC">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.BCrypt.ContextConfigFlags">
            <summary>A set of flags that determine the options for the configuration context.</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.ContextConfigFlags.CRYPT_EXCLUSIVE">
            <summary>
            <para>
            Restricts the set of cryptographic functions in an interface to those that the current CNG context is specifically registered
            to support. If this flag is set, then any attempts to resolve a given function will succeed only if one of the following is true:
            </para>
            <list type="bullet">
            <item>The function exists within the current CNG context.</item>
            <item>
            The function exists in some interface in the default context, and an instance of that same interface also exists within the
            current CNG context.
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.ContextConfigFlags.CRYPT_OVERRIDE">
            <summary>
            Indicates that this entry in the enterprise-wide configuration table should take precedence over any and all corresponding
            entries in the local-machine configuration table for this context. This flag only applies to entries in the enterprise-wide
            configuration table. Without this flag, local machine configuration entries take precedence.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.BCrypt.ContextConfigTable">
            <summary>Configuration tables</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.ContextConfigTable.CRYPT_LOCAL">
            <summary>The context exists in the local-machine configuration table.</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.ContextConfigTable.CRYPT_DOMAIN">
            <summary>This value is not available for use.</summary>
        </member>
        <member name="T:Vanara.PInvoke.BCrypt.CryptPriority">
            <summary>
            Specifies the position in the list at which to insert this function. The function is inserted at this position ahead of any
            existing functions.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.CryptPriority.CRYPT_PRIORITY_TOP">
            <summary>The crypt priority top</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.CryptPriority.CRYPT_PRIORITY_BOTTOM">
            <summary>The crypt priority bottom</summary>
        </member>
        <member name="T:Vanara.PInvoke.BCrypt.DeriveKeyFlags">
            <summary>
            Flags used by <see cref="M:Vanara.PInvoke.BCrypt.BCryptDeriveKey(Vanara.PInvoke.BCrypt.BCRYPT_SECRET_HANDLE,System.String,Vanara.PInvoke.NCrypt.NCryptBufferDesc,Vanara.InteropServices.SafeAllocatedMemoryHandle,System.UInt32,System.UInt32@,Vanara.PInvoke.BCrypt.DeriveKeyFlags)"/>.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.DeriveKeyFlags.KDF_USE_SECRET_AS_HMAC_KEY_FLAG">
            <summary>
            The secret agreement value will also serve as the HMAC key. If this flag is specified, the KDF_HMAC_KEY parameter should not
            be included in the set of parameters in the pParameterList parameter. This flag is only used by the BCRYPT_KDF_HMAC key
            derivation function.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.BCrypt.EncryptFlags">
            <summary>Flags used by BCryptEncrypt.</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.EncryptFlags.BCRYPT_BLOCK_PADDING">
            <summary>
            Allows the encryption algorithm to pad the data to the next block size. If this flag is not specified, the size of the
            plaintext specified in the cbInput parameter must be a multiple of the algorithm's block size. The block size can be obtained
            by calling the BCryptGetProperty function to get the BCRYPT_BLOCK_LENGTH property for the key. This will provide the size of
            a block for the algorithm. This flag must not be used with the authenticated encryption modes (AES-CCM and AES-GCM).
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.EncryptFlags.BCRYPT_PAD_NONE">
            <summary>
            Do not use any padding. The pPaddingInfo parameter is not used. The size of the plaintext specified in the cbInput parameter
            must be a multiple of the algorithm's block size.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.EncryptFlags.BCRYPT_PAD_PKCS1">
            <summary>
            The data will be padded with a random number to round out the block size. The pPaddingInfo parameter is not used.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.EncryptFlags.BCRYPT_PAD_OAEP">
            <summary>
            Use the Optimal Asymmetric Encryption Padding (OAEP) scheme. The pPaddingInfo parameter is a pointer to a
            BCRYPT_OAEP_PADDING_INFO structure.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.EncryptFlags.BCRYPT_PAD_PSS">
            <summary>Undocumented</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.EncryptFlags.BCRYPT_PAD_PKCS1_OPTIONAL_HASH_OID">
            <summary>Undocumented</summary>
        </member>
        <member name="T:Vanara.PInvoke.BCrypt.GenRandomFlags">
            <summary>Flags used by <c>BCryptGenRandom</c>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.GenRandomFlags.BCRYPT_RNG_USE_ENTROPY_IN_BUFFER">
            <summary>
            This function will use the number in the pbBuffer buffer as additional entropy for the random number. If this flag is not
            specified, this function will use a random number for the entropy.
            <para>Windows 8 and later: This flag is ignored in Windows 8 and later.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.GenRandomFlags.BCRYPT_USE_SYSTEM_PREFERRED_RNG">
            <summary>
            Use the system-preferred random number generator algorithm. The hAlgorithm parameter must be NULL.
            <para>BCRYPT_USE_SYSTEM_PREFERRED_RNG is only supported at PASSIVE_LEVEL IRQL. For more information, see Remarks.</para>
            <para>Windows Vista: This flag is not supported.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.BCrypt.ImportFlags">
            <summary>A set of flags that modify the behavior of this function</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.ImportFlags.BCRYPT_NO_KEY_VALIDATION">
            <summary>Do not validate the public portion of the key pair.</summary>
        </member>
        <member name="T:Vanara.PInvoke.BCrypt.InterfaceId">
            <summary>Identifies the cryptographic interface to add the function to.</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.InterfaceId.BCRYPT_CIPHER_INTERFACE">
            <summary>Add the function to the list of cipher functions.</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.InterfaceId.BCRYPT_HASH_INTERFACE">
            <summary>Add the function to the list of hash functions.</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.InterfaceId.BCRYPT_ASYMMETRIC_ENCRYPTION_INTERFACE">
            <summary>Add the function to the list of asymmetric encryption functions.</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.InterfaceId.BCRYPT_SECRET_AGREEMENT_INTERFACE">
            <summary>Add the function to the list of secret agreement functions.</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.InterfaceId.BCRYPT_SIGNATURE_INTERFACE">
            <summary>Add the function to the list of signature functions.</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.InterfaceId.BCRYPT_RNG_INTERFACE">
            <summary>Add the function to the list of random number generator functions.</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.InterfaceId.BCRYPT_KEY_DERIVATION_INTERFACE">
            <summary>Undocumented</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.InterfaceId.NCRYPT_KEY_STORAGE_INTERFACE">
            <summary>Add the function to the list of key storage functions.</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.InterfaceId.NCRYPT_SCHANNEL_INTERFACE">
            <summary>Add the function to the list of Schannel functions.</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.InterfaceId.NCRYPT_SCHANNEL_SIGNATURE_INTERFACE">
            <summary>
            Add the function to the list of signature suites that Schannel will accept for TLS 1.2.
            <para>Windows Vista and Windows Server 2008: This value is not supported.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.InterfaceId.NCRYPT_KEY_PROTECTION_INTERFACE">
            <summary>Undocumented</summary>
        </member>
        <member name="T:Vanara.PInvoke.BCrypt.KeyDerivationFlags">
            <summary>Flags used with <c>BCryptKeyDerivation</c>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.KeyDerivationFlags.BCRYPT_CAPI_AES_FLAG">
            <summary>
            Specifies that the target algorithm is AES and that the key therefore must be double expanded. This flag is only valid with
            the CAPI_KDF algorithm.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.BCrypt.PaddingScheme">
            <summary>The padding scheme.</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.PaddingScheme.BCRYPT_SUPPORTED_PAD_ROUTER">
            <summary>The provider supports padding added by the router.</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.PaddingScheme.BCRYPT_SUPPORTED_PAD_PKCS1_ENC">
            <summary>The provider supports the PKCS1 encryption padding scheme.</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.PaddingScheme.BCRYPT_SUPPORTED_PAD_PKCS1_SIG">
            <summary>The provider supports the PKCS1 signature padding scheme.</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.PaddingScheme.BCRYPT_SUPPORTED_PAD_OAEP">
            <summary>The provider supports the OAEP padding scheme.</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.PaddingScheme.BCRYPT_SUPPORTED_PAD_PSS">
            <summary>The provider supports the PSS padding scheme.</summary>
        </member>
        <member name="T:Vanara.PInvoke.BCrypt.ProviderInfoType">
            <summary>Specifies the type of information to retrieve.</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.ProviderInfoType.CRYPT_UM">
            <summary>Retrieve the user mode information for the provider.</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.ProviderInfoType.CRYPT_KM">
            <summary>Retrieve the kernel mode information for the provider.</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.ProviderInfoType.CRYPT_MM">
            <summary>Retrieve both the user mode and kernel mode information for the provider.</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.ProviderInfoType.CRYPT_ANY">
            <summary>Retrieve any information for the provider.</summary>
        </member>
        <member name="T:Vanara.PInvoke.BCrypt.ResolveProviderFlags">
            <summary>A set of flags that modify the behavior of BCryptResolveProviders.</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.ResolveProviderFlags.CRYPT_ALL_FUNCTIONS">
            <summary>
            This function will retrieve all of the functions supported by each provider that meets the specified criteria. If this flag
            is not specified, this function will only retrieve the first function of the provider or providers that meet the specified criteria.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.ResolveProviderFlags.CRYPT_ALL_PROVIDERS">
            <summary>
            This function will retrieve all of the providers that meet the specified criteria. If this flag is not specified, this
            function will only retrieve the first provider that is found that meets the specified criteria.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCryptAddContextFunction(Vanara.PInvoke.BCrypt.ContextConfigTable,System.String,Vanara.PInvoke.BCrypt.InterfaceId,System.String,Vanara.PInvoke.BCrypt.CryptPriority)">
            <summary>
            <para>
            [ <c>BCryptAddContextFunction</c> is available for use in the operating systems specified in the Requirements section. It may be
            altered or unavailable in subsequent versions.]
            </para>
            <para>
            The <c>BCryptAddContextFunction</c> function adds a cryptographic function to the list of functions that are supported by an
            existing CNG context.
            </para>
            </summary>
            <param name="dwTable">
            <para>Identifies the configuration table that the context exists in. This can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPT_LOCAL</term>
            <term>The context exists in the local-machine configuration table.</term>
            </item>
            <item>
            <term>CRYPT_DOMAIN</term>
            <term>This value is not available for use.</term>
            </item>
            </list>
            </param>
            <param name="pszContext">
            <para>A pointer to a null-terminated Unicode string that contains the identifier of the context to add the function to.</para>
            </param>
            <param name="dwInterface">
            <para>Identifies the cryptographic interface to add the function to. This can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>BCRYPT_ASYMMETRIC_ENCRYPTION_INTERFACE</term>
            <term>Add the function to the list of asymmetric encryption functions.</term>
            </item>
            <item>
            <term>BCRYPT_CIPHER_INTERFACE</term>
            <term>Add the function to the list of cipher functions.</term>
            </item>
            <item>
            <term>BCRYPT_HASH_INTERFACE</term>
            <term>Add the function to the list of hash functions.</term>
            </item>
            <item>
            <term>BCRYPT_RNG_INTERFACE</term>
            <term>Add the function to the list of random number generator functions.</term>
            </item>
            <item>
            <term>BCRYPT_SECRET_AGREEMENT_INTERFACE</term>
            <term>Add the function to the list of secret agreement functions.</term>
            </item>
            <item>
            <term>BCRYPT_SIGNATURE_INTERFACE</term>
            <term>Add the function to the list of signature functions.</term>
            </item>
            <item>
            <term>NCRYPT_KEY_STORAGE_INTERFACE</term>
            <term>Add the function to the list of key storage functions.</term>
            </item>
            <item>
            <term>NCRYPT_SCHANNEL_INTERFACE</term>
            <term>Add the function to the list of Schannel functions.</term>
            </item>
            <item>
            <term>NCRYPT_SCHANNEL_SIGNATURE_INTERFACE</term>
            <term>
            Add the function to the list of signature suites that Schannel will accept for TLS 1.2. Windows Vista and Windows Server 2008:
            This value is not supported.
            </term>
            </item>
            </list>
            </param>
            <param name="pszFunction">
            <para>A pointer to a null-terminated Unicode string that contains the identifier of the cryptographic function to add.</para>
            </param>
            <param name="dwPosition">
            <para>
            Specifies the position in the list at which to insert this function. The function is inserted at this position ahead of any
            existing functions. The <c>CRYPT_PRIORITY_TOP</c> value is used to insert the function at the top of the list. The
            <c>CRYPT_PRIORITY_BOTTOM</c> value is used to insert the function at the end of the list.
            </para>
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>STATUS_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>STATUS_INVALID_PARAMETER</term>
            <term>One or more parameters are not valid.</term>
            </item>
            <item>
            <term>STATUS_NO_MEMORY</term>
            <term>A memory allocation failure occurred.</term>
            </item>
            <item>
            <term>STATUS_NOT_FOUND</term>
            <term>The context could not be found.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>If the function added is already in the list, it will be removed and inserted at the new position.</para>
            <para><c>BCryptAddContextFunction</c> can be called only in user mode.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCryptCloseAlgorithmProvider(Vanara.PInvoke.BCrypt.BCRYPT_ALG_HANDLE,System.UInt32)">
            <summary>
            <para>The <c>BCryptCloseAlgorithmProvider</c> function closes an algorithm provider.</para>
            </summary>
            <param name="hAlgorithm">
            <para>
            A handle that represents the algorithm provider to close. This handle is obtained by calling the BCryptOpenAlgorithmProvider function.
            </para>
            </param>
            <param name="dwFlags">
            <para>A set of flags that modify the behavior of this function. No flags are defined for this function.</para>
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>STATUS_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>STATUS_INVALID_HANDLE</term>
            <term>The algorithm handle in the hAlgorithm parameter is not valid.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            <c>BCryptCloseAlgorithmProvider</c> can be called either from user mode or kernel mode. Kernel mode callers must be executing at
            <c>PASSIVE_LEVEL</c> IRQL.
            </para>
            <para>
            To call this function in kernel mode, use Cng.lib, which is part of the Driver Development Kit (DDK). For more information, see
            WDK and Developer Tools. <c>Windows Server 2008 and Windows Vista:</c> To call this function in kernel mode, use Ksecdd.lib.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCryptConfigureContext(Vanara.PInvoke.BCrypt.ContextConfigTable,System.String,Vanara.PInvoke.BCrypt.CRYPT_CONTEXT_CONFIG@)">
            <summary>
            <para>
            [ <c>BCryptConfigureContext</c> is available for use in the operating systems specified in the Requirements section. It may be
            altered or unavailable in subsequent versions.]
            </para>
            <para>The <c>BCryptConfigureContext</c> function sets the configuration information for an existing CNG context.</para>
            </summary>
            <param name="dwTable">
            <para>Identifies the configuration table that the context exists in. This can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPT_LOCAL</term>
            <term>The context exists in the local-machine configuration table.</term>
            </item>
            <item>
            <term>CRYPT_DOMAIN</term>
            <term>This value is not available for use.</term>
            </item>
            </list>
            </param>
            <param name="pszContext">
            <para>
            A pointer to a null-terminated Unicode string that contains the identifier of the context to set the configuration information for.
            </para>
            </param>
            <param name="pConfig">
            <para>The address of a CRYPT_CONTEXT_CONFIG structure that contains the new context configuration information.</para>
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>STATUS_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>STATUS_INVALID_PARAMETER</term>
            <term>One or more parameters are not valid.</term>
            </item>
            <item>
            <term>STATUS_NO_MEMORY</term>
            <term>A memory allocation failure occurred.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para><c>BCryptConfigureContext</c> can be called only in user mode.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCryptConfigureContextFunction(Vanara.PInvoke.BCrypt.ContextConfigTable,System.String,Vanara.PInvoke.BCrypt.InterfaceId,System.String,Vanara.PInvoke.BCrypt.CRYPT_CONTEXT_FUNCTION_CONFIG@)">
            <summary>
            <para>
            [ <c>BCryptConfigureContextFunction</c> is available for use in the operating systems specified in the Requirements section. It
            may be altered or unavailable in subsequent versions.]
            </para>
            <para>
            The <c>BCryptConfigureContextFunction</c> function sets the configuration information for the cryptographic function of an
            existing CNG context.
            </para>
            </summary>
            <param name="dwTable">
            <para>Identifies the configuration table that the context exists in. This can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPT_LOCAL</term>
            <term>The context exists in the local-machine configuration table.</term>
            </item>
            <item>
            <term>CRYPT_DOMAIN</term>
            <term>This value is not available for use.</term>
            </item>
            </list>
            </param>
            <param name="pszContext">
            <para>
            A pointer to a null-terminated Unicode string that contains the identifier of the context to set the cryptographic function
            configuration information for.
            </para>
            </param>
            <param name="dwInterface">
            <para>
            Identifies the cryptographic interface to set the function configuration information for. This can be one of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>BCRYPT_ASYMMETRIC_ENCRYPTION_INTERFACE</term>
            <term>Set the function configuration information in the list of asymmetric encryption functions.</term>
            </item>
            <item>
            <term>BCRYPT_CIPHER_INTERFACE</term>
            <term>Set the function configuration information in the list of cipher functions.</term>
            </item>
            <item>
            <term>BCRYPT_HASH_INTERFACE</term>
            <term>Set the function configuration information in the list of hash functions.</term>
            </item>
            <item>
            <term>BCRYPT_RNG_INTERFACE</term>
            <term>Set the function configuration information in the list of random number generator functions.</term>
            </item>
            <item>
            <term>BCRYPT_SECRET_AGREEMENT_INTERFACE</term>
            <term>Set the function configuration information in the list of secret agreement functions.</term>
            </item>
            <item>
            <term>BCRYPT_SIGNATURE_INTERFACE</term>
            <term>Set the function configuration information in the list of signature functions.</term>
            </item>
            <item>
            <term>NCRYPT_KEY_STORAGE_INTERFACE</term>
            <term>Set the function configuration information in the list of key storage functions.</term>
            </item>
            <item>
            <term>NCRYPT_SCHANNEL_INTERFACE</term>
            <term>Set the function configuration information in the list of Schannel functions.</term>
            </item>
            <item>
            <term>NCRYPT_SCHANNEL_SIGNATURE_INTERFACE</term>
            <term>
            Set the function configuration information in the list of signature suites that Schannel accepts for TLS 1.2. Windows Vista and
            Windows Server 2008: This value is not supported.
            </term>
            </item>
            </list>
            </param>
            <param name="pszFunction">
            <para>
            A pointer to a null-terminated Unicode string that contains the identifier of the cryptographic function to set the configuration
            information for.
            </para>
            </param>
            <param name="pConfig">
            <para>The address of a CRYPT_CONTEXT_FUNCTION_CONFIG structure that contains the new function configuration information.</para>
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>STATUS_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>STATUS_INVALID_PARAMETER</term>
            <term>One or more parameters are not valid.</term>
            </item>
            <item>
            <term>STATUS_NO_MEMORY</term>
            <term>A memory allocation failure occurred.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para><c>BCryptConfigureContextFunction</c> can be called only in user mode.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCryptCreateContext(Vanara.PInvoke.BCrypt.ContextConfigTable,System.String,Vanara.PInvoke.BCrypt.CRYPT_CONTEXT_CONFIG@)">
            <summary>
            <para>
            [ <c>BCryptCreateContext</c> is available for use in the operating systems specified in the Requirements section. It may be
            altered or unavailable in subsequent versions.]
            </para>
            <para>The <c>BCryptCreateContext</c> function creates a new CNG configuration context.</para>
            </summary>
            <param name="dwTable">
            <para>Identifies the configuration table to create the context in. This can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPT_LOCAL</term>
            <term>Create the context in the local-machine configuration table.</term>
            </item>
            <item>
            <term>CRYPT_DOMAIN</term>
            <term>This value is not available for use.</term>
            </item>
            </list>
            </param>
            <param name="pszContext">
            <para>A pointer to a null-terminated Unicode string that contains the identifier of the context to create.</para>
            </param>
            <param name="pConfig">
            <para>
            A pointer to a CRYPT_CONTEXT_CONFIG structure that contains additional configuration data for the new context. This parameter can
            be <c>NULL</c> if it is not needed.
            </para>
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>STATUS_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>STATUS_INVALID_PARAMETER</term>
            <term>One or more parameters are not valid.</term>
            </item>
            <item>
            <term>STATUS_NO_MEMORY</term>
            <term>A memory allocation failure occurred.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para><c>BCryptCreateContext</c> can be called only in user mode.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCryptCreateContext(Vanara.PInvoke.BCrypt.ContextConfigTable,System.String,System.IntPtr)">
            <summary>
            <para>
            [ <c>BCryptCreateContext</c> is available for use in the operating systems specified in the Requirements section. It may be
            altered or unavailable in subsequent versions.]
            </para>
            <para>The <c>BCryptCreateContext</c> function creates a new CNG configuration context.</para>
            </summary>
            <param name="dwTable">
            <para>Identifies the configuration table to create the context in. This can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPT_LOCAL</term>
            <term>Create the context in the local-machine configuration table.</term>
            </item>
            <item>
            <term>CRYPT_DOMAIN</term>
            <term>This value is not available for use.</term>
            </item>
            </list>
            </param>
            <param name="pszContext">
            <para>A pointer to a null-terminated Unicode string that contains the identifier of the context to create.</para>
            </param>
            <param name="pConfig">
            <para>
            A pointer to a CRYPT_CONTEXT_CONFIG structure that contains additional configuration data for the new context. This parameter can
            be <c>NULL</c> if it is not needed.
            </para>
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>STATUS_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>STATUS_INVALID_PARAMETER</term>
            <term>One or more parameters are not valid.</term>
            </item>
            <item>
            <term>STATUS_NO_MEMORY</term>
            <term>A memory allocation failure occurred.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para><c>BCryptCreateContext</c> can be called only in user mode.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCryptCreateHash(Vanara.PInvoke.BCrypt.BCRYPT_ALG_HANDLE,Vanara.PInvoke.BCrypt.SafeBCRYPT_HASH_HANDLE@,Vanara.InteropServices.SafeAllocatedMemoryHandle,System.UInt32,Vanara.InteropServices.SafeAllocatedMemoryHandle,System.UInt32,Vanara.PInvoke.BCrypt.AlgProviderFlags)">
            <summary>
            <para>The <c>BCryptCreateHash</c> function is called to create a hash or Message Authentication Code (MAC) object.</para>
            </summary>
            <param name="hAlgorithm">
            <para>
            The handle of an algorithm provider created by using the BCryptOpenAlgorithmProvider function. The algorithm that was specified
            when the provider was created must support the hash interface.
            </para>
            </param>
            <param name="phHash">
            <para>
            A pointer to a <c>BCRYPT_HASH_HANDLE</c> value that receives a handle that represents the hash or MAC object. This handle is used
            in subsequent hashing or MAC functions, such as the BCryptHashData function. When you have finished using this handle, release it
            by passing it to the BCryptDestroyHash function.
            </para>
            </param>
            <param name="pbHashObject">
            <para>
            A pointer to a buffer that receives the hash or MAC object. The cbHashObject parameter contains the size of this buffer. The
            required size of this buffer can be obtained by calling the BCryptGetProperty function to get the <c>BCRYPT_OBJECT_LENGTH</c>
            property. This will provide the size of the hash or MAC object for the specified algorithm.
            </para>
            <para>This memory can only be freed after the handle pointed to by the phHash parameter is destroyed.</para>
            <para>
            If the value of this parameter is <c>NULL</c> and the value of the cbHashObject parameter is zero, the memory for the hash object
            is allocated and freed by this function. <c>Windows 7:</c> This memory management functionality is available beginning with
            Windows 7.
            </para>
            </param>
            <param name="cbHashObject">
            <para>The size, in bytes, of the pbHashObject buffer.</para>
            <para>
            If the value of this parameter is zero and the value of the pbHashObject parameter is <c>NULL</c>, the memory for the key object
            is allocated and freed by this function. <c>Windows 7:</c> This memory management functionality is available beginning with
            Windows 7.
            </para>
            <para>c</para>
            </param>
            <param name="pbSecret">
            <para>
            A pointer to a buffer that contains the key to use for the hash or MAC. The cbSecret parameter contains the size of this buffer.
            This key only applies to hash algorithms opened by the BCryptOpenAlgorithmProvider function by using the
            <c>BCRYPT_ALG_HANDLE_HMAC</c> flag. Otherwise, set this parameter to <c>NULL</c>.
            </para>
            </param>
            <param name="cbSecret">
            <para>The size, in bytes, of the pbSecret buffer. If no key is used, set this parameter to zero.</para>
            </param>
            <param name="dwFlags">
            <para>Flags that modify the behavior of the function. This can be zero or the following value.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>BCRYPT_HASH_REUSABLE_FLAG</term>
            <term>
            Creates a reusable hashing object. The object can be used for a new hashing operation immediately after calling BCryptFinishHash.
            For more information, see Creating a Hash with CNG. Windows Server 2008 R2, Windows 7, Windows Server 2008 and Windows Vista:
            This flag is not supported.
            </term>
            </item>
            </list>
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>STATUS_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>STATUS_BUFFER_TOO_SMALL</term>
            <term>The size of the hash object specified by the cbHashObject parameter is not large enough to hold the hash object.</term>
            </item>
            <item>
            <term>STATUS_INVALID_HANDLE</term>
            <term>The algorithm handle in the hAlgorithm parameter is not valid.</term>
            </item>
            <item>
            <term>STATUS_INVALID_PARAMETER</term>
            <term>One or more parameters are not valid.</term>
            </item>
            <item>
            <term>STATUS_NOT_SUPPORTED</term>
            <term>The algorithm provider specified by the hAlgorithm parameter does not support the hash interface.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            Depending on what processor modes a provider supports, <c>BCryptCreateHash</c> can be called either from user mode or kernel
            mode. Kernel mode callers can execute either at <c>PASSIVE_LEVEL</c> IRQL or <c>DISPATCH_LEVEL</c> IRQL. If the current IRQL
            level is <c>DISPATCH_LEVEL</c>, the handle provided in the hAlgorithm parameter must have been opened by using the
            <c>BCRYPT_PROV_DISPATCH</c> flag, and any pointers passed to the <c>BCryptCreateHash</c> function must refer to nonpaged (or
            locked) memory.
            </para>
            <para>
            To call this function in kernel mode, use Cng.lib, which is part of the Driver Development Kit (DDK). For more information, see
            WDK and Developer Tools. <c>Windows Server 2008 and Windows Vista:</c> To call this function in kernel mode, use Ksecdd.lib.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCryptCreateHash(Vanara.PInvoke.BCrypt.BCRYPT_ALG_HANDLE,Vanara.PInvoke.BCrypt.SafeBCRYPT_HASH_HANDLE@,Vanara.InteropServices.SafeAllocatedMemoryHandle,System.UInt32,System.IntPtr,System.UInt32,Vanara.PInvoke.BCrypt.AlgProviderFlags)">
            <summary>
            <para>The <c>BCryptCreateHash</c> function is called to create a hash or Message Authentication Code (MAC) object.</para>
            </summary>
            <param name="hAlgorithm">
            <para>
            The handle of an algorithm provider created by using the BCryptOpenAlgorithmProvider function. The algorithm that was specified
            when the provider was created must support the hash interface.
            </para>
            </param>
            <param name="phHash">
            <para>
            A pointer to a <c>BCRYPT_HASH_HANDLE</c> value that receives a handle that represents the hash or MAC object. This handle is used
            in subsequent hashing or MAC functions, such as the BCryptHashData function. When you have finished using this handle, release it
            by passing it to the BCryptDestroyHash function.
            </para>
            </param>
            <param name="pbHashObject">
            <para>
            A pointer to a buffer that receives the hash or MAC object. The cbHashObject parameter contains the size of this buffer. The
            required size of this buffer can be obtained by calling the BCryptGetProperty function to get the <c>BCRYPT_OBJECT_LENGTH</c>
            property. This will provide the size of the hash or MAC object for the specified algorithm.
            </para>
            <para>This memory can only be freed after the handle pointed to by the phHash parameter is destroyed.</para>
            <para>
            If the value of this parameter is <c>NULL</c> and the value of the cbHashObject parameter is zero, the memory for the hash object
            is allocated and freed by this function. <c>Windows 7:</c> This memory management functionality is available beginning with
            Windows 7.
            </para>
            </param>
            <param name="cbHashObject">
            <para>The size, in bytes, of the pbHashObject buffer.</para>
            <para>
            If the value of this parameter is zero and the value of the pbHashObject parameter is <c>NULL</c>, the memory for the key object
            is allocated and freed by this function. <c>Windows 7:</c> This memory management functionality is available beginning with
            Windows 7.
            </para>
            <para>c</para>
            </param>
            <param name="pbSecret">
            <para>
            A pointer to a buffer that contains the key to use for the hash or MAC. The cbSecret parameter contains the size of this buffer.
            This key only applies to hash algorithms opened by the BCryptOpenAlgorithmProvider function by using the
            <c>BCRYPT_ALG_HANDLE_HMAC</c> flag. Otherwise, set this parameter to <c>NULL</c>.
            </para>
            </param>
            <param name="cbSecret">
            <para>The size, in bytes, of the pbSecret buffer. If no key is used, set this parameter to zero.</para>
            </param>
            <param name="dwFlags">
            <para>Flags that modify the behavior of the function. This can be zero or the following value.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>BCRYPT_HASH_REUSABLE_FLAG</term>
            <term>
            Creates a reusable hashing object. The object can be used for a new hashing operation immediately after calling BCryptFinishHash.
            For more information, see Creating a Hash with CNG. Windows Server 2008 R2, Windows 7, Windows Server 2008 and Windows Vista:
            This flag is not supported.
            </term>
            </item>
            </list>
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>STATUS_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>STATUS_BUFFER_TOO_SMALL</term>
            <term>The size of the hash object specified by the cbHashObject parameter is not large enough to hold the hash object.</term>
            </item>
            <item>
            <term>STATUS_INVALID_HANDLE</term>
            <term>The algorithm handle in the hAlgorithm parameter is not valid.</term>
            </item>
            <item>
            <term>STATUS_INVALID_PARAMETER</term>
            <term>One or more parameters are not valid.</term>
            </item>
            <item>
            <term>STATUS_NOT_SUPPORTED</term>
            <term>The algorithm provider specified by the hAlgorithm parameter does not support the hash interface.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            Depending on what processor modes a provider supports, <c>BCryptCreateHash</c> can be called either from user mode or kernel
            mode. Kernel mode callers can execute either at <c>PASSIVE_LEVEL</c> IRQL or <c>DISPATCH_LEVEL</c> IRQL. If the current IRQL
            level is <c>DISPATCH_LEVEL</c>, the handle provided in the hAlgorithm parameter must have been opened by using the
            <c>BCRYPT_PROV_DISPATCH</c> flag, and any pointers passed to the <c>BCryptCreateHash</c> function must refer to nonpaged (or
            locked) memory.
            </para>
            <para>
            To call this function in kernel mode, use Cng.lib, which is part of the Driver Development Kit (DDK). For more information, see
            WDK and Developer Tools. <c>Windows Server 2008 and Windows Vista:</c> To call this function in kernel mode, use Ksecdd.lib.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCryptCreateHash(Vanara.PInvoke.BCrypt.BCRYPT_ALG_HANDLE,Vanara.PInvoke.BCrypt.SafeBCRYPT_HASH_HANDLE@,System.IntPtr,System.UInt32,System.IntPtr,System.UInt32,Vanara.PInvoke.BCrypt.AlgProviderFlags)">
            <summary>
            <para>The <c>BCryptCreateHash</c> function is called to create a hash or Message Authentication Code (MAC) object.</para>
            </summary>
            <param name="hAlgorithm">
            <para>
            The handle of an algorithm provider created by using the BCryptOpenAlgorithmProvider function. The algorithm that was specified
            when the provider was created must support the hash interface.
            </para>
            </param>
            <param name="phHash">
            <para>
            A pointer to a <c>BCRYPT_HASH_HANDLE</c> value that receives a handle that represents the hash or MAC object. This handle is used
            in subsequent hashing or MAC functions, such as the BCryptHashData function. When you have finished using this handle, release it
            by passing it to the BCryptDestroyHash function.
            </para>
            </param>
            <param name="pbHashObject">
            <para>
            A pointer to a buffer that receives the hash or MAC object. The cbHashObject parameter contains the size of this buffer. The
            required size of this buffer can be obtained by calling the BCryptGetProperty function to get the <c>BCRYPT_OBJECT_LENGTH</c>
            property. This will provide the size of the hash or MAC object for the specified algorithm.
            </para>
            <para>This memory can only be freed after the handle pointed to by the phHash parameter is destroyed.</para>
            <para>
            If the value of this parameter is <c>NULL</c> and the value of the cbHashObject parameter is zero, the memory for the hash object
            is allocated and freed by this function. <c>Windows 7:</c> This memory management functionality is available beginning with
            Windows 7.
            </para>
            </param>
            <param name="cbHashObject">
            <para>The size, in bytes, of the pbHashObject buffer.</para>
            <para>
            If the value of this parameter is zero and the value of the pbHashObject parameter is <c>NULL</c>, the memory for the key object
            is allocated and freed by this function. <c>Windows 7:</c> This memory management functionality is available beginning with
            Windows 7.
            </para>
            <para>c</para>
            </param>
            <param name="pbSecret">
            <para>
            A pointer to a buffer that contains the key to use for the hash or MAC. The cbSecret parameter contains the size of this buffer.
            This key only applies to hash algorithms opened by the BCryptOpenAlgorithmProvider function by using the
            <c>BCRYPT_ALG_HANDLE_HMAC</c> flag. Otherwise, set this parameter to <c>NULL</c>.
            </para>
            </param>
            <param name="cbSecret">
            <para>The size, in bytes, of the pbSecret buffer. If no key is used, set this parameter to zero.</para>
            </param>
            <param name="dwFlags">
            <para>Flags that modify the behavior of the function. This can be zero or the following value.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>BCRYPT_HASH_REUSABLE_FLAG</term>
            <term>
            Creates a reusable hashing object. The object can be used for a new hashing operation immediately after calling BCryptFinishHash.
            For more information, see Creating a Hash with CNG. Windows Server 2008 R2, Windows 7, Windows Server 2008 and Windows Vista:
            This flag is not supported.
            </term>
            </item>
            </list>
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>STATUS_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>STATUS_BUFFER_TOO_SMALL</term>
            <term>The size of the hash object specified by the cbHashObject parameter is not large enough to hold the hash object.</term>
            </item>
            <item>
            <term>STATUS_INVALID_HANDLE</term>
            <term>The algorithm handle in the hAlgorithm parameter is not valid.</term>
            </item>
            <item>
            <term>STATUS_INVALID_PARAMETER</term>
            <term>One or more parameters are not valid.</term>
            </item>
            <item>
            <term>STATUS_NOT_SUPPORTED</term>
            <term>The algorithm provider specified by the hAlgorithm parameter does not support the hash interface.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            Depending on what processor modes a provider supports, <c>BCryptCreateHash</c> can be called either from user mode or kernel
            mode. Kernel mode callers can execute either at <c>PASSIVE_LEVEL</c> IRQL or <c>DISPATCH_LEVEL</c> IRQL. If the current IRQL
            level is <c>DISPATCH_LEVEL</c>, the handle provided in the hAlgorithm parameter must have been opened by using the
            <c>BCRYPT_PROV_DISPATCH</c> flag, and any pointers passed to the <c>BCryptCreateHash</c> function must refer to nonpaged (or
            locked) memory.
            </para>
            <para>
            To call this function in kernel mode, use Cng.lib, which is part of the Driver Development Kit (DDK). For more information, see
            WDK and Developer Tools. <c>Windows Server 2008 and Windows Vista:</c> To call this function in kernel mode, use Ksecdd.lib.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCryptCreateMultiHash(Vanara.PInvoke.BCrypt.BCRYPT_ALG_HANDLE,Vanara.PInvoke.BCrypt.SafeBCRYPT_HASH_HANDLE@,System.UInt32,Vanara.InteropServices.SafeAllocatedMemoryHandle,System.UInt32,Vanara.InteropServices.SafeAllocatedMemoryHandle,System.UInt32,Vanara.PInvoke.BCrypt.AlgProviderFlags)">
            <summary>
            <para>
            The <c>BCryptCreateMultiHash</c> function creates a multi-hash state that allows for the parallel computation of multiple hash
            operations. This multi-hash state is used by the BCryptProcessMultiOperations function. The multi-hash state can be thought of as
            an array of hash objects, each of which is equivalent to one created by BCryptCreateHash.
            </para>
            <para>Parallel computations can greatly increase overall throughput, at the expense of increased latency for individual computations.</para>
            <para>
            Parallel hash computations are currently only implemented for SHA-256, SHA-384, and SHA-512. Other hash algorithms can be used
            with the parallel computation API but they run at the throughput of the sequential hash operations. The set of hash algorithms
            that can benefit from parallel computations might change in future updates.
            </para>
            </summary>
            <param name="hAlgorithm">
            <para>
            The algorithm handle used for all of the hash states in the multi-hash array. The algorithm handle must have been opened with the
            <c>BCYRPT_MULTI_FLAG</c> passed to the BCryptOpenAlgorithmProvider function. Alternatively, the caller can use the pseudo-handles.
            </para>
            </param>
            <param name="phHash">
            <para>
            A pointer to a <c>BCRYPT_HASH_HANDLE</c> value that receives a handle that represents the multi-hash state. This handle is used
            in subsequent operations such as BCryptProcessMultiOperations. When you have finished using this handle, release it by passing it
            to the BCryptDestroyHash function.
            </para>
            </param>
            <param name="nHashes">
            <para>
            The number of elements in the array. The multi-hash state that this function creates is able to perform parallel computations on
            nHashes different hash states.
            </para>
            </param>
            <param name="pbHashObject">
            <para>A pointer to a buffer that receives the multi-hash state.</para>
            <para>
            The size can be calculated from the <c>cbPerObject</c> and <c>cbPerElement</c> members of the BCRYPT_MULTI_OBJECT_LENGTH_STRUCT
            structure. The value is the following: .
            </para>
            <para>If pbHashObject is <c>NULL</c> and cbHashObject has a value of zero (0), the object buffer is automatically allocated.</para>
            </param>
            <param name="cbHashObject">
            <para>The size of the pbHashObject buffer, or zero if pbHashObject is <c>NULL</c>.</para>
            </param>
            <param name="pbSecret">
            <para>
            A pointer to a buffer that contains the key to use for the hash or MAC. The cbSecret parameter contains the size of this buffer.
            This key only applies to hash algorithms opened by the BCryptOpenAlgorithmProvider function by using the
            <c>BCRYPT_ALG_HANDLE_HMAC</c> flag. Otherwise, set this parameter to <c>NULL</c>.
            </para>
            <para>The same key is used for all elements of the array.</para>
            </param>
            <param name="cbSecret">
            <para>The size, in bytes, of the pbSecret buffer. If no key is used, set this parameter to zero.</para>
            </param>
            <param name="dwFlags">
            <para>
            Flags that modify the behavior of the function. This can be zero or the values below. Multi-hash objects are always reusable and
            always behave as if the <c>BCRYPT_HASH_REUSABLE_FLAG</c> was passed. This flag is supported here for consistency.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>BCRYPT_HASH_REUSABLE_FLAG</term>
            <term>
            Creates a reusable hashing object. The object can be used for a new hashing operation immediately after calling BCryptFinishHash.
            For more information, see Creating a Hash with CNG.
            </term>
            </item>
            </list>
            </param>
            <returns>
            <para>None</para>
            </returns>
            <remarks>
            <para>
            Internally, parallel hash computations are done using single-instruction multiple-data (SIMD) instructions with up to 8 parallel
            computations at a time, depending on the hash algorithm and the CPU features available. To maximize performance, we recommend
            that the caller provide at least eight computations that can be processed in parallel.
            </para>
            <para>
            For computations of unequal length, providing more computations in parallel allows the implementation to schedule the
            computations better across the CPU registers. This can provide a throughput benefit. For optimal throughput, we recommend that
            the caller provide between eight and 100 computations. Select a lower value in that range only if all the hash computations are
            the same length.
            </para>
            <para>Multi-hashing is not supported for HMAC-MD2, HMAC-MD4, and GMAC.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCryptCreateMultiHash(Vanara.PInvoke.BCrypt.BCRYPT_ALG_HANDLE,Vanara.PInvoke.BCrypt.SafeBCRYPT_HASH_HANDLE@,System.UInt32,System.IntPtr,System.UInt32,Vanara.InteropServices.SafeAllocatedMemoryHandle,System.UInt32,Vanara.PInvoke.BCrypt.AlgProviderFlags)">
            <summary>
            <para>
            The <c>BCryptCreateMultiHash</c> function creates a multi-hash state that allows for the parallel computation of multiple hash
            operations. This multi-hash state is used by the BCryptProcessMultiOperations function. The multi-hash state can be thought of as
            an array of hash objects, each of which is equivalent to one created by BCryptCreateHash.
            </para>
            <para>Parallel computations can greatly increase overall throughput, at the expense of increased latency for individual computations.</para>
            <para>
            Parallel hash computations are currently only implemented for SHA-256, SHA-384, and SHA-512. Other hash algorithms can be used
            with the parallel computation API but they run at the throughput of the sequential hash operations. The set of hash algorithms
            that can benefit from parallel computations might change in future updates.
            </para>
            </summary>
            <param name="hAlgorithm">
            <para>
            The algorithm handle used for all of the hash states in the multi-hash array. The algorithm handle must have been opened with the
            <c>BCYRPT_MULTI_FLAG</c> passed to the BCryptOpenAlgorithmProvider function. Alternatively, the caller can use the pseudo-handles.
            </para>
            </param>
            <param name="phHash">
            <para>
            A pointer to a <c>BCRYPT_HASH_HANDLE</c> value that receives a handle that represents the multi-hash state. This handle is used
            in subsequent operations such as BCryptProcessMultiOperations. When you have finished using this handle, release it by passing it
            to the BCryptDestroyHash function.
            </para>
            </param>
            <param name="nHashes">
            <para>
            The number of elements in the array. The multi-hash state that this function creates is able to perform parallel computations on
            nHashes different hash states.
            </para>
            </param>
            <param name="pbHashObject">
            <para>A pointer to a buffer that receives the multi-hash state.</para>
            <para>
            The size can be calculated from the <c>cbPerObject</c> and <c>cbPerElement</c> members of the BCRYPT_MULTI_OBJECT_LENGTH_STRUCT
            structure. The value is the following: .
            </para>
            <para>If pbHashObject is <c>NULL</c> and cbHashObject has a value of zero (0), the object buffer is automatically allocated.</para>
            </param>
            <param name="cbHashObject">
            <para>The size of the pbHashObject buffer, or zero if pbHashObject is <c>NULL</c>.</para>
            </param>
            <param name="pbSecret">
            <para>
            A pointer to a buffer that contains the key to use for the hash or MAC. The cbSecret parameter contains the size of this buffer.
            This key only applies to hash algorithms opened by the BCryptOpenAlgorithmProvider function by using the
            <c>BCRYPT_ALG_HANDLE_HMAC</c> flag. Otherwise, set this parameter to <c>NULL</c>.
            </para>
            <para>The same key is used for all elements of the array.</para>
            </param>
            <param name="cbSecret">
            <para>The size, in bytes, of the pbSecret buffer. If no key is used, set this parameter to zero.</para>
            </param>
            <param name="dwFlags">
            <para>
            Flags that modify the behavior of the function. This can be zero or the values below. Multi-hash objects are always reusable and
            always behave as if the <c>BCRYPT_HASH_REUSABLE_FLAG</c> was passed. This flag is supported here for consistency.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>BCRYPT_HASH_REUSABLE_FLAG</term>
            <term>
            Creates a reusable hashing object. The object can be used for a new hashing operation immediately after calling BCryptFinishHash.
            For more information, see Creating a Hash with CNG.
            </term>
            </item>
            </list>
            </param>
            <returns>
            <para>None</para>
            </returns>
            <remarks>
            <para>
            Internally, parallel hash computations are done using single-instruction multiple-data (SIMD) instructions with up to 8 parallel
            computations at a time, depending on the hash algorithm and the CPU features available. To maximize performance, we recommend
            that the caller provide at least eight computations that can be processed in parallel.
            </para>
            <para>
            For computations of unequal length, providing more computations in parallel allows the implementation to schedule the
            computations better across the CPU registers. This can provide a throughput benefit. For optimal throughput, we recommend that
            the caller provide between eight and 100 computations. Select a lower value in that range only if all the hash computations are
            the same length.
            </para>
            <para>Multi-hashing is not supported for HMAC-MD2, HMAC-MD4, and GMAC.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCryptDecrypt(Vanara.PInvoke.BCrypt.BCRYPT_KEY_HANDLE,Vanara.InteropServices.SafeAllocatedMemoryHandle,System.UInt32,System.IntPtr,Vanara.InteropServices.SafeAllocatedMemoryHandle,System.UInt32,System.IntPtr,System.UInt32,System.UInt32@,Vanara.PInvoke.BCrypt.EncryptFlags)">
            <summary>
            <para>The <c>BCryptDecrypt</c> function decrypts a block of data.</para>
            </summary>
            <param name="hKey">
            <para>
            The handle of the key to use to decrypt the data. This handle is obtained from one of the key creation functions, such as
            BCryptGenerateSymmetricKey, BCryptGenerateKeyPair, or BCryptImportKey.
            </para>
            </param>
            <param name="pbInput">
            <para>
            The address of a buffer that contains the ciphertext to be decrypted. The cbInput parameter contains the size of the ciphertext
            to decrypt. For more information, see Remarks.
            </para>
            </param>
            <param name="cbInput">
            <para>The number of bytes in the pbInput buffer to decrypt.</para>
            </param>
            <param name="pPaddingInfo">
            <para>
            A pointer to a structure that contains padding information. This parameter is only used with asymmetric keys and authenticated
            encryption modes. If an authenticated encryption mode is used, this parameter must point to a
            BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO structure. If asymmetric keys are used, the type of structure this parameter points to is
            determined by the value of the dwFlags parameter. Otherwise, the parameter must be set to <c>NULL</c>.
            </para>
            </param>
            <param name="pbIV">
            <para>
            The address of a buffer that contains the initialization vector (IV) to use during decryption. The cbIV parameter contains the
            size of this buffer. This function will modify the contents of this buffer. If you need to reuse the IV later, make sure you make
            a copy of this buffer before calling this function.
            </para>
            <para>This parameter is optional and can be <c>NULL</c> if no IV is used.</para>
            <para>
            The required size of the IV can be obtained by calling the BCryptGetProperty function to get the <c>BCRYPT_BLOCK_LENGTH</c>
            property. This will provide the size of a block for the algorithm, which is also the size of the IV.
            </para>
            </param>
            <param name="cbIV">
            <para>The size, in bytes, of the pbIV buffer.</para>
            </param>
            <param name="pbOutput">
            <para>
            The address of a buffer to receive the plaintext produced by this function. The cbOutput parameter contains the size of this
            buffer. For more information, see Remarks.
            </para>
            <para>
            If this parameter is <c>NULL</c>, the <c>BCryptDecrypt</c> function calculates the size required for the plaintext of the
            encrypted data passed in the pbInput parameter. In this case, the location pointed to by the pcbResult parameter contains this
            size, and the function returns <c>STATUS_SUCCESS</c>.
            </para>
            <para>
            If the values of both the pbOutput and pbInput parameters are <c>NULL</c>, an error is returned unless an authenticated
            encryption algorithm is in use. In the latter case, the call is treated as an authenticated encryption call with zero length
            data, and the authentication tag, passed in the pPaddingInfo parameter, is verified.
            </para>
            </param>
            <param name="cbOutput">
            <para>The size, in bytes, of the pbOutput buffer. This parameter is ignored if the pbOutput parameter is <c>NULL</c>.</para>
            </param>
            <param name="pcbResult">
            <para>
            A pointer to a <c>ULONG</c> variable to receive the number of bytes copied to the pbOutput buffer. If pbOutput is <c>NULL</c>,
            this receives the size, in bytes, required for the plaintext.
            </para>
            </param>
            <param name="dwFlags">
            <para>
            A set of flags that modify the behavior of this function. The allowed set of flags depends on the type of key specified by the
            hKey parameter.
            </para>
            <para>If the key is a symmetric key, this can be zero or the following value.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>BCRYPT_BLOCK_PADDING</term>
            <term>
            The data was padded to the next block size when it was encrypted. If this flag was used with the BCryptEncrypt function, it must
            also be specified in this function. This flag must not be used with the authenticated encryption modes (AES-CCM and AES-GCM).
            </term>
            </item>
            </list>
            <para>If the key is an asymmetric key, this can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>BCRYPT_PAD_NONE</term>
            <term>
            Do not use any padding. The pPaddingInfo parameter is not used. The cbInput parameter must be a multiple of the algorithm's block
            size. The block size can be obtained by calling the BCryptGetProperty function to get the BCRYPT_BLOCK_LENGTH property for the
            key. This will provide the size of a block for the algorithm.
            </term>
            </item>
            <item>
            <term>BCRYPT_PAD_OAEP</term>
            <term>
            The Optimal Asymmetric Encryption Padding (OAEP) scheme was used when the data was encrypted. The pPaddingInfo parameter is a
            pointer to a BCRYPT_OAEP_PADDING_INFO structure.
            </term>
            </item>
            <item>
            <term>BCRYPT_PAD_PKCS1</term>
            <term>The data was padded with a random number when the data was encrypted. The pPaddingInfo parameter is not used.</term>
            </item>
            </list>
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>STATUS_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>STATUS_AUTH_TAG_MISMATCH</term>
            <term>The computed authentication tag did not match the value supplied in the pPaddingInfo parameter.</term>
            </item>
            <item>
            <term>STATUS_BUFFER_TOO_SMALL</term>
            <term>The size specified by the cbOutput parameter is not large enough to hold the ciphertext.</term>
            </item>
            <item>
            <term>STATUS_INVALID_BUFFER_SIZE</term>
            <term>
            The cbInput parameter is not a multiple of the algorithm's block size, and the BCRYPT_BLOCK_PADDING flag was not specified in the
            dwFlags parameter.
            </term>
            </item>
            <item>
            <term>STATUS_INVALID_HANDLE</term>
            <term>The key handle in the hKey parameter is not valid.</term>
            </item>
            <item>
            <term>STATUS_INVALID_PARAMETER</term>
            <term>One or more parameters are not valid.</term>
            </item>
            <item>
            <term>STATUS_NOT_SUPPORTED</term>
            <term>The algorithm does not support decryption.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            The pbInput and pbOutput parameters can point to the same buffer. In this case, this function will perform the decryption in place.
            </para>
            <para>
            Depending on what processor modes a provider supports, <c>BCryptDecrypt</c> can be called either from user mode or kernel mode.
            Kernel mode callers can execute either at <c>PASSIVE_LEVEL</c> IRQL or <c>DISPATCH_LEVEL</c> IRQL. If the current IRQL level is
            <c>DISPATCH_LEVEL</c>, the handle provided in the hKey parameter must be derived from an algorithm handle returned by a provider
            that was opened with the <c>BCRYPT_PROV_DISPATCH</c> flag, and any pointers passed to the <c>BCryptDecrypt</c> function must
            refer to nonpaged (or locked) memory.
            </para>
            <para>
            To call this function in kernel mode, use Cng.lib, which is part of the Driver Development Kit (DDK). For more information, see
            WDK and Developer Tools. <c>Windows Server 2008 and Windows Vista:</c> To call this function in kernel mode, use Ksecdd.lib.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCryptDecrypt(Vanara.PInvoke.BCrypt.BCRYPT_KEY_HANDLE,Vanara.InteropServices.SafeAllocatedMemoryHandle,System.UInt32,System.IntPtr,Vanara.InteropServices.SafeAllocatedMemoryHandle,System.UInt32,Vanara.InteropServices.SafeAllocatedMemoryHandle,System.UInt32,System.UInt32@,Vanara.PInvoke.BCrypt.EncryptFlags)">
            <summary>
            <para>The <c>BCryptDecrypt</c> function decrypts a block of data.</para>
            </summary>
            <param name="hKey">
            <para>
            The handle of the key to use to decrypt the data. This handle is obtained from one of the key creation functions, such as
            BCryptGenerateSymmetricKey, BCryptGenerateKeyPair, or BCryptImportKey.
            </para>
            </param>
            <param name="pbInput">
            <para>
            The address of a buffer that contains the ciphertext to be decrypted. The cbInput parameter contains the size of the ciphertext
            to decrypt. For more information, see Remarks.
            </para>
            </param>
            <param name="cbInput">
            <para>The number of bytes in the pbInput buffer to decrypt.</para>
            </param>
            <param name="pPaddingInfo">
            <para>
            A pointer to a structure that contains padding information. This parameter is only used with asymmetric keys and authenticated
            encryption modes. If an authenticated encryption mode is used, this parameter must point to a
            BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO structure. If asymmetric keys are used, the type of structure this parameter points to is
            determined by the value of the dwFlags parameter. Otherwise, the parameter must be set to <c>NULL</c>.
            </para>
            </param>
            <param name="pbIV">
            <para>
            The address of a buffer that contains the initialization vector (IV) to use during decryption. The cbIV parameter contains the
            size of this buffer. This function will modify the contents of this buffer. If you need to reuse the IV later, make sure you make
            a copy of this buffer before calling this function.
            </para>
            <para>This parameter is optional and can be <c>NULL</c> if no IV is used.</para>
            <para>
            The required size of the IV can be obtained by calling the BCryptGetProperty function to get the <c>BCRYPT_BLOCK_LENGTH</c>
            property. This will provide the size of a block for the algorithm, which is also the size of the IV.
            </para>
            </param>
            <param name="cbIV">
            <para>The size, in bytes, of the pbIV buffer.</para>
            </param>
            <param name="pbOutput">
            <para>
            The address of a buffer to receive the plaintext produced by this function. The cbOutput parameter contains the size of this
            buffer. For more information, see Remarks.
            </para>
            <para>
            If this parameter is <c>NULL</c>, the <c>BCryptDecrypt</c> function calculates the size required for the plaintext of the
            encrypted data passed in the pbInput parameter. In this case, the location pointed to by the pcbResult parameter contains this
            size, and the function returns <c>STATUS_SUCCESS</c>.
            </para>
            <para>
            If the values of both the pbOutput and pbInput parameters are <c>NULL</c>, an error is returned unless an authenticated
            encryption algorithm is in use. In the latter case, the call is treated as an authenticated encryption call with zero length
            data, and the authentication tag, passed in the pPaddingInfo parameter, is verified.
            </para>
            </param>
            <param name="cbOutput">
            <para>The size, in bytes, of the pbOutput buffer. This parameter is ignored if the pbOutput parameter is <c>NULL</c>.</para>
            </param>
            <param name="pcbResult">
            <para>
            A pointer to a <c>ULONG</c> variable to receive the number of bytes copied to the pbOutput buffer. If pbOutput is <c>NULL</c>,
            this receives the size, in bytes, required for the plaintext.
            </para>
            </param>
            <param name="dwFlags">
            <para>
            A set of flags that modify the behavior of this function. The allowed set of flags depends on the type of key specified by the
            hKey parameter.
            </para>
            <para>If the key is a symmetric key, this can be zero or the following value.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>BCRYPT_BLOCK_PADDING</term>
            <term>
            The data was padded to the next block size when it was encrypted. If this flag was used with the BCryptEncrypt function, it must
            also be specified in this function. This flag must not be used with the authenticated encryption modes (AES-CCM and AES-GCM).
            </term>
            </item>
            </list>
            <para>If the key is an asymmetric key, this can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>BCRYPT_PAD_NONE</term>
            <term>
            Do not use any padding. The pPaddingInfo parameter is not used. The cbInput parameter must be a multiple of the algorithm's block
            size. The block size can be obtained by calling the BCryptGetProperty function to get the BCRYPT_BLOCK_LENGTH property for the
            key. This will provide the size of a block for the algorithm.
            </term>
            </item>
            <item>
            <term>BCRYPT_PAD_OAEP</term>
            <term>
            The Optimal Asymmetric Encryption Padding (OAEP) scheme was used when the data was encrypted. The pPaddingInfo parameter is a
            pointer to a BCRYPT_OAEP_PADDING_INFO structure.
            </term>
            </item>
            <item>
            <term>BCRYPT_PAD_PKCS1</term>
            <term>The data was padded with a random number when the data was encrypted. The pPaddingInfo parameter is not used.</term>
            </item>
            </list>
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>STATUS_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>STATUS_AUTH_TAG_MISMATCH</term>
            <term>The computed authentication tag did not match the value supplied in the pPaddingInfo parameter.</term>
            </item>
            <item>
            <term>STATUS_BUFFER_TOO_SMALL</term>
            <term>The size specified by the cbOutput parameter is not large enough to hold the ciphertext.</term>
            </item>
            <item>
            <term>STATUS_INVALID_BUFFER_SIZE</term>
            <term>
            The cbInput parameter is not a multiple of the algorithm's block size, and the BCRYPT_BLOCK_PADDING flag was not specified in the
            dwFlags parameter.
            </term>
            </item>
            <item>
            <term>STATUS_INVALID_HANDLE</term>
            <term>The key handle in the hKey parameter is not valid.</term>
            </item>
            <item>
            <term>STATUS_INVALID_PARAMETER</term>
            <term>One or more parameters are not valid.</term>
            </item>
            <item>
            <term>STATUS_NOT_SUPPORTED</term>
            <term>The algorithm does not support decryption.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            The pbInput and pbOutput parameters can point to the same buffer. In this case, this function will perform the decryption in place.
            </para>
            <para>
            Depending on what processor modes a provider supports, <c>BCryptDecrypt</c> can be called either from user mode or kernel mode.
            Kernel mode callers can execute either at <c>PASSIVE_LEVEL</c> IRQL or <c>DISPATCH_LEVEL</c> IRQL. If the current IRQL level is
            <c>DISPATCH_LEVEL</c>, the handle provided in the hKey parameter must be derived from an algorithm handle returned by a provider
            that was opened with the <c>BCRYPT_PROV_DISPATCH</c> flag, and any pointers passed to the <c>BCryptDecrypt</c> function must
            refer to nonpaged (or locked) memory.
            </para>
            <para>
            To call this function in kernel mode, use Cng.lib, which is part of the Driver Development Kit (DDK). For more information, see
            WDK and Developer Tools. <c>Windows Server 2008 and Windows Vista:</c> To call this function in kernel mode, use Ksecdd.lib.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCryptDeleteContext(Vanara.PInvoke.BCrypt.ContextConfigTable,System.String)">
            <summary>
            <para>
            [ <c>BCryptDeleteContext</c> is available for use in the operating systems specified in the Requirements section. It may be
            altered or unavailable in subsequent versions.]
            </para>
            <para>The <c>BCryptDeleteContext</c> function deletes an existing CNG configuration context.</para>
            </summary>
            <param name="dwTable">
            <para>Identifies the configuration table to delete the context from. This can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPT_LOCAL</term>
            <term>Delete the context from the local-machine configuration table.</term>
            </item>
            <item>
            <term>CRYPT_DOMAIN</term>
            <term>This value is not available for use.</term>
            </item>
            </list>
            </param>
            <param name="pszContext">
            <para>A pointer to a null-terminated Unicode string that contains the identifier of the context to delete.</para>
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>STATUS_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>STATUS_INVALID_PARAMETER</term>
            <term>One or more parameters are not valid.</term>
            </item>
            <item>
            <term>STATUS_NO_MEMORY</term>
            <term>A memory allocation failure occurred.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para><c>BCryptDeleteContext</c> can be called only in user mode.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCryptDeriveKey(Vanara.PInvoke.BCrypt.BCRYPT_SECRET_HANDLE,System.String,Vanara.PInvoke.NCrypt.NCryptBufferDesc,Vanara.InteropServices.SafeAllocatedMemoryHandle,System.UInt32,System.UInt32@,Vanara.PInvoke.BCrypt.DeriveKeyFlags)">
             <summary>The <c>BCryptDeriveKey</c> function derives a key from a secret agreement value.</summary>
             <param name="hSharedSecret">
             The secret agreement handle to create the key from. This handle is obtained from the BCryptSecretAgreement function.
             </param>
             <param name="pwszKDF">
             <para>
             A pointer to a null-terminated Unicode string that identifies the key derivation function (KDF) to use to derive the key. This
             can be one of the following strings.
             </para>
             <para><b>BCRYPT_KDF_HASH (L"HASH")</b></para>
             <para>Use the hash key derivation function.</para>
             <para>
             If the cbDerivedKey parameter is less than the size of the derived key, this function will only copy the specified number of
             bytes to the pbDerivedKey buffer. If the cbDerivedKey parameter is greater than the size of the derived key, this function will
             copy the key to the pbDerivedKey buffer and set the variable pointed to by the pcbResult to the actual number of bytes copied.
             </para>
             <para>
             The parameters identified by the pParameterList parameter either can or must contain the following parameters, as indicated by
             the Required or optional column.
             </para>
             <list type="table">
             <listheader>
             <term>Parameter</term>
             <term>Description</term>
             <term>Required or optional</term>
             </listheader>
             <item>
             <term>KDF_HASH_ALGORITHM</term>
             <term>
             A null-terminated Unicode string that identifies the hash algorithm to use. This can be one of the standard hash algorithm
             identifiers from CNG Algorithm Identifiers or the identifier for another registered hash algorithm. If this parameter is not
             specified, the SHA1 hash algorithm is used.
             </term>
             <term>Optional</term>
             </item>
             <item>
             <term>KDF_SECRET_PREPEND</term>
             <term>A value to add to the beginning of the message input to the hash function. For more information, see Remarks.</term>
             <term>Optional</term>
             </item>
             <item>
             <term>KDF_SECRET_APPEND</term>
             <term>A value to add to the end of the message input to the hash function. For more information, see Remarks.</term>
             <term>Optional</term>
             </item>
             </list>
             <para>The call to the KDF is made as shown in the following pseudocode.</para>
             <code lang="none">
             KDF-Prepend = KDF_SECRET_PREPEND[0] +
             KDF_SECRET_PREPEND[1] +
             ... +
             KDF_SECRET_PREPEND[n]
            
             KDF-Append = KDF_SECRET_APPEND[0] +
             KDF_SECRET_APPEND[1] +
             ... +
             KDF_SECRET_APPEND[n]
            
             KDF-Output = Hash(
             KDF-Prepend +
            
             hSharedSecret +
            
             KDF-Append)
             </code>
             <para><b>BCRYPT_KDF_HMAC (L"HMAC")</b></para>
             <para>Use the Hash-Based Message Authentication Code (HMAC) key derivation function.</para>
             <para>
             If the cbDerivedKey parameter is less than the size of the derived key, this function will only copy the specified number of
             bytes to the pbDerivedKey buffer. If the cbDerivedKey parameter is greater than the size of the derived key, this function will
             copy the key to the pbDerivedKey buffer and set the variable pointed to by the pcbResult to the actual number of bytes copied.
             </para>
             <para>
             The parameters identified by the pParameterList parameter either can or must contain the following parameters, as indicated by
             the Required or optional column.
             </para>
             <list type="table">
             <listheader>
             <term>Parameter</term>
             <term>Description</term>
             <term>Required or optional</term>
             </listheader>
             <item>
             <term>KDF_HASH_ALGORITHM</term>
             <term>
             A null-terminated Unicode string that identifies the hash algorithm to use. This can be one of the standard hash algorithm
             identifiers from CNG Algorithm Identifiers or the identifier for another registered hash algorithm. If this parameter is not
             specified, the SHA1 hash algorithm is used.
             </term>
             <term>Optional</term>
             </item>
             <item>
             <term>KDF_HMAC_KEY</term>
             <term>The key to use for the pseudo-random function (PRF).</term>
             <term>Optional</term>
             </item>
             <item>
             <term>KDF_SECRET_PREPEND</term>
             <term>A value to add to the beginning of the message input to the hash function. For more information, see Remarks.</term>
             <term>Optional</term>
             </item>
             <item>
             <term>KDF_SECRET_APPEND</term>
             <term>A value to add to the end of the message input to the hash function. For more information, see Remarks.</term>
             <term>Optional</term>
             </item>
             </list>
             <para>The call to the KDF is made as shown in the following pseudocode.</para>
             <code lang="none">
             KDF-Prepend = KDF_SECRET_PREPEND[0] +
             KDF_SECRET_PREPEND[1] +
             ... +
             KDF_SECRET_PREPEND[n]
            
             KDF-Append = KDF_SECRET_APPEND[0] +
             KDF_SECRET_APPEND[1] +
             ... +
             KDF_SECRET_APPEND[n]
            
             KDF-Output = HMAC-Hash(
             KDF_HMAC_KEY,
             KDF-Prepend +
             hSharedSecret +
             KDF-Append)
             </code>
             <para><b>BCRYPT_KDF_TLS_PRF (L"TLS_PRF")</b></para>
             <para>
             Use the transport layer security (TLS) pseudo-random function (PRF) key derivation function. The size of the derived key is
             always 48 bytes, so the cbDerivedKey parameter must be 48.
             </para>
             <para>
             The parameters identified by the pParameterList parameter either can or must contain the following parameters, as indicated by
             the Required or optional column.
             </para>
             <list type="table">
             <listheader>
             <term>Parameter</term>
             <term>Description</term>
             <term>Required or optional</term>
             </listheader>
             <item>
             <term>KDF_TLS_PRF_LABEL</term>
             <term>An ANSI string that contains the PRF label.</term>
             <term>Required</term>
             </item>
             <item>
             <term>KDF_TLS_PRF_SEED</term>
             <term>The PRF seed. The seed must be 64 bytes long.</term>
             <term>Required</term>
             </item>
             <item>
             <term>KDF_TLS_PRF_PROTOCOL</term>
             <term>
             A DWORD value that specifies the TLS protocol version whose PRF algorithm is to be used. Valid values are: SSL2_PROTOCOL_VERSION
             (0x0002) SSL3_PROTOCOL_VERSION (0x0300) TLS1_PROTOCOL_VERSION (0x0301) TLS1_0_PROTOCOL_VERSION (0x0301) TLS1_1_PROTOCOL_VERSION
             (0x0302) TLS1_2_PROTOCOL_VERSION (0x0303) DTLS1_0_PROTOCOL_VERSION (0xfeff) Windows Server 2008 and Windows Vista:
             TLS1_1_PROTOCOL_VERSION, TLS1_2_PROTOCOL_VERSION and DTLS1_0_PROTOCOL_VERSION are not supported. Windows Server 2008 R2, Windows
             7, Windows Server 2008 and Windows Vista: DTLS1_0_PROTOCOL_VERSION is not supported.
             </term>
             <term>Optional</term>
             </item>
             <item>
             <term>KDF_HASH_ALGORITHM</term>
             <term>
             The CNG algorithm ID of the hash to be used with the HMAC in the PRF, for the TLS 1.2 protocol version. Valid choices are SHA-256
             and SHA-384. If not specified, SHA-256 is used.
             </term>
             <term>Optional</term>
             </item>
             </list>
             <para>The call to the KDF is made as shown in the following pseudocode.</para>
             <code lang="none">
             KDF-Output = PRF(
             hSharedSecret,
             KDF_TLS_PRF_LABEL,
             KDF_TLS_PRF_SEED)
             </code>
             <para>BCRYPT_KDF_SP80056A_CONCAT (L"SP800_56A_CONCAT")</para>
             <para>Use the SP800-56A key derivation function.</para>
             <para>
             The parameters identified by the pParameterList parameter either can or must contain the following parameters, as indicated by
             the Required or optional column. All parameter values are treated as opaque byte arrays.
             </para>
             <list type="table">
             <listheader>
             <term>Parameter</term>
             <term>Description</term>
             <term>Required or optional</term>
             </listheader>
             <item>
             <term>KDF_ALGORITHMID</term>
             <term>
             Specifies the AlgorithmID subfield of the OtherInfo field in the SP800-56A key derivation function. Indicates the intended
             purpose of the derived key.
             </term>
             <term>Required</term>
             </item>
             <item>
             <term>KDF_PARTYUINFO</term>
             <term>
             Specifies the PartyUInfo subfield of the OtherInfo field in the SP800-56A key derivation function. The field contains public
             information contributed by the initiator.
             </term>
             <term>Required</term>
             </item>
             <item>
             <term>KDF_PARTYVINFO</term>
             <term>
             Specifies the PartyVInfo subfield of the OtherInfo field in the SP800-56A key derivation function. The field contains public
             information contributed by the responder.
             </term>
             <term>Required</term>
             </item>
             <item>
             <term>KDF_SUPPPUBINFO</term>
             <term>
             Specifies the SuppPubInfo subfield of the OtherInfo field in the SP800-56A key derivation function. The field contains public
             information known to both initiator and responder.
             </term>
             <term>Optional</term>
             </item>
             <item>
             <term>KDF_SUPPPRIVINFO</term>
             <term>
             Specifies the SuppPrivInfo subfield of the OtherInfo field in the SP800-56A key derivation function. It contains private
             information known to both initiator and responder, such as a shared secret.
             </term>
             <term>Optional</term>
             </item>
             </list>
             <para>The call to the KDF is made as shown in the following pseudocode.</para>
             <code lang="none">
             KDF-Output = SP_800-56A_KDF(
             hSharedSecret,
             KDF_ALGORITHMID,
             KDF_PARTYUINFO,
             KDF_PARTYVINFO,
             KDF_SUPPPUBINFO,
             KDF_SUPPPRIVINFO)
             </code>
             <para><c>Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:</c> This value is not supported.</para>
             </param>
             <param name="pParameterList">
             The address of a BCryptBufferDesc structure that contains the KDF parameters. This parameter is optional and can be <c>NULL</c>
             if it is not needed.
             </param>
             <param name="pbDerivedKey">
             The address of a buffer that receives the key. The cbDerivedKey parameter contains the size of this buffer. If this parameter is
             <c>NULL</c>, this function will place the required size, in bytes, in the <c>ULONG</c> pointed to by the pcbResult parameter.
             </param>
             <param name="cbDerivedKey">The size, in bytes, of the pbDerivedKey buffer.</param>
             <param name="pcbResult">
             A pointer to a <c>ULONG</c> that receives the number of bytes that were copied to the pbDerivedKey buffer. If the pbDerivedKey
             parameter is <c>NULL</c>, this function will place the required size, in bytes, in the <c>ULONG</c> pointed to by this parameter.
             </param>
             <param name="dwFlags">
             <para>A set of flags that modify the behavior of this function. This can be zero or the following value.</para>
             <list type="table">
             <listheader>
             <term>Value</term>
             <term>Meaning</term>
             </listheader>
             <item>
             <term>KDF_USE_SECRET_AS_HMAC_KEY_FLAG</term>
             <term>
             The secret agreement value will also serve as the HMAC key. If this flag is specified, the KDF_HMAC_KEY parameter should not be
             included in the set of parameters in the pParameterList parameter. This flag is only used by the BCRYPT_KDF_HMAC key derivation function.
             </term>
             </item>
             </list>
             </param>
             <returns>
             <para>Returns a status code that indicates the success or failure of the function.</para>
             <para>Possible return codes include, but are not limited to, the following.</para>
             <list type="table">
             <listheader>
             <term>Return code</term>
             <term>Description</term>
             </listheader>
             <item>
             <term>STATUS_SUCCESS</term>
             <term>The function was successful.</term>
             </item>
             <item>
             <term>STATUS_INTERNAL_ERROR</term>
             <term>An internal error occurred.</term>
             </item>
             <item>
             <term>STATUS_INVALID_HANDLE</term>
             <term>The handle in the hSharedSecret parameter is not valid.</term>
             </item>
             <item>
             <term>STATUS_INVALID_PARAMETER</term>
             <term>One or more parameters are not valid.</term>
             </item>
             </list>
             </returns>
             <remarks>
             <para>
             The BCryptBufferDesc structure in the pParameterList parameter can contain more than one of the <c>KDF_SECRET_PREPEND</c> and
             <c>KDF_SECRET_APPEND</c> parameters. If more than one of these parameters is specified, the parameter values are concatenated in
             the order in which they are contained in the array before the KDF is called. For example, assume the following parameter values
             are specified.
             </para>
             <para>If the above parameter values are specified, the concatenated values to the actual KDF are as follows.</para>
             <para>
             Depending on what processor modes a provider supports, <c>BCryptDeriveKey</c> can be called either from user mode or kernel mode.
             Kernel mode callers can execute either at <c>PASSIVE_LEVEL</c> IRQL or <c>DISPATCH_LEVEL</c> IRQL. If the current IRQL level is
             <c>DISPATCH_LEVEL</c>, the handle provided in the hSharedSecret parameter must be located in nonpaged (or locked) memory and must
             be derived from an algorithm handle returned by a provider that was opened by using the <c>BCRYPT_PROV_DISPATCH</c> flag.
             </para>
             <para>
             To call this function in kernel mode, use Cng.lib, which is part of the Driver Development Kit (DDK). For more information, see
             WDK and Developer Tools. <c>Windows Server 2008 and Windows Vista:</c> To call this function in kernel mode, use Ksecdd.lib.
             </para>
             </remarks>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCryptDeriveKey(Vanara.PInvoke.BCrypt.BCRYPT_SECRET_HANDLE,System.String,Vanara.PInvoke.NCrypt.NCryptBufferDesc,System.IntPtr,System.UInt32,System.UInt32@,Vanara.PInvoke.BCrypt.DeriveKeyFlags)">
             <summary>The <c>BCryptDeriveKey</c> function derives a key from a secret agreement value.</summary>
             <param name="hSharedSecret">
             The secret agreement handle to create the key from. This handle is obtained from the BCryptSecretAgreement function.
             </param>
             <param name="pwszKDF">
             <para>
             A pointer to a null-terminated Unicode string that identifies the key derivation function (KDF) to use to derive the key. This
             can be one of the following strings.
             </para>
             <para><b>BCRYPT_KDF_HASH (L"HASH")</b></para>
             <para>Use the hash key derivation function.</para>
             <para>
             If the cbDerivedKey parameter is less than the size of the derived key, this function will only copy the specified number of
             bytes to the pbDerivedKey buffer. If the cbDerivedKey parameter is greater than the size of the derived key, this function will
             copy the key to the pbDerivedKey buffer and set the variable pointed to by the pcbResult to the actual number of bytes copied.
             </para>
             <para>
             The parameters identified by the pParameterList parameter either can or must contain the following parameters, as indicated by
             the Required or optional column.
             </para>
             <list type="table">
             <listheader>
             <term>Parameter</term>
             <term>Description</term>
             <term>Required or optional</term>
             </listheader>
             <item>
             <term>KDF_HASH_ALGORITHM</term>
             <term>
             A null-terminated Unicode string that identifies the hash algorithm to use. This can be one of the standard hash algorithm
             identifiers from CNG Algorithm Identifiers or the identifier for another registered hash algorithm. If this parameter is not
             specified, the SHA1 hash algorithm is used.
             </term>
             <term>Optional</term>
             </item>
             <item>
             <term>KDF_SECRET_PREPEND</term>
             <term>A value to add to the beginning of the message input to the hash function. For more information, see Remarks.</term>
             <term>Optional</term>
             </item>
             <item>
             <term>KDF_SECRET_APPEND</term>
             <term>A value to add to the end of the message input to the hash function. For more information, see Remarks.</term>
             <term>Optional</term>
             </item>
             </list>
             <para>The call to the KDF is made as shown in the following pseudocode.</para>
             <code lang="none">
             KDF-Prepend = KDF_SECRET_PREPEND[0] +
             KDF_SECRET_PREPEND[1] +
             ... +
             KDF_SECRET_PREPEND[n]
            
             KDF-Append = KDF_SECRET_APPEND[0] +
             KDF_SECRET_APPEND[1] +
             ... +
             KDF_SECRET_APPEND[n]
            
             KDF-Output = Hash(
             KDF-Prepend +
            
             hSharedSecret +
            
             KDF-Append)
             </code>
             <para><b>BCRYPT_KDF_HMAC (L"HMAC")</b></para>
             <para>Use the Hash-Based Message Authentication Code (HMAC) key derivation function.</para>
             <para>
             If the cbDerivedKey parameter is less than the size of the derived key, this function will only copy the specified number of
             bytes to the pbDerivedKey buffer. If the cbDerivedKey parameter is greater than the size of the derived key, this function will
             copy the key to the pbDerivedKey buffer and set the variable pointed to by the pcbResult to the actual number of bytes copied.
             </para>
             <para>
             The parameters identified by the pParameterList parameter either can or must contain the following parameters, as indicated by
             the Required or optional column.
             </para>
             <list type="table">
             <listheader>
             <term>Parameter</term>
             <term>Description</term>
             <term>Required or optional</term>
             </listheader>
             <item>
             <term>KDF_HASH_ALGORITHM</term>
             <term>
             A null-terminated Unicode string that identifies the hash algorithm to use. This can be one of the standard hash algorithm
             identifiers from CNG Algorithm Identifiers or the identifier for another registered hash algorithm. If this parameter is not
             specified, the SHA1 hash algorithm is used.
             </term>
             <term>Optional</term>
             </item>
             <item>
             <term>KDF_HMAC_KEY</term>
             <term>The key to use for the pseudo-random function (PRF).</term>
             <term>Optional</term>
             </item>
             <item>
             <term>KDF_SECRET_PREPEND</term>
             <term>A value to add to the beginning of the message input to the hash function. For more information, see Remarks.</term>
             <term>Optional</term>
             </item>
             <item>
             <term>KDF_SECRET_APPEND</term>
             <term>A value to add to the end of the message input to the hash function. For more information, see Remarks.</term>
             <term>Optional</term>
             </item>
             </list>
             <para>The call to the KDF is made as shown in the following pseudocode.</para>
             <code lang="none">
             KDF-Prepend = KDF_SECRET_PREPEND[0] +
             KDF_SECRET_PREPEND[1] +
             ... +
             KDF_SECRET_PREPEND[n]
            
             KDF-Append = KDF_SECRET_APPEND[0] +
             KDF_SECRET_APPEND[1] +
             ... +
             KDF_SECRET_APPEND[n]
            
             KDF-Output = HMAC-Hash(
             KDF_HMAC_KEY,
             KDF-Prepend +
             hSharedSecret +
             KDF-Append)
             </code>
             <para><b>BCRYPT_KDF_TLS_PRF (L"TLS_PRF")</b></para>
             <para>
             Use the transport layer security (TLS) pseudo-random function (PRF) key derivation function. The size of the derived key is
             always 48 bytes, so the cbDerivedKey parameter must be 48.
             </para>
             <para>
             The parameters identified by the pParameterList parameter either can or must contain the following parameters, as indicated by
             the Required or optional column.
             </para>
             <list type="table">
             <listheader>
             <term>Parameter</term>
             <term>Description</term>
             <term>Required or optional</term>
             </listheader>
             <item>
             <term>KDF_TLS_PRF_LABEL</term>
             <term>An ANSI string that contains the PRF label.</term>
             <term>Required</term>
             </item>
             <item>
             <term>KDF_TLS_PRF_SEED</term>
             <term>The PRF seed. The seed must be 64 bytes long.</term>
             <term>Required</term>
             </item>
             <item>
             <term>KDF_TLS_PRF_PROTOCOL</term>
             <term>
             A DWORD value that specifies the TLS protocol version whose PRF algorithm is to be used. Valid values are: SSL2_PROTOCOL_VERSION
             (0x0002) SSL3_PROTOCOL_VERSION (0x0300) TLS1_PROTOCOL_VERSION (0x0301) TLS1_0_PROTOCOL_VERSION (0x0301) TLS1_1_PROTOCOL_VERSION
             (0x0302) TLS1_2_PROTOCOL_VERSION (0x0303) DTLS1_0_PROTOCOL_VERSION (0xfeff) Windows Server 2008 and Windows Vista:
             TLS1_1_PROTOCOL_VERSION, TLS1_2_PROTOCOL_VERSION and DTLS1_0_PROTOCOL_VERSION are not supported. Windows Server 2008 R2, Windows
             7, Windows Server 2008 and Windows Vista: DTLS1_0_PROTOCOL_VERSION is not supported.
             </term>
             <term>Optional</term>
             </item>
             <item>
             <term>KDF_HASH_ALGORITHM</term>
             <term>
             The CNG algorithm ID of the hash to be used with the HMAC in the PRF, for the TLS 1.2 protocol version. Valid choices are SHA-256
             and SHA-384. If not specified, SHA-256 is used.
             </term>
             <term>Optional</term>
             </item>
             </list>
             <para>The call to the KDF is made as shown in the following pseudocode.</para>
             <code lang="none">
             KDF-Output = PRF(
             hSharedSecret,
             KDF_TLS_PRF_LABEL,
             KDF_TLS_PRF_SEED)
             </code>
             <para>BCRYPT_KDF_SP80056A_CONCAT (L"SP800_56A_CONCAT")</para>
             <para>Use the SP800-56A key derivation function.</para>
             <para>
             The parameters identified by the pParameterList parameter either can or must contain the following parameters, as indicated by
             the Required or optional column. All parameter values are treated as opaque byte arrays.
             </para>
             <list type="table">
             <listheader>
             <term>Parameter</term>
             <term>Description</term>
             <term>Required or optional</term>
             </listheader>
             <item>
             <term>KDF_ALGORITHMID</term>
             <term>
             Specifies the AlgorithmID subfield of the OtherInfo field in the SP800-56A key derivation function. Indicates the intended
             purpose of the derived key.
             </term>
             <term>Required</term>
             </item>
             <item>
             <term>KDF_PARTYUINFO</term>
             <term>
             Specifies the PartyUInfo subfield of the OtherInfo field in the SP800-56A key derivation function. The field contains public
             information contributed by the initiator.
             </term>
             <term>Required</term>
             </item>
             <item>
             <term>KDF_PARTYVINFO</term>
             <term>
             Specifies the PartyVInfo subfield of the OtherInfo field in the SP800-56A key derivation function. The field contains public
             information contributed by the responder.
             </term>
             <term>Required</term>
             </item>
             <item>
             <term>KDF_SUPPPUBINFO</term>
             <term>
             Specifies the SuppPubInfo subfield of the OtherInfo field in the SP800-56A key derivation function. The field contains public
             information known to both initiator and responder.
             </term>
             <term>Optional</term>
             </item>
             <item>
             <term>KDF_SUPPPRIVINFO</term>
             <term>
             Specifies the SuppPrivInfo subfield of the OtherInfo field in the SP800-56A key derivation function. It contains private
             information known to both initiator and responder, such as a shared secret.
             </term>
             <term>Optional</term>
             </item>
             </list>
             <para>The call to the KDF is made as shown in the following pseudocode.</para>
             <code lang="none">
             KDF-Output = SP_800-56A_KDF(
             hSharedSecret,
             KDF_ALGORITHMID,
             KDF_PARTYUINFO,
             KDF_PARTYVINFO,
             KDF_SUPPPUBINFO,
             KDF_SUPPPRIVINFO)
             </code>
             <para><c>Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:</c> This value is not supported.</para>
             </param>
             <param name="pParameterList">
             The address of a BCryptBufferDesc structure that contains the KDF parameters. This parameter is optional and can be <c>NULL</c>
             if it is not needed.
             </param>
             <param name="pbDerivedKey">
             The address of a buffer that receives the key. The cbDerivedKey parameter contains the size of this buffer. If this parameter is
             <c>NULL</c>, this function will place the required size, in bytes, in the <c>ULONG</c> pointed to by the pcbResult parameter.
             </param>
             <param name="cbDerivedKey">The size, in bytes, of the pbDerivedKey buffer.</param>
             <param name="pcbResult">
             A pointer to a <c>ULONG</c> that receives the number of bytes that were copied to the pbDerivedKey buffer. If the pbDerivedKey
             parameter is <c>NULL</c>, this function will place the required size, in bytes, in the <c>ULONG</c> pointed to by this parameter.
             </param>
             <param name="dwFlags">
             <para>A set of flags that modify the behavior of this function. This can be zero or the following value.</para>
             <list type="table">
             <listheader>
             <term>Value</term>
             <term>Meaning</term>
             </listheader>
             <item>
             <term>KDF_USE_SECRET_AS_HMAC_KEY_FLAG</term>
             <term>
             The secret agreement value will also serve as the HMAC key. If this flag is specified, the KDF_HMAC_KEY parameter should not be
             included in the set of parameters in the pParameterList parameter. This flag is only used by the BCRYPT_KDF_HMAC key derivation function.
             </term>
             </item>
             </list>
             </param>
             <returns>
             <para>Returns a status code that indicates the success or failure of the function.</para>
             <para>Possible return codes include, but are not limited to, the following.</para>
             <list type="table">
             <listheader>
             <term>Return code</term>
             <term>Description</term>
             </listheader>
             <item>
             <term>STATUS_SUCCESS</term>
             <term>The function was successful.</term>
             </item>
             <item>
             <term>STATUS_INTERNAL_ERROR</term>
             <term>An internal error occurred.</term>
             </item>
             <item>
             <term>STATUS_INVALID_HANDLE</term>
             <term>The handle in the hSharedSecret parameter is not valid.</term>
             </item>
             <item>
             <term>STATUS_INVALID_PARAMETER</term>
             <term>One or more parameters are not valid.</term>
             </item>
             </list>
             </returns>
             <remarks>
             <para>
             The BCryptBufferDesc structure in the pParameterList parameter can contain more than one of the <c>KDF_SECRET_PREPEND</c> and
             <c>KDF_SECRET_APPEND</c> parameters. If more than one of these parameters is specified, the parameter values are concatenated in
             the order in which they are contained in the array before the KDF is called. For example, assume the following parameter values
             are specified.
             </para>
             <para>If the above parameter values are specified, the concatenated values to the actual KDF are as follows.</para>
             <para>
             Depending on what processor modes a provider supports, <c>BCryptDeriveKey</c> can be called either from user mode or kernel mode.
             Kernel mode callers can execute either at <c>PASSIVE_LEVEL</c> IRQL or <c>DISPATCH_LEVEL</c> IRQL. If the current IRQL level is
             <c>DISPATCH_LEVEL</c>, the handle provided in the hSharedSecret parameter must be located in nonpaged (or locked) memory and must
             be derived from an algorithm handle returned by a provider that was opened by using the <c>BCRYPT_PROV_DISPATCH</c> flag.
             </para>
             <para>
             To call this function in kernel mode, use Cng.lib, which is part of the Driver Development Kit (DDK). For more information, see
             WDK and Developer Tools. <c>Windows Server 2008 and Windows Vista:</c> To call this function in kernel mode, use Ksecdd.lib.
             </para>
             </remarks>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCryptDeriveKeyCapi(Vanara.PInvoke.BCrypt.BCRYPT_HASH_HANDLE,Vanara.PInvoke.BCrypt.BCRYPT_ALG_HANDLE,Vanara.InteropServices.SafeAllocatedMemoryHandle,System.UInt32,System.UInt32)">
            <summary>
            <para>The <c>BCryptDeriveKeyCapi</c> function derives a key from a hash value.</para>
            <para>
            This function is provided as a helper function to assist in migrating legacy Cryptography API (CAPI)–based applications to use
            Cryptography API: Next Generation (CNG). The <c>BCryptDeriveKeyCapi</c> function performs the key derivation in a manner that is
            compatible with the CAPI CryptDeriveKey function.
            </para>
            </summary>
            <param name="hHash">
            The handle of the hash object. The handle is obtained by calling the BCryptCreateHash function. When you have finished using the
            handle, you must free it by calling the BCryptDestroyHash function.
            </param>
            <param name="hTargetAlg">
            <para>The handle of the algorithm object. This can be an ALG_ID value that is compatible with the CryptDeriveKey function.</para>
            <para>
            <c>Note</c> Limitations in CAPI and key expansion prevent the use of any hash algorithm that generates an output that is larger
            than 512 bits.
            </para>
            </param>
            <param name="pbDerivedKey">A pointer to the buffer that receives the derived key.</param>
            <param name="cbDerivedKey">The size, in characters, of the derived key pointed to by the pbDerivedKey parameter.</param>
            <param name="dwFlags">This parameter is reserved and must be set to zero.</param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>STATUS_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>STATUS_INVALID_HANDLE</term>
            <term>The handle in the hHash or hTargetAlg parameter is not valid.</term>
            </item>
            <item>
            <term>STATUS_INVALID_PARAMETER</term>
            <term>The value in the cbDerivedKey parameter is larger than twice the output size of the hash function.</term>
            </item>
            <item>
            <term>STATUS_NO_MEMORY</term>
            <term>A memory allocation failure occurred.</term>
            </item>
            </list>
            </returns>
            <remarks>This function does not support the PK salt functionality of the CAPI CryptDeriveKey function.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCryptDeriveKeyCapi(Vanara.PInvoke.BCrypt.BCRYPT_HASH_HANDLE,Vanara.PInvoke.BCrypt.BCRYPT_ALG_HANDLE,System.IntPtr,System.UInt32,System.UInt32)">
            <summary>
            <para>The <c>BCryptDeriveKeyCapi</c> function derives a key from a hash value.</para>
            <para>
            This function is provided as a helper function to assist in migrating legacy Cryptography API (CAPI)–based applications to use
            Cryptography API: Next Generation (CNG). The <c>BCryptDeriveKeyCapi</c> function performs the key derivation in a manner that is
            compatible with the CAPI CryptDeriveKey function.
            </para>
            </summary>
            <param name="hHash">
            The handle of the hash object. The handle is obtained by calling the BCryptCreateHash function. When you have finished using the
            handle, you must free it by calling the BCryptDestroyHash function.
            </param>
            <param name="hTargetAlg">
            <para>The handle of the algorithm object. This can be an ALG_ID value that is compatible with the CryptDeriveKey function.</para>
            <para>
            <c>Note</c> Limitations in CAPI and key expansion prevent the use of any hash algorithm that generates an output that is larger
            than 512 bits.
            </para>
            </param>
            <param name="pbDerivedKey">A pointer to the buffer that receives the derived key.</param>
            <param name="cbDerivedKey">The size, in characters, of the derived key pointed to by the pbDerivedKey parameter.</param>
            <param name="dwFlags">This parameter is reserved and must be set to zero.</param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>STATUS_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>STATUS_INVALID_HANDLE</term>
            <term>The handle in the hHash or hTargetAlg parameter is not valid.</term>
            </item>
            <item>
            <term>STATUS_INVALID_PARAMETER</term>
            <term>The value in the cbDerivedKey parameter is larger than twice the output size of the hash function.</term>
            </item>
            <item>
            <term>STATUS_NO_MEMORY</term>
            <term>A memory allocation failure occurred.</term>
            </item>
            </list>
            </returns>
            <remarks>This function does not support the PK salt functionality of the CAPI CryptDeriveKey function.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCryptDeriveKeyPBKDF2(Vanara.PInvoke.BCrypt.BCRYPT_ALG_HANDLE,Vanara.InteropServices.SafeAllocatedMemoryHandle,System.UInt32,Vanara.InteropServices.SafeAllocatedMemoryHandle,System.UInt32,System.UInt64,Vanara.InteropServices.SafeAllocatedMemoryHandle,System.UInt32,System.UInt32)">
            <summary>
            The <c>BCryptDeriveKeyPBKDF2</c> function derives a key from a hash value by using the PBKDF2 key derivation algorithm as defined
            by RFC 2898.
            </summary>
            <param name="hPrf">
            <para>
            The handle of an algorithm provider that provides the pseudo-random function. This should be an algorithm provider that performs
            a Message Authentication Code computation. When you use the default Microsoft algorithm provider, any hashing algorithm opened by
            using the <c>BCRYPT_ALG_HANDLE_HMAC_FLAG</c> flag can be used.
            </para>
            <para><c>Note</c> Only algorithms that implement the BCRYPT_IS_KEYED_HASH property can be used to populate this parameter.</para>
            </param>
            <param name="pbPassword">A pointer to a buffer that contains the password parameter for the PBKDF2 key derivation algorithm.</param>
            <param name="cbPassword">The length, in bytes, of the data in the buffer pointed to by the pbPassword parameter.</param>
            <param name="pbSalt">
            <para>A pointer to a buffer that contains the salt argument for the PBKDF2 key derivation algorithm.</para>
            <para><c>Note</c> Any information that is not secret and that is used in the key derivation should be passed in this buffer.</para>
            </param>
            <param name="cbSalt">The length, in bytes, of the salt argument pointed to by the pbSalt parameter.</param>
            <param name="cIterations">The iteration count for the PBKDF2 key derivation algorithm.</param>
            <param name="pbDerivedKey">A pointer to a buffer that receives the derived key.</param>
            <param name="cbDerivedKey">The length, in bytes, of the derived key returned in the buffer pointed to by the pbDerivedKey parameter.</param>
            <param name="dwFlags">This parameter is reserved and must be set to zero.</param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>STATUS_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>STATUS_INVALID_HANDLE</term>
            <term>The handle in the hPrf parameter is not valid.</term>
            </item>
            <item>
            <term>STATUS_INVALID_PARAMETER</term>
            <term>One or more parameters are not valid.</term>
            </item>
            <item>
            <term>STATUS_NO_MEMORY</term>
            <term>A memory allocation failure occurred.</term>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCryptDeriveKeyPBKDF2(Vanara.PInvoke.BCrypt.BCRYPT_ALG_HANDLE,System.IntPtr,System.UInt32,System.IntPtr,System.UInt32,System.UInt64,System.IntPtr,System.UInt32,System.UInt32)">
            <summary>
            The <c>BCryptDeriveKeyPBKDF2</c> function derives a key from a hash value by using the PBKDF2 key derivation algorithm as defined
            by RFC 2898.
            </summary>
            <param name="hPrf">
            <para>
            The handle of an algorithm provider that provides the pseudo-random function. This should be an algorithm provider that performs
            a Message Authentication Code computation. When you use the default Microsoft algorithm provider, any hashing algorithm opened by
            using the <c>BCRYPT_ALG_HANDLE_HMAC_FLAG</c> flag can be used.
            </para>
            <para><c>Note</c> Only algorithms that implement the BCRYPT_IS_KEYED_HASH property can be used to populate this parameter.</para>
            </param>
            <param name="pbPassword">A pointer to a buffer that contains the password parameter for the PBKDF2 key derivation algorithm.</param>
            <param name="cbPassword">The length, in bytes, of the data in the buffer pointed to by the pbPassword parameter.</param>
            <param name="pbSalt">
            <para>A pointer to a buffer that contains the salt argument for the PBKDF2 key derivation algorithm.</para>
            <para><c>Note</c> Any information that is not secret and that is used in the key derivation should be passed in this buffer.</para>
            </param>
            <param name="cbSalt">The length, in bytes, of the salt argument pointed to by the pbSalt parameter.</param>
            <param name="cIterations">The iteration count for the PBKDF2 key derivation algorithm.</param>
            <param name="pbDerivedKey">A pointer to a buffer that receives the derived key.</param>
            <param name="cbDerivedKey">The length, in bytes, of the derived key returned in the buffer pointed to by the pbDerivedKey parameter.</param>
            <param name="dwFlags">This parameter is reserved and must be set to zero.</param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>STATUS_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>STATUS_INVALID_HANDLE</term>
            <term>The handle in the hPrf parameter is not valid.</term>
            </item>
            <item>
            <term>STATUS_INVALID_PARAMETER</term>
            <term>One or more parameters are not valid.</term>
            </item>
            <item>
            <term>STATUS_NO_MEMORY</term>
            <term>A memory allocation failure occurred.</term>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCryptDestroyHash(Vanara.PInvoke.BCrypt.BCRYPT_HASH_HANDLE)">
            <summary>
            <para>The <c>BCryptDestroyHash</c> function destroys a hash or Message Authentication Code (MAC) object.</para>
            </summary>
            <param name="hHash">
            <para>The handle of the hash or MAC object to destroy. This handle is obtained by using the BCryptCreateHash function.</para>
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>STATUS_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>STATUS_INVALID_HANDLE</term>
            <term>The algorithm handle in the hHash parameter is not valid.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            Depending on what processor modes a provider supports, <c>BCryptDestroyHash</c> can be called either from user mode or kernel
            mode. Kernel mode callers can execute either at <c>PASSIVE_LEVEL</c> IRQL or <c>DISPATCH_LEVEL</c> IRQL. If the current IRQL
            level is <c>DISPATCH_LEVEL</c>, the handle provided in the hHash parameter must be derived from an algorithm handle returned by a
            provider that was opened by using the <c>BCRYPT_PROV_DISPATCH</c> flag.
            </para>
            <para>
            To call this function in kernel mode, use Cng.lib, which is part of the Driver Development Kit (DDK). For more information, see
            WDK and Developer Tools. <c>Windows Server 2008 and Windows Vista:</c> To call this function in kernel mode, use Ksecdd.lib.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCryptDestroyKey(Vanara.PInvoke.BCrypt.BCRYPT_KEY_HANDLE)">
            <summary>The <c>BCryptDestroyKey</c> function destroys a key.</summary>
            <param name="hKey">The handle of the key to destroy.</param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>STATUS_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>STATUS_INVALID_HANDLE</term>
            <term>The key handle in the hKey parameter is not valid.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            Depending on what processor modes a provider supports, <c>BCryptDestroyKey</c> can be called either from user mode or kernel
            mode. Kernel mode callers can execute either at <c>PASSIVE_LEVEL</c> IRQL or <c>DISPATCH_LEVEL</c> IRQL. If the current IRQL
            level is <c>DISPATCH_LEVEL</c>, the handle provided in the hKey parameter must be derived from an algorithm handle returned by a
            provider that was opened with the <c>BCRYPT_PROV_DISPATCH</c> flag.
            </para>
            <para>
            To call this function in kernel mode, use Cng.lib, which is part of the Driver Development Kit (DDK). For more information, see
            WDK and Developer Tools. <c>Windows Server 2008 and Windows Vista:</c> To call this function in kernel mode, use Ksecdd.lib.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCryptDestroySecret(Vanara.PInvoke.BCrypt.BCRYPT_SECRET_HANDLE)">
            <summary>
            <para>
            The <c>BCryptDestroySecret</c> function destroys a secret agreement handle that was created by using the BCryptSecretAgreement function.
            </para>
            </summary>
            <param name="hSecret">
            <para>The <c>BCRYPT_SECRET_HANDLE</c> to be destroyed.</para>
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>STATUS_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>STATUS_INVALID_HANDLE</term>
            <term>The handle in the hSecret parameter is not valid.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            Depending on what processor modes a provider supports, <c>BCryptDestroySecret</c> can be called either from user mode or kernel
            mode. Kernel mode callers can execute either at <c>PASSIVE_LEVEL</c> IRQL or <c>DISPATCH_LEVEL</c> IRQL. If the current IRQL
            level is <c>DISPATCH_LEVEL</c>, the handle provided in the hSecret parameter must be derived from an algorithm handle returned by
            a provider that was opened by using the <c>BCRYPT_PROV_DISPATCH</c> flag.
            </para>
            <para>
            To call this function in kernel mode, use Cng.lib, which is part of the Driver Development Kit (DDK). For more information, see
            WDK and Developer Tools. <c>Windows Server 2008 and Windows Vista:</c> To call this function in kernel mode, use Ksecdd.lib.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCryptDuplicateHash(Vanara.PInvoke.BCrypt.BCRYPT_HASH_HANDLE,Vanara.PInvoke.BCrypt.SafeBCRYPT_HASH_HANDLE@,System.IntPtr,System.UInt32,System.UInt32)">
            <summary>
            <para>
            The <c>BCryptDuplicateHash</c> function duplicates an existing hash or Message Authentication Code (MAC) object. The duplicate
            object contains all state and data contained in the original object at the point of duplication.
            </para>
            </summary>
            <param name="hHash">
            <para>The handle of the hash or MAC object to duplicate.</para>
            </param>
            <param name="phNewHash">
            <para>A pointer to a <c>BCRYPT_HASH_HANDLE</c> value that receives the handle that represents the duplicate hash or MAC object.</para>
            </param>
            <param name="pbHashObject">
            <para>
            A pointer to a buffer that receives the duplicate hash or MAC object. The cbHashObject parameter contains the size of this
            buffer. The required size of this buffer can be obtained by calling the BCryptGetProperty function to get the
            <c>BCRYPT_OBJECT_LENGTH</c> property. This will provide the size of the hash object for the specified algorithm.
            </para>
            <para>When the duplicate hash handle is released, free this memory.</para>
            </param>
            <param name="cbHashObject">
            <para>The size, in bytes, of the pbHashObject buffer.</para>
            </param>
            <param name="dwFlags">
            <para>
            A set of flags that modify the behavior of this function. No flags are currently defined, so this parameter should be zero.
            </para>
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>STATUS_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>STATUS_BUFFER_TOO_SMALL</term>
            <term>The size of the hash object specified by the cbHashObject parameter is not large enough to hold the hash object.</term>
            </item>
            <item>
            <term>STATUS_INVALID_HANDLE</term>
            <term>The hash handle in the hHash parameter is not valid.</term>
            </item>
            <item>
            <term>STATUS_INVALID_PARAMETER</term>
            <term>One or more parameters are not valid.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            This function is useful when computing a hash or MAC over a block of common data. After the common data has been processed, the
            hash or MAC object can be duplicated, and then the unique data can be added to the individual objects.
            </para>
            <para>
            Depending on what processor modes a provider supports, <c>BCryptDuplicateHash</c> can be called either from user mode or kernel
            mode. Kernel mode callers can execute either at <c>PASSIVE_LEVEL</c> IRQL or <c>DISPATCH_LEVEL</c> IRQL. If the current IRQL
            level is <c>DISPATCH_LEVEL</c>, the handle provided in the hHash parameter must be derived from an algorithm handle returned by a
            provider that was opened by using the <c>BCRYPT_PROV_DISPATCH</c> flag, and any pointers passed to the BCryptDestroyKey function
            must refer to nonpaged (or locked) memory.
            </para>
            <para>
            To call this function in kernel mode, use Cng.lib, which is part of the Driver Development Kit (DDK). For more information, see
            WDK and Developer Tools. <c>Windows Server 2008 and Windows Vista:</c> To call this function in kernel mode, use Ksecdd.lib.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCryptDuplicateHash(Vanara.PInvoke.BCrypt.BCRYPT_HASH_HANDLE,Vanara.PInvoke.BCrypt.SafeBCRYPT_HASH_HANDLE@,Vanara.InteropServices.SafeAllocatedMemoryHandle,System.UInt32,System.UInt32)">
            <summary>
            <para>
            The <c>BCryptDuplicateHash</c> function duplicates an existing hash or Message Authentication Code (MAC) object. The duplicate
            object contains all state and data contained in the original object at the point of duplication.
            </para>
            </summary>
            <param name="hHash">
            <para>The handle of the hash or MAC object to duplicate.</para>
            </param>
            <param name="phNewHash">
            <para>A pointer to a <c>BCRYPT_HASH_HANDLE</c> value that receives the handle that represents the duplicate hash or MAC object.</para>
            </param>
            <param name="pbHashObject">
            <para>
            A pointer to a buffer that receives the duplicate hash or MAC object. The cbHashObject parameter contains the size of this
            buffer. The required size of this buffer can be obtained by calling the BCryptGetProperty function to get the
            <c>BCRYPT_OBJECT_LENGTH</c> property. This will provide the size of the hash object for the specified algorithm.
            </para>
            <para>When the duplicate hash handle is released, free this memory.</para>
            </param>
            <param name="cbHashObject">
            <para>The size, in bytes, of the pbHashObject buffer.</para>
            </param>
            <param name="dwFlags">
            <para>
            A set of flags that modify the behavior of this function. No flags are currently defined, so this parameter should be zero.
            </para>
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>STATUS_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>STATUS_BUFFER_TOO_SMALL</term>
            <term>The size of the hash object specified by the cbHashObject parameter is not large enough to hold the hash object.</term>
            </item>
            <item>
            <term>STATUS_INVALID_HANDLE</term>
            <term>The hash handle in the hHash parameter is not valid.</term>
            </item>
            <item>
            <term>STATUS_INVALID_PARAMETER</term>
            <term>One or more parameters are not valid.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            This function is useful when computing a hash or MAC over a block of common data. After the common data has been processed, the
            hash or MAC object can be duplicated, and then the unique data can be added to the individual objects.
            </para>
            <para>
            Depending on what processor modes a provider supports, <c>BCryptDuplicateHash</c> can be called either from user mode or kernel
            mode. Kernel mode callers can execute either at <c>PASSIVE_LEVEL</c> IRQL or <c>DISPATCH_LEVEL</c> IRQL. If the current IRQL
            level is <c>DISPATCH_LEVEL</c>, the handle provided in the hHash parameter must be derived from an algorithm handle returned by a
            provider that was opened by using the <c>BCRYPT_PROV_DISPATCH</c> flag, and any pointers passed to the BCryptDestroyKey function
            must refer to nonpaged (or locked) memory.
            </para>
            <para>
            To call this function in kernel mode, use Cng.lib, which is part of the Driver Development Kit (DDK). For more information, see
            WDK and Developer Tools. <c>Windows Server 2008 and Windows Vista:</c> To call this function in kernel mode, use Ksecdd.lib.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCryptDuplicateKey(Vanara.PInvoke.BCrypt.BCRYPT_KEY_HANDLE,Vanara.PInvoke.BCrypt.SafeBCRYPT_KEY_HANDLE@,System.IntPtr,System.UInt32,System.UInt32)">
            <summary>
            <para>The <c>BCryptDuplicateKey</c> function creates a duplicate of a symmetric key.</para>
            </summary>
            <param name="hKey">
            <para>The handle of the key to duplicate. This must be a handle to a symmetric key.</para>
            </param>
            <param name="phNewKey">
            <para>
            A pointer to a <c>BCRYPT_KEY_HANDLE</c> variable that receives the handle of the duplicate key. This handle is used in subsequent
            functions that require a key, such as BCryptEncrypt. This handle must be released when it is no longer needed by passing it to
            the BCryptDestroyKey function.
            </para>
            </param>
            <param name="pbKeyObject">
            <para>
            A pointer to a buffer that receives the duplicate key object. The cbKeyObject parameter contains the size of this buffer. The
            required size of this buffer can be obtained by calling the BCryptGetProperty function to get the <c>BCRYPT_OBJECT_LENGTH</c>
            property. This will provide the size of the key object for the specified algorithm.
            </para>
            <para>This memory can only be freed after the phNewKey key handle is destroyed.</para>
            </param>
            <param name="cbKeyObject">
            <para>The size, in bytes, of the pbKeyObject buffer.</para>
            </param>
            <param name="dwFlags">
            <para>
            A set of flags that modify the behavior of this function. No flags are currently defined, so this parameter should be zero.
            </para>
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>STATUS_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>STATUS_BUFFER_TOO_SMALL</term>
            <term>The size of the key object specified by the cbKeyObject parameter is not large enough to hold the key object.</term>
            </item>
            <item>
            <term>STATUS_INVALID_HANDLE</term>
            <term>
            The key handle in the hKey parameter is not valid. This value is also returned if the key to duplicate is not a symmetric key.
            </term>
            </item>
            <item>
            <term>STATUS_INVALID_PARAMETER</term>
            <term>One or more parameters are not valid.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            Depending on what processor modes a provider supports, <c>BCryptDuplicateKey</c> can be called either from user mode or kernel
            mode. Kernel mode callers can execute either at <c>PASSIVE_LEVEL</c> IRQL or <c>DISPATCH_LEVEL</c> IRQL. If the current IRQL
            level is <c>DISPATCH_LEVEL</c>, the handle provided in the hKey parameter must be derived from an algorithm handle returned by a
            provider that was opened with the <c>BCRYPT_PROV_DISPATCH</c> flag, and any pointers passed to the <c>BCryptDuplicateKey</c>
            function must refer to nonpaged (or locked) memory.
            </para>
            <para>
            To call this function in kernel mode, use Cng.lib, which is part of the Driver Development Kit (DDK). For more information, see
            WDK and Developer Tools. <c>Windows Server 2008 and Windows Vista:</c> To call this function in kernel mode, use Ksecdd.lib.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCryptDuplicateKey(Vanara.PInvoke.BCrypt.BCRYPT_KEY_HANDLE,Vanara.PInvoke.BCrypt.SafeBCRYPT_KEY_HANDLE@,Vanara.InteropServices.SafeAllocatedMemoryHandle,System.UInt32,System.UInt32)">
            <summary>
            <para>The <c>BCryptDuplicateKey</c> function creates a duplicate of a symmetric key.</para>
            </summary>
            <param name="hKey">
            <para>The handle of the key to duplicate. This must be a handle to a symmetric key.</para>
            </param>
            <param name="phNewKey">
            <para>
            A pointer to a <c>BCRYPT_KEY_HANDLE</c> variable that receives the handle of the duplicate key. This handle is used in subsequent
            functions that require a key, such as BCryptEncrypt. This handle must be released when it is no longer needed by passing it to
            the BCryptDestroyKey function.
            </para>
            </param>
            <param name="pbKeyObject">
            <para>
            A pointer to a buffer that receives the duplicate key object. The cbKeyObject parameter contains the size of this buffer. The
            required size of this buffer can be obtained by calling the BCryptGetProperty function to get the <c>BCRYPT_OBJECT_LENGTH</c>
            property. This will provide the size of the key object for the specified algorithm.
            </para>
            <para>This memory can only be freed after the phNewKey key handle is destroyed.</para>
            </param>
            <param name="cbKeyObject">
            <para>The size, in bytes, of the pbKeyObject buffer.</para>
            </param>
            <param name="dwFlags">
            <para>
            A set of flags that modify the behavior of this function. No flags are currently defined, so this parameter should be zero.
            </para>
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>STATUS_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>STATUS_BUFFER_TOO_SMALL</term>
            <term>The size of the key object specified by the cbKeyObject parameter is not large enough to hold the key object.</term>
            </item>
            <item>
            <term>STATUS_INVALID_HANDLE</term>
            <term>
            The key handle in the hKey parameter is not valid. This value is also returned if the key to duplicate is not a symmetric key.
            </term>
            </item>
            <item>
            <term>STATUS_INVALID_PARAMETER</term>
            <term>One or more parameters are not valid.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            Depending on what processor modes a provider supports, <c>BCryptDuplicateKey</c> can be called either from user mode or kernel
            mode. Kernel mode callers can execute either at <c>PASSIVE_LEVEL</c> IRQL or <c>DISPATCH_LEVEL</c> IRQL. If the current IRQL
            level is <c>DISPATCH_LEVEL</c>, the handle provided in the hKey parameter must be derived from an algorithm handle returned by a
            provider that was opened with the <c>BCRYPT_PROV_DISPATCH</c> flag, and any pointers passed to the <c>BCryptDuplicateKey</c>
            function must refer to nonpaged (or locked) memory.
            </para>
            <para>
            To call this function in kernel mode, use Cng.lib, which is part of the Driver Development Kit (DDK). For more information, see
            WDK and Developer Tools. <c>Windows Server 2008 and Windows Vista:</c> To call this function in kernel mode, use Ksecdd.lib.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCryptEncrypt(Vanara.PInvoke.BCrypt.BCRYPT_KEY_HANDLE,System.Byte[],System.UInt32,System.IntPtr,Vanara.InteropServices.SafeAllocatedMemoryHandle,System.UInt32,Vanara.InteropServices.SafeAllocatedMemoryHandle,System.UInt32,System.UInt32@,Vanara.PInvoke.BCrypt.EncryptFlags)">
            <summary>The <c>BCryptEncrypt</c> function encrypts a block of data.</summary>
            <param name="hKey">
            The handle of the key to use to encrypt the data. This handle is obtained from one of the key creation functions, such as
            BCryptGenerateSymmetricKey, BCryptGenerateKeyPair, or BCryptImportKey.
            </param>
            <param name="pbInput">
            The address of a buffer that contains the plaintext to be encrypted. The cbInput parameter contains the size of the plaintext to
            encrypt. For more information, see Remarks.
            </param>
            <param name="cbInput">The number of bytes in the pbInput buffer to encrypt.</param>
            <param name="pPaddingInfo">
            A pointer to a structure that contains padding information. This parameter is only used with asymmetric keys and authenticated
            encryption modes. If an authenticated encryption mode is used, this parameter must point to a
            BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO structure. If asymmetric keys are used, the type of structure this parameter points to is
            determined by the value of the dwFlags parameter. Otherwise, the parameter must be set to <c>NULL</c>.
            </param>
            <param name="pbIV">
            <para>
            The address of a buffer that contains the initialization vector (IV) to use during encryption. The cbIV parameter contains the
            size of this buffer. This function will modify the contents of this buffer. If you need to reuse the IV later, make sure you make
            a copy of this buffer before calling this function.
            </para>
            <para>This parameter is optional and can be <c>NULL</c> if no IV is used.</para>
            <para>
            The required size of the IV can be obtained by calling the BCryptGetProperty function to get the <c>BCRYPT_BLOCK_LENGTH</c>
            property. This will provide the size of a block for the algorithm, which is also the size of the IV.
            </para>
            </param>
            <param name="cbIV">The size, in bytes, of the pbIV buffer.</param>
            <param name="pbOutput">
            <para>
            The address of the buffer that receives the ciphertext produced by this function. The cbOutput parameter contains the size of
            this buffer. For more information, see Remarks.
            </para>
            <para>
            If this parameter is <c>NULL</c>, the <c>BCryptEncrypt</c> function calculates the size needed for the ciphertext of the data
            passed in the pbInput parameter. In this case, the location pointed to by the pcbResult parameter contains this size, and the
            function returns <c>STATUS_SUCCESS</c>. The pPaddingInfo parameter is not modified.
            </para>
            <para>
            If the values of both the pbOutput and pbInput parameters are <c>NULL</c>, an error is returned unless an authenticated
            encryption algorithm is in use. In the latter case, the call is treated as an authenticated encryption call with zero length
            data, and the authentication tag is returned in the pPaddingInfo parameter.
            </para>
            </param>
            <param name="cbOutput">The size, in bytes, of the pbOutput buffer. This parameter is ignored if the pbOutput parameter is <c>NULL</c>.</param>
            <param name="pcbResult">
            A pointer to a <c>ULONG</c> variable that receives the number of bytes copied to the pbOutput buffer. If pbOutput is <c>NULL</c>,
            this receives the size, in bytes, required for the ciphertext.
            </param>
            <param name="dwFlags">
            <para>
            A set of flags that modify the behavior of this function. The allowed set of flags depends on the type of key specified by the
            hKey parameter.
            </para>
            <para>If the key is a symmetric key, this can be zero or the following value.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>BCRYPT_BLOCK_PADDING</term>
            <term>
            Allows the encryption algorithm to pad the data to the next block size. If this flag is not specified, the size of the plaintext
            specified in the cbInput parameter must be a multiple of the algorithm's block size. The block size can be obtained by calling
            the BCryptGetProperty function to get the BCRYPT_BLOCK_LENGTH property for the key. This will provide the size of a block for the
            algorithm. This flag must not be used with the authenticated encryption modes (AES-CCM and AES-GCM).
            </term>
            </item>
            </list>
            <para>If the key is an asymmetric key, this can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>BCRYPT_PAD_NONE</term>
            <term>
            Do not use any padding. The pPaddingInfo parameter is not used. The size of the plaintext specified in the cbInput parameter must
            be a multiple of the algorithm's block size.
            </term>
            </item>
            <item>
            <term>BCRYPT_PAD_OAEP</term>
            <term>
            Use the Optimal Asymmetric Encryption Padding (OAEP) scheme. The pPaddingInfo parameter is a pointer to a
            BCRYPT_OAEP_PADDING_INFO structure.
            </term>
            </item>
            <item>
            <term>BCRYPT_PAD_PKCS1</term>
            <term>The data will be padded with a random number to round out the block size. The pPaddingInfo parameter is not used.</term>
            </item>
            </list>
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>STATUS_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>STATUS_BUFFER_TOO_SMALL</term>
            <term>The size specified by the cbOutput parameter is not large enough to hold the ciphertext.</term>
            </item>
            <item>
            <term>STATUS_INVALID_BUFFER_SIZE</term>
            <term>
            The cbInput parameter is not a multiple of the algorithm's block size and the BCRYPT_BLOCK_PADDING or the BCRYPT_PAD_NONE flag
            was not specified in the dwFlags parameter.
            </term>
            </item>
            <item>
            <term>STATUS_INVALID_HANDLE</term>
            <term>The key handle in the hKey parameter is not valid.</term>
            </item>
            <item>
            <term>STATUS_INVALID_PARAMETER</term>
            <term>One or more parameters are not valid.</term>
            </item>
            <item>
            <term>STATUS_NOT_SUPPORTED</term>
            <term>The algorithm does not support encryption.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            The pbInput and pbOutput parameters can point to the same buffer. In this case, this function will perform the encryption in
            place. It is possible that the encrypted data size will be larger than the unencrypted data size, so the buffer must be large
            enough to hold the encrypted data.
            </para>
            <para>
            Depending on what processor modes a provider supports, <c>BCryptEncrypt</c> can be called either from user mode or kernel mode.
            Kernel mode callers can execute either at <c>PASSIVE_LEVEL</c> IRQL or <c>DISPATCH_LEVEL</c> IRQL. If the current IRQL level is
            <c>DISPATCH_LEVEL</c>, the handle provided in the hKey parameter must be derived from an algorithm handle returned by a provider
            that was opened with the <c>BCRYPT_PROV_DISPATCH</c> flag, and any pointers passed to the <c>BCryptEncrypt</c> function must
            refer to nonpaged (or locked) memory.
            </para>
            <para>
            To call this function in kernel mode, use Cng.lib, which is part of the Driver Development Kit (DDK). For more information, see
            WDK and Developer Tools. <c>Windows Server 2008 and Windows Vista:</c> To call this function in kernel mode, use Ksecdd.lib.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCryptEncrypt(Vanara.PInvoke.BCrypt.BCRYPT_KEY_HANDLE,System.Byte[],System.UInt32,System.IntPtr,Vanara.InteropServices.SafeAllocatedMemoryHandle,System.UInt32,System.IntPtr,System.UInt32,System.UInt32@,Vanara.PInvoke.BCrypt.EncryptFlags)">
            <summary>The <c>BCryptEncrypt</c> function encrypts a block of data.</summary>
            <param name="hKey">
            The handle of the key to use to encrypt the data. This handle is obtained from one of the key creation functions, such as
            BCryptGenerateSymmetricKey, BCryptGenerateKeyPair, or BCryptImportKey.
            </param>
            <param name="pbInput">
            The address of a buffer that contains the plaintext to be encrypted. The cbInput parameter contains the size of the plaintext to
            encrypt. For more information, see Remarks.
            </param>
            <param name="cbInput">The number of bytes in the pbInput buffer to encrypt.</param>
            <param name="pPaddingInfo">
            A pointer to a structure that contains padding information. This parameter is only used with asymmetric keys and authenticated
            encryption modes. If an authenticated encryption mode is used, this parameter must point to a
            BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO structure. If asymmetric keys are used, the type of structure this parameter points to is
            determined by the value of the dwFlags parameter. Otherwise, the parameter must be set to <c>NULL</c>.
            </param>
            <param name="pbIV">
            <para>
            The address of a buffer that contains the initialization vector (IV) to use during encryption. The cbIV parameter contains the
            size of this buffer. This function will modify the contents of this buffer. If you need to reuse the IV later, make sure you make
            a copy of this buffer before calling this function.
            </para>
            <para>This parameter is optional and can be <c>NULL</c> if no IV is used.</para>
            <para>
            The required size of the IV can be obtained by calling the BCryptGetProperty function to get the <c>BCRYPT_BLOCK_LENGTH</c>
            property. This will provide the size of a block for the algorithm, which is also the size of the IV.
            </para>
            </param>
            <param name="cbIV">The size, in bytes, of the pbIV buffer.</param>
            <param name="pbOutput">
            <para>
            The address of the buffer that receives the ciphertext produced by this function. The cbOutput parameter contains the size of
            this buffer. For more information, see Remarks.
            </para>
            <para>
            If this parameter is <c>NULL</c>, the <c>BCryptEncrypt</c> function calculates the size needed for the ciphertext of the data
            passed in the pbInput parameter. In this case, the location pointed to by the pcbResult parameter contains this size, and the
            function returns <c>STATUS_SUCCESS</c>. The pPaddingInfo parameter is not modified.
            </para>
            <para>
            If the values of both the pbOutput and pbInput parameters are <c>NULL</c>, an error is returned unless an authenticated
            encryption algorithm is in use. In the latter case, the call is treated as an authenticated encryption call with zero length
            data, and the authentication tag is returned in the pPaddingInfo parameter.
            </para>
            </param>
            <param name="cbOutput">The size, in bytes, of the pbOutput buffer. This parameter is ignored if the pbOutput parameter is <c>NULL</c>.</param>
            <param name="pcbResult">
            A pointer to a <c>ULONG</c> variable that receives the number of bytes copied to the pbOutput buffer. If pbOutput is <c>NULL</c>,
            this receives the size, in bytes, required for the ciphertext.
            </param>
            <param name="dwFlags">
            <para>
            A set of flags that modify the behavior of this function. The allowed set of flags depends on the type of key specified by the
            hKey parameter.
            </para>
            <para>If the key is a symmetric key, this can be zero or the following value.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>BCRYPT_BLOCK_PADDING</term>
            <term>
            Allows the encryption algorithm to pad the data to the next block size. If this flag is not specified, the size of the plaintext
            specified in the cbInput parameter must be a multiple of the algorithm's block size. The block size can be obtained by calling
            the BCryptGetProperty function to get the BCRYPT_BLOCK_LENGTH property for the key. This will provide the size of a block for the
            algorithm. This flag must not be used with the authenticated encryption modes (AES-CCM and AES-GCM).
            </term>
            </item>
            </list>
            <para>If the key is an asymmetric key, this can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>BCRYPT_PAD_NONE</term>
            <term>
            Do not use any padding. The pPaddingInfo parameter is not used. The size of the plaintext specified in the cbInput parameter must
            be a multiple of the algorithm's block size.
            </term>
            </item>
            <item>
            <term>BCRYPT_PAD_OAEP</term>
            <term>
            Use the Optimal Asymmetric Encryption Padding (OAEP) scheme. The pPaddingInfo parameter is a pointer to a
            BCRYPT_OAEP_PADDING_INFO structure.
            </term>
            </item>
            <item>
            <term>BCRYPT_PAD_PKCS1</term>
            <term>The data will be padded with a random number to round out the block size. The pPaddingInfo parameter is not used.</term>
            </item>
            </list>
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>STATUS_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>STATUS_BUFFER_TOO_SMALL</term>
            <term>The size specified by the cbOutput parameter is not large enough to hold the ciphertext.</term>
            </item>
            <item>
            <term>STATUS_INVALID_BUFFER_SIZE</term>
            <term>
            The cbInput parameter is not a multiple of the algorithm's block size and the BCRYPT_BLOCK_PADDING or the BCRYPT_PAD_NONE flag
            was not specified in the dwFlags parameter.
            </term>
            </item>
            <item>
            <term>STATUS_INVALID_HANDLE</term>
            <term>The key handle in the hKey parameter is not valid.</term>
            </item>
            <item>
            <term>STATUS_INVALID_PARAMETER</term>
            <term>One or more parameters are not valid.</term>
            </item>
            <item>
            <term>STATUS_NOT_SUPPORTED</term>
            <term>The algorithm does not support encryption.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            The pbInput and pbOutput parameters can point to the same buffer. In this case, this function will perform the encryption in
            place. It is possible that the encrypted data size will be larger than the unencrypted data size, so the buffer must be large
            enough to hold the encrypted data.
            </para>
            <para>
            Depending on what processor modes a provider supports, <c>BCryptEncrypt</c> can be called either from user mode or kernel mode.
            Kernel mode callers can execute either at <c>PASSIVE_LEVEL</c> IRQL or <c>DISPATCH_LEVEL</c> IRQL. If the current IRQL level is
            <c>DISPATCH_LEVEL</c>, the handle provided in the hKey parameter must be derived from an algorithm handle returned by a provider
            that was opened with the <c>BCRYPT_PROV_DISPATCH</c> flag, and any pointers passed to the <c>BCryptEncrypt</c> function must
            refer to nonpaged (or locked) memory.
            </para>
            <para>
            To call this function in kernel mode, use Cng.lib, which is part of the Driver Development Kit (DDK). For more information, see
            WDK and Developer Tools. <c>Windows Server 2008 and Windows Vista:</c> To call this function in kernel mode, use Ksecdd.lib.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCryptEncrypt(Vanara.PInvoke.BCrypt.BCRYPT_KEY_HANDLE,System.Byte[],System.UInt32,System.IntPtr,System.IntPtr,System.UInt32,System.IntPtr,System.UInt32,System.UInt32@,Vanara.PInvoke.BCrypt.EncryptFlags)">
            <summary>The <c>BCryptEncrypt</c> function encrypts a block of data.</summary>
            <param name="hKey">
            The handle of the key to use to encrypt the data. This handle is obtained from one of the key creation functions, such as
            BCryptGenerateSymmetricKey, BCryptGenerateKeyPair, or BCryptImportKey.
            </param>
            <param name="pbInput">
            The address of a buffer that contains the plaintext to be encrypted. The cbInput parameter contains the size of the plaintext to
            encrypt. For more information, see Remarks.
            </param>
            <param name="cbInput">The number of bytes in the pbInput buffer to encrypt.</param>
            <param name="pPaddingInfo">
            A pointer to a structure that contains padding information. This parameter is only used with asymmetric keys and authenticated
            encryption modes. If an authenticated encryption mode is used, this parameter must point to a
            BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO structure. If asymmetric keys are used, the type of structure this parameter points to is
            determined by the value of the dwFlags parameter. Otherwise, the parameter must be set to <c>NULL</c>.
            </param>
            <param name="pbIV">
            <para>
            The address of a buffer that contains the initialization vector (IV) to use during encryption. The cbIV parameter contains the
            size of this buffer. This function will modify the contents of this buffer. If you need to reuse the IV later, make sure you make
            a copy of this buffer before calling this function.
            </para>
            <para>This parameter is optional and can be <c>NULL</c> if no IV is used.</para>
            <para>
            The required size of the IV can be obtained by calling the BCryptGetProperty function to get the <c>BCRYPT_BLOCK_LENGTH</c>
            property. This will provide the size of a block for the algorithm, which is also the size of the IV.
            </para>
            </param>
            <param name="cbIV">The size, in bytes, of the pbIV buffer.</param>
            <param name="pbOutput">
            <para>
            The address of the buffer that receives the ciphertext produced by this function. The cbOutput parameter contains the size of
            this buffer. For more information, see Remarks.
            </para>
            <para>
            If this parameter is <c>NULL</c>, the <c>BCryptEncrypt</c> function calculates the size needed for the ciphertext of the data
            passed in the pbInput parameter. In this case, the location pointed to by the pcbResult parameter contains this size, and the
            function returns <c>STATUS_SUCCESS</c>. The pPaddingInfo parameter is not modified.
            </para>
            <para>
            If the values of both the pbOutput and pbInput parameters are <c>NULL</c>, an error is returned unless an authenticated
            encryption algorithm is in use. In the latter case, the call is treated as an authenticated encryption call with zero length
            data, and the authentication tag is returned in the pPaddingInfo parameter.
            </para>
            </param>
            <param name="cbOutput">The size, in bytes, of the pbOutput buffer. This parameter is ignored if the pbOutput parameter is <c>NULL</c>.</param>
            <param name="pcbResult">
            A pointer to a <c>ULONG</c> variable that receives the number of bytes copied to the pbOutput buffer. If pbOutput is <c>NULL</c>,
            this receives the size, in bytes, required for the ciphertext.
            </param>
            <param name="dwFlags">
            <para>
            A set of flags that modify the behavior of this function. The allowed set of flags depends on the type of key specified by the
            hKey parameter.
            </para>
            <para>If the key is a symmetric key, this can be zero or the following value.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>BCRYPT_BLOCK_PADDING</term>
            <term>
            Allows the encryption algorithm to pad the data to the next block size. If this flag is not specified, the size of the plaintext
            specified in the cbInput parameter must be a multiple of the algorithm's block size. The block size can be obtained by calling
            the BCryptGetProperty function to get the BCRYPT_BLOCK_LENGTH property for the key. This will provide the size of a block for the
            algorithm. This flag must not be used with the authenticated encryption modes (AES-CCM and AES-GCM).
            </term>
            </item>
            </list>
            <para>If the key is an asymmetric key, this can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>BCRYPT_PAD_NONE</term>
            <term>
            Do not use any padding. The pPaddingInfo parameter is not used. The size of the plaintext specified in the cbInput parameter must
            be a multiple of the algorithm's block size.
            </term>
            </item>
            <item>
            <term>BCRYPT_PAD_OAEP</term>
            <term>
            Use the Optimal Asymmetric Encryption Padding (OAEP) scheme. The pPaddingInfo parameter is a pointer to a
            BCRYPT_OAEP_PADDING_INFO structure.
            </term>
            </item>
            <item>
            <term>BCRYPT_PAD_PKCS1</term>
            <term>The data will be padded with a random number to round out the block size. The pPaddingInfo parameter is not used.</term>
            </item>
            </list>
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>STATUS_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>STATUS_BUFFER_TOO_SMALL</term>
            <term>The size specified by the cbOutput parameter is not large enough to hold the ciphertext.</term>
            </item>
            <item>
            <term>STATUS_INVALID_BUFFER_SIZE</term>
            <term>
            The cbInput parameter is not a multiple of the algorithm's block size and the BCRYPT_BLOCK_PADDING or the BCRYPT_PAD_NONE flag
            was not specified in the dwFlags parameter.
            </term>
            </item>
            <item>
            <term>STATUS_INVALID_HANDLE</term>
            <term>The key handle in the hKey parameter is not valid.</term>
            </item>
            <item>
            <term>STATUS_INVALID_PARAMETER</term>
            <term>One or more parameters are not valid.</term>
            </item>
            <item>
            <term>STATUS_NOT_SUPPORTED</term>
            <term>The algorithm does not support encryption.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            The pbInput and pbOutput parameters can point to the same buffer. In this case, this function will perform the encryption in
            place. It is possible that the encrypted data size will be larger than the unencrypted data size, so the buffer must be large
            enough to hold the encrypted data.
            </para>
            <para>
            Depending on what processor modes a provider supports, <c>BCryptEncrypt</c> can be called either from user mode or kernel mode.
            Kernel mode callers can execute either at <c>PASSIVE_LEVEL</c> IRQL or <c>DISPATCH_LEVEL</c> IRQL. If the current IRQL level is
            <c>DISPATCH_LEVEL</c>, the handle provided in the hKey parameter must be derived from an algorithm handle returned by a provider
            that was opened with the <c>BCRYPT_PROV_DISPATCH</c> flag, and any pointers passed to the <c>BCryptEncrypt</c> function must
            refer to nonpaged (or locked) memory.
            </para>
            <para>
            To call this function in kernel mode, use Cng.lib, which is part of the Driver Development Kit (DDK). For more information, see
            WDK and Developer Tools. <c>Windows Server 2008 and Windows Vista:</c> To call this function in kernel mode, use Ksecdd.lib.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCryptEnumAlgorithms(Vanara.PInvoke.BCrypt.AlgOperations,System.UInt32@,Vanara.PInvoke.BCrypt.SafeBCryptBuffer@,System.UInt32)">
            <summary>The <c>BCryptEnumAlgorithms</c> function gets a list of the registered algorithm identifiers.</summary>
            <param name="dwAlgOperations">
            <para>
            A value that specifies the algorithm operation types to include in the enumeration. This can be a combination of one or more of
            the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>BCRYPT_CIPHER_OPERATION 0x00000001</term>
            <term>Include the cipher algorithms in the enumeration.</term>
            </item>
            <item>
            <term>BCRYPT_HASH_OPERATION 0x00000002</term>
            <term>Include the hash algorithms in the enumeration.</term>
            </item>
            <item>
            <term>BCRYPT_ASYMMETRIC_ENCRYPTION_OPERATION 0x00000004</term>
            <term>Include the asymmetric encryption algorithms in the enumeration.</term>
            </item>
            <item>
            <term>BCRYPT_SECRET_AGREEMENT_OPERATION 0x00000008</term>
            <term>Include the secret agreement algorithms in the enumeration.</term>
            </item>
            <item>
            <term>BCRYPT_SIGNATURE_OPERATION 0x00000010</term>
            <term>Include the signature algorithms in the enumeration.</term>
            </item>
            <item>
            <term>BCRYPT_RNG_OPERATION 0x00000020</term>
            <term>Include the random number generator (RNG) algorithms in the enumeration.</term>
            </item>
            </list>
            </param>
            <param name="pAlgCount">A pointer to a <c>ULONG</c> variable to receive the number of elements in the ppAlgList array.</param>
            <param name="ppAlgList">
            The address of a BCRYPT_ALGORITHM_IDENTIFIER structure pointer to receive the array of registered algorithm identifiers. This
            pointer must be passed to the BCryptFreeBuffer function when it is no longer needed.
            </param>
            <param name="dwFlags">A set of flags that modify the behavior of this function. No flags are defined for this function.</param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>STATUS_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>STATUS_INVALID_PARAMETER</term>
            <term>One or more parameters are not valid.</term>
            </item>
            <item>
            <term>STATUS_NO_MEMORY</term>
            <term>A memory allocation failure occurred.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <c>BCryptEnumAlgorithms</c> can be called either from user mode or kernel mode. Kernel mode callers must be executing at
            <c>PASSIVE_LEVEL</c> IRQL.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCryptEnumAlgorithms(Vanara.PInvoke.BCrypt.AlgOperations)">
            <summary>The <c>BCryptEnumAlgorithms</c> function gets a list of the registered algorithm identifiers.</summary>
            <param name="dwAlgOperations">
            <para>
            A value that specifies the algorithm operation types to include in the enumeration. This can be a combination of one or more of
            the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>BCRYPT_CIPHER_OPERATION 0x00000001</term>
            <term>Include the cipher algorithms in the enumeration.</term>
            </item>
            <item>
            <term>BCRYPT_HASH_OPERATION 0x00000002</term>
            <term>Include the hash algorithms in the enumeration.</term>
            </item>
            <item>
            <term>BCRYPT_ASYMMETRIC_ENCRYPTION_OPERATION 0x00000004</term>
            <term>Include the asymmetric encryption algorithms in the enumeration.</term>
            </item>
            <item>
            <term>BCRYPT_SECRET_AGREEMENT_OPERATION 0x00000008</term>
            <term>Include the secret agreement algorithms in the enumeration.</term>
            </item>
            <item>
            <term>BCRYPT_SIGNATURE_OPERATION 0x00000010</term>
            <term>Include the signature algorithms in the enumeration.</term>
            </item>
            <item>
            <term>BCRYPT_RNG_OPERATION 0x00000020</term>
            <term>Include the random number generator (RNG) algorithms in the enumeration.</term>
            </item>
            </list>
            </param>
            <returns>An array of BCRYPT_ALGORITHM_IDENTIFIER structures that contains the registered algorithm identifiers.</returns>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCryptEnumContextFunctionProviders(Vanara.PInvoke.BCrypt.ContextConfigTable,System.String,Vanara.PInvoke.BCrypt.InterfaceId,System.String,System.UInt32@,Vanara.PInvoke.BCrypt.SafeBCryptBuffer@)">
            <summary>
            The <c>BCryptEnumContextFunctionProviders</c> function obtains the providers for the cryptographic functions for a context in the
            specified configuration table.
            </summary>
            <param name="dwTable">
            <para>
            Identifies the configuration table from which to retrieve the context function providers. This can be one of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPT_LOCAL</term>
            <term>Retrieve the context functions from the local-machine configuration table.</term>
            </item>
            <item>
            <term>CRYPT_DOMAIN</term>
            <term>This value is not available for use.</term>
            </item>
            </list>
            </param>
            <param name="pszContext">
            A pointer to a null-terminated Unicode string that contains the identifier of the context to enumerate the function providers for.
            </param>
            <param name="dwInterface">
            <para>Identifies the cryptographic interface to retrieve the function providers for. This can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>BCRYPT_ASYMMETRIC_ENCRYPTION_INTERFACE</term>
            <term>Retrieve the asymmetric encryption function providers.</term>
            </item>
            <item>
            <term>BCRYPT_CIPHER_INTERFACE</term>
            <term>Retrieve the cipher function providers.</term>
            </item>
            <item>
            <term>BCRYPT_HASH_INTERFACE</term>
            <term>Retrieve the hash function providers.</term>
            </item>
            <item>
            <term>BCRYPT_RNG_INTERFACE</term>
            <term>Retrieve the random number generator function providers.</term>
            </item>
            <item>
            <term>BCRYPT_SECRET_AGREEMENT_INTERFACE</term>
            <term>Retrieve the secret agreement function providers.</term>
            </item>
            <item>
            <term>BCRYPT_SIGNATURE_INTERFACE</term>
            <term>Retrieve the signature function providers.</term>
            </item>
            <item>
            <term>NCRYPT_KEY_STORAGE_INTERFACE</term>
            <term>Retrieve the key storage function providers.</term>
            </item>
            <item>
            <term>NCRYPT_SCHANNEL_INTERFACE</term>
            <term>Retrieve the Schannel function providers.</term>
            </item>
            </list>
            </param>
            <param name="pszFunction">
            A pointer to a null-terminated Unicode string that contains the identifier of the function to enumerate the providers for.
            </param>
            <param name="pcbBuffer">
            <para>
            The address of a <c>ULONG</c> variable that, on entry, contains the size, in bytes, of the buffer pointed to by ppBuffer. If this
            size is not large enough to hold the set of context identifiers, this function will fail with <c>STATUS_BUFFER_TOO_SMALL</c>.
            </para>
            <para>After this function returns, this value contains the number of bytes that were copied to the ppBuffer buffer.</para>
            </param>
            <param name="ppBuffer">
            <para>
            The address of a pointer to a CRYPT_CONTEXT_FUNCTION_PROVIDERS structure that receives the set of context function providers
            retrieved by this function. The value pointed to by the pcbBuffer parameter contains the size of this buffer.
            </para>
            <para>
            If the value pointed to by this parameter is <c>NULL</c>, this function will allocate the required memory. This memory must be
            freed when it is no longer needed by passing this pointer to the BCryptFreeBuffer function.
            </para>
            <para>
            If this parameter is <c>NULL</c>, this function will place the required size, in bytes, in the variable pointed to by the
            pcbBuffer parameter and return <c>STATUS_BUFFER_TOO_SMALL</c>.
            </para>
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>STATUS_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>STATUS_BUFFER_TOO_SMALL</term>
            <term>
            The ppBuffer parameter is not NULL, and the value pointed to by the pcbBuffer parameter is not large enough to hold the set of contexts.
            </term>
            </item>
            <item>
            <term>STATUS_INVALID_PARAMETER</term>
            <term>One or more parameters are not valid.</term>
            </item>
            <item>
            <term>STATUS_NO_MEMORY</term>
            <term>A memory allocation failure occurred.</term>
            </item>
            <item>
            <term>STATUS_NOT_FOUND</term>
            <term>No context function providers that match the specified criteria were found.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para><c>BCryptEnumContextFunctionProviders</c> can be called only in user mode.</para>
            <para>Examples</para>
            <para>
            The following example shows how to use the <c>BCryptEnumContextFunctionProviders</c> function to enumerate the providers for all
            key storage functions for all contexts in the local-machine configuration table.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCryptEnumContextFunctionProviders(Vanara.PInvoke.BCrypt.ContextConfigTable,System.String,Vanara.PInvoke.BCrypt.InterfaceId,System.String)">
            <summary>
            The <c>BCryptEnumContextFunctionProviders</c> function obtains the providers for the cryptographic functions for a context in the
            specified configuration table.
            </summary>
            <param name="dwTable">
            <para>
            Identifies the configuration table from which to retrieve the context function providers. This can be one of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPT_LOCAL</term>
            <term>Retrieve the context functions from the local-machine configuration table.</term>
            </item>
            <item>
            <term>CRYPT_DOMAIN</term>
            <term>This value is not available for use.</term>
            </item>
            </list>
            </param>
            <param name="pszContext">
            A pointer to a null-terminated Unicode string that contains the identifier of the context to enumerate the function providers for.
            </param>
            <param name="dwInterface">
            <para>Identifies the cryptographic interface to retrieve the function providers for. This can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>BCRYPT_ASYMMETRIC_ENCRYPTION_INTERFACE</term>
            <term>Retrieve the asymmetric encryption function providers.</term>
            </item>
            <item>
            <term>BCRYPT_CIPHER_INTERFACE</term>
            <term>Retrieve the cipher function providers.</term>
            </item>
            <item>
            <term>BCRYPT_HASH_INTERFACE</term>
            <term>Retrieve the hash function providers.</term>
            </item>
            <item>
            <term>BCRYPT_RNG_INTERFACE</term>
            <term>Retrieve the random number generator function providers.</term>
            </item>
            <item>
            <term>BCRYPT_SECRET_AGREEMENT_INTERFACE</term>
            <term>Retrieve the secret agreement function providers.</term>
            </item>
            <item>
            <term>BCRYPT_SIGNATURE_INTERFACE</term>
            <term>Retrieve the signature function providers.</term>
            </item>
            <item>
            <term>NCRYPT_KEY_STORAGE_INTERFACE</term>
            <term>Retrieve the key storage function providers.</term>
            </item>
            <item>
            <term>NCRYPT_SCHANNEL_INTERFACE</term>
            <term>Retrieve the Schannel function providers.</term>
            </item>
            </list>
            </param>
            <param name="pszFunction">
            A pointer to a null-terminated Unicode string that contains the identifier of the function to enumerate the providers for.
            </param>
            <returns>An array of strings that contains the identifiers of the function providers contained in this set.</returns>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCryptEnumContextFunctions(Vanara.PInvoke.BCrypt.ContextConfigTable,System.String,Vanara.PInvoke.BCrypt.InterfaceId,System.UInt32@,Vanara.PInvoke.BCrypt.SafeBCryptBuffer@)">
            <summary>
            The <c>BCryptEnumContextFunctions</c> function obtains the cryptographic functions for a context in the specified configuration table.
            </summary>
            <param name="dwTable">
            <para>Identifies the configuration table from which to retrieve the context functions. This can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPT_LOCAL</term>
            <term>Retrieve the context functions from the local-machine configuration table.</term>
            </item>
            <item>
            <term>CRYPT_DOMAIN</term>
            <term>This value is not available for use.</term>
            </item>
            </list>
            </param>
            <param name="pszContext">
            A pointer to a null-terminated Unicode string that contains the identifier of the context to enumerate the functions for.
            </param>
            <param name="dwInterface">
            <para>Identifies the cryptographic interface to retrieve the functions for. This can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>BCRYPT_ASYMMETRIC_ENCRYPTION_INTERFACE</term>
            <term>Retrieve the asymmetric encryption functions.</term>
            </item>
            <item>
            <term>BCRYPT_CIPHER_INTERFACE</term>
            <term>Retrieve the cipher functions.</term>
            </item>
            <item>
            <term>BCRYPT_HASH_INTERFACE</term>
            <term>Retrieve the hash functions.</term>
            </item>
            <item>
            <term>BCRYPT_RNG_INTERFACE</term>
            <term>Retrieve the random number generator functions.</term>
            </item>
            <item>
            <term>BCRYPT_SECRET_AGREEMENT_INTERFACE</term>
            <term>Retrieve the secret agreement functions.</term>
            </item>
            <item>
            <term>BCRYPT_SIGNATURE_INTERFACE</term>
            <term>Retrieve the signature functions.</term>
            </item>
            <item>
            <term>NCRYPT_KEY_STORAGE_INTERFACE</term>
            <term>Retrieve the key storage functions.</term>
            </item>
            <item>
            <term>NCRYPT_SCHANNEL_INTERFACE</term>
            <term>Retrieve the Schannel functions.</term>
            </item>
            </list>
            </param>
            <param name="pcbBuffer">
            <para>
            The address of a <c>ULONG</c> variable that, on entry, contains the size, in bytes, of the buffer pointed to by ppBuffer. If this
            size is not large enough to hold the set of context identifiers, this function will fail with <c>STATUS_BUFFER_TOO_SMALL</c>.
            </para>
            <para>After this function returns, this value contains the number of bytes that were copied to the ppBuffer buffer.</para>
            </param>
            <param name="ppBuffer">
            <para>
            The address of a pointer to a CRYPT_CONTEXT_FUNCTIONS structure that receives the set of context functions retrieved by this
            function. The value pointed to by the pcbBuffer parameter contains the size of this buffer.
            </para>
            <para>
            If the value pointed to by this parameter is <c>NULL</c>, this function will allocate the required memory. This memory must be
            freed when it is no longer needed by passing this pointer to the BCryptFreeBuffer function.
            </para>
            <para>
            If this parameter is <c>NULL</c>, this function will place the required size, in bytes, in the variable pointed to by the
            pcbBuffer parameter and return <c>STATUS_BUFFER_TOO_SMALL</c>.
            </para>
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>STATUS_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>STATUS_BUFFER_TOO_SMALL</term>
            <term>
            The ppBuffer parameter is not NULL, and the value pointed to by the pcbBuffer parameter is not large enough to hold the set of contexts.
            </term>
            </item>
            <item>
            <term>STATUS_INVALID_PARAMETER</term>
            <term>One or more parameters are not valid.</term>
            </item>
            <item>
            <term>STATUS_NO_MEMORY</term>
            <term>A memory allocation failure occurred.</term>
            </item>
            <item>
            <term>STATUS_NOT_FOUND</term>
            <term>No context functions that match the specified criteria were found.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para><c>BCryptEnumContextFunctions</c> can be called only in user mode.</para>
            <para>Examples</para>
            <para>
            The following example shows how to use the <c>BCryptEnumContextFunctions</c> function to enumerate the key storage functions for
            all contexts in the local-machine configuration table.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCryptEnumContextFunctions(Vanara.PInvoke.BCrypt.ContextConfigTable,System.String,Vanara.PInvoke.BCrypt.InterfaceId)">
            <summary>
            The <c>BCryptEnumContextFunctions</c> function obtains the cryptographic functions for a context in the specified configuration table.
            </summary>
            <param name="dwTable">
            <para>Identifies the configuration table from which to retrieve the context functions. This can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPT_LOCAL</term>
            <term>Retrieve the context functions from the local-machine configuration table.</term>
            </item>
            <item>
            <term>CRYPT_DOMAIN</term>
            <term>This value is not available for use.</term>
            </item>
            </list>
            </param>
            <param name="pszContext">
            A pointer to a null-terminated Unicode string that contains the identifier of the context to enumerate the functions for.
            </param>
            <param name="dwInterface">
            <para>Identifies the cryptographic interface to retrieve the functions for. This can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>BCRYPT_ASYMMETRIC_ENCRYPTION_INTERFACE</term>
            <term>Retrieve the asymmetric encryption functions.</term>
            </item>
            <item>
            <term>BCRYPT_CIPHER_INTERFACE</term>
            <term>Retrieve the cipher functions.</term>
            </item>
            <item>
            <term>BCRYPT_HASH_INTERFACE</term>
            <term>Retrieve the hash functions.</term>
            </item>
            <item>
            <term>BCRYPT_RNG_INTERFACE</term>
            <term>Retrieve the random number generator functions.</term>
            </item>
            <item>
            <term>BCRYPT_SECRET_AGREEMENT_INTERFACE</term>
            <term>Retrieve the secret agreement functions.</term>
            </item>
            <item>
            <term>BCRYPT_SIGNATURE_INTERFACE</term>
            <term>Retrieve the signature functions.</term>
            </item>
            <item>
            <term>NCRYPT_KEY_STORAGE_INTERFACE</term>
            <term>Retrieve the key storage functions.</term>
            </item>
            <item>
            <term>NCRYPT_SCHANNEL_INTERFACE</term>
            <term>Retrieve the Schannel functions.</term>
            </item>
            </list>
            </param>
            <returns>An array of strings that contains the names of the identifiers of the cryptographic functions.</returns>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCryptEnumContexts(Vanara.PInvoke.BCrypt.ContextConfigTable,System.UInt32@,Vanara.PInvoke.BCrypt.SafeBCryptBuffer@)">
            <summary>
            <para>
            [ <c>BCryptEnumContexts</c> is available for use in the operating systems specified in the Requirements section. It may be
            altered or unavailable in subsequent versions.]
            </para>
            <para>The <c>BCryptEnumContexts</c> function obtains the identifiers of the contexts in the specified configuration table.</para>
            </summary>
            <param name="dwTable">
            <para>Identifies the configuration table from which to retrieve the contexts. This can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPT_LOCAL</term>
            <term>Retrieve the contexts from the local-machine configuration table.</term>
            </item>
            <item>
            <term>CRYPT_DOMAIN</term>
            <term>This value is not available for use.</term>
            </item>
            </list>
            </param>
            <param name="pcbBuffer">
            <para>
            The address of a <c>ULONG</c> variable that, on entry, contains the size, in bytes, of the buffer pointed to by ppBuffer. If this
            size is not large enough to hold the set of context identifiers, this function will fail with <c>STATUS_BUFFER_TOO_SMALL</c>.
            </para>
            <para>After this function returns, this value contains the number of bytes that were copied to the ppBuffer buffer.</para>
            </param>
            <param name="ppBuffer">
            <para>
            The address of a pointer to a CRYPT_CONTEXTS structure that receives the set of contexts retrieved by this function. The value
            pointed to by the pcbBuffer parameter contains the size of this buffer.
            </para>
            <para>
            If the value pointed to by this parameter is <c>NULL</c>, this function will allocate the required memory. This memory must be
            freed when it is no longer needed by passing this pointer to the BCryptFreeBuffer function.
            </para>
            <para>
            If this parameter is <c>NULL</c>, this function will place the required size, in bytes, in the variable pointed to by the
            pcbBuffer parameter and return <c>STATUS_BUFFER_TOO_SMALL</c>.
            </para>
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>STATUS_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>STATUS_INVALID_PARAMETER</term>
            <term>One or more parameters are not valid.</term>
            </item>
            <item>
            <term>STATUS_NO_MEMORY</term>
            <term>A memory allocation failure occurred.</term>
            </item>
            <item>
            <term>STATUS_BUFFER_TOO_SMALL</term>
            <term>
            The ppBuffer parameter is not NULL, and the value pointed to by the pcbBuffer parameter is not large enough to hold the set of contexts.
            </term>
            </item>
            </list>
            </returns>
            <remarks>
            <para><c>BCryptEnumContexts</c> can be called only in user mode.</para>
            <para>Examples</para>
            <para>
            The following example shows how to use the <c>BCryptEnumContexts</c> function to allocate the memory for the ppBuffer buffer.
            </para>
            <para>
            The following example shows how to use the <c>BCryptEnumContexts</c> function to allocate your own memory for the ppBuffer buffer.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCryptEnumContexts(Vanara.PInvoke.BCrypt.ContextConfigTable)">
            <summary>
            <para>
            [ <c>BCryptEnumContexts</c> is available for use in the operating systems specified in the Requirements section. It may be
            altered or unavailable in subsequent versions.]
            </para>
            <para>The <c>BCryptEnumContexts</c> function obtains the identifiers of the contexts in the specified configuration table.</para>
            </summary>
            <param name="dwTable">
            <para>Identifies the configuration table from which to retrieve the contexts. This can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPT_LOCAL</term>
            <term>Retrieve the contexts from the local-machine configuration table.</term>
            </item>
            <item>
            <term>CRYPT_DOMAIN</term>
            <term>This value is not available for use.</term>
            </item>
            </list>
            </param>
            <returns>An array of strings that contains the names of the identifiers of the contexts.</returns>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCryptEnumProviders(System.String,System.UInt32@,Vanara.PInvoke.BCrypt.SafeBCryptBuffer@,System.UInt32)">
            <summary>The <c>BCryptEnumProviders</c> function obtains all of the CNG providers that support a specified algorithm.</summary>
            <param name="pszAlgId">
            A pointer to a null-terminated Unicode string that identifies the algorithm to obtain the providers for. This can be one of the
            predefined CNG Algorithm Identifiers or another algorithm identifier.
            </param>
            <param name="pImplCount">A pointer to a <c>ULONG</c> variable to receive the number of elements in the ppImplList array.</param>
            <param name="ppImplList">
            The address of an array of BCRYPT_PROVIDER_NAME structures to receive the collection of providers that support the specified
            algorithm. The pImplCount parameter receives the number of elements in this array. This memory must be freed when it is no longer
            needed by passing this pointer to the BCryptFreeBuffer function.
            </param>
            <param name="dwFlags">
            A set of flags that modifies the behavior of this function. There are currently no flags defined, so this parameter must be zero.
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>STATUS_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>STATUS_INVALID_PARAMETER</term>
            <term>One or more parameters are not valid.</term>
            </item>
            <item>
            <term>STATUS_NO_MEMORY</term>
            <term>A memory allocation failure occurred.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <c>BCryptEnumProviders</c> can be called either from user mode or kernel mode. Kernel mode callers must be executing at
            <c>PASSIVE_LEVEL</c> IRQL.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCryptEnumProviders(System.String)">
            <summary>The <c>BCryptEnumProviders</c> function obtains all of the CNG providers that support a specified algorithm.</summary>
            <param name="pszAlgId">
            A pointer to a null-terminated Unicode string that identifies the algorithm to obtain the providers for. This can be one of the
            predefined CNG Algorithm Identifiers or another algorithm identifier.
            </param>
            <returns>An array of strings that contains the names of the providers.</returns>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCryptEnumRegisteredProviders(System.UInt32@,Vanara.PInvoke.BCrypt.SafeBCryptBuffer@)">
            <summary>The <c>BCryptEnumRegisteredProviders</c> function retrieves information about the registered providers.</summary>
            <param name="pcbBuffer">
            <para>
            A pointer to a <c>ULONG</c> value that, on entry, contains the size, in bytes, of the buffer pointed to by the ppBuffer
            parameter. On exit, this value receives either the number of bytes copied to the buffer or the required size, in bytes, of the buffer.
            </para>
            <para>
            <c>Note</c> This is the total size, in bytes, of the entire buffer, not just the size of the CRYPT_PROVIDERS structure. The
            buffer must be able to hold other data for the providers in addition to the <c>CRYPT_PROVIDERS</c> structure.
            </para>
            </param>
            <param name="ppBuffer">
            <para>
            A pointer to a buffer pointer that receives a CRYPT_PROVIDERS structure and other data that describes the collection of
            registered providers.
            </para>
            <para>
            If this parameter is <c>NULL</c>, this function will return <c>STATUS_BUFFER_TOO_SMALL</c> and place in the value pointed to by
            the pcbBuffer parameter, the required size, in bytes, of all the data.
            </para>
            <para>
            If this parameter is the address of a <c>NULL</c> pointer, this function will allocate the required memory, fill the memory with
            the information about the providers, and place the pointer to this memory in this parameter. When you have finished using this
            memory, free it by passing this pointer to the BCryptFreeBuffer function.
            </para>
            <para>
            If this parameter is the address of a non- <c>NULL</c> pointer, this function will copy the provider information into this
            buffer. The pcbBuffer parameter must contain the size, in bytes, of the entire buffer. If the buffer is not large enough to hold
            all of the provider information, this function will return <c>STATUS_BUFFER_TOO_SMALL</c>.
            </para>
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>STATUS_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>STATUS_BUFFER_TOO_SMALL</term>
            <term>The size specified by the pcbBuffer parameter is not large enough to hold all of the data.</term>
            </item>
            <item>
            <term>STATUS_INVALID_PARAMETER</term>
            <term>One or more parameters are not valid.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The <c>BCryptEnumRegisteredProviders</c> function can be called in one of two ways:</para>
            <list type="bullet">
            <item>
            <term>
            The first is to have the <c>BCryptEnumRegisteredProviders</c> function allocate the memory. This is accomplished by passing the
            address of a <c>NULL</c> pointer for the ppBuffer parameter. This code will allocate the memory required for the CRYPT_PROVIDERS
            structure and the associated strings. When the <c>BCryptEnumRegisteredProviders</c> function is used in this manner, you must
            free the memory when it is no longer needed by passing ppBuffer to the BCryptFreeBuffer function.
            </term>
            </item>
            <item>
            <term>
            The second method is to allocate the required memory yourself. This is accomplished by calling the
            <c>BCryptEnumRegisteredProviders</c> function with <c>NULL</c> for the ppBuffer parameter. The
            <c>BCryptEnumRegisteredProviders</c> function will place in the value pointed to by the pcbBuffer parameter, the required size,
            in bytes, of the CRYPT_PROVIDERS structure and all strings. You then allocate the required memory and pass the address of this
            buffer pointer for the ppBuffer parameter in a second call to the <c>BCryptEnumRegisteredProviders</c> function.
            </term>
            </item>
            </list>
            <para><c>BCryptEnumRegisteredProviders</c> can be called only in user mode.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCryptEnumRegisteredProviders">
            <summary>The <c>BCryptEnumRegisteredProviders</c> function retrieves information about the registered providers.</summary>
            <returns>An array of strings that contains the names of the registered providers.</returns>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCryptExportKey(Vanara.PInvoke.BCrypt.BCRYPT_KEY_HANDLE,Vanara.PInvoke.BCrypt.BCRYPT_KEY_HANDLE,System.String,Vanara.InteropServices.SafeAllocatedMemoryHandle,System.UInt32,System.UInt32@,System.UInt32)">
            <summary>The <c>BCryptExportKey</c> function exports a key to a memory BLOB that can be persisted for later use.</summary>
            <param name="hKey">The handle of the key to export.</param>
            <param name="hExportKey">
            <para>
            The handle of the key with which to wrap the exported key. Use this parameter when exporting BLOBs of type
            <c>BCRYPT_AES_WRAP_KEY_BLOB</c>; otherwise, set it to <c>NULL</c>.
            </para>
            <para><c>Windows Server 2008 and Windows Vista:</c> This parameter is not used and should be set to <c>NULL</c>.</para>
            </param>
            <param name="pszBlobType">
            <para>
            A null-terminated Unicode string that contains an identifier that specifies the type of BLOB to export. This can be one of the
            following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>BCRYPT_AES_WRAP_KEY_BLOB</term>
            <term>
            Export an AES key wrapped key. The hExportKey parameter must reference a valid BCRYPT_KEY_HANDLE pointer to the key encryption
            key, and the key represented by the hKey parameter must be a multiple of 8 bytes long. Windows Server 2008 and Windows Vista:
            This BLOB type is not supported.
            </term>
            </item>
            <item>
            <term>BCRYPT_DH_PRIVATE_BLOB</term>
            <term>
            Export a Diffie-Hellman public/private key pair. The pbOutput buffer receives a BCRYPT_DH_KEY_BLOB structure immediately followed
            by the key data.
            </term>
            </item>
            <item>
            <term>BCRYPT_DH_PUBLIC_BLOB</term>
            <term>
            Export a Diffie-Hellman public key. The pbOutput buffer receives a BCRYPT_DH_KEY_BLOB structure immediately followed by the key data.
            </term>
            </item>
            <item>
            <term>BCRYPT_DSA_PRIVATE_BLOB</term>
            <term>
            Export a DSA public/private key pair. The pbOutput buffer receives a BCRYPT_DSA_KEY_BLOB or BCRYPT_DSA_KEY_BLOB_V2 structure
            immediately followed by the key data. BCRYPT_DSA_KEY_BLOB is used for key lengths from 512 to 1024 bits. BCRYPT_DSA_KEY_BLOB_V2
            is used for key lengths that exceed 1024 bits but are less than or equal to 3072 bits. Windows 8: Support for
            BCRYPT_DSA_KEY_BLOB_V2 begins.
            </term>
            </item>
            <item>
            <term>BCRYPT_DSA_PUBLIC_BLOB</term>
            <term>
            Export a DSA public key. The pbOutput buffer receives a BCRYPT_DSA_KEY_BLOB or BCRYPT_DSA_KEY_BLOB_V2 structure immediately
            followed by the key data. BCRYPT_DSA_KEY_BLOB is used for key lengths from 512 to 1024 bits. BCRYPT_DSA_KEY_BLOB_V2 is used for
            key lengths that exceed 1024 bits but are less than or equal to 3072 bits. Windows 8: Support for BCRYPT_DSA_KEY_BLOB_V2 begins.
            </term>
            </item>
            <item>
            <term>BCRYPT_ECCPRIVATE_BLOB</term>
            <term>
            Export an elliptic curve cryptography (ECC) private key. The pbOutput buffer receives a BCRYPT_ECCKEY_BLOB structure immediately
            followed by the key data.
            </term>
            </item>
            <item>
            <term>BCRYPT_ECCPUBLIC_BLOB</term>
            <term>
            Export an ECC public key. The pbOutput buffer receives a BCRYPT_ECCKEY_BLOB structure immediately followed by the key data.
            </term>
            </item>
            <item>
            <term>BCRYPT_KEY_DATA_BLOB</term>
            <term>
            Export a symmetric key to a data BLOB. The pbOutput buffer receives a BCRYPT_KEY_DATA_BLOB_HEADER structure immediately followed
            by the key BLOB.
            </term>
            </item>
            <item>
            <term>BCRYPT_OPAQUE_KEY_BLOB</term>
            <term>
            Export a symmetric key in a format that is specific to a single cryptographic service provider (CSP). Opaque BLOBs are not
            transferable and must be imported by using the same CSP that generated the BLOB. Opaque BLOBs are only intended to be used for
            interprocess transfer of keys and are not suitable to be persisted and read across versions of a provider.
            </term>
            </item>
            <item>
            <term>BCRYPT_PUBLIC_KEY_BLOB</term>
            <term>
            Export a generic public key of any type. The type of key in this BLOB is determined by the Magic member of the BCRYPT_KEY_BLOB structure.
            </term>
            </item>
            <item>
            <term>BCRYPT_PRIVATE_KEY_BLOB</term>
            <term>
            Export a generic private key of any type. The private key does not necessarily contain the public key. The type of key in this
            BLOB is determined by the Magic member of the BCRYPT_KEY_BLOB structure.
            </term>
            </item>
            <item>
            <term>BCRYPT_RSAFULLPRIVATE_BLOB</term>
            <term>
            Export a full RSA public/private key pair. The pbOutput buffer receives a BCRYPT_RSAKEY_BLOB structure immediately followed by
            the key data. This BLOB will include additional key material compared to the BCRYPT_RSAPRIVATE_BLOB type.
            </term>
            </item>
            <item>
            <term>BCRYPT_RSAPRIVATE_BLOB</term>
            <term>
            Export an RSA public/private key pair. The pbOutput buffer receives a BCRYPT_RSAKEY_BLOB structure immediately followed by the
            key data.
            </term>
            </item>
            <item>
            <term>BCRYPT_RSAPUBLIC_BLOB</term>
            <term>
            Export an RSA public key. The pbOutput buffer receives a BCRYPT_RSAKEY_BLOB structure immediately followed by the key data.
            </term>
            </item>
            <item>
            <term>LEGACY_DH_PRIVATE_BLOB</term>
            <term>
            Export a legacy Diffie-Hellman Version 3 Private Key BLOB that contains a Diffie-Hellman public/private key pair that can be
            imported by using CryptoAPI.
            </term>
            </item>
            <item>
            <term>LEGACY_DH_PUBLIC_BLOB</term>
            <term>
            Export a legacy Diffie-Hellman Version 3 Public Key BLOB that contains a Diffie-Hellman public key that can be imported by using CryptoAPI.
            </term>
            </item>
            <item>
            <term>LEGACY_DSA_PRIVATE_BLOB</term>
            <term>Export a DSA public/private key pair in a form that can be imported by using CryptoAPI.</term>
            </item>
            <item>
            <term>LEGACY_DSA_PUBLIC_BLOB</term>
            <term>Export a DSA public key in a form that can be imported by using CryptoAPI.</term>
            </item>
            <item>
            <term>LEGACY_DSA_V2_PRIVATE_BLOB</term>
            <term>Export a DSA version 2 private key in a form that can be imported by using CryptoAPI.</term>
            </item>
            <item>
            <term>LEGACY_RSAPRIVATE_BLOB</term>
            <term>Export an RSA public/private key pair in a form that can be imported by using CryptoAPI.</term>
            </item>
            <item>
            <term>LEGACY_RSAPUBLIC_BLOB</term>
            <term>Export an RSA public key in a form that can be imported by using CryptoAPI.</term>
            </item>
            </list>
            </param>
            <param name="pbOutput">
            The address of a buffer that receives the key BLOB. The cbOutput parameter contains the size of this buffer. If this parameter is
            <c>NULL</c>, this function will place the required size, in bytes, in the <c>ULONG</c> pointed to by the pcbResult parameter.
            </param>
            <param name="cbOutput">Contains the size, in bytes, of the pbOutput buffer.</param>
            <param name="pcbResult">
            A pointer to a <c>ULONG</c> that receives the number of bytes that were copied to the pbOutput buffer. If the pbOutput parameter
            is <c>NULL</c>, this function will place the required size, in bytes, in the <c>ULONG</c> pointed to by this parameter.
            </param>
            <param name="dwFlags">A set of flags that modify the behavior of this function. No flags are defined for this function.</param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>STATUS_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>STATUS_BUFFER_TOO_SMALL</term>
            <term>The size specified by the cbOutput parameter is not large enough to hold the ciphertext.</term>
            </item>
            <item>
            <term>STATUS_INVALID_HANDLE</term>
            <term>The key handle in the hKey parameter is not valid.</term>
            </item>
            <item>
            <term>STATUS_INVALID_PARAMETER</term>
            <term>One or more parameters are not valid.</term>
            </item>
            <item>
            <term>STATUS_NOT_SUPPORTED</term>
            <term>The specified BLOB type is not supported by the provider.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            Depending on what processor modes a provider supports, <c>BCryptExportKey</c> can be called either from user mode or kernel mode.
            Kernel mode callers can execute either at <c>PASSIVE_LEVEL</c> IRQL or <c>DISPATCH_LEVEL</c> IRQL. If the current IRQL level is
            <c>DISPATCH_LEVEL</c>, the handle provided in the hKey parameter must be derived from an algorithm handle returned by a provider
            that was opened with the <c>BCRYPT_PROV_DISPATCH</c> flag, and any pointers passed to the <c>BCryptExportKey</c> function must
            refer to nonpaged (or locked) memory.
            </para>
            <para>
            To call this function in kernel mode, use Cng.lib, which is part of the Driver Development Kit (DDK). For more information, see
            WDK and Developer Tools. <c>Windows Server 2008 and Windows Vista:</c> To call this function in kernel mode, use Ksecdd.lib.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCryptExportKey(Vanara.PInvoke.BCrypt.BCRYPT_KEY_HANDLE,Vanara.PInvoke.BCrypt.BCRYPT_KEY_HANDLE,System.String,System.IntPtr,System.UInt32,System.UInt32@,System.UInt32)">
            <summary>The <c>BCryptExportKey</c> function exports a key to a memory BLOB that can be persisted for later use.</summary>
            <param name="hKey">The handle of the key to export.</param>
            <param name="hExportKey">
            <para>
            The handle of the key with which to wrap the exported key. Use this parameter when exporting BLOBs of type
            <c>BCRYPT_AES_WRAP_KEY_BLOB</c>; otherwise, set it to <c>NULL</c>.
            </para>
            <para><c>Windows Server 2008 and Windows Vista:</c> This parameter is not used and should be set to <c>NULL</c>.</para>
            </param>
            <param name="pszBlobType">
            <para>
            A null-terminated Unicode string that contains an identifier that specifies the type of BLOB to export. This can be one of the
            following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>BCRYPT_AES_WRAP_KEY_BLOB</term>
            <term>
            Export an AES key wrapped key. The hExportKey parameter must reference a valid BCRYPT_KEY_HANDLE pointer to the key encryption
            key, and the key represented by the hKey parameter must be a multiple of 8 bytes long. Windows Server 2008 and Windows Vista:
            This BLOB type is not supported.
            </term>
            </item>
            <item>
            <term>BCRYPT_DH_PRIVATE_BLOB</term>
            <term>
            Export a Diffie-Hellman public/private key pair. The pbOutput buffer receives a BCRYPT_DH_KEY_BLOB structure immediately followed
            by the key data.
            </term>
            </item>
            <item>
            <term>BCRYPT_DH_PUBLIC_BLOB</term>
            <term>
            Export a Diffie-Hellman public key. The pbOutput buffer receives a BCRYPT_DH_KEY_BLOB structure immediately followed by the key data.
            </term>
            </item>
            <item>
            <term>BCRYPT_DSA_PRIVATE_BLOB</term>
            <term>
            Export a DSA public/private key pair. The pbOutput buffer receives a BCRYPT_DSA_KEY_BLOB or BCRYPT_DSA_KEY_BLOB_V2 structure
            immediately followed by the key data. BCRYPT_DSA_KEY_BLOB is used for key lengths from 512 to 1024 bits. BCRYPT_DSA_KEY_BLOB_V2
            is used for key lengths that exceed 1024 bits but are less than or equal to 3072 bits. Windows 8: Support for
            BCRYPT_DSA_KEY_BLOB_V2 begins.
            </term>
            </item>
            <item>
            <term>BCRYPT_DSA_PUBLIC_BLOB</term>
            <term>
            Export a DSA public key. The pbOutput buffer receives a BCRYPT_DSA_KEY_BLOB or BCRYPT_DSA_KEY_BLOB_V2 structure immediately
            followed by the key data. BCRYPT_DSA_KEY_BLOB is used for key lengths from 512 to 1024 bits. BCRYPT_DSA_KEY_BLOB_V2 is used for
            key lengths that exceed 1024 bits but are less than or equal to 3072 bits. Windows 8: Support for BCRYPT_DSA_KEY_BLOB_V2 begins.
            </term>
            </item>
            <item>
            <term>BCRYPT_ECCPRIVATE_BLOB</term>
            <term>
            Export an elliptic curve cryptography (ECC) private key. The pbOutput buffer receives a BCRYPT_ECCKEY_BLOB structure immediately
            followed by the key data.
            </term>
            </item>
            <item>
            <term>BCRYPT_ECCPUBLIC_BLOB</term>
            <term>
            Export an ECC public key. The pbOutput buffer receives a BCRYPT_ECCKEY_BLOB structure immediately followed by the key data.
            </term>
            </item>
            <item>
            <term>BCRYPT_KEY_DATA_BLOB</term>
            <term>
            Export a symmetric key to a data BLOB. The pbOutput buffer receives a BCRYPT_KEY_DATA_BLOB_HEADER structure immediately followed
            by the key BLOB.
            </term>
            </item>
            <item>
            <term>BCRYPT_OPAQUE_KEY_BLOB</term>
            <term>
            Export a symmetric key in a format that is specific to a single cryptographic service provider (CSP). Opaque BLOBs are not
            transferable and must be imported by using the same CSP that generated the BLOB. Opaque BLOBs are only intended to be used for
            interprocess transfer of keys and are not suitable to be persisted and read across versions of a provider.
            </term>
            </item>
            <item>
            <term>BCRYPT_PUBLIC_KEY_BLOB</term>
            <term>
            Export a generic public key of any type. The type of key in this BLOB is determined by the Magic member of the BCRYPT_KEY_BLOB structure.
            </term>
            </item>
            <item>
            <term>BCRYPT_PRIVATE_KEY_BLOB</term>
            <term>
            Export a generic private key of any type. The private key does not necessarily contain the public key. The type of key in this
            BLOB is determined by the Magic member of the BCRYPT_KEY_BLOB structure.
            </term>
            </item>
            <item>
            <term>BCRYPT_RSAFULLPRIVATE_BLOB</term>
            <term>
            Export a full RSA public/private key pair. The pbOutput buffer receives a BCRYPT_RSAKEY_BLOB structure immediately followed by
            the key data. This BLOB will include additional key material compared to the BCRYPT_RSAPRIVATE_BLOB type.
            </term>
            </item>
            <item>
            <term>BCRYPT_RSAPRIVATE_BLOB</term>
            <term>
            Export an RSA public/private key pair. The pbOutput buffer receives a BCRYPT_RSAKEY_BLOB structure immediately followed by the
            key data.
            </term>
            </item>
            <item>
            <term>BCRYPT_RSAPUBLIC_BLOB</term>
            <term>
            Export an RSA public key. The pbOutput buffer receives a BCRYPT_RSAKEY_BLOB structure immediately followed by the key data.
            </term>
            </item>
            <item>
            <term>LEGACY_DH_PRIVATE_BLOB</term>
            <term>
            Export a legacy Diffie-Hellman Version 3 Private Key BLOB that contains a Diffie-Hellman public/private key pair that can be
            imported by using CryptoAPI.
            </term>
            </item>
            <item>
            <term>LEGACY_DH_PUBLIC_BLOB</term>
            <term>
            Export a legacy Diffie-Hellman Version 3 Public Key BLOB that contains a Diffie-Hellman public key that can be imported by using CryptoAPI.
            </term>
            </item>
            <item>
            <term>LEGACY_DSA_PRIVATE_BLOB</term>
            <term>Export a DSA public/private key pair in a form that can be imported by using CryptoAPI.</term>
            </item>
            <item>
            <term>LEGACY_DSA_PUBLIC_BLOB</term>
            <term>Export a DSA public key in a form that can be imported by using CryptoAPI.</term>
            </item>
            <item>
            <term>LEGACY_DSA_V2_PRIVATE_BLOB</term>
            <term>Export a DSA version 2 private key in a form that can be imported by using CryptoAPI.</term>
            </item>
            <item>
            <term>LEGACY_RSAPRIVATE_BLOB</term>
            <term>Export an RSA public/private key pair in a form that can be imported by using CryptoAPI.</term>
            </item>
            <item>
            <term>LEGACY_RSAPUBLIC_BLOB</term>
            <term>Export an RSA public key in a form that can be imported by using CryptoAPI.</term>
            </item>
            </list>
            </param>
            <param name="pbOutput">
            The address of a buffer that receives the key BLOB. The cbOutput parameter contains the size of this buffer. If this parameter is
            <c>NULL</c>, this function will place the required size, in bytes, in the <c>ULONG</c> pointed to by the pcbResult parameter.
            </param>
            <param name="cbOutput">Contains the size, in bytes, of the pbOutput buffer.</param>
            <param name="pcbResult">
            A pointer to a <c>ULONG</c> that receives the number of bytes that were copied to the pbOutput buffer. If the pbOutput parameter
            is <c>NULL</c>, this function will place the required size, in bytes, in the <c>ULONG</c> pointed to by this parameter.
            </param>
            <param name="dwFlags">A set of flags that modify the behavior of this function. No flags are defined for this function.</param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>STATUS_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>STATUS_BUFFER_TOO_SMALL</term>
            <term>The size specified by the cbOutput parameter is not large enough to hold the ciphertext.</term>
            </item>
            <item>
            <term>STATUS_INVALID_HANDLE</term>
            <term>The key handle in the hKey parameter is not valid.</term>
            </item>
            <item>
            <term>STATUS_INVALID_PARAMETER</term>
            <term>One or more parameters are not valid.</term>
            </item>
            <item>
            <term>STATUS_NOT_SUPPORTED</term>
            <term>The specified BLOB type is not supported by the provider.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            Depending on what processor modes a provider supports, <c>BCryptExportKey</c> can be called either from user mode or kernel mode.
            Kernel mode callers can execute either at <c>PASSIVE_LEVEL</c> IRQL or <c>DISPATCH_LEVEL</c> IRQL. If the current IRQL level is
            <c>DISPATCH_LEVEL</c>, the handle provided in the hKey parameter must be derived from an algorithm handle returned by a provider
            that was opened with the <c>BCRYPT_PROV_DISPATCH</c> flag, and any pointers passed to the <c>BCryptExportKey</c> function must
            refer to nonpaged (or locked) memory.
            </para>
            <para>
            To call this function in kernel mode, use Cng.lib, which is part of the Driver Development Kit (DDK). For more information, see
            WDK and Developer Tools. <c>Windows Server 2008 and Windows Vista:</c> To call this function in kernel mode, use Ksecdd.lib.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCryptFinalizeKeyPair(Vanara.PInvoke.BCrypt.BCRYPT_KEY_HANDLE,System.UInt32)">
            <summary>
            The <c>BCryptFinalizeKeyPair</c> function completes a public/private key pair. The key cannot be used until this function has
            been called. After this function has been called, the BCryptSetProperty function can no longer be used for this key.
            </summary>
            <param name="hKey">The handle of the key to complete. This handle is obtained by calling the BCryptGenerateKeyPair function.</param>
            <param name="dwFlags">
            A set of flags that modify the behavior of this function. No flags are currently defined, so this parameter should be zero.
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>STATUS_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>STATUS_INVALID_HANDLE</term>
            <term>The key handle in the hKey parameter is not valid.</term>
            </item>
            <item>
            <term>STATUS_INVALID_PARAMETER</term>
            <term>One or more parameters are not valid.</term>
            </item>
            <item>
            <term>STATUS_NOT_SUPPORTED</term>
            <term>The specified provider does not support asymmetric key encryption.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            Depending on what processor modes a provider supports, <c>BCryptFinalizeKeyPair</c> can be called either from user mode or kernel
            mode. Kernel mode callers can execute either at <c>PASSIVE_LEVEL</c> IRQL or <c>DISPATCH_LEVEL</c> IRQL. If the current IRQL
            level is <c>DISPATCH_LEVEL</c>, the handle provided in the hKey parameter must be derived from an algorithm handle returned by a
            provider that was opened with the <c>BCRYPT_PROV_DISPATCH</c> flag.
            </para>
            <para>
            To call this function in kernel mode, use Cng.lib, which is part of the Driver Development Kit (DDK). For more information, see
            WDK and Developer Tools. <c>Windows Server 2008 and Windows Vista:</c> To call this function in kernel mode, use Ksecdd.lib.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCryptFinishHash(Vanara.PInvoke.BCrypt.BCRYPT_HASH_HANDLE,Vanara.InteropServices.SafeAllocatedMemoryHandle,System.UInt32,System.UInt32)">
            <summary>
            <para>
            The <c>BCryptFinishHash</c> function retrieves the hash or Message Authentication Code (MAC) value for the data accumulated from
            prior calls to BCryptHashData.
            </para>
            </summary>
            <param name="hHash">
            <para>
            The handle of the hash or MAC object to use to compute the hash or MAC. This handle is obtained by calling the BCryptCreateHash
            function. After this function has been called, the hash handle passed to this function cannot be used again except in a call to BCryptDestroyHash.
            </para>
            </param>
            <param name="pbOutput">
            <para>A pointer to a buffer that receives the hash or MAC value. The cbOutput parameter contains the size of this buffer.</para>
            </param>
            <param name="cbOutput">
            <para>The size, in bytes, of the pbOutput buffer. This size must exactly match the size of the hash or MAC value.</para>
            <para>
            The size can be obtained by calling the BCryptGetProperty function to get the <c>BCRYPT_HASH_LENGTH</c> property. This will
            provide the size of the hash or MAC value for the specified algorithm.
            </para>
            </param>
            <param name="dwFlags">
            <para>
            A set of flags that modify the behavior of this function. No flags are currently defined, so this parameter should be zero.
            </para>
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>STATUS_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>STATUS_INVALID_HANDLE</term>
            <term>
            The hash handle in the hHash parameter is not valid. After the BCryptFinishHash function has been called for a hash handle, that
            handle cannot be reused.
            </term>
            </item>
            <item>
            <term>STATUS_INVALID_PARAMETER</term>
            <term>One or more parameters are not valid. This includes the case where cbOutput is not the same size as the hash.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            Depending on what processor modes a provider supports, <c>BCryptFinishHash</c> can be called either from user mode or kernel
            mode. Kernel mode callers can execute either at <c>PASSIVE_LEVEL</c> IRQL or <c>DISPATCH_LEVEL</c> IRQL. If the current IRQL
            level is <c>DISPATCH_LEVEL</c>, the handle provided in the hHash parameter must be derived from an algorithm handle returned by a
            provider that was opened by using the <c>BCRYPT_PROV_DISPATCH</c> flag, and any pointers passed to the <c>BCryptFinishHash</c>
            function must refer to nonpaged (or locked) memory.
            </para>
            <para>
            To call this function in kernel mode, use Cng.lib, which is part of the Driver Development Kit (DDK). For more information, see
            WDK and Developer Tools. <c>Windows Server 2008 and Windows Vista:</c> To call this function in kernel mode, use Ksecdd.lib.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCryptFreeBuffer(System.IntPtr)">
            <summary>
            <para>The <c>BCryptFreeBuffer</c> function is used to free memory that was allocated by one of the CNG functions.</para>
            </summary>
            <param name="pvBuffer">
            <para>A pointer to the memory buffer to be freed.</para>
            </param>
            <returns>
            <para>This function does not return a value.</para>
            </returns>
            <remarks>
            <para>
            <c>BCryptFreeBuffer</c> must be called in the same processor mode as the BCrypt API function that allocated the buffer. In
            addition, if the buffer was allocated at <c>PASSIVE_LEVEL</c> IRQL, it must be freed at that IRQL. If the buffer was allocated at
            <c>DISPATCH_LEVEL</c> IRQL, it can be freed at either <c>DISPATCH_LEVEL</c> IRQL or <c>PASSIVE_LEVEL</c> IRQL.
            </para>
            <para>
            To call this function in kernel mode, use Cng.lib, which is part of the Driver Development Kit (DDK). For more information, see
            WDK and Developer Tools. <c>Windows Server 2008 and Windows Vista:</c> To call this function in kernel mode, use Ksecdd.lib.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCryptGenerateKeyPair(Vanara.PInvoke.BCrypt.BCRYPT_ALG_HANDLE,Vanara.PInvoke.BCrypt.SafeBCRYPT_KEY_HANDLE@,System.UInt32,System.UInt32)">
            <summary>
            The <c>BCryptGenerateKeyPair</c> function creates an empty public/private key pair. After you create a key by using this
            function, you can use the BCryptSetProperty function to set its properties; however, the key cannot be used until the
            BCryptFinalizeKeyPair function is called.
            </summary>
            <param name="hAlgorithm">
            Handle of an algorithm provider that supports signing, asymmetric encryption, or key agreement. This handle must have been
            created by using the BCryptOpenAlgorithmProvider function.
            </param>
            <param name="phKey">
            A pointer to a <c>BCRYPT_KEY_HANDLE</c> that receives the handle of the key. This handle is used in subsequent functions that
            require a key, such as BCryptEncrypt. This handle must be released when it is no longer needed by passing it to the
            BCryptDestroyKey function.
            </param>
            <param name="dwLength">
            <para>
            The length, in bits, of the key. Algorithm providers have different key size restrictions for each standard asymmetric algorithm.
            </para>
            <list type="table">
            <listheader>
            <term>Algorithm identifier</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>BCRYPT_DH_ALGORITHM</term>
            <term>The key size must be greater than or equal to 512 bits, less than or equal to 4096 bits, and must be a multiple of 64.</term>
            </item>
            <item>
            <term>BCRYPT_DSA_ALGORITHM</term>
            <term>
            Prior to Windows 8, the key size must be greater than or equal to 512 bits, less than or equal to 1024 bits, and must be a
            multiple of 64. Beginning with Windows 8, the key size must be greater than or equal to 512 bits, less than or equal to 3072
            bits, and must be a multiple of 64. Processing for key sizes less than or equal to 1024 bits adheres to FIPS-186-2. Processing
            for key sizes greater than 1024 and less than or equal to 3072 adheres to FIPS 186-3.
            </term>
            </item>
            <item>
            <term>BCRYPT_ECDH_P256_ALGORITHM</term>
            <term>The key size must be 256 bits.</term>
            </item>
            <item>
            <term>BCRYPT_ECDH_P384_ALGORITHM</term>
            <term>The key size must be 384 bits.</term>
            </item>
            <item>
            <term>BCRYPT_ECDH_P521_ALGORITHM</term>
            <term>The key size must be 521 bits.</term>
            </item>
            <item>
            <term>BCRYPT_ECDSA_P256_ALGORITHM</term>
            <term>The key size must be 256 bits.</term>
            </item>
            <item>
            <term>BCRYPT_ECDSA_P384_ALGORITHM</term>
            <term>The key size must be 384 bits.</term>
            </item>
            <item>
            <term>BCRYPT_ECDSA_P521_ALGORITHM</term>
            <term>The key size must be 521 bits.</term>
            </item>
            <item>
            <term>BCRYPT_RSA_ALGORITHM</term>
            <term>The key size must be greater than or equal to 512 bits, less than or equal to 16384 bits, and must be a multiple of 64.</term>
            </item>
            </list>
            </param>
            <param name="dwFlags">
            A set of flags that modify the behavior of this function. No flags are currently defined, so this parameter should be zero.
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>STATUS_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>STATUS_INVALID_HANDLE</term>
            <term>The algorithm handle in the hAlgorithm parameter is not valid.</term>
            </item>
            <item>
            <term>STATUS_INVALID_PARAMETER</term>
            <term>One or more parameters are not valid.</term>
            </item>
            <item>
            <term>STATUS_NOT_SUPPORTED</term>
            <term>The specified provider does not support asymmetric key encryption.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            Depending on what processor modes a provider supports, <c>BCryptGenerateKeyPair</c> can be called either from user mode or kernel
            mode. Kernel mode callers can execute either at <c>PASSIVE_LEVEL</c> IRQL or <c>DISPATCH_LEVEL</c> IRQL. If the current IRQL
            level is <c>DISPATCH_LEVEL</c>, the handle provided in the hAlgorithm parameter must have been opened by using the
            <c>BCRYPT_PROV_DISPATCH</c> flag, and any pointers passed to the <c>BCryptGenerateKeyPair</c> function must refer to nonpaged (or
            locked) memory.
            </para>
            <para>
            To call this function in kernel mode, use Cng.lib, which is part of the Driver Development Kit (DDK). For more information, see
            WDK and Developer Tools. <c>Windows Server 2008 and Windows Vista:</c> To call this function in kernel mode, use Ksecdd.lib.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCryptGenerateSymmetricKey(Vanara.PInvoke.BCrypt.BCRYPT_ALG_HANDLE,Vanara.PInvoke.BCrypt.SafeBCRYPT_KEY_HANDLE@,Vanara.InteropServices.SafeAllocatedMemoryHandle,System.UInt32,System.Byte[],System.UInt32,System.UInt32)">
            <summary>
            The <c>BCryptGenerateSymmetricKey</c> function creates a key object for use with a symmetrical key encryption algorithm from a
            supplied key.
            </summary>
            <param name="hAlgorithm">
            The handle of an algorithm provider created with the BCryptOpenAlgorithmProvider function. The algorithm specified when the
            provider was created must support symmetric key encryption.
            </param>
            <param name="phKey">
            A pointer to a <c>BCRYPT_KEY_HANDLE</c> that receives the handle of the key. This handle is used in subsequent functions that
            require a key, such as BCryptEncrypt. This handle must be released when it is no longer needed by passing it to the
            BCryptDestroyKey function.
            </param>
            <param name="pbKeyObject">
            <para>
            A pointer to a buffer that receives the key object. The cbKeyObject parameter contains the size of this buffer. The required size
            of this buffer can be obtained by calling the BCryptGetProperty function to get the <c>BCRYPT_OBJECT_LENGTH</c> property. This
            will provide the size of the key object for the specified algorithm.
            </para>
            <para>This memory can only be freed after the phKey key handle is destroyed.</para>
            <para>
            If the value of this parameter is <c>NULL</c> and the value of the cbKeyObject parameter is zero, the memory for the key object
            is allocated and freed by this function. <c>Windows 7:</c> This memory management functionality is available beginning with
            Windows 7.
            </para>
            </param>
            <param name="cbKeyObject">
            <para>The size, in bytes, of the pbKeyObject buffer.</para>
            <para>
            If the value of this parameter is zero and the value of the pbKeyObject parameter is <c>NULL</c>, the memory for the key object
            is allocated and freed by this function. <c>Windows 7:</c> This memory management functionality is available beginning with
            Windows 7.
            </para>
            </param>
            <param name="pbSecret">
            <para>
            Pointer to a buffer that contains the key from which to create the key object. The cbSecret parameter contains the size of this
            buffer. This is normally a hash of a password or some other reproducible data. If the data passed in exceeds the target key size,
            the data will be truncated and the excess will be ignored.
            </para>
            <para><c>Note</c> We strongly recommended that applications pass in the exact number of bytes required by the target key.</para>
            </param>
            <param name="cbSecret">The size, in bytes, of the pbSecret buffer.</param>
            <param name="dwFlags">
            A set of flags that modify the behavior of this function. No flags are currently defined, so this parameter should be zero.
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>STATUS_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>STATUS_BUFFER_TOO_SMALL</term>
            <term>The size of the key object specified by the cbKeyObject parameter is not large enough to hold the key object.</term>
            </item>
            <item>
            <term>STATUS_INVALID_HANDLE</term>
            <term>The algorithm handle in the hAlgorithm parameter is not valid.</term>
            </item>
            <item>
            <term>STATUS_INVALID_PARAMETER</term>
            <term>One or more parameters are not valid.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            Depending on what processor modes a provider supports, <c>BCryptGenerateSymmetricKey</c> can be called either from user mode or
            kernel mode. Kernel mode callers can execute either at <c>PASSIVE_LEVEL</c> IRQL or <c>DISPATCH_LEVEL</c> IRQL. If the current
            IRQL level is <c>DISPATCH_LEVEL</c>, the handle provided in the hAlgorithm parameter must have been opened by using the
            <c>BCRYPT_PROV_DISPATCH</c> flag, and any pointers passed to the <c>BCryptGenerateSymmetricKey</c> function must refer to
            nonpaged (or locked) memory.
            </para>
            <para>
            To call this function in kernel mode, use Cng.lib, which is part of the Driver Development Kit (DDK). For more information, see
            WDK and Developer Tools. <c>Windows Server 2008 and Windows Vista:</c> To call this function in kernel mode, use Ksecdd.lib.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCryptGenerateSymmetricKey(Vanara.PInvoke.BCrypt.BCRYPT_ALG_HANDLE,Vanara.PInvoke.BCrypt.SafeBCRYPT_KEY_HANDLE@,System.IntPtr,System.UInt32,System.Byte[],System.UInt32,System.UInt32)">
            <summary>
            The <c>BCryptGenerateSymmetricKey</c> function creates a key object for use with a symmetrical key encryption algorithm from a
            supplied key.
            </summary>
            <param name="hAlgorithm">
            The handle of an algorithm provider created with the BCryptOpenAlgorithmProvider function. The algorithm specified when the
            provider was created must support symmetric key encryption.
            </param>
            <param name="phKey">
            A pointer to a <c>BCRYPT_KEY_HANDLE</c> that receives the handle of the key. This handle is used in subsequent functions that
            require a key, such as BCryptEncrypt. This handle must be released when it is no longer needed by passing it to the
            BCryptDestroyKey function.
            </param>
            <param name="pbKeyObject">
            <para>
            A pointer to a buffer that receives the key object. The cbKeyObject parameter contains the size of this buffer. The required size
            of this buffer can be obtained by calling the BCryptGetProperty function to get the <c>BCRYPT_OBJECT_LENGTH</c> property. This
            will provide the size of the key object for the specified algorithm.
            </para>
            <para>This memory can only be freed after the phKey key handle is destroyed.</para>
            <para>
            If the value of this parameter is <c>NULL</c> and the value of the cbKeyObject parameter is zero, the memory for the key object
            is allocated and freed by this function. <c>Windows 7:</c> This memory management functionality is available beginning with
            Windows 7.
            </para>
            </param>
            <param name="cbKeyObject">
            <para>The size, in bytes, of the pbKeyObject buffer.</para>
            <para>
            If the value of this parameter is zero and the value of the pbKeyObject parameter is <c>NULL</c>, the memory for the key object
            is allocated and freed by this function. <c>Windows 7:</c> This memory management functionality is available beginning with
            Windows 7.
            </para>
            </param>
            <param name="pbSecret">
            <para>
            Pointer to a buffer that contains the key from which to create the key object. The cbSecret parameter contains the size of this
            buffer. This is normally a hash of a password or some other reproducible data. If the data passed in exceeds the target key size,
            the data will be truncated and the excess will be ignored.
            </para>
            <para><c>Note</c> We strongly recommended that applications pass in the exact number of bytes required by the target key.</para>
            </param>
            <param name="cbSecret">The size, in bytes, of the pbSecret buffer.</param>
            <param name="dwFlags">
            A set of flags that modify the behavior of this function. No flags are currently defined, so this parameter should be zero.
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>STATUS_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>STATUS_BUFFER_TOO_SMALL</term>
            <term>The size of the key object specified by the cbKeyObject parameter is not large enough to hold the key object.</term>
            </item>
            <item>
            <term>STATUS_INVALID_HANDLE</term>
            <term>The algorithm handle in the hAlgorithm parameter is not valid.</term>
            </item>
            <item>
            <term>STATUS_INVALID_PARAMETER</term>
            <term>One or more parameters are not valid.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            Depending on what processor modes a provider supports, <c>BCryptGenerateSymmetricKey</c> can be called either from user mode or
            kernel mode. Kernel mode callers can execute either at <c>PASSIVE_LEVEL</c> IRQL or <c>DISPATCH_LEVEL</c> IRQL. If the current
            IRQL level is <c>DISPATCH_LEVEL</c>, the handle provided in the hAlgorithm parameter must have been opened by using the
            <c>BCRYPT_PROV_DISPATCH</c> flag, and any pointers passed to the <c>BCryptGenerateSymmetricKey</c> function must refer to
            nonpaged (or locked) memory.
            </para>
            <para>
            To call this function in kernel mode, use Cng.lib, which is part of the Driver Development Kit (DDK). For more information, see
            WDK and Developer Tools. <c>Windows Server 2008 and Windows Vista:</c> To call this function in kernel mode, use Ksecdd.lib.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCryptGenerateSymmetricKey(Vanara.PInvoke.BCrypt.BCRYPT_ALG_HANDLE,Vanara.PInvoke.BCrypt.SafeBCRYPT_KEY_HANDLE@,System.IntPtr,System.UInt32,System.IntPtr,System.UInt32,System.UInt32)">
            <summary>
            The <c>BCryptGenerateSymmetricKey</c> function creates a key object for use with a symmetrical key encryption algorithm from a
            supplied key.
            </summary>
            <param name="hAlgorithm">
            The handle of an algorithm provider created with the BCryptOpenAlgorithmProvider function. The algorithm specified when the
            provider was created must support symmetric key encryption.
            </param>
            <param name="phKey">
            A pointer to a <c>BCRYPT_KEY_HANDLE</c> that receives the handle of the key. This handle is used in subsequent functions that
            require a key, such as BCryptEncrypt. This handle must be released when it is no longer needed by passing it to the
            BCryptDestroyKey function.
            </param>
            <param name="pbKeyObject">
            <para>
            A pointer to a buffer that receives the key object. The cbKeyObject parameter contains the size of this buffer. The required size
            of this buffer can be obtained by calling the BCryptGetProperty function to get the <c>BCRYPT_OBJECT_LENGTH</c> property. This
            will provide the size of the key object for the specified algorithm.
            </para>
            <para>This memory can only be freed after the phKey key handle is destroyed.</para>
            <para>
            If the value of this parameter is <c>NULL</c> and the value of the cbKeyObject parameter is zero, the memory for the key object
            is allocated and freed by this function. <c>Windows 7:</c> This memory management functionality is available beginning with
            Windows 7.
            </para>
            </param>
            <param name="cbKeyObject">
            <para>The size, in bytes, of the pbKeyObject buffer.</para>
            <para>
            If the value of this parameter is zero and the value of the pbKeyObject parameter is <c>NULL</c>, the memory for the key object
            is allocated and freed by this function. <c>Windows 7:</c> This memory management functionality is available beginning with
            Windows 7.
            </para>
            </param>
            <param name="pbSecret">
            <para>
            Pointer to a buffer that contains the key from which to create the key object. The cbSecret parameter contains the size of this
            buffer. This is normally a hash of a password or some other reproducible data. If the data passed in exceeds the target key size,
            the data will be truncated and the excess will be ignored.
            </para>
            <para><c>Note</c> We strongly recommended that applications pass in the exact number of bytes required by the target key.</para>
            </param>
            <param name="cbSecret">The size, in bytes, of the pbSecret buffer.</param>
            <param name="dwFlags">
            A set of flags that modify the behavior of this function. No flags are currently defined, so this parameter should be zero.
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>STATUS_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>STATUS_BUFFER_TOO_SMALL</term>
            <term>The size of the key object specified by the cbKeyObject parameter is not large enough to hold the key object.</term>
            </item>
            <item>
            <term>STATUS_INVALID_HANDLE</term>
            <term>The algorithm handle in the hAlgorithm parameter is not valid.</term>
            </item>
            <item>
            <term>STATUS_INVALID_PARAMETER</term>
            <term>One or more parameters are not valid.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            Depending on what processor modes a provider supports, <c>BCryptGenerateSymmetricKey</c> can be called either from user mode or
            kernel mode. Kernel mode callers can execute either at <c>PASSIVE_LEVEL</c> IRQL or <c>DISPATCH_LEVEL</c> IRQL. If the current
            IRQL level is <c>DISPATCH_LEVEL</c>, the handle provided in the hAlgorithm parameter must have been opened by using the
            <c>BCRYPT_PROV_DISPATCH</c> flag, and any pointers passed to the <c>BCryptGenerateSymmetricKey</c> function must refer to
            nonpaged (or locked) memory.
            </para>
            <para>
            To call this function in kernel mode, use Cng.lib, which is part of the Driver Development Kit (DDK). For more information, see
            WDK and Developer Tools. <c>Windows Server 2008 and Windows Vista:</c> To call this function in kernel mode, use Ksecdd.lib.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCryptGenRandom(Vanara.PInvoke.BCrypt.BCRYPT_ALG_HANDLE,System.IntPtr,System.UInt32,Vanara.PInvoke.BCrypt.GenRandomFlags)">
            <summary>The <c>BCryptGenRandom</c> function generates a random number.</summary>
            <param name="hAlgorithm">
            The handle of an algorithm provider created by using the BCryptOpenAlgorithmProvider function. The algorithm that was specified
            when the provider was created must support the random number generator interface.
            </param>
            <param name="pbBuffer">
            The address of a buffer that receives the random number. The size of this buffer is specified by the cbBuffer parameter.
            </param>
            <param name="cbBuffer">The size, in bytes, of the pbBuffer buffer.</param>
            <param name="dwFlags">
            <para>A set of flags that modify the behavior of this function. This parameter can be zero or the following value.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>BCRYPT_RNG_USE_ENTROPY_IN_BUFFER 0x00000001</term>
            <term>
            This function will use the number in the pbBuffer buffer as additional entropy for the random number. If this flag is not
            specified, this function will use a random number for the entropy. Windows 8 and later: This flag is ignored in Windows 8 and later.
            </term>
            </item>
            <item>
            <term>BCRYPT_USE_SYSTEM_PREFERRED_RNG 0x00000002</term>
            <term>
            Use the system-preferred random number generator algorithm. The hAlgorithm parameter must be NULL.
            BCRYPT_USE_SYSTEM_PREFERRED_RNG is only supported at PASSIVE_LEVEL IRQL. For more information, see Remarks. Windows Vista: This
            flag is not supported.
            </term>
            </item>
            </list>
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>STATUS_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>STATUS_INVALID_HANDLE</term>
            <term>The handle in the hAlgorithm parameter is not valid.</term>
            </item>
            <item>
            <term>STATUS_INVALID_PARAMETER</term>
            <term>One or more parameters are not valid.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            The default random number provider implements an algorithm for generating random numbers that complies with the NIST SP800-90
            standard, specifically the CTR_DRBG portion of that standard.
            </para>
            <para>
            <c>Windows Vista:</c> Prior to Windows Vista with Service Pack 1 (SP1) the default random number provider implements an algorithm
            for generating random numbers that complies with the FIPS 186-2 standard.
            </para>
            <para>
            Depending on what processor modes a provider supports, <c>BCryptGenRandom</c> can be called either from user mode or kernel mode.
            Kernel mode callers can execute either at <c>PASSIVE_LEVEL</c> IRQL or <c>DISPATCH_LEVEL</c> IRQL. If the current IRQL level is
            <c>DISPATCH_LEVEL</c>, the handle provided in the hAlgorithm parameter must have been opened by using the
            <c>BCRYPT_PROV_DISPATCH</c> flag, and any pointers passed to the <c>BCryptGenRandom</c> function must refer to nonpaged (or
            locked) memory. <c>Windows Vista:</c> The Microsoft provider does not support calling at <c>DISPATCH_LEVEL</c>.
            </para>
            <para>
            To call this function in kernel mode, use Cng.lib, which is part of the Driver Development Kit (DDK). For more information, see
            WDK and Developer Tools. <c>Windows Server 2008 and Windows Vista:</c> To call this function in kernel mode, use Ksecdd.lib.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCryptGenRandom(Vanara.PInvoke.BCrypt.BCRYPT_ALG_HANDLE,Vanara.InteropServices.SafeAllocatedMemoryHandle,System.UInt32,Vanara.PInvoke.BCrypt.GenRandomFlags)">
            <summary>The <c>BCryptGenRandom</c> function generates a random number.</summary>
            <param name="hAlgorithm">
            The handle of an algorithm provider created by using the BCryptOpenAlgorithmProvider function. The algorithm that was specified
            when the provider was created must support the random number generator interface.
            </param>
            <param name="pbBuffer">
            The address of a buffer that receives the random number. The size of this buffer is specified by the cbBuffer parameter.
            </param>
            <param name="cbBuffer">The size, in bytes, of the pbBuffer buffer.</param>
            <param name="dwFlags">
            <para>A set of flags that modify the behavior of this function. This parameter can be zero or the following value.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>BCRYPT_RNG_USE_ENTROPY_IN_BUFFER 0x00000001</term>
            <term>
            This function will use the number in the pbBuffer buffer as additional entropy for the random number. If this flag is not
            specified, this function will use a random number for the entropy. Windows 8 and later: This flag is ignored in Windows 8 and later.
            </term>
            </item>
            <item>
            <term>BCRYPT_USE_SYSTEM_PREFERRED_RNG 0x00000002</term>
            <term>
            Use the system-preferred random number generator algorithm. The hAlgorithm parameter must be NULL.
            BCRYPT_USE_SYSTEM_PREFERRED_RNG is only supported at PASSIVE_LEVEL IRQL. For more information, see Remarks. Windows Vista: This
            flag is not supported.
            </term>
            </item>
            </list>
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>STATUS_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>STATUS_INVALID_HANDLE</term>
            <term>The handle in the hAlgorithm parameter is not valid.</term>
            </item>
            <item>
            <term>STATUS_INVALID_PARAMETER</term>
            <term>One or more parameters are not valid.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            The default random number provider implements an algorithm for generating random numbers that complies with the NIST SP800-90
            standard, specifically the CTR_DRBG portion of that standard.
            </para>
            <para>
            <c>Windows Vista:</c> Prior to Windows Vista with Service Pack 1 (SP1) the default random number provider implements an algorithm
            for generating random numbers that complies with the FIPS 186-2 standard.
            </para>
            <para>
            Depending on what processor modes a provider supports, <c>BCryptGenRandom</c> can be called either from user mode or kernel mode.
            Kernel mode callers can execute either at <c>PASSIVE_LEVEL</c> IRQL or <c>DISPATCH_LEVEL</c> IRQL. If the current IRQL level is
            <c>DISPATCH_LEVEL</c>, the handle provided in the hAlgorithm parameter must have been opened by using the
            <c>BCRYPT_PROV_DISPATCH</c> flag, and any pointers passed to the <c>BCryptGenRandom</c> function must refer to nonpaged (or
            locked) memory. <c>Windows Vista:</c> The Microsoft provider does not support calling at <c>DISPATCH_LEVEL</c>.
            </para>
            <para>
            To call this function in kernel mode, use Cng.lib, which is part of the Driver Development Kit (DDK). For more information, see
            WDK and Developer Tools. <c>Windows Server 2008 and Windows Vista:</c> To call this function in kernel mode, use Ksecdd.lib.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCryptGetFipsAlgorithmMode(System.Boolean@)">
            <summary>
            <para>
            The <c>BCryptGetFipsAlgorithmMode</c> function determines whether Federal Information Processing Standard (FIPS) compliance is enabled.
            </para>
            </summary>
            <param name="pfEnabled">
            <para>
            The address of a <c>BOOLEAN</c> variable that receives zero if FIPS compliance is not enabled, or a nonzero value if FIPS
            compliance is enabled.
            </para>
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>STATUS_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>STATUS_INVALID_PARAMETER</term>
            <term>The pfEnabled parameter is not valid.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            <c>BCryptGetFipsAlgorithmMode</c> can be called either from user mode or kernel mode. Kernel mode callers must be executing at
            <c>PASSIVE_LEVEL</c> IRQL.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCryptGetProperty(Vanara.PInvoke.BCrypt.BCRYPT_HANDLE,System.String,Vanara.InteropServices.SafeAllocatedMemoryHandle,System.UInt32,System.UInt32@,System.UInt32)">
            <summary>The <c>BCryptGetProperty</c> function retrieves the value of a named property for a CNG object.</summary>
            <param name="hObject">A handle that represents the CNG object to obtain the property value for.</param>
            <param name="pszProperty">
            A pointer to a null-terminated Unicode string that contains the name of the property to retrieve. This can be one of the
            predefined Cryptography Primitive Property Identifiers or a custom property identifier.
            </param>
            <param name="pbOutput">
            The address of a buffer that receives the property value. The cbOutput parameter contains the size of this buffer.
            </param>
            <param name="cbOutput">The size, in bytes, of the pbOutput buffer.</param>
            <param name="pcbResult">
            A pointer to a <c>ULONG</c> variable that receives the number of bytes that were copied to the pbOutput buffer. If the pbOutput
            parameter is <c>NULL</c>, this function will place the required size, in bytes, in the location pointed to by this parameter.
            </param>
            <param name="dwFlags">A set of flags that modify the behavior of this function. No flags are defined for this function.</param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>STATUS_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>STATUS_BUFFER_TOO_SMALL</term>
            <term>The buffer size specified by the cbOutput parameter is not large enough to hold the property value.</term>
            </item>
            <item>
            <term>STATUS_INVALID_HANDLE</term>
            <term>The handle in the hObject parameter is not valid.</term>
            </item>
            <item>
            <term>STATUS_INVALID_PARAMETER</term>
            <term>One or more parameters are not valid.</term>
            </item>
            <item>
            <term>STATUS_NOT_SUPPORTED</term>
            <term>The named property specified by the pszProperty parameter is not supported.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            To obtain the required size for a property, pass <c>NULL</c> for the pbOutput parameter. This function will place the required
            size, in bytes, in the value pointed to by the pcbResult parameter.
            </para>
            <para>
            Depending on what processor modes a provider supports, <c>BCryptGetProperty</c> can be called either from user mode or kernel
            mode. Kernel mode callers can execute either at <c>PASSIVE_LEVEL</c> IRQL or <c>DISPATCH_LEVEL</c> IRQL. If the current IRQL
            level is <c>DISPATCH_LEVEL</c>, any pointers passed to the <c>BCryptGetProperty</c> function must refer to nonpaged (or locked)
            memory. If the object specified in the hObject parameter is a handle, it must have been opened by using the
            <c>BCRYPT_PROV_DISPATCH</c> flag.
            </para>
            <para>
            To call this function in kernel mode, use Cng.lib, which is part of the Driver Development Kit (DDK). For more information, see
            WDK and Developer Tools. <c>Windows Server 2008 and Windows Vista:</c> To call this function in kernel mode, use Ksecdd.lib.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCryptGetProperty``1(Vanara.PInvoke.BCrypt.BCRYPT_HANDLE,System.String)">
            <summary>The <c>BCryptGetProperty</c> function retrieves the value of a named property for a CNG object.</summary>
            <typeparam name="T">The type of the expected return value.</typeparam>
            <param name="hObject">A handle that represents the CNG object to obtain the property value for.</param>
            <param name="pszProperty">
            A pointer to a null-terminated Unicode string that contains the name of the property to retrieve. This can be one of the
            predefined Cryptography Primitive Property Identifiers or a custom property identifier.
            </param>
            <returns>The value of the requested property from <paramref name="pszProperty"/> cast to type <typeparamref name="T"/>.</returns>
            <exception cref="T:System.InvalidCastException">Requested type and system defined sizes do not match.</exception>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCryptHash(Vanara.PInvoke.BCrypt.BCRYPT_ALG_HANDLE,System.IntPtr,System.UInt32,System.IntPtr,System.UInt32,System.IntPtr,System.UInt32)">
            <summary>
            <para>
            Performs a single hash computation. This is a convenience function that wraps calls to BCryptCreateHash, BCryptHashData,
            BCryptFinishHash, and BCryptDestroyHash.
            </para>
            </summary>
            <param name="hAlgorithm">
            <para>
            The handle of an algorithm provider created by using the BCryptOpenAlgorithmProvider function. The algorithm that was specified
            when the provider was created must support the hash interface.
            </para>
            </param>
            <param name="pbSecret">
            <para>
            A pointer to a buffer that contains the key to use for the hash or MAC. The cbSecret parameter contains the size of this buffer.
            This key only applies to hash algorithms opened by the BCryptOpenAlgorithmProvider function by using the
            <c>BCRYPT_ALG_HANDLE_HMAC</c> flag. Otherwise, set this parameter to <c>NULL</c>
            </para>
            </param>
            <param name="cbSecret">
            <para>The size, in bytes, of the pbSecret buffer. If no key is used, set this parameter to zero.</para>
            </param>
            <param name="pbInput">
            <para>
            A pointer to a buffer that contains the data to process. The cbInput parameter contains the number of bytes in this buffer. This
            function does not modify the contents of this buffer.
            </para>
            </param>
            <param name="cbInput">
            <para>The number of bytes in the pbInput buffer.</para>
            </param>
            <param name="pbOutput">
            <para>A pointer to a buffer that receives the hash or MAC value. The cbOutput parameter contains the size of this buffer.</para>
            </param>
            <param name="cbOutput">
            <para>The size, in bytes, of the pbOutput buffer. This size must exactly match the size of the hash or MAC value.</para>
            <para>
            The size can be obtained by calling the BCryptGetProperty function to get the <c>BCRYPT_HASH_LENGTH</c> property. This will
            provide the size of the hash or MAC value for the specified algorithm.
            </para>
            </param>
            <returns>
            <para>A status code indicating success or failure.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCryptHash(Vanara.PInvoke.BCrypt.BCRYPT_ALG_HANDLE,Vanara.InteropServices.SafeAllocatedMemoryHandle,System.UInt32,Vanara.InteropServices.SafeAllocatedMemoryHandle,System.UInt32,Vanara.InteropServices.SafeAllocatedMemoryHandle,System.UInt32)">
            <summary>
            <para>
            Performs a single hash computation. This is a convenience function that wraps calls to BCryptCreateHash, BCryptHashData,
            BCryptFinishHash, and BCryptDestroyHash.
            </para>
            </summary>
            <param name="hAlgorithm">
            <para>
            The handle of an algorithm provider created by using the BCryptOpenAlgorithmProvider function. The algorithm that was specified
            when the provider was created must support the hash interface.
            </para>
            </param>
            <param name="pbSecret">
            <para>
            A pointer to a buffer that contains the key to use for the hash or MAC. The cbSecret parameter contains the size of this buffer.
            This key only applies to hash algorithms opened by the BCryptOpenAlgorithmProvider function by using the
            <c>BCRYPT_ALG_HANDLE_HMAC</c> flag. Otherwise, set this parameter to <c>NULL</c>
            </para>
            </param>
            <param name="cbSecret">
            <para>The size, in bytes, of the pbSecret buffer. If no key is used, set this parameter to zero.</para>
            </param>
            <param name="pbInput">
            <para>
            A pointer to a buffer that contains the data to process. The cbInput parameter contains the number of bytes in this buffer. This
            function does not modify the contents of this buffer.
            </para>
            </param>
            <param name="cbInput">
            <para>The number of bytes in the pbInput buffer.</para>
            </param>
            <param name="pbOutput">
            <para>A pointer to a buffer that receives the hash or MAC value. The cbOutput parameter contains the size of this buffer.</para>
            </param>
            <param name="cbOutput">
            <para>The size, in bytes, of the pbOutput buffer. This size must exactly match the size of the hash or MAC value.</para>
            <para>
            The size can be obtained by calling the BCryptGetProperty function to get the <c>BCRYPT_HASH_LENGTH</c> property. This will
            provide the size of the hash or MAC value for the specified algorithm.
            </para>
            </param>
            <returns>
            <para>A status code indicating success or failure.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCryptHashData(Vanara.PInvoke.BCrypt.BCRYPT_HASH_HANDLE,System.Byte[],System.UInt32,System.UInt32)">
            <summary>
            <para>The <c>BCryptHashData</c> function performs a one way hash or Message Authentication Code (MAC) on a data buffer.</para>
            </summary>
            <param name="hHash">
            <para>
            The handle of the hash or MAC object to use to perform the operation. This handle is obtained by calling the BCryptCreateHash function.
            </para>
            </param>
            <param name="pbInput">
            <para>
            A pointer to a buffer that contains the data to process. The cbInput parameter contains the number of bytes in this buffer. This
            function does not modify the contents of this buffer.
            </para>
            </param>
            <param name="cbInput">
            <para>The number of bytes in the pbInput buffer.</para>
            </param>
            <param name="dwFlags">
            <para>
            A set of flags that modify the behavior of this function. No flags are currently defined, so this parameter should be zero.
            </para>
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>STATUS_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>STATUS_INVALID_PARAMETER</term>
            <term>One or more parameters are not valid.</term>
            </item>
            <item>
            <term>STATUS_INVALID_HANDLE</term>
            <term>
            The hash handle in the hHash parameter is not valid. After the BCryptFinishHash function has been called for a hash handle, that
            handle cannot be reused.
            </term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            To combine more than one buffer into the hash or MAC, you can call this function multiple times, passing a different buffer each
            time. To obtain the hash or MAC value, call the BCryptFinishHash function. After the <c>BCryptFinishHash</c> function has been
            called for a specified handle, that handle cannot be reused.
            </para>
            <para>
            Depending on what processor modes a provider supports, <c>BCryptHashData</c> can be called either from user mode or kernel mode.
            Kernel mode callers can execute either at <c>PASSIVE_LEVEL</c> IRQL or <c>DISPATCH_LEVEL</c> IRQL. If the current IRQL level is
            <c>DISPATCH_LEVEL</c>, the handle provided in the hHash parameter must be derived from an algorithm handle returned by a provider
            that was opened by using the <c>BCRYPT_PROV_DISPATCH</c> flag, and any pointers passed to the <c>BCryptHashData</c> function must
            refer to nonpaged (or locked) memory.
            </para>
            <para>
            To call this function in kernel mode, use Cng.lib, which is part of the Driver Development Kit (DDK). For more information, see
            WDK and Developer Tools. <c>Windows Server 2008 and Windows Vista:</c> To call this function in kernel mode, use Ksecdd.lib.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCryptHashData(Vanara.PInvoke.BCrypt.BCRYPT_HASH_HANDLE,System.IntPtr,System.UInt32,System.UInt32)">
            <summary>
            <para>The <c>BCryptHashData</c> function performs a one way hash or Message Authentication Code (MAC) on a data buffer.</para>
            </summary>
            <param name="hHash">
            <para>
            The handle of the hash or MAC object to use to perform the operation. This handle is obtained by calling the BCryptCreateHash function.
            </para>
            </param>
            <param name="pbInput">
            <para>
            A pointer to a buffer that contains the data to process. The cbInput parameter contains the number of bytes in this buffer. This
            function does not modify the contents of this buffer.
            </para>
            </param>
            <param name="cbInput">
            <para>The number of bytes in the pbInput buffer.</para>
            </param>
            <param name="dwFlags">
            <para>
            A set of flags that modify the behavior of this function. No flags are currently defined, so this parameter should be zero.
            </para>
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>STATUS_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>STATUS_INVALID_PARAMETER</term>
            <term>One or more parameters are not valid.</term>
            </item>
            <item>
            <term>STATUS_INVALID_HANDLE</term>
            <term>
            The hash handle in the hHash parameter is not valid. After the BCryptFinishHash function has been called for a hash handle, that
            handle cannot be reused.
            </term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            To combine more than one buffer into the hash or MAC, you can call this function multiple times, passing a different buffer each
            time. To obtain the hash or MAC value, call the BCryptFinishHash function. After the <c>BCryptFinishHash</c> function has been
            called for a specified handle, that handle cannot be reused.
            </para>
            <para>
            Depending on what processor modes a provider supports, <c>BCryptHashData</c> can be called either from user mode or kernel mode.
            Kernel mode callers can execute either at <c>PASSIVE_LEVEL</c> IRQL or <c>DISPATCH_LEVEL</c> IRQL. If the current IRQL level is
            <c>DISPATCH_LEVEL</c>, the handle provided in the hHash parameter must be derived from an algorithm handle returned by a provider
            that was opened by using the <c>BCRYPT_PROV_DISPATCH</c> flag, and any pointers passed to the <c>BCryptHashData</c> function must
            refer to nonpaged (or locked) memory.
            </para>
            <para>
            To call this function in kernel mode, use Cng.lib, which is part of the Driver Development Kit (DDK). For more information, see
            WDK and Developer Tools. <c>Windows Server 2008 and Windows Vista:</c> To call this function in kernel mode, use Ksecdd.lib.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCryptImportKey(Vanara.PInvoke.BCrypt.BCRYPT_ALG_HANDLE,Vanara.PInvoke.BCrypt.BCRYPT_KEY_HANDLE,System.String,Vanara.PInvoke.BCrypt.SafeBCRYPT_KEY_HANDLE@,Vanara.InteropServices.SafeAllocatedMemoryHandle,System.UInt32,Vanara.InteropServices.SafeAllocatedMemoryHandle,System.UInt32,System.UInt32)">
            <summary>
            The <c>BCryptImportKey</c> function imports a symmetric key from a key BLOB. The BCryptImportKeyPair function is used to import a
            public/private key pair.
            </summary>
            <param name="hAlgorithm">
            The handle of the algorithm provider to import the key. This handle is obtained by calling the BCryptOpenAlgorithmProvider function.
            </param>
            <param name="hImportKey">
            <para>The handle of the key encryption key needed to unwrap the key BLOB in the pbInput parameter.</para>
            <para><c>Windows Server 2008 and Windows Vista:</c> This parameter is not used and should be set to <c>NULL</c>.</para>
            </param>
            <param name="pszBlobType">
            <para>
            A null-terminated Unicode string that contains an identifier that specifies the type of BLOB that is contained in the pbInput
            buffer. This can be one of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>BCRYPT_AES_WRAP_KEY_BLOB</term>
            <term>
            Import a symmetric key from an AES key–wrapped key BLOB. The hImportKey parameter must reference a valid BCRYPT_KEY_HANDLE
            pointer to the key encryption key. Windows Server 2008 and Windows Vista: This BLOB type is not supported.
            </term>
            </item>
            <item>
            <term>BCRYPT_KEY_DATA_BLOB</term>
            <term>
            Import a symmetric key from a data BLOB. The pbInput parameter is a pointer to a BCRYPT_KEY_DATA_BLOB_HEADER structure
            immediately followed by the key BLOB.
            </term>
            </item>
            <item>
            <term>BCRYPT_OPAQUE_KEY_BLOB</term>
            <term>
            Import a symmetric key BLOB in a format that is specific to a single CSP. Opaque BLOBs are not transferable and must be imported
            by using the same CSP that generated the BLOB. Opaque BLOBs are only intended to be used for interprocess transfer of keys and
            are not suitable to be persisted and read in across versions of a provider.
            </term>
            </item>
            </list>
            </param>
            <param name="phKey">
            A pointer to a <c>BCRYPT_KEY_HANDLE</c> that receives the handle of the imported key. This handle is used in subsequent functions
            that require a key, such as BCryptEncrypt. This handle must be released when it is no longer needed by passing it to the
            BCryptDestroyKey function.
            </param>
            <param name="pbKeyObject">
            <para>
            A pointer to a buffer that receives the imported key object. The cbKeyObject parameter contains the size of this buffer. The
            required size of this buffer can be obtained by calling the BCryptGetProperty function to get the <c>BCRYPT_OBJECT_LENGTH</c>
            property. This will provide the size of the key object for the specified algorithm.
            </para>
            <para>This memory can only be freed after the phKey key handle is destroyed.</para>
            </param>
            <param name="cbKeyObject">The size, in bytes, of the pbKeyObject buffer.</param>
            <param name="pbInput">
            The address of a buffer that contains the key BLOB to import. The cbInput parameter contains the size of this buffer. The
            pszBlobType parameter specifies the type of key BLOB this buffer contains.
            </param>
            <param name="cbInput">The size, in bytes, of the pbInput buffer.</param>
            <param name="dwFlags">
            A set of flags that modify the behavior of this function. No flags are currently defined, so this parameter should be zero.
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>STATUS_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>STATUS_BUFFER_TOO_SMALL</term>
            <term>The size of the key object specified by the cbKeyObject parameter is not large enough to hold the key object.</term>
            </item>
            <item>
            <term>STATUS_INVALID_HANDLE</term>
            <term>The algorithm handle in the hAlgorithm parameter is not valid.</term>
            </item>
            <item>
            <term>STATUS_INVALID_PARAMETER</term>
            <term>One or more parameters are not valid.</term>
            </item>
            <item>
            <term>STATUS_NOT_SUPPORTED</term>
            <term>
            The algorithm provider specified by the hAlgorithm parameter does not support the BLOB type specified by the pszBlobType parameter.
            </term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            Depending on what processor modes a provider supports, <c>BCryptImportKey</c> can be called either from user mode or kernel mode.
            Kernel mode callers can execute either at <c>PASSIVE_LEVEL</c> IRQL or <c>DISPATCH_LEVEL</c> IRQL. If the current IRQL level is
            <c>DISPATCH_LEVEL</c>, the handle provided in the hAlgorithm parameter must have been opened by using the
            <c>BCRYPT_PROV_DISPATCH</c> flag, and any pointers passed to the <c>BCryptImportKey</c> function must refer to nonpaged (or
            locked) memory.
            </para>
            <para>
            To call this function in kernel mode, use Cng.lib, which is part of the Driver Development Kit (DDK). For more information, see
            WDK and Developer Tools. <c>Windows Server 2008 and Windows Vista:</c> To call this function in kernel mode, use Ksecdd.lib.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCryptImportKey(Vanara.PInvoke.BCrypt.BCRYPT_ALG_HANDLE,Vanara.PInvoke.BCrypt.BCRYPT_KEY_HANDLE,System.String,Vanara.PInvoke.BCrypt.SafeBCRYPT_KEY_HANDLE@,System.IntPtr,System.UInt32,System.IntPtr,System.UInt32,System.UInt32)">
            <summary>
            The <c>BCryptImportKey</c> function imports a symmetric key from a key BLOB. The BCryptImportKeyPair function is used to import a
            public/private key pair.
            </summary>
            <param name="hAlgorithm">
            The handle of the algorithm provider to import the key. This handle is obtained by calling the BCryptOpenAlgorithmProvider function.
            </param>
            <param name="hImportKey">
            <para>The handle of the key encryption key needed to unwrap the key BLOB in the pbInput parameter.</para>
            <para><c>Windows Server 2008 and Windows Vista:</c> This parameter is not used and should be set to <c>NULL</c>.</para>
            </param>
            <param name="pszBlobType">
            <para>
            A null-terminated Unicode string that contains an identifier that specifies the type of BLOB that is contained in the pbInput
            buffer. This can be one of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>BCRYPT_AES_WRAP_KEY_BLOB</term>
            <term>
            Import a symmetric key from an AES key–wrapped key BLOB. The hImportKey parameter must reference a valid BCRYPT_KEY_HANDLE
            pointer to the key encryption key. Windows Server 2008 and Windows Vista: This BLOB type is not supported.
            </term>
            </item>
            <item>
            <term>BCRYPT_KEY_DATA_BLOB</term>
            <term>
            Import a symmetric key from a data BLOB. The pbInput parameter is a pointer to a BCRYPT_KEY_DATA_BLOB_HEADER structure
            immediately followed by the key BLOB.
            </term>
            </item>
            <item>
            <term>BCRYPT_OPAQUE_KEY_BLOB</term>
            <term>
            Import a symmetric key BLOB in a format that is specific to a single CSP. Opaque BLOBs are not transferable and must be imported
            by using the same CSP that generated the BLOB. Opaque BLOBs are only intended to be used for interprocess transfer of keys and
            are not suitable to be persisted and read in across versions of a provider.
            </term>
            </item>
            </list>
            </param>
            <param name="phKey">
            A pointer to a <c>BCRYPT_KEY_HANDLE</c> that receives the handle of the imported key. This handle is used in subsequent functions
            that require a key, such as BCryptEncrypt. This handle must be released when it is no longer needed by passing it to the
            BCryptDestroyKey function.
            </param>
            <param name="pbKeyObject">
            <para>
            A pointer to a buffer that receives the imported key object. The cbKeyObject parameter contains the size of this buffer. The
            required size of this buffer can be obtained by calling the BCryptGetProperty function to get the <c>BCRYPT_OBJECT_LENGTH</c>
            property. This will provide the size of the key object for the specified algorithm.
            </para>
            <para>This memory can only be freed after the phKey key handle is destroyed.</para>
            </param>
            <param name="cbKeyObject">The size, in bytes, of the pbKeyObject buffer.</param>
            <param name="pbInput">
            The address of a buffer that contains the key BLOB to import. The cbInput parameter contains the size of this buffer. The
            pszBlobType parameter specifies the type of key BLOB this buffer contains.
            </param>
            <param name="cbInput">The size, in bytes, of the pbInput buffer.</param>
            <param name="dwFlags">
            A set of flags that modify the behavior of this function. No flags are currently defined, so this parameter should be zero.
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>STATUS_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>STATUS_BUFFER_TOO_SMALL</term>
            <term>The size of the key object specified by the cbKeyObject parameter is not large enough to hold the key object.</term>
            </item>
            <item>
            <term>STATUS_INVALID_HANDLE</term>
            <term>The algorithm handle in the hAlgorithm parameter is not valid.</term>
            </item>
            <item>
            <term>STATUS_INVALID_PARAMETER</term>
            <term>One or more parameters are not valid.</term>
            </item>
            <item>
            <term>STATUS_NOT_SUPPORTED</term>
            <term>
            The algorithm provider specified by the hAlgorithm parameter does not support the BLOB type specified by the pszBlobType parameter.
            </term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            Depending on what processor modes a provider supports, <c>BCryptImportKey</c> can be called either from user mode or kernel mode.
            Kernel mode callers can execute either at <c>PASSIVE_LEVEL</c> IRQL or <c>DISPATCH_LEVEL</c> IRQL. If the current IRQL level is
            <c>DISPATCH_LEVEL</c>, the handle provided in the hAlgorithm parameter must have been opened by using the
            <c>BCRYPT_PROV_DISPATCH</c> flag, and any pointers passed to the <c>BCryptImportKey</c> function must refer to nonpaged (or
            locked) memory.
            </para>
            <para>
            To call this function in kernel mode, use Cng.lib, which is part of the Driver Development Kit (DDK). For more information, see
            WDK and Developer Tools. <c>Windows Server 2008 and Windows Vista:</c> To call this function in kernel mode, use Ksecdd.lib.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCryptImportKeyPair(Vanara.PInvoke.BCrypt.BCRYPT_ALG_HANDLE,Vanara.PInvoke.BCrypt.BCRYPT_KEY_HANDLE,System.String,Vanara.PInvoke.BCrypt.SafeBCRYPT_KEY_HANDLE@,System.IntPtr,System.UInt32,Vanara.PInvoke.BCrypt.ImportFlags)">
            <summary>
            The <c>BCryptImportKeyPair</c> function imports a public/private key pair from a key BLOB. The BCryptImportKey function is used
            to import a symmetric key pair.
            </summary>
            <param name="hAlgorithm">
            The handle of the algorithm provider to import the key. This handle is obtained by calling the BCryptOpenAlgorithmProvider function.
            </param>
            <param name="hImportKey">This parameter is not currently used and should be <c>NULL</c>.</param>
            <param name="pszBlobType">
            <para>
            A null-terminated Unicode string that contains an identifier that specifies the type of BLOB that is contained in the pbInput
            buffer. This can be one of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>BCRYPT_DH_PRIVATE_BLOB</term>
            <term>
            The BLOB is a Diffie-Hellman public/private key pair BLOB. The pbInput buffer must contain a BCRYPT_DH_KEY_BLOB structure
            immediately followed by the key data.
            </term>
            </item>
            <item>
            <term>BCRYPT_DH_PUBLIC_BLOB</term>
            <term>
            The BLOB is a Diffie-Hellman public key BLOB. The pbInput buffer must contain a BCRYPT_DH_KEY_BLOB structure immediately followed
            by the key data.
            </term>
            </item>
            <item>
            <term>BCRYPT_DSA_PRIVATE_BLOB</term>
            <term>
            The BLOB is a DSA public/private key pair BLOB. The pbInput buffer must contain a BCRYPT_DSA_KEY_BLOB or BCRYPT_DSA_KEY_BLOB_V2
            structure immediately followed by the key data. BCRYPT_DSA_KEY_BLOB is used for key lengths from 512 to 1024 bits.
            BCRYPT_DSA_KEY_BLOB_V2 is used for key lengths that exceed 1024 bits but are less than or equal to 3072 bits. Windows 8: Support
            for BCRYPT_DSA_KEY_BLOB_V2 begins.
            </term>
            </item>
            <item>
            <term>BCRYPT_DSA_PUBLIC_BLOB</term>
            <term>
            The BLOB is a DSA public key BLOB. The pbInput buffer must contain a BCRYPT_DSA_KEY_BLOB or BCRYPT_DSA_KEY_BLOB_V2 structure
            immediately followed by the key data. BCRYPT_DSA_KEY_BLOB is used for key lengths from 512 to 1024 bits. BCRYPT_DSA_KEY_BLOB_V2
            is used for key lengths that exceed 1024 bits but are less than or equal to 3072 bits. Windows 8: Support for
            BCRYPT_DSA_KEY_BLOB_V2 begins.
            </term>
            </item>
            <item>
            <term>BCRYPT_ECCPRIVATE_BLOB</term>
            <term>
            The BLOB is an elliptic curve cryptography (ECC) private key. The pbInput buffer must contain a BCRYPT_ECCKEY_BLOB structure
            immediately followed by the key data.
            </term>
            </item>
            <item>
            <term>BCRYPT_ECCPUBLIC_BLOB</term>
            <term>
            The BLOB is an ECC public key. The pbInput buffer must contain a BCRYPT_ECCKEY_BLOB structure immediately followed by the key data.
            </term>
            </item>
            <item>
            <term>BCRYPT_PUBLIC_KEY_BLOB</term>
            <term>
            The BLOB is a generic public key of any type. The type of key in this BLOB is determined by the Magic member of the
            BCRYPT_KEY_BLOB structure.
            </term>
            </item>
            <item>
            <term>BCRYPT_PRIVATE_KEY_BLOB</term>
            <term>
            The BLOB is a generic private key of any type. The private key does not necessarily contain the public key. The type of key in
            this BLOB is determined by the Magic member of the BCRYPT_KEY_BLOB structure.
            </term>
            </item>
            <item>
            <term>BCRYPT_RSAPRIVATE_BLOB</term>
            <term>
            The BLOB is an RSA public/private key pair BLOB. The pbInput buffer must contain a BCRYPT_RSAKEY_BLOB structure immediately
            followed by the key data.
            </term>
            </item>
            <item>
            <term>BCRYPT_RSAPUBLIC_BLOB</term>
            <term>
            The BLOB is an RSA public key BLOB. The pbInput buffer must contain a BCRYPT_RSAKEY_BLOB structure immediately followed by the
            key data.
            </term>
            </item>
            <item>
            <term>LEGACY_DH_PUBLIC_BLOB</term>
            <term>
            The BLOB is a Diffie-Hellman public key BLOB that was exported by using CryptoAPI. The Microsoft primitive provider does not
            support importing this BLOB type.
            </term>
            </item>
            <item>
            <term>LEGACY_DH_PRIVATE_BLOB</term>
            <term>
            The BLOB is a legacy Diffie-Hellman Version 3 Private Key BLOB that contains a Diffie-Hellman public/private key pair that was
            exported by using CryptoAPI.
            </term>
            </item>
            <item>
            <term>LEGACY_DSA_PRIVATE_BLOB</term>
            <term>The BLOB is a DSA public/private key pair BLOB that was exported by using CryptoAPI.</term>
            </item>
            <item>
            <term>LEGACY_DSA_PUBLIC_BLOB</term>
            <term>
            The BLOB is a DSA public key BLOB that was exported by using CryptoAPI. The Microsoft primitive provider does not support
            importing this BLOB type.
            </term>
            </item>
            <item>
            <term>LEGACY_DSA_V2_PRIVATE_BLOB</term>
            <term>The BLOB is a DSA version 2 private key in a form that can be imported by using CryptoAPI.</term>
            </item>
            <item>
            <term>LEGACY_RSAPRIVATE_BLOB</term>
            <term>The BLOB is an RSA public/private key pair BLOB that was exported by using CryptoAPI.</term>
            </item>
            <item>
            <term>LEGACY_RSAPUBLIC_BLOB</term>
            <term>
            The BLOB is an RSA public key BLOB that was exported by using CryptoAPI. The Microsoft primitive provider does not support
            importing this BLOB type.
            </term>
            </item>
            </list>
            </param>
            <param name="phKey">
            A pointer to a <c>BCRYPT_KEY_HANDLE</c> that receives the handle of the imported key. This handle is used in subsequent functions
            that require a key, such as BCryptSignHash. This handle must be released when it is no longer needed by passing it to the
            BCryptDestroyKey function.
            </param>
            <param name="pbInput">
            The address of a buffer that contains the key BLOB to import. The cbInput parameter contains the size of this buffer. The
            pszBlobType parameter specifies the type of key BLOB this buffer contains.
            </param>
            <param name="cbInput">The size, in bytes, of the pbInput buffer.</param>
            <param name="dwFlags">
            <para>A set of flags that modify the behavior of this function. This can be zero or the following value.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>BCRYPT_NO_KEY_VALIDATION</term>
            <term>Do not validate the public portion of the key pair.</term>
            </item>
            </list>
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>STATUS_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>STATUS_INVALID_HANDLE</term>
            <term>The algorithm handle in the hAlgorithm parameter is not valid.</term>
            </item>
            <item>
            <term>STATUS_INVALID_PARAMETER</term>
            <term>One or more parameters are not valid.</term>
            </item>
            <item>
            <term>STATUS_NOT_SUPPORTED</term>
            <term>
            The algorithm provider specified by the hAlgorithm parameter does not support the BLOB type specified by the pszBlobType parameter.
            </term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            Depending on what processor modes a provider supports, <c>BCryptImportKeyPair</c> can be called either from user mode or kernel
            mode. Kernel mode callers can execute either at <c>PASSIVE_LEVEL</c> IRQL or <c>DISPATCH_LEVEL</c> IRQL. If the current IRQL
            level is <c>DISPATCH_LEVEL</c>, the handle provided in the hAlgorithm parameter must have been opened by using the
            <c>BCRYPT_PROV_DISPATCH</c> flag, and any pointers passed to the <c>BCryptImportKeyPair</c> function must refer to nonpaged (or
            locked) memory.
            </para>
            <para>
            To call this function in kernel mode, use Cng.lib, which is part of the Driver Development Kit (DDK). For more information, see
            WDK and Developer Tools. <c>Windows Server 2008 and Windows Vista:</c> To call this function in kernel mode, use Ksecdd.lib.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCryptImportKeyPair(Vanara.PInvoke.BCrypt.BCRYPT_ALG_HANDLE,Vanara.PInvoke.BCrypt.BCRYPT_KEY_HANDLE,System.String,Vanara.PInvoke.BCrypt.SafeBCRYPT_KEY_HANDLE@,Vanara.InteropServices.SafeAllocatedMemoryHandle,System.UInt32,Vanara.PInvoke.BCrypt.ImportFlags)">
            <summary>
            The <c>BCryptImportKeyPair</c> function imports a public/private key pair from a key BLOB. The BCryptImportKey function is used
            to import a symmetric key pair.
            </summary>
            <param name="hAlgorithm">
            The handle of the algorithm provider to import the key. This handle is obtained by calling the BCryptOpenAlgorithmProvider function.
            </param>
            <param name="hImportKey">This parameter is not currently used and should be <c>NULL</c>.</param>
            <param name="pszBlobType">
            <para>
            A null-terminated Unicode string that contains an identifier that specifies the type of BLOB that is contained in the pbInput
            buffer. This can be one of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>BCRYPT_DH_PRIVATE_BLOB</term>
            <term>
            The BLOB is a Diffie-Hellman public/private key pair BLOB. The pbInput buffer must contain a BCRYPT_DH_KEY_BLOB structure
            immediately followed by the key data.
            </term>
            </item>
            <item>
            <term>BCRYPT_DH_PUBLIC_BLOB</term>
            <term>
            The BLOB is a Diffie-Hellman public key BLOB. The pbInput buffer must contain a BCRYPT_DH_KEY_BLOB structure immediately followed
            by the key data.
            </term>
            </item>
            <item>
            <term>BCRYPT_DSA_PRIVATE_BLOB</term>
            <term>
            The BLOB is a DSA public/private key pair BLOB. The pbInput buffer must contain a BCRYPT_DSA_KEY_BLOB or BCRYPT_DSA_KEY_BLOB_V2
            structure immediately followed by the key data. BCRYPT_DSA_KEY_BLOB is used for key lengths from 512 to 1024 bits.
            BCRYPT_DSA_KEY_BLOB_V2 is used for key lengths that exceed 1024 bits but are less than or equal to 3072 bits. Windows 8: Support
            for BCRYPT_DSA_KEY_BLOB_V2 begins.
            </term>
            </item>
            <item>
            <term>BCRYPT_DSA_PUBLIC_BLOB</term>
            <term>
            The BLOB is a DSA public key BLOB. The pbInput buffer must contain a BCRYPT_DSA_KEY_BLOB or BCRYPT_DSA_KEY_BLOB_V2 structure
            immediately followed by the key data. BCRYPT_DSA_KEY_BLOB is used for key lengths from 512 to 1024 bits. BCRYPT_DSA_KEY_BLOB_V2
            is used for key lengths that exceed 1024 bits but are less than or equal to 3072 bits. Windows 8: Support for
            BCRYPT_DSA_KEY_BLOB_V2 begins.
            </term>
            </item>
            <item>
            <term>BCRYPT_ECCPRIVATE_BLOB</term>
            <term>
            The BLOB is an elliptic curve cryptography (ECC) private key. The pbInput buffer must contain a BCRYPT_ECCKEY_BLOB structure
            immediately followed by the key data.
            </term>
            </item>
            <item>
            <term>BCRYPT_ECCPUBLIC_BLOB</term>
            <term>
            The BLOB is an ECC public key. The pbInput buffer must contain a BCRYPT_ECCKEY_BLOB structure immediately followed by the key data.
            </term>
            </item>
            <item>
            <term>BCRYPT_PUBLIC_KEY_BLOB</term>
            <term>
            The BLOB is a generic public key of any type. The type of key in this BLOB is determined by the Magic member of the
            BCRYPT_KEY_BLOB structure.
            </term>
            </item>
            <item>
            <term>BCRYPT_PRIVATE_KEY_BLOB</term>
            <term>
            The BLOB is a generic private key of any type. The private key does not necessarily contain the public key. The type of key in
            this BLOB is determined by the Magic member of the BCRYPT_KEY_BLOB structure.
            </term>
            </item>
            <item>
            <term>BCRYPT_RSAPRIVATE_BLOB</term>
            <term>
            The BLOB is an RSA public/private key pair BLOB. The pbInput buffer must contain a BCRYPT_RSAKEY_BLOB structure immediately
            followed by the key data.
            </term>
            </item>
            <item>
            <term>BCRYPT_RSAPUBLIC_BLOB</term>
            <term>
            The BLOB is an RSA public key BLOB. The pbInput buffer must contain a BCRYPT_RSAKEY_BLOB structure immediately followed by the
            key data.
            </term>
            </item>
            <item>
            <term>LEGACY_DH_PUBLIC_BLOB</term>
            <term>
            The BLOB is a Diffie-Hellman public key BLOB that was exported by using CryptoAPI. The Microsoft primitive provider does not
            support importing this BLOB type.
            </term>
            </item>
            <item>
            <term>LEGACY_DH_PRIVATE_BLOB</term>
            <term>
            The BLOB is a legacy Diffie-Hellman Version 3 Private Key BLOB that contains a Diffie-Hellman public/private key pair that was
            exported by using CryptoAPI.
            </term>
            </item>
            <item>
            <term>LEGACY_DSA_PRIVATE_BLOB</term>
            <term>The BLOB is a DSA public/private key pair BLOB that was exported by using CryptoAPI.</term>
            </item>
            <item>
            <term>LEGACY_DSA_PUBLIC_BLOB</term>
            <term>
            The BLOB is a DSA public key BLOB that was exported by using CryptoAPI. The Microsoft primitive provider does not support
            importing this BLOB type.
            </term>
            </item>
            <item>
            <term>LEGACY_DSA_V2_PRIVATE_BLOB</term>
            <term>The BLOB is a DSA version 2 private key in a form that can be imported by using CryptoAPI.</term>
            </item>
            <item>
            <term>LEGACY_RSAPRIVATE_BLOB</term>
            <term>The BLOB is an RSA public/private key pair BLOB that was exported by using CryptoAPI.</term>
            </item>
            <item>
            <term>LEGACY_RSAPUBLIC_BLOB</term>
            <term>
            The BLOB is an RSA public key BLOB that was exported by using CryptoAPI. The Microsoft primitive provider does not support
            importing this BLOB type.
            </term>
            </item>
            </list>
            </param>
            <param name="phKey">
            A pointer to a <c>BCRYPT_KEY_HANDLE</c> that receives the handle of the imported key. This handle is used in subsequent functions
            that require a key, such as BCryptSignHash. This handle must be released when it is no longer needed by passing it to the
            BCryptDestroyKey function.
            </param>
            <param name="pbInput">
            The address of a buffer that contains the key BLOB to import. The cbInput parameter contains the size of this buffer. The
            pszBlobType parameter specifies the type of key BLOB this buffer contains.
            </param>
            <param name="cbInput">The size, in bytes, of the pbInput buffer.</param>
            <param name="dwFlags">
            <para>A set of flags that modify the behavior of this function. This can be zero or the following value.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>BCRYPT_NO_KEY_VALIDATION</term>
            <term>Do not validate the public portion of the key pair.</term>
            </item>
            </list>
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>STATUS_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>STATUS_INVALID_HANDLE</term>
            <term>The algorithm handle in the hAlgorithm parameter is not valid.</term>
            </item>
            <item>
            <term>STATUS_INVALID_PARAMETER</term>
            <term>One or more parameters are not valid.</term>
            </item>
            <item>
            <term>STATUS_NOT_SUPPORTED</term>
            <term>
            The algorithm provider specified by the hAlgorithm parameter does not support the BLOB type specified by the pszBlobType parameter.
            </term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            Depending on what processor modes a provider supports, <c>BCryptImportKeyPair</c> can be called either from user mode or kernel
            mode. Kernel mode callers can execute either at <c>PASSIVE_LEVEL</c> IRQL or <c>DISPATCH_LEVEL</c> IRQL. If the current IRQL
            level is <c>DISPATCH_LEVEL</c>, the handle provided in the hAlgorithm parameter must have been opened by using the
            <c>BCRYPT_PROV_DISPATCH</c> flag, and any pointers passed to the <c>BCryptImportKeyPair</c> function must refer to nonpaged (or
            locked) memory.
            </para>
            <para>
            To call this function in kernel mode, use Cng.lib, which is part of the Driver Development Kit (DDK). For more information, see
            WDK and Developer Tools. <c>Windows Server 2008 and Windows Vista:</c> To call this function in kernel mode, use Ksecdd.lib.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCryptKeyDerivation(Vanara.PInvoke.BCrypt.BCRYPT_KEY_HANDLE,Vanara.PInvoke.NCrypt.NCryptBufferDesc,System.IntPtr,System.UInt32,System.UInt32@,Vanara.PInvoke.BCrypt.KeyDerivationFlags)">
            <summary>
            <para>
            The <c>BCryptKeyDerivation</c> function derives a key without requiring a secret agreement. It is similar in functionality to
            BCryptDeriveKey but does not require a BCRYPT_SECRET_HANDLE value as input.
            </para>
            </summary>
            <param name="hKey">
            <para>Handle of the input key.</para>
            </param>
            <param name="pParameterList">
            <para>
            Pointer to a <c>BCryptBufferDesc</c> structure that contains the KDF parameters. This parameter is optional and can be
            <c>NULL</c> if it is not needed. The parameters can be specific to a key derivation function (KDF) or generic. The following
            table shows the required and optional parameters for specific KDFs implemented by the Microsoft Primitive provider.
            </para>
            <list type="table">
            <listheader>
            <term>KDF</term>
            <term>Parameter</term>
            <term>Required</term>
            </listheader>
            <item>
            <term>SP800-108 HMAC in counter mode</term>
            <term>KDF_LABEL</term>
            <term>yes</term>
            </item>
            <item>
            <term/>
            <term>KDF_CONTEXT</term>
            <term>yes</term>
            </item>
            <item>
            <term/>
            <term>KDF_HASH_ALGORITHM</term>
            <term>yes</term>
            </item>
            <item>
            <term>SP800-56A</term>
            <term>KDF_ALGORITHMID</term>
            <term>yes</term>
            </item>
            <item>
            <term/>
            <term>KDF_PARTYUINFO</term>
            <term>yes</term>
            </item>
            <item>
            <term/>
            <term>KDF_PARTYVINFO</term>
            <term>yes</term>
            </item>
            <item>
            <term/>
            <term>KDF_HASH_ALGORITHM</term>
            <term>yes</term>
            </item>
            <item>
            <term/>
            <term>KDF_SUPPPUBINFO</term>
            <term>no</term>
            </item>
            <item>
            <term/>
            <term>KDF_SUPPPRIVINFO</term>
            <term>no</term>
            </item>
            <item>
            <term>PBKDF2</term>
            <term>KDF_HASH_ALGORITHM</term>
            <term>yes</term>
            </item>
            <item>
            <term/>
            <term>KDF_SALT</term>
            <term>yes</term>
            </item>
            <item>
            <term/>
            <term>KDF_ITERATION_COUNT</term>
            <term>no</term>
            </item>
            <item>
            <term>CAPI_KDF</term>
            <term>KDF_HASH_ALGORITHM</term>
            <term>yes</term>
            </item>
            </list>
            <para>The following generic parameter can be used:</para>
            <list type="bullet">
            <item>
            <term>KDF_GENERIC_PARAMETER</term>
            </item>
            </list>
            <para>Generic parameters map to KDF specific parameters in the following manner:</para>
            <para>SP800-108 HMAC in counter mode:</para>
            <list type="bullet">
            <item>
            <term>KDF_GENERIC_PARAMETER = KDF_LABEL||0x00||KDF_CONTEXT</term>
            </item>
            </list>
            <para>SP800-56A</para>
            <list type="bullet">
            <item>
            <term>
            KDF_GENERIC_PARAMETER = KDF_ALGORITHMID || KDF_PARTYUINFO || KDF_PARTYVINFO {|| KDF_SUPPPUBINFO } {|| KDF_SUPPPRIVINFO }
            </term>
            </item>
            </list>
            <para>PBKDF2</para>
            <list type="bullet">
            <item>
            <term>KDF_GENERIC_PARAMETER = KDF_SALT</term>
            </item>
            <item>
            <term>KDF_ITERATION_COUNT – defaults to 10000</term>
            </item>
            </list>
            <para>CAPI_KDF</para>
            <list type="bullet">
            <item>
            <term>KDF_GENERIC_PARAMETER = Not Used</term>
            </item>
            </list>
            </param>
            <param name="pbDerivedKey">
            <para>Address of a buffer that receives the key. The cbDerivedKey parameter contains the size of this buffer.</para>
            </param>
            <param name="cbDerivedKey">
            <para>Size, in bytes, of the buffer pointed to by the pbDerivedKey parameter.</para>
            </param>
            <param name="pcbResult">
            <para>
            Pointer to a variable that receives the number of bytes that were copied to the buffer pointed to by the pbDerivedKey parameter.
            </para>
            </param>
            <param name="dwFlags">
            <para>Flags that modify the behavior of this function. The following value can be used with the Microsoft Primitive provider.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>BCRYPT_CAPI_AES_FLAG</term>
            <term>
            Specifies that the target algorithm is AES and that the key therefore must be double expanded. This flag is only valid with the
            CAPI_KDF algorithm.
            </term>
            </item>
            </list>
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            </returns>
            <remarks>
            <para>You can use the following algorithm identifiers in the BCryptOpenAlgorithmProvider function before calling <c>BCryptKeyDerivation</c>:</para>
            <list type="bullet">
            <item>
            <term><c>BCRYPT_CAPI_KDF_ALGORITHM</c></term>
            </item>
            <item>
            <term><c>BCRYPT_SP800108_CTR_HMAC_ALGORITHM</c></term>
            </item>
            <item>
            <term><c>BCRYPT_SP80056A_CONCAT_ALGORITHM</c></term>
            </item>
            <item>
            <term><c>BCRYPT_PBKDF2_ALGORITHM</c></term>
            </item>
            </list>
            <para>
            To call this function in kernel mode, use Cng.lib, which is part of the Driver Development Kit (DDK). For more information, see
            WDK and Developer Tools. <c>Windows Server 2008 and Windows Vista:</c> To call this function in kernel mode, use Ksecdd.lib.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCryptKeyDerivation(Vanara.PInvoke.BCrypt.BCRYPT_KEY_HANDLE,Vanara.PInvoke.NCrypt.NCryptBufferDesc,Vanara.InteropServices.SafeAllocatedMemoryHandle,System.UInt32,System.UInt32@,Vanara.PInvoke.BCrypt.KeyDerivationFlags)">
            <summary>
            <para>
            The <c>BCryptKeyDerivation</c> function derives a key without requiring a secret agreement. It is similar in functionality to
            BCryptDeriveKey but does not require a BCRYPT_SECRET_HANDLE value as input.
            </para>
            </summary>
            <param name="hKey">
            <para>Handle of the input key.</para>
            </param>
            <param name="pParameterList">
            <para>
            Pointer to a <c>BCryptBufferDesc</c> structure that contains the KDF parameters. This parameter is optional and can be
            <c>NULL</c> if it is not needed. The parameters can be specific to a key derivation function (KDF) or generic. The following
            table shows the required and optional parameters for specific KDFs implemented by the Microsoft Primitive provider.
            </para>
            <list type="table">
            <listheader>
            <term>KDF</term>
            <term>Parameter</term>
            <term>Required</term>
            </listheader>
            <item>
            <term>SP800-108 HMAC in counter mode</term>
            <term>KDF_LABEL</term>
            <term>yes</term>
            </item>
            <item>
            <term/>
            <term>KDF_CONTEXT</term>
            <term>yes</term>
            </item>
            <item>
            <term/>
            <term>KDF_HASH_ALGORITHM</term>
            <term>yes</term>
            </item>
            <item>
            <term>SP800-56A</term>
            <term>KDF_ALGORITHMID</term>
            <term>yes</term>
            </item>
            <item>
            <term/>
            <term>KDF_PARTYUINFO</term>
            <term>yes</term>
            </item>
            <item>
            <term/>
            <term>KDF_PARTYVINFO</term>
            <term>yes</term>
            </item>
            <item>
            <term/>
            <term>KDF_HASH_ALGORITHM</term>
            <term>yes</term>
            </item>
            <item>
            <term/>
            <term>KDF_SUPPPUBINFO</term>
            <term>no</term>
            </item>
            <item>
            <term/>
            <term>KDF_SUPPPRIVINFO</term>
            <term>no</term>
            </item>
            <item>
            <term>PBKDF2</term>
            <term>KDF_HASH_ALGORITHM</term>
            <term>yes</term>
            </item>
            <item>
            <term/>
            <term>KDF_SALT</term>
            <term>yes</term>
            </item>
            <item>
            <term/>
            <term>KDF_ITERATION_COUNT</term>
            <term>no</term>
            </item>
            <item>
            <term>CAPI_KDF</term>
            <term>KDF_HASH_ALGORITHM</term>
            <term>yes</term>
            </item>
            </list>
            <para>The following generic parameter can be used:</para>
            <list type="bullet">
            <item>
            <term>KDF_GENERIC_PARAMETER</term>
            </item>
            </list>
            <para>Generic parameters map to KDF specific parameters in the following manner:</para>
            <para>SP800-108 HMAC in counter mode:</para>
            <list type="bullet">
            <item>
            <term>KDF_GENERIC_PARAMETER = KDF_LABEL||0x00||KDF_CONTEXT</term>
            </item>
            </list>
            <para>SP800-56A</para>
            <list type="bullet">
            <item>
            <term>
            KDF_GENERIC_PARAMETER = KDF_ALGORITHMID || KDF_PARTYUINFO || KDF_PARTYVINFO {|| KDF_SUPPPUBINFO } {|| KDF_SUPPPRIVINFO }
            </term>
            </item>
            </list>
            <para>PBKDF2</para>
            <list type="bullet">
            <item>
            <term>KDF_GENERIC_PARAMETER = KDF_SALT</term>
            </item>
            <item>
            <term>KDF_ITERATION_COUNT – defaults to 10000</term>
            </item>
            </list>
            <para>CAPI_KDF</para>
            <list type="bullet">
            <item>
            <term>KDF_GENERIC_PARAMETER = Not Used</term>
            </item>
            </list>
            </param>
            <param name="pbDerivedKey">
            <para>Address of a buffer that receives the key. The cbDerivedKey parameter contains the size of this buffer.</para>
            </param>
            <param name="cbDerivedKey">
            <para>Size, in bytes, of the buffer pointed to by the pbDerivedKey parameter.</para>
            </param>
            <param name="pcbResult">
            <para>
            Pointer to a variable that receives the number of bytes that were copied to the buffer pointed to by the pbDerivedKey parameter.
            </para>
            </param>
            <param name="dwFlags">
            <para>Flags that modify the behavior of this function. The following value can be used with the Microsoft Primitive provider.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>BCRYPT_CAPI_AES_FLAG</term>
            <term>
            Specifies that the target algorithm is AES and that the key therefore must be double expanded. This flag is only valid with the
            CAPI_KDF algorithm.
            </term>
            </item>
            </list>
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            </returns>
            <remarks>
            <para>You can use the following algorithm identifiers in the BCryptOpenAlgorithmProvider function before calling <c>BCryptKeyDerivation</c>:</para>
            <list type="bullet">
            <item>
            <term><c>BCRYPT_CAPI_KDF_ALGORITHM</c></term>
            </item>
            <item>
            <term><c>BCRYPT_SP800108_CTR_HMAC_ALGORITHM</c></term>
            </item>
            <item>
            <term><c>BCRYPT_SP80056A_CONCAT_ALGORITHM</c></term>
            </item>
            <item>
            <term><c>BCRYPT_PBKDF2_ALGORITHM</c></term>
            </item>
            </list>
            <para>
            To call this function in kernel mode, use Cng.lib, which is part of the Driver Development Kit (DDK). For more information, see
            WDK and Developer Tools. <c>Windows Server 2008 and Windows Vista:</c> To call this function in kernel mode, use Ksecdd.lib.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCryptOpenAlgorithmProvider(Vanara.PInvoke.BCrypt.SafeBCRYPT_ALG_HANDLE@,System.String,System.String,Vanara.PInvoke.BCrypt.AlgProviderFlags)">
            <summary>
            <para>The <c>BCryptOpenAlgorithmProvider</c> function loads and initializes a CNG provider.</para>
            </summary>
            <param name="phAlgorithm">
            <para>
            A pointer to a <c>BCRYPT_ALG_HANDLE</c> variable that receives the CNG provider handle. When you have finished using this handle,
            release it by passing it to the BCryptCloseAlgorithmProvider function.
            </para>
            </param>
            <param name="pszAlgId">
            <para>
            A pointer to a null-terminated Unicode string that identifies the requested cryptographic algorithm. This can be one of the
            standard CNG Algorithm Identifiers or the identifier for another registered algorithm.
            </para>
            </param>
            <param name="pszImplementation">
            <para>
            A pointer to a null-terminated Unicode string that identifies the specific provider to load. This is the registered alias of the
            cryptographic primitive provider. This parameter is optional and can be <c>NULL</c> if it is not needed. If this parameter is
            <c>NULL</c>, the default provider for the specified algorithm will be loaded.
            </para>
            <para>
            <c>Note</c> If the pszImplementation parameter value is <c>NULL</c>, CNG attempts to open each registered provider, in order of
            priority, for the algorithm specified by the pszAlgId parameter and returns the handle of the first provider that is successfully
            opened. For the lifetime of the handle, any BCrypt*** cryptographic APIs will use the provider that was successfully opened.
            </para>
            <para>Windows Server 2008 and Windows Vista:</para>
            <para>CNG attempts to fall back to the Microsoft CNG provider.</para>
            <para>The following are the predefined provider names.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>MS_PRIMITIVE_PROVIDER "Microsoft Primitive Provider"</term>
            <term>Identifies the basic Microsoft CNG provider.</term>
            </item>
            </list>
            </param>
            <param name="dwFlags">
            <para>Flags that modify the behavior of the function. This can be zero or a combination of one or more of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>BCRYPT_ALG_HANDLE_HMAC_FLAG</term>
            <term>
            The provider will perform the Hash-Based Message Authentication Code (HMAC) algorithm with the specified hash algorithm. This
            flag is only used by hash algorithm providers.
            </term>
            </item>
            <item>
            <term>BCRYPT_PROV_DISPATCH</term>
            <term>
            Loads the provider into the nonpaged memory pool. If this flag is not present, the provider is loaded into the paged memory pool.
            When this flag is specified, the handle returned must not be closed before all dependent objects have been freed. Windows Server
            2008 and Windows Vista: This flag is only supported by the Microsoft algorithm providers and only for hashing algorithms and
            symmetric key cryptographic algorithms.
            </term>
            </item>
            <item>
            <term>BCRYPT_HASH_REUSABLE_FLAG</term>
            <term>
            Creates a reusable hashing object. The object can be used for a new hashing operation immediately after calling BCryptFinishHash.
            For more information, see Creating a Hash with CNG. Windows Server 2008 R2, Windows 7, Windows Server 2008 and Windows Vista:
            This flag is not supported.
            </term>
            </item>
            </list>
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>STATUS_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>STATUS_NOT_FOUND</term>
            <term>No provider was found for the specified algorithm ID.</term>
            </item>
            <item>
            <term>STATUS_INVALID_PARAMETER</term>
            <term>One or more parameters are not valid.</term>
            </item>
            <item>
            <term>STATUS_NO_MEMORY</term>
            <term>A memory allocation failure occurred.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            Because of the number and type of operations that are required to find, load, and initialize an algorithm provider, the
            <c>BCryptOpenAlgorithmProvider</c> function is a relatively time intensive function. Because of this, we recommend that you cache
            any algorithm provider handles that you will use more than once, rather than opening and closing the algorithm providers over and over.
            </para>
            <para>
            <c>BCryptOpenAlgorithmProvider</c> can be called either from user mode or kernel mode. Kernel mode callers must be executing at
            <c>PASSIVE_LEVEL</c> IRQL.
            </para>
            <para>
            To call this function in kernel mode, use Cng.lib, which is part of the Driver Development Kit (DDK). For more information, see
            WDK and Developer Tools. <c>Windows Server 2008 and Windows Vista:</c> To call this function in kernel mode, use Ksecdd.lib.
            </para>
            <para>
            Starting in Windows 10, CNG no longer follows every update to the cryptography configuration. Certain changes, like adding a new
            default provider or changing the preference order of algorithm providers, may require a reboot. Because of this, you should
            reboot before calling <c>BCryptOpenAlgorithmProvider</c> with any newly configured provider.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCryptProcessMultiOperations(Vanara.PInvoke.BCrypt.BCRYPT_HANDLE,Vanara.PInvoke.BCrypt.BCRYPT_MULTI_OPERATION_TYPE,System.IntPtr,System.UInt32,System.UInt32)">
            <summary>
            <para>The <c>BCryptProcessMultiOperations</c> function processes a sequence of operations on a multi-object state.</para>
            </summary>
            <param name="hObject">
            <para>A handle to a multi-object state, such as one created by the BCryptCreateMultiHash function.</para>
            </param>
            <param name="operationType">
            <para>
            A <c>BCRYPT_OPERATION_TYPE_*</c> value. Currently the only defined value is <c>BCRYPT_OPERATION_TYPE_HASH</c>. This value
            identifies the hObject parameter as a multi-hash object and the pOperations pointer as pointing to an array of
            BCRYPT_MULTI_HASH_OPERATION elements.
            </para>
            </param>
            <param name="pOperations">
            <para>
            A pointer to an array of operation command structures. For hashing, it is a pointer to an array of BCRYPT_MULTI_HASH_OPERATION structures.
            </para>
            </param>
            <param name="cbOperations">
            <para>The size, in bytes, of the pOperations array.</para>
            </param>
            <param name="dwFlags">
            <para>Specify a value of zero (0).</para>
            </param>
            <returns>
            <para>None</para>
            </returns>
            <remarks>
            <para>
            Each element of the pOperations array contains instructions for a particular computation to be performed on a single element of
            the multi-object state. The functional behavior of <c>BCryptProcessMultiOperations</c> is equivalent to performing, for each
            element in the multi-object state, the computations specified in the operations array for that element, one at a time, in order.
            </para>
            <para>
            The relative order of two operations that operate on different elements of the array is not guaranteed. If an output buffer
            overlaps an input or output buffer the result is not deterministic.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCryptProcessMultiOperations(Vanara.PInvoke.BCrypt.BCRYPT_HANDLE,Vanara.PInvoke.BCrypt.BCRYPT_MULTI_OPERATION_TYPE,Vanara.PInvoke.BCrypt.BCRYPT_MULTI_HASH_OPERATION[],System.UInt32,System.UInt32)">
            <summary>
            <para>The <c>BCryptProcessMultiOperations</c> function processes a sequence of operations on a multi-object state.</para>
            </summary>
            <param name="hObject">
            <para>A handle to a multi-object state, such as one created by the BCryptCreateMultiHash function.</para>
            </param>
            <param name="operationType">
            <para>
            A <c>BCRYPT_OPERATION_TYPE_*</c> value. Currently the only defined value is <c>BCRYPT_OPERATION_TYPE_HASH</c>. This value
            identifies the hObject parameter as a multi-hash object and the pOperations pointer as pointing to an array of
            BCRYPT_MULTI_HASH_OPERATION elements.
            </para>
            </param>
            <param name="pOperations">
            <para>
            A pointer to an array of operation command structures. For hashing, it is a pointer to an array of BCRYPT_MULTI_HASH_OPERATION structures.
            </para>
            </param>
            <param name="cbOperations">
            <para>The size, in bytes, of the pOperations array.</para>
            </param>
            <param name="dwFlags">
            <para>Specify a value of zero (0).</para>
            </param>
            <returns>
            <para>None</para>
            </returns>
            <remarks>
            <para>
            Each element of the pOperations array contains instructions for a particular computation to be performed on a single element of
            the multi-object state. The functional behavior of <c>BCryptProcessMultiOperations</c> is equivalent to performing, for each
            element in the multi-object state, the computations specified in the operations array for that element, one at a time, in order.
            </para>
            <para>
            The relative order of two operations that operate on different elements of the array is not guaranteed. If an output buffer
            overlaps an input or output buffer the result is not deterministic.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCryptQueryContextConfiguration(Vanara.PInvoke.BCrypt.ContextConfigTable,System.String,System.UInt32@,Vanara.PInvoke.BCrypt.SafeBCryptBuffer@)">
            <summary>
            <para>
            [ <c>BCryptQueryContextConfiguration</c> is available for use in the operating systems specified in the Requirements section. It
            may be altered or unavailable in subsequent versions.]
            </para>
            <para>The <c>BCryptQueryContextConfiguration</c> function retrieves the current configuration for the specified CNG context.</para>
            </summary>
            <param name="dwTable">
            <para>Identifies the configuration table that the context exists in. This can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPT_LOCAL</term>
            <term>The context exists in the local-machine configuration table.</term>
            </item>
            <item>
            <term>CRYPT_DOMAIN</term>
            <term>This value is not available for use.</term>
            </item>
            </list>
            </param>
            <param name="pszContext">
            <para>
            A pointer to a null-terminated Unicode string that contains the identifier of the context to obtain the configuration information for.
            </para>
            </param>
            <param name="pcbBuffer">
            <para>
            The address of a <c>ULONG</c> variable that, on entry, contains the size, in bytes, of the buffer pointed to by ppBuffer. If this
            size is not large enough to hold the context information, this function will fail with <c>STATUS_BUFFER_TOO_SMALL</c>.
            </para>
            <para>After this function returns, this variable contains the number of bytes that were copied to the ppBuffer buffer.</para>
            </param>
            <param name="ppBuffer">
            <para>
            The address of a pointer to a CRYPT_CONTEXT_CONFIG structure that receives the context configuration information retrieved by
            this function. The value pointed to by the pcbBuffer parameter contains the size of this buffer.
            </para>
            <para>
            If the value pointed to by this parameter is <c>NULL</c>, this function will allocate the required memory. This memory must be
            freed when it is no longer needed by passing this pointer to the BCryptFreeBuffer function.
            </para>
            <para>
            If this parameter is <c>NULL</c>, this function will place the required size, in bytes, in the variable pointed to by the
            pcbBuffer parameter and return <c>STATUS_BUFFER_TOO_SMALL</c>.
            </para>
            <para>For more information on the usage of this parameter, see Remarks.</para>
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>STATUS_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>STATUS_BUFFER_TOO_SMALL</term>
            <term>
            The ppBuffer parameter is not NULL, and the value pointed to by the pcbBuffer parameter is not large enough to hold the set of contexts.
            </term>
            </item>
            <item>
            <term>STATUS_INVALID_PARAMETER</term>
            <term>One or more parameters are not valid.</term>
            </item>
            <item>
            <term>STATUS_NO_MEMORY</term>
            <term>A memory allocation failure occurred.</term>
            </item>
            <item>
            <term>STATUS_NOT_FOUND</term>
            <term>The specified context could not be found.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            Each context has only one set of configuration information, so although the ppBuffer parameter appears to be a used as an array,
            this function treats this as an array with only one element. The following example helps clarify how this parameter is used.
            </para>
            <para><c>BCryptQueryContextConfiguration</c> can be called only in user mode.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCryptQueryContextFunctionConfiguration(Vanara.PInvoke.BCrypt.ContextConfigTable,System.String,Vanara.PInvoke.BCrypt.InterfaceId,System.String,System.UInt32@,Vanara.PInvoke.BCrypt.SafeBCryptBuffer@)">
            <summary>
            <para>
            [ <c>BCryptQueryContextFunctionConfiguration</c> is available for use in the operating systems specified in the Requirements
            section. It may be altered or unavailable in subsequent versions.]
            </para>
            <para>
            The <c>BCryptQueryContextFunctionConfiguration</c> function obtains the cryptographic function configuration information for an
            existing CNG context.
            </para>
            </summary>
            <param name="dwTable">
            <para>Identifies the configuration table that the context exists in. This can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPT_LOCAL</term>
            <term>The context exists in the local-machine configuration table.</term>
            </item>
            <item>
            <term>CRYPT_DOMAIN</term>
            <term>This value is not available for use.</term>
            </item>
            </list>
            </param>
            <param name="pszContext">
            <para>
            A pointer to a null-terminated Unicode string that contains the identifier of the context to obtain the function configuration
            information for.
            </para>
            </param>
            <param name="dwInterface">
            <para>
            Identifies the cryptographic interface to obtain the function configuration information for. This can be one of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>BCRYPT_ASYMMETRIC_ENCRYPTION_INTERFACE</term>
            <term>Obtain the function configuration information from the list of asymmetric encryption functions.</term>
            </item>
            <item>
            <term>BCRYPT_CIPHER_INTERFACE</term>
            <term>Obtain the function configuration information from the list of cipher functions.</term>
            </item>
            <item>
            <term>BCRYPT_HASH_INTERFACE</term>
            <term>Obtain the function configuration information from the list of hash functions.</term>
            </item>
            <item>
            <term>BCRYPT_RNG_INTERFACE</term>
            <term>Obtain the function configuration information from the list of random number generator functions.</term>
            </item>
            <item>
            <term>BCRYPT_SECRET_AGREEMENT_INTERFACE</term>
            <term>Obtain the function configuration information from the list of secret agreement functions.</term>
            </item>
            <item>
            <term>BCRYPT_SIGNATURE_INTERFACE</term>
            <term>Obtain the function configuration information from the list of signature functions.</term>
            </item>
            <item>
            <term>NCRYPT_KEY_STORAGE_INTERFACE</term>
            <term>Obtain the function configuration information from the list of key storage functions.</term>
            </item>
            <item>
            <term>NCRYPT_SCHANNEL_INTERFACE</term>
            <term>Obtain the function configuration information from the list of Schannel functions.</term>
            </item>
            </list>
            </param>
            <param name="pszFunction">
            <para>
            A pointer to a null-terminated Unicode string that contains the identifier of the cryptographic function to obtain the
            configuration information for.
            </para>
            </param>
            <param name="pcbBuffer">
            <para>
            The address of a <c>ULONG</c> variable that, on entry, contains the size, in bytes, of the buffer pointed to by ppBuffer. If this
            size is not large enough to hold the context information, this function will fail with <c>STATUS_BUFFER_TOO_SMALL</c>.
            </para>
            <para>After this function returns, this variable contains the number of bytes that were copied to the ppBuffer buffer.</para>
            </param>
            <param name="ppBuffer">
            <para>
            The address of a pointer to a CRYPT_CONTEXT_FUNCTION_CONFIG structure that receives the function configuration information
            retrieved by this function. The value pointed to by the pcbBuffer parameter contains the size of this buffer.
            </para>
            <para>
            If the value pointed to by this parameter is <c>NULL</c>, this function will allocate the required memory. This memory must be
            freed when it is no longer needed by passing this pointer to the BCryptFreeBuffer function.
            </para>
            <para>
            If this parameter is <c>NULL</c>, this function will place the required size, in bytes, in the variable pointed to by the
            pcbBuffer parameter and return <c>STATUS_BUFFER_TOO_SMALL</c>.
            </para>
            <para>For more information about the usage of this parameter, see Remarks.</para>
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>STATUS_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>STATUS_BUFFER_TOO_SMALL</term>
            <term>
            The ppBuffer parameter is not NULL, and the value pointed to by the pcbBuffer parameter is not large enough to hold the set of contexts.
            </term>
            </item>
            <item>
            <term>STATUS_INVALID_PARAMETER</term>
            <term>One or more parameters are not valid.</term>
            </item>
            <item>
            <term>STATUS_NO_MEMORY</term>
            <term>A memory allocation failure occurred.</term>
            </item>
            <item>
            <term>STATUS_NOT_FOUND</term>
            <term>The specified context or function could not be found.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            Each cryptographic function has only one set of configuration information, so although the ppBuffer parameter appears to be a
            used as an array, this function treats this as an array with only one element. The following example helps clarify how this
            parameter is used.
            </para>
            <para><c>BCryptQueryContextFunctionConfiguration</c> can be called only in user mode.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCryptQueryContextFunctionProperty(Vanara.PInvoke.BCrypt.ContextConfigTable,System.String,Vanara.PInvoke.BCrypt.InterfaceId,System.String,System.String,System.UInt32@,Vanara.PInvoke.BCrypt.SafeBCryptBuffer@)">
            <summary>
            <para>
            The <c>BCryptQueryContextFunctionProperty</c> function obtains the value of a named property for a cryptographic function in an
            existing CNG context.
            </para>
            </summary>
            <param name="dwTable">
            <para>Identifies the configuration table that the context exists in. This can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPT_LOCAL</term>
            <term>The context exists in the local-machine configuration table.</term>
            </item>
            <item>
            <term>CRYPT_DOMAIN</term>
            <term>This value is not available for use.</term>
            </item>
            </list>
            </param>
            <param name="pszContext">
            <para>
            A pointer to a null-terminated Unicode string that contains the identifier of the context to obtain the function property from.
            </para>
            </param>
            <param name="dwInterface">
            <para>Identifies the cryptographic interface that the function exists in. This can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>BCRYPT_ASYMMETRIC_ENCRYPTION_INTERFACE</term>
            <term>The function exists in the list of asymmetric encryption functions.</term>
            </item>
            <item>
            <term>BCRYPT_CIPHER_INTERFACE</term>
            <term>The function exists in the list of cipher functions.</term>
            </item>
            <item>
            <term>BCRYPT_HASH_INTERFACE</term>
            <term>The function exists in the list of hash functions.</term>
            </item>
            <item>
            <term>BCRYPT_RNG_INTERFACE</term>
            <term>The function exists in the list of random number generator functions.</term>
            </item>
            <item>
            <term>BCRYPT_SECRET_AGREEMENT_INTERFACE</term>
            <term>The function exists in the list of secret agreement functions.</term>
            </item>
            <item>
            <term>BCRYPT_SIGNATURE_INTERFACE</term>
            <term>The function exists in the list of signature functions.</term>
            </item>
            <item>
            <term>NCRYPT_KEY_STORAGE_INTERFACE</term>
            <term>The function exists in the list of key storage functions.</term>
            </item>
            <item>
            <term>NCRYPT_SCHANNEL_INTERFACE</term>
            <term>The function exists in the list of Schannel functions.</term>
            </item>
            </list>
            </param>
            <param name="pszFunction">
            <para>
            A pointer to a null-terminated Unicode string that contains the identifier of the cryptographic function to obtain the property for.
            </para>
            </param>
            <param name="pszProperty">
            <para>A pointer to a null-terminated Unicode string that contains the identifier of the property to obtain.</para>
            </param>
            <param name="pcbValue">
            <para>
            The address of a <c>ULONG</c> variable that, on entry, contains the size, in bytes, of the buffer pointed to by ppbValue. If this
            size is not large enough to hold the property value, this function will fail with <c>STATUS_BUFFER_TOO_SMALL</c>.
            </para>
            <para>After this function returns, this variable contains the number of bytes that were copied to the ppbValue buffer.</para>
            </param>
            <param name="ppbValue">
            <para>
            The address of a pointer to a buffer that receives the property data. The size and format of this buffer depends on the format of
            the property being retrieved. The value pointed to by the pcbValue parameter contains the size of this buffer.
            </para>
            <para>
            If the value pointed to by this parameter is <c>NULL</c>, this function will allocate the required memory. This memory must be
            freed when it is no longer needed by passing this pointer to the BCryptFreeBuffer function.
            </para>
            <para>
            If this parameter is <c>NULL</c>, this function will place the required size, in bytes, in the variable pointed to by the
            pcbValue parameter and return <c>STATUS_BUFFER_TOO_SMALL</c>.
            </para>
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>STATUS_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>STATUS_BUFFER_TOO_SMALL</term>
            <term>
            The ppbValue parameter is not NULL, and the value pointed to by the pcbValue parameter is not large enough to hold the set of contexts.
            </term>
            </item>
            <item>
            <term>STATUS_INVALID_PARAMETER</term>
            <term>One or more parameters are not valid.</term>
            </item>
            <item>
            <term>STATUS_NO_MEMORY</term>
            <term>A memory allocation failure occurred.</term>
            </item>
            <item>
            <term>STATUS_NOT_FOUND</term>
            <term>The specified context, function, or property could not be found.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para><c>BCryptQueryContextFunctionProperty</c> can be called only in user mode.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCryptQueryProviderRegistration(System.String,Vanara.PInvoke.BCrypt.ProviderInfoType,Vanara.PInvoke.BCrypt.InterfaceId,System.UInt32@,Vanara.PInvoke.BCrypt.SafeBCryptBuffer@)">
            <summary>The <c>BCryptQueryProviderRegistration</c> function retrieves information about a CNG provider.</summary>
            <param name="pszProvider">
            A pointer to a null-terminated Unicode string that contains the name of the provider to obtain information about.
            </param>
            <param name="dwMode">
            <para>Specifies the type of information to retrieve. This can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPT_ANY</term>
            <term>Retrieve any information for the provider.</term>
            </item>
            <item>
            <term>CRYPT_UM</term>
            <term>Retrieve the user mode information for the provider.</term>
            </item>
            <item>
            <term>CRYPT_KM</term>
            <term>Retrieve the kernel mode information for the provider.</term>
            </item>
            <item>
            <term>CRYPT_MM</term>
            <term>Retrieve both the user mode and kernel mode information for the provider.</term>
            </item>
            </list>
            </param>
            <param name="dwInterface">
            <para>Specifies the interface to retrieve information for. This can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>BCRYPT_ASYMMETRIC_ENCRYPTION_INTERFACE</term>
            <term>Retrieve the asymmetric encryption interface.</term>
            </item>
            <item>
            <term>BCRYPT_CIPHER_INTERFACE</term>
            <term>Retrieve the cipher interface.</term>
            </item>
            <item>
            <term>BCRYPT_HASH_INTERFACE</term>
            <term>Retrieve the hash interface.</term>
            </item>
            <item>
            <term>NCRYPT_KEY_STORAGE_INTERFACE</term>
            <term>Retrieve the key storage interface.</term>
            </item>
            <item>
            <term>BCRYPT_RNG_INTERFACE</term>
            <term>Retrieve the random number generator interface.</term>
            </item>
            <item>
            <term>NCRYPT_SCHANNEL_INTERFACE</term>
            <term>Retrieve the Schannel interface.</term>
            </item>
            <item>
            <term>BCRYPT_SECRET_AGREEMENT_INTERFACE</term>
            <term>Retrieve the secret agreement interface.</term>
            </item>
            <item>
            <term>BCRYPT_SIGNATURE_INTERFACE</term>
            <term>Retrieve the signature interface.</term>
            </item>
            </list>
            </param>
            <param name="pcbBuffer">
            <para>
            A pointer to a <c>ULONG</c> value that, on entry, contains the size, in bytes, of the buffer pointed to by the ppBuffer
            parameter. On exit, this value receives either the number of bytes copied to the buffer or the required size, in bytes, of the buffer.
            </para>
            <para>
            <c>Note</c> This is the total size, in bytes, of the entire buffer, not just the size of the CRYPT_PROVIDER_REG structure. The
            buffer must be able to hold other data for the providers in addition to the <c>CRYPT_PROVIDER_REG</c> structure.
            </para>
            </param>
            <param name="ppBuffer">
            <para>A pointer to a buffer pointer that receives a CRYPT_PROVIDER_REG structure and other data that describes the provider.</para>
            <para>
            If this parameter is <c>NULL</c>, this function will return <c>STATUS_BUFFER_TOO_SMALL</c> and place in the value pointed to by
            the pcbBuffer parameter, the required size, in bytes, of all data.
            </para>
            <para>
            If this parameter is the address of a <c>NULL</c> pointer, this function will allocate the required memory, fill it in with the
            provider information, and place a pointer to this memory in this parameter. When you have finished using this memory, free it by
            passing this pointer to the BCryptFreeBuffer function.
            </para>
            <para>
            If this parameter is the address of a non- <c>NULL</c> pointer, this function will copy the provider information into this
            buffer. The pcbBuffer parameter must contain the size, in bytes, of the entire buffer. If the buffer is not large enough to hold
            all of the provider information, this function will return <c>STATUS_BUFFER_TOO_SMALL</c>.
            </para>
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>STATUS_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>STATUS_INVALID_PARAMETER</term>
            <term>One or more parameters are not valid.</term>
            </item>
            <item>
            <term>STATUS_BUFFER_TOO_SMALL</term>
            <term>The size specified by the pcbBuffer parameter is not large enough to hold all of the data.</term>
            </item>
            <item>
            <term>STATUS_NOT_FOUND</term>
            <term>No provider could be found that matches the specified criteria.</term>
            </item>
            </list>
            </returns>
            <remarks><c>BCryptQueryProviderRegistration</c> can be called only in user mode.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCryptRegisterConfigChangeNotify(System.IntPtr)">
            <summary>
            <para>[ <c>BCryptRegisterConfigChangeNotify</c> is deprecated beginning with Windows 10.]</para>
            <para>The <c>BCryptRegisterConfigChangeNotify(PRKEVENT)</c> function creates a kernel mode CNG configuration change event handler.</para>
            </summary>
            <param name="phEvent">
            <para>
            The address of a <c>PRKEVENT</c> variable that receives the pointer to the event dispatcher object. You use the kernel wait
            functions, such as KeWaitForSingleObject, to determine when the event has been signaled. The event is signaled when the CNG
            configuration has changed.
            </para>
            <para>This handle must be passed to the <c>BCryptUnregisterConfigChangeNotify(PRKEVENT)</c> function to remove the event notification.</para>
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>STATUS_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>STATUS_INVALID_PARAMETER</term>
            <term>The phEvent parameter is not valid.</term>
            </item>
            <item>
            <term>STATUS_NO_MEMORY</term>
            <term>A memory allocation failure occurred.</term>
            </item>
            </list>
            </para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCryptRemoveContextFunction(Vanara.PInvoke.BCrypt.ContextConfigTable,System.String,Vanara.PInvoke.BCrypt.InterfaceId,System.String)">
            <summary>
            <para>
            [ <c>BCryptRemoveContextFunction</c> is available for use in the operating systems specified in the Requirements section. It may
            be altered or unavailable in subsequent versions.]
            </para>
            <para>
            The <c>BCryptRemoveContextFunction</c> function removes a cryptographic function from the list of functions that are supported by
            an existing CNG context.
            </para>
            </summary>
            <param name="dwTable">
            <para>Identifies the configuration table that the context exists in. This can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPT_LOCAL</term>
            <term>The context exists in the local-machine configuration table.</term>
            </item>
            <item>
            <term>CRYPT_DOMAIN</term>
            <term>This value is not available for use.</term>
            </item>
            </list>
            </param>
            <param name="pszContext">
            <para>A pointer to a null-terminated Unicode string that contains the identifier of the context to remove the function from.</para>
            </param>
            <param name="dwInterface">
            <para>Identifies the cryptographic interface to remove the function from. This can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>BCRYPT_ASYMMETRIC_ENCRYPTION_INTERFACE</term>
            <term>Remove the function from the list of asymmetric encryption functions.</term>
            </item>
            <item>
            <term>BCRYPT_CIPHER_INTERFACE</term>
            <term>Remove the function from the list of cipher functions.</term>
            </item>
            <item>
            <term>BCRYPT_HASH_INTERFACE</term>
            <term>Remove the function from the list of hash functions.</term>
            </item>
            <item>
            <term>BCRYPT_RNG_INTERFACE</term>
            <term>Remove the function from the list of random number generator functions.</term>
            </item>
            <item>
            <term>BCRYPT_SECRET_AGREEMENT_INTERFACE</term>
            <term>Remove the function from the list of secret agreement functions.</term>
            </item>
            <item>
            <term>BCRYPT_SIGNATURE_INTERFACE</term>
            <term>Remove the function from the list of signature functions.</term>
            </item>
            <item>
            <term>NCRYPT_KEY_STORAGE_INTERFACE</term>
            <term>Remove the function from the list of key storage functions.</term>
            </item>
            <item>
            <term>NCRYPT_SCHANNEL_INTERFACE</term>
            <term>Remove the function from the list of Schannel functions.</term>
            </item>
            <item>
            <term>NCRYPT_SCHANNEL_SIGNATURE_INTERFACE</term>
            <term>
            Remove the function from the list of signature suites that Schannel accepts for TLS 1.2. Windows Vista and Windows Server 2008:
            This value is not supported.
            </term>
            </item>
            </list>
            </param>
            <param name="pszFunction">
            <para>A pointer to a null-terminated Unicode string that contains the identifier of the cryptographic function to remove.</para>
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>STATUS_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>STATUS_INVALID_PARAMETER</term>
            <term>One or more parameters are not valid.</term>
            </item>
            <item>
            <term>STATUS_NOT_FOUND</term>
            <term>The specified context or function could not be found.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para><c>BCryptRemoveContextFunction</c> can be called only in user mode.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCryptResolveProviders(System.String,Vanara.PInvoke.BCrypt.InterfaceId,System.String,System.String,Vanara.PInvoke.BCrypt.ProviderInfoType,Vanara.PInvoke.BCrypt.ResolveProviderFlags,System.UInt32@,Vanara.PInvoke.BCrypt.SafeBCryptBuffer@)">
            <summary>
            <para>The <c>BCryptResolveProviders</c> function obtains a collection of all of the providers that meet the specified criteria.</para>
            </summary>
            <param name="pszContext">
            <para>
            A pointer to a null-terminated Unicode string that contains the identifier of the context for which to obtain the providers. If
            this is set to <c>NULL</c> or to an empty string, the default context is assumed.
            </para>
            </param>
            <param name="dwInterface">
            <para>
            The identifier of an interface that the provider must support. This must be one of the CNG Interface Identifiers. If the
            pszFunction parameter is not <c>NULL</c> or an empty string, you can set dwInterface to zero to force the function to infer the interface.
            </para>
            </param>
            <param name="pszFunction">
            <para>
            A pointer to a null-terminated Unicode string that contains the algorithm or function identifier that the provider must support.
            This can be one of the standard CNG Algorithm Identifiers or the identifier for another registered algorithm. If dwInterface is
            set to a nonzero value, then pszFunction can be <c>NULL</c> to include all algorithms and functions.
            </para>
            </param>
            <param name="pszProvider">
            <para>
            A pointer to a null-terminated Unicode string that contains the name of the provider to retrieve. If this parameter is
            <c>NULL</c>, then all providers will be included.
            </para>
            <para>
            This parameter allows you to specify a specific provider to retrieve in the event that more than one provider meets the other criteria.
            </para>
            </param>
            <param name="dwMode">
            <para>Specifies the type of provider to retrieve. This can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPT_UM</term>
            <term>Retrieve user mode providers.</term>
            </item>
            <item>
            <term>CRYPT_KM</term>
            <term>Retrieve kernel mode providers.</term>
            </item>
            <item>
            <term>CRYPT_MM</term>
            <term>Retrieve both user mode and kernel mode providers.</term>
            </item>
            </list>
            </param>
            <param name="dwFlags">
            <para>A set of flags that modify the behavior of this function.</para>
            <para>This can be a zero or a combination of one or more of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPT_ALL_FUNCTIONS 1</term>
            <term>
            This function will retrieve all of the functions supported by each provider that meets the specified criteria. If this flag is
            not specified, this function will only retrieve the first function of the provider or providers that meet the specified criteria.
            </term>
            </item>
            <item>
            <term>CRYPT_ALL_PROVIDERS 2</term>
            <term>
            This function will retrieve all of the providers that meet the specified criteria. If this flag is not specified, this function
            will only retrieve the first provider that is found that meets the specified criteria.
            </term>
            </item>
            </list>
            </param>
            <param name="pcbBuffer">
            <para>
            A pointer to a <c>DWORD</c> value that, on entry, contains the size, in bytes, of the buffer pointed to by the ppBuffer
            parameter. On exit, this value receives either the number of bytes copied to the buffer or the required size, in bytes, of the buffer.
            </para>
            </param>
            <param name="ppBuffer">
            <para>The address of a CRYPT_PROVIDER_REFS pointer that receives the collection of providers that meet the specified criteria.</para>
            <para>
            If this parameter is <c>NULL</c>, this function will return <c>STATUS_SUCCESS</c> and place in the value pointed to by the
            pcbBuffer parameter, the required size, in bytes, of all the data.
            </para>
            <para>
            If this parameter is the address of a <c>NULL</c> pointer, this function will allocate the required memory, fill the memory with
            the information about the providers, and place the pointer to this memory in this parameter. When you have finished using this
            memory, free it by passing this pointer to the BCryptFreeBuffer function.
            </para>
            <para>
            If this parameter is the address of a non- <c>NULL</c> pointer, this function will copy the provider information into this
            buffer. The pcbBuffer parameter must contain the size, in bytes, of the entire buffer. If the buffer is not large enough to hold
            all of the provider information, this function will return <c>STATUS_BUFFER_TOO_SMALL</c>.
            </para>
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>STATUS_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>STATUS_BUFFER_TOO_SMALL</term>
            <term>The size specified by the pcbBuffer parameter is not large enough to hold all of the data.</term>
            </item>
            <item>
            <term>STATUS_INVALID_PARAMETER</term>
            <term>One or more parameters are not valid.</term>
            </item>
            <item>
            <term>STATUS_NOT_FOUND</term>
            <term>No provider could be found that meets all of the specified criteria.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            <c>BCryptResolveProviders</c> can be called either from user mode or kernel mode. Kernel mode callers must be executing at
            <c>PASSIVE_LEVEL</c> IRQL.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCryptSecretAgreement(Vanara.PInvoke.BCrypt.BCRYPT_KEY_HANDLE,Vanara.PInvoke.BCrypt.BCRYPT_KEY_HANDLE,Vanara.PInvoke.BCrypt.SafeBCRYPT_SECRET_HANDLE@,System.UInt32)">
            <summary>
            <para>The <c>BCryptSecretAgreement</c> function creates a secret agreement value from a private and a public key.</para>
            </summary>
            <param name="hPrivKey">
            <para>
            The handle of the private key to use to create the secret agreement value. This key and the hPubKey key must come from the same
            CNG cryptographic algorithm provider.
            </para>
            </param>
            <param name="hPubKey">
            <para>
            The handle of the public key to use to create the secret agreement value. This key and the hPrivKey key must come from the same
            CNG cryptographic algorithm provider.
            </para>
            </param>
            <param name="phAgreedSecret">
            <para>
            A pointer to a <c>BCRYPT_SECRET_HANDLE</c> that receives a handle that represents the secret agreement value. This handle must be
            released by passing it to the BCryptDestroySecret function when it is no longer needed.
            </para>
            </param>
            <param name="dwFlags">
            <para>A set of flags that modify the behavior of this function. No flags are defined for this function.</para>
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>STATUS_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>STATUS_INVALID_HANDLE</term>
            <term>The key handle in the hPrivKey or hPubKey parameter is not valid.</term>
            </item>
            <item>
            <term>STATUS_INVALID_PARAMETER</term>
            <term>One or more parameters are not valid.</term>
            </item>
            <item>
            <term>STATUS_NOT_SUPPORTED</term>
            <term>The key handle in the hPrivKey parameter is not a Diffie-Hellman key.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            Depending on what processor modes a provider supports, <c>BCryptSecretAgreement</c> can be called either from user mode or kernel
            mode. Kernel mode callers can execute either at <c>PASSIVE_LEVEL</c> IRQL or <c>DISPATCH_LEVEL</c> IRQL. If the current IRQL
            level is <c>DISPATCH_LEVEL</c>, the handles provided in the hPrivKey and hPubKey parameters must be derived from an algorithm
            handle returned by a provider that was opened by using the <c>BCRYPT_PROV_DISPATCH</c> flag, and any pointers passed to the
            <c>BCryptSecretAgreement</c> function must refer to nonpaged (or locked) memory.
            </para>
            <para>
            To call this function in kernel mode, use Cng.lib, which is part of the Driver Development Kit (DDK). For more information, see
            WDK and Developer Tools. <c>Windows Server 2008 and Windows Vista:</c> To call this function in kernel mode, use Ksecdd.lib.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCryptSetContextFunctionProperty(Vanara.PInvoke.BCrypt.ContextConfigTable,System.String,Vanara.PInvoke.BCrypt.InterfaceId,System.String,System.String,System.UInt32,Vanara.InteropServices.SafeAllocatedMemoryHandle)">
            <summary>
            <para>
            The <c>BCryptSetContextFunctionProperty</c> function sets the value of a named property for a cryptographic function in an
            existing CNG context.
            </para>
            </summary>
            <param name="dwTable">
            <para>Identifies the configuration table that the context exists in. This can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPT_LOCAL</term>
            <term>The context exists in the local-machine configuration table.</term>
            </item>
            <item>
            <term>CRYPT_DOMAIN</term>
            <term>This value is not available for use.</term>
            </item>
            </list>
            </param>
            <param name="pszContext">
            <para>
            A pointer to a null-terminated Unicode string that contains the identifier of the context to set the function property in.
            </para>
            </param>
            <param name="dwInterface">
            <para>Identifies the cryptographic interface that the function exists in. This can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>BCRYPT_ASYMMETRIC_ENCRYPTION_INTERFACE</term>
            <term>The function exists in the list of asymmetric encryption functions.</term>
            </item>
            <item>
            <term>BCRYPT_CIPHER_INTERFACE</term>
            <term>The function exists in the list of cipher functions.</term>
            </item>
            <item>
            <term>BCRYPT_HASH_INTERFACE</term>
            <term>The function exists in the list of hash functions.</term>
            </item>
            <item>
            <term>BCRYPT_RNG_INTERFACE</term>
            <term>The function exists in the list of random number generator functions.</term>
            </item>
            <item>
            <term>BCRYPT_SECRET_AGREEMENT_INTERFACE</term>
            <term>The function exists in the list of secret agreement functions.</term>
            </item>
            <item>
            <term>BCRYPT_SIGNATURE_INTERFACE</term>
            <term>The function exists in the list of signature functions.</term>
            </item>
            <item>
            <term>NCRYPT_KEY_STORAGE_INTERFACE</term>
            <term>The function exists in the list of key storage functions.</term>
            </item>
            <item>
            <term>NCRYPT_SCHANNEL_INTERFACE</term>
            <term>The function exists in the list of Schannel functions.</term>
            </item>
            </list>
            </param>
            <param name="pszFunction">
            <para>
            A pointer to a null-terminated Unicode string that contains the identifier of the cryptographic function to set the property for.
            </para>
            </param>
            <param name="pszProperty">
            <para>A pointer to a null-terminated Unicode string that contains the identifier of the property to set.</para>
            </param>
            <param name="cbValue">
            <para>
            Contains the size, in bytes, of the pbValue buffer. This is the exact number of bytes that will be stored. If the property value
            is a string, you should add the size of one character to also store the terminating null character, if needed.
            </para>
            </param>
            <param name="pbValue">
            <para>The address of a buffer that contains the new property value.</para>
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>STATUS_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>STATUS_ACCESS_DENIED</term>
            <term>The caller does not have write access to the properties for the function.</term>
            </item>
            <item>
            <term>STATUS_INVALID_PARAMETER</term>
            <term>One or more parameters are not valid.</term>
            </item>
            <item>
            <term>STATUS_NO_MEMORY</term>
            <term>A memory allocation failure occurred.</term>
            </item>
            <item>
            <term>STATUS_NOT_FOUND</term>
            <term>The specified context or function could not be found.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para><c>BCryptSetContextFunctionProperty</c> can be called only in user mode.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCryptSetContextFunctionProperty(Vanara.PInvoke.BCrypt.ContextConfigTable,System.String,Vanara.PInvoke.BCrypt.InterfaceId,System.String,System.String,System.UInt32,System.Byte[])">
            <summary>
            <para>
            The <c>BCryptSetContextFunctionProperty</c> function sets the value of a named property for a cryptographic function in an
            existing CNG context.
            </para>
            </summary>
            <param name="dwTable">
            <para>Identifies the configuration table that the context exists in. This can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPT_LOCAL</term>
            <term>The context exists in the local-machine configuration table.</term>
            </item>
            <item>
            <term>CRYPT_DOMAIN</term>
            <term>This value is not available for use.</term>
            </item>
            </list>
            </param>
            <param name="pszContext">
            <para>
            A pointer to a null-terminated Unicode string that contains the identifier of the context to set the function property in.
            </para>
            </param>
            <param name="dwInterface">
            <para>Identifies the cryptographic interface that the function exists in. This can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>BCRYPT_ASYMMETRIC_ENCRYPTION_INTERFACE</term>
            <term>The function exists in the list of asymmetric encryption functions.</term>
            </item>
            <item>
            <term>BCRYPT_CIPHER_INTERFACE</term>
            <term>The function exists in the list of cipher functions.</term>
            </item>
            <item>
            <term>BCRYPT_HASH_INTERFACE</term>
            <term>The function exists in the list of hash functions.</term>
            </item>
            <item>
            <term>BCRYPT_RNG_INTERFACE</term>
            <term>The function exists in the list of random number generator functions.</term>
            </item>
            <item>
            <term>BCRYPT_SECRET_AGREEMENT_INTERFACE</term>
            <term>The function exists in the list of secret agreement functions.</term>
            </item>
            <item>
            <term>BCRYPT_SIGNATURE_INTERFACE</term>
            <term>The function exists in the list of signature functions.</term>
            </item>
            <item>
            <term>NCRYPT_KEY_STORAGE_INTERFACE</term>
            <term>The function exists in the list of key storage functions.</term>
            </item>
            <item>
            <term>NCRYPT_SCHANNEL_INTERFACE</term>
            <term>The function exists in the list of Schannel functions.</term>
            </item>
            </list>
            </param>
            <param name="pszFunction">
            <para>
            A pointer to a null-terminated Unicode string that contains the identifier of the cryptographic function to set the property for.
            </para>
            </param>
            <param name="pszProperty">
            <para>A pointer to a null-terminated Unicode string that contains the identifier of the property to set.</para>
            </param>
            <param name="cbValue">
            <para>
            Contains the size, in bytes, of the pbValue buffer. This is the exact number of bytes that will be stored. If the property value
            is a string, you should add the size of one character to also store the terminating null character, if needed.
            </para>
            </param>
            <param name="pbValue">
            <para>The address of a buffer that contains the new property value.</para>
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>STATUS_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>STATUS_ACCESS_DENIED</term>
            <term>The caller does not have write access to the properties for the function.</term>
            </item>
            <item>
            <term>STATUS_INVALID_PARAMETER</term>
            <term>One or more parameters are not valid.</term>
            </item>
            <item>
            <term>STATUS_NO_MEMORY</term>
            <term>A memory allocation failure occurred.</term>
            </item>
            <item>
            <term>STATUS_NOT_FOUND</term>
            <term>The specified context or function could not be found.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para><c>BCryptSetContextFunctionProperty</c> can be called only in user mode.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCryptSetProperty(Vanara.PInvoke.BCrypt.BCRYPT_HANDLE,System.String,System.Byte[],System.UInt32,System.UInt32)">
            <summary>The <c>BCryptSetProperty</c> function sets the value of a named property for a CNG object.</summary>
            <param name="hObject">A handle that represents the CNG object to set the property value for.</param>
            <param name="pszProperty">
            A pointer to a null-terminated Unicode string that contains the name of the property to set. This can be one of the predefined
            Cryptography Primitive Property Identifiers or a custom property identifier.
            </param>
            <param name="pbInput">
            The address of a buffer that contains the new property value. The cbInput parameter contains the size of this buffer.
            </param>
            <param name="cbInput">The size, in bytes, of the pbInput buffer.</param>
            <param name="dwFlags">A set of flags that modify the behavior of this function. No flags are defined for this function.</param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>STATUS_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>STATUS_INVALID_HANDLE</term>
            <term>The handle in the hObject parameter is not valid.</term>
            </item>
            <item>
            <term>STATUS_INVALID_PARAMETER</term>
            <term>One or more parameters are not valid.</term>
            </item>
            <item>
            <term>STATUS_NOT_SUPPORTED</term>
            <term>The named property specified by the pszProperty parameter is not supported or is read-only.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            Depending on what processor modes a provider supports, <c>BCryptSetProperty</c> can be called either from user mode or kernel
            mode. Kernel mode callers can execute either at <c>PASSIVE_LEVEL</c> IRQL or <c>DISPATCH_LEVEL</c> IRQL. If the current IRQL
            level is <c>DISPATCH_LEVEL</c>, any pointers passed to <c>BCryptSetProperty</c> must refer to nonpaged (or locked) memory. If the
            object specified in the hObject parameter is a handle, it must have been opened by using the <c>BCRYPT_PROV_DISPATCH</c> flag.
            </para>
            <para>
            To call this function in kernel mode, use Cng.lib, which is part of the Driver Development Kit (DDK). For more information, see
            WDK and Developer Tools. <c>Windows Server 2008 and Windows Vista:</c> To call this function in kernel mode, use Ksecdd.lib.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCryptSetProperty(Vanara.PInvoke.BCrypt.BCRYPT_HANDLE,System.String,System.IntPtr,System.UInt32,System.UInt32)">
            <summary>The <c>BCryptSetProperty</c> function sets the value of a named property for a CNG object.</summary>
            <param name="hObject">A handle that represents the CNG object to set the property value for.</param>
            <param name="pszProperty">
            A pointer to a null-terminated Unicode string that contains the name of the property to set. This can be one of the predefined
            Cryptography Primitive Property Identifiers or a custom property identifier.
            </param>
            <param name="pbInput">
            The address of a buffer that contains the new property value. The cbInput parameter contains the size of this buffer.
            </param>
            <param name="cbInput">The size, in bytes, of the pbInput buffer.</param>
            <param name="dwFlags">A set of flags that modify the behavior of this function. No flags are defined for this function.</param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>STATUS_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>STATUS_INVALID_HANDLE</term>
            <term>The handle in the hObject parameter is not valid.</term>
            </item>
            <item>
            <term>STATUS_INVALID_PARAMETER</term>
            <term>One or more parameters are not valid.</term>
            </item>
            <item>
            <term>STATUS_NOT_SUPPORTED</term>
            <term>The named property specified by the pszProperty parameter is not supported or is read-only.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            Depending on what processor modes a provider supports, <c>BCryptSetProperty</c> can be called either from user mode or kernel
            mode. Kernel mode callers can execute either at <c>PASSIVE_LEVEL</c> IRQL or <c>DISPATCH_LEVEL</c> IRQL. If the current IRQL
            level is <c>DISPATCH_LEVEL</c>, any pointers passed to <c>BCryptSetProperty</c> must refer to nonpaged (or locked) memory. If the
            object specified in the hObject parameter is a handle, it must have been opened by using the <c>BCRYPT_PROV_DISPATCH</c> flag.
            </para>
            <para>
            To call this function in kernel mode, use Cng.lib, which is part of the Driver Development Kit (DDK). For more information, see
            WDK and Developer Tools. <c>Windows Server 2008 and Windows Vista:</c> To call this function in kernel mode, use Ksecdd.lib.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCryptSignHash(Vanara.PInvoke.BCrypt.BCRYPT_KEY_HANDLE,System.IntPtr,Vanara.InteropServices.SafeAllocatedMemoryHandle,System.UInt32,Vanara.InteropServices.SafeAllocatedMemoryHandle,System.UInt32,System.UInt32@,Vanara.PInvoke.BCrypt.EncryptFlags)">
            <summary>
            <para>The <c>BCryptSignHash</c> function creates a signature of a hash value.</para>
            </summary>
            <param name="hKey">
            <para>The handle of the key to use to sign the hash.</para>
            </param>
            <param name="pPaddingInfo">
            <para>
            A pointer to a structure that contains padding information. The actual type of structure this parameter points to depends on the
            value of the dwFlags parameter. This parameter is only used with asymmetric keys and must be <c>NULL</c> otherwise.
            </para>
            </param>
            <param name="pbInput">
            <para>A pointer to a buffer that contains the hash value to sign. The cbInput parameter contains the size of this buffer.</para>
            </param>
            <param name="cbInput">
            <para>The number of bytes in the pbInput buffer to sign.</para>
            </param>
            <param name="pbOutput">
            <para>
            The address of a buffer to receive the signature produced by this function. The cbOutput parameter contains the size of this buffer.
            </para>
            <para>
            If this parameter is <c>NULL</c>, this function will calculate the size required for the signature and return the size in the
            location pointed to by the pcbResult parameter.
            </para>
            </param>
            <param name="cbOutput">
            <para>The size, in bytes, of the pbOutput buffer. This parameter is ignored if the pbOutput parameter is <c>NULL</c>.</para>
            </param>
            <param name="pcbResult">
            <para>A pointer to a <c>ULONG</c> variable that receives the number of bytes copied to the pbOutput buffer.</para>
            <para>If pbOutput is <c>NULL</c>, this receives the size, in bytes, required for the signature.</para>
            </param>
            <param name="dwFlags">
            <para>
            A set of flags that modify the behavior of this function. The allowed set of flags depends on the type of key specified by the
            hKey parameter.
            </para>
            <para>This can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>BCRYPT_PAD_PKCS1</term>
            <term>Use the PKCS1 padding scheme. The pPaddingInfo parameter is a pointer to a BCRYPT_PKCS1_PADDING_INFO structure.</term>
            </item>
            <item>
            <term>BCRYPT_PAD_PSS</term>
            <term>
            Use the Probabilistic Signature Scheme (PSS) padding scheme. The pPaddingInfo parameter is a pointer to a BCRYPT_PSS_PADDING_INFO structure.
            </term>
            </item>
            </list>
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>STATUS_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>STATUS_INVALID_HANDLE</term>
            <term>The key handle specified by the hKey parameter is not valid.</term>
            </item>
            <item>
            <term>STATUS_NOT_SUPPORTED</term>
            <term>The algorithm provider used to create the key handle specified by the hKey parameter is not a signing algorithm.</term>
            </item>
            <item>
            <term>STATUS_NO_MEMORY</term>
            <term>A memory allocation failure occurred.</term>
            </item>
            <item>
            <term>STATUS_BUFFER_TOO_SMALL</term>
            <term>The memory size specified by the cbOutput parameter is not large enough to hold the signature.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>This function will encrypt the hash value with the specified key to create the signature.</para>
            <para>
            To later verify that the signature is valid, call the BCryptVerifySignature function with an identical key and an identical hash
            of the original data.
            </para>
            <para>
            Depending on what processor modes a provider supports, <c>BCryptSignHash</c> can be called either from user mode or kernel mode.
            Kernel mode callers can execute either at <c>PASSIVE_LEVEL</c> IRQL or <c>DISPATCH_LEVEL</c> IRQL. If the current IRQL level is
            <c>DISPATCH_LEVEL</c>, the handle provided in the hKey parameter must be derived from an algorithm handle returned by a provider
            that was opened with the <c>BCRYPT_PROV_DISPATCH</c> flag, and any pointers passed to the <c>BCryptSignHash</c> function must
            refer to nonpaged (or locked) memory.
            </para>
            <para>
            To call this function in kernel mode, use Cng.lib, which is part of the Driver Development Kit (DDK). For more information, see
            WDK and Developer Tools. <c>Windows Server 2008 and Windows Vista:</c> To call this function in kernel mode, use Ksecdd.lib.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCryptSignHash(Vanara.PInvoke.BCrypt.BCRYPT_KEY_HANDLE,System.IntPtr,Vanara.InteropServices.SafeAllocatedMemoryHandle,System.UInt32,System.IntPtr,System.UInt32,System.UInt32@,Vanara.PInvoke.BCrypt.EncryptFlags)">
            <summary>
            <para>The <c>BCryptSignHash</c> function creates a signature of a hash value.</para>
            </summary>
            <param name="hKey">
            <para>The handle of the key to use to sign the hash.</para>
            </param>
            <param name="pPaddingInfo">
            <para>
            A pointer to a structure that contains padding information. The actual type of structure this parameter points to depends on the
            value of the dwFlags parameter. This parameter is only used with asymmetric keys and must be <c>NULL</c> otherwise.
            </para>
            </param>
            <param name="pbInput">
            <para>A pointer to a buffer that contains the hash value to sign. The cbInput parameter contains the size of this buffer.</para>
            </param>
            <param name="cbInput">
            <para>The number of bytes in the pbInput buffer to sign.</para>
            </param>
            <param name="pbOutput">
            <para>
            The address of a buffer to receive the signature produced by this function. The cbOutput parameter contains the size of this buffer.
            </para>
            <para>
            If this parameter is <c>NULL</c>, this function will calculate the size required for the signature and return the size in the
            location pointed to by the pcbResult parameter.
            </para>
            </param>
            <param name="cbOutput">
            <para>The size, in bytes, of the pbOutput buffer. This parameter is ignored if the pbOutput parameter is <c>NULL</c>.</para>
            </param>
            <param name="pcbResult">
            <para>A pointer to a <c>ULONG</c> variable that receives the number of bytes copied to the pbOutput buffer.</para>
            <para>If pbOutput is <c>NULL</c>, this receives the size, in bytes, required for the signature.</para>
            </param>
            <param name="dwFlags">
            <para>
            A set of flags that modify the behavior of this function. The allowed set of flags depends on the type of key specified by the
            hKey parameter.
            </para>
            <para>This can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>BCRYPT_PAD_PKCS1</term>
            <term>Use the PKCS1 padding scheme. The pPaddingInfo parameter is a pointer to a BCRYPT_PKCS1_PADDING_INFO structure.</term>
            </item>
            <item>
            <term>BCRYPT_PAD_PSS</term>
            <term>
            Use the Probabilistic Signature Scheme (PSS) padding scheme. The pPaddingInfo parameter is a pointer to a BCRYPT_PSS_PADDING_INFO structure.
            </term>
            </item>
            </list>
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>STATUS_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>STATUS_INVALID_HANDLE</term>
            <term>The key handle specified by the hKey parameter is not valid.</term>
            </item>
            <item>
            <term>STATUS_NOT_SUPPORTED</term>
            <term>The algorithm provider used to create the key handle specified by the hKey parameter is not a signing algorithm.</term>
            </item>
            <item>
            <term>STATUS_NO_MEMORY</term>
            <term>A memory allocation failure occurred.</term>
            </item>
            <item>
            <term>STATUS_BUFFER_TOO_SMALL</term>
            <term>The memory size specified by the cbOutput parameter is not large enough to hold the signature.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>This function will encrypt the hash value with the specified key to create the signature.</para>
            <para>
            To later verify that the signature is valid, call the BCryptVerifySignature function with an identical key and an identical hash
            of the original data.
            </para>
            <para>
            Depending on what processor modes a provider supports, <c>BCryptSignHash</c> can be called either from user mode or kernel mode.
            Kernel mode callers can execute either at <c>PASSIVE_LEVEL</c> IRQL or <c>DISPATCH_LEVEL</c> IRQL. If the current IRQL level is
            <c>DISPATCH_LEVEL</c>, the handle provided in the hKey parameter must be derived from an algorithm handle returned by a provider
            that was opened with the <c>BCRYPT_PROV_DISPATCH</c> flag, and any pointers passed to the <c>BCryptSignHash</c> function must
            refer to nonpaged (or locked) memory.
            </para>
            <para>
            To call this function in kernel mode, use Cng.lib, which is part of the Driver Development Kit (DDK). For more information, see
            WDK and Developer Tools. <c>Windows Server 2008 and Windows Vista:</c> To call this function in kernel mode, use Ksecdd.lib.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCryptUnregisterConfigChangeNotify(System.IntPtr)">
            <summary>
            The <c>BCryptUnregisterConfigChangeNotify(PRKEVENT)</c> function removes a kernel mode CNG configuration change event handler
            that was created by using the <c>BCryptRegisterConfigChangeNotify(PRKEVENT)</c> function.
            </summary>
            <param name="hEvent">
            The pointer to the event dispatcher object to remove. This is the pointer that was obtained by using the
            <c>BCryptRegisterConfigChangeNotify(PRKEVENT)</c> function.
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>STATUS_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>STATUS_INVALID_PARAMETER</term>
            <term>The hEvent parameter is not valid.</term>
            </item>
            <item>
            <term>STATUS_NO_MEMORY</term>
            <term>A memory allocation failure occurred.</term>
            </item>
            </list>
            </para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCryptVerifySignature(Vanara.PInvoke.BCrypt.BCRYPT_KEY_HANDLE,System.IntPtr,Vanara.InteropServices.SafeAllocatedMemoryHandle,System.UInt32,Vanara.InteropServices.SafeAllocatedMemoryHandle,System.UInt32,Vanara.PInvoke.BCrypt.EncryptFlags)">
            <summary>
            <para>The <c>BCryptVerifySignature</c> function verifies that the specified signature matches the specified hash.</para>
            </summary>
            <param name="hKey">
            <para>
            The handle of the key to use to decrypt the signature. This must be an identical key or the public key portion of the key pair
            used to sign the data with the BCryptSignHash function.
            </para>
            </param>
            <param name="pPaddingInfo">
            <para>
            A pointer to a structure that contains padding information. The actual type of structure this parameter points to depends on the
            value of the dwFlags parameter. This parameter is only used with asymmetric keys and must be <c>NULL</c> otherwise.
            </para>
            </param>
            <param name="pbHash">
            <para>The address of a buffer that contains the hash of the data. The cbHash parameter contains the size of this buffer.</para>
            </param>
            <param name="cbHash">
            <para>The size, in bytes, of the pbHash buffer.</para>
            </param>
            <param name="pbSignature">
            <para>
            The address of a buffer that contains the signed hash of the data. The BCryptSignHash function is used to create the signature.
            The cbSignature parameter contains the size of this buffer.
            </para>
            </param>
            <param name="cbSignature">
            <para>The size, in bytes, of the pbSignature buffer. The BCryptSignHash function is used to create the signature.</para>
            </param>
            <param name="dwFlags">
            <para>
            A set of flags that modify the behavior of this function. The allowed set of flags depends on the type of key specified by the
            hKey parameter.
            </para>
            <para>If the key is a symmetric key, this parameter is not used and should be zero.</para>
            <para>If the key is an asymmetric key, this can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>BCRYPT_PAD_PKCS1</term>
            <term>
            The PKCS1 padding scheme was used when the signature was created. The pPaddingInfo parameter is a pointer to a
            BCRYPT_PKCS1_PADDING_INFO structure.
            </term>
            </item>
            <item>
            <term>BCRYPT_PAD_PSS</term>
            <term>
            The Probabilistic Signature Scheme (PSS) padding scheme was used when the signature was created. The pPaddingInfo parameter is a
            pointer to a BCRYPT_PSS_PADDING_INFO structure.
            </term>
            </item>
            </list>
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>STATUS_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>STATUS_INVALID_SIGNATURE</term>
            <term>The signature was not verified.</term>
            </item>
            <item>
            <term>NTE_NO_MEMORY</term>
            <term>A memory allocation failure occurred.</term>
            </item>
            <item>
            <term>STATUS_INVALID_HANDLE</term>
            <term>The key handle specified by the hKey parameter is not valid.</term>
            </item>
            <item>
            <term>STATUS_NOT_SUPPORTED</term>
            <term>The algorithm provider used to create the key handle specified by the hKey parameter is not a signing algorithm.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            This function decrypts the signature with the provided key and then compares the decrypted value to the specified hash value.
            </para>
            <para>
            To use this function, you must hash the data by using the same hashing algorithm that was used to create the hash value that was
            signed. If applicable, you must also specify the same padding scheme that was specified when the signature was created.
            </para>
            <para>
            Depending on what processor modes a provider supports, <c>BCryptVerifySignature</c> can be called either from user mode or kernel
            mode. Kernel mode callers can execute either at <c>PASSIVE_LEVEL</c> IRQL or <c>DISPATCH_LEVEL</c> IRQL. If the current IRQL
            level is <c>DISPATCH_LEVEL</c>, the handle provided in the hKey parameter must be derived from an algorithm handle returned by a
            provider that was opened by using the <c>BCRYPT_PROV_DISPATCH</c> flag, and any pointers passed to the
            <c>BCryptVerifySignature</c> function must refer to nonpaged (or locked) memory.
            </para>
            <para>
            To call this function in kernel mode, use Cng.lib, which is part of the Driver Development Kit (DDK). For more information, see
            WDK and Developer Tools. <c>Windows Server 2008 and Windows Vista:</c> To call this function in kernel mode, use Ksecdd.lib.
            </para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.BCrypt.BCRYPT_ALG_HANDLE">
            <summary>Provides a handle to an algorithm provider.</summary>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCRYPT_ALG_HANDLE.#ctor(System.IntPtr)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.BCrypt.BCRYPT_ALG_HANDLE"/> struct.</summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
        </member>
        <member name="P:Vanara.PInvoke.BCrypt.BCRYPT_ALG_HANDLE.NULL">
            <summary>Returns an invalid handle by instantiating a <see cref="T:Vanara.PInvoke.BCrypt.BCRYPT_ALG_HANDLE"/> object with <see cref="F:System.IntPtr.Zero"/>.</summary>
        </member>
        <member name="P:Vanara.PInvoke.BCrypt.BCRYPT_ALG_HANDLE.IsNull">
            <summary>Gets a value indicating whether this instance is a null handle.</summary>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCRYPT_ALG_HANDLE.op_Explicit(Vanara.PInvoke.BCrypt.BCRYPT_ALG_HANDLE)~System.IntPtr">
            <summary>Performs an explicit conversion from <see cref="T:Vanara.PInvoke.BCrypt.BCRYPT_ALG_HANDLE"/> to <see cref="T:System.IntPtr"/>.</summary>
            <param name="h">The handle.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCRYPT_ALG_HANDLE.op_Implicit(System.IntPtr)~Vanara.PInvoke.BCrypt.BCRYPT_ALG_HANDLE">
            <summary>Performs an implicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:Vanara.PInvoke.BCrypt.BCRYPT_ALG_HANDLE"/>.</summary>
            <param name="h">The pointer to a handle.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCRYPT_ALG_HANDLE.op_Inequality(Vanara.PInvoke.BCrypt.BCRYPT_ALG_HANDLE,Vanara.PInvoke.BCrypt.BCRYPT_ALG_HANDLE)">
            <summary>Implements the operator !=.</summary>
            <param name="h1">The first handle.</param>
            <param name="h2">The second handle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCRYPT_ALG_HANDLE.op_Equality(Vanara.PInvoke.BCrypt.BCRYPT_ALG_HANDLE,Vanara.PInvoke.BCrypt.BCRYPT_ALG_HANDLE)">
            <summary>Implements the operator ==.</summary>
            <param name="h1">The first handle.</param>
            <param name="h2">The second handle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCRYPT_ALG_HANDLE.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCRYPT_ALG_HANDLE.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCRYPT_ALG_HANDLE.DangerousGetHandle">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.BCrypt.BCRYPT_ALGORITHM_IDENTIFIER">
            <summary>
            <para>
            The <c>BCRYPT_ALGORITHM_IDENTIFIER</c> structure is used with the BCryptEnumAlgorithms function to contain a cryptographic
            algorithm identifier.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.BCRYPT_ALGORITHM_IDENTIFIER.pszName">
            <summary>
            <para>
            A pointer to a null-terminated Unicode string that contains the string identifier of the algorithm. The CNG Algorithm
            Identifiers topic contains the predefined algorithm identifiers.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.BCRYPT_ALGORITHM_IDENTIFIER.dwClass">
            <summary>
            <para>Specifies the class of the algorithm. This can be one of the CNG Interface Identifiers.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.BCRYPT_ALGORITHM_IDENTIFIER.dwFlags">
            <summary>
            <para>A set of flags that specify other information about the algorithm. There are currently no flags defined for this member.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.BCrypt.BCRYPT_HANDLE">
            <summary>Provides a handle to a CNG object.</summary>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCRYPT_HANDLE.#ctor(System.IntPtr)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.BCrypt.BCRYPT_HANDLE"/> struct.</summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
        </member>
        <member name="P:Vanara.PInvoke.BCrypt.BCRYPT_HANDLE.NULL">
            <summary>Returns an invalid handle by instantiating a <see cref="T:Vanara.PInvoke.BCrypt.BCRYPT_HANDLE"/> object with <see cref="F:System.IntPtr.Zero"/>.</summary>
        </member>
        <member name="P:Vanara.PInvoke.BCrypt.BCRYPT_HANDLE.IsNull">
            <summary>Gets a value indicating whether this instance is a null handle.</summary>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCRYPT_HANDLE.op_Explicit(Vanara.PInvoke.BCrypt.BCRYPT_HANDLE)~System.IntPtr">
            <summary>Performs an explicit conversion from <see cref="T:Vanara.PInvoke.BCrypt.BCRYPT_HANDLE"/> to <see cref="T:System.IntPtr"/>.</summary>
            <param name="h">The handle.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCRYPT_HANDLE.op_Implicit(System.IntPtr)~Vanara.PInvoke.BCrypt.BCRYPT_HANDLE">
            <summary>Performs an implicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:Vanara.PInvoke.BCrypt.BCRYPT_HANDLE"/>.</summary>
            <param name="h">The pointer to a handle.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCRYPT_HANDLE.op_Inequality(Vanara.PInvoke.BCrypt.BCRYPT_HANDLE,Vanara.PInvoke.BCrypt.BCRYPT_HANDLE)">
            <summary>Implements the operator !=.</summary>
            <param name="h1">The first handle.</param>
            <param name="h2">The second handle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCRYPT_HANDLE.op_Equality(Vanara.PInvoke.BCrypt.BCRYPT_HANDLE,Vanara.PInvoke.BCrypt.BCRYPT_HANDLE)">
            <summary>Implements the operator ==.</summary>
            <param name="h1">The first handle.</param>
            <param name="h2">The second handle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCRYPT_HANDLE.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCRYPT_HANDLE.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCRYPT_HANDLE.DangerousGetHandle">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.BCrypt.BCRYPT_HASH_HANDLE">
            <summary>Provides a handle to a multi-hash state.</summary>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCRYPT_HASH_HANDLE.#ctor(System.IntPtr)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.BCrypt.BCRYPT_HASH_HANDLE"/> struct.</summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
        </member>
        <member name="P:Vanara.PInvoke.BCrypt.BCRYPT_HASH_HANDLE.NULL">
            <summary>Returns an invalid handle by instantiating a <see cref="T:Vanara.PInvoke.BCrypt.BCRYPT_HASH_HANDLE"/> object with <see cref="F:System.IntPtr.Zero"/>.</summary>
        </member>
        <member name="P:Vanara.PInvoke.BCrypt.BCRYPT_HASH_HANDLE.IsNull">
            <summary>Gets a value indicating whether this instance is a null handle.</summary>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCRYPT_HASH_HANDLE.op_Explicit(Vanara.PInvoke.BCrypt.BCRYPT_HASH_HANDLE)~System.IntPtr">
            <summary>Performs an explicit conversion from <see cref="T:Vanara.PInvoke.BCrypt.BCRYPT_HASH_HANDLE"/> to <see cref="T:System.IntPtr"/>.</summary>
            <param name="h">The handle.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCRYPT_HASH_HANDLE.op_Implicit(System.IntPtr)~Vanara.PInvoke.BCrypt.BCRYPT_HASH_HANDLE">
            <summary>Performs an implicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:Vanara.PInvoke.BCrypt.BCRYPT_HASH_HANDLE"/>.</summary>
            <param name="h">The pointer to a handle.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCRYPT_HASH_HANDLE.op_Inequality(Vanara.PInvoke.BCrypt.BCRYPT_HASH_HANDLE,Vanara.PInvoke.BCrypt.BCRYPT_HASH_HANDLE)">
            <summary>Implements the operator !=.</summary>
            <param name="h1">The first handle.</param>
            <param name="h2">The second handle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCRYPT_HASH_HANDLE.op_Equality(Vanara.PInvoke.BCrypt.BCRYPT_HASH_HANDLE,Vanara.PInvoke.BCrypt.BCRYPT_HASH_HANDLE)">
            <summary>Implements the operator ==.</summary>
            <param name="h1">The first handle.</param>
            <param name="h2">The second handle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCRYPT_HASH_HANDLE.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCRYPT_HASH_HANDLE.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCRYPT_HASH_HANDLE.DangerousGetHandle">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.BCrypt.BCRYPT_KEY_HANDLE">
            <summary>Provides a handle to a key pair.</summary>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCRYPT_KEY_HANDLE.#ctor(System.IntPtr)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.BCrypt.BCRYPT_KEY_HANDLE"/> struct.</summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
        </member>
        <member name="P:Vanara.PInvoke.BCrypt.BCRYPT_KEY_HANDLE.NULL">
            <summary>Returns an invalid handle by instantiating a <see cref="T:Vanara.PInvoke.BCrypt.BCRYPT_KEY_HANDLE"/> object with <see cref="F:System.IntPtr.Zero"/>.</summary>
        </member>
        <member name="P:Vanara.PInvoke.BCrypt.BCRYPT_KEY_HANDLE.IsNull">
            <summary>Gets a value indicating whether this instance is a null handle.</summary>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCRYPT_KEY_HANDLE.op_Explicit(Vanara.PInvoke.BCrypt.BCRYPT_KEY_HANDLE)~System.IntPtr">
            <summary>Performs an explicit conversion from <see cref="T:Vanara.PInvoke.BCrypt.BCRYPT_KEY_HANDLE"/> to <see cref="T:System.IntPtr"/>.</summary>
            <param name="h">The handle.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCRYPT_KEY_HANDLE.op_Implicit(System.IntPtr)~Vanara.PInvoke.BCrypt.BCRYPT_KEY_HANDLE">
            <summary>Performs an implicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:Vanara.PInvoke.BCrypt.BCRYPT_KEY_HANDLE"/>.</summary>
            <param name="h">The pointer to a handle.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCRYPT_KEY_HANDLE.op_Inequality(Vanara.PInvoke.BCrypt.BCRYPT_KEY_HANDLE,Vanara.PInvoke.BCrypt.BCRYPT_KEY_HANDLE)">
            <summary>Implements the operator !=.</summary>
            <param name="h1">The first handle.</param>
            <param name="h2">The second handle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCRYPT_KEY_HANDLE.op_Equality(Vanara.PInvoke.BCrypt.BCRYPT_KEY_HANDLE,Vanara.PInvoke.BCrypt.BCRYPT_KEY_HANDLE)">
            <summary>Implements the operator ==.</summary>
            <param name="h1">The first handle.</param>
            <param name="h2">The second handle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCRYPT_KEY_HANDLE.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCRYPT_KEY_HANDLE.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCRYPT_KEY_HANDLE.DangerousGetHandle">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.BCrypt.BCRYPT_KEY_LENGTHS_STRUCT">
            <summary>
            <para>
            The <c>BCRYPT_KEY_LENGTHS_STRUCT</c> structure defines the range of key sizes that are supported by the provider. This structure
            is used with the <c>BCRYPT_KEY_LENGTHS</c> property.
            </para>
            <para>
            This structure is also used with the <c>BCRYPT_AUTH_TAG_LENGTH</c> property to contain the minimum, maximum, and increment size
            of an authentication tag.
            </para>
            </summary>
            <remarks>
            The key sizes are given in a range that is inclusive of the minimum and maximum values and are separated by the increment. For
            example, if the minimum key size is 8 bits, the maximum key size is 16 bits, and the increment is 2 bits, the provider would
            support key sizes of 8, 10, 12, 14, and 16 bits.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.BCRYPT_KEY_LENGTHS_STRUCT.dwMinLength">
            <summary>The minimum length, in bits, of a key.</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.BCRYPT_KEY_LENGTHS_STRUCT.dwMaxLength">
            <summary>The maximum length, in bits, of a key.</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.BCRYPT_KEY_LENGTHS_STRUCT.dwIncrement">
            <summary>The number of bits that the key size can be incremented between <c>dwMinLength</c> and <c>dwMaxLength</c>.</summary>
        </member>
        <member name="T:Vanara.PInvoke.BCrypt.BCRYPT_MULTI_HASH_OPERATION">
            <summary>A <c>BCRYPT_MULTI_HASH_OPERATION</c> structure defines a single operation in a multi-hash operation.</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.BCRYPT_MULTI_HASH_OPERATION.iHash">
            <summary>
            An index into the multi-object state array of the hash state on which this computation operates. The first element of the
            array corresponds to an iHash value of zero (0). Valid values are less than the value of the nHashes parameter of the
            BCryptCreateMultiHash function.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.BCRYPT_MULTI_HASH_OPERATION.hashOperation">
            <summary>
            <para>A hash operation type, either <c>BCRYPT_HASH_OPERATION_HASH_DATA</c> or <c>BCRYPT_HASH_OPERATION_FINISH_HASH</c>.</para>
            <para>
            If the value is <c>BCRYPT_HASH_OPERATION_HASH_DATA</c>, the operation performed is equivalent to calling the BCryptHashData
            function on the hash object array element with pbBuffer/cbBuffer pointing to the buffer to be hashed.
            </para>
            <para>
            If the value is <c>BCRYPT_HASH_OPERATION_FINISH_HASH</c>, the operation performed is equivalent to calling the
            BCryptFinishHash function on the hash object array element with pbBuffer/cbBuffer pointing to the output buffer that receives
            the result.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.BCRYPT_MULTI_HASH_OPERATION.pbBuffer">
            <summary>The buffer on which the operation works.</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.BCRYPT_MULTI_HASH_OPERATION.cbBuffer">
            <summary>The buffer on which the operation works.</summary>
        </member>
        <member name="T:Vanara.PInvoke.BCrypt.BCRYPT_MULTI_OBJECT_LENGTH_STRUCT">
            <summary>
            The <c>BCRYPT_MULTI_OBJECT_LENGTH_STRUCT</c> structure contains information to determine the size of the pbHashObject buffer for
            the BCryptCreateMultiHash function.
            </summary>
            <remarks>
            The size of the pbHashObject buffer for the BCryptCreateMultiHash function is the following:
            <code>cbPerObject + (number of hash states) * cbPerElement</code>
            .
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.BCRYPT_MULTI_OBJECT_LENGTH_STRUCT.cbPerObject">
            <summary>The number of bytes needed for the object overhead.</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.BCRYPT_MULTI_OBJECT_LENGTH_STRUCT.cbPerElement">
            <summary>The number of bytes needed for each element of the object.</summary>
        </member>
        <member name="T:Vanara.PInvoke.BCrypt.BCRYPT_OAEP_PADDING_INFO">
            <summary>
            The <c>BCRYPT_OAEP_PADDING_INFO</c> structure is used to provide options for the Optimal Asymmetric Encryption Padding (OAEP) scheme.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.BCRYPT_OAEP_PADDING_INFO.pszAlgId">
            <summary>
            A pointer to a null-terminated Unicode string that identifies the cryptographic algorithm to use to create the padding. This
            algorithm must be a hashing algorithm.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.BCRYPT_OAEP_PADDING_INFO.pbLabel">
            <summary>
            The address of a buffer that contains the data to use to create the padding. The <c>cbLabel</c> member contains the size of
            this buffer.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.BCRYPT_OAEP_PADDING_INFO.cbLabel">
            <summary>Contains the number of bytes in the <c>pbLabel</c> buffer to use to create the padding.</summary>
        </member>
        <member name="T:Vanara.PInvoke.BCrypt.BCRYPT_OID_LIST">
            <summary>
            The <c>BCRYPT_OID_LIST</c> structure is used to contain a collection of BCRYPT_OID structures. Use this structure with the
            BCRYPT_HASH_OID_LIST property to retrieve the list of hashing object identifiers (OIDs) that have been encoded by using
            Distinguished Encoding Rules (DER) encoding.
            </summary>
            <remarks>
            <para>
            The first OID in the <c>pOIDs</c> array is used to identify any hashes or signatures created by this algorithm provider. When
            verifying a hash or signature, all the OIDs in the array are treated as valid.
            </para>
            <para>
            In the Microsoft Primitive Provider implementation, <c>dwOIDCount</c> is 2, so that the <c>pOIDs</c> array contains two members:
            </para>
            <list type="bullet">
            <item>
            <term><c>pOIDs[0]</c> contains a DER-encoded <c>AlgorithmIdentifier</c> with a <c>NULL</c> parameter.</term>
            </item>
            <item>
            <term><c>pOIDs[1]</c> contains the DER-encoded <c>AlgorithmIdentifier</c> without a <c>NULL</c> parameter.</term>
            </item>
            </list>
            <para>For example, the SHA-1 encoding would be:</para>
            <list type="bullet">
            <item>
            <term><c>pOIDs[0]</c> --&gt; 06 05 2b 0e 03 02 1a 05 00</term>
            </item>
            <item>
            <term><c>pOIDs[1]</c> --&gt; 06 05 2b 0e 03 02 1a</term>
            </item>
            </list>
            <para>
            The following snippet describes an <c>AlgorithmIdentifier</c> in Abstract Syntax Notation One (ASN.1) notation. <c>SEQUENCE</c>,
            <c>OBJECT IDENTIFIER</c>, and <c>ANY</c> are DER encoded. The <c>ANY</c> BLOB is <c>NULL</c>.
            </para>
            <para>
            <code>AlgorithmIdentifier ::= SEQUENCE { algorithm OBJECT IDENTIFIER, algorithmParams ANY }</code>
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.BCRYPT_OID_LIST.dwOIDCount">
            <summary>The number of elements in the <c>pOIDs</c> array.</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.BCRYPT_OID_LIST.pOIDs">
            <summary>The address of an array of BCRYPT_OID structures that contains OIDs.</summary>
        </member>
        <member name="T:Vanara.PInvoke.BCrypt.BCRYPT_PKCS1_PADDING_INFO">
            <summary>The <c>BCRYPT_PKCS1_PADDING_INFO</c> structure is used to provide options for the PKCS #1 padding scheme.</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.BCRYPT_PKCS1_PADDING_INFO.pszAlgId">
            <summary>
            A pointer to a null-terminated Unicode string that identifies the cryptographic algorithm to use to create the padding. This
            algorithm must be a hashing algorithm. When creating a signature, the object identifier (OID) that corresponds to this
            algorithm is added to the <c>DigestInfo</c> element in the signature, and if this member is <c>NULL</c>, then the OID is not
            added. When verifying a signature, the verification fails if the OID that corresponds to this member is not the same as the
            OID in the signature. If there is no OID in the signature, then verification fails unless this member is <c>NULL</c>.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.BCrypt.BCRYPT_PROVIDER_NAME">
            <summary>The <c>BCRYPT_PROVIDER_NAME</c> structure contains the name of a CNG provider.</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.BCRYPT_PROVIDER_NAME.pszProviderName">
            <summary>A pointer to a null-terminated Unicode string that contains the name of the provider.</summary>
        </member>
        <member name="T:Vanara.PInvoke.BCrypt.BCRYPT_PSS_PADDING_INFO">
            <summary>
            The <c>BCRYPT_PSS_PADDING_INFO</c> structure is used to provide options for the Probabilistic Signature Scheme (PSS) padding scheme.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.BCRYPT_PSS_PADDING_INFO.pszAlgId">
            <summary>
            A pointer to a null-terminated Unicode string that identifies the cryptographic algorithm to use to create the padding. This
            algorithm must be a hashing algorithm.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.BCRYPT_PSS_PADDING_INFO.cbSalt">
            <summary>The size, in bytes, of the random salt to use for the padding.</summary>
        </member>
        <member name="T:Vanara.PInvoke.BCrypt.BCRYPT_SECRET_HANDLE">
            <summary>Provides a handle to a secret agreement.</summary>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCRYPT_SECRET_HANDLE.#ctor(System.IntPtr)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.BCrypt.BCRYPT_SECRET_HANDLE"/> struct.</summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
        </member>
        <member name="P:Vanara.PInvoke.BCrypt.BCRYPT_SECRET_HANDLE.NULL">
            <summary>Returns an invalid handle by instantiating a <see cref="T:Vanara.PInvoke.BCrypt.BCRYPT_SECRET_HANDLE"/> object with <see cref="F:System.IntPtr.Zero"/>.</summary>
        </member>
        <member name="P:Vanara.PInvoke.BCrypt.BCRYPT_SECRET_HANDLE.IsNull">
            <summary>Gets a value indicating whether this instance is a null handle.</summary>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCRYPT_SECRET_HANDLE.op_Explicit(Vanara.PInvoke.BCrypt.BCRYPT_SECRET_HANDLE)~System.IntPtr">
            <summary>Performs an explicit conversion from <see cref="T:Vanara.PInvoke.BCrypt.BCRYPT_SECRET_HANDLE"/> to <see cref="T:System.IntPtr"/>.</summary>
            <param name="h">The handle.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCRYPT_SECRET_HANDLE.op_Implicit(System.IntPtr)~Vanara.PInvoke.BCrypt.BCRYPT_SECRET_HANDLE">
            <summary>Performs an implicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:Vanara.PInvoke.BCrypt.BCRYPT_SECRET_HANDLE"/>.</summary>
            <param name="h">The pointer to a handle.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCRYPT_SECRET_HANDLE.op_Inequality(Vanara.PInvoke.BCrypt.BCRYPT_SECRET_HANDLE,Vanara.PInvoke.BCrypt.BCRYPT_SECRET_HANDLE)">
            <summary>Implements the operator !=.</summary>
            <param name="h1">The first handle.</param>
            <param name="h2">The second handle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCRYPT_SECRET_HANDLE.op_Equality(Vanara.PInvoke.BCrypt.BCRYPT_SECRET_HANDLE,Vanara.PInvoke.BCrypt.BCRYPT_SECRET_HANDLE)">
            <summary>Implements the operator ==.</summary>
            <param name="h1">The first handle.</param>
            <param name="h2">The second handle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCRYPT_SECRET_HANDLE.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCRYPT_SECRET_HANDLE.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.BCRYPT_SECRET_HANDLE.DangerousGetHandle">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.BCrypt.CRYPT_CONTEXT_CONFIG">
            <summary>
            <para>The <c>CRYPT_CONTEXT_CONFIG</c> structure contains configuration information for a CNG context.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.CRYPT_CONTEXT_CONFIG.dwFlags">
            <summary>
            <para>
            A set of flags that determine the options for the configuration context. This can be zero or a combination of one or more of
            the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPT_EXCLUSIVE</term>
            <term>
            Restricts the set of cryptographic functions in an interface to those that the current CNG context is specifically registered
            to support. If this flag is set, then any attempts to resolve a given function will succeed only if one of the following is true:
            </term>
            </item>
            <item>
            <term>CRYPT_OVERRIDE</term>
            <term>
            Indicates that this entry in the enterprise-wide configuration table should take precedence over any and all corresponding
            entries in the local-machine configuration table for this context. This flag only applies to entries in the enterprise-wide
            configuration table. Without this flag, local machine configuration entries take precedence.
            </term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.CRYPT_CONTEXT_CONFIG.dwReserved">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.BCrypt.CRYPT_CONTEXT_FUNCTION_CONFIG">
            <summary>
            <para>
            The <c>CRYPT_CONTEXT_FUNCTION_CONFIG</c> structure contains configuration information for a cryptographic function of a CNG context.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.CRYPT_CONTEXT_FUNCTION_CONFIG.dwFlags">
            <summary>
            <para>
            A set of flags that determine the options for the context function configuration. This can be zero or the following value.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPT_EXCLUSIVE</term>
            <term>
            Restricts the set of usable providers for this function to only those that this function is specifically registered to support.
            </term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.CRYPT_CONTEXT_FUNCTION_CONFIG.dwReserved">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.BCrypt.CRYPT_CONTEXT_FUNCTION_PROVIDERS">
            <summary>
            The <c>CRYPT_CONTEXT_FUNCTION_PROVIDERS</c> structure contains a set of cryptographic function providers for a CNG configuration context.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.CRYPT_CONTEXT_FUNCTION_PROVIDERS.cProviders">
            <summary>The number of elements in the <c>rgpszProviders</c> array.</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.CRYPT_CONTEXT_FUNCTION_PROVIDERS.rgpszProviders">
            <summary>
            An array of pointers to null-terminated Unicode strings that contain the identifiers of the function providers contained in
            this set. The <c>cProviders</c> member contains the number of elements in this array.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.BCrypt.CRYPT_CONTEXT_FUNCTIONS">
            <summary>
            <para>The <c>CRYPT_CONTEXT_FUNCTIONS</c> structure contains a set of cryptographic functions for a CNG configuration context.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.CRYPT_CONTEXT_FUNCTIONS.cFunctions">
            <summary>
            <para>The number of elements in the <c>rgpszFunctions</c> array.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.CRYPT_CONTEXT_FUNCTIONS.rgpszFunctions">
            <summary>
            <para>
            An array of pointers to null-terminated Unicode strings that contain the identifiers of the cryptographic functions contained
            in this set. The <c>cFunctions</c> member contains the number of elements in this array.
            </para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.BCrypt.CRYPT_CONTEXTS">
            <summary>
            <para>The <c>CRYPT_CONTEXTS</c> structure contains a set of CNG configuration context identifiers.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.CRYPT_CONTEXTS.cContexts">
            <summary>
            <para>Contains the number of elements in the <c>rgpszContexts</c> array.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.CRYPT_CONTEXTS.rgpszContexts">
            <summary>
            <para>
            An array of pointers to null-terminated Unicode strings that contain the identifiers of the contexts contained in this set.
            The <c>cContext</c> member contains the number of elements in this array.
            </para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.BCrypt.CRYPT_PROVIDERS">
            <summary>
            <para>The <c>CRYPT_PROVIDERS</c> structure contains information about the registered CNG providers.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.CRYPT_PROVIDERS.cProviders">
            <summary>
            <para>Contains the number of elements in the <c>rgpszProviders</c> array.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.CRYPT_PROVIDERS.rgpszProviders">
            <summary>
            <para>An array of null-terminated Unicode strings that contains the names of the registered providers.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.BCrypt.BlobType">
            <summary>Blob type string references.</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.BlobType.BCRYPT_AES_WRAP_KEY_BLOB">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.BlobType.BCRYPT_DH_PRIVATE_BLOB">
            <summary>
            The BLOB is a Diffie-Hellman public/private key pair BLOB. The pbInput buffer must contain a BCRYPT_DH_KEY_BLOB structure
            immediately followed by the key data.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.BlobType.BCRYPT_DH_PUBLIC_BLOB">
            <summary>
            The BLOB is a Diffie-Hellman public key BLOB. The pbInput buffer must contain a BCRYPT_DH_KEY_BLOB structure immediately
            followed by the key data.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.BlobType.BCRYPT_DSA_PRIVATE_BLOB">
            <summary>
            The BLOB is a DSA public/private key pair BLOB. The pbInput buffer must contain a BCRYPT_DSA_KEY_BLOB or
            BCRYPT_DSA_KEY_BLOB_V2 structure immediately followed by the key data. BCRYPT_DSA_KEY_BLOB is used for key lengths from 512
            to 1024 bits. BCRYPT_DSA_KEY_BLOB_V2 is used for key lengths that exceed 1024 bits but are less than or equal to 3072 bits.
            <para>Windows 8: Support for BCRYPT_DSA_KEY_BLOB_V2 begins.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.BlobType.BCRYPT_DSA_PUBLIC_BLOB">
            <summary>
            The BLOB is a DSA public key BLOB. The pbInput buffer must contain a BCRYPT_DSA_KEY_BLOB or BCRYPT_DSA_KEY_BLOB_V2 structure
            immediately followed by the key data. BCRYPT_DSA_KEY_BLOB is used for key lengths from 512 to 1024 bits.
            BCRYPT_DSA_KEY_BLOB_V2 is used for key lengths that exceed 1024 bits but are less than or equal to 3072 bits.
            <para>Windows 8: Support for BCRYPT_DSA_KEY_BLOB_V2 begins.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.BlobType.BCRYPT_ECCFULLPRIVATE_BLOB">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.BlobType.BCRYPT_ECCFULLPUBLIC_BLOB">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.BlobType.BCRYPT_ECCPRIVATE_BLOB">
            <summary>
            The BLOB is an elliptic curve cryptography (ECC) private key. The pbInput buffer must contain a BCRYPT_ECCKEY_BLOB structure
            immediately followed by the key data.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.BlobType.BCRYPT_ECCPUBLIC_BLOB">
            <summary>
            The BLOB is an ECC public key. The pbInput buffer must contain a BCRYPT_ECCKEY_BLOB structure immediately followed by the key data.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.BlobType.BCRYPT_KEY_DATA_BLOB">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.BlobType.BCRYPT_OPAQUE_KEY_BLOB">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.BlobType.BCRYPT_PRIVATE_KEY_BLOB">
            <summary>
            The BLOB is a generic private key of any type. The private key does not necessarily contain the public key. The type of key
            in this BLOB is determined by the Magic member of the BCRYPT_KEY_BLOB structure.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.BlobType.BCRYPT_PUBLIC_KEY_BLOB">
            <summary>
            The BLOB is a generic public key of any type. The type of key in this BLOB is determined by the Magic member of the
            BCRYPT_KEY_BLOB structure.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.BlobType.BCRYPT_RSAFULLPRIVATE_BLOB">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.BlobType.BCRYPT_RSAPRIVATE_BLOB">
            <summary>
            The BLOB is an RSA public/private key pair BLOB. The pbInput buffer must contain a BCRYPT_RSAKEY_BLOB structure immediately
            followed by the key data.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.BlobType.BCRYPT_RSAPUBLIC_BLOB">
            <summary>
            The BLOB is an RSA public key BLOB. The pbInput buffer must contain a BCRYPT_RSAKEY_BLOB structure immediately followed by
            the key data.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.BlobType.LEGACY_DH_PRIVATE_BLOB">
            <summary>
            The BLOB is a legacy Diffie-Hellman Version 3 Private Key BLOB that contains a Diffie-Hellman public/private key pair that
            was exported by using CryptoAPI.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.BlobType.LEGACY_DH_PUBLIC_BLOB">
            <summary>
            The BLOB is a Diffie-Hellman public key BLOB that was exported by using CryptoAPI. The Microsoft primitive provider does not
            support importing this BLOB type.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.BlobType.LEGACY_DSA_PRIVATE_BLOB">
            <summary>The BLOB is a DSA public/private key pair BLOB that was exported by using CryptoAPI.</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.BlobType.LEGACY_DSA_PUBLIC_BLOB">
            <summary>
            The BLOB is a DSA public key BLOB that was exported by using CryptoAPI. The Microsoft primitive provider does not support
            importing this BLOB type.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.BlobType.LEGACY_DSA_V2_PRIVATE_BLOB">
            <summary>The BLOB is a DSA version 2 private key in a form that can be imported by using CryptoAPI.</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.BlobType.LEGACY_DSA_V2_PUBLIC_BLOB">
            <summary>The BLOB is a DSA version 2 public key in a form that can be imported by using CryptoAPI.</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.BlobType.LEGACY_RSAPRIVATE_BLOB">
            <summary>The BLOB is an RSA public/private key pair BLOB that was exported by using CryptoAPI.</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.BlobType.LEGACY_RSAPUBLIC_BLOB">
            <summary>
            The BLOB is an RSA public key BLOB that was exported by using CryptoAPI. The Microsoft primitive provider does not support
            importing this BLOB type.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.BlobType.SSL_ECCPUBLIC_BLOB">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.BCrypt.ChainingMode">
            <summary>Chain mode string references.</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.ChainingMode.BCRYPT_CHAIN_MODE_CBC">
            <summary>Undocumented</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.ChainingMode.BCRYPT_CHAIN_MODE_CCM">
            <summary>Undocumented</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.ChainingMode.BCRYPT_CHAIN_MODE_CFB">
            <summary>Undocumented</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.ChainingMode.BCRYPT_CHAIN_MODE_ECB">
            <summary>Undocumented</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.ChainingMode.BCRYPT_CHAIN_MODE_GCM">
            <summary>Undocumented</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.ChainingMode.BCRYPT_CHAIN_MODE_NA">
            <summary>Undocumented</summary>
        </member>
        <member name="T:Vanara.PInvoke.BCrypt.KDF">
            <summary>Known key derivation function identifiers.</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.KDF.BCRYPT_KDF_HASH">
            <summary>The hash key derivation function.</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.KDF.BCRYPT_KDF_HKDF">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.KDF.BCRYPT_KDF_HMAC">
            <summary>The Hash-Based Message Authentication Code (HMAC) key derivation function.</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.KDF.BCRYPT_KDF_RAW_SECRET">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.KDF.BCRYPT_KDF_SP80056A_CONCAT">
            <summary>The SP800-56A key derivation function.</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.KDF.BCRYPT_KDF_TLS_PRF">
            <summary>
            The transport layer security (TLS) pseudo-random function (PRF) key derivation function. The size of the derived key is
            always 48 bytes.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.BCrypt.KnownProvider">
            <summary>Well-known CNG providers.</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.KnownProvider.MS_PLATFORM_CRYPTO_PROVIDER">
            <summary>
            Generates and stores keys in Trusted Platform Modules. Supports Key Attestation to allow CA to ensure key is created in
            TPM/Virtual smart card
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.KnownProvider.MS_PRIMITIVE_PROVIDER">
            <summary>Identifies the basic Microsoft CNG provider.</summary>
        </member>
        <member name="T:Vanara.PInvoke.BCrypt.PropertyName">
            <summary>The following values are used with the BCryptGetProperty and BCryptSetProperty functions to identify a property.</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.PropertyName.BCRYPT_ALGORITHM_NAME">
            <summary>A null-terminated Unicode string that contains the name of the algorithm.</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.PropertyName.BCRYPT_AUTH_TAG_LENGTH">
            <summary>
            The authentication tag lengths that are supported by the algorithm. This property is a BCRYPT_AUTH_TAG_LENGTHS_STRUCT
            structure. This property only applies to algorithms.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.PropertyName.BCRYPT_BLOCK_LENGTH">
            <summary>
            The size, in bytes, of a cipher block for the algorithm. This property only applies to block cipher algorithms. This data
            type is a DWORD.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.PropertyName.BCRYPT_BLOCK_SIZE_LIST">
            <summary>
            A list of the block lengths supported by an encryption algorithm. This data type is an array of DWORDs. The number of
            elements in the array can be determined by dividing the number of bytes retrieved by the size of a single DWORD.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.PropertyName.BCRYPT_CHAINING_MODE">
            <summary>
            A pointer to a null-terminated Unicode string that represents the chaining mode of the encryption algorithm. This property
            can be set on an algorithm handle or a key handle to one of the following values.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.PropertyName.BCRYPT_DH_PARAMETERS">
            <summary>
            Specifies parameters to use with a Diffie-Hellman key.This data type is a pointer to a BCRYPT_DH_PARAMETER_HEADER structure.
            This property can only be set and must be set for the key before the key is completed.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.PropertyName.BCRYPT_DSA_PARAMETERS">
            <summary>
            Specifies parameters to use with a DSA key. This property is a BCRYPT_DSA_PARAMETER_HEADER or a
            BCRYPT_DSA_PARAMETER_HEADER_V2 structure. This property can only be set and must be set for the key before the key is completed.
            <para>
            Windows 8: Beginning with Windows 8, this property can be a BCRYPT_DSA_PARAMETER_HEADER_V2 structure.Use this structure if
            the key size exceeds 1024 bits and is less than or equal to 3072 bits.If the key size is greater than or equal to 512 but
            less than or equal to 1024 bits, use the BCRYPT_DSA_PARAMETER_HEADER structure.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.PropertyName.BCRYPT_ECC_CURVE_NAME">
            <summary>Undocumented</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.PropertyName.BCRYPT_ECC_CURVE_NAME_LIST">
            <summary>Undocumented</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.PropertyName.BCRYPT_ECC_PARAMETERS">
            <summary>Undocumented</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.PropertyName.BCRYPT_EFFECTIVE_KEY_LENGTH">
            <summary>The size, in bits, of the effective length of an RC2 key. This data type is a DWORD.</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.PropertyName.BCRYPT_GLOBAL_PARAMETERS">
            <summary>Undocumented</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.PropertyName.BCRYPT_HASH_BLOCK_LENGTH">
            <summary>
            The size, in bytes, of the block for a hash. This property only applies to hash algorithms. This data type is a DWORD.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.PropertyName.BCRYPT_HASH_LENGTH">
            <summary>The size, in bytes, of the hash value of a hash provider. This data type is a DWORD.</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.PropertyName.BCRYPT_HASH_OID_LIST">
            <summary>
            The list of DER-encoded hashing object identifiers (OIDs). This property is a BCRYPT_OID_LIST structure. This property can
            only be read.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.PropertyName.BCRYPT_INITIALIZATION_VECTOR">
            <summary>Contains the initialization vector (IV) for a key. This property only applies to keys.</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.PropertyName.BCRYPT_IS_IFX_TPM_WEAK_KEY">
            <summary>Undocumented</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.PropertyName.BCRYPT_IS_KEYED_HASH">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.PropertyName.BCRYPT_IS_REUSABLE_HASH">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.PropertyName.BCRYPT_KEY_LENGTH">
            <summary>The size, in bits, of the key value of a symmetric key provider. This data type is a DWORD.</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.PropertyName.BCRYPT_KEY_LENGTHS">
            <summary>
            The key lengths that are supported by the algorithm. This property is a BCRYPT_KEY_LENGTHS_STRUCT structure. This property
            only applies to algorithms.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.PropertyName.BCRYPT_KEY_OBJECT_LENGTH">
            <summary>This property is not used. The BCRYPT_OBJECT_LENGTH property is used to obtain this information.</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.PropertyName.BCRYPT_KEY_STRENGTH">
            <summary>The number of bits in the key. This data type is a DWORD. This property only applies to keys.</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.PropertyName.BCRYPT_MESSAGE_BLOCK_LENGTH">
            <summary>
            This can be set on any key handle that has the CFB chaining mode set. By default, this property is set to 1 for 8-bit CFB.
            Setting it to the block size in bytes causes full-block CFB to be used.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.PropertyName.BCRYPT_MULTI_OBJECT_LENGTH">
            <summary>
            This property returns a BCRYPT_MULTI_OBJECT_LENGTH_STRUCT, which contains information necessary to calculate the size of an
            object buffer.This property is only supported on operating system versions that support the BCryptCreateMultiHash function.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.PropertyName.BCRYPT_OBJECT_LENGTH">
            <summary>
            The size, in bytes, of the subobject of a provider. This data type is a DWORD. Currently, the hash and symmetric cipher
            algorithm providers use caller-allocated buffers to store their subobjects. For example, the hash provider requires you to
            allocate memory for the hash object obtained with the BCryptCreateHash function. This property provides the buffer size for a
            provider's object so you can allocate memory for the object created by the provider.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.PropertyName.BCRYPT_PADDING_SCHEMES">
            <summary>Represents the padding scheme of the RSA algorithm provider. This data type is a DWORD.</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.PropertyName.BCRYPT_PCP_PLATFORM_TYPE_PROPERTY">
            <summary>Undocumented</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.PropertyName.BCRYPT_PCP_PROVIDER_VERSION_PROPERTY">
            <summary>Undocumented</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.PropertyName.BCRYPT_PRIMITIVE_TYPE">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.PropertyName.BCRYPT_PRIVATE_KEY">
            <summary>Undocumented</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.PropertyName.BCRYPT_PROVIDER_HANDLE">
            <summary>
            The handle of the CNG provider that created the object passed in the hObject parameter. This data type is a
            BCRYPT_ALG_HANDLE. This property can only be retrieved; it cannot be set.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.PropertyName.BCRYPT_PUBLIC_KEY_LENGTH">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.PropertyName.BCRYPT_SIGNATURE_LENGTH">
            <summary>
            The size, in bytes, of the length of a signature for a key. This data type is a DWORD. This property only applies to keys.
            This property can only be retrieved; it cannot be set.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.BCrypt.StandardAlgorithmId">
            <summary>
            The following identifiers are used to identify standard encryption algorithms in various CNG functions and structures, such as
            the CRYPT_INTERFACE_REG structure. Third party providers may have additional algorithms that they support.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.StandardAlgorithmId.BCRYPT_3DES_112_ALGORITHM">
            <summary>The 112-bit triple data encryption standard symmetric encryption algorithm. Standard: SP800-67, SP800-38A</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.StandardAlgorithmId.BCRYPT_3DES_ALGORITHM">
            <summary>The triple data encryption standard symmetric encryption algorithm. Standard: SP800-67, SP800-38A</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.StandardAlgorithmId.BCRYPT_AES_ALGORITHM">
            <summary>The advanced encryption standard symmetric encryption algorithm. Standard: FIPS 197</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.StandardAlgorithmId.BCRYPT_AES_CMAC_ALGORITHM">
            <summary>
            The advanced encryption standard (AES) cipher based message authentication code (CMAC) symmetric encryption algorithm.
            Standard: SP 800-38B
            <para>Windows 8: Support for this algorithm begins.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.StandardAlgorithmId.BCRYPT_AES_GMAC_ALGORITHM">
            <summary>
            The advanced encryption standard (AES) Galois message authentication code (GMAC) symmetric encryption algorithm. Standard: SP800-38D
            <para>Windows Vista: This algorithm is supported beginning with Windows Vista with SP1.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.StandardAlgorithmId.BCRYPT_CAPI_KDF_ALGORITHM">
            <summary>
            Crypto API (CAPI) key derivation function algorithm. Used by the BCryptKeyDerivation and NCryptKeyDerivation functions.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.StandardAlgorithmId.BCRYPT_DES_ALGORITHM">
            <summary>The data encryption standard symmetric encryption algorithm. Standard: FIPS 46-3, FIPS 81</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.StandardAlgorithmId.BCRYPT_DESX_ALGORITHM">
            <summary>The extended data encryption standard symmetric encryption algorithm. Standard: None</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.StandardAlgorithmId.BCRYPT_DH_ALGORITHM">
            <summary>The Diffie-Hellman key exchange algorithm. Standard: PKCS #3</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.StandardAlgorithmId.BCRYPT_DSA_ALGORITHM">
            <summary>
            The digital signature algorithm. Standard: FIPS 186-2
            <para>
            Windows 8: Beginning with Windows 8, this algorithm supports FIPS 186-3. Keys less than or equal to 1024 bits adhere to FIPS
            186-2 and keys greater than 1024 to FIPS 186-3.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.StandardAlgorithmId.BCRYPT_ECDH_ALGORITHM">
            <summary>
            Generic prime elliptic curve Diffie-Hellman key exchange algorithm (see Remarks for more information). Standard: SP800-56A.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.StandardAlgorithmId.BCRYPT_ECDH_P256_ALGORITHM">
            <summary>The 256-bit prime elliptic curve Diffie-Hellman key exchange algorithm. Standard: SP800-56A</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.StandardAlgorithmId.BCRYPT_ECDH_P384_ALGORITHM">
            <summary>The 384-bit prime elliptic curve Diffie-Hellman key exchange algorithm. Standard: SP800-56A</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.StandardAlgorithmId.BCRYPT_ECDH_P521_ALGORITHM">
            <summary>The 521-bit prime elliptic curve Diffie-Hellman key exchange algorithm. Standard: SP800-56A</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.StandardAlgorithmId.BCRYPT_ECDSA_ALGORITHM">
            <summary>
            Generic prime elliptic curve digital signature algorithm (see Remarks for more information). Standard: ANSI X9.62.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.StandardAlgorithmId.BCRYPT_ECDSA_P256_ALGORITHM">
            <summary>The 256-bit prime elliptic curve digital signature algorithm (FIPS 186-2). Standard: FIPS 186-2, X9.62</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.StandardAlgorithmId.BCRYPT_ECDSA_P384_ALGORITHM">
            <summary>The 384-bit prime elliptic curve digital signature algorithm (FIPS 186-2). Standard: FIPS 186-2, X9.62</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.StandardAlgorithmId.BCRYPT_ECDSA_P521_ALGORITHM">
            <summary>The 521-bit prime elliptic curve digital signature algorithm (FIPS 186-2). Standard: FIPS 186-2, X9.62</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.StandardAlgorithmId.BCRYPT_HKDF_ALGORITHM">
            <summary>The bcrypt HKDF algorithm</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.StandardAlgorithmId.BCRYPT_MD2_ALGORITHM">
            <summary>The MD2 hash algorithm. Standard: RFC 1319</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.StandardAlgorithmId.BCRYPT_MD4_ALGORITHM">
            <summary>The MD4 hash algorithm. Standard: RFC 1320</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.StandardAlgorithmId.BCRYPT_MD5_ALGORITHM">
            <summary>The MD5 hash algorithm. Standard: RFC 1321</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.StandardAlgorithmId.BCRYPT_PBKDF2_ALGORITHM">
            <summary>
            Password-based key derivation function 2 (PBKDF2) algorithm. Used by the BCryptKeyDerivation and NCryptKeyDerivation functions.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.StandardAlgorithmId.BCRYPT_RC2_ALGORITHM">
            <summary>The RC2 block symmetric encryption algorithm. Standard: RFC 2268</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.StandardAlgorithmId.BCRYPT_RC4_ALGORITHM">
            <summary>The RC4 symmetric encryption algorithm. Standard: Various</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.StandardAlgorithmId.BCRYPT_RNG_ALGORITHM">
            <summary>
            The random-number generator algorithm. Standard: FIPS 186-2, FIPS 140-2, NIST SP 800-90 <note type="note">Beginning with
            Windows Vista with SP1 and Windows Server 2008, the random number generator is based on the AES counter mode specified in the
            NIST SP 800-90 standard.
            <para>
            Windows Vista: The random number generator is based on the hash-based random number generator specified in the FIPS 186-2 standard.
            </para>
            <para>
            Windows 8: Beginning with Windows 8, the RNG algorithm supports FIPS 186-3. Keys less than or equal to 1024 bits adhere to
            FIPS 186-2 and keys greater than 1024 to FIPS 186-3.
            </para>
            </note>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.StandardAlgorithmId.BCRYPT_RNG_DUAL_EC_ALGORITHM">
            <summary>
            The dual elliptic curve random-number generator algorithm. Standard: SP800-90.
            <para>
            Windows 8: Beginning with Windows 8, the EC RNG algorithm supports FIPS 186-3. Keys less than or equal to 1024 bits adhere to
            FIPS 186-2 and keys greater than 1024 to FIPS 186-3.
            </para>
            <para>
            Windows 10: Beginning with Windows 10, the dual elliptic curve random number generator algorithm has been removed.Existing
            uses of this algorithm will continue to work; however, the random number generator is based on the AES counter mode specified
            in the NIST SP 800-90 standard.New code should use BCRYPT_RNG_ALGORITHM, and it is recommended that existing code be changed
            to use BCRYPT_RNG_ALGORITHM.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.StandardAlgorithmId.BCRYPT_RNG_FIPS186_DSA_ALGORITHM">
            <summary>
            The random-number generator algorithm suitable for DSA (Digital Signature Algorithm). Standard: FIPS 186-2.
            <para>Windows 8: Support for FIPS 186-3 begins.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.StandardAlgorithmId.BCRYPT_RSA_ALGORITHM">
            <summary>The RSA public key algorithm. Standard: PKCS #1 v1.5 and v2.0.</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.StandardAlgorithmId.BCRYPT_RSA_SIGN_ALGORITHM">
            <summary>
            The RSA signature algorithm. This algorithm is not currently supported. You can use the BCRYPT_RSA_ALGORITHM algorithm to
            perform RSA signing operations. Standard: PKCS #1 v1.5 and v2.0.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.StandardAlgorithmId.BCRYPT_SHA1_ALGORITHM">
            <summary>The 160-bit secure hash algorithm. Standard: FIPS 180-2, FIPS 198.</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.StandardAlgorithmId.BCRYPT_SHA256_ALGORITHM">
            <summary>The 256-bit secure hash algorithm. Standard: FIPS 180-2, FIPS 198.</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.StandardAlgorithmId.BCRYPT_SHA384_ALGORITHM">
            <summary>The 384-bit secure hash algorithm. Standard: FIPS 180-2, FIPS 198.</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.StandardAlgorithmId.BCRYPT_SHA512_ALGORITHM">
            <summary>The 512-bit secure hash algorithm. Standard: FIPS 180-2, FIPS 198.</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.StandardAlgorithmId.BCRYPT_SP800108_CTR_HMAC_ALGORITHM">
            <summary>
            Counter mode, hash-based message authentication code (HMAC) key derivation function algorithm. Used by the
            BCryptKeyDerivation and NCryptKeyDerivation functions.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.StandardAlgorithmId.BCRYPT_SP80056A_CONCAT_ALGORITHM">
            <summary>SP800-56A key derivation function algorithm. Used by the BCryptKeyDerivation and NCryptKeyDerivation functions.</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.StandardAlgorithmId.BCRYPT_TLS1_1_KDF_ALGORITHM">
            <summary>The bcrypt tl s1 1 KDF algorithm</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.StandardAlgorithmId.BCRYPT_TLS1_2_KDF_ALGORITHM">
            <summary>The bcrypt tl s1 2 KDF algorithm</summary>
        </member>
        <member name="F:Vanara.PInvoke.BCrypt.StandardAlgorithmId.BCRYPT_XTS_AES_ALGORITHM">
            <summary>
            The advanced encryption standard symmetric encryption algorithm in XTS mode. Standard: SP-800-38E, IEEE Std 1619-2007.
            <para>Windows 10: Support for this algorithm begins.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.BCrypt.SafeBCRYPT_ALG_HANDLE">
            <summary>Provides a <see cref="T:System.Runtime.InteropServices.SafeHandle"/> for <see cref="T:Vanara.PInvoke.BCrypt.BCRYPT_ALG_HANDLE"/> that is disposed using <see cref="M:Vanara.PInvoke.BCrypt.BCryptCloseAlgorithmProvider(Vanara.PInvoke.BCrypt.BCRYPT_ALG_HANDLE,System.UInt32)"/>.</summary>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.SafeBCRYPT_ALG_HANDLE.#ctor(System.IntPtr,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.BCrypt.SafeBCRYPT_ALG_HANDLE"/> class and assigns an existing handle.</summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
            <param name="ownsHandle">
            <see langword="true"/> to reliably release the handle during the finalization phase; otherwise, <see langword="false"/> (not recommended).
            </param>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.SafeBCRYPT_ALG_HANDLE.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.BCrypt.SafeBCRYPT_ALG_HANDLE"/> class.</summary>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.SafeBCRYPT_ALG_HANDLE.op_Implicit(Vanara.PInvoke.BCrypt.SafeBCRYPT_ALG_HANDLE)~Vanara.PInvoke.BCrypt.BCRYPT_ALG_HANDLE">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.BCrypt.SafeBCRYPT_ALG_HANDLE"/> to <see cref="T:Vanara.PInvoke.BCrypt.BCRYPT_ALG_HANDLE"/>.</summary>
            <param name="h">The safe handle instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.SafeBCRYPT_ALG_HANDLE.op_Implicit(Vanara.PInvoke.BCrypt.SafeBCRYPT_ALG_HANDLE)~Vanara.PInvoke.BCrypt.BCRYPT_HANDLE">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.BCrypt.SafeBCRYPT_ALG_HANDLE"/> to <see cref="T:Vanara.PInvoke.BCrypt.BCRYPT_HANDLE"/>.</summary>
            <param name="h">The safe handle instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.SafeBCRYPT_ALG_HANDLE.InternalReleaseHandle">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.BCrypt.SafeBCRYPT_HASH_HANDLE">
            <summary>Provides a <see cref="T:System.Runtime.InteropServices.SafeHandle"/> for <see cref="T:Vanara.PInvoke.BCrypt.BCRYPT_HASH_HANDLE"/> that is disposed using <see cref="M:Vanara.PInvoke.BCrypt.BCryptDestroyHash(Vanara.PInvoke.BCrypt.BCRYPT_HASH_HANDLE)"/>.</summary>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.SafeBCRYPT_HASH_HANDLE.#ctor(System.IntPtr,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.BCrypt.SafeBCRYPT_HASH_HANDLE"/> class and assigns an existing handle.</summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
            <param name="ownsHandle">
            <see langword="true"/> to reliably release the handle during the finalization phase; otherwise, <see langword="false"/> (not recommended).
            </param>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.SafeBCRYPT_HASH_HANDLE.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.BCrypt.SafeBCRYPT_HASH_HANDLE"/> class.</summary>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.SafeBCRYPT_HASH_HANDLE.op_Implicit(Vanara.PInvoke.BCrypt.SafeBCRYPT_HASH_HANDLE)~Vanara.PInvoke.BCrypt.BCRYPT_HASH_HANDLE">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.BCrypt.SafeBCRYPT_HASH_HANDLE"/> to <see cref="T:Vanara.PInvoke.BCrypt.BCRYPT_HASH_HANDLE"/>.</summary>
            <param name="h">The safe handle instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.SafeBCRYPT_HASH_HANDLE.InternalReleaseHandle">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.BCrypt.SafeBCRYPT_KEY_HANDLE">
            <summary>Provides a <see cref="T:System.Runtime.InteropServices.SafeHandle"/> for <see cref="T:Vanara.PInvoke.BCrypt.BCRYPT_KEY_HANDLE"/> that is disposed using <see cref="M:Vanara.PInvoke.BCrypt.BCryptDestroyKey(Vanara.PInvoke.BCrypt.BCRYPT_KEY_HANDLE)"/>.</summary>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.SafeBCRYPT_KEY_HANDLE.#ctor(System.IntPtr,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.BCrypt.SafeBCRYPT_KEY_HANDLE"/> class and assigns an existing handle.</summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
            <param name="ownsHandle">
            <see langword="true"/> to reliably release the handle during the finalization phase; otherwise, <see langword="false"/> (not recommended).
            </param>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.SafeBCRYPT_KEY_HANDLE.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.BCrypt.SafeBCRYPT_KEY_HANDLE"/> class.</summary>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.SafeBCRYPT_KEY_HANDLE.op_Implicit(Vanara.PInvoke.BCrypt.SafeBCRYPT_KEY_HANDLE)~Vanara.PInvoke.BCrypt.BCRYPT_KEY_HANDLE">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.BCrypt.SafeBCRYPT_KEY_HANDLE"/> to <see cref="T:Vanara.PInvoke.BCrypt.BCRYPT_KEY_HANDLE"/>.</summary>
            <param name="h">The safe handle instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.SafeBCRYPT_KEY_HANDLE.InternalReleaseHandle">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.BCrypt.SafeBCRYPT_SECRET_HANDLE">
            <summary>Provides a <see cref="T:System.Runtime.InteropServices.SafeHandle"/> for <see cref="T:Vanara.PInvoke.BCrypt.BCRYPT_SECRET_HANDLE"/> that is disposed using <see cref="M:Vanara.PInvoke.BCrypt.BCryptDestroySecret(Vanara.PInvoke.BCrypt.BCRYPT_SECRET_HANDLE)"/>.</summary>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.SafeBCRYPT_SECRET_HANDLE.#ctor(System.IntPtr,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.BCrypt.SafeBCRYPT_SECRET_HANDLE"/> class and assigns an existing handle.</summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
            <param name="ownsHandle">
            <see langword="true"/> to reliably release the handle during the finalization phase; otherwise, <see langword="false"/> (not recommended).
            </param>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.SafeBCRYPT_SECRET_HANDLE.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.BCrypt.SafeBCRYPT_SECRET_HANDLE"/> class.</summary>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.SafeBCRYPT_SECRET_HANDLE.op_Implicit(Vanara.PInvoke.BCrypt.SafeBCRYPT_SECRET_HANDLE)~Vanara.PInvoke.BCrypt.BCRYPT_SECRET_HANDLE">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.BCrypt.SafeBCRYPT_SECRET_HANDLE"/> to <see cref="T:Vanara.PInvoke.BCrypt.BCRYPT_SECRET_HANDLE"/>.</summary>
            <param name="h">The safe handle instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.SafeBCRYPT_SECRET_HANDLE.InternalReleaseHandle">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.BCrypt.SafeBCryptBuffer">
            <summary>Provides a <see cref="T:System.Runtime.InteropServices.SafeHandle"/> for <see cref="T:Vanara.PInvoke.NCrypt.NCryptBuffer"/> that is disposed using <see cref="M:Vanara.PInvoke.BCrypt.BCryptFreeBuffer(System.IntPtr)"/>.</summary>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.SafeBCryptBuffer.#ctor(System.IntPtr,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.BCrypt.SafeBCryptBuffer"/> class and assigns an existing handle.</summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
            <param name="ownsHandle">
            <see langword="true"/> to reliably release the handle during the finalization phase; otherwise, <see langword="false"/> (not recommended).
            </param>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.SafeBCryptBuffer.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.BCrypt.SafeBCryptBuffer"/> class.</summary>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.SafeBCryptBuffer.ToStructure``1">
            <summary>Marshals data to a newly allocated managed object of the type specified by a generic type parameter.</summary>
            <typeparam name="T">The type of the object to which the data is to be copied. This must be a structure.</typeparam>
            <returns>A managed object that this buffer points to.</returns>
        </member>
        <member name="M:Vanara.PInvoke.BCrypt.SafeBCryptBuffer.InternalReleaseHandle">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32">
            <summary>Methods and data types found in Crypt32.dll.</summary>
            <summary>Methods and data types found in Crypt32.dll.</summary>
            <summary>Methods and data types found in Crypt32.dll.</summary>
            <summary>Methods and data types found in Crypt32.dll.</summary>
            <summary>Methods and data types found in Crypt32.dll.</summary>
            <summary>Methods and data types found in Crypt32.dll.</summary>
            <summary>Methods and data types found in Crypt32.dll.</summary>
            <summary>Methods and data types found in Crypt32.dll.</summary>
            <summary>Methods and data types found in Crypt32.dll.</summary>
            <summary>Methods and data types found in Crypt32.dll.</summary>
            <summary>Methods and data types found in Crypt32.dll.</summary>
            <summary>Methods and data types found in Crypt32.dll.</summary>
            <summary>Methods and data types found in Crypt32.dll.</summary>
            <summary>Methods and data types found in Crypt32.dll.</summary>
            <summary>Methods and data types found in Crypt32.dll.</summary>
            <summary>Methods and data types found in Crypt32.dll.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CryptProtectFlags">
            <summary>Flags for CryptProtectData.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptProtectFlags.CRYPTPROTECT_UI_FORBIDDEN">
            <summary>
            This flag is used for remote situations where presenting a user interface (UI) is not an option. When this flag is set and a
            UI is specified for either the protect or unprotect operation, the operation fails and GetLastError returns the
            ERROR_PASSWORD_RESTRICTION code.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptProtectFlags.CRYPTPROTECT_LOCAL_MACHINE">
            <summary>
            When this flag is set, it associates the data encrypted with the current computer instead of with an individual user. Any
            user on the computer on which CryptProtectData is called can use CryptUnprotectData to decrypt the data.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptProtectFlags.CRYPTPROTECT_CRED_SYNC">
            <summary>
            Force credential synchronize during CryptProtectData(). Synchronize is the only operation that occurs during this operation.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptProtectFlags.CRYPTPROTECT_AUDIT">
            <summary>Generate an Audit on protect and unprotect operations.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptProtectFlags.CRYPTPROTECT_NO_RECOVERY">
            <summary>Protect data with a non-recoverable key.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptProtectFlags.CRYPTPROTECT_VERIFY_PROTECTION">
            <summary>Verify the protection of a protected blob.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptProtectFlags.CRYPTPROTECT_CRED_REGENERATE">
            <summary>Regenerate the local machine protection.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CryptProtectMemoryFlags">
            <summary>Flags for CryptProtectMemory and CryptUnprotectMemory</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptProtectMemoryFlags.CRYPTPROTECTMEMORY_SAME_PROCESS">
            <summary>
            Encrypt and decrypt memory in the same process. An application running in a different process will not be able to decrypt
            the data.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptProtectMemoryFlags.CRYPTPROTECTMEMORY_CROSS_PROCESS">
            <summary>
            Encrypt and decrypt memory in different processes. An application running in a different process will be able to decrypt the data.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptProtectMemoryFlags.CRYPTPROTECTMEMORY_SAME_LOGON">
            <summary>
            Use the same logon credentials to encrypt and decrypt memory in different processes. An application running in a different
            process will be able to decrypt the data. However, the process must run as the same user that encrypted the data and in the
            same logon session.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CryptProtectPrompt">
            <summary>Flags that indicate when prompts to the user are to be displayed.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptProtectPrompt.CRYPTPROTECT_PROMPT_ON_UNPROTECT">
            <summary>
            This flag can be combined with CRYPTPROTECT_PROMPT_ON_PROTECT to enforce the UI (user interface) policy of the caller. When
            CryptUnprotectData is called, the dwPromptFlags specified in the CryptProtectData call are enforced.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptProtectPrompt.CRYPTPROTECT_PROMPT_ON_PROTECT">
            <summary>This flag is used to provide the prompt for the protect phase.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptProtectPrompt.CRYPTPROTECT_PROMPT_RESERVED">
            <summary>Reserved.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptProtectPrompt.CRYPTPROTECT_PROMPT_STRONG">
            <summary>Default to strong variant UI protection (user supplied password currently).</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptProtectPrompt.CRYPTPROTECT_PROMPT_REQUIRE_STRONG">
            <summary>Require strong variant UI protection (user supplied password currently).</summary>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptProtectData(Vanara.PInvoke.Crypt32.CRYPTOAPI_BLOB@,System.String,Vanara.PInvoke.Crypt32.CRYPTOAPI_BLOB@,System.IntPtr,Vanara.PInvoke.Crypt32.CRYPTPROTECT_PROMPTSTRUCT@,Vanara.PInvoke.Crypt32.CryptProtectFlags,System.IntPtr)">
            <summary>
            The <c>CryptProtectData</c> function performs encryption on the data in a DATA_BLOB structure. Typically, only a user with the
            same logon credential as the user who encrypted the data can decrypt the data. In addition, the encryption and decryption
            usually must be done on the same computer. For information about exceptions, see Remarks.
            </summary>
            <param name="pDataIn">A pointer to a DATA_BLOB structure that contains the plaintext to be encrypted.</param>
            <param name="szDataDescr">
            A string with a readable description of the data to be encrypted. This description string is included with the encrypted data.
            This parameter is optional and can be set to <c>NULL</c>.
            </param>
            <param name="pOptionalEntropy">
            A pointer to a DATA_BLOB structure that contains a password or other additional entropy used to encrypt the data. The
            <c>DATA_BLOB</c> structure used in the encryption phase must also be used in the decryption phase. This parameter can be set to
            <c>NULL</c> for no additional entropy. For information about protecting passwords, see Handling Passwords.
            </param>
            <param name="pvReserved">Reserved for future use and must be set to <c>NULL</c>.</param>
            <param name="pPromptStruct">
            A pointer to a CRYPTPROTECT_PROMPTSTRUCT structure that provides information about where and when prompts are to be displayed
            and what the content of those prompts should be. This parameter can be set to <c>NULL</c> in both the encryption and decryption phases.
            </param>
            <param name="dwFlags">
            <para>This parameter can be one of the following flags.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPTPROTECT_LOCAL_MACHINE</term>
            <term>
            When this flag is set, it associates the data encrypted with the current computer instead of with an individual user. Any user
            on the computer on which CryptProtectData is called can use CryptUnprotectData to decrypt the data.
            </term>
            </item>
            <item>
            <term>CRYPTPROTECT_UI_FORBIDDEN</term>
            <term>
            This flag is used for remote situations where presenting a user interface (UI) is not an option. When this flag is set and a UI
            is specified for either the protect or unprotect operation, the operation fails and GetLastError returns the
            ERROR_PASSWORD_RESTRICTION code.
            </term>
            </item>
            <item>
            <term>CRYPTPROTECT_AUDIT</term>
            <term>This flag generates an audit on protect and unprotect operations.</term>
            </item>
            </list>
            </param>
            <param name="pDataOut">
            A pointer to a DATA_BLOB structure that receives the encrypted data. When you have finished using the <c>DATA_BLOB</c>
            structure, free its <c>pbData</c> member by calling the LocalFree function.
            </param>
            <returns>
            <para>If the function succeeds, the function returns <c>TRUE</c>.</para>
            <para>If the function fails, it returns <c>FALSE</c>. For extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            Typically, only a user with logon credentials that match those of the user who encrypted the data can decrypt the data. In
            addition, decryption usually can only be done on the computer where the data was encrypted. However, a user with a roaming
            profile can decrypt the data from another computer on the network.
            </para>
            <para>
            If the CRYPTPROTECT_LOCAL_MACHINE flag is set when the data is encrypted, any user on the computer where the encryption was done
            can decrypt the data.
            </para>
            <para>
            The function creates a session key to perform the encryption. The session key is derived again when the data is to be decrypted.
            </para>
            <para>
            The function also adds a Message Authentication Code (MAC) (keyed integrity check) to the encrypted data to guard against data tampering.
            </para>
            <para>To encrypt memory for temporary use in the same process or across processes, call the CryptProtectMemory function.</para>
            <para>Examples</para>
            <para>
            The following example shows encryption of the data in a DATA_BLOB structure. The <c>CryptProtectData</c> function does the
            encryption by using a session key that the function creates by using the user's logon credentials. For another example that uses
            this function, see Example C Program: Using CryptProtectData.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptProtectData(Vanara.PInvoke.Crypt32.CRYPTOAPI_BLOB@,System.String,System.IntPtr,System.IntPtr,System.IntPtr,Vanara.PInvoke.Crypt32.CryptProtectFlags,System.IntPtr)">
            <summary>
            The <c>CryptProtectData</c> function performs encryption on the data in a DATA_BLOB structure. Typically, only a user with the
            same logon credential as the user who encrypted the data can decrypt the data. In addition, the encryption and decryption
            usually must be done on the same computer. For information about exceptions, see Remarks.
            </summary>
            <param name="pDataIn">A pointer to a DATA_BLOB structure that contains the plaintext to be encrypted.</param>
            <param name="szDataDescr">
            A string with a readable description of the data to be encrypted. This description string is included with the encrypted data.
            This parameter is optional and can be set to <c>NULL</c>.
            </param>
            <param name="pOptionalEntropy">
            A pointer to a DATA_BLOB structure that contains a password or other additional entropy used to encrypt the data. The
            <c>DATA_BLOB</c> structure used in the encryption phase must also be used in the decryption phase. This parameter can be set to
            <c>NULL</c> for no additional entropy. For information about protecting passwords, see Handling Passwords.
            </param>
            <param name="pvReserved">Reserved for future use and must be set to <c>NULL</c>.</param>
            <param name="pPromptStruct">
            A pointer to a CRYPTPROTECT_PROMPTSTRUCT structure that provides information about where and when prompts are to be displayed
            and what the content of those prompts should be. This parameter can be set to <c>NULL</c> in both the encryption and decryption phases.
            </param>
            <param name="dwFlags">
            <para>This parameter can be one of the following flags.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPTPROTECT_LOCAL_MACHINE</term>
            <term>
            When this flag is set, it associates the data encrypted with the current computer instead of with an individual user. Any user
            on the computer on which CryptProtectData is called can use CryptUnprotectData to decrypt the data.
            </term>
            </item>
            <item>
            <term>CRYPTPROTECT_UI_FORBIDDEN</term>
            <term>
            This flag is used for remote situations where presenting a user interface (UI) is not an option. When this flag is set and a UI
            is specified for either the protect or unprotect operation, the operation fails and GetLastError returns the
            ERROR_PASSWORD_RESTRICTION code.
            </term>
            </item>
            <item>
            <term>CRYPTPROTECT_AUDIT</term>
            <term>This flag generates an audit on protect and unprotect operations.</term>
            </item>
            </list>
            </param>
            <param name="pDataOut">
            A pointer to a DATA_BLOB structure that receives the encrypted data. When you have finished using the <c>DATA_BLOB</c>
            structure, free its <c>pbData</c> member by calling the LocalFree function.
            </param>
            <returns>
            <para>If the function succeeds, the function returns <c>TRUE</c>.</para>
            <para>If the function fails, it returns <c>FALSE</c>. For extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            Typically, only a user with logon credentials that match those of the user who encrypted the data can decrypt the data. In
            addition, decryption usually can only be done on the computer where the data was encrypted. However, a user with a roaming
            profile can decrypt the data from another computer on the network.
            </para>
            <para>
            If the CRYPTPROTECT_LOCAL_MACHINE flag is set when the data is encrypted, any user on the computer where the encryption was done
            can decrypt the data.
            </para>
            <para>
            The function creates a session key to perform the encryption. The session key is derived again when the data is to be decrypted.
            </para>
            <para>
            The function also adds a Message Authentication Code (MAC) (keyed integrity check) to the encrypted data to guard against data tampering.
            </para>
            <para>To encrypt memory for temporary use in the same process or across processes, call the CryptProtectMemory function.</para>
            <para>Examples</para>
            <para>
            The following example shows encryption of the data in a DATA_BLOB structure. The <c>CryptProtectData</c> function does the
            encryption by using a session key that the function creates by using the user's logon credentials. For another example that uses
            this function, see Example C Program: Using CryptProtectData.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptProtectMemory(System.IntPtr,System.UInt32,Vanara.PInvoke.Crypt32.CryptProtectMemoryFlags)">
            <summary>
            The <c>CryptProtectMemory</c> function encrypts memory to prevent others from viewing sensitive information in your process. For
            example, use the <c>CryptProtectMemory</c> function to encrypt memory that contains a password. Encrypting the password prevents
            others from viewing it when the process is paged out to the swap file. Otherwise, the password is in plaintext and viewable by others.
            </summary>
            <param name="pDataIn">
            A pointer to the block of memory to encrypt. The cbData parameter specifies the number of bytes that will be encrypted. If the
            data contained in the memory space is smaller than the number of bytes specified, data outside of the intended block will be
            encrypted. If it is larger than cbData bytes, then only the first cbData bytes will be encrypted.
            </param>
            <param name="cbDataIn">
            Number of bytes of memory pointed to by the pData parameter to encrypt. The number of bytes must be a multiple of the
            <c>CRYPTPROTECTMEMORY_BLOCK_SIZE</c> constant defined in Wincrypt.h.
            </param>
            <param name="dwFlags">
            <para>This parameter can be one of the following flags. You must specify the same flag when encrypting and decrypting the memory.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPTPROTECTMEMORY_SAME_PROCESS</term>
            <term>
            Encrypt and decrypt memory in the same process. An application running in a different process will not be able to decrypt the data.
            </term>
            </item>
            <item>
            <term>CRYPTPROTECTMEMORY_CROSS_PROCESS</term>
            <term>
            Encrypt and decrypt memory in different processes. An application running in a different process will be able to decrypt the data.
            </term>
            </item>
            <item>
            <term>CRYPTPROTECTMEMORY_SAME_LOGON</term>
            <term>
            Use the same logon credentials to encrypt and decrypt memory in different processes. An application running in a different
            process will be able to decrypt the data. However, the process must run as the same user that encrypted the data and in the same
            logon session.
            </term>
            </item>
            </list>
            </param>
            <returns>
            <para>If the function succeeds, the function returns <c>TRUE</c>.</para>
            <para>If the function fails, it returns <c>FALSE</c>. For extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            Using CryptProtectMemory and CryptUnprotectMemory for password encryption is not secure because the data exists as plaintext in
            memory before it is encrypted and at any time the caller decrypts it for use.
            </para>
            <para>
            Typically, you use the <c>CryptProtectMemory</c> function to encrypt sensitive information that you are going to decrypt while
            your process is running. Do not use this function to save data that you want to decrypt later; you will not be able to decrypt
            the data if the computer is restarted. To save encrypted data to a file to decrypt later, use the CryptProtectData function.
            </para>
            <para>
            Call the CryptUnprotectMemory function to decrypt memory encrypted with the <c>CryptProtectMemory</c> function. When you have
            finished using the sensitive information, clear it from memory by calling the SecureZeroMemory function.
            </para>
            <para>
            Use the CRYPTPROTECTMEMORY_CROSS_PROCESS or CRYPTPROTECTMEMORY_SAME_LOGON flag if you use RPC or LRPC to pass encrypted data to
            another process. The receiving process must specify the same flag to decrypt the data. Also, use these flags if you use shared memory.
            </para>
            <para>
            If the client uses the CRYPTPROTECTMEMORY_SAME_LOGON flag, the server must impersonate the client (RpcImpersonateClient) before
            decrypting the memory.
            </para>
            <para>Examples</para>
            <para>The following example calls the <c>CryptProtectMemory</c> function to encrypt data that is in memory.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptUnprotectData(Vanara.PInvoke.Crypt32.CRYPTOAPI_BLOB@,System.IntPtr@,Vanara.PInvoke.Crypt32.CRYPTOAPI_BLOB@,System.IntPtr,Vanara.PInvoke.Crypt32.CRYPTPROTECT_PROMPTSTRUCT@,Vanara.PInvoke.Crypt32.CryptProtectFlags,System.IntPtr)">
            <summary>
            The <c>CryptUnprotectData</c> function decrypts and does an integrity check of the data in a DATA_BLOB structure. Usually, the
            only user who can decrypt the data is a user with the same logon credentials as the user who encrypted the data. In addition,
            the encryption and decryption must be done on the same computer. For information about exceptions, see the Remarks section of CryptProtectData.
            </summary>
            <param name="pDataIn">
            A pointer to a DATA_BLOB structure that holds the encrypted data. The <c>DATA_BLOB</c> structure's <c>cbData</c> member holds
            the length of the <c>pbData</c> member's byte string that contains the text to be encrypted.
            </param>
            <param name="ppszDataDescr">
            A pointer to a string-readable description of the encrypted data included with the encrypted data. This parameter can be set to
            <c>NULL</c>. When you have finished using ppszDataDescr, free it by calling the LocalFree function.
            </param>
            <param name="pOptionalEntropy">
            A pointer to a DATA_BLOB structure that contains a password or other additional entropy used when the data was encrypted. This
            parameter can be set to <c>NULL</c>; however, if an optional entropy <c>DATA_BLOB</c> structure was used in the encryption
            phase, that same <c>DATA_BLOB</c> structure must be used for the decryption phase. For information about protecting passwords,
            see Handling Passwords.
            </param>
            <param name="pvReserved">This parameter is reserved for future use and must be set to <c>NULL</c>.</param>
            <param name="pPromptStruct">
            A pointer to a CRYPTPROTECT_PROMPTSTRUCT structure that provides information about where and when prompts are to be displayed
            and what the content of those prompts should be. This parameter can be set to <c>NULL</c>.
            </param>
            <param name="dwFlags">
            <para>
            A <c>DWORD</c> value that specifies options for this function. This parameter can be zero, in which case no option is set, or
            the following flag.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPTPROTECT_UI_FORBIDDEN</term>
            <term>
            This flag is used for remote situations where the user interface (UI) is not an option. When this flag is set and UI is
            specified for either the protect or unprotect operation, the operation fails and GetLastError returns the
            ERROR_PASSWORD_RESTRICTION code.
            </term>
            </item>
            <item>
            <term>CRYPTPROTECT_VERIFY_PROTECTION</term>
            <term>
            This flag verifies the protection of a protected BLOB. If the default protection level configured of the host is higher than the
            current protection level for the BLOB, the function returns CRYPT_I_NEW_PROTECTION_REQUIRED to advise the caller to again
            protect the plaintext contained in the BLOB.
            </term>
            </item>
            </list>
            </param>
            <param name="pDataOut">
            A pointer to a DATA_BLOB structure where the function stores the decrypted data. When you have finished using the
            <c>DATA_BLOB</c> structure, free its <c>pbData</c> member by calling the LocalFree function.
            </param>
            <returns>
            <para>If the function succeeds, the function returns <c>TRUE</c>.</para>
            <para>If the function fails, it returns <c>FALSE</c>.</para>
            </returns>
            <remarks>
            <para>
            The CryptProtectData function creates a session key when the data is encrypted. That key is derived again and used to decrypt
            the data BLOB.
            </para>
            <para>
            The Message Authentication Code (MAC) hash added to the encrypted data can be used to determine whether the encrypted data was
            altered in any way. Any tampering results in the return of the ERROR_INVALID_DATA code.
            </para>
            <para>
            When you have finished using the DATA_BLOB structure, free its <c>pbData</c> member by calling the LocalFree function. Any
            ppszDataDescr that is not <c>NULL</c> must also be freed by using <c>LocalFree</c>.
            </para>
            <para>When you have finished using sensitive information, clear it from memory by calling the SecureZeroMemory function.</para>
            <para>Examples</para>
            <para>
            The following example shows decrypting encrypted data in a DATA_BLOB structure. This function does the decryption by using a
            session key that the function creates by using the user's logon credentials. For another example that uses this function, see
            Example C Program: Using CryptProtectData.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptUnprotectData(Vanara.PInvoke.Crypt32.CRYPTOAPI_BLOB@,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,Vanara.PInvoke.Crypt32.CryptProtectFlags,System.IntPtr)">
            <summary>
            The <c>CryptUnprotectData</c> function decrypts and does an integrity check of the data in a DATA_BLOB structure. Usually, the
            only user who can decrypt the data is a user with the same logon credentials as the user who encrypted the data. In addition,
            the encryption and decryption must be done on the same computer. For information about exceptions, see the Remarks section of CryptProtectData.
            </summary>
            <param name="pDataIn">
            A pointer to a DATA_BLOB structure that holds the encrypted data. The <c>DATA_BLOB</c> structure's <c>cbData</c> member holds
            the length of the <c>pbData</c> member's byte string that contains the text to be encrypted.
            </param>
            <param name="ppszDataDescr">
            A pointer to a string-readable description of the encrypted data included with the encrypted data. This parameter can be set to
            <c>NULL</c>. When you have finished using ppszDataDescr, free it by calling the LocalFree function.
            </param>
            <param name="pOptionalEntropy">
            A pointer to a DATA_BLOB structure that contains a password or other additional entropy used when the data was encrypted. This
            parameter can be set to <c>NULL</c>; however, if an optional entropy <c>DATA_BLOB</c> structure was used in the encryption
            phase, that same <c>DATA_BLOB</c> structure must be used for the decryption phase. For information about protecting passwords,
            see Handling Passwords.
            </param>
            <param name="pvReserved">This parameter is reserved for future use and must be set to <c>NULL</c>.</param>
            <param name="pPromptStruct">
            A pointer to a CRYPTPROTECT_PROMPTSTRUCT structure that provides information about where and when prompts are to be displayed
            and what the content of those prompts should be. This parameter can be set to <c>NULL</c>.
            </param>
            <param name="dwFlags">
            <para>
            A <c>DWORD</c> value that specifies options for this function. This parameter can be zero, in which case no option is set, or
            the following flag.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPTPROTECT_UI_FORBIDDEN</term>
            <term>
            This flag is used for remote situations where the user interface (UI) is not an option. When this flag is set and UI is
            specified for either the protect or unprotect operation, the operation fails and GetLastError returns the
            ERROR_PASSWORD_RESTRICTION code.
            </term>
            </item>
            <item>
            <term>CRYPTPROTECT_VERIFY_PROTECTION</term>
            <term>
            This flag verifies the protection of a protected BLOB. If the default protection level configured of the host is higher than the
            current protection level for the BLOB, the function returns CRYPT_I_NEW_PROTECTION_REQUIRED to advise the caller to again
            protect the plaintext contained in the BLOB.
            </term>
            </item>
            </list>
            </param>
            <param name="pDataOut">
            A pointer to a DATA_BLOB structure where the function stores the decrypted data. When you have finished using the
            <c>DATA_BLOB</c> structure, free its <c>pbData</c> member by calling the LocalFree function.
            </param>
            <returns>
            <para>If the function succeeds, the function returns <c>TRUE</c>.</para>
            <para>If the function fails, it returns <c>FALSE</c>.</para>
            </returns>
            <remarks>
            <para>
            The CryptProtectData function creates a session key when the data is encrypted. That key is derived again and used to decrypt
            the data BLOB.
            </para>
            <para>
            The Message Authentication Code (MAC) hash added to the encrypted data can be used to determine whether the encrypted data was
            altered in any way. Any tampering results in the return of the ERROR_INVALID_DATA code.
            </para>
            <para>
            When you have finished using the DATA_BLOB structure, free its <c>pbData</c> member by calling the LocalFree function. Any
            ppszDataDescr that is not <c>NULL</c> must also be freed by using <c>LocalFree</c>.
            </para>
            <para>When you have finished using sensitive information, clear it from memory by calling the SecureZeroMemory function.</para>
            <para>Examples</para>
            <para>
            The following example shows decrypting encrypted data in a DATA_BLOB structure. This function does the decryption by using a
            session key that the function creates by using the user's logon credentials. For another example that uses this function, see
            Example C Program: Using CryptProtectData.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptUnprotectMemory(System.IntPtr,System.UInt32,Vanara.PInvoke.Crypt32.CryptProtectMemoryFlags)">
            <summary>The <c>CryptUnprotectMemory</c> function decrypts memory that was encrypted using the CryptProtectMemory function.</summary>
            <param name="pDataIn">
            A pointer to the block of memory to decrypt. The cbData parameter specifies the number of bytes that the function will attempt
            to decrypt. If the data contained in the memory space is smaller than the number of bytes specified, the function will attempt
            to decrypt data outside of the intended block. If it is larger than cbData bytes, then only the first cbData bytes will be decrypted.
            </param>
            <param name="cbDataIn">
            Number of bytes of memory pointed to by the pData parameter to decrypt. The number of bytes must be a multiple of the
            <c>CRYPTPROTECTMEMORY_BLOCK_SIZE</c> constant defined in Wincrypt.h.
            </param>
            <param name="dwFlags">
            <para>This parameter can be one of the following flags. You must specify the same flag when encrypting and decrypting the memory.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPTPROTECTMEMORY_SAME_PROCESS</term>
            <term>
            Encrypt and decrypt memory in the same process. An application running in a different process will not be able to decrypt the data.
            </term>
            </item>
            <item>
            <term>CRYPTPROTECTMEMORY_CROSS_PROCESS</term>
            <term>
            Encrypt and decrypt memory in different processes. An application running in a different process will be able to decrypt the data.
            </term>
            </item>
            <item>
            <term>CRYPTPROTECTMEMORY_SAME_LOGON</term>
            <term>
            Use the same logon credentials to encrypt and decrypt memory in different processes. An application running in a different
            process will be able to decrypt the data. However, the process must run as the same user that encrypted the data and in the same
            logon session.
            </term>
            </item>
            </list>
            </param>
            <returns>
            <para>If the function succeeds, the function returns <c>TRUE</c>.</para>
            <para>If the function fails, it returns <c>FALSE</c>. For extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            Using CryptProtectMemory and CryptUnprotectMemory for password encryption is not secure because the data exists as plaintext in
            memory before it is encrypted and at any time the caller decrypts it for use.
            </para>
            <para>
            You must encrypt and decrypt the memory during the same boot session. If the computer is restarted before you call the
            <c>CryptUnprotectMemory</c> function, you will not be able to decrypt the data.
            </para>
            <para>
            You must pass the same flag to <c>CryptUnprotectMemory</c> and CryptProtectMemory. If you pass different flags, the
            <c>CryptUnprotectMemory</c> function succeeds; however, the result is unpredictable.
            </para>
            <para>When you have finished using the sensitive information, clear it from memory by calling the SecureZeroMemory function.</para>
            <para>Examples</para>
            <para>
            The following example calls the <c>CryptUnprotectMemory</c> function to decrypt data that is in memory. The example assumes the
            variable pEncryptedText points to a string that has been encrypted using the CryptProtectMemory function.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptUpdateProtectedState(Vanara.PInvoke.PSID,System.String,System.UInt32,System.UInt32@,System.UInt32@)">
            <summary>
            The <c>CryptUpdateProtectedState</c> function migrates the current user's master keys after the user's security identifier (SID)
            has changed. This function can be used to preserve encrypted data after a user has been moved from one domain to another.
            </summary>
            <param name="pOldSid">
            <para>
            The address of a SID structure that contains the user's previous SID. This SID is used to locate the old master keys. If this
            parameter is <c>NULL</c>, the master keys for the current user SID are migrated.
            </para>
            <para>Either this parameter or the pwszOldPassword parameter may be <c>NULL</c>, but not both.</para>
            </param>
            <param name="pwszOldPassword">
            <para>
            A pointer to a null-terminated Unicode string that contains the user's password before the SID was changed. This password is
            used to decrypt the old master keys. If this parameter is <c>NULL</c>, the password of the current user will be used.
            </para>
            <para>Either this parameter or the pOldSid parameter may be <c>NULL</c>, but not both.</para>
            </param>
            <param name="dwFlags">Not used. Must be zero.</param>
            <param name="pdwSuccessCount">
            The address of a <c>DWORD</c> variable that receives the number of master keys that were successfully migrated.
            </param>
            <param name="pdwFailureCount">
            <para>The address of a <c>DWORD</c> variable that receives the number of master keys that could not be decrypted.</para>
            <para>
            It is not necessarily an error if one or more master keys cannot be decrypted. Some users may possess master keys that are
            stagnant and could not have been decrypted for a long time. One way that this can happen is when the password of a local user
            has been administratively reset.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>
            If the function fails, the return value is <c>FALSE</c>. For extended error information, call GetLastError. Some possible error
            codes include the following.
            </para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>One of the parameters contains a value that is not valid.</term>
            </item>
            <item>
            <term>ERROR_OUTOFMEMORY</term>
            <term>A memory allocation failure occurred.</term>
            </item>
            <item>
            <term>ERROR_ENCRYPTION_FAILED</term>
            <term>The old password could not be encrypted.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            This function decrypts all of the user's master keys in the old master key directory, using the previous password, and stores
            them in the user's current master key directory, encrypted with the user's current password.
            </para>
            <para>This function must be called from the user account that the keys are being migrated to.</para>
            <para>
            If this function is able to successfully migrate an old master key, it will automatically delete the old master key. Master keys
            that cannot be decrypted are not deleted.
            </para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CRYPTPROTECT_PROMPTSTRUCT">
            <summary>
            The <c>CRYPTPROTECT_PROMPTSTRUCT</c> structure provides the text of a prompt and information about when and where that prompt is
            to be displayed when using the CryptProtectData and CryptUnprotectData functions.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPTPROTECT_PROMPTSTRUCT.cbSize">
            <summary>The size, in bytes, of this structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPTPROTECT_PROMPTSTRUCT.dwPromptFlags">
            <summary>
            <para>
            <c>DWORD</c> flags that indicate when prompts to the user are to be displayed. Current <c>dwPromptFlags</c> values are as follows.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPTPROTECT_PROMPT_ON_PROTECT</term>
            <term>This flag is used to provide the prompt for the protect phase.</term>
            </item>
            <item>
            <term>CRYPTPROTECT_PROMPT_ON_UNPROTECT</term>
            <term>
            This flag can be combined with CRYPTPROTECT_PROMPT_ON_PROTECT to enforce the UI (user interface) policy of the caller. When
            CryptUnprotectData is called, the dwPromptFlags specified in the CryptProtectData call are enforced.
            </term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPTPROTECT_PROMPTSTRUCT.hwndApp">
            <summary>Window handle to the parent window.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPTPROTECT_PROMPTSTRUCT.szPrompt">
            <summary>A string containing the text of a prompt to be displayed.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SIP_CAP_SET_CUR_VER">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SIP_CAP_SET_VERSION_2">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SIP_CAP_SET_VERSION_3">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.pCryptSIPCreateIndirectData">
            <summary/>
            <param name="pSubjectInfo"/>
            <param name="pcbIndirectData"/>
            <param name="pIndirectData"/>
            <returns/>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.pCryptSIPGetSignedDataMsg">
            <summary/>
            <param name="pSubjectInfo"/>
            <param name="pdwEncodingType"/>
            <param name="dwIndex"/>
            <param name="pcbSignedDataMsg"/>
            <param name="pbSignedDataMsg"/>
            <returns/>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.pCryptSIPPutSignedDataMsg">
            <summary/>
            <param name="pSubjectInfo"/>
            <param name="dwEncodingType"/>
            <param name="pdwIndex"/>
            <param name="cbSignedDataMsg"/>
            <param name="pbSignedDataMsg"/>
            <returns/>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.pCryptSIPRemoveSignedDataMsg">
            <summary/>
            <param name="pSubjectInfo"/>
            <param name="dwIndex"/>
            <returns/>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.pCryptSIPVerifyIndirectData">
            <summary/>
            <param name="pSubjectInfo"/>
            <param name="pIndirectData"/>
            <returns/>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.MSSIP">
            <summary>Type of additional information provided.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.MSSIP.MSSIP_ADDINFO_NONE">
            <summary>There is no additional information about the subject.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.MSSIP.MSSIP_ADDINFO_FLAT">
            <summary>The additional information is a flat file.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.MSSIP.MSSIP_ADDINFO_CATMEMBER">
            <summary>The additional information is a catalog member.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.MSSIP.MSSIP_ADDINFO_BLOB">
            <summary>The additional information is a BLOB.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.MSSIP.MSSIP_ADDINFO_NONMSSIP">
            <summary>The additional information is in a user defined format.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.SPC">
            <summary>Options.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SPC.SPC_EXC_PE_PAGE_HASHES_FLAG">
            <summary>
            Exclude page hashes when creating SIP indirect data for the PE file. This flag takes precedence over the
            SPC_INC_PE_PAGE_HASHES_FLAG flag.
            <para>
            If neither the SPC_EXC_PE_PAGE_HASHES_FLAG or the SPC_INC_PE_PAGE_HASHES_FLAG flag is specified, the value set with the
            WintrustSetDefaultIncludePEPageHashes function is used for this setting. The default for this setting is to exclude page
            hashes when creating SIP indirect data for PE files.
            </para>
            <para>Windows Server 2003 and Windows XP: This value is not supported.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SPC.SPC_INC_PE_IMPORT_ADDR_TABLE_FLAG">
            <summary>This value is not supported.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SPC.SPC_INC_PE_DEBUG_INFO_FLAG">
            <summary>This value is not supported.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SPC.SPC_INC_PE_RESOURCES_FLAG">
            <summary>This value is not supported.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SPC.SPC_INC_PE_PAGE_HASHES_FLAG">
            <summary>
            Include page hashes when creating SIP indirect data for the PE file.
            <para>Windows Server 2003 and Windows XP: This value is not supported.</para>
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptSIPAddProvider(Vanara.PInvoke.Crypt32.SIP_ADD_NEWPROVIDER@)">
            <summary>
            The <c>CryptSIPAddProvider</c> function registers functions that are exported by a given DLL file that implements a Subject
            Interface Package (SIP).
            </summary>
            <param name="psNewProv">
            A pointer to a SIP_ADD_NEWPROVIDERa&gt; structure that specifies the DLL file and function names to register.
            </param>
            <returns>
            The return value is <c>TRUE</c> if the function succeeds; <c>FALSE</c> if the function fails. If the function fails, call the
            GetLastError function to determine the reason for failure.
            </returns>
            <remarks>
            <para>
            Typically, you call this function as part of an in-process COM server registration. The <c>CryptSIPAddProvider</c> function
            persists the appropriate Registry entries for the SIP provider functions.
            </para>
            <para>When you have finished using the added SIP provider, remove it by calling the CryptSIPRemoveProvider function.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptSIPCreateIndirectData(Vanara.PInvoke.Crypt32.SIP_SUBJECTINFO@,System.UInt32@,Vanara.PInvoke.Crypt32.SIP_INDIRECT_DATA@)">
            <summary>
            The SIP_SUBJECTINFOa&gt; structure, the digest algorithm, and an encoding attribute. The hash can be used as an indirect
            reference to the data.
            </summary>
            <param name="pSubjectInfo">
            A pointer to a SIP_SUBJECTINFOa&gt; structure that contains the subject to which the indirect data reference will point.
            </param>
            <param name="pcbIndirectData">A pointer to a SIP_INDIRECT_DATAa&gt; structure.</param>
            <param name="pIndirectData">A pointer to a SIP_INDIRECT_DATAa&gt; structure to receive the catalog item.</param>
            <returns>
            <para>The return value is <c>TRUE</c> if the function succeeds; otherwise, <c>FALSE</c>.</para>
            <para>
            If this function returns <c>FALSE</c>, additional error information can be obtained by calling the GetLastError function.
            <c>GetLastError</c> will return one of the following error codes.
            </para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_BAD_FORMAT</term>
            <term>The file or data format is not correct for the specified subject interface package (SIP) type.</term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>One or more of the parameters are not valid.</term>
            </item>
            <item>
            <term>ERROR_NOT_ENOUGH_MEMORY</term>
            <term>There was an error allocating memory.</term>
            </item>
            <item>
            <term>NTE_BAD_ALGID</term>
            <term>The specified algorithm is not supported by the SIP.</term>
            </item>
            <item>
            <term>TRUST_E_SUBJECT_FORM_UNKNOWN</term>
            <term>The subject type is not recognized.</term>
            </item>
            </list>
            </returns>
            <remarks>
            If pcbIndirectData points to a <c>DWORD</c> and pIndirectData points to <c>NULL</c>, the size of the data will be returned in pcbIndirectData.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptSIPGetCaps(Vanara.PInvoke.Crypt32.SIP_SUBJECTINFO@,Vanara.PInvoke.Crypt32.SIP_CAP_SET_V2@)">
            <summary>The <c>CryptSIPGetCaps</c> function retrieves the capabilities of a subject interface package (SIP).</summary>
            <param name="pSubjInfo">Pointer to a SIP_SUBJECTINFOa&gt; structure that specifies subject information data to the SIP APIs.</param>
            <param name="pCaps">Pointer to a SIP_CAP_SET structure that defines the capabilities of an SIP.</param>
            <returns>None</returns>
            <remarks>
            Unlike other SIP functions, SIP_DISPATCH_INFOa&gt; structure. Instead, callers must map the object identifier (OID) to the
            function entry point.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptSIPGetCaps(Vanara.PInvoke.Crypt32.SIP_SUBJECTINFO@,Vanara.PInvoke.Crypt32.SIP_CAP_SET_V3@)">
            <summary>The <c>CryptSIPGetCaps</c> function retrieves the capabilities of a subject interface package (SIP).</summary>
            <param name="pSubjInfo">Pointer to a SIP_SUBJECTINFOa&gt; structure that specifies subject information data to the SIP APIs.</param>
            <param name="pCaps">Pointer to a SIP_CAP_SET structure that defines the capabilities of an SIP.</param>
            <returns>None</returns>
            <remarks>
            Unlike other SIP functions, SIP_DISPATCH_INFOa&gt; structure. Instead, callers must map the object identifier (OID) to the
            function entry point.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptSIPGetSignedDataMsg(Vanara.PInvoke.Crypt32.SIP_SUBJECTINFO@,Vanara.PInvoke.Crypt32.CertEncodingType@,System.UInt32,System.UInt32@,System.IntPtr)">
            <summary>The <c>CryptSIPGetSignedDataMsg</c> function retrieves an Authenticode signature from the file.</summary>
            <param name="pSubjectInfo">A pointer to a SIP_SUBJECTINFOa&gt; structure that contains information about the message subject.</param>
            <param name="pdwEncodingType">
            <para>The encoding type of the Authenticode signature.</para>
            <para>This parameter can be a combination of one or more of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>PKCS_7_ASN_ENCODING 65536 (0x10000)</term>
            <term>Specifies PKCS #7 message encoding.</term>
            </item>
            <item>
            <term>X509_ASN_ENCODING 1 (0x1)</term>
            <term>Specifies X.509 certificate encoding.</term>
            </item>
            </list>
            </param>
            <param name="dwIndex">This parameter is reserved and should be set to zero.</param>
            <param name="pcbSignedDataMsg">The length, in bytes, of the buffer pointed to by the pbSignedDataMsg parameter.</param>
            <param name="pbSignedDataMsg">
            <para>A pointer to a buffer to receive the returned Authenticode signature.</para>
            <para>
            To determine the size of the buffer needed, set the pbSignedDataMsg parameter to <c>NULL</c> and call the
            <c>CryptSIPGetSignedDataMsg</c> function. This function will place the required size of the buffer, in bytes, in the value
            pointed to by pcbSignedDataMsg. For more information, see Retrieving Data of Unknown Length.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the function returns <c>TRUE</c>.</para>
            <para>
            If the function fails, it returns <c>FALSE</c>. For extended error information, call GetLastError. Some possible error codes follow.
            </para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>CRYPT_E_NO_MATCH</term>
            <term>The signature specified by the index could not be found.</term>
            </item>
            <item>
            <term>ERROR_BAD_FORMAT</term>
            <term>The specified data or file format of the subject interface package (SIP) is not valid.</term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            The [SIP_SUBJECTINFO](https://docs.microsoft.com/windows/desktop/api/mssip/ns-mssip-sip_subjectinfo)a&gt; structure is a null pointer.
            </term>
            </item>
            <item>
            <term>ERROR_INSUFFICIENT_BUFFER</term>
            <term>
            The size of the message buffer was insufficient to hold the retrieved data, the pcbSignedDataMsgparameter has been set to
            indicate the required buffer size.
            </term>
            </item>
            <item>
            <term>TRUST_E_SUBJECT_FORM_UNKNOWN</term>
            <term>The specified subject type is not valid.</term>
            </item>
            </list>
            </returns>
            <remarks>
            Subjects include, but are not limited to, portable executable images (.exe), cabinet (.cab) images, flat files, and catalog
            files. Each subject type uses a different subset of its data for hash calculation and requires a different procedure for storage
            and retrieval. Therefore, each subject type has a unique SIP specification.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptSIPLoad(System.Guid@,System.UInt32,Vanara.PInvoke.Crypt32.SIP_DISPATCH_INFO@)">
            <summary>
            The SIP_DISPATCH_INFOa&gt; structure. The exported functions must have been previously registered by calling the
            CryptSIPAddProvider function.
            </summary>
            <param name="pgSubject">A pointer to a GUID returned by calling the CryptSIPRetrieveSubjectGuid function.</param>
            <param name="dwFlags">This parameter is reserved and must be set to zero.</param>
            <param name="pSipDispatch">
            A pointer to a SIP_DISPATCH_INFO structure that contains pointers to SIP provider functions that are specific to the subject
            type. The caller must initialize this structure to binary zeros, and set the <c>cbSize</c> member to before calling the
            <c>CryptSIPLoad</c> function.
            </param>
            <returns>
            <para>If the function succeeds, the function returns <c>TRUE</c>.</para>
            <para>If the function fails, it returns <c>FALSE</c>. For extended error information, call GetLastError.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptSIPPutSignedDataMsg(Vanara.PInvoke.Crypt32.SIP_SUBJECTINFO@,Vanara.PInvoke.Crypt32.CertEncodingType,System.UInt32@,System.UInt32,System.IntPtr)">
            <summary>The <c>CryptSIPPutSignedDataMsg</c> function stores an Authenticode signature in the target file.</summary>
            <param name="pSubjectInfo">Pointer to a SIP_SUBJECTINFOa&gt; structure that contains information about the message subject.</param>
            <param name="dwEncodingType">
            <para>The encoding type of the message. This can be a combination of one or more of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>PKCS_7_ASN_ENCODING 65536 (0x10000)</term>
            <term>Specifies PKCS #7 message encoding.</term>
            </item>
            <item>
            <term>X509_ASN_ENCODING 1 (0x1)</term>
            <term>Specifies X.509 certificate encoding.</term>
            </item>
            </list>
            </param>
            <param name="pdwIndex">Pointer to the message index.</param>
            <param name="cbSignedDataMsg">Length, in bytes, of the buffer pointed to by the pbSignedDataMsg parameter.</param>
            <param name="pbSignedDataMsg">Pointer to the buffer that contains the message.</param>
            <returns>
            <para>If the function succeeds, the function returns <c>TRUE</c>.</para>
            <para>
            If the function fails, it returns <c>FALSE</c>. For extended error information, call GetLastError. Some possible error codes follow.
            </para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_BAD_FORMAT</term>
            <term>The specified data or file format of the subject interface package (SIP) is not valid.</term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>This code can be returned for the following reasons:</term>
            </item>
            <item>
            <term>TRUST_E_SUBJECT_FORM_UNKNOWN</term>
            <term>The specified subject type is not valid.</term>
            </item>
            </list>
            </returns>
            <remarks>
            Each subject type uses a different subset of its data for hash calculation and requires a different procedure for storage and
            retrieval. Therefore, each subject type has a unique SIP specification.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptSIPRemoveProvider(System.Guid@)">
            <summary>
            The <c>CryptSIPRemoveProvider</c> function removes registry details of a Subject Interface Package (SIP) DLL file added by a
            previous call to the CryptSIPAddProvider function.
            </summary>
            <param name="pgProv">A pointer to the GUID that identifies the SIP DLL to remove.</param>
            <returns>
            The return value is <c>TRUE</c> if the function succeeds; <c>FALSE</c> if the function fails. If the function fails, call the
            GetLastError function to determine the reason for failure.
            </returns>
            <remarks>
            Typically you call this function to unregister an in-process COM server. The <c>CryptSIPRemoveProvider</c> function removes the
            appropriate Registry entries for the SIP provider functions.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptSIPRemoveSignedDataMsg(Vanara.PInvoke.Crypt32.SIP_SUBJECTINFO@,System.UInt32)">
            <summary>The <c>CryptSIPRemoveSignedDataMsg</c> function removes a specified Authenticode signature.</summary>
            <param name="pSubjectInfo">A pointer to a SIP_SUBJECTINFOa&gt; structure that contains information about the message subject.</param>
            <param name="dwIndex">This parameter is reserved and should be set to zero.</param>
            <returns>
            <para>If the function succeeds, the function returns <c>TRUE</c>.</para>
            <para>If the function fails, it returns <c>FALSE</c>. For extended error information, call GetLastError.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptSIPRetrieveSubjectGuid(System.String,Vanara.PInvoke.HFILE,System.Guid@)">
            <summary>
            The <c>CryptSIPRetrieveSubjectGuid</c> function retrieves a GUID based on the header information in a specified file. The GUID
            is used by the CryptSIPLoad function to load the subject interface package (SIP) implementation for the given file type.
            </summary>
            <param name="FileName">The name of the file.</param>
            <param name="hFileIn">A handle to the file to check.</param>
            <param name="pgSubject">A GUID that identifies the subject.</param>
            <returns>
            <para>If the function succeeds, the function returns <c>TRUE</c>.</para>
            <para>If the function fails, it returns <c>FALSE</c>. For extended error information, call GetLastError.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptSIPRetrieveSubjectGuidForCatalogFile(System.String,Vanara.PInvoke.HANDLE,System.Guid@)">
            <summary>
            The <c>CryptSIPRetrieveSubjectGuidForCatalogFile</c> function retrieves the subject GUID associated with the specified file.
            </summary>
            <param name="FileName">The name of the file. If the hFileIn parameter is set, the value in this parameter is ignored.</param>
            <param name="hFileIn">
            A handle to the file to check. This parameter must contain a valid handle if the FileName parameter is <c>NULL</c>.
            </param>
            <param name="pgSubject">A globally unique ID that identifies the subject.</param>
            <returns>
            <para>The return value is <c>TRUE</c> if the function succeeds; otherwise, <c>FALSE</c>.</para>
            <para>
            If this function returns <c>FALSE</c>, additional error information can be obtained by calling the GetLastError function.
            <c>GetLastError</c> will return one of the following error codes.
            </para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>One or more of the parameters are not valid.</term>
            </item>
            </list>
            </returns>
            <remarks>
            This function only supports subject interface packages (SIPs) that are used for portable executable images (.exe), cabinet
            (.cab) images, and flat files.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptSIPVerifyIndirectData(Vanara.PInvoke.Crypt32.SIP_SUBJECTINFO@,Vanara.PInvoke.Crypt32.SIP_INDIRECT_DATA@)">
            <summary>The <c>CryptSIPVerifyIndirectData</c> function validates the indirect hashed data against the supplied subject.</summary>
            <param name="pSubjectInfo">A pointer to a SIP_SUBJECTINFOa&gt; structure that contains information about the message subject.</param>
            <param name="pIndirectData">
            A pointer to a SIP_INDIRECT_DATAa&gt; structure that contains information about the hashed subject information.
            </param>
            <returns>
            <para>The return value is <c>TRUE</c> if the function succeeds; otherwise, <c>FALSE</c>.</para>
            <para>
            If this function returns <c>FALSE</c>, additional error information can be obtained by calling the GetLastError function.
            <c>GetLastError</c> will return one of the following error codes.
            </para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>One or more of the parameters are not valid.</term>
            </item>
            <item>
            <term>TRUST_E_SUBJECT_FORM_UNKNOWN</term>
            <term>The subject type is an unknown type.</term>
            </item>
            </list>
            </returns>
            <remarks>
            Subjects include, but are not limited to, portable executable images (.exe), cabinet (.cab) images, flat files, and catalog
            files. Each subject type uses a different subset of its data for hash calculation and requires a different procedure for storage
            and retrieval. Therefore each subject type has a unique subject interface package specification.
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CRYPTCATMEMBER">
            <summary>
            <para>
            [The <c>CRYPTCATMEMBER</c> structure is available for use in the operating systems specified in the Requirements section. It may
            be altered or unavailable in subsequent versions.]
            </para>
            <para>
            The <c>CRYPTCATMEMBER</c> structure provides information about a catalog member. This structure is used by the
            CryptCATGetMemberInfo and CryptCATEnumerateAttr functions.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPTCATMEMBER.cbStruct">
            <summary>The size, in bytes, of this structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPTCATMEMBER.pwszReferenceTag">
            <summary>A pointer to a null-terminated string that contains the reference tag value.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPTCATMEMBER.pwszFileName">
            <summary>A pointer to a null-terminated string that contains the file name.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPTCATMEMBER.gSubjectType">
            <summary><c>GUID</c> that identifies the subject type.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPTCATMEMBER.fdwMemberFlags">
            <summary>Value that specifies the member flags.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPTCATMEMBER.pIndirectData">
            <summary>A pointer to a <c>SIP_INDIRECT_DATA</c> structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPTCATMEMBER.dwCertVersion">
            <summary>Value that specifies the certificate version.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPTCATMEMBER.dwReserved">
            <summary>Reserved; do not use.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPTCATMEMBER.hReserved">
            <summary>Reserved; do not use.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPTCATMEMBER.sEncodedIndirectData">
            <summary>A CRYPT_ATTR_BLOB structure that contains encoded indirect data.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPTCATMEMBER.sEncodedMemberInfo">
            <summary>A CRYPT_ATTR_BLOB structure that contains encoded member information.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CRYPTCATSTORE">
            <summary>
            <para>
            [The <c>CRYPTCATSTORE</c> structure is available for use in the operating systems specified in the Requirements section. It may
            be altered or unavailable in subsequent versions.]
            </para>
            <para>
            The <c>CRYPTCATSTORE</c> structure represents a catalog file. The CryptCATStoreFromHandle function populates this structure by
            using the handle returned by CryptCATOpen.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPTCATSTORE.cbStruct">
            <summary>The size, in bytes, of this structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPTCATSTORE.dwPublicVersion">
            <summary>A value that specifies the "PublicVersion" of the catalog file.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPTCATSTORE.pwszP7File">
            <summary>
            A pointer to a null-terminated string that contains the name of the catalog file. This member must be initialized before a
            call to the CryptCATPersistStore function.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPTCATSTORE.hProv">
            <summary>A handle to the cryptographic service provider (CSP).</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPTCATSTORE.dwEncodingType">
            <summary>
            A value that specifies the encoding type used for the file. Currently, only X509_ASN_ENCODING and PKCS_7_ASN_ENCODING are
            being used; however, additional encoding types may be added in the future. For either current encoding type, use:
            X509_ASN_ENCODING | PKCS_7_ASN_ENCODING.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPTCATSTORE.fdwStoreFlags">
            <summary>
            <para>A bitwise combination of the following values from <c>Vanara.PInvoke.WinTrust.CRYPTCAT_OPEN</c>.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPTCAT_OPEN_EXCLUDE_PAGE_HASHES 0x00010000</term>
            <term>Exclude page hashes in SPC_INDIRECT_DATA.</term>
            </item>
            <item>
            <term>CRYPTCAT_OPEN_FLAGS_MASK 0xffff0000</term>
            <term>For all flags with a value in the upper word, set or clear the flag.</term>
            </item>
            <item>
            <term>CRYPTCAT_OPEN_INCLUDE_PAGE_HASHES 0x00020000</term>
            <term>
            Include page hashes in SPC_INDIRECT_DATA. The CRYPTCAT_OPEN_EXCLUDE_PAGE_HASHES flag takes precedence if it is also set.
            </term>
            </item>
            <item>
            <term>CRYPTCAT_OPEN_NO_CONTENT_HCRYPTMSG 0x20000000</term>
            <term>Open the file for decoding without detached content.</term>
            </item>
            <item>
            <term>CRYPTCAT_OPEN_SORTED 0x40000000</term>
            <term>Open the catalog with the entries sorted alphabetically by subject.</term>
            </item>
            <item>
            <term>CRYPTCAT_OPEN_VERIFYSIGHASH 0x10000000</term>
            <term>Verify the signature hash but not the certificate chain.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPTCATSTORE.hReserved">
            <summary>This member is reserved and must be <c>NULL</c>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPTCATSTORE.hAttrs">
            <summary>This member is reserved and must be <c>NULL</c>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPTCATSTORE.hCryptMsg">
            <summary>
            A handle to the decoded bytes. This member is only set if the file was opened with the
            <c>CRYPTCAT_OPEN_NO_CONTENT_HCRYPTMSG</c> flag set.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPTCATSTORE.hSorted">
            <summary>This member is reserved and must be <c>NULL</c>.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.MS_ADDINFO_BLOB">
            <summary>The <c>MS_ADDINFO_BLOB</c> structure provides additional information for in-memory BLOB subject types.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.MS_ADDINFO_BLOB.cbStruct">
            <summary>The size, in bytes, of this structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.MS_ADDINFO_BLOB.cbMemObject">
            <summary>The size, in bytes, of the data in the pbMemObject member.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.MS_ADDINFO_BLOB.pbMemObject">
            <summary>A pointer to the in-memory BLOB subject.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.MS_ADDINFO_BLOB.cbMemSignedMsg">
            <summary>The size, in bytes, of the data in the pbMemSignedMsg member.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.MS_ADDINFO_BLOB.pbMemSignedMsg">
            <summary>A pointer to the signed message.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.MS_ADDINFO_CATALOGMEMBER">
            <summary>The <c>MS_ADDINFO_CATALOGMEMBER</c> structure provides additional information for catalog member subject types.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.MS_ADDINFO_CATALOGMEMBER.cbStruct">
            <summary>The size, in bytes, of this structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.MS_ADDINFO_CATALOGMEMBER.pStore">
            <summary>A CRYPTCATSTORE structure that contains a catalog file store.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.MS_ADDINFO_CATALOGMEMBER.pMember">
            <summary>A CRYPTCATMEMBER structure that contains a catalog member.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.MS_ADDINFO_FLAT">
            <summary>The <c>MS_ADDINFO_FLAT</c> structure provides additional information about flat or end-to-end subject types.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.MS_ADDINFO_FLAT.cbStruct">
            <summary>The size, in bytes, of this structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.MS_ADDINFO_FLAT.pIndirectData">
            <summary>A SIP_INDIRECT_DATA structure that contains the hash of a flat file subject.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.SIP_ADD_NEWPROVIDER">
            <summary>
            The <c>SIP_ADD_NEWPROVIDER</c> structure defines a subject interface package (SIP). This structure is used by the
            CryptSIPAddProvider function.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SIP_ADD_NEWPROVIDER.cbStruct">
            <summary>The size, in bytes, of this structure. Set this value to .</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SIP_ADD_NEWPROVIDER.pgSubject">
            <summary>Pointer to the GUID that identifies the SIP.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SIP_ADD_NEWPROVIDER.pwszDLLFileName">
            <summary>Pointer to a null-terminated string that contains the name of the DLL file.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SIP_ADD_NEWPROVIDER.pwszMagicNumber">
            <summary>This member is not used.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SIP_ADD_NEWPROVIDER.pwszIsFunctionName">
            <summary>
            Pointer to a null-terminated string that contains the name of the function that determines whether the file contents are
            supported by this SIP. This member can be <c>NULL</c>. The signature for this function pointer is described in pfnIsFileSupported.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SIP_ADD_NEWPROVIDER.pwszGetFuncName">
            <summary>
            Pointer to a null-terminated string that contains the name of the function that retrieves the signed data. The signature for
            this function pointer is described in CryptSIPGetSignedDataMsg.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SIP_ADD_NEWPROVIDER.pwszPutFuncName">
            <summary>
            Pointer to a null-terminated string that contains the name of the function that stores the Authenticode signature in the
            target file. The signature for this function pointer is described in CryptSIPPutSignedDataMsg.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SIP_ADD_NEWPROVIDER.pwszCreateFuncName">
            <summary>
            Pointer to a null-terminated string that contains the name of the function that creates the hash. The signature for this
            function pointer is described in CryptSIPCreateIndirectData.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SIP_ADD_NEWPROVIDER.pwszVerifyFuncName">
            <summary>
            Pointer to a null-terminated string that contains the name of the function that verifies the hash. The signature for this
            function pointer is described in CryptSIPVerifyIndirectData.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SIP_ADD_NEWPROVIDER.pwszRemoveFuncName">
            <summary>
            Pointer to a null-terminated string that contains the name of the function that removes the signed data. The signature for
            this function pointer is described in CryptSIPRemoveSignedDataMsg.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SIP_ADD_NEWPROVIDER.pwszIsFunctionNameFmt2">
            <summary>
            Pointer to a null-terminated string that contains the name of the function that determines whether the file name extension
            is supported by this SIP. This member can be <c>NULL</c>. The signature for this function pointer is described in pfnIsFileSupportedName.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SIP_ADD_NEWPROVIDER.pwszGetCapFuncName">
            <summary>
            <para>
            Pointer to a null-terminated string that contains the name of the function that determines the capabilities of the SIP. If
            this parameter is set to <c>NULL</c>, multiple signatures are not available for this SIP. The signature for this function
            pointer is described in pCryptSIPGetCaps.
            </para>
            <para>
            <c>Windows Server 2008 R2, Windows 7, Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:</c> This
            member is not available.
            </para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.SIP_CAP_SET_V2">
            <summary>The <c>SIP_CAP_SET</c> structure defines the capabilities of a subject interface package (SIP).</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SIP_CAP_SET_V2.cbSize">
            <summary>Size, in bytes, of this structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SIP_CAP_SET_V2.dwVersion">
            <summary>The SIP version. By default, this value is two (2).</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SIP_CAP_SET_V2.isMultiSign">
            <summary>
            A value of one (1) indicates that the SIP supports multiple embedded signatures. Otherwise, set this value to zero (0).
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SIP_CAP_SET_V2.dwReserved">
            <summary>Reserved for future use. Set this value to zero (0).</summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.SIP_CAP_SET_V3">
            <summary>The <c>SIP_CAP_SET</c> structure defines the capabilities of a subject interface package (SIP).</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SIP_CAP_SET_V3.cbSize">
            <summary>Size, in bytes, of this structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SIP_CAP_SET_V3.dwVersion">
            <summary>The SIP version. By default, this value is two (2).</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SIP_CAP_SET_V3.isMultiSign">
            <summary>
            A value of one (1) indicates that the SIP supports multiple embedded signatures. Otherwise, set this value to zero (0).
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SIP_CAP_SET_V3.dwFlags">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SIP_CAP_SET_V3.dwReserved">
            <summary>Reserved for future use. Set this value to zero (0).</summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.SIP_DISPATCH_INFO">
            <summary>
            The <c>SIP_DISPATCH_INFO</c> structure contains a set of function pointers assigned by the CryptSIPLoad function that your
            application uses to perform subject interface package (SIP) operations.
            </summary>
            <remarks>
            Your application must initialize this structure to binary zeros and set <c>cbSize</c> to by calling the memset function before
            calling the CryptSIPLoad function. Your application can use the function pointers in the returned <c>SIP_DISPATCH_INFO</c>
            structure to perform the necessary SIP operations. The function pointers can point to functions exported by third party SIPs.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SIP_DISPATCH_INFO.cbSize">
            <summary>The size, in bytes, of this structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SIP_DISPATCH_INFO.hSIP">
            <summary>This member is reserved and must be set to <c>NULL</c>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SIP_DISPATCH_INFO.pfGet">
            <summary>
            A pointer to the function that retrieves the signed data for the subject. The signature for this function pointer is
            described in CryptSIPGetSignedDataMsg.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SIP_DISPATCH_INFO.pfPut">
            <summary>
            A pointer to the function that stores the signed data for the subject. The signature for this function pointer is described
            in CryptSIPPutSignedDataMsg.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SIP_DISPATCH_INFO.pfCreate">
            <summary>
            A pointer to the function that returns a SIP_INDIRECT_DATA structure that contains the subject data. This structure contains
            the hash of the target. The signature for this function pointer is described in CryptSIPCreateIndirectData.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SIP_DISPATCH_INFO.pfVerify">
            <summary>
            A pointer to the function that verifies the SIP_INDIRECT_DATA structure that contains the subject data. This structure
            contains the hash of the target. The signature for this function pointer is described in CryptSIPVerifyIndirectData.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SIP_DISPATCH_INFO.pfRemove">
            <summary>
            A pointer to the function that removes the signed data for the subject. The signature for this function pointer is described
            in CryptSIPRemoveSignedDataMsg.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.SIP_INDIRECT_DATA">
            <summary>The <c>SIP_INDIRECT_DATA</c> structure contains the digest of the hashed subject information.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SIP_INDIRECT_DATA.Data">
            <summary>A CRYPT_ATTRIBUTE_TYPE_VALUE structure used to encode the attribute.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SIP_INDIRECT_DATA.DigestAlgorithm">
            <summary>A CRYPT_ALGORITHM_IDENTIFIER structure that contains the digest algorithm to use to create the hash.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SIP_INDIRECT_DATA.Digest">
            <summary>
            A CRYPT_HASH_BLOB structure that contains the hash of the subject. For information about <c>CRYPT_HASH_BLOB</c>, see <c>CRYPT_INTEGER_BLOB</c>.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.SIP_SUBJECTINFO">
            <summary>The <c>SIP_SUBJECTINFO</c> structure specifies subject information data to the subject interface package (SIP) APIs.</summary>
            <remarks>
            <para>
            Upon first use of the <c>SIP_SUBJECTINFO</c> structure, initialize the entire structure to binary zero. Do not initialize the
            structure between SIP function calls.
            </para>
            <para>
            Subjects include, but are not limited to, portable executable images (.exe), cabinet (.cab) images, flat files, and catalog
            files. Each subject type uses a different subset of its data for hash calculation and requires a different procedure for storage
            and retrieval. Therefore each subject type has a unique subject interface package specification.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SIP_SUBJECTINFO.cbSize">
            <summary>The size, in bytes, of this structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SIP_SUBJECTINFO.pgSubjectType">
            <summary>A pointer to a <c>GUID</c> structure that identifies the subject type.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SIP_SUBJECTINFO.hFile">
            <summary>
            A file handle that represents the subject. If the storage type of the subject is a file, set hFile to
            <c>INVALID_HANDLE_VALUE</c> and set the pwsFileName parameter to the name of the file.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SIP_SUBJECTINFO.pwsFileName">
            <summary>A pointer to a null-terminated Unicode string that contains the file name of the subject.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SIP_SUBJECTINFO.pwsDisplayName">
            <summary>A pointer to a null-terminated Unicode string that contains the display name of the subject.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SIP_SUBJECTINFO.dwReserved1">
            <summary>This member is reserved for future use.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SIP_SUBJECTINFO.dwIntVersion">
            <summary>
            This member is reserved. Do not modify this member. It is used by the SIP to pass the internal version number between get
            and verify functions.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SIP_SUBJECTINFO.hProv">
            <summary>An HCRYPTPROV handle to the cryptography provider.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SIP_SUBJECTINFO.DigestAlgorithm">
            <summary>
            A CRYPT_ALGORITHM_IDENTIFIER structure that contains the identifier for the hash algorithm used to hash the file.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SIP_SUBJECTINFO.dwFlags">
            <summary>
            A value that modifies the behavior of the functions that use this structure. For more information about possible values for
            this member, see the dwFlags parameter of SignerSignEx.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SIP_SUBJECTINFO.dwEncodingType">
            <summary>
            A value that specifies the encoding type used for the file. Currently, only <c>X509_ASN_ENCODING</c> and
            <c>PKCS_7_ASN_ENCODING</c> are being used; however, additional encoding types may be added in the future. For either current
            encoding type, use: <c>X509_ASN_ENCODING</c> | <c>PKCS_7_ASN_ENCODING</c>.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SIP_SUBJECTINFO.dwReserved2">
            <summary>This member is reserved for future use.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SIP_SUBJECTINFO.fdwCAPISettings">
            <summary>This member is not used.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SIP_SUBJECTINFO.fdwSecuritySettings">
            <summary>This member is not used.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SIP_SUBJECTINFO.dwIndex">
            <summary>The message index of the last call to <c>CryptSIPGetSignedDataMsg</c> operation.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SIP_SUBJECTINFO.dwUnionChoice">
            <summary>
            <para>Specifies the type of additional information provided.</para>
            <list type="table">
            <listheader>
            <term>Defined constant/value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>MSSIP_ADDINFO_NONE 0</term>
            <term>There is no additional information about the subject.</term>
            </item>
            <item>
            <term>MSSIP_ADDINFO_FLAT 1</term>
            <term>The additional information is a flat file.</term>
            </item>
            <item>
            <term>MSSIP_ADDINFO_CATMEMBER 2</term>
            <term>The additional information is a catalog member.</term>
            </item>
            <item>
            <term>MSSIP_ADDINFO_BLOB 3</term>
            <term>The additional information is a BLOB.</term>
            </item>
            <item>
            <term>MSSIP_ADDINFO_NONMSSIP 500</term>
            <term>The additional information is in a user defined format.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SIP_SUBJECTINFO.psFlat">
            <summary>An MS_ADDINFO_FLAT structure that contains additional information for flat file subject types.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SIP_SUBJECTINFO.psCatMember">
            <summary>An MS_ADDINFO_CATALOGMEMBER structure that contains additional information for catalog member subject types.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SIP_SUBJECTINFO.psBlob">
            <summary>An MS_ADDINFO_BLOB structure that contains additional information for BLOB subject types.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SIP_SUBJECTINFO.pClientData">
            <summary>A pointer to SIP-specific data.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CertCreateSelfSignFlags">
            <summary>A set of flags that override the default behavior of this function.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertCreateSelfSignFlags.CERT_CREATE_SELFSIGN_NO_KEY_INFO">
            <summary>
            By default, the returned PCCERT_CONTEXT references the private keys by setting the CERT_KEY_PROV_INFO_PROP_ID. If you do not
            want the returned PCCERT_CONTEXT to reference private keys by setting the CERT_KEY_PROV_INFO_PROP_ID, specify CERT_CREATE_SELFSIGN_NO_KEY_INFO.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertCreateSelfSignFlags.CERT_CREATE_SELFSIGN_NO_SIGN">
            <summary>
            By default, the certificate being created is signed. If the certificate being created is only a dummy placeholder, the
            certificate might not need to be signed. Signing of the certificate is skipped if CERT_CREATE_SELFSIGN_NO_SIGN is specified.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CertSelectBy">
            <summary>Specifies the type of selection criteria used for the <c>ppPara</c> member.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertSelectBy.CERT_SELECT_BY_ENHKEY_USAGE">
            <summary>
            Select certificates based on a specific enhanced key usage. When this flag is set, the ppPara must reference a
            null-terminated object identifier (OID) ANSI string that specifies the enhanced key usage.
            <para>This criteria is evaluated on the certificate.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertSelectBy.CERT_SELECT_BY_KEY_USAGE">
            <summary>
            Select certificates based on a specific szOID_KEY_USAGE extension in the certificate. When this flag is set, the ppPara
            member must reference a CERT_EXTENSION structure where the value of the extension is a DWORD that identifies the Key Usage bits.
            <para>This criteria is evaluated on the certificate.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertSelectBy.CERT_SELECT_BY_POLICY_OID">
            <summary>
            Select certificates based on a specific issuance policy. The ppPara member must reference a null-terminated OID ANSI string
            of the desired issuance policy.
            <para>This criteria is evaluated on the issuance policy of the certificate chain.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertSelectBy.CERT_SELECT_BY_PROV_NAME">
            <summary>
            Select certificates based on a specific private key provider. The ppPara member must reference a null-terminated Unicode
            string that represents the name of the provider.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertSelectBy.CERT_SELECT_BY_EXTENSION">
            <summary>
            Select certificates based on the presence of a specified extension and an optional specified value. The ppPara member must
            reference a CERT_EXTENSION structure that specifies the extension OID and the associated value.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertSelectBy.CERT_SELECT_BY_SUBJECT_HOST_NAME">
            <summary>
            Select certificates based on the Subject DNS HOST Name. The ppPara member must reference a null-terminated Unicode string
            that contains the subject host name. The selection performed based on this flag is the same as the evaluation of the
            pwszServerName member of the SSL_EXTRA_CERT_CHAIN_POLICY_PARA structure during a call to the
            CertVerifyCertificateChainPolicy function.
            <para>This criteria is evaluated on the certificate.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertSelectBy.CERT_SELECT_BY_ISSUER_ATTR">
            <summary>
            Select certificates based on the relative distinguished name (RDN) element of the issuer of the certificate. The ppPara
            member must reference a CERT_RDN structure that contains the RDN element of the issuer.
            <para>This criteria is evaluated on the certificate chain.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertSelectBy.CERT_SELECT_BY_SUBJECT_ATTR">
            <summary>
            Select certificates based on the RDN element in the Subject of the certificate. The ppPara member must be a reference to a
            CERT_RDN structure that contains the RDN element of the Subject.
            <para>This criteria is evaluated on the certificate.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertSelectBy.CERT_SELECT_BY_ISSUER_NAME">
            <summary>
            Select certificates based on the issuer of the certificate. The ppPara member must be a reference to a CERT_NAME_BLOB
            structure that contains the name of the issuer.
            <para>This criteria is evaluated on the certificate chain.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertSelectBy.CERT_SELECT_BY_PUBLIC_KEY">
            <summary>
            Select certificates based on the public key of the certificate. The ppPara member must reference a pointer to a
            CERT_PUBLIC_KEY_INFO structure that contains the public key.
            <para>This criteria is evaluated on the certificate.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertSelectBy.CERT_SELECT_BY_TLS_SIGNATURES">
            <summary>
            Select certificates based on the Transport Layer Security protocol (TLS) Signature requirement. The ppPara member must
            reference a SecPkgContext_SupportedSignatures structure.
            <para>This criteria is evaluated on the certificate.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CertSelection">
            <summary>Flags for controlling the certificate selection process.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertSelection.CERT_SELECT_ALLOW_EXPIRED">
            <summary>
            Select expired certificates that meet selection criteria. By default expired certificates are rejected from selection.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertSelection.CERT_SELECT_TRUSTED_ROOT">
            <summary>
            Select certificates on which the error bit in the certificate chain trust status is not set to CERT_TRUST_IS_UNTRUSTED_ROOT,
            CERT_TRUST_IS_PARTIAL_CHAIN, or CERT_TRUST_IS_NOT_TIME_VALID.
            <para>In addition, certificates that have one of the following invalid constraint errors are not selected:</para>
            <para>CERT_TRUST_INVALID_POLICY_CONSTRAINTS</para>
            <para>CERT_TRUST_INVALID_BASIC_CONSTRAINTS</para>
            <para>CERT_TRUST_INVALID_NAME_CONSTRAINTS</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertSelection.CERT_SELECT_DISALLOW_SELFSIGNED">
            <summary>Select certificates that are not self-issued and self-signed.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertSelection.CERT_SELECT_HAS_PRIVATE_KEY">
            <summary>Select certificates that have a value set for the CERT_KEY_PROV_INFO_PROP_ID property of the certificate.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertSelection.CERT_SELECT_HAS_KEY_FOR_SIGNATURE">
            <summary>
            Select certificates on which the value of the dwKeySpec member of the CERT_KEY_PROV_INFO_PROP_ID property is set to AT_SIGNATURE.
            <para>
            If this function is being called as part of a CNG enabled application and the dwKeySpec member of the
            CERT_KEY_PROV_INFO_PROP_ID property is set to -1, select certificates on which the value of the NCRYPT_KEY_USAGE_PROPERTY
            property of the associated private key has the NCRYPT_ALLOW_SIGNING_FLAG set.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertSelection.CERT_SELECT_HAS_KEY_FOR_KEY_EXCHANGE">
            <summary>
            Select certificates on which the value of the dwKeySpec member of the CERT_KEY_PROV_INFO_PROP_ID property is set to AT_KEYEXCHANGE.
            <para>
            If this function is being called as part of a CNG enabled application and the dwKeySpec member of the
            CERT_KEY_PROV_INFO_PROP_ID property is set to -1, select certificates on which either NCRYPT_ALLOW_DECRYPT_FLAG or
            NCRYPT_ALLOW_KEY_AGREEMENT_FLAG is set.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertSelection.CERT_SELECT_HARDWARE_ONLY">
            <summary>
            Select certificates on which the value of the PP_IMPTYPE property of the associated private key provider is set to either
            CRYPT_IMPL_HARDWARE or CRYPT_IMPL_REMOVABLE. (For CNG providers, NCRYPT_IMPL_TYPE_PROPERTY property value MUST have either
            the NCRYPT_IMPL_HARDWARE_FLAG or NCRYPT_IMPL_REMOVABLE_FLAG bit set).
            <para>
            If this function is being called as part of a CNG enabled application, select certificates on which the
            NCRYPT_IMPL_TYPE_PROPERTY property is set to NCRYPT_IMPL_HARDWARE_FLAG or NCRYPT_IMPL_REMOVABLE_FLAG.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertSelection.CERT_SELECT_ALLOW_DUPLICATES">
            <summary>
            Allow the selection of certificates on which the Subject and Subject Alt Name contain the same information and the
            certificate template extension value is equivalent. By default when certificates match this criteria, only the most recent
            certificate is selected.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertSelection.CERT_SELECT_IGNORE_AUTOSELECT">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CryptRetrievalFlags">
            <summary>A set of flags that specify how the information should be retrieved.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptRetrievalFlags.CRYPT_AIA_RETRIEVAL">
            <summary>
            Validates the content retrieved by a wire URL before writing the URL to the cache. The default provider does not support the
            HTTPS protocol for AIA retrievals.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptRetrievalFlags.CRYPT_ASYNC_RETRIEVAL">
            <summary>This value is not supported.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptRetrievalFlags.CRYPT_CACHE_ONLY_RETRIEVAL">
            <summary>Retrieves the encoded bits from the URL cache only. Do not use the wire to retrieve the URL.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptRetrievalFlags.CRYPT_CREATE_NEW_FLUSH_ENTRY">
            <summary>The crypt create new flush entry</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptRetrievalFlags.CRYPT_DONT_CACHE_RESULT">
            <summary>Does not store the retrieved encoded bits to the URL cache. If this flag is not set, the retrieved URL is cached.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptRetrievalFlags.CRYPT_ENABLE_FILE_RETRIEVAL">
            <summary>The crypt enable file retrieval</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptRetrievalFlags.CRYPT_ENABLE_SSL_REVOCATION_RETRIEVAL">
            <summary>The crypt enable SSL revocation retrieval</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptRetrievalFlags.CRYPT_HTTP_POST_RETRIEVAL">
            <summary>
            <para>Uses the POST method instead of the default GET method for HTTP retrievals.</para>
            <para>In a POST URL, additional binary data and header strings are appended to the base URL in the following format:</para>
            <para><em>BaseURL/OptionalURLEscaped&amp;Base64EncodedAdditionalData?OptionalAdditionalHTTPHeaders</em></para>
            <para>
            The following example shows the additional binary data delimited by the last slash mark (/) and a Content-Type header
            delimited by a question mark (?) appended to a base URL.
            </para>
            <para>
            <c>http://ocsp.openvalidation.org/MEIwQDA%2BMDwwOjAJBgUrDgMCGgUABBQdKNEwjytjKBQADcgM61jfflNpyQQUv1NDgnjQnsOA5RtnygUA37lIg6UCAQI%3D?Content-Type: application/ocsp-request</c>
            </para>
            <para>
            When this flag is set, the <strong>CryptRetrieveObjectByUrl</strong> function parses the URL by using the last slash mark
            (/) and question mark (?) delimiters. The string, which is delimited by a slash mark (/), contains an unescaped URL (that
            is, a plain text URL without escape characters or escape sequences) and Base64 data decoded into binary form before being
            passed to the WinHttpSendRequest function as the lpOptional parameter. The string delimited by a question mark (?) is passed
            to the <strong>WinHttpSendRequest</strong> function as the pwszHeaders parameter.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptRetrievalFlags.CRYPT_LDAP_AREC_EXCLUSIVE_RETRIEVAL">
            <summary>
            Performs A-Record-only DNS lookup on the supplied host string, preventing the generation of false DNS queries when resolving
            host names. This flag should be used when passing a host name as opposed to a domain name.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptRetrievalFlags.CRYPT_LDAP_INSERT_ENTRY_ATTRIBUTE">
            <summary>
            Retrieves the entry index and attribute name for each LDAP object. The beginning of each returned BLOB contains the
            following ANSI string:
            <para><c>"entry index in decimal\0attribute name\0"</c></para>
            <para>When this flag is set, pszObjectOid must be NULL so that a BLOB is returned. This flag only applies to the ldap scheme.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptRetrievalFlags.CRYPT_LDAP_SCOPE_BASE_ONLY_RETRIEVAL">
            <summary>Fails if the LDAP search scope is not set to base in the URL. Use with LDAP only.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptRetrievalFlags.CRYPT_LDAP_SIGN_RETRIEVAL">
            <summary>
            Digitally signs all of the LDAP traffic to and from a server by using the Kerberos authentication protocol. This feature
            provides integrity required by some applications.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptRetrievalFlags.CRYPT_NO_AUTH_RETRIEVAL">
            <summary>Inhibits automatic authentication handling.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptRetrievalFlags.CRYPT_NOT_MODIFIED_RETRIEVAL">
            <summary>
            Enables a conditional HTTP URL retrieval. When this flag is set, for a conditional retrieval that returns
            HTTP_STATUS_NOT_MODIFIED, CryptRetrieveObjectByUrl returns TRUE and ppvObject is set to NULL. If pAuxInfo is not NULL,
            dwHttpStatusCode is set to HTTP_STATUS_NOT_MODIFIED. Otherwise, ppvObject is updated for a successful retrieval.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptRetrievalFlags.CRYPT_OFFLINE_CHECK_RETRIEVAL">
            <summary>
            Keeps track of offline failures and delays before hitting the wire on subsequent retrievals. This value is for wire
            retrieval only.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptRetrievalFlags.CRYPT_PROXY_CACHE_RETRIEVAL">
            <summary>
            Enables proxy cache retrieval of an object. If a proxy cache was not explicitly bypassed, fProxyCacheRetrieval is set to
            TRUE in pAuxInfo. This value only applies to HTTP URL retrievals.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptRetrievalFlags.CRYPT_RANDOM_QUERY_STRING_RETRIEVAL">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptRetrievalFlags.CRYPT_RETRIEVE_MULTIPLE_OBJECTS">
            <summary>
            Retrieves multiple objects if available. All objects must be of a homogeneous object type as determined by the value of
            pszObjectOid, unless the object identifier (OID) value is CONTEXT_OID_CAPI2_ANY.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptRetrievalFlags.CRYPT_STICKY_CACHE_RETRIEVAL">
            <summary>Tags the URL as exempt from being flushed from the cache. For more information, see STICKY_CACHE_ENTRY in INTERNET_CACHE_ENTRY_INFO.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptRetrievalFlags.CRYPT_WIRE_ONLY_RETRIEVAL">
            <summary>Retrieves the encoded bits from the wire only. Does not use the URL cache.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertAddCertificateContextToStore(Vanara.PInvoke.Crypt32.HCERTSTORE,Vanara.PInvoke.Crypt32.PCCERT_CONTEXT,Vanara.PInvoke.Crypt32.CertStoreAdd,Vanara.PInvoke.Crypt32.SafePCCERT_CONTEXT@)">
            <summary>The <c>CertAddCertificateContextToStore</c> function adds a certificate context to the certificate store.</summary>
            <param name="hCertStore">Handle of a certificate store.</param>
            <param name="pCertContext">A pointer to the CERT_CONTEXT structure to be added to the store.</param>
            <param name="dwAddDisposition">
            <para>
            Specifies the action to take if a matching certificate or a link to a matching certificate already exists in the store.
            Currently defined disposition values and their uses are as follows.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_STORE_ADD_ALWAYS</term>
            <term>
            The function makes no check for an existing matching certificate or link to a matching certificate. A new certificate is always
            added to the store. This can lead to duplicates in a store.
            </term>
            </item>
            <item>
            <term>CERT_STORE_ADD_NEW</term>
            <term>
            If a matching certificate or a link to a matching certificate exists, the operation fails. GetLastError returns the
            CRYPT_E_EXISTS code.
            </term>
            </item>
            <item>
            <term>CERT_STORE_ADD_NEWER</term>
            <term>
            If a matching certificate or a link to a matching certificate exists and the NotBefore time of the existing context is equal to
            or greater than the NotBefore time of the new context being added, the operation fails and GetLastError returns the
            CRYPT_E_EXISTS code. If the NotBefore time of the existing context is less than the NotBefore time of the new context being
            added, the existing certificate or link is deleted and a new certificate is created and added to the store. If a matching
            certificate or a link to a matching certificate does not exist, a new link is added. If certificate revocation lists (CRLs) or
            certificate trust list (CTLs) are being compared, the ThisUpdate time is used.
            </term>
            </item>
            <item>
            <term>CERT_STORE_ADD_NEWER_INHERIT_PROPERTIES</term>
            <term>
            If a matching certificate or a link to a matching certificate exists and the NotBefore time of the existing context is equal to
            or greater than the NotBefore time of the new context being added, the operation fails and GetLastError returns the
            CRYPT_E_EXISTS code. If the NotBefore time of the existing context is less than the NotBefore time of the new context being
            added, the existing context is deleted before creating and adding the new context. The new added context inherits properties
            from the existing certificate. If CRLs or CTLs are being compared, the ThisUpdate time is used.
            </term>
            </item>
            <item>
            <term>CERT_STORE_ADD_REPLACE_EXISTING</term>
            <term>
            If a link to a matching certificate exists, that existing certificate or link is deleted and a new certificate is created and
            added to the store. If a matching certificate or a link to a matching certificate does not exist, a new link is added.
            </term>
            </item>
            <item>
            <term>CERT_STORE_ADD_REPLACE_EXISTING_INHERIT_PROPERTIES</term>
            <term>
            If a matching certificate exists in the store, the existing context is not replaced. The existing context inherits properties
            from the new certificate.
            </term>
            </item>
            <item>
            <term>CERT_STORE_ADD_USE_EXISTING</term>
            <term>
            If a matching certificate or a link to a matching certificate exists, that existing certificate or link is used and properties
            from the new certificate are added. The function does not fail, but it does not add a new context. If pCertContext is not NULL,
            the existing context is duplicated. If a matching certificate or a link to a matching certificate does not exist, a new
            certificate is added.
            </term>
            </item>
            </list>
            </param>
            <param name="ppStoreContext">
            <para>A pointer to a pointer to the copy to be made of the certificate that was added to the store.</para>
            <para>
            The ppStoreContext parameter can be <c>NULL</c>, indicating that the calling application does not require a copy of the added
            certificate. If a copy is made, it must be freed by using CertFreeCertificateContext.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>
            If the function fails, the return value is <c>FALSE</c>. For extended error information, call GetLastError. Some possible error
            codes follow.
            </para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>CRYPT_E_EXISTS</term>
            <term>
            This value is returned if CERT_STORE_ADD_NEW is set and the certificate already exists in the store, or if CERT_STORE_ADD_NEWER
            is set and a certificate exists in the store with a NotBefore date greater than or equal to the NotBefore date on the
            certificate to be added.
            </term>
            </item>
            <item>
            <term>E_INVALIDARG</term>
            <term>A disposition value that is not valid was specified in the dwAddDisposition parameter.</term>
            </item>
            </list>
            <para>
            Errors from the called functions, CertAddEncodedCertificateToStore and CertSetCertificateContextProperty, can be propagated to
            this function.
            </para>
            </returns>
            <remarks>
            <para>
            The certificate context is not duplicated using CertDuplicateCertificateContext. Instead, the function creates a new copy of the
            context and adds it to the store.
            </para>
            <para>
            In addition to the encoded certificate, CertDuplicateCertificateContext also copies the context's properties, with the exception
            of the CERT_KEY_PROV_HANDLE_PROP_ID and CERT_KEY_CONTEXT_PROP_ID properties.
            </para>
            <para>To remove the certificate context from the certificate store, use the CertDeleteCertificateFromStore function.</para>
            <para>
            <c>Note</c> The order of the certificate context may not be preserved within the store. To access a specific certificate you
            must iterate across the certificates in the store.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertAddCertificateContextToStore(Vanara.PInvoke.Crypt32.HCERTSTORE,Vanara.PInvoke.Crypt32.PCCERT_CONTEXT,Vanara.PInvoke.Crypt32.CertStoreAdd,System.IntPtr)">
            <summary>The <c>CertAddCertificateContextToStore</c> function adds a certificate context to the certificate store.</summary>
            <param name="hCertStore">Handle of a certificate store.</param>
            <param name="pCertContext">A pointer to the CERT_CONTEXT structure to be added to the store.</param>
            <param name="dwAddDisposition">
            <para>
            Specifies the action to take if a matching certificate or a link to a matching certificate already exists in the store.
            Currently defined disposition values and their uses are as follows.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_STORE_ADD_ALWAYS</term>
            <term>
            The function makes no check for an existing matching certificate or link to a matching certificate. A new certificate is always
            added to the store. This can lead to duplicates in a store.
            </term>
            </item>
            <item>
            <term>CERT_STORE_ADD_NEW</term>
            <term>
            If a matching certificate or a link to a matching certificate exists, the operation fails. GetLastError returns the
            CRYPT_E_EXISTS code.
            </term>
            </item>
            <item>
            <term>CERT_STORE_ADD_NEWER</term>
            <term>
            If a matching certificate or a link to a matching certificate exists and the NotBefore time of the existing context is equal to
            or greater than the NotBefore time of the new context being added, the operation fails and GetLastError returns the
            CRYPT_E_EXISTS code. If the NotBefore time of the existing context is less than the NotBefore time of the new context being
            added, the existing certificate or link is deleted and a new certificate is created and added to the store. If a matching
            certificate or a link to a matching certificate does not exist, a new link is added. If certificate revocation lists (CRLs) or
            certificate trust list (CTLs) are being compared, the ThisUpdate time is used.
            </term>
            </item>
            <item>
            <term>CERT_STORE_ADD_NEWER_INHERIT_PROPERTIES</term>
            <term>
            If a matching certificate or a link to a matching certificate exists and the NotBefore time of the existing context is equal to
            or greater than the NotBefore time of the new context being added, the operation fails and GetLastError returns the
            CRYPT_E_EXISTS code. If the NotBefore time of the existing context is less than the NotBefore time of the new context being
            added, the existing context is deleted before creating and adding the new context. The new added context inherits properties
            from the existing certificate. If CRLs or CTLs are being compared, the ThisUpdate time is used.
            </term>
            </item>
            <item>
            <term>CERT_STORE_ADD_REPLACE_EXISTING</term>
            <term>
            If a link to a matching certificate exists, that existing certificate or link is deleted and a new certificate is created and
            added to the store. If a matching certificate or a link to a matching certificate does not exist, a new link is added.
            </term>
            </item>
            <item>
            <term>CERT_STORE_ADD_REPLACE_EXISTING_INHERIT_PROPERTIES</term>
            <term>
            If a matching certificate exists in the store, the existing context is not replaced. The existing context inherits properties
            from the new certificate.
            </term>
            </item>
            <item>
            <term>CERT_STORE_ADD_USE_EXISTING</term>
            <term>
            If a matching certificate or a link to a matching certificate exists, that existing certificate or link is used and properties
            from the new certificate are added. The function does not fail, but it does not add a new context. If pCertContext is not NULL,
            the existing context is duplicated. If a matching certificate or a link to a matching certificate does not exist, a new
            certificate is added.
            </term>
            </item>
            </list>
            </param>
            <param name="ppStoreContext">
            <para>A pointer to a pointer to the copy to be made of the certificate that was added to the store.</para>
            <para>
            The ppStoreContext parameter can be <c>NULL</c>, indicating that the calling application does not require a copy of the added
            certificate. If a copy is made, it must be freed by using CertFreeCertificateContext.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>
            If the function fails, the return value is <c>FALSE</c>. For extended error information, call GetLastError. Some possible error
            codes follow.
            </para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>CRYPT_E_EXISTS</term>
            <term>
            This value is returned if CERT_STORE_ADD_NEW is set and the certificate already exists in the store, or if CERT_STORE_ADD_NEWER
            is set and a certificate exists in the store with a NotBefore date greater than or equal to the NotBefore date on the
            certificate to be added.
            </term>
            </item>
            <item>
            <term>E_INVALIDARG</term>
            <term>A disposition value that is not valid was specified in the dwAddDisposition parameter.</term>
            </item>
            </list>
            <para>
            Errors from the called functions, CertAddEncodedCertificateToStore and CertSetCertificateContextProperty, can be propagated to
            this function.
            </para>
            </returns>
            <remarks>
            <para>
            The certificate context is not duplicated using CertDuplicateCertificateContext. Instead, the function creates a new copy of the
            context and adds it to the store.
            </para>
            <para>
            In addition to the encoded certificate, CertDuplicateCertificateContext also copies the context's properties, with the exception
            of the CERT_KEY_PROV_HANDLE_PROP_ID and CERT_KEY_CONTEXT_PROP_ID properties.
            </para>
            <para>To remove the certificate context from the certificate store, use the CertDeleteCertificateFromStore function.</para>
            <para>
            <c>Note</c> The order of the certificate context may not be preserved within the store. To access a specific certificate you
            must iterate across the certificates in the store.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertAddCertificateLinkToStore(Vanara.PInvoke.Crypt32.HCERTSTORE,Vanara.PInvoke.Crypt32.PCCERT_CONTEXT,Vanara.PInvoke.Crypt32.CertStoreAdd,Vanara.PInvoke.Crypt32.SafePCCERT_CONTEXT@)">
            <summary>
            The <c>CertAddCertificateLinkToStore</c> function adds a link in a certificate store to a certificate context in a different
            store. Instead of creating and adding a duplicate of the certificate context, this function adds a link to the original certificate.
            </summary>
            <param name="hCertStore">A handle to the certificate store where the link is to be added.</param>
            <param name="pCertContext">A pointer to the CERT_CONTEXT structure to be linked.</param>
            <param name="dwAddDisposition">
            <para>
            Specifies the action if a matching certificate or a link to a matching certificate already exists in the store. Currently
            defined disposition values and their uses are as follows.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_STORE_ADD_ALWAYS</term>
            <term>
            The function makes no check for an existing matching certificate or link to a matching certificate. A new certificate is always
            added to the store. This can lead to duplicates in a store.
            </term>
            </item>
            <item>
            <term>CERT_STORE_ADD_NEW</term>
            <term>
            If a matching certificate or a link to a matching certificate exists, the operation fails. GetLastError returns the
            CRYPT_E_EXISTS code.
            </term>
            </item>
            <item>
            <term>CERT_STORE_ADD_REPLACE_EXISTING</term>
            <term>
            If a link to a matching certificate exists, that existing link is deleted and a new link is created and added to the store. If
            no matching certificate or link to a matching certificate exists, one is added.
            </term>
            </item>
            <item>
            <term>CERT_STORE_ADD_USE_EXISTING</term>
            <term>
            If a matching certificate or a link to a matching certificate exists, the existing certificate is used. The function does not
            fail, but no new link is added. If no matching certificate or link to a matching certificate exists, a new link is added.
            </term>
            </item>
            </list>
            </param>
            <param name="ppStoreContext">
            A pointer to a pointer to a copy of the link created. The ppStoreContext parameter can be <c>NULL</c> to indicate that a copy of
            the link is not needed. If a copy of the link is created, that copy must be freed using the CertFreeCertificateContext function.
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>
            If the function fails, the return value is <c>FALSE</c>. For extended error information, call GetLastError. Some possible error
            codes follow.
            </para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>CRYPT_E_EXISTS</term>
            <term>For a dwAddDisposition parameter of CERT_STORE_ADD_NEW, the certificate already exists in the store.</term>
            </item>
            <item>
            <term>E_INVALIDARG</term>
            <term>A disposition value that is not valid was specified in the dwAddDisposition parameter.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            Because the link provides access to the original certificate context, setting an extended property in the linked certificate
            context changes that extended property in the certificate's original location and in any other links to that certificate.
            </para>
            <para>
            Links cannot be added to a store opened as a collection. Stores opened as collections include all stores opened with
            CertOpenSystemStore or CertOpenStore using CERT_STORE_PROV_SYSTEM or CERT_STORE_PROV_COLLECTION. For more information, see CertAddStoreToCollection.
            </para>
            <para>
            If links are used and CertCloseStore is called with CERT_CLOSE_STORE_FORCE_FLAG, the store that uses links must be closed before
            the store that contains the original contexts is closed. If CERT_CLOSE_STORE_FORCE_FLAG is not used, the two stores can be
            closed in either order.
            </para>
            <para>To remove the certificate context link from the certificate store, use the CertDeleteCertificateFromStore function.</para>
            <para>Examples</para>
            <para>
            For an example that uses this function, see Example C Program: Certificate Store Operations. For additional code that uses this
            function, see Example C Program: Collection and Sibling Certificate Store Operations.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertAddCertificateLinkToStore(Vanara.PInvoke.Crypt32.HCERTSTORE,Vanara.PInvoke.Crypt32.PCCERT_CONTEXT,Vanara.PInvoke.Crypt32.CertStoreAdd,System.IntPtr)">
            <summary>
            The <c>CertAddCertificateLinkToStore</c> function adds a link in a certificate store to a certificate context in a different
            store. Instead of creating and adding a duplicate of the certificate context, this function adds a link to the original certificate.
            </summary>
            <param name="hCertStore">A handle to the certificate store where the link is to be added.</param>
            <param name="pCertContext">A pointer to the CERT_CONTEXT structure to be linked.</param>
            <param name="dwAddDisposition">
            <para>
            Specifies the action if a matching certificate or a link to a matching certificate already exists in the store. Currently
            defined disposition values and their uses are as follows.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_STORE_ADD_ALWAYS</term>
            <term>
            The function makes no check for an existing matching certificate or link to a matching certificate. A new certificate is always
            added to the store. This can lead to duplicates in a store.
            </term>
            </item>
            <item>
            <term>CERT_STORE_ADD_NEW</term>
            <term>
            If a matching certificate or a link to a matching certificate exists, the operation fails. GetLastError returns the
            CRYPT_E_EXISTS code.
            </term>
            </item>
            <item>
            <term>CERT_STORE_ADD_REPLACE_EXISTING</term>
            <term>
            If a link to a matching certificate exists, that existing link is deleted and a new link is created and added to the store. If
            no matching certificate or link to a matching certificate exists, one is added.
            </term>
            </item>
            <item>
            <term>CERT_STORE_ADD_USE_EXISTING</term>
            <term>
            If a matching certificate or a link to a matching certificate exists, the existing certificate is used. The function does not
            fail, but no new link is added. If no matching certificate or link to a matching certificate exists, a new link is added.
            </term>
            </item>
            </list>
            </param>
            <param name="ppStoreContext">
            A pointer to a pointer to a copy of the link created. The ppStoreContext parameter can be <c>NULL</c> to indicate that a copy of
            the link is not needed. If a copy of the link is created, that copy must be freed using the CertFreeCertificateContext function.
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>
            If the function fails, the return value is <c>FALSE</c>. For extended error information, call GetLastError. Some possible error
            codes follow.
            </para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>CRYPT_E_EXISTS</term>
            <term>For a dwAddDisposition parameter of CERT_STORE_ADD_NEW, the certificate already exists in the store.</term>
            </item>
            <item>
            <term>E_INVALIDARG</term>
            <term>A disposition value that is not valid was specified in the dwAddDisposition parameter.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            Because the link provides access to the original certificate context, setting an extended property in the linked certificate
            context changes that extended property in the certificate's original location and in any other links to that certificate.
            </para>
            <para>
            Links cannot be added to a store opened as a collection. Stores opened as collections include all stores opened with
            CertOpenSystemStore or CertOpenStore using CERT_STORE_PROV_SYSTEM or CERT_STORE_PROV_COLLECTION. For more information, see CertAddStoreToCollection.
            </para>
            <para>
            If links are used and CertCloseStore is called with CERT_CLOSE_STORE_FORCE_FLAG, the store that uses links must be closed before
            the store that contains the original contexts is closed. If CERT_CLOSE_STORE_FORCE_FLAG is not used, the two stores can be
            closed in either order.
            </para>
            <para>To remove the certificate context link from the certificate store, use the CertDeleteCertificateFromStore function.</para>
            <para>Examples</para>
            <para>
            For an example that uses this function, see Example C Program: Certificate Store Operations. For additional code that uses this
            function, see Example C Program: Collection and Sibling Certificate Store Operations.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertAddEncodedCertificateToStore(Vanara.PInvoke.Crypt32.HCERTSTORE,Vanara.PInvoke.Crypt32.CertEncodingType,System.IntPtr,System.UInt32,Vanara.PInvoke.Crypt32.CertStoreAdd,Vanara.PInvoke.Crypt32.SafePCCERT_CONTEXT@)">
            <summary>
            <para>
            The <c>CertAddEncodedCertificateToStore</c> function creates a certificate context from an encoded certificate and adds it to
            the certificate store. The context created does not include any extended properties.
            </para>
            <para>
            The <c>CertAddEncodedCertificateToStore</c> function also makes a copy of the encoded certificate before adding the certificate
            to the store.
            </para>
            </summary>
            <param name="hCertStore">A handle to the certificate store.</param>
            <param name="dwCertEncodingType">
            <para>
            Specifies the type of encoding used. It is always acceptable to specify both the certificate and message encoding types by
            combining them with a bitwise- <c>OR</c> operation as shown in the following example:
            </para>
            <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are:</para>
            <list type="bullet">
            <item>
            <term>X509_ASN_ENCODING</term>
            </item>
            <item>
            <term>PKCS_7_ASN_ENCODING</term>
            </item>
            </list>
            </param>
            <param name="pbCertEncoded">
            A pointer to a buffer containing the encoded certificate that is to be added to the certificate store.
            </param>
            <param name="cbCertEncoded">The size, in bytes, of the pbCertEncoded buffer.</param>
            <param name="dwAddDisposition">
            <para>
            Specifies the action to take if a matching certificate or link to a matching certificate exists in the store. Currently defined
            disposition values and their uses are as follows.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_STORE_ADD_ALWAYS</term>
            <term>
            The function makes no check for an existing matching certificate or link to a matching certificate. A new certificate is always
            added to the store. This can lead to duplicates in a store.
            </term>
            </item>
            <item>
            <term>CERT_STORE_ADD_NEW</term>
            <term>
            If a matching certificate or a link to a matching certificate exists in the store, the operation fails. GetLastError returns the
            CRYPT_E_EXISTS code.
            </term>
            </item>
            <item>
            <term>CERT_STORE_ADD_REPLACE_EXISTING</term>
            <term>
            If a matching certificate or link to a matching certificate exists in the store, the existing certificate or link is deleted and
            a new certificate is created and added to the store. If a matching certificate or link to a matching certificate does not exist,
            a new certificate is created and added to the store.
            </term>
            </item>
            <item>
            <term>CERT_STORE_ADD_REPLACE_EXISTING_INHERIT_PROPERTIES</term>
            <term>
            If a matching certificate exists in the store, that existing context is deleted before creating and adding the new context. The
            new context inherits properties from the existing certificate.
            </term>
            </item>
            <item>
            <term>CERT_STORE_ADD_USE_EXISTING</term>
            <term>
            If a matching certificate or a link to a matching certificate exists, that existing certificate or link is used and properties
            from the new certificate are added. The function does not fail, but it does not add a new context. If ppCertContext is not NULL,
            the existing context is duplicated. If a matching certificate or link to a matching certificate does not exist, a new
            certificate is added.
            </term>
            </item>
            </list>
            </param>
            <param name="ppCertContext">
            A pointer to a pointer to the decoded certificate context. This is an optional parameter that can be <c>NULL</c>, indicating
            that the calling application does not require a copy of the new or existing certificate. When a copy is made, its context must
            be freed by using CertFreeCertificateContext.
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>
            If the function fails, the return value is <c>FALSE</c>. For extended error information, call GetLastError. Some possible error
            codes follow.
            </para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>CRYPT_E_EXISTS</term>
            <term>
            This code is returned if CERT_STORE_ADD_NEW is set and the certificate already exists in the store, or if CERT_STORE_ADD_NEWER
            is set and there is a certificate in the store with a NotBefore date greater than or equal to the NotBefore date on the
            certificate to be added.
            </term>
            </item>
            <item>
            <term>E_INVALIDARG</term>
            <term>
            A disposition value that is not valid was specified in the dwAddDisposition parameter, or a certificate encoding type that is
            not valid was specified. Currently, only the X509_ASN_ENCODING type is supported.
            </term>
            </item>
            </list>
            <para>
            If the function fails, GetLastError returns an Abstract Syntax Notation One (ASN.1) encoding/decoding error. For information
            about these errors, see ASN.1 Encoding/Decoding Return Values.
            </para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertAddEncodedCertificateToStore(Vanara.PInvoke.Crypt32.HCERTSTORE,Vanara.PInvoke.Crypt32.CertEncodingType,System.IntPtr,System.UInt32,Vanara.PInvoke.Crypt32.CertStoreAdd,System.IntPtr)">
            <summary>
            <para>
            The <c>CertAddEncodedCertificateToStore</c> function creates a certificate context from an encoded certificate and adds it to
            the certificate store. The context created does not include any extended properties.
            </para>
            <para>
            The <c>CertAddEncodedCertificateToStore</c> function also makes a copy of the encoded certificate before adding the certificate
            to the store.
            </para>
            </summary>
            <param name="hCertStore">A handle to the certificate store.</param>
            <param name="dwCertEncodingType">
            <para>
            Specifies the type of encoding used. It is always acceptable to specify both the certificate and message encoding types by
            combining them with a bitwise- <c>OR</c> operation as shown in the following example:
            </para>
            <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are:</para>
            <list type="bullet">
            <item>
            <term>X509_ASN_ENCODING</term>
            </item>
            <item>
            <term>PKCS_7_ASN_ENCODING</term>
            </item>
            </list>
            </param>
            <param name="pbCertEncoded">
            A pointer to a buffer containing the encoded certificate that is to be added to the certificate store.
            </param>
            <param name="cbCertEncoded">The size, in bytes, of the pbCertEncoded buffer.</param>
            <param name="dwAddDisposition">
            <para>
            Specifies the action to take if a matching certificate or link to a matching certificate exists in the store. Currently defined
            disposition values and their uses are as follows.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_STORE_ADD_ALWAYS</term>
            <term>
            The function makes no check for an existing matching certificate or link to a matching certificate. A new certificate is always
            added to the store. This can lead to duplicates in a store.
            </term>
            </item>
            <item>
            <term>CERT_STORE_ADD_NEW</term>
            <term>
            If a matching certificate or a link to a matching certificate exists in the store, the operation fails. GetLastError returns the
            CRYPT_E_EXISTS code.
            </term>
            </item>
            <item>
            <term>CERT_STORE_ADD_REPLACE_EXISTING</term>
            <term>
            If a matching certificate or link to a matching certificate exists in the store, the existing certificate or link is deleted and
            a new certificate is created and added to the store. If a matching certificate or link to a matching certificate does not exist,
            a new certificate is created and added to the store.
            </term>
            </item>
            <item>
            <term>CERT_STORE_ADD_REPLACE_EXISTING_INHERIT_PROPERTIES</term>
            <term>
            If a matching certificate exists in the store, that existing context is deleted before creating and adding the new context. The
            new context inherits properties from the existing certificate.
            </term>
            </item>
            <item>
            <term>CERT_STORE_ADD_USE_EXISTING</term>
            <term>
            If a matching certificate or a link to a matching certificate exists, that existing certificate or link is used and properties
            from the new certificate are added. The function does not fail, but it does not add a new context. If ppCertContext is not NULL,
            the existing context is duplicated. If a matching certificate or link to a matching certificate does not exist, a new
            certificate is added.
            </term>
            </item>
            </list>
            </param>
            <param name="ppCertContext">
            A pointer to a pointer to the decoded certificate context. This is an optional parameter that can be <c>NULL</c>, indicating
            that the calling application does not require a copy of the new or existing certificate. When a copy is made, its context must
            be freed by using CertFreeCertificateContext.
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>
            If the function fails, the return value is <c>FALSE</c>. For extended error information, call GetLastError. Some possible error
            codes follow.
            </para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>CRYPT_E_EXISTS</term>
            <term>
            This code is returned if CERT_STORE_ADD_NEW is set and the certificate already exists in the store, or if CERT_STORE_ADD_NEWER
            is set and there is a certificate in the store with a NotBefore date greater than or equal to the NotBefore date on the
            certificate to be added.
            </term>
            </item>
            <item>
            <term>E_INVALIDARG</term>
            <term>
            A disposition value that is not valid was specified in the dwAddDisposition parameter, or a certificate encoding type that is
            not valid was specified. Currently, only the X509_ASN_ENCODING type is supported.
            </term>
            </item>
            </list>
            <para>
            If the function fails, GetLastError returns an Abstract Syntax Notation One (ASN.1) encoding/decoding error. For information
            about these errors, see ASN.1 Encoding/Decoding Return Values.
            </para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertAddRefServerOcspResponse(Vanara.PInvoke.Crypt32.HCERT_SERVER_OCSP_RESPONSE)">
            <summary>
            The <c>CertAddRefServerOcspResponse</c> function increments the reference count for an <c>HCERT_SERVER_OCSP_RESPONSE</c> handle.
            </summary>
            <param name="hServerOcspResponse">A handle to an <c>HCERT_SERVER_OCSP_RESPONSE</c> returned by CertOpenServerOcspResponse.</param>
            <returns>This function has no return value.</returns>
            <remarks>Each CertOpenServerOcspResponse and <c>CertAddRefServerOcspResponse</c> requires a corresponding CertCloseServerOcspResponse.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertAddRefServerOcspResponseContext(Vanara.PInvoke.Crypt32.PCCERT_SERVER_OCSP_RESPONSE_CONTEXT)">
            <summary>
            The <c>CertAddRefServerOcspResponseContext</c> function increments the reference count for a CERT_SERVER_OCSP_RESPONSE_CONTEXT structure.
            </summary>
            <param name="pServerOcspResponseContext">A pointer to a CERT_SERVER_OCSP_RESPONSE_CONTEXT returned by CertGetServerOcspResponseContext.</param>
            <returns>The function has no return value.</returns>
            <remarks>
            Each call to CertGetServerOcspResponseContext and <c>CertAddRefServerOcspResponseContext</c> requires a corresponding call to CertFreeServerOcspResponseContext.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertCloseServerOcspResponse(Vanara.PInvoke.Crypt32.HCERT_SERVER_OCSP_RESPONSE,System.UInt32)">
            <summary>
            The <c>CertCloseServerOcspResponse</c> function closes an online certificate status protocol (OCSP) server response handle.
            </summary>
            <param name="hServerOcspResponse">The handle to close for an OCSP server response.</param>
            <param name="dwFlags">This parameter is not used and must be zero.</param>
            <returns>This function does not return a value.</returns>
            <remarks>
            The <c>CertCloseServerOcspResponse</c> function closes a handle returned by either the CertOpenServerOcspResponse or
            CertAddRefServerOcspResponse function.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertCreateCertificateContext(Vanara.PInvoke.Crypt32.CertEncodingType,System.IntPtr,System.UInt32)">
            <summary>
            The <c>CertCreateCertificateContext</c> function creates a certificate context from an encoded certificate. The created context
            is not persisted to a certificate store. The function makes a copy of the encoded certificate within the created context.
            </summary>
            <param name="dwCertEncodingType">
            <para>
            Specifies the type of encoding used. It is always acceptable to specify both the certificate and message encoding types by
            combining them with a bitwise- <c>OR</c> operation as shown in the following example:
            </para>
            <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are:</para>
            <list type="bullet">
            <item>
            <term>X509_ASN_ENCODING</term>
            </item>
            <item>
            <term>PKCS_7_ASN_ENCODING</term>
            </item>
            </list>
            </param>
            <param name="pbCertEncoded">A pointer to a buffer that contains the encoded certificate from which the context is to be created.</param>
            <param name="cbCertEncoded">The size, in bytes, of the pbCertEncoded buffer.</param>
            <returns>
            <para>
            If the function succeeds, the function returns a pointer to a read-only CERT_CONTEXT. When you have finished using the
            certificate context, free it by calling the CertFreeCertificateContext function.
            </para>
            <para>
            If the function is unable to decode and create the certificate context, it returns <c>NULL</c>. For extended error information,
            call GetLastError. Some possible error codes follow.
            </para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>E_INVALIDARG</term>
            <term>A certificate encoding type that is not valid was specified. Currently, only the X509_ASN_ENCODING type is supported.</term>
            </item>
            </list>
            <para>
            If the function fails, GetLastError may return an Abstract Syntax Notation One (ASN.1) encoding/decoding error. For information
            about these errors, see ASN.1 Encoding/Decoding Return Values.
            </para>
            </returns>
            <remarks>
            <para>
            The CERT_CONTEXT must be freed by calling CertFreeCertificateContext. CertDuplicateCertificateContext can be called to make a
            duplicate. CertSetCertificateContextProperty and CertGetCertificateContextProperty can be called to store and read properties
            for the certificate.
            </para>
            <para>Examples</para>
            <para>
            The following example shows creating a certificate context from an encoded certificate. The created context is not put in a
            certificate store. For another example that uses this function, see Example C Program: Certificate Store Operations.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertCreateSelfSignCertificate(System.IntPtr,Vanara.PInvoke.Crypt32.CRYPTOAPI_BLOB@,Vanara.PInvoke.Crypt32.CertCreateSelfSignFlags,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            The <c>CertCreateSelfSignCertificate</c> function builds a self-signed certificate and returns a pointer to a CERT_CONTEXT
            structure that represents the certificate.
            </summary>
            <param name="hCryptProvOrNCryptKey">
            <para>
            A handle of a cryptographic provider used to sign the certificate created. If <c>NULL</c>, information from the pKeyProvInfo
            parameter is used to acquire the needed handle. If pKeyProvInfo is also <c>NULL</c>, the default provider type, PROV_RSA_FULL
            provider type, the default key specification, AT_SIGNATURE, and a newly created key container with a unique container name are used.
            </para>
            <para>
            This handle must be an HCRYPTPROV handle that has been created by using the CryptAcquireContext function or an
            <c>NCRYPT_KEY_HANDLE</c> handle that has been created by using the NCryptOpenKey function. New applications should always pass
            in the <c>NCRYPT_KEY_HANDLE</c> handle of a CNG cryptographic service provider (CSP).
            </para>
            </param>
            <param name="pSubjectIssuerBlob">
            A pointer to a BLOB that contains the distinguished name (DN) for the certificate subject. This parameter cannot be <c>NULL</c>.
            Minimally, a pointer to an empty DN must be provided. This BLOB is normally created by using the CertStrToName function. It can
            also be created by using the CryptEncodeObject function and specifying either the X509_NAME or X509_UNICODE_NAME StructType.
            </param>
            <param name="dwFlags">
            <para>
            A set of flags that override the default behavior of this function. This can be zero or a combination of one or more of the
            following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_CREATE_SELFSIGN_NO_KEY_INFO 2</term>
            <term>
            By default, the returned PCCERT_CONTEXT references the private keys by setting the CERT_KEY_PROV_INFO_PROP_ID. If you do not
            want the returned PCCERT_CONTEXT to reference private keys by setting the CERT_KEY_PROV_INFO_PROP_ID, specify CERT_CREATE_SELFSIGN_NO_KEY_INFO.
            </term>
            </item>
            <item>
            <term>CERT_CREATE_SELFSIGN_NO_SIGN 1</term>
            <term>
            By default, the certificate being created is signed. If the certificate being created is only a dummy placeholder, the
            certificate might not need to be signed. Signing of the certificate is skipped if CERT_CREATE_SELFSIGN_NO_SIGN is specified.
            </term>
            </item>
            </list>
            </param>
            <param name="pKeyProvInfo">
            <para>
            A pointer to a CRYPT_KEY_PROV_INFO structure. Before a certificate is created, the CSP is queried for the key provider, key
            provider type, and the key container name. If the CSP queried does not support these queries, the function fails. If the default
            provider does not support these queries, a pKeyProvInfo value must be specified. The RSA BASE does support these queries.
            </para>
            <para>
            If the pKeyProvInfo parameter is not <c>NULL</c>, the corresponding values are set in the <c>CERT_KEY_PROV_INFO_PROP_ID</c>
            value of the generated certificate. You must ensure that all parameters of the supplied structure are correctly specified.
            </para>
            </param>
            <param name="pSignatureAlgorithm">
            A pointer to a CRYPT_ALGORITHM_IDENTIFIER structure. If <c>NULL</c>, the default algorithm, SHA1RSA, is used.
            </param>
            <param name="pStartTime">A pointer to a SYSTEMTIME structure. If <c>NULL</c>, the system current time is used by default.</param>
            <param name="pEndTime">
            A pointer to a SYSTEMTIME structure. If <c>NULL</c>, the pStartTime value plus one year will be used by default.
            </param>
            <param name="pExtensions">
            A pointer to a CERT_EXTENSIONS array of CERT_EXTENSION structures. By default, the array is empty. An alternate subject name, if
            desired, can be specified as one of these extensions.
            </param>
            <returns>
            If the function succeeds, a PCCERT_CONTEXT variable that points to the created certificate is returned. If the function fails,
            it returns <c>NULL</c>. For extended error information, call GetLastError.
            </returns>
            <remarks>
            As the pEndTime must be a valid date, and is automatically generated if it is not supplied by the user, unexpected failures may
            easily be caused when this API is called on a leap day without accompanying app logic to compensate. For more information,
            please see leap year readiness.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertCreateSelfSignCertificate(System.IntPtr,Vanara.PInvoke.Crypt32.CRYPTOAPI_BLOB@,Vanara.PInvoke.Crypt32.CertCreateSelfSignFlags,Vanara.PInvoke.Crypt32.CRYPT_KEY_PROV_INFO@,Vanara.PInvoke.Crypt32.CRYPT_ALGORITHM_IDENTIFIER@,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            The <c>CertCreateSelfSignCertificate</c> function builds a self-signed certificate and returns a pointer to a CERT_CONTEXT
            structure that represents the certificate.
            </summary>
            <param name="hCryptProvOrNCryptKey">
            <para>
            A handle of a cryptographic provider used to sign the certificate created. If <c>NULL</c>, information from the pKeyProvInfo
            parameter is used to acquire the needed handle. If pKeyProvInfo is also <c>NULL</c>, the default provider type, PROV_RSA_FULL
            provider type, the default key specification, AT_SIGNATURE, and a newly created key container with a unique container name are used.
            </para>
            <para>
            This handle must be an HCRYPTPROV handle that has been created by using the CryptAcquireContext function or an
            <c>NCRYPT_KEY_HANDLE</c> handle that has been created by using the NCryptOpenKey function. New applications should always pass
            in the <c>NCRYPT_KEY_HANDLE</c> handle of a CNG cryptographic service provider (CSP).
            </para>
            </param>
            <param name="pSubjectIssuerBlob">
            A pointer to a BLOB that contains the distinguished name (DN) for the certificate subject. This parameter cannot be <c>NULL</c>.
            Minimally, a pointer to an empty DN must be provided. This BLOB is normally created by using the CertStrToName function. It can
            also be created by using the CryptEncodeObject function and specifying either the X509_NAME or X509_UNICODE_NAME StructType.
            </param>
            <param name="dwFlags">
            <para>
            A set of flags that override the default behavior of this function. This can be zero or a combination of one or more of the
            following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_CREATE_SELFSIGN_NO_KEY_INFO 2</term>
            <term>
            By default, the returned PCCERT_CONTEXT references the private keys by setting the CERT_KEY_PROV_INFO_PROP_ID. If you do not
            want the returned PCCERT_CONTEXT to reference private keys by setting the CERT_KEY_PROV_INFO_PROP_ID, specify CERT_CREATE_SELFSIGN_NO_KEY_INFO.
            </term>
            </item>
            <item>
            <term>CERT_CREATE_SELFSIGN_NO_SIGN 1</term>
            <term>
            By default, the certificate being created is signed. If the certificate being created is only a dummy placeholder, the
            certificate might not need to be signed. Signing of the certificate is skipped if CERT_CREATE_SELFSIGN_NO_SIGN is specified.
            </term>
            </item>
            </list>
            </param>
            <param name="pKeyProvInfo">
            <para>
            A pointer to a CRYPT_KEY_PROV_INFO structure. Before a certificate is created, the CSP is queried for the key provider, key
            provider type, and the key container name. If the CSP queried does not support these queries, the function fails. If the default
            provider does not support these queries, a pKeyProvInfo value must be specified. The RSA BASE does support these queries.
            </para>
            <para>
            If the pKeyProvInfo parameter is not <c>NULL</c>, the corresponding values are set in the <c>CERT_KEY_PROV_INFO_PROP_ID</c>
            value of the generated certificate. You must ensure that all parameters of the supplied structure are correctly specified.
            </para>
            </param>
            <param name="pSignatureAlgorithm">
            A pointer to a CRYPT_ALGORITHM_IDENTIFIER structure. If <c>NULL</c>, the default algorithm, SHA1RSA, is used.
            </param>
            <param name="pStartTime">A pointer to a SYSTEMTIME structure. If <c>NULL</c>, the system current time is used by default.</param>
            <param name="pEndTime">
            A pointer to a SYSTEMTIME structure. If <c>NULL</c>, the pStartTime value plus one year will be used by default.
            </param>
            <param name="pExtensions">
            A pointer to a CERT_EXTENSIONS array of CERT_EXTENSION structures. By default, the array is empty. An alternate subject name, if
            desired, can be specified as one of these extensions.
            </param>
            <returns>
            If the function succeeds, a PCCERT_CONTEXT variable that points to the created certificate is returned. If the function fails,
            it returns <c>NULL</c>. For extended error information, call GetLastError.
            </returns>
            <remarks>
            As the pEndTime must be a valid date, and is automatically generated if it is not supplied by the user, unexpected failures may
            easily be caused when this API is called on a leap day without accompanying app logic to compensate. For more information,
            please see leap year readiness.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertCreateSelfSignCertificate(System.IntPtr,Vanara.PInvoke.Crypt32.CRYPTOAPI_BLOB@,Vanara.PInvoke.Crypt32.CertCreateSelfSignFlags,Vanara.PInvoke.Crypt32.CRYPT_KEY_PROV_INFO@,Vanara.PInvoke.Crypt32.CRYPT_ALGORITHM_IDENTIFIER@,Vanara.PInvoke.SYSTEMTIME@,Vanara.PInvoke.SYSTEMTIME@,Vanara.PInvoke.Crypt32.CERT_EXTENSIONS@)">
            <summary>
            The <c>CertCreateSelfSignCertificate</c> function builds a self-signed certificate and returns a pointer to a CERT_CONTEXT
            structure that represents the certificate.
            </summary>
            <param name="hCryptProvOrNCryptKey">
            <para>
            A handle of a cryptographic provider used to sign the certificate created. If <c>NULL</c>, information from the pKeyProvInfo
            parameter is used to acquire the needed handle. If pKeyProvInfo is also <c>NULL</c>, the default provider type, PROV_RSA_FULL
            provider type, the default key specification, AT_SIGNATURE, and a newly created key container with a unique container name are used.
            </para>
            <para>
            This handle must be an HCRYPTPROV handle that has been created by using the CryptAcquireContext function or an
            <c>NCRYPT_KEY_HANDLE</c> handle that has been created by using the NCryptOpenKey function. New applications should always pass
            in the <c>NCRYPT_KEY_HANDLE</c> handle of a CNG cryptographic service provider (CSP).
            </para>
            </param>
            <param name="pSubjectIssuerBlob">
            A pointer to a BLOB that contains the distinguished name (DN) for the certificate subject. This parameter cannot be <c>NULL</c>.
            Minimally, a pointer to an empty DN must be provided. This BLOB is normally created by using the CertStrToName function. It can
            also be created by using the CryptEncodeObject function and specifying either the X509_NAME or X509_UNICODE_NAME StructType.
            </param>
            <param name="dwFlags">
            <para>
            A set of flags that override the default behavior of this function. This can be zero or a combination of one or more of the
            following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_CREATE_SELFSIGN_NO_KEY_INFO 2</term>
            <term>
            By default, the returned PCCERT_CONTEXT references the private keys by setting the CERT_KEY_PROV_INFO_PROP_ID. If you do not
            want the returned PCCERT_CONTEXT to reference private keys by setting the CERT_KEY_PROV_INFO_PROP_ID, specify CERT_CREATE_SELFSIGN_NO_KEY_INFO.
            </term>
            </item>
            <item>
            <term>CERT_CREATE_SELFSIGN_NO_SIGN 1</term>
            <term>
            By default, the certificate being created is signed. If the certificate being created is only a dummy placeholder, the
            certificate might not need to be signed. Signing of the certificate is skipped if CERT_CREATE_SELFSIGN_NO_SIGN is specified.
            </term>
            </item>
            </list>
            </param>
            <param name="pKeyProvInfo">
            <para>
            A pointer to a CRYPT_KEY_PROV_INFO structure. Before a certificate is created, the CSP is queried for the key provider, key
            provider type, and the key container name. If the CSP queried does not support these queries, the function fails. If the default
            provider does not support these queries, a pKeyProvInfo value must be specified. The RSA BASE does support these queries.
            </para>
            <para>
            If the pKeyProvInfo parameter is not <c>NULL</c>, the corresponding values are set in the <c>CERT_KEY_PROV_INFO_PROP_ID</c>
            value of the generated certificate. You must ensure that all parameters of the supplied structure are correctly specified.
            </para>
            </param>
            <param name="pSignatureAlgorithm">
            A pointer to a CRYPT_ALGORITHM_IDENTIFIER structure. If <c>NULL</c>, the default algorithm, SHA1RSA, is used.
            </param>
            <param name="pStartTime">A pointer to a SYSTEMTIME structure. If <c>NULL</c>, the system current time is used by default.</param>
            <param name="pEndTime">
            A pointer to a SYSTEMTIME structure. If <c>NULL</c>, the pStartTime value plus one year will be used by default.
            </param>
            <param name="pExtensions">
            A pointer to a CERT_EXTENSIONS array of CERT_EXTENSION structures. By default, the array is empty. An alternate subject name, if
            desired, can be specified as one of these extensions.
            </param>
            <returns>
            If the function succeeds, a PCCERT_CONTEXT variable that points to the created certificate is returned. If the function fails,
            it returns <c>NULL</c>. For extended error information, call GetLastError.
            </returns>
            <remarks>
            As the pEndTime must be a valid date, and is automatically generated if it is not supplied by the user, unexpected failures may
            easily be caused when this API is called on a leap day without accompanying app logic to compensate. For more information,
            please see leap year readiness.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertDeleteCertificateFromStore(Vanara.PInvoke.Crypt32.PCCERT_CONTEXT)">
            <summary>
            The <c>CertDeleteCertificateFromStore</c> function deletes the specified certificate context from the certificate store.
            </summary>
            <param name="pCertContext">A pointer to the CERT_CONTEXT structure to be deleted.</param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>
            If the function fails, the return value is <c>FALSE</c>. For extended error information, call GetLastError. One possible error
            code is the following.
            </para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>E_ACCESSDENIED</term>
            <term>Indicates the store was opened as read-only and a delete operation is not allowed.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            After a certificate is deleted from a store, all subsequent attempts to get or find that certificate in that store will fail.
            However, memory allocated for the certificate is not freed until all duplicated contexts have also been freed.
            </para>
            <para>
            The <c>CertDeleteCertificateFromStore</c> function always frees pCertContext by calling the CertFreeCertificateContext function,
            even if an error is encountered. Freeing the context reduces the context's reference count by one. If the reference count
            reaches zero, memory allocated for the certificate is freed.
            </para>
            <para>Examples</para>
            <para>For an example that uses this function, see Example C Program: Deleting Certificates from a Certificate Store.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertDuplicateCertificateContext(Vanara.PInvoke.Crypt32.PCCERT_CONTEXT)">
            <summary>
            The <c>CertDuplicateCertificateContext</c> function duplicates a certificate context by incrementing its reference count.
            </summary>
            <param name="pCertContext">A pointer to the CERT_CONTEXT structure for which the reference count is incremented.</param>
            <returns>
            Currently, a copy is not made of the context, and the returned pointer to a context has the same value as the pointer to a
            context that was input. If the pointer passed into this function is <c>NULL</c>, <c>NULL</c> is returned. When you have finished
            using the duplicate context, decrease its reference count by calling the CertFreeCertificateContext function.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertEnumCertificatesInStore(Vanara.PInvoke.Crypt32.HCERTSTORE,Vanara.PInvoke.Crypt32.PCCERT_CONTEXT)">
            <summary>
            The <c>CertEnumCertificatesInStore</c> function retrieves the first or next certificate in a certificate store. Used in a loop,
            this function can retrieve in sequence all certificates in a certificate store.
            </summary>
            <param name="hCertStore">A handle of a certificate store.</param>
            <param name="pPrevCertContext">
            <para>A pointer to the CERT_CONTEXT of the previous certificate context found.</para>
            <para>
            This parameter must be <c>NULL</c> to begin the enumeration and get the first certificate in the store. Successive certificates
            are enumerated by setting pPrevCertContext to the pointer returned by a previous call to the function. This function frees the
            CERT_CONTEXT referenced by non- <c>NULL</c> values of this parameter.
            </para>
            <para>
            For logical stores, including collection stores, a duplicate of the pCertContext returned by this function cannot be used to
            begin a new subsequence of enumerations because the duplicated certificate loses the initial enumeration state. The enumeration
            skips any certificate previously deleted by CertDeleteCertificateFromStore.
            </para>
            </param>
            <returns>
            <para>
            If the function succeeds, the function returns a pointer to the next CERT_CONTEXT in the store. If no more certificates exist in
            the store, the function returns <c>NULL</c>.
            </para>
            <para>For extended error information, call GetLastError. Some possible error codes follow.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>E_INVALIDARG</term>
            <term>The handle in the hCertStore parameter is not the same as that in the certificate context pointed to by pPrevCertContext.</term>
            </item>
            <item>
            <term>CRYPT_E_NOT_FOUND</term>
            <term>No certificates were found. This happens if the store is empty or if the function reached the end of the store's list.</term>
            </item>
            <item>
            <term>ERROR_NO_MORE_FILES</term>
            <term>
            Applies to external stores. No certificates were found. This happens if the store is empty or if the function reached the end of
            the store's list.
            </term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            The returned pointer is freed when passed as the pPrevCertContext parameter on a subsequent call. Otherwise, the pointer must be
            freed by calling CertFreeCertificateContext. A non- <c>NULL</c> pPrevCertContext passed to <c>CertEnumCertificatesInStore</c> is
            always freed even for an error.
            </para>
            <para>A duplicate of the currently enumerated certificate can be made by calling CertDuplicateCertificateContext.</para>
            <para>Examples</para>
            <para>
            The following example lists the certificate contexts in the certificate store. For another example that uses this function, see
            Example C Program: Deleting Certificates from a Certificate Store.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertFindCertificateInStore(Vanara.PInvoke.Crypt32.HCERTSTORE,Vanara.PInvoke.Crypt32.CertEncodingType,Vanara.PInvoke.Crypt32.CertFindUsageFlags,Vanara.PInvoke.Crypt32.CertFindType,System.IntPtr,Vanara.PInvoke.Crypt32.PCCERT_CONTEXT)">
            <summary>
            The <c>CertFindCertificateInStore</c> function finds the first or next certificate context in a certificate store that matches a
            search criteria established by the dwFindType and its associated pvFindPara. This function can be used in a loop to find all of
            the certificates in a certificate store that match the specified find criteria.
            </summary>
            <param name="hCertStore">A handle of the certificate store to be searched.</param>
            <param name="dwCertEncodingType">
            <para>
            Specifies the type of encoding used. Both the certificate and message encoding types must be specified by combining them with a
            bitwise- <c>OR</c> operation as shown in the following example:
            </para>
            <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are:</para>
            <list type="bullet">
            <item>
            <term>X509_ASN_ENCODING</term>
            </item>
            <item>
            <term>PKCS_7_ASN_ENCODING</term>
            </item>
            </list>
            </param>
            <param name="dwFindFlags">
            Used with some dwFindType values to modify the search criteria. For most dwFindType values, dwFindFlags is not used and should
            be set to zero. For detailed information, see Remarks.
            </param>
            <param name="dwFindType">
            <para>
            Specifies the type of search being made. The search type determines the data type, contents, and the use of pvFindPara. This
            parameter can be one of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_FIND_ANY</term>
            <term>Data type of pvFindPara: NULL, not used. No search criteria used. Returns the next certificate in the store.</term>
            </item>
            <item>
            <term>CERT_FIND_CERT_ID</term>
            <term>Data type of pvFindPara: CERT_ID structure. Find the certificate identified by the specified CERT_ID.</term>
            </item>
            <item>
            <term>CERT_FIND_CTL_USAGE</term>
            <term>
            Data type of pvFindPara: CTL_USAGE structure. Searches for a certificate that has a szOID_ENHANCED_KEY_USAGE extension or a
            CERT_CTL_PROP_ID that matches the pszUsageIdentifier member of the CTL_USAGE structure.
            </term>
            </item>
            <item>
            <term>CERT_FIND_ENHKEY_USAGE</term>
            <term>
            Data type of pvFindPara: CERT_ENHKEY_USAGE structure. Searches for a certificate in the store that has either an enhanced key
            usage extension or an enhanced key usage property and a usage identifier that matches the cUsageIdentifier member in the
            CERT_ENHKEY_USAGE structure. A certificate has an enhanced key usage extension if it has a CERT_EXTENSION structure with the
            pszObjId member set to szOID_ENHANCED_KEY_USAGE. A certificate has an enhanced key usage property if its
            CERT_ENHKEY_USAGE_PROP_ID identifier is set. If CERT_FIND_OPTIONAL_ENHKEY_USAGE_FLAG is set in dwFindFlags, certificates without
            the key usage extension or property are also matches. Setting this flag takes precedence over passing NULL in pvFindPara. If
            CERT_FIND_EXT_ONLY_ENHKEY_USAGE_FLAG is set, a match is done only on the key usage extension. For information about flag
            modifications to search criteria, see Remarks.
            </term>
            </item>
            <item>
            <term>CERT_FIND_EXISTING</term>
            <term>
            Data type of pvFindPara: CERT_CONTEXT structure. Searches for a certificate that is an exact match of the specified certificate context.
            </term>
            </item>
            <item>
            <term>CERT_FIND_HASH</term>
            <term>
            Data type of pvFindPara: CRYPT_HASH_BLOB structure. Searches for a certificate with a SHA1 hash that matches the hash in the
            CRYPT_HASH_BLOB structure.
            </term>
            </item>
            <item>
            <term>CERT_FIND_HAS_PRIVATE_KEY</term>
            <term>
            Data type of pvFindPara: NULL, not used. Searches for a certificate that has a private key. The key can be ephemeral or saved on
            disk. The key can be a legacy Cryptography API (CAPI) key or a CNG key. Windows 8 and Windows Server 2012: Support for this flag begins.
            </term>
            </item>
            <item>
            <term>CERT_FIND_ISSUER_ATTR</term>
            <term>
            Data type of pvFindPara: CERT_RDN structure. Searches for a certificate with specified issuer attributes that match attributes
            in the CERT_RDN structure. If these values are set, the function compares attributes of the issuer in a certificate with
            elements of the CERT_RDN_ATTR array in this CERT_RDN structure. Comparisons iterate through the CERT_RDN_ATTR attributes looking
            for a match with the certificate's issuer attributes. If the pszObjId member of CERT_RDN_ATTR is NULL, the attribute object
            identifier is ignored. If the dwValueType member of CERT_RDN_ATTR is CERT_RDN_ANY_TYPE, the value type is ignored. If the pbData
            member of CERT_RDN_VALUE_BLOB is NULL, any value is a match. Currently only an exact, case-sensitive match is supported. For
            information about Unicode options, see Remarks. When these values are set, the search is restricted to certificates whose
            encoding type matches dwCertEncodingType.
            </term>
            </item>
            <item>
            <term>CERT_FIND_ISSUER_NAME</term>
            <term>
            Data type of pvFindPara: CERT_NAME_BLOB structure. Search for a certificate with an exact match of the entire issuer name with
            the name in CERT_NAME_BLOB The search is restricted to certificates that match the dwCertEncodingType.
            </term>
            </item>
            <item>
            <term>CERT_FIND_ISSUER_OF</term>
            <term>
            Data type of pvFindPara: CERT_CONTEXT structure. Searches for a certificate with an subject that matches the issuer in
            CERT_CONTEXT. Instead of using CertFindCertificateInStore with this value, use the CertGetCertificateChain function.
            </term>
            </item>
            <item>
            <term>CERT_FIND_ISSUER_STR</term>
            <term>
            Data type of pvFindPara: Null-terminated Unicode string. Searches for a certificate that contains the specified issuer name
            string. The certificate's issuer member is converted to a name string of the appropriate type using the appropriate form of
            CertNameToStr formatted as CERT_SIMPLE_NAME_STR. Then a case-insensitive substring-within-a-string match is performed. When this
            value is set, the search is restricted to certificates whose encoding type matches dwCertEncodingType. If the substring match
            fails and the subject contains an email RDN with Punycode encoded string, CERT_NAME_STR_ENABLE_PUNYCODE_FLAG is used to convert
            the subject to a Unicode string and the substring match is performed again.
            </term>
            </item>
            <item>
            <term>CERT_FIND_KEY_IDENTIFIER</term>
            <term>
            Data type of pvFindPara: CRYPT_HASH_BLOB structure. Searches for a certificate with a CERT_KEY_IDENTIFIER_PROP_ID property that
            matches the key identifier in CRYPT_HASH_BLOB.
            </term>
            </item>
            <item>
            <term>CERT_FIND_KEY_SPEC</term>
            <term>
            Data type of pvFindPara: DWORD variable that contains a key specification. Searches for a certificate that has a
            CERT_KEY_SPEC_PROP_ID property that matches the key specification in pvFindPara.
            </term>
            </item>
            <item>
            <term>CERT_FIND_MD5_HASH</term>
            <term>
            Data type of pvFindPara: CRYPT_HASH_BLOB structure. Searches for a certificate with an MD5 hash that matches the hash in CRYPT_HASH_BLOB.
            </term>
            </item>
            <item>
            <term>CERT_FIND_PROPERTY</term>
            <term>
            Data type of pvFindPara: DWORD variable that contains a property identifier. Searches for a certificate with a property that
            matches the property identifier specified by the DWORD value in pvFindPara.
            </term>
            </item>
            <item>
            <term>CERT_FIND_PUBLIC_KEY</term>
            <term>
            Data type of pvFindPara: CERT_PUBLIC_KEY_INFO structure. Searches for a certificate with a public key that matches the public
            key in the CERT_PUBLIC_KEY_INFO structure.
            </term>
            </item>
            <item>
            <term>CERT_FIND_SHA1_HASH</term>
            <term>
            Data type of pvFindPara: CRYPT_HASH_BLOB structure. Searches for a certificate with a SHA1 hash that matches the hash in the
            CRYPT_HASH_BLOB structure.
            </term>
            </item>
            <item>
            <term>CERT_FIND_SIGNATURE_HASH</term>
            <term>
            Data type of pvFindPara: CRYPT_HASH_BLOB structure. Searches for a certificate with a signature hash that matches the signature
            hash in the CRYPT_HASH_BLOB structure.
            </term>
            </item>
            <item>
            <term>CERT_FIND_SUBJECT_ATTR</term>
            <term>
            Data type of pvFindPara: CERT_RDN structure. Searches for a certificate with specified subject attributes that match attributes
            in the CERT_RDN structure. If RDN values are set, the function compares attributes of the subject in a certificate with elements
            of the CERT_RDN_ATTR array in this CERT_RDN structure. Comparisons iterate through the CERT_RDN_ATTR attributes looking for a
            match with the certificate's subject's attributes. If the pszObjId member of CERT_RDN_ATTR is NULL, the attribute object
            identifier is ignored. If the dwValueType member of CERT_RDN_ATTR is CERT_RDN_ANY_TYPE, the value type is ignored. If the pbData
            member of CERT_RDN_VALUE_BLOB is NULL, any value is a match. Currently only an exact, case-sensitive match is supported. For
            information about Unicode options, see Remarks. When these values are set, the search is restricted to certificates whose
            encoding type matches dwCertEncodingType.
            </term>
            </item>
            <item>
            <term>CERT_FIND_SUBJECT_CERT</term>
            <term>
            Data type of pvFindPara: CERT_INFO structure. Searches for a certificate with both an issuer and a serial number that match the
            issuer and serial number in the CERT_INFO structure.
            </term>
            </item>
            <item>
            <term>CERT_FIND_SUBJECT_NAME</term>
            <term>
            Data type of pvFindPara: CERT_NAME_BLOB structure. Searches for a certificate with an exact match of the entire subject name
            with the name in the CERT_NAME_BLOB structure. The search is restricted to certificates that match the value of dwCertEncodingType.
            </term>
            </item>
            <item>
            <term>CERT_FIND_SUBJECT_STR</term>
            <term>
            Data type of pvFindPara: Null-terminated Unicode string. Searches for a certificate that contains the specified subject name
            string. The certificate's subject member is converted to a name string of the appropriate type using the appropriate form of
            CertNameToStr formatted as CERT_SIMPLE_NAME_STR. Then a case-insensitive substring-within-a-string match is performed. When this
            value is set, the search is restricted to certificates whose encoding type matches dwCertEncodingType.
            </term>
            </item>
            <item>
            <term>CERT_FIND_CROSS_CERT_DIST_POINTS</term>
            <term>
            Data type of pvFindPara: Not used. Find a certificate that has either a cross certificate distribution point extension or property.
            </term>
            </item>
            <item>
            <term>CERT_FIND_PUBKEY_MD5_HASH</term>
            <term>
            Data type of pvFindPara: CRYPT_HASH_BLOB structure. Find a certificate whose MD5-hashed public key matches the specified hash.
            </term>
            </item>
            </list>
            <para>
            <c>Note</c> There are alternate forms of the value of dwFindType that pass a string in pvFindPara. One form uses a Unicode
            string, and the other an ASCII string. Values that end in "_W" or without a suffix use Unicode. Values that end with "_A" use
            ASCII strings.
            </para>
            </param>
            <param name="pvFindPara">Points to a data item or structure used with dwFindType.</param>
            <param name="pPrevCertContext">
            A pointer to the last CERT_CONTEXT structure returned by this function. This parameter must be <c>NULL</c> on the first call of
            the function. To find successive certificates meeting the search criteria, set pPrevCertContext to the pointer returned by the
            previous call to the function. This function frees the <c>CERT_CONTEXT</c> referenced by non- <c>NULL</c> values of this parameter.
            </param>
            <returns>
            <para>If the function succeeds, the function returns a pointer to a read-only CERT_CONTEXT structure.</para>
            <para>If the function fails and a certificate that matches the search criteria is not found, the return value is <c>NULL</c>.</para>
            <para>
            A non- <c>NULL</c> CERT_CONTEXT that <c>CertFindCertificateInStore</c> returns must be freed by CertFreeCertificateContext or by
            being passed as the pPrevCertContext parameter on a subsequent call to <c>CertFindCertificateInStore</c>.
            </para>
            <para>For extended error information, call GetLastError. Some possible error codes follow.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>CRYPT_E_NOT_FOUND</term>
            <term>
            No certificate was found matching the search criteria. This can happen if the store is empty or the end of the store's list is reached.
            </term>
            </item>
            <item>
            <term>E_INVALIDARG</term>
            <term>
            The handle in the hCertStore parameter is not the same as that in the certificate context pointed to by the pPrevCertContext
            parameter, or a value that is not valid was specified in the dwFindType parameter.
            </term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The dwFindFlags parameter is used to modify the criteria of some search types.</para>
            <para>
            The CERT_UNICODE_IS_RDN_ATTRS_FLAG dwFindFlags value is used only with the CERT_FIND_SUBJECT_ATTR and CERT_FIND_ISSUER_ATTR
            values for dwFindType. CERT_UNICODE_IS_RDN_ATTRS_FLAG must be set if the CERT_RDN_ATTR structure pointed to by pvFindPara was
            initialized with Unicode strings. Before any comparison is made, the string to be matched is converted by using
            X509_UNICODE_NAME to provide for Unicode comparisons.
            </para>
            <para>The following dwFindFlags values are used only with the CERT_FIND_ENKEY_USAGE value for dwFindType:</para>
            <para>
            CertDuplicateCertificateContext can be called to make a duplicate of the returned context. The returned context can be added to
            a different certificate store by using CertAddCertificateContextToStore, or a link to that certificate context can be added to a
            store that is not a collection store by using CertAddCertificateLinkToStore.
            </para>
            <para>
            The returned pointer is freed when passed as the pPrevCertContext parameter on a subsequent call to the function. Otherwise, the
            pointer must be explicitly freed by calling CertFreeCertificateContext. A pPrevCertContext that is not <c>NULL</c> is always
            freed by <c>CertFindCertificateInStore</c> using a call to <c>CertFreeCertificateContext</c>, even if there is an error in the function.
            </para>
            <para>Examples</para>
            <para>
            The following example shows finding a certificate context in the certificate store meeting a search criterion. For a complete
            example that includes the context for this example, see Example C Program: Certificate Store Operations.
            </para>
            <para>For another example that uses this function, see Example C Program: Collection and Sibling Certificate Store Operations.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertFindCertificateInStore(Vanara.PInvoke.Crypt32.HCERTSTORE,Vanara.PInvoke.Crypt32.CertEncodingType,Vanara.PInvoke.Crypt32.CertFindUsageFlags,Vanara.PInvoke.Crypt32.CertFindType,System.String,Vanara.PInvoke.Crypt32.PCCERT_CONTEXT)">
            <summary>
            The <c>CertFindCertificateInStore</c> function finds the first or next certificate context in a certificate store that matches a
            search criteria established by the dwFindType and its associated pvFindPara. This function can be used in a loop to find all of
            the certificates in a certificate store that match the specified find criteria.
            </summary>
            <param name="hCertStore">A handle of the certificate store to be searched.</param>
            <param name="dwCertEncodingType">
            <para>
            Specifies the type of encoding used. Both the certificate and message encoding types must be specified by combining them with a
            bitwise- <c>OR</c> operation as shown in the following example:
            </para>
            <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are:</para>
            <list type="bullet">
            <item>
            <term>X509_ASN_ENCODING</term>
            </item>
            <item>
            <term>PKCS_7_ASN_ENCODING</term>
            </item>
            </list>
            </param>
            <param name="dwFindFlags">
            Used with some dwFindType values to modify the search criteria. For most dwFindType values, dwFindFlags is not used and should
            be set to zero. For detailed information, see Remarks.
            </param>
            <param name="dwFindType">
            <para>
            Specifies the type of search being made. The search type determines the data type, contents, and the use of pvFindPara. This
            parameter can be one of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_FIND_ANY</term>
            <term>Data type of pvFindPara: NULL, not used. No search criteria used. Returns the next certificate in the store.</term>
            </item>
            <item>
            <term>CERT_FIND_CERT_ID</term>
            <term>Data type of pvFindPara: CERT_ID structure. Find the certificate identified by the specified CERT_ID.</term>
            </item>
            <item>
            <term>CERT_FIND_CTL_USAGE</term>
            <term>
            Data type of pvFindPara: CTL_USAGE structure. Searches for a certificate that has a szOID_ENHANCED_KEY_USAGE extension or a
            CERT_CTL_PROP_ID that matches the pszUsageIdentifier member of the CTL_USAGE structure.
            </term>
            </item>
            <item>
            <term>CERT_FIND_ENHKEY_USAGE</term>
            <term>
            Data type of pvFindPara: CERT_ENHKEY_USAGE structure. Searches for a certificate in the store that has either an enhanced key
            usage extension or an enhanced key usage property and a usage identifier that matches the cUsageIdentifier member in the
            CERT_ENHKEY_USAGE structure. A certificate has an enhanced key usage extension if it has a CERT_EXTENSION structure with the
            pszObjId member set to szOID_ENHANCED_KEY_USAGE. A certificate has an enhanced key usage property if its
            CERT_ENHKEY_USAGE_PROP_ID identifier is set. If CERT_FIND_OPTIONAL_ENHKEY_USAGE_FLAG is set in dwFindFlags, certificates without
            the key usage extension or property are also matches. Setting this flag takes precedence over passing NULL in pvFindPara. If
            CERT_FIND_EXT_ONLY_ENHKEY_USAGE_FLAG is set, a match is done only on the key usage extension. For information about flag
            modifications to search criteria, see Remarks.
            </term>
            </item>
            <item>
            <term>CERT_FIND_EXISTING</term>
            <term>
            Data type of pvFindPara: CERT_CONTEXT structure. Searches for a certificate that is an exact match of the specified certificate context.
            </term>
            </item>
            <item>
            <term>CERT_FIND_HASH</term>
            <term>
            Data type of pvFindPara: CRYPT_HASH_BLOB structure. Searches for a certificate with a SHA1 hash that matches the hash in the
            CRYPT_HASH_BLOB structure.
            </term>
            </item>
            <item>
            <term>CERT_FIND_HAS_PRIVATE_KEY</term>
            <term>
            Data type of pvFindPara: NULL, not used. Searches for a certificate that has a private key. The key can be ephemeral or saved on
            disk. The key can be a legacy Cryptography API (CAPI) key or a CNG key. Windows 8 and Windows Server 2012: Support for this flag begins.
            </term>
            </item>
            <item>
            <term>CERT_FIND_ISSUER_ATTR</term>
            <term>
            Data type of pvFindPara: CERT_RDN structure. Searches for a certificate with specified issuer attributes that match attributes
            in the CERT_RDN structure. If these values are set, the function compares attributes of the issuer in a certificate with
            elements of the CERT_RDN_ATTR array in this CERT_RDN structure. Comparisons iterate through the CERT_RDN_ATTR attributes looking
            for a match with the certificate's issuer attributes. If the pszObjId member of CERT_RDN_ATTR is NULL, the attribute object
            identifier is ignored. If the dwValueType member of CERT_RDN_ATTR is CERT_RDN_ANY_TYPE, the value type is ignored. If the pbData
            member of CERT_RDN_VALUE_BLOB is NULL, any value is a match. Currently only an exact, case-sensitive match is supported. For
            information about Unicode options, see Remarks. When these values are set, the search is restricted to certificates whose
            encoding type matches dwCertEncodingType.
            </term>
            </item>
            <item>
            <term>CERT_FIND_ISSUER_NAME</term>
            <term>
            Data type of pvFindPara: CERT_NAME_BLOB structure. Search for a certificate with an exact match of the entire issuer name with
            the name in CERT_NAME_BLOB The search is restricted to certificates that match the dwCertEncodingType.
            </term>
            </item>
            <item>
            <term>CERT_FIND_ISSUER_OF</term>
            <term>
            Data type of pvFindPara: CERT_CONTEXT structure. Searches for a certificate with an subject that matches the issuer in
            CERT_CONTEXT. Instead of using CertFindCertificateInStore with this value, use the CertGetCertificateChain function.
            </term>
            </item>
            <item>
            <term>CERT_FIND_ISSUER_STR</term>
            <term>
            Data type of pvFindPara: Null-terminated Unicode string. Searches for a certificate that contains the specified issuer name
            string. The certificate's issuer member is converted to a name string of the appropriate type using the appropriate form of
            CertNameToStr formatted as CERT_SIMPLE_NAME_STR. Then a case-insensitive substring-within-a-string match is performed. When this
            value is set, the search is restricted to certificates whose encoding type matches dwCertEncodingType. If the substring match
            fails and the subject contains an email RDN with Punycode encoded string, CERT_NAME_STR_ENABLE_PUNYCODE_FLAG is used to convert
            the subject to a Unicode string and the substring match is performed again.
            </term>
            </item>
            <item>
            <term>CERT_FIND_KEY_IDENTIFIER</term>
            <term>
            Data type of pvFindPara: CRYPT_HASH_BLOB structure. Searches for a certificate with a CERT_KEY_IDENTIFIER_PROP_ID property that
            matches the key identifier in CRYPT_HASH_BLOB.
            </term>
            </item>
            <item>
            <term>CERT_FIND_KEY_SPEC</term>
            <term>
            Data type of pvFindPara: DWORD variable that contains a key specification. Searches for a certificate that has a
            CERT_KEY_SPEC_PROP_ID property that matches the key specification in pvFindPara.
            </term>
            </item>
            <item>
            <term>CERT_FIND_MD5_HASH</term>
            <term>
            Data type of pvFindPara: CRYPT_HASH_BLOB structure. Searches for a certificate with an MD5 hash that matches the hash in CRYPT_HASH_BLOB.
            </term>
            </item>
            <item>
            <term>CERT_FIND_PROPERTY</term>
            <term>
            Data type of pvFindPara: DWORD variable that contains a property identifier. Searches for a certificate with a property that
            matches the property identifier specified by the DWORD value in pvFindPara.
            </term>
            </item>
            <item>
            <term>CERT_FIND_PUBLIC_KEY</term>
            <term>
            Data type of pvFindPara: CERT_PUBLIC_KEY_INFO structure. Searches for a certificate with a public key that matches the public
            key in the CERT_PUBLIC_KEY_INFO structure.
            </term>
            </item>
            <item>
            <term>CERT_FIND_SHA1_HASH</term>
            <term>
            Data type of pvFindPara: CRYPT_HASH_BLOB structure. Searches for a certificate with a SHA1 hash that matches the hash in the
            CRYPT_HASH_BLOB structure.
            </term>
            </item>
            <item>
            <term>CERT_FIND_SIGNATURE_HASH</term>
            <term>
            Data type of pvFindPara: CRYPT_HASH_BLOB structure. Searches for a certificate with a signature hash that matches the signature
            hash in the CRYPT_HASH_BLOB structure.
            </term>
            </item>
            <item>
            <term>CERT_FIND_SUBJECT_ATTR</term>
            <term>
            Data type of pvFindPara: CERT_RDN structure. Searches for a certificate with specified subject attributes that match attributes
            in the CERT_RDN structure. If RDN values are set, the function compares attributes of the subject in a certificate with elements
            of the CERT_RDN_ATTR array in this CERT_RDN structure. Comparisons iterate through the CERT_RDN_ATTR attributes looking for a
            match with the certificate's subject's attributes. If the pszObjId member of CERT_RDN_ATTR is NULL, the attribute object
            identifier is ignored. If the dwValueType member of CERT_RDN_ATTR is CERT_RDN_ANY_TYPE, the value type is ignored. If the pbData
            member of CERT_RDN_VALUE_BLOB is NULL, any value is a match. Currently only an exact, case-sensitive match is supported. For
            information about Unicode options, see Remarks. When these values are set, the search is restricted to certificates whose
            encoding type matches dwCertEncodingType.
            </term>
            </item>
            <item>
            <term>CERT_FIND_SUBJECT_CERT</term>
            <term>
            Data type of pvFindPara: CERT_INFO structure. Searches for a certificate with both an issuer and a serial number that match the
            issuer and serial number in the CERT_INFO structure.
            </term>
            </item>
            <item>
            <term>CERT_FIND_SUBJECT_NAME</term>
            <term>
            Data type of pvFindPara: CERT_NAME_BLOB structure. Searches for a certificate with an exact match of the entire subject name
            with the name in the CERT_NAME_BLOB structure. The search is restricted to certificates that match the value of dwCertEncodingType.
            </term>
            </item>
            <item>
            <term>CERT_FIND_SUBJECT_STR</term>
            <term>
            Data type of pvFindPara: Null-terminated Unicode string. Searches for a certificate that contains the specified subject name
            string. The certificate's subject member is converted to a name string of the appropriate type using the appropriate form of
            CertNameToStr formatted as CERT_SIMPLE_NAME_STR. Then a case-insensitive substring-within-a-string match is performed. When this
            value is set, the search is restricted to certificates whose encoding type matches dwCertEncodingType.
            </term>
            </item>
            <item>
            <term>CERT_FIND_CROSS_CERT_DIST_POINTS</term>
            <term>
            Data type of pvFindPara: Not used. Find a certificate that has either a cross certificate distribution point extension or property.
            </term>
            </item>
            <item>
            <term>CERT_FIND_PUBKEY_MD5_HASH</term>
            <term>
            Data type of pvFindPara: CRYPT_HASH_BLOB structure. Find a certificate whose MD5-hashed public key matches the specified hash.
            </term>
            </item>
            </list>
            <para>
            <c>Note</c> There are alternate forms of the value of dwFindType that pass a string in pvFindPara. One form uses a Unicode
            string, and the other an ASCII string. Values that end in "_W" or without a suffix use Unicode. Values that end with "_A" use
            ASCII strings.
            </para>
            </param>
            <param name="pvFindPara">Points to a data item or structure used with dwFindType.</param>
            <param name="pPrevCertContext">
            A pointer to the last CERT_CONTEXT structure returned by this function. This parameter must be <c>NULL</c> on the first call of
            the function. To find successive certificates meeting the search criteria, set pPrevCertContext to the pointer returned by the
            previous call to the function. This function frees the <c>CERT_CONTEXT</c> referenced by non- <c>NULL</c> values of this parameter.
            </param>
            <returns>
            <para>If the function succeeds, the function returns a pointer to a read-only CERT_CONTEXT structure.</para>
            <para>If the function fails and a certificate that matches the search criteria is not found, the return value is <c>NULL</c>.</para>
            <para>
            A non- <c>NULL</c> CERT_CONTEXT that <c>CertFindCertificateInStore</c> returns must be freed by CertFreeCertificateContext or by
            being passed as the pPrevCertContext parameter on a subsequent call to <c>CertFindCertificateInStore</c>.
            </para>
            <para>For extended error information, call GetLastError. Some possible error codes follow.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>CRYPT_E_NOT_FOUND</term>
            <term>
            No certificate was found matching the search criteria. This can happen if the store is empty or the end of the store's list is reached.
            </term>
            </item>
            <item>
            <term>E_INVALIDARG</term>
            <term>
            The handle in the hCertStore parameter is not the same as that in the certificate context pointed to by the pPrevCertContext
            parameter, or a value that is not valid was specified in the dwFindType parameter.
            </term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The dwFindFlags parameter is used to modify the criteria of some search types.</para>
            <para>
            The CERT_UNICODE_IS_RDN_ATTRS_FLAG dwFindFlags value is used only with the CERT_FIND_SUBJECT_ATTR and CERT_FIND_ISSUER_ATTR
            values for dwFindType. CERT_UNICODE_IS_RDN_ATTRS_FLAG must be set if the CERT_RDN_ATTR structure pointed to by pvFindPara was
            initialized with Unicode strings. Before any comparison is made, the string to be matched is converted by using
            X509_UNICODE_NAME to provide for Unicode comparisons.
            </para>
            <para>The following dwFindFlags values are used only with the CERT_FIND_ENKEY_USAGE value for dwFindType:</para>
            <para>
            CertDuplicateCertificateContext can be called to make a duplicate of the returned context. The returned context can be added to
            a different certificate store by using CertAddCertificateContextToStore, or a link to that certificate context can be added to a
            store that is not a collection store by using CertAddCertificateLinkToStore.
            </para>
            <para>
            The returned pointer is freed when passed as the pPrevCertContext parameter on a subsequent call to the function. Otherwise, the
            pointer must be explicitly freed by calling CertFreeCertificateContext. A pPrevCertContext that is not <c>NULL</c> is always
            freed by <c>CertFindCertificateInStore</c> using a call to <c>CertFreeCertificateContext</c>, even if there is an error in the function.
            </para>
            <para>Examples</para>
            <para>
            The following example shows finding a certificate context in the certificate store meeting a search criterion. For a complete
            example that includes the context for this example, see Example C Program: Certificate Store Operations.
            </para>
            <para>For another example that uses this function, see Example C Program: Collection and Sibling Certificate Store Operations.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertFreeServerOcspResponseContext(Vanara.PInvoke.Crypt32.PCCERT_SERVER_OCSP_RESPONSE_CONTEXT)">
            <summary>
            The <c>CertFreeServerOcspResponseContext</c> function decrements the reference count for a CERT_SERVER_OCSP_RESPONSE_CONTEXT
            structure. If the reference count becomes zero, memory allocated for the structure is released.
            </summary>
            <param name="pServerOcspResponseContext">
            A pointer to a CERT_SERVER_OCSP_RESPONSE_CONTEXT structure that contains a value returned by the
            CertGetServerOcspResponseContext function.
            </param>
            <returns>This function has no return value.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertGetIssuerCertificateFromStore(Vanara.PInvoke.Crypt32.HCERTSTORE,Vanara.PInvoke.Crypt32.PCCERT_CONTEXT,Vanara.PInvoke.Crypt32.PCCERT_CONTEXT,Vanara.PInvoke.Crypt32.CertStoreVerification@)">
            <summary>
            The <c>CertGetIssuerCertificateFromStore</c> function retrieves the certificate context from the certificate store for the first
            or next issuer of the specified subject certificate. The new Certificate Chain Verification Functions are recommended instead of
            the use of this function.
            </summary>
            <param name="hCertStore">Handle of a certificate store.</param>
            <param name="pSubjectContext">
            A pointer to a CERT_CONTEXT structure that contains the subject information. This parameter can be obtained from any certificate
            store or can be created by the calling application using the CertCreateCertificateContext function.
            </param>
            <param name="pPrevIssuerContext">
            <para>
            A pointer to a CERT_CONTEXT structure that contains the issuer information. An issuer can have multiple certificates, especially
            when a validity period is about to change. This parameter must be <c>NULL</c> on the call to get the first issuer certificate.
            To get the next certificate for the issuer, set pPrevIssuerContext to the <c>CERT_CONTEXT</c> structure returned by the previous call.
            </para>
            <para>This function frees the CERT_CONTEXT referenced by non- <c>NULL</c> values of this parameter.</para>
            </param>
            <param name="pdwFlags">
            <para>
            The following flags enable verification checks on the returned certificate. They can be combined using a bitwise- <c>OR</c>
            operation to enable multiple verifications.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_STORE_NO_CRL_FLAG</term>
            <term>Indicates no matching CRL was found.</term>
            </item>
            <item>
            <term>CERT_STORE_NO_ISSUER_FLAG</term>
            <term>Indicates no issuer certificate was found.</term>
            </item>
            <item>
            <term>CERT_STORE_REVOCATION_FLAG</term>
            <term>Checks whether the subject certificate is on the issuer's revocation list.</term>
            </item>
            <item>
            <term>CERT_STORE_SIGNATURE_FLAG</term>
            <term>Uses the public key in the issuer's certificate to verify the signature on the subject certificate.</term>
            </item>
            <item>
            <term>CERT_STORE_TIME_VALIDITY_FLAG</term>
            <term>Gets the current time and verifies that it is within the subject certificate's validity period.</term>
            </item>
            </list>
            <para>
            If a verification check of an enabled type succeeds, its flag is set to zero. If it fails, its flag remains set upon return. For
            CERT_STORE_REVOCATION_FLAG, the verification succeeds if the function does not find a CRL related to the subject certificate.
            </para>
            <para>
            If CERT_STORE_REVOCATION_FLAG is set and the issuer does not have a CRL in the store, CERT_STORE_NO_CRL_FLAG is set and
            CERT_STORE_REVOCATION_FLAG remains set.
            </para>
            <para>
            If CERT_STORE_SIGNATURE_FLAG or CERT_STORE_REVOCATION_FLAG is set, CERT_STORE_NO_ISSUER_FLAG is set if the function does not
            find an issuer certificate in the store. For more details, see Remarks.
            </para>
            <para>
            In the case of a verification check failure, a pointer to the issuer's CERT_CONTEXT is still returned and GetLastError is not updated.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is a pointer to a read-only issuer CERT_CONTEXT.</para>
            <para>If the function fails and the first or next issuer certificate is not found, the return value is <c>NULL</c>.</para>
            <para>
            Only the last returned CERT_CONTEXT structure must be freed by calling CertFreeCertificateContext. When the returned
            <c>CERT_CONTEXT</c> from one call to the function is supplied as the pPrevIssuerContext parameter on a subsequent call, the
            context is freed as part of the action of the function.
            </para>
            <para>For extended error information, call GetLastError. Some possible error codes follow.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>CRYPT_E_NOT_FOUND</term>
            <term>No issuer was found for the subject certificate.</term>
            </item>
            <item>
            <term>CRYPT_E_SELF_SIGNED</term>
            <term>The issuer certificate is the same as the subject certificate. It is a self-signed root certificate.</term>
            </item>
            <item>
            <term>E_INVALIDARG</term>
            <term>
            The handle in the hCertStore parameter is not the same as that of the certificate context pointed to by the pPrevIssuerContext
            parameter, or an unsupported flag was set in pdwFlags.
            </term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            The returned pointer is freed when passed as the pPrevIssuerContext parameter on a subsequent call to the function. Otherwise,
            the pointer must be explicitly freed by calling CertFreeCertificateContext. A pPrevIssuerContext that is not <c>NULL</c> is
            always freed by <c>CertGetIssuerCertificateFromStore</c> using a call to <c>CertFreeCertificateContext</c>, even if there is an
            error in the function.
            </para>
            <para>CertDuplicateCertificateContext can be called to make a duplicate of the issuer certificate.</para>
            <para>
            The hexadecimal values for dwFlags can be combined using a bitwise- <c>OR</c> operation to enable multiple verifications. For
            example, to enable both signature and time validity, the value 0x00000003 is passed in dwFlags on input. In this case, if
            CERT_STORE_SIGNATURE_FLAG verification succeeds but CERT_STORE_TIME_VALIDITY_FLAG verification fails, dwFlags returns as
            0x00000002 on output.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertGetServerOcspResponseContext(Vanara.PInvoke.Crypt32.HCERT_SERVER_OCSP_RESPONSE,System.UInt32,System.IntPtr)">
            <summary>
            The <c>CertGetServerOcspResponseContext</c> function retrieves a non-blocking, time valid online certificate status protocol
            (OCSP) response context for the specified handle.
            </summary>
            <param name="hServerOcspResponse">
            The OCSP server response handle for which to retrieve a response context. This handle is returned by the
            CertOpenServerOcspResponse function.
            </param>
            <param name="dwFlags">This parameter is reserved for future use and must be zero.</param>
            <param name="pvReserved">This parameter is reserved for future use and must be <c>NULL</c>.</param>
            <returns>
            <para>If the function succeeds, it returns a pointer to a CERT_SERVER_OCSP_RESPONSE_CONTEXT structure.</para>
            <para>
            For a response to be time valid, the current time on the system hosting this function call must be less than the next update
            time for the certificate revocation list (CRL) context. When a time valid OCSP response is not available, this function returns
            <c>NULL</c> with the last error set to CRYPT_E_REVOCATION_OFFLINE.
            </para>
            </returns>
            <remarks>
            If you use the <c>CertGetServerOcspResponseContext</c> function to create multiple references to an OCSP response context, you
            must call CertAddRefServerOcspResponseContext to increment the reference count for the CERT_SERVER_OCSP_RESPONSE_CONTEXT
            structure. When you have finished using the structure, you must free it by calling the CertFreeServerOcspResponseContext function.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertGetSubjectCertificateFromStore(Vanara.PInvoke.Crypt32.HCERTSTORE,Vanara.PInvoke.Crypt32.CertEncodingType,Vanara.PInvoke.Crypt32.CERT_INFO@)">
            <summary>
            The <c>CertGetSubjectCertificateFromStore</c> function returns from a certificate store a subject certificate context uniquely
            identified by its issuer and serial number.
            </summary>
            <param name="hCertStore">A handle of a certificate store.</param>
            <param name="dwCertEncodingType">
            <para>
            The type of encoding used. It is always acceptable to specify both the certificate and message encoding types by combining them
            with a bitwise- <c>OR</c> operation as shown in the following example:
            </para>
            <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are:</para>
            <list type="bullet">
            <item>
            <term>X509_ASN_ENCODING</term>
            </item>
            <item>
            <term>PKCS_7_ASN_ENCODING</term>
            </item>
            </list>
            </param>
            <param name="pCertId">A pointer to a CERT_INFO structure. Only the <c>Issuer</c> and <c>SerialNumber</c> members are used.</param>
            <returns>
            <para>
            If the function succeeds, the function returns a pointer to a read-only CERT_CONTEXT. The <c>CERT_CONTEXT</c> must be freed by
            calling CertFreeCertificateContext.
            </para>
            <para>The returned certificate might not be valid. Usually, it is verified when getting its issuer certificate (CertGetIssuerCertificateFromStore).</para>
            <para>For extended error information, call GetLastError. One possible error code is the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>CRYPT_E_NOT_FOUND</term>
            <term>The subject certificate was not found in the store.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>CertDuplicateCertificateContext can be called to make a duplicate certificate.</para>
            <para>Examples</para>
            <para>
            The following example shows retrieving a subject's certificate context, uniquely identified by its issuer and serial number,
            from the certificate store. For an example that includes the complete context for this example, see Example C Program: Signing,
            Encoding, Decoding, and Verifying a Message.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertGetValidUsages(System.UInt32,Vanara.PInvoke.Crypt32.PCCERT_CONTEXT[],System.Int32@,System.IntPtr,System.UInt32@)">
            <summary>
            The <c>CertGetValidUsages</c> function returns an array of usages that consist of the intersection of the valid usages for all
            certificates in an array of certificates.
            </summary>
            <param name="cCerts">The number of certificates in the array to be checked.</param>
            <param name="rghCerts">An array of certificates to be checked for valid usage.</param>
            <param name="cNumOIDs">
            The number of valid usages found as the intersection of the valid usages of all certificates in the array. If all of the
            certificates are valid for all usages, cNumOIDs is set to negative one (–1).
            </param>
            <param name="rghOIDs">
            An array of the object identifiers (OIDs) of the valid usages that are shared by all of the certificates in the rghCerts array.
            This parameter can be <c>NULL</c> to set the size of this structure for memory allocation purposes. For more information, see
            Retrieving Data of Unknown Length.
            </param>
            <param name="pcbOIDs">
            A pointer to a <c>DWORD</c> value that specifies the size, in bytes, of the rghOIDs array and the strings pointed to. When the
            function returns, the <c>DWORD</c> value contains the number of bytes needed for the array.
            </param>
            <returns>
            If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. For extended error
            information, call GetLastError.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertOpenServerOcspResponse(Vanara.PInvoke.Crypt32.PCCERT_CHAIN_CONTEXT,System.UInt32,System.IntPtr)">
            <summary>
            The <c>CertOpenServerOcspResponse</c> function opens a handle to an online certificate status protocol (OCSP) response
            associated with a server certificate chain.
            </summary>
            <param name="pChainContext">The address of a CERT_CHAIN_CONTEXT structure that contains the certificate chain.</param>
            <param name="dwFlags">This parameter is not used and must be zero.</param>
            <param name="pOpenPara">This parameter is not used and must be <c>NULL</c>.</param>
            <returns>
            <para>
            Returns a handle to the OCSP response associated with a server certificate chain if successful; otherwise, <c>NULL</c>. This
            handle must be passed to the CertCloseServerOcspResponse function when it is no longer needed.
            </para>
            <para>
            For extended error information, call GetLastError. Possible error codes returned by the <c>GetLastError</c> function include,
            but are not limited to, the following.
            </para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>One or more parameters are not valid.</term>
            </item>
            <item>
            <term>CRYPT_E_NOT_IN_REVOCATION_DATABASE</term>
            <term>The end certificate does not contain an OCSP authority information access (AIA) URL.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            The <c>CertOpenServerOcspResponse</c> function tries to retrieve an initial OCSP response before it returns. It blocks its
            process thread during the retrieval. The <c>CertOpenServerOcspResponse</c> function creates a background thread that prefetches
            time-valid OCSP responses.
            </para>
            <para>
            The <c>CertOpenServerOcspResponse</c> function increments the reference count for the chain context represented by the
            pChainContext parameter. When you have finished using the chain context, close the returned handle by calling the
            CertCloseServerOcspResponse function.
            </para>
            <para>The <c>CertOpenServerOcspResponse</c> function initializes configuration settings used by the following functions:</para>
            <list type="bullet">
            <item>
            <term>CertAddRefServerOcspResponse</term>
            </item>
            <item>
            <term>CertCloseServerOcspResponse</term>
            </item>
            <item>
            <term>CertGetServerOcspResponseContext</term>
            </item>
            <item>
            <term>CertAddRefServerOcspResponseContext</term>
            </item>
            <item>
            <term>CertFreeServerOcspResponseContext</term>
            </item>
            </list>
            <para>
            First, the <c>CertOpenServerOcspResponse</c> function initializes the settings based on default values in Wincrypt.h. If the
            function subsequently finds the registry key defined in <c>CERT_CHAIN_CONFIG_REGPATH</c>, it updates the previously initialized
            values with the registry values.
            </para>
            <para>The following configuration setting names and default values are initialized by this function:</para>
            <list type="bullet">
            <item>
            <term><c>CERT_SRV_OCSP_RESP_MIN_VALIDITY_SECONDS_VALUE_NAME</c></term>
            </item>
            <item>
            <term><c>CERT_SRV_OCSP_RESP_MIN_VALIDITY_SECONDS_DEFAULT</c></term>
            </item>
            <item>
            <term><c>CERT_SRV_OCSP_RESP_URL_RETRIEVAL_TIMEOUT_MILLISECONDS_VALUE_NAME</c></term>
            </item>
            <item>
            <term><c>CERT_SRV_OCSP_RESP_URL_RETRIEVAL_TIMEOUT_MILLISECONDS_DEFAULT</c></term>
            </item>
            <item>
            <term><c>CERT_SRV_OCSP_RESP_MAX_BEFORE_NEXT_UPDATE_SECONDS_VALUE_NAME</c></term>
            </item>
            <item>
            <term><c>CERT_SRV_OCSP_RESP_MAX_BEFORE_NEXT_UPDATE_SECONDS_DEFAULT</c></term>
            </item>
            <item>
            <term><c>CERT_SRV_OCSP_RESP_MIN_BEFORE_NEXT_UPDATE_SECONDS_VALUE_NAME</c></term>
            </item>
            <item>
            <term><c>CERT_SRV_OCSP_RESP_MIN_BEFORE_NEXT_UPDATE_SECONDS_DEFAULT</c></term>
            </item>
            <item>
            <term><c>CERT_SRV_OCSP_RESP_MIN_AFTER_NEXT_UPDATE_SECONDS_VALUE_NAME</c></term>
            </item>
            <item>
            <term><c>CERT_SRV_OCSP_RESP_MIN_AFTER_NEXT_UPDATE_SECONDS_DEFAULT</c></term>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertRetrieveLogoOrBiometricInfo(Vanara.PInvoke.Crypt32.PCCERT_CONTEXT,Vanara.PInvoke.Crypt32.SafeOID,Vanara.PInvoke.Crypt32.CryptRetrievalFlags,System.UInt32,System.UInt32,System.IntPtr,Vanara.PInvoke.Crypt32.SafeCryptMem@,System.UInt32@,Vanara.PInvoke.Crypt32.SafeCryptMem@)">
            <summary>
            The <c>CertRetrieveLogoOrBiometricInfo</c> function performs a URL retrieval of logo or biometric information specified in
            either the <c>szOID_LOGOTYPE_EXT</c> or <c>szOID_BIOMETRIC_EXT</c> certificate extension. The <c>szOID_BIOMETRIC_EXT</c>
            extension (IETF RFC 3739) supports the addition of a signature or a pictorial representation of the human holder of the
            certificate. The <c>szOID_LOGOTYPE_EXT</c> extension (IETF RFC 3709) supports the addition of organizational pictorial
            representations in certificates.
            </summary>
            <param name="pCertContext">The address of a CERT_CONTEXT structure that contains the certificate.</param>
            <param name="lpszLogoOrBiometricType">
            <para>
            The address of a null-terminated ANSI string that contains an object identifier (OID) string that identifies the type of
            information to retrieve.
            </para>
            <para>This parameter may also contain one of the following predefined values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_RETRIEVE_ISSUER_LOGO</term>
            <term>Retrieve the certificate issuer logotype.</term>
            </item>
            <item>
            <term>CERT_RETRIEVE_SUBJECT_LOGO</term>
            <term>Retrieve the certificate subject logotype.</term>
            </item>
            <item>
            <term>CERT_RETRIEVE_COMMUNITY_LOGO</term>
            <term>Retrieve the certificate community logotype.</term>
            </item>
            <item>
            <term>CERT_RETRIEVE_BIOMETRIC_PICTURE_TYPE</term>
            <term>Retrieve the picture associated with the certificate.</term>
            </item>
            <item>
            <term>CERT_RETRIEVE_BIOMETRIC_SIGNATURE_TYPE</term>
            <term>Retrieve the signature associated with the certificate.</term>
            </item>
            </list>
            </param>
            <param name="dwRetrievalFlags">
            A set of flags that specify how the information should be retrieved. This parameter is passed as the dwRetrievalFlags in the
            CryptRetrieveObjectByUrl function.
            </param>
            <param name="dwTimeout">The maximum amount of time, in milliseconds, to wait for the retrieval.</param>
            <param name="dwFlags">This parameter is not used and must be zero.</param>
            <param name="pvReserved">This parameter is not used and must be <c>NULL</c>.</param>
            <param name="ppbData">
            The address of a <c>BYTE</c> pointer that receives the logotype or biometric data. This memory must be freed when it is no
            longer needed by passing this pointer to the CryptMemFree function.
            </param>
            <param name="pcbData">The address of a <c>DWORD</c> variable that receives the number of bytes in the ppbData buffer.</param>
            <param name="ppwszMimeType">
            <para>
            The address of a pointer to a null-terminated Unicode string that receives the Multipurpose Internet Mail Extensions (MIME) type
            of the data. This parameter can be <c>NULL</c> if this information is not needed. This memory must be freed when it is no longer
            needed by passing this pointer to the CryptMemFree function.
            </para>
            <para>
            This address always receives <c>NULL</c> for biometric types. You must always ensure that this parameter contains a valid memory
            address before attempting to access the memory.
            </para>
            </param>
            <returns>
            <para>Returns nonzero if successful or zero otherwise.</para>
            <para>
            For extended error information, call GetLastError. Possible error codes returned by the <c>GetLastError</c> function include,
            but are not limited to, the following.
            </para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>CRYPT_E_HASH_VALUE</term>
            <term>The computed hash value does not match the hash value in the certificate.</term>
            </item>
            <item>
            <term>CRYPT_E_NOT_FOUND</term>
            <term>
            The certificate does not contain the szOID_LOGOTYPE_EXT or szOID_BIOMETRIC_EXT extension, or the specified
            lpszLogoOrBiometricType was not found.
            </term>
            </item>
            <item>
            <term>E_INVALIDARG</term>
            <term>One or more parameters are not valid.</term>
            </item>
            <item>
            <term>ERROR_INVALID_DATA</term>
            <term>No data could be retrieved from the URL specified by the certificate extension.</term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>The certificate does not support the required extension.</term>
            </item>
            <item>
            <term>NTE_BAD_ALGID</term>
            <term>The hash algorithm OID is unknown.</term>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertSelectCertificateChains(System.Guid@,Vanara.PInvoke.Crypt32.CertSelection,System.IntPtr,System.UInt32,Vanara.PInvoke.Crypt32.CERT_SELECT_CRITERIA[],Vanara.PInvoke.Crypt32.HCERTSTORE,System.UInt32@,System.IntPtr@)">
            <summary>The <c>CertSelectCertificateChains</c> function retrieves certificate chains based on specified selection criteria.</summary>
            <param name="pSelectionContext">A pointer to the GUID of the certificate selection scenario to use for this call.</param>
            <param name="dwFlags">
            <para>
            Flags for controlling the certificate selection process. This parameter can be a combination of zero or more of the following flags:
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_SELECT_ALLOW_EXPIRED</term>
            <term>Select expired certificates that meet selection criteria. By default expired certificates are rejected from selection.</term>
            </item>
            <item>
            <term>CERT_SELECT_TRUSTED_ROOT</term>
            <term>
            Select certificates on which the error bit in the certificate chain trust status is not set to CERT_TRUST_IS_UNTRUSTED_ROOT,
            CERT_TRUST_IS_PARTIAL_CHAIN, or CERT_TRUST_IS_NOT_TIME_VALID. In addition, certificates that have one of the following invalid
            constraint errors are not selected:
            </term>
            </item>
            <item>
            <term>CERT_SELECT_DISALLOW_SELFSIGNED</term>
            <term>Select certificates that are not self-issued and self-signed.</term>
            </item>
            <item>
            <term>CERT_SELECT_HAS_PRIVATE_KEY</term>
            <term>Select certificates that have a value set for the CERT_KEY_PROV_INFO_PROP_ID property of the certificate.</term>
            </item>
            <item>
            <term>CERT_SELECT_HAS_KEY_FOR_SIGNATURE</term>
            <term>
            Select certificates on which the value of the dwKeySpec member of the CERT_KEY_PROV_INFO_PROP_ID property is set to
            AT_SIGNATURE. If this function is being called as part of a CNG enabled application and the dwKeySpec member of the
            CERT_KEY_PROV_INFO_PROP_ID property is set to -1, select certificates on which the value of the NCRYPT_KEY_USAGE_PROPERTY
            property of the associated private key has the NCRYPT_ALLOW_SIGNING_FLAG set.
            </term>
            </item>
            <item>
            <term>CERT_SELECT_HAS_KEY_FOR_KEY_EXCHANGE</term>
            <term>
            Select certificates on which the value of the dwKeySpec member of the CERT_KEY_PROV_INFO_PROP_ID property is set to
            AT_KEYEXCHANGE. If this function is being called as part of a CNG enabled application and the dwKeySpec member of the
            CERT_KEY_PROV_INFO_PROP_ID property is set to -1, select certificates on which either NCRYPT_ALLOW_DECRYPT_FLAG or
            NCRYPT_ALLOW_KEY_AGREEMENT_FLAG is set.
            </term>
            </item>
            <item>
            <term>CERT_SELECT_HARDWARE_ONLY</term>
            <term>
            Select certificates on which the value of the PP_IMPTYPE property of the associated private key provider is set to either
            CRYPT_IMPL_HARDWARE or CRYPT_IMPL_REMOVABLE. (For CNG providers, NCRYPT_IMPL_TYPE_PROPERTY property value MUST have either the
            NCRYPT_IMPL_HARDWARE_FLAG or NCRYPT_IMPL_REMOVABLE_FLAG bit set). If this function is being called as part of a CNG enabled
            application, select certificates on which the NCRYPT_IMPL_TYPE_PROPERTY property is set to NCRYPT_IMPL_HARDWARE_FLAG or NCRYPT_IMPL_REMOVABLE_FLAG.
            </term>
            </item>
            <item>
            <term>CERT_SELECT_ALLOW_DUPLICATES</term>
            <term>
            Allow the selection of certificates on which the Subject and Subject Alt Name contain the same information and the certificate
            template extension value is equivalent. By default when certificates match this criteria, only the most recent certificate is selected.
            </term>
            </item>
            </list>
            </param>
            <param name="pChainParameters">
            <para>
            A pointer to a CERT_SELECT_CHAIN_PARA structure to specify parameters for chain building. If <c>NULL</c>, default parameters
            will be used.
            </para>
            <para>
            The <c>pChainPara</c> member of the CERT_SELECT_CHAIN_PARA structure points to a CERT_CHAIN_PARA structure that can be used to
            enable strong signing.
            </para>
            </param>
            <param name="cCriteria">The number of elements in the array pointed to by the rgpCriteria array.</param>
            <param name="rgpCriteria">
            A pointer to an array of CERT_SELECT_CRITERIA structures that define the selection criteria. If this parameter is set to
            <c>NULL</c>, the value of the cCriteria parameter must be zero.
            </param>
            <param name="hStore">The handle to a store from which to select the certificates.</param>
            <param name="pcSelection">
            A pointer to a <c>DWORD</c> value to receive the number of elements in the array pointed to by the pprgpSelection parameter.
            </param>
            <param name="pprgpSelection">
            <para>
            A pointer to a pointer to a location to receive an array of CERT_CHAIN_CONTEXT structure. The <c>CertSelectCertificateChains</c>
            function only returns certificate chains that match all the selection criteria. The entries in the array are ordered by quality,
            i.e. the chain with the highest quality is the first entry.
            </para>
            <para>
            Storage for the array is allocated by the <c>CertSelectCertificateChains</c> function. To free the allocated memory you must
            first release each individual chain context in the array by calling the CertFreeCertificateChain function. Then you must free
            the memory by calling the CertFreeCertificateChainList function.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the function returns <c>TRUE</c>.</para>
            <para>If the function fails, it returns zero (FALSE). For extended error information, call the GetLastError function.</para>
            <para>
            <c>Note</c> If the selection does not yield any results, the <c>CertSelectCertificateChains</c> function returns <c>TRUE</c>,
            but the value pointed to by pcSelection parameter is set to zero.
            </para>
            </returns>
            <remarks>
            <para>
            Selection criteria can be specified through either the dwFlags parameter, through the rgpCriteria parameter, or through both
            parameters. If no selection criteria are specified, the function succeeds and returns certificate chains for all certificates in
            the store specified by the hStore parameter.
            </para>
            <para>Certificate chains that are selected are ordered based on the following preference logic:</para>
            <list type="bullet">
            <item>
            <term>Prefer certificates that are smart card certificates over certificates that are not smart-card based.</term>
            </item>
            <item>
            <term>Prefer certificates that have a longer validity period (the expiration date is later.)</term>
            </item>
            <item>
            <term>If multiple certificates have same expiration date, prefer certificates that were issued more recently.</term>
            </item>
            <item>
            <term>If there is a tie, prefer shorter chains.</term>
            </item>
            </list>
            <para>
            Certain selection criteria require that a certificate chain be built before you can select that criteria for use. If the
            intermediate certificates required to build the chain are not available locally, a network retrieval is performed for the issuer
            certificates. This network retrieval is performed if the <c>CERT_SELECT_TRUSTED_ROOT</c> flag is set or for the following criteria:
            </para>
            <list type="bullet">
            <item>
            <term><c>CERT_SELECT_BY_ISSUER_NAME</c></term>
            </item>
            <item>
            <term><c>CERT_SELECT_BY_ISSUER_ATTR</c></term>
            </item>
            <item>
            <term><c>CERT_SELECT_BY_POLICY_OID</c></term>
            </item>
            </list>
            <para>Perform the following actions to enable strong signature checking:</para>
            <list type="bullet">
            <item>
            <term>
            Create a CERT_STRONG_SIGN_PARA structure, specify the required strong signing parameters, and set a pointer to the structure in
            the <c>pStrongSignPara</c> member of a CERT_CHAIN_PARA structure.
            </term>
            </item>
            <item>
            <term>Set a pointer to the CERT_CHAIN_PARA structure in the <c>pChainPara</c> member of a CERT_SELECT_CHAIN_PARA structure.</term>
            </item>
            <item>
            <term>Set a pointer to the CERT_SELECT_CHAIN_PARA structure in the pChainParameters parameter of this ( <c>CertSelectCertificateChains</c>)function.</term>
            </item>
            </list>
            <para>
            When you enable strong signature checking, any certificate chain that returns a <c>CERT_TRUST_IS_NOT_SIGNATURE_VALID</c> error
            in the <c>dwErrorStatus</c> field of the CERT_TRUST_STATUS structure will be skipped. (The pprgpSelection parameter points to a
            CERT_CHAIN_CONTEXT structure which, in turn, points to the <c>CERT_TRUST_STATUS</c> structure.) The
            <c>CERT_TRUST_HAS_WEAK_SIGNATURE</c> value is also set for a weak signature.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertSelectCertificateChains(System.IntPtr,Vanara.PInvoke.Crypt32.CertSelection,System.IntPtr,System.UInt32,Vanara.PInvoke.Crypt32.CERT_SELECT_CRITERIA[],Vanara.PInvoke.Crypt32.HCERTSTORE,System.UInt32@,System.IntPtr@)">
            <summary>The <c>CertSelectCertificateChains</c> function retrieves certificate chains based on specified selection criteria.</summary>
            <param name="pSelectionContext">A pointer to the GUID of the certificate selection scenario to use for this call.</param>
            <param name="dwFlags">
            <para>
            Flags for controlling the certificate selection process. This parameter can be a combination of zero or more of the following flags:
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_SELECT_ALLOW_EXPIRED</term>
            <term>Select expired certificates that meet selection criteria. By default expired certificates are rejected from selection.</term>
            </item>
            <item>
            <term>CERT_SELECT_TRUSTED_ROOT</term>
            <term>
            Select certificates on which the error bit in the certificate chain trust status is not set to CERT_TRUST_IS_UNTRUSTED_ROOT,
            CERT_TRUST_IS_PARTIAL_CHAIN, or CERT_TRUST_IS_NOT_TIME_VALID. In addition, certificates that have one of the following invalid
            constraint errors are not selected:
            </term>
            </item>
            <item>
            <term>CERT_SELECT_DISALLOW_SELFSIGNED</term>
            <term>Select certificates that are not self-issued and self-signed.</term>
            </item>
            <item>
            <term>CERT_SELECT_HAS_PRIVATE_KEY</term>
            <term>Select certificates that have a value set for the CERT_KEY_PROV_INFO_PROP_ID property of the certificate.</term>
            </item>
            <item>
            <term>CERT_SELECT_HAS_KEY_FOR_SIGNATURE</term>
            <term>
            Select certificates on which the value of the dwKeySpec member of the CERT_KEY_PROV_INFO_PROP_ID property is set to
            AT_SIGNATURE. If this function is being called as part of a CNG enabled application and the dwKeySpec member of the
            CERT_KEY_PROV_INFO_PROP_ID property is set to -1, select certificates on which the value of the NCRYPT_KEY_USAGE_PROPERTY
            property of the associated private key has the NCRYPT_ALLOW_SIGNING_FLAG set.
            </term>
            </item>
            <item>
            <term>CERT_SELECT_HAS_KEY_FOR_KEY_EXCHANGE</term>
            <term>
            Select certificates on which the value of the dwKeySpec member of the CERT_KEY_PROV_INFO_PROP_ID property is set to
            AT_KEYEXCHANGE. If this function is being called as part of a CNG enabled application and the dwKeySpec member of the
            CERT_KEY_PROV_INFO_PROP_ID property is set to -1, select certificates on which either NCRYPT_ALLOW_DECRYPT_FLAG or
            NCRYPT_ALLOW_KEY_AGREEMENT_FLAG is set.
            </term>
            </item>
            <item>
            <term>CERT_SELECT_HARDWARE_ONLY</term>
            <term>
            Select certificates on which the value of the PP_IMPTYPE property of the associated private key provider is set to either
            CRYPT_IMPL_HARDWARE or CRYPT_IMPL_REMOVABLE. (For CNG providers, NCRYPT_IMPL_TYPE_PROPERTY property value MUST have either the
            NCRYPT_IMPL_HARDWARE_FLAG or NCRYPT_IMPL_REMOVABLE_FLAG bit set). If this function is being called as part of a CNG enabled
            application, select certificates on which the NCRYPT_IMPL_TYPE_PROPERTY property is set to NCRYPT_IMPL_HARDWARE_FLAG or NCRYPT_IMPL_REMOVABLE_FLAG.
            </term>
            </item>
            <item>
            <term>CERT_SELECT_ALLOW_DUPLICATES</term>
            <term>
            Allow the selection of certificates on which the Subject and Subject Alt Name contain the same information and the certificate
            template extension value is equivalent. By default when certificates match this criteria, only the most recent certificate is selected.
            </term>
            </item>
            </list>
            </param>
            <param name="pChainParameters">
            <para>
            A pointer to a CERT_SELECT_CHAIN_PARA structure to specify parameters for chain building. If <c>NULL</c>, default parameters
            will be used.
            </para>
            <para>
            The <c>pChainPara</c> member of the CERT_SELECT_CHAIN_PARA structure points to a CERT_CHAIN_PARA structure that can be used to
            enable strong signing.
            </para>
            </param>
            <param name="cCriteria">The number of elements in the array pointed to by the rgpCriteria array.</param>
            <param name="rgpCriteria">
            A pointer to an array of CERT_SELECT_CRITERIA structures that define the selection criteria. If this parameter is set to
            <c>NULL</c>, the value of the cCriteria parameter must be zero.
            </param>
            <param name="hStore">The handle to a store from which to select the certificates.</param>
            <param name="pcSelection">
            A pointer to a <c>DWORD</c> value to receive the number of elements in the array pointed to by the pprgpSelection parameter.
            </param>
            <param name="pprgpSelection">
            <para>
            A pointer to a pointer to a location to receive an array of CERT_CHAIN_CONTEXT structure. The <c>CertSelectCertificateChains</c>
            function only returns certificate chains that match all the selection criteria. The entries in the array are ordered by quality,
            i.e. the chain with the highest quality is the first entry.
            </para>
            <para>
            Storage for the array is allocated by the <c>CertSelectCertificateChains</c> function. To free the allocated memory you must
            first release each individual chain context in the array by calling the CertFreeCertificateChain function. Then you must free
            the memory by calling the CertFreeCertificateChainList function.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the function returns <c>TRUE</c>.</para>
            <para>If the function fails, it returns zero (FALSE). For extended error information, call the GetLastError function.</para>
            <para>
            <c>Note</c> If the selection does not yield any results, the <c>CertSelectCertificateChains</c> function returns <c>TRUE</c>,
            but the value pointed to by pcSelection parameter is set to zero.
            </para>
            </returns>
            <remarks>
            <para>
            Selection criteria can be specified through either the dwFlags parameter, through the rgpCriteria parameter, or through both
            parameters. If no selection criteria are specified, the function succeeds and returns certificate chains for all certificates in
            the store specified by the hStore parameter.
            </para>
            <para>Certificate chains that are selected are ordered based on the following preference logic:</para>
            <list type="bullet">
            <item>
            <term>Prefer certificates that are smart card certificates over certificates that are not smart-card based.</term>
            </item>
            <item>
            <term>Prefer certificates that have a longer validity period (the expiration date is later.)</term>
            </item>
            <item>
            <term>If multiple certificates have same expiration date, prefer certificates that were issued more recently.</term>
            </item>
            <item>
            <term>If there is a tie, prefer shorter chains.</term>
            </item>
            </list>
            <para>
            Certain selection criteria require that a certificate chain be built before you can select that criteria for use. If the
            intermediate certificates required to build the chain are not available locally, a network retrieval is performed for the issuer
            certificates. This network retrieval is performed if the <c>CERT_SELECT_TRUSTED_ROOT</c> flag is set or for the following criteria:
            </para>
            <list type="bullet">
            <item>
            <term><c>CERT_SELECT_BY_ISSUER_NAME</c></term>
            </item>
            <item>
            <term><c>CERT_SELECT_BY_ISSUER_ATTR</c></term>
            </item>
            <item>
            <term><c>CERT_SELECT_BY_POLICY_OID</c></term>
            </item>
            </list>
            <para>Perform the following actions to enable strong signature checking:</para>
            <list type="bullet">
            <item>
            <term>
            Create a CERT_STRONG_SIGN_PARA structure, specify the required strong signing parameters, and set a pointer to the structure in
            the <c>pStrongSignPara</c> member of a CERT_CHAIN_PARA structure.
            </term>
            </item>
            <item>
            <term>Set a pointer to the CERT_CHAIN_PARA structure in the <c>pChainPara</c> member of a CERT_SELECT_CHAIN_PARA structure.</term>
            </item>
            <item>
            <term>Set a pointer to the CERT_SELECT_CHAIN_PARA structure in the pChainParameters parameter of this ( <c>CertSelectCertificateChains</c>)function.</term>
            </item>
            </list>
            <para>
            When you enable strong signature checking, any certificate chain that returns a <c>CERT_TRUST_IS_NOT_SIGNATURE_VALID</c> error
            in the <c>dwErrorStatus</c> field of the CERT_TRUST_STATUS structure will be skipped. (The pprgpSelection parameter points to a
            CERT_CHAIN_CONTEXT structure which, in turn, points to the <c>CERT_TRUST_STATUS</c> structure.) The
            <c>CERT_TRUST_HAS_WEAK_SIGNATURE</c> value is also set for a weak signature.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertSerializeCertificateStoreElement(Vanara.PInvoke.Crypt32.PCCERT_CONTEXT,System.UInt32,System.IntPtr,System.UInt32@)">
            <summary>
            The <c>CertSerializeCertificateStoreElement</c> function serializes a certificate context's encoded certificate and its encoded
            properties. The result can be persisted to storage so that the certificate and properties can be retrieved at a later time.
            </summary>
            <param name="pCertContext">A pointer to the CERT_CONTEXT to be serialized.</param>
            <param name="dwFlags">Reserved for future use and must be zero.</param>
            <param name="pbElement">
            <para>A pointer to a buffer that receives the serialized output, including the encoded certificate and possibly its properties.</para>
            <para>
            This parameter can be <c>NULL</c> to set the size of this information for memory allocation purposes. For more information, see
            Retrieving Data of Unknown Length.
            </para>
            </param>
            <param name="pcbElement">
            <para>
            A pointer to a <c>DWORD</c> value specifying the size, in bytes, of the buffer pointed to by the pbElement parameter. When the
            function returns, <c>DWORD</c> value contains the number of bytes stored in the buffer.
            </para>
            <para>
            <c>Note</c> When processing the data returned in the buffer, applications must use the actual size of the data returned. The
            actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually
            specified large enough to ensure that the largest possible output data fits in the buffer.) On output, the variable pointed to
            by this parameter is updated to reflect the actual size of the data copied to the buffer.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. For extended error information, call GetLastError.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertVerifySubjectCertificateContext(Vanara.PInvoke.Crypt32.PCCERT_CONTEXT,Vanara.PInvoke.Crypt32.PCCERT_CONTEXT,Vanara.PInvoke.Crypt32.CertStoreVerification@)">
            <summary>
            The <c>CertVerifySubjectCertificateContext</c> function performs the enabled verification checks on a certificate by checking
            the validity of the certificate's issuer. The new Certificate Chain Verification Functions are recommended instead of this function.
            </summary>
            <param name="pSubject">A pointer to a CERT_CONTEXT structure containing the subject's certificate.</param>
            <param name="pIssuer">
            A pointer to a CERT_CONTEXT containing the issuer's certificate. When checking just CERT_STORE_TIME_VALIDITY_FLAG, pIssuer can
            be <c>NULL</c>.
            </param>
            <param name="pdwFlags">
            <para>
            A pointer to a <c>DWORD</c> value contain verification check flags. The following flags can be set to enable verification checks
            on the subject certificate. They can be combined using a bitwise- <c>OR</c> operation to enable multiple verifications.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_STORE_REVOCATION_FLAG</term>
            <term>Checks whether the subject certificate is on the issuer's revocation list.</term>
            </item>
            <item>
            <term>CERT_STORE_SIGNATURE_FLAG</term>
            <term>Uses the public key in the issuer's certificate to verify the signature on the subject certificate.</term>
            </item>
            <item>
            <term>CERT_STORE_TIME_VALIDITY_FLAG</term>
            <term>Gets the current time and verifies that it is within the subject certificate's validity period.</term>
            </item>
            </list>
            <para>If an enabled verification check succeeds, its flag is set to zero. If it fails, then its flag is set upon return.</para>
            <para>
            If CERT_STORE_REVOCATION_FLAG was enabled and the issuer does not have a CRL in the store, then CERT_STORE_NO_CRL_FLAG is set in
            addition to CERT_STORE_REVOCATION_FLAG.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>.</para>
            <para>
            For a verification check failure, <c>TRUE</c> is still returned. <c>FALSE</c> is returned only when a bad parameter is passed in.
            </para>
            <para>For extended error information, call GetLastError. One possible error code is the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>E_INVALIDARG</term>
            <term>
            An unsupported bit was set in pdwFlags. Any combination of CERT_STORE_SIGNATURE_FLAG, CERT_STORE_TIME_VALIDITY_FLAG, and
            CERT_STORE_REVOCATION_FLAG can be set. If pIssuer is NULL, only CERT_STORE_TIME_VALIDITY_FLAG can be set.
            </term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            The hexadecimal value of the flags can be combined using bitwise- <c>OR</c> operations to enable multiple verifications. For
            example, to enable both signature and time validity, the value
            </para>
            <para>
            is placed in the pdwFlags <c>DWORD</c> value as an input parameter. If CERT_STORE_SIGNATURE_FLAG verification succeeds, but
            CERT_STORE_TIME_VALIDITY_FLAG verification fails, pdwFlags is set to CERT_STORE_TIME_VALIDITY_FLAG when the function returns.
            </para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CERT_CHAIN_CONTEXT">
            <summary>
            The <c>CERT_CHAIN_CONTEXT</c> structure contains an array of simple certificate chains and a trust status structure that
            indicates summary validity data on all of the connected simple chains.
            </summary>
            <remarks>
            When a <c>CERT_CHAIN_CONTEXT</c> is built, the first simple chain begins with an end certificate and ends with a self-signed
            certificate. If that self-signed certificate is not a root or otherwise trusted certificate, an attempt is made to build a new
            chain. CTLs are used to create the new chain beginning with the self-signed certificate from the original chain as the end
            certificate of the new chain. This process continues building additional simple chains until the first self-signed certificate
            is a trusted certificate or until an additional simple chain cannot be built.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_CHAIN_CONTEXT.cbSize">
            <summary>The size, in bytes, of this structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_CHAIN_CONTEXT.TrustStatus">
            <summary>
            A structure that indicates the combined trust status of the simple chains array. The structure includes an error status code
            and an information status code. For information about status code values, see CERT_TRUST_STATUS.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_CHAIN_CONTEXT.cChain">
            <summary>The number of simple chains in the array.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_CHAIN_CONTEXT.rgpChain">
            <summary>
            An array of pointers to simple chain structures. <c>rgpChain</c>[0] is the end certificate simple chain, and
            <c>rgpChain</c>[ <c>cChain</c>–1] is the final chain. If the end certificate is to be considered valid, the final chain must
            begin with a certificate contained in the root store or an otherwise trusted, self-signed certificate. If the original chain
            begins with a trusted certificate, there will be only a single simple chain in the array.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_CHAIN_CONTEXT.cLowerQualityChainContext">
            <summary>The number of chains in the <c>rgpLowerQualityChainContext</c> array.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_CHAIN_CONTEXT.rgpLowerQualityChainContext">
            <summary>
            An array of pointers to CERT_CHAIN_CONTEXT structures. Returned when CERT_CHAIN_RETURN_LOWER_QUALITY_CONTEXTS is set in dwFlags.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_CHAIN_CONTEXT.fHasRevocationFreshnessTime">
            <summary>A Boolean value set to <c>TRUE</c> if <c>dwRevocationFreshnessTime</c> is available.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_CHAIN_CONTEXT.dwRevocationFreshnessTime">
            <summary>
            The largest CurrentTime, in seconds, minus the certificate revocation list's (CRL's) ThisUpdate of all elements checked.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_CHAIN_CONTEXT.dwCreateFlags">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_CHAIN_CONTEXT.ChainId">
            <summary/>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CERT_CHAIN_CONTEXT.GetChain">
            <summary>Gets the chain from <see cref="F:Vanara.PInvoke.Crypt32.CERT_CHAIN_CONTEXT.rgpChain"/>.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CERT_CHAIN_CONTEXT.GetLowerQualityChainContext">
            <summary>Gets the contexts from <see cref="F:Vanara.PInvoke.Crypt32.CERT_CHAIN_CONTEXT.rgpLowerQualityChainContext"/>.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CERT_CHAIN_ELEMENT">
            <summary>
            The <c>CERT_CHAIN_ELEMENT</c> structure is a single element in a simple certificate chain. Each element has a pointer to a
            certificate context, a pointer to a structure that indicates the error status and information status of the certificate, and a
            pointer to a structure that indicates the revocation status of the certificate.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_CHAIN_ELEMENT.cbSize">
            <summary>Size of this structure in bytes.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_CHAIN_ELEMENT.pCertContext">
            <summary>A pointer to a certificate context.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_CHAIN_ELEMENT.TrustStatus">
            <summary>
            Structure indicating the status of the certificate. The structure includes an error status code and an information status
            code. For information about status code values, see CERT_TRUST_STATUS.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_CHAIN_ELEMENT.pRevocationInfo">
            <summary>
            A pointer to a CERT_REVOCATION_INFO structure with information on the revocation status of the certificate. If revocation
            checking was not enabled, <c>pRevocationInfo</c> is <c>NULL</c>.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_CHAIN_ELEMENT.pIssuanceUsage">
            <summary>A pointer to a CERT_ENHKEY_USAGE structure. If <c>NULL</c>, any issuance policy is acceptable.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_CHAIN_ELEMENT.pApplicationUsage">
            <summary>A pointer to a CERT_ENHKEY_USAGE structure. If <c>NULL</c>, any enhanced key usage is acceptable.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_CHAIN_ELEMENT.pwszExtendedErrorInfo">
            <summary>
            A pointer to a <c>null</c>-terminated wide character string that contains extended error information. If <c>NULL</c>, there
            is no extended error information.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CERT_REVOCATION_CRL_INFO">
            <summary>
            Contains information updated by a certificate revocation list (CRL) revocation type handler. The <c>CERT_REVOCATION_CRL_INFO</c>
            structure is used with both base and delta CRLs.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_REVOCATION_CRL_INFO.cbSize">
            <summary>Size, in bytes, of the structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_REVOCATION_CRL_INFO.pBaseCrlContext">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_REVOCATION_CRL_INFO.pDeltaCrlContext">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_REVOCATION_CRL_INFO.pCrlEntry">
            <summary>A pointer to an entry in either the base CRL or the delta CRL.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_REVOCATION_CRL_INFO.fDeltaCrlEntry">
            <summary>
            <c>TRUE</c> if <c>pCrlEntry</c> points to an entry in the delta CRL. <c>FALSE</c> if <c>pCrlEntry</c> points to an entry in
            the base CRL.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CERT_REVOCATION_INFO">
            <summary>The <c>CERT_REVOCATION_INFO</c> structure indicates the revocation status of a certificate in a CERT_CHAIN_ELEMENT.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_REVOCATION_INFO.cbSize">
            <summary>Size of this structure in bytes.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_REVOCATION_INFO.dwRevocationResult">
            <summary>
            <para>Currently defined values are:</para>
            <list type="bullet">
            <item>
            <term>CERT_TRUST_IS_REVOKED</term>
            </item>
            <item>
            <term>CERT_TRUST_REVOCATION_STATUS_IS_UNKNOWN</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_REVOCATION_INFO.pszRevocationOid">
            <summary>Not currently used and is set to <c>NULL</c>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_REVOCATION_INFO.pvOidSpecificInfo">
            <summary>Not currently used and is set to <c>NULL</c>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_REVOCATION_INFO.fHasFreshnessTime">
            <summary>BOOL set to <c>TRUE</c> if dwFreshnessTime has been updated.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_REVOCATION_INFO.dwFreshnessTime">
            <summary>
            If <c>fHasFreshnessTime</c> is <c>TRUE</c>, holds the CurrentTime minus the certificate revocation list's (CRL's). This time
            is in seconds.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_REVOCATION_INFO.pCrlInfo">
            <summary>For CRL base revocation checking, a non- <c>NULL</c> pointer to a CERT_REVOCATION_CRL_INFO structure.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CERT_SELECT_CHAIN_PARA">
            <summary>
            The <c>CERT_SELECT_CHAIN_PARA</c> structure contains the parameters used for building and selecting chains. This structure is
            used by the CertGetCertificateChain and CertSelectCertificateChains functions.
            </summary>
            <remarks>
            <para>
            Trust in a particular certificate being a trusted root is based on the current state of the root store and not the state of the
            root store at a time passed in by this parameter. For revocation, a certificate revocation list (CRL), itself, must be valid at
            the current time. The value of this parameter is used to determine whether a certificate listed in a CRL has been revoked.
            </para>
            <para>The following remarks apply to strong signature checking:</para>
            <list type="bullet">
            <item>
            <term>
            You can enable strong signature checking by using the CERT_CHAIN_PARA structure referenced by the <c>pChainPara</c> member. The
            <c>pStrongSignPara</c> member of the <c>CERT_CHAIN_PARA</c> structure points to a CERT_STRONG_SIGN_PARA structure that can be
            used to determine signature strength.
            </term>
            </item>
            <item>
            <term>
            When you enable strong checking and a weak signature is encountered, the <c>CERT_TRUST_IS_NOT_SIGNATURE_VALID</c> and
            <c>CERT_TRUST_HAS_WEAK_SIGNATURE</c> errors are set in the <c>dwErrorStatus</c> field of the CERT_TRUST_STATUS structure.
            </term>
            </item>
            </list>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_SELECT_CHAIN_PARA.hChainEngine">
            <summary>
            The handle of the chain engine to use to build the chain. If the value of the hChainEngine parameter is <c>NULL</c>, the
            default chain engine, <c>HCCE_CURRENT_USER</c>, is used.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_SELECT_CHAIN_PARA.pTime">
            <summary>
            <para>
            A pointer to a FILETIME structure that contains the time for which the chain is to be validated. If the value of the pTime
            parameter is <c>NULL</c>, the current system time is passed to this parameter.
            </para>
            <para><c>Note</c> The time does not affect trust list, revocation, or root store checking.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_SELECT_CHAIN_PARA.hAdditionalStore">
            <summary>
            The handle of any additional store to search for supporting certificates and certificate trust lists (CTLs). This parameter
            can be <c>NULL</c> if no additional store is to be searched.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_SELECT_CHAIN_PARA.pChainPara">
            <summary>A pointer to a CERT_CHAIN_PARA structure that includes chain-building parameters.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_SELECT_CHAIN_PARA.dwFlags">
            <summary>
            <para>Flag values that indicate special processing during chain build.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_CHAIN_REVOCATION_CHECK_CACHE_ONLY 0x00000004</term>
            <term>Revocation checking only accesses cached URLs.</term>
            </item>
            <item>
            <term>CERT_CHAIN_CACHE_ONLY_URL_RETRIEVAL 0x80000000</term>
            <term>Use only cached URLs in building a certificate chain. The Internet and intranet are not searched for URL-based objects.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CERT_SELECT_CRITERIA">
            <summary>
            The <c>CERT_SELECT_CRITERIA</c> structure specifies selection criteria that is passed to the CertSelectCertificateChains function.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_SELECT_CRITERIA.dwType">
            <summary>
            <para>
            Specifies the type of selection criteria used for the <c>ppPara</c> member. This member can have one of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_SELECT_BY_ENHKEY_USAGE 1</term>
            <term>
            Select certificates based on a specific enhanced key usage. When this flag is set, the ppPara must reference a
            null-terminated object identifier (OID) ANSI string that specifies the enhanced key usage. This criteria is evaluated on the certificate.
            </term>
            </item>
            <item>
            <term>CERT_SELECT_BY_KEY_USAGE 2</term>
            <term>
            Select certificates based on a specific szOID_KEY_USAGE extension in the certificate. When this flag is set, the ppPara
            member must reference a CERT_EXTENSION structure where the value of the extension is a DWORD that identifies the Key Usage
            bits. This criteria is evaluated on the certificate.
            </term>
            </item>
            <item>
            <term>CERT_SELECT_BY_POLICY_OID 3</term>
            <term>
            Select certificates based on a specific issuance policy. The ppPara member must reference a null-terminated OID ANSI string
            of the desired issuance policy. This criteria is evaluated on the issuance policy of the certificate chain.
            </term>
            </item>
            <item>
            <term>CERT_SELECT_BY_PROV_NAME 4</term>
            <term>
            Select certificates based on a specific private key provider. The ppPara member must reference a null-terminated Unicode
            string that represents the name of the provider.
            </term>
            </item>
            <item>
            <term>CERT_SELECT_BY_EXTENSION 5</term>
            <term>
            Select certificates based on the presence of a specified extension and an optional specified value. The ppPara member must
            reference a CERT_EXTENSION structure that specifies the extension OID and the associated value.
            </term>
            </item>
            <item>
            <term>CERT_SELECT_BY_SUBJECT_HOST_NAME 6</term>
            <term>
            Select certificates based on the Subject DNS HOST Name. The ppPara member must reference a null-terminated Unicode string
            that contains the subject host name. The selection performed based on this flag is the same as the evaluation of the
            pwszServerName member of the SSL_EXTRA_CERT_CHAIN_POLICY_PARA structure during a call to the
            CertVerifyCertificateChainPolicy function. This criteria is evaluated on the certificate.
            </term>
            </item>
            <item>
            <term>CERT_SELECT_BY_ISSUER_ATTR 7</term>
            <term>
            Select certificates based on the relative distinguished name (RDN) element of the issuer of the certificate. The ppPara
            member must reference a CERT_RDN structure that contains the RDN element of the issuer. This criteria is evaluated on the
            certificate chain.
            </term>
            </item>
            <item>
            <term>CERT_SELECT_BY_SUBJECT_ATTR 8</term>
            <term>
            Select certificates based on the RDN element in the Subject of the certificate. The ppPara member must be a reference to a
            CERT_RDN structure that contains the RDN element of the Subject. This criteria is evaluated on the certificate.
            </term>
            </item>
            <item>
            <term>CERT_SELECT_BY_ISSUER_NAME 9</term>
            <term>
            Select certificates based on the issuer of the certificate. The ppPara member must be a reference to a CERT_NAME_BLOB
            structure that contains the name of the issuer. This criteria is evaluated on the certificate chain.
            </term>
            </item>
            <item>
            <term>CERT_SELECT_BY_PUBLIC_KEY 10</term>
            <term>
            Select certificates based on the public key of the certificate. The ppPara member must reference a pointer to a
            CERT_PUBLIC_KEY_INFO structure that contains the public key. This criteria is evaluated on the certificate.
            </term>
            </item>
            <item>
            <term>CERT_SELECT_BY_TLS_SIGNATURES 11</term>
            <term>
            Select certificates based on the Transport Layer Security protocol (TLS) Signature requirement. The ppPara member must
            reference a SecPkgContext_SupportedSignatures structure. This criteria is evaluated on the certificate.
            </term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_SELECT_CRITERIA.cPara">
            <summary>A <c>DWORD</c> value that specifies the number of search attributes specified in the <c>ppPara</c> member.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_SELECT_CRITERIA.ppPara">
            <summary>
            A pointer to a pointer to one or more selection values. The data type depends on the selection type specified by the
            <c>dwType</c> member. If more than one selection value is present, an application must match only one value.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CERT_SIMPLE_CHAIN">
            <summary>
            The <c>CERT_SIMPLE_CHAIN</c> structure contains an array of chain elements and a summary trust status for the chain that the
            array represents.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_SIMPLE_CHAIN.cbSize">
            <summary>The size, in bytes, of this structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_SIMPLE_CHAIN.TrustStatus">
            <summary>
            A structure that indicates the trust status of the whole chain. The structure includes an error status code and an
            information status code. For information about status code values, see CERT_TRUST_STATUS.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_SIMPLE_CHAIN.cElement">
            <summary>The number of CERT_CHAIN_ELEMENT structures in the array.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_SIMPLE_CHAIN.rgpElement">
            <summary>
            An array of pointers to CERT_CHAIN_ELEMENT structures. <c>rgpElement</c>[0] is the end certificate chain element.
            <c>rgpElement</c>[ <c>cElement</c>–1] is the self-signed "root" certificate element.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_SIMPLE_CHAIN.pTrustListInfo">
            <summary>
            A pointer to a CERT_TRUST_LIST_INFO structure that contains a pointer to a certificate trust list (CTL) connecting this
            chain to a next certificate chain. If the current chain is the final chain, <c>pTrustListInfo</c> is <c>NULL</c>.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_SIMPLE_CHAIN.fHasRevocationFreshnessTime">
            <summary>BOOL. If <c>TRUE</c>, <c>dwRevocationFreshnessTime</c> has been calculated.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_SIMPLE_CHAIN.dwRevocationFreshnessTime">
            <summary>
            The age of a certificate revocation list (CRL) in seconds, calculated as the CurrentTime minus the CRL's ThisUpdate time.
            This values is the largest time across all elements checked.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CERT_SIMPLE_CHAIN.GetElements">
            <summary>Gets the elements from <see cref="F:Vanara.PInvoke.Crypt32.CERT_SIMPLE_CHAIN.rgpElement"/>.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CERT_TRUST_LIST_INFO">
            <summary>The <c>CERT_TRUST_LIST_INFO</c> structure that indicates valid usage of a CTL.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_TRUST_LIST_INFO.cbSize">
            <summary>Size of this structure in bytes.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_TRUST_LIST_INFO.pCtlEntry">
            <summary>
            A pointer to a structure that includes a subject identifier, the count of attributes associated with a CTL, and an array of
            those attributes.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_TRUST_LIST_INFO.pCtlContext">
            <summary>A pointer to a CTL context.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.HCERT_SERVER_OCSP_RESPONSE">
            <summary>Provides a handle to an online certificate status protocol (OCSP) response.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.HCERT_SERVER_OCSP_RESPONSE.#ctor(System.IntPtr)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Crypt32.HCERT_SERVER_OCSP_RESPONSE"/> struct.</summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
        </member>
        <member name="P:Vanara.PInvoke.Crypt32.HCERT_SERVER_OCSP_RESPONSE.NULL">
            <summary>Returns an invalid handle by instantiating a <see cref="T:Vanara.PInvoke.Crypt32.HCERT_SERVER_OCSP_RESPONSE"/> object with <see cref="F:System.IntPtr.Zero"/>.</summary>
        </member>
        <member name="P:Vanara.PInvoke.Crypt32.HCERT_SERVER_OCSP_RESPONSE.IsNull">
            <summary>Gets a value indicating whether this instance is a null handle.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.HCERT_SERVER_OCSP_RESPONSE.op_Explicit(Vanara.PInvoke.Crypt32.HCERT_SERVER_OCSP_RESPONSE)~System.IntPtr">
            <summary>Performs an explicit conversion from <see cref="T:Vanara.PInvoke.Crypt32.HCERT_SERVER_OCSP_RESPONSE"/> to <see cref="T:System.IntPtr"/>.</summary>
            <param name="h">The handle.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.HCERT_SERVER_OCSP_RESPONSE.op_Implicit(System.IntPtr)~Vanara.PInvoke.Crypt32.HCERT_SERVER_OCSP_RESPONSE">
            <summary>Performs an implicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:Vanara.PInvoke.Crypt32.HCERT_SERVER_OCSP_RESPONSE"/>.</summary>
            <param name="h">The pointer to a handle.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.HCERT_SERVER_OCSP_RESPONSE.op_Inequality(Vanara.PInvoke.Crypt32.HCERT_SERVER_OCSP_RESPONSE,Vanara.PInvoke.Crypt32.HCERT_SERVER_OCSP_RESPONSE)">
            <summary>Implements the operator !=.</summary>
            <param name="h1">The first handle.</param>
            <param name="h2">The second handle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.HCERT_SERVER_OCSP_RESPONSE.op_Equality(Vanara.PInvoke.Crypt32.HCERT_SERVER_OCSP_RESPONSE,Vanara.PInvoke.Crypt32.HCERT_SERVER_OCSP_RESPONSE)">
            <summary>Implements the operator ==.</summary>
            <param name="h1">The first handle.</param>
            <param name="h2">The second handle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.HCERT_SERVER_OCSP_RESPONSE.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.HCERT_SERVER_OCSP_RESPONSE.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.HCERT_SERVER_OCSP_RESPONSE.DangerousGetHandle">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.HCERTCHAINENGINE">
            <summary>Provides a handle to a Certificate Chain Engine.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.HCERTCHAINENGINE.#ctor(System.IntPtr)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Crypt32.HCERTCHAINENGINE"/> struct.</summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
        </member>
        <member name="P:Vanara.PInvoke.Crypt32.HCERTCHAINENGINE.NULL">
            <summary>Returns an invalid handle by instantiating a <see cref="T:Vanara.PInvoke.Crypt32.HCERTCHAINENGINE"/> object with <see cref="F:System.IntPtr.Zero"/>.</summary>
        </member>
        <member name="P:Vanara.PInvoke.Crypt32.HCERTCHAINENGINE.IsNull">
            <summary>Gets a value indicating whether this instance is a null handle.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.HCERTCHAINENGINE.op_Explicit(Vanara.PInvoke.Crypt32.HCERTCHAINENGINE)~System.IntPtr">
            <summary>Performs an explicit conversion from <see cref="T:Vanara.PInvoke.Crypt32.HCERTCHAINENGINE"/> to <see cref="T:System.IntPtr"/>.</summary>
            <param name="h">The handle.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.HCERTCHAINENGINE.op_Implicit(System.IntPtr)~Vanara.PInvoke.Crypt32.HCERTCHAINENGINE">
            <summary>Performs an implicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:Vanara.PInvoke.Crypt32.HCERTCHAINENGINE"/>.</summary>
            <param name="h">The pointer to a handle.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.HCERTCHAINENGINE.op_Inequality(Vanara.PInvoke.Crypt32.HCERTCHAINENGINE,Vanara.PInvoke.Crypt32.HCERTCHAINENGINE)">
            <summary>Implements the operator !=.</summary>
            <param name="h1">The first handle.</param>
            <param name="h2">The second handle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.HCERTCHAINENGINE.op_Equality(Vanara.PInvoke.Crypt32.HCERTCHAINENGINE,Vanara.PInvoke.Crypt32.HCERTCHAINENGINE)">
            <summary>Implements the operator ==.</summary>
            <param name="h1">The first handle.</param>
            <param name="h2">The second handle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.HCERTCHAINENGINE.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.HCERTCHAINENGINE.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.HCERTCHAINENGINE.DangerousGetHandle">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.PCCERT_SERVER_OCSP_RESPONSE_CONTEXT">
            <summary>Provides a handle to a CERT_SERVER_OCSP_RESPONSE_CONTEXT.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.PCCERT_SERVER_OCSP_RESPONSE_CONTEXT.#ctor(System.IntPtr)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Crypt32.PCCERT_SERVER_OCSP_RESPONSE_CONTEXT"/> struct.</summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
        </member>
        <member name="P:Vanara.PInvoke.Crypt32.PCCERT_SERVER_OCSP_RESPONSE_CONTEXT.NULL">
            <summary>
            Returns an invalid handle by instantiating a <see cref="T:Vanara.PInvoke.Crypt32.PCCERT_SERVER_OCSP_RESPONSE_CONTEXT"/> object with <see cref="F:System.IntPtr.Zero"/>.
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Crypt32.PCCERT_SERVER_OCSP_RESPONSE_CONTEXT.IsNull">
            <summary>Gets a value indicating whether this instance is a null handle.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.PCCERT_SERVER_OCSP_RESPONSE_CONTEXT.op_Explicit(Vanara.PInvoke.Crypt32.PCCERT_SERVER_OCSP_RESPONSE_CONTEXT)~System.IntPtr">
            <summary>Performs an explicit conversion from <see cref="T:Vanara.PInvoke.Crypt32.PCCERT_SERVER_OCSP_RESPONSE_CONTEXT"/> to <see cref="T:System.IntPtr"/>.</summary>
            <param name="h">The handle.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.PCCERT_SERVER_OCSP_RESPONSE_CONTEXT.op_Implicit(System.IntPtr)~Vanara.PInvoke.Crypt32.PCCERT_SERVER_OCSP_RESPONSE_CONTEXT">
            <summary>Performs an implicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:Vanara.PInvoke.Crypt32.PCCERT_SERVER_OCSP_RESPONSE_CONTEXT"/>.</summary>
            <param name="h">The pointer to a handle.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.PCCERT_SERVER_OCSP_RESPONSE_CONTEXT.op_Inequality(Vanara.PInvoke.Crypt32.PCCERT_SERVER_OCSP_RESPONSE_CONTEXT,Vanara.PInvoke.Crypt32.PCCERT_SERVER_OCSP_RESPONSE_CONTEXT)">
            <summary>Implements the operator !=.</summary>
            <param name="h1">The first handle.</param>
            <param name="h2">The second handle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.PCCERT_SERVER_OCSP_RESPONSE_CONTEXT.op_Equality(Vanara.PInvoke.Crypt32.PCCERT_SERVER_OCSP_RESPONSE_CONTEXT,Vanara.PInvoke.Crypt32.PCCERT_SERVER_OCSP_RESPONSE_CONTEXT)">
            <summary>Implements the operator ==.</summary>
            <param name="h1">The first handle.</param>
            <param name="h2">The second handle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.PCCERT_SERVER_OCSP_RESPONSE_CONTEXT.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.PCCERT_SERVER_OCSP_RESPONSE_CONTEXT.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.PCCERT_SERVER_OCSP_RESPONSE_CONTEXT.DangerousGetHandle">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.SafePCCERT_CONTEXT">
            <summary>Provides a <see cref="T:System.Runtime.InteropServices.SafeHandle"/> for <see cref="T:Vanara.PInvoke.Crypt32.PCCERT_CONTEXT"/> that is disposed using <see cref="M:Vanara.PInvoke.Crypt32.CertFreeCertificateContext(Vanara.PInvoke.Crypt32.PCCERT_CONTEXT)"/>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafePCCERT_CONTEXT.Null">
            <summary>Represents a NULL handle for <see cref="T:Vanara.PInvoke.Crypt32.SafePCCERT_CONTEXT"/>. This must be used instead of <see langword="null"/>.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.SafePCCERT_CONTEXT.#ctor(System.IntPtr,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Crypt32.SafePCCERT_CONTEXT"/> class and assigns an existing handle.</summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
            <param name="ownsHandle">
            <see langword="true"/> to reliably release the handle during the finalization phase; otherwise, <see langword="false"/> (not recommended).
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.SafePCCERT_CONTEXT.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Crypt32.SafePCCERT_CONTEXT"/> class.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.SafePCCERT_CONTEXT.op_Implicit(Vanara.PInvoke.Crypt32.SafePCCERT_CONTEXT)~Vanara.PInvoke.Crypt32.PCCERT_CONTEXT">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.Crypt32.SafePCCERT_CONTEXT"/> to <see cref="T:Vanara.PInvoke.Crypt32.PCCERT_CONTEXT"/>.</summary>
            <param name="h">The safe handle instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.SafePCCERT_CONTEXT.op_Explicit(Vanara.PInvoke.Crypt32.SafePCCERT_CONTEXT)~Vanara.PInvoke.Crypt32.CERT_CONTEXT*">
            <summary>
            Performs an explicit conversion from <see cref="T:Vanara.PInvoke.Crypt32.SafePCCERT_CONTEXT"/> to <see cref="T:Vanara.PInvoke.Crypt32.CERT_CONTEXT"/>.
            </summary>
            <param name="h">The h.</param>
            <returns>
            The resulting <see cref="T:Vanara.PInvoke.Crypt32.CERT_CONTEXT"/> instance from the conversion.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.SafePCCERT_CONTEXT.InternalReleaseHandle">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.SafePCCERT_SERVER_OCSP_RESPONSE_CONTEXT">
            <summary>
            Provides a <see cref="T:System.Runtime.InteropServices.SafeHandle"/> for <see cref="T:Vanara.PInvoke.Crypt32.PCCERT_SERVER_OCSP_RESPONSE_CONTEXT"/> that is disposed using <see cref="M:Vanara.PInvoke.Crypt32.CertFreeServerOcspResponseContext(Vanara.PInvoke.Crypt32.PCCERT_SERVER_OCSP_RESPONSE_CONTEXT)"/>.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.SafePCCERT_SERVER_OCSP_RESPONSE_CONTEXT.#ctor(System.IntPtr,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Vanara.PInvoke.Crypt32.SafePCCERT_SERVER_OCSP_RESPONSE_CONTEXT"/> class and assigns an existing handle.
            </summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
            <param name="ownsHandle">
            <see langword="true"/> to reliably release the handle during the finalization phase; otherwise, <see langword="false"/> (not recommended).
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.SafePCCERT_SERVER_OCSP_RESPONSE_CONTEXT.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Crypt32.SafePCCERT_SERVER_OCSP_RESPONSE_CONTEXT"/> class.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.SafePCCERT_SERVER_OCSP_RESPONSE_CONTEXT.op_Implicit(Vanara.PInvoke.Crypt32.SafePCCERT_SERVER_OCSP_RESPONSE_CONTEXT)~Vanara.PInvoke.Crypt32.PCCERT_SERVER_OCSP_RESPONSE_CONTEXT">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.Crypt32.SafePCCERT_SERVER_OCSP_RESPONSE_CONTEXT"/> to <see cref="T:Vanara.PInvoke.Crypt32.PCCERT_SERVER_OCSP_RESPONSE_CONTEXT"/>.</summary>
            <param name="h">The safe handle instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.SafePCCERT_SERVER_OCSP_RESPONSE_CONTEXT.InternalReleaseHandle">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CertNameFlags">
            <summary>Indicates the type of processing needed.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertNameFlags.CERT_NAME_ISSUER_FLAG">
            <summary>Acquires the issuer's name. If not set, acquires the subject's name.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertNameFlags.CERT_NAME_DISABLE_IE4_UTF8_FLAG">
            <summary>Skips the default initial attempt to decode the value as UTF8 and decodes as 8-bit characters.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertNameFlags.CERT_NAME_SEARCH_ALL_NAMES_FLAG">
            <summary>
            If the dwType parameter is set to CERT_NAME_DNS_TYPE, all applicable names are returned for the specified DNS value. If
            there is no DNS name but there is a CN component in the subject, the CN is returned instead. If there is a CN and a DNS
            name, only the DNS names are returned. This mimics the SSL chain building policy. If you set this flag for a name type other
            than CERT_NAME_DNS_TYPE, this function returns a null-terminated empty string.
            <para>Windows 8 and Windows Server 2012: Support for this flag begins.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertNameFlags.CERT_NAME_STR_ENABLE_PUNYCODE_FLAG">
            <summary>
            This flag enables decoding of IA5String strings to Unicode string values based on the dwType parameter value as defined below:
            <para>
            CERT_NAME_EMAIL_TYPE: If the host name portion of the email address contains a Punycode encoded IA5String component, it is
                                  converted to the Unicode equivalent.
            </para>
            <para>
            CERT_NAME_SIMPLE_DISPLAY_TYPE: If a Subject Name of szOID_RSA_emailAddr or the rfc822Name from the Subject Alternative Name
                                           is returned from the certificate, and the host name portion of the email address a contains
                                           Punycode encoded IA5String component, it is converted to the Unicode equivalent.
            </para>
            <para>
            CERT_NAME_DNS_TYPE: If the certificate has an Issuer Alternative Name, with a DNSName choice, and the host name portion of
                                the email address a contains Punycode encoded IA5String component, it is converted to the Unicode equivalent.
            </para>
            <para>
            CERT_NAME_URL_TYPE: The URI is decoded and unescaped. If the server host name of the URI contains a Punycode encoded
                                IA5String component, the host name string is converted to the Unicode equivalent.
            </para>
            <para>Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP: This value is not supported.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CertNameStringFormat">
            <summary>Specifies the format of the output string and other options for the contents of the string.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertNameStringFormat.CERT_SIMPLE_NAME_STR">
            <summary>
            All object identifiers (OIDs) are discarded. CERT_RDN entries are separated by a comma followed by a space (, ). Multiple
            attributes in a CERT_RDN are separated by a plus sign enclosed within spaces ( + ), for example, Microsoft, Kim Abercrombie
            + Programmer.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertNameStringFormat.CERT_OID_NAME_STR">
            <summary>
            OIDs are included with an equal sign (=) separator from their attribute value. CERT_RDN entries are separated by a comma
            followed by a space (, ). Multiple attributes in a CERT_RDN are separated by a plus sign followed by a space (+ ).
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertNameStringFormat.CERT_X500_NAME_STR">
            <summary>
            OIDs are converted to their X.500 key names; otherwise, they are the same as <strong>CERT_OID_NAME_STR</strong>. If an OID
            does not have a corresponding X.500 name, the OID is used with a prefix of OID.
            <para>The RDN value is quoted if it contains leading or trailing white space or one of the following characters:</para>
            <list type="bullet">
            <item>Comma (,)</item>
            <item>Plus sign (+)</item>
            <item>Equal sign (=)</item>
            <item>Inch mark (")</item>
            <item>Backslash followed by the letter n (\n)</item>
            <item>Less than sign (&lt;)</item>
            <item>Greater than sign (&gt;)</item>
            <item>Number sign (#)</item>
            <item>Semicolon (;)</item>
            </list>
            <para>
            The quotation character is an inch mark ("). If the RDN value contains an inch mark, it is enclosed within quotation marks ("").
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertNameStringFormat.CERT_NAME_STR_SEMICOLON_FLAG">
            <summary>Replace the comma followed by a space (, ) separator with a semicolon followed by a space (; ) separator.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertNameStringFormat.CERT_NAME_STR_CRLF_FLAG">
            <summary>
            Replace the comma followed by a space (, ) separator with a backslash followed by the letter r followed by a backslash
            followed by the letter n (\r\n) separator.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertNameStringFormat.CERT_NAME_STR_NO_PLUS_FLAG">
            <summary>Replace the plus sign enclosed within spaces ( + ) separator with a single space separator.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertNameStringFormat.CERT_NAME_STR_NO_QUOTING_FLAG">
            <summary>Disable quoting.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertNameStringFormat.CERT_NAME_STR_REVERSE_FLAG">
            <summary>The order of the RDNs in the distinguished name string is reversed after decoding. This flag is not set by default.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertNameStringFormat.CERT_NAME_STR_DISABLE_IE4_UTF8_FLAG">
            <summary>
            By default, a CERT_RDN_T61_STRING X.500 key string is decoded as UTF8. If UTF8 decoding fails, the X.500 key is decoded as
            an 8 bit character. Use CERT_NAME_STR_DISABLE_IE4_UTF8_FLAG to skip the initial attempt to decode as UTF8.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertNameStringFormat.CERT_NAME_STR_ENABLE_PUNYCODE_FLAG">
            <summary>
            If the name pointed to by the pName parameter contains an email RDN, and the host name portion of the email address contains
            a Punycode encoded IA5String, the name is converted to the Unicode equivalent.
            <para>Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP: This value is not supported.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CertNameType">
            <summary>Indicating how the name is to be found and how the output is to be formatted.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertNameType.CERT_NAME_EMAIL_TYPE">
            <summary>
            If the certificate has a Subject Alternative Name extension or Issuer Alternative Name, uses the first rfc822Name choice. If
            no rfc822Name choice is found in the extension, uses the Subject Name field for the Email OID. If either rfc822Name or the
            Email OID is found, uses the string. Otherwise, returns an empty string (returned character count is 1). pvTypePara is not
            used and is set to NULL.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertNameType.CERT_NAME_RDN_TYPE">
            <summary>
            Converts the Subject Name BLOB by calling CertNameToStr. pvTypePara points to a DWORD containing the dwStrType passed to
            CertNameToStr. If the Subject Name field is empty and the certificate has a Subject Alternative Name extension, uses the
            first directory Name choice from CertNameToStr.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertNameType.CERT_NAME_ATTR_TYPE">
            <summary>
            pvTypePara points to an object identifier (OID) specifying the name attribute to be returned. For example, if pvTypePara is
            szOID_COMMON_NAME, uses the Subject Name member. If the Subject Name member is empty and the certificate has a Subject
            Alternative Name extension, uses the first directoryName choice.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertNameType.CERT_NAME_SIMPLE_DISPLAY_TYPE">
            <summary>
            Iterates through the following list of name attributes and uses the Subject Name or the Subject Alternative Name extension
            for the first occurrence of: szOID_COMMON_NAME, szOID_ORGANIZATIONAL_UNIT_NAME, szOID_ORGANIZATION_NAME, or szOID_RSA_emailAddr.
            <para>
            If one of these attributes is not found, uses the Subject Alternative Name extension for a rfc822Name choice. If there is
            still no match, uses the first attribute.
            </para>
            <para>pvTypePara is not used and is set to NULL.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertNameType.CERT_NAME_FRIENDLY_DISPLAY_TYPE">
            <summary>
            Checks the certificate for a CERT_FRIENDLY_NAME_PROP_ID property. If the certificate has this property, it is returned. If
            the certificate does not have the property, the CERT_NAME_SIMPLE_DISPLAY_TYPE is returned.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertNameType.CERT_NAME_DNS_TYPE">
            <summary>
            If the certificate has a Subject Alternative Name extension for issuer, Issuer Alternative Name, search for first DNSName choice.
            <para>If the DNSName choice is not found in the extension, search the Subject Name field for the CN OID, "2.5.4.3".</para>
            <para>If the DNSName or CN OID is found, return the string. Otherwise, return an empty string.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertNameType.CERT_NAME_URL_TYPE">
            <summary>
            If the certificate has a Subject Alternative Name extension for issuer, Issuer Alternative Name, search for first URL
            choice. If the URL choice is found, return the string. Otherwise, return an empty string.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertNameType.CERT_NAME_UPN_TYPE">
            <summary>
            If the certificate has a Subject Alternative Name extension, search the OtherName choices looking for a pszObjId ==
            szOID_NT_PRINCIPAL_NAME, ("1.3.6.1.4.1.311.20.2.3").
            <para>
            If the UPN OID is found, decode the BLOB as a X509_UNICODE_ANY_STRING and return the decoded string. Otherwise, return an
            empty string.
            </para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CertRDNType">
            <summary>Indicates the kind of RDN value to be converted.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertRDNType.CERT_RDN_ANY_TYPE">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertRDNType.CERT_RDN_ENCODED_BLOB">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertRDNType.CERT_RDN_OCTET_STRING">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertRDNType.CERT_RDN_NUMERIC_STRING">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertRDNType.CERT_RDN_PRINTABLE_STRING">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertRDNType.CERT_RDN_TELETEX_STRING">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertRDNType.CERT_RDN_T61_STRING">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertRDNType.CERT_RDN_VIDEOTEX_STRING">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertRDNType.CERT_RDN_IA5_STRING">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertRDNType.CERT_RDN_GRAPHIC_STRING">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertRDNType.CERT_RDN_VISIBLE_STRING">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertRDNType.CERT_RDN_ISO646_STRING">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertRDNType.CERT_RDN_GENERAL_STRING">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertRDNType.CERT_RDN_UNIVERSAL_STRING">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertRDNType.CERT_RDN_INT4_STRING">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertRDNType.CERT_RDN_BMP_STRING">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertRDNType.CERT_RDN_UNICODE_STRING">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertRDNType.CERT_RDN_UTF8_STRING">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CryptFormatStr">
            <summary>Structure format type values.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptFormatStr.CRYPT_FORMAT_STR_SINGLE_LINE">
            <summary>
            Display the data in a single line. Each subfield is concatenated with a comma (,). For more information, see Remarks.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptFormatStr.CRYPT_FORMAT_STR_MULTI_LINE">
            <summary>Display the data in multiple lines rather than single line (the default). For more information, see Remarks.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptFormatStr.CRYPT_FORMAT_STR_NO_HEX">
            <summary>Disables the hexadecimal dump. For more information, see Remarks.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CryptStringFormat">
            <summary>Specifies the format of the resulting formatted string.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptStringFormat.CRYPT_STRING_BASE64HEADER">
            <summary>Base64, with certificate beginning and ending headers.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptStringFormat.CRYPT_STRING_BASE64">
            <summary>Base64, without headers.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptStringFormat.CRYPT_STRING_BINARY">
            <summary>Pure binary copy.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptStringFormat.CRYPT_STRING_BASE64REQUESTHEADER">
            <summary>Base64, with request beginning and ending headers.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptStringFormat.CRYPT_STRING_HEX">
            <summary>Hexadecimal only.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptStringFormat.CRYPT_STRING_HEXASCII">
            <summary>Hexadecimal, with ASCII character display.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptStringFormat.CRYPT_STRING_BASE64X509CRLHEADER">
            <summary>Base64, with X.509 CRL beginning and ending headers.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptStringFormat.CRYPT_STRING_HEXADDR">
            <summary>Hexadecimal, with address display.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptStringFormat.CRYPT_STRING_HEXASCIIADDR">
            <summary>Hexadecimal, with ASCII character and address display.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptStringFormat.CRYPT_STRING_HEXRAW">
            <summary>
            A raw hexadecimal string.
            <para>Windows Server 2003 and Windows XP: This value is not supported.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptStringFormat.CRYPT_STRING_STRICT">
            <summary>
            Enforce strict decoding of ASN.1 text formats. Some ASN.1 binary BLOBS can have the first few bytes of the BLOB incorrectly
            interpreted as Base64 text. In this case, the rest of the text is ignored. Use this flag to enforce complete decoding of the BLOB.
            <para>Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP: This value is not supported.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptStringFormat.CRYPT_STRING_NOCRLF">
            <summary>
            Do not append any new line characters to the encoded string. The default behavior is to use a carriage return/line feed
            (CR/LF) pair (0x0D/0x0A) to represent a new line.
            <para>Windows Server 2003 and Windows XP: This value is not supported.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptStringFormat.CRYPT_STRING_NOCR">
            <summary>
            Only use the line feed (LF) character (0x0A) for a new line. The default behavior is to use a CR/LF pair (0x0D/0x0A) to
            represent a new line.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptStringFormat.CRYPT_STRING_BASE64_ANY">
            <summary>Tries the following, in order: CRYPT_STRING_BASE64HEADER, CRYPT_STRING_BASE64</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptStringFormat.CRYPT_STRING_ANY">
            <summary>Tries the following, in order: CRYPT_STRING_BASE64HEADER, CRYPT_STRING_BASE64, CRYPT_STRING_BINARY</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptStringFormat.CRYPT_STRING_HEX_ANY">
            <summary>
            Tries the following, in order: CRYPT_STRING_HEXADDR, CRYPT_STRING_HEXASCIIADDR, CRYPT_STRING_HEX, CRYPT_STRING_HEXRAW, CRYPT_STRING_HEXASCII
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptStringFormat.CRYPT_STRING_BASE64URI">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptStringFormat.CRYPT_STRING_ENCODEMASK">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptStringFormat.CRYPT_STRING_RESERVED100">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptStringFormat.CRYPT_STRING_RESERVED200">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptStringFormat.CRYPT_STRING_PERCENTESCAPE">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptStringFormat.CRYPT_STRING_HASHDATA">
            <summary/>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertAlgIdToOID(System.UInt32)">
            <summary>
            <para>
            Use the CryptFindOIDInfo function instead of this function because ALG_ID identifiers are no longer supported in CNG. Use the
            <c>CRYPT_OID_INFO_CNG_ALGID_KEY</c> value in the dwKeyType parameter of the CryptFindOIDInfo function instead.
            </para>
            <para>
            <c>Windows Server 2003 and Windows XP:</c> The <c>CertAlgIdToOID</c> function converts a CryptoAPI algorithm identifier (ALG_ID)
            to an Abstract Syntax Notation One (ASN.1) object identifier (OID) string.
            </para>
            </summary>
            <param name="dwAlgId">Value to be converted to an OID.</param>
            <returns>
            <para>If the function succeeds, the function returns the null-terminated OID string.</para>
            <para>If no OID string corresponds to the algorithm identifier, the function returns <c>NULL</c>.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertGetNameString(Vanara.PInvoke.Crypt32.PCCERT_CONTEXT,Vanara.PInvoke.Crypt32.CertNameType,Vanara.PInvoke.Crypt32.CertNameFlags,System.IntPtr,System.Text.StringBuilder,System.UInt32)">
            <summary>
            The <c>CertGetNameString</c> function obtains the subject or issuer name from a certificate CERT_CONTEXT structure and converts
            it to a <c>null</c>-terminated character string.
            </summary>
            <param name="pCertContext">A pointer to a CERT_CONTEXT certificate context that includes a subject and issuer name to be converted.</param>
            <param name="dwType">
            <para><c>DWORD</c> indicating how the name is to be found and how the output is to be formatted.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_NAME_EMAIL_TYPE 1</term>
            <term>
            If the certificate has a Subject Alternative Name extension or Issuer Alternative Name, uses the first rfc822Name choice. If no
            rfc822Name choice is found in the extension, uses the Subject Name field for the Email OID. If either rfc822Name or the Email
            OID is found, uses the string. Otherwise, returns an empty string (returned character count is 1). pvTypePara is not used and is
            set to NULL.
            </term>
            </item>
            <item>
            <term>CERT_NAME_RDN_TYPE 2</term>
            <term>
            Converts the Subject Name BLOB by calling CertNameToStr. pvTypePara points to a DWORD containing the dwStrType passed to
            CertNameToStr. If the Subject Name field is empty and the certificate has a Subject Alternative Name extension, uses the first
            directory Name choice from CertNameToStr.
            </term>
            </item>
            <item>
            <term>CERT_NAME_ATTR_TYPE 3</term>
            <term>
            pvTypePara points to an object identifier (OID) specifying the name attribute to be returned. For example, if pvTypePara is
            szOID_COMMON_NAME, uses the Subject Name member. If the Subject Name member is empty and the certificate has a Subject
            Alternative Name extension, uses the first directoryName choice.
            </term>
            </item>
            <item>
            <term>CERT_NAME_SIMPLE_DISPLAY_TYPE 4</term>
            <term>
            Iterates through the following list of name attributes and uses the Subject Name or the Subject Alternative Name extension for
            the first occurrence of: szOID_COMMON_NAME, szOID_ORGANIZATIONAL_UNIT_NAME, szOID_ORGANIZATION_NAME, or szOID_RSA_emailAddr. If
            one of these attributes is not found, uses the Subject Alternative Name extension for a rfc822Name choice. If there is still no
            match, uses the first attribute. pvTypePara is not used and is set to NULL.
            </term>
            </item>
            <item>
            <term>CERT_NAME_FRIENDLY_DISPLAY_TYPE 5</term>
            <term>
            Checks the certificate for a CERT_FRIENDLY_NAME_PROP_ID property. If the certificate has this property, it is returned. If the
            certificate does not have the property, the CERT_NAME_SIMPLE_DISPLAY_TYPE is returned.
            </term>
            </item>
            <item>
            <term>CERT_NAME_DNS_TYPE 6</term>
            <term>
            If the certificate has a Subject Alternative Name extension for issuer, Issuer Alternative Name, search for first DNSName
            choice. If the DNSName choice is not found in the extension, search the Subject Name field for the CN OID, "2.5.4.3". If the
            DNSName or CN OID is found, return the string. Otherwise, return an empty string.
            </term>
            </item>
            <item>
            <term>CERT_NAME_URL_TYPE 7</term>
            <term>
            If the certificate has a Subject Alternative Name extension for issuer, Issuer Alternative Name, search for first URL choice. If
            the URL choice is found, return the string. Otherwise, return an empty string.
            </term>
            </item>
            <item>
            <term>CERT_NAME_UPN_TYPE 8</term>
            <term>
            If the certificate has a Subject Alternative Name extension, search the OtherName choices looking for a pszObjId ==
            szOID_NT_PRINCIPAL_NAME, ("1.3.6.1.4.1.311.20.2.3"). If the UPN OID is found, decode the BLOB as a X509_UNICODE_ANY_STRING and
            return the decoded string. Otherwise, return an empty string.
            </term>
            </item>
            </list>
            </param>
            <param name="dwFlags">
            <para>Indicates the type of processing needed.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_NAME_ISSUER_FLAG 0x1</term>
            <term>Acquires the issuer's name. If not set, acquires the subject's name.</term>
            </item>
            <item>
            <term>CERT_NAME_DISABLE_IE4_UTF8_FLAG 0x00010000</term>
            <term>Skips the default initial attempt to decode the value as UTF8 and decodes as 8-bit characters.</term>
            </item>
            <item>
            <term>CERT_NAME_SEARCH_ALL_NAMES_FLAG 0x2</term>
            <term>
            If the dwType parameter is set to CERT_NAME_DNS_TYPE, all applicable names are returned for the specified DNS value. If there is
            no DNS name but there is a CN component in the subject, the CN is returned instead. If there is a CN and a DNS name, only the
            DNS names are returned. This mimics the SSL chain building policy. If you set this flag for a name type other than
            CERT_NAME_DNS_TYPE, this function returns a null-terminated empty string. Windows 8 and Windows Server 2012: Support for this
            flag begins.
            </term>
            </item>
            <item>
            <term>CERT_NAME_STR_ENABLE_PUNYCODE_FLAG 0x00200000</term>
            <term>
            This flag enables decoding of IA5String strings to Unicode string values based on the dwType parameter value as defined below:
            Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP: This value is not supported.
            </term>
            </item>
            </list>
            </param>
            <param name="pvTypePara">
            A pointer to either a <c>DWORD</c> containing the dwStrType or an object identifier (OID) specifying the name attribute. The
            type pointed to is determined by the value of dwType.
            </param>
            <param name="pszNameString">
            <para>
            A pointer to an allocated buffer to receive the returned string. If pszNameString is not <c>NULL</c> and cchNameString is not
            zero, pszNameString is a <c>null</c>-terminated string.
            </para>
            <para>
            If <c>CERT_NAME_SEARCH_ALL_NAMES_FLAG</c> is specified in the dwFlags parameter and <c>CERT_NAME_DNS_TYPE</c> is set in the
            dwType parameter, the returned string will contain all of the DNS names that apply. Each string in the output string is
            null-terminated and the last string will be double null-terminated. If no DNS names are found, a single null-terminated empty
            string is returned.
            </para>
            </param>
            <param name="cchNameString">
            Size, in characters, allocated for the returned string. The size must include the terminating <c>NULL</c> character.
            </param>
            <returns>
            Returns the number of characters converted, including the terminating zero character. If pszNameString is <c>NULL</c> or
            cchNameString is zero, returns the required size of the destination string (including the terminating <c>NULL</c> character). If
            the specified name type is not found, returns a <c>null</c>-terminated empty string with a returned character count of 1.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertNameToStr(Vanara.PInvoke.Crypt32.CertEncodingType,Vanara.PInvoke.Crypt32.CRYPTOAPI_BLOB@,Vanara.PInvoke.Crypt32.CertNameStringFormat,System.Text.StringBuilder,System.UInt32)">
            <summary>
            <para>
            The <c>CertNameToStr</c> function converts an encoded name in a CERT_NAME_BLOB structure to a null-terminated character string.
            </para>
            <para>
            The string representation follows the distinguished name specifications in RFC 1779. The exceptions to this rule are listed in
            the Remarks section, below.
            </para>
            </summary>
            <param name="dwCertEncodingType">
            <para>
            The certificate encoding type that was used to encode the name. The message encoding type identifier, contained in the high
            <c>WORD</c> of this value, is ignored by this function.
            </para>
            <para>This parameter can be the following currently defined certificate encoding type.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>X509_ASN_ENCODING 1 (0x1)</term>
            <term>Specifies X.509 certificate encoding.</term>
            </item>
            </list>
            </param>
            <param name="pName">A pointer to the CERT_NAME_BLOB structure to be converted.</param>
            <param name="dwStrType">
            <para>
            This parameter specifies the format of the output string. This parameter also specifies other options for the contents of the string.
            </para>
            <para>This parameter can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_SIMPLE_NAME_STR 1</term>
            <term>
            All object identifiers (OIDs) are discarded. CERT_RDN entries are separated by a comma followed by a space (, ). Multiple
            attributes in a CERT_RDN are separated by a plus sign enclosed within spaces ( + ), for example, Microsoft, Kim Abercrombie + Programmer.
            </term>
            </item>
            <item>
            <term>CERT_OID_NAME_STR 2</term>
            <term>
            OIDs are included with an equal sign (=) separator from their attribute value. CERT_RDN entries are separated by a comma
            followed by a space (, ). Multiple attributes in a CERT_RDN are separated by a plus sign followed by a space (+ ).
            </term>
            </item>
            <item>
            <term>CERT_X500_NAME_STR 3</term>
            <term>
            OIDs are converted to their X.500 key names; otherwise, they are the same as CERT_OID_NAME_STR. If an OID does not have a
            corresponding X.500 name, the OID is used with a prefix of OID. The RDN value is quoted if it contains leading or trailing white
            space or one of the following characters: The quotation character is an inch mark ("). If the RDN value contains an inch mark,
            it is enclosed within quotation marks ("").
            </term>
            </item>
            </list>
            <para>The following options can also be combined with the value above to specify additional options for the string.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_NAME_STR_SEMICOLON_FLAG 0x40000000</term>
            <term>Replace the comma followed by a space (, ) separator with a semicolon followed by a space (; ) separator.</term>
            </item>
            <item>
            <term>CERT_NAME_STR_CRLF_FLAG 0x08000000</term>
            <term>
            Replace the comma followed by a space (, ) separator with a backslash followed by the letter r followed by a backslash followed
            by the letter n (\r\n) separator.
            </term>
            </item>
            <item>
            <term>CERT_NAME_STR_NO_PLUS_FLAG 0x20000000</term>
            <term>Replace the plus sign enclosed within spaces ( + ) separator with a single space separator.</term>
            </item>
            <item>
            <term>CERT_NAME_STR_NO_QUOTING_FLAG 0x10000000</term>
            <term>Disable quoting.</term>
            </item>
            <item>
            <term>CERT_NAME_STR_REVERSE_FLAG 0x02000000</term>
            <term>The order of the RDNs in the distinguished name string is reversed after decoding. This flag is not set by default.</term>
            </item>
            <item>
            <term>CERT_NAME_STR_DISABLE_IE4_UTF8_FLAG 0x00010000</term>
            <term>
            By default, a CERT_RDN_T61_STRING X.500 key string is decoded as UTF8. If UTF8 decoding fails, the X.500 key is decoded as an 8
            bit character. Use CERT_NAME_STR_DISABLE_IE4_UTF8_FLAG to skip the initial attempt to decode as UTF8.
            </term>
            </item>
            <item>
            <term>CERT_NAME_STR_ENABLE_PUNYCODE_FLAG 0x00200000</term>
            <term>
            If the name pointed to by the pName parameter contains an email RDN, and the host name portion of the email address contains a
            Punycode encoded IA5String, the name is converted to the Unicode equivalent. Windows Server 2008, Windows Vista, Windows Server
            2003 and Windows XP: This value is not supported.
            </term>
            </item>
            </list>
            </param>
            <param name="psz">
            A pointer to a character buffer that receives the returned string. The size of this buffer is specified in the csz parameter.
            </param>
            <param name="csz">The size, in characters, of the psz buffer. The size must include the terminating null character.</param>
            <returns>
            <para>Returns the number of characters converted, including the terminating null character.</para>
            <para>If psz is <c>NULL</c> or csz is zero, returns the required size of the destination string.</para>
            </returns>
            <remarks>
            <para>If psz is not <c>NULL</c> and csz is not zero, the returned psz is always a null-terminated string.</para>
            <para>
            We recommend against using multicomponent RDNs (e.g., CN=James+O=Microsoft) to avoid possible ordering problems when decoding
            occurs. Instead, consider using single valued RDNs (e.g., CN=James, O=Microsoft).
            </para>
            <para>
            The string representation follows the distinguished name specifications in RFC 1779 except for the deviations described in the
            following list.
            </para>
            <list type="bullet">
            <item>
            <term>Names that contain quotes are enclosed within double quotation marks.</term>
            </item>
            <item>
            <term>Empty strings are enclosed within double quotation marks.</term>
            </item>
            <item>
            <term>Strings that contain consecutive spaces are not enclosed within quotation marks.</term>
            </item>
            <item>
            <term>
            Relative Distinguished Name (RDN) values of type <c>CERT_RDN_ENCODED_BLOB</c> or <c>CERT_RDN_OCTET_STRING</c> are formatted in hexadecimal.
            </term>
            </item>
            <item>
            <term>If an OID does not have a corresponding X.500 name, the “OID” prefix is used before OID.</term>
            </item>
            <item>
            <term>
            RDN values are enclosed with double quotation marks (instead of “\”) if they contain leading white space, trailing white space,
            or one of the following characters:
            </term>
            </item>
            <item>
            <term>
            The X.500 key name for stateOrProvinceName (2.5.4.8) OID is “S”. This value is different from the RFC 1779 X.500 key name (“S”).
            </term>
            </item>
            </list>
            <para>In addition, the following X.500 key names are not mentioned in RFC 1779, but may be returned by this API:</para>
            <list type="table">
            <listheader>
            <term>Key</term>
            <term>Object identifier string</term>
            </listheader>
            <item>
            <term>E</term>
            <term>1.2.840.113549.1.9.1</term>
            </item>
            <item>
            <term>T</term>
            <term>2.5.4.12</term>
            </item>
            <item>
            <term>G</term>
            <term>2.5.4.42</term>
            </item>
            <item>
            <term>I</term>
            <term>2.5.4.43</term>
            </item>
            <item>
            <term>SN</term>
            <term>2.5.4.4</term>
            </item>
            </list>
            <para>Examples</para>
            <para>For an example that uses this function, see</para>
            <para>Example C Program: Converting Names from Certificates to ASN.1 and Back.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertOIDToAlgId(Vanara.PInvoke.Crypt32.SafeOID)">
            <summary>
            <para>
            Use the CryptFindOIDInfo function instead of this function because ALG_ID identifiers are no longer supported in CNG. Use the
            <c>CRYPT_OID_INFO_OID_KEY</c> value in the dwKeyType parameter of the CryptFindOIDInfo function instead.
            </para>
            <para>
            <c>Windows Server 2003 and Windows XP:</c> The <c>CertOIDToAlgId</c> function converts the Abstract Syntax Notation One (ASN.1)
            object identifier (OID) string to the CryptoAPI algorithm identifier (ALG_ID).
            </para>
            </summary>
            <param name="pszObjId">Pointer to the ASN.1 OID to be converted to an algorithm identifier.</param>
            <returns>
            Returns the ALG_ID that corresponds to the object identifier (OID) or zero if no <c>ALG_ID</c> corresponds to the OID.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertRDNValueToStr(Vanara.PInvoke.Crypt32.CertRDNType,Vanara.PInvoke.Crypt32.CRYPTOAPI_BLOB@,System.Text.StringBuilder,System.UInt32)">
            <summary>
            The <c>CertRDNValueToStr</c> function converts a name in a CERT_RDN_VALUE_BLOB to a <c>null</c>-terminated character string.
            </summary>
            <param name="dwValueType">
            <para>Indicates the kind of RDN value to be converted.</para>
            <para>This can be one of the following values:</para>
            <list type="bullet">
            <item>
            <term>CERT_RDN_ANY_TYPE</term>
            </item>
            <item>
            <term>CERT_RDN_ENCODED_BLOB</term>
            </item>
            <item>
            <term>CERT_RDN_OCTET_STRING</term>
            </item>
            <item>
            <term>CERT_RDN_NUMERIC_STRING</term>
            </item>
            <item>
            <term>CERT_RDN_PRINTABLE_STRING</term>
            </item>
            <item>
            <term>CERT_RDN_TELETEX_STRING</term>
            </item>
            <item>
            <term>CERT_RDN_T61_STRING</term>
            </item>
            <item>
            <term>CERT_RDN_VIDEOTEX_STRING</term>
            </item>
            <item>
            <term>CERT_RDN_IA5_STRING</term>
            </item>
            <item>
            <term>CERT_RDN_GRAPHIC_STRING</term>
            </item>
            <item>
            <term>CERT_RDN_VISIBLE_STRING</term>
            </item>
            <item>
            <term>CERT_RDN_ISO646_STRING</term>
            </item>
            <item>
            <term>CERT_RDN_GENERAL_STRING</term>
            </item>
            <item>
            <term>CERT_RDN_UNIVERSAL_STRING</term>
            </item>
            <item>
            <term>CERT_RDN_INT4_STRING</term>
            </item>
            <item>
            <term>CERT_RDN_BMP_STRING</term>
            </item>
            <item>
            <term>CERT_RDN_UNICODE_STRING</term>
            </item>
            <item>
            <term>CERT_RDN_UTF8_STRING</term>
            </item>
            </list>
            </param>
            <param name="pValue">A pointer to an CERT_RDN_VALUE_BLOB of a type appropriate for the dwValueType.</param>
            <param name="psz">A pointer to a buffer to receive the returned string.</param>
            <param name="csz">
            Size, in characters, allocated for the returned string. The size must include the terminating <c>NULL</c> character.
            </param>
            <returns>
            Returns the number of characters converted, including the terminating <c>NULL</c> character. If psz is <c>NULL</c> or csz is
            zero, returns the required size of the destination string.
            </returns>
            <remarks>
            If psz is not <c>NULL</c> and csz is not zero, the returned psz is always a possibly empty <c>null</c>-terminated string.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertStrToName(Vanara.PInvoke.Crypt32.CertEncodingType,System.String,Vanara.PInvoke.Crypt32.CertNameStringFormat,System.IntPtr,System.IntPtr,System.UInt32@,Vanara.InteropServices.StrPtrAuto@)">
            <summary>The <c>CertStrToName</c> function converts a null-terminated X.500 string to an encoded certificate name.</summary>
            <param name="dwCertEncodingType">
            <para>
            The certificate encoding type that was used to encode the string. The message encoding type identifier, contained in the high
            <c>WORD</c> of this value, is ignored by this function.
            </para>
            <para>This parameter can be the following currently defined certificate encoding type.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>X509_ASN_ENCODING 1 (0x1)</term>
            <term>Specifies X.509 certificate encoding.</term>
            </item>
            </list>
            </param>
            <param name="pszX500">
            <para>
            A pointer to the null-terminated X.500 string to be converted. The format of this string is specified by the dwStrType parameter.
            </para>
            <para>This string is expected to be formatted the same as the output from the CertNameToStr function.</para>
            </param>
            <param name="dwStrType">
            <para>This parameter specifies the type of the string. This parameter also specifies other options for the contents of the string.</para>
            <para>
            If no flags are combined with the string type specifier, the string can contain a comma (,) or a semicolon (;) as separators in
            the relative distinguished name (RDN) and a plus sign (+) as the separator in multiple RDN values.
            </para>
            <para>
            Quotation marks ("") are supported. A quotation can be included in a quoted value by using two sets of quotation marks, for
            example, CN="User ""one""".
            </para>
            <para>
            A value that starts with a number sign (#) is treated as ASCII hexadecimal and converted to a <c>CERT_RDN_OCTET_STRING</c>.
            Embedded white space is ignored. For example, 1.2.3 = # AB CD 01 is the same as 1.2.3=#ABCD01.
            </para>
            <para>White space that surrounds the keys, object identifiers, and values is ignored.</para>
            <para>This parameter can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_SIMPLE_NAME_STR 1</term>
            <term>This string type is not supported.</term>
            </item>
            <item>
            <term>CERT_OID_NAME_STR 2</term>
            <term>Validates that the string type is supported. The string can be either an object identifier (OID) or an X.500 name.</term>
            </item>
            <item>
            <term>CERT_X500_NAME_STR 3</term>
            <term>
            Identical to CERT_OID_NAME_STR. Validates that the string type is supported. The string can be either an object identifier (OID)
            or an X.500 name.
            </term>
            </item>
            </list>
            <para>The following options can also be combined with the value above to specify additional options for the string.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_NAME_STR_COMMA_FLAG 0x04000000</term>
            <term>Only a comma (,) is supported as the RDN separator.</term>
            </item>
            <item>
            <term>CERT_NAME_STR_SEMICOLON_FLAG 0x40000000</term>
            <term>Only a semicolon (;) is supported as the RDN separator.</term>
            </item>
            <item>
            <term>CERT_NAME_STR_CRLF_FLAG 0x08000000</term>
            <term>Only a backslash r (\r) or backslash n (\n) is supported as the RDN separator.</term>
            </item>
            <item>
            <term>CERT_NAME_STR_NO_PLUS_FLAG 0x20000000</term>
            <term>The plus sign (+) is ignored as a separator, and multiple values per RDN are not supported.</term>
            </item>
            <item>
            <term>CERT_NAME_STR_NO_QUOTING_FLAG 0x10000000</term>
            <term>Quoting is not supported.</term>
            </item>
            <item>
            <term>CERT_NAME_STR_REVERSE_FLAG 0x02000000</term>
            <term>The order of the RDNs in a distinguished name is reversed before encoding. This flag is not set by default.</term>
            </item>
            <item>
            <term>CERT_NAME_STR_ENABLE_T61_UNICODE_FLAG 0x00020000</term>
            <term>
            The CERT_RDN_T61_STRING encoded value type is used instead of CERT_RDN_UNICODE_STRING. This flag can be used if all the Unicode
            characters are less than or equal to 0xFF.
            </term>
            </item>
            <item>
            <term>CERT_NAME_STR_ENABLE_UTF8_UNICODE_FLAG 0x00040000</term>
            <term>The CERT_RDN_UTF8_STRING encoded value type is used instead of CERT_RDN_UNICODE_STRING.</term>
            </item>
            <item>
            <term>CERT_NAME_STR_FORCE_UTF8_DIR_STR_FLAG 0x00080000</term>
            <term>
            Forces the X.500 key to be encoded as a UTF-8 (CERT_RDN_UTF8_STRING) string rather than as a printable Unicode
            (CERT_RDN_PRINTABLE_STRING) string. This is the default value for Microsoft certification authorities beginning with Windows
            Server 2003.
            </term>
            </item>
            <item>
            <term>CERT_NAME_STR_DISABLE_UTF8_DIR_STR_FLAG 0x00100000</term>
            <term>
            Prevents forcing a printable Unicode (CERT_RDN_PRINTABLE_STRING) X.500 key to be encoded by using UTF-8 (CERT_RDN_UTF8_STRING).
            Use to enable encoding of X.500 keys as Unicode values when CERT_NAME_STR_FORCE_UTF8_DIR_STR_FLAG is set.
            </term>
            </item>
            <item>
            <term>CERT_NAME_STR_ENABLE_PUNYCODE_FLAG 0x00200000</term>
            <term>
            If the string contains an email RDN value, and the email address contains Unicode characters outside of the ASCII character set,
            the host name portion of the email address is encoded in Punycode. The resultant email address is then encoded as an IA5String
            string. The Punycode encoding of the host name is performed on a label-by-label basis. Windows Server 2008, Windows Vista,
            Windows Server 2003 and Windows XP: This value is not supported.
            </term>
            </item>
            </list>
            </param>
            <param name="pvReserved">Reserved for future use and must be <c>NULL</c>.</param>
            <param name="pbEncoded">
            <para>A pointer to a buffer that receives the encoded structure.</para>
            <para>The size of this buffer is specified in the pcbEncoded parameter.</para>
            <para>
            This parameter can be <c>NULL</c> to obtain the required size of the buffer for memory allocation purposes. For more
            information, see Retrieving Data of Unknown Length.
            </para>
            </param>
            <param name="pcbEncoded">
            <para>
            A pointer to a <c>DWORD</c> that, before calling the function, contains the size, in bytes, of the buffer pointed to by the
            pbEncoded parameter. When the function returns, the <c>DWORD</c> contains the number of bytes stored in the buffer.
            </para>
            <para>If pbEncoded is <c>NULL</c>, the <c>DWORD</c> receives the size, in bytes, required for the buffer.</para>
            </param>
            <param name="ppszError">
            <para>A pointer to a string pointer that receives additional error information about an input string that is not valid.</para>
            <para>
            If the pszX500 string is not valid, ppszError is updated by this function to point to the beginning of the character sequence
            that is not valid. If no errors are detected in the input string, ppszError is set to <c>NULL</c>.
            </para>
            <para>If this information is not required, pass <c>NULL</c> for this parameter.</para>
            <para>This parameter is updated for the following error codes returned from GetLastError.</para>
            <para>CRYPT_E_INVALID_X500_STRING</para>
            <para>CRYPT_E_INVALID_NUMERIC_STRING</para>
            <para>CRYPT_E_INVALID_PRINTABLE_STRING</para>
            <para>CRYPT_E_INVALID_IA5_STRING</para>
            </param>
            <returns>
            <para>Returns nonzero if successful or zero otherwise.</para>
            <para>For extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            The following table contains the supported X.500 keys, their corresponding object identifier string, string identifier (from
            Wincrypt.h), and value types.
            </para>
            <list type="table">
            <listheader>
            <term>Key</term>
            <term>Object identifier string</term>
            <term>String identifier</term>
            <term>RDN value types</term>
            </listheader>
            <item>
            <term>CN</term>
            <term>2.5.4.3</term>
            <term>szOID_COMMON_NAME</term>
            <term>Printable T61</term>
            </item>
            <item>
            <term>L</term>
            <term>2.5.4.7</term>
            <term>szOID_LOCALITY_NAME</term>
            <term>Printable T61</term>
            </item>
            <item>
            <term>O</term>
            <term>2.5.4.10</term>
            <term>szOID_ORGANIZATION_NAME</term>
            <term>Printable T61</term>
            </item>
            <item>
            <term>OU</term>
            <term>2.5.4.11</term>
            <term>szOID_ORGANIZATIONAL_UNIT_NAME</term>
            <term>Printable T61</term>
            </item>
            <item>
            <term>E Email</term>
            <term>1.2.840.113549.1.9.1</term>
            <term>szOID_RSA_emailAddr</term>
            <term>IA5</term>
            </item>
            <item>
            <term>C</term>
            <term>2.5.4.6</term>
            <term>szOID_COUNTRY_NAME</term>
            <term>Printable</term>
            </item>
            <item>
            <term>S ST</term>
            <term>2.5.4.8</term>
            <term>szOID_STATE_OR_PROVINCE_NAME</term>
            <term>Printable T61</term>
            </item>
            <item>
            <term>STREET</term>
            <term>2.5.4.9</term>
            <term>szOID_STREET_ADDRESS</term>
            <term>Printable T61</term>
            </item>
            <item>
            <term>T Title</term>
            <term>2.5.4.12</term>
            <term>szOID_TITLE</term>
            <term>Printable T61</term>
            </item>
            <item>
            <term>G GivenName</term>
            <term>2.5.4.42</term>
            <term>szOID_GIVEN_NAME</term>
            <term>Printable T61</term>
            </item>
            <item>
            <term>I Initials</term>
            <term>2.5.4.43</term>
            <term>szOID_INITIALS</term>
            <term>Printable T61</term>
            </item>
            <item>
            <term>SN</term>
            <term>2.5.4.4</term>
            <term>szOID_SUR_NAME</term>
            <term>Printable T61</term>
            </item>
            <item>
            <term>DC</term>
            <term>0.9.2342.19200300.100.1.25</term>
            <term>szOID_DOMAIN_COMPONENT</term>
            <term>IA5 UTF8</term>
            </item>
            </list>
            <para>
            If either Printable or T61 is allowed as the RDN value type for the key, Printable is automatically selected if the name string
            component is a member of the following character sets:
            </para>
            <list type="bullet">
            <item>
            <term>A, B, …, Z</term>
            </item>
            <item>
            <term>a, b, …, z</term>
            </item>
            <item>
            <term>0, 1, …, 9</term>
            </item>
            <item>
            <term>(space) ' ( ) + , - . / : = ?</term>
            </item>
            </list>
            <para>The T61 types are UTF8 encoded.</para>
            <para>Examples</para>
            <para>For an example that uses this function, see Example C Program: Converting Names from Certificates to ASN.1 and Back.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptBinaryToString(System.IntPtr,System.UInt32,Vanara.PInvoke.Crypt32.CryptStringFormat,System.Text.StringBuilder,System.UInt32@)">
            <summary>The <c>CryptBinaryToString</c> function converts an array of bytes into a formatted string.</summary>
            <param name="pbBinary">A pointer to the array of bytes to be converted into a string.</param>
            <param name="cbBinary">The number of elements in the pbBinary array.</param>
            <param name="dwFlags">
            <para>Specifies the format of the resulting formatted string. This parameter can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPT_STRING_BASE64HEADER 0x00000000</term>
            <term>Base64, with certificate beginning and ending headers.</term>
            </item>
            <item>
            <term>CRYPT_STRING_BASE64 0x00000001</term>
            <term>Base64, without headers.</term>
            </item>
            <item>
            <term>CRYPT_STRING_BINARY 0x00000002</term>
            <term>Pure binary copy.</term>
            </item>
            <item>
            <term>CRYPT_STRING_BASE64REQUESTHEADER 0x00000003</term>
            <term>Base64, with request beginning and ending headers.</term>
            </item>
            <item>
            <term>CRYPT_STRING_HEX 0x00000004</term>
            <term>Hexadecimal only.</term>
            </item>
            <item>
            <term>CRYPT_STRING_HEXASCII 0x00000005</term>
            <term>Hexadecimal, with ASCII character display.</term>
            </item>
            <item>
            <term>CRYPT_STRING_BASE64X509CRLHEADER 0x00000009</term>
            <term>Base64, with X.509 CRL beginning and ending headers.</term>
            </item>
            <item>
            <term>CRYPT_STRING_HEXADDR 0x0000000a</term>
            <term>Hexadecimal, with address display.</term>
            </item>
            <item>
            <term>CRYPT_STRING_HEXASCIIADDR 0x0000000b</term>
            <term>Hexadecimal, with ASCII character and address display.</term>
            </item>
            <item>
            <term>CRYPT_STRING_HEXRAW 0x0000000c</term>
            <term>A raw hexadecimal string. Windows Server 2003 and Windows XP: This value is not supported.</term>
            </item>
            <item>
            <term>CRYPT_STRING_STRICT 0x20000000</term>
            <term>
            Enforce strict decoding of ASN.1 text formats. Some ASN.1 binary BLOBS can have the first few bytes of the BLOB incorrectly
            interpreted as Base64 text. In this case, the rest of the text is ignored. Use this flag to enforce complete decoding of the
            BLOB. Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP: This value is not supported.
            </term>
            </item>
            </list>
            <para>In addition to the values above, one or more of the following values can be specified to modify the behavior of the function.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPT_STRING_NOCRLF 0x40000000</term>
            <term>
            Do not append any new line characters to the encoded string. The default behavior is to use a carriage return/line feed (CR/LF)
            pair (0x0D/0x0A) to represent a new line. Windows Server 2003 and Windows XP: This value is not supported.
            </term>
            </item>
            <item>
            <term>CRYPT_STRING_NOCR 0x80000000</term>
            <term>
            Only use the line feed (LF) character (0x0A) for a new line. The default behavior is to use a CR/LF pair (0x0D/0x0A) to
            represent a new line.
            </term>
            </item>
            </list>
            </param>
            <param name="pszString">
            A pointer to a buffer that receives the converted string. To calculate the number of characters that must be allocated to hold
            the returned string, set this parameter to <c>NULL</c>. The function will place the required number of characters, including the
            terminating <c>NULL</c> character, in the value pointed to by pcchString.
            </param>
            <param name="pcchString">
            A pointer to a <c>DWORD</c> variable that contains the size, in <c>TCHAR</c> s, of the pszString buffer. If pszString is
            <c>NULL</c>, the function calculates the length of the return string (including the terminating null character) in <c>TCHAR</c>
            s and returns it in this parameter. If pszString is not <c>NULL</c> and big enough, the function converts the binary data into a
            specified string format including the terminating null character, but pcchString receives the length in <c>TCHAR</c> s, not
            including the terminating null character.
            </param>
            <returns>
            <para>If the function succeeds, the function returns nonzero ( <c>TRUE</c>).</para>
            <para>If the function fails, it returns zero ( <c>FALSE</c>).</para>
            </returns>
            <remarks>
            With the exception of when <c>CRYPT_STRING_BINARY</c> encoding is used, all strings are appended with a new line sequence. By
            default, the new line sequence is a CR/LF pair (0x0D/0x0A). If the dwFlags parameter contains the <c>CRYPT_STRING_NOCR</c> flag,
            then the new line sequence is a LF character (0x0A). If the dwFlags parameter contains the <c>CRYPT_STRING_NOCRLF</c> flag, then
            no new line sequence is appended to the string.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptFormatObject(Vanara.PInvoke.Crypt32.CertEncodingType,System.UInt32,Vanara.PInvoke.Crypt32.CryptFormatStr,System.IntPtr,Vanara.PInvoke.Crypt32.SafeOID,System.IntPtr,System.UInt32,System.IntPtr,System.UInt32@)">
            <summary>
            The <c>CryptFormatObject</c> function formats the encoded data and returns a Unicode string in the allocated buffer according to
            the certificate encoding type.
            </summary>
            <param name="dwCertEncodingType">
            Type of encoding used on the certificate. The currently defined certificate encoding type used is X509_ASN_ENCODING.
            </param>
            <param name="dwFormatType">Format type values. Not used. Set to zero.</param>
            <param name="dwFormatStrType">
            <para>
            Structure format type values. This parameter can be zero, or you can specify one or more of the following flags by using the
            bitwise- <c>OR</c> operator to combine them.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>0</term>
            <term>Display the data in a single line. Each subfield is concatenated with a comma (,). For more information, see Remarks.</term>
            </item>
            <item>
            <term>CRYPT_FORMAT_STR_MULTI_LINE 0x0001</term>
            <term>Display the data in multiple lines rather than single line (the default). For more information, see Remarks.</term>
            </item>
            <item>
            <term>CRYPT_FORMAT_STR_NO_HEX 0x0010</term>
            <term>Disables the hexadecimal dump. For more information, see Remarks.</term>
            </item>
            </list>
            </param>
            <param name="pFormatStruct">A pointer to the format of the structure. Not used. Set to <c>NULL</c>.</param>
            <param name="lpszStructType">
            <para>
            A pointer to an OID that defines the encoded data. If the high-order word of the lpszStructType parameter is zero, the low-order
            word specifies the integer identifier for the type of the given structure. Otherwise, this parameter is a long pointer to a
            <c>null</c>-terminated string.
            </para>
            <para>The following table lists supported OIDs with their associated OID extension.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>SPC_FINANCIAL_CRITERIA_OBJID</term>
            <term>1.3.6.1.4.1.311.2.1.27</term>
            </item>
            <item>
            <term>SPC_SP_AGENCY_INFO_OBJID</term>
            <term>1.3.6.1.4.1.311.2.1.10</term>
            </item>
            <item>
            <term>szOID_AUTHORITY_INFO_ACCESS</term>
            <term>1.3.6.1.5.5.7.1.1</term>
            </item>
            <item>
            <term>szOID_AUTHORITY_KEY_IDENTIFIER2</term>
            <term>2.5.29.35</term>
            </item>
            <item>
            <term>szOID_BASIC_CONSTRAINTS2</term>
            <term>2.5.29.19</term>
            </item>
            <item>
            <term>szOID_CERT_POLICIES</term>
            <term>2.5.29.32</term>
            </item>
            <item>
            <term>szOID_CRL_DIST_POINTS</term>
            <term>2.5.29.31</term>
            </item>
            <item>
            <term>szOID_CRL_REASON_CODE</term>
            <term>2.5.29.21</term>
            </item>
            <item>
            <term>szOID_ENHANCED_KEY_USAGE</term>
            <term>2.5.29.37</term>
            </item>
            <item>
            <term>szOID_ISSUER_ALT_NAME2</term>
            <term>2.5.29.18</term>
            </item>
            <item>
            <term>szOID_KEY_ATTRIBUTES</term>
            <term>2.5.29.2</term>
            </item>
            <item>
            <term>szOID_KEY_USAGE</term>
            <term>2.5.29.15</term>
            </item>
            <item>
            <term>szOID_KEY_USAGE_RESTRICTION</term>
            <term>2.5.29.4</term>
            </item>
            <item>
            <term>szOID_NEXT_UPDATE_LOCATION</term>
            <term>1.3.6.1.4.1.311.10.2</term>
            </item>
            <item>
            <term>szOID_RSA_SMIMECapabilities</term>
            <term>1.2.840.113549.1.9.15</term>
            </item>
            <item>
            <term>szOID_SUBJECT_ALT_NAME2</term>
            <term>2.5.29.17</term>
            </item>
            <item>
            <term>szOID_SUBJECT_KEY_IDENTIFIER</term>
            <term>2.5.29.14</term>
            </item>
            </list>
            </param>
            <param name="pbEncoded">
            A pointer to the encoded data to be formatted. If lpszStructType is one of the OIDs listed above, the pbEncoded is the encoded extension.
            </param>
            <param name="cbEncoded">The size, in bytes, of the pbEncoded structure.</param>
            <param name="pbFormat">
            A pointer to a buffer that receives the formatted string. When the buffer that is specified is not large enough to receive the
            decoded structure, the function sets ERROR_MORE_DATA and stores the required buffer size, in bytes, into the variable pointed to
            by pcbFormat. This parameter can be <c>NULL</c> to set the size of this information for memory allocation purposes. For more
            information, see Retrieving Data of Unknown Length.
            </param>
            <param name="pcbFormat">
            <para>
            A pointer to a variable that specifies the size, in bytes, of the buffer pointed to by the pbFormat parameter. When the function
            returns, the variable pointed to by the pcbFormat parameter contains the number of bytes stored in the buffer. This parameter
            can be <c>NULL</c>, only if pbFormat is <c>NULL</c>.
            </para>
            <para>
            <c>Note</c> When processing the data returned in the buffer, applications need to use the actual size of the data returned. The
            actual size may be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually
            specified large enough to ensure that the largest possible output data will fit into the buffer.) On output, the variable
            pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer.
            </para>
            </param>
            <returns>
            If the function succeeds, the return value is <c>TRUE</c>. If it does not succeed, the return value is <c>FALSE</c>. To retrieve
            extended error information, use the GetLastError function.
            </returns>
            <remarks>
            <para>
            The default behavior of this function is to return a single-line display of the encoded data, that is, each subfield is
            concatenated with a comma (,) on one line. If you prefer to display the data in multiple lines, set the
            CRYPT_FORMAT_STR_MULTI_LINE flag. Each subfield will then be displayed on a separate line.
            </para>
            <para>
            If there is no formatting routine installed or registered for the lpszStructType parameter, the hexadecimal dump of the encoded
            CRYPT_INTEGER_BLOB will be returned. A user can set the CRYPT_FORMAT_STR_NO_HEX flag to disable the hexadecimal dump.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptStringToBinary(System.String,System.UInt32,Vanara.PInvoke.Crypt32.CryptStringFormat,System.IntPtr,System.UInt32@,System.UInt32@,Vanara.PInvoke.Crypt32.CryptStringFormat@)">
            <summary>The <c>CryptStringToBinary</c> function converts a formatted string into an array of bytes.</summary>
            <param name="pszString">A pointer to a string that contains the formatted string to be converted.</param>
            <param name="cchString">
            The number of characters of the formatted string to be converted, not including the terminating <c>NULL</c> character. If this
            parameter is zero, pszString is considered to be a null-terminated string.
            </param>
            <param name="dwFlags">
            <para>Indicates the format of the string to be converted. This can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPT_STRING_BASE64HEADER 0x00000000</term>
            <term>Base64, with certificate beginning and ending headers.</term>
            </item>
            <item>
            <term>CRYPT_STRING_BASE64 0x00000001</term>
            <term>Base64, without headers.</term>
            </item>
            <item>
            <term>CRYPT_STRING_BINARY 0x00000002</term>
            <term>Pure binary copy.</term>
            </item>
            <item>
            <term>CRYPT_STRING_BASE64REQUESTHEADER 0x00000003</term>
            <term>Base64, with request beginning and ending headers.</term>
            </item>
            <item>
            <term>CRYPT_STRING_HEX 0x00000004</term>
            <term>Hexadecimal only format.</term>
            </item>
            <item>
            <term>CRYPT_STRING_HEXASCII 0x00000005</term>
            <term>Hexadecimal format with ASCII character display.</term>
            </item>
            <item>
            <term>CRYPT_STRING_BASE64_ANY 0x00000006</term>
            <term>Tries the following, in order: CRYPT_STRING_BASE64HEADER CRYPT_STRING_BASE64</term>
            </item>
            <item>
            <term>CRYPT_STRING_ANY 0x00000007</term>
            <term>Tries the following, in order: CRYPT_STRING_BASE64HEADER CRYPT_STRING_BASE64 CRYPT_STRING_BINARY</term>
            </item>
            <item>
            <term>CRYPT_STRING_HEX_ANY 0x00000008</term>
            <term>Tries the following, in order: CRYPT_STRING_HEXADDR CRYPT_STRING_HEXASCIIADDR CRYPT_STRING_HEX CRYPT_STRING_HEXRAW CRYPT_STRING_HEXASCII</term>
            </item>
            <item>
            <term>CRYPT_STRING_BASE64X509CRLHEADER 0x00000009</term>
            <term>Base64, with X.509 certificate revocation list (CRL) beginning and ending headers.</term>
            </item>
            <item>
            <term>CRYPT_STRING_HEXADDR 0x0000000a</term>
            <term>Hex, with address display.</term>
            </item>
            <item>
            <term>CRYPT_STRING_HEXASCIIADDR 0x0000000b</term>
            <term>Hex, with ASCII character and address display.</term>
            </item>
            <item>
            <term>CRYPT_STRING_HEXRAW 0x0000000c</term>
            <term>A raw hexadecimal string. Windows Server 2003 and Windows XP: This value is not supported.</term>
            </item>
            <item>
            <term>CRYPT_STRING_STRICT 0x20000000</term>
            <term>
            Set this flag for Base64 data to specify that the end of the binary data contain only white space and at most three equals "="
            signs. Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP: This value is not supported.
            </term>
            </item>
            </list>
            </param>
            <param name="pbBinary">
            A pointer to a buffer that receives the returned sequence of bytes. If this parameter is <c>NULL</c>, the function calculates
            the length of the buffer needed and returns the size, in bytes, of required memory in the <c>DWORD</c> pointed to by pcbBinary.
            </param>
            <param name="pcbBinary">
            <para>
            A pointer to a <c>DWORD</c> variable that, on entry, contains the size, in bytes, of the pbBinary buffer. After the function
            returns, this variable contains the number of bytes copied to the buffer. If this value is not large enough to contain all of
            the data, the function fails and GetLastError returns <c>ERROR_MORE_DATA</c>.
            </para>
            <para>If pbBinary is <c>NULL</c>, the <c>DWORD</c> pointed to by pcbBinary is ignored.</para>
            </param>
            <param name="pdwSkip">
            A pointer to a <c>DWORD</c> value that receives the number of characters skipped to reach the beginning of the actual base64 or
            hexadecimal strings. This parameter is optional and can be <c>NULL</c> if it is not needed.
            </param>
            <param name="pdwFlags">
            <para>
            A pointer to a <c>DWORD</c> value that receives the flags actually used in the conversion. These are the same flags used for the
            dwFlags parameter. In many cases, these will be the same flags that were passed in the dwFlags parameter. If dwFlags contains
            one of the following flags, this value will receive a flag that indicates the actual format of the string. This parameter is
            optional and can be <c>NULL</c> if it is not needed.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPT_STRING_ANY</term>
            <term>
            This variable will receive one of the following values. Each value indicates the actual format of the string.
            CRYPT_STRING_BASE64HEADER CRYPT_STRING_BASE64 CRYPT_STRING_BINARY
            </term>
            </item>
            <item>
            <term>CRYPT_STRING_BASE64_ANY</term>
            <term>
            This variable will receive one of the following values. Each value indicates the actual format of the string.
            CRYPT_STRING_BASE64HEADER CRYPT_STRING_BASE64
            </term>
            </item>
            <item>
            <term>CRYPT_STRING_HEX_ANY</term>
            <term>
            This variable will receive one of the following values. Each value indicates the actual format of the string.
            CRYPT_STRING_HEXADDR CRYPT_STRING_HEXASCIIADDR CRYPT_STRING_HEX CRYPT_STRING_HEXRAW CRYPT_STRING_HEXASCII
            </term>
            </item>
            </list>
            </param>
            <returns>
            <para>If the function succeeds, the return value is nonzero ( <c>TRUE</c>).</para>
            <para>If the function fails, the return value is zero ( <c>FALSE</c>).</para>
            </returns>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_V1">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_V2">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_V3">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.ALG_CLASS">
            <summary>The class of an ALG_ID.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.ALG_CLASS.ALG_CLASS_ANY">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.ALG_CLASS.ALG_CLASS_SIGNATURE">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.ALG_CLASS.ALG_CLASS_MSG_ENCRYPT">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.ALG_CLASS.ALG_CLASS_DATA_ENCRYPT">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.ALG_CLASS.ALG_CLASS_HASH">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.ALG_CLASS.ALG_CLASS_KEY_EXCHANGE">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.ALG_CLASS.ALG_CLASS_ALL">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.ALG_ID">
            <summary>
            The ALG_ID data type specifies an algorithm identifier. Parameters of this data type are passed to most of the functions in CryptoAPI.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.ALG_ID.CALG_3DES">
            <summary>Triple DES encryption algorithm.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.ALG_ID.CALG_3DES_112">
            <summary>Two-key triple DES encryption with effective key length equal to 112 bits.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.ALG_ID.CALG_AES">
            <summary>Advanced Encryption Standard (AES). This algorithm is supported by the Microsoft AES Cryptographic Provider.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.ALG_ID.CALG_AES_128">
            <summary>128 bit AES. This algorithm is supported by the Microsoft AES Cryptographic Provider.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.ALG_ID.CALG_AES_192">
            <summary>192 bit AES. This algorithm is supported by the Microsoft AES Cryptographic Provider.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.ALG_ID.CALG_AES_256">
            <summary>256 bit AES. This algorithm is supported by the Microsoft AES Cryptographic Provider.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.ALG_ID.CALG_AGREEDKEY_ANY">
            <summary>Temporary algorithm identifier for handles of Diffie-Hellman–agreed keys.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.ALG_ID.CALG_CYLINK_MEK">
            <summary>
            An algorithm to create a 40-bit DES key that has parity bits and zeroed key bits to make its key length 64 bits. This
            algorithm is supported by the Microsoft Base Cryptographic Provider.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.ALG_ID.CALG_DES">
            <summary>DES encryption algorithm.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.ALG_ID.CALG_DESX">
            <summary>DESX encryption algorithm.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.ALG_ID.CALG_DH_EPHEM">
            <summary>Diffie-Hellman ephemeral key exchange algorithm.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.ALG_ID.CALG_DH_SF">
            <summary>Diffie-Hellman store and forward key exchange algorithm.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.ALG_ID.CALG_DSS_SIGN">
            <summary>DSA public key signature algorithm.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.ALG_ID.CALG_ECDH">
            <summary>
            Elliptic curve Diffie-Hellman key exchange algorithm.
            <para>[!Note]</para>
            <para>This algorithm is supported only through Cryptography API: Next Generation.</para>
            <para>Windows Server 2003 and Windows XP: This algorithm is not supported.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.ALG_ID.CALG_ECDH_EPHEM">
            <summary>
            Ephemeral elliptic curve Diffie-Hellman key exchange algorithm.
            <para>[!Note]</para>
            <para>This algorithm is supported only through Cryptography API: Next Generation.</para>
            <para>Windows Server 2003 and Windows XP: This algorithm is not supported.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.ALG_ID.CALG_ECDSA">
            <summary>
            Elliptic curve digital signature algorithm.
            <para>[!Note]</para>
            <para>This algorithm is supported only through Cryptography API: Next Generation.</para>
            <para>Windows Server 2003 and Windows XP: This algorithm is not supported.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.ALG_ID.CALG_ECMQV">
            <summary>Elliptic curve Menezes, Qu, and Vanstone (MQV) key exchange algorithm. This algorithm is not supported.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.ALG_ID.CALG_HASH_REPLACE_OWF">
            <summary>One way function hashing algorithm.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.ALG_ID.CALG_HUGHES_MD5">
            <summary>Hughes MD5 hashing algorithm.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.ALG_ID.CALG_HMAC">
            <summary>HMAC keyed hash algorithm. This algorithm is supported by the Microsoft Base Cryptographic Provider.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.ALG_ID.CALG_KEA_KEYX">
            <summary>KEA key exchange algorithm (FORTEZZA). This algorithm is not supported.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.ALG_ID.CALG_MAC">
            <summary>MAC keyed hash algorithm. This algorithm is supported by the Microsoft Base Cryptographic Provider.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.ALG_ID.CALG_MD2">
            <summary>MD2 hashing algorithm. This algorithm is supported by the Microsoft Base Cryptographic Provider.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.ALG_ID.CALG_MD4">
            <summary>MD4 hashing algorithm.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.ALG_ID.CALG_MD5">
            <summary>MD5 hashing algorithm. This algorithm is supported by the Microsoft Base Cryptographic Provider.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.ALG_ID.CALG_NO_SIGN">
            <summary>No signature algorithm.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.ALG_ID.CALG_OID_INFO_CNG_ONLY">
            <summary>
            The algorithm is only implemented in CNG. The macro, IS_SPECIAL_OID_INFO_ALGID, can be used to determine whether a
            cryptography algorithm is only supported by using the CNG functions.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.ALG_ID.CALG_OID_INFO_PARAMETERS">
            <summary>
            The algorithm is defined in the encoded parameters. The algorithm is only supported by using CNG. The macro,
            IS_SPECIAL_OID_INFO_ALGID, can be used to determine whether a cryptography algorithm is only supported by using the CNG functions.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.ALG_ID.CALG_PCT1_MASTER">
            <summary>Used by the Schannel.dll operations system. This ALG_ID should not be used by applications.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.ALG_ID.CALG_RC2">
            <summary>RC2 block encryption algorithm. This algorithm is supported by the Microsoft Base Cryptographic Provider.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.ALG_ID.CALG_RC4">
            <summary>RC4 stream encryption algorithm. This algorithm is supported by the Microsoft Base Cryptographic Provider.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.ALG_ID.CALG_RC5">
            <summary>RC5 block encryption algorithm.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.ALG_ID.CALG_RSA_KEYX">
            <summary>RSA public key exchange algorithm. This algorithm is supported by the Microsoft Base Cryptographic Provider.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.ALG_ID.CALG_RSA_SIGN">
            <summary>RSA public key signature algorithm. This algorithm is supported by the Microsoft Base Cryptographic Provider.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.ALG_ID.CALG_SCHANNEL_ENC_KEY">
            <summary>Used by the Schannel.dll operations system. This ALG_ID should not be used by applications.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.ALG_ID.CALG_SCHANNEL_MAC_KEY">
            <summary>Used by the Schannel.dll operations system. This ALG_ID should not be used by applications.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.ALG_ID.CALG_SCHANNEL_MASTER_HASH">
            <summary>Used by the Schannel.dll operations system. This ALG_ID should not be used by applications.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.ALG_ID.CALG_SEAL">
            <summary>SEAL encryption algorithm. This algorithm is not supported.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.ALG_ID.CALG_SHA">
            <summary>SHA hashing algorithm. This algorithm is supported by the Microsoft Base Cryptographic Provider.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.ALG_ID.CALG_SHA1">
            <summary>Same as CALG_SHA. This algorithm is supported by the Microsoft Base Cryptographic Provider.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.ALG_ID.CALG_SHA_256">
            <summary>
            256 bit SHA hashing algorithm. This algorithm is supported by Microsoft Enhanced RSA and AES Cryptographic Provider..Windows
            XP with SP3: This algorithm is supported by the Microsoft Enhanced RSA and AES Cryptographic Provider (Prototype).
            <para>Windows XP with SP2, Windows XP with SP1 and Windows XP: This algorithm is not supported.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.ALG_ID.CALG_SHA_384">
            <summary>
            384 bit SHA hashing algorithm. This algorithm is supported by Microsoft Enhanced RSA and AES Cryptographic Provider.Windows
            XP with SP3: This algorithm is supported by the Microsoft Enhanced RSA and AES Cryptographic Provider (Prototype).
            <para>Windows XP with SP2, Windows XP with SP1 and Windows XP: This algorithm is not supported.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.ALG_ID.CALG_SHA_512">
            <summary>
            512 bit SHA hashing algorithm. This algorithm is supported by Microsoft Enhanced RSA and AES Cryptographic Provider.Windows
            XP with SP3: This algorithm is supported by the Microsoft Enhanced RSA and AES Cryptographic Provider (Prototype).
            <para>Windows XP with SP2, Windows XP with SP1 and Windows XP: This algorithm is not supported.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.ALG_ID.CALG_SKIPJACK">
            <summary>Skipjack block encryption algorithm (FORTEZZA). This algorithm is not supported.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.ALG_ID.CALG_SSL2_MASTER">
            <summary>Used by the Schannel.dll operations system. This ALG_ID should not be used by applications.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.ALG_ID.CALG_SSL3_MASTER">
            <summary>Used by the Schannel.dll operations system. This ALG_ID should not be used by applications.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.ALG_ID.CALG_SSL3_SHAMD5">
            <summary>Used by the Schannel.dll operations system. This ALG_ID should not be used by applications.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.ALG_ID.CALG_TEK">
            <summary>TEK (FORTEZZA). This algorithm is not supported.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.ALG_ID.CALG_TLS1_MASTER">
            <summary>Used by the Schannel.dll operations system. This ALG_ID should not be used by applications.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.ALG_ID.CALG_TLS1PRF">
            <summary>Used by the Schannel.dll operations system. This ALG_ID should not be used by applications.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.ALG_TYPE">
            <summary>The type of an ALG_ID.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.ALG_TYPE.ALG_TYPE_ANY">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.ALG_TYPE.ALG_TYPE_DSS">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.ALG_TYPE.ALG_TYPE_RSA">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.ALG_TYPE.ALG_TYPE_BLOCK">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.ALG_TYPE.ALG_TYPE_STREAM">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.ALG_TYPE.ALG_TYPE_DH">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.ALG_TYPE.ALG_TYPE_SECURECHANNEL">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.ALG_TYPE.ALG_TYPE_ECDH">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.ALG_TYPE.ALG_TYPE_THIRDPARTY">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CERT_INFO_CHOICE">
            <summary>Indicates which nested union member of CERT_STRONG_SIGN_PARA points to the strong signature information.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_INFO_CHOICE.CERT_STRONG_SIGN_SERIALIZED_INFO_CHOICE">
            <summary>Specifies the pSerializedInfo member of CERT_STRONG_SIGN_PARA.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_INFO_CHOICE.CERT_STRONG_SIGN_OID_INFO_CHOICE">
            <summary>Specifies the pszOID member of CERT_STRONG_SIGN_PARA.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CertCompareFunction">
            <summary>Values used by CertFindType.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertCompareFunction.CERT_COMPARE_ANY">
            <summary>No search criteria used. Returns the next certificate in the store.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertCompareFunction.CERT_COMPARE_SHA1_HASH">
            <summary>Searches for a certificate with a SHA1 hash that matches the hash in the CRYPT_HASH_BLOB structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertCompareFunction.CERT_COMPARE_NAME">
            <summary>
            Searches for a certificate with an exact match of the entire subject name with the name in the CERT_NAME_BLOB structure. The
            search is restricted to certificates that match the value of dwCertEncodingType.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertCompareFunction.CERT_COMPARE_ATTR">
            <summary>
            Searches for a certificate with specified subject attributes that match attributes in the CERT_RDN structure. If RDN values
            are set, the function compares attributes of the subject in a certificate with elements of the CERT_RDN_ATTR array in this
            CERT_RDN structure. Comparisons iterate through the CERT_RDN_ATTR attributes looking for a match with the certificate's
            subject's attributes.
            <para>If the pszObjId member of CERT_RDN_ATTR is NULL, the attribute object identifier is ignored.</para>
            <para>If the dwValueType member of CERT_RDN_ATTR is CERT_RDN_ANY_TYPE, the value type is ignored.</para>
            <para>If the pbData member of CERT_RDN_VALUE_BLOB is NULL, any value is a match.</para>
            <para>Currently only an exact, case-sensitive match is supported.</para>
            <para>
            For information about Unicode options, see Remarks. When these values are set, the search is restricted to certificates
            whose encoding type matches dwCertEncodingType.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertCompareFunction.CERT_COMPARE_MD5_HASH">
            <summary>Searches for a certificate with an MD5 hash that matches the hash in CRYPT_HASH_BLOB.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertCompareFunction.CERT_COMPARE_PROPERTY">
            <summary>
            Searches for a certificate with a property that matches the property identifier specified by the DWORD value in pvFindPara.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertCompareFunction.CERT_COMPARE_PUBLIC_KEY">
            <summary>Searches for a certificate with a public key that matches the public key in the CERT_PUBLIC_KEY_INFO structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertCompareFunction.CERT_COMPARE_HASH">
            <summary>Searches for a certificate with a SHA1 hash that matches the hash in the CRYPT_HASH_BLOB structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertCompareFunction.CERT_COMPARE_NAME_STR_A">
            <summary>
            Searches for a certificate that contains the specified subject name string. The certificate's subject member is converted to
            a name string of the appropriate type using the appropriate form of CertNameToStr formatted as CERT_SIMPLE_NAME_STR. Then a
            case-insensitive substring-within-a-string match is performed. When this value is set, the search is restricted to
            certificates whose encoding type matches dwCertEncodingType.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertCompareFunction.CERT_COMPARE_NAME_STR_W">
            <summary>
            Searches for a certificate that contains the specified subject name string. The certificate's subject member is converted to
            a name string of the appropriate type using the appropriate form of CertNameToStr formatted as CERT_SIMPLE_NAME_STR. Then a
            case-insensitive substring-within-a-string match is performed. When this value is set, the search is restricted to
            certificates whose encoding type matches dwCertEncodingType.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertCompareFunction.CERT_COMPARE_KEY_SPEC">
            <summary>Searches for a certificate that has a CERT_KEY_SPEC_PROP_ID property that matches the key specification in pvFindPara.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertCompareFunction.CERT_COMPARE_ENHKEY_USAGE">
            <summary>
            Searches for a certificate in the store that has either an enhanced key usage extension or an enhanced key usage property
            and a usage identifier that matches the cUsageIdentifier member in the CERT_ENHKEY_USAGE structure.
            <para>
            A certificate has an enhanced key usage extension if it has a CERT_EXTENSION structure with the pszObjId member set to szOID_ENHANCED_KEY_USAGE.
            </para>
            <para>A certificate has an enhanced key usage property if its CERT_ENHKEY_USAGE_PROP_ID identifier is set.</para>
            <para>
            If CERT_FIND_OPTIONAL_ENHKEY_USAGE_FLAG is set in dwFindFlags, certificates without the key usage extension or property are
            also matches. Setting this flag takes precedence over passing NULL in pvFindPara.
            </para>
            <para>If CERT_FIND_EXT_ONLY_ENHKEY_USAGE_FLAG is set, a match is done only on the key usage extension.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertCompareFunction.CERT_COMPARE_CTL_USAGE">
            <summary>
            Searches for a certificate in the store that has either an enhanced key usage extension or an enhanced key usage property
            and a usage identifier that matches the cUsageIdentifier member in the CERT_ENHKEY_USAGE structure.
            <para>
            A certificate has an enhanced key usage extension if it has a CERT_EXTENSION structure with the pszObjId member set to szOID_ENHANCED_KEY_USAGE.
            </para>
            <para>A certificate has an enhanced key usage property if its CERT_ENHKEY_USAGE_PROP_ID identifier is set.</para>
            <para>
            If CERT_FIND_OPTIONAL_ENHKEY_USAGE_FLAG is set in dwFindFlags, certificates without the key usage extension or property are
            also matches. Setting this flag takes precedence over passing NULL in pvFindPara.
            </para>
            <para>If CERT_FIND_EXT_ONLY_ENHKEY_USAGE_FLAG is set, a match is done only on the key usage extension.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertCompareFunction.CERT_COMPARE_SUBJECT_CERT">
            <summary>
            Searches for a certificate with both an issuer and a serial number that match the issuer and serial number in the CERT_INFO structure.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertCompareFunction.CERT_COMPARE_ISSUER_OF">
            <summary>
            Searches for a certificate with an subject that matches the issuer [In] PCCERT_CONTEXT. Instead of using
            CertFindCertificateInStore with this value, use the CertGetCertificateChain function.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertCompareFunction.CERT_COMPARE_EXISTING">
            <summary>Searches for a certificate that is an exact match of the specified certificate context.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertCompareFunction.CERT_COMPARE_SIGNATURE_HASH">
            <summary>Searches for a certificate with a signature hash that matches the signature hash in the CRYPT_HASH_BLOB structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertCompareFunction.CERT_COMPARE_KEY_IDENTIFIER">
            <summary>Searches for a certificate with a CERT_KEY_IDENTIFIER_PROP_ID property that matches the key identifier in CRYPT_HASH_BLOB.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertCompareFunction.CERT_COMPARE_CERT_ID">
            <summary>Find the certificate identified by the specified CERT_ID.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertCompareFunction.CERT_COMPARE_CROSS_CERT_DIST_POINTS">
            <summary>Find a certificate that has either a cross certificate distribution point extension or property.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertCompareFunction.CERT_COMPARE_PUBKEY_MD5_HASH">
            <summary>Find a certificate whose MD5-hashed public key matches the specified hash.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertCompareFunction.CERT_COMPARE_SUBJECT_INFO_ACCESS">
            <summary></summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertCompareFunction.CERT_COMPARE_HASH_STR">
            <summary></summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertCompareFunction.CERT_COMPARE_HAS_PRIVATE_KEY">
            <summary>
            Searches for a certificate that has a private key. The key can be ephemeral or saved on disk. The key can be a legacy
            Cryptography API (CAPI) key or a CNG key.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CertEncodingType">
            <summary>A certificate encoding type.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertEncodingType.CRYPT_ASN_ENCODING">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertEncodingType.CRYPT_NDR_ENCODING">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertEncodingType.X509_ASN_ENCODING">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertEncodingType.X509_NDR_ENCODING">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertEncodingType.PKCS_7_ASN_ENCODING">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertEncodingType.PKCS_7_NDR_ENCODING">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CertFindType">
            <summary>Values used by <see cref="M:Vanara.PInvoke.Crypt32.CertFindCertificateInStore(Vanara.PInvoke.Crypt32.HCERTSTORE,Vanara.PInvoke.Crypt32.CertEncodingType,Vanara.PInvoke.Crypt32.CertFindUsageFlags,Vanara.PInvoke.Crypt32.CertFindType,System.IntPtr,Vanara.PInvoke.Crypt32.PCCERT_CONTEXT)"/>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertFindType.CERT_FIND_ANY">
            <summary>No search criteria used. Returns the next certificate in the store.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertFindType.CERT_FIND_SHA1_HASH">
            <summary>Searches for a certificate with a SHA1 hash that matches the hash in the CRYPT_HASH_BLOB structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertFindType.CERT_FIND_MD5_HASH">
            <summary>Searches for a certificate with an MD5 hash that matches the hash in CRYPT_HASH_BLOB.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertFindType.CERT_FIND_SIGNATURE_HASH">
            <summary>Searches for a certificate with a signature hash that matches the signature hash in the CRYPT_HASH_BLOB structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertFindType.CERT_FIND_KEY_IDENTIFIER">
            <summary>Searches for a certificate with a CERT_KEY_IDENTIFIER_PROP_ID property that matches the key identifier in CRYPT_HASH_BLOB.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertFindType.CERT_FIND_HASH">
            <summary>Searches for a certificate with a SHA1 hash that matches the hash in the CRYPT_HASH_BLOB structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertFindType.CERT_FIND_PROPERTY">
            <summary>
            Searches for a certificate with a property that matches the property identifier specified by the DWORD value in pvFindPara.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertFindType.CERT_FIND_PUBLIC_KEY">
            <summary>Searches for a certificate with a public key that matches the public key in the CERT_PUBLIC_KEY_INFO structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertFindType.CERT_FIND_SUBJECT_NAME">
            <summary>
            Searches for a certificate with an exact match of the entire subject name with the name in the CERT_NAME_BLOB structure. The
            search is restricted to certificates that match the value of dwCertEncodingType.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertFindType.CERT_FIND_SUBJECT_ATTR">
            <summary>
            Searches for a certificate with specified subject attributes that match attributes in the CERT_RDN structure. If RDN values
            are set, the function compares attributes of the subject in a certificate with elements of the CERT_RDN_ATTR array in this
            CERT_RDN structure. Comparisons iterate through the CERT_RDN_ATTR attributes looking for a match with the certificate's
            subject's attributes.
            <para>If the pszObjId member of CERT_RDN_ATTR is NULL, the attribute object identifier is ignored.</para>
            <para>If the dwValueType member of CERT_RDN_ATTR is CERT_RDN_ANY_TYPE, the value type is ignored.</para>
            <para>If the pbData member of CERT_RDN_VALUE_BLOB is NULL, any value is a match.</para>
            <para>Currently only an exact, case-sensitive match is supported.</para>
            <para>
            For information about Unicode options, see Remarks. When these values are set, the search is restricted to certificates
            whose encoding type matches dwCertEncodingType.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertFindType.CERT_FIND_ISSUER_NAME">
            <summary>
            Search for a certificate with an exact match of the entire issuer name with the name in CERT_NAME_BLOB The search is
            restricted to certificates that match the dwCertEncodingType.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertFindType.CERT_FIND_ISSUER_ATTR">
            <summary>
            Searches for a certificate with specified issuer attributes that match attributes in the CERT_RDN structure. If these values
            are set, the function compares attributes of the issuer in a certificate with elements of the CERT_RDN_ATTR array in this
            CERT_RDN structure. Comparisons iterate through the CERT_RDN_ATTR attributes looking for a match with the certificate's
            issuer attributes.
            <para>If the pszObjId member of CERT_RDN_ATTR is NULL, the attribute object identifier is ignored.</para>
            <para>If the dwValueType member of CERT_RDN_ATTR is CERT_RDN_ANY_TYPE, the value type is ignored.</para>
            <para>If the pbData member of CERT_RDN_VALUE_BLOB is NULL, any value is a match.</para>
            <para>
            Currently only an exact, case-sensitive match is supported.For information about Unicode options, see Remarks. When these
            values are set, the search is restricted to certificates whose encoding type matches dwCertEncodingType.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertFindType.CERT_FIND_SUBJECT_STR_A">
            <summary>
            Searches for a certificate that contains the specified subject name string. The certificate's subject member is converted to
            a name string of the appropriate type using the appropriate form of CertNameToStr formatted as CERT_SIMPLE_NAME_STR. Then a
            case-insensitive substring-within-a-string match is performed. When this value is set, the search is restricted to
            certificates whose encoding type matches dwCertEncodingType.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertFindType.CERT_FIND_SUBJECT_STR_W">
            <summary>
            Searches for a certificate that contains the specified subject name string. The certificate's subject member is converted to
            a name string of the appropriate type using the appropriate form of CertNameToStr formatted as CERT_SIMPLE_NAME_STR. Then a
            case-insensitive substring-within-a-string match is performed. When this value is set, the search is restricted to
            certificates whose encoding type matches dwCertEncodingType.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertFindType.CERT_FIND_SUBJECT_STR">
            <summary>
            Searches for a certificate that contains the specified subject name string. The certificate's subject member is converted to
            a name string of the appropriate type using the appropriate form of CertNameToStr formatted as CERT_SIMPLE_NAME_STR. Then a
            case-insensitive substring-within-a-string match is performed. When this value is set, the search is restricted to
            certificates whose encoding type matches dwCertEncodingType.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertFindType.CERT_FIND_ISSUER_STR_A">
            <summary>
            Searches for a certificate that contains the specified subject name string. The certificate's subject member is converted to
            a name string of the appropriate type using the appropriate form of CertNameToStr formatted as CERT_SIMPLE_NAME_STR. Then a
            case-insensitive substring-within-a-string match is performed. When this value is set, the search is restricted to
            certificates whose encoding type matches dwCertEncodingType.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertFindType.CERT_FIND_ISSUER_STR_W">
            <summary>
            Searches for a certificate that contains the specified subject name string. The certificate's subject member is converted to
            a name string of the appropriate type using the appropriate form of CertNameToStr formatted as CERT_SIMPLE_NAME_STR. Then a
            case-insensitive substring-within-a-string match is performed. When this value is set, the search is restricted to
            certificates whose encoding type matches dwCertEncodingType.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertFindType.CERT_FIND_ISSUER_STR">
            <summary>
            Searches for a certificate that contains the specified issuer name string. The certificate's issuer member is converted to a
            name string of the appropriate type using the appropriate form of CertNameToStr formatted as CERT_SIMPLE_NAME_STR. Then a
            case-insensitive substring-within-a-string match is performed. When this value is set, the search is restricted to
            certificates whose encoding type matches dwCertEncodingType.
            <para>
            If the substring match fails and the subject contains an email RDN with Punycode encoded string,
            CERT_NAME_STR_ENABLE_PUNYCODE_FLAG is used to convert the subject to a Unicode string and the substring match is performed again.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertFindType.CERT_FIND_KEY_SPEC">
            <summary>Searches for a certificate that has a CERT_KEY_SPEC_PROP_ID property that matches the key specification in pvFindPara.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertFindType.CERT_FIND_ENHKEY_USAGE">
            <summary>
            Searches for a certificate in the store that has either an enhanced key usage extension or an enhanced key usage property
            and a usage identifier that matches the cUsageIdentifier member in the CERT_ENHKEY_USAGE structure.
            <para>
            A certificate has an enhanced key usage extension if it has a CERT_EXTENSION structure with the pszObjId member set to szOID_ENHANCED_KEY_USAGE.
            </para>
            <para>A certificate has an enhanced key usage property if its CERT_ENHKEY_USAGE_PROP_ID identifier is set.</para>
            <para>
            If CERT_FIND_OPTIONAL_ENHKEY_USAGE_FLAG is set in dwFindFlags, certificates without the key usage extension or property are
            also matches. Setting this flag takes precedence over passing NULL in pvFindPara.
            </para>
            <para>If CERT_FIND_EXT_ONLY_ENHKEY_USAGE_FLAG is set, a match is done only on the key usage extension.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertFindType.CERT_FIND_CTL_USAGE">
            <summary>
            Searches for a certificate that has a szOID_ENHANCED_KEY_USAGE extension or a CERT_CTL_PROP_ID that matches the
            pszUsageIdentifier member of the CTL_USAGE structure.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertFindType.CERT_FIND_SUBJECT_CERT">
            <summary>
            Searches for a certificate with both an issuer and a serial number that match the issuer and serial number in the CERT_INFO structure.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertFindType.CERT_FIND_ISSUER_OF">
            <summary>
            Searches for a certificate with an subject that matches the issuer [In] PCCERT_CONTEXT. Instead of using
            CertFindCertificateInStore with this value, use the CertGetCertificateChain function.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertFindType.CERT_FIND_EXISTING">
            <summary>Searches for a certificate that is an exact match of the specified certificate context.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertFindType.CERT_FIND_CERT_ID">
            <summary>Find the certificate identified by the specified CERT_ID.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertFindType.CERT_FIND_CROSS_CERT_DIST_POINTS">
            <summary>Find a certificate that has either a cross certificate distribution point extension or property.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertFindType.CERT_FIND_PUBKEY_MD5_HASH">
            <summary>Find a certificate whose MD5-hashed public key matches the specified hash.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertFindType.CERT_FIND_SUBJECT_INFO_ACCESS">
            <summary></summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertFindType.CERT_FIND_HASH_STR">
            <summary></summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertFindType.CERT_FIND_HAS_PRIVATE_KEY">
            <summary>
            Searches for a certificate that has a private key. The key can be ephemeral or saved on disk. The key can be a legacy
            Cryptography API (CAPI) key or a CNG key.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CertInfoFlags">
            <summary>Flags used by <see cref="T:Vanara.PInvoke.Crypt32.CertFindType"/>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertInfoFlags.CERT_INFO_VERSION_FLAG">
            <summary>Gets the version.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertInfoFlags.CERT_INFO_SERIAL_NUMBER_FLAG">
            <summary>Gets the serial number.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertInfoFlags.CERT_INFO_SIGNATURE_ALGORITHM_FLAG">
            <summary>Gets the signature.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertInfoFlags.CERT_INFO_ISSUER_FLAG">
            <summary>Gets the issuer.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertInfoFlags.CERT_INFO_NOT_BEFORE_FLAG">
            <summary>Gets values before.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertInfoFlags.CERT_INFO_NOT_AFTER_FLAG">
            <summary>Gets values after.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertInfoFlags.CERT_INFO_SUBJECT_FLAG">
            <summary>Gets the subject.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertInfoFlags.CERT_INFO_SUBJECT_PUBLIC_KEY_INFO_FLAG">
            <summary>Gets the subject's public key.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertInfoFlags.CERT_INFO_ISSUER_UNIQUE_ID_FLAG">
            <summary>Gets the issuer's UID.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertInfoFlags.CERT_INFO_SUBJECT_UNIQUE_ID_FLAG">
            <summary>Gets the subject's UID.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertInfoFlags.CERT_INFO_EXTENSION_FLAG">
            <summary>Gets the extended info.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CertKeySpec">
            <summary>The specification of the private key to retrieve.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertKeySpec.AT_KEYEXCHANGE">
            <summary>Keys used to encrypt/decrypt session keys. The handle to the CSP is contained in the hCryptProv member.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertKeySpec.AT_SIGNATURE">
            <summary>Keys used to create and verify digital signatures. The handle to the CSP is contained in the hCryptProv member.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertKeySpec.CERT_NCRYPT_KEY_SPEC">
            <summary>
            Keys associated with a CNG CSP. The handle to the CNG CSP is set in the hNCryptProv member. Windows Server 2003 and Windows
            XP: This value is not used.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CryptAcquireFlags">
            <summary>A set of flags that modify the behavior of <see cref="M:Vanara.PInvoke.Crypt32.CryptAcquireCertificatePrivateKey(Vanara.PInvoke.Crypt32.PCCERT_CONTEXT,Vanara.PInvoke.Crypt32.CryptAcquireFlags,System.IntPtr,System.IntPtr@,Vanara.PInvoke.Crypt32.CertKeySpec@,System.Boolean@)"/>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptAcquireFlags.CRYPT_ACQUIRE_CACHE_FLAG">
            <summary>
            If a handle is already acquired and cached, that same handle is returned. Otherwise, a new handle is acquired and cached by
            using the certificate's CERT_KEY_CONTEXT_PROP_ID property.
            <para>
            When this flag is set, the pfCallerFreeProvOrNCryptKey parameter receives FALSE and the calling application must not release
            the handle. The handle is freed when the certificate context is freed; however, you must retain the certificate context
            referenced by the pCert parameter as long as the key is in use, otherwise operations that rely on the key will fail.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptAcquireFlags.CRYPT_ACQUIRE_USE_PROV_INFO_FLAG">
            <summary>
            Uses the certificate's CERT_KEY_PROV_INFO_PROP_ID property to determine whether caching should be accomplished. For more
            information about the CERT_KEY_PROV_INFO_PROP_ID property, see CertSetCertificateContextProperty.
            <para>
            This function will only use caching if during a previous call, the dwFlags member of the CRYPT_KEY_PROV_INFO structure
            contained CERT_SET_KEY_CONTEXT_PROP.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptAcquireFlags.CRYPT_ACQUIRE_COMPARE_KEY_FLAG">
            <summary>
            The public key in the certificate is compared with the public key returned by the cryptographic service provider (CSP). If
            the keys do not match, the acquisition operation fails and the last error code is set to NTE_BAD_PUBLIC_KEY. If a cached
            handle is returned, no comparison is made.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptAcquireFlags.CRYPT_ACQUIRE_NO_HEALING">
            <summary>
            This function will not attempt to re-create the CERT_KEY_PROV_INFO_PROP_ID property in the certificate context if this
            property cannot be retrieved.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptAcquireFlags.CRYPT_ACQUIRE_SILENT_FLAG">
            <summary>
            The CSP should not display any user interface (UI) for this context. If the CSP must display UI to operate, the call fails
            and the NTE_SILENT_CONTEXT error code is set as the last error.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptAcquireFlags.CRYPT_ACQUIRE_WINDOW_HANDLE_FLAG">
            <summary>
            Any UI that is needed by the CSP or KSP will be a child of the HWND that is supplied in the pvParameters parameter. For a
            CSP key, using this flag will cause the CryptSetProvParam function with the flag PP_CLIENT_HWND using this HWND to be called
            with NULL for HCRYPTPROV. For a KSP key, using this flag will cause the NCryptSetProperty function with the
            NCRYPT_WINDOW_HANDLE_PROPERTY flag to be called using the HWND.
            <para>Do not use this flag with CRYPT_ACQUIRE_SILENT_FLAG.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptAcquireFlags.CRYPT_ACQUIRE_NCRYPT_KEY_FLAGS_MASK">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptAcquireFlags.CRYPT_ACQUIRE_ALLOW_NCRYPT_KEY_FLAG">
            <summary>
            This function will attempt to obtain the key by using CryptoAPI. If that fails, this function will attempt to obtain the key
            by using the Cryptography API: Next Generation (CNG).
            <para>The pdwKeySpec variable receives the CERT_NCRYPT_KEY_SPEC flag if CNG is used to obtain the key.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptAcquireFlags.CRYPT_ACQUIRE_PREFER_NCRYPT_KEY_FLAG">
            <summary>
            This function will attempt to obtain the key by using CNG. If that fails, this function will attempt to obtain the key by
            using CryptoAPI.
            <para>The pdwKeySpec variable receives the CERT_NCRYPT_KEY_SPEC flag if CNG is used to obtain the key.</para>
            <note>CryptoAPI does not support the CNG Diffie-Hellman or DSA asymmetric algorithms. CryptoAPI only supports Diffie-Hellman
            and DSA public keys through the legacy CSPs.If this flag is set for a certificate that contains a Diffie-Hellman or DSA
            public key, this function will implicitly change this flag to CRYPT_ACQUIRE_ALLOW_NCRYPT_KEY_FLAG to first attempt to use
            CryptoAPI to obtain the key.</note>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptAcquireFlags.CRYPT_ACQUIRE_ONLY_NCRYPT_KEY_FLAG">
            <summary>
            This function will only attempt to obtain the key by using CNG and will not use CryptoAPI to obtain the key.
            <para>The pdwKeySpec variable receives the CERT_NCRYPT_KEY_SPEC flag if CNG is used to obtain the key.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CryptDefaultContextFlags">
            <summary>A set of flags that modify the behavior of <see cref="M:Vanara.PInvoke.Crypt32.CryptInstallDefaultContext(Vanara.PInvoke.Crypt32.HCRYPTPROV,Vanara.PInvoke.Crypt32.CryptDefaultContextType,System.IntPtr,Vanara.PInvoke.Crypt32.CryptDefaultContextFlags,System.IntPtr,Vanara.PInvoke.Crypt32.HCRYPTDEFAULTCONTEXT@)"/>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptDefaultContextFlags.CRYPT_DEFAULT_CONTEXT_AUTO_RELEASE_FLAG">
            <summary>
            The provider handle specified by the hCryptProv parameter is released automatically when the process or thread ends. If this
            flag is not specified, it is the caller's responsibility to release the provider handle by using the CryptReleaseContext
            function when the handle is no longer needed. The provider handle is not released if the CryptUninstallDefaultContext
            function is called before the process or thread exits.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptDefaultContextFlags.CRYPT_DEFAULT_CONTEXT_PROCESS_FLAG">
            <summary>
            The provider applies to all threads in the process. If this flag is not specified, the provider only applies to the calling
            thread. The pvDefaultPara parameter cannot be NULL when this flag is set.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CryptDefaultContextType">
            <summary>Specifies the type of context to install.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptDefaultContextType.CRYPT_DEFAULT_CONTEXT_CERT_SIGN_OID">
            <summary>
            Installs the default provider used to verify a single certificate signature type.
            <para>
            The pvDefaultPara parameter is the address of a null-terminated ANSI string that contains the object identifier of the
            certificate signature algorithm to install the provider for, for example, szOID_OIWSEC_md5RSA.If the pvDefaultPara parameter
            is NULL, the specified provider is used to verify all certificate signatures.The pvDefaultPara parameter cannot be NULL when
            the CRYPT_DEFAULT_CONTEXT_PROCESS_FLAG flag is set.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptDefaultContextType.CRYPT_DEFAULT_CONTEXT_MULTI_CERT_SIGN_OID">
            <summary>
            Installs the default provider used to verify multiple certificate signature types.
            <para>
            The pvDefaultPara parameter is the address of a CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA structure that contains an array of
            object identifiers that identify the certificate signature algorithms to install the specified provider for.
            </para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.PrivateKeyType">
            <summary>Private key pair type.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.PrivateKeyType.AT_KEYEXCHANGE">
            <summary>Key exchange</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.PrivateKeyType.AT_SIGNATURE">
            <summary>Digital signature</summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.TimeStampRetrivalFlags">
            <summary>A set of flags that specify how the time stamp is retrieved.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.TimeStampRetrivalFlags.TIMESTAMP_DONT_HASH_DATA">
            <summary>Inhibit hash calculation on the array of bytes pointed to by the pbData parameter.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.TimeStampRetrivalFlags.TIMESTAMP_VERIFY_CONTEXT_SIGNATURE">
            <summary>
            Enforce signature validation on the retrieved time stamp. <note>The TIMESTAMP_VERIFY_CONTEXT_SIGNATURE flag is valid only if
            the fRequestCerts member of the CRYPT_TIMESTAMP_PARA pointed to by the pPara parameter is set to TRUE.</note>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.TimeStampRetrivalFlags.TIMESTAMP_NO_AUTH_RETRIEVAL">
            <summary>Set this flag to inhibit automatic authentication handling.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.GET_ALG_CLASS(Vanara.PInvoke.Crypt32.ALG_ID)">
            <summary>Gets the ALG_CLASS from an ALG_ID.</summary>
            <param name="algId">The ALG_ID.</param>
            <returns>The associated ALG_CLASS.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.GET_ALG_TYPE(Vanara.PInvoke.Crypt32.ALG_ID)">
            <summary>Gets the ALG_TYPE from an ALG_ID.</summary>
            <param name="algId">The ALG_ID.</param>
            <returns>The associated ALG_TYPE.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.GetClass(Vanara.PInvoke.Crypt32.ALG_ID)">
            <summary>Gets the ALG_CLASS from an ALG_ID.</summary>
            <param name="algId">The ALG_ID.</param>
            <returns>The associated ALG_CLASS.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.GetType(Vanara.PInvoke.Crypt32.ALG_ID)">
            <summary>Gets the ALG_TYPE from an ALG_ID.</summary>
            <param name="algId">The ALG_ID.</param>
            <returns>The associated ALG_TYPE.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertAddEncodedCertificateToSystemStore(System.String,System.IntPtr,System.UInt32)">
            <summary>
            The <c>CertAddEncodedCertificateToSystemStore</c> function opens the specified system store and adds the encoded certificate to it.
            </summary>
            <param name="szCertStoreName">A null-terminated string that contains the name of the system store for the encoded certificate.</param>
            <param name="pbCertEncoded">A pointer to a buffer that contains the encoded certificate to add.</param>
            <param name="cbCertEncoded">The size, in bytes, of the pbCertEncoded buffer.</param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>
            If the function fails, the return value is <c>FALSE</c>. <c>CertAddEncodedCertificateToSystemStore</c> depends on the functions
            listed in the following remarks for error handling. Refer to those function topics for their respective error handling
            behaviors. For extended error information, call GetLastError.
            </para>
            </returns>
            <remarks>
            <para>
            Internally, <c>CertAddEncodedCertificateToSystemStore</c> calls CertOpenSystemStore and CertAddEncodedCertificateToStore with
            the following parameters.
            </para>
            <list type="table">
            <listheader>
            <term>CertOpenSystemStore Parameter</term>
            <term>Value</term>
            </listheader>
            <item>
            <term>szSubsystemProtocol</term>
            <term>szCertStoreName</term>
            </item>
            </list>
            <para>
            If <c>CertAddEncodedCertificateToSystemStore</c> obtains a handle to the specified system store, it calls CertCloseStore to
            close the handle before it returns.
            </para>
            <list type="table">
            <listheader>
            <term>CertAddEncodedCertificateToStore Parameter</term>
            <term>Value</term>
            </listheader>
            <item>
            <term>dwCertEncodingType</term>
            <term>X509_ASN_ENCODING</term>
            </item>
            <item>
            <term>dwAddDisposition</term>
            <term>CERT_STORE_ADD_USE_EXISTING</term>
            </item>
            <item>
            <term>ppCertContext</term>
            <term>NULL</term>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertFreeCertificateContext(Vanara.PInvoke.Crypt32.PCCERT_CONTEXT)">
            <summary>
            <para>
            The <c>CertFreeCertificateContext</c> function frees a certificate context by decrementing its reference count. When the
            reference count goes to zero, <c>CertFreeCertificateContext</c> frees the memory used by a certificate context.
            </para>
            <para>
            To free a context obtained by a get, duplicate, or create function, call the appropriate free function. To free a context
            obtained by a find or enumerate function, either pass it in as the previous context parameter to a subsequent invocation of the
            function, or call the appropriate free function. For more information, see the reference topic for the function that obtains the context.
            </para>
            </summary>
            <param name="pCertContext">A pointer to the CERT_CONTEXT to be freed.</param>
            <returns>The function always returns nonzero.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertResyncCertificateChainEngine(Vanara.PInvoke.Crypt32.HCERTCHAINENGINE)">
            <summary>
            Resyncs the certificate chain engine, which resynchronizes the stores the store's engine and updates the engine caches.
            </summary>
            <param name="hChainEngine">The chain engine to resynchronize.</param>
            <returns>
            <para>If the function succeeds, the function returns nonzero.</para>
            <para>If the function fails, it returns zero. For extended error information, call GetLastError.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptAcquireCertificatePrivateKey(Vanara.PInvoke.Crypt32.PCCERT_CONTEXT,Vanara.PInvoke.Crypt32.CryptAcquireFlags,System.IntPtr,System.IntPtr@,Vanara.PInvoke.Crypt32.CertKeySpec@,System.Boolean@)">
            <summary>
            <para>
            The <c>CryptAcquireCertificatePrivateKey</c> function obtains the private key for a certificate. This function is used to obtain
            access to a user's private key when the user's certificate is available, but the handle of the user's key container is not
            available. This function can only be used by the owner of a private key and not by any other user.
            </para>
            <para>
            If a CSP handle and the key container containing a user's private key are available, the CryptGetUserKey function should be used instead.
            </para>
            </summary>
            <param name="pCert">
            The address of a CERT_CONTEXT structure that contains the certificate context for which a private key will be obtained.
            </param>
            <param name="dwFlags">
            <para>
            A set of flags that modify the behavior of this function. This can be zero or a combination of one or more of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPT_ACQUIRE_CACHE_FLAG</term>
            <term>
            If a handle is already acquired and cached, that same handle is returned. Otherwise, a new handle is acquired and cached by
            using the certificate's CERT_KEY_CONTEXT_PROP_ID property. When this flag is set, the pfCallerFreeProvOrNCryptKey parameter
            receives FALSE and the calling application must not release the handle. The handle is freed when the certificate context is
            freed; however, you must retain the certificate context referenced by the pCert parameter as long as the key is in use,
            otherwise operations that rely on the key will fail.
            </term>
            </item>
            <item>
            <term>CRYPT_ACQUIRE_COMPARE_KEY_FLAG</term>
            <term>
            The public key in the certificate is compared with the public key returned by the cryptographic service provider (CSP). If the
            keys do not match, the acquisition operation fails and the last error code is set to NTE_BAD_PUBLIC_KEY. If a cached handle is
            returned, no comparison is made.
            </term>
            </item>
            <item>
            <term>CRYPT_ACQUIRE_NO_HEALING</term>
            <term>
            This function will not attempt to re-create the CERT_KEY_PROV_INFO_PROP_ID property in the certificate context if this property
            cannot be retrieved.
            </term>
            </item>
            <item>
            <term>CRYPT_ACQUIRE_SILENT_FLAG</term>
            <term>
            The CSP should not display any user interface (UI) for this context. If the CSP must display UI to operate, the call fails and
            the NTE_SILENT_CONTEXT error code is set as the last error.
            </term>
            </item>
            <item>
            <term>CRYPT_ACQUIRE_USE_PROV_INFO_FLAG</term>
            <term>
            Uses the certificate's CERT_KEY_PROV_INFO_PROP_ID property to determine whether caching should be accomplished. For more
            information about the CERT_KEY_PROV_INFO_PROP_ID property, see CertSetCertificateContextProperty. This function will only use
            caching if during a previous call, the dwFlags member of the CRYPT_KEY_PROV_INFO structure contained CERT_SET_KEY_CONTEXT_PROP.
            </term>
            </item>
            <item>
            <term>CRYPT_ACQUIRE_ WINDOWS_HANDLE_FLAG</term>
            <term>
            Any UI that is needed by the CSP or KSP will be a child of the HWND that is supplied in the pvParameters parameter. For a CSP
            key, using this flag will cause the CryptSetProvParam function with the flag PP_CLIENT_HWND using this HWND to be called with
            NULL for HCRYPTPROV. For a KSP key, using this flag will cause the NCryptSetProperty function with the
            NCRYPT_WINDOW_HANDLE_PROPERTY flag to be called using the HWND. Do not use this flag with CRYPT_ACQUIRE_SILENT_FLAG.
            </term>
            </item>
            </list>
            <para>
            The following flags determine which technology is used to obtain the key. If none of these flags is present, this function will
            only attempt to obtain the key by using CryptoAPI.
            </para>
            <para><c>Windows Server 2003 and Windows XP:</c> These flags are not supported.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPT_ACQUIRE_ALLOW_NCRYPT_KEY_FLAG</term>
            <term>
            This function will attempt to obtain the key by using CryptoAPI. If that fails, this function will attempt to obtain the key by
            using the Cryptography API: Next Generation (CNG). The pdwKeySpec variable receives the CERT_NCRYPT_KEY_SPEC flag if CNG is used
            to obtain the key.
            </term>
            </item>
            <item>
            <term>CRYPT_ACQUIRE_ONLY_NCRYPT_KEY_FLAG</term>
            <term>
            This function will only attempt to obtain the key by using CNG and will not use CryptoAPI to obtain the key. The pdwKeySpec
            variable receives the CERT_NCRYPT_KEY_SPEC flag if CNG is used to obtain the key.
            </term>
            </item>
            <item>
            <term>CRYPT_ACQUIRE_PREFER_NCRYPT_KEY_FLAG</term>
            <term>
            This function will attempt to obtain the key by using CNG. If that fails, this function will attempt to obtain the key by using
            CryptoAPI. The pdwKeySpec variable receives the CERT_NCRYPT_KEY_SPEC flag if CNG is used to obtain the key.
            </term>
            </item>
            </list>
            </param>
            <param name="pvParameters">
            <para>
            If the <c>CRYPT_ACQUIRE_WINDOWS_HANDLE_FLAG</c> is set, then this is the address of an <c>HWND</c>. If the
            <c>CRYPT_ACQUIRE_WINDOWS_HANDLE_FLAG</c> is not set, then this parameter must be <c>NULL</c>.
            </para>
            <para>
            <c>Windows Server 2008 R2, Windows 7, Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:</c> This parameter
            was named pvReserved and reserved for future use and must be <c>NULL</c>.
            </para>
            </param>
            <param name="phCryptProvOrNCryptKey">
            <para>
            The address of an HCRYPTPROV_OR_NCRYPT_KEY_HANDLE variable that receives the handle of either the CryptoAPI provider or the CNG
            key. If the pdwKeySpec variable receives the <c>CERT_NCRYPT_KEY_SPEC</c> flag, this is a CNG key handle of type
            <c>NCRYPT_KEY_HANDLE</c>; otherwise, this is a CryptoAPI provider handle of type HCRYPTPROV.
            </para>
            <para>
            For more information about when and how to release this handle, see the description of the pfCallerFreeProvOrNCryptKey parameter.
            </para>
            </param>
            <param name="pdwKeySpec">
            <para>
            The address of a <c>DWORD</c> variable that receives additional information about the key. This can be one of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>AT_KEYEXCHANGE</term>
            <term>The key pair is a key exchange pair.</term>
            </item>
            <item>
            <term>AT_SIGNATURE</term>
            <term>The key pair is a signature pair.</term>
            </item>
            <item>
            <term>CERT_NCRYPT_KEY_SPEC</term>
            <term>The key is a CNG key. Windows Server 2003 and Windows XP: This value is not supported.</term>
            </item>
            </list>
            </param>
            <param name="pfCallerFreeProvOrNCryptKey">
            <para>
            The address of a <c>BOOL</c> variable that receives a value that indicates whether the caller must free the handle returned in
            the phCryptProvOrNCryptKey variable. This receives <c>FALSE</c> if any of the following is true:
            </para>
            <list type="bullet">
            <item>
            <term>Public key acquisition or comparison fails.</term>
            </item>
            <item>
            <term>The dwFlags parameter contains the <c>CRYPT_ACQUIRE_CACHE_FLAG</c> flag.</term>
            </item>
            <item>
            <term>
            The dwFlags parameter contains the <c>CRYPT_ACQUIRE_USE_PROV_INFO_FLAG</c> flag, the certificate context property is set to
            <c>CERT_KEY_PROV_INFO_PROP_ID</c> with the CRYPT_KEY_PROV_INFO structure, and the dwFlags member of the
            <c>CRYPT_KEY_PROV_INFO</c> structure is set to <c>CERT_SET_KEY_CONTEXT_PROP_ID</c>.
            </term>
            </item>
            </list>
            <para>If this variable receives</para>
            <para>FALSE</para>
            <para>, the calling application must not release the handle returned in the</para>
            <para>phCryptProvOrNCryptKey</para>
            <para>variable. The handle will be released on the last free action of the</para>
            <para>certificate context</para>
            <para>.</para>
            <para>
            If this variable receives <c>TRUE</c>, the caller is responsible for releasing the handle returned in the phCryptProvOrNCryptKey
            variable. If the pdwKeySpec variable receives the <c>CERT_NCRYPT_KEY_SPEC</c> flag, the handle must be released by passing it to
            the NCryptFreeObject function; otherwise, the handle is released by passing it to the CryptReleaseContext function.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is nonzero ( <c>TRUE</c>).</para>
            <para>
            If the function fails, the return value is zero ( <c>FALSE</c>). For extended error information, call GetLastError. One possible
            error code is the following.
            </para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>NTE_BAD_PUBLIC_KEY</term>
            <term>
            The public key in the certificate does not match the public key returned by the CSP. This error code is returned if the
            CRYPT_ACQUIRE_COMPARE_KEY_FLAG is set and the public key in the certificate does not match the public key returned by the
            cryptographic provider.
            </term>
            </item>
            <item>
            <term>NTE_SILENT_CONTEXT</term>
            <term>
            The dwFlags parameter contained the CRYPT_ACQUIRE_SILENT_FLAG flag and the CSP could not continue an operation without
            displaying a user interface.
            </term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            When <c>CRYPT_ACQUIRE_WINDOWS_HANDLE_FLAG</c> is set, the caller must ensure the <c>HWND</c> is valid. If the <c>HWND</c> is no
            longer valid, for CSP the caller should call CryptSetProvParam using flag PP_CLIENT_HWND with <c>NULL</c> for the <c>HWND</c>
            and <c>NULL</c> for the HCRYPTPROV. For KSP, the caller should set the NCRYPT_WINDOW_HANDLE_PROPERTY of the ncrypt key to be
            <c>NULL</c>. When <c>CRYPT_ACQUIRE_WINDOWS_HANDLE_FLAG</c> flag is set for KSP, the NCRYPT_WINDOW_HANDLE_PROPERTY is set on the
            storage provider and the key. If both calls fail, then the function fails. If only one fails, the function succeeds. Note that
            setting <c>HWND</c> to <c>NULL</c> effectively removes <c>HWND</c> from the HCRYPTPROV or ncrypt key.
            </para>
            <para>Examples</para>
            <para>For an example that uses this function, see Example C Program: Sending and Receiving a Signed and Encrypted Message.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptInstallDefaultContext(Vanara.PInvoke.Crypt32.HCRYPTPROV,Vanara.PInvoke.Crypt32.CryptDefaultContextType,System.IntPtr,Vanara.PInvoke.Crypt32.CryptDefaultContextFlags,System.IntPtr,Vanara.PInvoke.Crypt32.HCRYPTDEFAULTCONTEXT@)">
            <summary>
            <para>
            The handle of the cryptographic service provider to be used as the default context. This handle is obtained by using the
            CryptAcquireContext function.
            </para>
            <para>Specifies the type of context to install. This must be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPT_DEFAULT_CONTEXT_CERT_SIGN_OID</term>
            <term>
            Installs the default provider used to verify a single certificate signature type. The pvDefaultPara parameter is the address of
            a null-terminated ANSI string that contains the object identifier of the certificate signature algorithm to install the provider
            for, for example, szOID_OIWSEC_md5RSA. If the pvDefaultPara parameter is NULL, the specified provider is used to verify all
            certificate signatures. The pvDefaultPara parameter cannot be NULL when the CRYPT_DEFAULT_CONTEXT_PROCESS_FLAG flag is set.
            </term>
            </item>
            <item>
            <term>CRYPT_DEFAULT_CONTEXT_MULTI_CERT_SIGN_OID</term>
            <term>
            Installs the default provider used to verify multiple certificate signature types. The pvDefaultPara parameter is the address of
            a CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA structure that contains an array of object identifiers that identify the certificate
            signature algorithms to install the specified provider for.
            </term>
            </item>
            </list>
            <para>
            Specifies the object or objects to install the default context provider for. The format of this parameter depends on the
            contents of the dwDefaultType parameter.
            </para>
            <para>
            A set of flags that modify the behavior of this function. This can be zero or a combination of one or more of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPT_DEFAULT_CONTEXT_AUTO_RELEASE_FLAG</term>
            <term>
            The provider handle specified by the hCryptProv parameter is released automatically when the process or thread ends. If this
            flag is not specified, it is the caller's responsibility to release the provider handle by using the CryptReleaseContext
            function when the handle is no longer needed. The provider handle is not released if the CryptUninstallDefaultContext function
            is called before the process or thread exits.
            </term>
            </item>
            <item>
            <term>CRYPT_DEFAULT_CONTEXT_PROCESS_FLAG</term>
            <term>
            The provider applies to all threads in the process. If this flag is not specified, the provider only applies to the calling
            thread. The pvDefaultPara parameter cannot be NULL when this flag is set.
            </term>
            </item>
            </list>
            <para>This parameter is reserved for future use.</para>
            <para>
            The address of an <c>HCRYPTDEFAULTCONTEXT</c> variable that receives the default context handle. This handle is passed to the
            CryptUninstallDefaultContext function to uninstall the default context provider.
            </para>
            </summary>
            <param name="hCryptProv">
            The handle of the cryptographic service provider to be used as the default context. This handle is obtained by using the
            CryptAcquireContext function.
            </param>
            <param name="dwDefaultType">
            <para>Specifies the type of context to install. This must be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPT_DEFAULT_CONTEXT_CERT_SIGN_OID</term>
            <term>
            Installs the default provider used to verify a single certificate signature type. The pvDefaultPara parameter is the address of
            a null-terminated ANSI string that contains the object identifier of the certificate signature algorithm to install the provider
            for, for example, szOID_OIWSEC_md5RSA. If the pvDefaultPara parameter is NULL, the specified provider is used to verify all
            certificate signatures. The pvDefaultPara parameter cannot be NULL when the CRYPT_DEFAULT_CONTEXT_PROCESS_FLAG flag is set.
            </term>
            </item>
            <item>
            <term>CRYPT_DEFAULT_CONTEXT_MULTI_CERT_SIGN_OID</term>
            <term>
            Installs the default provider used to verify multiple certificate signature types. The pvDefaultPara parameter is the address of
            a CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA structure that contains an array of object identifiers that identify the certificate
            signature algorithms to install the specified provider for.
            </term>
            </item>
            </list>
            </param>
            <param name="pvDefaultPara">
            Specifies the object or objects to install the default context provider for. The format of this parameter depends on the
            contents of the dwDefaultType parameter.
            </param>
            <param name="dwFlags">
            <para>
            A set of flags that modify the behavior of this function. This can be zero or a combination of one or more of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPT_DEFAULT_CONTEXT_AUTO_RELEASE_FLAG</term>
            <term>
            The provider handle specified by the hCryptProv parameter is released automatically when the process or thread ends. If this
            flag is not specified, it is the caller's responsibility to release the provider handle by using the CryptReleaseContext
            function when the handle is no longer needed. The provider handle is not released if the CryptUninstallDefaultContext function
            is called before the process or thread exits.
            </term>
            </item>
            <item>
            <term>CRYPT_DEFAULT_CONTEXT_PROCESS_FLAG</term>
            <term>
            The provider applies to all threads in the process. If this flag is not specified, the provider only applies to the calling
            thread. The pvDefaultPara parameter cannot be NULL when this flag is set.
            </term>
            </item>
            </list>
            </param>
            <param name="pvReserved">This parameter is reserved for future use.</param>
            <param name="phDefaultContext">
            The address of an <c>HCRYPTDEFAULTCONTEXT</c> variable that receives the default context handle. This handle is passed to the
            CryptUninstallDefaultContext function to uninstall the default context provider.
            </param>
            <returns>
            If the function succeeds, the return value is nonzero (TRUE). If the function fails, the return value is zero (FALSE). For
            extended error information, call GetLastError.
            </returns>
            <remarks>
            <para>
            The installed default context providers are stack ordered, thus when searching for a default context provider, the system starts
            with the most recently installed provider. The per-thread list of providers is searched before the per-process list of
            providers. After a match is found, the system does not continue to search for other matches.
            </para>
            <para>
            The installed provider handle must remain available for use until CryptUninstallDefaultContext is called, or the thread or
            process exits.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptRetrieveTimeStamp(System.String,Vanara.PInvoke.Crypt32.TimeStampRetrivalFlags,System.UInt32,Vanara.PInvoke.Crypt32.SafeOID,Vanara.PInvoke.Crypt32.CRYPT_TIMESTAMP_PARA@,System.IntPtr,System.UInt32,Vanara.PInvoke.Crypt32.SafeCryptMem@,Vanara.PInvoke.Crypt32.SafePCCERT_CONTEXT@,Vanara.PInvoke.Crypt32.SafeHCERTSTORE@)">
            <summary>
            The <c>CryptRetrieveTimeStamp</c> function encodes a time stamp request and retrieves the time stamp token from a location
            specified by a URL to a Time Stamping Authority (TSA).
            </summary>
            <param name="wszUrl">
            A pointer to a null-terminated wide character string that contains the URL of the TSA to which to send the request.
            </param>
            <param name="dwRetrievalFlags">
            <para>A set of flags that specify how the time stamp is retrieved.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>TIMESTAMP_DONT_HASH_DATA 0x00000001</term>
            <term>Inhibit hash calculation on the array of bytes pointed to by the pbData parameter.</term>
            </item>
            <item>
            <term>TIMESTAMP_VERIFY_CONTEXT_SIGNATURE 0x00000020</term>
            <term>Enforce signature validation on the retrieved time stamp.</term>
            </item>
            <item>
            <term>TIMESTAMP_NO_AUTH_RETRIEVAL 0x00020000</term>
            <term>Set this flag to inhibit automatic authentication handling.</term>
            </item>
            </list>
            </param>
            <param name="dwTimeout">
            A <c>DWORD</c> value that specifies the maximum number of milliseconds to wait for retrieval. If this parameter is set to zero,
            this function does not time out.
            </param>
            <param name="pszHashId">
            A pointer to a null-terminated character string that contains the hash algorithm object identifier (OID).
            </param>
            <param name="pPara">A pointer to a CRYPT_TIMESTAMP_PARA structure that contains additional parameters for the request.</param>
            <param name="pbData">A pointer to an array of bytes to be time stamped.</param>
            <param name="cbData">The size, in bytes, of the array pointed to by the pbData parameter.</param>
            <param name="ppTsContext">
            A pointer to a PCRYPT_TIMESTAMP_CONTEXT structure. When you have finished using the context, you must free it by calling the
            CryptMemFree function.
            </param>
            <param name="ppTsSigner">
            <para>
            A pointer to a PCERT_CONTEXT that receives the certificate of the signer. When you have finished using this structure, you must
            free it by passing this pointer to the CertFreeCertificateContext function.
            </para>
            <para>Set this parameter to <c>NULL</c> if the TSA signer's certificate is not needed.</para>
            </param>
            <param name="phStore">
            <para>
            The handle of a certificate store initialized with certificates from the time stamp response. This store can be used for
            validating the signer certificate of the time stamp response.
            </para>
            <para>
            This parameter can be <c>NULL</c> if the TSA supporting certificates are not needed. When you have finished using this handle,
            release it by passing it to the CertCloseStore function.
            </para>
            </param>
            <returns>
            If the function is unable to retrieve, decode, and validate the time stamp context, it returns <c>FALSE</c>. For extended error
            information, call the GetLastError function.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptUninstallDefaultContext(Vanara.PInvoke.Crypt32.HCRYPTDEFAULTCONTEXT,System.UInt32,System.IntPtr)">
            <summary>
            <para>Handle of the context to be released.</para>
            <para>Reserved for future use.</para>
            <para>Reserved for future use.</para>
            </summary>
            <param name="hDefaultContext">Handle of the context to be released.</param>
            <param name="dwFlags">Reserved for future use.</param>
            <param name="pvReserved">Reserved for future use.</param>
            <returns>
            If the function succeeds, the return value is nonzero (TRUE) .If the function fails, the return value is zero (FALSE). For
            extended error information, call GetLastError.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptVerifyTimeStampSignature(System.IntPtr,System.UInt32,System.IntPtr,System.UInt32,Vanara.PInvoke.Crypt32.HCERTSTORE,Vanara.PInvoke.Crypt32.SafeCryptMem@,Vanara.PInvoke.Crypt32.SafePCCERT_CONTEXT@,Vanara.PInvoke.Crypt32.SafeHCERTSTORE@)">
            <summary>The <c>CryptVerifyTimeStampSignature</c> function validates the time stamp signature on a specified array of bytes.</summary>
            <param name="pbTSContentInfo">A pointer to a buffer that contains time stamp content.</param>
            <param name="cbTSContentInfo">The size, in bytes, of the buffer pointed to by the pbTSContentInfo parameter.</param>
            <param name="pbData">A pointer to an array of bytes on which to validate the time stamp signature.</param>
            <param name="cbData">The size, in bytes, of the array pointed to by the pbData parameter.</param>
            <param name="hAdditionalStore">
            The handle of an additional store to search for supporting Time Stamping Authority (TSA) signing certificates and certificate
            trust lists (CTLs). This parameter can be <c>NULL</c> if no additional store is to be searched.
            </param>
            <param name="ppTsContext">
            A pointer to a PCRYPT_TIMESTAMP_CONTEXT structure. When you have finished using the context, you must free it by calling the
            CryptMemFree function.
            </param>
            <param name="ppTsSigner">
            <para>
            A pointer to a PCERT_CONTEXT that receives the certificate of the signer. When you have finished using this structure, you must
            free it by passing this pointer to the CertFreeCertificateContext function.
            </para>
            <para>Set this parameter to <c>NULL</c> if the TSA signer's certificate is not needed.</para>
            </param>
            <param name="phStore">
            <para>A pointer to a handle that receives the certificate store opened on CMS to search for supporting certificates.</para>
            <para>
            This parameter can be <c>NULL</c> if the TSA supporting certificates are not needed. When you have finished using this handle,
            you must release it by passing it to the CertCloseStore function.
            </para>
            </param>
            <returns>
            If the function succeeds, the function returns <c>TRUE</c>. For extended error information, call the GetLastError function.
            </returns>
            <remarks>
            The caller should validate the <c>pszTSAPolicyId</c> member of the CRYPT_TIMESTAMP_INFO structure when it is returned by the
            CryptRetrieveTimeStamp function. If a TSA policy was specified in the request and the <c>ftTime</c> member contains a valid
            value, the caller should build a certificate context chain with which to populate the ppTsSigner parameter and validate the trust.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.IS_SPECIAL_OID_INFO_ALGID(Vanara.PInvoke.Crypt32.ALG_ID)">
            <summary>Determines whether a cryptography algorithm is only supported by using the CNG functions.</summary>
            <param name="Algid">The cryptography algorithm.</param>
            <returns><see langword="true"/> if algorithm is only supported by using the CNG functions; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CERT_CONTEXT">
            <summary>
            The CERT_CONTEXT structure contains both the encoded and decoded representations of a certificate. A certificate context
            returned by one of the functions defined in Wincrypt.h must be freed by calling the CertFreeCertificateContext function. The
            CertDuplicateCertificateContext function can be called to make a duplicate copy (which also must be freed by calling CertFreeCertificateContext).
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_CONTEXT.dwCertEncodingType">
            <summary>
            Type of encoding used. It is always acceptable to specify both the certificate and message encoding types by combining them
            with a bitwise-OR operation.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_CONTEXT.pbCertEncoded">
            <summary>A pointer to a buffer that contains the encoded certificate.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_CONTEXT.cbCertEncoded">
            <summary>The size, in bytes, of the encoded certificate.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_CONTEXT.pCertInfo">
            <summary>The address of a CERT_INFO structure that contains the certificate information.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_CONTEXT.hCertStore">
            <summary>A handle to the certificate store that contains the certificate context.</summary>
        </member>
        <member name="P:Vanara.PInvoke.Crypt32.CERT_CONTEXT.pUnsafeCertInfo">
            <summary>The address of a CERT_INFO structure that contains the certificate information.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CERT_EXTENSION">
            <summary>
            The <c>CERT_EXTENSION</c> structure contains the extension information for a certificate, Certificate Revocation List (CRL) or
            Certificate Trust List (CTL).
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_EXTENSION.pszObjId">
            <summary>
            Object identifier (OID) that specifies the structure of the extension data contained in the <c>Value</c> member. For
            specifics on extension OIDs and their related structures, see X.509 Certificate Extension Structures.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_EXTENSION.fCritical">
            <summary>
            If <c>TRUE</c>, any limitations specified by the extension in the <c>Value</c> member of this structure are imperative. If
            <c>FALSE</c>, limitations set by this extension can be ignored.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_EXTENSION.Value">
            <summary>
            A CRYPT_OBJID_BLOB structure that contains the encoded extension data. The <c>cbData</c> member of <c>Value</c> indicates
            the length in bytes of the <c>pbData</c> member. The <c>pbData</c> member byte string is the encoded extension.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CERT_EXTENSIONS">
            <summary>The <c>CERT_EXTENSIONS</c> structure contains an array of extensions.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_EXTENSIONS.cExtension">
            <summary>Number of elements in the array <c>rgExtension</c>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_EXTENSIONS.rgExtension">
            <summary>Array of structures, each holding information of type CERT_EXTENSION about a certificate or CRL.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CERT_ID">
            <summary>The <c>CERT_ID</c> structure is used as a flexible means of uniquely identifying a certificate.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_ID.dwIdChoice">
            <summary>
            <para>A <c>DWORD</c> value that indicates which member of the union is being used. This can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_ID_ISSUER_SERIAL_NUMBER</term>
            <term>IssuerSerialNumber</term>
            </item>
            <item>
            <term>CERT_ID_KEY_IDENTIFIER</term>
            <term>KeyId</term>
            </item>
            <item>
            <term>CERT_ID_SHA1_HASH</term>
            <term>HashId</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_ID.IssuerSerialNumber">
            <summary>A CERT_ISSUER_SERIAL_NUMBER structure that uniquely identifies a certificate.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_ID.KeyId">
            <summary>A CRYPT_HASH_BLOB structure that contains a certificate key identifier.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_ID.HashId">
            <summary>A CRYPT_HASH_BLOB that contains a SHA1 hash of the certificate to be used as a unique identifier of the certificate.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CERT_INFO">
            <summary>The CERT_INFO structure contains the information of a certificate.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_INFO.dwVersion">
            <summary>The version number of a certificate.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_INFO.SerialNumber">
            <summary>
            A BLOB that contains the serial number of a certificate. The least significant byte is the zero byte of the pbData member of
            SerialNumber. The index for the last byte of pbData, is one less than the value of the cbData member of SerialNumber. The
            most significant byte is the last byte of pbData. Leading 0x00 or 0xFF bytes are removed. For more information, see CertCompareIntegerBlob.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_INFO.SignatureAlgorithm">
            <summary>
            A CRYPT_ALGORITHM_IDENTIFIER structure that contains the signature algorithm type and encoded additional encryption parameters.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_INFO.Issuer">
            <summary>The name, in encoded form, of the issuer of the certificate.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_INFO.NotBefore">
            <summary>
            Date and time before which the certificate is not valid. For dates between 1950 and 2049 inclusive, the date and time is
            encoded Coordinated Universal Time (Greenwich Mean Time) format in the form YYMMDDHHMMSS. This member uses a two-digit year
            and is precise to seconds. For dates before 1950 or after 2049, encoded generalized time is used. Encoded generalized time
            is in the form YYYYMMDDHHMMSSMMM, using a four-digit year, and is precise to milliseconds. Even though generalized time
            supports millisecond resolution, the NotBefore time is only precise to seconds.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_INFO.NotAfter">
            <summary>
            Date and time after which the certificate is not valid. For dates between 1950 and 2049 inclusive, the date and time is
            encoded Coordinated Universal Time format in the form YYMMDDHHMMSS. This member uses a two-digit year and is precise to
            seconds. For dates before 1950 or after 2049, encoded generalized time is used. Encoded generalized time is in the form
            YYYYMMDDHHMMSSMMM, using a four-digit year, and is precise to milliseconds. Even though generalized time supports
            millisecond resolution, the NotAfter time is only precise to seconds.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_INFO.Subject">
            <summary>The encoded name of the subject of the certificate.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_INFO.SubjectPublicKeyInfo">
            <summary>
            A CERT_PUBLIC_KEY_INFO structure that contains the encoded public key and its algorithm. The PublicKey member of the
            CERT_PUBLIC_KEY_INFO structure contains the encoded public key as a CRYPT_BIT_BLOB, and the Algorithm member contains the
            encoded algorithm as a CRYPT_ALGORITHM_IDENTIFIER.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_INFO.IssuerUniqueId">
            <summary>A BLOB that contains a unique identifier of the issuer.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_INFO.SubjectUniqueId">
            <summary>A BLOB that contains a unique identifier of the subject.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_INFO.cExtension">
            <summary>The number of elements in the rgExtension array.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_INFO.rgExtension">
            <summary>An array of pointers to CERT_EXTENSION structures, each of which contains extension information about the certificate.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CERT_ISSUER_SERIAL_NUMBER">
            <summary>
            The <c>CERT_ISSUER_SERIAL_NUMBER</c> structure acts as a unique identifier of a certificate containing the issuer and issuer's
            serial number for a certificate.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_ISSUER_SERIAL_NUMBER.Issuer">
            <summary>A BLOB structure that contains the name of the issuer.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_ISSUER_SERIAL_NUMBER.SerialNumber">
            <summary>
            A CRYPT_INTEGER_BLOB structure that contains the serial number of the certificate. The combination of the issuer name and
            the serial number is a unique identifier of a certificate.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CERT_KEY_CONTEXT">
            <summary>The <c>CERT_KEY_CONTEXT</c> structure contains data associated with a CERT_KEY_CONTEXT_PROP_ID property.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_KEY_CONTEXT.cbSize">
            <summary>The size, in bytes, of this structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_KEY_CONTEXT.hCryptProv_or_hNCryptKey">
            <summary>
            A cryptographic service provider (CSP) handle. This member is used when the <c>dwKeySpec</c> member contains
            <c>AT_KEYEXCHANGE</c> or <c>AT_SIGNATURE</c>.
            <para><strong>OR</strong></para>
            <para>A CNG CSP handle. This member is used when the <c>dwKeySpec</c> member contains <c>CERT_NCRYPT_KEY_SPEC</c>.</para>
            <para><c>Windows Server 2003 and Windows XP:</c> This member is not available.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_KEY_CONTEXT.dwKeySpec">
            <summary>
            <para>The specification of the private key to retrieve.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CERT_PUBLIC_KEY_INFO">
            <summary>The CERT_PUBLIC_KEY_INFO structure contains a public key and its algorithm.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_PUBLIC_KEY_INFO.Algorithm">
            <summary>CRYPT_ALGORITHM_IDENTIFIER structure that contains the public key algorithm type and associated additional parameters.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_PUBLIC_KEY_INFO.PublicKey">
            <summary>BLOB containing an encoded public key.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CERT_RDN">
            <summary>
            The <c>CERT_RDN</c> structure contains a relative distinguished name (RDN) consisting of an array of CERT_RDN_ATTR structures.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_RDN.cRDNAttr">
            <summary>Number of elements in the <c>rgRDNAttr</c> array.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_RDN.rgRDNAttr">
            <summary>Array of CERT_RDN_ATTR structures.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CERT_RDN_ATTR">
            <summary>
            The <c>CERT_RDN_ATTR</c> structure contains a single attribute of a relative distinguished name (RDN). A whole RDN is expressed
            in a CERT_RDN structure that contains an array of <c>CERT_RDN_ATTR</c> structures.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_RDN_ATTR.pszObjId">
            <summary>
            <para>
            Object identifier (OID) for the type of the attribute defined in this structure. This member can be one of the <see cref="T:Vanara.PInvoke.Crypt32.AttrOID"/> values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>szOID_AUTHORITY_REVOCATION_LIST</term>
            <term>Security attribute.</term>
            </item>
            <item>
            <term>szOID_BUSINESS_CATEGORY</term>
            <term>Case-insensitive string. Explanatory attribute.</term>
            </item>
            <item>
            <term>szOID_CA_CERTIFICATE</term>
            <term>Security attribute.</term>
            </item>
            <item>
            <term>szOID_CERTIFICATE_REVOCATION_LIST</term>
            <term>Security attribute.</term>
            </item>
            <item>
            <term>szOID_COMMON_NAME</term>
            <term>Case-insensitive string. Labeling attribute.</term>
            </item>
            <item>
            <term>szOID_COUNTRY_NAME</term>
            <term>Two-character printable string. Geographic attribute.</term>
            </item>
            <item>
            <term>szOID_CROSS_CERTIFICATE_PAIR</term>
            <term>Security attribute.</term>
            </item>
            <item>
            <term>szOID_DESCRIPTION</term>
            <term>Case-insensitive string. Explanatory attribute.</term>
            </item>
            <item>
            <term>szOID_DESTINATION_INDICATOR</term>
            <term>Printable string. Telecommunications addressing attribute.</term>
            </item>
            <item>
            <term>szOID_DEVICE_SERIAL_NUMBER</term>
            <term>Printable string. Labeling attribute.</term>
            </item>
            <item>
            <term>szOID_DOMAIN_COMPONENT</term>
            <term>IA5 string. DNS name component such as "com."</term>
            </item>
            <item>
            <term>szOID_FACSIMILE_TELEPHONE_NUMBER</term>
            <term>Telecommunications addressing attribute.</term>
            </item>
            <item>
            <term>szOID_GIVEN_NAME</term>
            <term>Case-insensitive string. Name attribute.</term>
            </item>
            <item>
            <term>szOID_INITIALS</term>
            <term>Case-insensitive string. Name attribute.</term>
            </item>
            <item>
            <term>szOID_INTERNATIONAL_ISDN_NUMBER</term>
            <term>Numeric string. Telecommunications addressing attribute.</term>
            </item>
            <item>
            <term>szOID_LOCALITY_NAME</term>
            <term>Case-insensitive string. Geographic attribute.</term>
            </item>
            <item>
            <term>szOID_MEMBER</term>
            <term>Relational application attribute.</term>
            </item>
            <item>
            <term>szOID_ORGANIZATION_NAME</term>
            <term>Case-insensitive string. Organizational attribute.</term>
            </item>
            <item>
            <term>szOID_ORGANIZATIONAL_UNIT_NAME</term>
            <term>Case-insensitive string. Organizational attribute.</term>
            </item>
            <item>
            <term>szOID_OWNER</term>
            <term>Relational application attribute.</term>
            </item>
            <item>
            <term>szOID_PHYSICAL_DELIVERY_OFFICE_NAME</term>
            <term>Case-insensitive string. Postal addressing attribute.</term>
            </item>
            <item>
            <term>szOID_PKCS_12_FRIENDLY_NAME_ATTR</term>
            <term>PKCS #12 attribute.</term>
            </item>
            <item>
            <term>szOID_PKCS_12_LOCAL_KEY_ID</term>
            <term>PKCS #12 attribute.</term>
            </item>
            <item>
            <term>szOID_POST_OFFICE_BOX</term>
            <term>Case-insensitive string. Postal addressing attribute.</term>
            </item>
            <item>
            <term>szOID_POSTAL_ADDRESS</term>
            <term>Printable string. Postal addressing attribute.</term>
            </item>
            <item>
            <term>szOID_POSTAL_CODE</term>
            <term>Case-insensitive string. Postal addressing attribute.</term>
            </item>
            <item>
            <term>szOID_PREFERRED_DELIVERY_METHOD</term>
            <term>Preference attribute.</term>
            </item>
            <item>
            <term>szOID_PRESENTATION_ADDRESS</term>
            <term>OSI application attribute.</term>
            </item>
            <item>
            <term>szOID_REGISTERED_ADDRESS</term>
            <term>Telecommunications addressing attribute.</term>
            </item>
            <item>
            <term>szOID_ROLE_OCCUPANT</term>
            <term>Relational application attribute.</term>
            </item>
            <item>
            <term>szOID_RSA_emailAddr</term>
            <term>IA5 string. Email attribute.</term>
            </item>
            <item>
            <term>szOID_SEARCH_GUIDE</term>
            <term>Explanatory attribute.</term>
            </item>
            <item>
            <term>szOID_SEE_ALSO</term>
            <term>Relational application attribute.</term>
            </item>
            <item>
            <term>szOID_STATE_OR_PROVINCE_NAME</term>
            <term>Case-insensitive string. Geographic attribute.</term>
            </item>
            <item>
            <term>szOID_STREET_ADDRESS</term>
            <term>Case-insensitive string. Geographic attribute.</term>
            </item>
            <item>
            <term>szOID_SUPPORTED_APPLICATION_CONTEXT</term>
            <term>OSI application attribute.</term>
            </item>
            <item>
            <term>szOID_SUR_NAME</term>
            <term>Case-insensitive string. Labeling attribute.</term>
            </item>
            <item>
            <term>szOID_TELEPHONE_NUMBER</term>
            <term>Telecommunications addressing attribute.</term>
            </item>
            <item>
            <term>szOID_TELETEXT_TERMINAL_IDENTIFIER</term>
            <term>Telecommunications addressing attribute.</term>
            </item>
            <item>
            <term>szOID_TELEX_NUMBER</term>
            <term>Telecommunications addressing attribute.</term>
            </item>
            <item>
            <term>szOID_TITLE</term>
            <term>Case-insensitive string. Organizational attribute.</term>
            </item>
            <item>
            <term>szOID_USER_CERTIFICATE</term>
            <term>Security attribute.</term>
            </item>
            <item>
            <term>szOID_USER_PASSWORD</term>
            <term>Security attribute.</term>
            </item>
            <item>
            <term>szOID_X21_ADDRESS</term>
            <term>Numeric string. Telecommunications addressing attribute.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_RDN_ATTR.dwValueType">
            <summary>
            <para>Indicates the interpretation of the <c>Value</c> member.</para>
            <para>This member can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_RDN_ANY_TYPE</term>
            <term>The pszObjId member determines the assumed type and length.</term>
            </item>
            <item>
            <term>CERT_RDN_BMP_STRING</term>
            <term>An array of Unicode characters (16-bit).</term>
            </item>
            <item>
            <term>CERT_RDN_ENCODED_BLOB</term>
            <term>An encoded data BLOB.</term>
            </item>
            <item>
            <term>CERT_RDN_GENERAL_STRING</term>
            <term>Currently not used.</term>
            </item>
            <item>
            <term>CERT_RDN_GRAPHIC_STRING</term>
            <term>Currently not used.</term>
            </item>
            <item>
            <term>CERT_RDN_IA5_STRING</term>
            <term>An arbitrary string of IA5 (ASCII) characters.</term>
            </item>
            <item>
            <term>CERT_RDN_INT4_STRING</term>
            <term>An array of INT4 elements (32-bit).</term>
            </item>
            <item>
            <term>CERT_RDN_ISO646_STRING</term>
            <term>A 128-character set (8-bit).</term>
            </item>
            <item>
            <term>CERT_RDN_NUMERIC_STRING</term>
            <term>Only the characters 0 through 9 and the space character (8-bit).</term>
            </item>
            <item>
            <term>CERT_RDN_OCTET_STRING</term>
            <term>An arbitrary string of octets (8-bit).</term>
            </item>
            <item>
            <term>CERT_RDN_PRINTABLE_STRING</term>
            <term>An arbitrary string of printable characters (8-bit).</term>
            </item>
            <item>
            <term>CERT_RDN_T61_STRING</term>
            <term>An arbitrary string of T.61 characters (8-bit).</term>
            </item>
            <item>
            <term>CERT_RDN_TELETEX_STRING</term>
            <term>An arbitrary string of T.61 characters (8-bit)</term>
            </item>
            <item>
            <term>CERT_RDN_UNICODE_STRING</term>
            <term>An array of Unicode characters (16-bit).</term>
            </item>
            <item>
            <term>CERT_RDN_UNIVERSAL_STRING</term>
            <term>An array of INT4 elements (32-bit).</term>
            </item>
            <item>
            <term>CERT_RDN_UTF8_STRING</term>
            <term>An array of 16 bit Unicode characters UTF8 encoded on the wire as a sequence of one, two, or three, eight-bit characters.</term>
            </item>
            <item>
            <term>CERT_RDN_VIDEOTEX_STRING</term>
            <term>An arbitrary string of videotext characters.</term>
            </item>
            <item>
            <term>CERT_RDN_VISIBLE_STRING</term>
            <term>A 95-character set (8-bit).</term>
            </item>
            </list>
            <para>The following flags can be combined by using a bitwise- <c>OR</c> operation into the <c>dwValueType</c> member.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_RDN_DISABLE_CHECK_TYPE_FLAG</term>
            <term>For encoding. When set, the characters are not checked to determine whether they are valid for the value type.</term>
            </item>
            <item>
            <term>CERT_RDN_DISABLE_IE4_UTF8_FLAG</term>
            <term>
            For decoding. By default, CERT_RDN_T61_STRING encoded values are initially decoded as UTF8. If the UTF8 decoding fails, the
            value is decoded as 8-bit characters. If this flag is set, it skips the initial attempt to decode as UTF8 and decodes the
            value as 8-bit characters.
            </term>
            </item>
            <item>
            <term>CERT_RDN_ENABLE_T61_UNICODE_FLAG</term>
            <term>
            For encoding. When set, if all the Unicode characters are &lt;= 0xFF, the CERT_RDN_T61_STRING value is selected instead of
            the CERT_RDN_UNICODE_STRING value.
            </term>
            </item>
            <item>
            <term>CERT_RDN_ENABLE_UTF8_UNICODE_FLAG</term>
            <term>
            For encoding. When set, strings are encoded with the CERT_RDN_UTF8_STRING value instead of the CERT_RDN_UNICODE_STRING value.
            </term>
            </item>
            <item>
            <term>CERT_RDN_FORCE_UTF8_UNICODE_FLAG</term>
            <term>
            For encoding. When set, strings are encoded with the CERT_RDN_UTF8_STRING value instead of CERT_RDN_PRINTABLE_STRING value
            for DirectoryString types. In addition, CERT_RDN_ENABLE_UTF8_UNICODE_FLAG is enabled. Windows Vista, Windows Server 2003 and
            Windows XP: This flag is not supported.
            </term>
            </item>
            <item>
            <term>CERT_RDN_ENABLE_PUNYCODE_FLAG</term>
            <term>
            For encoding. If the string contains an email RDN, and the email address is Punycode encoded, then the resultant email
            address is encoded as an IA5String. The Punycode encoding of the host name is performed on a label-by-label basis. For
            decoding. If the name contains an email RDN, and the local part or host name portion of the email address contains a
            Punycode encoded IA5String, the RDN string value is converted to its Unicode equivalent. Windows Server 2008, Windows Vista,
            Windows Server 2003 and Windows XP: This flag is not supported.
            </term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_RDN_ATTR.Value">
            <summary>
            <para>
            A CERT_RDN_VALUE_BLOB that contains the attribute value. The <c>cbData</c> member of <c>Value</c> is the length, in bytes,
            of the <c>pbData</c> member. It is not the number of elements in the <c>pbData</c> string.
            </para>
            <para>
            For example, a <c>DWORD</c> is 32 bits or 4 bytes long. If <c>pbData</c> is a <c>DWORD</c> array, <c>cbData</c> would be
            four times the number of <c>DWORD</c> elements in the array. A <c>SHORT</c> is 16 bits or 2 bytes long. If <c>pbData</c> is
            an array of <c>SHORT</c> elements, <c>cbData</c> must be two times the length of the array.
            </para>
            <para>
            The <c>pbData</c> member of <c>Value</c> can be a null-terminated array of 8-bit or 16-bit characters or a fixed-length
            array of elements. If <c>dwValueType</c> is set to CERT_RDN_ENCODED_BLOB, <c>pbData</c> is encoded.
            </para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CERT_STRONG_SIGN_PARA">
            <summary>
            Contains parameters used to check for strong signatures on certificates, certificate revocation lists (CRLs), online certificate
            status protocol (OCSP) responses, and PKCS #7 messages.
            </summary>
            <remarks>
            <para>The parameters needed to check for a strong signature include the following:</para>
            <list type="bullet">
            <item>
            <term>Name of the public (asymmetric) algorithm</term>
            </item>
            <item>
            <term>Size, in bits, of the public key</term>
            </item>
            <item>
            <term>Name of the signature algorithm</term>
            </item>
            <item>
            <term>Name of the hashing algorithm</term>
            </item>
            </list>
            <para>
            The value you specify for the <c>dwInfoChoice</c> member of this structure chooses whether the parameters are transmitted as
            serialized strings or are predefined by using an object identifier.
            </para>
            <para>The <c>CERT_STRONG_SIGN_PARA</c> structure is directly referenced by the following functions:</para>
            <list type="bullet">
            <item>
            <term>CertIsStrongHashToSign</term>
            </item>
            <item>
            <term>CryptMsgControl</term>
            </item>
            <item>
            <term>CryptMsgVerifyCountersignatureEncodedEx</term>
            </item>
            </list>
            <para>
            The <c>CERT_STRONG_SIGN_PARA</c> structure is also directly referenced by the CRYPT_VERIFY_MESSAGE_PARA structure and is
            therefore available for use by the following functions:
            </para>
            <list type="bullet">
            <item>
            <term>CryptDecodeMessage</term>
            </item>
            <item>
            <term>CryptDecryptAndVerifyMessageSignature</term>
            </item>
            <item>
            <term>CryptVerifyDetachedMessageSignature</term>
            </item>
            <item>
            <term>CryptVerifyMessageSignature</term>
            </item>
            </list>
            <para>
            Finally, the <c>CERT_STRONG_SIGN_PARA</c> structure is directly referenced by the CERT_CHAIN_PARA structure and is therefore
            available for use by the following functions:
            </para>
            <list type="bullet">
            <item>
            <term>CertGetCertificateChain</term>
            </item>
            <item>
            <term>CertSelectCertificateChains</term>
            </item>
            </list>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_STRONG_SIGN_PARA.cbSize">
            <summary>Size, in bytes, of this structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_STRONG_SIGN_PARA.dwInfoChoice">
            <summary>
            <para>Indicates which nested union member points to the strong signature information. This can be one of the following values:</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>CERT_STRONG_SIGN_SERIALIZED_INFO_CHOICE</term>
            <term>Specifies the pSerializedInfo member.</term>
            </item>
            <item>
            <term>CERT_STRONG_SIGN_OID_INFO_CHOICE</term>
            <term>Specifies the pszOID member.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_STRONG_SIGN_PARA.pvInfo">
            <summary>Reserved.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_STRONG_SIGN_PARA.pSerializedInfo">
            <summary>Pointer to a CERT_STRONG_SIGN_SERIALIZED_INFO structure that specifies the parameters.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_STRONG_SIGN_PARA.pszOID">
            <summary>
            <para>
            Pointer to a string that contains an object identifier (OID) that represents predefined parameters that can be used for
            strong signature checking. This can be one of the following values:
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>szOID_CERT_STRONG_SIGN_OS_1 "1.3.6.1.4.1.311.72.1.1"</term>
            <term>
            The SHA2 hash algorithm is supported. MD2, MD4, MD5, and SSHA1 are not supported. The signing and public key algorithms can
            be RSA or ECDSA. The DSA algorithm is not supported. The key size for the RSA algorithm must equal or be greater than 2047
            bits. The key size for the ECDSA algorithm must equal or be greater than 256 bits. Strong signing of CRLs and OCSP responses
            are enabled.
            </term>
            </item>
            <item>
            <term>szOID_CERT_STRONG_KEY_OS_1 "1.3.6.1.4.1.311.72.2.1"</term>
            <term>
            SHA1 and SHA2 hashes are supported. MD2, MD4, and MD5 are not. The signing and public key algorithms can be RSA or ECDSA.
            The DSA algorithm is not supported. The key size for the RSA algorithm must equal or be greater than 2047 bits. The key size
            for the ECDSA algorithm must equal or be greater than 256 bits. Strong signing of CRLs and OCSP responses are enabled.
            </term>
            </item>
            </list>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CERT_TRUST_STATUS">
            <summary>
            The <c>CERT_TRUST_STATUS</c> structure contains trust information about a certificate in a certificate chain, summary trust
            information about a simple chain of certificates, or summary information about an array of simple chains.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_TRUST_STATUS.dwErrorStatus">
            <summary>
            <para>The following error status codes are defined for certificates and chains.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_TRUST_NO_ERROR 0x00000000</term>
            <term>No error found for this certificate or chain.</term>
            </item>
            <item>
            <term>CERT_TRUST_IS_NOT_TIME_VALID 0x00000001</term>
            <term>This certificate or one of the certificates in the certificate chain is not time valid.</term>
            </item>
            <item>
            <term>CERT_TRUST_IS_REVOKED 0x00000004</term>
            <term>Trust for this certificate or one of the certificates in the certificate chain has been revoked.</term>
            </item>
            <item>
            <term>CERT_TRUST_IS_NOT_SIGNATURE_VALID 0x00000008</term>
            <term>The certificate or one of the certificates in the certificate chain does not have a valid signature.</term>
            </item>
            <item>
            <term>CERT_TRUST_IS_NOT_VALID_FOR_USAGE 0x00000010</term>
            <term>The certificate or certificate chain is not valid for its proposed usage.</term>
            </item>
            <item>
            <term>CERT_TRUST_IS_UNTRUSTED_ROOT 0x00000020</term>
            <term>The certificate or certificate chain is based on an untrusted root.</term>
            </item>
            <item>
            <term>CERT_TRUST_REVOCATION_STATUS_UNKNOWN 0x00000040</term>
            <term>The revocation status of the certificate or one of the certificates in the certificate chain is unknown.</term>
            </item>
            <item>
            <term>CERT_TRUST_IS_CYCLIC 0x00000080</term>
            <term>One of the certificates in the chain was issued by a certification authority that the original certificate had certified.</term>
            </item>
            <item>
            <term>CERT_TRUST_INVALID_EXTENSION 0x00000100</term>
            <term>One of the certificates has an extension that is not valid.</term>
            </item>
            <item>
            <term>CERT_TRUST_INVALID_POLICY_CONSTRAINTS 0x00000200</term>
            <term>
            The certificate or one of the certificates in the certificate chain has a policy constraints extension, and one of the
            issued certificates has a disallowed policy mapping extension or does not have a required issuance policies extension.
            </term>
            </item>
            <item>
            <term>CERT_TRUST_INVALID_BASIC_CONSTRAINTS 0x00000400</term>
            <term>
            The certificate or one of the certificates in the certificate chain has a basic constraints extension, and either the
            certificate cannot be used to issue other certificates, or the chain path length has been exceeded.
            </term>
            </item>
            <item>
            <term>CERT_TRUST_INVALID_NAME_CONSTRAINTS 0x00000800</term>
            <term>The certificate or one of the certificates in the certificate chain has a name constraints extension that is not valid.</term>
            </item>
            <item>
            <term>CERT_TRUST_HAS_NOT_SUPPORTED_NAME_CONSTRAINT 0x00001000</term>
            <term>
            The certificate or one of the certificates in the certificate chain has a name constraints extension that contains
            unsupported fields. The minimum and maximum fields are not supported. Thus minimum must always be zero and maximum must
            always be absent. Only UPN is supported for an Other Name. The following alternative name choices are not supported:
            </term>
            </item>
            <item>
            <term>CERT_TRUST_HAS_NOT_DEFINED_NAME_CONSTRAINT 0x00002000</term>
            <term>
            The certificate or one of the certificates in the certificate chain has a name constraints extension and a name constraint
            is missing for one of the name choices in the end certificate.
            </term>
            </item>
            <item>
            <term>CERT_TRUST_HAS_NOT_PERMITTED_NAME_CONSTRAINT 0x00004000</term>
            <term>
            The certificate or one of the certificates in the certificate chain has a name constraints extension, and there is not a
            permitted name constraint for one of the name choices in the end certificate.
            </term>
            </item>
            <item>
            <term>CERT_TRUST_HAS_EXCLUDED_NAME_CONSTRAINT 0x00008000</term>
            <term>
            The certificate or one of the certificates in the certificate chain has a name constraints extension, and one of the name
            choices in the end certificate is explicitly excluded.
            </term>
            </item>
            <item>
            <term>CERT_TRUST_IS_OFFLINE_REVOCATION 0x01000000</term>
            <term>
            The revocation status of the certificate or one of the certificates in the certificate chain is either offline or stale.
            </term>
            </item>
            <item>
            <term>CERT_TRUST_NO_ISSUANCE_CHAIN_POLICY 0x02000000</term>
            <term>
            The end certificate does not have any resultant issuance policies, and one of the issuing certification authority
            certificates has a policy constraints extension requiring it.
            </term>
            </item>
            <item>
            <term>CERT_TRUST_IS_EXPLICIT_DISTRUST 0x04000000</term>
            <term>The certificate is explicitly distrusted. Windows Vista and Windows Server 2008: Support for this flag begins.</term>
            </item>
            <item>
            <term>CERT_TRUST_HAS_NOT_SUPPORTED_CRITICAL_EXT 0x08000000</term>
            <term>
            The certificate does not support a critical extension. Windows Vista and Windows Server 2008: Support for this flag begins.
            </term>
            </item>
            <item>
            <term>CERT_TRUST_HAS_WEAK_SIGNATURE 0x00100000</term>
            <term>
            The certificate has not been strong signed. Typically this indicates that the MD2 or MD5 hashing algorithms were used to
            create a hash of the certificate. Windows 8 and Windows Server 2012: Support for this flag begins.
            </term>
            </item>
            </list>
            <para>The following codes are defined for chains only.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_TRUST_IS_PARTIAL_CHAIN 0x00010000</term>
            <term>The certificate chain is not complete.</term>
            </item>
            <item>
            <term>CERT_TRUST_CTL_IS_NOT_TIME_VALID 0x00020000</term>
            <term>A certificate trust list (CTL) used to create this chain was not time valid.</term>
            </item>
            <item>
            <term>CERT_TRUST_CTL_IS_NOT_SIGNATURE_VALID 0x00040000</term>
            <term>A CTL used to create this chain did not have a valid signature.</term>
            </item>
            <item>
            <term>CERT_TRUST_CTL_IS_NOT_VALID_FOR_USAGE 0x00080000</term>
            <term>A CTL used to create this chain is not valid for this usage.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_TRUST_STATUS.dwInfoStatus">
            <summary>
            <para>The following information status codes are defined.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_TRUST_HAS_EXACT_MATCH_ISSUER 0x00000001</term>
            <term>An exact match issuer certificate has been found for this certificate. This status code applies to certificates only.</term>
            </item>
            <item>
            <term>CERT_TRUST_HAS_KEY_MATCH_ISSUER 0x00000002</term>
            <term>A key match issuer certificate has been found for this certificate. This status code applies to certificates only.</term>
            </item>
            <item>
            <term>CERT_TRUST_HAS_NAME_MATCH_ISSUER 0x00000004</term>
            <term>A name match issuer certificate has been found for this certificate. This status code applies to certificates only.</term>
            </item>
            <item>
            <term>CERT_TRUST_IS_SELF_SIGNED 0x00000008</term>
            <term>This certificate is self-signed. This status code applies to certificates only.</term>
            </item>
            <item>
            <term>CERT_TRUST_HAS_PREFERRED_ISSUER 0x00000100</term>
            <term>The certificate or chain has a preferred issuer. This status code applies to certificates and chains.</term>
            </item>
            <item>
            <term>CERT_TRUST_HAS_ISSUANCE_CHAIN_POLICY 0x00000400</term>
            <term>An issuance chain policy exists. This status code applies to certificates and chains.</term>
            </item>
            <item>
            <term>CERT_TRUST_HAS_VALID_NAME_CONSTRAINTS 0x00000400</term>
            <term>A valid name constraints for all namespaces, including UPN. This status code applies to certificates and chains.</term>
            </item>
            <item>
            <term>CERT_TRUST_IS_PEER_TRUSTED 0x00000800</term>
            <term>
            This certificate is peer trusted. This status code applies to certificates only. Windows Vista and Windows Server 2008:
            Support for this flag begins.
            </term>
            </item>
            <item>
            <term>CERT_TRUST_HAS_CRL_VALIDITY_EXTENDED 0x00001000</term>
            <term>
            This certificate's certificate revocation list (CRL) validity has been extended. This status code applies to certificates
            only. Windows Vista and Windows Server 2008: Support for this flag begins.
            </term>
            </item>
            <item>
            <term>CERT_TRUST_IS_FROM_EXCLUSIVE_TRUST_STORE 0x00002000</term>
            <term>
            The certificate was found in either a store pointed to by the hExclusiveRoot or hExclusiveTrustedPeople member of the
            CERT_CHAIN_ENGINE_CONFIG structure. Windows 7 and Windows Server 2008 R2: Support for this flag begins.
            </term>
            </item>
            <item>
            <term>CERT_TRUST_IS_COMPLEX_CHAIN 0x00010000</term>
            <term>The certificate chain created is a complex chain. This status code applies to chains only.</term>
            </item>
            <item>
            <term>CERT_TRUST_IS_CA_TRUSTED 0x00004000</term>
            <term>
            A non-self-signed intermediate CA certificate was found in the store pointed to by the hExclusiveRoot member of the
            CERT_CHAIN_ENGINE_CONFIG structure. The CA certificate is treated as a trust anchor for the certificate chain. This flag
            will only be set if the CERT_CHAIN_EXCLUSIVE_ENABLE_CA_FLAG value is set in the dwExclusiveFlags member of the
            CERT_CHAIN_ENGINE_CONFIG structure. If this flag is set, the CERT_TRUST_IS_SELF_SIGNED and the
            CERT_TRUST_IS_PARTIAL_CHAINdwErrorStatus flags will not be set. Windows 8 and Windows Server 2012: Support for this flag begins.
            </term>
            </item>
            </list>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CRL_CONTEXT">
            <summary>
            The <c>CRL_CONTEXT</c> structure contains both the encoded and decoded representations of a certificate revocation list (CRL).
            CRL contexts returned by any CryptoAPI function must be freed by calling the CertFreeCRLContext function.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRL_CONTEXT.dwCertEncodingType">
            <summary>
            <para>
            Type of encoding used. It is always acceptable to specify both the certificate and message encoding types by combining them
            with a bitwise- <c>OR</c> operation as shown in the following example:
            </para>
            <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING</para>
            <para>Currently defined encoding types are:</para>
            <list type="bullet">
            <item>
            <term>X509_ASN_ENCODING</term>
            </item>
            <item>
            <term>PKCS_7_ASN_ENCODING</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRL_CONTEXT.pbCrlEncoded">
            <summary>A pointer to the encoded CRL information.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRL_CONTEXT.cbCrlEncoded">
            <summary>The size, in bytes, of the encoded CRL information.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRL_CONTEXT.pCrlInfo">
            <summary>A pointer to CRL_INFO structure containing the CRL information.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRL_CONTEXT.hCertStore">
            <summary>A handle to the certificate store.</summary>
        </member>
        <member name="P:Vanara.PInvoke.Crypt32.CRL_CONTEXT.pUnsafeCrlInfo">
            <summary>A pointer to CRL_INFO structure containing the CRL information.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CRL_ENTRY">
            <summary>
            The <c>CRL_ENTRY</c> structure contains information about a single revoked certificate. It is a member of a CRL_INFO structure.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRL_ENTRY.SerialNumber">
            <summary>
            <para>A BLOB that contains the serial number of a revoked certificate.</para>
            <para>Leading 0x00 or 0xFF bytes are removed. For more information, see CertCompareIntegerBlob.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRL_ENTRY.RevocationDate">
            <summary>
            Date that the certificate was revoked. Time is UTC-time encoded as an eight-byte date/time precise to seconds with a two
            digit year (that is, YYMMDDHHMMSS plus 2 bytes). The date is interpreted as a date between the years 1968 and 2067.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRL_ENTRY.cExtension">
            <summary>Number of elements in the <c>rgExtension</c> member array of extensions.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRL_ENTRY.rgExtension">
            <summary>Array of pointers to CERT_EXTENSION structures, each providing information about the revoked certificate.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CRL_INFO">
            <summary>The <c>CRL_INFO</c> structure contains the information of a certificate revocation list (CRL).</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRL_INFO.dwVersion">
            <summary>
            <para>Version number of the CRL. Currently defined version numbers are shown in the following table.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRL_V1</term>
            <term>version 1</term>
            </item>
            <item>
            <term>CRL_V2</term>
            <term>version 2</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRL_INFO.SignatureAlgorithm">
            <summary>
            CRYPT_ALGORITHM_IDENTIFIER structure that contains the object identifier (OID) of a signature algorithm and any associated
            additional parameters.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRL_INFO.Issuer">
            <summary>A BLOB structure that contains an encoded certificate issuer's name.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRL_INFO.ThisUpdate">
            <summary>
            Indication of the date and time of the CRL's published. If the time is after 1950 and before 2050, it is UTC-time encoded as
            an 8-byte date/time precise to seconds with a 2-digit year (that is, YYMMDDHHMMSS plus 2 bytes). Otherwise, it is
            generalized-time encoded as an 8-byte year precise to milliseconds with a 4-byte year.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRL_INFO.NextUpdate">
            <summary>
            Indication of the date and time for the CRL's next available scheduled update. If the time is after 1950 and before 2050, it
            is UTC-time encoded as an 8-byte date/time precise to seconds with a 2-digit year (that is, YYMMDDHHMMSS plus 2 bytes).
            Otherwise, it is generalized-time encoded as an 8-byte date time precise to milliseconds with a 4-byte year.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRL_INFO.cCRLEntry">
            <summary>Number of elements in the <c>rgCRLEntry</c> array.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRL_INFO.rgCRLEntry">
            <summary>Array of pointers to CRL_ENTRY structures. Each of these structures represents a revoked certificate.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRL_INFO.cExtension">
            <summary>Number of elements in the <c>rgExtension</c> array.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRL_INFO.rgExtension">
            <summary>Array of pointers to CERT_EXTENSION structures, each holding information about the CRL.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CRYPT_ALGORITHM_IDENTIFIER">
            <summary>
            The CRYPT_ALGORITHM_IDENTIFIER structure specifies an algorithm used to encrypt a private key. The structure includes the object
            identifier (OID) of the algorithm and any needed parameters for that algorithm. The parameters contained in its CRYPT_OBJID_BLOB
            are encoded.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_ALGORITHM_IDENTIFIER.pszObjId">
            <summary>An OID of an algorithm.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_ALGORITHM_IDENTIFIER.Parameters">
            <summary>
            A BLOB that provides encoded algorithm-specific parameters. In many cases, there are no parameters. This is indicated by
            setting the cbData member of the Parameters BLOB to zero.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CRYPT_ATTRIBUTE">
            <summary>The <c>CRYPT_ATTRIBUTE</c> structure specifies an attribute that has one or more values.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_ATTRIBUTE.pszObjId">
            <summary>An object identifier (OID) that specifies the type of data contained in the <c>rgValue</c> array.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_ATTRIBUTE.cValue">
            <summary>A <c>DWORD</c> value that indicates the number of elements in the <c>rgValue</c> array.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_ATTRIBUTE.rgValue">
            <summary>
            Pointer to an array of CRYPT_INTEGER_BLOB structures. The <c>cbData</c> member of the <c>CRYPT_INTEGER_BLOB</c> structure
            indicates the length of the <c>pbData</c> member. The <c>pbData</c> member contains the attribute information.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CRYPT_ATTRIBUTE_TYPE_VALUE">
            <summary>
            The <c>CRYPT_ATTRIBUTE_TYPE_VALUE</c> structure contains a single attribute value. The <c>Value</c> member's CRYPT_OBJID_BLOB is encoded.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_ATTRIBUTE_TYPE_VALUE.pszObjId">
            <summary>Object identifier (OID) that specifies the attribute type data contained in the <c>Value</c> BLOB.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_ATTRIBUTE_TYPE_VALUE.Value">
            <summary>
            A CRYPT_OBJID_BLOB that contains the encoded attribute. The <c>cbData</c> member of the <c>CRYPT_OBJID_BLOB</c> structure
            indicates the length of the <c>pbData</c> member. The <c>pbData</c> member contains the attribute information.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CRYPT_BIT_BLOB">
            <summary>The <c>CRYPT_BIT_BLOB</c> structure contains a set of bits represented by an array of bytes.</summary>
            <remarks>
            Because the smallest chunk of memory that can normally be allocated is a byte, the <c>CRYPT_BIT_BLOB</c> structure allows the
            last byte in the array to contain zero to seven unused bits. The number of unused bits in the array is contained in the
            <c>cUnusedBits</c> member of this structure. The number of meaningful bits in the <c>pbData</c> member is calculated with the
            formula (( <c>cbData</c> × 8) – <c>cUnusedBits</c>). For example, if you need to represent 10 bits, you would allocate an array
            of 2 bytes and set <c>cUnusedBits</c> to 6. If you view the array as contiguous bits from left to right, the left 10 bits would
            be meaningful, and the right 6 bits would be unused.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_BIT_BLOB.cbData">
            <summary>The number of bytes in the <c>pbData</c> array.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_BIT_BLOB.pbData">
            <summary>A pointer to an array of bytes that represents the bits.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_BIT_BLOB.cUnusedBits">
            <summary>
            The number of unused bits in the last byte of the array. The unused bits are always the least significant bits in the last
            byte of the array.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CRYPT_KEY_PROV_INFO">
            <summary>
            The <c>CRYPT_KEY_PROV_INFO</c> structure contains information about a key container within a cryptographic service provider (CSP).
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_KEY_PROV_INFO.pwszContainerName">
            <summary>
            <para>A pointer to a null-terminated Unicode string that contains the name of the key container.</para>
            <para>
            When the <c>dwProvType</c> member is zero, this string contains the name of a key within a CNG key storage provider. This
            string is passed as the pwszKeyName parameter to the NCryptOpenKey function.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_KEY_PROV_INFO.pwszProvName">
            <summary>
            <para>A pointer to a null-terminated Unicode string that contains the name of the CSP.</para>
            <para>
            When the <c>dwProvType</c> member is zero, this string contains the name of a CNG key storage provider. This string is
            passed as the pwszProviderName parameter to the NCryptOpenStorageProvider function.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_KEY_PROV_INFO.dwProvType">
            <summary>
            <para>Specifies the CSP type. This can be zero or one of the Cryptographic Provider Types.</para>
            <para>If this member is zero, the key container is one of the CNG key storage providers.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_KEY_PROV_INFO.dwFlags">
            <summary>
            <para>A set of flags that indicate additional information about the provider. This can be zero or one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_SET_KEY_PROV_HANDLE_PROP_ID / CERT_SET_KEY_CONTEXT_PROP_ID</term>
            <term>Enables the handle to the key provider to be kept open for subsequent calls to the cryptographic functions.</term>
            </item>
            <item>
            <term>CRYPT_MACHINE_KEYSET / NCRYPT_MACHINE_KEY_FLAG</term>
            <term>The key container contains machine keys. If this flag is not present, the key container contains user keys.</term>
            </item>
            <item>
            <term>CRYPT_SILENT / NCRYPT_SILENT_FLAG</term>
            <term>The key container will attempt to open any keys silently without any user interface prompts.</term>
            </item>
            </list>
            <para>
            The cryptographic functions CryptDecryptMessage, CryptSignMessage, CryptDecryptAndVerifyMessageSignature, and
            CryptSignAndEncryptMessage internally perform CryptAcquireContext operations using the <c>CRYPT_KEY_PROV_INFO</c> from a
            certificate. When the <c>CERT_SET_KEY_CONTEXT_PROP_ID</c> or <c>CERT_SET_KEY_PROV_HANDLE_PROP_ID</c> flag is set, these
            cryptographic functions then can call CertSetCertificateContextProperty with <c>CERT_KEY_CONTEXT_PROP_ID</c>. This call
            enables the handle to the key provider to be kept open for subsequent calls to the cryptographic functions mentioned that
            use that same certificate, which eliminates the need to perform additional calls to <c>CryptAcquireContext</c>, improving
            efficiency. Also, because some providers can require that a password be entered for calls to <c>CryptAcquireContext</c>, it
            is desirable for applications to minimize the number of <c>CryptAcquireContext</c> calls made. Handles to key providers that
            were kept open are automatically released when the store is closed.
            </para>
            <para>
            For example, consider an email application where five encrypted messages have been received, all encrypted with the public
            key from the same certificate. If the handle to the key provider is kept open after the first message is processed, calls to
            CryptAcquireContext are not required for the four remaining messages.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_KEY_PROV_INFO.cProvParam">
            <summary>
            <para>The number of elements in the <c>rgProvParam</c> array.</para>
            <para>When the <c>dwProvType</c> member is zero, this member is not used and must be zero.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_KEY_PROV_INFO.rgProvParam">
            <summary>
            <para>
            An array of CRYPT_KEY_PROV_PARAM structures that contain the parameters for the key container. The <c>cProvParam</c> member
            contains the number of elements in this array.
            </para>
            <para>When the <c>dwProvType</c> member is zero, this member is not used and must be <c>NULL</c>.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_KEY_PROV_INFO.dwKeySpec">
            <summary>
            <para>The specification of the private key to retrieve.</para>
            <para>The following values are defined for the default provider.</para>
            <para>
            When the <c>dwProvType</c> member is zero, this value is passed as the dwLegacyKeySpec parameter to the NCryptOpenKey function.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>AT_KEYEXCHANGE</term>
            <term>Keys used to encrypt/decrypt session keys.</term>
            </item>
            <item>
            <term>AT_SIGNATURE</term>
            <term>Keys used to create and verify digital signatures.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CRYPT_TIMESTAMP_ACCURACY">
            <summary>
            The <c>CRYPT_TIMESTAMP_ACCURACY</c> structure is used by the CRYPT_TIMESTAMP_INFO structure to represent the accuracy of the
            time deviation around the UTC time at which the time stamp token was created by the Time Stamp Authority (TSA).
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_TIMESTAMP_ACCURACY.dwSeconds">
            <summary>
            Optional. Specifies, in seconds, the accuracy of the upper limit of the time at which the time stamp token was created by
            the TSA.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_TIMESTAMP_ACCURACY.dwMillis">
            <summary>
            Optional. Specifies, in milliseconds, the accuracy of the upper limit of the time at which the time stamp token was created
            by the TSA.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_TIMESTAMP_ACCURACY.dwMicros">
            <summary>
            Optional. Specifies, in microseconds, the accuracy of the upper limit of the time at which the time-stamp token was created
            by the TSA.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CRYPT_TIMESTAMP_CONTEXT">
            <summary>
            The <c>CRYPT_TIMESTAMP_CONTEXT</c> structure contains both the encoded and decoded representations of a time stamp token.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_TIMESTAMP_CONTEXT.cbEncoded">
            <summary>The size, in bytes, of the buffer pointed to by the <c>pbEncoded</c> member.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_TIMESTAMP_CONTEXT.pbEncoded">
            <summary>
            A pointer to a buffer that contains an Abstract Syntax Notation One (ASN.1) encoded content information sequence. This value
            should be stored for future time stamp validations on the signature. Applications can use the CertOpenStore function with
            the <c>CERT_STORE_PROV_PKCS7</c> flag to find additional certificates or certificate revocation lists (CRLs) related to the
            TSA time stamp signature.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_TIMESTAMP_CONTEXT.pTimeStamp">
            <summary>
            A pointer to a CRYPT_TIMESTAMP_INFO structure that contains a signed data content type in Cryptographic Message Syntax (CMS) format.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CRYPT_TIMESTAMP_INFO">
            <summary>
            The <c>CRYPT_TIMESTAMP_INFO</c> structure contains a signed data content type in Cryptographic Message Syntax (CMS) format.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_TIMESTAMP_INFO.dwVersion">
            <summary>
            <para>A <c>DWORD</c> value that specifies the version of the time stamp request.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>TIMESTAMP_VERSION 1</term>
            <term>Specifies that this is a version 1 time stamp request.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_TIMESTAMP_INFO.pszTSAPolicyId">
            <summary>
            Optional. A pointer to a null-terminated string that specifies the Time Stamping Authority (TSA) policy under which the time
            stamp token was provided. This value must correspond with the value passed in the CRYPT_TIMESTAMP_REQUEST structure.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_TIMESTAMP_INFO.HashAlgorithm">
            <summary>
            A CRYPT_ALGORITHM_IDENTIFIER structure that contains information about the algorithm used to calculate the hash. This value
            must correspond with the value passed in the CRYPT_TIMESTAMP_REQUEST structure.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_TIMESTAMP_INFO.HashedMessage">
            <summary>A CRYPT_DER_BLOB structure that specifies the hash values to be time stamped.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_TIMESTAMP_INFO.SerialNumber">
            <summary>A CRYPT_INTEGER_BLOB structure that contains the serial number assigned by the TSA to each time stamp token.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_TIMESTAMP_INFO.ftTime">
            <summary>A FILETIME value that specifies the time at which the time stamp token was produced by the TSA.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_TIMESTAMP_INFO.pvAccuracy">
            <summary>
            Optional. A pointer to a CRYPT_TIMESTAMP_ACCURACY structure that contains the time deviation around the UTC time at which
            the time stamp token was created by the TSA.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_TIMESTAMP_INFO.fOrdering">
            <summary>This member is reserved.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_TIMESTAMP_INFO.Nonce">
            <summary>
            Optional. A CRYPT_DER_BLOB structure that contains the nonce value used by the client to verify the timeliness of the
            response when no local clock is available. This value must correspond with the value passed in the CRYPT_TIMESTAMP_REQUEST structure.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_TIMESTAMP_INFO.Tsa">
            <summary>Optional. A CRYPT_DER_BLOB structure that contains the subject name of the TSA certificate.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_TIMESTAMP_INFO.cExtension">
            <summary>The number of elements in the array pointed to by the <c>rgExtension</c> member.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_TIMESTAMP_INFO.rgExtension">
            <summary>A pointer to an array of CERT_EXTENSION structures that contain extension information returned from the request.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CRYPT_TIMESTAMP_PARA">
            <summary>The <c>CRYPT_TIMESTAMP_PARA</c> structure defines additional parameters for the time stamp request.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_TIMESTAMP_PARA.pszTSAPolicyId">
            <summary>
            Optional. A pointer to a null-terminated character string that contains the Time Stamping Authority (TSA) policy under which
            the time stamp token should be provided.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_TIMESTAMP_PARA.fRequestCerts">
            <summary>
            A Boolean value that specifies whether the TSA must include the certificates used to sign the time stamp token in the
            response .
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_TIMESTAMP_PARA.Nonce">
            <summary>
            Optional. A CRYPT_INTEGER_BLOB structure that contains the nonce value used by the client to verify the timeliness of the
            response when no local clock is available.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_TIMESTAMP_PARA.cExtension">
            <summary>The number of elements in the array pointed to by the <c>rgExtension</c> member.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_TIMESTAMP_PARA.rgExtension">
            <summary>
            A pointer to an array of CERT_EXTENSION structures that contain extension information that is passed in the request.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CRYPTOAPI_BLOB">
            <summary>
            The BLOB structure contains an arbitrary array of bytes. The structure definition includes aliases appropriate to the various
            functions that use it.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CRYPTOAPI_BLOB.#ctor(System.IntPtr,Vanara.PInvoke.SizeT)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Crypt32.CRYPTOAPI_BLOB"/> struct with default values.</summary>
            <param name="data">A pointer to the data buffer.</param>
            <param name="size">The count, in bytes, of <paramref name="data"/>.</param>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CRYPTOAPI_BLOB.#ctor(Vanara.InteropServices.SafeAllocatedMemoryHandle)">
            <summary>
            Initializes a new instance of the <see cref="T:Vanara.PInvoke.Crypt32.CRYPTOAPI_BLOB"/> struct from a <see cref="T:Vanara.InteropServices.SafeAllocatedMemoryHandle"/> instance.
            </summary>
            <param name="mem">The allocated memory instance.</param>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPTOAPI_BLOB.cbData">
            <summary>A DWORD variable that contains the count, in bytes, of data.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPTOAPI_BLOB.pbData">
            <summary>A pointer to the data buffer.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CRYPTOAPI_BLOB.GetBytes">
            <summary>Gets the bytes associated with this blob.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CTL_CONTEXT">
            <summary>
            <para>
            The <c>CTL_CONTEXT</c> structure contains both the encoded and decoded representations of a CTL. It also contains an opened
            <c>HCRYPTMSG</c> handle to the decoded, cryptographically signed message containing the CTL_INFO as its inner content.
            </para>
            <para>CryptoAPI low-level message functions can be used to extract additional signer information.</para>
            <para>A <c>CTL_CONTEXT</c> returned by any CryptoAPI function must be freed by calling the CertFreeCTLContext function.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CTL_CONTEXT.dwMsgAndCertEncodingType">
            <summary>
            <para>
            Type of encoding used. It is always acceptable to specify both the certificate and message encoding types by combining them
            with a bitwise- <c>OR</c> operation as shown in the following example:
            </para>
            <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING</para>
            <para>Currently defined encoding types are:</para>
            <list type="bullet">
            <item>
            <term>X509_ASN_ENCODING</term>
            </item>
            <item>
            <term>PKCS_7_ASN_ENCODING</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CTL_CONTEXT.pbCtlEncoded">
            <summary>A pointer to the encoded CTL.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CTL_CONTEXT.cbCtlEncoded">
            <summary>The size, in bytes, of the encoded CTL.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CTL_CONTEXT.pCtlInfo">
            <summary>A pointer to CTL_INFO structure contain the CTL information.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CTL_CONTEXT.hCertStore">
            <summary>A handle to the certificate store.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CTL_CONTEXT.hCryptMsg">
            <summary>
            Open <c>HCRYPTMSG</c> handle to a decoded, cryptographic-signed message containing the CTL_INFO as its inner content.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CTL_CONTEXT.pbCtlContent">
            <summary>The encoded inner content of the signed message.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CTL_CONTEXT.cbCtlContent">
            <summary>Count, in bytes, of <c>pbCtlContent</c>.</summary>
        </member>
        <member name="P:Vanara.PInvoke.Crypt32.CTL_CONTEXT.pUnsafeCtlInfo">
            <summary>A pointer to CTL_INFO structure contain the CTL information.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CTL_ENTRY">
            <summary>The <c>CTL_ENTRY</c> structure is an element of a certificate trust list (CTL).</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CTL_ENTRY.SubjectIdentifier">
            <summary>BLOB containing a unique identifier of a subject. It can be a hash or any unique byte sequence.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CTL_ENTRY.cAttribute">
            <summary>Count of elements in the <c>rgAttribute</c> member array.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CTL_ENTRY.rgAttribute">
            <summary>Array of CRYPT_ATTRIBUTE structures, each holding information about the subject.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CTL_INFO">
            <summary>The <c>CTL_INFO</c> structure contains the information stored in a Certificate Trust List (CTL).</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CTL_INFO.dwVersion">
            <summary>
            <para>The CTL's version number. Currently defined version numbers are shown in the following table.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CTL_V1</term>
            <term>Version 1</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CTL_INFO.SubjectUsage">
            <summary>
            CTL_USAGE structure identifying the intended usage of the list as a sequence of object identifiers. This is the same as in
            the Enhanced Key Usage extension.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CTL_INFO.ListIdentifier">
            <summary>
            A CRYPT_DATA_BLOB structure that includes a byte string that uniquely identifies the list. This member is used to augment
            the <c>SubjectUsage</c> and further specifies the list when desired.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CTL_INFO.SequenceNumber">
            <summary>A BLOB that contains a monotonically increasing number for each update of the CTL.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CTL_INFO.ThisUpdate">
            <summary>
            Indication of the date and time of the certificate revocation lists (CRLs) published. If the time is after 1950 and before
            2050, it is UTC-time encoded as an 8-byte date/time precise to seconds with a 2-digit year (that is, YYMMDDHHMMSS plus 2
            bytes). Otherwise, it is generalized-time encoded as an 8-byte year precise to milliseconds with a 4-byte year.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CTL_INFO.NextUpdate">
            <summary>
            Indication of the date and time for the CRL's next available scheduled update. If the time is after 1950 and before 2050, it
            is UTC-time encoded as an 8-byte date/time precise to seconds with a 2-digit year (that is, YYMMDDHHMMSS plus 2 bytes).
            Otherwise, it is generalized-time encoded as an 8-byte date time precise to milliseconds with a 4-byte year.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CTL_INFO.SubjectAlgorithm">
            <summary>
            CRYPT_ALGORITHM_IDENTIFIER structure that contains the algorithm type of the <c>SubjectIdentifier</c> in CTL_ENTRY members
            of the <c>rgCTLEntry</c> member array. The structure also includes additional parameters used by the algorithm.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CTL_INFO.cCTLEntry">
            <summary>Number of elements in the <c>rgCTLEntry</c> member array.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CTL_INFO.rgCTLEntry">
            <summary>Array of CTL_ENTRY structures.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CTL_INFO.cExtension">
            <summary>Number of elements in the <c>rgExtension</c> array.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CTL_INFO.rgExtension">
            <summary>Array of CERT_EXTENSION structures.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CTL_USAGE">
            <summary>
            The <c>CTL_USAGE</c> structure contains an array of object identifiers (OIDs) for Certificate Trust List (CTL) extensions.
            <c>CTL_USAGE</c> structures are used in functions that search for CTLs for specific uses.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CTL_USAGE.cUsageIdentifier">
            <summary>Number of elements in the <c>rgpszUsageIdentifier</c> member array.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CTL_USAGE.rgpszUsageIdentifier">
            <summary>Array of object identifiers (OIDs) of CTL extensions.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.HCRYPTDEFAULTCONTEXT">
            <summary>Provides a handle to a cryptographic default context.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.HCRYPTDEFAULTCONTEXT.#ctor(System.IntPtr)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Crypt32.HCRYPTDEFAULTCONTEXT"/> struct.</summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
        </member>
        <member name="P:Vanara.PInvoke.Crypt32.HCRYPTDEFAULTCONTEXT.NULL">
            <summary>Returns an invalid handle by instantiating a <see cref="T:Vanara.PInvoke.Crypt32.HCRYPTDEFAULTCONTEXT"/> object with <see cref="F:System.IntPtr.Zero"/>.</summary>
        </member>
        <member name="P:Vanara.PInvoke.Crypt32.HCRYPTDEFAULTCONTEXT.IsNull">
            <summary>Gets a value indicating whether this instance is a null handle.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.HCRYPTDEFAULTCONTEXT.op_Explicit(Vanara.PInvoke.Crypt32.HCRYPTDEFAULTCONTEXT)~System.IntPtr">
            <summary>Performs an explicit conversion from <see cref="T:Vanara.PInvoke.Crypt32.HCRYPTDEFAULTCONTEXT"/> to <see cref="T:System.IntPtr"/>.</summary>
            <param name="h">The handle.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.HCRYPTDEFAULTCONTEXT.op_Implicit(System.IntPtr)~Vanara.PInvoke.Crypt32.HCRYPTDEFAULTCONTEXT">
            <summary>Performs an implicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:Vanara.PInvoke.Crypt32.HCRYPTDEFAULTCONTEXT"/>.</summary>
            <param name="h">The pointer to a handle.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.HCRYPTDEFAULTCONTEXT.op_Inequality(Vanara.PInvoke.Crypt32.HCRYPTDEFAULTCONTEXT,Vanara.PInvoke.Crypt32.HCRYPTDEFAULTCONTEXT)">
            <summary>Implements the operator !=.</summary>
            <param name="h1">The first handle.</param>
            <param name="h2">The second handle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.HCRYPTDEFAULTCONTEXT.op_Equality(Vanara.PInvoke.Crypt32.HCRYPTDEFAULTCONTEXT,Vanara.PInvoke.Crypt32.HCRYPTDEFAULTCONTEXT)">
            <summary>Implements the operator ==.</summary>
            <param name="h1">The first handle.</param>
            <param name="h2">The second handle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.HCRYPTDEFAULTCONTEXT.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.HCRYPTDEFAULTCONTEXT.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.HCRYPTDEFAULTCONTEXT.DangerousGetHandle">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.HCRYPTHASH">
            <summary>Provides a handle to a CryptoApi hash.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.HCRYPTHASH.#ctor(System.IntPtr)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Crypt32.HCRYPTHASH"/> struct.</summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
        </member>
        <member name="P:Vanara.PInvoke.Crypt32.HCRYPTHASH.NULL">
            <summary>Returns an invalid handle by instantiating a <see cref="T:Vanara.PInvoke.Crypt32.HCRYPTHASH"/> object with <see cref="F:System.IntPtr.Zero"/>.</summary>
        </member>
        <member name="P:Vanara.PInvoke.Crypt32.HCRYPTHASH.IsNull">
            <summary>Gets a value indicating whether this instance is a null handle.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.HCRYPTHASH.op_Explicit(Vanara.PInvoke.Crypt32.HCRYPTHASH)~System.IntPtr">
            <summary>Performs an explicit conversion from <see cref="T:Vanara.PInvoke.Crypt32.HCRYPTHASH"/> to <see cref="T:System.IntPtr"/>.</summary>
            <param name="h">The handle.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.HCRYPTHASH.op_Implicit(System.IntPtr)~Vanara.PInvoke.Crypt32.HCRYPTHASH">
            <summary>Performs an implicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:Vanara.PInvoke.Crypt32.HCRYPTHASH"/>.</summary>
            <param name="h">The pointer to a handle.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.HCRYPTHASH.op_Inequality(Vanara.PInvoke.Crypt32.HCRYPTHASH,Vanara.PInvoke.Crypt32.HCRYPTHASH)">
            <summary>Implements the operator !=.</summary>
            <param name="h1">The first handle.</param>
            <param name="h2">The second handle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.HCRYPTHASH.op_Equality(Vanara.PInvoke.Crypt32.HCRYPTHASH,Vanara.PInvoke.Crypt32.HCRYPTHASH)">
            <summary>Implements the operator ==.</summary>
            <param name="h1">The first handle.</param>
            <param name="h2">The second handle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.HCRYPTHASH.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.HCRYPTHASH.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.HCRYPTHASH.DangerousGetHandle">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.HCRYPTKEY">
            <summary>Provides a handle to a CryptoApi key.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.HCRYPTKEY.#ctor(System.IntPtr)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Crypt32.HCRYPTKEY"/> struct.</summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
        </member>
        <member name="P:Vanara.PInvoke.Crypt32.HCRYPTKEY.NULL">
            <summary>Returns an invalid handle by instantiating a <see cref="T:Vanara.PInvoke.Crypt32.HCRYPTKEY"/> object with <see cref="F:System.IntPtr.Zero"/>.</summary>
        </member>
        <member name="P:Vanara.PInvoke.Crypt32.HCRYPTKEY.IsNull">
            <summary>Gets a value indicating whether this instance is a null handle.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.HCRYPTKEY.op_Explicit(Vanara.PInvoke.Crypt32.HCRYPTKEY)~System.IntPtr">
            <summary>Performs an explicit conversion from <see cref="T:Vanara.PInvoke.Crypt32.HCRYPTKEY"/> to <see cref="T:System.IntPtr"/>.</summary>
            <param name="h">The handle.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.HCRYPTKEY.op_Implicit(System.IntPtr)~Vanara.PInvoke.Crypt32.HCRYPTKEY">
            <summary>Performs an implicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:Vanara.PInvoke.Crypt32.HCRYPTKEY"/>.</summary>
            <param name="h">The pointer to a handle.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.HCRYPTKEY.op_Inequality(Vanara.PInvoke.Crypt32.HCRYPTKEY,Vanara.PInvoke.Crypt32.HCRYPTKEY)">
            <summary>Implements the operator !=.</summary>
            <param name="h1">The first handle.</param>
            <param name="h2">The second handle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.HCRYPTKEY.op_Equality(Vanara.PInvoke.Crypt32.HCRYPTKEY,Vanara.PInvoke.Crypt32.HCRYPTKEY)">
            <summary>Implements the operator ==.</summary>
            <param name="h1">The first handle.</param>
            <param name="h2">The second handle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.HCRYPTKEY.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.HCRYPTKEY.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.HCRYPTKEY.DangerousGetHandle">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.HCRYPTPROV">
            <summary>Provides a handle to a CryptoAPI provider.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.HCRYPTPROV.#ctor(System.IntPtr)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Crypt32.HCRYPTPROV"/> struct.</summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
        </member>
        <member name="P:Vanara.PInvoke.Crypt32.HCRYPTPROV.NULL">
            <summary>Returns an invalid handle by instantiating a <see cref="T:Vanara.PInvoke.Crypt32.HCRYPTPROV"/> object with <see cref="F:System.IntPtr.Zero"/>.</summary>
        </member>
        <member name="P:Vanara.PInvoke.Crypt32.HCRYPTPROV.IsNull">
            <summary>Gets a value indicating whether this instance is a null handle.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.HCRYPTPROV.op_Explicit(Vanara.PInvoke.Crypt32.HCRYPTPROV)~System.IntPtr">
            <summary>Performs an explicit conversion from <see cref="T:Vanara.PInvoke.Crypt32.HCRYPTPROV"/> to <see cref="T:System.IntPtr"/>.</summary>
            <param name="h">The handle.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.HCRYPTPROV.op_Implicit(System.IntPtr)~Vanara.PInvoke.Crypt32.HCRYPTPROV">
            <summary>Performs an implicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:Vanara.PInvoke.Crypt32.HCRYPTPROV"/>.</summary>
            <param name="h">The pointer to a handle.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.HCRYPTPROV.op_Inequality(Vanara.PInvoke.Crypt32.HCRYPTPROV,Vanara.PInvoke.Crypt32.HCRYPTPROV)">
            <summary>Implements the operator !=.</summary>
            <param name="h1">The first handle.</param>
            <param name="h2">The second handle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.HCRYPTPROV.op_Equality(Vanara.PInvoke.Crypt32.HCRYPTPROV,Vanara.PInvoke.Crypt32.HCRYPTPROV)">
            <summary>Implements the operator ==.</summary>
            <param name="h1">The first handle.</param>
            <param name="h2">The second handle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.HCRYPTPROV.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.HCRYPTPROV.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.HCRYPTPROV.DangerousGetHandle">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.PCCERT_CONTEXT">
            <summary>Provides a handle to a CERT_CONTEXT.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.PCCERT_CONTEXT.#ctor(System.IntPtr)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Crypt32.PCCERT_CONTEXT"/> struct.</summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
        </member>
        <member name="P:Vanara.PInvoke.Crypt32.PCCERT_CONTEXT.NULL">
            <summary>Returns an invalid handle by instantiating a <see cref="T:Vanara.PInvoke.Crypt32.PCCERT_CONTEXT"/> object with <see cref="F:System.IntPtr.Zero"/>.</summary>
        </member>
        <member name="P:Vanara.PInvoke.Crypt32.PCCERT_CONTEXT.IsNull">
            <summary>Gets a value indicating whether this instance is a null handle.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.PCCERT_CONTEXT.op_Explicit(Vanara.PInvoke.Crypt32.PCCERT_CONTEXT)~System.IntPtr">
            <summary>Performs an explicit conversion from <see cref="T:Vanara.PInvoke.Crypt32.PCCERT_CONTEXT"/> to <see cref="T:System.IntPtr"/>.</summary>
            <param name="h">The handle.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.PCCERT_CONTEXT.op_Implicit(System.IntPtr)~Vanara.PInvoke.Crypt32.PCCERT_CONTEXT">
            <summary>Performs an implicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:Vanara.PInvoke.Crypt32.PCCERT_CONTEXT"/>.</summary>
            <param name="h">The pointer to a handle.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.PCCERT_CONTEXT.op_Explicit(Vanara.PInvoke.Crypt32.PCCERT_CONTEXT)~Vanara.PInvoke.Crypt32.CERT_CONTEXT*">
            <summary>Performs an explicit conversion from <see cref="T:Vanara.PInvoke.Crypt32.PCCERT_CONTEXT"/> to <see cref="T:Vanara.PInvoke.Crypt32.CERT_CONTEXT"/>.</summary>
            <param name="h">The <see cref="T:Vanara.PInvoke.Crypt32.PCCERT_CONTEXT"/> instance.</param>
            <returns>The resulting <see cref="T:Vanara.PInvoke.Crypt32.CERT_CONTEXT"/> instance from the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.PCCERT_CONTEXT.op_Inequality(Vanara.PInvoke.Crypt32.PCCERT_CONTEXT,Vanara.PInvoke.Crypt32.PCCERT_CONTEXT)">
            <summary>Implements the operator !=.</summary>
            <param name="h1">The first handle.</param>
            <param name="h2">The second handle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.PCCERT_CONTEXT.op_Equality(Vanara.PInvoke.Crypt32.PCCERT_CONTEXT,Vanara.PInvoke.Crypt32.PCCERT_CONTEXT)">
            <summary>Implements the operator ==.</summary>
            <param name="h1">The first handle.</param>
            <param name="h2">The second handle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.PCCERT_CONTEXT.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.PCCERT_CONTEXT.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.PCCERT_CONTEXT.DangerousGetHandle">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.PCCRL_CONTEXT">
            <summary>Provides a handle to a CLR_CONTEXT.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.PCCRL_CONTEXT.#ctor(System.IntPtr)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Crypt32.PCCRL_CONTEXT"/> struct.</summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
        </member>
        <member name="P:Vanara.PInvoke.Crypt32.PCCRL_CONTEXT.NULL">
            <summary>Returns an invalid handle by instantiating a <see cref="T:Vanara.PInvoke.Crypt32.PCCRL_CONTEXT"/> object with <see cref="F:System.IntPtr.Zero"/>.</summary>
        </member>
        <member name="P:Vanara.PInvoke.Crypt32.PCCRL_CONTEXT.IsNull">
            <summary>Gets a value indicating whether this instance is a null handle.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.PCCRL_CONTEXT.op_Explicit(Vanara.PInvoke.Crypt32.PCCRL_CONTEXT)~System.IntPtr">
            <summary>Performs an explicit conversion from <see cref="T:Vanara.PInvoke.Crypt32.PCCRL_CONTEXT"/> to <see cref="T:System.IntPtr"/>.</summary>
            <param name="h">The handle.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.PCCRL_CONTEXT.op_Implicit(System.IntPtr)~Vanara.PInvoke.Crypt32.PCCRL_CONTEXT">
            <summary>Performs an implicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:Vanara.PInvoke.Crypt32.PCCRL_CONTEXT"/>.</summary>
            <param name="h">The pointer to a handle.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.PCCRL_CONTEXT.op_Explicit(Vanara.PInvoke.Crypt32.PCCRL_CONTEXT)~Vanara.PInvoke.Crypt32.CRL_CONTEXT*">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.Crypt32.PCCRL_CONTEXT"/> to <see cref="T:Vanara.PInvoke.Crypt32.CRL_CONTEXT"/>.</summary>
            <param name="h">The <see cref="T:Vanara.PInvoke.Crypt32.PCCRL_CONTEXT"/> instance.</param>
            <returns>The resulting <see cref="T:Vanara.PInvoke.Crypt32.CRL_CONTEXT"/> instance from the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.PCCRL_CONTEXT.op_Inequality(Vanara.PInvoke.Crypt32.PCCRL_CONTEXT,Vanara.PInvoke.Crypt32.PCCRL_CONTEXT)">
            <summary>Implements the operator !=.</summary>
            <param name="h1">The first handle.</param>
            <param name="h2">The second handle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.PCCRL_CONTEXT.op_Equality(Vanara.PInvoke.Crypt32.PCCRL_CONTEXT,Vanara.PInvoke.Crypt32.PCCRL_CONTEXT)">
            <summary>Implements the operator ==.</summary>
            <param name="h1">The first handle.</param>
            <param name="h2">The second handle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.PCCRL_CONTEXT.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.PCCRL_CONTEXT.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.PCCRL_CONTEXT.DangerousGetHandle">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.PCCTL_CONTEXT">
            <summary>Provides a handle to a CTL_CONTEXT.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.PCCTL_CONTEXT.#ctor(System.IntPtr)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Crypt32.PCCTL_CONTEXT"/> struct.</summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
        </member>
        <member name="P:Vanara.PInvoke.Crypt32.PCCTL_CONTEXT.NULL">
            <summary>Returns an invalid handle by instantiating a <see cref="T:Vanara.PInvoke.Crypt32.PCCTL_CONTEXT"/> object with <see cref="F:System.IntPtr.Zero"/>.</summary>
        </member>
        <member name="P:Vanara.PInvoke.Crypt32.PCCTL_CONTEXT.IsNull">
            <summary>Gets a value indicating whether this instance is a null handle.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.PCCTL_CONTEXT.op_Explicit(Vanara.PInvoke.Crypt32.PCCTL_CONTEXT)~System.IntPtr">
            <summary>Performs an explicit conversion from <see cref="T:Vanara.PInvoke.Crypt32.PCCTL_CONTEXT"/> to <see cref="T:System.IntPtr"/>.</summary>
            <param name="h">The handle.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.PCCTL_CONTEXT.op_Implicit(System.IntPtr)~Vanara.PInvoke.Crypt32.PCCTL_CONTEXT">
            <summary>Performs an implicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:Vanara.PInvoke.Crypt32.PCCTL_CONTEXT"/>.</summary>
            <param name="h">The pointer to a handle.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.PCCTL_CONTEXT.op_Explicit(Vanara.PInvoke.Crypt32.PCCTL_CONTEXT)~Vanara.PInvoke.Crypt32.CTL_CONTEXT*">
            <summary>Performs an explicit conversion from <see cref="T:Vanara.PInvoke.Crypt32.PCCTL_CONTEXT"/> to <see cref="T:Vanara.PInvoke.Crypt32.CTL_CONTEXT"/>.</summary>
            <param name="h">The handle.</param>
            <returns>The resulting <see cref="T:Vanara.PInvoke.Crypt32.CTL_CONTEXT"/> instance from the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.PCCTL_CONTEXT.op_Inequality(Vanara.PInvoke.Crypt32.PCCTL_CONTEXT,Vanara.PInvoke.Crypt32.PCCTL_CONTEXT)">
            <summary>Implements the operator !=.</summary>
            <param name="h1">The first handle.</param>
            <param name="h2">The second handle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.PCCTL_CONTEXT.op_Equality(Vanara.PInvoke.Crypt32.PCCTL_CONTEXT,Vanara.PInvoke.Crypt32.PCCTL_CONTEXT)">
            <summary>Implements the operator ==.</summary>
            <param name="h1">The first handle.</param>
            <param name="h2">The second handle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.PCCTL_CONTEXT.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.PCCTL_CONTEXT.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.PCCTL_CONTEXT.DangerousGetHandle">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.SafeCRYPTOAPI_BLOB">
            <summary>
            The BLOB structure contains an arbitrary array of bytes. The structure definition includes aliases appropriate to the various
            functions that use it.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeCRYPTOAPI_BLOB.cbData">
            <summary>A DWORD variable that contains the count, in bytes, of data.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeCRYPTOAPI_BLOB.pbData">
            <summary>A pointer to the data buffer.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.SafeCRYPTOAPI_BLOB.#ctor(System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Crypt32.SafeCRYPTOAPI_BLOB"/> class.</summary>
            <param name="size">The size, in bytes, to allocate.</param>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.SafeCRYPTOAPI_BLOB.#ctor(System.Byte[])">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Crypt32.SafeCRYPTOAPI_BLOB"/> class.</summary>
            <param name="bytes">The bytes to copy into the blob.</param>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.SafeCRYPTOAPI_BLOB.#ctor(System.String,System.Runtime.InteropServices.CharSet)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Crypt32.SafeCRYPTOAPI_BLOB"/> class with a string.</summary>
            <param name="value">The string value.</param>
            <param name="charSet">The character set to use.</param>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeCRYPTOAPI_BLOB.Empty">
            <summary>Represents an empty instance of a blob.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.SafeCRYPTOAPI_BLOB.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.SafeCRYPTOAPI_BLOB.CreateFromStructure``1(``0@)">
            <summary>Allocates from unmanaged memory sufficient memory to hold an object of type T.</summary>
            <typeparam name="T">Native type</typeparam>
            <param name="value">The value.</param>
            <returns><see cref="T:Vanara.PInvoke.Crypt32.SafeCRYPTOAPI_BLOB"/> object to an native (unmanaged) memory block the size of T.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.SafeCRYPTOAPI_BLOB.CreateFromList``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            Allocates from unmanaged memory to represent a structure with a variable length array at the end and marshal these structure
            elements. It is the callers responsibility to marshal what precedes the trailing array into the unmanaged memory. ONLY
            structures with attribute StructLayout of LayoutKind.Sequential are supported.
            </summary>
            <typeparam name="T">Type of the trailing array of structures</typeparam>
            <param name="values">Collection of structure objects</param>
            <param name="count">
            Number of items in <paramref name="values"/>. Setting this value to -1 will cause the method to get the count by iterating
            through <paramref name="values"/>.
            </param>
            <param name="prefixBytes">Number of bytes preceding the trailing array of structures</param>
            <returns><see cref="T:Vanara.PInvoke.Crypt32.SafeCRYPTOAPI_BLOB"/> object to an native (unmanaged) structure with a trail array of structures</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.SafeCRYPTOAPI_BLOB.CreateFromStringList(System.Collections.Generic.IEnumerable{System.String},Vanara.InteropServices.StringListPackMethod,System.Runtime.InteropServices.CharSet,System.Int32)">
            <summary>Allocates from unmanaged memory sufficient memory to hold an array of strings.</summary>
            <param name="values">The list of strings.</param>
            <param name="packing">The packing type for the strings.</param>
            <param name="charSet">The character set to use for the strings.</param>
            <param name="prefixBytes">Number of bytes preceding the trailing strings.</param>
            <returns>
            <see cref="T:Vanara.PInvoke.Crypt32.SafeCRYPTOAPI_BLOB"/> object to an native (unmanaged) array of strings stored using the <paramref
            name="packing"/> model and the character set defined by <paramref name="charSet"/>.
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.SafeOID">
            <summary>Provides a <see cref="T:System.Runtime.InteropServices.SafeHandle"/> for an object identifier that can be either a string or an integer.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.SafeOID.#ctor(System.IntPtr,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Crypt32.SafeOID"/> class and assigns an existing handle.</summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
            <param name="ownsHandle">
            <see langword="true"/> to reliably release the handle during the finalization phase; otherwise, <see langword="false"/> (not recommended).
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.SafeOID.#ctor(System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Crypt32.SafeOID"/> class.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.SafeOID.#ctor(System.UInt32)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Crypt32.SafeOID"/> class.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.SafeOID.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Crypt32.SafeOID"/> class.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.SafeOID.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Crypt32.SafeOID"/> class.</summary>
        </member>
        <member name="P:Vanara.PInvoke.Crypt32.SafeOID.IsString">
            <summary>Gets a value indicating whether this instance is string.</summary>
            <value><see langword="true"/> if this instance is string; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.SafeOID.op_Implicit(Vanara.PInvoke.Crypt32.SafeOID)~System.IntPtr">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.Crypt32.SafeOID"/> to <see cref="T:System.IntPtr"/>.</summary>
            <param name="value">The value.</param>
            <returns>The resulting <see cref="T:System.IntPtr"/> instance from the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.SafeOID.op_Implicit(System.String)~Vanara.PInvoke.Crypt32.SafeOID">
            <summary>Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Vanara.PInvoke.Crypt32.SafeOID"/>.</summary>
            <param name="value">The value.</param>
            <returns>The resulting <see cref="T:Vanara.PInvoke.Crypt32.SafeOID"/> instance from the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.SafeOID.op_Implicit(System.Int32)~Vanara.PInvoke.Crypt32.SafeOID">
            <summary>Performs an implicit conversion from <see cref="T:System.Int32"/> to <see cref="T:Vanara.PInvoke.Crypt32.SafeOID"/>.</summary>
            <param name="value">The value.</param>
            <returns>The resulting <see cref="T:Vanara.PInvoke.Crypt32.SafeOID"/> instance from the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.SafeOID.op_Implicit(System.UInt32)~Vanara.PInvoke.Crypt32.SafeOID">
            <summary>Performs an implicit conversion from <see cref="T:System.UInt32"/> to <see cref="T:Vanara.PInvoke.Crypt32.SafeOID"/>.</summary>
            <param name="value">The value.</param>
            <returns>The resulting <see cref="T:Vanara.PInvoke.Crypt32.SafeOID"/> instance from the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.SafeOID.op_Implicit(Vanara.PInvoke.Crypt32.SafeOID)~Vanara.InteropServices.StrPtrAnsi">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.Crypt32.SafeOID"/> to <see cref="T:Vanara.InteropServices.StrPtrAnsi"/>.</summary>
            <param name="value">The value.</param>
            <returns>The resulting <see cref="T:Vanara.InteropServices.StrPtrAnsi"/> instance from the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.SafeOID.GetInt32Value">
            <summary>Gets the integer value, if possible.</summary>
            <returns>The integer value, if set; otherwise <see langword="null"/>.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.SafeOID.GetStringValue">
            <summary>Gets the string value, if possible.</summary>
            <returns>The string value, if set; otherwise <see langword="null"/>.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.SafeOID.InternalReleaseHandle">
            <summary>
            Internal method that actually releases the handle. This is called by <see cref="M:Vanara.PInvoke.SafeHANDLE.ReleaseHandle"/>
            for valid handles and afterwards zeros the handle.
            </summary>
            <returns><c>true</c> to indicate successful release of the handle; <c>false</c> otherwise.</returns>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.CRYPT_ENCODE_DECODE_NONE">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.X509_CERT">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.X509_CERT_TO_BE_SIGNED">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.X509_CERT_CRL_TO_BE_SIGNED">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.X509_CERT_REQUEST_TO_BE_SIGNED">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.X509_EXTENSIONS">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.X509_NAME_VALUE">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.X509_NAME">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.X509_PUBLIC_KEY_INFO">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.X509_AUTHORITY_KEY_ID">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.X509_KEY_ATTRIBUTES">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.X509_KEY_USAGE_RESTRICTION">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.X509_ALTERNATE_NAME">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.X509_BASIC_CONSTRAINTS">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.X509_KEY_USAGE">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.X509_BASIC_CONSTRAINTS2">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.X509_CERT_POLICIES">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.PKCS_UTC_TIME">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.PKCS_TIME_REQUEST">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.RSA_CSP_PUBLICKEYBLOB">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.X509_UNICODE_NAME">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.X509_KEYGEN_REQUEST_TO_BE_SIGNED">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.PKCS_ATTRIBUTE">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.PKCS_CONTENT_INFO_SEQUENCE_OF_ANY">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.X509_UNICODE_NAME_VALUE">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.X509_ANY_STRING">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.X509_UNICODE_ANY_STRING">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.X509_OCTET_STRING">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.X509_BITS">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.X509_INTEGER">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.X509_MULTI_BYTE_INTEGER">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.X509_ENUMERATED">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.X509_CHOICE_OF_TIME">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.X509_AUTHORITY_KEY_ID2">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.X509_AUTHORITY_INFO_ACCESS">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.PKCS_CONTENT_INFO">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.X509_SEQUENCE_OF_ANY">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.X509_CRL_DIST_POINTS">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.X509_ENHANCED_KEY_USAGE">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.PKCS_CTL">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.X509_MULTI_BYTE_UINT">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.X509_DSS_PARAMETERS">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.X509_DSS_SIGNATURE">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.PKCS_RC2_CBC_PARAMETERS">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.PKCS_SMIME_CAPABILITIES">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.X509_SUBJECT_INFO_ACCESS">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.X509_CRL_REASON_CODE">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.X509_DSS_PUBLICKEY">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.X509_QC_STATEMENTS_EXT">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.PKCS_RSA_PRIVATE_KEY">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.PKCS_PRIVATE_KEY_INFO">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.PKCS_ENCRYPTED_PRIVATE_KEY_INFO">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.X509_PKIX_POLICY_QUALIFIER_USERNOTICE">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.X509_DH_PUBLICKEY">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.X509_DH_PARAMETERS">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.PKCS_ATTRIBUTES">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.PKCS_SORTED_CTL">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.X509_ECC_SIGNATURE">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.X942_DH_PARAMETERS">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.X509_BITS_WITHOUT_TRAILING_ZEROES">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.X942_OTHER_INFO">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.X509_CERT_PAIR">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.X509_ISSUING_DIST_POINT">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.X509_NAME_CONSTRAINTS">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.X509_POLICY_MAPPINGS">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.X509_POLICY_CONSTRAINTS">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.X509_CROSS_CERT_DIST_POINTS">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.CMC_DATA">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.CMC_RESPONSE">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.CMC_STATUS">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.CMC_ADD_EXTENSIONS">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.CMC_ADD_ATTRIBUTES">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.X509_CERTIFICATE_TEMPLATE">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.OCSP_SIGNED_REQUEST">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.OCSP_REQUEST">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.OCSP_RESPONSE">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.OCSP_BASIC_SIGNED_RESPONSE">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.OCSP_BASIC_RESPONSE">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.X509_LOGOTYPE_EXT">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.X509_BIOMETRIC_EXT">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.CNG_RSA_PUBLIC_KEY_BLOB">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.X509_OBJECT_IDENTIFIER">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.X509_ALGORITHM_IDENTIFIER">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.PKCS_RSA_SSA_PSS_PARAMETERS">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.PKCS_RSAES_OAEP_PARAMETERS">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.ECC_CMS_SHARED_INFO">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.TIMESTAMP_REQUEST">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.TIMESTAMP_RESPONSE">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.TIMESTAMP_INFO">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.X509_CERT_BUNDLE">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.X509_ECC_PRIVATE_KEY">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.CNG_RSA_PRIVATE_KEY_BLOB">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.X509_SUBJECT_DIR_ATTRS">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.X509_ECC_PARAMETERS">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.PKCS7_SIGNER_INFO">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeOID.CMS_SIGNER_INFO">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.PCRYPT_DECRYPT_PRIVATE_KEY_FUNC">
            <summary>
            <para>
            [The <c>PCRYPT_DECRYPT_PRIVATE_KEY_FUNC</c> function is available for use in the operating systems specified in the Requirements
            section. It may be altered or unavailable in subsequent versions.]
            </para>
            <para>
            The <c>PCRYPT_DECRYPT_PRIVATE_KEY_FUNC</c> function decrypts the private key and returns the decrypted key in the pbClearTextKey
            parameter. <c>PCRYPT_DECRYPT_PRIVATE_KEY_FUNC</c> is a callback function specified in a CRYPT_PKCS8_IMPORT_PARAMS structure. It
            is used when a CRYPT_ENCRYPTED_PRIVATE_KEY_INFO structure contains a private key that needs to be decrypted. The
            CryptImportPKCS8 function uses this function. The function must be implemented by the developer to suit each application.
            </para>
            </summary>
            <param name="Algorithm">
            A CRYPT_ALGORITHM_IDENTIFIER structure that identifies the algorithm used to encrypt the PrivateKeyInfo ASN.1 type found in the
            PKCS #8 standard.
            </param>
            <param name="EncryptedPrivateKey">A CRYPT_DATA_BLOB value that identifies the encrypted private key BLOB.</param>
            <param name="pbClearTextKey">A buffer to receive the clear text.</param>
            <param name="pcbClearTextKey">
            The number of bytes of the pClearTextKey buffer. Note: if this is zero then this should be filled in with the size required to
            decrypt the key into, and pClearTextKey should be ignored.
            </param>
            <param name="pVoidDecryptFunc">
            An <c>LPVOID</c> value that provides data used in decryption, such as key, initialization vector, and password.
            </param>
            <returns>
            <para>If the function succeeds, the function returns nonzero ( <c>TRUE</c>).</para>
            <para>If the function fails, it returns zero ( <c>FALSE</c>).</para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC">
            <summary>
            <para>
            [The <c>PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC</c> function is available for use in the operating systems specified in the Requirements
            section. It may be altered or unavailable in subsequent versions.]
            </para>
            <para>
            The <c>PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC</c> function encrypts the private key and returns the encrypted contents in the
            pbEncryptedKey parameter. It is a callback function identified in a CRYPT_PKCS8_EXPORT_PARAMS structure that creates a PKCS #8
            CRYPT_ENCRYPTED_PRIVATE_KEY_INFO structure. The function must be implemented by the developer to suit each application.
            </para>
            </summary>
            <param name="pAlgorithm"/>
            <param name="pClearTextPrivateKey"/>
            <param name="pbEncryptedKey"/>
            <param name="pcbEncryptedKey"/>
            <param name="pVoidEncryptFunc">
            An <c>LPVOID</c> variable that contains data used for encryption, such as key, initialization vector, and password.
            </param>
            <returns>
            <para>If the function succeeds, the function returns nonzero ( <c>TRUE</c>).</para>
            <para>If the function fails, it returns zero ( <c>FALSE</c>).</para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.PCRYPT_RESOLVE_HCRYPTPROV_FUNC">
            <summary>
            <para>
            [The <c>PCRYPT_RESOLVE_HCRYPTPROV_FUNC</c> function is available for use in the operating systems specified in the Requirements
            section. It may be altered or unavailable in subsequent versions.]
            </para>
            <para>
            The <c>PCRYPT_RESOLVE_HCRYPTPROV_FUNC</c> function returns a handle to a cryptographic service provider (CSP) by using the
            phCryptProv parameter to receive the key being imported. It is a callback function called from the context of the
            CryptImportPKCS8 function. The function must be implemented by the developer to suit each application.
            </para>
            </summary>
            <param name="pPrivateKeyInfo">
            Pointer to a CRYPT_PRIVATE_KEY_INFO structure which describes the key being imported and whose PrivateKey field contains the
            encrypted private key blob.
            </param>
            <param name="phCryptProv">A pointer to a HCRRYPTPROV to be filled in.</param>
            <param name="pVoidResolveFunc">
            The <c>pVoidResolveFunc</c> member passed in by the caller in the CRYPT_PKCS8_IMPORT_PARAMS structure.
            </param>
            <returns>
            <para>If the function succeeds, the function returns nonzero ( <c>TRUE</c>).</para>
            <para>If the function fails, it returns zero ( <c>FALSE</c>).</para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CertKeyUsage">
            <summary>The intended key usage.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertKeyUsage.CERT_DIGITAL_SIGNATURE_KEY_USAGE">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertKeyUsage.CERT_NON_REPUDIATION_KEY_USAGE">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertKeyUsage.CERT_KEY_ENCIPHERMENT_KEY_USAGE">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertKeyUsage.CERT_DATA_ENCIPHERMENT_KEY_USAGE">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertKeyUsage.CERT_KEY_AGREEMENT_KEY_USAGE">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertKeyUsage.CERT_KEY_CERT_SIGN_KEY_USAGE">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertKeyUsage.CERT_OFFLINE_CRL_SIGN_KEY_USAGE">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertKeyUsage.CERT_CRL_SIGN_KEY_USAGE">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertKeyUsage.CERT_ENCIPHER_ONLY_KEY_USAGE">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertKeyUsage.CERT_DECIPHER_ONLY_KEY_USAGE">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CertQueryContentFlags">
            <summary>Indicates the expected content type.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertQueryContentFlags.CERT_QUERY_CONTENT_FLAG_ALL">
            <summary>
            The content can be any type. This does not include the CERT_QUERY_CONTENT_FLAG_PFX_AND_LOAD flag.
            <para>
            If this flag is specified, this function will attempt to obtain information about the object, trying different content types
            until the proper content type is found or the content types are exhausted.This is obviously inefficient, so this flag should
            only be used if the content type is not known.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertQueryContentFlags.CERT_QUERY_CONTENT_FLAG_ALL_ISSUER_CERT">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertQueryContentFlags.CERT_QUERY_CONTENT_FLAG_CERT">
            <summary>The content is a single certificate.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertQueryContentFlags.CERT_QUERY_CONTENT_FLAG_CERT_PAIR">
            <summary>
            The content is an Abstract Syntax Notation One (ASN.1) encoded X509_CERT_PAIR (an encoded certificate pair that contains
            either forward, reverse, or forward and reverse cross certificates).
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertQueryContentFlags.CERT_QUERY_CONTENT_FLAG_CRL">
            <summary>The content is a single CRL.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertQueryContentFlags.CERT_QUERY_CONTENT_FLAG_CTL">
            <summary>The content is a single CTL.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertQueryContentFlags.CERT_QUERY_CONTENT_FLAG_PFX">
            <summary>
            The content is a PFX (PKCS #12) packet, but it will not be loaded by this function. You can use the PFXImportCertStore
            function to load this into a store.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertQueryContentFlags.CERT_QUERY_CONTENT_FLAG_PFX_AND_LOAD">
            <summary>
            The content is a PFX (PKCS #12) packet and will be loaded by this function subject to the conditions specified in the
            following note. <note>If the PFX packet contains an embedded password that is not an empty string or NULL, and the password
            was not protected to an Active Directory(AD) principal that includes the calling user, this function will not be able to
            decrypt the PFX packet.The packet can be decrypted, however, if the password used when the PFX packet was created was
            encrypted to an AD principal and the user, as part of that principal, has permission to decrypt the password. For more
            information, see the pvPara parameter and the PKCS12_PROTECT_TO_DOMAIN_SIDS flag of the PFXExportCertStoreEx function.
            <para>You can protect PFX passwords to an AD principal beginning in Windows 8 and Windows Server 2012.</para>
            </note>
            <para>Windows Server 2003 and Windows XP: This value is not supported.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertQueryContentFlags.CERT_QUERY_CONTENT_FLAG_PKCS10">
            <summary>The content is a PKCS #10 message.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertQueryContentFlags.CERT_QUERY_CONTENT_FLAG_PKCS7_SIGNED">
            <summary>The content is a PKCS #7 signed message.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertQueryContentFlags.CERT_QUERY_CONTENT_FLAG_PKCS7_SIGNED_EMBED">
            <summary>The content is an embedded PKCS #7 signed message.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertQueryContentFlags.CERT_QUERY_CONTENT_FLAG_PKCS7_UNSIGNED">
            <summary>The content is a PKCS #7 unsigned message.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertQueryContentFlags.CERT_QUERY_CONTENT_FLAG_SERIALIZED_CERT">
            <summary>The content is a serialized single certificate.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertQueryContentFlags.CERT_QUERY_CONTENT_FLAG_SERIALIZED_CRL">
            <summary>The content is a serialized single CRL.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertQueryContentFlags.CERT_QUERY_CONTENT_FLAG_SERIALIZED_CTL">
            <summary>The content is serialized single CTL.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertQueryContentFlags.CERT_QUERY_CONTENT_FLAG_SERIALIZED_STORE">
            <summary>The content is a serialized store.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CertQueryContentType">
            <summary>The actual type of the content.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertQueryContentType.CERT_QUERY_CONTENT_CERT">
            <summary>The content is a single certificate.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertQueryContentType.CERT_QUERY_CONTENT_CTL">
            <summary>The content is a single CTL.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertQueryContentType.CERT_QUERY_CONTENT_CRL">
            <summary>The content is a single CRL.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertQueryContentType.CERT_QUERY_CONTENT_SERIALIZED_STORE">
            <summary>The content is a serialized store.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertQueryContentType.CERT_QUERY_CONTENT_SERIALIZED_CERT">
            <summary>The content is a serialized single certificate.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertQueryContentType.CERT_QUERY_CONTENT_SERIALIZED_CTL">
            <summary>The content is a serialized single CTL.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertQueryContentType.CERT_QUERY_CONTENT_SERIALIZED_CRL">
            <summary>The content is a serialized single CRL.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertQueryContentType.CERT_QUERY_CONTENT_PKCS7_SIGNED">
            <summary>The content is a PKCS #7 signed message.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertQueryContentType.CERT_QUERY_CONTENT_PKCS7_UNSIGNED">
            <summary>The content is a PKCS #7 unsigned message.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertQueryContentType.CERT_QUERY_CONTENT_PKCS7_SIGNED_EMBED">
            <summary>The content is an embedded PKCS #7 signed message.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertQueryContentType.CERT_QUERY_CONTENT_PKCS10">
            <summary>The content is a PKCS #10 message.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertQueryContentType.CERT_QUERY_CONTENT_PFX">
            <summary>
            The content is a PFX (PKCS #12) packet. This function only verifies that the object is a PKCS #12 packet. The PKCS #12
            packet is not loaded into a certificate store.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertQueryContentType.CERT_QUERY_CONTENT_CERT_PAIR">
            <summary>The content is an ASN.1 encoded X509_CERT_pair.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertQueryContentType.CERT_QUERY_CONTENT_PFX_AND_LOAD">
            <summary>
            The content is a PFX (PKCS #12) packet, and it has been loaded into a certificate store.
            <para>Windows Server 2003 and Windows XP: This value is not supported.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CertQueryFormatFlags">
            <summary>Indicates the expected format of the returned type.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertQueryFormatFlags.CERT_QUERY_FORMAT_FLAG_BINARY">
            <summary>The content should be returned in binary format.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertQueryFormatFlags.CERT_QUERY_FORMAT_FLAG_BASE64_ENCODED">
            <summary>The content should be returned in Base64 encoded format.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertQueryFormatFlags.CERT_QUERY_FORMAT_FLAG_ASN_ASCII_HEX_ENCODED">
            <summary>The content should be returned in ASCII hex-encoded format with a "{ASN}" prefix.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertQueryFormatFlags.CERT_QUERY_FORMAT_FLAG_ALL">
            <summary>The content can be returned in any format.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CertQueryFormatType">
            <summary>The actual format type of the content.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertQueryFormatType.CERT_QUERY_FORMAT_BINARY">
            <summary>The content is in binary format.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertQueryFormatType.CERT_QUERY_FORMAT_BASE64_ENCODED">
            <summary>The content is in Base64 encoded format.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertQueryFormatType.CERT_QUERY_FORMAT_ASN_ASCII_HEX_ENCODED">
            <summary>The content is in ASCII hex-encoded format with an "{ASN}" prefix.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CertQueryObjectType">
            <summary>Indicates the type of the object to be queried.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertQueryObjectType.CERT_QUERY_OBJECT_FILE">
            <summary>The cert query object file</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertQueryObjectType.CERT_QUERY_OBJECT_BLOB">
            <summary>The cert query object BLOB</summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CertRDNAttrsFlag">
            <summary>RDN attribute flags.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertRDNAttrsFlag.CERT_UNICODE_IS_RDN_ATTRS_FLAG">
            <summary>The pRDN was initialized with Unicode strings</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertRDNAttrsFlag.CERT_CASE_INSENSITIVE_IS_RDN_ATTRS_FLAG">
            <summary>Do a case insensitive match.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CertRevocationType">
            <summary>Indicates the type of the context structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertRevocationType.CERT_CONTEXT_REVOCATION_TYPE">
            <summary>The revocation of certificates.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CertVerifyFlags">
            <summary>Indicates any special processing needs.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertVerifyFlags.CERT_VERIFY_REV_CHAIN_FLAG">
            <summary>
            Verification of the chain of certificates is done assuming each certificate except the first certificate is the issuer of
            the certificate that precedes it. If dwRevType is not CERT_CONTEXT_REVOCATION_TYPE, no assumptions are made about the order
            of the contexts.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertVerifyFlags.CERT_VERIFY_CACHE_ONLY_BASED_REVOCATION">
            <summary>Prevents the revocation handler from accessing any network-based resources for revocation checking.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertVerifyFlags.CERT_VERIFY_REV_ACCUMULATIVE_TIMEOUT_FLAG">
            <summary>When set, dwUrlRetrievalTimeout is the cumulative time-out across all URL wire retrievals.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertVerifyFlags.CERT_VERIFY_REV_SERVER_OCSP_FLAG">
            <summary>
            When set, this function only uses online certificate status protocol (OCSP) for revocation checking. If the certificate does
            not have any OCSP AIA URLs, the dwError member of the pRevStatus parameter is set to CRYPT_E_NOT_IN_REVOCATION_DATABASE.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertVerifyFlags.CERT_VERIFY_REV_NO_OCSP_FAILOVER_TO_CRL_FLAG">
            <summary>
            When set, only the OCSP AIA URL is used if present in the subject. If the subject doesn't have an OCSP AIA URL, then, the
            CDP URLs are used.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertVerifyFlags.CERT_VERIFY_REV_SERVER_OCSP_WIRE_ONLY_FLAG">
            <summary>When set, only wire retrieval for OCSP responses.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CRL_REASON">
            <summary>Specifies the cause of the error.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRL_REASON.CRL_REASON_UNSPECIFIED">
            <summary>No reason was specified for revocation.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRL_REASON.CRL_REASON_KEY_COMPROMISE">
            <summary>
            It is known or suspected that the subject's private key or other aspects of the subject validated in the certificate are compromised.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRL_REASON.CRL_REASON_CA_COMPROMISE">
            <summary>
            It is known or suspected that the CA's private key or other aspects of the CA validated in the certificate are compromised.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRL_REASON.CRL_REASON_AFFILIATION_CHANGED">
            <summary>
            The subject's name or other information in the certificate has been modified but there is no cause to suspect that the
            private key has been compromised.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRL_REASON.CRL_REASON_SUPERSEDED">
            <summary>The certificate has been superseded, but there is no cause to suspect that the private key has been compromised.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRL_REASON.CRL_REASON_CESSATION_OF_OPERATION">
            <summary>
            The certificate is no longer needed for the purpose for which it was issued, but there is no cause to suspect that the
            private key has been compromised.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRL_REASON.CRL_REASON_CERTIFICATE_HOLD">
            <summary>The certificate has been placed on hold.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRL_REASON.CRL_REASON_REMOVE_FROM_CRL">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRL_REASON.CRL_REASON_PRIVILEGE_WITHDRAWN">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRL_REASON.CRL_REASON_AA_COMPROMISE">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CryptFindFlags">
            <summary>A set of flags that modify the behavior of this function.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptFindFlags.CRYPT_FIND_USER_KEYSET_FLAG">
            <summary>Restricts the search to the user container. The default is to search both the user and machine containers.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptFindFlags.CRYPT_FIND_MACHINE_KEYSET_FLAG">
            <summary>Restricts the search to the machine container. The default is to search both the user and machine containers.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptFindFlags.CRYPT_FIND_SILENT_KEYSET_FLAG">
            <summary>
            The application requests that the CSP not display any user interface (UI) for this context. If the CSP must display the UI
            to operate, the call fails and the NTE_SILENT_CONTEXT error code is set as the last error.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptFindFlags.CRYPT_ACQUIRE_CACHE_FLAG">
            <summary>
            If a handle is already acquired and cached, that same handle is returned. Otherwise, a new handle is acquired and cached by
            using the certificate's CERT_KEY_CONTEXT_PROP_ID property.
            <para>
            When this flag is set, the pfCallerFreeProvOrNCryptKey parameter receives FALSE and the calling application must not release
            the handle. The handle is freed when the certificate context is freed; however, you must retain the certificate context
            referenced by the pCert parameter as long as the key is in use, otherwise operations that rely on the key will fail.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptFindFlags.CRYPT_ACQUIRE_USE_PROV_INFO_FLAG">
            <summary>
            Uses the certificate's CERT_KEY_PROV_INFO_PROP_ID property to determine whether caching should be accomplished. For more
            information about the CERT_KEY_PROV_INFO_PROP_ID property, see CertSetCertificateContextProperty.
            <para>
            This function will only use caching if during a previous call, the dwFlags member of the CRYPT_KEY_PROV_INFO structure
            contained CERT_SET_KEY_CONTEXT_PROP.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptFindFlags.CRYPT_ACQUIRE_COMPARE_KEY_FLAG">
            <summary>
            The public key in the certificate is compared with the public key returned by the cryptographic service provider (CSP). If
            the keys do not match, the acquisition operation fails and the last error code is set to NTE_BAD_PUBLIC_KEY. If a cached
            handle is returned, no comparison is made.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptFindFlags.CRYPT_ACQUIRE_NO_HEALING">
            <summary>
            This function will not attempt to re-create the CERT_KEY_PROV_INFO_PROP_ID property in the certificate context if this
            property cannot be retrieved.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptFindFlags.CRYPT_ACQUIRE_SILENT_FLAG">
            <summary>
            The CSP should not display any user interface (UI) for this context. If the CSP must display UI to operate, the call fails
            and the NTE_SILENT_CONTEXT error code is set as the last error.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptFindFlags.CRYPT_ACQUIRE_WINDOW_HANDLE_FLAG">
            <summary>
            Any UI that is needed by the CSP or KSP will be a child of the HWND that is supplied in the pvParameters parameter. For a
            CSP key, using this flag will cause the CryptSetProvParam function with the flag PP_CLIENT_HWND using this HWND to be called
            with NULL for HCRYPTPROV. For a KSP key, using this flag will cause the NCryptSetProperty function with the
            NCRYPT_WINDOW_HANDLE_PROPERTY flag to be called using the HWND.
            <para>Do not use this flag with CRYPT_ACQUIRE_SILENT_FLAG.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptFindFlags.CRYPT_ACQUIRE_NCRYPT_KEY_FLAGS_MASK">
            <summary>The crypt acquire ncrypt key flags mask</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptFindFlags.CRYPT_ACQUIRE_ALLOW_NCRYPT_KEY_FLAG">
            <summary>
            This function will attempt to obtain the key by using CryptoAPI. If that fails, this function will attempt to obtain the key
            by using the Cryptography API: Next Generation (CNG).
            <para>The CERT_KEY_PROV_INFO_PROP_ID property of the certificate is set to zero if CNG is used to obtain the key.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptFindFlags.CRYPT_ACQUIRE_PREFER_NCRYPT_KEY_FLAG">
            <summary>
            This function will attempt to obtain the key by using CNG. If that fails, this function will attempt to obtain the key by
            using CryptoAPI.
            <para>The CERT_KEY_PROV_INFO_PROP_ID property of the certificate is set to zero if CNG is used to obtain the key.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptFindFlags.CRYPT_ACQUIRE_ONLY_NCRYPT_KEY_FLAG">
            <summary>
            This function will only attempt to obtain the key by using CNG and will not use CryptoAPI to obtain the key.
            <para>The CERT_KEY_PROV_INFO_PROP_ID property of the certificate is set to zero if CNG is used to obtain the key.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CryptOIDInfoFlags">
            <summary>
            Indicates how the public key information is exported. The flag value is passed directly to the CryptFindOIDInfo function when
            mapping the public key object identifier to the corresponding CNG public key algorithm Unicode string.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptOIDInfoFlags.CRYPT_OID_INFO_OID_KEY">
            <summary>pvKey is the address of a null-terminated ANSI string that contains the OID string to find.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptOIDInfoFlags.CRYPT_OID_INFO_NAME_KEY">
            <summary>pvKey is the address of a null-terminated Unicode string that contains the name to find.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptOIDInfoFlags.CRYPT_OID_INFO_ALGID_KEY">
            <summary>pvKey is the address of an ALG_IDvariable.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptOIDInfoFlags.CRYPT_OID_INFO_SIGN_KEY">
            <summary>
            pvKey is the address of an array of two ALG_IDs where the first element contains the hash algorithm identifier and the
            second element contains the public key algorithm identifier.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptOIDInfoFlags.CRYPT_OID_INFO_CNG_ALGID_KEY">
            <summary>
            pvKey is the address of a null-terminated Unicode string that contains the CNG algorithm identifier to find. This can be one
            of the predefined CNG Algorithm Identifiers or another registered algorithm identifier.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptOIDInfoFlags.CRYPT_OID_INFO_CNG_SIGN_KEY">
            <summary>
            pvKey is the address of an array of two null-terminated Unicode string pointers where the first string contains the hash CNG
            algorithm identifier and the second string contains the public key CNG algorithm identifier. These can be from the
            predefined CNG Algorithm Identifiers or another registered algorithm identifier.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptOIDInfoFlags.CRYPT_OID_INFO_PUBKEY_SIGN_KEY_FLAG">
            <summary>
            Skips public keys in the CRYPT_PUBKEY_ALG_OID_GROUP_ID group explicitly flagged with the CRYPT_OID_PUBKEY_ENCRYPT_ONLY_FLAG flag.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptOIDInfoFlags.CRYPT_OID_INFO_PUBKEY_ENCRYPT_KEY_FLAG">
            <summary>
            Skips public keys in the CRYPT_PUBKEY_ALG_OID_GROUP_ID group explicitly flagged with the CRYPT_OID_PUBKEY_SIGN_ONLY_FLAG flag.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CryptVerifyCertSignFlags">
            <summary>Flags that modify the function behavior.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptVerifyCertSignFlags.CRYPT_VERIFY_CERT_SIGN_DISABLE_MD2_MD4_FLAG">
            <summary>
            If you set this flag and CryptVerifyCertificateSignatureEx detects an MD2 or MD4 algorithm, the function returns FALSE and
            sets GetLastError to NTE_BAD_ALGID. The signature is still verified, but this combination of errors enables the caller, now
            knowing that an MD2 or MD4 algorithm was used, to decide whether to trust or reject the signature.
            <para>Windows 8 and Windows Server 2012: Support for this flag begins.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptVerifyCertSignFlags.CRYPT_VERIFY_CERT_SIGN_SET_STRONG_PROPERTIES_FLAG">
            <summary>
            Sets strong signature properties, after successful verification, on the subject pointed to by the pvSubject parameter.
            <para>The following property is set on the certificate context:</para>
            <para>CERT_SIGN_HASH_CNG_ALG_PROP_ID</para>
            <para>The following properties are set on the CRL context:</para>
            <para>CERT_SIGN_HASH_CNG_ALG_PROP_ID</para>
            <para>CERT_ISSUER_PUB_KEY_BIT_LENGTH_PROP_ID</para>
            <para>Note This flag is only applicable if CRYPT_VERIFY_CERT_SIGN_SUBJECT_CRL is specified in the dwSubjectType parameter.</para>
            <para>Windows 8 and Windows Server 2012: Support for this flag begins.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptVerifyCertSignFlags.CRYPT_VERIFY_CERT_SIGN_RETURN_STRONG_PROPERTIES_FLAG">
            <summary>
            Returns a pointer to a CRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO structure in the pvExtra parameter. The structure
            contains the length, in bits, of the public key and the names of the signing and hashing algorithms used.
            <para>
            You must call CryptMemFree to free the structure. If memory cannot be allocated for the
            CRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO structure, this function returns successfully but sets the pvExtra parameter
            to NULL.
            </para>
            <para>
            Note This flag is only applicable if CRYPT_VERIFY_CERT_SIGN_SUBJECT_OCSP_BASIC_SIGNED_RESPONSE is specified in the
            dwSubjectType parameter.
            </para>
            <para>Windows 8 and Windows Server 2012: Support for this flag begins.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CryptVerifyCertSignIssuer">
            <summary>The issuer type.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptVerifyCertSignIssuer.CRYPT_VERIFY_CERT_SIGN_ISSUER_PUBKEY">
            <summary>pvIssuer is a pointer to a CERT_PUBLIC_KEY_INFOstructure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptVerifyCertSignIssuer.CRYPT_VERIFY_CERT_SIGN_ISSUER_CERT">
            <summary>pvIssuer is a pointer to a CCERT_CONTEXTstructure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptVerifyCertSignIssuer.CRYPT_VERIFY_CERT_SIGN_ISSUER_CHAIN">
            <summary>pvIssuer is a pointer to a CCERT_CHAIN_CONTEXTstructure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptVerifyCertSignIssuer.CRYPT_VERIFY_CERT_SIGN_ISSUER_NULL">
            <summary>pvIssuer must be NULL.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CryptVerifyCertSignSubject">
            <summary>The subject type.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptVerifyCertSignSubject.CRYPT_VERIFY_CERT_SIGN_SUBJECT_BLOB">
            <summary>pvSubject is a pointer to a CRYPT_DATA_BLOBstructure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptVerifyCertSignSubject.CRYPT_VERIFY_CERT_SIGN_SUBJECT_CERT">
            <summary>pvSubject is a pointer to a CCERT_CONTEXTstructure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptVerifyCertSignSubject.CRYPT_VERIFY_CERT_SIGN_SUBJECT_CRL">
            <summary>pvSubject is a pointer to a CCRL_CONTEXTstructure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptVerifyCertSignSubject.CRYPT_VERIFY_CERT_SIGN_SUBJECT_OCSP_BASIC_SIGNED_RESPONSE">
            <summary>
            pvSubject is a pointer to an OCSP_BASIC_SIGNED_RESPONSE_INFO structure.
            <para>Windows Server 2003 and Windows XP: This subject type is not supported.</para>
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertCompareCertificate(Vanara.PInvoke.Crypt32.CertEncodingType,Vanara.PInvoke.Crypt32.CERT_INFO@,Vanara.PInvoke.Crypt32.CERT_INFO@)">
            <summary>
            <para>
            The <c>CertCompareCertificate</c> function determines whether two certificates are identical by comparing the issuer name and
            serial number of the certificates.
            </para>
            <para>
            <c>Caution</c> The <c>CertCompareCertificate</c> function must not be used for security assertions because it does not compare BLOBs.
            </para>
            </summary>
            <param name="dwCertEncodingType">
            <para>
            Specifies the encoding type used. It is always acceptable to specify both the certificate and message encoding types by
            combining them with a bitwise- <c>OR</c> operation as shown in the following example:
            </para>
            <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are:</para>
            <list type="bullet">
            <item>
            <term>X509_ASN_ENCODING</term>
            </item>
            <item>
            <term>PKCS_7_ASN_ENCODING</term>
            </item>
            </list>
            </param>
            <param name="pCertId1">A pointer to the CERT_INFO for the first certificate in the comparison.</param>
            <param name="pCertId2">A pointer to the CERT_INFO for the second certificate in the comparison.</param>
            <returns>
            <para>If the certificates are identical and the function succeeds, the function returns nonzero ( <c>TRUE</c>).</para>
            <para>If the function fails, it returns zero ( <c>FALSE</c>).</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertCompareCertificateName(Vanara.PInvoke.Crypt32.CertEncodingType,Vanara.PInvoke.Crypt32.CRYPTOAPI_BLOB@,Vanara.PInvoke.Crypt32.CRYPTOAPI_BLOB@)">
            <summary>
            The <c>CertCompareCertificateName</c> function compares two certificate CERT_NAME_BLOB structures to determine whether they are
            identical. The <c>CERT_NAME_BLOB</c> structures are used for the subject and the issuer of certificates.
            </summary>
            <param name="dwCertEncodingType">
            <para>
            Specifies the encoding type used. It is always acceptable to specify both the certificate and message encoding types by
            combining them with a bitwise- <c>OR</c> operation as shown in the following example:
            </para>
            <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are:</para>
            <list type="bullet">
            <item>
            <term>X509_ASN_ENCODING</term>
            </item>
            <item>
            <term>PKCS_7_ASN_ENCODING</term>
            </item>
            </list>
            </param>
            <param name="pCertName1">A pointer to a CERT_NAME_BLOB for the first name in the comparison. For more information, see CRYPT_INTEGER_BLOB.</param>
            <param name="pCertName2">A pointer to a CERT_NAME_BLOB for the second name in the comparison.</param>
            <returns>
            <para>If the names are identical and the function succeeds, the function returns nonzero ( <c>TRUE</c>).</para>
            <para>If the function fails, it returns zero ( <c>FALSE</c>).</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertCompareIntegerBlob(Vanara.PInvoke.Crypt32.CRYPTOAPI_BLOB@,Vanara.PInvoke.Crypt32.CRYPTOAPI_BLOB@)">
            <summary>
            The <c>CertCompareIntegerBlob</c> function compares two integer BLOBs to determine whether they represent equal numeric values.
            </summary>
            <param name="pInt1">A pointer to a CRYPT_INTEGER_BLOB structure that contains the first integer in the comparison.</param>
            <param name="pInt2">A pointer to a CRYPT_INTEGER_BLOB structure that contains the second integer in the comparison.</param>
            <returns>
            <para>If the representations of the integer BLOBs are identical and the function succeeds, the function returns nonzero ( <c>TRUE</c>).</para>
            <para>If the function fails, it returns zero ( <c>FALSE</c>). For extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            Before doing the comparison, most significant bytes with a value of 0x00 are removed from a positive number. Positive here means
            that the most significant bit in the next nonzero byte is not set.
            </para>
            <para>
            Most significant bytes with a value of 0xFF are removed from a negative number. Negative here means that the most significant
            bit in the next non-0xFF byte is set. This produces the unique representation of that integer, as shown in the following table.
            </para>
            <list type="table">
            <listheader>
            <term>Original bytes</term>
            <term>Reduced form</term>
            </listheader>
            <item>
            <term>0xFFFFFF88</term>
            <term>0xFF88</term>
            </item>
            <item>
            <term>0xFF23</term>
            <term>0xFF23</term>
            </item>
            <item>
            <term>0x007F</term>
            <term>0x7F</term>
            </item>
            <item>
            <term>0x00000080</term>
            <term>0x80</term>
            </item>
            </list>
            <para>
            Multiple-byte integers are treated as little-endian. The least significant byte is pbData[0]. The most significant byte is
            pbData[cbData - 1], that is, 0xFFFFFF88 is stored in four bytes as:
            </para>
            <para>{0x88, 0xFF, 0xFF, 0xFF}</para>
            <para>Examples</para>
            <para>For an example that uses this function, see Example C Program: Using CertOIDToAlgId and CertCompareIntegerBlob.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertComparePublicKeyInfo(Vanara.PInvoke.Crypt32.CertEncodingType,Vanara.PInvoke.Crypt32.CERT_PUBLIC_KEY_INFO@,Vanara.PInvoke.Crypt32.CERT_PUBLIC_KEY_INFO@)">
            <summary>The <c>CertComparePublicKeyInfo</c> function compares two encoded public keys to determine whether they are identical.</summary>
            <param name="dwCertEncodingType">
            <para>
            Specifies the encoding type used. It is always acceptable to specify both the certificate and message encoding types by
            combining them with a bitwise- <c>OR</c> operation as shown in the following example:
            </para>
            <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are:</para>
            <list type="bullet">
            <item>
            <term>X509_ASN_ENCODING</term>
            </item>
            <item>
            <term>PKCS_7_ASN_ENCODING</term>
            </item>
            </list>
            </param>
            <param name="pPublicKey1">A pointer to the CERT_PUBLIC_KEY_INFO for the first public key in the comparison.</param>
            <param name="pPublicKey2">A pointer to the CERT_PUBLIC_KEY_INFO for the second public key in the comparison.</param>
            <returns>
            <para>If the public keys are identical and the function succeeds, the function returns nonzero ( <c>TRUE</c>).</para>
            <para>If the function fails, it returns zero ( <c>FALSE</c>).</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertFindAttribute(Vanara.PInvoke.Crypt32.SafeOID,System.UInt32,Vanara.PInvoke.Crypt32.CRYPT_ATTRIBUTE[])">
            <summary>
            The <c>CertFindAttribute</c> function finds the first attribute in the CRYPT_ATTRIBUTE array, as identified by its object
            identifier (OID). This function can be used in the processing of a decoded certificate request. A CERT_REQUEST_INFO structure is
            derived from a decoded certificate request. The <c>rgAttribute</c> array is retrieved from that structure and passed to this
            function in the rgAttr parameter. This function determines whether a particular attribute is in the array, and if so, returns a
            pointer to it.
            </summary>
            <param name="pszObjId">A pointer to the object identifier (OID) to use in the search.</param>
            <param name="cAttr">Number of attributes in the rgAttr array.</param>
            <param name="rgAttr">Array of CRYPT_ATTRIBUTE structures.</param>
            <returns>Returns a pointer to the attribute, if one is found. Otherwise, <c>NULL</c> is returned.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertFindAttribute(System.String,Vanara.PInvoke.Crypt32.CRYPT_ATTRIBUTE[])">
            <summary>
            The <c>CertFindAttribute</c> function finds the first attribute in the CRYPT_ATTRIBUTE array, as identified by its object
            identifier (OID). This function can be used in the processing of a decoded certificate request. A CERT_REQUEST_INFO structure is
            derived from a decoded certificate request. The <c>rgAttribute</c> array is retrieved from that structure and passed to this
            function in the rgAttr parameter. This function determines whether a particular attribute is in the array, and if so, returns a
            reference to it.
            </summary>
            <param name="pszObjId">The object identifier (OID) to use in the search.</param>
            <param name="rgAttr">Array of CRYPT_ATTRIBUTE structures.</param>
            <returns>Returns a reference to the attribute, if one is found. Otherwise, <see langword="null"/> is returned.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertFindExtension(Vanara.PInvoke.Crypt32.SafeOID,System.UInt32,Vanara.PInvoke.Crypt32.CERT_EXTENSION[])">
            <summary>
            The <c>CertFindExtension</c> function finds the first extension in the CERT_EXTENSION array, as identified by its object
            identifier (OID). This function can be used in the processing of a decoded certificate. A CERT_INFO structure is derived from a
            decoded certificate. The <c>CERT_INFO</c> structure's <c>rgExtension</c> member is passed to <c>CertFindExtension</c> in the
            rgExtensions parameter. This function determines whether a particular extension is in the array, and if so, returns a pointer to it
            </summary>
            <param name="pszObjId">A pointer to the object identifier (OID) to use in the search.</param>
            <param name="cExtensions">Number of extensions in the rgExtensions array.</param>
            <param name="rgExtensions">Array of CERT_EXTENSION structures.</param>
            <returns>Returns a pointer to the extension, if one is found. Otherwise, <c>NULL</c> is returned.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertFindExtension(System.String,Vanara.PInvoke.Crypt32.CERT_EXTENSION[])">
            <summary>
            The <c>CertFindExtension</c> function finds the first extension in the CERT_EXTENSION array, as identified by its object
            identifier (OID). This function can be used in the processing of a decoded certificate. A CERT_INFO structure is derived from a
            decoded certificate. The <c>CERT_INFO</c> structure's <c>rgExtension</c> member is passed to <c>CertFindExtension</c> in the
            rgExtensions parameter. This function determines whether a particular extension is in the array, and if so, returns a reference
            to it
            </summary>
            <param name="pszObjId">A pointer to the object identifier (OID) to use in the search.</param>
            <param name="rgExtensions">Array of CERT_EXTENSION structures.</param>
            <returns>Returns a reference to the extension, if one is found. Otherwise, <see langword="null"/> is returned.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertFindRDNAttr(Vanara.PInvoke.Crypt32.SafeOID,Vanara.PInvoke.Crypt32.CERT_NAME_INFO@)">
            <summary>
            The <c>CertFindRDNAttr</c> function finds the first RDN attribute identified by its object identifier (OID) in a list of the
            Relative Distinguished Names (RDN).
            </summary>
            <param name="pszObjId">A pointer to the object identifier (OID) to use In the search.</param>
            <param name="pName">A pointer to a CERT_NAME_INFO structure containing the list of the Relative Distinguished Names to be searched.</param>
            <returns>Returns a pointer to the attribute, if one is found. Otherwise, <c>NULL</c> is returned.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertGetIntendedKeyUsage(Vanara.PInvoke.Crypt32.CertEncodingType,Vanara.PInvoke.Crypt32.CERT_INFO@,Vanara.PInvoke.Crypt32.CertKeyUsage@,System.UInt32)">
            <summary>
            The <c>CertGetIntendedKeyUsage</c> function acquires the intended key usage bytes from a certificate. The intended key usage can
            be in either the szOID_KEY_USAGE ("2.5.29.15") or szOID_KEY_ATTRIBUTES ("2.5.29.2") extension.
            </summary>
            <param name="dwCertEncodingType">
            <para>
            Specifies the encoding type used. It is always acceptable to specify both the certificate and message encoding types by
            combining them with a bitwise- <c>OR</c> operation as shown in the following example:
            </para>
            <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are:</para>
            <list type="bullet">
            <item>
            <term>X509_ASN_ENCODING</term>
            </item>
            <item>
            <term>PKCS_7_ASN_ENCODING</term>
            </item>
            </list>
            </param>
            <param name="pCertInfo">A pointer to CERT_INFO structure of the specified certificate.</param>
            <param name="pbKeyUsage">
            <para>
            A pointer to a buffer to receive the intended key usage. The following list shows currently defined values. These can be
            combined by using bitwise- <c>OR</c> operations.
            </para>
            <list type="bullet">
            <item>
            <term>CERT_DATA_ENCIPHERMENT_KEY_USAGE</term>
            </item>
            <item>
            <term>CERT_DIGITAL_SIGNATURE_KEY_USAGE</term>
            </item>
            <item>
            <term>CERT_KEY_AGREEMENT_KEY_USAGE</term>
            </item>
            <item>
            <term>CERT_KEY_CERT_SIGN_KEY_USAGE</term>
            </item>
            <item>
            <term>CERT_KEY_ENCIPHERMENT_KEY_USAGE</term>
            </item>
            <item>
            <term>CERT_NON_REPUDIATION_KEY_USAGE</term>
            </item>
            <item>
            <term>CERT_OFFLINE_CRL_SIGN_KEY_USAGE</term>
            </item>
            </list>
            </param>
            <param name="cbKeyUsage">
            The size, in bytes, of the buffer pointed to by pbKeyUsage. Currently, the intended key usage occupies 1 or 2 bytes of data.
            </param>
            <returns>
            <para>
            If the certificate does not have any intended key usage bytes, <c>FALSE</c> is returned and pbKeyUsage is zeroed. Otherwise,
            <c>TRUE</c> is returned and up to cbKeyUsage number of bytes are copied into pbKeyUsage. Any remaining bytes not copied are zeroed.
            </para>
            <para>GetLastError returns zero if none of the required extensions is found.</para>
            <para>
            If the function fails, GetLastError may return an Abstract Syntax Notation One (ASN.1) encoding/decoding error. For information
            about these errors, see ASN.1 Encoding/Decoding Return Values.
            </para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertGetPublicKeyLength(Vanara.PInvoke.Crypt32.CertEncodingType,Vanara.PInvoke.Crypt32.CERT_PUBLIC_KEY_INFO@)">
            <summary>The <c>CertGetPublicKeyLength</c> function acquires the bit length of public/private keys from a public key BLOB.</summary>
            <param name="dwCertEncodingType">
            <para>
            Specifies the encoding type used. It is always acceptable to specify both the certificate and message encoding types by
            combining them with a bitwise- <c>OR</c> operation as shown in the following example:
            </para>
            <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are:</para>
            <list type="bullet">
            <item>
            <term>X509_ASN_ENCODING</term>
            </item>
            <item>
            <term>PKCS_7_ASN_ENCODING</term>
            </item>
            </list>
            </param>
            <param name="pPublicKey">A pointer to the public key BLOB containing the keys for which the length is being retrieved.</param>
            <returns>
            <para>Returns the length of the public/private keys in bits. If unable to determine the key's length, returns zero.</para>
            <para>Call GetLastError to see the reason for any failures.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertIsRDNAttrsInCertificateName(Vanara.PInvoke.Crypt32.CertEncodingType,Vanara.PInvoke.Crypt32.CertRDNAttrsFlag,Vanara.PInvoke.Crypt32.CRYPTOAPI_BLOB@,Vanara.PInvoke.Crypt32.CERT_RDN[])">
            <summary>
            The <c>CertIsRDNAttrsInCertificateName</c> function compares the attributes in the certificate name with the specified CERT_RDN
            to determine whether all attributes are included there. The comparison iterates through the <c>CERT_RDN</c> and looks for an
            attribute match in any of the <c>CERT_RDN</c> s of the certificate name.
            </summary>
            <param name="dwCertEncodingType">
            <para>
            Specifies the encoding type used. It is always acceptable to specify both the certificate and message encoding types by
            combining them with a bitwise- <c>OR</c> operation as shown in the following example:
            </para>
            <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING</para>
            <para>Currently defined encoding types are:</para>
            <list type="bullet">
            <item>
            <term>X509_ASN_ENCODING</term>
            </item>
            <item>
            <term>PKCS_7_ASN_ENCODING</term>
            </item>
            </list>
            </param>
            <param name="dwFlags">
            <para>
            CERT_UNICODE_IS_RDN_ATTRS_FLAG must be set if the pRDN was initialized with Unicode strings as in CryptEncodeObject with
            lpszStructType set to X509_UNICODE_NAME.
            </para>
            <para>
            CERT_CASE_INSENSITIVE_IS_RDN_ATTRS_FLAG is set to do a case insensitive match. Otherwise, an exact, case sensitive match is done.
            </para>
            </param>
            <param name="pCertName">A pointer to a CRYPT_INTEGER_BLOB that contains the encoded subject or issuer name.</param>
            <param name="pRDN">
            <para>
            Array of CERT_RDN structures that contain the attributes to be found in the name. The CERT_RDN_ATTR member of the
            <c>CERT_RDN</c> structure behaves according to the following rules.
            </para>
            <list type="bullet">
            <item>
            <term>If <c>pszObjId</c> is <c>NULL</c>, the attribute object identifier (OID) is ignored.</term>
            </item>
            <item>
            <term>If <c>dwValueType</c> is CERT_RDN_ANY_TYPE, the value type is ignored.</term>
            </item>
            <item>
            <term>If the <c>pbData</c> member of <c>Value</c> is <c>NULL</c>, any value can be a match.</term>
            </item>
            </list>
            </param>
            <returns>
            <para>
            If the function succeeds and all of the RDN values in the specified CERT_RDN are in the certificate name, the return value is
            nonzero ( <c>TRUE</c>).
            </para>
            <para>
            If the function fails, or if there are RDN values in the specified CERT_RDN that are not in the certificate name, the return
            value is zero ( <c>FALSE</c>). For extended error information, call GetLastError.
            </para>
            <para>The following table lists some possible error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>CRYPT_E_NO_MATCH</term>
            <term>Not all the attributes were found and matched.</term>
            </item>
            <item>
            <term>ERROR_FILE_NOT_FOUND</term>
            <term>Invalid certificate encoding type. Currently only X509_ASN_ENCODING is supported.</term>
            </item>
            </list>
            <para>
            If the function fails, GetLastError may return an Abstract Syntax Notation One (ASN.1) encoding/decoding error. For information
            about these errors, see ASN.1 Encoding/Decoding Return Values.
            </para>
            </returns>
            <remarks>Currently, only an exact, case-sensitive match is supported.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertIsStrongHashToSign(Vanara.PInvoke.Crypt32.CERT_STRONG_SIGN_PARA@,System.String,Vanara.PInvoke.Crypt32.PCCERT_CONTEXT)">
            <summary>
            Determines whether the specified hash algorithm and the public key in the signing certificate can be used to perform strong signing.
            </summary>
            <param name="pStrongSignPara">
            Pointer to a CERT_STRONG_SIGN_PARA structure that contains information about supported signing and hashing algorithms.
            </param>
            <param name="pwszCNGHashAlgid">
            <para>Pointer to a Unicode string that contains the name of the hashing algorithm. The following algorithms are supported:</para>
            <list type="bullet">
            <item>
            <term>L"MD5" (BCRYPT_MD5_ALGORITHM)</term>
            </item>
            <item>
            <term>L"SHA1" (BCRYPT_SHA1_ALGORITHM)</term>
            </item>
            <item>
            <term>L"SHA256" (BCRYPT_SHA256_ALGORITHM)</term>
            </item>
            <item>
            <term>L"SHA256" (BCRYPT_SHA256_ALGORITHM)</term>
            </item>
            <item>
            <term>L"SHA512" (BCRYPT_SHA512_ALGORITHM)</term>
            </item>
            </list>
            </param>
            <param name="pSigningCert">
            <para>
            Pointer to a CERT_CONTEXT structure that contains the signing certificate. The public key algorithm in the signing certificate
            is checked for strength. The public key (asymmetric) algorithm is used for signing. The following signature algorithms are supported:
            </para>
            <list type="bullet">
            <item>
            <term>L"RSA" (BCRYPT_RSA_ALGORITHM)</term>
            </item>
            <item>
            <term>L"DSA" (BCRYPT_DSA_ALGORITHM)</term>
            </item>
            <item>
            <term>L"ECDSA" (SSL_ECDSA_ALGORITHM)</term>
            </item>
            </list>
            <para>This parameter can be</para>
            <para>NULL</para>
            <para>if you want to check only whether the hashing algorithm is strong.</para>
            </param>
            <returns>
            <para>If the function succeeds, the function returns <c>TRUE</c>.</para>
            <para>
            If the function fails, it returns <c>FALSE</c>. For extended error information, call GetLastError. This function has the
            following error codes.
            </para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>E_INVALIDARG</term>
            <term>One or more of the input arguments is not correct.</term>
            </item>
            <item>
            <term>NTE_BAD_ALGID</term>
            <term>A specified algorithm is not supported.</term>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertVerifyCRLRevocation(Vanara.PInvoke.Crypt32.CertEncodingType,Vanara.PInvoke.Crypt32.CERT_INFO@,System.UInt32,System.IntPtr[])">
            <summary>
            The <c>CertVerifyCRLRevocation</c> function check a certificate revocation list (CRL) to determine whether a subject's
            certificate has or has not been revoked. The new Certificate Chain Verification Functions are recommended instead of the use of
            this function.
            </summary>
            <param name="dwCertEncodingType">
            <para>
            Specifies the encoding type used. It is always acceptable to specify both the certificate and message encoding types by
            combining them with a bitwise- <c>OR</c> operation as shown in the following example:
            </para>
            <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING</para>
            <para>Currently defined encoding types are:</para>
            <list type="bullet">
            <item>
            <term>X509_ASN_ENCODING</term>
            </item>
            <item>
            <term>PKCS_7_ASN_ENCODING</term>
            </item>
            </list>
            </param>
            <param name="pCertId">A pointer to the CERT_INFO structure of the certificate to be checked against the CRL.</param>
            <param name="cCrlInfo">Number of CRL_INFO pointers in the rgpCrlInfo array.</param>
            <param name="rgpCrlInfo">Array of pointers to CRL_INFO structures.</param>
            <returns>
            <para>Returns <c>TRUE</c> if the certificate is not on the CRL and therefore is valid.</para>
            <para>It returns <c>FALSE</c> if the certificate is on the list and therefore has been revoked and is not valid.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertVerifyCRLTimeValidity(System.Runtime.InteropServices.ComTypes.FILETIME@,Vanara.PInvoke.Crypt32.CRL_INFO@)">
            <summary>The <c>CertVerifyCRLTimeValidity</c> function verifies the time validity of a CRL.</summary>
            <param name="pTimeToVerify">
            A pointer to FILETIME structure containing the time to be used in the verification. If set to <c>NULL</c>, the current time is used.
            </param>
            <param name="pCrlInfo">A pointer to a CRL_INFO structure containing the CRL for which the time is to be verified.</param>
            <returns>
            Returns a minus one (–1) if the comparison time is before the <c>ThisUpdate</c> member of the CRL_INFO pointed to by pCrlInfo.
            Returns a plus one (+1) if the comparison time is after the <c>NextUpdate</c> time. Returns zero for valid time for the CRL.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertVerifyRevocation(Vanara.PInvoke.Crypt32.CertEncodingType,Vanara.PInvoke.Crypt32.CertRevocationType,System.UInt32,System.IntPtr[],Vanara.PInvoke.Crypt32.CertVerifyFlags,Vanara.PInvoke.Crypt32.CERT_REVOCATION_PARA@,Vanara.PInvoke.Crypt32.CERT_REVOCATION_STATUS@)">
            <summary>
            The <c>CertVerifyRevocation</c> function checks the revocation status of the certificates contained in the rgpvContext array. If
            a certificate in the list is found to be revoked, no further checking is done. This array can be a chain of certificates
            propagating upward from an end entity to the root authority, but this nature of the list of certificates is not required or assumed.
            </summary>
            <param name="dwEncodingType">
            Specifies the encoding type used. Currently, only X509_ASN_ENCODING and PKCS_7_ASN_ENCODING are being used; however, additional
            encoding types may be added in the future. For either current encoding type, use X509_ASN_ENCODING | PKCS_7_ASN_ENCODING.
            </param>
            <param name="dwRevType">
            Indicates the type of the context structure passed in rgpvContext. Currently only CERT_CONTEXT_REVOCATION_TYPE, the revocation
            of certificates, is defined.
            </param>
            <param name="cContext">Count of elements in the rgpvContext array.</param>
            <param name="rgpvContext">
            <para>
            When the dwRevType is CERT_CONTEXT_REVOCATION_TYPE, rgpvContext is an array of pointers to CERT_CONTEXT structures. These
            contexts must contain sufficient information to allow the installable or registered revocation DLLs to find the revocation
            server. This information would normally be conveyed in an extension such as the CRLDistributionsPoints extension defined by the
            Internet Engineering Task Force (IETF) in PKIX Part 1.
            </para>
            <para>For efficiency, the more contexts that are passed in at one time, the better.</para>
            </param>
            <param name="dwFlags">
            <para>Indicates any special processing needs. This parameter can be one of the following flags.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_VERIFY_REV_CHAIN_FLAG</term>
            <term>
            Verification of the chain of certificates is done assuming each certificate except the first certificate is the issuer of the
            certificate that precedes it. If dwRevType is not CERT_CONTEXT_REVOCATION_TYPE, no assumptions are made about the order of the contexts.
            </term>
            </item>
            <item>
            <term>CERT_VERIFY_CACHE_ONLY_BASED_REVOCATION</term>
            <term>Prevents the revocation handler from accessing any network-based resources for revocation checking.</term>
            </item>
            <item>
            <term>CERT_VERIFY_REV_ACCUMULATIVE_TIMEOUT_FLAG</term>
            <term>When set, dwUrlRetrievalTimeout is the cumulative time-out across all URL wire retrievals.</term>
            </item>
            <item>
            <term>CERT_VERIFY_REV_SERVER_OCSP_FLAG</term>
            <term>
            When set, this function only uses online certificate status protocol (OCSP) for revocation checking. If the certificate does not
            have any OCSP AIA URLs, the dwError member of the pRevStatus parameter is set to CRYPT_E_NOT_IN_REVOCATION_DATABASE.
            </term>
            </item>
            </list>
            </param>
            <param name="pRevPara">Optionally set to assist in finding the issuer. For details, see the CERT_REVOCATION_PARA structure.</param>
            <param name="pRevStatus">
            <para>
            Only the <c>cbSize</c> member of the CERT_REVOCATION_STATUS pointed to by pRevStatus needs to be set before
            <c>CertVerifyRevocation</c> is called.
            </para>
            <para>
            If the function returns <c>FALSE</c>, this structure's members will contain error status information. For more information, see
            CERT_REVOCATION_STATUS. For a description of how pRevStatus is updated when a revocation verification problem is encountered,
            see Remarks.
            </para>
            </param>
            <returns>
            <para>
            If the function successfully checks all of the contexts and none were revoked, the function returns <c>TRUE</c>. If the function
            fails, it returns <c>FALSE</c> and updates the CERT_REVOCATION_STATUS structure pointed to by pRevStatus as described in <c>CERT_REVOCATION_STATUS</c>.
            </para>
            <para>
            When the revocation handler for any of the contexts returns <c>FALSE</c> due to an error, the <c>dwError</c> member in the
            structure pointed to by pRevStatus will be set by the handler to specify which error was encountered. GetLastError returns an
            error code equal to the error specified in the <c>dwError</c> member of the CERT_REVOCATION_STATUS structure.
            <c>GetLastError</c> can be one of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>CRYPT_E_NO_REVOCATION_CHECK</term>
            <term>An installed or registered revocation function was not able to do a revocation check on the context.</term>
            </item>
            <item>
            <term>CRYPT_E_NO_REVOCATION_DLL</term>
            <term>No installed or registered DLL was found that was able to verify revocation.</term>
            </item>
            <item>
            <term>CRYPT_E_NOT_IN_REVOCATION_DATABASE</term>
            <term>The context to be checked was not found in the revocation server's database.</term>
            </item>
            <item>
            <term>CRYPT_E_REVOCATION_OFFLINE</term>
            <term>It was not possible to connect to the revocation server.</term>
            </item>
            <item>
            <term>CRYPT_E_REVOKED</term>
            <term>The context was revoked. dwReason in pRevStatus contains the reason for revocation.</term>
            </item>
            <item>
            <term>ERROR_SUCCESS</term>
            <term>The context was good.</term>
            </item>
            <item>
            <term>E_INVALIDARG</term>
            <term>
            cbSize in pRevStatus is less than sizeof(CERT_REVOCATION_STATUS). Note that dwError in pRevStatus is not updated for this error.
            </term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The following example shows how pRevStatus is updated when a revocation verification problem is encountered:</para>
            <para>Consider the case where cContext is four:</para>
            <para>
            If <c>CertVerifyRevocation</c> can verify that rgpvContext[0] and rgpvContext[1] are not revoked, but cannot check
            rgpvContext[2], the pRevStatus member <c>dwIndex</c> is set to two, indicating that the context at index two has the problem,
            the <c>dwError</c> member of pRevStatus is set to CRYPT_E_NO_REVOCATION_CHECK, and <c>FALSE</c> is returned.
            </para>
            <para>
            If rgpvContext[2] is found to be revoked, the <c>dwIndex</c> member of pRevStatus is set to two, and the <c>dwError</c> member
            of pRevStatus is set to CRYPT_E_REVOKED, <c>dwReason</c> is updated, and <c>FALSE</c> is returned.
            </para>
            <para>
            In either case, both rgpvContext[0] and rgpvContext[1] are verified not to be revoked, rgpvContext[2] is the last array index
            checked, and rgpvContext[3] has not been checked at all.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertVerifyTimeValidity(System.Runtime.InteropServices.ComTypes.FILETIME@,Vanara.PInvoke.Crypt32.CERT_INFO@)">
            <summary>The <c>CertVerifyTimeValidity</c> function verifies the time validity of a certificate.</summary>
            <param name="pTimeToVerify">
            A pointer to a FILETIME structure containing the comparison time. If <c>NULL</c>, the current time is used.
            </param>
            <param name="pCertInfo">A pointer to the CERT_INFO structure of the certificate for which the time is being verified.</param>
            <returns>
            Returns a minus one if the comparison time is before the <c>NotBefore</c> member of the CERT_INFO structure. Returns a plus one
            if the comparison time is after the <c>NotAfter</c> member. Returns zero for valid time for the certificate.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertVerifyValidityNesting(Vanara.PInvoke.Crypt32.CERT_INFO@,Vanara.PInvoke.Crypt32.CERT_INFO@)">
            <summary>
            The <c>CertVerifyValidityNesting</c> function verifies that a subject certificate's time validity nests correctly within its
            issuer's time validity.
            </summary>
            <param name="pSubjectInfo">A pointer to the CERT_INFO structure of the subject certificate.</param>
            <param name="pIssuerInfo">A pointer to the CERT_INFO structure of the issuer certificate.</param>
            <returns>
            Returns <c>TRUE</c> if the <c>NotBefore</c> time of the subject's certificate is after the <c>NotBefore</c> time of the issuer's
            certificate and the <c>NotAfter</c> time of the subject's certificate is not after the <c>NotAfter</c> time of the issuer's
            certificate. Otherwise, returns <c>FALSE</c>.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptExportPKCS8(Vanara.PInvoke.Crypt32.HCRYPTPROV,Vanara.PInvoke.Crypt32.CertKeySpec,Vanara.PInvoke.Crypt32.SafeOID,System.UInt32,System.IntPtr,System.IntPtr,System.UInt32@)">
            <summary>
            <para>
            [The <c>CryptExportPKCS8</c> function is no longer available for use as of Windows Server 2008 and Windows Vista. Instead, use
            the PFXExportCertStoreEx function.]
            </para>
            <para>
            The <c>CryptExportPKCS8</c> function exports the private key in PKCS #8 format. The function is superseded by
            CryptExportPKCS8Ex, which also may be altered or unavailable in subsequent versions.
            </para>
            </summary>
            <param name="hCryptProv">
            An HCRYPTPROV variable that contains the cryptographic service provider (CSP). This is a handle to the CSP obtained by calling CryptAcquireContext.
            </param>
            <param name="dwKeySpec">
            <para>
            A <c>DWORD</c> variable that contains the key specification. The following dwKeySpec values are defined for the default provider.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>AT_KEYEXCHANGE</term>
            <term>Keys used to encrypt/decrypt session keys.</term>
            </item>
            <item>
            <term>AT_SIGNATURE</term>
            <term>Keys used to create and verify digital signatures.</term>
            </item>
            </list>
            </param>
            <param name="pszPrivateKeyObjId">An <c>LPSTR</c> variable that contains the private key object identifier (OID).</param>
            <param name="dwFlags">This parameter should be zero if pbPrivateKeyBlob is <c>NULL</c> and 0x8000 otherwise.</param>
            <param name="pvAuxInfo">This parameter must be set to <c>NULL</c>.</param>
            <param name="pbPrivateKeyBlob">
            <para>A pointer to an array of <c>BYTE</c> structures to receive the private key to be exported.</para>
            <para>
            The private key will contain the information in a PKCS #8 PrivateKeyInfo Abstract Syntax Notation One (ASN.1) type found in the
            PKCS #8 standard.
            </para>
            <para>
            For memory allocation purposes, you can get the size of the private key to be exported by setting this parameter to <c>NULL</c>.
            For more information, see Retrieving Data of Unknown Length.
            </para>
            </param>
            <param name="pcbPrivateKeyBlob">
            A pointer to a <c>DWORD</c> that may contain, on input, the size, in bytes, of the memory allocation needed to contain the
            pbPrivateKeyBlob. If pbPrivateKeyBlob is <c>NULL</c>, this parameter will return the size of the memory allocation needed for a
            second call to the function. For more information, see Retrieving Data of Unknown Length.
            </param>
            <returns>
            <para>If the function succeeds, the function returns nonzero.</para>
            <para>If the function fails, it returns zero. For extended error information, call GetLastError.</para>
            <para>The following error codes are specific to this function.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_UNSUPPORTED_TYPE</term>
            <term>An export function that can be installed or registered could not be found.</term>
            </item>
            <item>
            <term>ERROR_MORE_DATA</term>
            <term>
            If the buffer specified by the pbPrivateKeyBlob parameter is not large enough to hold the returned data, the function sets the
            ERROR_MORE_DATA code and stores the required buffer size, in bytes, in the variable pointed to by the pcbPrivateKeyBlob parameter.
            </term>
            </item>
            </list>
            <para>
            If the function fails, GetLastError may return an ASN.1 encoding/decoding error. For information about these errors, see ASN.1
            Encoding/Decoding Return Values.
            </para>
            </returns>
            <remarks>This function is only supported for asymmetric keys.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptExportPKCS8Ex(Vanara.PInvoke.Crypt32.CRYPT_PKCS8_EXPORT_PARAMS@,System.UInt32,System.IntPtr,System.IntPtr,System.UInt32@)">
            <summary>
            <para>
            [The <c>CryptExportPKCS8Ex</c> function is no longer available for use as of Windows Server 2008 and Windows Vista. Instead, use
            the PFXExportCertStoreEx function.]
            </para>
            <para>
            The <c>CryptExportPKCS8Ex</c> function exports the private key in PKCS #8 format.This function has no associated import library.
            You must use the LoadLibrary and GetProcAddress functions to dynamically link to Crypt32.dll.
            </para>
            </summary>
            <param name="psExportParams">
            A pointer to a CRYPT_PKCS8_EXPORT_PARAMS structure that contains information about the key to export.
            </param>
            <param name="dwFlags">This parameter should be zero if pbPrivateKeyBlob is <c>NULL</c> and 0x8000 otherwise.</param>
            <param name="pvAuxInfo">This parameter must be <c>NULL</c>.</param>
            <param name="pbPrivateKeyBlob">
            <para>A pointer to an array of <c>BYTE</c> structures to receive the private key to be exported.</para>
            <para>
            The private key will contain the information in a PKCS #8 PrivateKeyInfo Abstract Syntax Notation One (ASN.1) type found in the
            PKCS #8 standard.
            </para>
            <para>
            For memory allocation purposes, you can get the size of the private key to be exported by setting this parameter to <c>NULL</c>.
            For more information, see Retrieving Data of Unknown Length.
            </para>
            </param>
            <param name="pcbPrivateKeyBlob">
            A pointer to a <c>DWORD</c> that may contain, on input, the size, in bytes, of the memory allocation needed to contain the
            pbPrivateKeyBlob. If pbPrivateKeyBlob is <c>NULL</c>, this parameter will return the size of the memory allocation needed for a
            second call to the function. For more information, see Retrieving Data of Unknown Length.
            </param>
            <returns>
            <para>If the function succeeds, the function returns nonzero ( <c>TRUE</c>).</para>
            <para>If the function fails, it returns zero ( <c>FALSE</c>). For extended error information, call GetLastError.</para>
            <para>The following error codes are specific to this function.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_UNSUPPORTED_TYPE</term>
            <term>An export function that can be installed or registered could not be found.</term>
            </item>
            <item>
            <term>ERROR_MORE_DATA</term>
            <term>
            If the buffer specified by the pbPrivateKeyBlob parameter is not large enough to hold the returned data, the function sets the
            ERROR_MORE_DATA code and stores the required buffer size, in bytes, in the variable pointed to by the pcbPrivateKeyBlob parameter.
            </term>
            </item>
            </list>
            <para>
            If the function fails, GetLastError returns an ASN.1 encoding/decoding error. For information about these errors, see ASN.1
            Encoding/Decoding Return Values.
            </para>
            </returns>
            <remarks>This function is only supported for asymmetric keys.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptExportPublicKeyInfo(Vanara.PInvoke.Crypt32.HCRYPTPROV,Vanara.PInvoke.Crypt32.CertKeySpec,Vanara.PInvoke.Crypt32.CertEncodingType,System.IntPtr,System.UInt32@)">
            <summary>
            The <c>CryptExportPublicKeyInfo</c> function exports the public key information associated with the corresponding private key of
            the provider. For an updated version of this function, see CryptExportPublicKeyInfoEx.
            </summary>
            <param name="hCryptProvOrNCryptKey">
            Handle of the cryptographic service provider (CSP) to use when exporting the public key information. This handle must be an
            HCRYPTPROV handle that has been created by using the CryptAcquireContext function or an <c>NCRYPT_KEY_HANDLE</c> handle that has
            been created by using the NCryptOpenKey function. New applications should always pass in the <c>NCRYPT_KEY_HANDLE</c> handle of
            a CNG CSP.
            </param>
            <param name="dwKeySpec">
            Identifies the private key to use from the container of the provider. It can be AT_KEYEXCHANGE or AT_SIGNATURE. This parameter
            is ignored if an <c>NCRYPT_KEY_HANDLE</c> is used in the hCryptProvOrNCryptKey parameter.
            </param>
            <param name="dwCertEncodingType">
            <para>
            Specifies the encoding type used. It is always acceptable to specify both the certificate and message encoding types by
            combining them with a bitwise- <c>OR</c> operation as shown in the following example:
            </para>
            <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING</para>
            <para>Currently defined encoding types are:</para>
            <list type="bullet">
            <item>
            <term>X509_ASN_ENCODING</term>
            </item>
            <item>
            <term>PKCS_7_ASN_ENCODING</term>
            </item>
            </list>
            </param>
            <param name="pInfo">
            <para>A pointer to a CERT_PUBLIC_KEY_INFO structure to receive the public key information to be exported.</para>
            <para>
            To set the size of this information for memory allocation purposes, this parameter can be <c>NULL</c>. For more information, see
            Retrieving Data of Unknown Length.
            </para>
            </param>
            <param name="pcbInfo">
            <para>
            A pointer to a <c>DWORD</c> that contains the size, in bytes, of the buffer pointed to by the pInfo parameter. When the function
            returns, the <c>DWORD</c> contains the number of bytes needed for the return buffer.
            </para>
            <para>
            <c>Note</c> When processing the data returned in the buffer, applications need to use the actual size of the data returned. The
            actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually
            specified large enough to ensure that the largest possible output data will fit in the buffer.) On output, the variable pointed
            to by this parameter is updated to reflect the actual size of the data copied to the buffer.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the function returns nonzero ( <c>TRUE</c>).</para>
            <para>If the function fails, it returns zero ( <c>FALSE</c>). For extended error information, call GetLastError.</para>
            <para><c>Note</c> Errors from the called functions CryptGetUserKey and CryptExportKey might be propagated to this function.</para>
            <para>This function has the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_MORE_DATA</term>
            <term>
            If the buffer specified by the pInfo parameter is not large enough to hold the returned data, the function sets the
            ERROR_MORE_DATA code, and stores the required buffer size, in bytes, into the variable pointed to by pcbInfo.
            </term>
            </item>
            <item>
            <term>ERROR_FILE_NOT_FOUND</term>
            <term>Invalid certificate encoding type. Currently only X509_ASN_ENCODING is supported.</term>
            </item>
            </list>
            <para>
            If the function fails, GetLastError may return an Abstract Syntax Notation One (ASN.1) encoding/decoding error. For information
            about these errors, see ASN.1 Encoding/Decoding Return Values.
            </para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptExportPublicKeyInfo(Vanara.PInvoke.NCrypt.NCRYPT_KEY_HANDLE,Vanara.PInvoke.Crypt32.CertKeySpec,Vanara.PInvoke.Crypt32.CertEncodingType,System.IntPtr,System.UInt32@)">
            <summary>
            The <c>CryptExportPublicKeyInfo</c> function exports the public key information associated with the corresponding private key of
            the provider. For an updated version of this function, see CryptExportPublicKeyInfoEx.
            </summary>
            <param name="hCryptProvOrNCryptKey">
            Handle of the cryptographic service provider (CSP) to use when exporting the public key information. This handle must be an
            HCRYPTPROV handle that has been created by using the CryptAcquireContext function or an <c>NCRYPT_KEY_HANDLE</c> handle that has
            been created by using the NCryptOpenKey function. New applications should always pass in the <c>NCRYPT_KEY_HANDLE</c> handle of
            a CNG CSP.
            </param>
            <param name="dwKeySpec">
            Identifies the private key to use from the container of the provider. It can be AT_KEYEXCHANGE or AT_SIGNATURE. This parameter
            is ignored if an <c>NCRYPT_KEY_HANDLE</c> is used in the hCryptProvOrNCryptKey parameter.
            </param>
            <param name="dwCertEncodingType">
            <para>
            Specifies the encoding type used. It is always acceptable to specify both the certificate and message encoding types by
            combining them with a bitwise- <c>OR</c> operation as shown in the following example:
            </para>
            <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING</para>
            <para>Currently defined encoding types are:</para>
            <list type="bullet">
            <item>
            <term>X509_ASN_ENCODING</term>
            </item>
            <item>
            <term>PKCS_7_ASN_ENCODING</term>
            </item>
            </list>
            </param>
            <param name="pInfo">
            <para>A pointer to a CERT_PUBLIC_KEY_INFO structure to receive the public key information to be exported.</para>
            <para>
            To set the size of this information for memory allocation purposes, this parameter can be <c>NULL</c>. For more information, see
            Retrieving Data of Unknown Length.
            </para>
            </param>
            <param name="pcbInfo">
            <para>
            A pointer to a <c>DWORD</c> that contains the size, in bytes, of the buffer pointed to by the pInfo parameter. When the function
            returns, the <c>DWORD</c> contains the number of bytes needed for the return buffer.
            </para>
            <para>
            <c>Note</c> When processing the data returned in the buffer, applications need to use the actual size of the data returned. The
            actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually
            specified large enough to ensure that the largest possible output data will fit in the buffer.) On output, the variable pointed
            to by this parameter is updated to reflect the actual size of the data copied to the buffer.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the function returns nonzero ( <c>TRUE</c>).</para>
            <para>If the function fails, it returns zero ( <c>FALSE</c>). For extended error information, call GetLastError.</para>
            <para><c>Note</c> Errors from the called functions CryptGetUserKey and CryptExportKey might be propagated to this function.</para>
            <para>This function has the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_MORE_DATA</term>
            <term>
            If the buffer specified by the pInfo parameter is not large enough to hold the returned data, the function sets the
            ERROR_MORE_DATA code, and stores the required buffer size, in bytes, into the variable pointed to by pcbInfo.
            </term>
            </item>
            <item>
            <term>ERROR_FILE_NOT_FOUND</term>
            <term>Invalid certificate encoding type. Currently only X509_ASN_ENCODING is supported.</term>
            </item>
            </list>
            <para>
            If the function fails, GetLastError may return an Abstract Syntax Notation One (ASN.1) encoding/decoding error. For information
            about these errors, see ASN.1 Encoding/Decoding Return Values.
            </para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptExportPublicKeyInfoEx(Vanara.PInvoke.Crypt32.HCRYPTPROV,Vanara.PInvoke.Crypt32.CertKeySpec,Vanara.PInvoke.Crypt32.CertEncodingType,Vanara.PInvoke.Crypt32.SafeOID,Vanara.PInvoke.Crypt32.CryptOIDInfoFlags,System.IntPtr,System.IntPtr,System.UInt32@)">
            <summary>
            The <c>CryptExportPublicKeyInfoEx</c> function exports the public key information associated with the provider's corresponding
            private key. This function allows the application to specify the public key algorithm, overriding the default provided by the
            cryptographic service provider (CSP).
            </summary>
            <param name="hCryptProvOrNCryptKey">
            A handle of the CSP to use when exporting the public key information. This handle must be an HCRYPTPROV handle that has been
            created by using the CryptAcquireContext function or an <c>NCRYPT_KEY_HANDLE</c> handle that has been created by using the
            NCryptOpenKey function. New applications should always pass in the <c>NCRYPT_KEY_HANDLE</c> handle of a CNG CSP.
            </param>
            <param name="dwKeySpec">
            Identifies the private key to use from the provider's container. It can be AT_KEYEXCHANGE or AT_SIGNATURE. This parameter is
            ignored if an <c>NCRYPT_KEY_HANDLE</c> is used in the hCryptProvOrNCryptKey parameter.
            </param>
            <param name="dwCertEncodingType">
            <para>
            Specifies the encoding type used. It is always acceptable to specify both the certificate and message encoding types by
            combining them with a bitwise- <c>OR</c> operation as shown in the following example:
            </para>
            <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING</para>
            <para>Currently defined encoding types are:</para>
            <list type="bullet">
            <item>
            <term>X509_ASN_ENCODING</term>
            </item>
            <item>
            <term>PKCS_7_ASN_ENCODING</term>
            </item>
            </list>
            </param>
            <param name="pszPublicKeyObjId">
            <para>Specifies the public key algorithm.</para>
            <para>
            <c>Note</c> pszPublicKeyObjId and dwCertEncodingType are used together to determine the installable
            <c>CRYPT_OID_EXPORT_PUBLIC_KEY_INFO_FUNC</c> to call. If an installable function was not found for the pszPublicKeyObjId
            parameter, an attempt is made to export the key as an RSA Public Key (szOID_RSA_RSA).
            </para>
            </param>
            <param name="dwFlags">
            <para>
            A <c>DWORD</c> flag value that indicates how the public key information is exported. The flag value is passed directly to the
            CryptFindOIDInfo function when mapping the public key object identifier to the corresponding CNG public key algorithm Unicode
            string. The following flag values can be set.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPT_OID_INFO_PUBKEY_SIGN_KEY_FLAG</term>
            <term>
            Skips public keys in the CRYPT_PUBKEY_ALG_OID_GROUP_ID group explicitly flagged with the CRYPT_OID_PUBKEY_ENCRYPT_ONLY_FLAG flag.
            </term>
            </item>
            <item>
            <term>CRYPT_OID_INFO_PUBKEY_ENCRYPT_KEY_FLAG</term>
            <term>
            Skips public keys in the CRYPT_PUBKEY_ALG_OID_GROUP_ID group explicitly flagged with the CRYPT_OID_PUBKEY_SIGN_ONLY_FLAG flag.
            </term>
            </item>
            </list>
            </param>
            <param name="pvAuxInfo">This parameter is reserved for future use and must be set to <c>NULL</c>.</param>
            <param name="pInfo">
            <para>A pointer to a CERT_PUBLIC_KEY_INFO structure to receive the public key information to be exported.</para>
            <para>
            This parameter can be <c>NULL</c> to set the size of this information for memory allocation purposes. For more information, see
            Retrieving Data of Unknown Length.
            </para>
            </param>
            <param name="pcbInfo">
            <para>
            A pointer to a <c>DWORD</c> that contains the size, in bytes, of the buffer pointed to by the pInfo parameter. When the function
            returns, the <c>DWORD</c> contains the number of bytes stored in the buffer.
            </para>
            <para>
            <c>Note</c> When processing the data returned in the buffer, applications need to use the actual size of the data returned. The
            actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually
            specified large enough to ensure that the largest possible output data will fit in the buffer.) On output, the variable pointed
            to by this parameter is updated to reflect the actual size of the data copied to the buffer.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is nonzero ( <c>TRUE</c>).</para>
            <para>If the function fails, the return value is zero ( <c>FALSE</c>). For extended error information, call GetLastError.</para>
            <para><c>Note</c> Errors from the called functions CryptGetUserKey and CryptExportKey can be propagated to this function.</para>
            <para>This function has the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_FILE_NOT_FOUND</term>
            <term>
            An export function that can be installed or registered could not be found for the specified dwCertEncodingType and
            pszPublicKeyObjId parameters.
            </term>
            </item>
            <item>
            <term>ERROR_MORE_DATA</term>
            <term>
            If the buffer specified by the pInfo parameter is not large enough to hold the returned data, the function sets the
            ERROR_MORE_DATA code and stores the required buffer size, in bytes, in the variable pointed to by the pcbInfo parameter.
            </term>
            </item>
            </list>
            <para>
            If the function fails, GetLastError may return an Abstract Syntax Notation One (ASN.1) encoding/decoding error. For information
            about these errors, see ASN.1 Encoding/Decoding Return Values.
            </para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptExportPublicKeyInfoEx(Vanara.PInvoke.NCrypt.NCRYPT_KEY_HANDLE,Vanara.PInvoke.Crypt32.CertKeySpec,Vanara.PInvoke.Crypt32.CertEncodingType,Vanara.PInvoke.Crypt32.SafeOID,Vanara.PInvoke.Crypt32.CryptOIDInfoFlags,System.IntPtr,System.IntPtr,System.UInt32@)">
            <summary>
            The <c>CryptExportPublicKeyInfoEx</c> function exports the public key information associated with the provider's corresponding
            private key. This function allows the application to specify the public key algorithm, overriding the default provided by the
            cryptographic service provider (CSP).
            </summary>
            <param name="hCryptProvOrNCryptKey">
            A handle of the CSP to use when exporting the public key information. This handle must be an HCRYPTPROV handle that has been
            created by using the CryptAcquireContext function or an <c>NCRYPT_KEY_HANDLE</c> handle that has been created by using the
            NCryptOpenKey function. New applications should always pass in the <c>NCRYPT_KEY_HANDLE</c> handle of a CNG CSP.
            </param>
            <param name="dwKeySpec">
            Identifies the private key to use from the provider's container. It can be AT_KEYEXCHANGE or AT_SIGNATURE. This parameter is
            ignored if an <c>NCRYPT_KEY_HANDLE</c> is used in the hCryptProvOrNCryptKey parameter.
            </param>
            <param name="dwCertEncodingType">
            <para>
            Specifies the encoding type used. It is always acceptable to specify both the certificate and message encoding types by
            combining them with a bitwise- <c>OR</c> operation as shown in the following example:
            </para>
            <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING</para>
            <para>Currently defined encoding types are:</para>
            <list type="bullet">
            <item>
            <term>X509_ASN_ENCODING</term>
            </item>
            <item>
            <term>PKCS_7_ASN_ENCODING</term>
            </item>
            </list>
            </param>
            <param name="pszPublicKeyObjId">
            <para>Specifies the public key algorithm.</para>
            <para>
            <c>Note</c> pszPublicKeyObjId and dwCertEncodingType are used together to determine the installable
            <c>CRYPT_OID_EXPORT_PUBLIC_KEY_INFO_FUNC</c> to call. If an installable function was not found for the pszPublicKeyObjId
            parameter, an attempt is made to export the key as an RSA Public Key (szOID_RSA_RSA).
            </para>
            </param>
            <param name="dwFlags">
            <para>
            A <c>DWORD</c> flag value that indicates how the public key information is exported. The flag value is passed directly to the
            CryptFindOIDInfo function when mapping the public key object identifier to the corresponding CNG public key algorithm Unicode
            string. The following flag values can be set.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPT_OID_INFO_PUBKEY_SIGN_KEY_FLAG</term>
            <term>
            Skips public keys in the CRYPT_PUBKEY_ALG_OID_GROUP_ID group explicitly flagged with the CRYPT_OID_PUBKEY_ENCRYPT_ONLY_FLAG flag.
            </term>
            </item>
            <item>
            <term>CRYPT_OID_INFO_PUBKEY_ENCRYPT_KEY_FLAG</term>
            <term>
            Skips public keys in the CRYPT_PUBKEY_ALG_OID_GROUP_ID group explicitly flagged with the CRYPT_OID_PUBKEY_SIGN_ONLY_FLAG flag.
            </term>
            </item>
            </list>
            </param>
            <param name="pvAuxInfo">This parameter is reserved for future use and must be set to <c>NULL</c>.</param>
            <param name="pInfo">
            <para>A pointer to a CERT_PUBLIC_KEY_INFO structure to receive the public key information to be exported.</para>
            <para>
            This parameter can be <c>NULL</c> to set the size of this information for memory allocation purposes. For more information, see
            Retrieving Data of Unknown Length.
            </para>
            </param>
            <param name="pcbInfo">
            <para>
            A pointer to a <c>DWORD</c> that contains the size, in bytes, of the buffer pointed to by the pInfo parameter. When the function
            returns, the <c>DWORD</c> contains the number of bytes stored in the buffer.
            </para>
            <para>
            <c>Note</c> When processing the data returned in the buffer, applications need to use the actual size of the data returned. The
            actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually
            specified large enough to ensure that the largest possible output data will fit in the buffer.) On output, the variable pointed
            to by this parameter is updated to reflect the actual size of the data copied to the buffer.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is nonzero ( <c>TRUE</c>).</para>
            <para>If the function fails, the return value is zero ( <c>FALSE</c>). For extended error information, call GetLastError.</para>
            <para><c>Note</c> Errors from the called functions CryptGetUserKey and CryptExportKey can be propagated to this function.</para>
            <para>This function has the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_FILE_NOT_FOUND</term>
            <term>
            An export function that can be installed or registered could not be found for the specified dwCertEncodingType and
            pszPublicKeyObjId parameters.
            </term>
            </item>
            <item>
            <term>ERROR_MORE_DATA</term>
            <term>
            If the buffer specified by the pInfo parameter is not large enough to hold the returned data, the function sets the
            ERROR_MORE_DATA code and stores the required buffer size, in bytes, in the variable pointed to by the pcbInfo parameter.
            </term>
            </item>
            </list>
            <para>
            If the function fails, GetLastError may return an Abstract Syntax Notation One (ASN.1) encoding/decoding error. For information
            about these errors, see ASN.1 Encoding/Decoding Return Values.
            </para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptExportPublicKeyInfoFromBCryptKeyHandle(Vanara.PInvoke.BCrypt.BCRYPT_KEY_HANDLE,Vanara.PInvoke.Crypt32.CertEncodingType,Vanara.PInvoke.Crypt32.SafeOID,Vanara.PInvoke.Crypt32.CryptOIDInfoFlags,System.IntPtr,System.IntPtr,System.UInt32@)">
            <summary>
            The <c>CryptExportPublicKeyInfoFromBCryptKeyHandle</c> function exports the public key information associated with a provider's
            corresponding private key.
            </summary>
            <param name="hBCryptKey">The handle of the key from which to export the public key information.</param>
            <param name="dwCertEncodingType">
            <para>Specifies the encoding type to be matched.</para>
            <para>This value can be a bitwise combination of the currently defined encoding types:</para>
            <list type="bullet">
            <item>
            <term>X509_ASN_ENCODING</term>
            </item>
            <item>
            <term>PKCS_7_ASN_ENCODING</term>
            </item>
            </list>
            </param>
            <param name="pszPublicKeyObjId">
            A pointer to the object identifier (OID) that identifies the installable function to use to export the key. If the high-order
            word of the OID is nonzero, pszPublicKeyObjId is a pointer to either an OID string such as "2.5.29.1" or an ASCII string such as
            "file." If the high-order word of the OID is zero, the low-order word specifies the integer identifier to be used as the object identifier.
            </param>
            <param name="dwFlags">
            <para>A <c>DWORD</c> value that indicates how the public key information is exported.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPT_OID_INFO_PUBKEY_SIGN_KEY_FLAG 0x80000000</term>
            <term>
            Skips public keys in the CRYPT_PUBKEY_ALG_OID_GROUP_ID group that are explicitly flagged with the
            CRYPT_OID_PUBKEY_ENCRYPT_ONLY_FLAG flag.
            </term>
            </item>
            <item>
            <term>CRYPT_OID_INFO_PUBKEY_ENCRYPT_KEY_FLAG 0x40000000</term>
            <term>
            Skips public keys in the CRYPT_PUBKEY_ALG_OID_GROUP_ID group that are explicitly flagged with the
            CRYPT_OID_PUBKEY_SIGN_ONLY_FLAG flag.
            </term>
            </item>
            </list>
            </param>
            <param name="pvAuxInfo">This parameter is reserved for future use and must be set to <c>NULL</c>.</param>
            <param name="pInfo">
            <para>A pointer to a CERT_PUBLIC_KEY_INFO structure to receive the public key information to be exported.</para>
            <para>
            This parameter can be <c>NULL</c> to set the size of this information for memory allocation purposes. For more information, see
            Retrieving Data of Unknown Length.
            </para>
            </param>
            <param name="pcbInfo">
            A pointer to a <c>DWORD</c> that contains the size, in bytes, of the buffer pointed to by the pInfo parameter. When the function
            returns, the <c>DWORD</c> contains the number of bytes stored in the buffer.
            </param>
            <returns>The function returns <c>TRUE</c> if it succeeds; otherwise, it returns <c>FALSE</c>.</returns>
            <remarks>
            If the <c>CryptExportPublicKeyInfoFromBCryptKeyHandle</c> function is unable to find an installable OID function for the OID
            specified by the pszPublicKeyObjId parameter, it attempts to export the key as a RSA Public Key ( <c>szOID_RSA_RSA</c>). If the
            key is exported as a RSA Public Key, the values of the dwFlags and pvAuxInfo parameters are not used.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptFindCertificateKeyProvInfo(Vanara.PInvoke.Crypt32.PCCERT_CONTEXT,Vanara.PInvoke.Crypt32.CryptFindFlags,System.IntPtr)">
            <summary>
            The <c>CryptFindCertificateKeyProvInfo</c> function enumerates the cryptographic providers and their containers to find the
            private key that corresponds to the certificate's public key.
            </summary>
            <param name="pCert">A pointer to the CERT_CONTEXT structure of the certificate to use when exporting public key information.</param>
            <param name="dwFlags">
            <para>A set of flags that modify the behavior of this function. This can be zero or one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPT_FIND_USER_KEYSET_FLAG</term>
            <term>Restricts the search to the user container. The default is to search both the user and machine containers.</term>
            </item>
            <item>
            <term>CRYPT_FIND_MACHINE_KEYSET_FLAG</term>
            <term>Restricts the search to the machine container. The default is to search both the user and machine containers.</term>
            </item>
            <item>
            <term>CRYPT_FIND_SILENT_KEYSET_FLAG</term>
            <term>
            The application requests that the CSP not display any user interface (UI) for this context. If the CSP must display the UI to
            operate, the call fails and the NTE_SILENT_CONTEXT error code is set as the last error.
            </term>
            </item>
            </list>
            <para>
            The following flags determine which technology is used to obtain the key. If none of these flags is present, this function will
            only attempt to obtain the key by using CryptoAPI.
            </para>
            <para><c>Windows Server 2003 and Windows XP:</c> These flags are not supported.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPT_ACQUIRE_ALLOW_NCRYPT_KEY_FLAG</term>
            <term>
            This function will attempt to obtain the key by using CryptoAPI. If that fails, this function will attempt to obtain the key by
            using the Cryptography API: Next Generation (CNG). The CERT_KEY_PROV_INFO_PROP_ID property of the certificate is set to zero if
            CNG is used to obtain the key.
            </term>
            </item>
            <item>
            <term>CRYPT_ACQUIRE_ONLY_NCRYPT_KEY_FLAG</term>
            <term>
            This function will only attempt to obtain the key by using CNG and will not use CryptoAPI to obtain the key. The
            CERT_KEY_PROV_INFO_PROP_ID property of the certificate is set to zero if CNG is used to obtain the key.
            </term>
            </item>
            <item>
            <term>CRYPT_ACQUIRE_PREFER_NCRYPT_KEY_FLAG</term>
            <term>
            This function will attempt to obtain the key by using CNG. If that fails, this function will attempt to obtain the key by using
            CryptoAPI. The CERT_KEY_PROV_INFO_PROP_ID property of the certificate is set to zero if CNG is used to obtain the key.
            </term>
            </item>
            </list>
            </param>
            <param name="pvReserved">Reserved for future use and must be <c>NULL</c>.</param>
            <returns>
            <para>
            <c>TRUE</c> if the function finds a private key that corresponds to the certificate's public key within a searched container;
            <c>FALSE</c> if the function fails to find a container or a private key within a container.
            </para>
            <para>GetLastError returns the following error:</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>NTE_NO_KEY</term>
            <term>No container found.</term>
            </item>
            </list>
            </returns>
            <remarks>
            This function enumerates the cryptographic providers and their containers to find the private key that corresponds to the
            certificate's public key. For a match, the function updates the certificate's <c>CERT_KEY_PROV_INFO_PROP_ID</c> property. If the
            <c>CERT_KEY_PROV_INFO_PROP_ID</c> is already set, it is checked to determine whether it matches the provider's public key. For a
            match, the function skips the previously mentioned enumeration.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptFindLocalizedName(System.String)">
            <summary>
            The <c>CryptFindLocalizedName</c> function finds the localized name for the specified name, such as the localize name of the
            "Root" system store. This function can be used before displaying any UI that included a name that might have a localized form.
            </summary>
            <param name="pwszCryptName">
            <para>
            A pointer to a specified name. An internal table is searched to compare a predefined localized name to the specified name. The
            search matches the localized name by using a case insensitive string comparison.
            </para>
            <para>
            <c>Note</c> Localized names for the predefined system stores ("Root", "My") and predefined physical stores (".Default",
            ".LocalMachine") are preinstalled as resource strings in Crypt32.dll.
            </para>
            </param>
            <returns>
            <para>If the specified name is found, a pointer to the localized name is returned. The returned pointer must not be freed.</para>
            <para>If the specified name is not found, <c>NULL</c> is returned.</para>
            </returns>
            <remarks>
            <para>CryptSetOIDFunctionValue can be called as follows to register additional localized strings.</para>
            <para>dwEncodingType = CRYPT_LOCALIZED_NAME_ENCODING_TYPE</para>
            <para>pszFuncName = CRYPT_OID_FIND_LOCALIZED_NAME_FUNC</para>
            <para>pszOID = CRYPT_LOCALIZED_NAME_OID</para>
            <para>pwszValueName = Name to be localized, for example, L"ApplicationStore"</para>
            <para>dwValueType = REG_SZ</para>
            <para>pbValueData = pointer to the Unicode localized string</para>
            <para>cbValueData = (wcslen(Unicode localized string) + 1) * sizeof(WCHAR)</para>
            <para>CryptSetOIDFunctionValue can be called as follows to unregister the localized strings.</para>
            <para>pbValueData = <c>NULL</c></para>
            <para>cbValueData = 0.</para>
            <para>The registered names are searched before the preinstalled names.</para>
            <list type="table">
            <listheader>
            <term>CRYPT_LOCALIZED_NAME_ ENCODING_TYPE</term>
            <term>0</term>
            </listheader>
            <item>
            <term>CRYPT_LOCALIZED_NAME_ OID</term>
            <term>"LocalizedNames"</term>
            </item>
            <item>
            <term>CRYPT_OID_FIND_LOCALIZED_ NAME_FUNC</term>
            <term>"CryptDLLFindLocalizedName"</term>
            </item>
            </list>
            <para>Examples</para>
            <para>For an example that uses this function, see Example C Program: Setting and Getting Certificate Store Properties.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptHashCertificate(Vanara.PInvoke.Crypt32.HCRYPTPROV,Vanara.PInvoke.Crypt32.ALG_ID,System.UInt32,System.IntPtr,System.UInt32,System.IntPtr,System.UInt32@)">
            <summary>
            <note>Important: This API is deprecated. New and existing software should start using Cryptography Next Generation APIs.
            Microsoft may remove this API in future releases.</note>
            <para>The CryptHashCertificate function hashes the entire encoded content of a certificate including its signature.</para>
            </summary>
            <param name="hCryptProv">
            <para>This parameter is not used and should be set to <c>NULL</c>.</para>
            <para>
            <c>Windows Server 2003 and Windows XP:</c> A handle of the cryptographic service provider (CSP) to use to compute the hash.
            </para>
            <para>This parameter's data type is <c>HCRYPTPROV</c>.</para>
            <para>
            Unless there is a strong reason for passing in a specific CSP in hCryptProv, zero is passed in. Passing in zero causes the
            default RSA or Digital Signature Standard (DSS) provider to be acquired before doing hash, signature verification, or recipient
            encryption operations.
            </para>
            </param>
            <param name="Algid">
            An ALG_ID structure that specifies the hash algorithm to use. If Algid is zero, the default hash algorithm, SHA1, is used.
            </param>
            <param name="dwFlags">Value to be passed to the hash API. For details, see CryptCreateHash.</param>
            <param name="pbEncoded">Address of the encoded content to be hashed.</param>
            <param name="cbEncoded">The size, in bytes, of the encoded content.</param>
            <param name="pbComputedHash">
            <para>A pointer to a buffer to receive the computed hash.</para>
            <para>
            To set the size of this information for memory allocation purposes, this parameter can be <c>NULL</c>. For more information, see
            Retrieving Data of Unknown Length.
            </para>
            </param>
            <param name="pcbComputedHash">
            <para>
            A pointer to a <c>DWORD</c> that contains the size, in bytes, of the buffer pointed to by the pbComputedHash parameter. When the
            function returns, the <c>DWORD</c> contains the number of bytes stored in the buffer.
            </para>
            <para>
            <c>Note</c> When processing the data returned in the buffer, applications need to use the actual size of the data returned. The
            actual size can be slightly smaller than the size of the buffer specified on input. On input, buffer sizes are usually specified
            large enough to ensure that the largest possible output data will fit in the buffer. On output, the variable pointed to by this
            parameter is updated to reflect the actual size of the data copied to the buffer.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the function returns nonzero ( <c>TRUE</c>).</para>
            <para>If the function fails, it returns zero ( <c>FALSE</c>). For extended error information, call GetLastError.</para>
            <para>
            <c>Note</c> Errors from the called functions CryptCreateHash, CryptGetHashParam and CryptHashData might be propagated to this function.
            </para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptHashCertificate2(System.String,System.UInt32,System.IntPtr,System.IntPtr,System.UInt32,System.IntPtr,System.UInt32@)">
            <summary>The <c>CryptHashCertificate2</c> function hashes a block of data by using a CNG hash provider.</summary>
            <param name="pwszCNGHashAlgid">
            The address of a null-terminated Unicode string that contains the CNG hash algorithm identifier of the hash algorithm to use to
            hash the certificate. This can be one of the CNG Algorithm Identifiers that represents a hash algorithm or any other registered
            hash algorithm identifier.
            </param>
            <param name="dwFlags">A set of flags that modify the behavior of this function. No flags are defined for this function.</param>
            <param name="pvReserved">Reserved for future use and must be <c>NULL</c>.</param>
            <param name="pbEncoded">The address of an array of bytes to be hashed. The cbEncoded parameter contains the size of this array.</param>
            <param name="cbEncoded">The number of elements in the pbEncoded array.</param>
            <param name="pbComputedHash">
            The address of a buffer that receives the computed hash. The variable pointed to by the pcbComputedHash parameter contains the
            size of this buffer.
            </param>
            <param name="pcbComputedHash">
            The address of a <c>DWORD</c> variable that, on entry, contains the size, in bytes, of the pbComputedHash buffer. After this
            function returns, this variable contains the number of bytes copied to the pbComputedHash buffer.
            </param>
            <returns>
            <para>If the function succeeds, the function returns nonzero ( <c>TRUE</c>).</para>
            <para>
            If the function fails, it returns zero ( <c>FALSE</c>). For extended error information, call GetLastError. Some of the possible
            error codes are identified in the following topics.
            </para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptHashPublicKeyInfo(Vanara.PInvoke.Crypt32.HCRYPTPROV,Vanara.PInvoke.Crypt32.ALG_ID,System.UInt32,Vanara.PInvoke.Crypt32.CertEncodingType,Vanara.PInvoke.Crypt32.CERT_PUBLIC_KEY_INFO@,System.IntPtr,System.UInt32@)">
            <summary>
            <note>Important: This API is deprecated. New and existing software should start using Cryptography Next Generation APIs.
            Microsoft may remove this API in future releases.</note>
            <para>
            The CryptHashPublicKeyInfo function encodes the public key information in a CERT_PUBLIC_KEY_INFO structure and computes the hash
            of the encoded bytes.The hash created is used with key identifier functions.
            </para>
            </summary>
            <param name="hCryptProv">
            <para>This parameter is not used and should be set to <c>NULL</c>.</para>
            <para>
            <c>Windows Server 2003 and Windows XP:</c> A handle of the cryptographic service provider (CSP) to use to compute the hash.This
            parameter's data type is <c>HCRYPTPROV</c>.
            </para>
            <para>
            Unless there is a strong reason for passing in a specific cryptographic provider in hCryptProv, zero is passed in. Passing in
            zero causes the default RSA or Digital Signature Standard (DSS) provider to be acquired before doing hash, signature
            verification, or recipient encryption operations.
            </para>
            </param>
            <param name="Algid">
            An ALG_ID structure that specifies the CryptoAPI hash algorithm to use. If Algid is zero, the default hash algorithm, SHA1, is used.
            </param>
            <param name="dwFlags">Values to be passed on to CryptCreateHash.</param>
            <param name="dwCertEncodingType">
            <para>
            Specifies the encoding type used. It is always acceptable to specify both the certificate and message encoding types by
            combining them with a bitwise- <c>OR</c> operation as shown in the following example:
            </para>
            <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING</para>
            <para>Currently defined encoding types are:</para>
            <list type="bullet">
            <item>
            <term>X509_ASN_ENCODING</term>
            </item>
            <item>
            <term>PKCS_7_ASN_ENCODING</term>
            </item>
            </list>
            </param>
            <param name="pInfo">
            A pointer to a CERT_PUBLIC_KEY_INFO structure that contains the public key information to be encoded and hashed.
            </param>
            <param name="pbComputedHash">
            <para>A pointer to a buffer to receive the computed hash.</para>
            <para>
            To set the size of this information for memory allocation purposes, this parameter can be <c>NULL</c>. For more information, see
            Retrieving Data of Unknown Length.
            </para>
            </param>
            <param name="pcbComputedHash">
            <para>
            A pointer to a <c>DWORD</c> that contains the size, in bytes, of the buffer pointed to by the pbComputedHash parameter. When the
            function returns, the <c>DWORD</c> contains the number of bytes stored in the buffer.
            </para>
            <para>
            <c>Note</c> When processing the data returned in the buffer, applications need to use the actual size of the data returned. The
            actual size can be slightly smaller than the size of the buffer specified on input. On input, buffer sizes are usually specified
            large enough to ensure that the largest possible output data will fit in the buffer. On output, the variable pointed to by this
            parameter is updated to reflect the actual size of the data copied to the buffer.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the function returns nonzero ( <c>TRUE</c>).</para>
            <para>If the function fails, it returns zero ( <c>FALSE</c>). For extended error information, call GetLastError.</para>
            <para>
            <c>Note</c> Errors from the called functions CryptCreateHash, CryptGetHashParam, and CryptHashData can be propagated to this
            function. This function has the following error codes.
            </para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_MORE_DATA</term>
            <term>
            If the buffer specified by the pbComputedHash parameter is not large enough to hold the returned data, the function sets the
            ERROR_MORE_DATA code, and stores the required buffer size, in bytes, in the variable pointed to by pcbComputedHash.
            </term>
            </item>
            <item>
            <term>ERROR_FILE_NOT_FOUND</term>
            <term>Invalid certificate encoding type. Currently only X509_ASN_ENCODING is supported.</term>
            </item>
            </list>
            <para>
            If the function fails, GetLastError may return an Abstract Syntax Notation One (ASN.1) encoding/decoding error. For information
            about these errors, see ASN.1 Encoding/Decoding Return Values.
            </para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptHashToBeSigned(Vanara.PInvoke.Crypt32.HCRYPTPROV,Vanara.PInvoke.Crypt32.CertEncodingType,System.IntPtr,System.UInt32,System.IntPtr,System.UInt32@)">
            <summary>
            <note>Important: This API is deprecated. New and existing software should start using Cryptography Next Generation APIs.
            Microsoft may remove this API in future releases.</note>
            <para>
            The CryptHashToBeSigned function computes the hash of the encoded content from a signed and encoded certificate. The hash is
            performed on only the "to be signed" encoded content and its signature.
            </para>
            </summary>
            <param name="hCryptProv">
            <para>This parameter is not used and should be set to <c>NULL</c>.</para>
            <para>
            <c>Windows Server 2003 and Windows XP:</c> A handle of the cryptographic service provider (CSP) to use to compute the hash.This
            parameter's data type is <c>HCRYPTPROV</c>.
            </para>
            <para>
            Unless there is a strong reason for passing in a specific cryptographic provider in hCryptProv, zero is passed in. Passing in
            zero causes the default RSA or Digital Signature Standard (DSS) provider to be acquired before doing hash, signature
            verification, or recipient encryption operations.
            </para>
            </param>
            <param name="dwCertEncodingType">
            <para>
            Specifies the encoding type used. It is always acceptable to specify both the certificate and message encoding types by
            combining them with a bitwise- <c>OR</c> operation as shown in the following example:
            </para>
            <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING</para>
            <para>Currently defined encoding types are:</para>
            <list type="bullet">
            <item>
            <term>X509_ASN_ENCODING</term>
            </item>
            <item>
            <term>PKCS_7_ASN_ENCODING</term>
            </item>
            </list>
            </param>
            <param name="pbEncoded">Address of a buffer that contains the content to be hashed. This is the encoded form of a CERT_SIGNED_CONTENT_INFO.</param>
            <param name="cbEncoded">The size, in bytes, of the buffer.</param>
            <param name="pbComputedHash">
            <para>A pointer to a buffer to receive the computed hash.</para>
            <para>
            This parameter can be <c>NULL</c> to set the size of this information for memory allocation purposes. For more information, see
            Retrieving Data of Unknown Length.
            </para>
            </param>
            <param name="pcbComputedHash">
            <para>
            A pointer to a <c>DWORD</c> that contains the size, in bytes, of the buffer pointed to by the pbComputedHash parameter. When the
            function returns, the <c>DWORD</c> contains the number of bytes stored in the buffer.
            </para>
            <para>
            <c>Note</c> When processing the data returned in the buffer, applications need to use the actual size of the data returned. The
            actual size can be slightly smaller than the size of the buffer specified on input. On input, buffer sizes are usually specified
            large enough to ensure that the largest possible output data will fit in the buffer. On output, the variable pointed to by this
            parameter is updated to reflect the actual size of the data copied to the buffer.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the function returns nonzero ( <c>TRUE</c>).</para>
            <para>If the function fails, it returns zero ( <c>FALSE</c>). For extended error information, call GetLastError.</para>
            <para>
            <c>Note</c> Errors from the called functions CryptCreateHash, CryptGetHashParam, and CryptHashData might be propagated to this
            function. This function has the following error codes.
            </para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_MORE_DATA</term>
            <term>
            If the buffer specified by the pbComputedHash parameter is not large enough to hold the returned data, the function sets the
            ERROR_MORE_DATA code, and stores the required buffer size, in bytes, into the variable pointed to by pcbComputedHash.
            </term>
            </item>
            <item>
            <term>ERROR_FILE_NOT_FOUND</term>
            <term>Invalid certificate encoding type. Currently only X509_ASN_ENCODING is supported.</term>
            </item>
            <item>
            <term>NTE_BAD_ALGID</term>
            <term>The object identifier (OID) of the signature algorithm does not map to a known or supported hash algorithm.</term>
            </item>
            </list>
            <para>
            If the function fails, GetLastError may return an Abstract Syntax Notation One (ASN.1) encoding/decoding error. For information
            about these errors, see ASN.1 Encoding/Decoding Return Values.
            </para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptImportPKCS8(Vanara.PInvoke.Crypt32.CRYPT_PKCS8_IMPORT_PARAMS,System.UInt32,System.IntPtr@,System.IntPtr)">
            <summary>
            <para>
            [The <c>CryptImportPKCS8</c> function is no longer available for use as of Windows Server 2008 and Windows Vista. Instead, use
            the PFXImportCertStore function.]
            </para>
            <para>
            <c>Important</c> This API is deprecated. New and existing software should start using Cryptography Next Generation APIs.
            Microsoft may remove this API in future releases.
            </para>
            <para>
            The <c>CryptImportPKCS8</c> function imports the private key in PKCS #8 format to a cryptographic service provider (CSP).
            <c>CryptImportPKCS8</c> will return a handle to the provider and the import KeySpec used.
            </para>
            </summary>
            <param name="sPrivateKeyAndParams">
            A CRYPT_PKCS8_IMPORT_PARAMS structure that contains the private key BLOB and corresponding parameters.
            </param>
            <param name="dwFlags">
            <para>A <c>DWORD</c> value. This parameter can be one of the following values, a combination of them, or a null value.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPT_EXPORTABLE</term>
            <term>
            The key being imported is eventually to be reexported. If this flag is not used, then calls to CryptExportKey with the key
            handle fail.
            </term>
            </item>
            <item>
            <term>CRYPT_USER_PROTECTED</term>
            <term>
            If this flag is set, the CSP notifies the user through a dialog box or some other method when certain actions are attempted
            using this key. The precise behavior is specified by the CSP or the CSP type used. If the provider context was acquired with
            CRYPT_SILENT set, using this flag causes a failure, and the last error is set to NTE_SILENT_CONTEXT.
            </term>
            </item>
            </list>
            </param>
            <param name="phCryptProv">
            <para>
            A pointer to the HCRYPTPROV to receive the handle of the provider into which the key is imported by calling the
            <c>CryptImportPKCS8</c> function.
            </para>
            <para>When you have finished using the handle, free the handle by calling CryptReleaseContext.</para>
            <para>This parameter can be <c>NULL</c>, in which case the handle of the provider is not returned.</para>
            </param>
            <param name="pvAuxInfo">This parameter must be <c>NULL</c>.</param>
            <returns>
            <para>If the function succeeds, the function returns nonzero ( <c>TRUE</c>).</para>
            <para>If the function fails, it returns zero ( <c>FALSE</c>). For extended error information, call GetLastError.</para>
            <para>The following error code is specific to this function.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_UNSUPPORTED_TYPE</term>
            <term>The algorithm object identifier (OID) of the private key is not supported.</term>
            </item>
            </list>
            <para>
            If the function fails, GetLastError may return an Abstract Syntax Notation One (ASN.1) encoding/decoding error. For information
            about these errors, see ASN.1 Encoding/Decoding Return Values.
            </para>
            </returns>
            <remarks>
            <para>
            <c>CryptImportPKCS8</c> calls the PCRYPT_RESOLVE_HCRYPTPROV_FUNC function by using the CRYPT_PKCS8_IMPORT_PARAMS structure
            contained in the sPrivateKeyAndParams parameter to retrieve a handle of the provider to which to import the key. If
            <c>PCRYPT_RESOLVE_HCRYPTPROV_FUNC</c> is <c>NULL</c>, then the default provider is used.
            </para>
            <para>This function is only supported for asymmetric keys.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptImportPublicKeyInfo(Vanara.PInvoke.Crypt32.HCRYPTPROV,Vanara.PInvoke.Crypt32.CertEncodingType,Vanara.PInvoke.Crypt32.CERT_PUBLIC_KEY_INFO@,Vanara.PInvoke.Crypt32.SafeHCRYPTKEY@)">
            <summary>
            <para>
            The handle of the cryptographic service provider (CSP) to use when importing the public key. This handle must have already been
            created using CryptAcquireContext.
            </para>
            <para>
            Specifies the encoding type used. It is always acceptable to specify both the certificate and message encoding types by
            combining them with a bitwise- <c>OR</c> operation as shown in the following example:
            </para>
            <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING</para>
            <para>Currently defined encoding types are:</para>
            <list type="bullet">
            <item>
            <term>X509_ASN_ENCODING</term>
            </item>
            <item>
            <term>PKCS_7_ASN_ENCODING</term>
            </item>
            </list>
            <para>The address of a CERT_PUBLIC_KEY_INFO structure that contains the public key to import into the provider.</para>
            <para>
            The address of an <c>HCRYPTKEY</c> variable that receives the handle of the imported public key. When you have finished using
            the public key, release the handle by calling the CryptDestroyKey function.
            </para>
            </summary>
            <param name="hCryptProv">
            The handle of the cryptographic service provider (CSP) to use when importing the public key. This handle must have already been
            created using CryptAcquireContext.
            </param>
            <param name="dwCertEncodingType">
            <para>
            Specifies the encoding type used. It is always acceptable to specify both the certificate and message encoding types by
            combining them with a bitwise- <c>OR</c> operation as shown in the following example:
            </para>
            <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING</para>
            <para>Currently defined encoding types are:</para>
            <list type="bullet">
            <item>
            <term>X509_ASN_ENCODING</term>
            </item>
            <item>
            <term>PKCS_7_ASN_ENCODING</term>
            </item>
            </list>
            </param>
            <param name="pInfo">The address of a CERT_PUBLIC_KEY_INFO structure that contains the public key to import into the provider.</param>
            <param name="phKey">
            The address of an <c>HCRYPTKEY</c> variable that receives the handle of the imported public key. When you have finished using
            the public key, release the handle by calling the CryptDestroyKey function.
            </param>
            <returns>
            <para>If the function succeeds, the return value is nonzero ( <c>TRUE</c>).</para>
            <para>If the function fails, the return value is zero ( <c>FALSE</c>). For extended error information, call GetLastError.</para>
            <para>
            <c>Note</c> Errors from the called functions CryptGetUserKey and CryptExportKey might be propagated to this function. This
            function has the following error code.
            </para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_FILE_NOT_FOUND</term>
            <term>
            An import function that can be installed or registered could not be found for the specified dwCertEncodingType and
            pInfo-&gt;Algorithm.pszObjId parameters.
            </term>
            </item>
            </list>
            <para>
            If the function fails, GetLastError may return an Abstract Syntax Notation One (ASN.1) encoding/decoding error. For information
            about these errors, see ASN.1 Encoding/Decoding Return Values.
            </para>
            </returns>
            <remarks>
            This function is normally used to retrieve the public key from a certificate. This is done by passing the CERT_PUBLIC_KEY_INFO
            structure from a filled-in certificate structure as shown in the following pseudocode.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptImportPublicKeyInfoEx(Vanara.PInvoke.Crypt32.HCRYPTPROV,System.UInt32,Vanara.PInvoke.Crypt32.CERT_PUBLIC_KEY_INFO@,Vanara.PInvoke.Crypt32.ALG_ID,System.UInt32,System.IntPtr,Vanara.PInvoke.Crypt32.SafeHCRYPTKEY@)">
            <summary>
            <para>The handle of the CSP to receive the imported public key. This handle must have already been created using CryptAcquireContext.</para>
            <para>
            Specifies the encoding type used. It is always acceptable to specify both the certificate and message encoding types by
            combining them with a bitwise- <c>OR</c> operation as shown in the following example:
            </para>
            <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING</para>
            <para>Currently defined encoding types are:</para>
            <list type="bullet">
            <item>
            <term>X509_ASN_ENCODING</term>
            </item>
            <item>
            <term>PKCS_7_ASN_ENCODING</term>
            </item>
            </list>
            <para>the address of a CERT_PUBLIC_KEY_INFO structure that contains the public key to import into the provider.</para>
            <para>
            <c>Note</c> The <c>pzObjId</c> member of the <c>Algorithm</c> member pointed to by the pInfo and dwCertEncodingType parameters
            determine an installable <c>CRYPT_OID_IMPORT_PUBLIC_KEY_INFO_FUNC</c> callback function. If an installable function is not
            found, an attempt is made to import the key as an RSA Public Key (szOID_RSA_RSA).
            </para>
            <para>An ALG_ID structure that contains a CSP-specific algorithm to override the CALG_RSA_KEYX default algorithm.</para>
            <para>Reserved for future use and must be zero.</para>
            <para>Reserved for future use and must be <c>NULL</c>.</para>
            <para>
            The address of an <c>HCRYPTKEY</c> variable that receives the handle of the imported public key. When you have finished using
            the public key, release the handle by calling the CryptDestroyKey function.
            </para>
            </summary>
            <param name="hCryptProv">
            The handle of the CSP to receive the imported public key. This handle must have already been created using CryptAcquireContext.
            </param>
            <param name="dwCertEncodingType">
            <para>
            Specifies the encoding type used. It is always acceptable to specify both the certificate and message encoding types by
            combining them with a bitwise- <c>OR</c> operation as shown in the following example:
            </para>
            <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING</para>
            <para>Currently defined encoding types are:</para>
            <list type="bullet">
            <item>
            <term>X509_ASN_ENCODING</term>
            </item>
            <item>
            <term>PKCS_7_ASN_ENCODING</term>
            </item>
            </list>
            </param>
            <param name="pInfo">
            <para>the address of a CERT_PUBLIC_KEY_INFO structure that contains the public key to import into the provider.</para>
            <para>
            <c>Note</c> The <c>pzObjId</c> member of the <c>Algorithm</c> member pointed to by the pInfo and dwCertEncodingType parameters
            determine an installable <c>CRYPT_OID_IMPORT_PUBLIC_KEY_INFO_FUNC</c> callback function. If an installable function is not
            found, an attempt is made to import the key as an RSA Public Key (szOID_RSA_RSA).
            </para>
            </param>
            <param name="aiKeyAlg">An ALG_ID structure that contains a CSP-specific algorithm to override the CALG_RSA_KEYX default algorithm.</param>
            <param name="dwFlags">Reserved for future use and must be zero.</param>
            <param name="pvAuxInfo">Reserved for future use and must be <c>NULL</c>.</param>
            <param name="phKey">
            The address of an <c>HCRYPTKEY</c> variable that receives the handle of the imported public key. When you have finished using
            the public key, release the handle by calling the CryptDestroyKey function.
            </param>
            <returns>
            <para>If the function succeeds, the function returns nonzero ( <c>TRUE</c>).</para>
            <para>If the function fails, it returns zero ( <c>FALSE</c>). For extended error information, call GetLastError.</para>
            <para>
            <c>Note</c> Errors from the called functions CryptGetUserKey and CryptExportKey might be propagated to this function. This
            function has the following error code.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_FILE_NOT_FOUND</term>
            <term>
            An import function that can be installed or registered could not be found for the specified dwCertEncodingType and pInfo parameters.
            </term>
            </item>
            </list>
            <para>
            If the function fails, GetLastError may return an Abstract Syntax Notation One (ASN.1) encoding/decoding error. For information
            about these errors, see ASN.1 Encoding/Decoding Return Values.
            </para>
            </returns>
            <remarks>
            This function is normally used to retrieve the public key from a certificate. This is done by passing the CERT_PUBLIC_KEY_INFO
            structure from a filled-in certificate structure as shown in the following pseudocode.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptImportPublicKeyInfoEx2(Vanara.PInvoke.Crypt32.CertEncodingType,Vanara.PInvoke.Crypt32.CERT_PUBLIC_KEY_INFO@,Vanara.PInvoke.Crypt32.CryptOIDInfoFlags,System.IntPtr,Vanara.PInvoke.BCrypt.SafeBCRYPT_KEY_HANDLE@)">
            <summary>
            The <c>CryptImportPublicKeyInfoEx2</c> function imports a public key into the CNG asymmetric provider that corresponds to the
            public key object identifier (OID) and returns a CNG handle to the key.
            </summary>
            <param name="dwCertEncodingType">
            <para>
            The certificate encoding type that was used to encrypt the subject. The message encoding type identifier, contained in the high
            <c>WORD</c> of this value, is ignored by this function.
            </para>
            <para>This parameter can be the following currently defined certificate encoding type.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>X509_ASN_ENCODING 1 (0x1)</term>
            <term>Specifies X.509 certificate encoding.</term>
            </item>
            </list>
            </param>
            <param name="pInfo">
            The address of a CERT_PUBLIC_KEY_INFO structure that contains the public key information to import into the provider.
            </param>
            <param name="dwFlags">
            <para>
            A set of flags that modify the behavior of this function. This can be zero or a combination of one or more of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPT_OID_INFO_PUBKEY_SIGN_KEY_FLAG</term>
            <term>
            Skips public keys in the CRYPT_PUBKEY_ALG_OID_GROUP_ID group that are explicitly flagged with the
            CRYPT_OID_PUBKEY_ENCRYPT_ONLY_FLAG flag.
            </term>
            </item>
            <item>
            <term>CRYPT_OID_INFO_PUBKEY_ENCRYPT_KEY_FLAG</term>
            <term>
            Skips public keys in the CRYPT_PUBKEY_ALG_OID_GROUP_ID group that are explicitly flagged with the
            CRYPT_OID_PUBKEY_SIGN_ONLY_FLAG flag.
            </term>
            </item>
            </list>
            <para>
            These flags are passed in the dwKeyType parameter of the CryptFindOIDInfo function when mapping the public key object identifier
            to the corresponding CNG public key algorithm identifier.
            </para>
            </param>
            <param name="pvAuxInfo">This parameter is reserved for future use and must be set to <c>NULL</c>.</param>
            <param name="phKey">
            <para>The address of a <c>BCRYPT_KEY_HANDLE</c> variable that receives the handle of the imported key.</para>
            <para>When this handle is no longer needed, you must release it by calling the BCryptDestroyKey function.</para>
            </param>
            <returns>
            <para>If the function succeeds, the function returns nonzero ( <c>TRUE</c>).</para>
            <para>
            If the function fails, it returns zero ( <c>FALSE</c>). For extended error information, call GetLastError. Possible error codes
            include, but are not limited to, the following.
            </para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_FILE_NOT_FOUND</term>
            <term>
            An import function that can be installed or registered could not be found for the specified dwCertEncodingType and pInfo parameters.
            </term>
            </item>
            <item>
            <term>E_INVALIDARG</term>
            <term>One or more parameters are not valid.</term>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptMemAlloc(System.UInt32)">
            <summary>
            The <c>CryptMemAlloc</c> function allocates memory for a buffer. It is used by all Crypt32.lib functions that return allocated buffers.
            </summary>
            <param name="cbSize">Number of bytes to be allocated.</param>
            <returns>
            Returns a pointer to the buffer allocated. If the function fails, <c>NULL</c> is returned. When you have finished using the
            buffer, free the memory by calling the CryptMemFree function.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptMemFree(System.IntPtr)">
            <summary>The <c>CryptMemFree</c> function frees memory allocated by CryptMemAlloc or CryptMemRealloc.</summary>
            <param name="pv">A pointer to the buffer to be freed.</param>
            <returns>This function does not return a value.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptMemRealloc(System.IntPtr,System.UInt32)">
            <summary>
            The <c>CryptMemRealloc</c> function frees the memory currently allocated for a buffer and allocates memory for a new buffer.
            </summary>
            <param name="pv">A pointer to a currently allocated buffer.</param>
            <param name="cbSize">Number of bytes to be allocated.</param>
            <returns>
            Returns a pointer to the buffer allocated. If the function fails, <c>NULL</c> is returned. When you have finished using the
            buffer, free the memory by calling the CryptMemFree function.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptQueryObject(Vanara.PInvoke.Crypt32.CertQueryObjectType,System.IntPtr,Vanara.PInvoke.Crypt32.CertQueryContentFlags,Vanara.PInvoke.Crypt32.CertQueryFormatFlags,System.UInt32,Vanara.PInvoke.Crypt32.CertEncodingType@,Vanara.PInvoke.Crypt32.CertQueryContentType@,Vanara.PInvoke.Crypt32.CertQueryFormatType@,Vanara.PInvoke.Crypt32.SafeHCERTSTORE@,Vanara.PInvoke.Crypt32.SafeHCRYPTMSG@,Vanara.PInvoke.Crypt32.SafePCCERT_CONTEXT@)">
            <summary>
            <para>Indicates the type of the object to be queried. This must be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_QUERY_OBJECT_BLOB</term>
            <term>The object is stored in a structure in memory.</term>
            </item>
            <item>
            <term>CERT_QUERY_OBJECT_FILE</term>
            <term>The object is stored in a file.</term>
            </item>
            </list>
            <para>A pointer to the object to be queried. The type of data pointer depends on the contents of the dwObjectType parameter.</para>
            <list type="table">
            <listheader>
            <term>dwObjectType value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_QUERY_OBJECT_BLOB</term>
            <term>This parameter is a pointer to a CERT_BLOB, or similar, structure that contains the object to query.</term>
            </item>
            <item>
            <term>CERT_QUERY_OBJECT_FILE</term>
            <term>This parameter is a pointer to a null-terminated Unicode string that contains the path and name of the file to query.</term>
            </item>
            </list>
            <para>Indicates the expected content type. This can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_ALL</term>
            <term>
            The content can be any type. This does not include the CERT_QUERY_CONTENT_FLAG_PFX_AND_LOAD flag. If this flag is specified,
            this function will attempt to obtain information about the object, trying different content types until the proper content type
            is found or the content types are exhausted. This is obviously inefficient, so this flag should only be used if the content type
            is not known.
            </term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_CERT</term>
            <term>The content is a single certificate.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_CERT_PAIR</term>
            <term>
            The content is an Abstract Syntax Notation One (ASN.1) encoded X509_CERT_PAIR (an encoded certificate pair that contains either
            forward, reverse, or forward and reverse cross certificates).
            </term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_CRL</term>
            <term>The content is a single CRL.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_CTL</term>
            <term>The content is a single CTL.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_PFX</term>
            <term>
            The content is a PFX (PKCS #12) packet, but it will not be loaded by this function. You can use the PFXImportCertStore function
            to load this into a store.
            </term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_PFX_AND_LOAD</term>
            <term>
            The content is a PFX (PKCS #12) packet and will be loaded by this function subject to the conditions specified in the following
            note. Windows Server 2003 and Windows XP: This value is not supported.
            </term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_PKCS7_SIGNED</term>
            <term>The content is a PKCS #7 signed message.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_PKCS7_SIGNED_EMBED</term>
            <term>The content is an embedded PKCS #7 signed message.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_PKCS7_UNSIGNED</term>
            <term>The content is a PKCS #7 unsigned message.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_PKCS10</term>
            <term>The content is a PKCS #10 message.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_SERIALIZED_CERT</term>
            <term>The content is a serialized single certificate.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_SERIALIZED_CRL</term>
            <term>The content is a serialized single CRL.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_SERIALIZED_CTL</term>
            <term>The content is serialized single CTL.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_SERIALIZED_STORE</term>
            <term>The content is a serialized store.</term>
            </item>
            </list>
            <para>Indicates the expected format of the returned type. This can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_QUERY_FORMAT_FLAG_ALL</term>
            <term>The content can be returned in any format.</term>
            </item>
            <item>
            <term>CERT_QUERY_FORMAT_FLAG_ASN_ASCII_HEX_ENCODED</term>
            <term>The content should be returned in ASCII hex-encoded format with a "{ASN}" prefix.</term>
            </item>
            <item>
            <term>CERT_QUERY_FORMAT_FLAG_BASE64_ENCODED</term>
            <term>The content should be returned in Base64 encoded format.</term>
            </item>
            <item>
            <term>CERT_QUERY_FORMAT_FLAG_BINARY</term>
            <term>The content should be returned in binary format.</term>
            </item>
            </list>
            <para>This parameter is reserved for future use and must be set to zero.</para>
            <para>
            A pointer to a <c>DWORD</c> value that receives the type of encoding used in the message. If this information is not needed, set
            this parameter to <c>NULL</c>.
            </para>
            <para>This parameter can receives a combination of one or more of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>PKCS_7_ASN_ENCODING 65536 (0x10000)</term>
            <term>Specifies PKCS 7 message encoding.</term>
            </item>
            <item>
            <term>X509_ASN_ENCODING 1 (0x1)</term>
            <term>Specifies X.509 certificate encoding.</term>
            </item>
            </list>
            <para>
            A pointer to a <c>DWORD</c> value that receives the actual type of the content. If this information is not needed, set this
            parameter to <c>NULL</c>. The returned content type can be one of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_QUERY_CONTENT_CERT</term>
            <term>The content is a single certificate.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_CERT_PAIR</term>
            <term>The content is an ASN.1 encoded X509_CERT_pair.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_CRL</term>
            <term>The content is a single CRL.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_CTL</term>
            <term>The content is a single CTL.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_PFX</term>
            <term>
            The content is a PFX (PKCS #12) packet. This function only verifies that the object is a PKCS #12 packet. The PKCS #12 packet is
            not loaded into a certificate store.
            </term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_PFX_AND_LOAD</term>
            <term>
            The content is a PFX (PKCS #12) packet, and it has been loaded into a certificate store. Windows Server 2003 and Windows XP:
            This value is not supported.
            </term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_PKCS7_SIGNED</term>
            <term>The content is a PKCS #7 signed message.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_PKCS7_SIGNED_EMBED</term>
            <term>The content is an embedded PKCS #7 signed message.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_PKCS7_UNSIGNED</term>
            <term>The content is a PKCS #7 unsigned message.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_PKCS10</term>
            <term>The content is a PKCS #10 message.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_SERIALIZED_CERT</term>
            <term>The content is a serialized single certificate.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_SERIALIZED_CRL</term>
            <term>The content is a serialized single CRL.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_SERIALIZED_CTL</term>
            <term>The content is a serialized single CTL.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_SERIALIZED_STORE</term>
            <term>The content is a serialized store.</term>
            </item>
            </list>
            <para>
            A pointer to a <c>DWORD</c> value that receives the actual format type of the content. If this information is not needed, set
            this parameter to <c>NULL</c>. The returned format type can be one of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_QUERY_FORMAT_ASN_ASCII_HEX_ENCODED</term>
            <term>The content is in ASCII hex-encoded format with an "{ASN}" prefix.</term>
            </item>
            <item>
            <term>CERT_QUERY_FORMAT_BASE64_ENCODED</term>
            <term>The content is in Base64 encoded format.</term>
            </item>
            <item>
            <term>CERT_QUERY_FORMAT_BINARY</term>
            <term>The content is in binary format.</term>
            </item>
            </list>
            <para>
            A pointer to an <c>HCERTSTORE</c> value that receives a handle to a certificate store that includes all of the certificates,
            CRLs, and CTLs in the object.
            </para>
            <para>
            This parameter only receives a certificate store handle when the dwContentType parameter receives one of the following values.
            This parameter receives <c>NULL</c> for all other content types.
            </para>
            <para>CERT_QUERY_CONTENT_CERT</para>
            <para>CERT_QUERY_CONTENT_CRL</para>
            <para>CERT_QUERY_CONTENT_CTL</para>
            <para>CERT_QUERY_CONTENT_PFX_AND_LOAD</para>
            <para>CERT_QUERY_CONTENT_PKCS7_SIGNED</para>
            <para>CERT_QUERY_CONTENT_PKCS7_SIGNED_EMBED</para>
            <para>CERT_QUERY_CONTENT_SERIALIZED_CERT</para>
            <para>CERT_QUERY_CONTENT_SERIALIZED_CRL</para>
            <para>CERT_QUERY_CONTENT_SERIALIZED_CTL</para>
            <para>CERT_QUERY_CONTENT_SERIALIZED_STORE</para>
            <para>When you have finished using the handle, free it by passing the handle to the CertCloseStore function.</para>
            <para>If this information is not needed, set this parameter to <c>NULL</c>.</para>
            <para>A pointer to an <c>HCRYPTMSG</c> value that receives the handle of an opened message.</para>
            <para>
            This parameter only receives a message handle when the dwContentType parameter receives one of the following values. This
            parameter receives <c>NULL</c> for all other content types.
            </para>
            <para>CERT_QUERY_CONTENT_PKCS7_SIGNED</para>
            <para>CERT_QUERY_CONTENT_PKCS7_SIGNED_EMBED</para>
            <para>CERT_QUERY_CONTENT_PKCS7_UNSIGNED</para>
            <para>When you have finished using the handle, free it by passing the handle to the CryptMsgClose function.</para>
            <para>If this information is not needed, set this parameter to <c>NULL</c>.</para>
            <para>A pointer to a pointer that receives additional information about the object.</para>
            <para>
            The format of this data depends on the value received by the dwContentType parameter. The following table lists the format of
            the data for the specified dwContentType value.
            </para>
            <list type="table">
            <listheader>
            <term>dwContentType value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_QUERY_CONTENT_CERT</term>
            <term>
            This parameter receives a pointer to a CERT_CONTEXT structure. When you have finished using the structure, free it by passing
            this pointer to the CertFreeCertificateContext function.
            </term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_CRL</term>
            <term>
            This parameter receives a pointer to a CRL_CONTEXT structure. When you have finished using the structure, free it by passing
            this pointer to the CertFreeCRLContext function.
            </term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_CTL</term>
            <term>
            This parameter receives a pointer to a CTL_CONTEXT structure. When you have finished using the structure, free it by passing
            this pointer to the CertFreeCTLContext function.
            </term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_SERIALIZED_CERT</term>
            <term>
            This parameter receives a pointer to a CERT_CONTEXT structure. When you have finished using the structure, free it by passing
            this pointer to the CertFreeCertificateContext function.
            </term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_SERIALIZED_CRL</term>
            <term>
            This parameter receives a pointer to a CRL_CONTEXT structure. When you have finished using the structure, free it by passing
            this pointer to the CertFreeCRLContext function.
            </term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_SERIALIZED_CTL</term>
            <term>
            This parameter receives a pointer to a CTL_CONTEXT structure. When you have finished using the structure, free it by passing
            this pointer to the CertFreeCTLContext function.
            </term>
            </item>
            </list>
            <para>If this information is not needed, set this parameter to <c>NULL</c>.</para>
            </summary>
            <param name="dwObjectType">
            <para>Indicates the type of the object to be queried. This must be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_QUERY_OBJECT_BLOB</term>
            <term>The object is stored in a structure in memory.</term>
            </item>
            <item>
            <term>CERT_QUERY_OBJECT_FILE</term>
            <term>The object is stored in a file.</term>
            </item>
            </list>
            </param>
            <param name="pvObject">
            <para>A pointer to the object to be queried. The type of data pointer depends on the contents of the dwObjectType parameter.</para>
            <list type="table">
            <listheader>
            <term>dwObjectType value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_QUERY_OBJECT_BLOB</term>
            <term>This parameter is a pointer to a CERT_BLOB, or similar, structure that contains the object to query.</term>
            </item>
            <item>
            <term>CERT_QUERY_OBJECT_FILE</term>
            <term>This parameter is a pointer to a null-terminated Unicode string that contains the path and name of the file to query.</term>
            </item>
            </list>
            </param>
            <param name="dwExpectedContentTypeFlags">
            <para>Indicates the expected content type. This can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_ALL</term>
            <term>
            The content can be any type. This does not include the CERT_QUERY_CONTENT_FLAG_PFX_AND_LOAD flag. If this flag is specified,
            this function will attempt to obtain information about the object, trying different content types until the proper content type
            is found or the content types are exhausted. This is obviously inefficient, so this flag should only be used if the content type
            is not known.
            </term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_CERT</term>
            <term>The content is a single certificate.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_CERT_PAIR</term>
            <term>
            The content is an Abstract Syntax Notation One (ASN.1) encoded X509_CERT_PAIR (an encoded certificate pair that contains either
            forward, reverse, or forward and reverse cross certificates).
            </term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_CRL</term>
            <term>The content is a single CRL.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_CTL</term>
            <term>The content is a single CTL.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_PFX</term>
            <term>
            The content is a PFX (PKCS #12) packet, but it will not be loaded by this function. You can use the PFXImportCertStore function
            to load this into a store.
            </term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_PFX_AND_LOAD</term>
            <term>
            The content is a PFX (PKCS #12) packet and will be loaded by this function subject to the conditions specified in the following
            note. Windows Server 2003 and Windows XP: This value is not supported.
            </term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_PKCS7_SIGNED</term>
            <term>The content is a PKCS #7 signed message.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_PKCS7_SIGNED_EMBED</term>
            <term>The content is an embedded PKCS #7 signed message.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_PKCS7_UNSIGNED</term>
            <term>The content is a PKCS #7 unsigned message.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_PKCS10</term>
            <term>The content is a PKCS #10 message.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_SERIALIZED_CERT</term>
            <term>The content is a serialized single certificate.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_SERIALIZED_CRL</term>
            <term>The content is a serialized single CRL.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_SERIALIZED_CTL</term>
            <term>The content is serialized single CTL.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_SERIALIZED_STORE</term>
            <term>The content is a serialized store.</term>
            </item>
            </list>
            </param>
            <param name="dwExpectedFormatTypeFlags">
            <para>Indicates the expected format of the returned type. This can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_QUERY_FORMAT_FLAG_ALL</term>
            <term>The content can be returned in any format.</term>
            </item>
            <item>
            <term>CERT_QUERY_FORMAT_FLAG_ASN_ASCII_HEX_ENCODED</term>
            <term>The content should be returned in ASCII hex-encoded format with a "{ASN}" prefix.</term>
            </item>
            <item>
            <term>CERT_QUERY_FORMAT_FLAG_BASE64_ENCODED</term>
            <term>The content should be returned in Base64 encoded format.</term>
            </item>
            <item>
            <term>CERT_QUERY_FORMAT_FLAG_BINARY</term>
            <term>The content should be returned in binary format.</term>
            </item>
            </list>
            </param>
            <param name="dwFlags">This parameter is reserved for future use and must be set to zero.</param>
            <param name="pdwMsgAndCertEncodingType">
            <para>
            A pointer to a <c>DWORD</c> value that receives the type of encoding used in the message. If this information is not needed, set
            this parameter to <c>NULL</c>.
            </para>
            <para>This parameter can receives a combination of one or more of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>PKCS_7_ASN_ENCODING 65536 (0x10000)</term>
            <term>Specifies PKCS 7 message encoding.</term>
            </item>
            <item>
            <term>X509_ASN_ENCODING 1 (0x1)</term>
            <term>Specifies X.509 certificate encoding.</term>
            </item>
            </list>
            </param>
            <param name="pdwContentType">
            <para>
            A pointer to a <c>DWORD</c> value that receives the actual type of the content. If this information is not needed, set this
            parameter to <c>NULL</c>. The returned content type can be one of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_QUERY_CONTENT_CERT</term>
            <term>The content is a single certificate.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_CERT_PAIR</term>
            <term>The content is an ASN.1 encoded X509_CERT_pair.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_CRL</term>
            <term>The content is a single CRL.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_CTL</term>
            <term>The content is a single CTL.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_PFX</term>
            <term>
            The content is a PFX (PKCS #12) packet. This function only verifies that the object is a PKCS #12 packet. The PKCS #12 packet is
            not loaded into a certificate store.
            </term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_PFX_AND_LOAD</term>
            <term>
            The content is a PFX (PKCS #12) packet, and it has been loaded into a certificate store. Windows Server 2003 and Windows XP:
            This value is not supported.
            </term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_PKCS7_SIGNED</term>
            <term>The content is a PKCS #7 signed message.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_PKCS7_SIGNED_EMBED</term>
            <term>The content is an embedded PKCS #7 signed message.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_PKCS7_UNSIGNED</term>
            <term>The content is a PKCS #7 unsigned message.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_PKCS10</term>
            <term>The content is a PKCS #10 message.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_SERIALIZED_CERT</term>
            <term>The content is a serialized single certificate.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_SERIALIZED_CRL</term>
            <term>The content is a serialized single CRL.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_SERIALIZED_CTL</term>
            <term>The content is a serialized single CTL.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_SERIALIZED_STORE</term>
            <term>The content is a serialized store.</term>
            </item>
            </list>
            </param>
            <param name="pdwFormatType">
            <para>
            A pointer to a <c>DWORD</c> value that receives the actual format type of the content. If this information is not needed, set
            this parameter to <c>NULL</c>. The returned format type can be one of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_QUERY_FORMAT_ASN_ASCII_HEX_ENCODED</term>
            <term>The content is in ASCII hex-encoded format with an "{ASN}" prefix.</term>
            </item>
            <item>
            <term>CERT_QUERY_FORMAT_BASE64_ENCODED</term>
            <term>The content is in Base64 encoded format.</term>
            </item>
            <item>
            <term>CERT_QUERY_FORMAT_BINARY</term>
            <term>The content is in binary format.</term>
            </item>
            </list>
            </param>
            <param name="phCertStore">
            <para>
            A pointer to an <c>HCERTSTORE</c> value that receives a handle to a certificate store that includes all of the certificates,
            CRLs, and CTLs in the object.
            </para>
            <para>
            This parameter only receives a certificate store handle when the dwContentType parameter receives one of the following values.
            This parameter receives <c>NULL</c> for all other content types.
            </para>
            <para>CERT_QUERY_CONTENT_CERT</para>
            <para>CERT_QUERY_CONTENT_CRL</para>
            <para>CERT_QUERY_CONTENT_CTL</para>
            <para>CERT_QUERY_CONTENT_PFX_AND_LOAD</para>
            <para>CERT_QUERY_CONTENT_PKCS7_SIGNED</para>
            <para>CERT_QUERY_CONTENT_PKCS7_SIGNED_EMBED</para>
            <para>CERT_QUERY_CONTENT_SERIALIZED_CERT</para>
            <para>CERT_QUERY_CONTENT_SERIALIZED_CRL</para>
            <para>CERT_QUERY_CONTENT_SERIALIZED_CTL</para>
            <para>CERT_QUERY_CONTENT_SERIALIZED_STORE</para>
            <para>When you have finished using the handle, free it by passing the handle to the CertCloseStore function.</para>
            <para>If this information is not needed, set this parameter to <c>NULL</c>.</para>
            </param>
            <param name="phMsg">
            <para>A pointer to an <c>HCRYPTMSG</c> value that receives the handle of an opened message.</para>
            <para>
            This parameter only receives a message handle when the dwContentType parameter receives one of the following values. This
            parameter receives <c>NULL</c> for all other content types.
            </para>
            <para>CERT_QUERY_CONTENT_PKCS7_SIGNED</para>
            <para>CERT_QUERY_CONTENT_PKCS7_SIGNED_EMBED</para>
            <para>CERT_QUERY_CONTENT_PKCS7_UNSIGNED</para>
            <para>When you have finished using the handle, free it by passing the handle to the CryptMsgClose function.</para>
            <para>If this information is not needed, set this parameter to <c>NULL</c>.</para>
            </param>
            <param name="ppvContext">
            <para>A pointer to a pointer that receives additional information about the object.</para>
            <para>
            The format of this data depends on the value received by the dwContentType parameter. The following table lists the format of
            the data for the specified dwContentType value.
            </para>
            <list type="table">
            <listheader>
            <term>dwContentType value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_QUERY_CONTENT_CERT</term>
            <term>
            This parameter receives a pointer to a CERT_CONTEXT structure. When you have finished using the structure, free it by passing
            this pointer to the CertFreeCertificateContext function.
            </term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_CRL</term>
            <term>
            This parameter receives a pointer to a CRL_CONTEXT structure. When you have finished using the structure, free it by passing
            this pointer to the CertFreeCRLContext function.
            </term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_CTL</term>
            <term>
            This parameter receives a pointer to a CTL_CONTEXT structure. When you have finished using the structure, free it by passing
            this pointer to the CertFreeCTLContext function.
            </term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_SERIALIZED_CERT</term>
            <term>
            This parameter receives a pointer to a CERT_CONTEXT structure. When you have finished using the structure, free it by passing
            this pointer to the CertFreeCertificateContext function.
            </term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_SERIALIZED_CRL</term>
            <term>
            This parameter receives a pointer to a CRL_CONTEXT structure. When you have finished using the structure, free it by passing
            this pointer to the CertFreeCRLContext function.
            </term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_SERIALIZED_CTL</term>
            <term>
            This parameter receives a pointer to a CTL_CONTEXT structure. When you have finished using the structure, free it by passing
            this pointer to the CertFreeCTLContext function.
            </term>
            </item>
            </list>
            <para>If this information is not needed, set this parameter to <c>NULL</c>.</para>
            </param>
            <returns>
            <para>If the function succeeds, the function returns nonzero.</para>
            <para>If the function fails, it returns zero. For extended error information, call GetLastError.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptQueryObject(Vanara.PInvoke.Crypt32.CertQueryObjectType,System.IntPtr,Vanara.PInvoke.Crypt32.CertQueryContentFlags,Vanara.PInvoke.Crypt32.CertQueryFormatFlags,System.UInt32,Vanara.PInvoke.Crypt32.CertEncodingType@,Vanara.PInvoke.Crypt32.CertQueryContentType@,Vanara.PInvoke.Crypt32.CertQueryFormatType@,Vanara.PInvoke.Crypt32.SafeHCERTSTORE@,Vanara.PInvoke.Crypt32.SafeHCRYPTMSG@,Vanara.PInvoke.Crypt32.SafePCCRL_CONTEXT@)">
            <summary>
            <para>Indicates the type of the object to be queried. This must be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_QUERY_OBJECT_BLOB</term>
            <term>The object is stored in a structure in memory.</term>
            </item>
            <item>
            <term>CERT_QUERY_OBJECT_FILE</term>
            <term>The object is stored in a file.</term>
            </item>
            </list>
            <para>A pointer to the object to be queried. The type of data pointer depends on the contents of the dwObjectType parameter.</para>
            <list type="table">
            <listheader>
            <term>dwObjectType value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_QUERY_OBJECT_BLOB</term>
            <term>This parameter is a pointer to a CERT_BLOB, or similar, structure that contains the object to query.</term>
            </item>
            <item>
            <term>CERT_QUERY_OBJECT_FILE</term>
            <term>This parameter is a pointer to a null-terminated Unicode string that contains the path and name of the file to query.</term>
            </item>
            </list>
            <para>Indicates the expected content type. This can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_ALL</term>
            <term>
            The content can be any type. This does not include the CERT_QUERY_CONTENT_FLAG_PFX_AND_LOAD flag. If this flag is specified,
            this function will attempt to obtain information about the object, trying different content types until the proper content type
            is found or the content types are exhausted. This is obviously inefficient, so this flag should only be used if the content type
            is not known.
            </term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_CERT</term>
            <term>The content is a single certificate.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_CERT_PAIR</term>
            <term>
            The content is an Abstract Syntax Notation One (ASN.1) encoded X509_CERT_PAIR (an encoded certificate pair that contains either
            forward, reverse, or forward and reverse cross certificates).
            </term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_CRL</term>
            <term>The content is a single CRL.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_CTL</term>
            <term>The content is a single CTL.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_PFX</term>
            <term>
            The content is a PFX (PKCS #12) packet, but it will not be loaded by this function. You can use the PFXImportCertStore function
            to load this into a store.
            </term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_PFX_AND_LOAD</term>
            <term>
            The content is a PFX (PKCS #12) packet and will be loaded by this function subject to the conditions specified in the following
            note. Windows Server 2003 and Windows XP: This value is not supported.
            </term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_PKCS7_SIGNED</term>
            <term>The content is a PKCS #7 signed message.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_PKCS7_SIGNED_EMBED</term>
            <term>The content is an embedded PKCS #7 signed message.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_PKCS7_UNSIGNED</term>
            <term>The content is a PKCS #7 unsigned message.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_PKCS10</term>
            <term>The content is a PKCS #10 message.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_SERIALIZED_CERT</term>
            <term>The content is a serialized single certificate.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_SERIALIZED_CRL</term>
            <term>The content is a serialized single CRL.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_SERIALIZED_CTL</term>
            <term>The content is serialized single CTL.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_SERIALIZED_STORE</term>
            <term>The content is a serialized store.</term>
            </item>
            </list>
            <para>Indicates the expected format of the returned type. This can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_QUERY_FORMAT_FLAG_ALL</term>
            <term>The content can be returned in any format.</term>
            </item>
            <item>
            <term>CERT_QUERY_FORMAT_FLAG_ASN_ASCII_HEX_ENCODED</term>
            <term>The content should be returned in ASCII hex-encoded format with a "{ASN}" prefix.</term>
            </item>
            <item>
            <term>CERT_QUERY_FORMAT_FLAG_BASE64_ENCODED</term>
            <term>The content should be returned in Base64 encoded format.</term>
            </item>
            <item>
            <term>CERT_QUERY_FORMAT_FLAG_BINARY</term>
            <term>The content should be returned in binary format.</term>
            </item>
            </list>
            <para>This parameter is reserved for future use and must be set to zero.</para>
            <para>
            A pointer to a <c>DWORD</c> value that receives the type of encoding used in the message. If this information is not needed, set
            this parameter to <c>NULL</c>.
            </para>
            <para>This parameter can receives a combination of one or more of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>PKCS_7_ASN_ENCODING 65536 (0x10000)</term>
            <term>Specifies PKCS 7 message encoding.</term>
            </item>
            <item>
            <term>X509_ASN_ENCODING 1 (0x1)</term>
            <term>Specifies X.509 certificate encoding.</term>
            </item>
            </list>
            <para>
            A pointer to a <c>DWORD</c> value that receives the actual type of the content. If this information is not needed, set this
            parameter to <c>NULL</c>. The returned content type can be one of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_QUERY_CONTENT_CERT</term>
            <term>The content is a single certificate.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_CERT_PAIR</term>
            <term>The content is an ASN.1 encoded X509_CERT_pair.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_CRL</term>
            <term>The content is a single CRL.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_CTL</term>
            <term>The content is a single CTL.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_PFX</term>
            <term>
            The content is a PFX (PKCS #12) packet. This function only verifies that the object is a PKCS #12 packet. The PKCS #12 packet is
            not loaded into a certificate store.
            </term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_PFX_AND_LOAD</term>
            <term>
            The content is a PFX (PKCS #12) packet, and it has been loaded into a certificate store. Windows Server 2003 and Windows XP:
            This value is not supported.
            </term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_PKCS7_SIGNED</term>
            <term>The content is a PKCS #7 signed message.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_PKCS7_SIGNED_EMBED</term>
            <term>The content is an embedded PKCS #7 signed message.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_PKCS7_UNSIGNED</term>
            <term>The content is a PKCS #7 unsigned message.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_PKCS10</term>
            <term>The content is a PKCS #10 message.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_SERIALIZED_CERT</term>
            <term>The content is a serialized single certificate.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_SERIALIZED_CRL</term>
            <term>The content is a serialized single CRL.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_SERIALIZED_CTL</term>
            <term>The content is a serialized single CTL.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_SERIALIZED_STORE</term>
            <term>The content is a serialized store.</term>
            </item>
            </list>
            <para>
            A pointer to a <c>DWORD</c> value that receives the actual format type of the content. If this information is not needed, set
            this parameter to <c>NULL</c>. The returned format type can be one of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_QUERY_FORMAT_ASN_ASCII_HEX_ENCODED</term>
            <term>The content is in ASCII hex-encoded format with an "{ASN}" prefix.</term>
            </item>
            <item>
            <term>CERT_QUERY_FORMAT_BASE64_ENCODED</term>
            <term>The content is in Base64 encoded format.</term>
            </item>
            <item>
            <term>CERT_QUERY_FORMAT_BINARY</term>
            <term>The content is in binary format.</term>
            </item>
            </list>
            <para>
            A pointer to an <c>HCERTSTORE</c> value that receives a handle to a certificate store that includes all of the certificates,
            CRLs, and CTLs in the object.
            </para>
            <para>
            This parameter only receives a certificate store handle when the dwContentType parameter receives one of the following values.
            This parameter receives <c>NULL</c> for all other content types.
            </para>
            <para>CERT_QUERY_CONTENT_CERT</para>
            <para>CERT_QUERY_CONTENT_CRL</para>
            <para>CERT_QUERY_CONTENT_CTL</para>
            <para>CERT_QUERY_CONTENT_PFX_AND_LOAD</para>
            <para>CERT_QUERY_CONTENT_PKCS7_SIGNED</para>
            <para>CERT_QUERY_CONTENT_PKCS7_SIGNED_EMBED</para>
            <para>CERT_QUERY_CONTENT_SERIALIZED_CERT</para>
            <para>CERT_QUERY_CONTENT_SERIALIZED_CRL</para>
            <para>CERT_QUERY_CONTENT_SERIALIZED_CTL</para>
            <para>CERT_QUERY_CONTENT_SERIALIZED_STORE</para>
            <para>When you have finished using the handle, free it by passing the handle to the CertCloseStore function.</para>
            <para>If this information is not needed, set this parameter to <c>NULL</c>.</para>
            <para>A pointer to an <c>HCRYPTMSG</c> value that receives the handle of an opened message.</para>
            <para>
            This parameter only receives a message handle when the dwContentType parameter receives one of the following values. This
            parameter receives <c>NULL</c> for all other content types.
            </para>
            <para>CERT_QUERY_CONTENT_PKCS7_SIGNED</para>
            <para>CERT_QUERY_CONTENT_PKCS7_SIGNED_EMBED</para>
            <para>CERT_QUERY_CONTENT_PKCS7_UNSIGNED</para>
            <para>When you have finished using the handle, free it by passing the handle to the CryptMsgClose function.</para>
            <para>If this information is not needed, set this parameter to <c>NULL</c>.</para>
            <para>A pointer to a pointer that receives additional information about the object.</para>
            <para>
            The format of this data depends on the value received by the dwContentType parameter. The following table lists the format of
            the data for the specified dwContentType value.
            </para>
            <list type="table">
            <listheader>
            <term>dwContentType value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_QUERY_CONTENT_CERT</term>
            <term>
            This parameter receives a pointer to a CERT_CONTEXT structure. When you have finished using the structure, free it by passing
            this pointer to the CertFreeCertificateContext function.
            </term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_CRL</term>
            <term>
            This parameter receives a pointer to a CRL_CONTEXT structure. When you have finished using the structure, free it by passing
            this pointer to the CertFreeCRLContext function.
            </term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_CTL</term>
            <term>
            This parameter receives a pointer to a CTL_CONTEXT structure. When you have finished using the structure, free it by passing
            this pointer to the CertFreeCTLContext function.
            </term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_SERIALIZED_CERT</term>
            <term>
            This parameter receives a pointer to a CERT_CONTEXT structure. When you have finished using the structure, free it by passing
            this pointer to the CertFreeCertificateContext function.
            </term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_SERIALIZED_CRL</term>
            <term>
            This parameter receives a pointer to a CRL_CONTEXT structure. When you have finished using the structure, free it by passing
            this pointer to the CertFreeCRLContext function.
            </term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_SERIALIZED_CTL</term>
            <term>
            This parameter receives a pointer to a CTL_CONTEXT structure. When you have finished using the structure, free it by passing
            this pointer to the CertFreeCTLContext function.
            </term>
            </item>
            </list>
            <para>If this information is not needed, set this parameter to <c>NULL</c>.</para>
            </summary>
            <param name="dwObjectType">
            <para>Indicates the type of the object to be queried. This must be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_QUERY_OBJECT_BLOB</term>
            <term>The object is stored in a structure in memory.</term>
            </item>
            <item>
            <term>CERT_QUERY_OBJECT_FILE</term>
            <term>The object is stored in a file.</term>
            </item>
            </list>
            </param>
            <param name="pvObject">
            <para>A pointer to the object to be queried. The type of data pointer depends on the contents of the dwObjectType parameter.</para>
            <list type="table">
            <listheader>
            <term>dwObjectType value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_QUERY_OBJECT_BLOB</term>
            <term>This parameter is a pointer to a CERT_BLOB, or similar, structure that contains the object to query.</term>
            </item>
            <item>
            <term>CERT_QUERY_OBJECT_FILE</term>
            <term>This parameter is a pointer to a null-terminated Unicode string that contains the path and name of the file to query.</term>
            </item>
            </list>
            </param>
            <param name="dwExpectedContentTypeFlags">
            <para>Indicates the expected content type. This can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_ALL</term>
            <term>
            The content can be any type. This does not include the CERT_QUERY_CONTENT_FLAG_PFX_AND_LOAD flag. If this flag is specified,
            this function will attempt to obtain information about the object, trying different content types until the proper content type
            is found or the content types are exhausted. This is obviously inefficient, so this flag should only be used if the content type
            is not known.
            </term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_CERT</term>
            <term>The content is a single certificate.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_CERT_PAIR</term>
            <term>
            The content is an Abstract Syntax Notation One (ASN.1) encoded X509_CERT_PAIR (an encoded certificate pair that contains either
            forward, reverse, or forward and reverse cross certificates).
            </term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_CRL</term>
            <term>The content is a single CRL.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_CTL</term>
            <term>The content is a single CTL.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_PFX</term>
            <term>
            The content is a PFX (PKCS #12) packet, but it will not be loaded by this function. You can use the PFXImportCertStore function
            to load this into a store.
            </term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_PFX_AND_LOAD</term>
            <term>
            The content is a PFX (PKCS #12) packet and will be loaded by this function subject to the conditions specified in the following
            note. Windows Server 2003 and Windows XP: This value is not supported.
            </term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_PKCS7_SIGNED</term>
            <term>The content is a PKCS #7 signed message.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_PKCS7_SIGNED_EMBED</term>
            <term>The content is an embedded PKCS #7 signed message.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_PKCS7_UNSIGNED</term>
            <term>The content is a PKCS #7 unsigned message.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_PKCS10</term>
            <term>The content is a PKCS #10 message.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_SERIALIZED_CERT</term>
            <term>The content is a serialized single certificate.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_SERIALIZED_CRL</term>
            <term>The content is a serialized single CRL.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_SERIALIZED_CTL</term>
            <term>The content is serialized single CTL.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_SERIALIZED_STORE</term>
            <term>The content is a serialized store.</term>
            </item>
            </list>
            </param>
            <param name="dwExpectedFormatTypeFlags">
            <para>Indicates the expected format of the returned type. This can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_QUERY_FORMAT_FLAG_ALL</term>
            <term>The content can be returned in any format.</term>
            </item>
            <item>
            <term>CERT_QUERY_FORMAT_FLAG_ASN_ASCII_HEX_ENCODED</term>
            <term>The content should be returned in ASCII hex-encoded format with a "{ASN}" prefix.</term>
            </item>
            <item>
            <term>CERT_QUERY_FORMAT_FLAG_BASE64_ENCODED</term>
            <term>The content should be returned in Base64 encoded format.</term>
            </item>
            <item>
            <term>CERT_QUERY_FORMAT_FLAG_BINARY</term>
            <term>The content should be returned in binary format.</term>
            </item>
            </list>
            </param>
            <param name="dwFlags">This parameter is reserved for future use and must be set to zero.</param>
            <param name="pdwMsgAndCertEncodingType">
            <para>
            A pointer to a <c>DWORD</c> value that receives the type of encoding used in the message. If this information is not needed, set
            this parameter to <c>NULL</c>.
            </para>
            <para>This parameter can receives a combination of one or more of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>PKCS_7_ASN_ENCODING 65536 (0x10000)</term>
            <term>Specifies PKCS 7 message encoding.</term>
            </item>
            <item>
            <term>X509_ASN_ENCODING 1 (0x1)</term>
            <term>Specifies X.509 certificate encoding.</term>
            </item>
            </list>
            </param>
            <param name="pdwContentType">
            <para>
            A pointer to a <c>DWORD</c> value that receives the actual type of the content. If this information is not needed, set this
            parameter to <c>NULL</c>. The returned content type can be one of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_QUERY_CONTENT_CERT</term>
            <term>The content is a single certificate.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_CERT_PAIR</term>
            <term>The content is an ASN.1 encoded X509_CERT_pair.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_CRL</term>
            <term>The content is a single CRL.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_CTL</term>
            <term>The content is a single CTL.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_PFX</term>
            <term>
            The content is a PFX (PKCS #12) packet. This function only verifies that the object is a PKCS #12 packet. The PKCS #12 packet is
            not loaded into a certificate store.
            </term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_PFX_AND_LOAD</term>
            <term>
            The content is a PFX (PKCS #12) packet, and it has been loaded into a certificate store. Windows Server 2003 and Windows XP:
            This value is not supported.
            </term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_PKCS7_SIGNED</term>
            <term>The content is a PKCS #7 signed message.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_PKCS7_SIGNED_EMBED</term>
            <term>The content is an embedded PKCS #7 signed message.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_PKCS7_UNSIGNED</term>
            <term>The content is a PKCS #7 unsigned message.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_PKCS10</term>
            <term>The content is a PKCS #10 message.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_SERIALIZED_CERT</term>
            <term>The content is a serialized single certificate.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_SERIALIZED_CRL</term>
            <term>The content is a serialized single CRL.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_SERIALIZED_CTL</term>
            <term>The content is a serialized single CTL.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_SERIALIZED_STORE</term>
            <term>The content is a serialized store.</term>
            </item>
            </list>
            </param>
            <param name="pdwFormatType">
            <para>
            A pointer to a <c>DWORD</c> value that receives the actual format type of the content. If this information is not needed, set
            this parameter to <c>NULL</c>. The returned format type can be one of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_QUERY_FORMAT_ASN_ASCII_HEX_ENCODED</term>
            <term>The content is in ASCII hex-encoded format with an "{ASN}" prefix.</term>
            </item>
            <item>
            <term>CERT_QUERY_FORMAT_BASE64_ENCODED</term>
            <term>The content is in Base64 encoded format.</term>
            </item>
            <item>
            <term>CERT_QUERY_FORMAT_BINARY</term>
            <term>The content is in binary format.</term>
            </item>
            </list>
            </param>
            <param name="phCertStore">
            <para>
            A pointer to an <c>HCERTSTORE</c> value that receives a handle to a certificate store that includes all of the certificates,
            CRLs, and CTLs in the object.
            </para>
            <para>
            This parameter only receives a certificate store handle when the dwContentType parameter receives one of the following values.
            This parameter receives <c>NULL</c> for all other content types.
            </para>
            <para>CERT_QUERY_CONTENT_CERT</para>
            <para>CERT_QUERY_CONTENT_CRL</para>
            <para>CERT_QUERY_CONTENT_CTL</para>
            <para>CERT_QUERY_CONTENT_PFX_AND_LOAD</para>
            <para>CERT_QUERY_CONTENT_PKCS7_SIGNED</para>
            <para>CERT_QUERY_CONTENT_PKCS7_SIGNED_EMBED</para>
            <para>CERT_QUERY_CONTENT_SERIALIZED_CERT</para>
            <para>CERT_QUERY_CONTENT_SERIALIZED_CRL</para>
            <para>CERT_QUERY_CONTENT_SERIALIZED_CTL</para>
            <para>CERT_QUERY_CONTENT_SERIALIZED_STORE</para>
            <para>When you have finished using the handle, free it by passing the handle to the CertCloseStore function.</para>
            <para>If this information is not needed, set this parameter to <c>NULL</c>.</para>
            </param>
            <param name="phMsg">
            <para>A pointer to an <c>HCRYPTMSG</c> value that receives the handle of an opened message.</para>
            <para>
            This parameter only receives a message handle when the dwContentType parameter receives one of the following values. This
            parameter receives <c>NULL</c> for all other content types.
            </para>
            <para>CERT_QUERY_CONTENT_PKCS7_SIGNED</para>
            <para>CERT_QUERY_CONTENT_PKCS7_SIGNED_EMBED</para>
            <para>CERT_QUERY_CONTENT_PKCS7_UNSIGNED</para>
            <para>When you have finished using the handle, free it by passing the handle to the CryptMsgClose function.</para>
            <para>If this information is not needed, set this parameter to <c>NULL</c>.</para>
            </param>
            <param name="ppvContext">
            <para>A pointer to a pointer that receives additional information about the object.</para>
            <para>
            The format of this data depends on the value received by the dwContentType parameter. The following table lists the format of
            the data for the specified dwContentType value.
            </para>
            <list type="table">
            <listheader>
            <term>dwContentType value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_QUERY_CONTENT_CERT</term>
            <term>
            This parameter receives a pointer to a CERT_CONTEXT structure. When you have finished using the structure, free it by passing
            this pointer to the CertFreeCertificateContext function.
            </term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_CRL</term>
            <term>
            This parameter receives a pointer to a CRL_CONTEXT structure. When you have finished using the structure, free it by passing
            this pointer to the CertFreeCRLContext function.
            </term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_CTL</term>
            <term>
            This parameter receives a pointer to a CTL_CONTEXT structure. When you have finished using the structure, free it by passing
            this pointer to the CertFreeCTLContext function.
            </term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_SERIALIZED_CERT</term>
            <term>
            This parameter receives a pointer to a CERT_CONTEXT structure. When you have finished using the structure, free it by passing
            this pointer to the CertFreeCertificateContext function.
            </term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_SERIALIZED_CRL</term>
            <term>
            This parameter receives a pointer to a CRL_CONTEXT structure. When you have finished using the structure, free it by passing
            this pointer to the CertFreeCRLContext function.
            </term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_SERIALIZED_CTL</term>
            <term>
            This parameter receives a pointer to a CTL_CONTEXT structure. When you have finished using the structure, free it by passing
            this pointer to the CertFreeCTLContext function.
            </term>
            </item>
            </list>
            <para>If this information is not needed, set this parameter to <c>NULL</c>.</para>
            </param>
            <returns>
            <para>If the function succeeds, the function returns nonzero.</para>
            <para>If the function fails, it returns zero. For extended error information, call GetLastError.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptQueryObject(Vanara.PInvoke.Crypt32.CertQueryObjectType,System.IntPtr,Vanara.PInvoke.Crypt32.CertQueryContentFlags,Vanara.PInvoke.Crypt32.CertQueryFormatFlags,System.UInt32,Vanara.PInvoke.Crypt32.CertEncodingType@,Vanara.PInvoke.Crypt32.CertQueryContentType@,Vanara.PInvoke.Crypt32.CertQueryFormatType@,Vanara.PInvoke.Crypt32.SafeHCERTSTORE@,Vanara.PInvoke.Crypt32.SafeHCRYPTMSG@,Vanara.PInvoke.Crypt32.SafePCCTL_CONTEXT@)">
            <summary>
            <para>Indicates the type of the object to be queried. This must be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_QUERY_OBJECT_BLOB</term>
            <term>The object is stored in a structure in memory.</term>
            </item>
            <item>
            <term>CERT_QUERY_OBJECT_FILE</term>
            <term>The object is stored in a file.</term>
            </item>
            </list>
            <para>A pointer to the object to be queried. The type of data pointer depends on the contents of the dwObjectType parameter.</para>
            <list type="table">
            <listheader>
            <term>dwObjectType value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_QUERY_OBJECT_BLOB</term>
            <term>This parameter is a pointer to a CERT_BLOB, or similar, structure that contains the object to query.</term>
            </item>
            <item>
            <term>CERT_QUERY_OBJECT_FILE</term>
            <term>This parameter is a pointer to a null-terminated Unicode string that contains the path and name of the file to query.</term>
            </item>
            </list>
            <para>Indicates the expected content type. This can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_ALL</term>
            <term>
            The content can be any type. This does not include the CERT_QUERY_CONTENT_FLAG_PFX_AND_LOAD flag. If this flag is specified,
            this function will attempt to obtain information about the object, trying different content types until the proper content type
            is found or the content types are exhausted. This is obviously inefficient, so this flag should only be used if the content type
            is not known.
            </term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_CERT</term>
            <term>The content is a single certificate.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_CERT_PAIR</term>
            <term>
            The content is an Abstract Syntax Notation One (ASN.1) encoded X509_CERT_PAIR (an encoded certificate pair that contains either
            forward, reverse, or forward and reverse cross certificates).
            </term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_CRL</term>
            <term>The content is a single CRL.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_CTL</term>
            <term>The content is a single CTL.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_PFX</term>
            <term>
            The content is a PFX (PKCS #12) packet, but it will not be loaded by this function. You can use the PFXImportCertStore function
            to load this into a store.
            </term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_PFX_AND_LOAD</term>
            <term>
            The content is a PFX (PKCS #12) packet and will be loaded by this function subject to the conditions specified in the following
            note. Windows Server 2003 and Windows XP: This value is not supported.
            </term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_PKCS7_SIGNED</term>
            <term>The content is a PKCS #7 signed message.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_PKCS7_SIGNED_EMBED</term>
            <term>The content is an embedded PKCS #7 signed message.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_PKCS7_UNSIGNED</term>
            <term>The content is a PKCS #7 unsigned message.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_PKCS10</term>
            <term>The content is a PKCS #10 message.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_SERIALIZED_CERT</term>
            <term>The content is a serialized single certificate.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_SERIALIZED_CRL</term>
            <term>The content is a serialized single CRL.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_SERIALIZED_CTL</term>
            <term>The content is serialized single CTL.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_SERIALIZED_STORE</term>
            <term>The content is a serialized store.</term>
            </item>
            </list>
            <para>Indicates the expected format of the returned type. This can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_QUERY_FORMAT_FLAG_ALL</term>
            <term>The content can be returned in any format.</term>
            </item>
            <item>
            <term>CERT_QUERY_FORMAT_FLAG_ASN_ASCII_HEX_ENCODED</term>
            <term>The content should be returned in ASCII hex-encoded format with a "{ASN}" prefix.</term>
            </item>
            <item>
            <term>CERT_QUERY_FORMAT_FLAG_BASE64_ENCODED</term>
            <term>The content should be returned in Base64 encoded format.</term>
            </item>
            <item>
            <term>CERT_QUERY_FORMAT_FLAG_BINARY</term>
            <term>The content should be returned in binary format.</term>
            </item>
            </list>
            <para>This parameter is reserved for future use and must be set to zero.</para>
            <para>
            A pointer to a <c>DWORD</c> value that receives the type of encoding used in the message. If this information is not needed, set
            this parameter to <c>NULL</c>.
            </para>
            <para>This parameter can receives a combination of one or more of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>PKCS_7_ASN_ENCODING 65536 (0x10000)</term>
            <term>Specifies PKCS 7 message encoding.</term>
            </item>
            <item>
            <term>X509_ASN_ENCODING 1 (0x1)</term>
            <term>Specifies X.509 certificate encoding.</term>
            </item>
            </list>
            <para>
            A pointer to a <c>DWORD</c> value that receives the actual type of the content. If this information is not needed, set this
            parameter to <c>NULL</c>. The returned content type can be one of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_QUERY_CONTENT_CERT</term>
            <term>The content is a single certificate.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_CERT_PAIR</term>
            <term>The content is an ASN.1 encoded X509_CERT_pair.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_CRL</term>
            <term>The content is a single CRL.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_CTL</term>
            <term>The content is a single CTL.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_PFX</term>
            <term>
            The content is a PFX (PKCS #12) packet. This function only verifies that the object is a PKCS #12 packet. The PKCS #12 packet is
            not loaded into a certificate store.
            </term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_PFX_AND_LOAD</term>
            <term>
            The content is a PFX (PKCS #12) packet, and it has been loaded into a certificate store. Windows Server 2003 and Windows XP:
            This value is not supported.
            </term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_PKCS7_SIGNED</term>
            <term>The content is a PKCS #7 signed message.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_PKCS7_SIGNED_EMBED</term>
            <term>The content is an embedded PKCS #7 signed message.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_PKCS7_UNSIGNED</term>
            <term>The content is a PKCS #7 unsigned message.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_PKCS10</term>
            <term>The content is a PKCS #10 message.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_SERIALIZED_CERT</term>
            <term>The content is a serialized single certificate.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_SERIALIZED_CRL</term>
            <term>The content is a serialized single CRL.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_SERIALIZED_CTL</term>
            <term>The content is a serialized single CTL.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_SERIALIZED_STORE</term>
            <term>The content is a serialized store.</term>
            </item>
            </list>
            <para>
            A pointer to a <c>DWORD</c> value that receives the actual format type of the content. If this information is not needed, set
            this parameter to <c>NULL</c>. The returned format type can be one of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_QUERY_FORMAT_ASN_ASCII_HEX_ENCODED</term>
            <term>The content is in ASCII hex-encoded format with an "{ASN}" prefix.</term>
            </item>
            <item>
            <term>CERT_QUERY_FORMAT_BASE64_ENCODED</term>
            <term>The content is in Base64 encoded format.</term>
            </item>
            <item>
            <term>CERT_QUERY_FORMAT_BINARY</term>
            <term>The content is in binary format.</term>
            </item>
            </list>
            <para>
            A pointer to an <c>HCERTSTORE</c> value that receives a handle to a certificate store that includes all of the certificates,
            CRLs, and CTLs in the object.
            </para>
            <para>
            This parameter only receives a certificate store handle when the dwContentType parameter receives one of the following values.
            This parameter receives <c>NULL</c> for all other content types.
            </para>
            <para>CERT_QUERY_CONTENT_CERT</para>
            <para>CERT_QUERY_CONTENT_CRL</para>
            <para>CERT_QUERY_CONTENT_CTL</para>
            <para>CERT_QUERY_CONTENT_PFX_AND_LOAD</para>
            <para>CERT_QUERY_CONTENT_PKCS7_SIGNED</para>
            <para>CERT_QUERY_CONTENT_PKCS7_SIGNED_EMBED</para>
            <para>CERT_QUERY_CONTENT_SERIALIZED_CERT</para>
            <para>CERT_QUERY_CONTENT_SERIALIZED_CRL</para>
            <para>CERT_QUERY_CONTENT_SERIALIZED_CTL</para>
            <para>CERT_QUERY_CONTENT_SERIALIZED_STORE</para>
            <para>When you have finished using the handle, free it by passing the handle to the CertCloseStore function.</para>
            <para>If this information is not needed, set this parameter to <c>NULL</c>.</para>
            <para>A pointer to an <c>HCRYPTMSG</c> value that receives the handle of an opened message.</para>
            <para>
            This parameter only receives a message handle when the dwContentType parameter receives one of the following values. This
            parameter receives <c>NULL</c> for all other content types.
            </para>
            <para>CERT_QUERY_CONTENT_PKCS7_SIGNED</para>
            <para>CERT_QUERY_CONTENT_PKCS7_SIGNED_EMBED</para>
            <para>CERT_QUERY_CONTENT_PKCS7_UNSIGNED</para>
            <para>When you have finished using the handle, free it by passing the handle to the CryptMsgClose function.</para>
            <para>If this information is not needed, set this parameter to <c>NULL</c>.</para>
            <para>A pointer to a pointer that receives additional information about the object.</para>
            <para>
            The format of this data depends on the value received by the dwContentType parameter. The following table lists the format of
            the data for the specified dwContentType value.
            </para>
            <list type="table">
            <listheader>
            <term>dwContentType value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_QUERY_CONTENT_CERT</term>
            <term>
            This parameter receives a pointer to a CERT_CONTEXT structure. When you have finished using the structure, free it by passing
            this pointer to the CertFreeCertificateContext function.
            </term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_CRL</term>
            <term>
            This parameter receives a pointer to a CRL_CONTEXT structure. When you have finished using the structure, free it by passing
            this pointer to the CertFreeCRLContext function.
            </term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_CTL</term>
            <term>
            This parameter receives a pointer to a CTL_CONTEXT structure. When you have finished using the structure, free it by passing
            this pointer to the CertFreeCTLContext function.
            </term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_SERIALIZED_CERT</term>
            <term>
            This parameter receives a pointer to a CERT_CONTEXT structure. When you have finished using the structure, free it by passing
            this pointer to the CertFreeCertificateContext function.
            </term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_SERIALIZED_CRL</term>
            <term>
            This parameter receives a pointer to a CRL_CONTEXT structure. When you have finished using the structure, free it by passing
            this pointer to the CertFreeCRLContext function.
            </term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_SERIALIZED_CTL</term>
            <term>
            This parameter receives a pointer to a CTL_CONTEXT structure. When you have finished using the structure, free it by passing
            this pointer to the CertFreeCTLContext function.
            </term>
            </item>
            </list>
            <para>If this information is not needed, set this parameter to <c>NULL</c>.</para>
            </summary>
            <param name="dwObjectType">
            <para>Indicates the type of the object to be queried. This must be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_QUERY_OBJECT_BLOB</term>
            <term>The object is stored in a structure in memory.</term>
            </item>
            <item>
            <term>CERT_QUERY_OBJECT_FILE</term>
            <term>The object is stored in a file.</term>
            </item>
            </list>
            </param>
            <param name="pvObject">
            <para>A pointer to the object to be queried. The type of data pointer depends on the contents of the dwObjectType parameter.</para>
            <list type="table">
            <listheader>
            <term>dwObjectType value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_QUERY_OBJECT_BLOB</term>
            <term>This parameter is a pointer to a CERT_BLOB, or similar, structure that contains the object to query.</term>
            </item>
            <item>
            <term>CERT_QUERY_OBJECT_FILE</term>
            <term>This parameter is a pointer to a null-terminated Unicode string that contains the path and name of the file to query.</term>
            </item>
            </list>
            </param>
            <param name="dwExpectedContentTypeFlags">
            <para>Indicates the expected content type. This can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_ALL</term>
            <term>
            The content can be any type. This does not include the CERT_QUERY_CONTENT_FLAG_PFX_AND_LOAD flag. If this flag is specified,
            this function will attempt to obtain information about the object, trying different content types until the proper content type
            is found or the content types are exhausted. This is obviously inefficient, so this flag should only be used if the content type
            is not known.
            </term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_CERT</term>
            <term>The content is a single certificate.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_CERT_PAIR</term>
            <term>
            The content is an Abstract Syntax Notation One (ASN.1) encoded X509_CERT_PAIR (an encoded certificate pair that contains either
            forward, reverse, or forward and reverse cross certificates).
            </term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_CRL</term>
            <term>The content is a single CRL.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_CTL</term>
            <term>The content is a single CTL.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_PFX</term>
            <term>
            The content is a PFX (PKCS #12) packet, but it will not be loaded by this function. You can use the PFXImportCertStore function
            to load this into a store.
            </term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_PFX_AND_LOAD</term>
            <term>
            The content is a PFX (PKCS #12) packet and will be loaded by this function subject to the conditions specified in the following
            note. Windows Server 2003 and Windows XP: This value is not supported.
            </term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_PKCS7_SIGNED</term>
            <term>The content is a PKCS #7 signed message.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_PKCS7_SIGNED_EMBED</term>
            <term>The content is an embedded PKCS #7 signed message.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_PKCS7_UNSIGNED</term>
            <term>The content is a PKCS #7 unsigned message.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_PKCS10</term>
            <term>The content is a PKCS #10 message.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_SERIALIZED_CERT</term>
            <term>The content is a serialized single certificate.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_SERIALIZED_CRL</term>
            <term>The content is a serialized single CRL.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_SERIALIZED_CTL</term>
            <term>The content is serialized single CTL.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_FLAG_SERIALIZED_STORE</term>
            <term>The content is a serialized store.</term>
            </item>
            </list>
            </param>
            <param name="dwExpectedFormatTypeFlags">
            <para>Indicates the expected format of the returned type. This can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_QUERY_FORMAT_FLAG_ALL</term>
            <term>The content can be returned in any format.</term>
            </item>
            <item>
            <term>CERT_QUERY_FORMAT_FLAG_ASN_ASCII_HEX_ENCODED</term>
            <term>The content should be returned in ASCII hex-encoded format with a "{ASN}" prefix.</term>
            </item>
            <item>
            <term>CERT_QUERY_FORMAT_FLAG_BASE64_ENCODED</term>
            <term>The content should be returned in Base64 encoded format.</term>
            </item>
            <item>
            <term>CERT_QUERY_FORMAT_FLAG_BINARY</term>
            <term>The content should be returned in binary format.</term>
            </item>
            </list>
            </param>
            <param name="dwFlags">This parameter is reserved for future use and must be set to zero.</param>
            <param name="pdwMsgAndCertEncodingType">
            <para>
            A pointer to a <c>DWORD</c> value that receives the type of encoding used in the message. If this information is not needed, set
            this parameter to <c>NULL</c>.
            </para>
            <para>This parameter can receives a combination of one or more of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>PKCS_7_ASN_ENCODING 65536 (0x10000)</term>
            <term>Specifies PKCS 7 message encoding.</term>
            </item>
            <item>
            <term>X509_ASN_ENCODING 1 (0x1)</term>
            <term>Specifies X.509 certificate encoding.</term>
            </item>
            </list>
            </param>
            <param name="pdwContentType">
            <para>
            A pointer to a <c>DWORD</c> value that receives the actual type of the content. If this information is not needed, set this
            parameter to <c>NULL</c>. The returned content type can be one of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_QUERY_CONTENT_CERT</term>
            <term>The content is a single certificate.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_CERT_PAIR</term>
            <term>The content is an ASN.1 encoded X509_CERT_pair.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_CRL</term>
            <term>The content is a single CRL.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_CTL</term>
            <term>The content is a single CTL.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_PFX</term>
            <term>
            The content is a PFX (PKCS #12) packet. This function only verifies that the object is a PKCS #12 packet. The PKCS #12 packet is
            not loaded into a certificate store.
            </term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_PFX_AND_LOAD</term>
            <term>
            The content is a PFX (PKCS #12) packet, and it has been loaded into a certificate store. Windows Server 2003 and Windows XP:
            This value is not supported.
            </term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_PKCS7_SIGNED</term>
            <term>The content is a PKCS #7 signed message.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_PKCS7_SIGNED_EMBED</term>
            <term>The content is an embedded PKCS #7 signed message.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_PKCS7_UNSIGNED</term>
            <term>The content is a PKCS #7 unsigned message.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_PKCS10</term>
            <term>The content is a PKCS #10 message.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_SERIALIZED_CERT</term>
            <term>The content is a serialized single certificate.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_SERIALIZED_CRL</term>
            <term>The content is a serialized single CRL.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_SERIALIZED_CTL</term>
            <term>The content is a serialized single CTL.</term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_SERIALIZED_STORE</term>
            <term>The content is a serialized store.</term>
            </item>
            </list>
            </param>
            <param name="pdwFormatType">
            <para>
            A pointer to a <c>DWORD</c> value that receives the actual format type of the content. If this information is not needed, set
            this parameter to <c>NULL</c>. The returned format type can be one of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_QUERY_FORMAT_ASN_ASCII_HEX_ENCODED</term>
            <term>The content is in ASCII hex-encoded format with an "{ASN}" prefix.</term>
            </item>
            <item>
            <term>CERT_QUERY_FORMAT_BASE64_ENCODED</term>
            <term>The content is in Base64 encoded format.</term>
            </item>
            <item>
            <term>CERT_QUERY_FORMAT_BINARY</term>
            <term>The content is in binary format.</term>
            </item>
            </list>
            </param>
            <param name="phCertStore">
            <para>
            A pointer to an <c>HCERTSTORE</c> value that receives a handle to a certificate store that includes all of the certificates,
            CRLs, and CTLs in the object.
            </para>
            <para>
            This parameter only receives a certificate store handle when the dwContentType parameter receives one of the following values.
            This parameter receives <c>NULL</c> for all other content types.
            </para>
            <para>CERT_QUERY_CONTENT_CERT</para>
            <para>CERT_QUERY_CONTENT_CRL</para>
            <para>CERT_QUERY_CONTENT_CTL</para>
            <para>CERT_QUERY_CONTENT_PFX_AND_LOAD</para>
            <para>CERT_QUERY_CONTENT_PKCS7_SIGNED</para>
            <para>CERT_QUERY_CONTENT_PKCS7_SIGNED_EMBED</para>
            <para>CERT_QUERY_CONTENT_SERIALIZED_CERT</para>
            <para>CERT_QUERY_CONTENT_SERIALIZED_CRL</para>
            <para>CERT_QUERY_CONTENT_SERIALIZED_CTL</para>
            <para>CERT_QUERY_CONTENT_SERIALIZED_STORE</para>
            <para>When you have finished using the handle, free it by passing the handle to the CertCloseStore function.</para>
            <para>If this information is not needed, set this parameter to <c>NULL</c>.</para>
            </param>
            <param name="phMsg">
            <para>A pointer to an <c>HCRYPTMSG</c> value that receives the handle of an opened message.</para>
            <para>
            This parameter only receives a message handle when the dwContentType parameter receives one of the following values. This
            parameter receives <c>NULL</c> for all other content types.
            </para>
            <para>CERT_QUERY_CONTENT_PKCS7_SIGNED</para>
            <para>CERT_QUERY_CONTENT_PKCS7_SIGNED_EMBED</para>
            <para>CERT_QUERY_CONTENT_PKCS7_UNSIGNED</para>
            <para>When you have finished using the handle, free it by passing the handle to the CryptMsgClose function.</para>
            <para>If this information is not needed, set this parameter to <c>NULL</c>.</para>
            </param>
            <param name="ppvContext">
            <para>A pointer to a pointer that receives additional information about the object.</para>
            <para>
            The format of this data depends on the value received by the dwContentType parameter. The following table lists the format of
            the data for the specified dwContentType value.
            </para>
            <list type="table">
            <listheader>
            <term>dwContentType value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_QUERY_CONTENT_CERT</term>
            <term>
            This parameter receives a pointer to a CERT_CONTEXT structure. When you have finished using the structure, free it by passing
            this pointer to the CertFreeCertificateContext function.
            </term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_CRL</term>
            <term>
            This parameter receives a pointer to a CRL_CONTEXT structure. When you have finished using the structure, free it by passing
            this pointer to the CertFreeCRLContext function.
            </term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_CTL</term>
            <term>
            This parameter receives a pointer to a CTL_CONTEXT structure. When you have finished using the structure, free it by passing
            this pointer to the CertFreeCTLContext function.
            </term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_SERIALIZED_CERT</term>
            <term>
            This parameter receives a pointer to a CERT_CONTEXT structure. When you have finished using the structure, free it by passing
            this pointer to the CertFreeCertificateContext function.
            </term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_SERIALIZED_CRL</term>
            <term>
            This parameter receives a pointer to a CRL_CONTEXT structure. When you have finished using the structure, free it by passing
            this pointer to the CertFreeCRLContext function.
            </term>
            </item>
            <item>
            <term>CERT_QUERY_CONTENT_SERIALIZED_CTL</term>
            <term>
            This parameter receives a pointer to a CTL_CONTEXT structure. When you have finished using the structure, free it by passing
            this pointer to the CertFreeCTLContext function.
            </term>
            </item>
            </list>
            <para>If this information is not needed, set this parameter to <c>NULL</c>.</para>
            </param>
            <returns>
            <para>If the function succeeds, the function returns nonzero.</para>
            <para>If the function fails, it returns zero. For extended error information, call GetLastError.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptSignAndEncodeCertificate(Vanara.PInvoke.NCrypt.NCRYPT_KEY_HANDLE,Vanara.PInvoke.Crypt32.CertKeySpec,Vanara.PInvoke.Crypt32.CertEncodingType,Vanara.PInvoke.Crypt32.SafeOID,System.IntPtr,Vanara.PInvoke.Crypt32.CRYPT_ALGORITHM_IDENTIFIER@,System.IntPtr,System.IntPtr,System.UInt32@)">
            <summary>
            <para>
            The <c>CryptSignAndEncodeCertificate</c> function encodes and signs a certificate, certificate revocation list (CRL),
            certificate trust list (CTL), or certificate request.
            </para>
            <para>This function performs the following operations:</para>
            <list type="bullet">
            <item>
            <term>Calls CryptEncodeObject using lpszStructType to encode the "to be signed" information.</term>
            </item>
            <item>
            <term>Calls CryptSignCertificate to sign this encoded information.</term>
            </item>
            <item>
            <term>Calls CryptEncodeObject again, with lpszStructType set to X509_CERT, to further encode the resulting signed, encoded information.</term>
            </item>
            </list>
            </summary>
            <param name="hBCryptKey">
            A handle of the cryptographic service provider (CSP) to do the signature. This handle is an HCRYPTPROV handle that has been
            created by using the CryptAcquireContext function or an <c>NCRYPT_KEY_HANDLE</c> handle that has been created by using the
            NCryptOpenKey function. New applications should always pass in a <c>NCRYPT_KEY_HANDLE</c> handle of a CNG CSP.
            </param>
            <param name="dwKeySpec">
            <para>
            Identifies the private key to use from the provider's container. This must be one of the following values. This parameter is
            ignored if a CNG key is passed in the hCryptProvOrNCryptKey parameter.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>AT_KEYEXCHANGE</term>
            <term>Use the key exchange key.</term>
            </item>
            <item>
            <term>AT_SIGNATURE</term>
            <term>Use the digital signature key.</term>
            </item>
            </list>
            </param>
            <param name="dwCertEncodingType">
            <para>Specifies the encoding type used. This can be the following value.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>X509_ASN_ENCODING</term>
            <term>Specifies X.509 certificate encoding.</term>
            </item>
            </list>
            </param>
            <param name="lpszStructType">
            <para>
            A pointer to a null-terminated ANSI string that contains the type of data to be encoded and signed. The following predefined
            lpszStructType constants are used with encode operations.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>X509_CERT_CRL_TO_BE_SIGNED</term>
            <term>pvStructInfo is the address of a CRL_INFO structure.</term>
            </item>
            <item>
            <term>X509_CERT_REQUEST_TO_BE_SIGNED</term>
            <term>pvStructInfo is the address of a CERT_REQUEST_INFO structure.</term>
            </item>
            <item>
            <term>X509_CERT_TO_BE_SIGNED</term>
            <term>pvStructInfo is the address of a CERT_INFO structure.</term>
            </item>
            <item>
            <term>X509_KEYGEN_REQUEST_TO_BE_SIGNED</term>
            <term>pvStructInfo is the address of a CERT_KEYGEN_REQUEST_INFO structure.</term>
            </item>
            </list>
            </param>
            <param name="pvStructInfo">
            The address of a structure that contains the data to be signed and encoded. The format of this structure is determined by the
            lpszStructType parameter.
            </param>
            <param name="pSignatureAlgorithm">
            <para>
            A pointer to a CRYPT_ALGORITHM_IDENTIFIER structure that contains the object identifier (OID) of the signature algorithm and any
            additional parameters needed. This function uses the following algorithm OIDs:
            </para>
            <list type="bullet">
            <item>
            <term>szOID_RSA_MD5RSA</term>
            </item>
            <item>
            <term>szOID_RSA_SHA1RSA</term>
            </item>
            <item>
            <term>szOID_X957_SHA1DSA</term>
            </item>
            </list>
            <para>If the signature algorithm is a</para>
            <para>hash</para>
            <para>algorithm, the signature contains only the unencrypted hash octets. A private key is not used to encrypt the hash.</para>
            <para>dwKeySpec</para>
            <para>is not used and</para>
            <para>hCryptProvOrNCryptKey</para>
            <para>can be</para>
            <para>NULL</para>
            <para>if an appropriate default CSP can be used for hashing.</para>
            </param>
            <param name="pvHashAuxInfo">Reserved. Must be <c>NULL</c>.</param>
            <param name="pbEncoded">
            <para>A pointer to a buffer to receive the signed and encoded output.</para>
            <para>
            This parameter can be <c>NULL</c> to set the size of this information for memory allocation purposes. For more information, see
            Retrieving Data of Unknown Length.
            </para>
            </param>
            <param name="pcbEncoded">
            <para>
            A pointer to a <c>DWORD</c> that contains the size, in bytes, of the buffer pointed to by the pbEncoded parameter. When the
            function returns, the <c>DWORD</c> contains the number of bytes stored or to be stored in the buffer.
            </para>
            <para>
            <c>Note</c> When processing the data returned in the buffer, applications need to use the actual size of the data returned. The
            actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually
            specified large enough to ensure that the largest possible output data will fit in the buffer.) On output, the variable pointed
            to by this parameter is updated to reflect the actual size of the data copied to the buffer.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is nonzero ( <c>TRUE</c>).</para>
            <para>If the function fails, the return value is zero ( <c>FALSE</c>). For extended error information, call GetLastError.</para>
            <para>
            <c>Note</c> Errors from the called functions CryptCreateHash, CryptSignHash and CryptHashData might be propagated to this function.
            </para>
            <para>Possible error codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_MORE_DATA</term>
            <term>
            If the buffer specified by the pbEncoded parameter is not large enough to hold the returned data, the function sets the
            ERROR_MORE_DATA code and stores the required buffer size, in bytes, into the variable pointed to by pcbEncoded.
            </term>
            </item>
            <item>
            <term>ERROR_FILE_NOT_FOUND</term>
            <term>Invalid certificate encoding type. Currently only X509_ASN_ENCODING is supported.</term>
            </item>
            <item>
            <term>NTE_BAD_ALGID</term>
            <term>The signature algorithm's OID does not map to a known or supported hash algorithm.</term>
            </item>
            <item>
            <term>CRYPT_E_BAD_ENCODE</term>
            <term>
            An error was encountered while encoding or decoding. The most likely cause of this error is the improper initialization of the
            fields in the structure pointed to by pvStructInfo.
            </term>
            </item>
            </list>
            <para>
            If the function fails, GetLastError may return an Abstract Syntax Notation One (ASN.1) encoding/decoding error. For information
            about these errors, see ASN.1 Encoding/Decoding Return Values.
            </para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptSignAndEncodeCertificate(Vanara.PInvoke.Crypt32.HCRYPTPROV,Vanara.PInvoke.Crypt32.CertKeySpec,Vanara.PInvoke.Crypt32.CertEncodingType,Vanara.PInvoke.Crypt32.SafeOID,System.IntPtr,Vanara.PInvoke.Crypt32.CRYPT_ALGORITHM_IDENTIFIER@,System.IntPtr,System.IntPtr,System.UInt32@)">
            <summary>
            <para>
            The <c>CryptSignAndEncodeCertificate</c> function encodes and signs a certificate, certificate revocation list (CRL),
            certificate trust list (CTL), or certificate request.
            </para>
            <para>This function performs the following operations:</para>
            <list type="bullet">
            <item>
            <term>Calls CryptEncodeObject using lpszStructType to encode the "to be signed" information.</term>
            </item>
            <item>
            <term>Calls CryptSignCertificate to sign this encoded information.</term>
            </item>
            <item>
            <term>Calls CryptEncodeObject again, with lpszStructType set to X509_CERT, to further encode the resulting signed, encoded information.</term>
            </item>
            </list>
            </summary>
            <param name="hBCryptKey">
            A handle of the cryptographic service provider (CSP) to do the signature. This handle is an HCRYPTPROV handle that has been
            created by using the CryptAcquireContext function or an <c>NCRYPT_KEY_HANDLE</c> handle that has been created by using the
            NCryptOpenKey function. New applications should always pass in a <c>NCRYPT_KEY_HANDLE</c> handle of a CNG CSP.
            </param>
            <param name="dwKeySpec">
            <para>
            Identifies the private key to use from the provider's container. This must be one of the following values. This parameter is
            ignored if a CNG key is passed in the hCryptProvOrNCryptKey parameter.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>AT_KEYEXCHANGE</term>
            <term>Use the key exchange key.</term>
            </item>
            <item>
            <term>AT_SIGNATURE</term>
            <term>Use the digital signature key.</term>
            </item>
            </list>
            </param>
            <param name="dwCertEncodingType">
            <para>Specifies the encoding type used. This can be the following value.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>X509_ASN_ENCODING</term>
            <term>Specifies X.509 certificate encoding.</term>
            </item>
            </list>
            </param>
            <param name="lpszStructType">
            <para>
            A pointer to a null-terminated ANSI string that contains the type of data to be encoded and signed. The following predefined
            lpszStructType constants are used with encode operations.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>X509_CERT_CRL_TO_BE_SIGNED</term>
            <term>pvStructInfo is the address of a CRL_INFO structure.</term>
            </item>
            <item>
            <term>X509_CERT_REQUEST_TO_BE_SIGNED</term>
            <term>pvStructInfo is the address of a CERT_REQUEST_INFO structure.</term>
            </item>
            <item>
            <term>X509_CERT_TO_BE_SIGNED</term>
            <term>pvStructInfo is the address of a CERT_INFO structure.</term>
            </item>
            <item>
            <term>X509_KEYGEN_REQUEST_TO_BE_SIGNED</term>
            <term>pvStructInfo is the address of a CERT_KEYGEN_REQUEST_INFO structure.</term>
            </item>
            </list>
            </param>
            <param name="pvStructInfo">
            The address of a structure that contains the data to be signed and encoded. The format of this structure is determined by the
            lpszStructType parameter.
            </param>
            <param name="pSignatureAlgorithm">
            <para>
            A pointer to a CRYPT_ALGORITHM_IDENTIFIER structure that contains the object identifier (OID) of the signature algorithm and any
            additional parameters needed. This function uses the following algorithm OIDs:
            </para>
            <list type="bullet">
            <item>
            <term>szOID_RSA_MD5RSA</term>
            </item>
            <item>
            <term>szOID_RSA_SHA1RSA</term>
            </item>
            <item>
            <term>szOID_X957_SHA1DSA</term>
            </item>
            </list>
            <para>If the signature algorithm is a</para>
            <para>hash</para>
            <para>algorithm, the signature contains only the unencrypted hash octets. A private key is not used to encrypt the hash.</para>
            <para>dwKeySpec</para>
            <para>is not used and</para>
            <para>hCryptProvOrNCryptKey</para>
            <para>can be</para>
            <para>NULL</para>
            <para>if an appropriate default CSP can be used for hashing.</para>
            </param>
            <param name="pvHashAuxInfo">Reserved. Must be <c>NULL</c>.</param>
            <param name="pbEncoded">
            <para>A pointer to a buffer to receive the signed and encoded output.</para>
            <para>
            This parameter can be <c>NULL</c> to set the size of this information for memory allocation purposes. For more information, see
            Retrieving Data of Unknown Length.
            </para>
            </param>
            <param name="pcbEncoded">
            <para>
            A pointer to a <c>DWORD</c> that contains the size, in bytes, of the buffer pointed to by the pbEncoded parameter. When the
            function returns, the <c>DWORD</c> contains the number of bytes stored or to be stored in the buffer.
            </para>
            <para>
            <c>Note</c> When processing the data returned in the buffer, applications need to use the actual size of the data returned. The
            actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually
            specified large enough to ensure that the largest possible output data will fit in the buffer.) On output, the variable pointed
            to by this parameter is updated to reflect the actual size of the data copied to the buffer.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is nonzero ( <c>TRUE</c>).</para>
            <para>If the function fails, the return value is zero ( <c>FALSE</c>). For extended error information, call GetLastError.</para>
            <para>
            <c>Note</c> Errors from the called functions CryptCreateHash, CryptSignHash and CryptHashData might be propagated to this function.
            </para>
            <para>Possible error codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_MORE_DATA</term>
            <term>
            If the buffer specified by the pbEncoded parameter is not large enough to hold the returned data, the function sets the
            ERROR_MORE_DATA code and stores the required buffer size, in bytes, into the variable pointed to by pcbEncoded.
            </term>
            </item>
            <item>
            <term>ERROR_FILE_NOT_FOUND</term>
            <term>Invalid certificate encoding type. Currently only X509_ASN_ENCODING is supported.</term>
            </item>
            <item>
            <term>NTE_BAD_ALGID</term>
            <term>The signature algorithm's OID does not map to a known or supported hash algorithm.</term>
            </item>
            <item>
            <term>CRYPT_E_BAD_ENCODE</term>
            <term>
            An error was encountered while encoding or decoding. The most likely cause of this error is the improper initialization of the
            fields in the structure pointed to by pvStructInfo.
            </term>
            </item>
            </list>
            <para>
            If the function fails, GetLastError may return an Abstract Syntax Notation One (ASN.1) encoding/decoding error. For information
            about these errors, see ASN.1 Encoding/Decoding Return Values.
            </para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptSignCertificate(Vanara.PInvoke.NCrypt.NCRYPT_KEY_HANDLE,Vanara.PInvoke.Crypt32.CertKeySpec,Vanara.PInvoke.Crypt32.CertEncodingType,System.IntPtr,System.UInt32,Vanara.PInvoke.Crypt32.CRYPT_ALGORITHM_IDENTIFIER@,System.IntPtr,System.IntPtr,System.UInt32@)">
            <summary>The <c>CryptSignCertificate</c> function signs the "to be signed" information in the encoded signed content.</summary>
            <param name="hBCryptKey">
            Handle of the CSP that does the signature. This handle must be an HCRYPTPROV handle that has been created by using the
            CryptAcquireContext function or an <c>NCRYPT_KEY_HANDLE</c> handle that has been created by using the NCryptOpenKey function.
            New applications should always pass in the <c>NCRYPT_KEY_HANDLE</c> handle of a CNG CSP.
            </param>
            <param name="dwKeySpec">
            Identifies the private key to use from the provider's container. It can be AT_KEYEXCHANGE or AT_SIGNATURE. This parameter is
            ignored if an <c>NCRYPT_KEY_HANDLE</c> is used in the hCryptProvOrNCryptKey parameter.
            </param>
            <param name="dwCertEncodingType">
            <para>
            Specifies the encoding type used. It is always acceptable to specify both the certificate and message encoding types by
            combining them with a bitwise- <c>OR</c> operation as shown in the following example:
            </para>
            <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING</para>
            <para>Currently defined encoding types are:</para>
            <list type="bullet">
            <item>
            <term>X509_ASN_ENCODING</term>
            </item>
            <item>
            <term>PKCS_7_ASN_ENCODING</term>
            </item>
            </list>
            </param>
            <param name="pbEncodedToBeSigned">A pointer to the encoded content to be signed.</param>
            <param name="cbEncodedToBeSigned">The size, in bytes, of the encoded content, pbEncodedToBeSigned.</param>
            <param name="pSignatureAlgorithm">
            <para>A pointer to a CRYPT_ALGORITHM_IDENTIFIER structure with a <c>pszObjId</c> member set to one of the following:</para>
            <list type="bullet">
            <item>
            <term>szOID_RSA_MD5RSA</term>
            </item>
            <item>
            <term>szOID_RSA_SHA1RSA</term>
            </item>
            <item>
            <term>szOID_X957_SHA1DSA</term>
            </item>
            <item>
            <term>szOID_RSA_SSA_PSS</term>
            </item>
            <item>
            <term>szOID_ECDSA_SPECIFIED</term>
            </item>
            </list>
            <para>
            If the signature algorithm is a hash algorithm, the signature contains only the un-encrypted hash octets. A private key is not
            used to encrypt the hash.
            </para>
            <para>dwKeySpec</para>
            <para>is not used and</para>
            <para>hCryptProvOrNCryptKey</para>
            <para>can be</para>
            <para>NULL</para>
            <para>if an appropriate default CSP can be used for hashing.</para>
            </param>
            <param name="pvHashAuxInfo">Not currently used. Must be <c>NULL</c>.</param>
            <param name="pbSignature">
            <para>A pointer to a buffer to receive the signed hash of the content.</para>
            <para>
            This parameter can be <c>NULL</c> to set the size of this information for memory allocation purposes. For more information, see
            Retrieving Data of Unknown Length.
            </para>
            </param>
            <param name="pcbSignature">
            <para>
            A pointer to a <c>DWORD</c> that contains the size, in bytes, of the buffer pointed to by the pbSignature parameter. When the
            function returns, the <c>DWORD</c> contains the number of bytes stored or to be stored in the buffer.
            </para>
            <para>
            <c>Note</c> When processing the data returned in the buffer, applications must use the actual size of the data returned. The
            actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually
            specified large enough to ensure that the largest possible output data will fit in the buffer.) On output, the variable pointed
            to by this parameter is updated to reflect the actual size of the data copied to the buffer.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is nonzero ( <c>TRUE</c>).</para>
            <para>If the function fails, the return value is zero ( <c>FALSE</c>). For extended error information, call GetLastError.</para>
            <para>
            <c>Note</c> Errors from the called functions CryptCreateHash, CryptSignHash and CryptHashData might be propagated to this function.
            </para>
            <para>This function has the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_MORE_DATA</term>
            <term>
            If the buffer specified by the pbSignature parameter is not large enough to hold the returned data, the function sets the
            ERROR_MORE_DATA code, and stores the required buffer size, in bytes, into the variable pointed to by pcbSignature.
            </term>
            </item>
            <item>
            <term>NTE_BAD_ALGID</term>
            <term>The signature algorithm's object identifier (OID) does not map to a known or supported hash algorithm.</term>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptSignCertificate(Vanara.PInvoke.Crypt32.HCRYPTPROV,Vanara.PInvoke.Crypt32.CertKeySpec,Vanara.PInvoke.Crypt32.CertEncodingType,System.IntPtr,System.UInt32,Vanara.PInvoke.Crypt32.CRYPT_ALGORITHM_IDENTIFIER@,System.IntPtr,System.IntPtr,System.UInt32@)">
            <summary>The <c>CryptSignCertificate</c> function signs the "to be signed" information in the encoded signed content.</summary>
            <param name="hBCryptKey">
            Handle of the CSP that does the signature. This handle must be an HCRYPTPROV handle that has been created by using the
            CryptAcquireContext function or an <c>NCRYPT_KEY_HANDLE</c> handle that has been created by using the NCryptOpenKey function.
            New applications should always pass in the <c>NCRYPT_KEY_HANDLE</c> handle of a CNG CSP.
            </param>
            <param name="dwKeySpec">
            Identifies the private key to use from the provider's container. It can be AT_KEYEXCHANGE or AT_SIGNATURE. This parameter is
            ignored if an <c>NCRYPT_KEY_HANDLE</c> is used in the hCryptProvOrNCryptKey parameter.
            </param>
            <param name="dwCertEncodingType">
            <para>
            Specifies the encoding type used. It is always acceptable to specify both the certificate and message encoding types by
            combining them with a bitwise- <c>OR</c> operation as shown in the following example:
            </para>
            <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING</para>
            <para>Currently defined encoding types are:</para>
            <list type="bullet">
            <item>
            <term>X509_ASN_ENCODING</term>
            </item>
            <item>
            <term>PKCS_7_ASN_ENCODING</term>
            </item>
            </list>
            </param>
            <param name="pbEncodedToBeSigned">A pointer to the encoded content to be signed.</param>
            <param name="cbEncodedToBeSigned">The size, in bytes, of the encoded content, pbEncodedToBeSigned.</param>
            <param name="pSignatureAlgorithm">
            <para>A pointer to a CRYPT_ALGORITHM_IDENTIFIER structure with a <c>pszObjId</c> member set to one of the following:</para>
            <list type="bullet">
            <item>
            <term>szOID_RSA_MD5RSA</term>
            </item>
            <item>
            <term>szOID_RSA_SHA1RSA</term>
            </item>
            <item>
            <term>szOID_X957_SHA1DSA</term>
            </item>
            <item>
            <term>szOID_RSA_SSA_PSS</term>
            </item>
            <item>
            <term>szOID_ECDSA_SPECIFIED</term>
            </item>
            </list>
            <para>
            If the signature algorithm is a hash algorithm, the signature contains only the un-encrypted hash octets. A private key is not
            used to encrypt the hash.
            </para>
            <para>dwKeySpec</para>
            <para>is not used and</para>
            <para>hCryptProvOrNCryptKey</para>
            <para>can be</para>
            <para>NULL</para>
            <para>if an appropriate default CSP can be used for hashing.</para>
            </param>
            <param name="pvHashAuxInfo">Not currently used. Must be <c>NULL</c>.</param>
            <param name="pbSignature">
            <para>A pointer to a buffer to receive the signed hash of the content.</para>
            <para>
            This parameter can be <c>NULL</c> to set the size of this information for memory allocation purposes. For more information, see
            Retrieving Data of Unknown Length.
            </para>
            </param>
            <param name="pcbSignature">
            <para>
            A pointer to a <c>DWORD</c> that contains the size, in bytes, of the buffer pointed to by the pbSignature parameter. When the
            function returns, the <c>DWORD</c> contains the number of bytes stored or to be stored in the buffer.
            </para>
            <para>
            <c>Note</c> When processing the data returned in the buffer, applications must use the actual size of the data returned. The
            actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually
            specified large enough to ensure that the largest possible output data will fit in the buffer.) On output, the variable pointed
            to by this parameter is updated to reflect the actual size of the data copied to the buffer.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is nonzero ( <c>TRUE</c>).</para>
            <para>If the function fails, the return value is zero ( <c>FALSE</c>). For extended error information, call GetLastError.</para>
            <para>
            <c>Note</c> Errors from the called functions CryptCreateHash, CryptSignHash and CryptHashData might be propagated to this function.
            </para>
            <para>This function has the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_MORE_DATA</term>
            <term>
            If the buffer specified by the pbSignature parameter is not large enough to hold the returned data, the function sets the
            ERROR_MORE_DATA code, and stores the required buffer size, in bytes, into the variable pointed to by pcbSignature.
            </term>
            </item>
            <item>
            <term>NTE_BAD_ALGID</term>
            <term>The signature algorithm's object identifier (OID) does not map to a known or supported hash algorithm.</term>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptVerifyCertificateSignature(Vanara.PInvoke.Crypt32.HCRYPTPROV,Vanara.PInvoke.Crypt32.CertEncodingType,System.IntPtr,System.UInt32,Vanara.PInvoke.Crypt32.CERT_PUBLIC_KEY_INFO@)">
            <summary>
            The <c>CryptVerifyCertificateSignature</c> function verifies the signature of a certificate, certificate revocation list (CRL),
            or certificate request by using the public key in a CERT_PUBLIC_KEY_INFO structure. The function does not require access to a
            private key.
            </summary>
            <param name="hCryptProv">
            <para>This parameter is not used and should be set to <c>NULL</c>.</para>
            <para>
            <c>Windows Server 2003 and Windows XP:</c> A handle to the cryptographic service provider (CSP) used to verify the
            signature.This parameter's data type is <c>HCRYPTPROV</c>.
            </para>
            <para>
            <c>NULL</c> is passed unless there is a strong reason for passing in a specific cryptographic provider. Passing in <c>NULL</c>
            causes the default RSA or DSS provider to be acquired.
            </para>
            </param>
            <param name="dwCertEncodingType">
            <para>
            The certificate encoding type that was used to encrypt the subject. The message encoding type identifier, contained in the high
            <c>WORD</c> of this value, is ignored by this function.
            </para>
            <para>This parameter can be the following currently defined certificate encoding type.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>X509_ASN_ENCODING 1 (0x1)</term>
            <term>Specifies X.509 certificate encoding.</term>
            </item>
            </list>
            </param>
            <param name="pbEncoded">A pointer to an encoded BLOB of CERT_SIGNED_CONTENT_INFO content on which the signature is to be verified.</param>
            <param name="cbEncoded">The size, in bytes, of the encoded content in pbEncoded.</param>
            <param name="pPublicKey">
            A pointer to a CERT_PUBLIC_KEY_INFO structure that contains the public key to use when verifying the signature.
            </param>
            <returns>
            <para>Returns nonzero if successful or zero otherwise.</para>
            <para>For extended error information, call GetLastError.</para>
            <para>
            <c>Note</c> Errors from the called functions CryptCreateHash, CryptImportKey, CryptVerifySignature, and CryptHashData may be
            propagated to this function.
            </para>
            <para>On failure, this function will cause the following error codes to be returned from GetLastError.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_FILE_NOT_FOUND</term>
            <term>Invalid certificate encoding type. Currently only X509_ASN_ENCODING is supported.</term>
            </item>
            <item>
            <term>NTE_BAD_ALGID</term>
            <term>The signature algorithm's object identifier (OID) does not map to a known or supported hash algorithm.</term>
            </item>
            <item>
            <term>NTE_BAD_SIGNATURE</term>
            <term>The signature was not valid.</term>
            </item>
            </list>
            <para>
            If the function fails, GetLastError may return an Abstract Syntax Notation One (ASN.1) encoding/decoding error. For information
            about these errors, see ASN.1 Encoding/Decoding Return Values.
            </para>
            </returns>
            <remarks>This function currently calls the CryptVerifyCertificateSignatureEx function to perform the verification.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptVerifyCertificateSignatureEx(Vanara.PInvoke.Crypt32.HCRYPTPROV,Vanara.PInvoke.Crypt32.CertEncodingType,Vanara.PInvoke.Crypt32.CryptVerifyCertSignSubject,System.IntPtr,Vanara.PInvoke.Crypt32.CryptVerifyCertSignIssuer,System.IntPtr,Vanara.PInvoke.Crypt32.CryptVerifyCertSignFlags,System.IntPtr)">
            <summary>
            The <c>CryptVerifyCertificateSignatureEx</c> function verifies the signature of a subject certificate, certificate revocation
            list, certificate request, or keygen request by using the issuer's public key. The function does not require access to a private key.
            </summary>
            <param name="hCryptProv">
            <para>This parameter is not used and should be set to <c>NULL</c>.</para>
            <para>
            <c>Windows Server 2003 and Windows XP:</c> A handle to the cryptographic service provider used to verify the signature.This
            parameter's data type is <c>HCRYPTPROV</c>.
            </para>
            <para>
            <c>NULL</c> is passed unless there is a strong reason for passing in a specific cryptographic provider. Passing in <c>NULL</c>
            causes the default RSA or DSS provider to be acquired.
            </para>
            </param>
            <param name="dwCertEncodingType">
            <para>
            The certificate encoding type that was used to encrypt the subject. The message encoding type identifier, contained in the high
            <c>WORD</c> of this value, is ignored by this function.
            </para>
            <para>This parameter can be the following currently defined certificate encoding type.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>X509_ASN_ENCODING 1 (0x1)</term>
            <term>Specifies X.509 certificate encoding.</term>
            </item>
            </list>
            </param>
            <param name="dwSubjectType">
            <para>The subject type. This parameter can be one of the following subject types.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPT_VERIFY_CERT_SIGN_SUBJECT_BLOB 1 (0x1)</term>
            <term>pvSubject is a pointer to a CRYPT_DATA_BLOBstructure.</term>
            </item>
            <item>
            <term>CRYPT_VERIFY_CERT_SIGN_SUBJECT_CERT 2 (0x2)</term>
            <term>pvSubject is a pointer to a CCERT_CONTEXTstructure.</term>
            </item>
            <item>
            <term>CRYPT_VERIFY_CERT_SIGN_SUBJECT_CRL 3 (0x3)</term>
            <term>pvSubject is a pointer to a CCRL_CONTEXTstructure.</term>
            </item>
            <item>
            <term>CRYPT_VERIFY_CERT_SIGN_SUBJECT_OCSP_BASIC_SIGNED_RESPONSE 4 (0x4)</term>
            <term>
            pvSubject is a pointer to an OCSP_BASIC_SIGNED_RESPONSE_INFO structure. Windows Server 2003 and Windows XP: This subject type is
            not supported.
            </term>
            </item>
            </list>
            </param>
            <param name="pvSubject">A pointer to a structure of the type indicated by dwSubjectType that contains the signature to be verified.</param>
            <param name="dwIssuerType">
            <para>The issuer type. This parameter can be one of the following issuer types.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPT_VERIFY_CERT_SIGN_ISSUER_PUBKEY 1 (0x1)</term>
            <term>pvIssuer is a pointer to a CERT_PUBLIC_KEY_INFOstructure.</term>
            </item>
            <item>
            <term>CRYPT_VERIFY_CERT_SIGN_ISSUER_CERT 2 (0x2)</term>
            <term>pvIssuer is a pointer to a CCERT_CONTEXTstructure.</term>
            </item>
            <item>
            <term>CRYPT_VERIFY_CERT_SIGN_ISSUER_CHAIN 3 (0x3)</term>
            <term>pvIssuer is a pointer to a CCERT_CHAIN_CONTEXTstructure.</term>
            </item>
            <item>
            <term>CRYPT_VERIFY_CERT_SIGN_ISSUER_NULL 4 (0x4)</term>
            <term>pvIssuer must be NULL.</term>
            </item>
            </list>
            <para>
            <c>Note</c> If dwIssuerType is <c>CRYPT_VERIFY_CERT_SIGN_ISSUER_NULL</c> and the signature algorithm is a hashing algorithm, the
            signature is expected to contain only unencrypted hash octets. Only <c>CRYPT_VERIFY_CERT_SIGN_ISSUER_NULL</c> can be specified
            in this nonencrypted signature case. If any other dwIssuerType is specified, verification fails and GetLastError returns E_INVALIDARG.
            </para>
            </param>
            <param name="pvIssuer">
            A pointer to a structure of the type indicated by the value of dwIssuerType. The structure contains access to the public key
            needed to verify the signature.
            </param>
            <param name="dwFlags">
            <para>Flags that modify the function behavior. This can be zero or a bitwise <c>OR</c> of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPT_VERIFY_CERT_SIGN_DISABLE_MD2_MD4_FLAG 0x00000001</term>
            <term>
            If you set this flag and CryptVerifyCertificateSignatureEx detects an MD2 or MD4 algorithm, the function returns FALSE and sets
            GetLastError to NTE_BAD_ALGID. The signature is still verified, but this combination of errors enables the caller, now knowing
            that an MD2 or MD4 algorithm was used, to decide whether to trust or reject the signature. Windows 8 and Windows Server 2012:
            Support for this flag begins.
            </term>
            </item>
            <item>
            <term>CRYPT_VERIFY_CERT_SIGN_SET_STRONG_PROPERTIES_FLAG 0x00000002</term>
            <term>
            Sets strong signature properties, after successful verification, on the subject pointed to by the pvSubject parameter. The
            following property is set on the certificate context: The following properties are set on the CRL context: Windows 8 and Windows
            Server 2012: Support for this flag begins.
            </term>
            </item>
            <item>
            <term>CRYPT_VERIFY_CERT_SIGN_RETURN_STRONG_PROPERTIES_FLAG 0x00000004</term>
            <term>
            Returns a pointer to a CRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO structure in the pvExtra parameter. The structure contains
            the length, in bits, of the public key and the names of the signing and hashing algorithms used. You must call CryptMemFree to
            free the structure. If memory cannot be allocated for the CRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO structure, this function
            returns successfully but sets the pvExtra parameter to NULL. Windows 8 and Windows Server 2012: Support for this flag begins.
            </term>
            </item>
            </list>
            </param>
            <param name="pvExtra">
            <para>Pointer to a CRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO structure if the dwFlags parameter is set to <c>CRYPT_VERIFY_CERT_SIGN_RETURN_STRONG_PROPERTIES_FLAG</c>.</para>
            <para>You must call CryptMemFree to free the structure.</para>
            </param>
            <returns>
            <para>Returns nonzero if successful or zero otherwise.</para>
            <para>For extended error information, call GetLastError.</para>
            <para>
            <c>Note</c> Errors from the called functions CryptCreateHash, CryptImportKey, CryptVerifySignature, and CryptHashData may be
            propagated to this function.
            </para>
            <para>On failure, this function will cause the following error codes to be returned from GetLastError.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_FILE_NOT_FOUND</term>
            <term>Invalid certificate encoding type. Currently only X509_ASN_ENCODING is supported.</term>
            </item>
            <item>
            <term>NTE_BAD_ALGID</term>
            <term>The signature algorithm's object identifier (OID) does not map to a known or supported hash algorithm.</term>
            </item>
            <item>
            <term>NTE_BAD_SIGNATURE</term>
            <term>The signature was not valid.</term>
            </item>
            </list>
            <para>
            If the function fails, GetLastError may return an Abstract Syntax Notation One (ASN.1) encoding/decoding error. For information
            about these errors, see ASN.1 Encoding/Decoding Return Values.
            </para>
            </returns>
            <remarks>
            The subject buffer can contain an encoded BLOB or a context for a certificate or CRL. In the case of a certificate context, if
            the certificate's public key parameters are missing and if these parameters can be inherited from the certificate's issuer for
            example from the DSS public key parameter, the context's CERT_PUBKEY_ALG_PARA_PROP_ID property is updated with the issuer's
            public key algorithm parameters for a valid signature.
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CERT_NAME_INFO">
            <summary>
            The <c>CERT_NAME_INFO</c> structure contains subject or issuer names. The information is represented as an array of CERT_RDN structures.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_NAME_INFO.cRDN">
            <summary>Number of elements in the <c>rgRDN</c> array.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_NAME_INFO.rgRDN">
            <summary>Array of pointers to CERT_RDN structures.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CERT_REVOCATION_PARA">
            <summary>
            The <c>CERT_REVOCATION_PARA</c> structure is passed in calls to the CertVerifyRevocation function to assist in finding the
            issuer of the context to be verified. The <c>CERT_REVOCATION_PARA</c> structure is an optional parameter in the
            CertVerifyRevocation function.
            </summary>
            <remarks>
            <para>
            The <c>CERT_REVOCATION_PARA</c> structure provides additional information that the CertVerifyRevocation function can use to
            determine the context issuer.
            </para>
            <para>
            If your application must check the freshness of the CRL or resynchronize the CRL cache, you can provide extra structure members
            to assist the CertVerifyRevocation function with this. To include the additional structure members, define the constant
            <c>CERT_REVOCATION_PARA_HAS_EXTRA_FIELDS</c> in your application before including Wincrypt.h
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_REVOCATION_PARA.cbSize">
            <summary>The size, in bytes, of this structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_REVOCATION_PARA.pIssuerCert">
            <summary>
            A pointer to a CERT_CONTEXT structure that contains the certificate of the issuer of a certificate specified in the
            rgpvContext array in the CertVerifyRevocation parameter list.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_REVOCATION_PARA.cCertStore">
            <summary>
            When set, contains the number of elements in the <c>rgCertStore</c> array. Set to zero if you are not supplying a list of
            store handles in the rgCertStore parameter.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_REVOCATION_PARA.rgCertStore">
            <summary>
            An array of certificate store handles. Specifies a set of stores that are searched for issuer certificates. If rgCertStore
            is not set, the default stores are searched.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_REVOCATION_PARA.hCrlStore">
            <summary>
            Optional store handle. When specified, a handler that uses certificate revocation lists (CRLs) can search this store for CRLs.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_REVOCATION_PARA.pftTimeToUse">
            <summary>
            A pointer to a <c>FILETIME</c> version of UTC time. When specified, the handler must, if possible, determine revocation
            status relative to the time given. If <c>NULL</c> or the handler cannot determine the status relative to the
            <c>pftTimeToUse</c> value, revocation status can be determined independent of time or relative to current time.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_REVOCATION_PARA.dwUrlRetrievalTimeout">
            <summary>
            This member is defined only if <c>CERT_REVOCATION_PARA_HAS_EXTRA_FIELDS</c> is defined. The time-out, in milliseconds, that
            the revocation handler will wait when attempting to retrieve revocation information. If it is set to zero, the revocation
            handler's default time-out is used. If <c>CERT_REVOCATION_PARA_HAS_EXTRA_FIELDS</c> is defined, this member must be set to
            zero if it is unused.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_REVOCATION_PARA.fCheckFreshnessTime">
            <summary>
            This member is defined only if <c>CERT_REVOCATION_PARA_HAS_EXTRA_FIELDS</c> is defined. If <c>TRUE</c>, an attempt is made
            to retrieve a new CRL if the issue date of the CRL is less than or equal to the Current Time minus <c>dwFreshnessTime</c>.
            If this flag is not set, the CRL's NextUpdate time is used. If <c>CERT_REVOCATION_PARA_HAS_EXTRA_FIELDS</c> is defined, this
            member must be set to <c>FALSE</c> if it is unused.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_REVOCATION_PARA.dwFreshnessTime">
            <summary>
            This member is defined only if <c>CERT_REVOCATION_PARA_HAS_EXTRA_FIELDS</c> is defined. The time, in seconds, is used to
            determine whether an attempt will be made to retrieve a new CRL. If <c>CERT_REVOCATION_PARA_HAS_EXTRA_FIELDS</c> is defined,
            this member must be set to zero if it is unused.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_REVOCATION_PARA.pftCurrentTime">
            <summary>
            This member is defined only if <c>CERT_REVOCATION_PARA_HAS_EXTRA_FIELDS</c> is defined. A pointer to a <c>FILETIME</c>
            structure that is used in the freshness time check. If the value of this pointer is null, the revocation handler uses the
            current time. If <c>CERT_REVOCATION_PARA_HAS_EXTRA_FIELDS</c> is defined, this member must be set to null if it is unused.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_REVOCATION_PARA.pCrlInfo">
            <summary>
            This member is defined only if <c>CERT_REVOCATION_PARA_HAS_EXTRA_FIELDS</c> is defined. This member contains a pointer to a
            PCERT_REVOCATION_CRL_INFO structure that contains CRL context information. The CRL information is only applicable to the
            last context checked. To access the information in this CRL, call the CertVerifyRevocation function with cContext set to 1.
            If <c>CERT_REVOCATION_PARA_HAS_EXTRA_FIELDS</c> is defined, the member must be set to null if it is unused.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_REVOCATION_PARA.pftCacheResync">
            <summary>
            <para>
            This member is defined only if <c>CERT_REVOCATION_PARA_HAS_EXTRA_FIELDS</c> is defined. This member contains a pointer to a
            <c>FILETIME</c> structure that specifies the use of cached information. Any information cached before the specified time is
            considered invalid and new information is retrieved. If <c>CERT_REVOCATION_PARA_HAS_EXTRA_FIELDS</c> is defined, this member
            must be set to null if it is unused.
            </para>
            <para><c>Windows Server 2003 and Windows XP:</c> This member is not used.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_REVOCATION_PARA.pChainPara">
            <summary>
            <para>
            This member is defined only if <c>CERT_REVOCATION_PARA_HAS_EXTRA_FIELDS</c> is defined. This member contains a pointer to a
            CERT_REVOCATION_CHAIN_PARA structure that contains parameters used for building a chain for an independent OCSP signer
            certificate. If <c>CERT_REVOCATION_PARA_HAS_EXTRA_FIELDS</c> is defined, this member must be set to null if it is unused.
            </para>
            <para>
            <c>Windows Vista, Windows Server 2003 and Windows XP:</c> This member is not used in the listed systems. The member is
            available beginning with Windows Vista with SP1.
            </para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CERT_REVOCATION_STATUS">
            <summary>
            The <c>CERT_REVOCATION_STATUS</c> structure contains information on the revocation status of the certificate. It is passed to
            and returned by CertVerifyRevocation. On return from the function, it specifies the status of a revoked or unchecked context.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_REVOCATION_STATUS.cbSize">
            <summary>
            <para>Size of this structure in bytes.</para>
            <para>
            Upon input to <c>CERT_REVOCATION_STATUS</c>, <c>cbSize</c> must be set to a size greater than or equal to the size of a
            <c>CERT_REVOCATION_STATUS</c> structure. Otherwise, <c>CERT_REVOCATION_STATUS</c> returns <c>FALSE</c> and GetLastError
            returns E_INVALIDARG.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_REVOCATION_STATUS.dwIndex">
            <summary>
            Specifies an index value for the rgpvContext array passed to CertVerifyRevocation. It is the index of the first context in
            that array that was revoked or that could not be checked for revocation. For information about the contexts that were not
            checked, <c>CertVerifyRevocation</c> is called again, specifying a rgpvContext array that contains the unchecked contexts
            from the original list.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_REVOCATION_STATUS.dwError">
            <summary>
            Specifies the returned error status. This value matches the return value of GetLastError on return from the call to
            CertVerifyRevocation. For the list of these error values, see the table in the Return Values section of <c>CertVerifyRevocation</c>.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_REVOCATION_STATUS.dwReason">
            <summary>
            <para>
            Specifies the cause of the error. This member is set only if <c>dwError</c> is CRYPT_E_REVOKED. It contains a code that
            indicates why the context was revoked. It can be one of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRL_REASON_UNSPECIFIED</term>
            <term>No reason was specified for revocation.</term>
            </item>
            <item>
            <term>CRL_REASON_KEY_COMPROMISE</term>
            <term>
            It is known or suspected that the subject's private key or other aspects of the subject validated in the certificate are compromised.
            </term>
            </item>
            <item>
            <term>CRL_REASON_CA_COMPROMISE</term>
            <term>It is known or suspected that the CA's private key or other aspects of the CA validated in the certificate are compromised.</term>
            </item>
            <item>
            <term>CRL_REASON_AFFILIATION_CHANGED</term>
            <term>
            The subject's name or other information in the certificate has been modified but there is no cause to suspect that the
            private key has been compromised.
            </term>
            </item>
            <item>
            <term>CRL_REASON_SUPERSEDED</term>
            <term>The certificate has been superseded, but there is no cause to suspect that the private key has been compromised.</term>
            </item>
            <item>
            <term>CRL_REASON_CESSATION_OF_OPERATION</term>
            <term>
            The certificate is no longer needed for the purpose for which it was issued, but there is no cause to suspect that the
            private key has been compromised.
            </term>
            </item>
            <item>
            <term>CRL_REASON_CERTIFICATE_HOLD</term>
            <term>The certificate has been placed on hold.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_REVOCATION_STATUS.fHasFreshnessTime">
            <summary>
            Depending on <c>cbSize</c>, this structure can contain this member. If this member is <c>TRUE</c>, the revocation freshness
            time returned by <c>dwFreshnessTime</c> is valid.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_REVOCATION_STATUS.dwFreshnessTime">
            <summary>
            Depending on <c>cbSize</c>, this structure can contain this member. If present, this member gives the time in seconds
            between the current time and when the CRL was published.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CRYPT_ATTRIBUTES">
            <summary>
            <para>
            [The <c>CRYPT_ATTRIBUTES</c> structure is available for use in the operating systems specified in the Requirements section. It
            may be altered or unavailable in subsequent versions.]
            </para>
            <para>The <c>CRYPT_ATTRIBUTES</c> structure contains an array of attributes.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_ATTRIBUTES.cAttr">
            <summary>Number of elements in the <c>rgAttr</c> array.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_ATTRIBUTES.rgAttr">
            <summary>Array of CRYPT_ATTRIBUTE structures.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CRYPT_PKCS8_EXPORT_PARAMS">
            <summary>
            <para>
            [The <c>CRYPT_PKCS8_EXPORT_PARAMS</c> structure is available for use in the operating systems specified in the Requirements
            section. It may be altered or unavailable in subsequent versions.]
            </para>
            <para>
            The <c>CRYPT_PKCS8_EXPORT_PARAMS</c> structure identifies the private key and a callback function to encrypt the private key.
            <c>CRYPT_PKCS8_EXPORT_PARAMS</c> is used as a parameter to the CryptExportPKCS8Ex function, which exports a private key in PKCS
            #8 format.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_PKCS8_EXPORT_PARAMS.hCryptProv">
            <summary>
            An HCRYPTPROV variable that contains a handle to the cryptographic service provider (CSP) used to encrypt the private key.
            This is a handle to the CSP obtained by calling CryptAcquireContext.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_PKCS8_EXPORT_PARAMS.dwKeySpec">
            <summary>
            <para>
            A <c>DWORD</c> variable that contains the key specification. The following <c>dwKeySpec</c> values are defined for the
            default provider.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>AT_KEYEXCHANGE</term>
            <term>Keys used to encrypt/decrypt session keys.</term>
            </item>
            <item>
            <term>AT_SIGNATURE</term>
            <term>Keys used to create and verify digital signatures.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_PKCS8_EXPORT_PARAMS.pszPrivateKeyObjId">
            <summary>An <c>LPSTR</c> variable that contains the object identifier (OID) of the private key to be exported.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_PKCS8_EXPORT_PARAMS.pEncryptPrivateKeyFunc">
            <summary>
            A PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC pointer that points to a callback to a function that encrypts the private key. If this is
            <c>NULL</c>, the private key is not encrypted, and a PKCS #8 CRYPT_ENCRYPTED_PRIVATE_KEY_INFO structure will not be
            generated by CryptExportPKCS8Ex.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_PKCS8_EXPORT_PARAMS.pVoidEncryptFunc">
            <summary>A <c>LPVOID</c> value that provides data used for encryption, such as key, initialization vector, and password.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CRYPT_PKCS8_IMPORT_PARAMS">
            <summary>
            <para>
            [The <c>CRYPT_PKCS8_IMPORT_PARAMS</c> structure is available for use in the operating systems specified in the Requirements
            section. It may be altered or unavailable in subsequent versions.]
            </para>
            <para>
            The <c>CRYPT_PKCS8_IMPORT_PARAMS</c> structure contains a PKCS #8 private key and pointers to callback functions.
            <c>CRYPT_PKCS8_IMPORT_PARAMS</c> is used by the CryptImportPKCS8 function. The first callback supplies the algorithm object
            identifier (OID) and key length needed to specify the cryptographic service provider (CSP) into which the key will be imported.
            If the private key in PKCS #8 is encrypted, the <c>CRYPT_PKCS8_IMPORT_PARAMS</c> structure contains the encrypted private key,
            and the second callback is used to decrypt this private key.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_PKCS8_IMPORT_PARAMS.PrivateKey">
            <summary>A CRYPT_DIGEST_BLOB structure that contains the PKCS #8 data.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_PKCS8_IMPORT_PARAMS.pResolvehCryptProvFunc">
            <summary>
            A PCRYPT_RESOLVE_HCRYPTPROV_FUNC pointer that points to data used by a user-defined function that retrieves a handle to a CSP.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_PKCS8_IMPORT_PARAMS.pVoidResolveFunc">
            <summary>An <c>LPVOID</c> value that identifies the function used to retrieve the CSP provider handle.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_PKCS8_IMPORT_PARAMS.pDecryptPrivateKeyFunc">
            <summary>A PCRYPT_DECRYPT_PRIVATE_KEY_FUNC pointer that points to a callback function used to decrypt the private key.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_PKCS8_IMPORT_PARAMS.pVoidDecryptFunc">
            <summary>An <c>LPVOID</c> value that provides data used for encryption, such as key, initialization vector, and password.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CRYPT_PRIVATE_KEY_INFO">
            <summary>
            <para>
            [The <c>CRYPT_PRIVATE_KEY_INFO</c> structure is available for use in the operating systems specified in the Requirements
            section. It may be altered or unavailable in subsequent versions.]
            </para>
            <para>
            The <c>CRYPT_PRIVATE_KEY_INFO</c> structure contains a clear-text private key in the PrivateKey field (DER encoded).
            <c>CRYPT_PRIVATE_KEY_INFO</c> contains the information in a PKCS #8 PrivateKeyInfo ASN.1 type found in the PKCS #8 standard.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_PRIVATE_KEY_INFO.Version">
            <summary>A <c>DWORD</c> value that identifies the PKCS #8 version.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_PRIVATE_KEY_INFO.Algorithm">
            <summary>
            A CRYPT_ALGORITHM_IDENTIFIER structure that indicates the algorithm in which the private key (RSA or DSA) is to be used.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_PRIVATE_KEY_INFO.PrivateKey">
            <summary>A CRYPT_DER_BLOB structure that contains the key data.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_PRIVATE_KEY_INFO.pAttributes">
            <summary>A CRYPT_ATTRIBUTES structure that identifies the PKCS #8 attributes.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CryptMemMethods">
            <summary>Standard crypto memory allocation methods.</summary>
            <seealso cref="T:Vanara.InteropServices.IMemoryMethods"/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptMemMethods.Instance">
            <summary>Gets a static instance of this class.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptMemMethods.AllocMem(System.Int32)">
            <summary>Gets a handle to a memory allocation of the specified size.</summary>
            <param name="size">The size, in bytes, of memory to allocate.</param>
            <returns>A memory handle.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptMemMethods.FreeMem(System.IntPtr)">
            <summary>Frees the memory associated with a handle.</summary>
            <param name="hMem">A memory handle.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptMemMethods.ReAllocMem(System.IntPtr,System.Int32)">
            <summary>Gets the reallocation method.</summary>
            <param name="hMem">A memory handle.</param>
            <param name="size">The size, in bytes, of memory to allocate.</param>
            <returns>A memory handle.</returns>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.SafeCryptMem">
            <summary>Safe handle for crypto memory.</summary>
            <seealso cref="T:Vanara.InteropServices.SafeMemoryHandle`1"/>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.SafeCryptMem.#ctor(Vanara.PInvoke.SizeT)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.InteropServices.SafeMemoryHandle`1"/> class.</summary>
            <param name="size">The size of memory to allocate, in bytes.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">size - The value of this argument must be non-negative</exception>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.SafeCryptMem.#ctor(System.IntPtr,Vanara.PInvoke.SizeT,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.InteropServices.SafeMemoryHandle`1"/> class.</summary>
            <param name="handle">The handle.</param>
            <param name="size">The size of memory allocated to the handle, in bytes.</param>
            <param name="ownsHandle">if set to <c>true</c> if this class is responsible for freeing the memory on disposal.</param>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.SafeCryptMem.#ctor(System.Byte[])">
            <summary>
            Allocates from unmanaged memory to represent an array of pointers and marshals the unmanaged pointers (IntPtr) to the native
            array equivalent.
            </summary>
            <param name="bytes">Array of unmanaged pointers</param>
            <returns>SafeHGlobalHandle object to an native (unmanaged) array of pointers</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.SafeCryptMem.#ctor(System.String,System.Runtime.InteropServices.CharSet)">
            <summary>Allocates from unmanaged memory to represent a Unicode string (WSTR) and marshal this to a native PWSTR.</summary>
            <param name="s">The string value.</param>
            <param name="charSet">The character set of the string.</param>
            <returns>SafeMemoryHandleExt object to an native (unmanaged) string</returns>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.SafeHCRYPTKEY">
            <summary>Provides a <see cref="T:System.Runtime.InteropServices.SafeHandle"/> for <see cref="T:Vanara.PInvoke.Crypt32.HCRYPTKEY"/> that is disposed using <see cref="M:Vanara.PInvoke.Crypt32.SafeHCRYPTKEY.CryptDestroyKey(Vanara.PInvoke.Crypt32.HCRYPTKEY)"/>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SafeHCRYPTKEY.Null">
            <summary>Represents a NULL handle for <see cref="T:Vanara.PInvoke.Crypt32.SafeHCRYPTKEY"/>. This must be used instead of <see langword="null"/>.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.SafeHCRYPTKEY.#ctor(System.IntPtr,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Crypt32.SafeHCRYPTKEY"/> class and assigns an existing handle.</summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
            <param name="ownsHandle">
            <see langword="true"/> to reliably release the handle during the finalization phase; otherwise, <see langword="false"/> (not recommended).
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.SafeHCRYPTKEY.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Crypt32.SafeHCRYPTKEY"/> class.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.SafeHCRYPTKEY.op_Implicit(Vanara.PInvoke.Crypt32.SafeHCRYPTKEY)~Vanara.PInvoke.Crypt32.HCRYPTKEY">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.Crypt32.SafeHCRYPTKEY"/> to <see cref="T:Vanara.PInvoke.Crypt32.HCRYPTKEY"/>.</summary>
            <param name="h">The safe handle instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.SafeHCRYPTKEY.InternalReleaseHandle">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.PFN_CRYPT_ENUM_KEYID_PROP">
            <summary>The <c>CRYPT_ENUM_KEYID_PROP</c> callback function is used with the CryptEnumKeyIdentifierProperties function.</summary>
            <param name="pKeyIdentifier"/>
            <param name="dwFlags">Reserved for future use and must be zero.</param>
            <param name="pvReserved"/>
            <param name="pvArg"/>
            <param name="cProp">Count of elements in the array of rgdwPropId</param>
            <param name="rgdwPropId"/>
            <param name="rgpvData"/>
            <param name="rgcbData"/>
            <returns>Returns <c>TRUE</c> if the function succeeds, <c>FALSE</c> if it fails.</returns>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.BlobType">
            <summary>Blob type specifier for PUBLICKEYSTRUC.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.BlobType.KEYSTATEBLOB">
            <summary>The BLOB is a key state BLOB.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.BlobType.OPAQUEKEYBLOB">
            <summary>The key is a session key.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.BlobType.PLAINTEXTKEYBLOB">
            <summary>The key is a session key.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.BlobType.PRIVATEKEYBLOB">
            <summary>The key is a public/private key pair.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.BlobType.PUBLICKEYBLOB">
            <summary>The key is a public key.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.BlobType.PUBLICKEYBLOBEX">
            <summary>The key is a public key.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.BlobType.SIMPLEBLOB">
            <summary>The key is a session key.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.BlobType.SYMMETRICWRAPKEYBLOB">
            <summary>The key is a session key.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CertFindUsageFlags">
            <summary>Flags for CertFindUsage functions.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertFindUsageFlags.CERT_FIND_OPTIONAL_ENHKEY_USAGE_FLAG">
            <summary>
            When this flag is set, in addition to usual matches, any certificate that has neither the enhanced key usage extension nor
            the enhanced key usage property meets the search criteria.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertFindUsageFlags.CERT_FIND_EXT_ONLY_ENHKEY_USAGE_FLAG">
            <summary>
            When this flag is set, the matching process involves only the extension usage identifiers. If pvFindPara is NULL or the
            cUsageIdentifier member of the CERT_ENHKEY_USAGE structure pointed to by pvFindPara is zero, any certificate having an
            enhanced key usage extension is a match. If CERT_FIND_OPTIONAL_ENHKEY_USAGE_FLAG is also set, any certificate without the
            enhanced key usage extension is also a match. If CERT_FIND_NO_ENHKEY_USAGE_FLAG is also set, only certificates without the
            enhanced key usage extension are matches.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertFindUsageFlags.CERT_FIND_PROP_ONLY_ENHKEY_USAGE_FLAG">
            <summary>
            When this flag is set, the matching process involves only usage identifiers that are properties. If pvFindPara is NULL or
            cUsageIdentifier is set to zero, any certificate having an enhanced key usage property is a match. If
            CERT_FIND_OPTIONAL_ENHKEY_USAGE_FLAG is also set, any certificate without the enhanced key usage property is also a match.
            If CERT_FIND_NO_ENHKEY_USAGE_FLAG is set, only certificates without the enhanced key usage property are matches.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertFindUsageFlags.CERT_FIND_NO_ENHKEY_USAGE_FLAG">
            <summary>
            When this flag is set, only those certificates that have neither an enhanced key usage nor the enhanced key usage property
            are matches. This flag setting takes precedence over pvFindPara being NULL.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertFindUsageFlags.CERT_FIND_OR_ENHKEY_USAGE_FLAG">
            <summary>
            The search criteria can be altered by setting one or more flags. By default, if the pszUsageIdentifier member of the
            CERT_ENHKEY_USAGE structure pointed to by pvFindPara is to be matched, each identifier must be matched to satisfy the search
            criteria. However, if CERT_FIND_OR_ENHKEY_USAGE_FLAG is set, a match can be made to all identifiers combined by using a
            bitwise-OR operation; thus, matching any one of the identifiers is sufficient.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertFindUsageFlags.CERT_FIND_VALID_ENHKEY_USAGE_FLAG">
            <summary>
            When this flag is set, the function only matches those certificates that are valid for the specified usage. By default, in
            order to match, a certificate must be valid for all usages.
            <para>
            CERT_FIND_OR_ENHKEY_USAGE_FLAG can also be set if the certificate only needs to be valid for one of the specified usages.
            Note that CertGetValidUsages is called to get the list of valid uses for the certificate. Only
            CERT_FIND_OR_ENHKEY_USAGE_FLAG can also apply when CERT_FIND_VALID_ENHKEY_USAGE_FLAG is set.
            </para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CryptKeyIdFlags">
            <summary>Flags for <see cref="M:Vanara.PInvoke.Crypt32.CryptEnumKeyIdentifierProperties(System.IntPtr,System.UInt32,Vanara.PInvoke.Crypt32.CryptKeyIdFlags,System.String,System.IntPtr,System.IntPtr,Vanara.PInvoke.Crypt32.PFN_CRYPT_ENUM_KEYID_PROP)"/>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptKeyIdFlags.CRYPT_KEYID_MACHINE_FLAG">
            <summary>
            The list of key identifiers of the LocalMachine (if pwszComputerName is <c>NULL</c>) or of a remote computer (if
            pwszComputerName is not <c>NULL</c>) is searched.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptKeyIdFlags.CRYPT_KEYID_ALLOC_FLAG">
            <summary>
            When set, pvData is updated with a pointer to allocated memory. LocalFree() must be called to free the allocated memory.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptKeyIdFlags.CRYPT_KEYID_DELETE_FLAG">
            <summary>The key identifier and all of its properties are deleted.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptKeyIdFlags.CRYPT_KEYID_SET_NEW_FLAG">
            <summary>
            Sets a new key identifier property. If the property already exists, the attempt fails, and FALSE is returned with the last
            error code set to CRYPT_E_EXISTS.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertAddEnhancedKeyUsageIdentifier(Vanara.PInvoke.Crypt32.PCCERT_CONTEXT,Vanara.PInvoke.Crypt32.SafeOID)">
            <summary>
            The <c>CertAddEnhancedKeyUsageIdentifier</c> function adds a usage identifier object identifier (OID) to the enhanced key usage
            (EKU) extended property of the certificate.
            </summary>
            <param name="pCertContext">A pointer to the CERT_CONTEXT of the certificate for which the usage identifier is to be added.</param>
            <param name="pszUsageIdentifier">Specifies the usage identifier OID to add.</param>
            <returns>
            <para>If the function succeeds, the function returns nonzero ( <c>TRUE</c>).</para>
            <para>If the function fails, it returns zero ( <c>FALSE</c>). For extended error information, call GetLastError.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertGetEnhancedKeyUsage(Vanara.PInvoke.Crypt32.PCCERT_CONTEXT,Vanara.PInvoke.Crypt32.CertFindUsageFlags,System.IntPtr,System.UInt32@)">
            <summary>
            The <c>CertGetEnhancedKeyUsage</c> function returns information from the enhanced key usage (EKU) extension or the EKU extended
            property of a certificate. EKUs indicate valid uses of the certificate.
            </summary>
            <param name="pCertContext">A pointer to a CERT_CONTEXT certificate context.</param>
            <param name="dwFlags">
            <para>
            Indicates whether the function will report on extensions of a certificate, its extended properties, or both. If set to zero, the
            function returns the valid uses of a certificate based on both the EKU extension and the EKU extended property value of the certificate.
            </para>
            <para>To return only the EKU extension or EKU property value, set the following flags.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_FIND_EXT_ONLY_ENHKEY_USAGE_FLAG</term>
            <term>Get only the extension.</term>
            </item>
            <item>
            <term>CERT_FIND_PROP_ONLY_ENHKEY_USAGE_FLAG</term>
            <term>Get only the extended property value.</term>
            </item>
            </list>
            </param>
            <param name="pUsage">
            <para>
            A pointer to a CERT_ENHKEY_USAGE structure ( <c>CERT_ENHKEY_USAGE</c> is an alternate typedef name for the <c>CTL_USAGE</c>
            structure) that receives the valid uses of the certificate.
            </para>
            <para>
            This parameter can be <c>NULL</c> to set the size of the key usage for memory allocation purposes. For more information, see
            Retrieving Data of Unknown Length.
            </para>
            </param>
            <param name="pcbUsage">
            A pointer to a <c>DWORD</c> that specifies the size, in bytes, of the structure pointed to by pUsage. When the function returns,
            the <c>DWORD</c> contains the size, in bytes, of the structure.
            </param>
            <returns>
            <para>If the function succeeds, the function returns nonzero ( <c>TRUE</c>).</para>
            <para>If the function fails, it returns zero ( <c>FALSE</c>).</para>
            </returns>
            <remarks>
            <para>
            If a certificate has an EKU extension, that extension lists object identifiers (OIDs) for valid uses of that certificate. In a
            Microsoft environment, a certificate might also have EKU extended properties that specify valid uses for the certificate.
            </para>
            <list type="bullet">
            <item>
            <term>If a certificate has neither an EKU extension nor EKU extended properties, it is assumed to be valid for all uses.</term>
            </item>
            <item>
            <term>
            If it has either an EKU extension or EKU extended properties but not both, it is valid only for the uses indicated in the
            extension or extended properties that it has.
            </term>
            </item>
            <item>
            <term>
            If a certificate has both an EKU extension and EKU extended properties, it is valid only for the uses that are on both lists.
            </term>
            </item>
            </list>
            <para>
            If dwFlags is set to zero, the <c>cUsageIdentifier</c> member of the <c>CERT_ENHKEY_USAGE</c> structure is set to the number of
            valid uses of the certificate determined by the value of both the EKU extension and the EKU extended property value.
            </para>
            <para>
            If the <c>cUsageIdentifier</c> member is zero, the certificate might be valid for all uses or the certificate might have no
            valid uses. The return from a call to GetLastError can be used to determine whether the certificate is good for all uses or for
            none. If <c>GetLastError</c> returns CRYPT_E_NOT_FOUND, the certificate is good for all uses. If it returns zero, the
            certificate has no valid uses.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertRemoveEnhancedKeyUsageIdentifier(Vanara.PInvoke.Crypt32.PCCERT_CONTEXT,Vanara.PInvoke.Crypt32.SafeOID)">
            <summary>
            The <c>CertRemoveEnhancedKeyUsageIdentifier</c> function removes a usage identifier object identifier (OID) from the enhanced
            key usage (EKU) extended property of the certificate.
            </summary>
            <param name="pCertContext">A pointer to a CERT_CONTEXT of the certificate for which the usage identifier OID is to be removed.</param>
            <param name="pszUsageIdentifier">A pointer to the usage identifier OID to remove.</param>
            <returns>
            <para>If the function succeeds, the function returns nonzero ( <c>TRUE</c>).</para>
            <para>If the function fails, it returns zero ( <c>FALSE</c>). For extended error information, call GetLastError.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertSetEnhancedKeyUsage(Vanara.PInvoke.Crypt32.PCCERT_CONTEXT,Vanara.PInvoke.Crypt32.CTL_USAGE@)">
            <summary>
            The <c>CertSetEnhancedKeyUsage</c> function sets the enhanced key usage (EKU) property for the certificate. Use of this function
            replaces any EKUs associated with the certificate. To add a single EKU usage without changing existing usages, use
            CertAddEnhancedKeyUsageIdentifier. To delete a single EKU usage, use CertRemoveEnhancedKeyUsageIdentifier.
            </summary>
            <param name="pCertContext">A pointer to the CERT_CONTEXT of the specified certificate.</param>
            <param name="pUsage">
            Pointer to a CERT_ENHKEY_USAGE structure (equivalent to a <c>CTL_USAGE</c> structure) that contains an array of EKU object
            identifiers (OIDs) to be set as extended properties of the certificate.
            </param>
            <returns>
            <para>If the function succeeds, the function returns nonzero ( <c>TRUE</c>).</para>
            <para>If the function fails, it returns zero ( <c>FALSE</c>). For extended error information, call GetLastError.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptCreateKeyIdentifierFromCSP(Vanara.PInvoke.Crypt32.CertEncodingType,Vanara.PInvoke.Crypt32.SafeOID,Vanara.PInvoke.Crypt32.PUBLICKEYSTRUC@,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr,System.UInt32@)">
            <summary>
            This function converts a PUBLICKEYSTRUC of a CSP into an X.509 CERT_PUBLIC_KEY_INFO structure and encodes it. The encoded
            structure is then hashed with the SHA1 algorithm to obtain the key identifier.
            </summary>
            <param name="dwCertEncodingType">
            <para>
            Specifies the encoding type used. It is always acceptable to specify both the certificate and message encoding types by
            combining them with a bitwise- <c>OR</c> operation as shown in the following example:
            </para>
            <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING</para>
            <para>Currently defined encoding types are:</para>
            <list type="bullet">
            <item>
            <term>X509_ASN_ENCODING</term>
            </item>
            <item>
            <term>PKCS_7_ASN_ENCODING</term>
            </item>
            </list>
            </param>
            <param name="pszPubKeyOID">
            A pointer to the public key object identifier (OID). A value that is not <c>NULL</c> overrides the default OID obtained from the
            <c>aiKeyAlg</c> member of the structure pointed to by pPubKeyStruc. To use the default OID, set pszPubKeyOID to <c>NULL</c>.
            </param>
            <param name="pPubKeyStruc">
            A pointer to a PUBLICKEYSTRUC structure. In the default case, the <c>aiKeyAlg</c> member of the structure pointed to by
            pPubKeyStruc is used to find the public key OID. When the value of pszPubKeyOID is not <c>NULL</c>, it overrides the default.
            </param>
            <param name="cbPubKeyStruc">The size, in bytes, of the PUBLICKEYSTRUC.</param>
            <param name="dwFlags">Reserved for future use and must be zero.</param>
            <param name="pvReserved">Reserved for future use and must be <c>NULL</c>.</param>
            <param name="pbHash">
            <para>A pointer to a buffer to receive the hash of the public key and the key identifier.</para>
            <para>
            To get the size of this information for memory allocation purposes, set this parameter to <c>NULL</c>. For more information, see
            Retrieving Data of Unknown Length.
            </para>
            </param>
            <param name="pcbHash">
            A pointer to a <c>DWORD</c> that specifies the size, in bytes, of the buffer pointed to by the pbHash parameter. When the
            function returns, the <c>DWORD</c> contains the number of bytes stored in the buffer. Using SHA1 hashing, the length of the
            required buffer is twenty.
            </param>
            <returns>
            <para>If the function succeeds, the function returns nonzero ( <c>TRUE</c>).</para>
            <para>If the function fails, it returns zero ( <c>FALSE</c>). For extended error information, call GetLastError.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptEnumKeyIdentifierProperties(Vanara.PInvoke.Crypt32.CRYPTOAPI_BLOB@,System.UInt32,Vanara.PInvoke.Crypt32.CryptKeyIdFlags,System.String,System.IntPtr,System.IntPtr,Vanara.PInvoke.Crypt32.PFN_CRYPT_ENUM_KEYID_PROP)">
            <summary>
            <para>A pointer to a CRYPT_HASH_BLOB structure that contains the key identifier.</para>
            <para>If pKeyIdentifier is <c>NULL</c>, the function enumerates all key identifiers.</para>
            <para>If pKeyIdentifier is not <c>NULL</c>, the callback function pfnEnum is only called for the specified key identifier.</para>
            <para>Indicates the property identifier to be listed.</para>
            <para>If dwPropId is set to zero, this function calls the callback function with all the properties.</para>
            <para>
            If dwPropId is not zero and pKeyIdentifier is <c>NULL</c>, the callback function is called only for those key identifiers that
            have the specified property (sets the cProp parameter of pfnEnum to one). All key identifiers that do not have the property are skipped.
            </para>
            <para>Any certificate property identifier can be used.</para>
            <para>
            By default, the list of key identifiers for the CurrentUser is searched. If CRYPT_KEYID_MACHINE_FLAG is set, the list of key
            identifiers of the LocalMachine (if pwszComputerName is <c>NULL</c>) or of a remote computer (if pwszComputerName is not
            <c>NULL</c>) is searched. For more information, see pwszComputerName.
            </para>
            <para>
            A pointer to the name of a remote computer to be searched. If CRYPT_KEYID_MACHINE_FLAG is set in dwFlags, the remote computer is
            searched for a list of key identifiers. If the local computer is to be searched and not a remote computer, pwszComputerName is
            set to <c>NULL</c>.
            </para>
            <para>Reserved for future use and must be <c>NULL</c>.</para>
            <para>
            A pointer to data to be passed to the callback function. The type is a void that allows the application to declare, define, and
            initialize a structure or argument to hold any information.
            </para>
            <para>
            A pointer to an application-defined callback function that is executed for each key identifier entry that matches the input
            parameters. For details about the callback functions parameters, see CRYPT_ENUM_KEYID_PROP.
            </para>
            </summary>
            <param name="pKeyIdentifier">
            <para>A pointer to a CRYPT_HASH_BLOB structure that contains the key identifier.</para>
            <para>If pKeyIdentifier is <c>NULL</c>, the function enumerates all key identifiers.</para>
            <para>If pKeyIdentifier is not <c>NULL</c>, the callback function pfnEnum is only called for the specified key identifier.</para>
            </param>
            <param name="dwPropId">
            <para>Indicates the property identifier to be listed.</para>
            <para>If dwPropId is set to zero, this function calls the callback function with all the properties.</para>
            <para>
            If dwPropId is not zero and pKeyIdentifier is <c>NULL</c>, the callback function is called only for those key identifiers that
            have the specified property (sets the cProp parameter of pfnEnum to one). All key identifiers that do not have the property are skipped.
            </para>
            <para>Any certificate property identifier can be used.</para>
            </param>
            <param name="dwFlags">
            By default, the list of key identifiers for the CurrentUser is searched. If CRYPT_KEYID_MACHINE_FLAG is set, the list of key
            identifiers of the LocalMachine (if pwszComputerName is <c>NULL</c>) or of a remote computer (if pwszComputerName is not
            <c>NULL</c>) is searched. For more information, see pwszComputerName.
            </param>
            <param name="pwszComputerName">
            A pointer to the name of a remote computer to be searched. If CRYPT_KEYID_MACHINE_FLAG is set in dwFlags, the remote computer is
            searched for a list of key identifiers. If the local computer is to be searched and not a remote computer, pwszComputerName is
            set to <c>NULL</c>.
            </param>
            <param name="pvReserved">Reserved for future use and must be <c>NULL</c>.</param>
            <param name="pvArg">
            A pointer to data to be passed to the callback function. The type is a void that allows the application to declare, define, and
            initialize a structure or argument to hold any information.
            </param>
            <param name="pfnEnum">
            A pointer to an application-defined callback function that is executed for each key identifier entry that matches the input
            parameters. For details about the callback functions parameters, see CRYPT_ENUM_KEYID_PROP.
            </param>
            <returns>
            <para>
            The <c>CryptEnumKeyIdentifierProperties</c> function repeatedly calls the CRYPT_ENUM_KEYID_PROP callback function until the last
            key identifier is enumerated or the callback function returns <c>FALSE</c>.
            </para>
            <para>If the main function succeeds, the function returns nonzero ( <c>TRUE</c>).</para>
            <para>If the function fails, it returns zero ( <c>FALSE</c>). For extended error information, call GetLastError.</para>
            <para>To continue enumeration, the function returns <c>TRUE</c>.</para>
            <para>To stop enumeration, the function returns <c>FALSE</c> and sets the last error code.</para>
            </returns>
            <remarks>
            <para>A key identifier can have the same properties as a certificate context.</para>
            <para>Examples</para>
            <para>For an example that uses this function, see Example C Program: Working with Key Identifiers.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptEnumKeyIdentifierProperties(System.IntPtr,System.UInt32,Vanara.PInvoke.Crypt32.CryptKeyIdFlags,System.String,System.IntPtr,System.IntPtr,Vanara.PInvoke.Crypt32.PFN_CRYPT_ENUM_KEYID_PROP)">
            <summary>
            <para>A pointer to a CRYPT_HASH_BLOB structure that contains the key identifier.</para>
            <para>If pKeyIdentifier is <c>NULL</c>, the function enumerates all key identifiers.</para>
            <para>If pKeyIdentifier is not <c>NULL</c>, the callback function pfnEnum is only called for the specified key identifier.</para>
            <para>Indicates the property identifier to be listed.</para>
            <para>If dwPropId is set to zero, this function calls the callback function with all the properties.</para>
            <para>
            If dwPropId is not zero and pKeyIdentifier is <c>NULL</c>, the callback function is called only for those key identifiers that
            have the specified property (sets the cProp parameter of pfnEnum to one). All key identifiers that do not have the property are skipped.
            </para>
            <para>Any certificate property identifier can be used.</para>
            <para>
            By default, the list of key identifiers for the CurrentUser is searched. If CRYPT_KEYID_MACHINE_FLAG is set, the list of key
            identifiers of the LocalMachine (if pwszComputerName is <c>NULL</c>) or of a remote computer (if pwszComputerName is not
            <c>NULL</c>) is searched. For more information, see pwszComputerName.
            </para>
            <para>
            A pointer to the name of a remote computer to be searched. If CRYPT_KEYID_MACHINE_FLAG is set in dwFlags, the remote computer is
            searched for a list of key identifiers. If the local computer is to be searched and not a remote computer, pwszComputerName is
            set to <c>NULL</c>.
            </para>
            <para>Reserved for future use and must be <c>NULL</c>.</para>
            <para>
            A pointer to data to be passed to the callback function. The type is a void that allows the application to declare, define, and
            initialize a structure or argument to hold any information.
            </para>
            <para>
            A pointer to an application-defined callback function that is executed for each key identifier entry that matches the input
            parameters. For details about the callback functions parameters, see CRYPT_ENUM_KEYID_PROP.
            </para>
            </summary>
            <param name="pKeyIdentifier">
            <para>A pointer to a CRYPT_HASH_BLOB structure that contains the key identifier.</para>
            <para>If pKeyIdentifier is <c>NULL</c>, the function enumerates all key identifiers.</para>
            <para>If pKeyIdentifier is not <c>NULL</c>, the callback function pfnEnum is only called for the specified key identifier.</para>
            </param>
            <param name="dwPropId">
            <para>Indicates the property identifier to be listed.</para>
            <para>If dwPropId is set to zero, this function calls the callback function with all the properties.</para>
            <para>
            If dwPropId is not zero and pKeyIdentifier is <c>NULL</c>, the callback function is called only for those key identifiers that
            have the specified property (sets the cProp parameter of pfnEnum to one). All key identifiers that do not have the property are skipped.
            </para>
            <para>Any certificate property identifier can be used.</para>
            </param>
            <param name="dwFlags">
            By default, the list of key identifiers for the CurrentUser is searched. If CRYPT_KEYID_MACHINE_FLAG is set, the list of key
            identifiers of the LocalMachine (if pwszComputerName is <c>NULL</c>) or of a remote computer (if pwszComputerName is not
            <c>NULL</c>) is searched. For more information, see pwszComputerName.
            </param>
            <param name="pwszComputerName">
            A pointer to the name of a remote computer to be searched. If CRYPT_KEYID_MACHINE_FLAG is set in dwFlags, the remote computer is
            searched for a list of key identifiers. If the local computer is to be searched and not a remote computer, pwszComputerName is
            set to <c>NULL</c>.
            </param>
            <param name="pvReserved">Reserved for future use and must be <c>NULL</c>.</param>
            <param name="pvArg">
            A pointer to data to be passed to the callback function. The type is a void that allows the application to declare, define, and
            initialize a structure or argument to hold any information.
            </param>
            <param name="pfnEnum">
            A pointer to an application-defined callback function that is executed for each key identifier entry that matches the input
            parameters. For details about the callback functions parameters, see CRYPT_ENUM_KEYID_PROP.
            </param>
            <returns>
            <para>
            The <c>CryptEnumKeyIdentifierProperties</c> function repeatedly calls the CRYPT_ENUM_KEYID_PROP callback function until the last
            key identifier is enumerated or the callback function returns <c>FALSE</c>.
            </para>
            <para>If the main function succeeds, the function returns nonzero ( <c>TRUE</c>).</para>
            <para>If the function fails, it returns zero ( <c>FALSE</c>). For extended error information, call GetLastError.</para>
            <para>To continue enumeration, the function returns <c>TRUE</c>.</para>
            <para>To stop enumeration, the function returns <c>FALSE</c> and sets the last error code.</para>
            </returns>
            <remarks>
            <para>A key identifier can have the same properties as a certificate context.</para>
            <para>Examples</para>
            <para>For an example that uses this function, see Example C Program: Working with Key Identifiers.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptEnumKeyIdentifierProperties(System.Nullable{Vanara.PInvoke.Crypt32.CRYPTOAPI_BLOB},System.UInt32,Vanara.PInvoke.Crypt32.CryptKeyIdFlags,System.String)">
            <summary>
            <para>A pointer to a CRYPT_HASH_BLOB structure that contains the key identifier.</para>
            <para>If pKeyIdentifier is <c>NULL</c>, the function enumerates all key identifiers.</para>
            <para>If pKeyIdentifier is not <c>NULL</c>, the callback function pfnEnum is only called for the specified key identifier.</para>
            <para>Indicates the property identifier to be listed.</para>
            <para>If dwPropId is set to zero, this function calls the callback function with all the properties.</para>
            <para>
            If dwPropId is not zero and pKeyIdentifier is <c>NULL</c>, the callback function is called only for those key identifiers that
            have the specified property (sets the cProp parameter of pfnEnum to one). All key identifiers that do not have the property are skipped.
            </para>
            <para>Any certificate property identifier can be used.</para>
            <para>
            By default, the list of key identifiers for the CurrentUser is searched. If CRYPT_KEYID_MACHINE_FLAG is set, the list of key
            identifiers of the LocalMachine (if pwszComputerName is <c>NULL</c>) or of a remote computer (if pwszComputerName is not
            <c>NULL</c>) is searched. For more information, see pwszComputerName.
            </para>
            <para>
            A pointer to the name of a remote computer to be searched. If CRYPT_KEYID_MACHINE_FLAG is set in dwFlags, the remote computer is
            searched for a list of key identifiers. If the local computer is to be searched and not a remote computer, pwszComputerName is
            set to <c>NULL</c>.
            </para>
            <para>Reserved for future use and must be <c>NULL</c>.</para>
            <para>
            A pointer to data to be passed to the callback function. The type is a void that allows the application to declare, define, and
            initialize a structure or argument to hold any information.
            </para>
            <para>
            A pointer to an application-defined callback function that is executed for each key identifier entry that matches the input
            parameters. For details about the callback functions parameters, see CRYPT_ENUM_KEYID_PROP.
            </para>
            </summary>
            <param name="pKeyIdentifier">
            <para>A pointer to a CRYPT_HASH_BLOB structure that contains the key identifier.</para>
            <para>If pKeyIdentifier is <c>NULL</c>, the function enumerates all key identifiers.</para>
            <para>If pKeyIdentifier is not <c>NULL</c>, the callback function pfnEnum is only called for the specified key identifier.</para>
            </param>
            <param name="dwPropId">
            <para>Indicates the property identifier to be listed.</para>
            <para>If dwPropId is set to zero, this function calls the callback function with all the properties.</para>
            <para>
            If dwPropId is not zero and pKeyIdentifier is <c>NULL</c>, the callback function is called only for those key identifiers that
            have the specified property (sets the cProp parameter of pfnEnum to one). All key identifiers that do not have the property are skipped.
            </para>
            <para>Any certificate property identifier can be used.</para>
            </param>
            <param name="dwFlags">
            By default, the list of key identifiers for the CurrentUser is searched. If CRYPT_KEYID_MACHINE_FLAG is set, the list of key
            identifiers of the LocalMachine (if pwszComputerName is <c>NULL</c>) or of a remote computer (if pwszComputerName is not
            <c>NULL</c>) is searched. For more information, see pwszComputerName.
            </param>
            <param name="pwszComputerName">
            A pointer to the name of a remote computer to be searched. If CRYPT_KEYID_MACHINE_FLAG is set in dwFlags, the remote computer is
            searched for a list of key identifiers. If the local computer is to be searched and not a remote computer, pwszComputerName is
            set to <c>NULL</c>.
            </param>
            <returns>A sequence of tuples containing the key identifier and an array of property identifiers and values as byte arrays.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptGetKeyIdentifierProperty(Vanara.PInvoke.Crypt32.CRYPTOAPI_BLOB@,System.UInt32,Vanara.PInvoke.Crypt32.CryptKeyIdFlags,System.String,System.IntPtr,System.IntPtr,System.UInt32@)">
            <summary>
            <para>A pointer to the CRYPT_HASH_BLOB that contains the key identifier.</para>
            <para>
            Identifies the property to retrieve. The value of dwPropId determines the type and content of the pvData parameter. Any
            certificate property ID can be used.
            </para>
            <para>The following flags can be used. They can be combined with a bitwise- <c>OR</c> operation.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPT_KEYID_MACHINE_FLAG</term>
            <term>
            Search the list of key identifiers of the LocalMachine (if pwszComputerName is NULL) or remote computer (if pwszComputerName is
            not NULL). For more information, see pwszComputerName.
            </term>
            </item>
            <item>
            <term>CRYPT_KEYID_ALLOC_FLAG</term>
            <term>
            The LocalAlloc() function is called to allocate memory for pvData. *pvData is updated with a pointer to the allocated memory.
            LocalFree() must be called to free the allocated memory.
            </term>
            </item>
            </list>
            <para>
            A pointer to the name of a remote computer to be searched. If CRYPT_KEYID_MACHINE_FLAG flag is set, searches the remote computer
            for a list of key identifiers. If the local computer is to be searched and not a remote computer, set pwszComputerName to <c>NULL</c>.
            </para>
            <para>Reserved for future use and must be <c>NULL</c>.</para>
            <para>
            A pointer to a buffer to receive the data as determined by dwPropId. Elements pointed to by fields in the pvData structure
            follow the structure. Therefore, the size contained in pcbData can exceed the size of the structure.
            </para>
            <para>
            If dwPropId is CERT_KEY_PROV_INFO_PROP_ID, pvData points to a CRYPT_KEY_PROV_INFO structure that contains the property of the
            key identifier.
            </para>
            <para>
            If dwPropId is not CERT_KEY_PROV_INFO_PROP_ID, pvData points to an array of bytes that contains the property of the key identifier.
            </para>
            <para>
            To get the size of this information for memory allocation purposes, this parameter can be <c>NULL</c> when the
            CRYPT_KEYID_ALLOC_FLAG is not set. For more information, see Retrieving Data of Unknown Length.
            </para>
            <para>
            When the CRYPT_KEYID_ALLOC_FLAG is set, pvData is the address of a pointer to the buffer that will be updated. Because memory is
            allocated and its pointer is stored at *pvData, pvData must not be <c>NULL</c>.
            </para>
            <para>
            A pointer to a <c>DWORD</c> that contains the size, in bytes, of the buffer pointed to by the pvData parameter. When the
            function returns, the <c>DWORD</c> contains the number of bytes stored in the buffer. The size contained in the variable pointed
            to by pcbData can indicate a size larger than the CRYPT_KEY_PROV_INFO structure because the structure can contain pointers to
            auxiliary data. This size is the sum of the size needed by the structure and all auxiliary data.
            </para>
            <para>When the CRYPT_KEYID_ALLOC_FLAG is set, pcbData is the address of a pointer to the <c>DWORD</c> that will be updated.</para>
            <para>
            <c>Note</c> When processing the data returned in the buffer, applications need to use the actual size of the data returned. The
            actual size can be slightly smaller than the size of the buffer specified on input. On input, buffer sizes are usually specified
            large enough to ensure that the largest possible output data fits in the buffer. On output, the variable pointed to by this
            parameter is updated to reflect the actual size of the data copied to the buffer.
            </para>
            </summary>
            <param name="pKeyIdentifier">A pointer to the CRYPT_HASH_BLOB that contains the key identifier.</param>
            <param name="dwPropId">
            Identifies the property to retrieve. The value of dwPropId determines the type and content of the pvData parameter. Any
            certificate property ID can be used.
            </param>
            <param name="dwFlags">
            <para>The following flags can be used. They can be combined with a bitwise- <c>OR</c> operation.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPT_KEYID_MACHINE_FLAG</term>
            <term>
            Search the list of key identifiers of the LocalMachine (if pwszComputerName is NULL) or remote computer (if pwszComputerName is
            not NULL). For more information, see pwszComputerName.
            </term>
            </item>
            <item>
            <term>CRYPT_KEYID_ALLOC_FLAG</term>
            <term>
            The LocalAlloc() function is called to allocate memory for pvData. *pvData is updated with a pointer to the allocated memory.
            LocalFree() must be called to free the allocated memory.
            </term>
            </item>
            </list>
            </param>
            <param name="pwszComputerName">
            A pointer to the name of a remote computer to be searched. If CRYPT_KEYID_MACHINE_FLAG flag is set, searches the remote computer
            for a list of key identifiers. If the local computer is to be searched and not a remote computer, set pwszComputerName to <c>NULL</c>.
            </param>
            <param name="pvReserved">Reserved for future use and must be <c>NULL</c>.</param>
            <param name="pvData">
            <para>
            A pointer to a buffer to receive the data as determined by dwPropId. Elements pointed to by fields in the pvData structure
            follow the structure. Therefore, the size contained in pcbData can exceed the size of the structure.
            </para>
            <para>
            If dwPropId is CERT_KEY_PROV_INFO_PROP_ID, pvData points to a CRYPT_KEY_PROV_INFO structure that contains the property of the
            key identifier.
            </para>
            <para>
            If dwPropId is not CERT_KEY_PROV_INFO_PROP_ID, pvData points to an array of bytes that contains the property of the key identifier.
            </para>
            <para>
            To get the size of this information for memory allocation purposes, this parameter can be <c>NULL</c> when the
            CRYPT_KEYID_ALLOC_FLAG is not set. For more information, see Retrieving Data of Unknown Length.
            </para>
            <para>
            When the CRYPT_KEYID_ALLOC_FLAG is set, pvData is the address of a pointer to the buffer that will be updated. Because memory is
            allocated and its pointer is stored at *pvData, pvData must not be <c>NULL</c>.
            </para>
            </param>
            <param name="pcbData">
            <para>
            A pointer to a <c>DWORD</c> that contains the size, in bytes, of the buffer pointed to by the pvData parameter. When the
            function returns, the <c>DWORD</c> contains the number of bytes stored in the buffer. The size contained in the variable pointed
            to by pcbData can indicate a size larger than the CRYPT_KEY_PROV_INFO structure because the structure can contain pointers to
            auxiliary data. This size is the sum of the size needed by the structure and all auxiliary data.
            </para>
            <para>When the CRYPT_KEYID_ALLOC_FLAG is set, pcbData is the address of a pointer to the <c>DWORD</c> that will be updated.</para>
            <para>
            <c>Note</c> When processing the data returned in the buffer, applications need to use the actual size of the data returned. The
            actual size can be slightly smaller than the size of the buffer specified on input. On input, buffer sizes are usually specified
            large enough to ensure that the largest possible output data fits in the buffer. On output, the variable pointed to by this
            parameter is updated to reflect the actual size of the data copied to the buffer.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the function returns nonzero ( <c>TRUE</c>).</para>
            <para>If the function fails, it returns zero ( <c>FALSE</c>). For extended error information, call GetLastError.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptSetKeyIdentifierProperty(Vanara.PInvoke.Crypt32.CRYPTOAPI_BLOB@,System.UInt32,Vanara.PInvoke.Crypt32.CryptKeyIdFlags,System.String,System.IntPtr,System.IntPtr)">
            <summary>
            <para>A pointer to a CRYPT_HASH_BLOB containing the key identifier.</para>
            <para>
            Identifies the property to be set. The value of dwPropId determines the type and content of the pvData parameter. Any
            certificate property ID can be used. CERT_KEY_PROV_INFO_PROP_ID is the property of most interest.
            </para>
            <para>The following flags can be set. They can be combined with a bitwise- <c>OR</c> operation.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPT_KEYID_MACHINE_FLAG</term>
            <term>
            Sets the property of the LocalMachine (if pwszComputerName is NULL) or remote computer (if pwszComputerName is not NULL). For
            more information, see pwszComputerName.
            </term>
            </item>
            <item>
            <term>CRYPT_KEYID_DELETE_FLAG</term>
            <term>The key identifier and all of its properties are deleted.</term>
            </item>
            <item>
            <term>CRYPT_KEYID_SET_NEW_FLAG</term>
            <term>
            Sets a new key identifier property. If the property already exists, the attempt fails, and FALSE is returned with the last error
            code set to CRYPT_E_EXISTS.
            </term>
            </item>
            </list>
            <para>
            A pointer to a <c>null</c>-terminated string that contains the name of a remote computer that has the key identifier where the
            properties are set. If CRYPT_KEYID_MACHINE_FLAG flag is set, searches the remote computer for a list of key identifiers. If the
            local computer is to be set and not a remote computer, set pwszComputerName to <c>NULL</c>.
            </para>
            <para>Reserved for future use and must be <c>NULL</c>.</para>
            <para>
            If dwPropId is CERT_KEY_PROV_INFO_PROP_ID, pvData points to a CRYPT_KEY_PROV_INFO structure containing the property of the key identifier.
            </para>
            <para>
            If dwPropId is not CERT_KEY_PROV_INFO_PROP_ID, pvData points to a CRYPT_DATA_BLOB structure containing the property of the key identifier.
            </para>
            <para>Setting pvData to <c>NULL</c> deletes the property.</para>
            </summary>
            <param name="pKeyIdentifier">A pointer to a CRYPT_HASH_BLOB containing the key identifier.</param>
            <param name="dwPropId">
            Identifies the property to be set. The value of dwPropId determines the type and content of the pvData parameter. Any
            certificate property ID can be used. CERT_KEY_PROV_INFO_PROP_ID is the property of most interest.
            </param>
            <param name="dwFlags">
            <para>The following flags can be set. They can be combined with a bitwise- <c>OR</c> operation.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPT_KEYID_MACHINE_FLAG</term>
            <term>
            Sets the property of the LocalMachine (if pwszComputerName is NULL) or remote computer (if pwszComputerName is not NULL). For
            more information, see pwszComputerName.
            </term>
            </item>
            <item>
            <term>CRYPT_KEYID_DELETE_FLAG</term>
            <term>The key identifier and all of its properties are deleted.</term>
            </item>
            <item>
            <term>CRYPT_KEYID_SET_NEW_FLAG</term>
            <term>
            Sets a new key identifier property. If the property already exists, the attempt fails, and FALSE is returned with the last error
            code set to CRYPT_E_EXISTS.
            </term>
            </item>
            </list>
            </param>
            <param name="pwszComputerName">
            A pointer to a <c>null</c>-terminated string that contains the name of a remote computer that has the key identifier where the
            properties are set. If CRYPT_KEYID_MACHINE_FLAG flag is set, searches the remote computer for a list of key identifiers. If the
            local computer is to be set and not a remote computer, set pwszComputerName to <c>NULL</c>.
            </param>
            <param name="pvReserved">Reserved for future use and must be <c>NULL</c>.</param>
            <param name="pvData">
            <para>
            If dwPropId is CERT_KEY_PROV_INFO_PROP_ID, pvData points to a CRYPT_KEY_PROV_INFO structure containing the property of the key identifier.
            </para>
            <para>
            If dwPropId is not CERT_KEY_PROV_INFO_PROP_ID, pvData points to a CRYPT_DATA_BLOB structure containing the property of the key identifier.
            </para>
            <para>Setting pvData to <c>NULL</c> deletes the property.</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is nonzero (TRUE).</para>
            <para>If the function fails, the return value is zero ( <c>FALSE</c>). For extended error information, call GetLastError.</para>
            <para>
            <c>Note</c> If CRYPT_KEYID_SET_NEW_FLAG is set and the property already exists, <c>FALSE</c> is returned with the last error
            code set to CRYPT_E_EXISTS.
            </para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.PUBLICKEYSTRUC">
            <summary>
            <para>
            The <c>PUBLICKEYSTRUC</c> structure, also known as the <c>BLOBHEADER</c> structure, indicates a key's BLOB type and the
            algorithm that the key uses. One of these structures is located at the beginning of the <c>pbData</c> member of every key BLOB.
            </para>
            <para>
            This structure is not limited to the key BLOBs generated by the PROV_RSA_BASE and PROV_RSA_SIG provider types. The <c>pbData</c>
            member of any new key BLOB type must begin with this structure.
            </para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Crypt32.PUBLICKEYSTRUC.bType">
            <summary>
            <para>Contains the key BLOB type.</para>
            <para>
            The following are the predefined values for this member. Cryptographic service providers (CSPs) can use other type
            identifiers as needed.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>KEYSTATEBLOB 0xC</term>
            <term>The BLOB is a key state BLOB.</term>
            </item>
            <item>
            <term>OPAQUEKEYBLOB 0x9</term>
            <term>The key is a session key.</term>
            </item>
            <item>
            <term>PLAINTEXTKEYBLOB 0x8</term>
            <term>The key is a session key.</term>
            </item>
            <item>
            <term>PRIVATEKEYBLOB 0x7</term>
            <term>The key is a public/private key pair.</term>
            </item>
            <item>
            <term>PUBLICKEYBLOB 0x6</term>
            <term>The key is a public key.</term>
            </item>
            <item>
            <term>PUBLICKEYBLOBEX 0xA</term>
            <term>The key is a public key.</term>
            </item>
            <item>
            <term>SIMPLEBLOB 0x1</term>
            <term>The key is a session key.</term>
            </item>
            <item>
            <term>SYMMETRICWRAPKEYBLOB 0xB</term>
            <term>The key is a symmetric key.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.PUBLICKEYSTRUC.bVersion">
            <summary>
            Contains the version number of the key BLOB format. For example, if the BLOB is a Digital Signature Standard (DSS) version 3
            key, this member will contain 3. The minimum value for this member is defined by the <c>CUR_BLOB_VERSION</c> (2) identifier.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.PUBLICKEYSTRUC.reserved">
            <summary>This member is reserved for future use and must be set to zero.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.PUBLICKEYSTRUC.aiKeyAlg">
            <summary>
            <para>Contains one of the ALG_ID values that identifies the algorithm of the key contained by the key BLOB.</para>
            <para>
            Not all algorithm identifiers are valid with all BLOB types. For example, since an RC4 key is a session key, it cannot be
            exported into a PUBLICKEYBLOB.
            </para>
            <para>
            PLAINTEXTBLOBs can be used with any algorithm or type of key combination supported by the CSP in use. Note that a 3DES key
            cannot be imported when the Microsoft Base Provider is in use.
            </para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.PFN_CMSG_STREAM_OUTPUT">
            <summary>A callback function used to read from and write data to a disk when processing large messages.</summary>
            <param name="pvArg">The arguments specified by CMSG_STREAM_INFO.</param>
            <param name="pbData">A pointer to a block of processed data that is available to the application.</param>
            <param name="cbData">The size, in bytes, of the block of processed data at pbData.</param>
            <param name="fFinal">
            Specifies that the last block of data is being processed and that this is the last time the callback will be executed.
            </param>
            <returns><see langword="true"/> on success; <see langword="false"/> on failure.</returns>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.PFN_CRYPT_GET_SIGNER_CERTIFICATE">
            <summary>
            The <c>CryptGetSignerCertificateCallback</c> user supplied callback function is used with the CRYPT_VERIFY_MESSAGE_PARA
            structure to get and verify a message signer's certificate.
            </summary>
            <param name="pvGetArg"/>
            <param name="dwCertEncodingType">
            <para>
            Specifies the type of encoding used. It is always acceptable to specify both the certificate and message encoding types by
            combining them with a bitwise- <c>OR</c> operation as shown in the following example:
            </para>
            <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING</para>
            <para>Currently defined encoding types are:</para>
            <list type="bullet">
            <item>
            <term>X509_ASN_ENCODING</term>
            </item>
            <item>
            <term>PKCS_7_ASN_ENCODING</term>
            </item>
            </list>
            </param>
            <param name="pSignerId">
            A pointer to a CERT_INFO structure containing the issuer and serial number. Can be <c>NULL</c> if there is no content or signer.
            </param>
            <param name="hMsgCertStore">A handle to the certificate store containing all the certificates and CRLs in the signed message.</param>
            <returns>
            If a signer certificate is found, the function returns a pointer to a read-only CERT_CONTEXT. The returned <c>CERT_CONTEXT</c>
            was obtained either from a certificate store or was created using CertCreateCertificateContext. In either case, it must be freed
            using CertFreeCertificateContext. If this function fails, the return value is <c>NULL</c>.
            </returns>
            <remarks>If the message does not contain content or signers, the function is called with pSignerId set to <c>NULL</c>.</remarks>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CryptMsgActionFlags">
            <summary>Flags for various structure behaviors.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptMsgActionFlags.CRYPT_MESSAGE_BARE_CONTENT_OUT_FLAG">
            <summary>
            If the encoded output is to be a CMSG_SIGNED inner content of an outer cryptographic message such as a CMSG_ENVELOPED
            message, the CRYPT_MESSAGE_BARE_CONTENT_OUT_FLAG must be set.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptMsgActionFlags.CRYPT_MESSAGE_ENCAPSULATED_CONTENT_OUT_FLAG">
            <summary>CRYPT_MESSAGE_ENCAPSULATED_CONTENT_OUT_FLAG can be set to encapsulate non-data inner content into an OCTET STRING.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptMsgActionFlags.CRYPT_MESSAGE_KEYID_SIGNER_FLAG">
            <summary>
            CRYPT_MESSAGE_KEYID_SIGNER_FLAG can be set to identify signers by their Key Identifier and not their Issuer and Serial Number.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptMsgActionFlags.CRYPT_MESSAGE_SILENT_KEYSET_FLAG">
            <summary>
            CRYPT_MESSAGE_SILENT_KEYSET_FLAG can be set to suppress any UI by the CSP. For more information about the CRYPT_SILENT flag,
            see CryptAcquireContext.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CryptMsgControlType">
            <summary>Message control types.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptMsgControlType.CMSG_CTRL_ADD_ATTR_CERT">
            <summary>A BLOB that contains the encoded bytes of attribute certificate.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptMsgControlType.CMSG_CTRL_ADD_CERT">
            <summary>A CRYPT_INTEGER_BLOB structure that contains the encoded bytes of the certificate to be added to the message.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptMsgControlType.CMSG_CTRL_ADD_CMS_SIGNER_INFO">
            <summary>
            A CMSG_CMS_SIGNER_INFO structure that contains signer information. This operation differs from CMSG_CTRL_ADD_SIGNER because
            the signer information contains the signature.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptMsgControlType.CMSG_CTRL_ADD_CRL">
            <summary>A BLOB that contains the encoded bytes of the CRL to be added to the message.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptMsgControlType.CMSG_CTRL_ADD_SIGNER">
            <summary>A CMSG_SIGNER_ENCODE_INFO structure that contains the signer information to be added to the message.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptMsgControlType.CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR">
            <summary>
            A CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA structure that contains the index of the signer and a BLOB that contains the
            unauthenticated attribute information to be added to the message.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptMsgControlType.CMSG_CTRL_DECRYPT">
            <summary>
            A CMSG_CTRL_DECRYPT_PARA structure used to decrypt the message for the specified key transport recipient. This value is
            applicable to RSA recipients. This operation specifies that the CryptMsgControl function search the recipient index to
            obtain the key transport recipient information. If the function fails, GetLastError will return CRYPT_E_INVALID_INDEX if no
            key transport recipient is found.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptMsgControlType.CMSG_CTRL_DEL_ATTR_CERT">
            <summary>The index of the attribute certificate to be removed.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptMsgControlType.CMSG_CTRL_DEL_CERT">
            <summary>The index of the certificate to be deleted from the message.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptMsgControlType.CMSG_CTRL_DEL_CRL">
            <summary>The index of the CRL to be deleted from the message.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptMsgControlType.CMSG_CTRL_DEL_SIGNER">
            <summary>The index of the signer to be deleted.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptMsgControlType.CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR">
            <summary>
            A CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA structure that contains an index that specifies the signer and the index that
            specifies the signer's unauthenticated attribute to be deleted.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptMsgControlType.CMSG_CTRL_ENABLE_STRONG_SIGNATURE">
            <summary>
            A CERT_STRONG_SIGN_PARA structure used to perform strong signature checking.
            <para>
            To check for a strong signature, specify this control type before calling CryptMsgGetAndVerifySigner or before calling
            CryptMsgControl with the following control types set:
            </para>
            <para>CMSG_CTRL_VERIFY_SIGNATURE</para>
            <para>CMSG_CTRL_VERIFY_SIGNATURE_EX</para>
            <para>
            After the signature is successfully verified, this function checks for a strong signature. If the signature is not strong,
            the operation will fail and the GetLastError value will be set to NTE_BAD_ALGID.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptMsgControlType.CMSG_CTRL_KEY_AGREE_DECRYPT">
            <summary>
            A CMSG_CTRL_KEY_AGREE_DECRYPT_PARA structure used to decrypt the message for the specified key agreement session key. Key
            agreement is used with Diffie-Hellman encryption/decryption.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptMsgControlType.CMSG_CTRL_KEY_TRANS_DECRYPT">
            <summary>
            A CMSG_CTRL_KEY_TRANS_DECRYPT_PARA structure used to decrypt the message for the specified key transport recipient. Key
            transport is used with RSA encryption/decryption.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptMsgControlType.CMSG_CTRL_MAIL_LIST_DECRYPT">
            <summary>
            A CMSG_CTRL_MAIL_LIST_DECRYPT_PARA structure used to decrypt the message for the specified recipient using a previously
            distributed key-encryption key (KEK).
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptMsgControlType.CMSG_CTRL_VERIFY_HASH">
            <summary>This value is not used.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptMsgControlType.CMSG_CTRL_VERIFY_SIGNATURE">
            <summary>A CERT_INFO structure that identifies the signer of the message whose signature is to be verified.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptMsgControlType.CMSG_CTRL_VERIFY_SIGNATURE_EX">
            <summary>
            A CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA structure that specifies the signer index and public key to verify the message
            signature. The signer public key can be a CERT_PUBLIC_KEY_INFO structure, a certificate context, or a certificate chain context.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CryptMsgFlags">
            <summary>Flags for message functions.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptMsgFlags.CMSG_BARE_CONTENT_FLAG">
            <summary>
            Indicates that streamed output will not have an outer ContentInfo wrapper (as defined by PKCS #7). This makes it suitable to
            be streamed into an enclosing message.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptMsgFlags.CMSG_LENGTH_ONLY_FLAG">
            <summary></summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptMsgFlags.CMSG_DETACHED_FLAG">
            <summary>Indicates that there is detached data being supplied for the subsequent calls to CryptMsgUpdate.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptMsgFlags.CMSG_AUTHENTICATED_ATTRIBUTES_FLAG">
            <summary>
            Authenticated attributes are forced to be included in the SignerInfo (as defined by PKCS #7) in cases where they would not
            otherwise be required.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptMsgFlags.CMSG_CONTENTS_OCTETS_FLAG">
            <summary>
            Used to calculate the size of a DER encoding of a message to be nested inside an enveloped message. This is particularly
            useful when streaming is being performed.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptMsgFlags.CMSG_MAX_LENGTH_FLAG">
            <summary></summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptMsgFlags.CMSG_CMS_ENCAPSULATED_CONTENT_FLAG">
            <summary>
            Non-Data type inner content is encapsulated within an OCTET STRING. This flag is applicable for both Signed and Enveloped messages.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptMsgFlags.CMSG_SIGNED_DATA_NO_SIGN_FLAG">
            <summary></summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptMsgFlags.CMSG_CRYPT_RELEASE_CONTEXT_FLAG">
            <summary>
            If set, the hCryptProv that is passed to this function is released on the final CryptMsgUpdate. The handle is not released
            if the function fails.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CryptMsgKeyOriginator">
            <summary>Flags used by CMSG_KEY_AGREE_RECIPIENT_INFO.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptMsgKeyOriginator.CMSG_KEY_AGREE_ORIGINATOR_CERT">
            <summary>OriginatorCertId</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptMsgKeyOriginator.CMSG_KEY_AGREE_ORIGINATOR_PUBLIC_KEY">
            <summary>OriginatorPublicKeyInfo</summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CryptMsgParamType">
            <summary>
            Indicates the parameter types of data to be retrieved.
            <para>
            For an encoded message, only the CMSG_BARE_CONTENT, CMSG_ENCODE_SIGNER, CMSG_CONTENT_PARAM and CMSG_COMPUTED_HASH_PARAM
            dwParamTypes are valid.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptMsgParamType.CMSG_TYPE_PARAM">
            <summary>
            Returns the message type of a decoded message of unknown type. The retrieved message type can be compared to supported types
            to determine whether processing can continued. For supported message types, see the dwMessageType parameter of CryptMsgOpenToDecode.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptMsgParamType.CMSG_CONTENT_PARAM">
            <summary>
            Returns the whole PKCS #7 message from a message opened to encode. Retrieves the inner content of a message opened to
            decode. If the message is enveloped, the inner type is data, and CryptMsgControl has been called to decrypt the message, the
            decrypted content is returned. If the inner type is not data, the encoded BLOB that requires further decoding is returned.
            If the message is not enveloped and the inner content is DATA, the returned data is the octets of the inner content. This
            type is applicable to both encode and decode.
            <para>For decoding, if the type is CMSG_DATA, the content's octets are returned; else, the encoded inner content is returned.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptMsgParamType.CMSG_BARE_CONTENT_PARAM">
            <summary>
            Retrieves the encoded content of an encoded cryptographic message, without the outer layer of the CONTENT_INFO structure.
            That is, only the encoding of the PKCS #7 defined ContentInfo.content field is returned.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptMsgParamType.CMSG_INNER_CONTENT_TYPE_PARAM">
            <summary>Returns the inner content type of a received message. This type is not applicable to messages of type DATA.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptMsgParamType.CMSG_SIGNER_COUNT_PARAM">
            <summary>Returns the number of signers of a received SIGNED message.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptMsgParamType.CMSG_SIGNER_INFO_PARAM">
            <summary>
            Returns information on a message signer. This includes the issuer and serial number of the signer's certificate and
            authenticated and unauthenticated attributes of the signer's certificate. To retrieve signer information on all of the
            signers of a message, call CryptMsgGetParam varying dwIndex from 0 to the number of signers minus one.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptMsgParamType.CMSG_SIGNER_CERT_INFO_PARAM">
            <summary>
            Returns information on a message signer needed to identify the signer's certificate. A certificate's Issuer and SerialNumber
            can be used to uniquely identify a certificate for retrieval. To retrieve information for all the signers, repetitively call
            CryptMsgGetParam varying dwIndex from 0 to the number of signers minus one. Only the Issuer and SerialNumber fields in the
            CERT_INFO structure returned contain available, valid data.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptMsgParamType.CMSG_SIGNER_HASH_ALGORITHM_PARAM">
            <summary>
            Returns the hash algorithm used by a signer of the message. To get the hash algorithm for a specified signer, call
            CryptMsgGetParam with dwIndex equal to that signer's index.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptMsgParamType.CMSG_SIGNER_AUTH_ATTR_PARAM">
            <summary>
            Returns the authenticated attributes of a message signer. To retrieve the authenticated attributes for a specified signer,
            call CryptMsgGetParam with dwIndex equal to that signer's index.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptMsgParamType.CMSG_SIGNER_UNAUTH_ATTR_PARAM">
            <summary>
            Returns a message signer's unauthenticated attributes. To retrieve the unauthenticated attributes for a specified signer,
            call CryptMsgGetParam with dwIndex equal to that signer's index.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptMsgParamType.CMSG_CERT_COUNT_PARAM">
            <summary>Returns the number of certificates in a received SIGNED or ENVELOPED message.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptMsgParamType.CMSG_CERT_PARAM">
            <summary>
            Returns a signer's certificate. To get all of the signer's certificates, call CryptMsgGetParam, varying dwIndex from 0 to
            the number of available certificates minus one.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptMsgParamType.CMSG_CRL_COUNT_PARAM">
            <summary>Returns the count of CRLs in a received, SIGNED or ENVELOPED message.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptMsgParamType.CMSG_CRL_PARAM">
            <summary>
            Returns a CRL. To get all the CRLs, call CryptMsgGetParam, varying dwIndex from 0 to the number of available CRLs minus one.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptMsgParamType.CMSG_ENVELOPE_ALGORITHM_PARAM">
            <summary>Returns the encryption algorithm used to encrypt an ENVELOPED message.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptMsgParamType.CMSG_RECIPIENT_COUNT_PARAM">
            <summary>Returns the number of key transport recipients of an ENVELOPED received message.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptMsgParamType.CMSG_RECIPIENT_INDEX_PARAM">
            <summary>
            Returns the index of the key transport recipient used to decrypt an ENVELOPED message. This value is available only after a
            message has been decrypted.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptMsgParamType.CMSG_RECIPIENT_INFO_PARAM">
            <summary>
            Returns certificate information about a key transport message's recipient. To get certificate information on all key
            transport message's recipients, repetitively call CryptMsgGetParam, varying dwIndex from 0 to the number of recipients minus
            one. Only the Issuer, SerialNumber, and PublicKeyAlgorithm members of the CERT_INFO structure returned are available and valid.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptMsgParamType.CMSG_HASH_ALGORITHM_PARAM">
            <summary>Returns the hash algorithm used to hash the message when it was created.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptMsgParamType.CMSG_HASH_DATA_PARAM">
            <summary>Returns the hash value stored in the message when it was created.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptMsgParamType.CMSG_COMPUTED_HASH_PARAM">
            <summary>Returns the hash calculated of the data in the message. This type is applicable to both encode and decode.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptMsgParamType.CMSG_ENCRYPT_PARAM">
            <summary>Returns the encryption algorithm used to encrypted the message.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptMsgParamType.CMSG_ENCRYPTED_DIGEST">
            <summary>Returns the encrypted hash of a signature. Typically used for performing time-stamping.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptMsgParamType.CMSG_ENCODED_SIGNER">
            <summary>Returns the encoded CMSG_SIGNER_INFO signer information for a message signer.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptMsgParamType.CMSG_ENCODED_MESSAGE">
            <summary>
            Changes the contents of an already encoded message. The message must first be decoded with a call to CryptMsgOpenToDecode.
            Then the change to the message is made through a call to CryptMsgControl, CryptMsgCountersign, or
            CryptMsgCountersignEncoded. The message is then encoded again with a call to CryptMsgGetParam, specifying
            CMSG_ENCODED_MESSAGE to get a new encoding that reflects the changes made. This can be used, for instance, to add a
            time-stamp attribute to a message.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptMsgParamType.CMSG_VERSION_PARAM">
            <summary>Returns the version of the decoded message. For more information, see the table in the Remarks section.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptMsgParamType.CMSG_ATTR_CERT_COUNT_PARAM">
            <summary>Returns the count of the attribute certificates in a SIGNED or ENVELOPED message.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptMsgParamType.CMSG_ATTR_CERT_PARAM">
            <summary>
            Retrieves an attribute certificate. To get all the attribute certificates, call CryptMsgGetParam varying dwIndex set to 0
            the number of attributes minus one.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptMsgParamType.CMSG_CMS_RECIPIENT_COUNT_PARAM">
            <summary>Returns the total count of all message recipients including key agreement and mail list recipients.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptMsgParamType.CMSG_CMS_RECIPIENT_INDEX_PARAM">
            <summary>Returns the index of the key transport, key agreement, or mail list recipient used to decrypt an ENVELOPED message.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptMsgParamType.CMSG_CMS_RECIPIENT_ENCRYPTED_KEY_INDEX_PARAM">
            <summary>Returns the index of the encrypted key of a key agreement recipient used to decrypt an ENVELOPED message.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptMsgParamType.CMSG_CMS_RECIPIENT_INFO_PARAM">
            <summary>
            Returns information about a key transport, key agreement, or mail list recipient. It is not limited to key transport message
            recipients. To get information on all of a message's recipients, repetitively call CryptMsgGetParam, varying dwIndex from 0
            to the number of recipients minus one.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptMsgParamType.CMSG_UNPROTECTED_ATTR_PARAM">
            <summary>Returns the unprotected attributes in an enveloped message.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptMsgParamType.CMSG_SIGNER_CERT_ID_PARAM">
            <summary>
            Returns information on a message signer needed to identify the signer's public key. This could be a certificate's Issuer and
            SerialNumber, a KeyID, or a HashId. To retrieve information for all the signers, call CryptMsgGetParam varying dwIndex from
            0 to the number of signers minus one.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptMsgParamType.CMSG_CMS_SIGNER_INFO_PARAM">
            <summary>
            Returns information on a message signer. This includes a signerId and authenticated and unauthenticated attributes. To
            retrieve signer information on all of the signers of a message, call CryptMsgGetParam varying dwIndex from 0 to the number
            of signers minus one.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CryptMsgSignerType">
            <summary>Message signer type.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptMsgSignerType.CMSG_VERIFY_SIGNER_PUBKEY">
            <summary>CERT_PUBLIC_KEY_INFO</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptMsgSignerType.CMSG_VERIFY_SIGNER_CERT">
            <summary>CERT_CONTEXT</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptMsgSignerType.CMSG_VERIFY_SIGNER_CHAIN">
            <summary>CERT_CHAIN_CONTEXT</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptMsgSignerType.CMSG_VERIFY_SIGNER_NULL">
            <summary>The CMSG verify signer null</summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CryptMsgType">
            <summary>Message types.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptMsgType.CMSG_DATA">
            <summary>An octet (BYTE) string.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptMsgType.CMSG_SIGNED">
            <summary>CMSG_SIGNED_ENCODE_INFO</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptMsgType.CMSG_ENVELOPED">
            <summary>CMSG_ENVELOPED_ENCODE_INFO</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptMsgType.CMSG_SIGNED_AND_ENVELOPED">
            <summary>Not implemented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptMsgType.CMSG_HASHED">
            <summary>CMSG_HASHED_ENCODE_INFO</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptMsgType.CMSG_ENCRYPTED">
            <summary>Not implemented.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CryptMsgVerifyCounterFlags">
            <summary>Flags that modify the function behavior.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptMsgVerifyCounterFlags.CMSG_VERIFY_COUNTER_SIGN_ENABLE_STRONG_FLAG">
            <summary>
            Performs a strong signature check after successful signature verification. Set the pvExtra parameter to point to a
            CERT_STRONG_SIGN_PARA structure that contains the parameters needed to check the signature strength.. Windows 8 and Windows
            Server 2012: Support for this flag begins.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptDecodeMessage(Vanara.PInvoke.Crypt32.CryptMsgType,Vanara.PInvoke.Crypt32.CRYPT_DECRYPT_MESSAGE_PARA@,Vanara.PInvoke.Crypt32.CRYPT_VERIFY_MESSAGE_PARA@,System.UInt32,System.IntPtr,System.UInt32,Vanara.PInvoke.Crypt32.CryptMsgType,Vanara.PInvoke.Crypt32.CryptMsgType@,Vanara.PInvoke.Crypt32.CryptMsgType@,System.IntPtr,System.UInt32@,Vanara.PInvoke.Crypt32.SafePCCERT_CONTEXT@,Vanara.PInvoke.Crypt32.SafePCCERT_CONTEXT@)">
            <summary>
            <para>The <c>CryptDecodeMessage</c> function decodes, decrypts, and verifies a cryptographic message.</para>
            <para>
            This function can be used when the type of cryptographic message is unknown. The dwMsgTypeFlags constants can be combined with a
            bitwise- <c>OR</c> operation so that the function will try to find one of the types. When one of the types is found, the
            function reports the type found and returns the data appropriate to that type.
            </para>
            <para>
            In each pass, the function cracks only a single level of encryption or encoding. For additional cracking, this function, or one
            of the other Simplified Message Functions, must be called again.
            </para>
            </summary>
            <param name="dwMsgTypeFlags">
            <para>
            Indicates the message type. Message types can be combined with the bitwise- <c>OR</c> operator. This parameter can be one of the
            following message types:
            </para>
            <list type="bullet">
            <item>
            <term>CMSG_DATA_FLAG</term>
            </item>
            <item>
            <term>CMSG_SIGNED_FLAG</term>
            </item>
            <item>
            <term>CMSG_ENVELOPED_FLAG</term>
            </item>
            <item>
            <term>CMSG_SIGNED_AND_ENVELOPED_FLAG</term>
            </item>
            <item>
            <term>CMSG_HASHED_FLAG</term>
            </item>
            </list>
            <para><c>Note</c> After return, the <c>DWORD</c> pointed to by pdwMsgType is set with the type of the message.</para>
            </param>
            <param name="pDecryptPara">A pointer to a CRYPT_DECRYPT_MESSAGE_PARA structure that contains decryption parameters.</param>
            <param name="pVerifyPara">A pointer to a CRYPT_VERIFY_MESSAGE_PARA structure that contains verification parameters.</param>
            <param name="dwSignerIndex">
            <para>
            Indicates which signer, among the possible many signers of a message, is to be verified. This index can be changed in multiple
            calls to the function to verify additional signers.
            </para>
            <para>
            dwSignerIndex is set to zero for the first signer. If the function returns <c>FALSE</c>, and GetLastError returns
            CRYPT_E_NO_SIGNER, the previous call returned the last signer of the message. This parameter is used only with messages of types
            CMSG_SIGNED_AND_ENVELOPED or CMSG_SIGNED. For all other message types, it should be set to zero.
            </para>
            </param>
            <param name="pbEncodedBlob">A pointer to the encoded BLOB that is to be decoded.</param>
            <param name="cbEncodedBlob">The size, in bytes, of the encoded BLOB.</param>
            <param name="dwPrevInnerContentType">
            Only applicable when processing nested cryptographic messages. When processing an outer cryptographic message, it must be set to
            zero. When decoding a nested cryptographic message, it is set to the value returned at pdwInnerContentType by a previous calling
            of <c>CryptDecodeMessage</c> for the outer message. It can be any of the CMSG types listed in pdwMsgType. For backward
            compatibility, set dwPrevInnerContentType to zero.
            </param>
            <param name="pdwMsgType">
            <para>
            A pointer to a <c>DWORD</c> that specifies the message type returned. This parameter can be one of the following message types:
            </para>
            <list type="bullet">
            <item>
            <term>CMSG_DATA</term>
            </item>
            <item>
            <term>CMSG_SIGNED</term>
            </item>
            <item>
            <term>CMSG_ENVELOPED</term>
            </item>
            <item>
            <term>CMSG_SIGNED_AND_ENVELOPED</term>
            </item>
            <item>
            <term>CMSG_HASHED</term>
            </item>
            </list>
            </param>
            <param name="pdwInnerContentType">
            <para>
            A pointer to a <c>DWORD</c> that specifies the type of an inner message. The message type codes used for pdwMsgType are used
            here, also.
            </para>
            <para>If there is no cryptographic nesting, CMSG_DATA is returned.</para>
            </param>
            <param name="pbDecoded">
            <para>A pointer to a buffer to receive the decoded message.</para>
            <para>
            This parameter can be <c>NULL</c> if the decoded message is not required or to set the size of the decoded message for memory
            allocation purposes. A decoded message will not be returned if this parameter is <c>NULL</c>. For more information, see
            Retrieving Data of Unknown Length.
            </para>
            </param>
            <param name="pcbDecoded">
            <para>
            A pointer to a variable that specifies the size, in bytes, of the buffer pointed to by the pbDecoded parameter. When the
            function returns, this variable contains the size of the decoded message.
            </para>
            <para>
            <c>Note</c> When processing the data returned in the buffer, applications must use the actual size of the data returned. The
            actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually
            specified large enough to ensure that the largest possible output data will fit in the buffer.) On output, the variable pointed
            to by this parameter is updated to reflect the actual size of the data copied to the buffer.
            </para>
            </param>
            <param name="ppXchgCert">
            A pointer to a pointer to a CERT_CONTEXT structure with a certificate that corresponds to the private exchange key needed to
            decode the message. This parameter is only set for message types CMSG_ENVELOPED and CMSG_SIGNED_AND_ENVELOPED.
            </param>
            <param name="ppSignerCert">
            A pointer to a pointer to a CERT_CONTEXT structure of the certificate context of the signer. This parameter is only set for
            message types CMSG_SIGNED and CMSG_SIGNED_AND_ENVELOPED.
            </param>
            <returns>
            <para>If the function succeeds, the function returns nonzero ( <c>TRUE</c>).</para>
            <para>If the function fails, it returns zero ( <c>FALSE</c>). For extended error information, call GetLastError.</para>
            <para>The CryptDecryptMessage, CryptVerifyMessageSignature, or CryptVerifyMessageHash functions can be propagated to this function.</para>
            <para>The following error code is most commonly returned by the GetLastError function.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_MORE_DATA</term>
            <term>
            If the buffer specified by the pbDecoded parameter is not large enough to hold the returned data, the function sets the
            ERROR_MORE_DATA code and stores the required buffer size, in bytes, in the variable pointed to by pcbDecoded.
            </term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            The dwMsgTypeFlags parameter specifies the set of allowable messages. For example, to decode either SIGNED or ENVELOPED
            messages, set dwMsgTypeFlags to CMSG_SIGNED_FLAG | CMSG_ENVELOPED_FLAG. Either or both of the pDecryptPara or pVerifyPara
            parameters must be specified.
            </para>
            <para>
            For a successfully decoded or verified message, the certificate context pointers pointed to by ppXchgCert and ppSignerCert are
            updated. They must be freed by calling CertFreeCertificateContext. If the function fails, they are set to <c>NULL</c>.
            </para>
            <para>
            The ppXchgCert or ppSignerCert parameters can be set to <c>NULL</c> before the function is called, which indicates that the
            caller is not interested in getting the exchange certificate or the signer certificate context.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptDecryptAndVerifyMessageSignature(Vanara.PInvoke.Crypt32.CRYPT_DECRYPT_MESSAGE_PARA@,Vanara.PInvoke.Crypt32.CRYPT_VERIFY_MESSAGE_PARA@,System.UInt32,System.IntPtr,System.UInt32,System.IntPtr,System.UInt32@,Vanara.PInvoke.Crypt32.SafePCCERT_CONTEXT@,Vanara.PInvoke.Crypt32.SafePCCERT_CONTEXT@)">
            <summary>The <c>CryptDecryptAndVerifyMessageSignature</c> function decrypts a message and verifies its signature.</summary>
            <param name="pDecryptPara">A pointer to a CRYPT_DECRYPT_MESSAGE_PARA structure that contains decryption parameters.</param>
            <param name="pVerifyPara">A pointer to a CRYPT_VERIFY_MESSAGE_PARA structure that contains verification parameters.</param>
            <param name="dwSignerIndex">
            Identifies a particular signer of the message. A message can be signed by more than one signer and this function can be called
            multiple times changing this parameter to check for several signers. It is set to zero for the first signer. If the function
            returns <c>FALSE</c>, and GetLastError returns CRYPT_E_NO_SIGNER, the previous call received the last signer of the message.
            </param>
            <param name="pbEncryptedBlob">A pointer to the signed, encoded, and encrypted message to be decrypted and verified.</param>
            <param name="cbEncryptedBlob">The size, in bytes, of the encrypted message.</param>
            <param name="pbDecrypted">
            <para>A pointer to a buffer to receive the decrypted message.</para>
            <para>
            This parameter can be <c>NULL</c> if the decrypted message is not required or to set the size of the decrypted message for
            memory allocation purposes. A decrypted message will not be returned if this parameter is <c>NULL</c>. For more information, see
            Retrieving Data of Unknown Length.
            </para>
            </param>
            <param name="pcbDecrypted">
            <para>
            A pointer to a <c>DWORD</c> that specifies the size, in bytes, of the buffer pointed to by the pbDecrypted parameter. When the
            function returns, it contains the size of the decrypted message copied to pbDecrypted.
            </para>
            <para>
            <c>Note</c> When processing the data returned in the pbDecrypted buffer, applications must use the actual size of the data
            returned. The actual size can be slightly smaller than the size of the buffer specified in pcbDecrypted on input. On output, the
            variable pointed to by this parameter is set to reflect the actual size of the data copied to the buffer.
            </para>
            </param>
            <param name="ppXchgCert">
            A pointer to a CERT_CONTEXT structure of the certificate that corresponds to the private exchange key needed to decrypt the message.
            </param>
            <param name="ppSignerCert">A pointer to a CERT_CONTEXT structure of the certificate of the signer.</param>
            <returns>
            <para>If the function succeeds, the function returns nonzero ( <c>TRUE</c>).</para>
            <para>If the function fails, it returns zero ( <c>FALSE</c>). For extended error information, call GetLastError.</para>
            <para>
            <c>Note</c> Errors from the called functions CryptDecryptMessage and CryptVerifyMessageSignature might be propagated to this function.
            </para>
            <para>The GetLastError function returns the following error code most often.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_MORE_DATA</term>
            <term>
            If the buffer specified by the pbDecrypted parameter is not large enough to hold the returned data, the function sets the
            ERROR_MORE_DATA code, and stores the required buffer size, in bytes, in the variable pointed to by pcbDecrypted.
            </term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            For a successfully decrypted and verified message, the certificate context pointers pointed to by ppXchgCert and ppSignerCert
            are updated. They must be freed by calling CertFreeCertificateContext. If the function fails, they are set to <c>NULL</c>.
            </para>
            <para>
            To indicate that the caller is not interested in the exchange certificate or the signer certificate context, set the ppXchgCert
            and ppSignerCert parameters to <c>NULL</c>.
            </para>
            <para>Examples</para>
            <para>For an example that uses this function, see Example C Program: Sending and Receiving a Signed and Encrypted Message.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptDecryptMessage(Vanara.PInvoke.Crypt32.CRYPT_DECRYPT_MESSAGE_PARA@,System.IntPtr,System.UInt32,System.IntPtr,System.UInt32@,Vanara.PInvoke.Crypt32.SafePCCERT_CONTEXT@)">
            <summary>The <c>CryptDecryptMessage</c> function decodes and decrypts a message.</summary>
            <param name="pDecryptPara">A pointer to a CRYPT_DECRYPT_MESSAGE_PARA structure that contains decryption parameters.</param>
            <param name="pbEncryptedBlob">A pointer to a buffer that contains the encoded and encrypted message to be decrypted.</param>
            <param name="cbEncryptedBlob">The size, in bytes, of the encoded and encrypted message.</param>
            <param name="pbDecrypted">
            <para>A pointer to a buffer that receives the decrypted message.</para>
            <para>
            To set the size of this information for memory allocation purposes, this parameter can be <c>NULL</c>. A decrypted message will
            not be returned if this parameter is <c>NULL</c>. For more information, see Retrieving Data of Unknown Length.
            </para>
            </param>
            <param name="pcbDecrypted">
            <para>
            A pointer to a <c>DWORD</c> that specifies the size, in bytes, of the buffer pointed to by the pbDecrypted parameter. When the
            function returns, this variable contains the size, in bytes, of the decrypted message copied to pbDecrypted.
            </para>
            <para>
            <c>Note</c> When processing the data returned in the pbDecrypted buffer, applications must use the actual size of the data
            returned. The actual size can be slightly smaller than the size of the buffer specified in pcbDecrypted on input. On input,
            buffer sizes are usually specified large enough to ensure that the largest possible output data will fit in the buffer. On
            output, the <c>DWORD</c> is updated to the actual size of the data copied to the buffer.
            </para>
            </param>
            <param name="ppXchgCert">
            A pointer to a CERT_CONTEXT structure of a certificate that corresponds to the private exchange key needed to decrypt the
            message. To indicate that the function should not return the certificate context used to decrypt, set this parameter to <c>NULL</c>.
            </param>
            <returns>
            <para>If the function succeeds, the function returns nonzero ( <c>TRUE</c>).</para>
            <para>If the function fails, it returns zero ( <c>FALSE</c>). For extended error information, call GetLastError.</para>
            <para><c>Note</c> Errors from calls to CryptImportKey and CryptDecrypt might be propagated to this function.</para>
            <para>The GetLastError function returns the following error codes most often.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_MORE_DATA</term>
            <term>
            If the buffer specified by the pbDecrypted parameter is not large enough to hold the returned data, the function sets the
            ERROR_MORE_DATA code, and stores the required buffer size, in bytes, in the variable pointed to by pcbDecrypted.
            </term>
            </item>
            <item>
            <term>E_INVALIDARG</term>
            <term>
            Invalid message and certificate encoding types. Currently only PKCS_7_ASN_ENCODING and X509_ASN_ENCODING_TYPE are supported.
            Invalid cbSize in *pDecryptPara.
            </term>
            </item>
            <item>
            <term>CRYPT_E_UNEXPECTED_MSG_TYPE</term>
            <term>Not an enveloped cryptographic message.</term>
            </item>
            <item>
            <term>NTE_BAD_ALGID</term>
            <term>The message was encrypted by using an unknown or unsupported algorithm.</term>
            </item>
            <item>
            <term>CRYPT_E_NO_DECRYPT_CERT</term>
            <term>No certificate was found having a private key property to use for decrypting.</term>
            </item>
            </list>
            <para>
            If the function fails, GetLastError may return an Abstract Syntax Notation One (ASN.1) encoding/decoding error. For information
            about these errors, see ASN.1 Encoding/Decoding Return Values.
            </para>
            </returns>
            <remarks>
            <para>
            When <c>NULL</c> is passed for pbDecrypted, and pcbDecrypted is not <c>NULL</c>, <c>NULL</c> is returned for the address passed
            in ppXchgCert; otherwise, a pointer to a CERT_CONTEXT is returned. For a successfully decrypted message, this pointer to a
            <c>CERT_CONTEXT</c> points to the certificate context used to decrypt the message. It must be freed by calling
            CertFreeCertificateContext. If the function fails, the value at ppXchgCert is set to <c>NULL</c>.
            </para>
            <para>Examples</para>
            <para>For an example that uses this function, see Example C Program: Using CryptEncryptMessage and CryptDecryptMessage.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptDecryptMessage(Vanara.PInvoke.Crypt32.CRYPT_DECRYPT_MESSAGE_PARA@,System.IntPtr,System.UInt32,System.IntPtr,System.UInt32@,System.IntPtr)">
            <summary>The <c>CryptDecryptMessage</c> function decodes and decrypts a message.</summary>
            <param name="pDecryptPara">A pointer to a CRYPT_DECRYPT_MESSAGE_PARA structure that contains decryption parameters.</param>
            <param name="pbEncryptedBlob">A pointer to a buffer that contains the encoded and encrypted message to be decrypted.</param>
            <param name="cbEncryptedBlob">The size, in bytes, of the encoded and encrypted message.</param>
            <param name="pbDecrypted">
            <para>A pointer to a buffer that receives the decrypted message.</para>
            <para>
            To set the size of this information for memory allocation purposes, this parameter can be <c>NULL</c>. A decrypted message will
            not be returned if this parameter is <c>NULL</c>. For more information, see Retrieving Data of Unknown Length.
            </para>
            </param>
            <param name="pcbDecrypted">
            <para>
            A pointer to a <c>DWORD</c> that specifies the size, in bytes, of the buffer pointed to by the pbDecrypted parameter. When the
            function returns, this variable contains the size, in bytes, of the decrypted message copied to pbDecrypted.
            </para>
            <para>
            <c>Note</c> When processing the data returned in the pbDecrypted buffer, applications must use the actual size of the data
            returned. The actual size can be slightly smaller than the size of the buffer specified in pcbDecrypted on input. On input,
            buffer sizes are usually specified large enough to ensure that the largest possible output data will fit in the buffer. On
            output, the <c>DWORD</c> is updated to the actual size of the data copied to the buffer.
            </para>
            </param>
            <param name="ppXchgCert">
            A pointer to a CERT_CONTEXT structure of a certificate that corresponds to the private exchange key needed to decrypt the
            message. To indicate that the function should not return the certificate context used to decrypt, set this parameter to <c>NULL</c>.
            </param>
            <returns>
            <para>If the function succeeds, the function returns nonzero ( <c>TRUE</c>).</para>
            <para>If the function fails, it returns zero ( <c>FALSE</c>). For extended error information, call GetLastError.</para>
            <para><c>Note</c> Errors from calls to CryptImportKey and CryptDecrypt might be propagated to this function.</para>
            <para>The GetLastError function returns the following error codes most often.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_MORE_DATA</term>
            <term>
            If the buffer specified by the pbDecrypted parameter is not large enough to hold the returned data, the function sets the
            ERROR_MORE_DATA code, and stores the required buffer size, in bytes, in the variable pointed to by pcbDecrypted.
            </term>
            </item>
            <item>
            <term>E_INVALIDARG</term>
            <term>
            Invalid message and certificate encoding types. Currently only PKCS_7_ASN_ENCODING and X509_ASN_ENCODING_TYPE are supported.
            Invalid cbSize in *pDecryptPara.
            </term>
            </item>
            <item>
            <term>CRYPT_E_UNEXPECTED_MSG_TYPE</term>
            <term>Not an enveloped cryptographic message.</term>
            </item>
            <item>
            <term>NTE_BAD_ALGID</term>
            <term>The message was encrypted by using an unknown or unsupported algorithm.</term>
            </item>
            <item>
            <term>CRYPT_E_NO_DECRYPT_CERT</term>
            <term>No certificate was found having a private key property to use for decrypting.</term>
            </item>
            </list>
            <para>
            If the function fails, GetLastError may return an Abstract Syntax Notation One (ASN.1) encoding/decoding error. For information
            about these errors, see ASN.1 Encoding/Decoding Return Values.
            </para>
            </returns>
            <remarks>
            <para>
            When <c>NULL</c> is passed for pbDecrypted, and pcbDecrypted is not <c>NULL</c>, <c>NULL</c> is returned for the address passed
            in ppXchgCert; otherwise, a pointer to a CERT_CONTEXT is returned. For a successfully decrypted message, this pointer to a
            <c>CERT_CONTEXT</c> points to the certificate context used to decrypt the message. It must be freed by calling
            CertFreeCertificateContext. If the function fails, the value at ppXchgCert is set to <c>NULL</c>.
            </para>
            <para>Examples</para>
            <para>For an example that uses this function, see Example C Program: Using CryptEncryptMessage and CryptDecryptMessage.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptEncryptMessage(Vanara.PInvoke.Crypt32.CRYPT_ENCRYPT_MESSAGE_PARA@,System.UInt32,Vanara.PInvoke.Crypt32.PCCERT_CONTEXT[],System.IntPtr,System.UInt32,System.IntPtr,System.UInt32@)">
            <summary>The <c>CryptEncryptMessage</c> function encrypts and encodes a message.</summary>
            <param name="pEncryptPara">
            <para>A pointer to a CRYPT_ENCRYPT_MESSAGE_PARA structure that contains the encryption parameters.</para>
            <para>
            The <c>CryptEncryptMessage</c> function does not support the SHA2 OIDs, <c>szOID_DH_SINGLE_PASS_STDDH_SHA256_KDF</c> and <c>szOID_DH_SINGLE_PASS_STDDH_SHA384_KDF</c>.
            </para>
            </param>
            <param name="cRecipientCert">Number of elements in the rgpRecipientCert array.</param>
            <param name="rgpRecipientCert">
            Array of pointers to CERT_CONTEXT structures that contain the certificates of intended recipients of the message.
            </param>
            <param name="pbToBeEncrypted">A pointer to a buffer that contains the message that is to be encrypted.</param>
            <param name="cbToBeEncrypted">The size, in bytes, of the message that is to be encrypted.</param>
            <param name="pbEncryptedBlob">
            <para>A pointer to BLOB that contains a buffer that receives the encrypted and encoded message.</para>
            <para>
            To set the size of this information for memory allocation purposes, this parameter can be <c>NULL</c>. For more information, see
            Retrieving Data of Unknown Length.
            </para>
            </param>
            <param name="pcbEncryptedBlob">
            <para>
            A pointer to a <c>DWORD</c> that specifies the size, in bytes, of the buffer pointed to by the pbEncryptedBlob parameter. When
            the function returns, this variable contains the size, in bytes, of the encrypted and encoded message copied to pbEncryptedBlob.
            </para>
            <para>
            <c>Note</c> When processing the data returned in the buffer of the pbEncryptedBlob, applications need to use the actual size of
            the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer
            sizes are usually specified large enough to ensure that the largest possible output data will fit in the buffer.) On output, the
            variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the function returns nonzero ( <c>TRUE</c>).</para>
            <para>If the function fails, it returns zero ( <c>FALSE</c>). For extended error information, call GetLastError.</para>
            <para>
            <c>Note</c> Errors from calls to CryptGenKey, CryptEncrypt, CryptImportKey, and CryptExportKey can be propagated to this function.
            </para>
            <para>The GetLastError function returns the following error codes most often.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_MORE_DATA</term>
            <term>
            If the buffer specified by the pbEncryptedBlob parameter is not large enough to hold the returned data, the function sets the
            ERROR_MORE_DATA code and stores the required buffer size, in bytes, in the variable pointed to by pcbEncryptedBlob.
            </term>
            </item>
            <item>
            <term>E_INVALIDARG</term>
            <term>
            The message encoding type is not valid. Currently only PKCS_7_ASN_ENCODING is supported. The cbSize in *pEncryptPara is not valid.
            </term>
            </item>
            </list>
            <para>
            If the function fails, GetLastError may return an Abstract Syntax Notation One (ASN.1) encoding/decoding error. For information
            about these errors, see ASN.1 Encoding/Decoding Return Values.
            </para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptGetMessageCertificates(Vanara.PInvoke.Crypt32.CertEncodingType,Vanara.PInvoke.Crypt32.HCRYPTPROV,Vanara.PInvoke.Crypt32.CertStoreFlags,System.IntPtr,System.UInt32)">
            <summary>
            The <c>CryptGetMessageCertificates</c> function returns the handle of an open certificate store containing the message's
            certificates and CRLs. This function calls CertOpenStore using provider type CERT_STORE_PROV_PKCS7 as its lpszStoreProvider parameter.
            </summary>
            <param name="dwMsgAndCertEncodingType">
            <para>
            Specifies the encoding type used. It is always acceptable to specify both the certificate and message encoding types by
            combining them with a bitwise- <c>OR</c> operation as shown in the following example:
            </para>
            <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING</para>
            <para>Currently defined encoding types are:</para>
            <list type="bullet">
            <item>
            <term>X509_ASN_ENCODING</term>
            </item>
            <item>
            <term>PKCS_7_ASN_ENCODING</term>
            </item>
            </list>
            </param>
            <param name="hCryptProv">
            <para>This parameter is not used and should be set to <c>NULL</c>.</para>
            <para>
            <c>Windows Server 2003 and Windows XP:</c> Handle of the CSP passed to CertOpenStore. For more information, see
            CertOpenStore.Unless there is a strong reason for passing a specific cryptographic provider in hCryptProv, pass zero to cause
            the default RSA or DSS provider to be acquired.
            </para>
            <para>This parameter's data type is <c>HCRYPTPROV</c>.</para>
            </param>
            <param name="dwFlags">Flags passed to CertOpenStore. For more information, see CertOpenStore.</param>
            <param name="pbSignedBlob">A pointer to a buffered CRYPT_INTEGER_BLOB structure that contains the signed message.</param>
            <param name="cbSignedBlob">The size, in bytes, of the signed message.</param>
            <returns>
            <para>Returns the certificate store containing the message's certificates and CRLs. For an error, <c>NULL</c> is returned.</para>
            <para>The following lists the error code most commonly returned by the GetLastError function.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>E_INVALIDARG</term>
            <term>Invalid message and certificate encoding types. Currently only PKCS_7_ASN_ENCODING and X509_ASN_ENCODING are supported.</term>
            </item>
            </list>
            <para>
            If the function fails, GetLastError may return an Abstract Syntax Notation One (ASN.1) encoding/decoding error. For information
            about these errors, see ASN.1 Encoding/Decoding Return Values.
            </para>
            </returns>
            <remarks>
            <para>Use GetLastError to determine the reason for any errors.</para>
            <para>Examples</para>
            <para>For an example that uses this function, see Example C Program: Setting and Getting Certificate Store Properties.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptGetMessageSignerCount(Vanara.PInvoke.Crypt32.CertEncodingType,System.IntPtr,System.UInt32)">
            <summary>The <c>CryptGetMessageSignerCount</c> function returns the number of signers of a signed message.</summary>
            <param name="dwMsgEncodingType">
            <para>
            Specifies the encoding type used. It is always acceptable to specify both the certificate and message encoding types by
            combining them with a bitwise- <c>OR</c> operation as shown in the following example:
            </para>
            <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING</para>
            <para>Currently defined encoding types are:</para>
            <list type="bullet">
            <item>
            <term>X509_ASN_ENCODING</term>
            </item>
            <item>
            <term>PKCS_7_ASN_ENCODING</term>
            </item>
            </list>
            </param>
            <param name="pbSignedBlob">A pointer to a buffer containing the signed message.</param>
            <param name="cbSignedBlob">The size, in bytes, of the signed message.</param>
            <returns>
            <para>Returns the number of signers of a signed message, zero when there are no signers, and minus one (–1) for an error.</para>
            <para>For extended error information, call GetLastError. The following error code is most commonly returned.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>E_INVALIDARG</term>
            <term>Invalid message encoding type. Currently only PKCS_7_ASN_ENCODING is supported.</term>
            </item>
            </list>
            <para>
            If the function fails, GetLastError may return an Abstract Syntax Notation One (ASN.1) encoding/decoding error. For information
            about these errors, see ASN.1 Encoding/Decoding Return Values.
            </para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptHashMessage(Vanara.PInvoke.Crypt32.CRYPT_HASH_MESSAGE_PARA@,System.Boolean,System.UInt32,System.IntPtr[],System.UInt32[],System.IntPtr,System.UInt32@,System.IntPtr,System.UInt32@)">
            <summary>The <c>CryptHashMessage</c> function creates a hash of the message.</summary>
            <param name="pHashPara">A pointer to a CRYPT_HASH_MESSAGE_PARA structure that contains the hash parameters.</param>
            <param name="fDetachedHash">
            If this parameter is set to <c>TRUE</c>, only pbComputedHash is encoded in pbHashedBlob. Otherwise, both rgpbToBeHashed and
            pbComputedHash are encoded.
            </param>
            <param name="cToBeHashed">
            The number of array elements in rgpbToBeHashed and rgcbToBeHashed. This parameter can only be one unless fDetachedHash is set to <c>TRUE</c>.
            </param>
            <param name="rgpbToBeHashed">An array of pointers to buffers that contain the contents to be hashed.</param>
            <param name="rgcbToBeHashed">An array of sizes, in bytes, of the buffers pointed to by rgpbToBeHashed.</param>
            <param name="pbHashedBlob">
            <para>A pointer to a buffer to receive the hashed message encoded for transmission.</para>
            <para>
            This parameter can be <c>NULL</c> if the hashed message is not needed for additional processing or to set the size of the hashed
            message for memory allocation purposes. A hashed message will not be returned if this parameter is <c>NULL</c>. For more
            information, see Retrieving Data of Unknown Length.
            </para>
            </param>
            <param name="pcbHashedBlob">
            <para>
            A pointer to a <c>DWORD</c> that specifies the size, in bytes, of the buffer pointed to by the pbHashedBlob parameter. When the
            function returns, this variable contains the size, in bytes, of the decrypted message copied to pbHashedBlob. This parameter
            must be the address of a <c>DWORD</c> and not <c>NULL</c> or the length of the buffer will not be returned.
            </para>
            <para>
            <c>Note</c> When processing the data returned, applications must use the actual size of the data returned. The actual size can
            be slightly smaller than the size of the buffer specified on input. On input, buffer sizes are usually specified large enough to
            ensure that the largest possible output data will fit in the buffer. On output, the variable pointed to by this parameter is
            updated to reflect the actual size of the data copied to the buffer.
            </para>
            </param>
            <param name="pbComputedHash">
            A pointer to a buffer to receive the newly created hash value. This parameter can be <c>NULL</c> if the newly created hash is
            not needed for additional processing, or to set the size of the hash for memory allocation purposes. For more information, see
            Retrieving Data of Unknown Length.
            </param>
            <param name="pcbComputedHash">
            <para>
            A pointer to a <c>DWORD</c> that specifies the size, in bytes, of the buffer pointed to by the pbComputedHash parameter. When
            the function returns, this <c>DWORD</c> contains the size, in bytes, of the newly created hash that was copied to pbComputedHash.
            </para>
            <para>
            <c>Note</c> When processing the data returned, applications must use the actual size of the data returned. The actual size can
            be slightly smaller than the size of the buffer specified on input. On input, buffer sizes are usually specified large enough to
            ensure that the largest possible output data will fit in the buffer. On output, the variable pointed to by this parameter is
            updated to reflect the actual size of the data copied to the buffer.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the function returns nonzero ( <c>TRUE</c>).</para>
            <para>If the function fails, it returns zero ( <c>FALSE</c>). For extended error information, call GetLastError.</para>
            <para>
            <c>Note</c> Errors from the called functions CryptCreateHash, CryptHashData, and CryptGetHashParam might be propagated to this function.
            </para>
            <para>The GetLastError function returns the following error codes most often.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>E_INVALIDARG</term>
            <term>
            The message encoding type is not valid. Currently only PKCS_7_ASN_ENCODING is supported. The cbSize in *pHashPara is not valid.
            </term>
            </item>
            <item>
            <term>ERROR_MORE_DATA</term>
            <term>
            If the buffer specified by the pbHashedBlob parameter is not large enough to hold the returned data, the function sets the
            ERROR_MORE_DATA code and stores the required buffer size, in bytes, into the variable pointed to by pbHashedBlob.
            </term>
            </item>
            </list>
            <para>
            If the function fails, GetLastError may return an Abstract Syntax Notation One (ASN.1) encoding/decoding error. For information
            about these errors, see ASN.1 Encoding/Decoding Return Values.
            </para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptMsgCalculateEncodedLength(Vanara.PInvoke.Crypt32.CertEncodingType,Vanara.PInvoke.Crypt32.CryptMsgFlags,Vanara.PInvoke.Crypt32.CryptMsgType,System.IntPtr,Vanara.PInvoke.Crypt32.SafeOID,System.UInt32)">
            <summary>
            The <c>CryptMsgCalculateEncodedLength</c> function calculates the maximum number of bytes needed for an encoded cryptographic
            message given the message type, encoding parameters, and total length of the data to be encoded. Note that the result will
            always be greater than or equal to the actual number of bytes needed.
            </summary>
            <param name="dwMsgEncodingType">
            <para>
            Specifies the encoding type used. It is always acceptable to specify both the certificate and message encoding types by
            combining them with a bitwise- <c>OR</c> operation as shown in the following example:
            </para>
            <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING</para>
            <para>Currently defined encoding types are:</para>
            <list type="bullet">
            <item>
            <term>X509_ASN_ENCODING</term>
            </item>
            <item>
            <term>PKCS_7_ASN_ENCODING</term>
            </item>
            </list>
            </param>
            <param name="dwFlags">
            <para>Currently defined flags are shown in the following table.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CMSG_BARE_CONTENT_FLAG</term>
            <term>
            Indicates that streamed output will not have an outer ContentInfo wrapper (as defined by PKCS #7). This makes it suitable to be
            streamed into an enclosing message.
            </term>
            </item>
            <item>
            <term>CMSG_DETACHED_FLAG</term>
            <term>Indicates that there is detached data being supplied for the subsequent calls to CryptMsgUpdate.</term>
            </item>
            <item>
            <term>CMSG_CONTENTS_OCTETS_FLAG</term>
            <term>
            Used to calculate the size of a DER encoding of a message to be nested inside an enveloped message. This is particularly useful
            when streaming is being performed.
            </term>
            </item>
            <item>
            <term>CMSG_CMS_ENCAPSULATED_CONTENT_FLAG</term>
            <term>
            Non-Data type inner content is encapsulated within an OCTET STRING. This flag is applicable for both Signed and Enveloped messages.
            </term>
            </item>
            </list>
            </param>
            <param name="dwMsgType">
            <para>Currently defined message types are shown in the following table.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CMSG_DATA</term>
            <term>An octet (BYTE) string.</term>
            </item>
            <item>
            <term>CMSG_SIGNED</term>
            <term>CMSG_SIGNED_ENCODE_INFO</term>
            </item>
            <item>
            <term>CMSG_ENVELOPED</term>
            <term>CMSG_ENVELOPED_ENCODE_INFO</term>
            </item>
            <item>
            <term>CMSG_SIGNED_AND_ENVELOPED</term>
            <term>Not implemented.</term>
            </item>
            <item>
            <term>CMSG_HASHED</term>
            <term>CMSG_HASHED_ENCODE_INFO</term>
            </item>
            <item>
            <term>CMSG_ENCRYPTED</term>
            <term>Not implemented.</term>
            </item>
            </list>
            </param>
            <param name="pvMsgEncodeInfo">
            A pointer to the data to be encoded. The type of data pointed to depends on the value of dwMsgType. For details, see the
            dwMsgType table.
            </param>
            <param name="pszInnerContentObjID">
            <para>
            When calling <c>CryptMsgCalculateEncodedLength</c> with data provided to CryptMsgUpdate already encoded, the appropriate object
            identifier is passed in pszInnerContentObjID. If pszInnerContentObjID is <c>NULL</c>, the inner content type is assumed not to
            have been previously encoded, and is encoded as an octet string and given the type CMSG_DATA.
            </para>
            <para>When streaming is being used, pszInnerContentObjID must be either <c>NULL</c> or szOID_RSA_data.</para>
            <para>The following algorithm object identifiers are commonly used:</para>
            <list type="bullet">
            <item>
            <term>szOID_RSA_data</term>
            </item>
            <item>
            <term>szOID_RSA_signedData</term>
            </item>
            <item>
            <term>szOID_RSA_envelopedData</term>
            </item>
            <item>
            <term>szOID_RSA_signEnvData</term>
            </item>
            <item>
            <term>szOID_RSA_digestedData</term>
            </item>
            <item>
            <term>szOID_RSA_encryptedData</term>
            </item>
            <item>
            <term>SPC_INDIRECT_DATA_OBJID</term>
            </item>
            </list>
            <para>
            A user can define new inner content usage. The user must ensure that the sender and receiver of the message agree upon the
            semantics associated with the object identifier.
            </para>
            </param>
            <param name="cbData">The size, in bytes, of the content.</param>
            <returns>
            <para>
            Returns the required length for an encoded cryptographic message. This length might not be the exact length but it will not be
            less than the required length. Zero is returned if the function fails.
            </para>
            <para>
            To retrieve extended error information, use the GetLastError function. The following table lists the error codes most commonly returned.
            </para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>CRYPT_E_INVALID_MSG_TYPE</term>
            <term>The message type is not valid.</term>
            </item>
            <item>
            <term>CRYPT_E_UNKNOWN_ALGO</term>
            <term>The cryptographic algorithm is unknown.</term>
            </item>
            <item>
            <term>E_INVALIDARG</term>
            <term>One or more arguments are not valid.</term>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptMsgClose(Vanara.PInvoke.Crypt32.HCRYPTMSG)">
            <summary>
            The <c>CryptMsgClose</c> function closes a cryptographic message handle. At each call to this function, the reference count on
            the message is reduced by one. When the reference count reaches zero, the message is fully released.
            </summary>
            <param name="hCryptMsg">Handle of the cryptographic message to be closed.</param>
            <returns>
            <para>If the function succeeds, the function returns nonzero ( <c>TRUE</c>).</para>
            <para>If the function fails, it returns zero ( <c>FALSE</c>). For extended error information, call GetLastError.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptMsgControl(Vanara.PInvoke.Crypt32.HCRYPTMSG,Vanara.PInvoke.Crypt32.CryptMsgFlags,Vanara.PInvoke.Crypt32.CryptMsgControlType,System.IntPtr)">
            <summary>
            <para>
            The <c>CryptMsgControl</c> function performs a control operation after a message has been decoded by a final call to the
            CryptMsgUpdate function. The control operations provided by this function are used for decryption, signature and hash
            verification, and the addition and deletion of certificates, certificate revocation lists (CRLs), signers, and unauthenticated attributes.
            </para>
            <para>
            Important changes that affect the handling of enveloped messages have been made to CryptoAPI to support Secure/Multipurpose
            Internet Mail Extensions (S/MIME) email interoperability. For more information, see the Remarks for the CryptMsgOpenToEncode function.
            </para>
            </summary>
            <param name="hCryptMsg">A handle of a cryptographic message for which a control is to be applied.</param>
            <param name="dwFlags">
            <para>The following value is defined when the dwCtrlType parameter is one of the following:</para>
            <list type="bullet">
            <item>
            <term>CMSG_CTRL_DECRYPT</term>
            </item>
            <item>
            <term>CMSG_CTRL_KEY_TRANS_DECRYPT</term>
            </item>
            <item>
            <term>CMSG_CTRL_KEY_AGREE_DECRYPT</term>
            </item>
            <item>
            <term>CMSG_CTRL_MAIL_LIST_DECRYPT</term>
            </item>
            </list>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CMSG_CRYPT_RELEASE_CONTEXT_FLAG</term>
            <term>
            The handle to the cryptographic provider is released on the final call to the CryptMsgClose function. This handle is not
            released if the CryptMsgControl function fails.
            </term>
            </item>
            </list>
            <para>If the dwCtrlType parameter does not specify a decrypt operation, set this value to zero.</para>
            </param>
            <param name="dwCtrlType">
            <para>
            The type of operation to be performed. Currently defined message control types and the type of structure that should be passed
            to the pvCtrlPara parameter are shown in the following table.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CMSG_CTRL_ADD_ATTR_CERT 14 (0xE)</term>
            <term>A BLOB that contains the encoded bytes of attribute certificate.</term>
            </item>
            <item>
            <term>CMSG_CTRL_ADD_CERT 10 (0xA)</term>
            <term>A CRYPT_INTEGER_BLOB structure that contains the encoded bytes of the certificate to be added to the message.</term>
            </item>
            <item>
            <term>CMSG_CTRL_ADD_CMS_SIGNER_INFO 20 (0x14)</term>
            <term>
            A CMSG_CMS_SIGNER_INFO structure that contains signer information. This operation differs from CMSG_CTRL_ADD_SIGNER because the
            signer information contains the signature.
            </term>
            </item>
            <item>
            <term>CMSG_CTRL_ADD_CRL 12 (0xC)</term>
            <term>A BLOB that contains the encoded bytes of the CRL to be added to the message.</term>
            </item>
            <item>
            <term>CMSG_CTRL_ADD_SIGNER 6 (0x6)</term>
            <term>A CMSG_SIGNER_ENCODE_INFO structure that contains the signer information to be added to the message.</term>
            </item>
            <item>
            <term>CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR 8 (0x8)</term>
            <term>
            A CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA structure that contains the index of the signer and a BLOB that contains the
            unauthenticated attribute information to be added to the message.
            </term>
            </item>
            <item>
            <term>CMSG_CTRL_DECRYPT 2 (0x2)</term>
            <term>
            A CMSG_CTRL_DECRYPT_PARA structure used to decrypt the message for the specified key transport recipient. This value is
            applicable to RSA recipients. This operation specifies that the CryptMsgControl function search the recipient index to obtain
            the key transport recipient information. If the function fails, GetLastError will return CRYPT_E_INVALID_INDEX if no key
            transport recipient is found.
            </term>
            </item>
            <item>
            <term>CMSG_CTRL_DEL_ATTR_CERT 15 (0xF)</term>
            <term>The index of the attribute certificate to be removed.</term>
            </item>
            <item>
            <term>CMSG_CTRL_DEL_CERT 11 (0xB)</term>
            <term>The index of the certificate to be deleted from the message.</term>
            </item>
            <item>
            <term>CMSG_CTRL_DEL_CRL 13 (0xD)</term>
            <term>The index of the CRL to be deleted from the message.</term>
            </item>
            <item>
            <term>CMSG_CTRL_DEL_SIGNER 7 (0x7)</term>
            <term>The index of the signer to be deleted.</term>
            </item>
            <item>
            <term>CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR 9 (0x9)</term>
            <term>
            A CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA structure that contains an index that specifies the signer and the index that specifies
            the signer's unauthenticated attribute to be deleted.
            </term>
            </item>
            <item>
            <term>CMSG_CTRL_ENABLE_STRONG_SIGNATURE 21 (0x15)</term>
            <term>
            A CERT_STRONG_SIGN_PARA structure used to perform strong signature checking. To check for a strong signature, specify this
            control type before calling CryptMsgGetAndVerifySigner or before calling CryptMsgControl with the following control types set:
            After the signature is successfully verified, this function checks for a strong signature. If the signature is not strong, the
            operation will fail and the GetLastError value will be set to NTE_BAD_ALGID.
            </term>
            </item>
            <item>
            <term>CMSG_CTRL_KEY_AGREE_DECRYPT 17 (0x11)</term>
            <term>
            A CMSG_CTRL_KEY_AGREE_DECRYPT_PARA structure used to decrypt the message for the specified key agreement session key. Key
            agreement is used with Diffie-Hellman encryption/decryption.
            </term>
            </item>
            <item>
            <term>CMSG_CTRL_KEY_TRANS_DECRYPT 16 (0x10)</term>
            <term>
            A CMSG_CTRL_KEY_TRANS_DECRYPT_PARA structure used to decrypt the message for the specified key transport recipient. Key
            transport is used with RSA encryption/decryption.
            </term>
            </item>
            <item>
            <term>CMSG_CTRL_MAIL_LIST_DECRYPT 18 (0x12)</term>
            <term>
            A CMSG_CTRL_MAIL_LIST_DECRYPT_PARA structure used to decrypt the message for the specified recipient using a previously
            distributed key-encryption key (KEK).
            </term>
            </item>
            <item>
            <term>CMSG_CTRL_VERIFY_HASH 5 (0x5)</term>
            <term>This value is not used.</term>
            </item>
            <item>
            <term>CMSG_CTRL_VERIFY_SIGNATURE 1 (0x1)</term>
            <term>A CERT_INFO structure that identifies the signer of the message whose signature is to be verified.</term>
            </item>
            <item>
            <term>CMSG_CTRL_VERIFY_SIGNATURE_EX 19 (0x13)</term>
            <term>
            A CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA structure that specifies the signer index and public key to verify the message signature.
            The signer public key can be a CERT_PUBLIC_KEY_INFO structure, a certificate context, or a certificate chain context.
            </term>
            </item>
            </list>
            </param>
            <param name="pvCtrlPara">
            <para>A pointer to a structure determined by the value of dwCtrlType.</para>
            <list type="table">
            <listheader>
            <term>dwCtrlType value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>
            CMSG_CTRL_DECRYPT, CMSG_CTRL_KEY_TRANS_DECRYPT, CMSG_CTRL_KEY_AGREE_DECRYPT, or CMSG_CTRL_MAIL_LIST_DECRYPT, and the streamed
            enveloped message is being decoded
            </term>
            <term>
            Decoding will be done as if the streamed content were being decrypted. If any encrypted streamed content has accumulated prior
            to this call, some or all of the plaintext that results from the decryption of the cipher text is passed back to the application
            through the callback function specified in the call to the CryptMsgOpenToDecode function.
            </term>
            </item>
            <item>
            <term>CMSG_CTRL_VERIFY_HASH</term>
            <term>The hash computed from the content of the message is compared against the hash contained in the message.</term>
            </item>
            <item>
            <term>CMSG_CTRL_ADD_SIGNER</term>
            <term>pvCtrlPara points to a CMSG_SIGNER_ENCODE_INFO structure that contains the signer information to be added to the message.</term>
            </item>
            <item>
            <term>CMSG_CTRL_DEL_SIGNER</term>
            <term>
            After a deletion is made, any other signer indices in use for this message are no longer valid and must be reacquired by calling
            the CryptMsgGetParam function.
            </term>
            </item>
            <item>
            <term>CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR</term>
            <term>
            After a deletion is made, any other unauthenticated attribute indices in use for this signer are no longer valid and must be
            reacquired by calling the CryptMsgGetParam function.
            </term>
            </item>
            <item>
            <term>CMSG_CTRL_DEL_CERT</term>
            <term>
            After a deletion is made, any other certificate indices in use for this message are no longer valid and must be reacquired by
            calling the CryptMsgGetParam function.
            </term>
            </item>
            <item>
            <term>CMSG_CTRL_DEL_CRL</term>
            <term>
            After a deletion is made, any other CRL indices in use for this message are no longer valid and will need to be reacquired by
            calling the CryptMsgGetParam function.
            </term>
            </item>
            </list>
            </param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>
            If the function fails, the return value is zero and the GetLastError function returns an Abstract Syntax Notation One (ASN.1)
            encoding/decoding error. For information about these errors, see ASN.1 Encoding/Decoding Return Values.
            </para>
            <para>
            When a streamed, enveloped message is being decoded, errors encountered in the application-defined callback function specified
            by the pStreamInfo parameter of the CryptMsgOpenToDecode function might be propagated to the <c>CryptMsgControl</c> function. If
            this happens, the SetLastError function is not called by the <c>CryptMsgControl</c> function after the callback function
            returns. This preserves any errors encountered under the control of the application. It is the responsibility of the callback
            function (or one of the APIs that it calls) to call the <c>SetLastError</c> function if an error occurs while the application is
            processing the streamed data.
            </para>
            <para>Propagated errors might be encountered from the following functions:</para>
            <list type="bullet">
            <item>
            <term>CryptCreateHash</term>
            </item>
            <item>
            <term>CryptDecrypt</term>
            </item>
            <item>
            <term>CryptGetHashParam</term>
            </item>
            <item>
            <term>CryptGetUserKey</term>
            </item>
            <item>
            <term>CryptHashData</term>
            </item>
            <item>
            <term>CryptImportKey</term>
            </item>
            <item>
            <term>CryptSignHash</term>
            </item>
            <item>
            <term>CryptVerifySignature</term>
            </item>
            </list>
            <para>The following error codes are most commonly returned.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>CRYPT_E_ALREADY_DECRYPTED</term>
            <term>The message content has already been decrypted. This error can be returned if the dwCtrlType parameter is set to CMSG_CTRL_DECRYPT.</term>
            </item>
            <item>
            <term>CRYPT_E_AUTH_ATTR_MISSING</term>
            <term>
            The message does not contain an expected authenticated attribute. This error can be returned if the dwCtrlType parameter is set
            to CMSG_CTRL_VERIFY_SIGNATURE.
            </term>
            </item>
            <item>
            <term>CRYPT_E_BAD_ENCODE</term>
            <term>
            An error was encountered while encoding or decoding. This error can be returned if the dwCtrlType parameter is set to CMSG_CTRL_VERIFY_SIGNATURE.
            </term>
            </item>
            <item>
            <term>CRYPT_E_CONTROL_TYPE</term>
            <term>The control type is not valid.</term>
            </item>
            <item>
            <term>CRYPT_E_HASH_VALUE</term>
            <term>The hash value is incorrect.</term>
            </item>
            <item>
            <term>CRYPT_E_INVALID_INDEX</term>
            <term>The index value is not valid.</term>
            </item>
            <item>
            <term>CRYPT_E_INVALID_MSG_TYPE</term>
            <term>The message type is not valid.</term>
            </item>
            <item>
            <term>CRYPT_E_OID_FORMAT</term>
            <term>The object identifier is badly formatted. This error can be returned if the dwCtrlType parameter is set to CMSG_CTRL_ADD_SIGNER.</term>
            </item>
            <item>
            <term>CRYPT_E_RECIPIENT_NOT_FOUND</term>
            <term>
            The enveloped data message does not contain the specified recipient. This error can be returned if the dwCtrlType parameter is
            set to CMSG_CTRL_DECRYPT.
            </term>
            </item>
            <item>
            <term>CRYPT_E_SIGNER_NOT_FOUND</term>
            <term>The specified signer for the message was not found. This error can be returned if the dwCtrlType parameter is set to CMSG_CTRL_VERIFY_SIGNATURE.</term>
            </item>
            <item>
            <term>CRYPT_E_UNKNOWN_ALGO</term>
            <term>The cryptographic algorithm is unknown.</term>
            </item>
            <item>
            <term>CRYPT_E_UNEXPECTED_ENCODING</term>
            <term>The message is not encoded as expected. This error can be returned if the dwCtrlType parameter is set to CMSG_CTRL_VERIFY_SIGNATURE.</term>
            </item>
            <item>
            <term>E_INVALIDARG</term>
            <term>One or more arguments are not valid. This error can be returned if the dwCtrlType parameter is set to CMSG_CTRL_DECRYPT.</term>
            </item>
            <item>
            <term>E_OUTOFMEMORY</term>
            <term>Not enough memory was available to complete the operation.</term>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptMsgCountersign(Vanara.PInvoke.Crypt32.HCRYPTMSG,System.UInt32,System.UInt32,Vanara.PInvoke.Crypt32.CMSG_SIGNER_ENCODE_INFO[])">
            <summary>
            The <c>CryptMsgCountersign</c> function countersigns an existing signature in a message. Countersignatures are used to sign an
            existing signature's encrypted hash of the message. Countersignatures can be used for various purposes including time stamping a message.
            </summary>
            <param name="hCryptMsg">Cryptographic message handle to be used.</param>
            <param name="dwIndex">Zero-based index of the signer in the signed or signed-and-enveloped message to be countersigned.</param>
            <param name="cCountersigners">Number of countersigners in the rgCountersigners array.</param>
            <param name="rgCountersigners">Array of countersigners' CMSG_SIGNER_ENCODE_INFO structures.</param>
            <returns>
            <para>If the function succeeds, the function returns nonzero ( <c>TRUE</c>).</para>
            <para>If the function fails, it returns zero ( <c>FALSE</c>). For extended error information, call GetLastError.</para>
            <para>An error can be propagated from CryptMsgCountersignEncoded.</para>
            <para>The following error codes are returned most often.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>E_INVALIDARG</term>
            <term>One or more arguments are not valid.</term>
            </item>
            <item>
            <term>E_OUTOFMEMORY</term>
            <term>Ran out of memory.</term>
            </item>
            <item>
            <term>ERROR_MORE_DATA</term>
            <term>The specified area is not large enough to hold the returned data.</term>
            </item>
            </list>
            <para>
            If the function fails, GetLastError may return an Abstract Syntax Notation One (ASN.1) encoding/decoding error. For information
            about these errors, see ASN.1 Encoding/Decoding Return Values.
            </para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptMsgCountersignEncoded(Vanara.PInvoke.Crypt32.CertEncodingType,System.IntPtr,System.UInt32,System.UInt32,Vanara.PInvoke.Crypt32.CMSG_SIGNER_ENCODE_INFO[],System.IntPtr,System.UInt32@)">
            <summary>
            The <c>CryptMsgCountersignEncoded</c> function countersigns an existing PKCS #7 message signature. The pbCountersignature
            <c>BYTE</c> buffer it creates is a PKCS #7 encoded SignerInfo that can be used as an unauthenticated Countersignature attribute
            of a PKCS #9 signed-data or signed-and-enveloped-data message.
            </summary>
            <param name="dwEncodingType">
            <para>
            Specifies the encoding type used. Currently, only X509_ASN_ENCODING and PKCS_7_ASN_ENCODING are being used; however, additional
            encoding types may be added in the future. For either current encoding type, use:
            </para>
            <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING.</para>
            </param>
            <param name="pbSignerInfo">A pointer to the encoded SignerInfo that is to be countersigned.</param>
            <param name="cbSignerInfo">Count, in bytes, of the encoded SignerInfo data.</param>
            <param name="cCountersigners">Number of countersigners in the rgCountersigners array.</param>
            <param name="rgCountersigners">Array of countersigners' CMSG_SIGNER_ENCODE_INFO structures.</param>
            <param name="pbCountersignature">
            <para>A pointer to a buffer to receive an encoded PKCS #9 countersignature attribute.</para>
            <para>
            On input, this parameter can be <c>NULL</c> to set the size of this information for memory allocation purposes. For more
            information, see Retrieving Data of Unknown Length.
            </para>
            </param>
            <param name="pcbCountersignature">
            A pointer to a variable that specifies the size, in bytes, of the buffer pointed to by the pbCountersignature parameter. When
            the function returns, the variable pointed to by the pcbCountersignature parameter contains the number of bytes stored in the buffer.
            </param>
            <returns>
            <para>If the function succeeds, the return value is nonzero ( <c>TRUE</c>).</para>
            <para>If the function fails, the return value is zero ( <c>FALSE</c>). For extended error information, call GetLastError.</para>
            <para>The following table lists the error codes most commonly returned by the GetLastError function.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>CRYPT_E_OID_FORMAT</term>
            <term>The object identifier is badly formatted.</term>
            </item>
            <item>
            <term>E_INVALIDARG</term>
            <term>One or more arguments are not valid.</term>
            </item>
            <item>
            <term>E_OUTOFMEMORY</term>
            <term>Ran out of memory.</term>
            </item>
            </list>
            <para>Propagated errors might be returned from one of the following functions:</para>
            <list type="bullet">
            <item>
            <term>CryptCreateHash</term>
            </item>
            <item>
            <term>CryptHashData</term>
            </item>
            <item>
            <term>CryptGetHashParam</term>
            </item>
            <item>
            <term>CryptSignHash</term>
            </item>
            <item>
            <term>CryptMsgOpenToEncode</term>
            </item>
            <item>
            <term>CryptMsgUpdate</term>
            </item>
            <item>
            <term>CryptMsgControl</term>
            </item>
            </list>
            <para>
            If the function fails, GetLastError may return an Abstract Syntax Notation One (ASN.1) encoding/decoding error. For information
            about these errors, see ASN.1 Encoding/Decoding Return Values.
            </para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptMsgDuplicate(Vanara.PInvoke.Crypt32.HCRYPTMSG)">
            <summary>The <c>CryptMsgDuplicate</c> function duplicates a cryptographic message handle by incrementing its reference count.</summary>
            <param name="hCryptMsg">
            Handle of the cryptographic message to be duplicated. Duplication is done by incrementing the reference count of the message. A
            copy of the message is not made.
            </param>
            <returns>
            The returned handle is the same as the handle input. A copy of the message is not created. When you have finished using the
            duplicated message handle, decrease the reference count by calling the CryptMsgClose function.
            </returns>
            <remarks>
            <para>
            <c>CryptMsgDuplicate</c> is used to increase the reference count on an <c>HCRYPTMSG</c> handle so that multiple calls to
            CryptMsgClose are required to actually release the handle.
            </para>
            <para>Examples</para>
            <para>For an example that uses this function, see Example C Program: Encoding and Decoding a Hashed Message.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptMsgGetParam(Vanara.PInvoke.Crypt32.HCRYPTMSG,Vanara.PInvoke.Crypt32.CryptMsgParamType,System.UInt32,System.IntPtr,System.UInt32@)">
            <summary>
            The <c>CryptMsgGetParam</c> function acquires a message parameter after a cryptographic message has been encoded or decoded.
            This function is called after the final CryptMsgUpdate call.
            </summary>
            <param name="hCryptMsg">Handle of a cryptographic message.</param>
            <param name="dwParamType">
            <para>
            Indicates the parameter types of data to be retrieved. The type of data to be retrieved determines the type of structure to use
            for pvData.
            </para>
            <para>
            For an encoded message, only the CMSG_BARE_CONTENT, CMSG_ENCODE_SIGNER, CMSG_CONTENT_PARAM and CMSG_COMPUTED_HASH_PARAM
            dwParamTypes are valid.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CMSG_ATTR_CERT_COUNT_PARAM</term>
            <term>pvData data type: pointer to a DWORD Returns the count of the attribute certificates in a SIGNED or ENVELOPED message.</term>
            </item>
            <item>
            <term>CMSG_ATTR_CERT_PARAM</term>
            <term>
            pvData data type: pointer to a BYTE array Retrieves an attribute certificate. To get all the attribute certificates, call
            CryptMsgGetParam varying dwIndex set to 0 the number of attributes minus one.
            </term>
            </item>
            <item>
            <term>CMSG_BARE_CONTENT_PARAM</term>
            <term>
            pvData data type: pointer to a BYTE array Retrieves the encoded content of an encoded cryptographic message, without the outer
            layer of the CONTENT_INFO structure. That is, only the encoding of the PKCS #7 defined ContentInfo.content field is returned.
            </term>
            </item>
            <item>
            <term>CMSG_CERT_COUNT_PARAM</term>
            <term>pvData data type: pointer to DWORD Returns the number of certificates in a received SIGNED or ENVELOPED message.</term>
            </item>
            <item>
            <term>CMSG_CERT_PARAM</term>
            <term>
            pvData data type: pointer to a BYTE array Returns a signer's certificate. To get all of the signer's certificates, call
            CryptMsgGetParam, varying dwIndex from 0 to the number of available certificates minus one.
            </term>
            </item>
            <item>
            <term>CMSG_COMPUTED_HASH_PARAM</term>
            <term>
            pvData data type: pointer to a BYTE array Returns the hash calculated of the data in the message. This type is applicable to
            both encode and decode.
            </term>
            </item>
            <item>
            <term>CMSG_CONTENT_PARAM</term>
            <term>
            pvData data type: pointer to a BYTE array Returns the whole PKCS #7 message from a message opened to encode. Retrieves the inner
            content of a message opened to decode. If the message is enveloped, the inner type is data, and CryptMsgControl has been called
            to decrypt the message, the decrypted content is returned. If the inner type is not data, the encoded BLOB that requires further
            decoding is returned. If the message is not enveloped and the inner content is DATA, the returned data is the octets of the
            inner content. This type is applicable to both encode and decode. For decoding, if the type is CMSG_DATA, the content's octets
            are returned; else, the encoded inner content is returned.
            </term>
            </item>
            <item>
            <term>CMSG_CRL_COUNT_PARAM</term>
            <term>pvData data type: pointer to DWORD Returns the count of CRLs in a received, SIGNED or ENVELOPED message.</term>
            </item>
            <item>
            <term>CMSG_CRL_PARAM</term>
            <term>
            pvData data type: pointer to a BYTE array Returns a CRL. To get all the CRLs, call CryptMsgGetParam, varying dwIndex from 0 to
            the number of available CRLs minus one.
            </term>
            </item>
            <item>
            <term>CMSG_ENCODED_MESSAGE</term>
            <term>
            pvData data type: pointer to a BYTE array Changes the contents of an already encoded message. The message must first be decoded
            with a call to CryptMsgOpenToDecode. Then the change to the message is made through a call to CryptMsgControl,
            CryptMsgCountersign, or CryptMsgCountersignEncoded. The message is then encoded again with a call to CryptMsgGetParam,
            specifying CMSG_ENCODED_MESSAGE to get a new encoding that reflects the changes made. This can be used, for instance, to add a
            time-stamp attribute to a message.
            </term>
            </item>
            <item>
            <term>CMSG_ENCODED_SIGNER</term>
            <term>pvData data type: pointer to a BYTE array Returns the encoded CMSG_SIGNER_INFO signer information for a message signer.</term>
            </item>
            <item>
            <term>CMSG_ENCRYPTED_DIGEST</term>
            <term>pvData data type: pointer to a BYTE array Returns the encrypted hash of a signature. Typically used for performing time-stamping.</term>
            </item>
            <item>
            <term>CMSG_ENCRYPT_PARAM</term>
            <term>
            pvData data type: pointer to a BYTE array for a CRYPT_ALGORITHM_IDENTIFIER structure. Returns the encryption algorithm used to
            encrypted the message.
            </term>
            </item>
            <item>
            <term>CMSG_ENVELOPE_ALGORITHM_PARAM</term>
            <term>
            pvData data type: pointer to a BYTE array for a CRYPT_ALGORITHM_IDENTIFIER structure. Returns the encryption algorithm used to
            encrypt an ENVELOPED message.
            </term>
            </item>
            <item>
            <term>CMSG_HASH_ALGORITHM_PARAM</term>
            <term>
            pvData data type: pointer to a BYTE array for a CRYPT_ALGORITHM_IDENTIFIER structure. Returns the hash algorithm used to hash
            the message when it was created.
            </term>
            </item>
            <item>
            <term>CMSG_HASH_DATA_PARAM</term>
            <term>pvData data type: pointer to a BYTE array Returns the hash value stored in the message when it was created.</term>
            </item>
            <item>
            <term>CMSG_INNER_CONTENT_TYPE_PARAM</term>
            <term>
            pvData data type: pointer to a BYTE array to receive a null-terminated object identifier (OID) string. Returns the inner content
            type of a received message. This type is not applicable to messages of type DATA.
            </term>
            </item>
            <item>
            <term>CMSG_RECIPIENT_COUNT_PARAM</term>
            <term>pvData data type: pointer to a DWORD Returns the number of key transport recipients of an ENVELOPED received message.</term>
            </item>
            <item>
            <term>CMSG_CMS_RECIPIENT_COUNT_PARAM</term>
            <term>
            pvData data type: pointer to DWORD Returns the total count of all message recipients including key agreement and mail list recipients.
            </term>
            </item>
            <item>
            <term>CMSG_RECIPIENT_INDEX_PARAM</term>
            <term>
            pvData data type: pointer to a DWORD Returns the index of the key transport recipient used to decrypt an ENVELOPED message. This
            value is available only after a message has been decrypted.
            </term>
            </item>
            <item>
            <term>CMSG_CMS_RECIPIENT_INDEX_PARAM</term>
            <term>
            pvData data type: pointer to a DWORD Returns the index of the key transport, key agreement, or mail list recipient used to
            decrypt an ENVELOPED message.
            </term>
            </item>
            <item>
            <term>CMSG_CMS_RECIPIENT_ENCRYPTED_KEY_INDEX_PARAM</term>
            <term>
            pvData data type: pointer to a DWORD Returns the index of the encrypted key of a key agreement recipient used to decrypt an
            ENVELOPED message.
            </term>
            </item>
            <item>
            <term>CMSG_RECIPIENT_INFO_PARAM</term>
            <term>
            pvData data type: pointer to a BYTE array to receive a CERT_INFO structure. Returns certificate information about a key
            transport message's recipient. To get certificate information on all key transport message's recipients, repetitively call
            CryptMsgGetParam, varying dwIndex from 0 to the number of recipients minus one. Only the Issuer, SerialNumber, and
            PublicKeyAlgorithm members of the CERT_INFO structure returned are available and valid.
            </term>
            </item>
            <item>
            <term>CMSG_CMS_RECIPIENT_INFO_PARAM</term>
            <term>
            pvData data type: pointer to a BYTE array to receive a CMSG_CMS_RECIPIENT_INFO structure. Returns information about a key
            transport, key agreement, or mail list recipient. It is not limited to key transport message recipients. To get information on
            all of a message's recipients, repetitively call CryptMsgGetParam, varying dwIndex from 0 to the number of recipients minus one.
            </term>
            </item>
            <item>
            <term>CMSG_SIGNER_AUTH_ATTR_PARAM</term>
            <term>
            pvData data type: pointer to a BYTE array to receive a CRYPT_ATTRIBUTES structure. Returns the authenticated attributes of a
            message signer. To retrieve the authenticated attributes for a specified signer, call CryptMsgGetParam with dwIndex equal to
            that signer's index.
            </term>
            </item>
            <item>
            <term>CMSG_SIGNER_CERT_INFO_PARAM</term>
            <term>
            pvData data type: pointer to a BYTE array to receive the CERT_INFO structure. Returns information on a message signer needed to
            identify the signer's certificate. A certificate's Issuer and SerialNumber can be used to uniquely identify a certificate for
            retrieval. To retrieve information for all the signers, repetitively call CryptMsgGetParam varying dwIndex from 0 to the number
            of signers minus one. Only the Issuer and SerialNumber fields in the CERT_INFO structure returned contain available, valid data.
            </term>
            </item>
            <item>
            <term>CMSG_SIGNER_CERT_ID_PARAM</term>
            <term>
            pvData data type: pointer to a BYTE array to receive a CERT_ID structure. Returns information on a message signer needed to
            identify the signer's public key. This could be a certificate's Issuer and SerialNumber, a KeyID, or a HashId. To retrieve
            information for all the signers, call CryptMsgGetParam varying dwIndex from 0 to the number of signers minus one.
            </term>
            </item>
            <item>
            <term>CMSG_SIGNER_COUNT_PARAM</term>
            <term>pvData data type: pointer to a DWORD Returns the number of signers of a received SIGNED message.</term>
            </item>
            <item>
            <term>CMSG_SIGNER_HASH_ALGORITHM_PARAM</term>
            <term>
            pvData data type: pointer to a BYTE array to receive the CRYPT_ALGORITHM_IDENTIFIER structure. Returns the hash algorithm used
            by a signer of the message. To get the hash algorithm for a specified signer, call CryptMsgGetParam with dwIndex equal to that
            signer's index.
            </term>
            </item>
            <item>
            <term>CMSG_SIGNER_INFO_PARAM</term>
            <term>
            pvData data type: pointer to a BYTE array to receive a CMSG_SIGNER_INFO structure. Returns information on a message signer. This
            includes the issuer and serial number of the signer's certificate and authenticated and unauthenticated attributes of the
            signer's certificate. To retrieve signer information on all of the signers of a message, call CryptMsgGetParam varying dwIndex
            from 0 to the number of signers minus one.
            </term>
            </item>
            <item>
            <term>CMSG_CMS_SIGNER_INFO_PARAM</term>
            <term>
            pvData data type: pointer to a BYTE array to receive a CMSG_CMS_SIGNER_INFO structure. Returns information on a message signer.
            This includes a signerId and authenticated and unauthenticated attributes. To retrieve signer information on all of the signers
            of a message, call CryptMsgGetParam varying dwIndex from 0 to the number of signers minus one.
            </term>
            </item>
            <item>
            <term>CMSG_SIGNER_UNAUTH_ATTR_PARAM</term>
            <term>
            pvData data type: pointer to a BYTE array to receive a CRYPT_ATTRIBUTES structure. Returns a message signer's unauthenticated
            attributes. To retrieve the unauthenticated attributes for a specified signer, call CryptMsgGetParam with dwIndex equal to that
            signer's index.
            </term>
            </item>
            <item>
            <term>CMSG_TYPE_PARAM</term>
            <term>
            pvData data type: pointer to a DWORD Returns the message type of a decoded message of unknown type. The retrieved message type
            can be compared to supported types to determine whether processing can continued. For supported message types, see the
            dwMessageType parameter of CryptMsgOpenToDecode.
            </term>
            </item>
            <item>
            <term>CMSG_UNPROTECTED_ATTR_PARAM</term>
            <term>
            pvData data type: pointer to a BYTE array to receive a CMSG_ATTR structure. Returns the unprotected attributes in an enveloped message.
            </term>
            </item>
            <item>
            <term>CMSG_VERSION_PARAM</term>
            <term>
            pvData data type: pointer to a DWORD Returns the version of the decoded message. For more information, see the table in the
            Remarks section.
            </term>
            </item>
            </list>
            </param>
            <param name="dwIndex">
            Index for the parameter being retrieved, where applicable. When a parameter is not being retrieved, this parameter is ignored
            and is set to zero.
            </param>
            <param name="pvData">
            <para>
            A pointer to a buffer that receives the data retrieved. The form of this data will vary depending on the value of the
            dwParamType parameter.
            </para>
            <para>
            This parameter can be <c>NULL</c> to set the size of this information for memory allocation purposes. For more information, see
            Retrieving Data of Unknown Length.
            </para>
            <para>
            When processing the data returned in this buffer, applications need to use the actual size of the data returned. The actual size
            can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large
            enough to ensure that the largest possible output data will fit in the buffer.) On output, the variable pointed to by this
            parameter is updated to reflect the actual size of the data copied to the buffer.
            </para>
            </param>
            <param name="pcbData">
            A pointer to a variable that specifies the size, in bytes, of the buffer pointed to by the pvData parameter. When the function
            returns, the variable pointed to by the pcbData parameter contains the number of bytes stored in the buffer.
            </param>
            <returns>
            <para>If the function succeeds, the return value is nonzero (TRUE).</para>
            <para>If the function fails, the return value is zero (FALSE). For extended error information, call GetLastError.</para>
            <para>The following table lists the error codes most commonly returned by the GetLastError function.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>CRYPT_E_ATTRIBUTES_MISSING</term>
            <term>The message does not contain the requested attributes.</term>
            </item>
            <item>
            <term>CRYPT_E_INVALID_INDEX</term>
            <term>The index value is not valid.</term>
            </item>
            <item>
            <term>CRYPT_E_INVALID_MSG_TYPE</term>
            <term>The message type is not valid.</term>
            </item>
            <item>
            <term>CRYPT_E_NOT_DECRYPTED</term>
            <term>The message content has not been decrypted yet.</term>
            </item>
            <item>
            <term>CRYPT_E_OID_FORMAT</term>
            <term>The object identifier is badly formatted.</term>
            </item>
            <item>
            <term>CRYPT_E_UNEXPECTED_ENCODING</term>
            <term>The message is not encoded as expected.</term>
            </item>
            <item>
            <term>E_INVALIDARG</term>
            <term>One or more arguments are not valid.</term>
            </item>
            <item>
            <term>ERROR_MORE_DATA</term>
            <term>The specified buffer is not large enough to hold the returned data.</term>
            </item>
            </list>
            <para>For dwParamType CMSG_COMPUTED_HASH_PARAM, an error can be propagated from CryptGetHashParam.</para>
            <para>
            If the function fails, GetLastError may return an Abstract Syntax Notation One (ASN.1) encoding/decoding error. For information
            about these errors, see ASN.1 Encoding/Decoding Return Values.
            </para>
            </returns>
            <remarks>
            <para>
            The following version numbers are returned by calls to <c>CryptMsgGetParam</c> with dwParamType set to CMSG_VERSION_PARAM are defined:
            </para>
            <list type="bullet">
            <item>
            <term>CMSG_SIGNED_DATA_V1</term>
            </item>
            <item>
            <term>CMSG_SIGNED_DATA_V3</term>
            </item>
            <item>
            <term>CMSG_SIGNED_DATA_PKCS_1_5_VERSION</term>
            </item>
            <item>
            <term>CMSG_SIGNED_DATA_CMS_VERSION</term>
            </item>
            <item>
            <term>CMSG_SIGNER_INFO_V1</term>
            </item>
            <item>
            <term>CMSG_SIGNER_INFO_V3</term>
            </item>
            <item>
            <term>CMSG_SIGNER_INFO_PKCS_1_5_VERSION</term>
            </item>
            <item>
            <term>CMSG_SIGNER_INFO_CMS_VERSION</term>
            </item>
            <item>
            <term>CMSG_HASHED_DATA_V0</term>
            </item>
            <item>
            <term>CMSG_HASHED_DATA_V2</term>
            </item>
            <item>
            <term>CMSG_HASHED_DATA_PKCS_1_5_VERSION</term>
            </item>
            <item>
            <term>CMSG_HASHED_DATA_CMS_VERSION</term>
            </item>
            <item>
            <term>CMSG_ENVELOPED_DATA_V0</term>
            </item>
            <item>
            <term>CMSG_ENVELOPED_DATA_V2</term>
            </item>
            <item>
            <term>CMSG_ENVELOPED_DATA_PKCS_1_5_VERSION</term>
            </item>
            <item>
            <term>CMSG_ENVELOPED_DATA_CMS_VERSION</term>
            </item>
            </list>
            <para>Examples</para>
            <para>
            For an example that uses this function, see Example C Program: Signing, Encoding, Decoding, and Verifying a Message, Alternate
            Code for Encoding an Enveloped Message, Example C Program: Encoding an Enveloped, Signed Message, and Example C Program:
            Encoding and Decoding a Hashed Message.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptMsgOpenToDecode(Vanara.PInvoke.Crypt32.CertEncodingType,Vanara.PInvoke.Crypt32.CryptMsgFlags,Vanara.PInvoke.Crypt32.CryptMsgType,Vanara.PInvoke.Crypt32.HCRYPTPROV,System.IntPtr,Vanara.PInvoke.Crypt32.CMSG_STREAM_INFO@)">
            <summary>
            <para>
            The <c>CryptMsgOpenToDecode</c> function opens a cryptographic message for decoding and returns a handle of the opened message.
            The message remains open until the CryptMsgClose function is called.
            </para>
            <para>
            Important changes that affect the handling of enveloped messages have been made to CryptoAPI to support Secure/Multipurpose
            Internet Mail Extensions (S/MIME) email interoperability. For details, see the Remarks section of CryptMsgOpenToEncode.
            </para>
            </summary>
            <param name="dwMsgEncodingType">
            <para>
            Specifies the encoding type used. It is always acceptable to specify both the certificate and message encoding types by
            combining them with a bitwise- <c>OR</c> operation as shown in the following example:
            </para>
            <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING</para>
            <para>Currently defined encoding types are:</para>
            <list type="bullet">
            <item>
            <term>X509_ASN_ENCODING</term>
            </item>
            <item>
            <term>PKCS_7_ASN_ENCODING</term>
            </item>
            </list>
            </param>
            <param name="dwFlags">
            <para>This parameter can be one of the following flags.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CMSG_DETACHED_FLAG</term>
            <term>Indicates that the message to be decoded is detached. If this flag is not set, the message is not detached.</term>
            </item>
            <item>
            <term>CMSG_CRYPT_RELEASE_CONTEXT_FLAG</term>
            <term>
            If set, the hCryptProv passed to this function is released on the final CryptMsgUpdate. The handle is not released if the
            function fails.
            </term>
            </item>
            </list>
            </param>
            <param name="dwMsgType">
            <para>
            Specifies the type of message to decode. In most cases, the message type is determined from the message header and zero is
            passed for this parameter. In some cases, notably with Internet Explorer 3.0, messages do not have headers and the type of
            message to be decoded must be supplied in this function call. If the header is missing and zero is passed for this parameter,
            the function fails.
            </para>
            <para>This parameter can be one of the following predefined message types.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CMSG_DATA</term>
            <term>The message is encoded data.</term>
            </item>
            <item>
            <term>CMSG_ENVELOPED</term>
            <term>The message is an enveloped message.</term>
            </item>
            <item>
            <term>CMSG_HASHED</term>
            <term>The message is a hashed message.</term>
            </item>
            <item>
            <term>CMSG_SIGNED</term>
            <term>The message is a signed message.</term>
            </item>
            <item>
            <term>CMSG_SIGNED_AND_ENVELOPED</term>
            <term>The message is a signed and enveloped message.</term>
            </item>
            </list>
            </param>
            <param name="hCryptProv">
            <para>This parameter is not used and should be set to <c>NULL</c>.</para>
            <para>
            <c>Windows Server 2003 and Windows XP:</c> Specifies a handle for the cryptographic provider to use for hashing the message. For
            signed messages, hCryptProv is used for signature verification.This parameter's data type is <c>HCRYPTPROV</c>.
            </para>
            <para>
            Unless there is a strong reason for passing in a specific cryptographic provider in hCryptProv, set this parameter to
            <c>NULL</c>. Passing in <c>NULL</c> causes the default RSA or DSS provider to be acquired before performing hash, signature
            verification, or recipient encryption operations.
            </para>
            </param>
            <param name="pRecipientInfo">This parameter is reserved for future use and must be <c>NULL</c>.</param>
            <param name="pStreamInfo">
            <para>When streaming is not being used, this parameter must be set to <c>NULL</c>.</para>
            <para>
            <c>Note</c> Streaming is not used with CMSG_HASHED messages. When dealing with hashed data, this parameter must be set to <c>NULL</c>.
            </para>
            <para>
            When streaming is being used, the pStreamInfo parameter is a pointer to a CMSG_STREAM_INFO structure that contains a pointer to
            a callback to be called when CryptMsgUpdate is executed or when CryptMsgControl is executed when decoding a streamed enveloped message.
            </para>
            <para>For a signed message, the callback is passed a block of the decoded bytes from the inner content of the message.</para>
            <para>
            For an enveloped message, after each call to CryptMsgUpdate, you must check to determine whether the
            CMSG_ENVELOPE_ALGORITHM_PARAM property is available by calling the CryptMsgGetParam function. <c>CryptMsgGetParam</c> will fail
            and GetLastError will return CRYPT_E_STREAM_MSG_NOT_READY until <c>CryptMsgUpdate</c> has processed enough of the message to
            make the CMSG_ENVELOPE_ALGORITHM_PARAM property available. When the CMSG_ENVELOPE_ALGORITHM_PARAM property is available, you can
            iterate through the recipients, retrieving a CERT_INFO structure for each recipient by using the <c>CryptMsgGetParam</c>
            function to retrieve the CMSG_RECIPIENT_INFO_PARAM property. To prevent a denial of service attack from an enveloped message
            that has an artificially large header block, you must keep track of the amount of memory that has been passed to the
            <c>CryptMsgUpdate</c> function during this process. If the amount of data exceeds an application defined limit before the
            CMSG_ENVELOPE_ALGORITHM_PARAM property is available, you must stop processing the message and call the CryptMsgClose function to
            cause the operating system to release any memory that has been allocated for the message. A suggested limit is the maximum
            allowable size of a message. For example, if the maximum message size is 10 MB, the limit for this test should be 10 MB.
            </para>
            <para>
            The CERT_INFO structure is used to find a matching certificate in a previously opened certificate store by using the
            CertGetSubjectCertificateFromStore function. When the correct certificate is found, the CertGetCertificateContextProperty
            function with a CERT_KEY_PROV_INFO_PROP_ID parameter is called to retrieve a CRYPT_KEY_PROV_INFO structure. The structure
            contains the information necessary to acquire the recipient's private key by calling CryptAcquireContext, using the
            <c>pwszContainerName</c>, <c>pwszProvName</c>, <c>dwProvType</c>, and <c>dwFlags</c> members of the <c>CRYPT_KEY_PROV_INFO</c>
            structure. The <c>hCryptProv</c> acquired and the <c>dwKeySpec</c> member of the <c>CRYPT_KEY_PROV_INFO</c> structure are passed
            to the CryptMsgControl structure as a member of the CMSG_CTRL_DECRYPT_PARA structure to permit the start of the decryption of
            the inner content. The streaming code will then perform the decryption as the data is input. The resulting blocks of plaintext
            are passed to the callback function specified by the <c>pfnStreamOutput</c> member of the CMSG_STREAM_INFO structure to handle
            the output of the decrypted message.
            </para>
            <para>
            <c>Note</c> Streamed decoding of an enveloped message queues the ciphertext in memory until CryptMsgControl is called to start
            the decryption. The application must initiate decrypting in a timely manner so that the data can be saved to disk or routed
            elsewhere before the accumulated ciphertext becomes too large and the system runs out of memory.
            </para>
            <para>
            In the case of a signed message enclosed in an enveloped message, the plaintext output from the streaming decode of the
            enveloped message can be fed into another streaming decode to process the signed message.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the function returns the handle of the opened message.</para>
            <para>If the function fails, it returns <c>NULL</c>. For extended error information, call GetLastError.</para>
            <para>The following table lists the error codes most commonly returned by the GetLastError function.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>E_INVALIDARG</term>
            <term>One or more arguments are not valid.</term>
            </item>
            <item>
            <term>E_OUTOFMEMORY</term>
            <term>A memory allocation failure occurred.</term>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptMsgOpenToDecode(Vanara.PInvoke.Crypt32.CertEncodingType,Vanara.PInvoke.Crypt32.CryptMsgFlags,Vanara.PInvoke.Crypt32.CryptMsgType,Vanara.PInvoke.Crypt32.HCRYPTPROV,System.IntPtr,System.IntPtr)">
            <summary>
            <para>
            The <c>CryptMsgOpenToDecode</c> function opens a cryptographic message for decoding and returns a handle of the opened message.
            The message remains open until the CryptMsgClose function is called.
            </para>
            <para>
            Important changes that affect the handling of enveloped messages have been made to CryptoAPI to support Secure/Multipurpose
            Internet Mail Extensions (S/MIME) email interoperability. For details, see the Remarks section of CryptMsgOpenToEncode.
            </para>
            </summary>
            <param name="dwMsgEncodingType">
            <para>
            Specifies the encoding type used. It is always acceptable to specify both the certificate and message encoding types by
            combining them with a bitwise- <c>OR</c> operation as shown in the following example:
            </para>
            <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING</para>
            <para>Currently defined encoding types are:</para>
            <list type="bullet">
            <item>
            <term>X509_ASN_ENCODING</term>
            </item>
            <item>
            <term>PKCS_7_ASN_ENCODING</term>
            </item>
            </list>
            </param>
            <param name="dwFlags">
            <para>This parameter can be one of the following flags.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CMSG_DETACHED_FLAG</term>
            <term>Indicates that the message to be decoded is detached. If this flag is not set, the message is not detached.</term>
            </item>
            <item>
            <term>CMSG_CRYPT_RELEASE_CONTEXT_FLAG</term>
            <term>
            If set, the hCryptProv passed to this function is released on the final CryptMsgUpdate. The handle is not released if the
            function fails.
            </term>
            </item>
            </list>
            </param>
            <param name="dwMsgType">
            <para>
            Specifies the type of message to decode. In most cases, the message type is determined from the message header and zero is
            passed for this parameter. In some cases, notably with Internet Explorer 3.0, messages do not have headers and the type of
            message to be decoded must be supplied in this function call. If the header is missing and zero is passed for this parameter,
            the function fails.
            </para>
            <para>This parameter can be one of the following predefined message types.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CMSG_DATA</term>
            <term>The message is encoded data.</term>
            </item>
            <item>
            <term>CMSG_ENVELOPED</term>
            <term>The message is an enveloped message.</term>
            </item>
            <item>
            <term>CMSG_HASHED</term>
            <term>The message is a hashed message.</term>
            </item>
            <item>
            <term>CMSG_SIGNED</term>
            <term>The message is a signed message.</term>
            </item>
            <item>
            <term>CMSG_SIGNED_AND_ENVELOPED</term>
            <term>The message is a signed and enveloped message.</term>
            </item>
            </list>
            </param>
            <param name="hCryptProv">
            <para>This parameter is not used and should be set to <c>NULL</c>.</para>
            <para>
            <c>Windows Server 2003 and Windows XP:</c> Specifies a handle for the cryptographic provider to use for hashing the message. For
            signed messages, hCryptProv is used for signature verification.This parameter's data type is <c>HCRYPTPROV</c>.
            </para>
            <para>
            Unless there is a strong reason for passing in a specific cryptographic provider in hCryptProv, set this parameter to
            <c>NULL</c>. Passing in <c>NULL</c> causes the default RSA or DSS provider to be acquired before performing hash, signature
            verification, or recipient encryption operations.
            </para>
            </param>
            <param name="pRecipientInfo">This parameter is reserved for future use and must be <c>NULL</c>.</param>
            <param name="pStreamInfo">
            <para>When streaming is not being used, this parameter must be set to <c>NULL</c>.</para>
            <para>
            <c>Note</c> Streaming is not used with CMSG_HASHED messages. When dealing with hashed data, this parameter must be set to <c>NULL</c>.
            </para>
            <para>
            When streaming is being used, the pStreamInfo parameter is a pointer to a CMSG_STREAM_INFO structure that contains a pointer to
            a callback to be called when CryptMsgUpdate is executed or when CryptMsgControl is executed when decoding a streamed enveloped message.
            </para>
            <para>For a signed message, the callback is passed a block of the decoded bytes from the inner content of the message.</para>
            <para>
            For an enveloped message, after each call to CryptMsgUpdate, you must check to determine whether the
            CMSG_ENVELOPE_ALGORITHM_PARAM property is available by calling the CryptMsgGetParam function. <c>CryptMsgGetParam</c> will fail
            and GetLastError will return CRYPT_E_STREAM_MSG_NOT_READY until <c>CryptMsgUpdate</c> has processed enough of the message to
            make the CMSG_ENVELOPE_ALGORITHM_PARAM property available. When the CMSG_ENVELOPE_ALGORITHM_PARAM property is available, you can
            iterate through the recipients, retrieving a CERT_INFO structure for each recipient by using the <c>CryptMsgGetParam</c>
            function to retrieve the CMSG_RECIPIENT_INFO_PARAM property. To prevent a denial of service attack from an enveloped message
            that has an artificially large header block, you must keep track of the amount of memory that has been passed to the
            <c>CryptMsgUpdate</c> function during this process. If the amount of data exceeds an application defined limit before the
            CMSG_ENVELOPE_ALGORITHM_PARAM property is available, you must stop processing the message and call the CryptMsgClose function to
            cause the operating system to release any memory that has been allocated for the message. A suggested limit is the maximum
            allowable size of a message. For example, if the maximum message size is 10 MB, the limit for this test should be 10 MB.
            </para>
            <para>
            The CERT_INFO structure is used to find a matching certificate in a previously opened certificate store by using the
            CertGetSubjectCertificateFromStore function. When the correct certificate is found, the CertGetCertificateContextProperty
            function with a CERT_KEY_PROV_INFO_PROP_ID parameter is called to retrieve a CRYPT_KEY_PROV_INFO structure. The structure
            contains the information necessary to acquire the recipient's private key by calling CryptAcquireContext, using the
            <c>pwszContainerName</c>, <c>pwszProvName</c>, <c>dwProvType</c>, and <c>dwFlags</c> members of the <c>CRYPT_KEY_PROV_INFO</c>
            structure. The <c>hCryptProv</c> acquired and the <c>dwKeySpec</c> member of the <c>CRYPT_KEY_PROV_INFO</c> structure are passed
            to the CryptMsgControl structure as a member of the CMSG_CTRL_DECRYPT_PARA structure to permit the start of the decryption of
            the inner content. The streaming code will then perform the decryption as the data is input. The resulting blocks of plaintext
            are passed to the callback function specified by the <c>pfnStreamOutput</c> member of the CMSG_STREAM_INFO structure to handle
            the output of the decrypted message.
            </para>
            <para>
            <c>Note</c> Streamed decoding of an enveloped message queues the ciphertext in memory until CryptMsgControl is called to start
            the decryption. The application must initiate decrypting in a timely manner so that the data can be saved to disk or routed
            elsewhere before the accumulated ciphertext becomes too large and the system runs out of memory.
            </para>
            <para>
            In the case of a signed message enclosed in an enveloped message, the plaintext output from the streaming decode of the
            enveloped message can be fed into another streaming decode to process the signed message.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the function returns the handle of the opened message.</para>
            <para>If the function fails, it returns <c>NULL</c>. For extended error information, call GetLastError.</para>
            <para>The following table lists the error codes most commonly returned by the GetLastError function.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>E_INVALIDARG</term>
            <term>One or more arguments are not valid.</term>
            </item>
            <item>
            <term>E_OUTOFMEMORY</term>
            <term>A memory allocation failure occurred.</term>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptMsgOpenToEncode(Vanara.PInvoke.Crypt32.CertEncodingType,Vanara.PInvoke.Crypt32.CryptMsgFlags,Vanara.PInvoke.Crypt32.CryptMsgType,System.IntPtr,Vanara.PInvoke.Crypt32.SafeOID,Vanara.PInvoke.Crypt32.CMSG_STREAM_INFO@)">
            <summary>
            The <c>CryptMsgOpenToEncode</c> function opens a cryptographic message for encoding and returns a handle of the opened message.
            The message remains open until CryptMsgClose is called.
            </summary>
            <param name="dwMsgEncodingType">
            <para>
            Specifies the encoding type used. It is always acceptable to specify both the certificate and message encoding types by
            combining them with a bitwise- <c>OR</c> operation as shown in the following example:
            </para>
            <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING</para>
            <para>Currently defined encoding types are:</para>
            <list type="bullet">
            <item>
            <term>X509_ASN_ENCODING</term>
            </item>
            <item>
            <term>PKCS_7_ASN_ENCODING</term>
            </item>
            </list>
            </param>
            <param name="dwFlags">
            <para>Currently defined dwFlags are shown in the following table.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CMSG_BARE_CONTENT_FLAG</term>
            <term>
            The streamed output will not have an outer ContentInfo wrapper (as defined by PKCS #7). This makes it suitable to be streamed
            into an enclosing message.
            </term>
            </item>
            <item>
            <term>CMSG_DETACHED_FLAG</term>
            <term>There is detached data being supplied for the subsequent calls to CryptMsgUpdate.</term>
            </item>
            <item>
            <term>CMSG_AUTHENTICATED_ATTRIBUTES_FLAG</term>
            <term>
            Authenticated attributes are forced to be included in the SignerInfo (as defined by PKCS #7) in cases where they would not
            otherwise be required.
            </term>
            </item>
            <item>
            <term>CMSG_CONTENTS_OCTETS_FLAG</term>
            <term>
            Used when calculating the size of a message that has been encoded by using Distinguished Encoding Rules (DER) and that is nested
            inside an enveloped message. This is particularly useful when performing streaming.
            </term>
            </item>
            <item>
            <term>CMSG_CMS_ENCAPSULATED_CONTENT_FLAG</term>
            <term>
            When set, non-data type-inner content is encapsulated within an OCTET STRING. Applicable to both signed and enveloped messages.
            </term>
            </item>
            <item>
            <term>CMSG_CRYPT_RELEASE_CONTEXT_FLAG</term>
            <term>
            If set, the hCryptProv that is passed to this function is released on the final CryptMsgUpdate. The handle is not released if
            the function fails.
            </term>
            </item>
            </list>
            </param>
            <param name="dwMsgType">
            <para>Indicates the message type. This must be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CMSG_DATA</term>
            <term>This value is not used.</term>
            </item>
            <item>
            <term>CMSG_SIGNED</term>
            <term>The pvMsgEncodeInfo parameter is the address of a CMSG_SIGNED_ENCODE_INFO structure that contains the encoding information.</term>
            </item>
            <item>
            <term>CMSG_ENVELOPED</term>
            <term>The pvMsgEncodeInfo parameter is the address of a CMSG_ENVELOPED_ENCODE_INFO structure that contains the encoding information.</term>
            </item>
            <item>
            <term>CMSG_SIGNED_AND_ENVELOPED</term>
            <term>This value is not currently implemented.</term>
            </item>
            <item>
            <term>CMSG_HASHED</term>
            <term>The pvMsgEncodeInfo parameter is the address of a CMSG_HASHED_ENCODE_INFO structure that contains the encoding information.</term>
            </item>
            </list>
            </param>
            <param name="pvMsgEncodeInfo">
            The address of a structure that contains the encoding information. The type of data depends on the value of the dwMsgType
            parameter. For details, see dwMsgType.
            </param>
            <param name="pszInnerContentObjID">
            <para>
            If CryptMsgCalculateEncodedLength is called and the data for CryptMsgUpdate has already been message encoded, the appropriate
            object identifier (OID) is passed in pszInnerContentObjID. If pszInnerContentObjID is <c>NULL</c>, then the inner content type
            is assumed not to have been previously encoded and is therefore encoded as an octet string and given the type CMSG_DATA.
            </para>
            <para><c>Note</c> When streaming is being used, pszInnerContentObjID must be either <c>NULL</c> or szOID_RSA_data.</para>
            <para>
            The following algorithm OIDs are commonly used. A user can define new inner content usage by ensuring that the sender and
            receiver of the message agree upon the semantics associated with the OID.
            </para>
            <list type="bullet">
            <item>
            <term>szOID_RSA_data</term>
            </item>
            <item>
            <term>szOID_RSA_signedData</term>
            </item>
            <item>
            <term>szOID_RSA_envelopedData</term>
            </item>
            <item>
            <term>szOID_RSA_signEnvData</term>
            </item>
            <item>
            <term>szOID_RSA_digestedData</term>
            </item>
            <item>
            <term>szOID_RSA_encryptedData</term>
            </item>
            <item>
            <term>SPC_INDIRECT_DATA_OBJID</term>
            </item>
            </list>
            </param>
            <param name="pStreamInfo">
            <para>
            When streaming is being used, this parameter is the address of a CMSG_STREAM_INFO structure. The callback function specified by
            the <c>pfnStreamOutput</c> member of the <c>CMSG_STREAM_INFO</c> structure is called when CryptMsgUpdate is executed. The
            callback is passed the encoded bytes that result from the encoding. For more information about how to use the callback, see <c>CMSG_STREAM_INFO</c>.
            </para>
            <para>
            <c>Note</c> When streaming is being used, the application must not release any data handles that are passed in the
            pvMsgEncodeInfo parameter, such as the provider handle in the <c>hCryptProv</c> member of the CMSG_SIGNER_ENCODE_INFO structure,
            until after the message handle returned by this function is closed by using the CryptMsgClose function.
            </para>
            <para>When streaming is not being used, this parameter is set to</para>
            <para>NULL</para>
            <para>.</para>
            <para>
            Streaming is not used with the <c>CMSG_HASHED</c> message type. When dealing with hashed data, this parameter must be set to <c>NULL</c>.
            </para>
            <para>
            Consider the case of a signed message being enclosed in an enveloped message. The encoded output from the streamed encoding of
            the signed message feeds into another streaming encoding of the enveloped message. The callback for the streaming encoding calls
            CryptMsgUpdate to encode the enveloped message. The callback for the enveloped message receives the encoded bytes of the nested
            signed message.
            </para>
            </param>
            <returns>
            <para>
            If the function succeeds, it returns a handle to the opened message. This handle must be closed when it is no longer needed by
            passing it to the CryptMsgClose function.
            </para>
            <para>If this function fails, <c>NULL</c> is returned.</para>
            <para>To retrieve extended error information, use the GetLastError function.</para>
            <para>The following table lists the error codes most commonly returned by the GetLastError function.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>CRYPT_E_INVALID_MSG_TYPE</term>
            <term>The message type is not valid.</term>
            </item>
            <item>
            <term>CRYPT_E_OID_FORMAT</term>
            <term>The OID is badly formatted.</term>
            </item>
            <item>
            <term>CRYPT_E_UNKNOWN_ALGO</term>
            <term>The cryptographic algorithm is unknown.</term>
            </item>
            <item>
            <term>E_INVALIDARG</term>
            <term>One or more arguments are not valid.</term>
            </item>
            <item>
            <term>E_OUTOFMEMORY</term>
            <term>There is not enough memory.</term>
            </item>
            </list>
            <para>In addition, if dwMsgType is CMSG_SIGNED, errors can be propagated from CryptCreateHash.</para>
            <para>If dwMsgType is CMSG_ENVELOPED, errors can be propagated from CryptGenKey, CryptImportKey, and CryptExportKey.</para>
            <para>If dwMsgType is CMSG_HASHED, errors can be propagated from CryptCreateHash.</para>
            </returns>
            <remarks>
            <para>
            For functions that perform encryption, the encrypted symmetric keys are reversed from little-endian format to big-endian format
            after CryptExportKey is called internally. For functions that perform decryption, the encrypted symmetric keys are reversed from
            big-endian format to little-endian format before CryptImportKey is called.
            </para>
            <para>CRYPT_NO_SALT is specified when symmetric keys are generated and imported with CryptGenKey and CryptImportKey.</para>
            <para>
            Messages encrypted with the RC2 encryption algorithm use KP_EFFECTIVE_KEYLEN with CryptGetKeyParam to determine the effective
            key length of the RC2 key importing or exporting keys.
            </para>
            <para>
            For messages encrypted with the RC2 encryption algorithm, encode and decode operations have been updated to handle ASN RC2
            parameters for the <c>ContentEncryptionAlgorithm</c> member of the CMSG_ENVELOPED_ENCODE_INFO structure.
            </para>
            <para>
            For messages encrypted with the RC4, DES, and 3DES encryption algorithms, encode and decode operations now handle the ASN IV
            octet string parameter for the <c>ContentEncryptionAlgorithm</c> member of the CMSG_ENVELOPED_ENCODE_INFO structure.
            </para>
            <para>Examples</para>
            <para>
            For examples that use this function, see Example C Program: Signing, Encoding, Decoding, and Verifying a Message, Alternate Code
            for Encoding an Enveloped Message, Example C Program: Encoding an Enveloped, Signed Message, and Example C Program: Encoding and
            Decoding a Hashed Message.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptMsgOpenToEncode(Vanara.PInvoke.Crypt32.CertEncodingType,Vanara.PInvoke.Crypt32.CryptMsgFlags,Vanara.PInvoke.Crypt32.CryptMsgType,System.IntPtr,Vanara.PInvoke.Crypt32.SafeOID,System.IntPtr)">
            <summary>
            The <c>CryptMsgOpenToEncode</c> function opens a cryptographic message for encoding and returns a handle of the opened message.
            The message remains open until CryptMsgClose is called.
            </summary>
            <param name="dwMsgEncodingType">
            <para>
            Specifies the encoding type used. It is always acceptable to specify both the certificate and message encoding types by
            combining them with a bitwise- <c>OR</c> operation as shown in the following example:
            </para>
            <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING</para>
            <para>Currently defined encoding types are:</para>
            <list type="bullet">
            <item>
            <term>X509_ASN_ENCODING</term>
            </item>
            <item>
            <term>PKCS_7_ASN_ENCODING</term>
            </item>
            </list>
            </param>
            <param name="dwFlags">
            <para>Currently defined dwFlags are shown in the following table.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CMSG_BARE_CONTENT_FLAG</term>
            <term>
            The streamed output will not have an outer ContentInfo wrapper (as defined by PKCS #7). This makes it suitable to be streamed
            into an enclosing message.
            </term>
            </item>
            <item>
            <term>CMSG_DETACHED_FLAG</term>
            <term>There is detached data being supplied for the subsequent calls to CryptMsgUpdate.</term>
            </item>
            <item>
            <term>CMSG_AUTHENTICATED_ATTRIBUTES_FLAG</term>
            <term>
            Authenticated attributes are forced to be included in the SignerInfo (as defined by PKCS #7) in cases where they would not
            otherwise be required.
            </term>
            </item>
            <item>
            <term>CMSG_CONTENTS_OCTETS_FLAG</term>
            <term>
            Used when calculating the size of a message that has been encoded by using Distinguished Encoding Rules (DER) and that is nested
            inside an enveloped message. This is particularly useful when performing streaming.
            </term>
            </item>
            <item>
            <term>CMSG_CMS_ENCAPSULATED_CONTENT_FLAG</term>
            <term>
            When set, non-data type-inner content is encapsulated within an OCTET STRING. Applicable to both signed and enveloped messages.
            </term>
            </item>
            <item>
            <term>CMSG_CRYPT_RELEASE_CONTEXT_FLAG</term>
            <term>
            If set, the hCryptProv that is passed to this function is released on the final CryptMsgUpdate. The handle is not released if
            the function fails.
            </term>
            </item>
            </list>
            </param>
            <param name="dwMsgType">
            <para>Indicates the message type. This must be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CMSG_DATA</term>
            <term>This value is not used.</term>
            </item>
            <item>
            <term>CMSG_SIGNED</term>
            <term>The pvMsgEncodeInfo parameter is the address of a CMSG_SIGNED_ENCODE_INFO structure that contains the encoding information.</term>
            </item>
            <item>
            <term>CMSG_ENVELOPED</term>
            <term>The pvMsgEncodeInfo parameter is the address of a CMSG_ENVELOPED_ENCODE_INFO structure that contains the encoding information.</term>
            </item>
            <item>
            <term>CMSG_SIGNED_AND_ENVELOPED</term>
            <term>This value is not currently implemented.</term>
            </item>
            <item>
            <term>CMSG_HASHED</term>
            <term>The pvMsgEncodeInfo parameter is the address of a CMSG_HASHED_ENCODE_INFO structure that contains the encoding information.</term>
            </item>
            </list>
            </param>
            <param name="pvMsgEncodeInfo">
            The address of a structure that contains the encoding information. The type of data depends on the value of the dwMsgType
            parameter. For details, see dwMsgType.
            </param>
            <param name="pszInnerContentObjID">
            <para>
            If CryptMsgCalculateEncodedLength is called and the data for CryptMsgUpdate has already been message encoded, the appropriate
            object identifier (OID) is passed in pszInnerContentObjID. If pszInnerContentObjID is <c>NULL</c>, then the inner content type
            is assumed not to have been previously encoded and is therefore encoded as an octet string and given the type CMSG_DATA.
            </para>
            <para><c>Note</c> When streaming is being used, pszInnerContentObjID must be either <c>NULL</c> or szOID_RSA_data.</para>
            <para>
            The following algorithm OIDs are commonly used. A user can define new inner content usage by ensuring that the sender and
            receiver of the message agree upon the semantics associated with the OID.
            </para>
            <list type="bullet">
            <item>
            <term>szOID_RSA_data</term>
            </item>
            <item>
            <term>szOID_RSA_signedData</term>
            </item>
            <item>
            <term>szOID_RSA_envelopedData</term>
            </item>
            <item>
            <term>szOID_RSA_signEnvData</term>
            </item>
            <item>
            <term>szOID_RSA_digestedData</term>
            </item>
            <item>
            <term>szOID_RSA_encryptedData</term>
            </item>
            <item>
            <term>SPC_INDIRECT_DATA_OBJID</term>
            </item>
            </list>
            </param>
            <param name="pStreamInfo">
            <para>
            When streaming is being used, this parameter is the address of a CMSG_STREAM_INFO structure. The callback function specified by
            the <c>pfnStreamOutput</c> member of the <c>CMSG_STREAM_INFO</c> structure is called when CryptMsgUpdate is executed. The
            callback is passed the encoded bytes that result from the encoding. For more information about how to use the callback, see <c>CMSG_STREAM_INFO</c>.
            </para>
            <para>
            <c>Note</c> When streaming is being used, the application must not release any data handles that are passed in the
            pvMsgEncodeInfo parameter, such as the provider handle in the <c>hCryptProv</c> member of the CMSG_SIGNER_ENCODE_INFO structure,
            until after the message handle returned by this function is closed by using the CryptMsgClose function.
            </para>
            <para>When streaming is not being used, this parameter is set to</para>
            <para>NULL</para>
            <para>.</para>
            <para>
            Streaming is not used with the <c>CMSG_HASHED</c> message type. When dealing with hashed data, this parameter must be set to <c>NULL</c>.
            </para>
            <para>
            Consider the case of a signed message being enclosed in an enveloped message. The encoded output from the streamed encoding of
            the signed message feeds into another streaming encoding of the enveloped message. The callback for the streaming encoding calls
            CryptMsgUpdate to encode the enveloped message. The callback for the enveloped message receives the encoded bytes of the nested
            signed message.
            </para>
            </param>
            <returns>
            <para>
            If the function succeeds, it returns a handle to the opened message. This handle must be closed when it is no longer needed by
            passing it to the CryptMsgClose function.
            </para>
            <para>If this function fails, <c>NULL</c> is returned.</para>
            <para>To retrieve extended error information, use the GetLastError function.</para>
            <para>The following table lists the error codes most commonly returned by the GetLastError function.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>CRYPT_E_INVALID_MSG_TYPE</term>
            <term>The message type is not valid.</term>
            </item>
            <item>
            <term>CRYPT_E_OID_FORMAT</term>
            <term>The OID is badly formatted.</term>
            </item>
            <item>
            <term>CRYPT_E_UNKNOWN_ALGO</term>
            <term>The cryptographic algorithm is unknown.</term>
            </item>
            <item>
            <term>E_INVALIDARG</term>
            <term>One or more arguments are not valid.</term>
            </item>
            <item>
            <term>E_OUTOFMEMORY</term>
            <term>There is not enough memory.</term>
            </item>
            </list>
            <para>In addition, if dwMsgType is CMSG_SIGNED, errors can be propagated from CryptCreateHash.</para>
            <para>If dwMsgType is CMSG_ENVELOPED, errors can be propagated from CryptGenKey, CryptImportKey, and CryptExportKey.</para>
            <para>If dwMsgType is CMSG_HASHED, errors can be propagated from CryptCreateHash.</para>
            </returns>
            <remarks>
            <para>
            For functions that perform encryption, the encrypted symmetric keys are reversed from little-endian format to big-endian format
            after CryptExportKey is called internally. For functions that perform decryption, the encrypted symmetric keys are reversed from
            big-endian format to little-endian format before CryptImportKey is called.
            </para>
            <para>CRYPT_NO_SALT is specified when symmetric keys are generated and imported with CryptGenKey and CryptImportKey.</para>
            <para>
            Messages encrypted with the RC2 encryption algorithm use KP_EFFECTIVE_KEYLEN with CryptGetKeyParam to determine the effective
            key length of the RC2 key importing or exporting keys.
            </para>
            <para>
            For messages encrypted with the RC2 encryption algorithm, encode and decode operations have been updated to handle ASN RC2
            parameters for the <c>ContentEncryptionAlgorithm</c> member of the CMSG_ENVELOPED_ENCODE_INFO structure.
            </para>
            <para>
            For messages encrypted with the RC4, DES, and 3DES encryption algorithms, encode and decode operations now handle the ASN IV
            octet string parameter for the <c>ContentEncryptionAlgorithm</c> member of the CMSG_ENVELOPED_ENCODE_INFO structure.
            </para>
            <para>Examples</para>
            <para>
            For examples that use this function, see Example C Program: Signing, Encoding, Decoding, and Verifying a Message, Alternate Code
            for Encoding an Enveloped Message, Example C Program: Encoding an Enveloped, Signed Message, and Example C Program: Encoding and
            Decoding a Hashed Message.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptMsgUpdate(Vanara.PInvoke.Crypt32.HCRYPTMSG,System.IntPtr,System.UInt32,System.Boolean)">
            <summary>
            The <c>CryptMsgUpdate</c> function adds contents to a cryptographic message. The use of this function allows messages to be
            constructed piece by piece through repetitive calls of <c>CryptMsgUpdate</c>. The added message content is either encoded or
            decoded depending on whether the message was opened with CryptMsgOpenToEncode or CryptMsgOpenToDecode.
            </summary>
            <param name="hCryptMsg">Cryptographic message handle of the message to be updated.</param>
            <param name="pbData">A pointer to the buffer holding the data to be encoded or decoded.</param>
            <param name="cbData">Number of bytes of data in the pbData buffer.</param>
            <param name="fFinal">
            <para>
            Indicates that the last block of data for encoding or decoding is being processed. Correct usage of this flag is dependent upon
            whether the message being processed has detached data. The inclusion of detached data in a message is indicated by setting
            dwFlags to CMSG_DETACHED_FLAG in the call to the function that opened the message.
            </para>
            <para>
            If CMSG_DETACHED_FLAG was not set and the message was opened using either CryptMsgOpenToDecode or CryptMsgOpenToEncode, fFinal
            is set to <c>TRUE</c>, and <c>CryptMsgUpdate</c> is only called once.
            </para>
            <para>
            If the CMSG_DETACHED_FLAG flag was set and a message is opened using CryptMsgOpenToEncode, fFinal is set to <c>TRUE</c> only on
            the last call to <c>CryptMsgUpdate</c>.
            </para>
            <para>
            If the CMSG_DETACHED_FLAG flag was set and a message is opened using CryptMsgOpenToDecode, fFinal is set to <c>TRUE</c> when the
            header is processed by a single call to <c>CryptMsgUpdate</c>. It is set to <c>FALSE</c> while processing the detached data in
            subsequent calls to <c>CryptMsgUpdate</c> until the last detached data block is to be processed. On the last call to
            <c>CryptMsgUpdate</c>, it is set to <c>TRUE</c>.
            </para>
            <para>
            When detached data is decoded, the header and the content of a message are contained in different BLOBs. Each BLOB requires that
            fFinal be set to <c>TRUE</c> when the last call to the function is made for that BLOB.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is nonzero ( <c>TRUE</c>).</para>
            <para>If the function fails, the return value is zero ( <c>FALSE</c>). For extended error information, call GetLastError.</para>
            <para>
            Errors encountered in the application defined callback function specified by pStreamInfo in CryptMsgOpenToDecode and
            CryptMsgOpenToEncode might be propagated to <c>CryptMsgUpdate</c> if streaming is used. If this happens, SetLastError is not
            called by <c>CryptMsgUpdate</c> after the callback function returns, which preserves any errors encountered under the control of
            the application. It is the responsibility of the callback function (or one of the APIs that it calls) to call
            <c>SetLastError</c> if an error occurs while the application is processing the streamed data.
            </para>
            <para>The following table lists the error codes most commonly returned by the GetLastError function.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>CRYPT_E_INVALID_MSG_TYPE</term>
            <term>The message type is not valid.</term>
            </item>
            <item>
            <term>CRYPT_E_MSG_ERROR</term>
            <term>An error was encountered doing a cryptographic operation.</term>
            </item>
            <item>
            <term>CRYPT_E_OID_FORMAT</term>
            <term>The object identifier is badly formatted.</term>
            </item>
            <item>
            <term>CRYPT_E_UNEXPECTED_ENCODING</term>
            <term>The message is not encoded as expected.</term>
            </item>
            <item>
            <term>CRYPT_E_UNKNOWN_ALGO</term>
            <term>The cryptographic algorithm is unknown.</term>
            </item>
            <item>
            <term>E_INVALIDARG</term>
            <term>One or more arguments are not valid.</term>
            </item>
            <item>
            <term>E_OUTOFMEMORY</term>
            <term>Ran out of memory.</term>
            </item>
            </list>
            <para>Propagated errors might be encountered from any of the following functions:</para>
            <list type="bullet">
            <item>
            <term>CryptHashData</term>
            </item>
            <item>
            <term>CryptGetHashParam</term>
            </item>
            <item>
            <term>CryptSignHash</term>
            </item>
            <item>
            <term>CryptGetKeyParam</term>
            </item>
            <item>
            <term>CryptEncrypt</term>
            </item>
            <item>
            <term>CryptCreateHash</term>
            </item>
            </list>
            <para>
            If the function fails, GetLastError may return an Abstract Syntax Notation One (ASN.1) encoding/decoding error. For information
            about these errors, see ASN.1 Encoding/Decoding Return Values.
            </para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptMsgVerifyCountersignatureEncoded(Vanara.PInvoke.Crypt32.HCRYPTPROV,Vanara.PInvoke.Crypt32.CertEncodingType,System.IntPtr,System.UInt32,System.IntPtr,System.UInt32,Vanara.PInvoke.Crypt32.CERT_INFO@)">
            <summary>
            The <c>CryptMsgVerifyCountersignatureEncoded</c> function verifies a countersignature in terms of the SignerInfo structure (as
            defined by PKCS #7).
            </summary>
            <param name="hCryptProv">
            <para>This parameter is not used and should be set to <c>NULL</c>.</para>
            <para>
            <c>Windows Server 2003 and Windows XP:</c><c>NULL</c> or the handle of the cryptographic provider to use to hash the
            encryptedDigest field of pbSignerInfo.This parameter's data type is <c>HCRYPTPROV</c>.
            </para>
            <para>
            Unless there is a strong reason for passing in a specific cryptographic provider in hCryptProv, pass <c>NULL</c> to cause the
            default RSA or DSS provider to be used.
            </para>
            </param>
            <param name="dwEncodingType">
            <para>
            Specifies the encoding type used. Currently, only X509_ASN_ENCODING and PKCS_7_ASN_ENCODING are being used; however, additional
            encoding types may be added in the future. For either current encoding type, use:
            </para>
            <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING.</para>
            </param>
            <param name="pbSignerInfo">A pointer to the encoded BLOB that contains the signer of the contents of a message to be countersigned.</param>
            <param name="cbSignerInfo">Count, in bytes, of the encoded BLOB for the signer of the contents.</param>
            <param name="pbSignerInfoCountersignature">A pointer to the encoded BLOB containing the countersigner information.</param>
            <param name="cbSignerInfoCountersignature">Count, in bytes, of the encoded BLOB for the countersigner of the message.</param>
            <param name="pciCountersigner">
            A pointer to a CERT_INFO that includes with the issuer and serial number of the countersigner. For more information, see Remarks.
            </param>
            <returns>
            <para>If the function succeeds, the return value is nonzero ( <c>TRUE</c>).</para>
            <para>If the function fails, the return value is zero ( <c>FALSE</c>). For extended error information, call GetLastError.</para>
            <para>The following table lists the error codes most commonly returned by the GetLastError function.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>CRYPT_E_AUTH_ATTR_MISSING</term>
            <term>The message does not contain an expected authenticated attribute.</term>
            </item>
            <item>
            <term>CRYPT_E_HASH_VALUE</term>
            <term>The hash value is not correct.</term>
            </item>
            <item>
            <term>CRYPT_E_UNEXPECTED_ENCODING</term>
            <term>The message is not encoded as expected.</term>
            </item>
            <item>
            <term>CRYPT_E_UNKNOWN_ALGO</term>
            <term>The cryptographic algorithm is unknown.</term>
            </item>
            <item>
            <term>E_INVALIDARG</term>
            <term>One or more arguments are not valid.</term>
            </item>
            <item>
            <term>E_OUTOFMEMORY</term>
            <term>Ran out of memory.</term>
            </item>
            </list>
            <para>Propagated errors from the following functions might be returned.</para>
            <list type="bullet">
            <item>
            <term>CryptHashData</term>
            </item>
            <item>
            <term>CryptGetHashParam</term>
            </item>
            <item>
            <term>CryptImportKey</term>
            </item>
            <item>
            <term>CryptVerifySignature</term>
            </item>
            <item>
            <term>CryptCreateHash</term>
            </item>
            </list>
            <para>
            If the function fails, GetLastError may return an Abstract Syntax Notation One (ASN.1) encoding/decoding error. For information
            about these errors, see ASN.1 Encoding/Decoding Return Values.
            </para>
            </returns>
            <remarks>
            <para>
            Countersigner verification is done using the PKCS #7 <c>SIGNERINFO</c> structure. The signature must contain the encrypted hash
            of the encryptedDigest field of pbSignerInfo.
            </para>
            <para>
            The issuer and serial number of the countersigner must match the countersigner information from pbSignerInfoCountersignature.
            The only fields referenced from pciCountersigner are SerialNumber, Issuer, and SubjectPublicKeyInfo. The SubjectPublicKeyInfo is
            used to access the public key that is then used to encrypt the hash from the pciCountersigner so compare it with the hash from
            the pbSignerInfo.
            </para>
            <para>Examples</para>
            <para>For an example that uses this function, see Example C Program: Encoding and Decoding a CounterSigned Message.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptMsgVerifyCountersignatureEncodedEx(Vanara.PInvoke.Crypt32.HCRYPTPROV,Vanara.PInvoke.Crypt32.CertEncodingType,System.IntPtr,System.UInt32,System.IntPtr,System.UInt32,Vanara.PInvoke.Crypt32.CryptMsgSignerType,System.IntPtr,Vanara.PInvoke.Crypt32.CryptMsgVerifyCounterFlags,System.IntPtr)">
            <summary>
            The <c>CryptMsgVerifyCountersignatureEncodedEx</c> function verifies that the pbSignerInfoCounterSignature parameter contains
            the encrypted hash of the <c>encryptedDigest</c> field of the pbSignerInfo parameter structure. The signer can be a
            CERT_PUBLIC_KEY_INFO structure, a certificate context, or a chain context.
            </summary>
            <param name="hCryptProv">
            <para>This parameter is not used and should be set to <c>NULL</c>.</para>
            <para>
            <c>Windows Server 2003 and Windows XP:</c><c>NULL</c> or the handle of the cryptographic provider to use to hash the
            encryptedDigest field of pbSignerInfo.This parameter's data type is <c>HCRYPTPROV</c>.
            </para>
            <para>
            Unless there is a strong reason for passing in a specific cryptographic provider in hCryptProv, pass <c>NULL</c> to cause the
            default RSA or DSS provider to be used.
            </para>
            </param>
            <param name="dwEncodingType">
            <para>
            The encoding type used. Currently, only X509_ASN_ENCODING and PKCS_7_ASN_ENCODING are being used; however, additional encoding
            types may be added in the future. For either current encoding type, use:
            </para>
            <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING.</para>
            </param>
            <param name="pbSignerInfo">A pointer to the encoded BLOB that contains the signer of the contents of a message to be countersigned.</param>
            <param name="cbSignerInfo">The count, in bytes, of the encoded BLOB for the signer of the contents.</param>
            <param name="pbSignerInfoCountersignature">A pointer to the encoded BLOB containing the countersigner information.</param>
            <param name="cbSignerInfoCountersignature">The count, in bytes, of the encoded BLOB for the countersigner of the message.</param>
            <param name="dwSignerType">
            <para>
            The structure that contains the signer information. The following table shows the predefined values and the structures indicated.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CMSG_VERIFY_SIGNER_PUBKEY</term>
            <term>pvSigner is a pointer to a CERT_PUBLIC_KEY_INFO structure.</term>
            </item>
            <item>
            <term>CMSG_VERIFY_SIGNER_CERT</term>
            <term>pvSigner is a pointer to a CERT_CONTEXT structure.</term>
            </item>
            <item>
            <term>CMSG_VERIFY_SIGNER_CHAIN</term>
            <term>pvSigner is a pointer to a CERT_CHAIN_CONTEXT structure.</term>
            </item>
            </list>
            </param>
            <param name="pvSigner">
            A pointer to a CERT_PUBLIC_KEY_INFO structure, a certificate context, or a chain context depending on the value of dwSignerType.
            </param>
            <param name="dwFlags">
            <para>Flags that modify the function behavior. This can be zero or the following value.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CMSG_VERIFY_COUNTER_SIGN_ENABLE_STRONG_FLAG 0x00000001</term>
            <term>
            Performs a strong signature check after successful signature verification. Set the pvExtra parameter to point to a
            CERT_STRONG_SIGN_PARA structure that contains the parameters needed to check the signature strength.. Windows 8 and Windows
            Server 2012: Support for this flag begins.
            </term>
            </item>
            </list>
            </param>
            <param name="pvExtra">
            If you set the dwFlags parameter to <c>CMSG_VERIFY_COUNTER_SIGN_ENABLE_STRONG_FLAG</c>, set this parameter (pvExtra) to point to
            a CERT_STRONG_SIGN_PARA structure that contains the parameters used to check the signature strength.
            </param>
            <returns>
            <para>If the function succeeds, the return value is nonzero ( <c>TRUE</c>).</para>
            <para>If the function fails, the return value is zero ( <c>FALSE</c>). For extended error information, call GetLastError.</para>
            <para>The following error codes are most commonly returned by the GetLastError function.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>CRYPT_E_AUTH_ATTR_MISSING</term>
            <term>The message does not contain an expected authenticated attribute.</term>
            </item>
            <item>
            <term>CRYPT_E_HASH_VALUE</term>
            <term>The hash value is not correct.</term>
            </item>
            <item>
            <term>CRYPT_E_UNEXPECTED_ENCODING</term>
            <term>The message is not encoded as expected.</term>
            </item>
            <item>
            <term>CRYPT_E_UNKNOWN_ALGO</term>
            <term>The cryptographic algorithm is unknown.</term>
            </item>
            <item>
            <term>E_INVALIDARG</term>
            <term>One or more arguments are not valid.</term>
            </item>
            <item>
            <term>E_OUTOFMEMORY</term>
            <term>Ran out of memory.</term>
            </item>
            </list>
            <para>Propagated errors from the following functions might be returned.</para>
            <list type="bullet">
            <item>
            <term>CryptHashData</term>
            </item>
            <item>
            <term>CryptGetHashParam</term>
            </item>
            <item>
            <term>CryptImportKey</term>
            </item>
            <item>
            <term>CryptVerifySignature</term>
            </item>
            <item>
            <term>CryptCreateHash</term>
            </item>
            </list>
            <para>
            If the function fails, GetLastError may return an Abstract Syntax Notation One (ASN.1) encoding/decoding error. For information
            about these errors, see ASN.1 Encoding/Decoding Return Values.
            </para>
            </returns>
            <remarks>
            <para>
            Countersigner verification is done using the PKCS #7 <c>SIGNERINFO</c> structure. The signature must contain the encrypted hash
            of the encryptedDigest field of pbSignerInfo.
            </para>
            <para>
            The issuer and serial number of the countersigner must match the countersigner information from pbSignerInfoCountersignature.
            The only fields referenced from pciCountersigner are SerialNumber, Issuer, and SubjectPublicKeyInfo. The SubjectPublicKeyInfo is
            used to access the public key that is then used to encrypt the hash from the pciCountersigner so compare it with the hash from
            the pbSignerInfo.
            </para>
            <para>Examples</para>
            <para>For an example that uses this function, see Example C Program: Encoding and Decoding a CounterSigned Message.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptSignAndEncryptMessage(Vanara.PInvoke.Crypt32.CRYPT_SIGN_MESSAGE_PARA@,Vanara.PInvoke.Crypt32.CRYPT_ENCRYPT_MESSAGE_PARA@,System.UInt32,Vanara.PInvoke.Crypt32.PCCERT_CONTEXT[],System.IntPtr,System.UInt32,System.IntPtr,System.UInt32@)">
            <summary>
            The <c>CryptSignAndEncryptMessage</c> function creates a hash of the specified content, signs the hash, encrypts the content,
            hashes the encrypted contents and the signed hash, and then encodes both the encrypted content and the signed hash. The result
            is the same as if the hash were first signed and then encrypted.
            </summary>
            <param name="pSignPara">A pointer to a CRYPT_SIGN_MESSAGE_PARA structure that contains the signature parameters.</param>
            <param name="pEncryptPara">A pointer to a CRYPT_ENCRYPT_MESSAGE_PARA structure containing encryption parameters.</param>
            <param name="cRecipientCert">Number of array elements in rgpRecipientCert.</param>
            <param name="rgpRecipientCert">
            Array of pointers to CERT_CONTEXT structures. Each structure is the certificate of an intended recipients of the message.
            </param>
            <param name="pbToBeSignedAndEncrypted">A pointer to a buffer containing the content to be signed and encrypted.</param>
            <param name="cbToBeSignedAndEncrypted">The size, in bytes, of the pbToBeSignedAndEncrypted buffer.</param>
            <param name="pbSignedAndEncryptedBlob">
            <para>A pointer to a buffer to receive the encrypted and encoded message.</para>
            <para>
            This parameter can be <c>NULL</c> to set the size of this information for memory allocation purposes. For more information, see
            Retrieving Data of Unknown Length.
            </para>
            </param>
            <param name="pcbSignedAndEncryptedBlob">
            <para>
            A pointer to <c>DWORD</c> specifying the size, in bytes, of the buffer pointed to by pbSignedAndEncryptedBlob. When the function
            returns, this variable contains the size, in bytes, of the signed and encrypted message copied to *pbSignedAndEncryptedBlob.
            </para>
            <para>
            <c>Note</c> When processing the data returned, applications must use the actual size of the data returned. The actual size can
            be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough
            to ensure that the largest possible output data will fit in the buffer.) On output, the variable pointed to by this parameter is
            updated to reflect the actual size of the data copied to the buffer.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is nonzero (TRUE).</para>
            <para>If the function fails, the return value is zero (FALSE).</para>
            <para>For extended error information, call GetLastError.</para>
            <para>The following lists the error code most commonly returned by the GetLastError function.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_MORE_DATA</term>
            <term>
            If the buffer specified by the pbSignedAndEncryptedBlob parameter is not large enough to hold the returned data, the function
            sets the ERROR_MORE_DATA code, and stores the required buffer size, in bytes, into the variable pointed to by pcbSignedAndEncryptedBlob.
            </term>
            </item>
            </list>
            <para><c>Note</c> Errors from the called functions CryptSignMessage and CryptEncryptMessage might be propagated to this function.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptSignMessage(Vanara.PInvoke.Crypt32.CRYPT_SIGN_MESSAGE_PARA@,System.Boolean,System.UInt32,System.IntPtr[],System.UInt32[],System.IntPtr,System.UInt32@)">
            <summary>
            The <c>CryptSignMessage</c> function creates a hash of the specified content, signs the hash, and then encodes both the original
            message content and the signed hash.
            </summary>
            <param name="pSignPara">A pointer to CRYPT_SIGN_MESSAGE_PARA structure containing the signature parameters.</param>
            <param name="fDetachedSignature">
            <c>TRUE</c> if this is to be a detached signature. Otherwise, <c>FALSE</c>. If this parameter is set to <c>TRUE</c>, only the
            signed hash is encoded in pbSignedBlob. Otherwise, both rgpbToBeSigned and the signed hash are encoded.
            </param>
            <param name="cToBeSigned">
            Count of the number of array elements in rgpbToBeSigned and rgpbToBeSigned. This parameter must be set to one unless
            fDetachedSignature is set to <c>TRUE</c>.
            </param>
            <param name="rgpbToBeSigned">Array of pointers to buffers that contain the contents to be signed.</param>
            <param name="rgcbToBeSigned">Array of sizes, in bytes, of the content buffers pointed to in rgpbToBeSigned.</param>
            <param name="pbSignedBlob">
            <para>
            A pointer to a buffer to receive the encoded signed hash, if fDetachedSignature is <c>TRUE</c>, or to both the encoded content
            and signed hash if fDetachedSignature is <c>FALSE</c>.
            </para>
            <para>
            This parameter can be <c>NULL</c> to set the size of this information for memory allocation purposes. For more information, see
            Retrieving Data of Unknown Length.
            </para>
            </param>
            <param name="pcbSignedBlob">
            <para>
            A pointer to a <c>DWORD</c> specifying the size, in bytes, of the pbSignedBlob buffer. When the function returns, this variable
            contains the size, in bytes, of the signed and encoded message.
            </para>
            <para>
            <c>Note</c> When processing the data returned, applications must use the actual size of the data returned. The actual size can
            be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough
            to ensure that the largest possible output data will fit in the buffer.) On output, the variable pointed to by this parameter is
            updated to reflect the actual size of the data copied to the buffer.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is nonzero ( <c>TRUE</c>).</para>
            <para>If the function fails, the return value is zero ( <c>FALSE</c>).</para>
            <para>For extended error information, call GetLastError.</para>
            <para>The following lists the error codes most commonly returned by the GetLastError function.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_MORE_DATA</term>
            <term>
            If the buffer specified by the pbSignedBlob parameter is not large enough to hold the returned data, the function sets the
            ERROR_MORE_DATA code, and stores the required buffer size, in bytes, into the variable pointed to by pcbSignedBlob.
            </term>
            </item>
            <item>
            <term>E_INVALIDARG</term>
            <term>
            The message encoding type is not valid. Currently only PKCS_7_ASN_ENCODING is supported. The cbSize in *pSignPara is not valid.
            </term>
            </item>
            <item>
            <term>CRYPT_E_NO_KEY_PROPERTY</term>
            <term>The pSigningCert in *pSignPara does not have a CERT_KEY_PROV_INFO_PROP_ID or CERT_KEY_CONTEXT_PROP_ID property.</term>
            </item>
            </list>
            <para>
            <c>Note</c> Errors from the called functions CryptCreateHash, CryptHashData, and CryptSignHash might be propagated to this function.
            </para>
            <para>
            If the function fails, GetLastError may return an Abstract Syntax Notation One (ASN.1) encoding/decoding error. For information
            about these errors, see ASN.1 Encoding/Decoding Return Values.
            </para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptSignMessageWithKey(Vanara.PInvoke.Crypt32.CRYPT_KEY_SIGN_MESSAGE_PARA@,System.IntPtr,System.UInt32,System.IntPtr,System.UInt32@)">
            <summary>
            The <c>CryptSignMessageWithKey</c> function signs a message by using a CSP's private key specified in the parameters. A
            placeholder <c>SignerId</c> is created and stored in the message.
            </summary>
            <param name="pSignPara">A pointer to a CRYPT_KEY_SIGN_MESSAGE_PARA structure that contains the signature parameters.</param>
            <param name="pbToBeSigned">A pointer to a buffer array that contains the message to be signed.</param>
            <param name="cbToBeSigned">The number of array elements in the pbToBeSigned buffer array.</param>
            <param name="pbSignedBlob">
            <para>A pointer to a buffer to receive the encoded signed message.</para>
            <para>
            This parameter can be <c>NULL</c> to set the size of this information for memory allocation purposes. For more information, see
            Retrieving Data of Unknown Length.
            </para>
            </param>
            <param name="pcbSignedBlob">
            <para>
            A pointer to a <c>DWORD</c> value that indicates the size, in bytes, of the pbSignedBlob buffer. When the function returns, this
            variable contains the size, in bytes, of the signed and encoded message.
            </para>
            <para>
            <c>Note</c> When processing the data returned, applications must use the actual size of the data returned. The actual size can
            be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough
            to ensure that the largest possible output data will fit in the buffer.) On output, the variable pointed to by this parameter is
            updated to reflect the actual size of the data copied to the buffer.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is nonzero (TRUE).</para>
            <para>If the function fails, the return value is zero (FALSE).</para>
            <para>For extended error information, call GetLastError.</para>
            <para>The following lists the error codes most commonly returned by the GetLastError function.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_MORE_DATA</term>
            <term>
            If the buffer specified by the pbSignedBlob parameter is not large enough to hold the returned data, the function sets the
            ERROR_MORE_DATA code and stores the required buffer size, in bytes, into the variable pointed to by pcbSignedBlob.
            </term>
            </item>
            <item>
            <term>E_INVALIDARG</term>
            <term>
            The message encoding type is not valid. Currently only PKCS_7_ASN_ENCODING is supported. The cbSize in *pSignPara is not valid.
            </term>
            </item>
            <item>
            <term>CRYPT_E_NO_KEY_PROPERTY</term>
            <term>The pSigningCert in *pSignPara does not have a CERT_KEY_PROV_INFO_PROP_ID or CERT_KEY_CONTEXT_PROP_ID property.</term>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptVerifyDetachedMessageHash(Vanara.PInvoke.Crypt32.CRYPT_HASH_MESSAGE_PARA@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr[],System.UInt32[],System.IntPtr,System.UInt32@)">
            <summary>The <c>CryptVerifyDetachedMessageHash</c> function verifies a detached hash.</summary>
            <param name="pHashPara">A pointer to a CRYPT_HASH_MESSAGE_PARA structure containing the hash parameters.</param>
            <param name="pbDetachedHashBlob">A pointer to the encoded, detached hash.</param>
            <param name="cbDetachedHashBlob">The size, in bytes, of the detached hash.</param>
            <param name="cToBeHashed">Number of elements in the rgpbToBeHashed and rgcbToBeHashed arrays.</param>
            <param name="rgpbToBeHashed">Array of pointers to content buffers to be hashed.</param>
            <param name="rgcbToBeHashed">
            Array of sizes, in bytes, for the content buffers pointed to by the elements of the rgcbToBeHashed array.
            </param>
            <param name="pbComputedHash">
            <para>A pointer to a buffer to receive the computed hash.</para>
            <para>
            This parameter can be <c>NULL</c> if the newly created hash is not needed for additional processing, or to set the size of the
            hash for memory allocation purposes. For more information, see Retrieving Data of Unknown Length.
            </para>
            </param>
            <param name="pcbComputedHash">
            <para>
            A pointer to a <c>DWORD</c> specifying the size, in bytes, of the pbComputedHash buffer. When the function returns, this
            <c>DWORD</c> contains the size, in bytes, of the created hash. The hash will not be returned if this parameter is <c>NULL</c>.
            </para>
            <para>
            <c>Note</c> When processing the data returned , applications must use the actual size of the data returned. The actual size can
            be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough
            to ensure that the largest possible output data will fit in the buffer.) On output, the variable pointed to by this parameter is
            updated to reflect the actual size of the data copied to the buffer.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is nonzero (TRUE).</para>
            <para>If the function fails, the return value is zero (FALSE).</para>
            <para>For extended error information, call GetLastError.</para>
            <para>The following lists the error codes most commonly returned by the GetLastError function.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>CRYPT_E_UNEXPECTED_MSG_TYPE</term>
            <term>Not a hashed cryptographic message.</term>
            </item>
            <item>
            <term>E_INVALIDARG</term>
            <term>
            The message encoding type is not valid. Currently only PKCS_7_ASN_ENCODING is supported. The cbSize in *pHashPara is not valid.
            </term>
            </item>
            <item>
            <term>ERROR_MORE_DATA</term>
            <term>
            If the buffer specified by the pbComputedHash parameter is not large enough to hold the returned data, the function sets the
            ERROR_MORE_DATA code, and stores the required buffer size, in bytes, into the variable pointed to by pcbComputedHash.
            </term>
            </item>
            </list>
            <para>
            <c>Note</c> Errors from the called functions CryptCreateHash, CryptHashData, and CryptGetHashParam might be propagated to this
            function. If the function fails, GetLastError may return an Abstract Syntax Notation One (ASN.1) encoding/decoding error. For
            information about these errors, see ASN.1 Encoding/Decoding Return Values.
            </para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptVerifyDetachedMessageSignature(Vanara.PInvoke.Crypt32.CRYPT_VERIFY_MESSAGE_PARA@,System.UInt32,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr[],System.UInt32[],Vanara.PInvoke.Crypt32.SafePCCERT_CONTEXT@)">
            <summary>
            The <c>CryptVerifyDetachedMessageSignature</c> function verifies a signed message containing a detached signature or signatures.
            </summary>
            <param name="pVerifyPara">A pointer to a CRYPT_VERIFY_MESSAGE_PARA structure containing the verification parameters.</param>
            <param name="dwSignerIndex">
            Index of the signature to be verified. A message might have several signers and this function can be called repeatedly, changing
            dwSignerIndex to verify other signatures. If the function returns FALSE, and GetLastError returns CRYPT_E_NO_SIGNER, the
            previous call received the last signer of the message.
            </param>
            <param name="pbDetachedSignBlob">A pointer to a BLOB containing the encoded message signatures.</param>
            <param name="cbDetachedSignBlob">The size, in bytes, of the detached signature.</param>
            <param name="cToBeSigned">Number of array elements in rgpbToBeSigned and rgcbToBeSigned.</param>
            <param name="rgpbToBeSigned">Array of pointers to buffers containing the contents to be hashed.</param>
            <param name="rgcbToBeSigned">Array of sizes, in bytes, for the content buffers pointed to in rgpbToBeSigned.</param>
            <param name="ppSignerCert">
            A pointer to a pointer to a CERT_CONTEXT structure of a signer certificate. When you have finished using the certificate
            context, free it by calling the CertFreeCertificateContext function. A pointer to a <c>CERT_CONTEXT</c> structure will not be
            returned if this parameter is <c>NULL</c>.
            </param>
            <returns>
            <para>If the function succeeds, the return value is nonzero (TRUE).</para>
            <para>If the function fails, the return value is zero ( <c>FALSE</c>).</para>
            <para>For extended error information, call GetLastError.</para>
            <para>The following lists the error codes most commonly returned by the GetLastError function.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>E_INVALIDARG</term>
            <term>
            Invalid message and certificate encoding types. Currently only PKCS_7_ASN_ENCODING and X509_ASN_ENCODING_TYPE are supported.
            Invalid cbSize in *pVerifyPara.
            </term>
            </item>
            <item>
            <term>CRYPT_E_UNEXPECTED_MSG_TYPE</term>
            <term>Not a signed cryptographic message.</term>
            </item>
            <item>
            <term>CRYPT_E_NO_SIGNER</term>
            <term>The message does not have any signers or a signer for the specified dwSignerIndex.</term>
            </item>
            <item>
            <term>NTE_BAD_ALGID</term>
            <term>The message was hashed and signed by using an unknown or unsupported algorithm.</term>
            </item>
            <item>
            <term>NTE_BAD_SIGNATURE</term>
            <term>The message's signature was not verified.</term>
            </item>
            </list>
            <para>
            <c>Note</c> Errors from the called functions CryptCreateHash, CryptHashData, CryptVerifySignature, and CryptImportKey might be
            propagated to this function.If the function fails, GetLastError may return an Abstract Syntax Notation One (ASN.1)
            encoding/decoding error. For information about these errors, see ASN.1 Encoding/Decoding Return Values.
            </para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptVerifyMessageHash(Vanara.PInvoke.Crypt32.CRYPT_HASH_MESSAGE_PARA@,System.IntPtr,System.UInt32,System.IntPtr,System.UInt32@,System.IntPtr,System.UInt32@)">
            <summary>The <c>CryptVerifyMessageHash</c> function verifies the hash of specified content.</summary>
            <param name="pHashPara">A pointer to a CRYPT_HASH_MESSAGE_PARA structure containing hash parameters.</param>
            <param name="pbHashedBlob">A pointer to a buffer containing original content and its hash.</param>
            <param name="cbHashedBlob">The size, in bytes, of the original hash buffer.</param>
            <param name="pbToBeHashed">
            <para>A pointer to a buffer to receive the original content that was hashed.</para>
            <para>
            This parameter can be <c>NULL</c> if the original content is not needed for additional processing, or to set the size of the
            original content for memory allocation purposes. For more information, see Retrieving Data of Unknown Length.
            </para>
            </param>
            <param name="pcbToBeHashed">
            <para>
            A pointer to a <c>DWORD</c> specifying the size, in bytes, of the pbToBeHashed buffer. When the function returns, this variable
            contains the size, in bytes, of the original content copied to pbToBeHashed. The original content will not be returned if this
            parameter is <c>NULL</c>.
            </para>
            <para>
            <c>Note</c> When processing the data returned, applications must use the actual size of the data returned. The actual size can
            be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough
            to ensure that the largest possible output data will fit in the buffer.) On output, the variable pointed to by this parameter is
            updated to reflect the actual size of the data copied to the buffer.
            </para>
            </param>
            <param name="pbComputedHash">
            A pointer to a buffer to receive the computed hash. This parameter can be <c>NULL</c> if the created hash is not needed for
            additional processing, or to set the size of the original content for memory allocation purposes. For more information, see
            Retrieving Data of Unknown Length.
            </param>
            <param name="pcbComputedHash">
            <para>
            A pointer to a <c>DWORD</c> specifying the size, in bytes, of the pbComputedHash buffer. When the function returns, this
            variable contains the size, in bytes, of the created hash. The hash is not returned if this parameter is <c>NULL</c>.
            </para>
            <para>
            <c>Note</c> When processing the data returned, applications must use the actual size of the data returned. The actual size can
            be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough
            to ensure that the largest possible output data will fit in the buffer.) On output, the variable pointed to by this parameter is
            updated to reflect the actual size of the data copied to the buffer.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is nonzero (TRUE).</para>
            <para>If the function fails, the return value is zero (FALSE).</para>
            <para>For extended error information, call GetLastError.</para>
            <para>The following lists the error codes most commonly returned by the GetLastError function.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>CRYPT_E_UNEXPECTED_MSG_TYPE</term>
            <term>Not a hashed cryptographic message.</term>
            </item>
            <item>
            <term>E_INVALIDARG</term>
            <term>
            The message encoding type is not valid. Currently only PKCS_7_ASN_ENCODING is supported. The cbSize in *pHashPara is not valid.
            </term>
            </item>
            <item>
            <term>ERROR_MORE_DATA</term>
            <term>
            If the buffer specified by the pbToBeHashed parameter is not large enough to hold the returned data, the function sets the
            ERROR_MORE_DATA code, and stores the required buffer size, in bytes, into the variable pointed to by pcbToBeHashed.
            </term>
            </item>
            </list>
            <para>
            <c>Note</c> Errors from the called functions CryptCreateHash, CryptHashData, and CryptGetHashParam might be propagated to this
            function. If the function fails, GetLastError may return an Abstract Syntax Notation One (ASN.1) encoding/decoding error. For
            information about these errors, see ASN.1 Encoding/Decoding Return Values.
            </para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptVerifyMessageSignature(Vanara.PInvoke.Crypt32.CRYPT_VERIFY_MESSAGE_PARA@,System.UInt32,System.IntPtr,System.UInt32,System.IntPtr,System.UInt32@,Vanara.PInvoke.Crypt32.SafePCCERT_CONTEXT@)">
            <summary>
            <para>The <c>CryptVerifyMessageSignature</c> function verifies a signed message's signature.</para>
            <para>
            This function should not be used to verify the signature of a detached message. You should use the
            CryptVerifyDetachedMessageSignature function to verify the signature of a detached message.
            </para>
            </summary>
            <param name="pVerifyPara">A pointer to a CRYPT_VERIFY_MESSAGE_PARA structure that contains verification parameters.</param>
            <param name="dwSignerIndex">
            The index of the desired signature. There can be more than one signature. <c>CryptVerifyMessageSignature</c> can be called
            repeatedly, incrementing dwSignerIndex each time. Set this parameter to zero for the first signer, or if there is only one
            signer. If the function returns <c>FALSE</c>, and GetLastError returns CRYPT_E_NO_SIGNER, the previous call processed the last
            signer of the message.
            </param>
            <param name="pbSignedBlob">A pointer to a buffer that contains the signed message.</param>
            <param name="cbSignedBlob">The size, in bytes, of the signed message buffer.</param>
            <param name="pbDecoded">
            <para>A pointer to a buffer to receive the decoded message.</para>
            <para>
            This parameter can be <c>NULL</c> if the decoded message is not needed for additional processing or to set the size of the
            message for memory allocation purposes. For more information, see Retrieving Data of Unknown Length.
            </para>
            </param>
            <param name="pcbDecoded">
            <para>
            A pointer to a <c>DWORD</c> value that specifies the size, in bytes, of the pbDecoded buffer. When the function returns, this
            <c>DWORD</c> contains the size, in bytes, of the decoded message. The decoded message will not be returned if this parameter is <c>NULL</c>.
            </para>
            <para>
            <c>Note</c> When processing the data returned, applications must use the actual size of the data returned. The actual size can
            be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough
            to ensure that the largest possible output data will fit in the buffer.) On output, the variable pointed to by this parameter is
            updated to reflect the actual size of the data copied to the buffer.
            </para>
            </param>
            <param name="ppSignerCert">
            The address of a CERT_CONTEXT structure pointer that receives the certificate of the signer. When you have finished using this
            structure, free it by passing this pointer to the CertFreeCertificateContext function. This parameter can be <c>NULL</c> if the
            signer's certificate is not needed.
            </param>
            <returns>
            <para>
            If the function succeeds, the function returns nonzero. This does not necessarily mean that the signature was verified. In the
            case of a detached message, the variable pointed to by pcbDecoded will contain zero. In this case, this function will return
            nonzero, but the signature is not verified. To verify the signature of a detached message, use the
            CryptVerifyDetachedMessageSignature function.
            </para>
            <para>If the function fails, it returns zero. For extended error information, call GetLastError.</para>
            <para>The following table shows the error codes most commonly returned by the GetLastError function.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_MORE_DATA</term>
            <term>
            If the buffer specified by the pbDecoded parameter is not large enough to hold the returned data, the function sets the
            ERROR_MORE_DATA code, and stores the required buffer size, in bytes, in the variable pointed to by pcbDecoded.
            </term>
            </item>
            <item>
            <term>E_INVALIDARG</term>
            <term>
            Invalid message and certificate encoding types. Currently only PKCS_7_ASN_ENCODING and X509_ASN_ENCODING_TYPE are supported.
            Invalid cbSize in *pVerifyPara.
            </term>
            </item>
            <item>
            <term>CRYPT_E_UNEXPECTED_MSG_TYPE</term>
            <term>Not a signed cryptographic message.</term>
            </item>
            <item>
            <term>CRYPT_E_NO_SIGNER</term>
            <term>The message does not have any signers or a signer for the specified dwSignerIndex.</term>
            </item>
            <item>
            <term>NTE_BAD_ALGID</term>
            <term>The message was hashed and signed by using an unknown or unsupported algorithm.</term>
            </item>
            <item>
            <term>NTE_BAD_SIGNATURE</term>
            <term>The message's signature was not verified.</term>
            </item>
            </list>
            <para>
            <c>Note</c> Errors from the called functions CryptCreateHash, CryptHashData, CryptVerifySignature, and CryptImportKey can be
            propagated to this function. If the function fails, GetLastError may return an Abstract Syntax Notation One (ASN.1)
            encoding/decoding error. For information about these errors, see ASN.1 Encoding/Decoding Return Values.
            </para>
            </returns>
            <remarks>
            <para>
            For a verified signer and message, ppSignerCert is updated with the CERT_CONTEXT of the signer. It must be freed by calling
            CertFreeCertificateContext. Otherwise, ppSignerCert is set to <c>NULL</c>.
            </para>
            <para>For a message that contains only certificates and CRLs, pcbDecoded is set to <c>NULL</c>.</para>
            <para>Examples</para>
            <para>For an example that uses this function, see Example C Program: Signing a Message and Verifying a Message Signature.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptVerifyMessageSignatureWithKey(Vanara.PInvoke.Crypt32.CRYPT_KEY_VERIFY_MESSAGE_PARA@,Vanara.PInvoke.Crypt32.CERT_PUBLIC_KEY_INFO@,System.IntPtr,System.UInt32,System.IntPtr,System.UInt32@)">
            <summary>
            The <c>CryptVerifyMessageSignatureWithKey</c> function verifies a signed message's signature by using specified public key information.
            </summary>
            <param name="pVerifyPara">A pointer to a CRYPT_KEY_VERIFY_MESSAGE_PARA structure that contains verification parameters.</param>
            <param name="pPublicKeyInfo">
            A pointer to a CERT_PUBLIC_KEY_INFO structure that contains the public key that is used to verify the signed message. If
            <c>NULL</c>, the signature is not verified.
            </param>
            <param name="pbSignedBlob">A pointer to a buffer that contains the signed message.</param>
            <param name="cbSignedBlob">The size, in bytes, of the signed message buffer.</param>
            <param name="pbDecoded">
            <para>A pointer to a buffer to receive the decoded message.</para>
            <para>
            This parameter can be <c>NULL</c> if the decoded message is not needed for additional processing or to set the size of the
            message for memory allocation purposes. For more information, see Retrieving Data of Unknown Length.
            </para>
            </param>
            <param name="pcbDecoded">
            <para>
            A pointer to a <c>DWORD</c> value that specifies the size, in bytes, of the pbDecoded buffer. When the function returns, this
            <c>DWORD</c> contains the size, in bytes, of the decoded message. The decoded message will not be returned if this parameter is <c>NULL</c>.
            </para>
            <para>
            <c>Note</c> When processing the data returned, applications must use the actual size of the data returned. The actual size can
            be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough
            to ensure that the largest possible output data will fit in the buffer.) On output, the variable pointed to by this parameter is
            updated to reflect the actual size of the data copied to the buffer.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the function returns nonzero.</para>
            <para>If the function fails, it returns zero. For extended error information, call GetLastError.</para>
            <para>The following table shows the error codes most commonly returned by the GetLastError function.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_MORE_DATA</term>
            <term>
            If the buffer specified by the pbDecoded parameter is not large enough to hold the returned data, the function sets the
            ERROR_MORE_DATA code, and stores the required buffer size, in bytes, in the variable pointed to by pcbDecoded.
            </term>
            </item>
            <item>
            <term>E_INVALIDARG</term>
            <term>
            Invalid message and certificate encoding types. Currently only PKCS_7_ASN_ENCODING and X509_ASN_ENCODING_TYPE are supported.
            Invalid cbSize in *pVerifyPara.
            </term>
            </item>
            <item>
            <term>CRYPT_E_UNEXPECTED_MSG_TYPE</term>
            <term>Not a signed cryptographic message.</term>
            </item>
            <item>
            <term>CRYPT_E_NO_SIGNER</term>
            <term>The message does not have any signers or a signer for the specified dwSignerIndex.</term>
            </item>
            <item>
            <term>NTE_BAD_ALGID</term>
            <term>The message was hashed and signed by using an unknown or unsupported algorithm.</term>
            </item>
            <item>
            <term>NTE_BAD_SIGNATURE</term>
            <term>The message's signature was not verified.</term>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptVerifyMessageSignatureWithKey(Vanara.PInvoke.Crypt32.CRYPT_KEY_VERIFY_MESSAGE_PARA@,System.IntPtr,System.IntPtr,System.UInt32,System.IntPtr,System.UInt32@)">
            <summary>
            The <c>CryptVerifyMessageSignatureWithKey</c> function verifies a signed message's signature by using specified public key information.
            </summary>
            <param name="pVerifyPara">A pointer to a CRYPT_KEY_VERIFY_MESSAGE_PARA structure that contains verification parameters.</param>
            <param name="pPublicKeyInfo">
            A pointer to a CERT_PUBLIC_KEY_INFO structure that contains the public key that is used to verify the signed message. If
            <c>NULL</c>, the signature is not verified.
            </param>
            <param name="pbSignedBlob">A pointer to a buffer that contains the signed message.</param>
            <param name="cbSignedBlob">The size, in bytes, of the signed message buffer.</param>
            <param name="pbDecoded">
            <para>A pointer to a buffer to receive the decoded message.</para>
            <para>
            This parameter can be <c>NULL</c> if the decoded message is not needed for additional processing or to set the size of the
            message for memory allocation purposes. For more information, see Retrieving Data of Unknown Length.
            </para>
            </param>
            <param name="pcbDecoded">
            <para>
            A pointer to a <c>DWORD</c> value that specifies the size, in bytes, of the pbDecoded buffer. When the function returns, this
            <c>DWORD</c> contains the size, in bytes, of the decoded message. The decoded message will not be returned if this parameter is <c>NULL</c>.
            </para>
            <para>
            <c>Note</c> When processing the data returned, applications must use the actual size of the data returned. The actual size can
            be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough
            to ensure that the largest possible output data will fit in the buffer.) On output, the variable pointed to by this parameter is
            updated to reflect the actual size of the data copied to the buffer.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the function returns nonzero.</para>
            <para>If the function fails, it returns zero. For extended error information, call GetLastError.</para>
            <para>The following table shows the error codes most commonly returned by the GetLastError function.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_MORE_DATA</term>
            <term>
            If the buffer specified by the pbDecoded parameter is not large enough to hold the returned data, the function sets the
            ERROR_MORE_DATA code, and stores the required buffer size, in bytes, in the variable pointed to by pcbDecoded.
            </term>
            </item>
            <item>
            <term>E_INVALIDARG</term>
            <term>
            Invalid message and certificate encoding types. Currently only PKCS_7_ASN_ENCODING and X509_ASN_ENCODING_TYPE are supported.
            Invalid cbSize in *pVerifyPara.
            </term>
            </item>
            <item>
            <term>CRYPT_E_UNEXPECTED_MSG_TYPE</term>
            <term>Not a signed cryptographic message.</term>
            </item>
            <item>
            <term>CRYPT_E_NO_SIGNER</term>
            <term>The message does not have any signers or a signer for the specified dwSignerIndex.</term>
            </item>
            <item>
            <term>NTE_BAD_ALGID</term>
            <term>The message was hashed and signed by using an unknown or unsupported algorithm.</term>
            </item>
            <item>
            <term>NTE_BAD_SIGNATURE</term>
            <term>The message's signature was not verified.</term>
            </item>
            </list>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CMSG_CMS_SIGNER_INFO">
            <summary>
            The <c>CMSG_CMS_SIGNER_INFO</c> structure contains the content of the defined SignerInfo in signed or signed and enveloped
            messages. In decoding a received message, CryptMsgGetParam is called for each signer to get a <c>CMSG_CMS_SIGNER_INFO</c> structure.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_CMS_SIGNER_INFO.dwVersion">
            <summary>The version of this structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_CMS_SIGNER_INFO.SignerId">
            <summary>A CERT_ID structure that identifies the signer's certificate.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_CMS_SIGNER_INFO.HashAlgorithm">
            <summary>A CRYPT_ALGORITHM_IDENTIFIER structure that specifies the algorithm used in generating the hash of a message.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_CMS_SIGNER_INFO.HashEncryptionAlgorithm">
            <summary>A CRYPT_ALGORITHM_IDENTIFIER structure that specifies the algorithm used to encrypt the hash.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_CMS_SIGNER_INFO.EncryptedHash">
            <summary>A CRYPT_DATA_BLOB structure that contains the encrypted hash of the message, the signature.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_CMS_SIGNER_INFO.AuthAttrs">
            <summary>A CRYPT_ATTRIBUTES structure that contains authenticated attributes of the signer.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_CMS_SIGNER_INFO.UnauthAttrs">
            <summary>A CRYPT_ATTRIBUTES structure that contains unauthenticated attributes of the signer.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA">
            <summary>
            The <c>CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA</c> structure is used to add an unauthenticated attribute to a signer of a signed
            message. This structure is passed to CryptMsgControl if the dwCtrlType parameter is set to <c>CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR</c>.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA.cbSize">
            <summary>Size of this structure in bytes.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA.dwSignerIndex">
            <summary>
            Index of the signer in the <c>rgSigners</c> array of pointers of CMSG_SIGNER_ENCODE_INFO structures in a signed message's
            CMSG_SIGNED_ENCODE_INFO structure. The unauthenticated attribute is to be added to this signer's information.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA.blob">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CMSG_CTRL_DECRYPT_PARA">
            <summary>
            <para>
            The <c>CMSG_CTRL_DECRYPT_PARA</c> structure contains information used to decrypt an enveloped message for a key transport
            recipient. This structure is passed to CryptMsgControl if the dwCtrlType parameter is CMSG_CTRL_DECRYPT.
            </para>
            <para>
            For information about how CryptoAPI supports Secure/Multipurpose Internet Mail Extensions (S/MIME) email interoperability, see
            the Remarks section of CryptMsgOpenToEncode.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_CTRL_DECRYPT_PARA.cbSize">
            <summary>The size, in bytes, of this structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_CTRL_DECRYPT_PARA.Handle">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CMSG_CTRL_DECRYPT_PARA.CMSG_CTRL_DECRYPT_PARA_HANDLES">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_CTRL_DECRYPT_PARA.CMSG_CTRL_DECRYPT_PARA_HANDLES.hCryptProv">
            <summary>
            Cryptographic service provider (CSP) handle. The CNG function NCryptIsKeyHandle is called to determine the union choice.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_CTRL_DECRYPT_PARA.CMSG_CTRL_DECRYPT_PARA_HANDLES.hNCryptKey">
            <summary>
            A handle to the CNG Cryptographic service provider (CSP). The CNG function, NCryptIsKeyHandle, is called to determine
            the union choice. New encrypt algorithms are only supported in CNG functions. The CNG function, NCryptTranslateHandle,
            will be called to convert the CryptoAPI hCryptProv choice where necessary. We recommend that applications pass, to the
            hNCryptKey member, the CNG CSP handle that is returned from the NCryptOpenKey function.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_CTRL_DECRYPT_PARA.dwKeySpec">
            <summary>
            <para>The private key to be used. This member is not used when the hNCryptKey member is used.</para>
            <para>The following <c>dwKeySpec</c> values are defined for the default provider.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>AT_KEYEXCHANGE</term>
            <term>Keys used to encrypt and decrypt session keys.</term>
            </item>
            <item>
            <term>AT_SIGNATURE</term>
            <term>Keys used to create and verify digital signatures.</term>
            </item>
            </list>
            <para>If <c>dwKeySpec</c> is zero, the default AT_KEYEXCHANGE is used.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_CTRL_DECRYPT_PARA.dwRecipientIndex">
            <summary>Index of the recipient in the message associated with the <c>hCryptProv</c> private key.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA">
            <summary>
            The <c>CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA</c> structure is used to delete an unauthenticated attribute of a signer of a
            signed message. This structure is passed to CryptMsgControl if the dwCrlType parameter is <c>CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR</c>.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA.cbSize">
            <summary>Size of this structure in bytes.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA.dwSignerIndex">
            <summary>
            Index of the signer in the <c>rgSigners</c> array of pointers to CMSG_SIGNER_ENCODE_INFO structures in a signed message's
            CMSG_SIGNED_ENCODE_INFO structure. The unauthenticated attribute for this signer is deleted.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA.dwUnauthAttrIndex">
            <summary>
            Index of the element in the <c>rgUnauthAttr</c> array of the CMSG_SIGNER_ENCODE_INFO structure holding the unauthenticated
            attribute to be removed.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CMSG_CTRL_KEY_AGREE_DECRYPT_PARA">
            <summary>The <c>CMSG_CTRL_KEY_AGREE_DECRYPT_PARA</c> structure contains information about a key agreement recipient.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_CTRL_KEY_AGREE_DECRYPT_PARA.cbSize">
            <summary>The size, in bytes, of this data structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_CTRL_KEY_AGREE_DECRYPT_PARA.Handle">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CMSG_CTRL_KEY_AGREE_DECRYPT_PARA.CMSG_CTRL_KEY_AGREE_DECRYPT_PARA_HANDLES">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_CTRL_KEY_AGREE_DECRYPT_PARA.CMSG_CTRL_KEY_AGREE_DECRYPT_PARA_HANDLES.hCryptProv">
            <summary>
            A handle to the cryptographic service provider (CSP) used to do the recipient key encryption and export. If <c>NULL</c>,
            the provider specified in CMSG_ENVELOPED_ENCODE_INFO is used. The CNG function NCryptIsKeyHandle is called to determine
            the union choice.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_CTRL_KEY_AGREE_DECRYPT_PARA.CMSG_CTRL_KEY_AGREE_DECRYPT_PARA_HANDLES.hNCryptKey">
            <summary>
            A handle to the CNG CSP used to do the recipient key encryption and export. The CNG function NCryptIsKeyHandle is called
            to determine the union choice. New encrypt algorithms are only supported in CNG functions. The CNG function
            NCryptTranslateHandle will be called to convert the CryptoAPI CSP hCryptProv choice where necessary. We recommend that
            applications pass, to the hNCryptKey member, the CNG CSP handle that is returned from the NCryptOpenKey function.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_CTRL_KEY_AGREE_DECRYPT_PARA.dwKeySpec">
            <summary>
            Specifies the encrypted key. The encrypted key is the result of encrypting the content-encryption key. This member is not
            used when the hNCryptKey member is used.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_CTRL_KEY_AGREE_DECRYPT_PARA.pKeyAgree">
            <summary>A pointer to a CMSG_KEY_AGREE_RECIPIENT_INFO structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_CTRL_KEY_AGREE_DECRYPT_PARA.dwRecipientIndex">
            <summary>Indicates a specific recipient in an array of recipients.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_CTRL_KEY_AGREE_DECRYPT_PARA.dwRecipientEncryptedKeyIndex">
            <summary>Indicates a specific encrypted key in an array of encrypted keys.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_CTRL_KEY_AGREE_DECRYPT_PARA.OriginatorPublicKey">
            <summary>A CRYPT_BIT_BLOB structure that contains the sender's public key information.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CMSG_CTRL_KEY_TRANS_DECRYPT_PARA">
            <summary>The <c>CMSG_CTRL_KEY_TRANS_DECRYPT_PARA</c> structure contains information about a key transport message recipient.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_CTRL_KEY_TRANS_DECRYPT_PARA.cbSize">
            <summary>The size, in bytes, of this data structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_CTRL_KEY_TRANS_DECRYPT_PARA.Handle">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CMSG_CTRL_KEY_TRANS_DECRYPT_PARA.CMSG_CTRL_KEY_TRANS_DECRYPT_PARA_HANDLES">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_CTRL_KEY_TRANS_DECRYPT_PARA.CMSG_CTRL_KEY_TRANS_DECRYPT_PARA_HANDLES.hCryptProv">
            <summary>
            A handle to the cryptographic service provider (CSP) used to do the recipient key encryption and export. If <c>NULL</c>,
            the provider specified in CMSG_ENVELOPED_ENCODE_INFO is used. The CNG function NCryptIsKeyHandle is called to determine
            the union choice.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_CTRL_KEY_TRANS_DECRYPT_PARA.CMSG_CTRL_KEY_TRANS_DECRYPT_PARA_HANDLES.hNCryptKey">
            <summary>
            A handle to the CNG CSP used to do the recipient key encryption and export. The CNG function NCryptIsKeyHandle is called
            to determine the union choice. New encrypt algorithms are only supported in CNG functions. The CNG function
            NCryptTranslateHandle will be called to convert the CryptoAPI CSP hCryptProv choice where necessary. We recommend that
            applications pass, to the hNCryptKey member, the CNG CSP handle that is returned from the NCryptOpenKey function.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_CTRL_KEY_TRANS_DECRYPT_PARA.dwKeySpec">
            <summary>
            Specifies the encrypted key. The encrypted key is the result of encrypting the content-encryption key for a specific
            recipient by using that recipient's public key. This member is not used when the hNCryptKey member is used.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_CTRL_KEY_TRANS_DECRYPT_PARA.pKeyTrans">
            <summary>A pointer to a CMSG_KEY_TRANS_RECIPIENT_INFO structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_CTRL_KEY_TRANS_DECRYPT_PARA.dwRecipientIndex">
            <summary>Indicates a specific recipient in any array of recipients.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CMSG_CTRL_MAIL_LIST_DECRYPT_PARA">
            <summary>The <c>CMSG_CTRL_MAIL_LIST_DECRYPT_PARA</c> structure contains information on a mail list message recipient.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_CTRL_MAIL_LIST_DECRYPT_PARA.cbSize">
            <summary>The size, in bytes, of this data structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_CTRL_MAIL_LIST_DECRYPT_PARA.hCryptProv">
            <summary>
            The provider used to do the recipient key encryption and export. If <c>hCryptProv</c> is <c>NULL</c>, the provider specified
            in CMSG_ENVELOPED_ENCODE_INFO is used.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_CTRL_MAIL_LIST_DECRYPT_PARA.pMailList">
            <summary>A pointer to a CMSG_MAIL_LIST_RECIPIENT_INFO structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_CTRL_MAIL_LIST_DECRYPT_PARA.dwRecipientIndex">
            <summary>Indicates a specific recipient in any array of recipients.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_CTRL_MAIL_LIST_DECRYPT_PARA.dwKeyChoice">
            <summary>
            Indicates the member of the following union that will be used. Currently only CMSG_MAIL_LIST_HANDLE_KEY_CHOICE is defined.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_CTRL_MAIL_LIST_DECRYPT_PARA.hKeyEncryptionKey">
            <summary>Handle of the key encryption key. Used with <c>dwKeyChoice</c> set to CMSG_MAIL_LIST_HANDLE_KEY_CHOICE.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA">
            <summary>
            The <c>CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA</c> structure contains information used to verify a message signature. It contains the
            signer index and signer public key. The signer public key can be the signer's CERT_PUBLIC_KEY_INFO structure, certificate
            context, or chain context.
            </summary>
            <remarks>
            If <c>dwSignerType</c> is CMSG_VERIFY_SIGNER_NULL, the signature is expected to contain only the unencrypted hash octets.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA.cbSize">
            <summary>The size, in bytes, of this structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA.hCryptProv">
            <summary>
            <para>This member is not used and should be set to <c>NULL</c>.</para>
            <para>
            <c>Windows Server 2003 and Windows XP:</c> A handle to the cryptographic provider used to verify the signature. If
            <c>NULL</c>, the cryptographic provider specified in CryptMsgOpenToDecode is used. If the hCryptProv in
            <c>CryptMsgOpenToDecode</c> is also <c>NULL</c>, the default provider according to the signer's public key object identifier
            (OID) is used.This member's data type is <c>HCRYPTPROV</c>.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA.dwSignerIndex">
            <summary>The index of the signer in the message.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA.dwSignerType">
            <summary>
            <para>
            The structure that contains the signer information. The following table shows the predefined values and the structures indicated.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CMSG_VERIFY_SIGNER_PUBKEY</term>
            <term>CERT_PUBLIC_KEY_INFO</term>
            </item>
            <item>
            <term>CMSG_VERIFY_SIGNER_CERT</term>
            <term>CERT_CONTEXT</term>
            </item>
            <item>
            <term>CMSG_VERIFY_SIGNER_CHAIN</term>
            <term>CERT_CHAIN_CONTEXT</term>
            </item>
            <item>
            <term>CMSG_VERIFY_SIGNER_NULL</term>
            <term>NULL</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA.pvSigner">
            <summary>
            A pointer to a CERT_PUBLIC_KEY_INFO structure, a certificate context, a chain context, or <c>NULL</c> depending on the value
            of <c>dwSignerType</c>.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CMSG_KEY_AGREE_RECIPIENT_INFO">
            <summary>The <c>CMSG_KEY_AGREE_RECIPIENT_INFO</c> structure contains information used for key agreement algorithms.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_KEY_AGREE_RECIPIENT_INFO.dwVersion">
            <summary>A <c>DWORD</c> that indicates the version of the structure. Always set to three.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_KEY_AGREE_RECIPIENT_INFO.dwOriginatorChoice">
            <summary>A <c>DWORD</c> that indicates the key identifier to use.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_KEY_AGREE_RECIPIENT_INFO.Originator">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CMSG_KEY_AGREE_RECIPIENT_INFO.CMSG_KEY_AGREE_RECIPIENT_INFO_UNION">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_KEY_AGREE_RECIPIENT_INFO.CMSG_KEY_AGREE_RECIPIENT_INFO_UNION.OriginatorCertId">
            <summary>A CERT_ID that identifies the public key of the message originator.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_KEY_AGREE_RECIPIENT_INFO.CMSG_KEY_AGREE_RECIPIENT_INFO_UNION.OriginatorPublicKeyInfo">
            <summary>A CERT_PUBLIC_KEY_INFO structure that contains the public key of the message originator.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_KEY_AGREE_RECIPIENT_INFO.UserKeyingMaterial">
            <summary>
            A CRYPT_DATA_BLOB that indicates that a different key is generated each time the same two parties generate a pair of keys.
            The sender provides the bits of this BLOB with some key agreement algorithms. This member can be <c>NULL</c>.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_KEY_AGREE_RECIPIENT_INFO.KeyEncryptionAlgorithm">
            <summary>
            A CRYPT_ALGORITHM_IDENTIFIER that identifies the key-encryption algorithm and any associated parameters used to encrypt the
            content encryption key.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_KEY_AGREE_RECIPIENT_INFO.cRecipientEncryptedKeys">
            <summary>The number of elements in the <c>rgpRecipientEncryptedKeys</c> array.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_KEY_AGREE_RECIPIENT_INFO.rgpRecipientEncryptedKeys">
            <summary>
            The address of an array of CMSG_RECIPIENT_ENCRYPTED_KEY_INFO structures that contains information about the key recipients.
            The <c>cRecipientEncryptedKeys</c> member contains the number of elements in this array.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CMSG_KEY_TRANS_RECIPIENT_INFO">
            <summary>The <c>CMSG_KEY_TRANS_RECIPIENT_INFO</c> structure contains information used in key transport algorithms.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_KEY_TRANS_RECIPIENT_INFO.dwVersion">
            <summary>
            Indicates the version of the structure. If <c>RecipientId</c> uses the ISSUER_SERIAL_NUMBER to identify the recipient,
            <c>dwVersion</c> is set to zero. If <c>RecipientId</c> uses KEYID, <c>dwVersion</c> is set to two.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_KEY_TRANS_RECIPIENT_INFO.RecipientId">
            <summary>
            A CERT_ID that identifies the recipient. Currently, only ISSUER_SERIAL_NUMBER or KEYID choices in the <c>CERT_ID</c> are valid.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_KEY_TRANS_RECIPIENT_INFO.KeyEncryptionAlgorithm">
            <summary>
            A CRYPT_ALGORITHM_IDENTIFIER that identifies the key-encryption algorithm and any associated parameters used to encrypt the
            content encryption key.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_KEY_TRANS_RECIPIENT_INFO.EncryptedKey">
            <summary>A CRYPT_DATA_BLOB that contains the bytes of the encrypted session key.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CMSG_MAIL_LIST_RECIPIENT_INFO">
            <summary>
            The <c>CMSG_MAIL_LIST_RECIPIENT_INFO</c> structure contains information used for previously distributed symmetric key-encryption
            keys (KEK).
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_MAIL_LIST_RECIPIENT_INFO.dwVersion">
            <summary>Indicates the version of the structure. This member is always four.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_MAIL_LIST_RECIPIENT_INFO.KeyId">
            <summary>
            A CRYPT_DATA_BLOB structure that identifies a symmetric key-encryption key previously distributed to the sender and one or
            more recipients.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_MAIL_LIST_RECIPIENT_INFO.KeyEncryptionAlgorithm">
            <summary>
            CRYPT_ALGORITHM_IDENTIFIER that identifies the key-encryption algorithm and any associated parameters used to encrypt the
            content encryption key.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_MAIL_LIST_RECIPIENT_INFO.EncryptedKey">
            <summary>A CRYPT_DATA_BLOB structure that contains the encrypted content encryption key.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_MAIL_LIST_RECIPIENT_INFO.Date">
            <summary>Optional. When present, this member specifies a single key-encryption key from a previously distributed set.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_MAIL_LIST_RECIPIENT_INFO.pOtherAttr">
            <summary>Optional pointer to a CRYPT_ATTRIBUTE_TYPE_VALUE structure containing additional information.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CMSG_RECIPIENT_ENCRYPTED_KEY_INFO">
            <summary>
            The <c>CMSG_RECIPIENT_ENCRYPTED_KEY_INFO</c> structure contains information used for an individual key agreement recipient.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_RECIPIENT_ENCRYPTED_KEY_INFO.RecipientId">
            <summary>
            CERT_ID structure identifying the recipient. Currently, only the ISSUER_SERIAL_NUMBER or KEYID choices in the <c>CERT_ID</c>
            structure are valid.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_RECIPIENT_ENCRYPTED_KEY_INFO.EncryptedKey">
            <summary>A CRYPT_DATA_BLOB structure that contains the encrypted content encryption key.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_RECIPIENT_ENCRYPTED_KEY_INFO.Date">
            <summary>
            Optional. When present, this member specifies which of the recipient's previously distributed UKMs was used by the sender.
            Only applicable to KEYID choice in the <c>RecipientId</c> CERT_ID structure.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_RECIPIENT_ENCRYPTED_KEY_INFO.pOtherAttr">
            <summary>
            Optional pointer to a CRYPT_ATTRIBUTE_TYPE_VALUE structure containing additional information. Only applicable to KEYID
            choice in the <c>RecipientId</c> CERT_ID structure.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CMSG_SIGNER_ENCODE_INFO">
            <summary>
            The <c>CMSG_SIGNER_ENCODE_INFO</c> structure contains signer information. It is passed to CryptMsgCountersign,
            CryptMsgCountersignEncoded, and optionally to CryptMsgOpenToEncode as a member of the CMSG_SIGNED_ENCODE_INFO structure, if the
            dwMsgType parameter is CMSG_SIGNED.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_SIGNER_ENCODE_INFO.cbSize">
            <summary>The size, in bytes, of this structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_SIGNER_ENCODE_INFO.pCertInfo">
            <summary>
            <para>A pointer to a CERT_INFO structure that contains the</para>
            <para><c>Issuer</c>, <c>SerialNumber</c>, and <c>SubjectPublicKeyInfo</c> members.</para>
            <para>
            The <c>pbData</c> members of the <c>Issuer</c> and <c>SerialNumber</c> structures combined uniquely identify a certificate.
            The <c>Algorithm</c> member of the <c>SubjectPublicKeyInfo</c> structure specifies the hash encryption algorithm used.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_SIGNER_ENCODE_INFO.Handle">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CMSG_SIGNER_ENCODE_INFO.CMSG_SIGNER_ENCODE_INFO_HANDLES">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_SIGNER_ENCODE_INFO.CMSG_SIGNER_ENCODE_INFO_HANDLES.hCryptProv">
            <summary>
            A handle to the cryptographic service provider (CSP). If <c>HashEncryptionAlgorithm</c> is set to
            szOID_PKIX_NO_SIGNATURE, this handle can be the handle of a CSP acquired by using the dwFlags parameter set to
            <c>CRYPT_VERIFYCONTEXT</c>. The CNG function NCryptIsKeyHandle is called to determine the union choice.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_SIGNER_ENCODE_INFO.CMSG_SIGNER_ENCODE_INFO_HANDLES.hNCryptKey">
            <summary>
            A handle to the CNG CSP. The CNG function NCryptIsKeyHandle is called to determine the union choice. New encrypt
            algorithms are only supported in CNG functions. The CNG function NCryptTranslateHandle will be called to convert the
            CryptoAPI hCryptProv choice where necessary. We recommend that applications pass, to the hNCryptKey member, the CNG CSP
            handle that is returned from the NCryptOpenKey function.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_SIGNER_ENCODE_INFO.CMSG_SIGNER_ENCODE_INFO_HANDLES.hBCryptKey">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_SIGNER_ENCODE_INFO.dwKeySpec">
            <summary>
            <para>Specifies the private key to be used. This member is not used when the hNCryptKey member is used.</para>
            <para>If <c>dwKeySpec</c> is zero, then the default AT_KEYEXCHANGE value is used.</para>
            <para>The following <c>dwKeySpec</c> values are defined for the default provider.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>AT_KEYEXCHANGE</term>
            <term>Keys used to encrypt/decrypt session keys.</term>
            </item>
            <item>
            <term>AT_SIGNATURE</term>
            <term>Keys used to create and verify digital signatures.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_SIGNER_ENCODE_INFO.HashAlgorithm">
            <summary>A CRYPT_ALGORITHM_IDENTIFIER structure that specifies the hash algorithm.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_SIGNER_ENCODE_INFO.pvHashAuxInfo">
            <summary>Not used. This member must be set to <c>NULL</c>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_SIGNER_ENCODE_INFO.cAuthAttr">
            <summary>
            The number of elements in the <c>rgAuthAttr</c> array. If no authenticated attributes are present in <c>rgAuthAttr</c>, then
            <c>cAuthAttr</c> is zero.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_SIGNER_ENCODE_INFO.rgAuthAttr">
            <summary>
            <para>An array of pointers to CRYPT_ATTRIBUTE structures, each of which contains authenticated attribute information.</para>
            <para>
            The PKCS #9 standard dictates that if there are any attributes, there must be at least two: the content type object
            identifier (OID) and the hash of the message. These attributes are automatically added by the system.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_SIGNER_ENCODE_INFO.cUnauthAttr">
            <summary>
            The number of elements in the <c>rgUnauthAttr</c> array. If there are no unauthenticated attributes, <c>cUnauthAttr</c> is zero.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_SIGNER_ENCODE_INFO.rgUnauthAttr">
            <summary>
            An array of pointers to CRYPT_ATTRIBUTE structures, each of which contains unauthenticated attribute information.
            Unauthenticated attributes can contain countersignatures, among other uses.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_SIGNER_ENCODE_INFO.SignerId">
            <summary>
            A CERT_ID structure that contains a unique identifier of the signer's certificate. This member can optionally be used with
            PKCS #7 with Cryptographic Message Syntax (CMS). If this member is not <c>NULL</c> and its <c>dwIdChoice</c> member is not
            zero, it is used to identify the certificate instead of the <c>Issuer</c> and <c>SerialNumber</c> members of the CERT_INFO
            structure pointed to by <c>pCertInfo</c>. CMS supports the KEY_IDENTIFIER and ISSUER_SERIAL_NUMBER CERT_ID structures. PKCS
            version 1.5 supports only the ISSUER_SERIAL_NUMBER CERT_ID choice. This member is used with CMS for PKCS #7 processing and
            can be used only if CMSG_SIGNER_ENCODE_INFO_HAS_CMS_FIELDS is defined.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_SIGNER_ENCODE_INFO.HashEncryptionAlgorithm">
            <summary>
            <para>
            A CRYPT_ALGORITHM_IDENTIFIER structure optionally used with PKCS #7 with CMS. If this member is not <c>NULL</c>, the
            algorithm identified is used instead of the SubjectPublicKeyInfo.Algorithm algorithm. If this member is set to
            szOID_PKIX_NO_SIGNATURE, the signature value contains only the hash octets.
            </para>
            <para>
            For RSA, the hash encryption algorithm is normally the same as the public key algorithm. For DSA, the hash encryption
            algorithm is normally a DSS signature algorithm.
            </para>
            <para>
            This member is used with CMS for PKCS #7 processing and can be used only if CMSG_SIGNER_ENCODE_INFO_HAS_CMS_FIELDS is defined.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_SIGNER_ENCODE_INFO.pvHashEncryptionAuxInfo">
            <summary>
            This member is not used. This member must be set to <c>NULL</c> if it is present in the data structure. This member is
            present only if CMSG_SIGNER_ENCODE_INFO_HAS_CMS_FIELDS is defined.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CMSG_SIGNER_INFO">
            <summary>
            The <c>CMSG_SIGNER_INFO</c> structure contains the content of the PKCS #7 defined SignerInfo in signed messages. In decoding a
            received message, CryptMsgGetParam is called for each signer to get a <c>CMSG_SIGNER_INFO</c> structure.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_SIGNER_INFO.dwVersion">
            <summary>The version of this structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_SIGNER_INFO.Issuer">
            <summary>A CERT_NAME_BLOB structure that contains the issuer of a certificate with the public key needed to verify a signature.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_SIGNER_INFO.SerialNumber">
            <summary>
            A CRYPT_INTEGER_BLOB structure that contains the serial number of the certificate that contains the public key needed to
            verify a signature. For more information, see CERT_INFO.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_SIGNER_INFO.HashAlgorithm">
            <summary>CRYPT_ALGORITHM_IDENTIFIER structure specifying the algorithm used in generating the hash of a message.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_SIGNER_INFO.HashEncryptionAlgorithm">
            <summary>CRYPT_ALGORITHM_IDENTIFIER structure specifying the algorithm used to encrypt the hash.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_SIGNER_INFO.EncryptedHash">
            <summary>A CRYPT_DATA_BLOB that contains the encrypted hash of the message, the signature.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_SIGNER_INFO.AuthAttrs">
            <summary>CRYPT_ATTRIBUTES structure containing authenticated attributes of the signer.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_SIGNER_INFO.UnauthAttrs">
            <summary>CRYPT_ATTRIBUTES structure containing unauthenticated attributes of the signer.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CMSG_STREAM_INFO">
            <summary>
            <para>
            The <c>CMSG_STREAM_INFO</c> structure is used to enable stream processing of data rather than single block processing. Stream
            processing is most often used when processing large messages. Stream-processed messages can originate from any serialized source
            such as a file on a hard disk, a server, or a CD ROM.
            </para>
            <para>This structure is passed to the CryptMsgOpenToEncode and CryptMsgOpenToDecode functions.</para>
            </summary>
            <remarks>
            <para>
            Messages can be so large that processing them all at once by storing the whole message in memory can be difficult, if not
            impossible. It is possible to process large messages without encountering memory limitations by streaming the data that is to be
            processed into manageable sized blocks. The low-level message functions can be used with streaming to encode or decode a
            message. Any level of nesting of messages is supported when streaming to encode and streaming to decode.
            </para>
            <para>
            The input message to be processed as a stream feeds into CryptMsgUpdate one block at a time, with the application determining
            the size of the block. As the streamed message is processed for encoding or decoding, the resulting output data is passed back
            to the application through an application-specified callback function that is specified by the <c>pfnStreamOutput</c> member.
            </para>
            <para>
            No assumptions can be made about the block size of the output data because the size can vary for several reasons, such as the
            jitter in output block size caused by the block size for the encryption algorithm when processing an enveloped message, or when
            blocks that contain the message header and the SignerInfo as defined by PKCS # 7 are processed.
            </para>
            <para>
            The size of the output block is passed to the callback function in its cbData parameter. The use of output data is determined in
            the calling application. Typically, output from stream processing will not be persisted in memory as a whole due to memory
            limitations; rather, it will be serialized to a disk or server file.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_STREAM_INFO.cbContent">
            <summary>
            Specifies the size, in bytes, of the content. Normal Distinguished Encoding Rules (DER) encoding is used unless
            <c>CMSG_INDEFINITE_LENGTH</c>(0xFFFFFFFF) is passed, indicating that the application is not specifying the content length.
            This forces the use of indefinite-length Basic Encoding Rules (BER) encoding.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_STREAM_INFO.pfnStreamOutput">
            <summary>
            <para>The address of a callback function used to read from and write data to a disk when processing large messages.</para>
            <para>The callback function must have the following signature and parameters:</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_STREAM_INFO.pvArg">
            <summary>
            A pointer to the argument to pass to the callback function. Typically, this is used for state data that includes the handle
            to a more deeply nested message (when decoding) or a less deeply nested message (when encoding).
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CRYPT_DECRYPT_MESSAGE_PARA">
            <summary>The <c>CRYPT_DECRYPT_MESSAGE_PARA</c> structure contains information for decrypting messages.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_DECRYPT_MESSAGE_PARA.cbSize">
            <summary>Size of this structure in bytes.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_DECRYPT_MESSAGE_PARA.dwMsgAndCertEncodingType">
            <summary>
            <para>
            Type of encoding used. It is always acceptable to specify both the certificate and message encoding types by combining them
            with a bitwise- <c>OR</c> operation as shown in the following example:
            </para>
            <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING</para>
            <para>Currently defined encoding types are:</para>
            <list type="bullet">
            <item>
            <term>X509_ASN_ENCODING</term>
            </item>
            <item>
            <term>PKCS_7_ASN_ENCODING</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_DECRYPT_MESSAGE_PARA.cCertStore">
            <summary>Number of elements in the <c>rghCertStore</c> array.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_DECRYPT_MESSAGE_PARA.rghCertStore">
            <summary>
            <para>Array of certificate store handles.</para>
            <para>
            These certificate store handles are used to obtain the certificate context to use for decrypting a message. For more
            information, see the decryption functions CryptDecryptMessage, and CryptDecryptAndVerifyMessageSignature. An encrypted
            message can have one or more recipients. The recipients are identified by a unique certificate identifier, often the hash of
            the certificate issuer and serial number. The certificate stores are searched to find a certificate context corresponding to
            the unique identifier.
            </para>
            <para>
            Recipients can also be identified by their KeyId. Both Key Agreement (Diffie-Hellman) and Key Transport (RSA) recipients are supported.
            </para>
            <para>
            Only certificate contexts in the store with one of the following properties, CERT_KEY_PROV_INFO_PROP_ID, or
            CERT_KEY_CONTEXT_PROP_ID can be used. These properties specify the location of a needed private exchange key.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_DECRYPT_MESSAGE_PARA.dwFlags">
            <summary>
            The CRYPT_MESSAGE_SILENT_KEYSET_FLAG can be set to suppress any UI by the CSP. For more information about the CRYPT_SILENT
            flag, see CryptAcquireContext.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CRYPT_ENCRYPT_MESSAGE_PARA">
            <summary>The <c>CRYPT_ENCRYPT_MESSAGE_PARA</c> structure contains information used to encrypt messages.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_ENCRYPT_MESSAGE_PARA.cbSize">
            <summary>The size, in bytes, of this structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_ENCRYPT_MESSAGE_PARA.dwMsgEncodingType">
            <summary>
            <para>
            The type of encoding used. It is always acceptable to specify both the certificate and message encoding types by combining
            them with a bitwise- <c>OR</c> operation as shown in the following example:
            </para>
            <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING</para>
            <para>Currently defined encoding types are:</para>
            <list type="bullet">
            <item>
            <term>X509_ASN_ENCODING</term>
            </item>
            <item>
            <term>PKCS_7_ASN_ENCODING</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_ENCRYPT_MESSAGE_PARA.hCryptProv">
            <summary>
            <para>This member is not used and should be set to <c>NULL</c>.</para>
            <para>
            <c>Windows Server 2003 and Windows XP:</c> The handle to the cryptographic service provider (CSP) to be used for encryption.
            The CSP identified by <c>hCryptProv</c> is used to do content encryption, recipient key encryption, and recipient key
            export. Its private key is not used.
            </para>
            <para>
            Unless there is a strong reason for passing in a specific cryptographic provider in <c>hCryptProv</c>, pass zero to use the
            default RSA or DSS provider.
            </para>
            <para>This member's data type is <c>HCRYPTPROV</c>.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_ENCRYPT_MESSAGE_PARA.ContentEncryptionAlgorithm">
            <summary>
            <para>
            A CRYPT_ALGORITHM_IDENTIFIER structure that contains the object identifier (OID) of the encryption algorithm to use. The CSP
            specified by the <c>hCryptProv</c> must support this encryption algorithm.
            </para>
            <para>
            The <c>szOID_OIWSEC_desCBC</c> (CALG_DES) and <c>szOID_RSA_DES_EDE3_CBC</c> (CALG_3DES) encryption algorithms require the
            <c>Parameters</c> member of this structure to contain an encoded eight-byte initialization vector (IV). If the <c>cbData</c>
            member of the <c>Parameters</c> member is zero, an Abstract Syntax Notation One (ASN.1)-encoded OCTET STRING that contains
            the IV is generated using CryptGenRandom. For more information about the KP_IV parameter, see CryptSetKeyParam.
            </para>
            <para>
            The <c>szOID_NIST_AES128_CBC</c> (BCRYPT_AES_ALGORITHM, 128 bit), <c>szOID_NIST_AES192_CBC</c> (BCRYPT_AES_ALGORITHM, 192
            bit), and <c>szOID_NIST_AES256_CBC</c> (BCRYPT_AES_ALGORITHM, 256 bit) encryption algorithms require the <c>Parameters</c>
            member of this structure to contain an encoded sixteen-byte initialization vector (IV). If the <c>cbData</c> member of the
            Parameters member is zero, an Abstract Syntax Notation One (ASN.1)-encoded OCTET STRING that contains the IV is generated.
            </para>
            <para>
            The <c>szOID_RSA_RC2CBC</c> (CALG_RC2) algorithm requires the <c>pbData</c> member of the <c>Parameters</c> member of this
            structure to be a CRYPT_RC2_CBC_PARAMETERS structure. If the <c>cbData</c> member of the <c>Parameters</c> member is zero,
            an ASN.1-encoded <c>CRYPT_RC2_CBC_PARAMETERS</c> structure that contains the IV is generated as the <c>pbData</c> member.
            This generated <c>pbData</c> uses the default <c>dwVersion</c> that corresponds to the 40-bit key length. To override the
            default 40-bit key length, <c>pvEncryptionAuxInfo</c> can be set to point to a CMSG_RC2_AUX_INFO structure that contains a
            key bit length.
            </para>
            <para>
            <c>Note</c> When a message is decrypted, if it has an initialization vector parameter, the cryptographic message functions
            call CryptSetKeyParam with the initialization vector before decrypting.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_ENCRYPT_MESSAGE_PARA.pvEncryptionAuxInfo">
            <summary>
            <para>
            A pointer to a CMSG_RC2_AUX_INFO structure for RC2 encryption or a CMSG_SP3_COMPATIBLE_AUX_INFO structure for SP3-compatible
            encryption. For other than RC2 or SP3-compatible encryption, this member must be set to <c>NULL</c>.
            </para>
            <para>
            If the <c>ContentEncryptionAlgorithm</c> member contains <c>szOID_RSA_RC4</c>, this member points to a CMSG_RC4_AUX_INFO
            structure that specifies the number of salt bytes to be included.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_ENCRYPT_MESSAGE_PARA.dwFlags">
            <summary>
            <para>
            Normally set to zero. However, if the encoded output is to be a CMSG_ENVELOPED inner content of an outer cryptographic
            message, such as a CMSG_SIGNED message, the CRYPT_MESSAGE_BARE_CONTENT_OUT_FLAG must be set. If it is not set, content will
            be encoded as an inner content type of CMSG_DATA.
            </para>
            <para>
            CRYPT_MESSAGE_ENCAPSULATED_CONTENT_OUT_FLAG can be set to encapsulate non-data inner content within an OCTET STRING before encrypting.
            </para>
            <para>
            CRYPT_MESSAGE_KEYID_RECIPIENT_FLAG can be set to identify recipients by their Key Identifier and not their Issuer and Serial Number.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_ENCRYPT_MESSAGE_PARA.dwInnerContentType">
            <summary>
            Normally set to zero. The <c>dwInnerContentType</c> member must be set to set the cryptographic message types if the input
            to be encrypted is the encoded output of another cryptographic message such as CMSG_SIGNED.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CRYPT_HASH_MESSAGE_PARA">
            <summary>The <c>CRYPT_HASH_MESSAGE_PARA</c> structure contains data for hashing messages.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_HASH_MESSAGE_PARA.cbSize">
            <summary>Size of this structure in bytes.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_HASH_MESSAGE_PARA.dwMsgEncodingType">
            <summary>
            <para>
            Type of encoding used. It is always acceptable to specify both the certificate and message encoding types by combining them
            with a bitwise- <c>OR</c> operation as shown in the following example:
            </para>
            <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING</para>
            <para>Currently defined encoding types are:</para>
            <list type="bullet">
            <item>
            <term>X509_ASN_ENCODING</term>
            </item>
            <item>
            <term>PKCS_7_ASN_ENCODING</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_HASH_MESSAGE_PARA.hCryptProv">
            <summary>
            <para>This member is not used and should be set to <c>NULL</c>.</para>
            <para>
            <c>Windows Server 2003 and Windows XP:</c> A handle to the cryptographic service provider (CSP) to be used.Unless there is a
            strong reason for passing in a specific cryptographic provider in <c>hCryptProv</c>, pass zero to use the default RSA or DSS provider.
            </para>
            <para>This member's data type is <c>HCRYPTPROV</c>.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_HASH_MESSAGE_PARA.HashAlgorithm">
            <summary>CRYPT_ALGORITHM_IDENTIFIER containing the algorithm for generating the hash of the message.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_HASH_MESSAGE_PARA.pvHashAuxInfo">
            <summary>Not currently used, and must be set to <c>NULL</c>.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CRYPT_KEY_SIGN_MESSAGE_PARA">
            <summary>
            The <c>CRYPT_KEY_SIGN_MESSAGE_PARA</c> structure contains information about the cryptographic service provider (CSP) and
            algorithms used to sign a message.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_KEY_SIGN_MESSAGE_PARA.cbSize">
            <summary>The size, in bytes, of this data structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_KEY_SIGN_MESSAGE_PARA.dwMsgAndCertEncodingType">
            <summary>
            <para>
            Specifies the type of message and certificate encoding used. This can be a combination of one or more of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>X509_ASN_ENCODING</term>
            <term>Specifies X.509 certificate encoding.</term>
            </item>
            <item>
            <term>PKCS_7_ASN_ENCODING</term>
            <term>Specifies PKCS 7 message encoding.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_KEY_SIGN_MESSAGE_PARA.Handle">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CRYPT_KEY_SIGN_MESSAGE_PARA.CRYPT_KEY_SIGN_MESSAGE_PARA_HANDLE">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_KEY_SIGN_MESSAGE_PARA.CRYPT_KEY_SIGN_MESSAGE_PARA_HANDLE.hCryptProv">
            <summary>
            The handle of the CSP to use to sign the message. The CryptAcquireContext function is called to obtain this handle.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_KEY_SIGN_MESSAGE_PARA.CRYPT_KEY_SIGN_MESSAGE_PARA_HANDLE.hNCryptKey">
            <summary>
            The handle of the Cryptography API: Next Generation (CNG) CSP to use to sign the message. CNG signature algorithms are
            only supported in CNG functions.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_KEY_SIGN_MESSAGE_PARA.dwKeySpec">
            <summary>
            <para>
            Identifies the type of private key to use to sign the message. This must be one of the following values. This member is
            ignored if a CNG key is passed in the hNCryptKey member.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>AT_KEYEXCHANGE</term>
            <term>Use the key exchange key.</term>
            </item>
            <item>
            <term>AT_SIGNATURE</term>
            <term>Use the digital signature key.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_KEY_SIGN_MESSAGE_PARA.HashAlgorithm">
            <summary>
            A CRYPT_ALGORITHM_IDENTIFIER structure that specifies the algorithm to use to generate the hash of the message. This must be
            a hash algorithm.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_KEY_SIGN_MESSAGE_PARA.pvHashAuxInfo">
            <summary>This member is not used and must be set to <c>NULL</c>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_KEY_SIGN_MESSAGE_PARA.PubKeyAlgorithm">
            <summary>
            A CRYPT_ALGORITHM_IDENTIFIER structure that specifies the algorithm to use to sign the message. This must be either a public
            key or a signature algorithm.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CRYPT_KEY_VERIFY_MESSAGE_PARA">
            <summary>
            The <c>CRYPT_KEY_VERIFY_MESSAGE_PARA</c> structure contains information needed to verify signed messages without a certificate
            for the signer.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_KEY_VERIFY_MESSAGE_PARA.cbSize">
            <summary>The size, in bytes, of this structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_KEY_VERIFY_MESSAGE_PARA.dwMsgEncodingType">
            <summary>
            <para>
            Type of encoding used. It is always acceptable to specify both the certificate and message encoding types by combining them
            with a bitwise- <c>OR</c> operation as shown in the following example:
            </para>
            <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING</para>
            <para>Currently defined encoding types are:</para>
            <list type="bullet">
            <item>
            <term>X509_ASN_ENCODING</term>
            </item>
            <item>
            <term>PKCS_7_ASN_ENCODING</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_KEY_VERIFY_MESSAGE_PARA.hCryptProv">
            <summary>
            <para>This member is not used and should be set to <c>NULL</c>.</para>
            <para>
            <c>Windows Server 2003 and Windows XP:</c> A handle to the cryptographic service provider (CSP) to be used to verify a
            signed message. The CSP identified by this handle is used for hashing and for signature verification.Unless there is a
            strong reason for using a specific cryptographic provider, set this member to zero to use the default RSA or DSS provider.
            </para>
            <para>This member's data type is <c>HCRYPTPROV</c>.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CRYPT_SIGN_MESSAGE_PARA">
            <summary>
            The <c>CRYPT_SIGN_MESSAGE_PARA</c> structure contains information for signing messages using a specified signing certificate context.
            </summary>
            <remarks>
            The <c>HashEncryptionAlgorithm</c> and <c>pvHashEncryptionAuxInfo</c> members can only be used if
            CRYPT_SIGN_MESSAGE_PARA_HAS_CMS_FIELDS is defined.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_SIGN_MESSAGE_PARA.cbSize">
            <summary>Size of this structure in bytes.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_SIGN_MESSAGE_PARA.dwMsgEncodingType">
            <summary>
            <para>
            Type of encoding used. It is always acceptable to specify both the certificate and message encoding types by combining them
            with a bitwise- <c>OR</c> operation as shown in the following example:
            </para>
            <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING</para>
            <para>Currently defined encoding types are:</para>
            <list type="bullet">
            <item>
            <term>X509_ASN_ENCODING</term>
            </item>
            <item>
            <term>PKCS_7_ASN_ENCODING</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_SIGN_MESSAGE_PARA.pSigningCert">
            <summary>
            <para>A pointer to the CERT_CONTEXT to be used in the signing.</para>
            <para>
            Either the CERT_KEY_PROV_INFO_PROP_ID, or CERT_KEY_CONTEXT_PROP_ID property must be set for the context to provide access to
            the private signature key.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_SIGN_MESSAGE_PARA.HashAlgorithm">
            <summary>CRYPT_ALGORITHM_IDENTIFIER containing the hashing algorithm used to hash the data to be signed.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_SIGN_MESSAGE_PARA.pvHashAuxInfo">
            <summary>Not currently used, and must be set to <c>NULL</c>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_SIGN_MESSAGE_PARA.cMsgCert">
            <summary>
            Number of elements in the <c>rgpMsgCert</c> array of CERT_CONTEXT structures. If set to zero no certificates are included in
            the signed message.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_SIGN_MESSAGE_PARA.rgpMsgCert">
            <summary>
            Array of pointers to CERT_CONTEXT structures to be included in the signed message. If the <c>pSigningCert</c> is to be
            included, a pointer to it must be in the <c>rgpMsgCert</c> array.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_SIGN_MESSAGE_PARA.cMsgCrl">
            <summary>
            Number of elements in the <c>rgpMsgCrl</c> array of pointers to CRL_CONTEXT structures. If set to zero, no
            <c>CRL_CONTEXT</c> structures are included in the signed message.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_SIGN_MESSAGE_PARA.rgpMsgCrl">
            <summary>Array of pointers to CRL_CONTEXT structures to be included in the signed message.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_SIGN_MESSAGE_PARA.cAuthAttr">
            <summary>
            Number of elements in the <c>rgAuthAttr</c> array. If no authenticated attributes are present in <c>rgAuthAttr</c>, this
            member is set to zero.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_SIGN_MESSAGE_PARA.rgAuthAttr">
            <summary>
            Array of pointers to CRYPT_ATTRIBUTE structures, each holding authenticated attribute information. If there are
            authenticated attributes present, the PKCS #9 standard dictates that there must be at least two attributes present, the
            content type object identifier (OID), and the hash of the message itself. These attributes are automatically added by the system.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_SIGN_MESSAGE_PARA.cUnauthAttr">
            <summary>
            Number of elements in the <c>rgUnauthAttr</c> array. If no unauthenticated attributes are present in <c>rgUnauthAttr</c>,
            this member is zero.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_SIGN_MESSAGE_PARA.rgUnauthAttr">
            <summary>
            Array of pointers to CRYPT_ATTRIBUTE structures each holding an unauthenticated attribute information. Unauthenticated
            attributes can be used to contain countersignatures, among other uses.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_SIGN_MESSAGE_PARA.dwFlags">
            <summary>
            <para>
            Normally zero. If the encoded output is to be a CMSG_SIGNED inner content of an outer cryptographic message such as a
            CMSG_ENVELOPED message, the CRYPT_MESSAGE_BARE_CONTENT_OUT_FLAG must be set. If it is not set, the message will be encoded
            as an inner content type of CMSG_DATA.
            </para>
            <para>
            CRYPT_MESSAGE_ENCAPSULATED_CONTENT_OUT_FLAG can be set to encapsulate non-data inner content into an OCTET STRING.
            CRYPT_MESSAGE_KEYID_SIGNER_FLAG can be set to identify signers by their Key Identifier and not their Issuer and Serial Number.
            </para>
            <para>
            CRYPT_MESSAGE_SILENT_KEYSET_FLAG can be set to suppress any UI by the CSP. For more information about the CRYPT_SILENT flag,
            see CryptAcquireContext.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_SIGN_MESSAGE_PARA.dwInnerContentType">
            <summary>
            Normally zero. Set to the encoding type of the input message if that input to be signed is the encoded output of another
            cryptographic message.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_SIGN_MESSAGE_PARA.HashEncryptionAlgorithm">
            <summary>
            A CRYPT_ALGORITHM_IDENTIFIER. If present and not <c>NULL</c>, it is used instead of the signer's certificate
            <c>PublicKeyInfo.Algorithm</c> member. Note that for RSA, the hash encryption algorithm is normally the same as the public
            key algorithm. For DSA, the hash encryption algorithm is normally a DSS signature algorithm. This member can only be used if
            CRYPT_SIGN_MESSAGE_PARA_HAS_CMS_FIELDS is defined.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_SIGN_MESSAGE_PARA.pvHashEncryptionAuxInfo">
            <summary>
            Currently not used and must be set to <c>NULL</c>. This member can only be used if CRYPT_SIGN_MESSAGE_PARA_HAS_CMS_FIELDS is defined.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CRYPT_VERIFY_MESSAGE_PARA">
            <summary>The <c>CRYPT_VERIFY_MESSAGE_PARA</c> structure contains information needed to verify signed messages.</summary>
            <remarks>
            <para>This structure is passed to the following functions:</para>
            <list type="bullet">
            <item>
            <term>CryptDecodeMessage</term>
            </item>
            <item>
            <term>CryptDecryptAndVerifyMessageSignature</term>
            </item>
            <item>
            <term>CryptVerifyDetachedMessageSignature</term>
            </item>
            <item>
            <term>CryptVerifyMessageSignature</term>
            </item>
            </list>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_VERIFY_MESSAGE_PARA.cbSize">
            <summary>Size of this structure in bytes.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_VERIFY_MESSAGE_PARA.dwMsgAndCertEncodingType">
            <summary>
            <para>
            Type of encoding used. It is always acceptable to specify both the certificate and message encoding types by combining them
            with a bitwise- <c>OR</c> operation as shown in the following example:
            </para>
            <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING</para>
            <para>Currently defined encoding types are:</para>
            <list type="bullet">
            <item>
            <term>X509_ASN_ENCODING</term>
            </item>
            <item>
            <term>PKCS_7_ASN_ENCODING</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_VERIFY_MESSAGE_PARA.hCryptProv">
            <summary>
            <para>This member is not used and should be set to <c>NULL</c>.</para>
            <para>
            <c>Windows Server 2003 and Windows XP:</c> A handle to the cryptographic service provider to be used to verify a signed
            message. The CSP identified by this handle is used for hashing and for signature verification.Unless there is a strong
            reason for using a specific cryptographic provider, set to zero to use the default RSA or DSS provider.
            </para>
            <para>This member's data type is <c>HCRYPTPROV</c>.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_VERIFY_MESSAGE_PARA.pfnGetSignerCertificate">
            <summary>
            <para>
            A pointer to the callback function used to get the signer's certificate context. If <c>NULL</c>, the default callback is
            used. The default callback tries to get the signer certificate context from the message's certificate store.
            </para>
            <para>
            An application defined–callback function that gets the signer's certificate can be used in place of the default. It is
            passed the certificate identifier of the signer (its issuer and serial number) and a handle to its cryptographic signed
            message's certificate store.
            </para>
            <para>See CryptGetSignerCertificateCallback for the callback functions signature and arguments.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_VERIFY_MESSAGE_PARA.pvGetArg">
            <summary>Argument to pass to the callback function. Typically, this gets and verifies the message signer's certificate.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_VERIFY_MESSAGE_PARA.pStrongSignPara">
            <summary>
            <para>
            Optional pointer to a CERT_STRONG_SIGN_PARA structure that contains parameters used for strong signing. If you set this
            member and the function successfully verifies the signature, the function will then check for a strong signature. If the
            signature is not strong, the operation will fail and set the GetLastError value to <c>NTE_BAD_ALGID</c>.
            </para>
            <para>
            <c>Note</c> You can use the <c>pStrongSignPara</c> member only if <c>CRYPT_VERIFY_MESSAGE_PARA_HAS_EXTRA_FIELDS</c> is
            defined by using the <c>#define</c> directive before including Wincrypt.h. If
            <c>CRYPT_VERIFY_MESSAGE_PARA_HAS_EXTRA_FIELDS</c> is defined, you must zero all unused fields.
            </para>
            <para>Windows 8 and Windows Server 2012:</para>
            <para>Support for this member begins.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.SafeHCRYPTMSG">
            <summary>Provides a <see cref="T:System.Runtime.InteropServices.SafeHandle"/> for <see cref="T:Vanara.PInvoke.Crypt32.HCRYPTMSG"/> that is disposed using <see cref="M:Vanara.PInvoke.Crypt32.CryptMsgClose(Vanara.PInvoke.Crypt32.HCRYPTMSG)"/>.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.SafeHCRYPTMSG.#ctor(System.IntPtr,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Crypt32.SafeHCRYPTMSG"/> class and assigns an existing handle.</summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
            <param name="ownsHandle">
            <see langword="true"/> to reliably release the handle during the finalization phase; otherwise, <see langword="false"/> (not recommended).
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.SafeHCRYPTMSG.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Crypt32.SafeHCRYPTMSG"/> class.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.SafeHCRYPTMSG.op_Implicit(Vanara.PInvoke.Crypt32.SafeHCRYPTMSG)~Vanara.PInvoke.Crypt32.HCRYPTMSG">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.Crypt32.SafeHCRYPTMSG"/> to <see cref="T:Vanara.PInvoke.Crypt32.HCRYPTMSG"/>.</summary>
            <param name="h">The safe handle instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.SafeHCRYPTMSG.InternalReleaseHandle">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CryptDecodeFlags">
            <summary>Decoding options.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptDecodeFlags.CRYPT_DECODE_NOCOPY_FLAG">
            <summary>
            This flag can be set to indicate that "no copy" optimization is enabled. This optimization, where applicable, updates the
            pvStructInfo parameter to point to content residing within pbEncoded instead of making a copy of the content and appending
            it to pvStructInfo. For applicable cases, less memory needs to be allocated by the calling application and execution is
            faster because a copy is not being made. Note that the trade-off when performing a "no copy" decoding is that pbEncoded
            cannot be freed until pvStructInfo is freed.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptDecodeFlags.CRYPT_DECODE_TO_BE_SIGNED_FLAG">
            <summary>
            By default, the contents of the buffer pointed to by pbEncoded included the signed content and the signature. If this flag
            is set, the buffer includes only the "to be signed" content. This flag is applicable to X509_CERT_TO_BE_SIGNED,
            X509_CERT_CRL_TO_BE_SIGNED, X509_CRT_REQUEST_TO_BE_SIGNED, and X509_KEYGEN_REQUEST_TO_BE_SIGNED objects.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptDecodeFlags.CRYPT_DECODE_SHARE_OID_STRING_FLAG">
            <summary>
            When this flag is set, the OID stings are allocated in Crypt32.dll and shared instead of being copied into the returned data
            structure. This flag can be set if Crypt32.dll is not unloaded before the caller is unloaded.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptDecodeFlags.CRYPT_DECODE_NO_SIGNATURE_BYTE_REVERSAL_FLAG">
            <summary>By default, the signature bytes are reversed. If this flag is set, this byte reversal is inhibited.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptDecodeFlags.CRYPT_DECODE_ALLOC_FLAG">
            <summary>
            The called decoding function allocates memory for the decoded structure. A pointer to the allocated structure is returned in pvStructInfo.
            <para>
            If pDecodePara or the pfnAlloc member of pDecodePara is NULL, then LocalAlloc is called for the allocation and LocalFree
            must be called to free the memory.
            </para>
            <para>
            If pDecodePara and the pfnAlloc member of pDecodePara are not NULL, then the function pointed to by pfnAlloc is called for
            the allocation and the function pointed to by the pfnFree member of pDecodePara must be called to free the memory.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptDecodeFlags.CRYPT_UNICODE_NAME_DECODE_DISABLE_IE4_UTF8_FLAG">
            <summary>
            This flag is applicable when decoding X509_UNICODE_NAME, X509_UNICODE_NAME_VALUE, or X509_UNICODE_ANY_STRING. By default,
            CERT_RDN_T61_STRING encoded values are initially decoded as UTF8. If the UTF8 decoding fails, then the value is decoded as
            eight-bit characters. If this flag is set, it skips the initial attempt to decode the value as UTF8 and decodes the value as
            eight-bit characters.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptDecodeFlags.CRYPT_DECODE_ENABLE_PUNYCODE_FLAG">
            <summary>
            This flag is applicable for enabling Punycode decoding of Unicode string values. For more information, see Remarks.
            <para>Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP: This flag is not supported.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptDecodeFlags.CRYPT_DECODE_ENABLE_UTF8PERCENT_FLAG">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptDecodeFlags.CRYPT_DECODE_ENABLE_IA5CONVERSION_FLAG">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CryptEncodeFlags">
            <summary>Specifies options for the encoding.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptEncodeFlags.CRYPT_ENCODE_NO_SIGNATURE_BYTE_REVERSAL_FLAG">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptEncodeFlags.CRYPT_ENCODE_ALLOC_FLAG">
            <summary>
            The called encoding function allocates memory for the encoded bytes. A pointer to the allocated bytes is returned in pvEncoded.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptEncodeFlags.CRYPT_UNICODE_NAME_ENCODE_ENABLE_T61_UNICODE_FLAG">
            <summary> This flag is applicable when encoding X509_UNICODE_NAME. If this flag is set and all the Unicode characters are &lt;=
            0xFF, the CERT_RDN_T61_STRING is selected instead of the CERT_RDN_UNICODE_STRING. </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptEncodeFlags.CRYPT_UNICODE_NAME_ENCODE_ENABLE_UTF8_UNICODE_FLAG">
            <summary>
            This flag is applicable when encoding an X509_UNICODE_NAME. When set, CERT_RDN_UTF8_STRING is selected instead of CERT_RDN_UNICODE_STRING.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptEncodeFlags.CRYPT_UNICODE_NAME_ENCODE_FORCE_UTF8_UNICODE_FLAG">
            <summary>
            This flag is applicable when encoding an X509_UNICODE_NAME. When set, CERT_RDN_UTF8_STRING is selected instead of
            CERT_RDN_PRINTABLE_STRING for directory string types. Also, this flag enables CRYPT_UNICODE_NAME_ENCODE_ENABLE_UTF8_UNICODE_FLAG.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptEncodeFlags.CRYPT_UNICODE_NAME_ENCODE_DISABLE_CHECK_TYPE_FLAG">
            <summary>
            This flag is applicable when encoding X509_UNICODE_NAME, X509_UNICODE_NAME_VALUE, or X509_UNICODE_ANY_STRING. If this flag
            is set, the characters are not checked to determine whether they are valid for the specified value type.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptEncodeFlags.CRYPT_SORTED_CTL_ENCODE_HASHED_SUBJECT_IDENTIFIER_FLAG">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptEncodeFlags.CRYPT_ENCODE_ENABLE_PUNYCODE_FLAG">
            <summary>
            This flag is applicable for enabling Punycode encoding of Unicode string values. For more information, see Remarks.
            <para>Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP: This flag is not supported.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptEncodeFlags.CRYPT_ENCODE_ENABLE_UTF8PERCENT_FLAG">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptEncodeFlags.CRYPT_ENCODE_ENABLE_IA5CONVERSION_FLAG">
            <summary/>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptDecodeObject(Vanara.PInvoke.Crypt32.CertEncodingType,Vanara.PInvoke.Crypt32.SafeOID,System.IntPtr,System.UInt32,Vanara.PInvoke.Crypt32.CryptDecodeFlags,System.IntPtr,System.UInt32@)">
            <summary>
            The <c>CryptDecodeObject</c> function decodes a structure of the type indicated by the lpszStructType parameter. The use of
            CryptDecodeObjectEx is recommended as an API that performs the same function with significant performance improvements.
            </summary>
            <param name="dwCertEncodingType">
            <para>
            Type of encoding used. It is always acceptable to specify both the certificate and message encoding types by combining them with
            a bitwise- <c>OR</c> operation as shown in the following example:
            </para>
            <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING</para>
            <para>Currently defined encoding types are:</para>
            <list type="bullet">
            <item>
            <term>X509_ASN_ENCODING</term>
            </item>
            <item>
            <term>PKCS_7_ASN_ENCODING</term>
            </item>
            </list>
            <para>
            <c>Note</c> Either a certificate or message encoding type is required. X509_ASN_ENCODING is the default. If that type is
            indicated, it is used. Otherwise, if the PKCS7_ASN_ENCODING type is indicated, it is used.
            </para>
            </param>
            <param name="lpszStructType">
            <para>
            A pointer to an OID defining the structure type. If the high-order word of the lpszStructType parameter is zero, the low-order
            word specifies the integer identifier for the type of the specified structure. Otherwise, this parameter is a long pointer to a
            null-terminated string.
            </para>
            <para>
            For more information about object identifier strings, their predefined constants and corresponding structures, see Constants for
            CryptEncodeObject and CryptDecodeObject.
            </para>
            </param>
            <param name="pbEncoded">A pointer to the encoded structure to be decoded.</param>
            <param name="cbEncoded">Number of bytes pointed to by pbEncoded.</param>
            <param name="dwFlags">
            <para>The following flags are defined. They can be combined with a bitwise- <c>OR</c> operation.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPT_DECODE_NOCOPY_FLAG</term>
            <term>
            This flag can be set to indicate that "no copy" optimization is enabled. This optimization, where applicable, updates the
            pvStructInfo parameter to point to content residing within pbEncoded instead of making a copy of the content and appending it to
            pvStructInfo. For applicable cases, less memory needs to be allocated by the calling application and execution is faster because
            a copy is not being made. Note that the trade-off when performing a "no copy" decoding is that pbEncoded cannot be freed until
            pvStructInfo is freed.
            </term>
            </item>
            <item>
            <term>CRYPT_UNICODE_NAME_DECODE_DISABLE_IE4_UTF8_FLAG</term>
            <term>
            This flag is applicable when decoding X509_UNICODE_NAME, X509_UNICODE_NAME_VALUE, or X509_UNICODE_ANY_STRING. By default,
            CERT_RDN_T61_STRING encoded values are initially decoded as UTF8. If the UTF8 decoding fails, then the value is decoded as
            eight-bit characters. If this flag is set, it skips the initial attempt to decode the value as UTF8 and decodes the value as
            eight-bit characters.
            </term>
            </item>
            <item>
            <term>CRYPT_DECODE_TO_BE_SIGNED_FLAG</term>
            <term>
            By default, the contents of the buffer pointed to by pbEncoded included the signed content and the signature. If this flag is
            set, the buffer includes only the "to be signed" content. This flag is applicable to X509_CERT_TO_BE_SIGNED,
            X509_CERT_CRL_TO_BE_SIGNED, X509_CRT_REQUEST_TO_BE_SIGNED, and X509_KEYGEN_REQUEST_TO_BE_SIGNED objects.
            </term>
            </item>
            <item>
            <term>CRYPT_DECODE_SHARE_OID_STRING_FLAG</term>
            <term>
            When this flag is set, the OID stings are allocated in Crypt32.dll and shared instead of being copied into the returned data
            structure. This flag can be set if Crypt32.dll is not unloaded before the caller is unloaded.
            </term>
            </item>
            <item>
            <term>CRYPT_DECODE_NO_SIGNATURE_BYTE_REVERSAL_FLAG</term>
            <term>By default, the signature bytes are reversed. If this flag is set, this byte reversal is inhibited.</term>
            </item>
            </list>
            </param>
            <param name="pvStructInfo">
            <para>
            A pointer to a buffer to receive the decoded structure. When the buffer that is specified is not large enough to receive the
            decoded structure, the function sets the ERROR_MORE_DATA code and stores the required buffer size, in bytes, in the variable
            pointed to by pcbStructInfo.
            </para>
            <para>
            This parameter can be <c>NULL</c> to retrieve the size of this information for memory allocation purposes. For more information,
            see Retrieving Data of Unknown Length.
            </para>
            </param>
            <param name="pcbStructInfo">
            <para>
            A pointer to a <c>DWORD</c> value specifying the size, in bytes, of the buffer pointed to by the pvStructInfo parameter. When
            the function returns, this <c>DWORD</c> value contains the size of the decoded data copied to pvStructInfo. The size contained
            in the variable pointed to by pcbStructInfo can indicate a size larger than the decoded structure, as the decoded structure can
            include pointers to other structures. This size is the sum of the size needed by the decoded structure and other structures
            pointed to.
            </para>
            <para>
            <c>Note</c> When processing the data returned in the buffer, applications must use the actual size of the data returned. The
            actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually
            specified large enough to ensure that the largest possible output data fits in the buffer.) On output, the variable pointed to
            by this parameter is updated to reflect the actual size of the data copied to the buffer.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is nonzero ( <c>TRUE</c>).</para>
            <para>
            If the function fails, the return value is zero ( <c>FALSE</c>). For extended error information, call GetLastError. Some
            possible error codes are listed in the following table.
            </para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>CRYPT_E_BAD_ENCODE</term>
            <term>An error was encountered while decoding.</term>
            </item>
            <item>
            <term>ERROR_FILE_NOT_FOUND</term>
            <term>A decoding function could not be found for the specified dwCertEncodingType and lpszStructType</term>
            </item>
            <item>
            <term>ERROR_MORE_DATA</term>
            <term>
            If the buffer specified by the pvStructInfo parameter is not large enough to hold the returned data, the function sets the
            ERROR_MORE_DATA code and stores the required buffer size, in bytes, in the variable pointed to by pcbStructInfo.
            </term>
            </item>
            </list>
            <para>
            If the function fails, GetLastError may return an Abstract Syntax Notation One (ASN.1) encoding/decoding error. For information
            about these errors, see ASN.1 Encoding/Decoding Return Values.
            </para>
            </returns>
            <remarks>
            <para>
            When encoding a cryptographic object using the preferred CryptEncodeObjectEx function, the terminating <c>NULL</c> character is
            included. When decoding, using the preferred CryptDecodeObjectEx function, the terminating <c>NULL</c> character is not retained.
            </para>
            <para>Examples</para>
            <para>For an example that uses this function, see Example C Program: ASN.1 Encoding and Decoding.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptDecodeObjectEx(Vanara.PInvoke.Crypt32.CertEncodingType,Vanara.PInvoke.Crypt32.SafeOID,System.IntPtr,System.UInt32,Vanara.PInvoke.Crypt32.CryptDecodeFlags,Vanara.PInvoke.Crypt32.CRYPT_DECODE_PARA@,System.IntPtr,System.UInt32@)">
            <summary>
            The <c>CryptDecodeObjectEx</c> function decodes a structure of the type indicated by the lpszStructType parameter.
            <c>CryptDecodeObjectEx</c> offers a significant performance improvement over CryptDecodeObject by supporting memory allocation
            with the CRYPT_DECODE_ALLOC_FLAG value.
            </summary>
            <param name="dwCertEncodingType">
            <para>
            The type of encoding used. It is always acceptable to specify both the certificate and message encoding types by combining them
            with a bitwise- <c>OR</c> operation as shown in the following example:
            </para>
            <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING</para>
            <para>Currently defined encoding types are:</para>
            <list type="bullet">
            <item>
            <term>X509_ASN_ENCODING</term>
            </item>
            <item>
            <term>PKCS_7_ASN_ENCODING</term>
            </item>
            </list>
            <para>
            <c>Note</c> Either a certificate or message encoding type is required. X509_ASN_ENCODING is the default. If that type is
            indicated, it is used. Otherwise, if the PKCS7_ASN_ENCODING type is indicated, it is used.
            </para>
            </param>
            <param name="lpszStructType">
            <para>
            A pointer to an object identifier (OID) that defines the structure type. If the high-order word of the lpszStructType parameter
            is zero, the low-order word specifies the integer identifier for the type of the specified structure. Otherwise, this parameter
            is a long pointer to a null-terminated string.
            </para>
            <para>
            For more information about object identifier strings, their predefined constants, and corresponding structures, see Constants
            for CryptEncodeObject and CryptDecodeObject.
            </para>
            </param>
            <param name="pbEncoded">A pointer to the data to be decoded. The structure must be of the type specified by lpszStructType.</param>
            <param name="cbEncoded">The number of bytes pointed to by pbEncoded. This is the number of bytes to be decoded.</param>
            <param name="dwFlags">
            <para>This parameter can be one or more of the following flags. The flags can be combined by using a bitwise- <c>OR</c> operation.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPT_DECODE_ALLOC_FLAG</term>
            <term>
            The called decoding function allocates memory for the decoded structure. A pointer to the allocated structure is returned in
            pvStructInfo. If pDecodePara or the pfnAlloc member of pDecodePara is NULL, then LocalAlloc is called for the allocation and
            LocalFree must be called to free the memory. If pDecodePara and the pfnAlloc member of pDecodePara are not NULL, then the
            function pointed to by pfnAlloc is called for the allocation and the function pointed to by the pfnFree member of pDecodePara
            must be called to free the memory.
            </term>
            </item>
            <item>
            <term>CRYPT_DECODE_ENABLE_PUNYCODE_FLAG 33554432 (0x2000000)</term>
            <term>
            This flag is applicable for enabling Punycode decoding of Unicode string values. For more information, see Remarks. Windows
            Server 2008, Windows Vista, Windows Server 2003 and Windows XP: This flag is not supported.
            </term>
            </item>
            <item>
            <term>CRYPT_DECODE_NOCOPY_FLAG</term>
            <term>
            This flag can be set to enable a "no copy" optimization. This optimization updates the pvStructInfo members to point to content
            that resides within pbEncoded instead of making a copy of the content and appending it to pvStructInfo. The calling application
            needs to allocate less memory and execution is faster because a copy is not made. Note that when performing "no copy" decoding,
            pbEncoded cannot be freed until pvStructInfo is freed.
            </term>
            </item>
            <item>
            <term>CRYPT_UNICODE_NAME_DECODE_DISABLE_IE4_UTF8_FLAG</term>
            <term>
            This flag is applicable when decoding X509_UNICODE_NAME, X509_UNICODE_NAME_VALUE, or X509_UNICODE_ANY_STRING. By default,
            CERT_RDN_T61_STRING encoded values are initially decoded as UTF8. If the UTF8 decoding fails, then the value is decoded as
            eight-bit characters. If this flag is set, it skips the initial attempt to decode the value as UTF8 and decodes the value as
            eight-bit characters.
            </term>
            </item>
            <item>
            <term>CRYPT_DECODE_TO_BE_SIGNED_FLAG</term>
            <term>
            By default, the contents of the buffer pointed to by pbEncoded included the signed content and the signature. If this flag is
            set, the buffer includes only the "to be signed" content. This flag is applicable to X509_CERT_TO_BE_SIGNED,
            X509_CERT_CRL_TO_BE_SIGNED, X509_CRT_REQUEST_TO_BE_SIGNED, and X509_KEYGEN_REQUEST_TO_BE_SIGNED objects.
            </term>
            </item>
            <item>
            <term>CRYPT_DECODE_SHARE_OID_STRING_FLAG</term>
            <term>
            When this flag is set, the OID strings are allocated in Crypt32.dll and shared instead of being copied into the returned data
            structure. This flag can be set if Crypt32.dll is not unloaded before the caller is unloaded.
            </term>
            </item>
            <item>
            <term>CRYPT_DECODE_NO_SIGNATURE_BYTE_REVERSAL_FLAG</term>
            <term>By default, the signature bytes are reversed. If this flag is set, this byte reversal is inhibited.</term>
            </item>
            </list>
            </param>
            <param name="pDecodePara">
            A pointer to a CRYPT_DECODE_PARA structure that contains decoding paragraph information. If pDecodePara is set to <c>NULL</c>,
            then LocalAlloc and LocalFree are used to allocate and free memory. If pDecodePara points to a <c>CRYPT_DECODE_PARA</c>
            structure, that structure passes in callback functions to allocate and free memory. These callback functions override the
            default memory allocation of <c>LocalAlloc</c> and <c>LocalFree</c>.
            </param>
            <param name="pvStructInfo">
            <para>
            If the dwFlags CRYPT_ENCODE_ALLOC_FLAG is set, pvStructInfo is not a pointer to a buffer but is the address of a pointer to the
            buffer. Because memory is allocated inside the function and the pointer is stored at *pvStructInfo, pvStructInfo must never be <c>NULL</c>.
            </para>
            <para>
            If CRYPT_ENCODE_ALLOC_FLAG is not set, pvStructInfo is a pointer to a buffer that receives the decoded structure. When the
            buffer that is specified is not large enough to receive the decoded structure, the function sets the ERROR_MORE_DATA code and
            stores the required buffer size, in bytes, in the variable pointed to by pcbStructInfo.
            </para>
            <para>
            This parameter can be <c>NULL</c> to retrieve the size of this information for memory allocation purposes. For more information,
            see Retrieving Data of Unknown Length.
            </para>
            </param>
            <param name="pcbStructInfo">
            <para>
            A pointer to a <c>DWORD</c> variable that contains the size, in bytes, of the buffer pointed to by the pvStructInfo parameter.
            When the function returns, the <c>DWORD</c> value contains the number of bytes stored in the buffer. The size contained in the
            variable pointed to by pcbStructInfo can indicate a size larger than the decoded structure because the decoded structure can
            include pointers to auxiliary data. This size is the sum of the size needed by the decoded structure and the auxiliary data.
            </para>
            <para>
            When CRYPT_DECODE_ALLOC_FLAG is set, the initial value of *pcbStructInfo is not used by the function, and on return,
            *pcbStructInfo contains the number of bytes allocated for pvStructInfo.
            </para>
            <para>
            <c>Note</c> When processing the data returned in the buffer, applications must use the actual size of the data returned. The
            actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually
            specified large enough to ensure that the largest possible output data fits in the buffer.) On output, the variable pointed to
            by this parameter is updated to reflect the actual size of the data copied to the buffer.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the function returns nonzero ( <c>TRUE</c>).</para>
            <para>
            If the function fails, it returns zero ( <c>FALSE</c>). For extended error information, call GetLastError. The following table
            shows some possible error codes.
            </para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>CRYPT_E_BAD_ENCODE</term>
            <term>An error was encountered while decoding.</term>
            </item>
            <item>
            <term>ERROR_FILE_NOT_FOUND</term>
            <term>A decoding function could not be found for the specified dwCertEncodingType and lpszStructType.</term>
            </item>
            <item>
            <term>ERROR_MORE_DATA</term>
            <term>
            If the buffer specified by the pvStructInfo parameter is not large enough to hold the returned data, the function sets the
            ERROR_MORE_DATA code and stores the required buffer size, in bytes, in the variable pointed to by pcbStructInfo.
            </term>
            </item>
            </list>
            <para>
            If the function fails, GetLastError may return an Abstract Syntax Notation One (ASN.1) encoding/decoding error. For information
            about these errors, see ASN.1 Encoding/Decoding Return Values.
            </para>
            </returns>
            <remarks>
            <para>
            When encoding a cryptographic object using the preferred CryptEncodeObjectEx function, the terminating <c>NULL</c> character is
            included. When decoding, using the preferred <c>CryptDecodeObjectEx</c> function, the terminating <c>NULL</c> character is not retained.
            </para>
            <para>
            Each constant in the list below has an associated structure type that is pointed to by the pvStructInfo parameter. The structure
            pointed to, directly or indirectly, has a reference to a CERT_ALT_NAME_ENTRY structure.
            </para>
            <list type="bullet">
            <item>
            <term>X509_ALTERNATE_NAME</term>
            </item>
            <item>
            <term>szOID_AUTHORITY_INFO_ACCESS</term>
            </item>
            <item>
            <term>X509_AUTHORITY_INFO_ACCESS</term>
            </item>
            <item>
            <term>X509_AUTHORITY_KEY_ID2</term>
            </item>
            <item>
            <term>szOID_AUTHORITY_KEY_IDENTIFIER2</term>
            </item>
            <item>
            <term>szOID_CRL_DIST_POINTS</term>
            </item>
            <item>
            <term>X509_CRL_DIST_POINTS</term>
            </item>
            <item>
            <term>szOID_CROSS_CERT_DIST_POINTS</term>
            </item>
            <item>
            <term>X509_CROSS_CERT_DIST_POINTS</term>
            </item>
            <item>
            <term>szOID_ISSUER_ALT_NAME</term>
            </item>
            <item>
            <term>szOID_ISSUER_ALT_NAME2</term>
            </item>
            <item>
            <term>szOID_ISSUING_DIST_POINT</term>
            </item>
            <item>
            <term>X509_ISSUING_DIST_POINT</term>
            </item>
            <item>
            <term>X509_NAME_CONSTRAINTS</term>
            </item>
            <item>
            <term>szOID_NAME_CONSTRAINTS</term>
            </item>
            <item>
            <term>szOID_NEXT_UPDATE_LOCATION</term>
            </item>
            <item>
            <term>OCSP_REQUEST</term>
            </item>
            <item>
            <term>zOID_SUBJECT_ALT_NAME</term>
            </item>
            <item>
            <term>szOID_SUBJECT_ALT_NAME2</term>
            </item>
            </list>
            <para>
            The <c>CRYPT_DECODE_ENABLE_PUNYCODE_FLAG</c> flag, in conjunction with the value of the <c>dwAltNameChoice</c> member of the
            CERT_ALT_NAME_ENTRY structure, determines the manner in which strings are encoded.
            </para>
            <list type="table">
            <listheader>
            <term>dwAltNameChoice</term>
            <term>Effect</term>
            </listheader>
            <item>
            <term>CERT_ALT_NAME_DNS_NAME</term>
            <term>If the host name contains a Punycode encoded IA5String string, it is converted to the Unicode equivalent.</term>
            </item>
            <item>
            <term>CERT_ALT_NAME_RFC822_NAME</term>
            <term>
            If the host name portion of the email address contains a Punycode encoded IA5String string, it is converted to its Unicode equivalent.
            </term>
            </item>
            <item>
            <term>CERT_ALT_NAME_URL</term>
            <term>
            The URI is decoded. If the server host name of the URI contains a Punycode encoded IA5String string, the host name string is
            decoded to the Unicode equivalent.
            </term>
            </item>
            </list>
            <para>
            Each constant in the list below has an associated structure type that is pointed to by the pvStructInfo parameter. The structure
            pointed to, directly or indirectly, has a reference to a CERT_HASHED_URL structure.
            </para>
            <list type="bullet">
            <item>
            <term>szOID_LOGOTYPE_EXT</term>
            </item>
            <item>
            <term>X509_LOGOTYPE_EXT</term>
            </item>
            <item>
            <term>szOID_BIOMETRIC_EXT</term>
            </item>
            <item>
            <term>X509_BIOMETRIC_EXT</term>
            </item>
            </list>
            <para>
            When decoding the CERT_HASHED_URL structure value, the URI is decoded. If the host name contains a Punycode encoded host name,
            it is converted to the Unicode equivalent.
            </para>
            <para>
            Each <c>X509_UNICODE_NAME</c> constant in the list below has an associated structure type that is pointed to by the pvStructInfo parameter.
            </para>
            <list type="bullet">
            <item>
            <term>X509_UNICODE_NAME</term>
            </item>
            </list>
            <para>
            If the pszObjId member of the CERT_RDN_ATTR structure is set to <c>szOID_RSA_emailAddr</c> and the email address in the
            <c>Value</c> member contains Punycode encoded string, it is converted to the Unicode equivalent.
            </para>
            <para>Examples</para>
            <para>For an example that uses this function, see Example C Program: ASN.1 Encoding and Decoding.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptDecodeObjectEx(Vanara.PInvoke.Crypt32.CertEncodingType,Vanara.PInvoke.Crypt32.SafeOID,System.IntPtr,System.UInt32,Vanara.PInvoke.Crypt32.CryptDecodeFlags,System.IntPtr,System.IntPtr,System.UInt32@)">
            <summary>
            The <c>CryptDecodeObjectEx</c> function decodes a structure of the type indicated by the lpszStructType parameter.
            <c>CryptDecodeObjectEx</c> offers a significant performance improvement over CryptDecodeObject by supporting memory allocation
            with the CRYPT_DECODE_ALLOC_FLAG value.
            </summary>
            <param name="dwCertEncodingType">
            <para>
            The type of encoding used. It is always acceptable to specify both the certificate and message encoding types by combining them
            with a bitwise- <c>OR</c> operation as shown in the following example:
            </para>
            <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING</para>
            <para>Currently defined encoding types are:</para>
            <list type="bullet">
            <item>
            <term>X509_ASN_ENCODING</term>
            </item>
            <item>
            <term>PKCS_7_ASN_ENCODING</term>
            </item>
            </list>
            <para>
            <c>Note</c> Either a certificate or message encoding type is required. X509_ASN_ENCODING is the default. If that type is
            indicated, it is used. Otherwise, if the PKCS7_ASN_ENCODING type is indicated, it is used.
            </para>
            </param>
            <param name="lpszStructType">
            <para>
            A pointer to an object identifier (OID) that defines the structure type. If the high-order word of the lpszStructType parameter
            is zero, the low-order word specifies the integer identifier for the type of the specified structure. Otherwise, this parameter
            is a long pointer to a null-terminated string.
            </para>
            <para>
            For more information about object identifier strings, their predefined constants, and corresponding structures, see Constants
            for CryptEncodeObject and CryptDecodeObject.
            </para>
            </param>
            <param name="pbEncoded">A pointer to the data to be decoded. The structure must be of the type specified by lpszStructType.</param>
            <param name="cbEncoded">The number of bytes pointed to by pbEncoded. This is the number of bytes to be decoded.</param>
            <param name="dwFlags">
            <para>This parameter can be one or more of the following flags. The flags can be combined by using a bitwise- <c>OR</c> operation.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPT_DECODE_ALLOC_FLAG</term>
            <term>
            The called decoding function allocates memory for the decoded structure. A pointer to the allocated structure is returned in
            pvStructInfo. If pDecodePara or the pfnAlloc member of pDecodePara is NULL, then LocalAlloc is called for the allocation and
            LocalFree must be called to free the memory. If pDecodePara and the pfnAlloc member of pDecodePara are not NULL, then the
            function pointed to by pfnAlloc is called for the allocation and the function pointed to by the pfnFree member of pDecodePara
            must be called to free the memory.
            </term>
            </item>
            <item>
            <term>CRYPT_DECODE_ENABLE_PUNYCODE_FLAG 33554432 (0x2000000)</term>
            <term>
            This flag is applicable for enabling Punycode decoding of Unicode string values. For more information, see Remarks. Windows
            Server 2008, Windows Vista, Windows Server 2003 and Windows XP: This flag is not supported.
            </term>
            </item>
            <item>
            <term>CRYPT_DECODE_NOCOPY_FLAG</term>
            <term>
            This flag can be set to enable a "no copy" optimization. This optimization updates the pvStructInfo members to point to content
            that resides within pbEncoded instead of making a copy of the content and appending it to pvStructInfo. The calling application
            needs to allocate less memory and execution is faster because a copy is not made. Note that when performing "no copy" decoding,
            pbEncoded cannot be freed until pvStructInfo is freed.
            </term>
            </item>
            <item>
            <term>CRYPT_UNICODE_NAME_DECODE_DISABLE_IE4_UTF8_FLAG</term>
            <term>
            This flag is applicable when decoding X509_UNICODE_NAME, X509_UNICODE_NAME_VALUE, or X509_UNICODE_ANY_STRING. By default,
            CERT_RDN_T61_STRING encoded values are initially decoded as UTF8. If the UTF8 decoding fails, then the value is decoded as
            eight-bit characters. If this flag is set, it skips the initial attempt to decode the value as UTF8 and decodes the value as
            eight-bit characters.
            </term>
            </item>
            <item>
            <term>CRYPT_DECODE_TO_BE_SIGNED_FLAG</term>
            <term>
            By default, the contents of the buffer pointed to by pbEncoded included the signed content and the signature. If this flag is
            set, the buffer includes only the "to be signed" content. This flag is applicable to X509_CERT_TO_BE_SIGNED,
            X509_CERT_CRL_TO_BE_SIGNED, X509_CRT_REQUEST_TO_BE_SIGNED, and X509_KEYGEN_REQUEST_TO_BE_SIGNED objects.
            </term>
            </item>
            <item>
            <term>CRYPT_DECODE_SHARE_OID_STRING_FLAG</term>
            <term>
            When this flag is set, the OID strings are allocated in Crypt32.dll and shared instead of being copied into the returned data
            structure. This flag can be set if Crypt32.dll is not unloaded before the caller is unloaded.
            </term>
            </item>
            <item>
            <term>CRYPT_DECODE_NO_SIGNATURE_BYTE_REVERSAL_FLAG</term>
            <term>By default, the signature bytes are reversed. If this flag is set, this byte reversal is inhibited.</term>
            </item>
            </list>
            </param>
            <param name="pDecodePara">
            A pointer to a CRYPT_DECODE_PARA structure that contains decoding paragraph information. If pDecodePara is set to <c>NULL</c>,
            then LocalAlloc and LocalFree are used to allocate and free memory. If pDecodePara points to a <c>CRYPT_DECODE_PARA</c>
            structure, that structure passes in callback functions to allocate and free memory. These callback functions override the
            default memory allocation of <c>LocalAlloc</c> and <c>LocalFree</c>.
            </param>
            <param name="pvStructInfo">
            <para>
            If the dwFlags CRYPT_ENCODE_ALLOC_FLAG is set, pvStructInfo is not a pointer to a buffer but is the address of a pointer to the
            buffer. Because memory is allocated inside the function and the pointer is stored at *pvStructInfo, pvStructInfo must never be <c>NULL</c>.
            </para>
            <para>
            If CRYPT_ENCODE_ALLOC_FLAG is not set, pvStructInfo is a pointer to a buffer that receives the decoded structure. When the
            buffer that is specified is not large enough to receive the decoded structure, the function sets the ERROR_MORE_DATA code and
            stores the required buffer size, in bytes, in the variable pointed to by pcbStructInfo.
            </para>
            <para>
            This parameter can be <c>NULL</c> to retrieve the size of this information for memory allocation purposes. For more information,
            see Retrieving Data of Unknown Length.
            </para>
            </param>
            <param name="pcbStructInfo">
            <para>
            A pointer to a <c>DWORD</c> variable that contains the size, in bytes, of the buffer pointed to by the pvStructInfo parameter.
            When the function returns, the <c>DWORD</c> value contains the number of bytes stored in the buffer. The size contained in the
            variable pointed to by pcbStructInfo can indicate a size larger than the decoded structure because the decoded structure can
            include pointers to auxiliary data. This size is the sum of the size needed by the decoded structure and the auxiliary data.
            </para>
            <para>
            When CRYPT_DECODE_ALLOC_FLAG is set, the initial value of *pcbStructInfo is not used by the function, and on return,
            *pcbStructInfo contains the number of bytes allocated for pvStructInfo.
            </para>
            <para>
            <c>Note</c> When processing the data returned in the buffer, applications must use the actual size of the data returned. The
            actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually
            specified large enough to ensure that the largest possible output data fits in the buffer.) On output, the variable pointed to
            by this parameter is updated to reflect the actual size of the data copied to the buffer.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the function returns nonzero ( <c>TRUE</c>).</para>
            <para>
            If the function fails, it returns zero ( <c>FALSE</c>). For extended error information, call GetLastError. The following table
            shows some possible error codes.
            </para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>CRYPT_E_BAD_ENCODE</term>
            <term>An error was encountered while decoding.</term>
            </item>
            <item>
            <term>ERROR_FILE_NOT_FOUND</term>
            <term>A decoding function could not be found for the specified dwCertEncodingType and lpszStructType.</term>
            </item>
            <item>
            <term>ERROR_MORE_DATA</term>
            <term>
            If the buffer specified by the pvStructInfo parameter is not large enough to hold the returned data, the function sets the
            ERROR_MORE_DATA code and stores the required buffer size, in bytes, in the variable pointed to by pcbStructInfo.
            </term>
            </item>
            </list>
            <para>
            If the function fails, GetLastError may return an Abstract Syntax Notation One (ASN.1) encoding/decoding error. For information
            about these errors, see ASN.1 Encoding/Decoding Return Values.
            </para>
            </returns>
            <remarks>
            <para>
            When encoding a cryptographic object using the preferred CryptEncodeObjectEx function, the terminating <c>NULL</c> character is
            included. When decoding, using the preferred <c>CryptDecodeObjectEx</c> function, the terminating <c>NULL</c> character is not retained.
            </para>
            <para>
            Each constant in the list below has an associated structure type that is pointed to by the pvStructInfo parameter. The structure
            pointed to, directly or indirectly, has a reference to a CERT_ALT_NAME_ENTRY structure.
            </para>
            <list type="bullet">
            <item>
            <term>X509_ALTERNATE_NAME</term>
            </item>
            <item>
            <term>szOID_AUTHORITY_INFO_ACCESS</term>
            </item>
            <item>
            <term>X509_AUTHORITY_INFO_ACCESS</term>
            </item>
            <item>
            <term>X509_AUTHORITY_KEY_ID2</term>
            </item>
            <item>
            <term>szOID_AUTHORITY_KEY_IDENTIFIER2</term>
            </item>
            <item>
            <term>szOID_CRL_DIST_POINTS</term>
            </item>
            <item>
            <term>X509_CRL_DIST_POINTS</term>
            </item>
            <item>
            <term>szOID_CROSS_CERT_DIST_POINTS</term>
            </item>
            <item>
            <term>X509_CROSS_CERT_DIST_POINTS</term>
            </item>
            <item>
            <term>szOID_ISSUER_ALT_NAME</term>
            </item>
            <item>
            <term>szOID_ISSUER_ALT_NAME2</term>
            </item>
            <item>
            <term>szOID_ISSUING_DIST_POINT</term>
            </item>
            <item>
            <term>X509_ISSUING_DIST_POINT</term>
            </item>
            <item>
            <term>X509_NAME_CONSTRAINTS</term>
            </item>
            <item>
            <term>szOID_NAME_CONSTRAINTS</term>
            </item>
            <item>
            <term>szOID_NEXT_UPDATE_LOCATION</term>
            </item>
            <item>
            <term>OCSP_REQUEST</term>
            </item>
            <item>
            <term>zOID_SUBJECT_ALT_NAME</term>
            </item>
            <item>
            <term>szOID_SUBJECT_ALT_NAME2</term>
            </item>
            </list>
            <para>
            The <c>CRYPT_DECODE_ENABLE_PUNYCODE_FLAG</c> flag, in conjunction with the value of the <c>dwAltNameChoice</c> member of the
            CERT_ALT_NAME_ENTRY structure, determines the manner in which strings are encoded.
            </para>
            <list type="table">
            <listheader>
            <term>dwAltNameChoice</term>
            <term>Effect</term>
            </listheader>
            <item>
            <term>CERT_ALT_NAME_DNS_NAME</term>
            <term>If the host name contains a Punycode encoded IA5String string, it is converted to the Unicode equivalent.</term>
            </item>
            <item>
            <term>CERT_ALT_NAME_RFC822_NAME</term>
            <term>
            If the host name portion of the email address contains a Punycode encoded IA5String string, it is converted to its Unicode equivalent.
            </term>
            </item>
            <item>
            <term>CERT_ALT_NAME_URL</term>
            <term>
            The URI is decoded. If the server host name of the URI contains a Punycode encoded IA5String string, the host name string is
            decoded to the Unicode equivalent.
            </term>
            </item>
            </list>
            <para>
            Each constant in the list below has an associated structure type that is pointed to by the pvStructInfo parameter. The structure
            pointed to, directly or indirectly, has a reference to a CERT_HASHED_URL structure.
            </para>
            <list type="bullet">
            <item>
            <term>szOID_LOGOTYPE_EXT</term>
            </item>
            <item>
            <term>X509_LOGOTYPE_EXT</term>
            </item>
            <item>
            <term>szOID_BIOMETRIC_EXT</term>
            </item>
            <item>
            <term>X509_BIOMETRIC_EXT</term>
            </item>
            </list>
            <para>
            When decoding the CERT_HASHED_URL structure value, the URI is decoded. If the host name contains a Punycode encoded host name,
            it is converted to the Unicode equivalent.
            </para>
            <para>
            Each <c>X509_UNICODE_NAME</c> constant in the list below has an associated structure type that is pointed to by the pvStructInfo parameter.
            </para>
            <list type="bullet">
            <item>
            <term>X509_UNICODE_NAME</term>
            </item>
            </list>
            <para>
            If the pszObjId member of the CERT_RDN_ATTR structure is set to <c>szOID_RSA_emailAddr</c> and the email address in the
            <c>Value</c> member contains Punycode encoded string, it is converted to the Unicode equivalent.
            </para>
            <para>Examples</para>
            <para>For an example that uses this function, see Example C Program: ASN.1 Encoding and Decoding.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptEncodeObject(Vanara.PInvoke.Crypt32.CertEncodingType,Vanara.PInvoke.Crypt32.SafeOID,System.IntPtr,System.IntPtr,System.UInt32@)">
            <summary>
            The <c>CryptEncodeObject</c> function encodes a structure of the type indicated by the value of the lpszStructType parameter.
            The use of CryptEncodeObjectEx is recommended as an API that performs the same function with significant performance improvements.
            </summary>
            <param name="dwCertEncodingType">
            <para>
            Type of encoding used. It is always acceptable to specify both the certificate and message encoding types by combining them with
            a bitwise- <c>OR</c> operation as shown in the following example:
            </para>
            <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING</para>
            <para>Currently defined encoding types are:</para>
            <list type="bullet">
            <item>
            <term>X509_ASN_ENCODING</term>
            </item>
            <item>
            <term>PKCS_7_ASN_ENCODING</term>
            </item>
            </list>
            <para>
            <c>Note</c> Either a certificate or message encoding type is required. X509_ASN_ENCODING is the default. If that type is
            indicated, it is used. Otherwise, if the PKCS7_ASN_ENCODING type is indicated, it is used.
            </para>
            </param>
            <param name="lpszStructType">
            <para>
            A pointer to an OID defining the structure type. If the high-order word of the lpszStructType parameter is zero, the low-order
            word specifies the integer identifier for the type of the specified structure. Otherwise, this parameter is a long pointer to a
            null-terminated string.
            </para>
            <para>
            For more information about object identifier strings, their predefined constants and corresponding structures, see Constants for
            CryptEncodeObject and CryptDecodeObject.
            </para>
            </param>
            <param name="pvStructInfo">A pointer to the structure to be encoded. The structure must be of a type specified by lpszStructType.</param>
            <param name="pbEncoded">
            <para>
            A pointer to a buffer to receive the encoded structure. When the buffer that is specified is not large enough to receive the
            decoded structure, the function sets the ERROR_MORE_DATA code and stores the required buffer size, in bytes, in the variable
            pointed to by pcbEncoded.
            </para>
            <para>
            This parameter can be <c>NULL</c> to retrieve the size of this information for memory allocation purposes. For more information,
            see Retrieving Data of Unknown Length.
            </para>
            </param>
            <param name="pcbEncoded">
            <para>
            A pointer to a <c>DWORD</c> variable that contains the size, in bytes, of the buffer pointed to by the pbEncoded parameter. When
            the function returns, the <c>DWORD</c> value contains the number of allocated encoded bytes stored in the buffer.
            </para>
            <para>
            <c>Note</c> When processing the data returned in the buffer, applications must use the actual size of the data returned. The
            actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually
            specified large enough to ensure that the largest possible output data fits in the buffer.) On output, the variable pointed to
            by this parameter is updated to reflect the actual size of the data copied to the buffer.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is nonzero ( <c>TRUE</c>).</para>
            <para>
            If the function fails, the return value is zero ( <c>FALSE</c>). For extended error information, call GetLastError. Some
            possible error codes are listed in the following table.
            </para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>CRYPT_E_BAD_ENCODE</term>
            <term>An error was encountered while encoding.</term>
            </item>
            <item>
            <term>ERROR_FILE_NOT_FOUND</term>
            <term>An encoding function could not be found for the specified dwCertEncodingType and lpszStructType.</term>
            </item>
            <item>
            <term>ERROR_MORE_DATA</term>
            <term>
            If the buffer specified by the pbEncoded parameter is not large enough to hold the returned data, the function sets the
            ERROR_MORE_DATA code and stores the required buffer size, in bytes, in the variable pointed to by pcbEncoded.
            </term>
            </item>
            </list>
            <para>
            If the function fails, GetLastError may return an Abstract Syntax Notation One (ASN.1) encoding/decoding error. For information
            about these errors, see ASN.1 Encoding/Decoding Return Values.
            </para>
            </returns>
            <remarks>
            <para>
            When encoding a cryptographic object using the preferred CryptEncodeObjectEx function, the terminating <c>NULL</c> character is
            included. When decoding, using the preferred CryptDecodeObjectEx function, the terminating <c>NULL</c> character is not retained.
            </para>
            <para>Examples</para>
            <para>
            For an example that uses this function, see Example C Program: Making a Certificate Request and Example C Program: ASN.1
            Encoding and Decoding.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptEncodeObjectEx(Vanara.PInvoke.Crypt32.CertEncodingType,Vanara.PInvoke.Crypt32.SafeOID,System.IntPtr,Vanara.PInvoke.Crypt32.CryptEncodeFlags,Vanara.PInvoke.Crypt32.CRYPT_ENCODE_PARA@,System.IntPtr,System.UInt32@)">
            <summary>
            The <c>CryptEncodeObjectEx</c> function encodes a structure of the type indicated by the value of the lpszStructType parameter.
            This function offers a significant performance improvement over CryptEncodeObject by supporting memory allocation with the
            <c>CRYPT_ENCODE_ALLOC_FLAG</c> value.
            </summary>
            <param name="dwCertEncodingType">
            <para>
            The certificate encoding type and message encoding type to use to encode the object. This parameter can be a combination of one
            or more of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>PKCS_7_ASN_ENCODING 65536 (0x10000)</term>
            <term>Specifies PKCS 7 message encoding.</term>
            </item>
            <item>
            <term>X509_ASN_ENCODING 1 (0x1)</term>
            <term>Specifies X.509 certificate encoding.</term>
            </item>
            </list>
            </param>
            <param name="lpszStructType">
            <para>
            A pointer to an object identifier (OID) that defines the structure type. If the high-order word of the lpszStructType parameter
            is zero, the low-order word specifies an integer identifier for the type of the specified structure. Otherwise, this parameter
            is a pointer to a null-terminated string that contains the string representation of the OID.
            </para>
            <para>
            For more information about object identifier strings, their predefined constants and corresponding structures, see Constants for
            CryptEncodeObject and CryptDecodeObject.
            </para>
            </param>
            <param name="pvStructInfo">A pointer to the structure to be encoded. The structure must be of the type specified by lpszStructType.</param>
            <param name="dwFlags">
            <para>Specifies options for the encoding. This parameter can be zero or a combination of one or more of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPT_ENCODE_ALLOC_FLAG 32768 (0x8000)</term>
            <term>The called encoding function allocates memory for the encoded bytes. A pointer to the allocated bytes is returned in pvEncoded.</term>
            </item>
            <item>
            <term>CRYPT_ENCODE_ENABLE_PUNYCODE_FLAG 131072 (0x20000)</term>
            <term>
            This flag is applicable for enabling Punycode encoding of Unicode string values. For more information, see Remarks. Windows
            Server 2008, Windows Vista, Windows Server 2003 and Windows XP: This flag is not supported.
            </term>
            </item>
            <item>
            <term>CRYPT_UNICODE_NAME_ENCODE_DISABLE_CHECK_TYPE_FLAG 1073741824 (0x40000000)</term>
            <term>
            This flag is applicable when encoding X509_UNICODE_NAME, X509_UNICODE_NAME_VALUE, or X509_UNICODE_ANY_STRING. If this flag is
            set, the characters are not checked to determine whether they are valid for the specified value type.
            </term>
            </item>
            <item>
            <term>CRYPT_UNICODE_NAME_ENCODE_ENABLE_T61_UNICODE_FLAG 2147483648 (0x80000000)</term>
            <term>
            This flag is applicable when encoding X509_UNICODE_NAME. If this flag is set and all the Unicode characters are &lt;= 0xFF, the
            CERT_RDN_T61_STRING is selected instead of the CERT_RDN_UNICODE_STRING.
            </term>
            </item>
            <item>
            <term>CRYPT_UNICODE_NAME_ENCODE_ENABLE_UTF8_UNICODE_FLAG 536870912 (0x20000000)</term>
            <term>This flag is applicable when encoding an X509_UNICODE_NAME. When set, CERT_RDN_UTF8_STRING is selected instead of CERT_RDN_UNICODE_STRING.</term>
            </item>
            <item>
            <term>CRYPT_UNICODE_NAME_ENCODE_FORCE_UTF8_UNICODE_FLAG 268435456 (0x10000000)</term>
            <term>
            This flag is applicable when encoding an X509_UNICODE_NAME. When set, CERT_RDN_UTF8_STRING is selected instead of
            CERT_RDN_PRINTABLE_STRING for directory string types. Also, this flag enables CRYPT_UNICODE_NAME_ENCODE_ENABLE_UTF8_UNICODE_FLAG.
            </term>
            </item>
            </list>
            </param>
            <param name="pEncodePara">
            <para>A pointer to a CRYPT_ENCODE_PARA structure that contains encoding information. This parameter can be <c>NULL</c>.</para>
            <para>
            If either pEncodePara or the <c>pfnAlloc</c> member of pEncodePara is <c>NULL</c>, then LocalAlloc is used for the allocation
            and LocalFree must be called to free the memory.
            </para>
            <para>
            If both pEncodePara and the <c>pfnAlloc</c> member of pEncodePara are not <c>NULL</c>, then the function pointed to by the
            <c>pfnAlloc</c> member of the CRYPT_ENCODE_PARA structure pointed to by pEncodePara is called for the allocation. The function
            pointed to by the <c>pfnFree</c> member of pEncodePara must be called to free the memory.
            </para>
            </param>
            <param name="pvEncoded">
            <para>
            A pointer to a buffer to receive the encoded structure. The size of this buffer is specified in the pcbEncoded parameter. When
            the buffer that is specified is not large enough to receive the decoded structure, the function sets the <c>ERROR_MORE_DATA</c>
            code and stores the required buffer size, in bytes, in the variable pointed to by pcbEncoded.
            </para>
            <para>
            This parameter can be <c>NULL</c> to retrieve the size of the buffer for memory allocation purposes. For more information, see
            Retrieving Data of Unknown Length.
            </para>
            <para>
            If dwFlags contains the <c>CRYPT_ENCODE_ALLOC_FLAG</c> flag, pvEncoded is not a pointer to a buffer but is the address of a
            pointer to the buffer. Because memory is allocated inside the function and the pointer is stored in pvEncoded, pvEncoded cannot
            be <c>NULL</c>.
            </para>
            </param>
            <param name="pcbEncoded">
            <para>
            A pointer to a <c>DWORD</c> variable that contains the size, in bytes, of the buffer pointed to by the pvEncoded parameter. When
            the function returns, the variable pointed to by the pcbEncoded parameter contains the number of allocated, encoded bytes stored
            in the buffer.
            </para>
            <para>
            When dwFlags contains the <c>CRYPT_ENCODE_ALLOC_FLAG</c> flag, pcbEncoded is the address of a pointer to the <c>DWORD</c> value
            that is updated.
            </para>
            <para>
            <c>Note</c> When processing the data returned in the buffer, applications must use the actual size of the data returned. The
            actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually
            specified large enough to ensure that the largest possible output data fits in the buffer.) On output, the variable pointed to
            by this parameter is updated to reflect the actual size of the data copied to the buffer.
            </para>
            </param>
            <returns>
            <para>Returns nonzero if successful or zero otherwise.</para>
            <para>
            For extended error information, call GetLastError. The following table shows some possible error codes that can be returned from
            <c>GetLastError</c> when <c>CryptEncodeObjectEx</c> fails.
            </para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>CRYPT_E_BAD_ENCODE</term>
            <term>An error was encountered while encoding.</term>
            </item>
            <item>
            <term>ERROR_FILE_NOT_FOUND</term>
            <term>An encoding function could not be found for the specified dwCertEncodingType and lpszStructType.</term>
            </item>
            <item>
            <term>ERROR_MORE_DATA</term>
            <term>
            If the buffer specified by the pvEncoded parameter is not large enough to hold the returned data, the function sets the
            ERROR_MORE_DATA code and stores the required buffer size, in bytes, in the variable pointed to by pcbEncoded.
            </term>
            </item>
            </list>
            <para>
            If the function fails, GetLastError may return an Abstract Syntax Notation One (ASN.1) encoding/decoding error. For information
            about these errors, see ASN.1 Encoding/Decoding Return Values.
            </para>
            </returns>
            <remarks>
            <para>
            When encoding a cryptographic object using the preferred <c>CryptEncodeObjectEx</c> function, the terminating <c>NULL</c>
            character is included. When decoding, using the preferred CryptDecodeObjectEx function, the terminating <c>NULL</c> character is
            not retained.
            </para>
            <para>
            <c>CryptEncodeObjectEx</c> first looks for an installable extended encoding function. If no extended encoding function is found,
            the old, nonextended, installable function is located.
            </para>
            <para>
            When direct IA5String encoding of the object is not possible, you can specify Punycode encoding by setting the dwFlag parameter
            to the <c>CRYPT_ENCODE_ENABLE_PUNYCODE_FLAG</c> value. Setting the <c>CRYPT_ENCODE_ENABLE_PUNYCODE_FLAG</c> flag has different
            effects based on the structure type being encoded as specified by the value of the lpszStructType parameter.
            </para>
            <para>
            Each constant in the list below has an associated structure type that is pointed to by the pvStructInfo parameter. The structure
            pointed to, directly or indirectly, has a reference to a CERT_ALT_NAME_ENTRY structure.
            </para>
            <list type="bullet">
            <item>
            <term>X509_ALTERNATE_NAME</term>
            </item>
            <item>
            <term>szOID_AUTHORITY_INFO_ACCESS</term>
            </item>
            <item>
            <term>X509_AUTHORITY_INFO_ACCESS</term>
            </item>
            <item>
            <term>X509_AUTHORITY_KEY_ID2</term>
            </item>
            <item>
            <term>szOID_AUTHORITY_KEY_IDENTIFIER2</term>
            </item>
            <item>
            <term>szOID_CRL_DIST_POINTS</term>
            </item>
            <item>
            <term>X509_CRL_DIST_POINTS</term>
            </item>
            <item>
            <term>szOID_CROSS_CERT_DIST_POINTS</term>
            </item>
            <item>
            <term>X509_CROSS_CERT_DIST_POINTS</term>
            </item>
            <item>
            <term>szOID_ISSUER_ALT_NAME</term>
            </item>
            <item>
            <term>szOID_ISSUER_ALT_NAME2</term>
            </item>
            <item>
            <term>szOID_ISSUING_DIST_POINT</term>
            </item>
            <item>
            <term>X509_ISSUING_DIST_POINT</term>
            </item>
            <item>
            <term>szOID_NAME_CONSTRAINTS</term>
            </item>
            <item>
            <term>X509_NAME_CONSTRAINTS</term>
            </item>
            <item>
            <term>szOID_NEXT_UPDATE_LOCATION</term>
            </item>
            <item>
            <term>OCSP_REQUEST</term>
            </item>
            <item>
            <term>zOID_SUBJECT_ALT_NAME</term>
            </item>
            <item>
            <term>szOID_SUBJECT_ALT_NAME2</term>
            </item>
            </list>
            <para>
            The <c>CRYPT_ENCODE_ENABLE_PUNYCODE_FLAG</c> flag, in conjunction with the value of the <c>dwAltNameChoice</c> member of the
            CERT_ALT_NAME_ENTRY structure, determines the manner in which strings are encoded.
            </para>
            <list type="table">
            <listheader>
            <term>dwAltNameChoice</term>
            <term>Effect</term>
            </listheader>
            <item>
            <term>CERT_ALT_NAME_DNS_NAME</term>
            <term>
            If the host name contains Unicode characters outside of the ASCII character set, the host name is first encoded in Punycode and
            then encoded as an IA5String string.
            </term>
            </item>
            <item>
            <term>CERT_ALT_NAME_RFC822_NAME</term>
            <term>
            If the host name portion of the email address contains Unicode characters outside of the ASCII character set, the host name
            portion of the email address is encoded in Punycode. The resultant email address is then encoded as an IA5String string.
            </term>
            </item>
            <item>
            <term>CERT_ALT_NAME_URL</term>
            <term>
            If the server host name of the URI contains Unicode characters outside of the ASCII character set, then the host name portion of
            URI is encoded in Punycode. Then the resultant URI is escaped, and the URL is then encoded as an IA5String string.
            </term>
            </item>
            </list>
            <para>
            Each constant in the list below has an associated structure type that is pointed to by the pvStructInfo parameter. The structure
            pointed to, directly or indirectly, has a reference to a CERT_HASHED_URL structure.
            </para>
            <list type="bullet">
            <item>
            <term>szOID_BIOMETRIC_EXT</term>
            </item>
            <item>
            <term>X509_BIOMETRIC_EXT</term>
            </item>
            <item>
            <term>szOID_LOGOTYPE_EXT</term>
            </item>
            <item>
            <term>X509_LOGOTYPE_EXT</term>
            </item>
            </list>
            <para>
            When encoding the CERT_HASHED_URL structure value, if the server host name of the URI contains Unicode characters outside of the
            ASCII character set, and the <c>CRYPT_ENCODE_ENABLE_PUNYCODE_FLAG</c> is set, the host name portion of URI is encoded in
            Punycode. Then the resultant URI is escaped, and the URL is then encoded as an IA5String string.
            </para>
            <para>
            Each <c>X509_UNICODE_NAME</c> constant in the list below has an associated structure type that is pointed to by the pvStructInfo parameter.
            </para>
            <list type="bullet">
            <item>
            <term>X509_UNICODE_NAME</term>
            </item>
            </list>
            <para>
            If the pszObjId member of the CERT_RDN_ATTR structure is set to <c>szOID_RSA_emailAddr</c> and the email address in the
            <c>Value</c> member contains Unicode characters outside of the ASCII character set, the host name portion of the email address
            is encoded in Punycode. Then the resultant email address is then encoded as an IA5String string.
            </para>
            <para>In all cases, the Punycode encoding of the host name is performed on a label-by-label basis.</para>
            <para>Examples</para>
            <para>
            The following example shows initializing and encoding an X509_NAME structure using <c>CryptEncodeObjectEx</c>. For an example
            that includes the complete context for this example, see Example C Program: ASN.1 Encoding and Decoding.
            </para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CRYPT_DECODE_PARA">
            <summary>
            The <c>CRYPT_DECODE_PARA</c> structure is used by the CryptDecodeObjectEx function to provide access to memory allocation and
            memory freeing callback functions.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_DECODE_PARA.cbSize">
            <summary>The size, in bytes, of this structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_DECODE_PARA.pfnAlloc">
            <summary>This member is an optional pointer to a callback function used to allocate memory.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_DECODE_PARA.pfnFree">
            <summary>
            This member is an optional pointer to a callback function used to free memory allocated by the allocate callback function.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_DECODE_PARA.CoTaskMemInstance">
            <summary>Gets an instance which uses the CoTaskMem... methods for allocating and freeing memory.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CRYPT_ENCODE_PARA">
            <summary>
            The <c>CRYPT_ENCODE_PARA</c> structure is used by the CryptEncodeObjectEx function to provide access to memory allocation and
            memory freeing callback functions.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_ENCODE_PARA.cbSize">
            <summary>The size, in bytes, of this structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_ENCODE_PARA.pfnAlloc">
            <summary>This member is an optional pointer to a callback function used to allocate memory.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_ENCODE_PARA.pfnFree">
            <summary>
            This member is an optional pointer to a callback function used to free memory allocated by the allocate callback function.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_ENCODE_PARA.CoTaskMemInstance">
            <summary>Gets an instance which uses the CoTaskMem... methods for allocating and freeing memory.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_OID_INFO_OID_GROUP_BIT_LEN_SHIFT">
            <summary>Number of bits to shift byte len into an OID Group ID.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.PFN_CRYPT_ENUM_OID_FUNC">
            <summary>The <c>CRYPT_ENUM_OID_FUNCTION</c> callback function is used with the CryptEnumOIDFunction function.</summary>
            <param name="dwEncodingType">
            <para>Specifies the encoding type to match. Setting this parameter to CRYPT_MATCH_ANY_ENCODING_TYPE matches any encoding type.</para>
            <para><c>Note</c> If CRYPT_MATCH_ANY_ENCODING_TYPE is not specified, either a certificate or message encoding type is required.</para>
            <para>
            If the low-order word containing the certificate encoding type is nonzero, it is used. Otherwise, the high-order word containing
            the message encoding type is used. If both are specified, the certificate encoding type in the low-order word is used.Currently
            defined encoding types are:
            </para>
            <list type="bullet">
            <item>
            <term>CRYPT_ASN_ENCODING</term>
            </item>
            <item>
            <term>X509_ASN_ENCODING</term>
            </item>
            <item>
            <term>PKCS_7_ASN_ENCODING</term>
            </item>
            <item>
            <term>CRYPT_MATCH_ANY_ENCODING_TYPE</term>
            </item>
            </list>
            </param>
            <param name="pszFuncName"/>
            <param name="pszOID">
            A pointer to either an OID string, such as "2.5.29.1", an ASCII string, such as "file", or a numeric string, such as #2000.
            </param>
            <param name="cValue">Count of elements in the array of value types.</param>
            <param name="rgdwValueType[][]"/>
            <param name="rgpwszValueName[][]"/>
            <param name="rgpbValueData[][]"/>
            <param name="rgcbValueData[][]"/>
            <param name="pvArg"/>
            <returns>Returns <c>TRUE</c> if the function succeeds, <c>FALSE</c> if it fails.</returns>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.PFN_CRYPT_ENUM_OID_INFO">
            <summary>The <c>CRYPT_ENUM_OID_INFO</c> callback function is used with the CryptEnumOIDInfo function.</summary>
            <param name="pInfo">A pointer to the OID information.</param>
            <param name="pvArg">A pointer to arguments passed to this function.</param>
            <returns>
            Returns <c>TRUE</c> to continue the enumeration and <c>FALSE</c> to stop the enumeration. If <c>FALSE</c> is returned, the
            CryptEnumOIDInfo enumeration is stopped.
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CryptInstallOIDFuncFlags">
            <summary>Flags for <see cref="M:Vanara.PInvoke.Crypt32.CryptInstallOIDFunctionAddress(Vanara.PInvoke.HINSTANCE,Vanara.PInvoke.Crypt32.CertEncodingType,System.String,System.UInt32,Vanara.PInvoke.Crypt32.CRYPT_OID_FUNC_ENTRY[],Vanara.PInvoke.Crypt32.CryptInstallOIDFuncFlags)"/>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptInstallOIDFuncFlags.CRYPT_INSTALL_OID_FUNC_AFTER_FLAG">
            <summary>Installs the function set at the end of the list.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptInstallOIDFuncFlags.CRYPT_INSTALL_OID_FUNC_BEFORE_FLAG">
            <summary>Installs the function set at the beginning of the list.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.OIDFuncFlags">
            <summary>Flags for CryptGetOIDFunctionAddress.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.OIDFuncFlags.CRYPT_GET_INSTALLED_OID_FUNC_FLAG">
            <summary>Searches only the installed list of functions.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.OIDGroupId">
            <summary>Indicates which OID groups to be matched. Setting dwGroupId to zero matches all groups.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.OIDGroupId.ALL">
            <summary>Matches all groups.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.OIDGroupId.CRYPT_HASH_ALG_OID_GROUP_ID">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.OIDGroupId.CRYPT_ENCRYPT_ALG_OID_GROUP_ID">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.OIDGroupId.CRYPT_PUBKEY_ALG_OID_GROUP_ID">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.OIDGroupId.CRYPT_SIGN_ALG_OID_GROUP_ID">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.OIDGroupId.CRYPT_RDN_ATTR_OID_GROUP_ID">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.OIDGroupId.CRYPT_EXT_OR_ATTR_OID_GROUP_ID">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.OIDGroupId.CRYPT_ENHKEY_USAGE_OID_GROUP_ID">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.OIDGroupId.CRYPT_POLICY_OID_GROUP_ID">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.OIDGroupId.CRYPT_TEMPLATE_OID_GROUP_ID">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.OIDGroupId.CRYPT_KDF_OID_GROUP_ID">
            <summary/>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptEnumOIDFunction(Vanara.PInvoke.Crypt32.CertEncodingType,System.String,Vanara.PInvoke.Crypt32.SafeOID,System.UInt32,System.IntPtr,Vanara.PInvoke.Crypt32.PFN_CRYPT_ENUM_OID_FUNC)">
            <summary>
            The <c>CryptEnumOIDFunction</c> function enumerates the registered object identifier (OID) functions. OID functions that are
            enumerated can be screened to include those identified by their encoding type, function name, OID, or any combination of
            encoding type, function name, and OID. For each OID function that matches the selection criteria, an application-provided
            callback function, <c>pfnEnumOIDFunc</c>, is called.
            </summary>
            <param name="dwEncodingType">
            <para>
            Specifies the encoding type to match. Setting this parameter to CRYPT_MATCH_ANY_ENCODING_TYPE matches any encoding type. Note
            that if CRYPT_MATCH_ANY_ENCODING_TYPE is not specified, either a certificate or message encoding type is required. If the
            low-order word that contains the certificate encoding type is nonzero, it is used; otherwise, the high-order word that contains
            the message encoding type is used. If both are specified, the certificate encoding type in the low-order word is used.
            </para>
            <para>Currently defined encoding types are:</para>
            <list type="bullet">
            <item>
            <term>CRYPT_ASN_ENCODING</term>
            </item>
            <item>
            <term>X509_ASN_ENCODING</term>
            </item>
            <item>
            <term>PKCS_7_ASN_ENCODING</term>
            </item>
            <item>
            <term>CRYPT_MATCH_ANY_ENCODING_TYPE</term>
            </item>
            </list>
            </param>
            <param name="pszFuncName">
            Name of a function for which a case insensitive match search is performed. Setting this parameter to <c>NULL</c> results in a
            match being found for any function name.
            </param>
            <param name="pszOID">
            If the high-order word of pszOID is nonzero, pszOID specifies the object identifier for which a case insensitive match search is
            performed. If the high-order word of pszOID is zero, pszOID is used to match a numeric object identifier. Setting this parameter
            to <c>NULL</c> matches any object identifier. Setting this parameter to CRYPT_DEFAULT_OID restricts the enumeration to only the
            default functions.
            </param>
            <param name="dwFlags">Reserved for future use and must be zero.</param>
            <param name="pvArg">A pointer to arguments to be passed through to the CRYPT_ENUM_OID_FUNCTION callback function.</param>
            <param name="pfnEnumOIDFunc">
            A pointer to the callback function that is executed for each OID function that matches the input parameters. For details, see CRYPT_ENUM_OID_FUNCTION.
            </param>
            <returns>
            <para>If the function succeeds, the function returns nonzero ( <c>TRUE</c>).</para>
            <para>If the function fails, it returns zero ( <c>FALSE</c>). For extended error information, call GetLastError.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptEnumOIDInfo(Vanara.PInvoke.Crypt32.OIDGroupId,System.UInt32,System.IntPtr,Vanara.PInvoke.Crypt32.PFN_CRYPT_ENUM_OID_INFO)">
            <summary>
            The <c>CryptEnumOIDInfo</c> function enumerates predefined and registered object identifier (OID) CRYPT_OID_INFO structures.
            This function enumerates either all of the predefined and registered structures or only structures identified by a selected OID
            group. For each OID information structure enumerated, an application provided callback function, pfnEnumOIDInfo, is called.
            </summary>
            <param name="dwGroupId">
            <para>
            Indicates which OID groups to be matched. Setting dwGroupId to zero matches all groups. If dwGroupId is greater than zero, only
            the OID entries in the specified group are enumerated.
            </para>
            <para>The currently defined OID group IDs are:</para>
            <list type="bullet">
            <item>
            <term>CRYPT_HASH_ALG_OID_GROUP_ID</term>
            </item>
            <item>
            <term>CRYPT_ENCRYPT_ALG_OID_GROUP_ID</term>
            </item>
            <item>
            <term>CRYPT_PUBKEY_ALG_OID_GROUP_ID</term>
            </item>
            <item>
            <term>CRYPT_SIGN_ALG_OID_GROUP_ID</term>
            </item>
            <item>
            <term>CRYPT_RDN_ATTR_OID_GROUP_ID</term>
            </item>
            <item>
            <term>CRYPT_EXT_OR_ATTR_OID_GROUP_ID</term>
            </item>
            <item>
            <term>CRYPT_ENHKEY_USAGE_OID_GROUP_ID</term>
            </item>
            <item>
            <term>CRYPT_POLICY_OID_GROUP_ID</term>
            </item>
            <item>
            <term>CRYPT_TEMPLATE_OID_GROUP_ID</term>
            </item>
            <item>
            <term>
            CRYPT_KDF_OID_GROUP_ID <c>Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:</c> The CRYPT_KDF_OID_GROUP_ID
            value is not supported.
            </term>
            </item>
            <item>
            <term>CRYPT_LAST_OID_GROUP_ID</term>
            </item>
            <item>
            <term>CRYPT_FIRST_ALG_OID_GROUP_ID</term>
            </item>
            <item>
            <term>CRYPT_LAST_ALG_OID_GROUP_ID</term>
            </item>
            </list>
            </param>
            <param name="dwFlags">This parameter is reserved for future use. It must be zero.</param>
            <param name="pvArg">A pointer to arguments to be passed through to the callback function.</param>
            <param name="pfnEnumOIDInfo">
            A pointer to the callback function that is executed for each OID information entry enumerated. For information about the
            callback parameters, see CRYPT_ENUM_OID_INFO.
            </param>
            <returns>
            <para>If the callback function completes the enumeration, this function returns <c>TRUE</c>.</para>
            <para>If the callback function has stopped the enumeration, this function returns <c>FALSE</c>.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptFindOIDInfo(Vanara.PInvoke.Crypt32.CryptOIDInfoFlags,System.IntPtr,Vanara.PInvoke.Crypt32.OIDGroupId)">
            <summary>
            <para>
            The <c>CryptFindOIDInfo</c> function retrieves the first predefined or registered CRYPT_OID_INFO structure that matches a
            specified key type and key. The search can be limited to object identifiers (OIDs) within a specified OID group.
            </para>
            <para>
            Use CryptEnumOIDInfo to list all or selected subsets of CRYPT_OID_INFO structures. New <c>CRYPT_OID_INFO</c> structures can be
            registered by using CryptRegisterOIDInfo. User-registered OIDs can be removed from the list of registered OIDs by using CryptUnregisterOIDInfo.
            </para>
            <para>
            New OIDs can be placed in the list of registered OIDs either before or after the predefined entries. Because
            <c>CryptFindOIDInfo</c> returns the first key on the list that matches the search criteria, a newly registered OID placed before
            a predefined OID entry with the same key overrides a predefined entry.
            </para>
            </summary>
            <param name="dwKeyType">
            <para>Specifies the key type to use when finding OID information.</para>
            <para>This parameter can be one of the following key types.</para>
            <para>CRYPT_OID_INFO_OID_KEY</para>
            <para>pvKey is the address of a null-terminated ANSI string that contains the OID string to find.</para>
            <para>CRYPT_OID_INFO_NAME_KEY</para>
            <para>pvKey is the address of a null-terminated Unicode string that contains the name to find.</para>
            <para>CRYPT_OID_INFO_ALGID_KEY</para>
            <para>pvKey is the address of an ALG_IDvariable. The following <c>ALG_ID</c> s are supported:</para>
            <para>Hash Algorithms:</para>
            <para>Symmetric Encryption Algorithms:</para>
            <para>Public Key Algorithms:</para>
            <para>Algorithms that are not listed are supported by using Cryptography API: Next Generation (CNG) only; instead, use <c>CRYPT_OID_INFO_CNG_ALGID_KEY</c>.</para>
            <para>CRYPT_OID_INFO_SIGN_KEY</para>
            <para>
            pvKey is the address of an array of two ALG_IDs where the first element contains the hash algorithm identifier and the second
            element contains the public key algorithm identifier.
            </para>
            <para>The following <c>ALG_ID</c> combinations are supported.</para>
            <list type="table">
            <listheader>
            <term>Signature algorithm identifier</term>
            <term>Hash algorithm identifier</term>
            </listheader>
            <item>
            <term>CALG_RSA_SIGN</term>
            <term>CALG_SHA1 CALG_MD5 CALG_MD4 CALG_MD2</term>
            </item>
            <item>
            <term>CALG_DSS_SIGN</term>
            <term>CALG_SHA1</term>
            </item>
            <item>
            <term>CALG_NO_SIGN</term>
            <term>CALG_SHA1 CALG_NO_SIGN</term>
            </item>
            </list>
            <para>Algorithms that are not listed are supported through CNG only; instead, use <c>CRYPT_OID_INFO_CNG_SIGN_KEY</c>.</para>
            <para>CRYPT_OID_INFO_CNG_ALGID_KEY</para>
            <para>
            pvKey is the address of a null-terminated Unicode string that contains the CNG algorithm identifier to find. This can be one of
            the predefined CNG Algorithm Identifiers or another registered algorithm identifier.
            </para>
            <para>Windows Server 2003 R2 Windows Server 2003 :</para>
            <para>This key type is not supported.</para>
            <para>CRYPT_OID_INFO_CNG_SIGN_KEY</para>
            <para>
            pvKey is the address of an array of two null-terminated Unicode string pointers where the first string contains the hash CNG
            algorithm identifier and the second string contains the public key CNG algorithm identifier. These can be from the predefined
            CNG Algorithm Identifiers or another registered algorithm identifier.
            </para>
            <para>Windows Server 2003 R2 Windows Server 2003 :</para>
            <para>This key type is not supported.</para>
            <para>
            Optionally, the following key types can be specified in the dwKeyType parameter by using the logical <c>OR</c> operator (|).
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPT_OID_INFO_PUBKEY_SIGN_KEY_FLAG</term>
            <term>
            Skips public keys in the CRYPT_PUBKEY_ALG_OID_GROUP_ID group that are explicitly flagged with the
            CRYPT_OID_PUBKEY_ENCRYPT_ONLY_FLAG flag.
            </term>
            </item>
            <item>
            <term>CRYPT_OID_INFO_PUBKEY_ENCRYPT_KEY_FLAG</term>
            <term>
            Skips public keys in the CRYPT_PUBKEY_ALG_OID_GROUP_ID group that are explicitly flagged with the
            CRYPT_OID_PUBKEY_SIGN_ONLY_FLAG flag.
            </term>
            </item>
            </list>
            </param>
            <param name="pvKey">
            The address of a buffer that contains additional search information. This parameter depends on the value of the dwKeyType
            parameter. For more information, see the table under dwKeyType.
            </param>
            <param name="dwGroupId">
            <para>
            The group identifier to use when finding OID information. Setting this parameter to zero searches all groups according to the
            dwKeyType parameter. Otherwise, only the indicated dwGroupId is searched.
            </para>
            <para>For information about code that lists the OID information by group identifier, see CryptEnumOIDInfo.</para>
            <para>Optionally, the following flag can be specified in the dwGroupId parameter by using the logical <c>OR</c> operator (|).</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPT_OID_DISABLE_SEARCH_DS_FLAG</term>
            <term>Disables searching the directory server.</term>
            </item>
            </list>
            <para>
            The bit length shifted left 16 bits can be specified in the dwGroupId parameter by using the logical <c>OR</c> operator (|). For
            more information, see Remarks.
            </para>
            </param>
            <returns>
            Returns a pointer to a constant structure of type CRYPT_OID_INFO. The returned pointer must not be freed. When the specified key
            and group is not found, <c>NULL</c> is returned.
            </returns>
            <remarks>
            <para>
            The <c>CryptFindOIDInfo</c> function performs a lookup in the active directory to retrieve the friendly names of OIDs under the
            following conditions:
            </para>
            <list type="bullet">
            <item>
            <term>The key type in the dwKeyType parameter is set to <c>CRYPT_OID_INFO_OID_KEY</c> or <c>CRYPT_OID_INFO_NAME_KEY</c>.</term>
            </item>
            <item>
            <term>
            No group identifier is specified in the dwGroupId parameter or the GroupID refers to EKU OIDs, policy OIDs or template OIDs.
            </term>
            </item>
            </list>
            <para>
            Network retrieval of the friendly name can be suppressed by calling the function with the
            <c>CRYPT_OID_DISABLE_SEARCH_DS_FLAG</c> flag.
            </para>
            <para>
            The bit length shifted left 16 bits can be specified in the dwGroupId parameter by using the logical <c>OR</c> operator (|).
            This is only applicable to the <c>CRYPT_ENCRYPT_ALG_OID_GROUP_ID</c> group entries that have a bit length specified in the
            <c>ExtraInfo</c> member of the CRYPT_OID_INFO structure. Currently, only the AES encryption algorithms have this. The constant
            <c>CRYPT_OID_INFO_OID_GROUP_BIT_LEN_SHIFT</c> can be used for doing the shift. For example, to find the OID information for
            <c>BCRYPT_AES_ALGORITHM</c> with bit length equal to 192, call <c>CryptFindOIDInfo</c> as follows.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptFindOIDInfo(Vanara.PInvoke.Crypt32.CryptOIDInfoFlags,System.String,Vanara.PInvoke.Crypt32.OIDGroupId)">
            <summary>
            <para>
            The <c>CryptFindOIDInfo</c> function retrieves the first predefined or registered CRYPT_OID_INFO structure that matches a
            specified key type and key. The search can be limited to object identifiers (OIDs) within a specified OID group.
            </para>
            <para>
            Use CryptEnumOIDInfo to list all or selected subsets of CRYPT_OID_INFO structures. New <c>CRYPT_OID_INFO</c> structures can be
            registered by using CryptRegisterOIDInfo. User-registered OIDs can be removed from the list of registered OIDs by using CryptUnregisterOIDInfo.
            </para>
            <para>
            New OIDs can be placed in the list of registered OIDs either before or after the predefined entries. Because
            <c>CryptFindOIDInfo</c> returns the first key on the list that matches the search criteria, a newly registered OID placed before
            a predefined OID entry with the same key overrides a predefined entry.
            </para>
            </summary>
            <param name="dwKeyType">
            <para>Specifies the key type to use when finding OID information.</para>
            <para>This parameter can be one of the following key types.</para>
            <para>CRYPT_OID_INFO_OID_KEY</para>
            <para>pvKey is the address of a null-terminated ANSI string that contains the OID string to find.</para>
            <para>CRYPT_OID_INFO_NAME_KEY</para>
            <para>pvKey is the address of a null-terminated Unicode string that contains the name to find.</para>
            <para>CRYPT_OID_INFO_ALGID_KEY</para>
            <para>pvKey is the address of an ALG_IDvariable. The following <c>ALG_ID</c> s are supported:</para>
            <para>Hash Algorithms:</para>
            <para>Symmetric Encryption Algorithms:</para>
            <para>Public Key Algorithms:</para>
            <para>Algorithms that are not listed are supported by using Cryptography API: Next Generation (CNG) only; instead, use <c>CRYPT_OID_INFO_CNG_ALGID_KEY</c>.</para>
            <para>CRYPT_OID_INFO_SIGN_KEY</para>
            <para>
            pvKey is the address of an array of two ALG_IDs where the first element contains the hash algorithm identifier and the second
            element contains the public key algorithm identifier.
            </para>
            <para>The following <c>ALG_ID</c> combinations are supported.</para>
            <list type="table">
            <listheader>
            <term>Signature algorithm identifier</term>
            <term>Hash algorithm identifier</term>
            </listheader>
            <item>
            <term>CALG_RSA_SIGN</term>
            <term>CALG_SHA1 CALG_MD5 CALG_MD4 CALG_MD2</term>
            </item>
            <item>
            <term>CALG_DSS_SIGN</term>
            <term>CALG_SHA1</term>
            </item>
            <item>
            <term>CALG_NO_SIGN</term>
            <term>CALG_SHA1 CALG_NO_SIGN</term>
            </item>
            </list>
            <para>Algorithms that are not listed are supported through CNG only; instead, use <c>CRYPT_OID_INFO_CNG_SIGN_KEY</c>.</para>
            <para>CRYPT_OID_INFO_CNG_ALGID_KEY</para>
            <para>
            pvKey is the address of a null-terminated Unicode string that contains the CNG algorithm identifier to find. This can be one of
            the predefined CNG Algorithm Identifiers or another registered algorithm identifier.
            </para>
            <para>Windows Server 2003 R2 Windows Server 2003 :</para>
            <para>This key type is not supported.</para>
            <para>CRYPT_OID_INFO_CNG_SIGN_KEY</para>
            <para>
            pvKey is the address of an array of two null-terminated Unicode string pointers where the first string contains the hash CNG
            algorithm identifier and the second string contains the public key CNG algorithm identifier. These can be from the predefined
            CNG Algorithm Identifiers or another registered algorithm identifier.
            </para>
            <para>Windows Server 2003 R2 Windows Server 2003 :</para>
            <para>This key type is not supported.</para>
            <para>
            Optionally, the following key types can be specified in the dwKeyType parameter by using the logical <c>OR</c> operator (|).
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPT_OID_INFO_PUBKEY_SIGN_KEY_FLAG</term>
            <term>
            Skips public keys in the CRYPT_PUBKEY_ALG_OID_GROUP_ID group that are explicitly flagged with the
            CRYPT_OID_PUBKEY_ENCRYPT_ONLY_FLAG flag.
            </term>
            </item>
            <item>
            <term>CRYPT_OID_INFO_PUBKEY_ENCRYPT_KEY_FLAG</term>
            <term>
            Skips public keys in the CRYPT_PUBKEY_ALG_OID_GROUP_ID group that are explicitly flagged with the
            CRYPT_OID_PUBKEY_SIGN_ONLY_FLAG flag.
            </term>
            </item>
            </list>
            </param>
            <param name="pvKey">
            The address of a buffer that contains additional search information. This parameter depends on the value of the dwKeyType
            parameter. For more information, see the table under dwKeyType.
            </param>
            <param name="dwGroupId">
            <para>
            The group identifier to use when finding OID information. Setting this parameter to zero searches all groups according to the
            dwKeyType parameter. Otherwise, only the indicated dwGroupId is searched.
            </para>
            <para>For information about code that lists the OID information by group identifier, see CryptEnumOIDInfo.</para>
            <para>Optionally, the following flag can be specified in the dwGroupId parameter by using the logical <c>OR</c> operator (|).</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPT_OID_DISABLE_SEARCH_DS_FLAG</term>
            <term>Disables searching the directory server.</term>
            </item>
            </list>
            <para>
            The bit length shifted left 16 bits can be specified in the dwGroupId parameter by using the logical <c>OR</c> operator (|). For
            more information, see Remarks.
            </para>
            </param>
            <returns>
            Returns a pointer to a constant structure of type CRYPT_OID_INFO. The returned pointer must not be freed. When the specified key
            and group is not found, <c>NULL</c> is returned.
            </returns>
            <remarks>
            <para>
            The <c>CryptFindOIDInfo</c> function performs a lookup in the active directory to retrieve the friendly names of OIDs under the
            following conditions:
            </para>
            <list type="bullet">
            <item>
            <term>The key type in the dwKeyType parameter is set to <c>CRYPT_OID_INFO_OID_KEY</c> or <c>CRYPT_OID_INFO_NAME_KEY</c>.</term>
            </item>
            <item>
            <term>
            No group identifier is specified in the dwGroupId parameter or the GroupID refers to EKU OIDs, policy OIDs or template OIDs.
            </term>
            </item>
            </list>
            <para>
            Network retrieval of the friendly name can be suppressed by calling the function with the
            <c>CRYPT_OID_DISABLE_SEARCH_DS_FLAG</c> flag.
            </para>
            <para>
            The bit length shifted left 16 bits can be specified in the dwGroupId parameter by using the logical <c>OR</c> operator (|).
            This is only applicable to the <c>CRYPT_ENCRYPT_ALG_OID_GROUP_ID</c> group entries that have a bit length specified in the
            <c>ExtraInfo</c> member of the CRYPT_OID_INFO structure. Currently, only the AES encryption algorithms have this. The constant
            <c>CRYPT_OID_INFO_OID_GROUP_BIT_LEN_SHIFT</c> can be used for doing the shift. For example, to find the OID information for
            <c>BCRYPT_AES_ALGORITHM</c> with bit length equal to 192, call <c>CryptFindOIDInfo</c> as follows.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptFreeOIDFunctionAddress(Vanara.PInvoke.Crypt32.HCRYPTOIDFUNCADDR,System.UInt32)">
            <summary>
            The <c>CryptFreeOIDFunctionAddress</c> function releases a handle returned by CryptGetOIDFunctionAddress or
            CryptGetDefaultOIDFunctionAddress by decrementing the reference count on the function handle. In some cases, the DLL file
            associated with the function is unloaded. For details, see Remarks.
            </summary>
            <param name="hFuncAddr">Handle of the function previously obtained from a call to CryptGetOIDFunctionAddress or CryptGetDefaultOIDFunctionAddress.</param>
            <param name="dwFlags">Reserved for future use and must be zero.</param>
            <returns>
            <para>If the function succeeds, the function returns nonzero ( <c>TRUE</c>).</para>
            <para>If the function fails, it returns zero ( <c>FALSE</c>).</para>
            </returns>
            <remarks>
            If the reference count becomes zero and a DLL is loaded for the function being freed, the DLL might be unloaded. If the DLL
            exports the DLLCanUnloadNow function, that function is called and its return is checked. An S_FALSE return from this function
            cancels the unloading of the DLL at this time. If the function returns S_TRUE or if the DLL does not export the
            <c>DLLCanUnloadNow</c> function, an unloading process is started. In this case, actual unloading is deferred for 15 seconds. If
            another <c>CryptFreeOIDFunctionAddress</c> or CryptGetDefaultOIDFunctionAddress that requires the DLL occurs before the 15
            seconds elapse, the deferred unload process is canceled.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptGetDefaultOIDDllList(Vanara.PInvoke.Crypt32.HCRYPTOIDFUNCSET,Vanara.PInvoke.Crypt32.CertEncodingType,System.Text.StringBuilder,System.Int32@)">
            <summary>
            The <c>CryptGetDefaultOIDDllList</c> function acquires the list of the names of DLL files that contain registered default object
            identifier (OID) functions for a specified function set and encoding type.
            </summary>
            <param name="hFuncSet">Function set handle previously obtained by a call to CryptInitOIDFunctionSet.</param>
            <param name="dwEncodingType">
            <para>
            Specifies the encoding type to be matched. Currently, only X509_ASN_ENCODING and PKCS_7_ASN_ENCODING are being used; however,
            additional encoding types may be added in the future. To match both current encoding types, use:
            </para>
            <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING</para>
            <para>
            <c>Note</c> Either a certificate or message encoding type is required. X509_ASN_ENCODING is the default. If that type is
            indicated, it is used; otherwise, if the PKCS7_ASN_ENCODING type is indicated, it is used.
            </para>
            </param>
            <param name="pwszDllList">
            <para>
            A pointer to a buffer to receive the list of zero or more null-terminated file names. The returned list is terminated with a
            terminating <c>NULL</c> character. For example, a list of two names could be:
            </para>
            <para>L"first.dll\0" L"second.dll\0" L"\0"</para>
            <para>
            To retrieve the number of wide characters the buffer must hold, this parameter can be <c>NULL</c>. For more information, see
            Retrieving Data of Unknown Length.
            </para>
            </param>
            <param name="pcchDllList">
            <para>
            A pointer to a <c>DWORD</c> that specifies the size, in wide characters, of the returned list pointed to by the pwszDllList
            parameter. When the function returns, the variable pointed to by the pcchDllList parameter contains the number of wide
            characters stored in the buffer.
            </para>
            <para>
            <c>Note</c> When processing the data returned in the buffer, applications need to use the actual size of the data returned. The
            actual size can be slightly smaller than the size of the buffer specified on input. On input, buffer sizes are usually specified
            large enough to ensure that the largest possible output data will fit in the buffer. On output, the variable pointed to by this
            parameter is updated to reflect the actual size of the data copied to the buffer.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the function returns nonzero ( <c>TRUE</c>).</para>
            <para>If the function fails, it returns zero ( <c>FALSE</c>). For extended error information, call GetLastError.</para>
            <para>This function has the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_MORE_DATA</term>
            <term>
            If the buffer specified by the pwszDllList parameter is not large enough to hold the returned data, the function sets the
            ERROR_MORE_DATA code and stores the required buffer size, in wide characters, in the variable pointed to by pcchDllList.
            </term>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptGetDefaultOIDFunctionAddress(Vanara.PInvoke.Crypt32.HCRYPTOIDFUNCSET,Vanara.PInvoke.Crypt32.CertEncodingType,System.String,System.UInt32,System.IntPtr@,Vanara.PInvoke.Crypt32.HCRYPTOIDFUNCADDR@)">
            <summary>
            The <c>CryptGetDefaultOIDFunctionAddress</c> function loads the DLL that contains a default function address. It can also return
            the address of the first or next installed default object identifier (OID) function in an initialized function set and load the
            DLL that contains the address of that function.
            </summary>
            <param name="hFuncSet">Function set handle previously obtained from a call to CryptInitOIDFunctionSet.</param>
            <param name="dwEncodingType">
            <para>
            Encoding type to be matched. Currently, only X509_ASN_ENCODING and PKCS_7_ASN_ENCODING are being used; however, additional
            encoding types may be added in the future. To match both current encoding types, use:
            </para>
            <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING</para>
            </param>
            <param name="pwszDll">
            Name of the DLL to load. Normally, the DLL name is obtained from the list returned by CryptGetDefaultOIDDllList. If pwszDll is
            <c>NULL</c>, a search is performed on the list of installed default functions.
            </param>
            <param name="dwFlags">Reserved for future use and must be zero.</param>
            <param name="ppvFuncAddr">
            A pointer to the address of the return function. If the function fails, a <c>NULL</c> is returned in ppvFuncAddr.
            </param>
            <param name="phFuncAddr">
            <para>
            Used only if pwszDll is <c>NULL</c>. On the first call to the function, *phFuncAddr must be <c>NULL</c> to acquire the first
            installed function.
            </para>
            <para>
            When this function is successful, *phFuncAddr is set to a function handle. The reference count for the function handle is incremented.
            </para>
            <para>
            After the first call to the function, phFuncAddr is set to the pointer returned by the previous call. This input pointer is
            always freed within the function through a call to CryptFreeOIDFunctionAddress by this function. The call to free the pointer is
            always made even when the main function returns an error.
            </para>
            <para>
            A non- <c>NULL</c> phFuncAddr must be released either through a call to CryptFreeOIDFunctionAddress or by being passed back as
            input to this function or as input to CryptGetOIDFunctionAddress.
            </para>
            <para>If pwszDll is not <c>NULL</c>, the value of this parameter is ignored and a non- <c>NULL</c> pointer is not freed.</para>
            </param>
            <returns>
            <para>If the function succeeds, the function returns nonzero ( <c>TRUE</c>).</para>
            <para>If the function fails, it returns zero ( <c>FALSE</c>).</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptGetOIDFunctionAddress(Vanara.PInvoke.Crypt32.HCRYPTOIDFUNCSET,Vanara.PInvoke.Crypt32.CertEncodingType,Vanara.PInvoke.Crypt32.SafeOID,Vanara.PInvoke.Crypt32.OIDFuncFlags,System.IntPtr@,Vanara.PInvoke.Crypt32.HCRYPTOIDFUNCADDR@)">
            <summary>
            The <c>CryptGetOIDFunctionAddress</c> function searches the list of registered and installed functions for an encoding type and
            object identifier (OID) match. If a match is found, the DLL that contains the function is, if necessary, loaded. If a match is
            found, a pointer to the function address and a pointer to the function handle are also returned. The reference count on the
            function handle is incremented.
            </summary>
            <param name="hFuncSet">The function set handle previously obtained from a call to the CryptInitOIDFunctionSet function.</param>
            <param name="dwEncodingType">
            <para>
            Specifies the encoding type to be matched. Currently, only X509_ASN_ENCODING and PKCS_7_ASN_ENCODING are used; however,
            additional encoding types can be added in the future. To match both current encoding types, use:
            </para>
            <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING</para>
            <para>For functions that do not use an encoding type, set this parameter to zero.</para>
            </param>
            <param name="pszOID">
            If the high-order word of the OID is nonzero, pszOID is a pointer to either an OID string such as "2.5.29.1" or an ASCII string
            such as "file". If the high-order word of the OID is zero, the low-order word specifies the numeric identifier to be used as the
            object identifier. This resulting OID maps to the function that was either installed or registered with the same OID.
            </param>
            <param name="dwFlags">
            <para>This parameter can be the following value.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPT_GET_INSTALLED_OID_FUNC_FLAG</term>
            <term>Searches only the installed list of functions.</term>
            </item>
            </list>
            </param>
            <param name="ppvFuncAddr">
            A pointer to a pointer to a function address. If a match is found, ppvFuncAddr points to the function address.
            </param>
            <param name="phFuncAddr">
            <para>
            If a match is found, phFuncAddr points to the function handle. The reference count for the handle is incremented. When you have
            finished using the handle, release the handle by calling the CryptFreeOIDFunctionAddress function.
            </para>
            <para>
            <c>Note</c> By default, both the registered and installed function lists are searched. To search only the installed list of
            functions, set CRYPT_GET_INSTALLED_OID_FUNC_FLAG. This flag would be set by a registered function to get the address of a
            preinstalled function it was replacing. For example, the registered function might handle a new special case and call the
            preinstalled function to handle the remaining cases.
            </para>
            </param>
            <returns>
            <para>If the function succeeds and a match is found, the function returns nonzero ( <c>TRUE</c>).</para>
            <para>If the function fails or no match is found, it returns zero ( <c>FALSE</c>). For extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            You can call <c>CryptGetOIDFunctionAddress</c> with the pszOID argument set to <c>CMSG_DEFAULT_INSTALLABLE_FUNC_OID</c> to get
            the default installable function for the following callback functions.
            </para>
            <para>
            For retrieval of the default functions, set dwEncodingType to a bitwise <c>OR</c> combination of the following encoding types.
            </para>
            <para><c>CRYPT_ASN_ENCODING</c><c>X509_ASN_ENCODING</c></para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptGetOIDFunctionValue(Vanara.PInvoke.Crypt32.CertEncodingType,System.String,Vanara.PInvoke.Crypt32.SafeOID,System.String,Vanara.PInvoke.REG_VALUE_TYPE@,System.IntPtr,System.UInt32@)">
            <summary>
            The <c>CryptGetOIDFunctionValue</c> function queries a value associated with an OID. The query is made for a specific named
            value associated with an OID, function name, and encoding type. The function can return the type of queried value, the value,
            itself, or both.
            </summary>
            <param name="dwEncodingType">
            Specifies the encoding type to be matched. Currently, only X509_ASN_ENCODING and PKCS_7_ASN_ENCODING are being used; however,
            additional encoding types may be added in the future. To match both current encoding types, use X509_ASN_ENCODING | PKCS_7_ASN_ENCODING.
            </param>
            <param name="pszFuncName">A pointer to the null-terminated string that contains the name of the OID function set.</param>
            <param name="pszOID">
            If the high-order word of the OID is nonzero, pszOID is a pointer to either a null-terminated OID string such as "2.5.29.1" or a
            null-terminated ASCII string such as "file." If the high-order word of the OID is zero, the low-order word specifies the numeric
            identifier to be used as the object identifier.
            </param>
            <param name="pwszValueName">A pointer to a null-terminated Unicode string that contains the name of the value to be queried.</param>
            <param name="pdwValueType">
            <para>A pointer to a variable to receive the value's type. The type returned through this parameter will be one of the following.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>REG_DWORD</term>
            <term>A 32-bit number.</term>
            </item>
            <item>
            <term>REG_EXPAND_SZ</term>
            <term>
            A Unicode string that contains unexpanded references to environment variables such as "%PATH%". Applications should ensure that
            the string has a terminating null character before using it. For details about when the string does not have a terminating null
            character, see RegQueryValueEx.
            </term>
            </item>
            <item>
            <term>REG_MULTI_SZ</term>
            <term>
            An array of null-terminated Unicode strings. Applications should ensure that the array is properly terminated by two null
            characters before using it. For details about when the array is not terminated by two null characters, see RegQueryValueEx.
            </term>
            </item>
            <item>
            <term>REG_SZ</term>
            <term>
            A Unicode string. Applications should ensure that the string has a terminating null character before using it. For details about
            when the string does not have a terminating null character, see RegQueryValueEx.
            </term>
            </item>
            </list>
            <para>The pdwValueType parameter can be <c>NULL</c> if a returned type is not required.</para>
            </param>
            <param name="pbValueData">
            <para>
            A pointer to a buffer to receive the value associated with the pwszValueName parameter. The buffer must be big enough to contain
            the terminating <c>NULL</c> character. This parameter can be <c>NULL</c> if returned data is not required.
            </para>
            <para>
            This parameter can also be <c>NULL</c> to find the size of the buffer for memory allocation purposes. For more information, see
            Retrieving Data of Unknown Length.
            </para>
            </param>
            <param name="pcbValueData">
            <para>A pointer to a <c>DWORD</c> that specifies the size, in bytes, of the buffer pointed to by the pbValueData.</para>
            <para>
            In most cases the value returned in *pcbValueData includes the size of the terminating <c>NULL</c> character in the string. For
            information about situations where the <c>NULL</c> character is not included, see the Remarks section of RegQueryValueEx.
            </para>
            <para>
            <c>Note</c> When processing the data returned in the buffer, applications must use the actual size of the data returned. The
            actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually
            specified large enough to ensure that the largest possible output data will fit in the buffer.) On output, the variable pointed
            to by this parameter is updated to reflect the actual size of the data copied to the buffer.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the function returns nonzero ( <c>TRUE</c>).</para>
            <para>If the function fails, it returns zero ( <c>FALSE</c>). For extended error information, call GetLastError.</para>
            <para>This function has the following error code.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_MORE_DATA</term>
            <term>
            If the buffer specified by the pbValueData parameter is not large enough to hold the returned data, the function sets the
            ERROR_MORE_DATA code and stores the required buffer size, in bytes, into the variable pointed to by pcbValueData.
            </term>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptInitOIDFunctionSet(System.String,System.UInt32)">
            <summary>
            The <c>CryptInitOIDFunctionSet</c> initializes and returns the handle of the OID function set identified by a supplied function
            set name. If the set already exists, the handle of the existing set is returned. If the set does not exist, it is created. This
            allows different DLLs to install OID functions for the same function set name.
            </summary>
            <param name="pszFuncName">Name of the OID function set.</param>
            <param name="dwFlags">Reserved for future use and must be zero.</param>
            <returns>Returns the handle of the OID function set identified by pszFuncName, or <c>NULL</c> if the function fails.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptInstallOIDFunctionAddress(Vanara.PInvoke.HINSTANCE,Vanara.PInvoke.Crypt32.CertEncodingType,System.String,System.UInt32,Vanara.PInvoke.Crypt32.CRYPT_OID_FUNC_ENTRY[],Vanara.PInvoke.Crypt32.CryptInstallOIDFuncFlags)">
            <summary>The <c>CryptInstallOIDFunctionAddress</c> function installs a set of callable object identifier (OID) function addresses.</summary>
            <param name="hModule">
            This parameter is updated with the hModule parameter passed to <c>DllMain</c> to prevent the DLL that contains the function
            addresses from being unloaded by CryptGetOIDFunctionAddress or CryptFreeOIDFunctionAddress. This would be the case when the DLL
            has also registered OID functions through CryptRegisterOIDFunction.
            </param>
            <param name="dwEncodingType">
            <para>
            Specifies the encoding type to be matched. Currently, only X509_ASN_ENCODING and PKCS_7_ASN_ENCODING are being used; however,
            additional encoding types may be added in the future. To match both current encoding types, use:
            </para>
            <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING</para>
            </param>
            <param name="pszFuncName">Name of the function set being installed.</param>
            <param name="cFuncEntry">Number of array elements in rgFuncEntry[].</param>
            <param name="rgFuncEntry">
            <para>Array of CRYPT_OID_FUNC_ENTRY structures, each containing an OID and the starting address of its correlated routine.</para>
            <para>
            Default functions are installed by setting the <c>pszOID</c> member of the CRYPT_OID_FUNC_ENTRY structure for their array
            element to CRYPT_DEFAULT_OID.
            </para>
            </param>
            <param name="dwFlags">
            By default, a new function set is installed at the end of the list of function sets. Setting the
            CRYPT_INSTALL_OID_FUNC_BEFORE_FLAG flag installs the function set at the beginning of the list.
            </param>
            <returns>
            <para>If the function succeeds, the function returns nonzero ( <c>TRUE</c>).</para>
            <para>If the function fails, it returns zero ( <c>FALSE</c>).</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptRegisterDefaultOIDFunction(Vanara.PInvoke.Crypt32.CertEncodingType,System.String,System.UInt32,System.String)">
            <summary>
            The <c>CryptRegisterDefaultOIDFunction</c> registers a DLL containing the default function to be called for the specified
            encoding type and function name. Unlike CryptRegisterOIDFunction, the function name to be exported by the DLL cannot be overridden.
            </summary>
            <param name="dwEncodingType">
            <para>
            Specifies the encoding type to be matched. Currently, only X509_ASN_ENCODING and PKCS_7_ASN_ENCODING are being used; however,
            additional encoding types may be added in the future. To match both current encoding types, use:
            </para>
            <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING.</para>
            </param>
            <param name="pszFuncName">Name of the function being registered.</param>
            <param name="dwIndex">
            Index location for the insertion of the DLL in the list of DLLs. If dwIndex is zero, the DLL is inserted at the beginning of the
            list. If it is CRYPT_REGISTER_LAST_INDEX (0xFFFFFFFF), the DLL is appended at the end of the list.
            </param>
            <param name="pwszDll">
            Optional environment-variable string to be expanded using ExpandEnvironmentStrings function before loading the DLL.
            </param>
            <returns>
            <para>If the function succeeds, the return value is nonzero ( <c>TRUE</c>).</para>
            <para>If the function fails, the return value is zero ( <c>FALSE</c>).</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptRegisterOIDFunction(Vanara.PInvoke.Crypt32.CertEncodingType,System.String,Vanara.PInvoke.Crypt32.SafeOID,System.String,System.String)">
            <summary>
            <para>
            The <c>CryptRegisterOIDFunction</c> function registers a DLL that contains the function to be called for the specified encoding
            type, function name, and object identifier (OID).
            </para>
            <para>
            By default, new function names are installed at the end of the list. To register a new function before the installed functions,
            call the CryptSetOIDFunctionValue function with dwValueType set to <c>REG_DWORD</c> and pwszValueName set to CRYPT_OID_REG_FLAGS_VALUE_NAME.
            </para>
            <para>CRYPT_OID_REG_FLAGS_VALUE_NAME is defined as L"CryptFlags".</para>
            <para>
            In addition to registering a DLL, the name of the function to be called can be overridden. For example, the pszFuncName
            parameter can be set to CryptDllEncodeObject and the pszOverrideFuncName parameter to MyEncodeXyz. The new form of
            CryptDllEncodeObject can then be referred to by using the name MyEncodeXyz. This allows a DLL to export multiple OID functions
            for the same function name without needing to interpose its own OID dispatcher function.
            </para>
            </summary>
            <param name="dwEncodingType">
            <para>
            Specifies the encoding type to be matched. Currently, only X509_ASN_ENCODING and PKCS_7_ASN_ENCODING are being used; however,
            additional encoding types may be added in the future. To match both current encoding types, use:
            </para>
            <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING.</para>
            </param>
            <param name="pszFuncName">Name of the function being registered.</param>
            <param name="pszOID">
            OID of the function to be registered. If the high-order word of the OID is nonzero, pszOID is a pointer to either an OID string
            such as "2.5.29.1" or an ASCII string such as "file." If the high-order word of the OID is zero, the low-order word specifies
            the numeric identifier to be used as the object identifier.
            </param>
            <param name="pwszDll">
            Name of the DLL file to be registered. It can contain environment-variable strings to be expanded by using the
            ExpandEnvironmentStrings function before loading the DLL.
            </param>
            <param name="pszOverrideFuncName">
            String that specifies a name for the function exported in the DLL. If pszOverrideFuncName is <c>NULL</c>, the function name
            specified by pszFuncName is used.
            </param>
            <returns>
            <para>If the function succeeds, the return value is nonzero ( <c>TRUE</c>).</para>
            <para>If the function fails, the return value is zero ( <c>FALSE</c>).</para>
            </returns>
            <remarks>When you have finished using an OID function, unregister it by calling the CryptUnregisterOIDFunction function.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptRegisterOIDInfo(Vanara.PInvoke.Crypt32.CRYPT_OID_INFO@,Vanara.PInvoke.Crypt32.CryptInstallOIDFuncFlags)">
            <summary>
            <para>
            The <c>CryptRegisterOIDInfo</c> function registers the OID information specified in the CRYPT_OID_INFO structure, persisting it
            to the registry.
            </para>
            <para>
            Crypt32.dll contains predefined information for the commonly known OIDs. This function allows applications to augment the
            predefined OID information. During <c>CryptRegisterOIDInfo</c>'s first call, the registered OID information is installed.
            </para>
            <para>
            When expanding the tables using <c>CryptRegisterOIDInfo</c>, the new entries can be placed either before or after predefined
            entries, controlled by dwFlags. The placement of registered OID information affects the result of CryptFindOIDInfo because the
            tables are searched in order. First registered entries placed before the predefined entries are checked, then the predefined
            entries are checked, and finally, registered entries placed after the predefined entries are checked. The first match found is
            returned. A newly registered entry placed before the predefined entries can override one of the predefined entries.
            </para>
            </summary>
            <param name="pInfo">
            <para>
            A pointer to a CRYPT_OID_INFO structure with the OID information to register. Specify the group that the OID information is to
            be registered for by setting the <c>dwGroupId</c> member of the structure.
            </para>
            <para>
            <c>Note</c> When registering OID information for Suite B algorithms implemented with Cryptography API: Next Generation (CNG),
            you must set the <c>Algid</c> member of the CRYPT_OID_INFO structure to <c>CALG_OID_INFO_CNG_ONLY</c> (0xFFFFFFFF).
            </para>
            </param>
            <param name="dwFlags">
            By default, the registered OID information is installed after Crypt32.dll's OID entries. If CRYPT_INSTALL_OID_INFO_BEFORE_FLAG
            is set, new OID information is install before Crypt32.dll's entries.
            </param>
            <returns>
            <para>If the function succeeds, the return value is nonzero (TRUE).</para>
            <para>If the function fails, the return value is zero (FALSE).</para>
            </returns>
            <remarks>When you have finished using the OID information, unregister it by calling the CryptUnregisterOIDInfo function.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptSetOIDFunctionValue(Vanara.PInvoke.Crypt32.CertEncodingType,System.String,Vanara.PInvoke.Crypt32.SafeOID,System.String,Vanara.PInvoke.REG_VALUE_TYPE,System.IntPtr,System.UInt32)">
            <summary>
            The <c>CryptSetOIDFunctionValue</c> function sets a value for the specified encoding type, function name, OID, and value name.
            </summary>
            <param name="dwEncodingType">
            <para>
            Specifies the encoding type to be matched. Currently, only X509_ASN_ENCODING and PKCS_7_ASN_ENCODING are being used; however,
            additional encoding types may be added in the future. To match both current encoding types, use:
            </para>
            <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING.</para>
            </param>
            <param name="pszFuncName">Name of the function for which the encoding type, OID, and value name is being updated.</param>
            <param name="pszOID">
            If the high-order word of the object identifier (OID) is nonzero, pszOID is a pointer to either an OID string such as "2.5.29.1"
            or an ASCII string such as "file". If the high-order word of the OID is zero, the low-order word specifies the integer
            identifier to be used as the object identifier.
            </param>
            <param name="pwszValueName">
            A pointer to a Unicode string containing the name of the value to set. If a value with this name is not already present, the
            function creates it.
            </param>
            <param name="dwValueType">
            <para>Specifies the type of information to be stored as the value's data. This parameter can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>REG_DWORD</term>
            <term>A 32-bit number.</term>
            </item>
            <item>
            <term>REG_EXPAND_SZ</term>
            <term>A null-terminated Unicode string that contains unexpanded references to environment variables (for example, "%PATH%").</term>
            </item>
            <item>
            <term>REG_MULTI_SZ</term>
            <term>An array of null-terminated Unicode strings, terminated by two NULL characters.</term>
            </item>
            <item>
            <term>REG_SZ</term>
            <term>A null-terminated Unicode string.</term>
            </item>
            </list>
            </param>
            <param name="pbValueData">Points to a buffer containing the data to be stored for the specified value name.</param>
            <param name="cbValueData">
            Specifies the size, in bytes, of the information pointed to by the pbValueData parameter. If the data is of type REG_SZ,
            REG_EXPAND_SZ, or REG_MULTI_SZ, the size must include the terminating <c>NULL</c> wide character.
            </param>
            <returns>
            <para>If the function succeeds, the return value is nonzero ( <c>TRUE</c>).</para>
            <para>If the function fails, the return value is zero ( <c>FALSE</c>).</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptUnregisterDefaultOIDFunction(Vanara.PInvoke.Crypt32.CertEncodingType,System.String,System.String)">
            <summary>
            The <c>CryptUnregisterDefaultOIDFunction</c> removes the registration of a DLL containing the default function to be called for
            the specified encoding type and function name.
            </summary>
            <param name="dwEncodingType">
            <para>
            Specifies the encoding type to be matched. Currently, only X509_ASN_ENCODING and PKCS_7_ASN_ENCODING are being used; however,
            additional encoding types may be added in the future. To match both current encoding types, use:
            </para>
            <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING.</para>
            </param>
            <param name="pszFuncName">Name of the function being unregistered.</param>
            <param name="pwszDll">Name of the DLL where the function is located.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero ( <c>TRUE</c>).</para>
            <para>If the function fails, the return value is zero ( <c>FALSE</c>).</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptUnregisterOIDFunction(Vanara.PInvoke.Crypt32.CertEncodingType,System.String,Vanara.PInvoke.Crypt32.SafeOID)">
            <summary>
            The <c>CryptUnregisterOIDFunction</c> function removes the registration of a DLL that contains the function to be called for the
            specified encoding type, function name, and OID.
            </summary>
            <param name="dwEncodingType">
            <para>
            Specifies the encoding type to be matched. Currently, only X509_ASN_ENCODING and PKCS_7_ASN_ENCODING are used; however,
            additional encoding types may be added in the future. To match both current encoding types, use:
            </para>
            <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING</para>
            <para>For functions that do not use an encoding type, set this parameter to zero.</para>
            </param>
            <param name="pszFuncName">Name of the function being unregistered.</param>
            <param name="pszOID">
            A pointer to the object identifier (OID) that corresponds to the name of the function being unregistered. If the high order word
            of the OID is nonzero, pszOID is a pointer to either an OID string such as "2.5.29.1" or an ASCII string such as "file." If the
            high order word of the OID is zero, the low order word specifies the integer identifier to be used as the object identifier.
            </param>
            <returns>
            <para>If the function succeeds, the return value is nonzero ( <c>TRUE</c>).</para>
            <para>If the function fails, the return value is zero ( <c>FALSE</c>).</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptUnregisterOIDInfo(Vanara.PInvoke.Crypt32.CRYPT_OID_INFO@)">
            <summary>
            The <c>CryptUnregisterOIDInfo</c> function removes the registration of a specified CRYPT_OID_INFO OID information structure. The
            structure to be unregistered is identified by the structure's <c>pszOID</c> and <c>dwGroupId</c> members.
            </summary>
            <param name="pInfo">
            Specifies the object identifier (OID) information for which the registration is to be removed. The group that the registration
            is removed for is specified by the <c>dwGroupId</c> member in the pInfo.
            </param>
            <returns>
            <para>If the function succeeds, the return value is nonzero (TRUE).</para>
            <para>If the function fails, the return value is zero (FALSE).</para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CRYPT_OID_FUNC_ENTRY">
            <summary>
            The <c>CRYPT_OID_FUNC_ENTRY</c> structure contains an object identifier (OID) and a pointer to its related function. It is used
            with CryptInstallOIDFunctionAddress.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_OID_FUNC_ENTRY.pszOID">
            <summary>
            If the high-order word of the OID is nonzero, <c>pszOID</c> is a pointer to either an OID string, such as "2.5.29.1" or an
            ASCII string, such as "file". If the high-order word of the OID is zero, the low-order word specifies the numeric identifier
            to be used as the object identifier.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_OID_FUNC_ENTRY.pvFuncAddr">
            <summary>The starting address of the function that the OID identifies.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CRYPT_OID_INFO">
            <summary>
            The <c>CRYPT_OID_INFO</c> structure contains information about an object identifier (OID). These structures give the
            relationship among an OID identifier, its name, its group, and other information about the OID. These structures can be listed
            by using the CryptEnumOIDInfo function. New CRYPT_OID_STRUCTURES can be added by using the CryptRegisterOIDInfo function.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_OID_INFO.cbSize">
            <summary>The size, in bytes, of this structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_OID_INFO.pszOID">
            <summary>The OID associated with this OID information.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_OID_INFO.pwszName">
            <summary>The display name associated with an OID.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_OID_INFO.dwGroupId">
            <summary>
            <para>The group identifier value associated with this OID information.</para>
            <para>This member can be one of the following <c>dwGroupId</c> group identifiers.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPT_ENCRYPT_ALG_OID_GROUP_ID</term>
            <term>Encryption algorithms</term>
            </item>
            <item>
            <term>CRYPT_ENHKEY_USAGE_OID_GROUP_ID</term>
            <term>Enhanced key usages</term>
            </item>
            <item>
            <term>CRYPT_EXT_OR_ATTR_OID_GROUP_ID</term>
            <term>Extensions or attributes</term>
            </item>
            <item>
            <term>CRYPT_HASH_ALG_OID_GROUP_ID</term>
            <term>Hash algorithms</term>
            </item>
            <item>
            <term>CRYPT_POLICY_OID_GROUP_ID</term>
            <term>Policies</term>
            </item>
            <item>
            <term>CRYPT_PUBKEY_ALG_OID_GROUP_ID</term>
            <term>Public key algorithms</term>
            </item>
            <item>
            <term>CRYPT_RDN_ATTR_OID_GROUP_ID</term>
            <term>RDN attributes</term>
            </item>
            <item>
            <term>CRYPT_SIGN_ALG_OID_GROUP_ID</term>
            <term>Signature algorithms</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_OID_INFO.Union">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CRYPT_OID_INFO.CRYPT_OID_INFO_UNION">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_OID_INFO.CRYPT_OID_INFO_UNION.dwValue">
            <summary>A numeric value associated with this OID information. This member is used with <c>dwGroupId</c> CRYPT_SIGN_ALG_OID_GROUP_ID.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_OID_INFO.CRYPT_OID_INFO_UNION.Algid">
            <summary>
            <para>The algorithm identifier associated with this OID information.</para>
            <para>This member applies for the following values of <c>dwGroupId</c>:</para>
            <list type="bullet">
            <item>
            <term>CRYPT_HASH_ALG_OID_GROUP_ID</term>
            </item>
            <item>
            <term>CRYPT_ENCRYPT_ALG_OID_GROUP_ID</term>
            </item>
            <item>
            <term>CRYPT_PUBKEY_ALG_OID_GROUP_ID</term>
            </item>
            <item>
            <term>CRYPT_SIGN_ALG_OID_GROUP_ID</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_OID_INFO.CRYPT_OID_INFO_UNION.dwLength">
            <summary>This member is not implemented. It is always set to zero.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_OID_INFO.ExtraInfo">
            <summary>
            <para>Extra information used to find or register OID information. This member applies for the following values of <c>dwGroupId</c>:</para>
            <list type="bullet">
            <item>
            <term>CRYPT_PUBKEY_ALG_OID_GROUP_ID</term>
            </item>
            <item>
            <term>CRYPT_SIGN_ALG_OID_GROUP_ID</term>
            </item>
            <item>
            <term>CRYPT_RDN_ATTR_OID_GROUP_ID</term>
            </item>
            </list>
            <para>
            The OIDs in the CRYPT_ENCRYPT_ALG_OID_GROUP_ID OID group have a bit length set for the AES algorithms in the DWORD[0] member
            of the ExtraInfo member.
            </para>
            <para>The OIDs in the CRYPT_PUBKEY_ALG_OID_GROUP_ID group have a flag set in the DWORD[0] member of the ExtraInfo member.</para>
            <para>
            The OIDs in the ECC curve name public keys, for example, szOID_ECC_CURVE_P256 ("1.2.840.10045.3.1.7"), have a flag set in
            the DWORD[0] member, a BCRYPT_ECCKEY_BLOB dwMagic field value set in the DWORD[1] member, and a bit length where the
            BCRYPT_ECCKEY_BLOB cbKey value equals dwBitLength / 8 + ((dwBitLength % 8) ? 1 : 0) set in the DWORD[2] member of the
            ExtraInfo member.
            </para>
            <para>
            The OIDs in the CRYPT_SIGN_ALG_OID_GROUP_ID group have a public key algorithm identifier set in the DWORD[0] member, a flag
            set in the DWORD[1] member, and an optional provider type set in the DWORD[2] member of the ExtraInfo member.
            </para>
            <para>
            The OIDs in the CRYPT_RDN_ATTR_OID_GROUP_ID group have a null-terminated list of acceptable RDN attribute value types set in
            an array of <c>DWORD</c> values in the ExtraInfo member. An omitted list implies an array of values where the first value in
            the array is CERT_RDN_PRINTABLE_STRING, the second value in the array is CERT_RDN_UNICODE_STRING, and the third value in the
            array is zero.
            </para>
            <para>The following values are used for the flags in the <c>ExtraInfo</c> member.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPT_OID_INHIBIT_SIGNATURE_FORMAT_FLAG</term>
            <term>
            This flag is no longer used. Stop the reformatting of the signature before the CryptVerifySignature function is called or
            after the CryptSignHash function is called.
            </term>
            </item>
            <item>
            <term>CRYPT_OID_NO_NULL_ALGORITHM_PARA_FLAG</term>
            <term>Omit NULL parameters when encoding.</term>
            </item>
            <item>
            <term>CRYPT_OID_PUBKEY_ENCRYPT_ONLY_FLAG</term>
            <term>The public key is only used for encryption.</term>
            </item>
            <item>
            <term>CRYPT_OID_PUBKEY_SIGN_ONLY_FLAG</term>
            <term>The public key is only used for signatures.</term>
            </item>
            <item>
            <term>CRYPT_OID_USE_PUBKEY_PARA_FOR_PKCS7_FLAG</term>
            <term>
            This flag is no longer used. Include the parameters of the public key algorithm in the digestEncryptionAlgorithm parameters
            for the PKCS #7 message.
            </term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_OID_INFO.pwszCNGAlgid">
            <summary>
            <para>
            The algorithm identifier string passed to the CNG functions (the BCrypt* and NCrypt* functions that are defined in Bcrypt.h
            and Ncrypt.h). CNG functions use algorithm identifier strings, such as L"SHA1", instead of the ALG_ID data type constants,
            such as <c>CALG_SHA1</c>. <c>Windows Server 2003 and Windows XP:</c> This member is not available.
            </para>
            <para><c>Note</c> The <c>pwszCNGAlgid</c> member is only available if you include the following statement in your code.</para>
            <para>This member applies for the following values of <c>dwGroupId</c>:</para>
            <list type="bullet">
            <item>
            <term>CRYPT_HASH_ALG_OID_GROUP_ID</term>
            </item>
            <item>
            <term>CRYPT_ENCRYPT_ALG_OID_GROUP_ID</term>
            </item>
            <item>
            <term>CRYPT_PUBKEY_ALG_OID_GROUP_ID</term>
            </item>
            <item>
            <term>CRYPT_SIGN_ALG_OID_GROUP_ID</term>
            </item>
            </list>
            <para>Set the pwszCNGAlgid member to the empty string, L"", for the other values of dwGroupId.</para>
            <para>
            The <c>pwszCNGAlgid</c> member can also be set to a string value that is not passed directly to the CNG functions. The
            following table lists these values and their meanings.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPT_OID_INFO_ECC_PARAMETERS_ALGORITHM</term>
            <term>The ECC curve algorithm is obtained from the encoded parameters of the OID algorithm.</term>
            </item>
            <item>
            <term>CRYPT_OID_INFO_ECC_WRAP_PARAMETERS_ALGORITHM</term>
            <term>The key wrap algorithm is obtained from the encoded parameters of the OID algorithm.</term>
            </item>
            <item>
            <term>CRYPT_OID_INFO_HASH_PARAMETERS_ALGORITHM</term>
            <term>The hash algorithm is obtained from the encoded parameters of the OID algorithm.</term>
            </item>
            <item>
            <term>CRYPT_OID_INFO_MGF1_PARAMETERS_ALGORITHM</term>
            <term>The PKCS #1 v2.1 mask generation hash algorithm is obtained from the encoded parameters of the OID algorithm.</term>
            </item>
            <item>
            <term>CRYPT_OID_INFO_NO_SIGN_ALGORITHM</term>
            <term>A public key algorithm that indicates the signature value is an unsigned hash.</term>
            </item>
            <item>
            <term>CRYPT_OID_INFO_OAEP_PARAMETERS_ALGORITHM</term>
            <term>The RSAES-OAEP padding hash algorithm is obtained from the encoded parameters of the OID algorithm.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CRYPT_OID_INFO.pwszCNGExtraAlgid">
            <summary>
            <para>
            An extra algorithm string, other than the string in the <c>pwszCNGAlgid</c> member, that can be passed to the CNG functions
            (the BCrypt* and NCrypt* functions that are defined in Bcrypt.h and Ncrypt.h).
            </para>
            <para><c>Windows Server 2003 and Windows XP:</c> This member is not available.</para>
            <para><c>Note</c> This member is only available if you include the following statement in your code.</para>
            <para>
            For the signature algorithms (CRYPT_SIGN_ALG_OID_GROUP_ID), this member is the public key algorithm string to pass to the
            CNG functions.
            </para>
            <para>For ECC signatures, this member is the special CRYPT_OID_INFO_ECC_PARAMETERS_ALGORITHM string value.</para>
            <para>For unsigned signatures, this member is the special CRYPT_OID_INFO_NO_SIGN_ALGORITHM string value.</para>
            <para>
            For ECC curve name public keys, for example, szOID_ECC_CURVE_P256 ("1.2.840.10045.3.1.7"), this is the special
            CRYPT_OID_INFO_ECC_PARAMETERS_ALGORITHM string value.
            </para>
            <para>For the other values of <c>dwGroupId</c>, set the <c>pwszCNGExtraAlgid</c> member to the empty string, L"".</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.HCRYPTOIDFUNCADDR">
            <summary>Provides a handle to a OID function address.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.HCRYPTOIDFUNCADDR.#ctor(System.IntPtr)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Crypt32.HCRYPTOIDFUNCADDR"/> struct.</summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
        </member>
        <member name="P:Vanara.PInvoke.Crypt32.HCRYPTOIDFUNCADDR.NULL">
            <summary>Returns an invalid handle by instantiating a <see cref="T:Vanara.PInvoke.Crypt32.HCRYPTOIDFUNCADDR"/> object with <see cref="F:System.IntPtr.Zero"/>.</summary>
        </member>
        <member name="P:Vanara.PInvoke.Crypt32.HCRYPTOIDFUNCADDR.IsNull">
            <summary>Gets a value indicating whether this instance is a null handle.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.HCRYPTOIDFUNCADDR.op_Explicit(Vanara.PInvoke.Crypt32.HCRYPTOIDFUNCADDR)~System.IntPtr">
            <summary>Performs an explicit conversion from <see cref="T:Vanara.PInvoke.Crypt32.HCRYPTOIDFUNCADDR"/> to <see cref="T:System.IntPtr"/>.</summary>
            <param name="h">The handle.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.HCRYPTOIDFUNCADDR.op_Implicit(System.IntPtr)~Vanara.PInvoke.Crypt32.HCRYPTOIDFUNCADDR">
            <summary>Performs an implicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:Vanara.PInvoke.Crypt32.HCRYPTOIDFUNCADDR"/>.</summary>
            <param name="h">The pointer to a handle.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.HCRYPTOIDFUNCADDR.op_Inequality(Vanara.PInvoke.Crypt32.HCRYPTOIDFUNCADDR,Vanara.PInvoke.Crypt32.HCRYPTOIDFUNCADDR)">
            <summary>Implements the operator !=.</summary>
            <param name="h1">The first handle.</param>
            <param name="h2">The second handle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.HCRYPTOIDFUNCADDR.op_Equality(Vanara.PInvoke.Crypt32.HCRYPTOIDFUNCADDR,Vanara.PInvoke.Crypt32.HCRYPTOIDFUNCADDR)">
            <summary>Implements the operator ==.</summary>
            <param name="h1">The first handle.</param>
            <param name="h2">The second handle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.HCRYPTOIDFUNCADDR.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.HCRYPTOIDFUNCADDR.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.HCRYPTOIDFUNCADDR.DangerousGetHandle">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.HCRYPTOIDFUNCSET">
            <summary>Provides a handle to an OID function set.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.HCRYPTOIDFUNCSET.#ctor(System.IntPtr)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Crypt32.HCRYPTOIDFUNCSET"/> struct.</summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
        </member>
        <member name="P:Vanara.PInvoke.Crypt32.HCRYPTOIDFUNCSET.NULL">
            <summary>Returns an invalid handle by instantiating a <see cref="T:Vanara.PInvoke.Crypt32.HCRYPTOIDFUNCSET"/> object with <see cref="F:System.IntPtr.Zero"/>.</summary>
        </member>
        <member name="P:Vanara.PInvoke.Crypt32.HCRYPTOIDFUNCSET.IsNull">
            <summary>Gets a value indicating whether this instance is a null handle.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.HCRYPTOIDFUNCSET.op_Explicit(Vanara.PInvoke.Crypt32.HCRYPTOIDFUNCSET)~System.IntPtr">
            <summary>Performs an explicit conversion from <see cref="T:Vanara.PInvoke.Crypt32.HCRYPTOIDFUNCSET"/> to <see cref="T:System.IntPtr"/>.</summary>
            <param name="h">The handle.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.HCRYPTOIDFUNCSET.op_Implicit(System.IntPtr)~Vanara.PInvoke.Crypt32.HCRYPTOIDFUNCSET">
            <summary>Performs an implicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:Vanara.PInvoke.Crypt32.HCRYPTOIDFUNCSET"/>.</summary>
            <param name="h">The pointer to a handle.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.HCRYPTOIDFUNCSET.op_Inequality(Vanara.PInvoke.Crypt32.HCRYPTOIDFUNCSET,Vanara.PInvoke.Crypt32.HCRYPTOIDFUNCSET)">
            <summary>Implements the operator !=.</summary>
            <param name="h1">The first handle.</param>
            <param name="h2">The second handle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.HCRYPTOIDFUNCSET.op_Equality(Vanara.PInvoke.Crypt32.HCRYPTOIDFUNCSET,Vanara.PInvoke.Crypt32.HCRYPTOIDFUNCSET)">
            <summary>Implements the operator ==.</summary>
            <param name="h1">The first handle.</param>
            <param name="h2">The second handle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.HCRYPTOIDFUNCSET.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.HCRYPTOIDFUNCSET.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.HCRYPTOIDFUNCSET.DangerousGetHandle">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.PCCRYPT_OID_INFO">
            <summary>Provides a pointer to a CRYPT_OID_INFO.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.PCCRYPT_OID_INFO.#ctor(System.IntPtr)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Crypt32.PCCRYPT_OID_INFO"/> struct.</summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
        </member>
        <member name="P:Vanara.PInvoke.Crypt32.PCCRYPT_OID_INFO.NULL">
            <summary>Returns an invalid handle by instantiating a <see cref="T:Vanara.PInvoke.Crypt32.PCCRYPT_OID_INFO"/> object with <see cref="F:System.IntPtr.Zero"/>.</summary>
        </member>
        <member name="P:Vanara.PInvoke.Crypt32.PCCRYPT_OID_INFO.IsNull">
            <summary>Gets a value indicating whether this instance is a null handle.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.PCCRYPT_OID_INFO.op_Explicit(Vanara.PInvoke.Crypt32.PCCRYPT_OID_INFO)~System.IntPtr">
            <summary>Performs an explicit conversion from <see cref="T:Vanara.PInvoke.Crypt32.PCCRYPT_OID_INFO"/> to <see cref="T:System.IntPtr"/>.</summary>
            <param name="h">The handle.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.PCCRYPT_OID_INFO.op_Implicit(System.IntPtr)~Vanara.PInvoke.Crypt32.PCCRYPT_OID_INFO">
            <summary>Performs an implicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:Vanara.PInvoke.Crypt32.PCCRYPT_OID_INFO"/>.</summary>
            <param name="h">The pointer to a handle.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.PCCRYPT_OID_INFO.op_Explicit(Vanara.PInvoke.Crypt32.PCCRYPT_OID_INFO)~Vanara.PInvoke.Crypt32.CRYPT_OID_INFO">
            <summary>Performs an explicit conversion from <see cref="T:Vanara.PInvoke.Crypt32.PCCRYPT_OID_INFO"/> to <see cref="T:Vanara.PInvoke.Crypt32.CRYPT_OID_INFO"/>.</summary>
            <param name="h">The handle.</param>
            <returns>The resulting <see cref="T:Vanara.PInvoke.Crypt32.CRYPT_OID_INFO"/> instance from the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.PCCRYPT_OID_INFO.op_Inequality(Vanara.PInvoke.Crypt32.PCCRYPT_OID_INFO,Vanara.PInvoke.Crypt32.PCCRYPT_OID_INFO)">
            <summary>Implements the operator !=.</summary>
            <param name="h1">The first handle.</param>
            <param name="h2">The second handle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.PCCRYPT_OID_INFO.op_Equality(Vanara.PInvoke.Crypt32.PCCRYPT_OID_INFO,Vanara.PInvoke.Crypt32.PCCRYPT_OID_INFO)">
            <summary>Implements the operator ==.</summary>
            <param name="h1">The first handle.</param>
            <param name="h2">The second handle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.PCCRYPT_OID_INFO.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.PCCRYPT_OID_INFO.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.PCCRYPT_OID_INFO.DangerousGetHandle">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.AlgOID">
            <summary>Definitions of various algorithm object identifiers RSA</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_ANSI_X942">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_ANSI_X942_DH">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_CN_ECDSA_SHA256">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_DH_SINGLE_PASS_STDDH_SHA1_KDF">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_DH_SINGLE_PASS_STDDH_SHA256_KDF">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_DH_SINGLE_PASS_STDDH_SHA384_KDF">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_DS">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_DSALG">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_DSALG_CRPT">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_DSALG_HASH">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_DSALG_RSA">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_DSALG_SIGN">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_ECC_CURVE_BRAINPOOLP160R1">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_ECC_CURVE_BRAINPOOLP160T1">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_ECC_CURVE_BRAINPOOLP192R1">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_ECC_CURVE_BRAINPOOLP192T1">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_ECC_CURVE_BRAINPOOLP224R1">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_ECC_CURVE_BRAINPOOLP224T1">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_ECC_CURVE_BRAINPOOLP256R1">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_ECC_CURVE_BRAINPOOLP256T1">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_ECC_CURVE_BRAINPOOLP320R1">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_ECC_CURVE_BRAINPOOLP320T1">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_ECC_CURVE_BRAINPOOLP384R1">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_ECC_CURVE_BRAINPOOLP384T1">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_ECC_CURVE_BRAINPOOLP512R1">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_ECC_CURVE_BRAINPOOLP512T1">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_ECC_CURVE_EC192WAPI">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_ECC_CURVE_NISTP192">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_ECC_CURVE_NISTP224">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_ECC_CURVE_NISTP256">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_ECC_CURVE_NISTP384">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_ECC_CURVE_NISTP521">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_ECC_CURVE_P256">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_ECC_CURVE_P384">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_ECC_CURVE_P521">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_ECC_CURVE_SECP160K1">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_ECC_CURVE_SECP160R1">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_ECC_CURVE_SECP160R2">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_ECC_CURVE_SECP192K1">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_ECC_CURVE_SECP192R1">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_ECC_CURVE_SECP224K1">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_ECC_CURVE_SECP224R1">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_ECC_CURVE_SECP256K1">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_ECC_CURVE_SECP256R1">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_ECC_CURVE_SECP384R1">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_ECC_CURVE_SECP521R1">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_ECC_CURVE_WTLS12">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_ECC_CURVE_WTLS7">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_ECC_CURVE_WTLS9">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_ECC_CURVE_X962P192V1">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_ECC_CURVE_X962P192V2">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_ECC_CURVE_X962P192V3">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_ECC_CURVE_X962P239V1">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_ECC_CURVE_X962P239V2">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_ECC_CURVE_X962P239V3">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_ECC_CURVE_X962P256V1">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_ECC_PUBLIC_KEY">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_ECDSA_SHA1">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_ECDSA_SHA256">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_ECDSA_SHA384">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_ECDSA_SHA512">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_ECDSA_SPECIFIED">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_INFOSEC">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_INFOSEC_mosaicConfidentiality">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_INFOSEC_mosaicIntegrity">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_INFOSEC_mosaicKeyManagement">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_INFOSEC_mosaicKMandSig">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_INFOSEC_mosaicKMandUpdSig">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_INFOSEC_mosaicSignature">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_INFOSEC_mosaicTokenProtection">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_INFOSEC_mosaicUpdatedInteg">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_INFOSEC_mosaicUpdatedSig">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_INFOSEC_sdnsConfidentiality">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_INFOSEC_sdnsIntegrity">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_INFOSEC_sdnsKeyManagement">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_INFOSEC_sdnsKMandSig">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_INFOSEC_sdnsSignature">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_INFOSEC_sdnsTokenProtection">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_INFOSEC_SuiteAConfidentiality">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_INFOSEC_SuiteAIntegrity">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_INFOSEC_SuiteAKeyManagement">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_INFOSEC_SuiteAKMandSig">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_INFOSEC_SuiteASignature">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_INFOSEC_SuiteATokenProtection">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_NIST_AES128_CBC">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_NIST_AES128_WRAP">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_NIST_AES192_CBC">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_NIST_AES192_WRAP">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_NIST_AES256_CBC">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_NIST_AES256_WRAP">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_NIST_sha256">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_NIST_sha384">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_NIST_sha512">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_OIW">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_OIWDIR">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_OIWDIR_CRPT">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_OIWDIR_HASH">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_OIWDIR_md2">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_OIWDIR_md2RSA">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_OIWDIR_SIGN">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_OIWSEC">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_OIWSEC_desCBC">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_OIWSEC_desCFB">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_OIWSEC_desECB">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_OIWSEC_desEDE">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_OIWSEC_desMAC">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_OIWSEC_desOFB">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_OIWSEC_dhCommMod">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_OIWSEC_dsa">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_OIWSEC_dsaComm">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_OIWSEC_dsaCommSHA">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_OIWSEC_dsaCommSHA1">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_OIWSEC_dsaSHA1">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_OIWSEC_keyHashSeal">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_OIWSEC_md2RSASign">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_OIWSEC_md4RSA">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_OIWSEC_md4RSA2">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_OIWSEC_md5RSA">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_OIWSEC_md5RSASign">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_OIWSEC_mdc2">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_OIWSEC_mdc2RSA">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_OIWSEC_rsaSign">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_OIWSEC_rsaXchg">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_OIWSEC_sha">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_OIWSEC_sha1">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_OIWSEC_sha1RSASign">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_OIWSEC_shaDSA">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_OIWSEC_shaRSA">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_PKCS">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_PKCS_1">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_PKCS_10">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_PKCS_12">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_PKCS_2">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_PKCS_3">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_PKCS_4">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_PKCS_5">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_PKCS_6">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_PKCS_7">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_PKCS_8">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_PKCS_9">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_RFC3161_counterSign">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_RSA">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_RSA_certExtensions">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_RSA_challengePwd">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_RSA_contentType">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_RSA_counterSign">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_RSA_data">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_RSA_DES_EDE3_CBC">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_RSA_DH">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_RSA_digestedData">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_RSA_emailAddr">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_RSA_ENCRYPT">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_RSA_encryptedData">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_RSA_envelopedData">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_RSA_extCertAttrs">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_RSA_HASH">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_RSA_hashedData">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_RSA_MD2">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_RSA_MD2RSA">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_RSA_MD4">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_RSA_MD4RSA">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_RSA_MD5">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_RSA_MD5RSA">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_RSA_messageDigest">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_RSA_MGF1">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_RSA_preferSignedData">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_RSA_PSPECIFIED">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_RSA_RC2CBC">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_RSA_RC4">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_RSA_RC5_CBCPad">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_RSA_RSA">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_RSA_SETOAEP_RSA">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_RSA_SHA1RSA">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_RSA_SHA256RSA">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_RSA_SHA384RSA">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_RSA_SHA512RSA">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_RSA_signedData">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_RSA_signEnvData">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_RSA_signingTime">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_RSA_SMIMEalg">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_RSA_SMIMEalgCMS3DESwrap">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_RSA_SMIMEalgCMSRC2wrap">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_RSA_SMIMEalgESDH">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_RSA_SMIMECapabilities">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_RSA_SSA_PSS">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_RSA_unstructAddr">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_RSA_unstructName">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_RSAES_OAEP">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_TIMESTAMP_TOKEN">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_X957">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_X957_DSA">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AlgOID.szOID_X957_SHA1DSA">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.AttrOID">
            <summary>Definitions of various attribute object identifiers RSA</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AttrOID.szOID_AUTHORITY_REVOCATION_LIST">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AttrOID.szOID_BUSINESS_CATEGORY">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AttrOID.szOID_CA_CERTIFICATE">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AttrOID.szOID_CERTIFICATE_REVOCATION_LIST">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AttrOID.szOID_COMMON_NAME">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AttrOID.szOID_COUNTRY_NAME">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AttrOID.szOID_CROSS_CERTIFICATE_PAIR">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AttrOID.szOID_DESCRIPTION">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AttrOID.szOID_DESTINATION_INDICATOR">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AttrOID.szOID_DEVICE_SERIAL_NUMBER">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AttrOID.szOID_DN_QUALIFIER">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AttrOID.szOID_DOMAIN_COMPONENT">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AttrOID.szOID_EV_RDN_COUNTRY">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AttrOID.szOID_EV_RDN_LOCALE">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AttrOID.szOID_EV_RDN_STATE_OR_PROVINCE">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AttrOID.szOID_FACSIMILE_TELEPHONE_NUMBER">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AttrOID.szOID_GIVEN_NAME">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AttrOID.szOID_INITIALS">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AttrOID.szOID_INTERNATIONAL_ISDN_NUMBER">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AttrOID.szOID_KEYID_RDN">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AttrOID.szOID_LOCAL_MACHINE_KEYSET">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AttrOID.szOID_LOCALITY_NAME">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AttrOID.szOID_MEMBER">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AttrOID.szOID_ORGANIZATION_NAME">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AttrOID.szOID_ORGANIZATIONAL_UNIT_NAME">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AttrOID.szOID_OWNER">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AttrOID.szOID_PHYSICAL_DELIVERY_OFFICE_NAME">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AttrOID.szOID_PKCS_12_EXTENDED_ATTRIBUTES">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AttrOID.szOID_PKCS_12_FRIENDLY_NAME_ATTR">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AttrOID.szOID_PKCS_12_KEY_PROVIDER_NAME_ATTR">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AttrOID.szOID_PKCS_12_LOCAL_KEY_ID">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AttrOID.szOID_PKCS_12_PROTECTED_PASSWORD_SECRET_BAG_TYPE_ID">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AttrOID.szOID_POST_OFFICE_BOX">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AttrOID.szOID_POSTAL_ADDRESS">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AttrOID.szOID_POSTAL_CODE">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AttrOID.szOID_PREFERRED_DELIVERY_METHOD">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AttrOID.szOID_PRESENTATION_ADDRESS">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AttrOID.szOID_REGISTERED_ADDRESS">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AttrOID.szOID_ROLE_OCCUPANT">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AttrOID.szOID_SEARCH_GUIDE">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AttrOID.szOID_SEE_ALSO">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AttrOID.szOID_STATE_OR_PROVINCE_NAME">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AttrOID.szOID_STREET_ADDRESS">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AttrOID.szOID_SUPPORTED_APPLICATION_CONTEXT">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AttrOID.szOID_SUR_NAME">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AttrOID.szOID_TELEPHONE_NUMBER">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AttrOID.szOID_TELETEXT_TERMINAL_IDENTIFIER">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AttrOID.szOID_TELEX_NUMBER">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AttrOID.szOID_TITLE">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AttrOID.szOID_USER_CERTIFICATE">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AttrOID.szOID_USER_PASSWORD">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.AttrOID.szOID_X21_ADDRESS">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.SignOID">
            <summary>OID Strong Sign Parameters used by Windows OS Components</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SignOID.szOID_CERT_STRONG_SIGN_OS_PREFIX">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SignOID.szOID_CERT_STRONG_SIGN_OS_1">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SignOID.szOID_CERT_STRONG_SIGN_OS_CURRENT">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SignOID.szOID_CERT_STRONG_KEY_OS_PREFIX">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SignOID.szOID_CERT_STRONG_KEY_OS_1">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.SignOID.szOID_CERT_STRONG_KEY_OS_CURRENT">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.PFXExportFlags">
            <summary>Flags for <see cref="M:Vanara.PInvoke.Crypt32.PFXExportCertStore(Vanara.PInvoke.Crypt32.HCERTSTORE,Vanara.PInvoke.Crypt32.CRYPTOAPI_BLOB@,System.String,Vanara.PInvoke.Crypt32.PFXExportFlags)"/> and <see cref="M:Vanara.PInvoke.Crypt32.PFXExportCertStoreEx(Vanara.PInvoke.Crypt32.HCERTSTORE,Vanara.PInvoke.Crypt32.CRYPTOAPI_BLOB@,System.String,System.IntPtr,Vanara.PInvoke.Crypt32.PFXExportFlags)"/></summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.PFXExportFlags.REPORT_NO_PRIVATE_KEY">
            <summary>
            If a certificate is encountered that has no associated private key, the function returns FALSE with the last error set to
            either CRYPT_E_NOT_FOUND or NTE_NO_KEY.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.PFXExportFlags.REPORT_NOT_ABLE_TO_EXPORT_PRIVATE_KEY">
            <summary>
            If a certificate is encountered that has a non-exportable private key, the function returns FALSE and the last error set to
            NTE_BAD_KEY, NTE_BAD_KEY_STATE, or NTE_PERM.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.PFXExportFlags.EXPORT_PRIVATE_KEYS">
            <summary>Private keys are exported as well as the certificates.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.PFXExportFlags.PKCS12_INCLUDE_EXTENDED_PROPERTIES">
            <summary>
            Export all extended properties on the certificate.
            <para>Windows Server 2003 and Windows XP: This value is not supported.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.PFXExportFlags.PKCS12_PROTECT_TO_DOMAIN_SIDS">
            <summary>
            The PFX BLOB contains an embedded password that will be protected to the Active Directory (AD) protection descriptor pointed
            to by the pvPara parameter. If the szPassword parameter is not NULL or empty, the specified password is protected. If,
            however, the szPassword parameter is NULL or an empty string, a random forty (40) character password is created and protected.
            <para>
            PFXImportCertStore uses the specified protection descriptor to decrypt the embedded password, whether specified by the user
            or randomly generated, and then uses the password to decrypt the PFX BLOB.
            </para>
            <para>Windows 8 and Windows Server 2012: Support for this flag begins.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.PFXExportFlags.PKCS12_EXPORT_SILENT">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.PFXExportFlags.PKCS12_EXPORT_PBES2_PARAMS">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.PFXExportFlags.PKCS12_DISABLE_ENCRYPT_CERTIFICATES">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.PFXExportFlags.PKCS12_ENCRYPT_CERTIFICATES">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.PFXExportFlags.PKCS12_EXPORT_ECC_CURVE_PARAMETERS">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.PFXExportFlags.PKCS12_EXPORT_ECC_CURVE_OID">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.PFXExportFlags.PKCS12_EXPORT_RESERVED_MASK">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.PFXImportFlags">
            <summary>Flags for <see cref="M:Vanara.PInvoke.Crypt32.PFXImportCertStore(Vanara.PInvoke.Crypt32.CRYPTOAPI_BLOB@,System.String,Vanara.PInvoke.Crypt32.PFXImportFlags)"/>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.PFXImportFlags.CRYPT_EXPORTABLE">
            <summary>
            Imported keys are marked as exportable. If this flag is not used, calls to the CryptExportKey function with the key handle fail.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.PFXImportFlags.CRYPT_USER_PROTECTED">
            <summary>
            The user is to be notified through a dialog box or other method when certain attempts to use this key are made. The precise
            behavior is specified by the cryptographic service provider (CSP) being used.
            <para>
            Prior to Internet Explorer 4.0, Microsoft cryptographic service providers ignored this flag. Starting with Internet Explorer
            4.0, Microsoft providers support this flag.
            </para>
            <para>
            If the provider context was opened with the CRYPT_SILENT flag set, using this flag causes a failure and the last error is
            set to NTE_SILENT_CONTEXT.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.PFXImportFlags.CRYPT_MACHINE_KEYSET">
            <summary>The private keys are stored under the local computer and not under the current user.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.PFXImportFlags.CRYPT_USER_KEYSET">
            <summary>
            The private keys are stored under the current user and not under the local computer even if the PFX BLOB specifies that they
            should go into the local computer.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.PFXImportFlags.PKCS12_PREFER_CNG_KSP">
            <summary>
            Indicates that the CNG key storage provider (KSP) is preferred. If the CSP is specified in the PFX file, then the CSP is
            used, otherwise the KSP is preferred. If the CNG KSP is unavailable, the PFXImportCertStore function will fail.
            <para>Windows Server 2003 and Windows XP: This value is not supported.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.PFXImportFlags.PKCS12_ALWAYS_CNG_KSP">
            <summary>
            Indicates that the CNG KSP is always used. When specified, PFXImportCertStore attempts to use the CNG KSP irrespective of
            provider information in the PFX file. If the CNG KSP is unavailable, the import will not fail.
            <para>Windows Server 2003 and Windows XP: This value is not supported.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.PFXImportFlags.PKCS12_ALLOW_OVERWRITE_KEY">
            <summary>
            Allow overwrite of the existing key. Specify this flag when you encounter a scenario in which you must import a PFX file
            that contains a key name that already exists. For example, when you import a PFX file, it is possible that a container of
            the same name is already present because there is no unique namespace for key containers. If you have created a "TestKey" on
            your computer, and then you import a PFX file that also has "TestKey" as the key container, the PKCS12_ALLOW_OVERWRITE_KEY
            setting allows the key to be overwritten.
            <para>Windows Server 2003 and Windows XP: This value is not supported.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.PFXImportFlags.PKCS12_NO_PERSIST_KEY">
            <summary>
            Do not persist the key. Specify this flag when you do not want to persist the key. For example, if it is not necessary to
            store the key after verification, then instead of creating a container and then deleting it, you can specify this flag to
            dispose of the key immediately.
            <para>
            Note If the PKCS12_NO_PERSIST_KEY flag is not set, keys are persisted on disk. If you do not want to persist the keys beyond
            their usage, you must delete them by calling the CryptAcquireContext function with the CRYPT_DELETEKEYSET flag set in the
            dwFlags parameter.
            </para>
            <para>Windows Server 2003 and Windows XP: This value is not supported.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.PFXImportFlags.PKCS12_INCLUDE_EXTENDED_PROPERTIES">
            <summary>
            Import all extended properties on the certificate that were saved on the certificate when it was exported.
            <para>Windows Server 2003 and Windows XP: This value is not supported.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.PFXImportFlags.PKCS12_UNPACK_RESULTS_ONLY">
            <summary>Unpack but do not persist the results.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.PFXImportFlags.CRYPT_USER_PROTECTED_STRONG">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.PFXImportFlags.PKCS12_IMPORT_SILENT">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.PFXImportFlags.PKCS12_ONLY_CERTIFICATES">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.PFXImportFlags.PKCS12_ONLY_NOT_ENCRYPTED_CERTIFICATES">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.PFXImportFlags.PKCS12_VIRTUAL_ISOLATION_KEY">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.PFXImportFlags.PKCS12_IMPORT_RESERVED_MASK">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.PFXImportFlags.PKCS12_OBJECT_LOCATOR_ALL_IMPORT_FLAGS">
            <summary/>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.PFXExportCertStore(Vanara.PInvoke.Crypt32.HCERTSTORE,Vanara.PInvoke.Crypt32.CRYPTOAPI_BLOB@,System.String,Vanara.PInvoke.Crypt32.PFXExportFlags)">
            <summary>
            The <c>PFXExportCertStore</c> function exports the certificates and, if available, the associated private keys from the
            referenced certificate store. This is an old function kept for compatibility with Internet Explorer 4.0 clients. New
            applications should use the PfxExportCertStoreEx function that provides enhanced private key security.
            </summary>
            <param name="hStore">Handle of the certificate store containing the certificates to be exported.</param>
            <param name="pPFX">
            A pointer to a CRYPT_DATA_BLOB structure to contain the PFX packet with the exported certificates and keys. If pPFX-&gt;pbData
            is <c>NULL</c>, the function calculates the number of bytes needed for the encoded BLOB and returns this in pPFX-&gt;cbData.
            When the function is called with pPFX-&gt;pbData pointing to an allocated buffer of the needed size, the function copies the
            encoded bytes into the buffer and updates pPFX-&gt;cbData with the encode byte length.
            </param>
            <param name="szPassword">
            String password used to encrypt and verify the PFX packet. When you have finished using the password, clear the password from
            memory by calling the SecureZeroMemory function. For more information about protecting passwords, see Handling Passwords.
            </param>
            <param name="dwFlags">
            <para>Flag values can be set to any combination of the following.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>EXPORT_PRIVATE_KEYS</term>
            <term>Private keys are exported as well as the certificates.</term>
            </item>
            <item>
            <term>REPORT_NO_PRIVATE_KEY</term>
            <term>
            If a certificate is encountered that has no associated private key, the function returns FALSE with the last error set to either
            CRYPT_E_NOT_FOUND or NTE_NO_KEY.
            </term>
            </item>
            <item>
            <term>REPORT_NOT_ABLE_TO_EXPORT_PRIVATE_KEY</term>
            <term>
            If a certificate is encountered that has a non-exportable private key, the function returns FALSE and the last error set to
            NTE_BAD_KEY, NTE_BAD_KEY_STATE, or NTE_PERM.
            </term>
            </item>
            </list>
            </param>
            <returns>
            Returns <c>TRUE</c> (nonzero) if the function succeeds, and <c>FALSE</c> (zero) if the function fails. For extended error
            information, call GetLastError.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.PFXExportCertStoreEx(Vanara.PInvoke.Crypt32.HCERTSTORE,Vanara.PInvoke.Crypt32.CRYPTOAPI_BLOB@,System.String,System.IntPtr,Vanara.PInvoke.Crypt32.PFXExportFlags)">
            <summary>
            The <c>PFXExportCertStoreEx</c> function exports the certificates and, if available, their associated private keys from the
            referenced certificate store. This function replaces the older PfxExportCertStore function. It should be used for its enhanced
            private key security. The PFX BLOB created by this function is protected by a password.
            </summary>
            <param name="hStore">Handle of the certificate store containing the certificates to be exported.</param>
            <param name="pPFX">
            A pointer to a CRYPT_DATA_BLOB structure to contain the PFX packet with the exported certificates and keys. If pPFX-&gt;pbData
            is <c>NULL</c>, the function calculates the number of bytes needed for the encoded BLOB and returns this in pPFX-&gt;cbData.
            When the function is called with pPFX-&gt;pbData pointing to an allocated buffer of the needed size, the function copies the
            encoded bytes into the buffer and updates pPFX-&gt;cbData with the encode byte length.
            </param>
            <param name="szPassword">
            String password used to encrypt and verify the PFX packet. When you have finished using the password, clear the password from
            memory by calling the SecureZeroMemory function. For more information about protecting passwords, see Handling Passwords.
            </param>
            <param name="pvPara">
            <para>
            This parameter must be <c>NULL</c> if the dwFlags parameter does not contain <c>PKCS12_PROTECT_TO_DOMAIN_SIDS</c>. Prior to
            Windows 8 and Windows Server 2012, therefore, this parameter must be <c>NULL</c>.
            </para>
            <para>
            Beginning with Windows 8 and Windows Server 2012, if the dwFlags parameter contains <c>PKCS12_PROTECT_TO_DOMAIN_SIDS</c>, you
            can set the pvPara parameter to point to an <c>NCRYPT_DESCRIPTOR_HANDLE</c> value to identify which Active Directory principal
            the PFX password will be protected to inside of the PFX BLOB. Currently, the password can be protected to an Active Directory
            user, computer, or group. For more information about protection descriptors, see NCryptCreateProtectionDescriptor.
            </para>
            </param>
            <param name="dwFlags">
            <para>Flag values can be set to any combination of the following.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>EXPORT_PRIVATE_KEYS 0x0004</term>
            <term>Private keys are exported as well as the certificates.</term>
            </item>
            <item>
            <term>REPORT_NO_PRIVATE_KEY 0x0001</term>
            <term>
            If a certificate is encountered that has no associated private key, the function returns FALSE with the last error set to either
            CRYPT_E_NOT_FOUND or NTE_NO_KEY.
            </term>
            </item>
            <item>
            <term>REPORT_NOT_ABLE_TO_EXPORT_PRIVATE_KEY 0x0002</term>
            <term>
            If a certificate is encountered that has a non-exportable private key, the function returns FALSE and the last error set to
            NTE_BAD_KEY, NTE_BAD_KEY_STATE, or NTE_PERM.
            </term>
            </item>
            <item>
            <term>PKCS12_INCLUDE_EXTENDED_PROPERTIES 0x0010</term>
            <term>Export all extended properties on the certificate. Windows Server 2003 and Windows XP: This value is not supported.</term>
            </item>
            <item>
            <term>PKCS12_PROTECT_TO_DOMAIN_SIDS 0x0020</term>
            <term>
            The PFX BLOB contains an embedded password that will be protected to the Active Directory (AD) protection descriptor pointed to
            by the pvPara parameter. If the szPassword parameter is not NULL or empty, the specified password is protected. If, however, the
            szPassword parameter is NULL or an empty string, a random forty (40) character password is created and protected.
            PFXImportCertStore uses the specified protection descriptor to decrypt the embedded password, whether specified by the user or
            randomly generated, and then uses the password to decrypt the PFX BLOB. Windows 8 and Windows Server 2012: Support for this flag begins.
            </term>
            </item>
            </list>
            </param>
            <returns>
            Returns <c>TRUE</c> (nonzero) if the function succeeds, and <c>FALSE</c> (zero) if the function fails. For extended error
            information, call GetLastError.
            </returns>
            <remarks>
            Beginning with Windows 8 and Windows Server 2012, you can protect the PFX password to an Active Directory user, computer, or
            group. If you choose to do so but do not create a password, a temporary password will be randomly selected. The password is
            encrypted by using the Active Directory principal and then embedded in the PFX BLOB. For more information, see the pvPara
            parameter and the <c>PKCS12_PROTECT_TO_DOMAIN_SIDS</c> flag.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.PFXImportCertStore(Vanara.PInvoke.Crypt32.CRYPTOAPI_BLOB@,System.String,Vanara.PInvoke.Crypt32.PFXImportFlags)">
            <summary>
            The <c>PFXImportCertStore</c> function imports a PFX BLOB and returns the handle of a store that contains certificates and any
            associated private keys.
            </summary>
            <param name="pPFX">
            A pointer to a CRYPT_DATA_BLOB structure that contains a PFX packet with the exported and encrypted certificates and keys.
            </param>
            <param name="szPassword">
            <para>
            A string password used to decrypt and verify the PFX packet. Whether set to a string of length greater than zero or set to an
            empty string or to <c>NULL</c>, this value must be exactly the same as the value that was used to encrypt the packet.
            </para>
            <para>
            Beginning with Windows 8 and Windows Server 2012, if the PFX packet was created in the PFXExportCertStoreEx function by using
            the <c>PKCS12_PROTECT_TO_DOMAIN_SIDS</c> flag, the <c>PFXImportCertStore</c> function attempts to decrypt the password by using
            the Active Directory (AD) principal that was used to encrypt it. The AD principal is specified in the pvPara parameter. If the
            szPassword parameter in the <c>PFXExportCertStoreEx</c> function was an empty string or <c>NULL</c> and the dwFlags parameter
            was set to <c>PKCS12_PROTECT_TO_DOMAIN_SIDS</c>, that function randomly generated a password and encrypted it to the AD
            principal specified in the pvPara parameter. In that case you should set the password to the value, empty string or <c>NULL</c>,
            that was used when the PFX packet was created. The <c>PFXImportCertStore</c> function will use the AD principal to decrypt the
            random password, and the randomly generated password will be used to decrypt the PFX certificate.
            </para>
            <para>
            When you have finished using the password, clear it from memory by calling the SecureZeroMemory function. For more information
            about protecting passwords, see Handling Passwords.
            </para>
            </param>
            <param name="dwFlags">
            <para>This parameter can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPT_EXPORTABLE 0x00000001</term>
            <term>
            Imported keys are marked as exportable. If this flag is not used, calls to the CryptExportKey function with the key handle fail.
            </term>
            </item>
            <item>
            <term>CRYPT_USER_PROTECTED 0x00000002</term>
            <term>
            The user is to be notified through a dialog box or other method when certain attempts to use this key are made. The precise
            behavior is specified by the cryptographic service provider (CSP) being used. Prior to Internet Explorer 4.0, Microsoft
            cryptographic service providers ignored this flag. Starting with Internet Explorer 4.0, Microsoft providers support this flag.
            If the provider context was opened with the CRYPT_SILENT flag set, using this flag causes a failure and the last error is set to NTE_SILENT_CONTEXT.
            </term>
            </item>
            <item>
            <term>CRYPT_MACHINE_KEYSET 0x00000020</term>
            <term>The private keys are stored under the local computer and not under the current user.</term>
            </item>
            <item>
            <term>CRYPT_USER_KEYSET 0x00001000</term>
            <term>
            The private keys are stored under the current user and not under the local computer even if the PFX BLOB specifies that they
            should go into the local computer.
            </term>
            </item>
            <item>
            <term>PKCS12_PREFER_CNG_KSP 0x00000100</term>
            <term>
            Indicates that the CNG key storage provider (KSP) is preferred. If the CSP is specified in the PFX file, then the CSP is used,
            otherwise the KSP is preferred. If the CNG KSP is unavailable, the PFXImportCertStore function will fail. Windows Server 2003
            and Windows XP: This value is not supported.
            </term>
            </item>
            <item>
            <term>PKCS12_ALWAYS_CNG_KSP 0x00000200</term>
            <term>
            Indicates that the CNG KSP is always used. When specified, PFXImportCertStore attempts to use the CNG KSP irrespective of
            provider information in the PFX file. If the CNG KSP is unavailable, the import will not fail. Windows Server 2003 and Windows
            XP: This value is not supported.
            </term>
            </item>
            <item>
            <term>PKCS12_ALLOW_OVERWRITE_KEY 0x00004000</term>
            <term>
            Allow overwrite of the existing key. Specify this flag when you encounter a scenario in which you must import a PFX file that
            contains a key name that already exists. For example, when you import a PFX file, it is possible that a container of the same
            name is already present because there is no unique namespace for key containers. If you have created a "TestKey" on your
            computer, and then you import a PFX file that also has "TestKey" as the key container, the PKCS12_ALLOW_OVERWRITE_KEY setting
            allows the key to be overwritten. Windows Server 2003 and Windows XP: This value is not supported.
            </term>
            </item>
            <item>
            <term>PKCS12_NO_PERSIST_KEY 0x00008000</term>
            <term>
            Do not persist the key. Specify this flag when you do not want to persist the key. For example, if it is not necessary to store
            the key after verification, then instead of creating a container and then deleting it, you can specify this flag to dispose of
            the key immediately. Windows Server 2003 and Windows XP: This value is not supported.
            </term>
            </item>
            <item>
            <term>PKCS12_INCLUDE_EXTENDED_PROPERTIES 0x0010</term>
            <term>
            Import all extended properties on the certificate that were saved on the certificate when it was exported. Windows Server 2003
            and Windows XP: This value is not supported.
            </term>
            </item>
            <item>
            <term>0x10000000</term>
            <term>Unpack but do not persist the results.</term>
            </item>
            </list>
            </param>
            <returns>
            <para>
            If the function succeeds, the function returns a handle to a certificate store that contains the imported certificates,
            including available private keys.
            </para>
            <para>
            If the function fails, that is, if the password parameter does not contain an exact match with the password used to encrypt the
            exported packet or if there were any other problems decoding the PFX BLOB, the function returns <c>NULL</c>, and an error code
            can be found by calling the GetLastError function.
            </para>
            </returns>
            <remarks>
            <para>
            The <c>PFXImportCertStore</c> function opens a temporary store. If the function succeeds, you should close the handle to the
            store by calling the CertCloseStore function.
            </para>
            <para>
            When you import a certificate from the PFX packet, the CSP/KSP container name is determined by using the AttributeId with OID
            1.3.6.1.4.1.311.17.1 of the PKCS8ShroudedKeyBag SafeBag [bagId: 1.2.840.113549.1.12.10.1.2] (see PKCS #12 for details about the
            ASN.1 structure of this).
            </para>
            <para>
            If the AttributeId is not present and the PREFER_CNG flag is passed, MS_KEY_STORAGE_PROVIDER is picked. If the AttributeId is
            not present and the PREFER_CNG flag is not passed, the provider name is determined based on the public key algorithm (that is,
            the public key algorithm is determined by the AlgorithmIdentifier in PKCS #8):
            </para>
            <para>Similarly, the key specification is determined by using the AttributeId with OID 2.5.29.15 (szOID_KEY_USAGE) as follows:</para>
            <para>
            If the AttributeId is not present, then the CAPI key value is set to AT_KEYEXCHANGE for RSA or DH and the algorithm is
            determined by the AlgorithmIdentifier in PKCS #8; otherwise, the algorithm is set to AT_SIGNATURE. For the CNG key value, all
            ncrypt key usage is set.
            </para>
            <para>
            <c>Note</c> If an invalid provider name is present in the PFX packet, or the base or enhanced cryptography provider is not
            present in this registry key: <c>HKEY_LOCAL_MACHINE</c>\ <c>SOFTWARE</c>\ <c>Microsoft</c>\ <c>Cryptography</c>\
            <c>Defaults</c>\ <c>Provider</c>, then a provider lookup is performed by the provider type using this registry subkey:
            <c>HKEY_LOCAL_MACHINE</c>\ <c>SOFTWARE</c>\ <c>Microsoft</c>\ <c>Cryptography</c>\ <c>Defaults</c>\ <c>Provider Types</c>.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.PFXIsPFXBlob(Vanara.PInvoke.Crypt32.CRYPTOAPI_BLOB@)">
            <summary>The <c>PFXIsPFXBlob</c> function attempts to decode the outer layer of a BLOB as a PFX packet.</summary>
            <param name="pPFX">A pointer to a CRYPT_DATA_BLOB structure that the function will attempt to decode as a PFX packet.</param>
            <returns>
            The function returns <c>TRUE</c> if the BLOB can be decoded as a PFX packet. If the outer layer of the BLOB cannot be decoded as
            a PFX packet, the function returns <c>FALSE</c>.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.PFXVerifyPassword(Vanara.PInvoke.Crypt32.CRYPTOAPI_BLOB@,System.String,System.UInt32)">
            <summary>
            <para>
            The <c>PFXVerifyPassword</c> function attempts to decode the outer layer of a BLOB as a Personal Information Exchange (PFX)
            packet and to decrypt it with the given password. No data from the BLOB is imported.
            </para>
            <para>The PFX format is also known as the Public-Key Cryptography Standards #12 (PKCS #12) format.</para>
            </summary>
            <param name="pPFX">A pointer to a CRYPT_DATA_BLOB structure that the function will attempt to decode as a PFX packet.</param>
            <param name="szPassword">
            <para>
            String password to be checked. For this function to succeed, this password must be exactly the same as the password used to
            encrypt the packet.
            </para>
            <para>
            If you set this value to an empty string or <c>NULL</c>, this function typically attempts to decrypt the password embedded in
            the PFX BLOB by using the empty string or <c>NULL</c>.
            </para>
            <para>
            However, beginning with Windows 8 and Windows Server 2012, if a <c>NULL</c> or empty password was specified when the PFX BLOB
            was created and the application also specified that the password should be protected to an Active Directory (AD) principal, the
            Cryptography API (CAPI) randomly generates a password, encrypts it to the AD principal and embeds it in the PFX BLOB. The
            <c>PFXVerifyPassword</c> function will then try to use the specified AD principal (current user, computer, or AD group member)
            to decrypt the password. For more information about protecting PFX to an AD principal, see the pvPara parameter and the
            <c>PKCS12_PROTECT_TO_DOMAIN_SIDS</c> flag of the PFXExportCertStoreEx function.
            </para>
            <para>
            When you have finished using the password, clear the password from memory by calling the SecureZeroMemory function. For more
            information about protecting passwords, see Handling Passwords.
            </para>
            </param>
            <param name="dwFlags">Reserved for future use.</param>
            <returns>The function return <c>TRUE</c> if the password appears correct; otherwise, it returns <c>FALSE</c>.</returns>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_SET_PROPERTY_IGNORE_PERSIST_ERROR_FLAG">
            <summary>Set this flag to ignore any store provider write errors and always update the cached context's property.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_SET_PROPERTY_INHIBIT_PERSIST_FLAG">
            <summary>Set this flag to inhibit the persisting of this property.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CertPropId">
            <summary>Property identifiers.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_ACCESS_STATE_PROP_ID">
            <summary>
            Gets or sets a DWORD value indicating whether write operations to the certificate are persisted. The DWORD value is not set
            if the certificate is in a memory store or in a registry-based store that is opened as read-only.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_AIA_URL_RETRIEVED_PROP_ID">
            <summary>Reserved.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_ARCHIVED_KEY_HASH_PROP_ID">
            <summary>This property saves an encrypted key hash for the certificate context.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_ARCHIVED_PROP_ID">
            <summary>
            Indicates the certificate is skipped during enumerations. A certificate with this property set is found with explicit search
            operations, such as those used to find a certificate with a specific hash or a serial number. No data in pvData is
            associated with this property. This property can be set to the empty BLOB, {0,NULL}.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_AUTH_ROOT_SHA256_HASH_PROP_ID">
            <summary></summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_AUTHORITY_INFO_ACCESS_PROP_ID">
            <summary>Reserved.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_AUTO_ENROLL_PROP_ID">
            <summary>
            Gets or sets a null-terminated Unicode string naming the certificate type for which the certificate has been auto enrolled.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_AUTO_ENROLL_RETRY_PROP_ID">
            <summary>Reserved.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_BACKED_UP_PROP_ID">
            <summary>Reserved.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_CA_DISABLE_CRL_PROP_ID">
            <summary>
            Disables certificate revocation list (CRL) retrieval for certificates used by the certification authority (CA). If the CA
            certificate contains this property, it must also include the CERT_CA_OCSP_AUTHORITY_INFO_ACCESS_PROP_ID property.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_CA_OCSP_AUTHORITY_INFO_ACCESS_PROP_ID">
            <summary>
            Contains the list of online certificate status protocol (OCSP) URLs to use for certificates issued by the CA certificate.
            The array contents are the Abstract Syntax Notation One (ASN.1)-encoded bytes of an X509_AUTHORITY_INFO_ACCESS structure
            where pszAccessMethod is set to szOID_PKIX_OCSP.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_CEP_PROP_ID">
            <summary></summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_CLR_DELETE_KEY_PROP_ID">
            <summary></summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_CROSS_CERT_DIST_POINTS_PROP_ID">
            <summary>
            Location of the cross certificates. Currently, this identifier is only applicable to certificates and not to CRLs or
            certificate trust lists (CTLs). The BYTE array contains an ASN.1-encoded CROSS_CERT_DIST_POINTS_INFO structure decoded by
            using the CryptDecodeObject function with a X509_CROSS_CERT_DIST_POINTS value for the lpszStuctType parameter.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_CTL_USAGE_PROP_ID">
            <summary>An array of bytes containing an Abstract Syntax Notation One (ASN.1) encoded CTL_USAGE structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_DATE_STAMP_PROP_ID">
            <summary>Time when the certificate was added to the store.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_DESCRIPTION_PROP_ID">
            <summary>
            Gets or sets the property displayed by the certificate UI. This property allows the user to describe the certificate's use.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_DISALLOWED_ENHKEY_USAGE_PROP_ID">
            <summary></summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_DISALLOWED_FILETIME_PROP_ID">
            <summary></summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_EFS_PROP_ID">
            <summary>Reserved</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_ENHKEY_USAGE_PROP_ID">
            <summary>An array of bytes containing an ASN.1 encoded CERT_ENHKEY_USAGE structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_ENROLLMENT_PROP_ID">
            <summary>
            <para>
            Enrollment information of the pending request that contains RequestID, CADNSName, CAName, and DisplayName. The data format
            is defined as follows.
            </para>
            <list type="table">
            <listheader>
            <description>Bytes</description>
            <description>Contents</description>
            </listheader>
            <item>
            <description>First 4 bytes</description>
            <description>Pending request ID</description>
            </item>
            <item>
            <description>Next 4 bytes</description>
            <description>
            CADNSName size, in characters, including the terminating null character, followed by CADNSName string with terminating null character
            </description>
            </item>
            <item>
            <description>Next 4 bytes</description>
            <description>
            CAName size, in characters, including the terminating null character, followed by CAName string with terminating null character
            </description>
            </item>
            <item>
            <description>Next 4 bytes</description>
            <description>
            DisplayName size, in characters, including the terminating null character, followed by DisplayName string with terminating
            null character
            </description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_EXTENDED_ERROR_INFO_PROP_ID">
            <summary>
            Returns a null-terminated Unicode character string that contains extended error information for the certificate context.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_FORTEZZA_DATA_PROP_ID">
            <summary>Reserved</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_FRIENDLY_NAME_PROP_ID">
            <summary>A null-terminated Unicode character string that contains the display name for the CRL.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_HASH_PROP_ID">
            <summary>Returns the SHA1 hash. If the hash does not exist, it is computed by using the CryptHashCertificate function.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_HCRYPTPROV_OR_NCRYPT_KEY_HANDLE_PROP_ID">
            <summary>Returns either the HCRYPTPROV or NCRYPT_KEY_HANDLE choice.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_HCRYPTPROV_TRANSFER_PROP_ID">
            <summary>
            The Cryptography API (CAPI) key handle associated with the certificate. The caller is responsible for freeing the handle. It
            will not be freed when the context is freed. The property value is removed after after it is returned. If you call this
            property on a context that has a CNG key, CRYPT_E_NOT_FOUND is returned.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_IE30_RESERVED_PROP_ID">
            <summary>Rerserved.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_ISOLATED_KEY_PROP_ID">
            <summary></summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_ISSUER_CHAIN_PUB_KEY_CNG_ALG_BIT_LENGTH_PROP_ID">
            <summary>
            <para>
            A string containing a set of L"&lt;PUBKEY&gt;/&lt;BITLENGTH&gt;" public key algorithm and bit length pairs. The semicolon,
            L";", is used as the delimiter.
            </para>
            <para>The &lt;PUBKEY&gt; value identifies the CNG public key algorithm. The following algorithms are supported:</para>
            <list type="bullet">
            <item>L"RSA" (BCRYPT_RSA_ALGORITHM)</item>
            <item>L"DSA" (BCRYPT_DSA_ALGORITHM)</item>
            <item>L"ECDSA" (SSL_ECDSA_ALGORITHM)</item>
            </list>
            <para>
            A &lt;PUBKEY&gt;/&lt;BITLENGTH&gt; pair is set for each certificate in the CRL issuer chain excluding the leaf. This
            property can be set when an OCSP response with an independent signer chain is converted to a CRL.
            </para>
            <note type="note">This property should not be set for a delegated OCSP signer certificate. A delegated signer certificate is
            signed with the same key used to sign the subject certificate and is checked there.</note>
            <para>The following is an example:</para>
            <para>: L"RSA/2048;RSA/4096"</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_ISSUER_CHAIN_SIGN_HASH_CNG_ALG_PROP_ID">
            <summary>
            <para>
            A string that contains a set of L"&lt;SIGNATURE&gt;/&lt;HASH&gt;" algorithm pairs. The semicolon, L";", is used as the
            delimiter between pairs.
            </para>
            <para>
            This property is set only when an OCSP response is converted to a CRL. For a delegated OCSP signer certificate, only the
            algorithm pair for the signer certificate is returned. For an independent OCSP signer certificate chain, an algorithm pair
            is returned for each certificate in the chain excluding the root.
            </para>
            <para>The &lt;SIGNATURE&gt; value identifies the CNG public key algorithm. The following algorithms are supported:</para>
            <list type="bullet">
            <item>L"RSA" (BCRYPT_RSA_ALGORITHM)</item>
            <item>L"DSA" (BCRYPT_DSA_ALGORITHM)</item>
            <item>L"ECDSA" (SSL_ECDSA_ALGORITHM)</item>
            </list>
            <para>The &lt;HASH&gt; value identifies the CNG hash algorithm. The following algorithms are supported:</para>
            <list type="bullet">
            <item>L"MD5" (BCRYPT_MD5_ALGORITHM)</item>
            <item>L"SHA1" (BCRYPT_SHA1_ALGORITHM)</item>
            <item>L"SHA256" (BCRYPT_SHA256_ALGORITHM)</item>
            <item>L"SHA384" (BCRYPT_SHA384_ALGORITHM)</item>
            <item>L"SHA512" (BCRYPT_SHA512_ALGORITHM)</item>
            </list>
            <para>The following is an example:</para>
            <para>L"RSA/SHA256;RSA/SHA256"</para>
            <para>This property is explicitly set by the verify revocation functions.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_ISSUER_PUB_KEY_BIT_LENGTH_PROP_ID">
            <summary>
            <para>
            The length, in bits, of the public key in the CRL issuer certificate. This property is also applicable to an OCSP that has
            been converted to a CRL.
            </para>
            <para>This property is explicitly set by the verify revocation functions.</para>
            <para><strong>Windows 8 and Windows Server 2012:</strong> Support for this property begins.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_ISSUER_PUBLIC_KEY_MD5_HASH_PROP_ID">
            <summary>This property sets the MD5 hash of the public key associated with the private key used to sign this certificate.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_ISSUER_SERIAL_NUMBER_MD5_HASH_PROP_ID">
            <summary>The CRYPT_DATA_BLOB structure contains the MD5 hash of the issuer name and serial number from this certificate.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_KEY_CLASSIFICATION_PROP_ID">
            <summary></summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_KEY_CONTEXT_PROP_ID">
            <summary>
            The structure specifies the certificate's private key. It contains both the HCRYPTPROV and key specification for the private
            key. For more information about the hCryptProv member and dwFlags settings, see CERT_KEY_PROV_HANDLE_PROP_ID, later in this topic.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_KEY_IDENTIFIER_PROP_ID">
            <summary>
            If nonexistent, searches for the szOID_SUBJECT_KEY_IDENTIFIER extension. If that fails, a SHA1 hash is done on the
            certificate's SubjectPublicKeyInfo member to produce the identifier values.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_KEY_PROV_HANDLE_PROP_ID">
            <summary>
            The HCRYPTPROV handle for the certificate's private key is set. The hCryptProv member of the CERT_KEY_CONTEXT structure is
            updated if it exists. If it does not exist, it is created with dwKeySpec and initialized by CERT_KEY_PROV_INFO_PROP_ID. If
            CERT_STORE_NO_CRYPT_RELEASE_FLAG is not set, the hCryptProv value is implicitly released either when the property is set to
            NULL or on the final freeing of the CERT_CONTEXT structure.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_KEY_PROV_INFO_PROP_ID">
            <summary>The structure specifies the certificate's private key.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_KEY_REPAIR_ATTEMPTED_PROP_ID">
            <summary></summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_KEY_SPEC_PROP_ID">
            <summary>
            A DWORD value specifying the private key obtained from CERT_KEY_CONTEXT_PROP_ID property if it exists. Otherwise, if
            CERT_KEY_PROV_INFO_PROP_ID exists, it is the source of the dwKeySpec.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_MD5_HASH_PROP_ID">
            <summary>The MD5 hash. You can compute the hash by using the CryptHashCertificate function.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_NCRYPT_KEY_HANDLE_PROP_ID">
            <summary>This property sets the NCRYPT_KEY_HANDLE for the certificate private key and sets the dwKeySpec to CERT_NCRYPT_KEY_SPEC.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_NCRYPT_KEY_HANDLE_TRANSFER_PROP_ID">
            <summary>Sets the handle of the CNG key associated with the certificate.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_NEW_KEY_PROP_ID">
            <summary>Reserved</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_NEXT_UPDATE_LOCATION_PROP_ID">
            <summary>The ASN.1 encoded CERT_ALT_NAME_INFO structure on a CTL.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_NO_AUTO_EXPIRE_CHECK_PROP_ID">
            <summary>Reserved</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_NO_EXPIRE_NOTIFICATION_PROP_ID">
            <summary></summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_NONCOMPLIANT_ROOT_URL_PROP_ID">
            <summary></summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_NOT_BEFORE_ENHKEY_USAGE_PROP_ID">
            <summary></summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_NOT_BEFORE_FILETIME_PROP_ID">
            <summary></summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_OCSP_CACHE_PREFIX_PROP_ID">
            <summary>Reserved</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_OCSP_MUST_STAPLE_PROP_ID">
            <summary></summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_OCSP_RESPONSE_PROP_ID">
            <summary>
            This property sets the encoded online certificate status protocol (OCSP) response from a CERT_SERVER_OCSP_RESPONSE_CONTEXT
            for this certificate.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_PIN_SHA256_HASH_PROP_ID">
            <summary></summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_PUB_KEY_CNG_ALG_BIT_LENGTH_PROP_ID">
            <summary>
            This property is implicitly set by calling the CertGetCertificateContextProperty function.
            <para>
            Windows Server 2008 R2, Windows 7, Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP: This identifier
            is not supported.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_PUBKEY_ALG_PARA_PROP_ID">
            <summary>
            This property is used with public keys that support algorithm parameter inheritance. The data BLOB contains the
            ASN.1-encoded PublicKey Algorithm parameters. For DSS, these are parameters encoded by using the CryptEncodeObject function.
            This is used only if CMS_PKCS7 is defined.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_PUBKEY_HASH_RESERVED_PROP_ID">
            <summary>Reserved</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_PVK_FILE_PROP_ID">
            <summary>
            The CRYPT_DATA_BLOB structure specifies the name of a file that contains the private key associated with the certificate's
            public key. Inside the CRYPT_DATA_BLOB structure, the pbData member is a pointer to a null-terminated Unicode wide-character
            string, and the cbData member indicates the length of the string.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_RENEWAL_PROP_ID">
            <summary>This property specifies the hash of the renewed certificate.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_REQUEST_ORIGINATOR_PROP_ID">
            <summary>
            The CRYPT_DATA_BLOB structure contains a null-terminated Unicode string that contains the DNS computer name for the
            origination of the certificate context request.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_ROOT_PROGRAM_CERT_POLICIES_PROP_ID">
            <summary>
            Returns a pointer to an encoded CERT_POLICIES_INFO structure that contains the application policies of the root certificate
            for the context. This property can be decoded by using the CryptDecodeObject function with the lpszStructType parameter set
            to X509_CERT_POLICIES and the dwCertEncodingType parameter set to a combination of X509_ASN_ENCODING bitwise OR PKCS_7_ASN_ENCODING.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_ROOT_PROGRAM_CHAIN_POLICIES_PROP_ID">
            <summary></summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_ROOT_PROGRAM_NAME_CONSTRAINTS_PROP_ID">
            <summary>Reserved</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_SCARD_PIN_ID_PROP_ID">
            <summary></summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_SCARD_PIN_INFO_PROP_ID">
            <summary></summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_SCEP_CA_CERT_PROP_ID">
            <summary></summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_SCEP_ENCRYPT_HASH_CNG_ALG_PROP_ID">
            <summary></summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_SCEP_FLAGS_PROP_ID">
            <summary></summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_SCEP_GUID_PROP_ID">
            <summary></summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_SCEP_NONCE_PROP_ID">
            <summary></summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_SCEP_RA_ENCRYPTION_CERT_PROP_ID">
            <summary></summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_SCEP_RA_SIGNATURE_CERT_PROP_ID">
            <summary></summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_SCEP_SERVER_CERTS_PROP_ID">
            <summary></summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_SCEP_SIGNER_CERT_PROP_ID">
            <summary></summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_SEND_AS_TRUSTED_ISSUER_PROP_ID">
            <summary></summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_SERIAL_CHAIN_PROP_ID">
            <summary></summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_SERIALIZABLE_KEY_CONTEXT_PROP_ID">
            <summary></summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_SHA1_HASH_PROP_ID">
            <summary>The SHA1 hash. You can compute the hash by using CryptHashCertificate.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_SHA256_HASH_PROP_ID">
            <summary></summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_SIGN_HASH_CNG_ALG_PROP_ID">
            <summary>
            <para>
            The L”&lt;SIGNATURE&gt;/&lt;HASH&gt;” string representing the certificate signature. The &lt;SIGNATURE&gt; value identifies
            the CNG public key algorithm. The following algorithms are supported:
            </para>
            <list type="bullet">
            <item>L"RSA" (BCRYPT_RSA_ALGORITHM)</item>
            <item>L"DSA" (BCRYPT_DSA_ALGORITHM)</item>
            <item>L"ECDSA" (SSL_ECDSA_ALGORITHM)</item>
            </list>
            <para>The &lt;HASH&gt; value identifies the CNG hash algorithm. The following algorithms are supported:</para>
            <list type="bullet">
            <item>L"MD5" (BCRYPT_MD5_ALGORITHM)</item>
            <item>L"SHA1" (BCRYPT_SHA1_ALGORITHM)</item>
            <item>L"SHA256" (BCRYPT_SHA256_ALGORITHM)</item>
            <item>L"SHA384" (BCRYPT_SHA384_ALGORITHM)</item>
            <item>L"SHA512" (BCRYPT_SHA512_ALGORITHM)</item>
            </list>
            <para>The following are common examples:</para>
            <list type="bullet">
            <item>L”RSA/SHA1”</item>
            <item>L”RSA/SHA256”</item>
            <item>L”ECDSA/SHA256”</item>
            </list>
            <para>This property is also applicable to an OCSP response that has been converted to a CRL.</para>
            <para>This property is explicitly set by the verify revocation functions.</para>
            <para><strong>Windows 8 and Windows Server 2012</strong>: Support for this property begins.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_SIGNATURE_HASH_PROP_ID">
            <summary>
            The signature hash. If the hash does not exist, it is computed with CryptHashToBeSigned. The length of the hash is 20 bytes
            for SHA and 16 for MD5.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_SMART_CARD_DATA_PROP_ID">
            <summary>This property sets the smart card data property of a smart card certificate context.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_SMART_CARD_READER_NON_REMOVABLE_PROP_ID">
            <summary></summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_SMART_CARD_READER_PROP_ID">
            <summary></summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_SMART_CARD_ROOT_INFO_PROP_ID">
            <summary>This property sets the information property of a smart card root certificate context.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_SOURCE_LOCATION_PROP_ID">
            <summary>Reserved</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_SOURCE_URL_PROP_ID">
            <summary>Reserved</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_SUBJECT_DISABLE_CRL_PROP_ID">
            <summary>Reserved</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_SUBJECT_INFO_ACCESS_PROP_ID">
            <summary>
            This property sets the subject information access extension of the certificate context as an encoded
            CERT_SUBJECT_INFO_ACCESS structure.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_SUBJECT_NAME_MD5_HASH_PROP_ID">
            <summary>Returns an MD5 hash of the encoded subject name of the certificate context.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_SUBJECT_OCSP_AUTHORITY_INFO_ACCESS_PROP_ID">
            <summary>Reserved</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_SUBJECT_PUB_KEY_BIT_LENGTH_PROP_ID">
            <summary>
            This property is implicitly set by calling the CertGetCertificateContextProperty function.
            <para>
            Windows Server 2008 R2, Windows 7, Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP: This identifier
            is not supported.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPropId.CERT_SUBJECT_PUBLIC_KEY_MD5_HASH_PROP_ID">
            <summary>This property sets the MD5 hash of this certificate's public key.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertEnumCertificateContextProperties(Vanara.PInvoke.Crypt32.PCCERT_CONTEXT,Vanara.PInvoke.Crypt32.CertPropId)">
            <summary>
            The <c>CertEnumCertificateContextProperties</c> function retrieves the first or next extended property associated with a
            certificate context. Used in a loop, this function can retrieve in sequence all of the extended properties associated with a
            certificate context.
            </summary>
            <param name="pCertContext">A pointer to the CERT_CONTEXT structure of the certificate containing the properties to be enumerated.</param>
            <param name="dwPropId">
            <para>
            Property number of the last property enumerated. To get the first property, dwPropId is zero. To retrieve subsequent properties,
            dwPropId is set to the property number returned by the last call to the function. To enumerate all the properties, function
            calls continue until the function returns zero.
            </para>
            <para>
            Applications can call CertGetCertificateContextProperty with the dwPropId returned by this function to retrieve that property's data.
            </para>
            </param>
            <returns>
            The return value is a <c>DWORD</c> value that identifies a certificate context's property. The <c>DWORD</c> value returned by
            one call of the function can be supplied as the dwPropId in a subsequent call to the function. If there are no more properties
            to be enumerated or if the function fails, zero is returned.
            </returns>
            <remarks>
            <para>
            CERT_KEY_PROV_HANDLE_PROP_ID and CERT_KEY_SPEC_PROP_ID properties are stored as members of the CERT_KEY_CONTEXT_PROP_ID
            property. They are not enumerated individually.
            </para>
            <para>Examples</para>
            <para>See Example C Program: Listing the Certificates in a Store.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertEnumCRLContextProperties(Vanara.PInvoke.Crypt32.PCCRL_CONTEXT,Vanara.PInvoke.Crypt32.CertPropId)">
            <summary>
            The <c>CertEnumCRLContextProperties</c> function retrieves the first or next extended property associated with a certificate
            revocation list (CRL) context. Used in a loop, this function can retrieve in sequence all extended properties associated with a
            CRL context.
            </summary>
            <param name="pCrlContext">A pointer to a CRL_CONTEXT structure.</param>
            <param name="dwPropId">
            <para>
            Property number of the last property enumerated. To get the first property, dwPropId is zero. To retrieve subsequent properties,
            dwPropId is set to the property number returned by the last call to the function. To enumerate all the properties, function
            calls continue until the function returns zero.
            </para>
            <para>
            Applications can call CertGetCRLContextProperty with the dwPropId returned by this function to retrieve that property's data.
            </para>
            </param>
            <returns>
            The return value is a <c>DWORD</c> value that identifies a CRL context's property. The <c>DWORD</c> value returned by one call
            of the function can be supplied as the dwPropId in a subsequent call to the function. If there are no more properties to be
            enumerated or if the function fails, zero is returned.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertEnumCTLContextProperties(Vanara.PInvoke.Crypt32.PCCTL_CONTEXT,Vanara.PInvoke.Crypt32.CertPropId)">
            <summary>
            The <c>CertEnumCTLContextProperties</c> function retrieves the first or next extended property associated with a certificate
            trust list (CTL) context. Used in a loop, this function can retrieve in sequence all extended properties associated with a CTL context.
            </summary>
            <param name="pCtlContext">A pointer to a CTL_CONTEXT structure.</param>
            <param name="dwPropId">
            <para>
            Property number of the last property enumerated. To get the first property, dwPropId is zero. To retrieve subsequent properties,
            dwPropId is set to the property number returned by the last call to the function. To enumerate all the properties, function
            calls continue until the function returns zero.
            </para>
            <para>
            Applications can call CertGetCTLContextProperty with the dwPropId returned by this function to retrieved that property's data.
            </para>
            </param>
            <returns>
            The return value is a <c>DWORD</c> value that identifies a CTL context's property. The <c>DWORD</c> value returned by one call
            of the function can be supplied as the dwPropId in a subsequent call to the function. If there are no more properties to be
            enumerated or if the function fails, zero is returned.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertGetCertificateContextProperty(Vanara.PInvoke.Crypt32.PCCERT_CONTEXT,Vanara.PInvoke.Crypt32.CertPropId,System.IntPtr,System.UInt32@)">
            <summary>
            The <c>CertGetCertificateContextProperty</c> function retrieves the information contained in an extended property of a
            certificate context.
            </summary>
            <param name="pCertContext">A pointer to the CERT_CONTEXT structure of the certificate that contains the property to be retrieved.</param>
            <param name="dwPropId">
            <para>
            The property to be retrieved. Currently defined identifiers and the data type to be returned in pvData are listed in the
            following table.
            </para>
            <para>CERT_ACCESS_STATE_PROP_ID</para>
            <para>Data type of pvData: A pointer to a <c>DWORD</c> value.</para>
            <para>
            Returns a <c>DWORD</c> value that indicates whether write operations to the certificate are persisted. The <c>DWORD</c> value is
            not set if the certificate is in a memory store or in a registry-based store that is opened as read-only.
            </para>
            <para>CERT_AIA_URL_RETRIEVED_PROP_ID</para>
            <para>This identifier is reserved.</para>
            <para>CERT_ARCHIVED_KEY_HASH_PROP_ID</para>
            <para>Data type of pvData: A pointer to an array of <c>BYTE</c> values. The size of this array is specified in the pcbData parameter.</para>
            <para>Returns a previously saved encrypted key hash for the certificate context.</para>
            <para>CERT_ARCHIVED_PROP_ID</para>
            <para>
            Data type of pvData: <c>NULL</c>. If the <c>CertGetCertificateContextProperty</c> function returns true, then the specified
            property ID exists for the CERT_CONTEXT.
            </para>
            <para>
            Indicates the certificate is skipped during enumerations. A certificate with this property set is found with explicit search
            operations, such as those used to find a certificate with a specific hash or a serial number. No data in pvData is associated
            with this property.
            </para>
            <para>CERT_AUTHORITY_INFO_ACCESS_PROP_ID</para>
            <para>This identifier is reserved.</para>
            <para>CERT_AUTO_ENROLL_PROP_ID</para>
            <para>Data type of pvData: A pointer to an array of <c>BYTE</c> values. The size of this array is specified in the pcbData parameter.</para>
            <para>Returns a null-terminated Unicode string that names the certificate type for which the certificate has been auto enrolled.</para>
            <para>CERT_AUTO_ENROLL_RETRY_PROP_ID</para>
            <para>This identifier is reserved.</para>
            <para>CERT_BACKED_UP_PROP_ID</para>
            <para>This identifier is reserved.</para>
            <para>CERT_CA_DISABLE_CRL_PROP_ID</para>
            <para>Data type of pvData: A pointer to an array of <c>BYTE</c> values. The size of this array is specified in the pcbData parameter.</para>
            <para>
            Disables certificate revocation list (CRL) retrieval for certificates used by the certification authority (CA). If the CA
            certificate contains this property, it must also include the <c>CERT_CA_OCSP_AUTHORITY_INFO_ACCESS_PROP_ID</c> property.
            </para>
            <para>CERT_CA_OCSP_AUTHORITY_INFO_ACCESS_PROP_ID</para>
            <para>Data type of pvData: A pointer to an array of <c>BYTE</c> values. The size of this array is specified in the pcbData parameter.</para>
            <para>
            Contains the list of online certificate status protocol (OCSP) URLs to use for certificates issued by the CA certificate. The
            array contents are the Abstract Syntax Notation One (ASN.1)-encoded bytes of an <c>X509_AUTHORITY_INFO_ACCESS</c> structure
            where <c>pszAccessMethod</c> is set to <c>szOID_PKIX_OCSP</c>.
            </para>
            <para>CERT_CROSS_CERT_DIST_POINTS_PROP_ID</para>
            <para>Data type of pvData: A pointer to an array of <c>BYTE</c> values. The size of this array is specified in the pcbData parameter.</para>
            <para>
            Location of the cross certificates. Currently, this identifier is only applicable to certificates and not to CRLs or certificate
            trust lists (CTLs). The <c>BYTE</c> array contains an ASN.1-encoded CROSS_CERT_DIST_POINTS_INFO structure decoded by using the
            CryptDecodeObject function with a X509_CROSS_CERT_DIST_POINTS value for the lpszStuctType parameter.
            </para>
            <para>CERT_CTL_USAGE_PROP_ID</para>
            <para>Data type of pvData: A pointer to an array of <c>BYTE</c> values. The size of this array is specified in the pcbData parameter.</para>
            <para>Returns an array of bytes that contain an ASN.1-encoded <see cref="T:Vanara.PInvoke.Crypt32.CTL_USAGE"/> structure.</para>
            <para>CERT_DATE_STAMP_PROP_ID</para>
            <para>Data type of pvData: A pointer to a <c>FILETIME</c> structure.</para>
            <para>Time when the certificate was added to the store.</para>
            <para>CERT_DESCRIPTION_PROP_ID</para>
            <para>Data type of pvData: A pointer to an array of <c>BYTE</c> values. The size of this array is specified in the pcbData parameter.</para>
            <para>Returns the property displayed by the certificate UI. This property allows the user to describe the certificate's use.</para>
            <para>CERT_EFS_PROP_ID</para>
            <para>This identifier is reserved.</para>
            <para>CERT_ENHKEY_USAGE_PROP_ID</para>
            <para>Data type of pvData: A pointer to an array of <c>BYTE</c> values. The size of this array is specified in the pcbData parameter.</para>
            <para>
            Returns an array of bytes that contain an ASN.1-encoded CERT_ENHKEY_USAGE structure. This structure contains an array of
            Enhanced Key Usage object identifiers (OIDs), each of which specifies a valid use of the certificate.
            </para>
            <para>CERT_ENROLLMENT_PROP_ID</para>
            <para>Data type of pvData: A pointer to an array of <c>BYTE</c> values. The size of this array is specified in the pcbData parameter.</para>
            <para>
            Enrollment information of the pending request that contains RequestID, CADNSName, CAName, and DisplayName. The data format is
            defined as follows.
            </para>
            <list type="table">
            <listheader>
            <term>Bytes</term>
            <term>Contents</term>
            </listheader>
            <item>
            <term>First 4 bytes</term>
            <term>Pending request ID</term>
            </item>
            <item>
            <term>Next 4 bytes</term>
            <term>
            CADNSName size, in characters, including the terminating null character, followed by CADNSName string with terminating null character
            </term>
            </item>
            <item>
            <term>Next 4 bytes</term>
            <term>
            CAName size, in characters, including the terminating null character, followed by CAName string with terminating null character
            </term>
            </item>
            <item>
            <term>Next 4 bytes</term>
            <term>
            DisplayName size, in characters, including the terminating null character, followed by DisplayName string with terminating null character
            </term>
            </item>
            </list>
            <para>CERT_EXTENDED_ERROR_INFO_PROP_ID</para>
            <para>Data type of pvData: A pointer to an array of <c>BYTE</c> values. The size of this array is specified in the pcbData parameter.</para>
            <para>Returns a null-terminated Unicode character string that contains extended error information for the certificate context.</para>
            <para>CERT_FORTEZZA_DATA_PROP_ID</para>
            <para>This identifier is reserved.</para>
            <para>CERT_FRIENDLY_NAME_PROP_ID</para>
            <para>Data type of pvData: A pointer to an array of <c>BYTE</c> values. The size of this array is specified in the pcbData parameter.</para>
            <para>Returns a null-terminated Unicode character string that contains the display name for the certificate.</para>
            <para>CERT_HASH_PROP_ID</para>
            <para>Data type of pvData: A pointer to an array of <c>BYTE</c> values. The size of this array is specified in the pcbData parameter.</para>
            <para>Returns the SHA1 hash. If the hash does not exist, it is computed by using the CryptHashCertificate function.</para>
            <para>CERT_HCRYPTPROV_OR_NCRYPT_KEY_HANDLE_PROP_ID</para>
            <para>Data type of pvData: A pointer to an HCRYPTPROV_OR_NCRYPT_KEY_HANDLE data type.</para>
            <para>Returns either the <c>HCRYPTPROV</c> or <c>NCRYPT_KEY_HANDLE</c> choice.</para>
            <para>CERT_HCRYPTPROV_TRANSFER_PROP_ID</para>
            <para>
            Returns the Cryptography API (CAPI) key handle associated with the certificate. The caller is responsible for freeing the
            handle. It will not be freed when the context is freed. The property value is removed after after it is returned. If you call
            this property on a context that has a CNG key, <c>CRYPT_E_NOT_FOUND</c> is returned.
            </para>
            <para>CERT_IE30_RESERVED_PROP_ID</para>
            <para>This identifier is reserved.</para>
            <para>CERT_ISSUER_PUBLIC_KEY_MD5_HASH_PROP_ID</para>
            <para>Data type of pvData: A pointer to an array of <c>BYTE</c> values. The size of this array is specified in the pcbData parameter.</para>
            <para>MD5 hash of the public key associated with the private key used to sign this certificate.</para>
            <para>CERT_ISSUER_SERIAL_NUMBER_MD5_HASH_PROP_ID</para>
            <para>Data type of pvData: A pointer to an array of <c>BYTE</c> values. The size of this array is specified in the pcbData parameter.</para>
            <para>MD5 hash of the issuer name and serial number from this certificate.</para>
            <para>CERT_KEY_CONTEXT_PROP_ID</para>
            <para>Data type of pvData: A pointer to a CERT_KEY_CONTEXT structure.</para>
            <para>Returns a CERT_KEY_CONTEXT structure.</para>
            <para>CERT_KEY_IDENTIFIER_PROP_ID</para>
            <para>Data type of pvData: A pointer to an array of <c>BYTE</c> values. The size of this array is specified in the pcbData parameter.</para>
            <para>
            If nonexistent, searches for the szOID_SUBJECT_KEY_IDENTIFIER extension. If that fails, a SHA1 hash is done on the certificate's
            <c>SubjectPublicKeyInfo</c> member to produce the identifier values.
            </para>
            <para>CERT_KEY_PROV_HANDLE_PROP_ID</para>
            <para>Data type of pvData: A pointer to an HCRYPTPROV value.</para>
            <para>Returns the provider handle obtained from CERT_KEY_CONTEXT_PROP_ID.</para>
            <para>CERT_KEY_PROV_INFO_PROP_ID</para>
            <para>Data type of pvData: A pointer to a CRYPT_KEY_PROV_INFO structure.</para>
            <para>Returns a pointer to a CRYPT_KEY_PROV_INFO structure.</para>
            <para>CERT_KEY_SPEC_PROP_ID</para>
            <para>Data type of pvData: A pointer to a <c>DWORD</c> value.</para>
            <para>
            Returns a <c>DWORD</c> value that specifies the private key obtained from CERT_KEY_CONTEXT_PROP_ID if it exists. Otherwise, if
            CERT_KEY_PROV_INFO_PROP_ID exists, it is the source of the dwKeySpec.
            </para>
            <para>CERT_MD5_HASH_PROP_ID</para>
            <para>Data type of pvData: A pointer to an array of <c>BYTE</c> values. The size of this array is specified in the pcbData parameter.</para>
            <para>Returns the MD5 hash. If the hash does not exist, it is computed by using the CryptHashCertificate function.</para>
            <para>CERT_NCRYPT_KEY_HANDLE_PROP_ID</para>
            <para>Data type of pvData: A pointer to an <c>NCRYPT_KEY_HANDLE</c> data type.</para>
            <para>Returns a <c>CERT_NCRYPT_KEY_SPEC</c> choice where applicable.</para>
            <para>CERT_NCRYPT_KEY_HANDLE_TRANSFER_PROP_ID</para>
            <para>
            Returns the CNG key handle associated with the certificate. The caller is responsible for freeing the handle. It will not be
            freed when the context is freed. The property value is removed after after it is returned. If you call this property on a
            context that has a legacy (CAPI) key, <c>CRYPT_E_NOT_FOUND</c> is returned.
            </para>
            <para>CERT_NEW_KEY_PROP_ID</para>
            <para>This identifier is reserved.</para>
            <para>CERT_NEXT_UPDATE_LOCATION_PROP_ID</para>
            <para>Data type of pvData: A pointer to an array of <c>BYTE</c> values. The size of this array is specified in the pcbData parameter.</para>
            <para>Returns the ASN.1-encoded CERT_ALT_NAME_INFO structure.</para>
            <para>CERT_NEXT_UPDATE_LOCATION_PROP_ID is currently used only with CTLs.</para>
            <para>CERT_NO_AUTO_EXPIRE_CHECK_PROP_ID</para>
            <para>This identifier is reserved.</para>
            <para>CERT_OCSP_CACHE_PREFIX_PROP_ID</para>
            <para>This identifier is reserved.</para>
            <para>CERT_OCSP_RESPONSE_PROP_ID</para>
            <para>Data type of pvData: A pointer to an array of <c>BYTE</c> values. The size of this array is specified in the pcbData parameter.</para>
            <para>Returns an encoded OCSP response for this certificate.</para>
            <para>CERT_PUB_KEY_CNG_ALG_BIT_LENGTH_PROP_ID</para>
            <para>Data type of pvData: Pointer to a null-terminated Unicode string.</para>
            <para>
            Returns an L”&lt;PUBKEY&gt;/&lt;BITLENGTH&gt;” string representing the certificate’s public key algorithm and bit length. The
            following &lt;PUBKEY&gt; algorithms are supported:
            </para>
            <list type="bullet">
            <item>
            <term>L"RSA" (BCRYPT_RSA_ALGORITHM)</term>
            </item>
            <item>
            <term>L"DSA" (BCRYPT_DSA_ALGORITHM)</term>
            </item>
            <item>
            <term>L"ECDSA" (SSL_ECDSA_ALGORITHM)</term>
            </item>
            </list>
            <para>Windows 8 and Windows Server 2012:</para>
            <para>Support for this property begins.</para>
            <para>CERT_PUBKEY_ALG_PARA_PROP_ID</para>
            <para>Data type of pvData: A pointer to an array of <c>BYTE</c> values. The size of this array is specified in the pcbData parameter.</para>
            <para>
            For public keys that support algorithm parameter inheritance, returns the ASN.1-encoded PublicKey Algorithm parameters. For
            Digital Signature Standard (DSS), returns the parameters encoded by using the CryptEncodeObject function. This property is used
            only if CMS_PKCS7 is defined.
            </para>
            <para>CERT_PUBKEY_HASH_RESERVED_PROP_ID</para>
            <para>This identifier is reserved.</para>
            <para>CERT_PVK_FILE_PROP_ID</para>
            <para>Data type of pvData: A pointer to an array of <c>BYTE</c> values. The size of this array is specified in the pcbData parameter.</para>
            <para>
            Returns a null-terminated Unicode wide character string that contains the file name that contains the private key associated
            with the certificate's public key.
            </para>
            <para>CERT_RENEWAL_PROP_ID</para>
            <para>Data type of pvData: A pointer to an array of <c>BYTE</c> values. The size of this array is specified in the pcbData parameter.</para>
            <para>Returns the hash of the renewed certificate.</para>
            <para>CERT_REQUEST_ORIGINATOR_PROP_ID</para>
            <para>Data type of pvData: A pointer to an array of <c>BYTE</c> values. The size of this array is specified in the pcbData parameter.</para>
            <para>
            Returns a null-terminated Unicode string that contains the DNS computer name for the origination of the certificate context request.
            </para>
            <para>CERT_ROOT_PROGRAM_CERT_POLICIES_PROP_ID</para>
            <para>Data type of pvData: A pointer to an array of <c>BYTE</c> values. The size of this array is specified in the pcbData parameter.</para>
            <para>
            Returns a pointer to an encoded CERT_POLICIES_INFO structure that contains the application policies of the root certificate for
            the context. This property can be decoded by using the CryptDecodeObject function with the lpszStructType parameter set to
            <c>X509_CERT_POLICIES</c> and the dwCertEncodingType parameter set to a combination of <c>X509_ASN_ENCODING</c> bitwise <c>OR</c><c>PKCS_7_ASN_ENCODING</c>.
            </para>
            <para>CERT_ROOT_PROGRAM_NAME_CONSTRAINTS_PROP_ID</para>
            <para>This identifier is reserved.</para>
            <para>CERT_SHA1_HASH_PROP_ID</para>
            <para>Data type of pvData: A pointer to an array of <c>BYTE</c> values. The size of this array is specified in the pcbData parameter.</para>
            <para>Returns the SHA1 hash. If the hash does not exist, it is computed by using the CryptHashCertificate function.</para>
            <para>CERT_SIGN_HASH_CNG_ALG_PROP_ID</para>
            <para>Data type of pvData: Pointer to a null-terminated Unicode string.</para>
            <para>
            Returns the L”&lt;SIGNATURE&gt;/&lt;HASH&gt;” string representing the certificate signature. The &lt;SIGNATURE&gt; value
            identifies the CNG public key algorithm. The following algorithms are supported:
            </para>
            <list type="bullet">
            <item>
            <term>L"RSA" (BCRYPT_RSA_ALGORITHM)</term>
            </item>
            <item>
            <term>L"DSA" (BCRYPT_DSA_ALGORITHM)</term>
            </item>
            <item>
            <term>L"ECDSA" (SSL_ECDSA_ALGORITHM)</term>
            </item>
            </list>
            <para>The</para>
            <para>&lt;HASH&gt;</para>
            <para>value identifies the CNG hash algorithm. The following algorithms are supported:</para>
            <list type="bullet">
            <item>
            <term>L"MD5" (BCRYPT_MD5_ALGORITHM)</term>
            </item>
            <item>
            <term>L"SHA1" (BCRYPT_SHA1_ALGORITHM)</term>
            </item>
            <item>
            <term>L"SHA256" (BCRYPT_SHA256_ALGORITHM)</term>
            </item>
            <item>
            <term>L"SHA384" (BCRYPT_SHA384_ALGORITHM)</term>
            </item>
            <item>
            <term>L"SHA512" (BCRYPT_SHA512_ALGORITHM)</term>
            </item>
            </list>
            <para>The following are common examples:</para>
            <list type="bullet">
            <item>
            <term>L"RSA/SHA1"</term>
            </item>
            <item>
            <term>L"RSA/SHA256"</term>
            </item>
            <item>
            <term>L"ECDSA/SHA256"</term>
            </item>
            </list>
            <para>Windows 7 and Windows Server 2008 R2:</para>
            <para>Support for this property begins.</para>
            <para>CERT_SIGNATURE_HASH_PROP_ID</para>
            <para>Data type of pvData: A pointer to an array of <c>BYTE</c> values. The size of this array is specified in the pcbData parameter.</para>
            <para>
            Returns the signature hash. If the hash does not exist, it is computed by using the CryptHashToBeSigned function. The length of
            the hash is 20 bytes for SHA and 16 for MD5.
            </para>
            <para>CERT_SMART_CARD_DATA_PROP_ID</para>
            <para>Data type of pvData: A pointer to an array of <c>BYTE</c> values. The size of this array is specified in the pcbData parameter.</para>
            <para>
            Returns a pointer to encoded smart card data. Prior to calling <c>CertGetCertificateContextProperty</c>, you can use this
            constant to retrieve a smart card certificate by using the CertFindCertificateInStore function with the pvFindPara parameter set
            to <c>CERT_SMART_CARD_DATA_PROP_ID</c> and the dwFindType parameter set to <c>CERT_FIND_PROPERTY</c>.
            </para>
            <para>CERT_SMART_CARD_ROOT_INFO_PROP_ID</para>
            <para>Data type of pvData: A pointer to an array of <c>BYTE</c> values. The size of this array is specified in the pcbData parameter.</para>
            <para>Returns a pointer to an encoded CRYPT_SMART_CARD_ROOT_INFO structure.</para>
            <para>CERT_SOURCE_LOCATION_PROP_ID</para>
            <para>This identifier is reserved.</para>
            <para>CERT_SOURCE_URL_PROP_ID</para>
            <para>This identifier is reserved.</para>
            <para>CERT_SUBJECT_DISABLE_CRL_PROP_ID</para>
            <para>This identifier is reserved.</para>
            <para>CERT_SUBJECT_INFO_ACCESS_PROP_ID</para>
            <para>Data type of pvData: A pointer to an array of <c>BYTE</c> values. The size of this array is specified in the pcbData parameter.</para>
            <para>Returns the subject information access extension of the certificate context as an encoded CERT_SUBJECT_INFO_ACCESS structure.</para>
            <para>CERT_SUBJECT_NAME_MD5_HASH_PROP_ID</para>
            <para>Data type of pvData: A pointer to an array of <c>BYTE</c> values. The size of this array is specified in the pcbData parameter.</para>
            <para>Returns an MD5 hash of the encoded subject name of the certificate context.</para>
            <para>CERT_SUBJECT_OCSP_AUTHORITY_INFO_ACCESS_PROP_ID</para>
            <para>This identifier is reserved.</para>
            <para>CERT_SUBJECT_PUB_KEY_BIT_LENGTH_PROP_ID</para>
            <para>Data type of pvData: Pointer to a <c>DWORD</c> value.</para>
            <para>Returns the length, in bits, of the public key in the certificate.</para>
            <para><c>Windows 8 and Windows Server 2012:</c> Support for this property begins.</para>
            <para>CERT_SUBJECT_PUBLIC_KEY_MD5_HASH_PROP_ID</para>
            <para>Data type of pvData: A pointer to an array of <c>BYTE</c> values. The size of this array is specified in the pcbData parameter.</para>
            <para>Returns the MD5 hash of this certificate's public key.</para>
            <para>For all user-defined property identifiers, pvData points to an array of <c>BYTE</c> values.</para>
            <para>For more information about each property identifier, see the documentation on the dwPropId parameter in CertSetCertificateContextProperty.</para>
            </param>
            <param name="pvData">
            <para>
            A pointer to a buffer to receive the data as determined by dwPropId. Structures pointed to by members of a structure returned
            are also returned following the base structure. Therefore, the size contained in pcbData often exceeds the size of the base structure.
            </para>
            <para>
            This parameter can be <c>NULL</c> to set the size of the information for memory allocation purposes. For more information, see
            Retrieving Data of Unknown Length.
            </para>
            </param>
            <param name="pcbData">
            <para>
            A pointer to a <c>DWORD</c> value that specifies the size, in bytes, of the buffer pointed to by the pvData parameter. When the
            function returns, the <c>DWORD</c> value contains the number of bytes to be stored in the buffer.
            </para>
            <para>
            To obtain the required size of a buffer at run time, pass <c>NULL</c> for the pvData parameter, and set the value pointed to by
            this parameter to zero. If the pvData parameter is not <c>NULL</c> and the size specified in pcbData is less than the number of
            bytes required to contain the data, the function fails, GetLastError returns <c>ERROR_MORE_DATA</c>, and the required size is
            placed in the variable pointed to by the pcbData parameter.
            </para>
            <para>
            <c>Note</c> When processing the data returned in the buffer, applications must use the actual size of the data returned. The
            actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually
            specified large enough to ensure that the largest possible output data fits in the buffer.) On output, the variable pointed to
            by this parameter is updated to reflect the actual size of the data copied to the buffer.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the function returns <c>TRUE</c>.</para>
            <para>If the function fails, it returns <c>FALSE</c>. For extended error information, call GetLastError.</para>
            <para>Some possible error codes follow.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>CRYPT_E_NOT_FOUND</term>
            <term>The certificate does not have the specified property.</term>
            </item>
            <item>
            <term>ERROR_MORE_DATA</term>
            <term>
            If the buffer specified by the pvData parameter is not large enough to hold the returned data, the function sets the
            ERROR_MORE_DATA code and stores the required buffer size, in bytes, in the variable pointed to by pcbData.
            </term>
            </item>
            </list>
            <para>Errors from the called function CryptHashCertificate can be propagated to this function.</para>
            </returns>
            <remarks>
            <para>
            Properties are not stored inside a certificate. Typically, they are associated with a certificate after the certificate response
            is received and then saved with the certificate in the store. For security reasons, we recommend that you validate property
            values before saving them and that you save only informational properties such as the <c>CERT_FRIENDLY_NAME_PROP_ID</c> value in
            user stores. All other property types should be saved in local computer stores.
            </para>
            <para>Your code can use a macro to evaluate the class of hash for a certificate context. For more information, see CertSetCertificateContextProperty.</para>
            <para>Examples</para>
            <para>
            For examples that use this function, see Example C Program: Getting and Setting Certificate Properties and Example C Program:
            Listing the Certificates in a Store.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertGetCRLContextProperty(Vanara.PInvoke.Crypt32.PCCRL_CONTEXT,Vanara.PInvoke.Crypt32.CertPropId,System.IntPtr,System.UInt32@)">
            <summary>
            The <c>CertGetCRLContextProperty</c> function gets an extended property for the specified certificate revocation list (CRL) context.
            </summary>
            <param name="pCrlContext">A pointer to the CRL_CONTEXT structure.</param>
            <param name="dwPropId">
            <para>
            Identifies the property to be retrieved. Currently defined identifiers and the data type to be returned in pvData are listed in
            the following table.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_ACCESS_STATE_PROP_ID</term>
            <term>
            Data type for pvData: pointer to a DWORD Returns a DWORD value indicating whether write operations to the certificate are
            persisted. The DWORD value is not set if the certificate is in a memory store or in a registry-based store that is opened as read-only.
            </term>
            </item>
            <item>
            <term>CERT_ARCHIVED_PROP_ID</term>
            <term>
            Data type for pvData: NULL Indicates the certificate is skipped during enumerations. A certificate with this property set is
            found with explicit search operations, such as those used to find a certificate with a specific hash or a serial number. No data
            in pvData is associated with this property.
            </term>
            </item>
            <item>
            <term>CERT_AUTO_ENROLL_PROP_ID</term>
            <term>
            Data type for pvData: pointer to a BYTE array Returns a null-terminated Unicode string naming the certificate type for which the
            certificate has been auto enrolled.
            </term>
            </item>
            <item>
            <term>CERT_CTL_USAGE_PROP_ID</term>
            <term>
            Data type for pvData: pointer to a BYTE array Returns an array of bytes containing an Abstract Syntax Notation One (ASN.1)
            encoded CTL_USAGE structure.
            </term>
            </item>
            <item>
            <term>CERT_DESCRIPTION_PROP_ID</term>
            <term>
            Data type for pvData: pointer to a BYTE array Returns the property displayed by the certificate UI. This property allows the
            user to describe the certificate's use.
            </term>
            </item>
            <item>
            <term>CERT_ENHKEY_USAGE_PROP_ID</term>
            <term>Data type for pvData: Returns an array of bytes containing an ASN.1 encoded CERT_ENHKEY_USAGE structure.</term>
            </item>
            <item>
            <term>CERT_FRIENDLY_NAME_PROP_ID</term>
            <term>
            Data type for pvData: pointer to a BYTE array Returns a null-terminated Unicode character string that contains the display name
            for the CRL.
            </term>
            </item>
            <item>
            <term>CERT_ISSUER_CHAIN_PUB_KEY_CNG_ALG_BIT_LENGTH_PROP_ID</term>
            <term>
            Data type for pvData: Pointer to a null-terminated Unicode string. Returns a string containing a set of
            L"&lt;PUBKEY&gt;/&lt;BITLENGTH&gt;" public key algorithm and bit length pairs. The semicolon, L";", is used as the delimiter.
            The &lt;PUBKEY&gt; value identifies the CNG public key algorithm. The following algorithms are supported: An
            &lt;PUBKEY&gt;/&lt;BITLENGTH&gt; pair is returned for each certificate in the CRL issuer chain excluding the leaf. This property
            is only set when an OCSP response with an independent signer chain is converted to a CRL. The following is an example: : L"RSA/2048;RSA/4096"
            </term>
            </item>
            <item>
            <term>CERT_ISSUER_CHAIN_SIGN_HASH_CNG_ALG_PROP_ID</term>
            <term>
            Data type for pvData: Pointer to a null-terminated Unicode string. Returns a string that contains a set of
            L"&lt;SIGNATURE&gt;/&lt;HASH&gt;" algorithm pairs. The semicolon, L";", is used as the delimiter between pairs. This property is
            set only when an OCSP response is converted to a CRL. For a delegated OCSP signer certificate, only the algorithm pair for the
            signer certificate is returned. For an independent OCSP signer certificate chain, an algorithm pair is returned for each
            certificate in the chain excluding the root. The &lt;SIGNATURE&gt; value identifies the CNG public key algorithm. The following
            algorithms are supported: The &lt;HASH&gt; value identifies the CNG hash algorithm. The following algorithms are supported: The
            following shows an example:
            </term>
            </item>
            <item>
            <term>CERT_ISSUER_PUB_KEY_BIT_LENGTH_PROP_ID</term>
            <term>
            Data type for pvData: Pointer to a DWORD value. Returns the length, in bits, of the public key in the CRL issuer certificate.
            This property is also applicable to an OCSP response that has been converted to a CRL. Windows 8 and Windows Server 2012:
            Support for this property begins.
            </term>
            </item>
            <item>
            <term>CERT_KEY_CONTEXT_PROP_ID</term>
            <term>Data type for pvData: pointer to a CERT_KEY_CONTEXT Returns a CERT_KEY_CONTEXT structure.</term>
            </item>
            <item>
            <term>CERT_KEY_IDENTIFIER_PROP_ID</term>
            <term>
            Data type for pvData: pointer to a BYTE array If nonexistent, searches for the szOID_SUBJECT_KEY_IDENTIFIER extension. If that
            fails, a SHA1 hash is done on the certificate's SubjectPublicKeyInfo member to produce the identifier values.
            </term>
            </item>
            <item>
            <term>CERT_KEY_PROV_HANDLE_PROP_ID</term>
            <term>Data type for pvData: pointer to an HCRYPTPROV Returns the provider handle obtained from the CERT_KEY_CONTEXT_PROP_ID.</term>
            </item>
            <item>
            <term>CERT_KEY_PROV_INFO_PROP_ID</term>
            <term>Data type for pvData: pointer to a CRYPT_KEY_PROV_INFO Returns a pointer to a CRYPT_KEY_PROV_INFO.</term>
            </item>
            <item>
            <term>CERT_KEY_SPEC_PROP_ID</term>
            <term>
            Data type for pvData: pointer to a DWORD Returns a DWORD value specifying the private key obtained from CERT_KEY_CONTEXT_PROP_ID
            property if it exists. Otherwise, if CERT_KEY_PROV_INFO_PROP_ID exists, it is the source of the dwKeySpec.
            </term>
            </item>
            <item>
            <term>CERT_MD5_HASH_PROP_ID</term>
            <term>Data type for pvData: pointer to a BYTE array Returns the MD5 hash. If the hash does not exist, it is computed using CryptHashCertificate.</term>
            </item>
            <item>
            <term>CERT_NEXT_UPDATE_LOCATION_PROP_ID</term>
            <term>
            Data type for pvData: pointer to a BYTE array Returns the ASN.1 encoded CERT_ALT_NAME_INFO structure.
            CERT_NEXT_UPDATE_LOCATION_PROP_ID is currently used only with CTLs.
            </term>
            </item>
            <item>
            <term>CERT_PVK_FILE_PROP_ID</term>
            <term>
            Data type for pvData: pointer to a BYTE array Returns a null-terminated Unicode, wide character string specifying the file name
            containing the private key associated with the certificate's public key.
            </term>
            </item>
            <item>
            <term>CERT_SHA1_HASH_PROP_ID</term>
            <term>
            Data type for pvData: pointer to a BYTE array Returns the SHA1 hash. If the hash does not exist, it is computed using CryptHashCertificate.
            </term>
            </item>
            <item>
            <term>CERT_SIGN_HASH_CNG_ALG_PROP_ID</term>
            <term>
            Data type of pvData: Pointer to a null-terminated Unicode string. Returns the L”&lt;SIGNATURE&gt;/&lt;HASH&gt;” string
            representing the certificate signature. The &lt;SIGNATURE&gt; value identifies the CNG public key algorithm. The following
            algorithms are supported: The &lt;HASH&gt; value identifies the CNG hash algorithm. The following algorithms are supported: The
            following are common examples: This property is also applicable to an OCSP response that has been converted to a CRL. Windows 8
            and Windows Server 2012: Support for this property begins.
            </term>
            </item>
            <item>
            <term>CERT_SIGNATURE_HASH_PROP_ID</term>
            <term>
            Data type for pvData: pointer to a BYTE array Returns the signature hash. If the hash does not exist, it is computed with
            CryptHashToBeSigned. The length of the hash is 20 bytes for SHA and 16 for MD5.
            </term>
            </item>
            </list>
            <para>
            For many property identifiers, pvData points to an array of bytes and not a CRYPT_DATA_BLOB as pointed to by the pvData
            parameter in CertSetCRLContextProperty.
            </para>
            <para>For more information about each property identifier, see the documentation on the dwPropId parameter in CertSetCertificateContextProperty.</para>
            </param>
            <param name="pvData">
            <para>
            A pointer to a buffer to receive the data as determined by dwPropId. Structures pointed to by members of a structure returned
            are also returned following the base structure. Therefore, the size contained in pcbData often exceed the size of the base structure.
            </para>
            <para>
            This parameter can be <c>NULL</c> to set the size of the information for memory allocation purposes. For more information, see
            Retrieving Data of Unknown Length.
            </para>
            </param>
            <param name="pcbData">
            <para>
            A pointer to a <c>DWORD</c> value specifying the size, in bytes, of the buffer pointed to by the pvData parameter. When the
            function returns, the <c>DWORD</c> value contains the number of bytes to be stored in the buffer.
            </para>
            <para>
            <c>Note</c> When processing the data returned in the buffer, applications must use the actual size of the data returned. The
            actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually
            specified large enough to ensure that the largest possible output data fits in the buffer.) On output, the variable pointed to
            by this parameter is updated to reflect the actual size of the data copied to the buffer.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>.</para>
            <para>
            Note that errors from the called function CryptHashCertificate can be propagated to this function. For extended error
            information, call GetLastError. Some possible error codes follow.
            </para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>CRYPT_E_NOT_FOUND</term>
            <term>The CRL does not have the specified property.</term>
            </item>
            <item>
            <term>ERROR_MORE_DATA</term>
            <term>
            If the buffer specified by the pvData parameter is not large enough to hold the returned data, the function sets the
            ERROR_MORE_DATA code and stores the required buffer size, in bytes, in the variable pointed to by pcbData.
            </term>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertGetCTLContextProperty(Vanara.PInvoke.Crypt32.PCCTL_CONTEXT,Vanara.PInvoke.Crypt32.CertPropId,System.IntPtr,System.UInt32@)">
            <summary>The <c>CertGetCTLContextProperty</c> function retrieves an extended property of a certificate trust list (CTL) context.</summary>
            <param name="pCtlContext">A pointer to the CTL_CONTEXT structure.</param>
            <param name="dwPropId">
            <para>
            Identifies the property to be retrieved. Currently defined identifiers and the data type to be returned in pvData are listed in
            the following table.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_ACCESS_STATE_PROP_ID</term>
            <term>
            Data type for pvData: pointer to a DWORD Returns a DWORD value indicating whether write operations to the certificate are
            persisted. The DWORD value is not set if the certificate is in a memory store or in a registry-based store that is opened as read-only.
            </term>
            </item>
            <item>
            <term>CERT_ARCHIVED_PROP_ID</term>
            <term>
            Data type for pvData: NULL Indicates the certificate is skipped during enumerations. A certificate with this property set is
            found with explicit search operations, such as those used to find a certificate with a specific hash or a serial number. No data
            in pvData is associated with this property.
            </term>
            </item>
            <item>
            <term>CERT_AUTO_ENROLL_PROP_ID</term>
            <term>
            Data type for pvData: pointer to a BYTE array Returns a null-terminated Unicode string naming the certificate type for which the
            certificate has been auto enrolled.
            </term>
            </item>
            <item>
            <term>CERT_CTL_USAGE_PROP_ID</term>
            <term>
            Data type for pvData: pointer to a BYTE array Returns an array of bytes containing an Abstract Syntax Notation One (ASN.1)
            encoded CTL_USAGE structure.
            </term>
            </item>
            <item>
            <term>CERT_DESCRIPTION_PROP_ID</term>
            <term>
            Data type for pvData: pointer to a BYTE array Returns the property displayed by the certificate UI. This property allows the
            user to describe the certificate's use.
            </term>
            </item>
            <item>
            <term>CERT_ENHKEY_USAGE_PROP_ID</term>
            <term>
            Data type for pvData: pointer to a BYTE array Returns an array of bytes containing an ASN.1 encoded CERT_ENHKEY_USAGE structure.
            </term>
            </item>
            <item>
            <term>CERT_FRIENDLY_NAME_PROP_ID</term>
            <term>
            Data type for pvData: pointer to a BYTE array Returns a null-terminated Unicode character string that contains the display name
            for the CTL.
            </term>
            </item>
            <item>
            <term>CERT_HASH_PROP_ID</term>
            <term>
            Data type for pvData: pointer to a BYTE array Returns the SHA1 hash. If the hash does not exist, it is computed using CryptHashCertificate.
            </term>
            </item>
            <item>
            <term>CERT_KEY_CONTEXT_PROP_ID</term>
            <term>Data type for pvData: pointer to a CERT_KEY_CONTEXT Returns a CERT_KEY_CONTEXT structure.</term>
            </item>
            <item>
            <term>CERT_KEY_IDENTIFIER_PROP_ID</term>
            <term>
            Data type for pvData: pointer to a BYTE array If nonexistent, searches for the szOID_SUBJECT_KEY_IDENTIFIER extension. If that
            fails, a SHA1 hash is done on the certificate's SubjectPublicKeyInfo member to produce the identifier values.
            </term>
            </item>
            <item>
            <term>CERT_KEY_PROV_HANDLE_PROP_ID</term>
            <term>Data type for pvData: pointer to an HCRYPTPROV Returns the provider handle obtained from the CERT_KEY_CONTEXT_PROP_ID.</term>
            </item>
            <item>
            <term>CERT_KEY_PROV_INFO_PROP_ID</term>
            <term>Data type for pvData: pointer to a CRYPT_KEY_PROV_INFO structure Returns a pointer to a CRYPT_KEY_PROV_INFO.</term>
            </item>
            <item>
            <term>CERT_KEY_SPEC_PROP_ID</term>
            <term>
            Data type for pvData: pointer to a DWORD Returns a DWORD value specifying the private key obtained from CERT_KEY_CONTEXT_PROP_ID
            property if it exists. Otherwise, if CERT_KEY_PROV_INFO_PROP_ID exists, it is the source of the dwKeySpec.
            </term>
            </item>
            <item>
            <term>CERT_MD5_HASH_PROP_ID</term>
            <term>Data type for pvData: pointer to a BYTE array Returns the MD5 hash. If the hash does not exist, it is computed using CryptHashCertificate.</term>
            </item>
            <item>
            <term>CERT_NEXT_UPDATE_LOCATION_PROP_ID</term>
            <term>
            Data type for pvData: pointer to a BYTE array Returns the ASN.1 encoded CERT_ALT_NAME_INFO structure.
            CERT_NEXT_UPDATE_LOCATION_PROP_ID is currently used only with CTLs.
            </term>
            </item>
            <item>
            <term>CERT_PVK_FILE_PROP_ID</term>
            <term>
            Data type for pvData: pointer to a BYTE array Returns a null-terminated Unicode, wide character string specifying the file name
            containing the private key associated with the certificate's public key.
            </term>
            </item>
            <item>
            <term>CERT_SHA1_HASH_PROP_ID</term>
            <term>
            Data type for pvData: pointer to a BYTE array Returns the SHA1 hash. If the hash does not exist, it is computed using CryptHashCertificate.
            </term>
            </item>
            <item>
            <term>CERT_SIGNATURE_HASH_PROP_ID</term>
            <term>
            Data type for pvData: pointer to a BYTE array Returns the signature hash. If the hash does not exist, it is computed with
            CryptHashToBeSigned. The length of the hash is 20 bytes for SHA and 16 for MD5.
            </term>
            </item>
            </list>
            <para>
            For all other property identifiers, pvData points to an array of bytes and not a CRYPT_DATA_BLOB as pointed to by the pvData
            parameter in CertSetCertificateContextProperty.
            </para>
            <para>
            For more information about each property identifier, see the documentation on the dwPropId parameter in
            CertSetCertificateContextProperty. CERT_SHA1_HASH_PROP_ID and CERT_NEXT_UPDATE_LOCATION_PROP_ID are the predefined properties of
            most interest.
            </para>
            </param>
            <param name="pvData">
            <para>
            A pointer to a buffer to receive the data as determined by dwPropId. Structures pointed to by members of a structure returned
            are also returned following the base structure. Therefore, the size contained in pcbData often exceed the size of the base structure.
            </para>
            <para>
            This parameter can be <c>NULL</c> to set the size of the information for memory allocation purposes. For more information, see
            Retrieving Data of Unknown Length.
            </para>
            </param>
            <param name="pcbData">
            <para>
            A pointer to a <c>DWORD</c> value specifying the size, in bytes, of the buffer pointed to by the pvData parameter. When the
            function returns, the <c>DWORD</c> value contains the number of bytes to be stored in the buffer.
            </para>
            <para>
            <c>Note</c> When processing the data returned in the buffer, applications must use the actual size of the data returned. The
            actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually
            specified large enough to ensure that the largest possible output data fits in the buffer.) On output, the variable pointed to
            by this parameter is updated to reflect the actual size of the data copied to the buffer.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>.</para>
            <para>
            Errors from the called function, CryptHashCertificate, can be propagated to this function. For extended error information, call GetLastError.
            </para>
            <para>Some possible error codes follow.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>CRYPT_E_NOT_FOUND</term>
            <term>The CTL does not have the specified property.</term>
            </item>
            <item>
            <term>ERROR_MORE_DATA</term>
            <term>
            If the buffer specified by the pvData parameter is not large enough to hold the returned data, the function sets the
            ERROR_MORE_DATA code and stores the required buffer size, in bytes, in the variable pointed to by pcbData.
            </term>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertSetCertificateContextProperty(Vanara.PInvoke.Crypt32.PCCERT_CONTEXT,Vanara.PInvoke.Crypt32.CertPropId,System.UInt32,System.IntPtr)">
            <summary>The <c>CertSetCertificateContextProperty</c> function sets an extended property for a specified certificate context.</summary>
            <param name="pCertContext">A pointer to a CERT_CONTEXT structure.</param>
            <param name="dwPropId">
            <para>
            The property to be set. The value of dwPropId determines the type and content of the pvData parameter. Currently defined
            identifiers and their related pvData types are as follows.
            </para>
            <para><c>Note</c> CRYPT_HASH_BLOB and CRYPT_DATA_BLOB are described in the CRYPT_INTEGER_BLOB topic.</para>
            <para>CERT_ACCESS_STATE_PROP_ID</para>
            <para>Data type of pvData: A pointer to a <c>DWORD</c> value.</para>
            <para>
            Returns a <c>DWORD</c> value that indicates whether write operations to the certificate are persisted. The <c>DWORD</c> value is
            not set if the certificate is in a memory store or in a registry-based store that is opened as read-only.
            </para>
            <para>CERT_AIA_URL_RETRIEVED_PROP_ID</para>
            <para>This identifier is reserved.</para>
            <para>CERT_ARCHIVED_KEY_HASH_PROP_ID</para>
            <para>Data type of pvData: A pointer to a CRYPT_HASH_BLOB structure.</para>
            <para>This property saves an encrypted key hash for the certificate context.</para>
            <para>CERT_ARCHIVED_PROP_ID</para>
            <para>Data type of pvData: A pointer to a CRYPT_DATA_BLOB structure.</para>
            <para>
            Indicates that the certificate is skipped during enumerations. A certificate with this property set is still found with explicit
            search operations, such as finding a certificate with a specific hash or a specific serial number. This property can be set to
            the empty BLOB, .
            </para>
            <para>CERT_AUTHORITY_INFO_ACCESS_PROP_ID</para>
            <para>This identifier is reserved.</para>
            <para>CERT_AUTO_ENROLL_PROP_ID</para>
            <para>Data type of pvData: A pointer to a CRYPT_DATA_BLOB structure.</para>
            <para>
            A property that is set after a certificate has been enrolled by using Auto Enroll. The CRYPT_DATA_BLOB structure pointed to by
            pvData includes a null-terminated Unicode name of the certificate type for which the certificate has been auto enrolled. Any
            subsequent calls to Auto Enroll for the certificate checks for this property to determine whether the certificate has been enrolled.
            </para>
            <para>CERT_AUTO_ENROLL_RETRY_PROP_ID</para>
            <para>This identifier is reserved.</para>
            <para>CERT_BACKED_UP_PROP_ID</para>
            <para>This identifier is reserved.</para>
            <para>CERT_CA_DISABLE_CRL_PROP_ID</para>
            <para>Data type of pvData: A pointer to a CRYPT_DATA_BLOB structure.</para>
            <para>
            Disables certificate revocation list (CRL) retrieval for certificates used by the certification authority (CA). If the CA
            certificate contains this property, it must also include the <c>CERT_CA_OCSP_AUTHORITY_INFO_ACCESS_PROP_ID</c> property.
            </para>
            <para>CERT_CA_OCSP_AUTHORITY_INFO_ACCESS_PROP_ID</para>
            <para>Data type of pvData: A pointer to a CRYPT_DATA_BLOB structure.</para>
            <para>
            Contains the list of online certificate status protocol (OCSP) URLs to use for certificates issued by the CA certificate. The
            array contents are the Abstract Syntax Notation One (ASN.1)-encoded bytes of an <c>X509_AUTHORITY_INFO_ACCESS</c> structure
            where <c>pszAccessMethod</c> is set to <c>szOID_PKIX_OCSP</c>.
            </para>
            <para>CERT_CROSS_CERT_DIST_POINTS_PROP_ID</para>
            <para>Data type of pvData: A pointer to a CRYPT_DATA_BLOB structure.</para>
            <para>
            Sets the location of the cross certificates. This value is only applicable to certificates and not to certificate revocation
            lists (CRLs) or certificate trust lists (CTLs). The CRYPT_DATA_BLOB structure contains an Abstract Syntax Notation One
            (ASN.1)-encoded CROSS_CERT_DIST_POINTS_INFO structure that is encoded by using the CryptEncodeObject function with a
            X509_CROSS_CERT_DIST_POINTS value for the lpszStuctType parameter.
            </para>
            <para>CERT_CTL_USAGE_PROP_ID</para>
            <para>Data type of pvData: A pointer to a CRYPT_DATA_BLOB structure.</para>
            <para>
            The CRYPT_DATA_BLOB structure contains an ASN.1-encoded CTL_USAGE structure. This structure is encoded by using the
            CryptEncodeObject function with the X509_ENHANCED_KEY_USAGE value set.
            </para>
            <para>CERT_DATE_STAMP_PROP_ID</para>
            <para>Data type of pvData: A pointer to a <c>FILETIME</c> structure.</para>
            <para>This property sets the time that the certificate was added to the store.</para>
            <para>CERT_DESCRIPTION_PROP_ID</para>
            <para>Data type of pvData: A pointer to a CRYPT_DATA_BLOB structure.</para>
            <para>
            A property that is set and displayed by the certificate UI. This property allows the user to describe the certificate's use.
            </para>
            <para>CERT_EFS_PROP_ID</para>
            <para>This identifier is reserved.</para>
            <para>CERT_ENHKEY_USAGE_PROP_ID</para>
            <para>Data type of pvData: A pointer to a CRYPT_DATA_BLOB structure.</para>
            <para>
            A property that indicates that the pvData parameter points to a CRYPT_DATA_BLOB structure that contains an ASN.1-encoded
            CERT_ENHKEY_USAGE structure. This structure is encoded by using the CryptEncodeObject function with the X509_ENHANCED_KEY_USAGE
            value set.
            </para>
            <para>CERT_ENROLLMENT_PROP_ID</para>
            <para>Data type of pvData: A pointer to a CRYPT_DATA_BLOB structure.</para>
            <para>
            Enrollment information of the pending request that contains RequestID, CADNSName, CAName, and DisplayName. The data format is
            defined as follows.
            </para>
            <list type="table">
            <listheader>
            <term>Bytes</term>
            <term>Contents</term>
            </listheader>
            <item>
            <term>First 4 bytes</term>
            <term>Pending request ID</term>
            </item>
            <item>
            <term>Next 4 bytes</term>
            <term>
            CADNSName size, in characters, including the terminating null character, followed by CADNSName string with terminating null character
            </term>
            </item>
            <item>
            <term>Next 4 bytes</term>
            <term>
            CAName size, in characters, including the terminating null character, followed by CAName string with terminating null character
            </term>
            </item>
            <item>
            <term>Next 4 bytes</term>
            <term>
            DisplayName size, in characters, including the terminating null character, followed by DisplayName string with terminating null character
            </term>
            </item>
            </list>
            <para>CERT_EXTENDED_ERROR_INFO_PROP_ID</para>
            <para>Data type of pvData: A pointer to a CRYPT_DATA_BLOB structure.</para>
            <para>This property sets a string that contains extended error information for the certificate context.</para>
            <para>CERT_FORTEZZA_DATA_PROP_ID</para>
            <para>This identifier is reserved.</para>
            <para>CERT_FRIENDLY_NAME_PROP_ID</para>
            <para>Data type of pvData: A pointer to a CRYPT_DATA_BLOB structure.</para>
            <para>The CRYPT_DATA_BLOB structure contains the display name of the certificate.</para>
            <para>CERT_HASH_PROP_ID</para>
            <para>Data type of pvData: A pointer to a CRYPT_DATA_BLOB structure.</para>
            <para>This property is implicitly set by a call to the CertGetCertificateContextProperty function.</para>
            <para>CERT_HCRYPTPROV_OR_NCRYPT_KEY_HANDLE_PROP_ID</para>
            <para>Data type of pvData: A pointer to an HCRYPTPROV_OR_NCRYPT_KEY_HANDLE data type.</para>
            <para>
            This property calls NCryptIsKeyHandle to determine whether this is an <c>NCRYPT_KEY_HANDLE</c>. For an <c>NCRYPT_KEY_HANDLE</c>,
            sets <c>CERT_NCRYPT_KEY_HANDLE_PROP_ID</c>; otherwise, it sets <c>CERT_KEY_PROV_HANDLE_PROP_ID</c>.
            </para>
            <para>CERT_HCRYPTPROV_TRANSFER_PROP_ID</para>
            <para>Sets the handle of the CAPI key associated with the certificate.</para>
            <para>CERT_IE30_RESERVED_PROP_ID</para>
            <para>This identifier is reserved.</para>
            <para>CERT_ISSUER_PUBLIC_KEY_MD5_HASH_PROP_ID</para>
            <para>Data type of pvData: A pointer to a CRYPT_DATA_BLOB structure.</para>
            <para>This property sets the MD5 hash of the public key associated with the private key used to sign this certificate.</para>
            <para>CERT_ISSUER_SERIAL_NUMBER_MD5_HASH_PROP_ID</para>
            <para>Data type of pvData: A pointer to a CRYPT_DATA_BLOB structure.</para>
            <para>The CRYPT_DATA_BLOB structure contains the MD5 hash of the issuer name and serial number from this certificate.</para>
            <para>CERT_KEY_CONTEXT_PROP_ID</para>
            <para>Data type of pvData: A pointer to a CERT_KEY_CONTEXT structure.</para>
            <para>
            The structure specifies the certificate's private key. It contains both the HCRYPTPROV and key specification for the private
            key. For more information about the <c>hCryptProv</c> member and dwFlags settings, see CERT_KEY_PROV_HANDLE_PROP_ID, later in
            this topic.
            </para>
            <para>
            <c>Note</c> More CERT_KEY_CONTEXT structure members can be added for this property. If so, the <c>cbSize</c> member value will
            be adjusted accordingly. The <c>cbSize</c> member must be set to the size of the <c>CERT_KEY_CONTEXT</c> structure.
            </para>
            <para>CERT_KEY_IDENTIFIER_PROP_ID</para>
            <para>Data type of pvData: A pointer to a CRYPT_DATA_BLOB structure.</para>
            <para>This property is typically implicitly set by a call to the CertGetCertificateContextProperty function.</para>
            <para>CERT_KEY_PROV_HANDLE_PROP_ID</para>
            <para>Data type of pvData: A HCRYPTPROV value.</para>
            <para>
            The HCRYPTPROV handle for the certificate's private key is set. The <c>hCryptProv</c> member of the CERT_KEY_CONTEXT structure
            is updated if it exists. If it does not exist, it is created with <c>dwKeySpec</c> and initialized by
            CERT_KEY_PROV_INFO_PROP_ID. If CERT_STORE_NO_CRYPT_RELEASE_FLAG is not set, the <c>hCryptProv</c> value is implicitly released
            either when the property is set to <c>NULL</c> or on the final freeing of the CERT_CONTEXT structure.
            </para>
            <para>CERT_KEY_PROV_INFO_PROP_ID</para>
            <para>Data type of pvData: A pointer to a CRYPT_KEY_PROV_INFO structure.</para>
            <para>The structure specifies the certificate's private key.</para>
            <para>CERT_KEY_SPEC_PROP_ID</para>
            <para>Data type of pvData: A pointer to a <c>DWORD</c> value.</para>
            <para>
            The <c>DWORD</c> value that specifies the private key. The <c>dwKeySpec</c> member of the CERT_KEY_CONTEXT structure is updated
            if it exists. If it does not, it is created with <c>hCryptProv</c> set to zero.
            </para>
            <para>CERT_MD5_HASH_PROP_ID</para>
            <para>Data type of pvData: A pointer to a CRYPT_HASH_BLOB structure.</para>
            <para>This property is implicitly set by a call to the CertGetCertificateContextProperty function.</para>
            <para>CERT_NCRYPT_KEY_HANDLE_PROP_ID</para>
            <para>Data type of pvData: A pointer to an <c>NCRYPT_KEY_HANDLE</c> data type.</para>
            <para>This property sets the <c>NCRYPT_KEY_HANDLE</c> for the certificate private key and sets the dwKeySpec to <c>CERT_NCRYPT_KEY_SPEC</c>.</para>
            <para>CERT_NCRYPT_KEY_HANDLE_TRANSFER_PROP_ID</para>
            <para>Sets the handle of the CNG key associated with the certificate.</para>
            <para>CERT_NEW_KEY_PROP_ID</para>
            <para>This identifier is reserved.</para>
            <para>CERT_NEXT_UPDATE_LOCATION_PROP_ID</para>
            <para>Data type of pvData: A pointer to a CRYPT_DATA_BLOB structure.</para>
            <para>
            The CRYPT_DATA_BLOB structure contains an ASN.1-encoded CERT_ALT_NAME_INFO structure that is encoded by using the
            CryptEncodeObject function with the X509_ALTERNATE_NAME value set.
            </para>
            <para>CERT_NEXT_UPDATE_LOCATION_PROP_ID is currently used only with CTLs.</para>
            <para>CERT_NO_AUTO_EXPIRE_CHECK_PROP_ID</para>
            <para>This identifier is reserved.</para>
            <para>CERT_OCSP_CACHE_PREFIX_PROP_ID</para>
            <para>This identifier is reserved.</para>
            <para>CERT_OCSP_RESPONSE_PROP_ID</para>
            <para>Data type of pvData: A pointer to a CRYPT_DATA_BLOB structure.</para>
            <para>
            This property sets the encoded online certificate status protocol (OCSP) response from a CERT_SERVER_OCSP_RESPONSE_CONTEXT for
            this certificate.
            </para>
            <para>CERT_PUB_KEY_CNG_ALG_BIT_LENGTH_PROP_ID</para>
            <para>Data type of pvData: Pointer to a CRYPT_DATA_BLOB structure.</para>
            <para>This property is implicitly set by calling the CertGetCertificateContextProperty function.</para>
            <para>
            <c>Windows Server 2008 R2, Windows 7, Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:</c> This
            identifier is not supported.
            </para>
            <para>CERT_PUBKEY_ALG_PARA_PROP_ID</para>
            <para>Data type of pvData: A pointer to a CRYPT_DATA_BLOB structure.</para>
            <para>
            This property is used with public keys that support algorithm parameter inheritance. The data BLOB contains the ASN.1-encoded
            PublicKey Algorithm parameters. For DSS, these are parameters encoded by using the CryptEncodeObject function. This is used only
            if CMS_PKCS7 is defined.
            </para>
            <para>CERT_PUBKEY_HASH_RESERVED_PROP_ID</para>
            <para>This identifier is reserved.</para>
            <para>CERT_PVK_FILE_PROP_ID</para>
            <para>Data type of pvData: A pointer to a CRYPT_DATA_BLOB structure.</para>
            <para>
            The CRYPT_DATA_BLOB structure specifies the name of a file that contains the private key associated with the certificate's
            public key. Inside the <c>CRYPT_DATA_BLOB</c> structure, the <c>pbData</c> member is a pointer to a null-terminated Unicode
            wide-character string, and the <c>cbData</c> member indicates the length of the string.
            </para>
            <para>CERT_RENEWAL_PROP_ID</para>
            <para>Data type of pvData: A pointer to a CRYPT_DATA_BLOB structure.</para>
            <para>This property specifies the hash of the renewed certificate.</para>
            <para>CERT_REQUEST_ORIGINATOR_PROP_ID</para>
            <para>Data type of pvData: A pointer to a CRYPT_DATA_BLOB structure.</para>
            <para>
            The CRYPT_DATA_BLOB structure contains a null-terminated Unicode string that contains the DNS computer name for the origination
            of the certificate context request.
            </para>
            <para>CERT_ROOT_PROGRAM_CERT_POLICIES_PROP_ID</para>
            <para>Data type of pvData: A pointer to a CRYPT_DATA_BLOB structure.</para>
            <para>
            Returns a pointer to an encoded CERT_POLICIES_INFO structure that contains the application policies of the root certificate for
            the context. This property can be decoded by using the CryptDecodeObject function with the lpszStructType parameter set to
            <c>X509_CERT_POLICIES</c> and the dwCertEncodingType parameter set to a combination of <c>X509_ASN_ENCODING</c> bitwise <c>OR</c><c>PKCS_7_ASN_ENCODING</c>.
            </para>
            <para>CERT_ROOT_PROGRAM_NAME_CONSTRAINTS_PROP_ID</para>
            <para>This identifier is reserved.</para>
            <para>CERT_SIGN_HASH_CNG_ALG_PROP_ID</para>
            <para>Data type of pvData: Pointer to a CRYPT_DATA_BLOB structure.</para>
            <para>This property is implicitly set by calling the CertGetCertificateContextProperty function.</para>
            <para>
            <c>Windows Server 2008 R2, Windows 7, Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:</c> This
            identifier is not supported.
            </para>
            <para>CERT_SHA1_HASH_PROP_ID</para>
            <para>Data type of pvData: A pointer to a CRYPT_HASH_BLOB structure.</para>
            <para>This property is implicitly set by a call to the CertGetCertificateContextProperty function.</para>
            <para>CERT_SIGNATURE_HASH_PROP_ID</para>
            <para>Data type of pvData: A pointer to a CRYPT_HASH_BLOB structure.</para>
            <para>
            If a signature hash does not exist, it is computed by using the CryptHashToBeSigned function. pvData points to an existing or
            computed hash. Usually, the length of the hash is 20 bytes for SHA and 16 for MD5.
            </para>
            <para>CERT_SMART_CARD_DATA_PROP_ID</para>
            <para>Data type of pvData: A pointer to a CRYPT_DATA_BLOB structure.</para>
            <para>This property sets the smart card data property of a smart card certificate context.</para>
            <para>CERT_SMART_CARD_ROOT_INFO_PROP_ID</para>
            <para>Data type of pvData: A pointer to a CRYPT_DATA_BLOB structure.</para>
            <para>This property sets the information property of a smart card root certificate context.</para>
            <para>CERT_SOURCE_LOCATION_PROP_ID</para>
            <para>This identifier is reserved.</para>
            <para>CERT_SOURCE_URL_PROP_ID</para>
            <para>This identifier is reserved.</para>
            <para>CERT_SUBJECT_DISABLE_CRL_PROP_ID</para>
            <para>This identifier is reserved.</para>
            <para>CERT_SUBJECT_INFO_ACCESS_PROP_ID</para>
            <para>Data type of pvData: A pointer to a CRYPT_DATA_BLOB structure.</para>
            <para>
            This property sets the subject information access extension of the certificate context as an encoded CERT_SUBJECT_INFO_ACCESS structure.
            </para>
            <para>CERT_SUBJECT_NAME_MD5_HASH_PROP_ID</para>
            <para>Data type of pvData: A pointer to a CRYPT_DATA_BLOB structure.</para>
            <para>Returns an MD5 hash of the encoded subject name of the certificate context.</para>
            <para>CERT_SUBJECT_OCSP_AUTHORITY_INFO_ACCESS_PROP_ID</para>
            <para>This identifier is reserved.</para>
            <para>CERT_SUBJECT_PUB_KEY_BIT_LENGTH_PROP_ID</para>
            <para>Data type of pvData: Pointer to a CRYPT_DATA_BLOB structure.</para>
            <para>This property is implicitly set by calling the CertGetCertificateContextProperty function.</para>
            <para>
            <c>Windows Server 2008 R2, Windows 7, Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:</c> This
            identifier is not supported.
            </para>
            <para>CERT_SUBJECT_PUBLIC_KEY_MD5_HASH_PROP_ID</para>
            <para>Data type of pvData: A pointer to a CRYPT_DATA_BLOB structure.</para>
            <para>This property sets the MD5 hash of this certificate's public key.</para>
            <para>pvData is a pointer to a CRYPT_DATA_BLOB structure.</para>
            <para>
            The user can define additional dwPropId types by using <c>DWORD</c> values from <c>CERT_FIRST_USER_PROP_ID</c> to
            <c>CERT_LAST_USER_PROP_ID</c>. For all user-defined dwPropId types, pvData points to an encoded CRYPT_DATA_BLOB structure.
            </para>
            </param>
            <param name="dwFlags">
            <para>
            CERT_STORE_NO_CRYPT_RELEASE_FLAG can be set for the CERT_KEY_PROV_HANDLE_PROP_ID or CERT_KEY_CONTEXT_PROP_ID dwPropId properties.
            </para>
            <para>
            If the CERT_SET_PROPERTY_IGNORE_PERSIST_ERROR_FLAG value is set, any provider-write errors are ignored and the cached context's
            properties are always set.
            </para>
            <para>If CERT_SET_PROPERTY_INHIBIT_PERSIST_FLAG is set, any context property set is not persisted.</para>
            </param>
            <param name="pvData">
            <para>A pointer to a data type determined by the value of dwPropId.</para>
            <para><c>Note</c> For any dwPropId, setting pvData to <c>NULL</c> deletes the property.</para>
            </param>
            <returns>
            <para>If the function succeeds, the function returns <c>TRUE</c>.</para>
            <para>
            If the function fails, the function returns <c>FALSE</c>. For extended error information, call GetLastError. One possible error
            code is the following.
            </para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>E_INVALIDARG</term>
            <term>
            The property is not valid. The identifier specified was greater than 0x0000FFFF, or, for the CERT_KEY_CONTEXT_PROP_ID property,
            a cbSize member that is not valid was specified in the CERT_KEY_CONTEXT structure.
            </term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>If a property already exists, its old value is replaced.</para>
            <para>
            Your code can use a macro to evaluate the class of hash for a certificate context. The Wincrypt.h header defines the following
            macros for this purpose. These macros are used internally by the <c>CertSetCertificateContextProperty</c> function.
            </para>
            <para>
            <c>IS_CERT_HASH_PROP_ID(X)</c><c>IS_PUBKEY_HASH_PROP_ID(X)</c><c>IS_CHAIN_HASH_PROP_ID(X)</c> Each macro takes the dwPropId (X)
            value as input and evaluates to a Boolean value. The following table shows the dwPropId values that evaluate to <c>TRUE</c> for
            each macro.
            </para>
            <list type="table">
            <listheader>
            <term>Macro</term>
            <term>Evaluates to TRUE if dwPropId is</term>
            </listheader>
            <item>
            <term>IS_CERT_HASH_PROP_ID(dwPropId)</term>
            <term>CERT_SHA1_HASH_PROP_ID, CERT_MD5_HASH_PROP_ID, or CERT_SIGNATURE_HASH_PROP_ID</term>
            </item>
            <item>
            <term>IS_PUBKEY_HASH_PROP_ID(dwPropId)</term>
            <term>CERT_ISSUER_PUBLIC_KEY_MD5_HASH_PROP_ID or CERT_SUBJECT_PUBLIC_KEY_MD5_HASH_PROP_ID</term>
            </item>
            <item>
            <term>IS_CHAIN_HASH_PROP_ID(dwPropId)</term>
            <term>
            CERT_ISSUER_PUBLIC_KEY_MD5_HASH_PROP_ID, CERT_SUBJECT_PUBLIC_KEY_MD5_HASH_PROP_ID, CERT_ISSUER_SERIAL_NUMBER_MD5_HASH_PROP_ID,
            or CERT_SUBJECT_NAME_MD5_HASH_PROP_ID
            </term>
            </item>
            </list>
            <para>
            The <c>IS_STRONG_SIGN_PROP_ID(x)</c> macro evaluates to <c>TRUE</c> if the <c>CERT_SIGN_HASH_CNG_ALG_PROP_ID</c>,
            <c>CERT_SUBJECT_PUB_KEY_BIT_LENGTH_PROP_ID</c>, or <c>CERT_PUB_KEY_CNG_ALG_BIT_LENGTH_PROP_ID</c> properties are set in the
            dwPropId parameter.
            </para>
            <para>Examples</para>
            <para>For an example that uses this function, see Example C Program: Getting and Setting Certificate Properties.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertSetCRLContextProperty(Vanara.PInvoke.Crypt32.PCCRL_CONTEXT,Vanara.PInvoke.Crypt32.CertPropId,System.UInt32,System.IntPtr)">
            <summary>
            The <c>CertSetCRLContextProperty</c> function sets an extended property for the specified certificate revocation list (CRL) context.
            </summary>
            <param name="pCrlContext">A pointer to the CRL_CONTEXT structure.</param>
            <param name="dwPropId">
            <para>
            Identifies the property to be set. The value of dwPropId determines the type and content of the pvData parameter. Currently
            defined identifiers and the data type to be returned in pvData are listed in the following table.
            </para>
            <para>Usually, only the following properties are set:</para>
            <list type="bullet">
            <item>
            <term>CERT_HASH_PROP_ID</term>
            </item>
            <item>
            <term>CERT_SHA1_HASH_PROP_ID</term>
            </item>
            <item>
            <term>CERT_MD5_HASH_PROP_ID</term>
            </item>
            <item>
            <term>CERT_SIGNATURE_HASH_PROP_ID</term>
            </item>
            </list>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_ACCESS_STATE_PROP_ID</term>
            <term>
            Data type for pvData: pointer to a DWORD Sets a DWORD value indicating whether write operations to the certificate are
            persisted. The DWORD value is not set if the certificate is in a memory store or in a registry-based store that is opened as read-only.
            </term>
            </item>
            <item>
            <term>CERT_ARCHIVED_PROP_ID</term>
            <term>
            Data type for pvData: NULL Indicates the certificate is skipped during enumerations. A certificate with this property set is
            found with explicit search operations, such as those used to find a certificate with a specific hash or a serial number. No data
            in pvData is associated with this property.
            </term>
            </item>
            <item>
            <term>CERT_AUTO_ENROLL_PROP_ID</term>
            <term>
            Data type for pvData: pointer to a BYTE array Sets a null-terminated Unicode string naming the certificate type for which the
            certificate has been auto enrolled.
            </term>
            </item>
            <item>
            <term>CERT_CTL_USAGE_PROP_ID</term>
            <term>
            Data type for pvData: pointer to a BYTE array Sets an array of bytes containing an Abstract Syntax Notation One (ASN.1) encoded
            CTL_USAGE structure.
            </term>
            </item>
            <item>
            <term>CERT_DESCRIPTION_PROP_ID</term>
            <term>
            Data type for pvData: pointer to a BYTE array Sets the property displayed by the certificate UI. This property allows the user
            to describe the certificate's use.
            </term>
            </item>
            <item>
            <term>CERT_ENHKEY_USAGE_PROP_ID</term>
            <term>Data type for pvData: Sets an array of bytes containing an ASN.1 encoded CERT_ENHKEY_USAGE structure.</term>
            </item>
            <item>
            <term>CERT_FRIENDLY_NAME_PROP_ID</term>
            <term>
            Data type for pvData: pointer to a BYTE array Sets a null-terminated Unicode character string that contains the display name for
            the CRL.
            </term>
            </item>
            <item>
            <term>CERT_ISSUER_CHAIN_PUB_KEY_CNG_ALG_BIT_LENGTH_PROP_ID</term>
            <term>
            Data type for pvData: Pointer to a CRYPT_DATA_BLOB structure. Sets a string containing a set of
            L"&lt;PUBKEY&gt;/&lt;BITLENGTH&gt;" public key algorithm and bit length pairs. The semicolon, L";", is used as the delimiter.
            The &lt;PUBKEY&gt; value identifies the CNG public key algorithm. The following algorithms are supported: A
            &lt;PUBKEY&gt;/&lt;BITLENGTH&gt; pair is set for each certificate in the CRL issuer chain excluding the leaf. This property can
            be set when an OCSP response with an independent signer chain is converted to a CRL. The following is an example: : L"RSA/2048;RSA/4096"
            </term>
            </item>
            <item>
            <term>CERT_ISSUER_CHAIN_SIGN_HASH_CNG_ALG_PROP_ID</term>
            <term>
            Data type for pvData: Pointer to a CRYPT_DATA_BLOB structure. Sets a string that contains a set of
            L"&lt;SIGNATURE&gt;/&lt;HASH&gt;" algorithm pairs. The semicolon, L";", is used as the delimiter between pairs. This property is
            set only when an OCSP response is converted to a CRL. For a delegated OCSP signer certificate, only the algorithm pair for the
            signer certificate is returned. For an independent OCSP signer certificate chain, an algorithm pair is returned for each
            certificate in the chain excluding the root. The &lt;SIGNATURE&gt; value identifies the CNG public key algorithm. The following
            algorithms are supported: The &lt;HASH&gt; value identifies the CNG hash algorithm. The following algorithms are supported: The
            following is an example: This property is explicitly set by the verify revocation functions.
            </term>
            </item>
            <item>
            <term>CERT_ISSUER_PUB_KEY_BIT_LENGTH_PROP_ID</term>
            <term>
            Data type for pvData: Pointer to a CRYPT_DATA_BLOB structure. Sets the length, in bits, of the public key in the CRL issuer
            certificate. This property is also applicable to an OCSP that has been converted to a CRL. This property is explicitly set by
            the verify revocation functions. Windows 8 and Windows Server 2012: Support for this property begins.
            </term>
            </item>
            <item>
            <term>CERT_KEY_CONTEXT_PROP_ID</term>
            <term>Data type for pvData: pointer to a CERT_KEY_CONTEXT Sets a CERT_KEY_CONTEXT structure.</term>
            </item>
            <item>
            <term>CERT_KEY_IDENTIFIER_PROP_ID</term>
            <term>Data type for pvData: pointer to a BYTE array</term>
            </item>
            <item>
            <term>CERT_KEY_PROV_HANDLE_PROP_ID</term>
            <term>Data type for pvData: pointer to an HCRYPTPROV Sets the provider handle obtained from the CERT_KEY_CONTEXT_PROP_ID.</term>
            </item>
            <item>
            <term>CERT_KEY_PROV_INFO_PROP_ID</term>
            <term>Data type for pvData: pointer to a CRYPT_KEY_PROV_INFO Sets a pointer to a CRYPT_KEY_PROV_INFO structure.</term>
            </item>
            <item>
            <term>CERT_KEY_SPEC_PROP_ID</term>
            <term>
            Data type for pvData: pointer to a DWORD Sets a DWORD value specifying the private key obtained from CERT_KEY_CONTEXT_PROP_ID
            property if it exists. Otherwise, if CERT_KEY_PROV_INFO_PROP_ID exists, it is the source of the dwKeySpec.
            </term>
            </item>
            <item>
            <term>CERT_MD5_HASH_PROP_ID</term>
            <term>
            Data type for pvData: pointer to a BYTE array Sets the MD5 hash. You can compute the hash by using the CryptHashCertificate function.
            </term>
            </item>
            <item>
            <term>CERT_NEXT_UPDATE_LOCATION_PROP_ID</term>
            <term>Data type for pvData: pointer to a BYTE array Sets the ASN.1 encoded CERT_ALT_NAME_INFO structure on a CTL.</term>
            </item>
            <item>
            <term>CERT_PVK_FILE_PROP_ID</term>
            <term>
            Data type for pvData: pointer to a BYTE array Sets a null-terminated Unicode, wide character string specifying the name of the
            file that contains the private key associated with the certificate's public key.
            </term>
            </item>
            <item>
            <term>CERT_SHA1_HASH_PROP_ID</term>
            <term>Data type for pvData: pointer to a BYTE array Sets the SHA1 hash. You can compute the hash by using CryptHashCertificate.</term>
            </item>
            <item>
            <term>CERT_SIGN_HASH_CNG_ALG_PROP_ID</term>
            <term>
            Data type of pvData: Pointer to a CRYPT_DATA_BLOB structure. Sets the L”&lt;SIGNATURE&gt;/&lt;HASH&gt;” string representing the
            certificate signature. The &lt;SIGNATURE&gt; value identifies the CNG public key algorithm. The following algorithms are
            supported: The &lt;HASH&gt; value identifies the CNG hash algorithm. The following algorithms are supported: The following are
            common examples: This property is also applicable to an OCSP response that has been converted to a CRL. This property is
            explicitly set by the verify revocation functions. Windows 8 and Windows Server 2012: Support for this property begins.
            </term>
            </item>
            <item>
            <term>CERT_SIGNATURE_HASH_PROP_ID</term>
            <term>
            Data type for pvData: pointer to a BYTE array Sets the signature hash. If the hash does not exist, it is computed with
            CryptHashToBeSigned. The length of the hash is 20 bytes for SHA and 16 for MD5.
            </term>
            </item>
            </list>
            <para>
            The user can define additional dwPropId types by using <c>DWORD</c> values from CERT_FIRST_USER_PROP_ID to
            CERT_LAST_USER_PROP_ID. For all user-defined dwPropId types, pvData points to an encoded CRYPT_DATA_BLOB.
            </para>
            <para>For all the other property identifiers, pvData points to an encoded CRYPT_DATA_BLOB structure.</para>
            </param>
            <param name="dwFlags">
            <para>
            CERT_STORE_NO_CRYPT_RELEASE_FLAG can be set for the CERT_KEY_PROV_HANDLE_PROP_ID or CERT_KEY_CONTEXT_PROP_ID dwPropId properties.
            </para>
            <para>
            If the CERT_SET_PROPERTY_IGNORE_PERSIST_ERROR_FLAG value is set, any provider-write errors are ignored and the cached context's
            properties are always set.
            </para>
            <para>If the CERT_SET_PROPERTY_INHIBIT_PERSIST_FLAG is set, any property set is not persisted.</para>
            </param>
            <param name="pvData">
            <para>A pointer to a data type that is determined by the value passed in dwPropId.</para>
            <para><c>Note</c> For any dwPropId, setting pvData to <c>NULL</c> deletes the property.</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>
            If the function fails, the return value is <c>FALSE</c>. For extended error information, call GetLastError. One possible error
            code is the following.
            </para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>E_INVALIDARG</term>
            <term>
            The property is not valid. The identifier specified was greater than 0x0000FFFF, or, for the CERT_KEY_CONTEXT_PROP_ID property,
            a cbSize member that is not valid was specified in the CERT_KEY_CONTEXT structure.
            </term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>If a property already exists, its old value is replaced.</para>
            <para>Examples</para>
            <para>For an example that uses this function, see Example C Program: Getting and Setting Certificate Properties.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertSetCTLContextProperty(Vanara.PInvoke.Crypt32.PCCTL_CONTEXT,Vanara.PInvoke.Crypt32.CertPropId,System.UInt32,System.IntPtr)">
            <summary>
            The <c>CertSetCTLContextProperty</c> function sets an extended property for the specified certificate trust list (CTL) context.
            </summary>
            <param name="pCtlContext">A pointer to the CTL_CONTEXT structure.</param>
            <param name="dwPropId">
            <para>
            Identifies the property to be set. The value of dwPropId determines the type and content of the pvData parameter. Currently
            defined identifiers and their related pvData types are as follows.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_ARCHIVED_PROP_ID</term>
            <term>
            Data type of pvData: NULL Indicates the certificate is skipped during enumerations. A certificate with this property set is
            still found with explicit search operations—such as finding a certificate with a specific hash or a specific serial number.
            </term>
            </item>
            <item>
            <term>CERT_AUTO_ENROLL_PROP_ID</term>
            <term>
            Data type of pvData: pointer to a CRYPT_DATA_BLOB Property set after a certificate has been enrolled using Auto Enroll. The
            CRYPT_DATA_BLOB structure pointed to by pvData includes a null-terminated, Unicode name of the certificate type for which the
            certificates has been auto enrolled. Any subsequent calls to Auto Enroll for the certificate checks for this property to
            determine whether the certificate has been enrolled.
            </term>
            </item>
            <item>
            <term>CERT_CTL_USAGE_PROP_ID</term>
            <term>
            Data type of pvData: pointer to a CRYPT_DATA_BLOB pvData points to a CRYPT_DATA_BLOB structure containing an Abstract Syntax
            Notation One (ASN.1) encoded CTL_USAGE structure. This structure was encoded using CryptEncodeObject with
            X509_ENHANCED_KEY_USAGE value set.
            </term>
            </item>
            <item>
            <term>CERT_DESCRIPTION_PROP_ID</term>
            <term>
            Data type of pvData: pointer to a CRYPT_DATA_BLOB Property set and displayed by the certificate UI. This property allows the
            user to describe the certificate's use.
            </term>
            </item>
            <item>
            <term>CERT_ENHKEY_USAGE_PROP_ID</term>
            <term>
            Data type of pvData: pointer to a CRYPT_DATA_BLOB The CRYPT_DATA_BLOB structure containing an ASN.1 encoded CERT_ENHKEY_USAGE
            structure. This structure was encoded using CryptEncodeObject with X509_ENHANCED_KEY_USAGE value set.
            </term>
            </item>
            <item>
            <term>CERT_FRIENDLY_NAME_PROP_ID</term>
            <term>Data type of pvData: pointer to a CRYPT_DATA_BLOB The CRYPT_DATA_BLOB structure specifies the display name of the certificate.</term>
            </item>
            <item>
            <term>CERT_HASH_PROP_ID</term>
            <term>Data type of pvData: pointer to a CRYPT_HASH_BLOB This property is implicitly set by a call to CertGetCertificateContextProperty.</term>
            </item>
            <item>
            <term>CERT_KEY_CONTEXT_PROP_ID</term>
            <term>
            Data type of pvData: pointer to a CERT_KEY_CONTEXT The CERT_KEY_CONTEXT structure contains both the HCRYPTPROV value and the key
            specification for the private key. For more information about the hCryptProv member and dwFlags settings, see
            CERT_KEY_PROV_HANDLE_PROP_ID, following. Note that more CERT_KEY_CONTEXT structure members can be added for this property. If
            so, the cbSize member value will be adjusted accordingly. The cbSize member must be set to the size of the CERT_KEY_CONTEXT structure
            </term>
            </item>
            <item>
            <term>CERT_KEY_IDENTIFIER_PROP_ID</term>
            <term>Data type of pvData: pointer to a CRYPT_DATA_BLOB This property is typically implicitly set by a call to CertGetCertificateContextProperty.</term>
            </item>
            <item>
            <term>CERT_KEY_PROV_HANDLE_PROP_ID</term>
            <term>
            Data type of pvData: pointer to a HCRYPTPROV An HCRYPTPROV handle for the certificate's private key is passed. The hCryptProv
            member of the CERT_KEY_CONTEXT structure is updated if it exists. If it does not exist, it is created with dwKeySpec initialized
            by CERT_KEY_PROV_INFO_PROP_ID. If CERT_STORE_NO_CRYPT_RELEASE_FLAG is not set, the hCryptProv value is implicitly released
            either when the property is set to NULL or on the final freeing of the CERT_CONTEXT structure.
            </term>
            </item>
            <item>
            <term>CERT_KEY_PROV_INFO_PROP_ID</term>
            <term>
            Data type of pvData: pointer to a CRYPT_KEY_PROV_INFO The CRYPT_KEY_PROV_INFO structure specifies the certificate's private key.
            </term>
            </item>
            <item>
            <term>CERT_KEY_SPEC_PROP_ID</term>
            <term>
            Data type of pvData: pointer to a DWORD The DWORD value specifies the private key. The dwKeySpec member of the CERT_KEY_CONTEXT
            structure is updated if it exists. If it does not, it is created with hCryptProv set to zero.
            </term>
            </item>
            <item>
            <term>CERT_MD5_HASH_PROP_ID</term>
            <term>Data type of pvData: pointer to a CRYPT_HASH_BLOB This property is implicitly set by a call to CertGetCertificateContextProperty.</term>
            </item>
            <item>
            <term>CERT_NEXT_UPDATE_LOCATION_PROP_ID</term>
            <term>
            Data type of pvData: pointer to a CRYPT_DATA_BLOB The CRYPT_DATA_BLOB structure contains an ASN.1 encoded CERT_ALT_NAME_INFO
            structure encoded using CryptEncodeObject with the X509_ALTERNATE_NAME value set. CERT_NEXT_UPDATE_LOCATION_PROP_ID is currently
            used only with CTLs.
            </term>
            </item>
            <item>
            <term>CERT_PVK_FILE_PROP_ID</term>
            <term>
            Data type of pvData: pointer to a CRYPT_DATA_BLOB The CRYPT_DATA_BLOB structure specifies the name of a file containing the
            private key associated with the certificate's public key. Inside the CRYPT_DATA_BLOB structure, the pbData member is a pointer
            to a null-terminated Unicode, wide-character string, and the cbData member indicates the length of the string.
            </term>
            </item>
            <item>
            <term>CERT_SHA1_HASH_PROP_ID</term>
            <term>Data type of pvData: pointer to a CRYPT_HASH_BLOB This property is implicitly set by a call to CertGetCertificateContextProperty.</term>
            </item>
            <item>
            <term>CERT_SIGNATURE_HASH_PROP_ID CRYPT_HASH_BLOB</term>
            <term>
            Data type of pvData: pointer to a CRYPT_HASH_BLOB If a signature hash does not exist, it is computed with CryptHashToBeSigned.
            pvData points to an existing or computed hash. Usually, the length of the hash is 20 bytes for SHA and 16 for MD5.
            </term>
            </item>
            </list>
            <para>Typically, only the CERT_NEXT_UPDATE_LOCATION_PROP_ID property is set.</para>
            <para>
            Additional dwPropId types can be defined by the user using <c>DWORD</c> values from CERT_FIRST_USER_PROP_ID to
            CERT_LAST_USER_PROP_ID. For all user-defined dwPropId types, pvData points to an encoded CRYPT_DATA_BLOB structure.
            </para>
            </param>
            <param name="dwFlags">
            <para>
            CERT_STORE_NO_CRYPT_RELEASE_FLAG can be set for the CERT_KEY_PROV_HANDLE_PROP_ID or CERT_KEY_CONTEXT_PROP_ID dwPropId properties.
            </para>
            <para>
            If the CERT_SET_PROPERTY_IGNORE_PERSIST_ERROR_FLAG value is set, any provider-write errors are ignored and the cached context's
            properties are always set.
            </para>
            <para>If CERT_SET_PROPERTY_INHIBIT_PERSIST_FLAG is set, any property set is not persisted.</para>
            </param>
            <param name="pvData">
            <para>A pointer to a data type that is determined by the value passed in dwPropId.</para>
            <para><c>Note</c> For any dwPropId, setting pvData to <c>NULL</c> deletes the property.</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>
            If the function fails, the return value is <c>FALSE</c>. For extended error information, call GetLastError. One possible error
            code is the following.
            </para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>E_INVALIDARG</term>
            <term>Invalid property identifier. For details, see CertSetCertificateContextProperty.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>If a property already exists, its old value is replaced.</para>
            <para>Examples</para>
            <para>See Example C Program: Getting and Setting Certificate Properties.</para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CryptProviderType">
            <summary>Well-known provider types.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptProviderType.PROV_RSA_FULL">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptProviderType.PROV_RSA_SIG">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptProviderType.PROV_DSS">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptProviderType.PROV_FORTEZZA">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptProviderType.PROV_MS_EXCHANGE">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptProviderType.PROV_SSL">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptProviderType.PROV_RSA_SCHANNEL">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptProviderType.PROV_DSS_DH">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptProviderType.PROV_EC_ECDSA_SIG">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptProviderType.PROV_EC_ECNRA_SIG">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptProviderType.PROV_EC_ECDSA_FULL">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptProviderType.PROV_EC_ECNRA_FULL">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptProviderType.PROV_DH_SCHANNEL">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptProviderType.PROV_SPYRUS_LYNKS">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptProviderType.PROV_RNG">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptProviderType.PROV_INTEL_SEC">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptProviderType.PROV_REPLACE_OWF">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptProviderType.PROV_RSA_AES">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CertStoreVerification">
            <summary>Enable verification checks on the returned CRL.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreVerification.CERT_STORE_SIGNATURE_FLAG">
            <summary>Uses the public key in the issuer's certificate to verify the signature on the returned CRL.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreVerification.CERT_STORE_TIME_VALIDITY_FLAG">
            <summary>Gets the current time and verifies that it is within the time between the CRL's ThisUpdate and NextUpdate.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreVerification.CERT_STORE_REVOCATION_FLAG">
            <summary>Checks whether the subject certificate is on the issuer's revocation list.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreVerification.CERT_STORE_NO_CRL_FLAG">
            <summary>Indicates no matching CRL was found.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreVerification.CERT_STORE_NO_ISSUER_FLAG">
            <summary>Indicates no issuer certificate was found.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreVerification.CERT_STORE_BASE_CRL_FLAG">
            <summary>Gets a base CRL.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreVerification.CERT_STORE_DELTA_CRL_FLAG">
            <summary>Gets a delta CRL.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CrlFindFlags">
            <summary>Flags that can be used to do additional filtering.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CrlFindFlags.CRL_FIND_ISSUED_BY_AKI_FLAG">
            <summary>
            Checks for a CRL that has an Authority Key Identifier (AKI) extension. If the CRL has an AKI, only a CRL whose AKI matches
            the issuer is returned. <note>The AKI extension has the object identifier(OID) value szOID_AUTHORITY_KEY_IDENTIFIER2 and its
            corresponding data structure.</note>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CrlFindFlags.CRL_FIND_ISSUED_BY_SIGNATURE_FLAG">
            <summary>
            Use the public key in the issuer's certificate to verify the signature on the CRL. Only returns a CRL that has a valid signature.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CrlFindFlags.CRL_FIND_ISSUED_BY_DELTA_FLAG">
            <summary>Finds and returns a delta CRL.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CrlFindFlags.CRL_FIND_ISSUED_BY_BASE_FLAG">
            <summary>Finds and returns a base CRL.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CrlFindFlags.CRL_FIND_ISSUED_FOR_SET_STRONG_PROPERTIES_FLAG">
            <summary>
            The signature is checked for strength after successful verification. This flag applies only when the dwFindType parameter is
            set to <strong>CRL_FIND_ISSUED_FOR</strong>. You must also set <strong>CRL_FIND_ISSUED_BY_SIGNATURE_FLAG</strong>. If
            successful, the following strong signature properties will be set on the CRL context:
            <list type="bullet">
            <item><strong>CERT_SIGN_HASH_CNG_ALG_PROP_ID</strong></item>
            <item><strong>CERT_ISSUER_PUB_KEY_BIT_LENGTH_PROP_ID</strong></item>
            </list>
            <para><strong>Windows 8 and Windows Server 2012:</strong> Support for this flag begins.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CrlFindType">
            <summary>
            Specifies the type of search being made. The value of dwFindType determines the data type, contents, and use of the pvFindPara parameter.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CrlFindType.CRL_FIND_ANY">
            <summary>No search criteria. The next CRL in the store is returned.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CrlFindType.CRL_FIND_ISSUED_BY">
            <summary>Searches for the next CRL in the store matching the issuer in the CERT_CONTEXT.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CrlFindType.CRL_FIND_EXISTING">
            <summary>
            <para>Searches for the next CRL that matches the CRL_CONTEXT in the following ways:</para>
            <list type="bullet">
            <item>Both are base or delta CRLs.</item>
            <item>The issuer-name BLOBs for both are identical.</item>
            <item>If they exist, the Authority/KeyIdentifier and IssuingDistributionPoint encoded extension BLOBs match.</item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CrlFindType.CRL_FIND_ISSUED_FOR">
            <summary>
            Searches for the next CRL in the store that matches the issuer of the subject certificate in the CRL_FIND_ISSUED_FOR_PARA structure.
            <para>
            If no CRL is found, searches for the next CRL in the store that matches the issuer in the CRL_FIND_ISSUED_FOR_PARA structure.
            </para>
            <note>When using cross certificates, the subject name in the issuer's certificate might not match the issuer name in the
            subject certificate and its corresponding CRL.</note>
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertAddCRLContextToStore(Vanara.PInvoke.Crypt32.HCERTSTORE,Vanara.PInvoke.Crypt32.PCCRL_CONTEXT,Vanara.PInvoke.Crypt32.CertStoreAdd,System.IntPtr)">
            <summary>
            The <c>CertAddCRLContextToStore</c> function adds a certificate revocation list (CRL) context to the specified certificate store.
            </summary>
            <param name="hCertStore">Handle of a certificate store.</param>
            <param name="pCrlContext">A pointer to the CRL_CONTEXT structure to be added.</param>
            <param name="dwAddDisposition">
            <para>
            Specifies the action to take if a matching CRL or a link to a matching CRL already exists in the store. Currently defined
            disposition values and their uses are as follows.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_STORE_ADD_ALWAYS</term>
            <term>
            Makes no check for an existing matching CRL or link to a matching CRL. A new CRL is always added to the store. This can lead to
            duplicates in a store.
            </term>
            </item>
            <item>
            <term>CERT_STORE_ADD_NEW</term>
            <term>If a matching CRL or a link to a matching CRL exists, the operation fails. GetLastError returns the CRYPT_E_EXISTS code.</term>
            </item>
            <item>
            <term>CERT_STORE_ADD_NEWER</term>
            <term>
            If a matching CRL or a link to a matching CRL exists, the function compares the ThisUpdate times on the CRLs. If the existing
            CRL has a ThisUpdate time less than the ThisUpdate time on the new CRL, the old CRL or link is replaced just as with
            CERT_STORE_ADD_REPLACE_EXISTING. If the existing CRL has a ThisUpdate time greater than or equal to the ThisUpdate time on the
            CRL to be added, the function fails with GetLastError returning the CRYPT_E_EXISTS code. If a matching CRL or a link to a
            matching CRL is not found in the store, a new CRL is added to the store.
            </term>
            </item>
            <item>
            <term>CERT_STORE_ADD_NEWER_INHERIT_PROPERTIES</term>
            <term>
            The action is the same as for CERT_STORE_ADD_NEWER, except that if an older CRL is replaced, the properties of the older CRL are
            incorporated into the replacement CRL.
            </term>
            </item>
            <item>
            <term>CERT_STORE_ADD_REPLACE_EXISTING</term>
            <term>
            If a matching CRL or a link to a matching CRL exists, the existing CRL or link is deleted and a new CRL is created and added to
            the store. If a matching CRL or a link to a matching CRL does not exist, one is added.
            </term>
            </item>
            <item>
            <term>CERT_STORE_ADD_REPLACE_EXISTING_INHERIT_PROPERTIES</term>
            <term>
            If a matching CRL exists in the store, the existing context is deleted before creating and adding the new context. The added
            context inherits properties from the existing CRL.
            </term>
            </item>
            <item>
            <term>CERT_STORE_ADD_USE_EXISTING</term>
            <term>
            If a matching CRL or a link to a matching CRL exists, that existing CRL is used and properties from the new CRL are added. The
            function does not fail, but no new CRL is added. If ppCertContext is not NULL, the existing context is duplicated. If a matching
            CRL or a link to a matching CRL does not exist, a new CRL is added.
            </term>
            </item>
            </list>
            </param>
            <param name="ppStoreContext">
            A pointer to a pointer to the decoded CRL context. This is an optional parameter and can be <c>NULL</c>, indicating that the
            calling application does not require a copy of the added or existing CRL. If a copy is made, that context must be freed by using CertFreeCRLContext.
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>
            If the function fails, the return value is <c>FALSE</c>. Errors from the called functions CertAddEncodedCRLToStore and
            CertSetCRLContextProperty can be propagated to this function.
            </para>
            <para>For extended error information, call GetLastError. Some possible error codes follow.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>CRYPT_E_EXISTS</term>
            <term>
            This error is returned if CERT_STORE_ADD_NEW is set and the CRL already exists in the store or if CERT_STORE_ADD_NEWER is set
            and a CRL exists in the store with a ThisUpdate date greater than or equal to the ThisUpdate date on the CRL to be added.
            </term>
            </item>
            <item>
            <term>E_INVALIDARG</term>
            <term>The dwAddDisposition parameter specified a disposition value that is not valid.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            The CRL context is not duplicated using CertDuplicateCRLContext. Instead, a new copy is created and added to the store. In
            addition to copying the encoded CRL, the function copies the context's properties.
            </para>
            <para>To remove the CRL context from the certificate store, use the CertDeleteCRLFromStore function.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertAddCRLContextToStore(Vanara.PInvoke.Crypt32.HCERTSTORE,Vanara.PInvoke.Crypt32.PCCRL_CONTEXT,Vanara.PInvoke.Crypt32.CertStoreAdd,Vanara.PInvoke.Crypt32.SafePCCRL_CONTEXT@)">
            <summary>
            The <c>CertAddCRLContextToStore</c> function adds a certificate revocation list (CRL) context to the specified certificate store.
            </summary>
            <param name="hCertStore">Handle of a certificate store.</param>
            <param name="pCrlContext">A pointer to the CRL_CONTEXT structure to be added.</param>
            <param name="dwAddDisposition">
            <para>
            Specifies the action to take if a matching CRL or a link to a matching CRL already exists in the store. Currently defined
            disposition values and their uses are as follows.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_STORE_ADD_ALWAYS</term>
            <term>
            Makes no check for an existing matching CRL or link to a matching CRL. A new CRL is always added to the store. This can lead to
            duplicates in a store.
            </term>
            </item>
            <item>
            <term>CERT_STORE_ADD_NEW</term>
            <term>If a matching CRL or a link to a matching CRL exists, the operation fails. GetLastError returns the CRYPT_E_EXISTS code.</term>
            </item>
            <item>
            <term>CERT_STORE_ADD_NEWER</term>
            <term>
            If a matching CRL or a link to a matching CRL exists, the function compares the ThisUpdate times on the CRLs. If the existing
            CRL has a ThisUpdate time less than the ThisUpdate time on the new CRL, the old CRL or link is replaced just as with
            CERT_STORE_ADD_REPLACE_EXISTING. If the existing CRL has a ThisUpdate time greater than or equal to the ThisUpdate time on the
            CRL to be added, the function fails with GetLastError returning the CRYPT_E_EXISTS code. If a matching CRL or a link to a
            matching CRL is not found in the store, a new CRL is added to the store.
            </term>
            </item>
            <item>
            <term>CERT_STORE_ADD_NEWER_INHERIT_PROPERTIES</term>
            <term>
            The action is the same as for CERT_STORE_ADD_NEWER, except that if an older CRL is replaced, the properties of the older CRL are
            incorporated into the replacement CRL.
            </term>
            </item>
            <item>
            <term>CERT_STORE_ADD_REPLACE_EXISTING</term>
            <term>
            If a matching CRL or a link to a matching CRL exists, the existing CRL or link is deleted and a new CRL is created and added to
            the store. If a matching CRL or a link to a matching CRL does not exist, one is added.
            </term>
            </item>
            <item>
            <term>CERT_STORE_ADD_REPLACE_EXISTING_INHERIT_PROPERTIES</term>
            <term>
            If a matching CRL exists in the store, the existing context is deleted before creating and adding the new context. The added
            context inherits properties from the existing CRL.
            </term>
            </item>
            <item>
            <term>CERT_STORE_ADD_USE_EXISTING</term>
            <term>
            If a matching CRL or a link to a matching CRL exists, that existing CRL is used and properties from the new CRL are added. The
            function does not fail, but no new CRL is added. If ppCertContext is not NULL, the existing context is duplicated. If a matching
            CRL or a link to a matching CRL does not exist, a new CRL is added.
            </term>
            </item>
            </list>
            </param>
            <param name="ppStoreContext">
            A pointer to a pointer to the decoded CRL context. This is an optional parameter and can be <c>NULL</c>, indicating that the
            calling application does not require a copy of the added or existing CRL. If a copy is made, that context must be freed by using CertFreeCRLContext.
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>
            If the function fails, the return value is <c>FALSE</c>. Errors from the called functions CertAddEncodedCRLToStore and
            CertSetCRLContextProperty can be propagated to this function.
            </para>
            <para>For extended error information, call GetLastError. Some possible error codes follow.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>CRYPT_E_EXISTS</term>
            <term>
            This error is returned if CERT_STORE_ADD_NEW is set and the CRL already exists in the store or if CERT_STORE_ADD_NEWER is set
            and a CRL exists in the store with a ThisUpdate date greater than or equal to the ThisUpdate date on the CRL to be added.
            </term>
            </item>
            <item>
            <term>E_INVALIDARG</term>
            <term>The dwAddDisposition parameter specified a disposition value that is not valid.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            The CRL context is not duplicated using CertDuplicateCRLContext. Instead, a new copy is created and added to the store. In
            addition to copying the encoded CRL, the function copies the context's properties.
            </para>
            <para>To remove the CRL context from the certificate store, use the CertDeleteCRLFromStore function.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertAddCRLLinkToStore(Vanara.PInvoke.Crypt32.HCERTSTORE,Vanara.PInvoke.Crypt32.PCCRL_CONTEXT,Vanara.PInvoke.Crypt32.CertStoreAdd,Vanara.PInvoke.Crypt32.SafePCCRL_CONTEXT@)">
            <summary>
            The <c>CertAddCRLLinkToStore</c> function adds a link in a store to a certificate revocation list (CRL) context in a different
            store. Instead of creating and adding a duplicate of the CRL, this function adds a link to the original CRL context.
            </summary>
            <param name="hCertStore">Handle of a certificate store where the link is to be added.</param>
            <param name="pCrlContext">A pointer to the CRL_CONTEXT structure to be linked.</param>
            <param name="dwAddDisposition">
            <para>
            Specifies the action to take if a matching CRL or a link to a matching CRL exists in the store. Currently defined disposition
            values and their uses are as follows.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_STORE_ADD_ALWAYS</term>
            <term>
            Makes no check for an existing matching CRL or link to a matching CRL. A new link is always added to the store. This can lead to
            duplicates in a store.
            </term>
            </item>
            <item>
            <term>CERT_STORE_ADD_NEW</term>
            <term>If a matching CRL or a link to a matching CRL exists, the operation fails. GetLastError returns the CRYPT_E_EXISTS code.</term>
            </item>
            <item>
            <term>CERT_STORE_ADD_NEWER</term>
            <term>
            If a matching CRL or a link to a matching CRL exists, the ThisUpdate times on the CRLs are compared. If the existing CRL has a
            ThisUpdate time less than the ThisUpdate time on the new CRL, the old link is replaced just as with
            CERT_STORE_ADD_REPLACE_EXISTING. If the existing CRL has a ThisUpdate time greater than or equal to the ThisUpdate time on the
            CRL to be added, the function fails with GetLastError returning the CRYPT_E_EXISTS code. If a matching CRL or a link to a
            matching CRL is not found in the store, a new link is added to the store.
            </term>
            </item>
            <item>
            <term>CERT_STORE_ADD_REPLACE_EXISTING</term>
            <term>
            If a link to the matching CRL exists, that existing link is deleted and a new link is created and added to the store. If a
            matching CRL or a link to a matching CRL does not exist, a new link is added.
            </term>
            </item>
            <item>
            <term>CERT_STORE_ADD_USE_EXISTING</term>
            <term>
            If a matching CRL or a link to a matching CRL exists, that existing link is used. The function does not fail, but no new link is
            added. If a matching CRL or link to a CRL does not exist, a new link is added.
            </term>
            </item>
            </list>
            </param>
            <param name="ppStoreContext">
            A pointer to a pointer of a copy of the link created. The ppStoreContext parameter can be <c>NULL</c> to indicate that a copy of
            the link is not needed. If a copy of the link is created, that copy must be freed using CertFreeCRLContext.
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>
            If the function fails, the return value is <c>FALSE</c>. For extended error information, call GetLastError. Some possible error
            codes follow.
            </para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>CRYPT_E_EXISTS</term>
            <term>For a dwAddDisposition of CERT_STORE_ADD_NEW, the CTL already exists in the store.</term>
            </item>
            <item>
            <term>E_INVALIDARG</term>
            <term>A disposition value that is not valid was specified in the dwAddDisposition parameter.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            Because the link provides access to an original CRL context, setting an extended property in the linked CRL context changes that
            extended property in the CRL's original location and in any other links to that CRL.
            </para>
            <para>
            Links cannot be added to a store that is opened as a collection. Stores opened as collections include all stores opened with
            CertOpenSystemStore or CertOpenStore using CERT_STORE_PROV_SYSTEM or CERT_STORE_PROV_COLLECTION. For more information, see CertAddStoreToCollection.
            </para>
            <para>
            If links are used and CertCloseStore is called with CERT_CLOSE_STORE_FORCE_FLAG, the store using links must be closed before the
            store containing the original contexts can be closed. If CERT_CLOSE_STORE_FORCE_FLAG is not used, the two stores can be closed
            in either order.
            </para>
            <para>To remove the CRL context link from the certificate store, use the CertDeleteCRLFromStore function.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertAddCRLLinkToStore(Vanara.PInvoke.Crypt32.HCERTSTORE,Vanara.PInvoke.Crypt32.PCCRL_CONTEXT,Vanara.PInvoke.Crypt32.CertStoreAdd,System.IntPtr)">
            <summary>
            The <c>CertAddCRLLinkToStore</c> function adds a link in a store to a certificate revocation list (CRL) context in a different
            store. Instead of creating and adding a duplicate of the CRL, this function adds a link to the original CRL context.
            </summary>
            <param name="hCertStore">Handle of a certificate store where the link is to be added.</param>
            <param name="pCrlContext">A pointer to the CRL_CONTEXT structure to be linked.</param>
            <param name="dwAddDisposition">
            <para>
            Specifies the action to take if a matching CRL or a link to a matching CRL exists in the store. Currently defined disposition
            values and their uses are as follows.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_STORE_ADD_ALWAYS</term>
            <term>
            Makes no check for an existing matching CRL or link to a matching CRL. A new link is always added to the store. This can lead to
            duplicates in a store.
            </term>
            </item>
            <item>
            <term>CERT_STORE_ADD_NEW</term>
            <term>If a matching CRL or a link to a matching CRL exists, the operation fails. GetLastError returns the CRYPT_E_EXISTS code.</term>
            </item>
            <item>
            <term>CERT_STORE_ADD_NEWER</term>
            <term>
            If a matching CRL or a link to a matching CRL exists, the ThisUpdate times on the CRLs are compared. If the existing CRL has a
            ThisUpdate time less than the ThisUpdate time on the new CRL, the old link is replaced just as with
            CERT_STORE_ADD_REPLACE_EXISTING. If the existing CRL has a ThisUpdate time greater than or equal to the ThisUpdate time on the
            CRL to be added, the function fails with GetLastError returning the CRYPT_E_EXISTS code. If a matching CRL or a link to a
            matching CRL is not found in the store, a new link is added to the store.
            </term>
            </item>
            <item>
            <term>CERT_STORE_ADD_REPLACE_EXISTING</term>
            <term>
            If a link to the matching CRL exists, that existing link is deleted and a new link is created and added to the store. If a
            matching CRL or a link to a matching CRL does not exist, a new link is added.
            </term>
            </item>
            <item>
            <term>CERT_STORE_ADD_USE_EXISTING</term>
            <term>
            If a matching CRL or a link to a matching CRL exists, that existing link is used. The function does not fail, but no new link is
            added. If a matching CRL or link to a CRL does not exist, a new link is added.
            </term>
            </item>
            </list>
            </param>
            <param name="ppStoreContext">
            A pointer to a pointer of a copy of the link created. The ppStoreContext parameter can be <c>NULL</c> to indicate that a copy of
            the link is not needed. If a copy of the link is created, that copy must be freed using CertFreeCRLContext.
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>
            If the function fails, the return value is <c>FALSE</c>. For extended error information, call GetLastError. Some possible error
            codes follow.
            </para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>CRYPT_E_EXISTS</term>
            <term>For a dwAddDisposition of CERT_STORE_ADD_NEW, the CTL already exists in the store.</term>
            </item>
            <item>
            <term>E_INVALIDARG</term>
            <term>A disposition value that is not valid was specified in the dwAddDisposition parameter.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            Because the link provides access to an original CRL context, setting an extended property in the linked CRL context changes that
            extended property in the CRL's original location and in any other links to that CRL.
            </para>
            <para>
            Links cannot be added to a store that is opened as a collection. Stores opened as collections include all stores opened with
            CertOpenSystemStore or CertOpenStore using CERT_STORE_PROV_SYSTEM or CERT_STORE_PROV_COLLECTION. For more information, see CertAddStoreToCollection.
            </para>
            <para>
            If links are used and CertCloseStore is called with CERT_CLOSE_STORE_FORCE_FLAG, the store using links must be closed before the
            store containing the original contexts can be closed. If CERT_CLOSE_STORE_FORCE_FLAG is not used, the two stores can be closed
            in either order.
            </para>
            <para>To remove the CRL context link from the certificate store, use the CertDeleteCRLFromStore function.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertAddEncodedCRLToStore(Vanara.PInvoke.Crypt32.HCERTSTORE,Vanara.PInvoke.Crypt32.CertEncodingType,System.IntPtr,System.UInt32,Vanara.PInvoke.Crypt32.CertStoreAdd,Vanara.PInvoke.Crypt32.SafePCCRL_CONTEXT@)">
            <summary>
            The <c>CertAddEncodedCRLToStore</c> function creates a certificate revocation list (CRL) context from an encoded CRL and adds it
            to the certificate store. The function makes a copy of the CRL context before adding it to the store.
            </summary>
            <param name="hCertStore">Handle of a certificate store.</param>
            <param name="dwCertEncodingType">
            <para>
            Specifies the type of encoding used. It is always acceptable to specify both the certificate and message encoding types by
            combining them with a bitwise- <c>OR</c> operation as shown in the following example:
            </para>
            <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are:</para>
            <list type="bullet">
            <item>
            <term>X509_ASN_ENCODING</term>
            </item>
            <item>
            <term>PKCS_7_ASN_ENCODING</term>
            </item>
            </list>
            </param>
            <param name="pbCrlEncoded">A pointer to a buffer containing the encoded CRL to be added to the certificate store.</param>
            <param name="cbCrlEncoded">The size, in bytes, of the pbCrlEncoded buffer.</param>
            <param name="dwAddDisposition">
            <para>
            Specifies the action to take if a matching CRL or a link to a matching CRL already exists in the store. Currently defined
            disposition values and their uses are as follows.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_STORE_ADD_ALWAYS</term>
            <term>
            Makes no check for an existing matching CRL or link to a matching CRL. A new CRL is always added to the store. This can lead to
            duplicates in a store.
            </term>
            </item>
            <item>
            <term>CERT_STORE_ADD_NEW</term>
            <term>If a matching CRL or a link to a matching CRL exists, the operation fails. GetLastError returns the CRYPT_E_EXISTS code.</term>
            </item>
            <item>
            <term>CERT_STORE_ADD_NEWER</term>
            <term>
            If a matching CRL or a link to a matching CRL exists, the ThisUpdate times on the CRLs are compared. If the existing CRL has a
            ThisUpdate time less than the ThisUpdate time on the new CRL, the old CRL or link is replaced just as with
            CERT_STORE_ADD_REPLACE_EXISTING. If the existing CRL has a ThisUpdate time greater than or equal to the ThisUpdate time on the
            CRL to be added, the function fails with GetLastError returning the CRYPT_E_EXISTS code. If a matching CRL or a link to a
            matching CRL is not found in the store, a new CRL is added to the store.
            </term>
            </item>
            <item>
            <term>CERT_STORE_ADD_NEWER_INHERIT_PROPERTIES</term>
            <term>
            The action is the same as for CERT_STORE_ADD_NEWER, except that if an older CRL is replaced, the properties of the older CRL are
            incorporated into the replacement CRL.
            </term>
            </item>
            <item>
            <term>CERT_STORE_ADD_REPLACE_EXISTING</term>
            <term>
            If a matching CRL or a link to a matching CRL exists, that existing CRL or link is deleted and a new CRL is created and added to
            the store. If a matching CRL or a link to a matching CRL does not exist, one is added.
            </term>
            </item>
            <item>
            <term>CERT_STORE_ADD_REPLACE_EXISTING_INHERIT_PROPERTIES</term>
            <term>
            If a matching CRL exists in the store, that existing context is deleted before creating and adding the new context. The new
            context inherits properties from the existing CRL.
            </term>
            </item>
            <item>
            <term>CERT_STORE_ADD_USE_EXISTING</term>
            <term>
            If a matching CRL or a link to a matching CRL exists, that existing CRL is used and properties from the new CRL are added. The
            function does not fail, but no new CRL is added. If ppCertContext is not NULL, the existing context is duplicated. If a matching
            CRL or a link to a matching CRL does not exist, a new CRL is added.
            </term>
            </item>
            </list>
            </param>
            <param name="ppCrlContext">
            A pointer to a pointer to the decoded CRL_CONTEXT structure. This is an optional parameter that can be <c>NULL</c>, indicating
            that the calling application does not require a copy of the new or existing CRL. If a copy is made, that context must be freed
            using CertFreeCRLContext.
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>
            If the function fails, the return value is <c>FALSE</c>. For extended error information, call GetLastError. Some possible error
            codes follow.
            </para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>CRYPT_E_EXISTS</term>
            <term>
            CERT_STORE_ADD_NEW is set and the CRL already exists in the store, or CERT_STORE_ADD_NEWER is set and there is a CRL in the
            store with a ThisUpdate time greater than or equal to the ThisUpdate time for the CRL to be added.
            </term>
            </item>
            <item>
            <term>E_INVALIDARG</term>
            <term>
            A disposition value that is not valid was specified in the dwAddDisposition parameter, or an encoding type that is not valid was
            specified. Currently, only the encoding type X509_ASN_ENCODING is supported.
            </term>
            </item>
            </list>
            <para>
            If the function fails, GetLastError may return an Abstract Syntax Notation One (ASN.1) encoding/decoding error. For information
            about these errors, see ASN.1 Encoding/Decoding Return Values.
            </para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertAddEncodedCRLToStore(Vanara.PInvoke.Crypt32.HCERTSTORE,Vanara.PInvoke.Crypt32.CertEncodingType,System.IntPtr,System.UInt32,Vanara.PInvoke.Crypt32.CertStoreAdd,System.IntPtr)">
            <summary>
            The <c>CertAddEncodedCRLToStore</c> function creates a certificate revocation list (CRL) context from an encoded CRL and adds it
            to the certificate store. The function makes a copy of the CRL context before adding it to the store.
            </summary>
            <param name="hCertStore">Handle of a certificate store.</param>
            <param name="dwCertEncodingType">
            <para>
            Specifies the type of encoding used. It is always acceptable to specify both the certificate and message encoding types by
            combining them with a bitwise- <c>OR</c> operation as shown in the following example:
            </para>
            <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are:</para>
            <list type="bullet">
            <item>
            <term>X509_ASN_ENCODING</term>
            </item>
            <item>
            <term>PKCS_7_ASN_ENCODING</term>
            </item>
            </list>
            </param>
            <param name="pbCrlEncoded">A pointer to a buffer containing the encoded CRL to be added to the certificate store.</param>
            <param name="cbCrlEncoded">The size, in bytes, of the pbCrlEncoded buffer.</param>
            <param name="dwAddDisposition">
            <para>
            Specifies the action to take if a matching CRL or a link to a matching CRL already exists in the store. Currently defined
            disposition values and their uses are as follows.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_STORE_ADD_ALWAYS</term>
            <term>
            Makes no check for an existing matching CRL or link to a matching CRL. A new CRL is always added to the store. This can lead to
            duplicates in a store.
            </term>
            </item>
            <item>
            <term>CERT_STORE_ADD_NEW</term>
            <term>If a matching CRL or a link to a matching CRL exists, the operation fails. GetLastError returns the CRYPT_E_EXISTS code.</term>
            </item>
            <item>
            <term>CERT_STORE_ADD_NEWER</term>
            <term>
            If a matching CRL or a link to a matching CRL exists, the ThisUpdate times on the CRLs are compared. If the existing CRL has a
            ThisUpdate time less than the ThisUpdate time on the new CRL, the old CRL or link is replaced just as with
            CERT_STORE_ADD_REPLACE_EXISTING. If the existing CRL has a ThisUpdate time greater than or equal to the ThisUpdate time on the
            CRL to be added, the function fails with GetLastError returning the CRYPT_E_EXISTS code. If a matching CRL or a link to a
            matching CRL is not found in the store, a new CRL is added to the store.
            </term>
            </item>
            <item>
            <term>CERT_STORE_ADD_NEWER_INHERIT_PROPERTIES</term>
            <term>
            The action is the same as for CERT_STORE_ADD_NEWER, except that if an older CRL is replaced, the properties of the older CRL are
            incorporated into the replacement CRL.
            </term>
            </item>
            <item>
            <term>CERT_STORE_ADD_REPLACE_EXISTING</term>
            <term>
            If a matching CRL or a link to a matching CRL exists, that existing CRL or link is deleted and a new CRL is created and added to
            the store. If a matching CRL or a link to a matching CRL does not exist, one is added.
            </term>
            </item>
            <item>
            <term>CERT_STORE_ADD_REPLACE_EXISTING_INHERIT_PROPERTIES</term>
            <term>
            If a matching CRL exists in the store, that existing context is deleted before creating and adding the new context. The new
            context inherits properties from the existing CRL.
            </term>
            </item>
            <item>
            <term>CERT_STORE_ADD_USE_EXISTING</term>
            <term>
            If a matching CRL or a link to a matching CRL exists, that existing CRL is used and properties from the new CRL are added. The
            function does not fail, but no new CRL is added. If ppCertContext is not NULL, the existing context is duplicated. If a matching
            CRL or a link to a matching CRL does not exist, a new CRL is added.
            </term>
            </item>
            </list>
            </param>
            <param name="ppCrlContext">
            A pointer to a pointer to the decoded CRL_CONTEXT structure. This is an optional parameter that can be <c>NULL</c>, indicating
            that the calling application does not require a copy of the new or existing CRL. If a copy is made, that context must be freed
            using CertFreeCRLContext.
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>
            If the function fails, the return value is <c>FALSE</c>. For extended error information, call GetLastError. Some possible error
            codes follow.
            </para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>CRYPT_E_EXISTS</term>
            <term>
            CERT_STORE_ADD_NEW is set and the CRL already exists in the store, or CERT_STORE_ADD_NEWER is set and there is a CRL in the
            store with a ThisUpdate time greater than or equal to the ThisUpdate time for the CRL to be added.
            </term>
            </item>
            <item>
            <term>E_INVALIDARG</term>
            <term>
            A disposition value that is not valid was specified in the dwAddDisposition parameter, or an encoding type that is not valid was
            specified. Currently, only the encoding type X509_ASN_ENCODING is supported.
            </term>
            </item>
            </list>
            <para>
            If the function fails, GetLastError may return an Abstract Syntax Notation One (ASN.1) encoding/decoding error. For information
            about these errors, see ASN.1 Encoding/Decoding Return Values.
            </para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertCreateCRLContext(Vanara.PInvoke.Crypt32.CertEncodingType,System.IntPtr,System.UInt32)">
            <summary>
            The <c>CertCreateCRLContext</c> function creates a certificate revocation list (CRL) context from an encoded CRL. The created
            context is not persisted to a certificate store. It makes a copy of the encoded CRL within the created context.
            </summary>
            <param name="dwCertEncodingType">
            <para>
            Specifies the type of encoding used. It is always acceptable to specify both the certificate and message encoding types by
            combining them with a bitwise- <c>OR</c> operation as shown in the following example:
            </para>
            <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are:</para>
            <list type="bullet">
            <item>
            <term>X509_ASN_ENCODING</term>
            </item>
            <item>
            <term>PKCS_7_ASN_ENCODING</term>
            </item>
            </list>
            </param>
            <param name="pbCrlEncoded">A pointer to a buffer containing the encoded CRL from which the context is to be created.</param>
            <param name="cbCrlEncoded">The size, in bytes, of the pbCrlEncoded buffer.</param>
            <returns>
            <para>If the function succeeds, the return value is a pointer to a read-only CRL_CONTEXT.</para>
            <para>
            If the function fails and is unable to decode and create the CRL_CONTEXT, the return value is <c>NULL</c>. For extended error
            information, call GetLastError. The following table shows a possible error code.
            </para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>E_INVALIDARG</term>
            <term>Invalid certificate encoding type. Currently, only the encoding type X509_ASN_ENCODING is supported.</term>
            </item>
            </list>
            <para>
            If the function fails, GetLastError may return an Abstract Syntax Notation One (ASN.1) encoding/decoding error. For information
            about these errors, see ASN.1 Encoding/Decoding Return Values.
            </para>
            </returns>
            <remarks>
            The CRL_CONTEXT must be freed by calling CertFreeCRLContext. CertDuplicateCRLContext can be called to make a duplicate.
            CertSetCRLContextProperty and CertGetCRLContextProperty can be called to store and read properties for the CRL.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertDeleteCRLFromStore(Vanara.PInvoke.Crypt32.PCCRL_CONTEXT)">
            <summary>
            The <c>CertDeleteCRLFromStore</c> function deletes the specified certificate revocation list (CRL) context from the certificate store.
            </summary>
            <param name="pCrlContext">A pointer to the CRL_CONTEXT structure to be deleted.</param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>
            If the function fails, the return value is <c>FALSE</c>. For extended error information, call GetLastError. One possible error
            code is the following.
            </para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>E_ACCESSDENIED</term>
            <term>The store was opened read-only, and a delete operation is not allowed.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            All subsequent get or find operations for the CRL in this store fail. However, memory allocated for the CRL is not freed until
            all duplicated contexts have also been freed.
            </para>
            <para>The pCrlContext parameter is always freed by this function by using CertFreeCRLContext, even for an error.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertDuplicateCRLContext(Vanara.PInvoke.Crypt32.PCCRL_CONTEXT)">
            <summary>
            The <c>CertDuplicateCRLContext</c> function duplicates a certificate revocation list (CRL) context by incrementing its reference count.
            </summary>
            <param name="pCrlContext">A pointer to the CRL_CONTEXT structure for which the reference count is being incremented.</param>
            <returns>
            Currently, a copy is not made of the context, and the returned context is the same as the context that was input. If the pointer
            passed into this function is <c>NULL</c>, <c>NULL</c> is returned.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertEnumCRLsInStore(Vanara.PInvoke.Crypt32.HCERTSTORE,Vanara.PInvoke.Crypt32.PCCRL_CONTEXT)">
            <summary>
            The <c>CertEnumCRLsInStore</c> function retrieves the first or next certificate revocation list (CRL) context in a certificate
            store. Used in a loop, this function can retrieve in sequence all CRL contexts in a certificate store.
            </summary>
            <param name="hCertStore">Handle of a certificate store.</param>
            <param name="pPrevCrlContext">
            A pointer to the previous CRL_CONTEXT structure found. The pPrevCrlContext parameter must be <c>NULL</c> to get the first CRL in
            the store. Successive CRLs are enumerated by setting pPrevCrlContext to the pointer returned by a previous call to the function.
            This function frees the <c>CRL_CONTEXT</c> referenced by non- <c>NULL</c> values of this parameter. The enumeration skips any
            CRLs previously deleted by CertDeleteCRLFromStore.
            </param>
            <returns>
            <para>If the function succeeds, the return value is a pointer to the next CRL_CONTEXT in the store.</para>
            <para>
            <c>NULL</c> is returned if the function fails. For extended error information, call GetLastError. Some possible error codes follow.
            </para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>E_INVALIDARG</term>
            <term>The handle in the hCertStore parameter is not the same as that in the certificate context pointed to by pPrevCrlContext.</term>
            </item>
            <item>
            <term>CRYPT_E_NOT_FOUND</term>
            <term>No CRL was found. This happens if the store is empty or the end of the store's list is reached.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            The returned pointer is freed when it is passed as the pPrevCrlContext on a subsequent call to the function. Otherwise, the
            pointer must explicitly be freed by calling CertFreeCRLContext. A pPrevCrlContext that is not <c>NULL</c> is always freed when
            passed to this function through a call to <c>CertFreeCRLContext</c>, even if the function itself returns an error.
            </para>
            <para>A duplicate of the CRL context returned by this function can be made by calling CertDuplicateCRLContext.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertFindCertificateInCRL(Vanara.PInvoke.Crypt32.PCCERT_CONTEXT,Vanara.PInvoke.Crypt32.PCCRL_CONTEXT,System.UInt32,System.IntPtr,System.IntPtr@)">
            <summary>The <c>CertFindCertificateInCRL</c> function searches the certificate revocation list (CRL) for the specified certificate.</summary>
            <param name="pCert">A pointer to a CERT_CONTEXT of the certificate to be searched for in the CRL.</param>
            <param name="pCrlContext">A pointer to the CRL_CONTEXT to be searched.</param>
            <param name="dwFlags">Reserved for future use. Must be set to zero.</param>
            <param name="pvReserved">Reserved for future use. Must be set to zero.</param>
            <param name="ppCrlEntry">
            If the certificate is found in the CRL, this pointer is updated with a pointer to the entry. Otherwise, it is set to
            <c>NULL</c>. The returned entry is not allocated and must not be freed.
            </param>
            <returns><c>TRUE</c> if the list was searched; otherwise <c>FALSE</c>.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertFindCRLInStore(Vanara.PInvoke.Crypt32.HCERTSTORE,Vanara.PInvoke.Crypt32.CertEncodingType,Vanara.PInvoke.Crypt32.CrlFindFlags,Vanara.PInvoke.Crypt32.CrlFindType,System.IntPtr,Vanara.PInvoke.Crypt32.PCCRL_CONTEXT)">
            <summary>
            The <c>CertFindCRLInStore</c> function finds the first or next certificate revocation list (CRL) context in a certificate store
            that matches a search criterion established by the dwFindType parameter and the associated pvFindPara parameter. This function
            can be used in a loop to find all of the CRL contexts in a certificate store that match the specified find criteria.
            </summary>
            <param name="hCertStore">A handle of the certificate store to be searched.</param>
            <param name="dwCertEncodingType">This parameter is not currently used. It must be set to zero.</param>
            <param name="dwFindFlags">
            <para>
            If dwFindType is CRL_FIND_ISSUED_BY, by default, only issuer name matching is done. The following flags can be used to do
            additional filtering.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRL_FIND_ISSUED_BY_AKI_FLAG</term>
            <term>
            Checks for a CRL that has an Authority Key Identifier (AKI) extension. If the CRL has an AKI, only a CRL whose AKI matches the
            issuer is returned.
            </term>
            </item>
            <item>
            <term>CRL_FIND_ISSUED_BY_SIGNATURE_FLAG</term>
            <term>
            Use the public key in the issuer's certificate to verify the signature on the CRL. Only returns a CRL that has a valid signature.
            </term>
            </item>
            <item>
            <term>CRL_FIND_ISSUED_BY_DELTA_FLAG</term>
            <term>Finds and returns a delta CRL.</term>
            </item>
            <item>
            <term>CRL_FIND_ISSUED_BY_BASE_FLAG</term>
            <term>Finds and returns a base CRL.</term>
            </item>
            <item>
            <term>CRL_FIND_ISSUED_FOR_SET_STRONG_PROPERTIES_FLAG</term>
            <term>
            The signature is checked for strength after successful verification. This flag applies only when the dwFindType parameter is set
            to CRL_FIND_ISSUED_FOR. You must also set CRL_FIND_ISSUED_BY_SIGNATURE_FLAG. If successful, the following strong signature
            properties will be set on the CRL context: Windows 8 and Windows Server 2012: Support for this flag begins.
            </term>
            </item>
            </list>
            </param>
            <param name="dwFindType">
            <para>
            Specifies the type of search being made. The value of dwFindType determines the data type, contents, and use of the pvFindPara
            parameter. Currently defined search types and their pvFindPara requirements are as follows.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRL_FIND_ANY The pvFindPara parameter is not used. It must be set to NULL.</term>
            <term>No search criteria. The next CRL in the store is returned.</term>
            </item>
            <item>
            <term>CRL_FIND_ISSUED_BY A pointer to a CERT_CONTEXT.</term>
            <term>Searches for the next CRL in the store matching the issuer in the CERT_CONTEXT.</term>
            </item>
            <item>
            <term>CRL_FIND_EXISTING A pointer to a CRL_CONTEXT.</term>
            <term>Searches for the next CRL that matches the CRL_CONTEXT in the following ways:</term>
            </item>
            <item>
            <term>CRL_FIND_ISSUED_FOR A pointer to a CRL_FIND_ISSUED_FOR_PARA.</term>
            <term>
            Searches for the next CRL in the store that matches the issuer of the subject certificate in the CRL_FIND_ISSUED_FOR_PARA
            structure. If no CRL is found, searches for the next CRL in the store that matches the issuer in the CRL_FIND_ISSUED_FOR_PARA structure.
            </term>
            </item>
            </list>
            </param>
            <param name="pvFindPara">
            This parameter is determined by the value of dwFindType. For details, see the table earlier in this topic.
            </param>
            <param name="pPrevCrlContext">
            A pointer to the last CRL_CONTEXT returned by this function. Must be <c>NULL</c> to get the first CRL in the store meeting the
            search criteria. Successive CRLs meeting the search criteria can be found by setting pPrevCrlContext to the <c>PCCRL_CONTEXT</c>
            pointer returned by a previous call to the function. The search process skips any CRLs that do not match the search criteria or
            that have been previously deleted from the store by CertDeleteCRLFromStore. This function frees the <c>CRL_CONTEXT</c>
            referenced by values of this parameter that are not <c>NULL</c>.
            </param>
            <returns>
            <para>
            If the function succeeds, the function returns a pointer to a read-only CRL context. When you have finished using the returned
            CRL context, free it by calling the CertFreeCRLContext function or implicitly free it by passing it as the pPrevCrlContext
            parameter on a subsequent call to the <c>CertFindCRLInStore</c> function.
            </para>
            <para>
            If the function fails and a CRL that matches the search criteria is not found, the return value is <c>NULL</c>. For extended
            error information, call GetLastError. Some possible error codes follow.
            </para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>E_INVALIDARG</term>
            <term>
            The handle in the hCertStore parameter is not the same as that in the CRL context pointed to by the pPrevCrlContext parameter,
            or a search type that is not valid was specified in the dwFindType parameter.
            </term>
            </item>
            <item>
            <term>CRYPT_E_NOT_FOUND</term>
            <term>No CRLs are in the store, no CRL was found that matched the search criteria, or the end of the store's list was reached.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            The returned pointer is freed when passed as the pPrevCrlContext parameter on a subsequent call to the function. Otherwise, the
            pointer must be explicitly freed by calling CertFreeCRLContext. A pPrevCrlContext that is not <c>NULL</c> is always freed by
            <c>CertFindCRLInStore</c> using a call to <c>CertFreeCRLContext</c>, even if there is an error in the function.
            </para>
            <para>
            CertDuplicateCRLContext can be called to make a duplicate of the returned context. The returned CRL context can be added to a
            different certificate store by using CertAddCRLContextToStore, or a link to that CRL context can be added to a noncollection
            store by using CertAddCRLLinkToStore.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertFreeCRLContext(Vanara.PInvoke.Crypt32.PCCRL_CONTEXT)">
            <summary>
            <para>
            The <c>CertFreeCRLContext</c> function frees a certificate revocation list (CRL) context by decrementing its reference count.
            When the reference count goes to zero, <c>CertFreeCRLContext</c> frees the memory used by a CRL context.
            </para>
            <para>
            To free a context obtained by a get, duplicate, or create function, call the appropriate free function. To free a context
            obtained by a find or enumerate function, either pass it in as the previous context parameter to a subsequent invocation of the
            function, or call the appropriate free function. For more information, see the reference topic for the function that obtains the context.
            </para>
            </summary>
            <param name="pCrlContext">A pointer to the CRL_CONTEXT to be freed.</param>
            <returns>The function always returns <c>TRUE</c>.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertGetCRLFromStore(Vanara.PInvoke.Crypt32.HCERTSTORE,Vanara.PInvoke.Crypt32.PCCERT_CONTEXT,Vanara.PInvoke.Crypt32.PCCRL_CONTEXT,Vanara.PInvoke.Crypt32.CertStoreVerification@)">
            <summary>
            The <c>CertGetCRLFromStore</c> function gets the first or next certificate revocation list (CRL) context from the certificate
            store for the specified issuer. The function also performs the enabled verification checks on the CRL. The new Certificate Chain
            Verification Functions are recommended instead of this function.
            </summary>
            <param name="hCertStore">Handle of a certificate store.</param>
            <param name="pIssuerContext">
            A pointer to an issuer CERT_CONTEXT. The pIssuerContext pointer can come from this store or another store, or could have been
            created by the calling CertCreateCertificateContext. If <c>NULL</c> is passed for this parameter, all the CRLs in the store are found.
            </param>
            <param name="pPrevCrlContext">
            A pointer to a CRL_CONTEXT. An issuer can have multiple CRLs. For example, it can generate delta CRLs by using an X.509 version
            3 extension. This parameter must be <c>NULL</c> on the first call to get the CRL. To get the next CRL for the issuer, the
            parameter is set to the <c>CRL_CONTEXT</c> returned by a previous call. A non- <c>NULL</c> pPrevCrlContext is always freed by
            this function by calling CertFreeCRLContext, even for an error.
            </param>
            <param name="pdwFlags">
            <para>
            The following flag values are defined to enable verification checks on the returned CRL. These flags can be combined using a
            bitwise- <c>OR</c> operation.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_STORE_SIGNATURE_FLAG</term>
            <term>Uses the public key in the issuer's certificate to verify the signature on the returned CRL.</term>
            </item>
            <item>
            <term>CERT_STORE_TIME_VALIDITY_FLAG</term>
            <term>Gets the current time and verifies that it is within the time between the CRL's ThisUpdate and NextUpdate.</term>
            </item>
            <item>
            <term>CERT_STORE_BASE_CRL_FLAG</term>
            <term>Gets a base CRL.</term>
            </item>
            <item>
            <term>CERT_STORE_DELTA_CRL_FLAG</term>
            <term>Gets a delta CRL.</term>
            </item>
            </list>
            <para>If an enabled verification check succeeds, its flag is set to zero.</para>
            <para>
            If an enabled verification check fails, its flag remains set upon return. If pIssuerContext is <c>NULL</c>, then an enabled
            CERT_STORE_SIGNATURE_FLAG always fails and the CERT_STORE_NO_ISSUER_FLAG is also set. For more details, see Remarks.
            </para>
            <para>
            If only one of CERT_STORE_BASE_CRL_FLAG or CERT_STORE_DELTA_CRL_FLAG is set, this function returns either a base or delta CRL
            and the appropriate base or delta flag will be cleared on return. If both flags are set, only one of the flags will be cleared.
            </para>
            <para>
            For a verification check failure, a pointer to the first or next CRL_CONTEXT is still returned and GetLastError is not updated.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is a pointer to a read-only CRL_CONTEXT.</para>
            <para>If the function fails and the first or next CRL is not found, the return value is <c>NULL</c>.</para>
            <para>
            The returned CRL_CONTEXT must be freed by calling CertFreeCRLContext. However, when the returned <c>CRL_CONTEXT</c> is supplied
            for pPrevCrlContext on a subsequent call, the function frees it.
            </para>
            <para>For extended error information, call GetLastError. Some possible error codes follow.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>E_INVALIDARG</term>
            <term>
            The handle in the hCertStore parameter is not the same as that in the CRL context pointed to by the pPrevCrlContext parameter,
            or an unsupported flag was set in pdwFlags.
            </term>
            </item>
            <item>
            <term>CRYPT_E_NOT_FOUND</term>
            <term>Either no CRLs existed in the store for the issuer, or the function reached the end of the store's list.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>CertDuplicateCRLContext can be called to make a duplicate CRL.</para>
            <para>
            The hexadecimal values of the flags can be combined using a bitwise- <c>OR</c> operation to enable both verifications. For
            example, to enable both verifications, the <c>DWORD</c> value pointed to by pdwFlags is set to value CERT_STORE_SIGNATURE_FLAG |
            CERT_STORE_TIME_VALIDITY_FLAG. If the CERT_STORE_SIGNATURE_FLAG verification succeeded, but CERT_STORE_TIME_VALIDITY_FLAG
            verification failed, the <c>DWORD</c> value pointed to by pdwFlags is set to CERT_STORE_TIME_VALIDITY_FLAG when the function returns.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertSerializeCRLStoreElement(Vanara.PInvoke.Crypt32.PCCRL_CONTEXT,System.UInt32,System.IntPtr,System.UInt32@)">
            <summary>
            The <c>CertSerializeCRLStoreElement</c> function serializes an encoded certificate revocation list (CRL) context and the encoded
            representation of its properties. The result can be persisted to storage so that the CRL and properties can be retrieved at a
            later time.
            </summary>
            <param name="pCrlContext">A pointer to the CRL_CONTEXT structure being serialized.</param>
            <param name="dwFlags">Reserved for future use and must be zero.</param>
            <param name="pbElement">
            <para>A pointer to a buffer to receive the serialized output, including the encoded CRL, and possibly its properties.</para>
            <para>
            This parameter can be <c>NULL</c> to set the size of this information for memory allocation purposes. For more information, see
            Retrieving Data of Unknown Length.
            </para>
            </param>
            <param name="pcbElement">
            <para>
            A pointer to a <c>DWORD</c> value specifying the size, in bytes, of the buffer pointed to by the pbElement parameter. When the
            function returns, the <c>DWORD</c> value contains the number of bytes stored in the buffer.
            </para>
            <para>
            <c>Note</c> When processing the data returned in the buffer, applications must use the actual size of the data returned. The
            actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually
            specified large enough to ensure that the largest possible output data fits in the buffer.) On output, the variable pointed to
            by this parameter is updated to reflect the actual size of the data copied to the buffer.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. For extended error information, call GetLastError.</para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.SafePCCRL_CONTEXT">
            <summary>Provides a <see cref="T:System.Runtime.InteropServices.SafeHandle"/> for <see cref="T:Vanara.PInvoke.Crypt32.PCCRL_CONTEXT"/> that is disposed using <see cref="M:Vanara.PInvoke.Crypt32.CertFreeCRLContext(Vanara.PInvoke.Crypt32.PCCRL_CONTEXT)"/>.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.SafePCCRL_CONTEXT.#ctor(System.IntPtr,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Crypt32.SafePCCRL_CONTEXT"/> class and assigns an existing handle.</summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
            <param name="ownsHandle">
            <see langword="true"/> to reliably release the handle during the finalization phase; otherwise, <see langword="false"/> (not recommended).
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.SafePCCRL_CONTEXT.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Crypt32.SafePCCRL_CONTEXT"/> class.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.SafePCCRL_CONTEXT.op_Explicit(Vanara.PInvoke.Crypt32.SafePCCRL_CONTEXT)~Vanara.PInvoke.Crypt32.CRL_CONTEXT*">
            <summary>Performs an explicit conversion from <see cref="T:Vanara.PInvoke.Crypt32.SafePCCRL_CONTEXT"/> to <see cref="T:Vanara.PInvoke.Crypt32.CRL_CONTEXT"/>.</summary>
            <param name="ctx">The <see cref="T:Vanara.PInvoke.Crypt32.SafePCCRL_CONTEXT"/> instance.</param>
            <returns>The resulting <see cref="T:Vanara.PInvoke.Crypt32.CRL_CONTEXT"/> instance from the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.SafePCCRL_CONTEXT.op_Implicit(Vanara.PInvoke.Crypt32.SafePCCRL_CONTEXT)~Vanara.PInvoke.Crypt32.PCCRL_CONTEXT">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.Crypt32.SafePCCRL_CONTEXT"/> to <see cref="T:Vanara.PInvoke.Crypt32.PCCRL_CONTEXT"/>.</summary>
            <param name="ctx">The <see cref="T:Vanara.PInvoke.Crypt32.SafePCCRL_CONTEXT"/> instance.</param>
            <returns>The resulting <see cref="T:Vanara.PInvoke.Crypt32.PCCRL_CONTEXT"/> instance from the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.SafePCCRL_CONTEXT.InternalReleaseHandle">
            <inheritdoc/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_SYSTEM_STORE_LOCATION_MASK">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_SYSTEM_STORE_RELOCATE_FLAG">
            <summary>
            Enables CertOpenStore to open a store relative to a user-specified HKEY instead of one of the predefined HKEY constants. For
            example, HKEY_CURRENT_USER can be replaced with a user-specified HKEY. When CERT_SYSTEM_STORE_RELOCATE_FLAG is set, the pvPara
            parameter passed to CertOpenStore points to a CERT_SYSTEM_STORE_RELOCATE_PARA structure instead of pointing to the store name as
            a null-terminated Unicode or ASCII string.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CertEnumPhysicalStoreCallback">
            <summary>
            The <c>CertEnumPhysicalStoreCallback</c> callback function formats and presents information on each physical store found by a
            call to CertEnumPhysicalStore.
            </summary>
            <param name="pvSystemStore"/>
            <param name="dwFlags">
            <para>Specifies the location of the system store. The following flag values are defined:</para>
            <list type="bullet">
            <item>
            <term>CERT_SYSTEM_STORE_CURRENT_USER</term>
            </item>
            <item>
            <term>CERT_SYSTEM_STORE_CURRENT_SERVICE</term>
            </item>
            <item>
            <term>CERT_SYSTEM_STORE_LOCAL_MACHINE</term>
            </item>
            <item>
            <term>CERT_SYSTEM_STORE_LOCAL_MACHINE_GROUP_POLICY</term>
            </item>
            <item>
            <term>CERT_SYSTEM_STORE_CURRENT_USER_GROUP_POLICY</term>
            </item>
            <item>
            <term>CERT_SYSTEM_STORE_SERVICES</term>
            </item>
            <item>
            <term>CERT_SYSTEM_STORE_USERS</term>
            </item>
            <item>
            <term>CERT_SYSTEM_STORE_LOCAL_MACHINE_ENTERPRISE</term>
            </item>
            </list>
            <para>In addition, CERT_SYSTEM_STORE_RELOCATE_FLAG or CERT_PHYSICAL_STORE_PREDEFINED_ENUM_FLAG can be combined using a bitwise-</para>
            <para>OR</para>
            <para>
            operation with any of the high-word location flags. The CERT_PHYSICAL_STORE_PREDEFINED_ENUM_FLAG constant is set if the physical
            store is predefined rather than registered.
            </para>
            </param>
            <param name="pwszStoreName">Name of the physical store.</param>
            <param name="pStoreInfo">A pointer to a CERT_PHYSICAL_STORE_INFO structure containing information about the store.</param>
            <param name="pvReserved"/>
            <param name="pvArg"/>
            <returns>Returns <c>TRUE</c> if the function succeeds, <c>FALSE</c> if it fails.</returns>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CertEnumSystemStoreCallback">
            <summary>
            The <c>CertEnumSystemStoreCallback</c> callback function formats and presents information on each system store found by a call
            to CertEnumSystemStore.
            </summary>
            <param name="pvSystemStore">
            A pointer to information on the system store found by a call to CertEnumSystemStore. Where appropriate, this argument will
            contain a leading computer name or service name prefix.
            </param>
            <param name="dwFlags">Flag used to call for an alteration of the presentation.</param>
            <param name="pStoreInfo">A pointer to a CERT_SYSTEM_STORE_INFO structure that contains information about the store.</param>
            <param name="pvReserved">Reserved for future use.</param>
            <param name="pvArg">A pointer to information passed to the callback function in the pvArg passed to CertEnumSystemStore.</param>
            <returns>If the function succeeds, the function returns TRUE. To stop the enumeration, the function must return FALSE.</returns>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CertEnumSystemStoreLocationCallback">
            <summary>
            The <c>CertEnumSystemStoreLocationCallback</c> callback function formats and presents information on each system store location
            found by a call to CertEnumSystemStoreLocation.
            </summary>
            <param name="pwszStoreLocation">String that contains information on the store location found.</param>
            <param name="dwFlags">Flag used to call for an alteration of the presentation.</param>
            <param name="pvReserved"/>
            <param name="pvArg"/>
            <returns>
            <para>If the function succeeds, the function returns <c>TRUE</c>.</para>
            <para>If the function fails, it returns <c>FALSE</c>.</para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.PFN_CERT_CREATE_CONTEXT_SORT_FUNC">
            <summary>
            The <c>PFN_CERT_CREATE_CONTEXT_SORT_FUNC</c> callback function is called for each sorted context entry when a context is
            created. This function pointer is passed in the <c>pfnSort</c> member of the CERT_CREATE_CONTEXT_PARA structure.
            </summary>
            <param name="cbTotalEncoded">The total number of bytes of the encoded entries.</param>
            <param name="cbRemainEncoded">The number of bytes remaining to be encoded.</param>
            <param name="cEntry">The current number of sorted entries.</param>
            <param name="pvSort"/>
            <returns>
            Return <c>TRUE</c> to continue the sort or <c>FALSE</c> to stop the sort. If <c>FALSE</c> is returned, CertCreateContext will
            fail and set the last error code to <c>ERROR_CANCELLED</c>.
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.PFN_CRYPT_ALLOC">
            <summary>Delegate to allocate memory.</summary>
            <param name="cbSize">Size of the memory to allocate.</param>
            <returns>A pointer to the allocated memory.</returns>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.PFN_CRYPT_FREE">
            <summary>Delegate to free memory.</summary>
            <param name="pv">The pointer to the memory to free.</param>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CertCloseStoreFlags">
            <summary>Flags for <see cref="M:Vanara.PInvoke.Crypt32.CertCloseStore(Vanara.PInvoke.Crypt32.HCERTSTORE,Vanara.PInvoke.Crypt32.CertCloseStoreFlags)"/>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertCloseStoreFlags.CERT_CLOSE_STORE_FORCE_FLAG">
            <summary>
            Forces the freeing of memory for all contexts associated with the store. This flag can be safely used only when the store is
            opened in a function and neither the store handle nor any of its contexts are passed to any called functions. For details,
            see Remarks.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertCloseStoreFlags.CERT_CLOSE_STORE_CHECK_FLAG">
            <summary>
            Checks for nonfreed certificate, CRL, and CTL contexts. A returned error code indicates that one or more store elements is
            still in use. This flag should only be used as a diagnostic tool in the development of applications.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CertCreateContextFlags">
            <summary>Flags for CertCreateContext.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertCreateContextFlags.CERT_CREATE_CONTEXT_NOCOPY_FLAG">
            <summary>The created context points directly to the content pointed to by pbEncoded instead of an allocated copy.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertCreateContextFlags.CERT_CREATE_CONTEXT_SORTED_FLAG">
            <summary>
            The function creates a context with sorted entries. Currently, this flag only applies to a CTL context.
            <para>
            For CTLs, the cCTLEntry member of the returned CTL_INFO structure is always zero. CertFindSubjectInSortedCTL and
            CertEnumSubjectInSortedCTL must be called to find or enumerate the CTL entries.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertCreateContextFlags.CERT_CREATE_CONTEXT_NO_HCRYPTMSG_FLAG">
            <summary>
            By default, when a CTL context is created, a HCRYTPMSG handle to its SignedData message is created. This flag can be set to
            improve performance by not creating this handle. This flag can only be used when dwContextType is CERT_STORE_CTL_CONTEXT.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertCreateContextFlags.CERT_CREATE_CONTEXT_NO_ENTRY_FLAG">
            <summary>
            By default, when a CTL context is created, its entries are decoded. When this flag is set, the entries are not decoded and
            performance is improved. This flag can only be used when dwContextType is CERT_STORE_CTL_CONTEXT.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CertPhysicalStoreFlags">
            <summary>Physical Store Information flags.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPhysicalStoreFlags.CERT_PHYSICAL_STORE_ADD_ENABLE_FLAG">
            <summary>Enables addition to a context to the store.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPhysicalStoreFlags.CERT_PHYSICAL_STORE_OPEN_DISABLE_FLAG">
            <summary>
            Set by the CertRegisterPhysicalStore function. By default, all system stores located in the registry have an implicit
            SystemRegistry physical store that is opened. To disable the opening of this store, the SystemRegistry physical store that
            corresponds to the System store must be registered by setting CERT_PHYSICAL_STORE_OPEN_DISABLE_FLAG or by registering a
            physical store named ".Default" with CertRegisterPhysicalStore.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPhysicalStoreFlags.CERT_PHYSICAL_STORE_REMOTE_OPEN_DISABLE_FLAG">
            <summary>Disables remote opening of the physical store.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertPhysicalStoreFlags.CERT_PHYSICAL_STORE_INSERT_COMPUTER_NAME_ENABLE_FLAG">
            <summary>Places the string \\ComputerName in front of other provider types.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CertStoreAdd">
            <summary>Specifies the action to take if the certificate, CRL, or CTL already exists in the store.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreAdd.CERT_STORE_ADD_NEW">
            <summary>
            If the certificate, CRL, or CTL is new, it is created and persisted to the store. The operation fails if an identical
            certificate, CRL, or CTL already exists in the store. The last error code is set to CRYPT_E_EXISTS.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreAdd.CERT_STORE_ADD_USE_EXISTING">
            <summary>
            If the certificate, CRL, or CTL is new, it is added to the store. If an identical certificate, CRL, or CTL already exists,
            the existing element is used. If ppvContext is not NULL, the existing context is duplicated. The function only adds
            properties that do not already exist. The SHA-1 and MD5 hash properties are not copied.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreAdd.CERT_STORE_ADD_REPLACE_EXISTING">
            <summary>
            If an identical certificate, CRL, or CTL already exists in the store, the existing certificate, CRL, or CTL context is
            deleted before creating and adding the new context.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreAdd.CERT_STORE_ADD_ALWAYS">
            <summary>
            No check is made to determine whether an identical certificate, CRL, or CTL already exists. A new element is always created.
            This can lead to duplicates in the store. To determine whether the element already exists in the store, call
            CertGetCRLFromStore or CertGetSubjectCertificateFromStore.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreAdd.CERT_STORE_ADD_REPLACE_EXISTING_INHERIT_PROPERTIES">
            <summary>
            If a matching certificate exists in the store, the existing context is deleted before creating and adding the new context.
            The new added context inherits properties from the existing certificate.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreAdd.CERT_STORE_ADD_NEWER">
            <summary>
            If a matching CRL or CTL or a link to a matching CRL or CTL exists, the function compares the NotBefore times on the CRL or
            CTL. If the existing CRL or CTL has a NotBefore time less than the NotBefore time on the new element, the old element or
            link is replaced just as with CERT_STORE_ADD_REPLACE_EXISTING. If the existing element has a NotBefore time greater than or
            equal to the NotBefore time on the element to be added, the function fails with GetLastError returning the CRYPT_E_EXISTS code.
            <para>
            If a matching CRL or CTL or a link to a matching CRL or CTL is not found in the store, a new element is added to the store.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreAdd.CERT_STORE_ADD_NEWER_INHERIT_PROPERTIES">
            <summary>
            The action is the same as for CERT_STORE_ADD_NEWER. However, if an older CRL or CTL is replaced, the properties of the older
            element are incorporated into the replacement.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CertStoreContextFlags">
            <summary>Specifics the contexts that can be added.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreContextFlags.CERT_STORE_ALL_CONTEXT_FLAG">
            <summary>Adds any context.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreContextFlags.CERT_STORE_CERTIFICATE_CONTEXT_FLAG">
            <summary>Adds only a certificate context.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreContextFlags.CERT_STORE_CRL_CONTEXT_FLAG">
            <summary>Adds only a CRL context.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreContextFlags.CERT_STORE_CTL_CONTEXT_FLAG">
            <summary>Adds only a CTL context.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CertStoreContextType">
            <summary>The context type of the added serialized element.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreContextType.CERT_STORE_CERTIFICATE_CONTEXT">
            <summary>Certificates</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreContextType.CERT_STORE_CRL_CONTEXT">
            <summary>CRLs</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreContextType.CERT_STORE_CTL_CONTEXT">
            <summary>CTLs</summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CertStoreControlFlags">
            <summary>Flags for <c>CertControlStore</c>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreControlFlags.CERT_STORE_CTRL_COMMIT_FORCE_FLAG">
            <summary>
            Forces the contents of the cache memory store to be copied to permanent storage even if the cache has not been changed.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreControlFlags.CERT_STORE_CTRL_COMMIT_CLEAR_FLAG">
            <summary>Inhibits the copying of the contents of the cache memory store to permanent storage even when the store is closed.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreControlFlags.CERT_STORE_CTRL_INHIBIT_DUPLICATE_HANDLE_FLAG">
            <summary>
            Inhibits a duplicate handle of the event HANDLE. If this flag is set, CertControlStore with CERT_STORE_CTRL_CANCEL_NOTIFY
            passed must be called for this event HANDLE before closing the hCertStore handle.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CertStoreControlType">
            <summary>Control action to be taken by <c>CertControlStore</c>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreControlType.CERT_STORE_CTRL_RESYNC">
            <summary>The cached store is resynchronized and made to match the persisted store.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreControlType.CERT_STORE_CTRL_NOTIFY_CHANGE">
            <summary>
            A signal is returned in the space pointed to by pvCtrlPara to indicate that the current contents of the cached store differ
            from the store's persisted state.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreControlType.CERT_STORE_CTRL_COMMIT">
            <summary>
            Any changes made to the cached store are copied to persisted storage. If no changes were made since the cached store was
            opened or since the last commit, the call is ignored. The call is also ignored if the store provider is a provider that
            automatically persists changes immediately.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreControlType.CERT_STORE_CTRL_AUTO_RESYNC">
            <summary>
            At the start of every enumeration or find store call, a check is made to determine whether a change has been made in the
            store. If the store has changed, a re-synchronization is done. This check is only done on first enumeration or find calls,
            when the pPrevContext is NULL. The pvCtrPara member is not used and must be set to NULL.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreControlType.CERT_STORE_CTRL_CANCEL_NOTIFY">
            <summary>
            Cancels notification signaling of the event HANDLE passed in a previous CERT_STORE_CTRL_NOTIFY_CHANGE or
            CERT_STORE_CTRL_RESYNC. The pvCtrlPara parameter points to the event HANDLE to be canceled.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CertStoreFlags">
            <summary>Controls a variety of general characteristics of the certificate store opened.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreFlags.CERT_STORE_BACKUP_RESTORE_FLAG">
            <summary>
            Use the thread's SE_BACKUP_NAME and SE_RESTORE_NAME privileges to open registry or file-based system stores. If the thread
            does not have these privileges, this function must fail with an access denied error.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreFlags.CERT_STORE_CREATE_NEW_FLAG">
            <summary>
            A new store is created if one did not exist. The function fails if the store already exists.
            <para>
            If neither CERT_STORE_OPEN_EXISTING_FLAG nor CERT_STORE_CREATE_NEW_FLAG is set, a store is opened if it exists or is created
            and opened if it did not already exist.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreFlags.CERT_STORE_DEFER_CLOSE_UNTIL_LAST_FREE_FLAG">
            <summary>
            Defer closing of the store's provider until all certificates, CRLs, or CTLs obtained from the store are no longer in use.
            The store is actually closed when the last certificate, CRL, or CTL obtained from the store is freed. Any changes made to
            properties of these certificates, CRLs, and CTLs, even after the call to CertCloseStore, are persisted.
            <para>
            If this flag is not set and certificates, CRLs, or CTLs obtained from the store are still in use, any changes to the
            properties of those certificates, CRLs, and CTLs will not be persisted.
            </para>
            <para>If this function is called with CERT_CLOSE_STORE_FORCE_FLAG, CERT_STORE_DEFER_CLOSE_UNTIL_LAST_FREE_FLAG is ignored.</para>
            <para>
            When this flag is set and a non-NULL hCryptProv parameter value is passed, that provider will continue to be used even after
            the call to this function.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreFlags.CERT_STORE_DELETE_FLAG">
            <summary>
            The store is deleted instead of being opened. This function returns NULL for both success and failure of the deletion. To
            determine the success of the deletion, call GetLastError, which returns zero if the store was deleted and a nonzero value if
            it was not deleted.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreFlags.CERT_STORE_ENUM_ARCHIVED_FLAG">
            <summary>
            Normally, an enumeration of all certificates in the store will ignore any certificate with the CERT_ARCHIVED_PROP_ID
            property set. If this flag is set, an enumeration of the certificates in the store will contain all of the certificates in
            the store, including those that have the CERT_ARCHIVED_PROP_ID property.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreFlags.CERT_STORE_MANIFOLD_FLAG">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreFlags.CERT_STORE_MAXIMUM_ALLOWED_FLAG">
            <summary>
            Open the store with the maximum set of allowed permissions. If this flag is specified, registry stores are first opened with
            write access and if that fails, they are reopened with read-only access.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreFlags.CERT_STORE_NO_CRYPT_RELEASE_FLAG">
            <summary>
            This flag is not used when the hCryptProv parameter is NULL. This flag is only valid when a non-NULL CSP handle is passed as
            the hCryptProv parameter. Setting this flag prevents the automatic release of a nondefault CSP when the certificate store is closed.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreFlags.CERT_STORE_OPEN_EXISTING_FLAG">
            <summary>Only open an existing store. If the store does not exist, the function fails.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreFlags.CERT_STORE_READONLY_FLAG">
            <summary>
            Open the store in read-only mode. Any attempt to change the contents of the store will result in an error. When this flag is
            set and a registry based store provider is being used, the registry subkeys are opened by using RegOpenKey with
            KEY_READ_ACCESS. Otherwise, the registry subkeys are created by using RegCreateKey with KEY_ALL_ACCESS.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreFlags.CERT_STORE_SET_LOCALIZED_NAME_FLAG">
            <summary>
            If this flag is supported, the provider sets the store's CERT_STORE_LOCALIZED_NAME_PROP_ID property. The localized name can
            be retrieved by calling the CertGetStoreProperty function with dwPropID set to CERT_STORE_LOCALIZED_NAME_PROP_ID. This flag
            is supported for providers of types CERT_STORE_PROV_FILENAME, CERT_STORE_PROV_SYSTEM, CERT_STORE_PROV_SYSTEM_REGISTRY, and CERT_STORE_PROV_PHYSICAL_W.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreFlags.CERT_STORE_SHARE_CONTEXT_FLAG">
            <summary>
            When opening a store multiple times, you can set this flag to ensure efficient memory usage by reusing the memory for the
            encoded parts of a certificate, CRL, or CTL context across the opened instances of the stores.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreFlags.CERT_STORE_SHARE_STORE_FLAG">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreFlags.CERT_STORE_UNSAFE_PHYSICAL_FLAG">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreFlags.CERT_STORE_UPDATE_KEYID_FLAG">
            <summary>
            Lists of key identifiers exist within CurrentUser and LocalMachine. These key identifiers have properties much like the
            properties of certificates. If the CERT_STORE_UPDATE_KEYID_FLAG is set, then for every key identifier in the store's
            location that has a CERT_KEY_PROV_INFO_PROP_ID property, that property is automatically updated from the key identifier
            property CERT_KEY_PROV_INFO_PROP_ID or the CERT_KEY_IDENTIFIER_PROP_ID of the certificate related to that key identifier.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreFlags.CERT_SYSTEM_STORE_RELOCATE_FLAG">
            <summary>
            When set, pvPara must contain a pointer to a CERT_SYSTEM_STORE_RELOCATE_PARA structure rather than a string. The structure
            indicates both the name of the store and its location in the registry.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreFlags.CERT_SYSTEM_STORE_UNPROTECTED_FLAG">
            <summary>
            By default, when the CurrentUser "Root" store is opened, any SystemRegistry roots not on the protected root list are deleted
            from the cache before this function returns. When this flag is set, this default is overridden and all of the roots in the
            SystemRegistry are returned and no check of the protected root list is made.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreFlags.CERT_SYSTEM_STORE_DEFER_READ_FLAG">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreFlags.CERT_REGISTRY_STORE_REMOTE_FLAG">
            <summary>
            pvPara contains a handle to a registry key on a remote computer. To access a registry key on a remote computer, security
            permissions on the remote computer must be set to allow access. For more information, see Remarks.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreFlags.CERT_REGISTRY_STORE_SERIALIZED_FLAG">
            <summary>
            The CERT_STORE_PROV_REG provider saves certificates, CRLs, and CTLs in a single serialized store subkey instead of
            performing the default save operation. The default is that each certificate, CRL, or CTL is saved as a separate registry
            subkey under the appropriate subkey.
            <para>
            This flag is mainly used for stores downloaded from the group policy template (GPT), such as the CurrentUserGroupPolicy and
            LocalMachineGroupPolicy stores.
            </para>
            <para>
            When CERT_REGISTRY_STORE_SERIALIZED_FLAG is set, store additions, deletions, or property changes are not persisted until
            there is a call to either CertCloseStore or CertControlStore using CERT_STORE_CTRL_COMMIT.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreFlags.CERT_FILE_STORE_COMMIT_ENABLE_FLAG">
            <summary>
            Setting this flag commits any additions to the store or any changes made to properties of contexts in the store to the file
            store either when CertCloseStore is called or when CertControlStore is called with CERT_STORE_CONTROL_COMMIT.
            <para>
            CertOpenStore fails with E_INVALIDARG if both CERT_FILE_STORE_COMMIT_ENABLE and CERT_STORE_READONLY_FLAG are set in dwFlags.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreFlags.CERT_LDAP_STORE_SIGN_FLAG">
            <summary>
            To provide integrity required by some applications, digitally sign all LDAP traffic to and from an LDAP server by using the
            Kerberos authentication protocol.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreFlags.CERT_LDAP_STORE_AREC_EXCLUSIVE_FLAG">
            <summary>
            Performs an A-Record-only DNS lookup on the URL named in the pvPara parameter. This prevents false DNS queries from being
            generated when resolving URL host names. Use this flag when passing a host name as opposed to a domain name for the pvPara parameter.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreFlags.CERT_LDAP_STORE_OPENED_FLAG">
            <summary>
            Use this flag to use an existing LDAP session. When this flag is specified, the pvPara parameter is the address of a
            CERT_LDAP_STORE_OPENED_PARA structure that contains information about the LDAP session to use.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreFlags.CERT_LDAP_STORE_UNBIND_FLAG">
            <summary>
            Use this flag with the CERT_LDAP_STORE_OPENED_FLAG flag to cause the LDAP session to be unbound when the store is closed.
            The system will unbind the LDAP session by using the ldap_unbind function when the store is closed.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreFlags.CERT_SYSTEM_STORE_CURRENT_USER">
            <summary>Stores at the registry location <c>HKEY_CURRENT_USER\Software\Microsoft\SystemCertificates</c>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreFlags.CERT_SYSTEM_STORE_LOCAL_MACHINE">
            <summary>Stores at the registry location <c>HKEY_LOCAL_MACHINE\Software\Microsoft\SystemCertificates</c>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreFlags.CERT_SYSTEM_STORE_CURRENT_SERVICE">
            <summary>Stores at the registry location <c>HKEY_LOCAL_MACHINE\Software\Microsoft\Cryptography\Services\ServiceName\SystemCertificates</c>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreFlags.CERT_SYSTEM_STORE_SERVICES">
            <summary>
            Stores at the registry location
            <c>HKEY_LOCAL_MACHINE\Software\Microsoft\Cryptography\Services\ServiceName\SystemCertificates</c> and with keys starting
            with [ServiceName].
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreFlags.CERT_SYSTEM_STORE_USERS">
            <summary>
            Stores at the registry location <c>HKEY_USERS\UserName\Software\Microsoft\SystemCertificates</c> and with keys starting with [userid].
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreFlags.CERT_SYSTEM_STORE_CURRENT_USER_GROUP_POLICY">
            <summary>Stores at the registry location <c>HKEY_CURRENT_USER\Software\Policy\Microsoft\SystemCertificates</c>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreFlags.CERT_SYSTEM_STORE_LOCAL_MACHINE_GROUP_POLICY">
            <summary>Stores at the registry location <c>HKEY_LOCAL_MACHINE\Software\Policy\Microsoft\SystemCertificates</c>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreFlags.CERT_SYSTEM_STORE_LOCAL_MACHINE_ENTERPRISE">
            <summary>
            CERT_SYSTEM_STORE_LOCAL_MACHINE_ENTERPRISE contains certificates shared across domains in the enterprise and downloaded from
            the global enterprise directory. To synchronize the client's enterprise store, the enterprise directory is polled every
            eight hours and certificates are downloaded automatically in the background.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreFlags.CERT_SYSTEM_STORE_LOCAL_MACHINE_WCOS">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CertStoreSaveAs">
            <summary>Specifies how to save the certificate store.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreSaveAs.CERT_STORE_SAVE_AS_STORE">
            <summary>
            The certificate store can be saved as a serialized store containing properties in addition to encoded certificates,
            certificate revocation lists (CRLs), and certificate trust lists (CTLs). The dwEncodingType parameter is ignored. <note>The
            CERT_KEY_CONTEXT_PROP_ID property and the related CERT_KEY_PROV_HANDLE_PROP_ID and CERT_KEY_SPEC_PROP_ID values are not
            saved to a serialized store.</note>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreSaveAs.CERT_STORE_SAVE_AS_PKCS7">
            <summary>
            The certificate store can be saved as a PKCS #7 signed message that does not include additional properties. The
            dwEncodingType parameter specifies the message encoding type.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreSaveAs.CERT_STORE_SAVE_AS_PKCS12">
            <summary>
            The certificate store can be saved as a PKCS #12 signed message that does not include additional properties. The
            dwEncodingType parameter specifies the message encoding type.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CertStoreSaveTo">
            <summary>Specifies where and how to save the certificate store.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreSaveTo.CERT_STORE_SAVE_TO_FILE">
            <summary>
            The function saves the certificate store to a file. The pvSaveToPara parameter contains a handle to a file previously
            obtained by using the CreateFile function. The file must be opened with write permission. After a successful save operation,
            the file pointer is positioned after the last write operation.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreSaveTo.CERT_STORE_SAVE_TO_MEMORY">
            <summary>
            The function saves the certificate store to a memory BLOB. The pvSaveToPara parameter contains a pointer to a CERT_BLOB
            structure. Before use, the CERT_BLOB's pbData and cbData members must be initialized. Upon return, cbData is updated with
            the actual length. For a length-only calculation, pbData must be set to NULL. If pbData is non-NULL and cbData is not large
            enough, the function returns zero with a last error code of ERROR_MORE_DATA.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreSaveTo.CERT_STORE_SAVE_TO_FILENAME_A">
            <summary>
            The function saves the certificate store to a file. The pvSaveToPara parameter contains a pointer to a null-terminated ANSI
            string that contains the path and file name of the file to save to. The function opens the file, saves to it, and closes it.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreSaveTo.CERT_STORE_SAVE_TO_FILENAME_W">
            <summary>
            The function saves the certificate store to a file. The pvSaveToPara parameter contains a pointer to a null-terminated
            Unicode string that contains the path and file name of the file to save to. The function opens the file, saves to it, and
            closes it.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreSaveTo.CERT_STORE_SAVE_TO_FILENAME">
            <summary>
            The function saves the certificate store to a file. The pvSaveToPara parameter contains a pointer to a null-terminated
            Unicode string that contains the path and file name of the file to save to. The function opens the file, saves to it, and
            closes it.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CertSystemStore">
            <summary>
            A system store is a collection that consists of one or more physical sibling stores. For each system store, there are predefined
            physical sibling stores. After opening a system store such as MY at CERT_SYSTEM_STORE_CURRENT_USER, the store provider calls
            CertOpenStore to open each of the physical stores in the system store collection. In the open process, each of these physical
            stores is added to the system store collection using CertAddStoreToCollection. All certificates in those physical stores are
            available through the logical system store collection.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertSystemStore.CERT_SYSTEM_STORE_CURRENT_USER">
            <summary>Stores at the registry location <c>HKEY_CURRENT_USER\Software\Microsoft\SystemCertificates</c>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertSystemStore.CERT_SYSTEM_STORE_LOCAL_MACHINE">
            <summary>Stores at the registry location <c>HKEY_LOCAL_MACHINE\Software\Microsoft\SystemCertificates</c>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertSystemStore.CERT_SYSTEM_STORE_CURRENT_SERVICE">
            <summary>Stores at the registry location <c>HKEY_LOCAL_MACHINE\Software\Microsoft\Cryptography\Services\ServiceName\SystemCertificates</c>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertSystemStore.CERT_SYSTEM_STORE_SERVICES">
            <summary>
            Stores at the registry location
            <c>HKEY_LOCAL_MACHINE\Software\Microsoft\Cryptography\Services\ServiceName\SystemCertificates</c> and with keys starting
            with [ServiceName].
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertSystemStore.CERT_SYSTEM_STORE_USERS">
            <summary>
            Stores at the registry location <c>HKEY_USERS\UserName\Software\Microsoft\SystemCertificates</c> and with keys starting with [userid].
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertSystemStore.CERT_SYSTEM_STORE_CURRENT_USER_GROUP_POLICY">
            <summary>Stores at the registry location <c>HKEY_CURRENT_USER\Software\Policy\Microsoft\SystemCertificates</c>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertSystemStore.CERT_SYSTEM_STORE_LOCAL_MACHINE_GROUP_POLICY">
            <summary>Stores at the registry location <c>HKEY_LOCAL_MACHINE\Software\Policy\Microsoft\SystemCertificates</c>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertSystemStore.CERT_SYSTEM_STORE_LOCAL_MACHINE_ENTERPRISE">
            <summary>
            CERT_SYSTEM_STORE_LOCAL_MACHINE_ENTERPRISE contains certificates shared across domains in the enterprise and downloaded from
            the global enterprise directory. To synchronize the client's enterprise store, the enterprise directory is polled every
            eight hours and certificates are downloaded automatically in the background.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertSystemStore.CERT_SYSTEM_STORE_LOCAL_MACHINE_WCOS">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CertSystemStoreId">
            <summary>Values used by <see cref="T:Vanara.PInvoke.Crypt32.CertSystemStore"/>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertSystemStoreId.CERT_SYSTEM_STORE_CURRENT_USER_ID">
            <summary>Stores at the registry location <c>HKEY_CURRENT_USER\Software\Microsoft\SystemCertificates</c>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertSystemStoreId.CERT_SYSTEM_STORE_LOCAL_MACHINE_ID">
            <summary>Stores at the registry location <c>HKEY_LOCAL_MACHINE\Software\Microsoft\SystemCertificates</c>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertSystemStoreId.CERT_SYSTEM_STORE_CURRENT_SERVICE_ID">
            <summary>Stores at the registry location <c>HKEY_LOCAL_MACHINE\Software\Microsoft\Cryptography\Services\ServiceName\SystemCertificates</c>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertSystemStoreId.CERT_SYSTEM_STORE_SERVICES_ID">
            <summary>
            Stores at the registry location
            <c>HKEY_LOCAL_MACHINE\Software\Microsoft\Cryptography\Services\ServiceName\SystemCertificates</c> and with keys starting
            with [ServiceName].
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertSystemStoreId.CERT_SYSTEM_STORE_USERS_ID">
            <summary>
            Stores at the registry location <c>HKEY_USERS\UserName\Software\Microsoft\SystemCertificates</c> and with keys starting with [userid].
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertSystemStoreId.CERT_SYSTEM_STORE_CURRENT_USER_GROUP_POLICY_ID">
            <summary>Stores at the registry location <c>HKEY_CURRENT_USER\Software\Policy\Microsoft\SystemCertificates</c>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertSystemStoreId.CERT_SYSTEM_STORE_LOCAL_MACHINE_GROUP_POLICY_ID">
            <summary>Stores at the registry location <c>HKEY_LOCAL_MACHINE\Software\Policy\Microsoft\SystemCertificates</c>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertSystemStoreId.CERT_SYSTEM_STORE_LOCAL_MACHINE_ENTERPRISE_ID">
            <summary>
            CERT_SYSTEM_STORE_LOCAL_MACHINE_ENTERPRISE contains certificates shared across domains in the enterprise and downloaded from
            the global enterprise directory. To synchronize the client's enterprise store, the enterprise directory is polled every
            eight hours and certificates are downloaded automatically in the background.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertSystemStoreId.CERT_SYSTEM_STORE_LOCAL_MACHINE_WCOS_ID">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CtlCertSubject">
            <summary>Specifies the type of subject to be searched for in the CTL.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CtlCertSubject.CTL_DEFAULT_SUBJECT_TYPE">
            <summary>Default subject type.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CtlCertSubject.CTL_ANY_SUBJECT_TYPE">
            <term>
            pvSubject data type: Pointer to a CERT_CONTEXT structure. The CTL's SubjectAlgorithm is examined to determine the
            representation of the subject's identity. Initially, only SHA1 and MD5 hashes are supported as values for SubjectAlgorithm.
            The appropriate hash property is obtained from the CERT_CONTEXT structure.
            </term>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CtlCertSubject.CTL_CERT_SUBJECT_TYPE">
            <term>
            pvSubject data type: Pointer to a CTL_ANY_SUBJECT_INFO structure. The SubjectAlgorithm member of this structure must match
            the algorithm type of the CTL, and the SubjectIdentifier member must match one of the CTL entries.
            </term>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertAddSerializedElementToStore(Vanara.PInvoke.Crypt32.HCERTSTORE,System.IntPtr,System.UInt32,Vanara.PInvoke.Crypt32.CertStoreAdd,System.UInt32,Vanara.PInvoke.Crypt32.CertStoreContextFlags,Vanara.PInvoke.Crypt32.CertStoreContextType@,System.IntPtr@)">
            <summary>
            The <c>CertAddSerializedElementToStore</c> function adds a serialized certificate, certificate revocation list (CRL), or
            certificate trust list (CTL) element to the store. The serialized element contains the encoded certificate, CRL, or CTL and its
            extended properties. Extended properties are associated with a certificate and are not part of a certificate as issued by a
            certification authority. Extended properties are not available on a certificate when it is used on a non-Microsoft platform.
            </summary>
            <param name="hCertStore">
            The handle of a certificate store where the created certificate will be stored. If hCertStore is <c>NULL</c>, the function
            creates a copy of a certificate, CRL, or CTL context with its extended properties, but the certificate, CRL, or CTL is not
            persisted in any store.
            </param>
            <param name="pbElement">
            A pointer to a buffer that contains the certificate, CRL, or CTL information to be serialized and added to the certificate store.
            </param>
            <param name="cbElement">The size, in bytes, of the pbElement buffer.</param>
            <param name="dwAddDisposition">
            <para>
            Specifies the action to take if the certificate, CRL, or CTL already exists in the store. Currently defined disposition values
            are shown in the following table.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_STORE_ADD_NEW</term>
            <term>
            If the certificate, CRL, or CTL is new, it is created and persisted to the store. The operation fails if an identical
            certificate, CRL, or CTL already exists in the store. The last error code is set to CRYPT_E_EXISTS.
            </term>
            </item>
            <item>
            <term>CERT_STORE_ADD_USE_EXISTING</term>
            <term>
            If the certificate, CRL, or CTL is new, it is added to the store. If an identical certificate, CRL, or CTL already exists, the
            existing element is used. If ppvContext is not NULL, the existing context is duplicated. The function only adds properties that
            do not already exist. The SHA-1 and MD5 hash properties are not copied.
            </term>
            </item>
            <item>
            <term>CERT_STORE_ADD_REPLACE_EXISTING</term>
            <term>
            If an identical certificate, CRL, or CTL already exists in the store, the existing certificate, CRL, or CTL context is deleted
            before creating and adding the new context.
            </term>
            </item>
            <item>
            <term>CERT_STORE_ADD_ALWAYS</term>
            <term>
            No check is made to determine whether an identical certificate, CRL, or CTL already exists. A new element is always created.
            This can lead to duplicates in the store. To determine whether the element already exists in the store, call CertGetCRLFromStore
            or CertGetSubjectCertificateFromStore.
            </term>
            </item>
            <item>
            <term>CERT_STORE_ADD_NEWER</term>
            <term>
            If a matching CRL or CTL or a link to a matching CRL or CTL exists, the function compares the NotBefore times on the CRL or CTL.
            If the existing CRL or CTL has a NotBefore time less than the NotBefore time on the new element, the old element or link is
            replaced just as with CERT_STORE_ADD_REPLACE_EXISTING. If the existing element has a NotBefore time greater than or equal to the
            NotBefore time on the element to be added, the function fails with GetLastError returning the CRYPT_E_EXISTS code. If a matching
            CRL or CTL or a link to a matching CRL or CTL is not found in the store, a new element is added to the store.
            </term>
            </item>
            <item>
            <term>CERT_STORE_ADD_NEWER_INHERIT_PROPERTIES</term>
            <term>
            The action is the same as for CERT_STORE_ADD_NEWER. However, if an older CRL or CTL is replaced, the properties of the older
            element are incorporated into the replacement.
            </term>
            </item>
            <item>
            <term>CERT_STORE_ADD_REPLACE_EXISTING_INHERIT_PROPERTIES</term>
            <term>
            If a matching certificate exists in the store, the existing context is deleted before creating and adding the new context. The
            new added context inherits properties from the existing certificate.
            </term>
            </item>
            </list>
            </param>
            <param name="dwFlags">Reserved for future use and must be zero.</param>
            <param name="dwContextTypeFlags">
            <para>
            Specifics the contexts that can be added. For example, to add either a certificate, CRL, or CTL, set dwContextTypeFlags to
            <c>CERT_STORE_CERTIFICATE_CONTEXT_FLAG</c> or <c>CERT_STORE_CRL_CONTEXT_FLAG</c>.
            </para>
            <para>Currently defined context type flags are shown in the following table.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_STORE_ALL_CONTEXT_FLAG</term>
            <term>Adds any context.</term>
            </item>
            <item>
            <term>CERT_STORE_CERTIFICATE_CONTEXT_FLAG</term>
            <term>Adds only a certificate context.</term>
            </item>
            <item>
            <term>CERT_STORE_CRL_CONTEXT_FLAG</term>
            <term>Adds only a CRL context.</term>
            </item>
            <item>
            <term>CERT_STORE_CTL_CONTEXT_FLAG</term>
            <term>Adds only a CTL context.</term>
            </item>
            </list>
            </param>
            <param name="pdwContextType">
            <para>
            A pointer to the context type of the added serialized element. This is an optional parameter and can be <c>NULL</c>, which
            indicates that the calling application does not require the context type.
            </para>
            <para>Currently defined context types are shown in the following table.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_STORE_CERTIFICATE_CONTEXT</term>
            <term>Certificates</term>
            </item>
            <item>
            <term>CERT_STORE_CRL_CONTEXT</term>
            <term>CRLs</term>
            </item>
            <item>
            <term>CERT_STORE_CTL_CONTEXT</term>
            <term>CTLs</term>
            </item>
            </list>
            </param>
            <param name="ppvContext">
            <para>
            A pointer to a pointer to the decoded certificate, CRL, or CTL context. This is an optional parameter and can be <c>NULL</c>,
            which indicates that the calling application does not require the context of the added or existing certificate, CRL, or CTL.
            </para>
            <para>
            If ppvContext is not <c>NULL</c>, it must be the address of a pointer to a CERT_CONTEXT, CRL_CONTEXT, or CTL_CONTEXT. When the
            application is finished with the context, the context must be freed by using CertFreeCertificateContext for a certificate,
            CertFreeCRLContext for a CRL, or CertFreeCTLContext for a CTL.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the function returns nonzero.</para>
            <para>If the function fails, it returns zero. For extended error information, call GetLastError. Some possible error codes follow.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>CRYPT_E_EXISTS</term>
            <term>If the dwAddDisposition parameter is set to CERT_STORE_ADD_NEW, the certificate, CRL, or CTL already exists in the store.</term>
            </item>
            <item>
            <term>E_INVALIDARG</term>
            <term>A disposition value that is not valid was specified in the dwAddDisposition parameter.</term>
            </item>
            </list>
            <para>
            If the function fails, GetLastError may return an Abstract Syntax Notation One (ASN.1) encoding/decoding error. For information
            about these errors, see ASN.1 Encoding/Decoding Return Values.
            </para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertAddSerializedElementToStore(Vanara.PInvoke.Crypt32.HCERTSTORE,System.IntPtr,System.UInt32,Vanara.PInvoke.Crypt32.CertStoreAdd,System.UInt32,Vanara.PInvoke.Crypt32.CertStoreContextFlags,System.IntPtr,System.IntPtr)">
            <summary>
            The <c>CertAddSerializedElementToStore</c> function adds a serialized certificate, certificate revocation list (CRL), or
            certificate trust list (CTL) element to the store. The serialized element contains the encoded certificate, CRL, or CTL and its
            extended properties. Extended properties are associated with a certificate and are not part of a certificate as issued by a
            certification authority. Extended properties are not available on a certificate when it is used on a non-Microsoft platform.
            </summary>
            <param name="hCertStore">
            The handle of a certificate store where the created certificate will be stored. If hCertStore is <c>NULL</c>, the function
            creates a copy of a certificate, CRL, or CTL context with its extended properties, but the certificate, CRL, or CTL is not
            persisted in any store.
            </param>
            <param name="pbElement">
            A pointer to a buffer that contains the certificate, CRL, or CTL information to be serialized and added to the certificate store.
            </param>
            <param name="cbElement">The size, in bytes, of the pbElement buffer.</param>
            <param name="dwAddDisposition">
            <para>
            Specifies the action to take if the certificate, CRL, or CTL already exists in the store. Currently defined disposition values
            are shown in the following table.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_STORE_ADD_NEW</term>
            <term>
            If the certificate, CRL, or CTL is new, it is created and persisted to the store. The operation fails if an identical
            certificate, CRL, or CTL already exists in the store. The last error code is set to CRYPT_E_EXISTS.
            </term>
            </item>
            <item>
            <term>CERT_STORE_ADD_USE_EXISTING</term>
            <term>
            If the certificate, CRL, or CTL is new, it is added to the store. If an identical certificate, CRL, or CTL already exists, the
            existing element is used. If ppvContext is not NULL, the existing context is duplicated. The function only adds properties that
            do not already exist. The SHA-1 and MD5 hash properties are not copied.
            </term>
            </item>
            <item>
            <term>CERT_STORE_ADD_REPLACE_EXISTING</term>
            <term>
            If an identical certificate, CRL, or CTL already exists in the store, the existing certificate, CRL, or CTL context is deleted
            before creating and adding the new context.
            </term>
            </item>
            <item>
            <term>CERT_STORE_ADD_ALWAYS</term>
            <term>
            No check is made to determine whether an identical certificate, CRL, or CTL already exists. A new element is always created.
            This can lead to duplicates in the store. To determine whether the element already exists in the store, call CertGetCRLFromStore
            or CertGetSubjectCertificateFromStore.
            </term>
            </item>
            <item>
            <term>CERT_STORE_ADD_NEWER</term>
            <term>
            If a matching CRL or CTL or a link to a matching CRL or CTL exists, the function compares the NotBefore times on the CRL or CTL.
            If the existing CRL or CTL has a NotBefore time less than the NotBefore time on the new element, the old element or link is
            replaced just as with CERT_STORE_ADD_REPLACE_EXISTING. If the existing element has a NotBefore time greater than or equal to the
            NotBefore time on the element to be added, the function fails with GetLastError returning the CRYPT_E_EXISTS code. If a matching
            CRL or CTL or a link to a matching CRL or CTL is not found in the store, a new element is added to the store.
            </term>
            </item>
            <item>
            <term>CERT_STORE_ADD_NEWER_INHERIT_PROPERTIES</term>
            <term>
            The action is the same as for CERT_STORE_ADD_NEWER. However, if an older CRL or CTL is replaced, the properties of the older
            element are incorporated into the replacement.
            </term>
            </item>
            <item>
            <term>CERT_STORE_ADD_REPLACE_EXISTING_INHERIT_PROPERTIES</term>
            <term>
            If a matching certificate exists in the store, the existing context is deleted before creating and adding the new context. The
            new added context inherits properties from the existing certificate.
            </term>
            </item>
            </list>
            </param>
            <param name="dwFlags">Reserved for future use and must be zero.</param>
            <param name="dwContextTypeFlags">
            <para>
            Specifics the contexts that can be added. For example, to add either a certificate, CRL, or CTL, set dwContextTypeFlags to
            <c>CERT_STORE_CERTIFICATE_CONTEXT_FLAG</c> or <c>CERT_STORE_CRL_CONTEXT_FLAG</c>.
            </para>
            <para>Currently defined context type flags are shown in the following table.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_STORE_ALL_CONTEXT_FLAG</term>
            <term>Adds any context.</term>
            </item>
            <item>
            <term>CERT_STORE_CERTIFICATE_CONTEXT_FLAG</term>
            <term>Adds only a certificate context.</term>
            </item>
            <item>
            <term>CERT_STORE_CRL_CONTEXT_FLAG</term>
            <term>Adds only a CRL context.</term>
            </item>
            <item>
            <term>CERT_STORE_CTL_CONTEXT_FLAG</term>
            <term>Adds only a CTL context.</term>
            </item>
            </list>
            </param>
            <param name="pdwContextType">
            <para>
            A pointer to the context type of the added serialized element. This is an optional parameter and can be <c>NULL</c>, which
            indicates that the calling application does not require the context type.
            </para>
            <para>Currently defined context types are shown in the following table.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_STORE_CERTIFICATE_CONTEXT</term>
            <term>Certificates</term>
            </item>
            <item>
            <term>CERT_STORE_CRL_CONTEXT</term>
            <term>CRLs</term>
            </item>
            <item>
            <term>CERT_STORE_CTL_CONTEXT</term>
            <term>CTLs</term>
            </item>
            </list>
            </param>
            <param name="ppvContext">
            <para>
            A pointer to a pointer to the decoded certificate, CRL, or CTL context. This is an optional parameter and can be <c>NULL</c>,
            which indicates that the calling application does not require the context of the added or existing certificate, CRL, or CTL.
            </para>
            <para>
            If ppvContext is not <c>NULL</c>, it must be the address of a pointer to a CERT_CONTEXT, CRL_CONTEXT, or CTL_CONTEXT. When the
            application is finished with the context, the context must be freed by using CertFreeCertificateContext for a certificate,
            CertFreeCRLContext for a CRL, or CertFreeCTLContext for a CTL.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the function returns nonzero.</para>
            <para>If the function fails, it returns zero. For extended error information, call GetLastError. Some possible error codes follow.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>CRYPT_E_EXISTS</term>
            <term>If the dwAddDisposition parameter is set to CERT_STORE_ADD_NEW, the certificate, CRL, or CTL already exists in the store.</term>
            </item>
            <item>
            <term>E_INVALIDARG</term>
            <term>A disposition value that is not valid was specified in the dwAddDisposition parameter.</term>
            </item>
            </list>
            <para>
            If the function fails, GetLastError may return an Abstract Syntax Notation One (ASN.1) encoding/decoding error. For information
            about these errors, see ASN.1 Encoding/Decoding Return Values.
            </para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertAddStoreToCollection(Vanara.PInvoke.Crypt32.HCERTSTORE,Vanara.PInvoke.Crypt32.HCERTSTORE,Vanara.PInvoke.Crypt32.CertPhysicalStoreFlags,System.UInt32)">
            <summary>
            The <c>CertAddStoreToCollection</c> function adds a sibling certificate store to a collection certificate store. When a
            certificate store has been added to a collection store, all of the certificates, certificate revocation lists (CRLs), and
            certificate trust lists (CTLs) in the store that has been added to the collection store can be retrieved by using find or
            enumerate function calls that use the collection store.
            </summary>
            <param name="hCollectionStore">Handle of a certificate store.</param>
            <param name="hSiblingStore">Handle of a sibling store to be added to the collection store. For more information, see Remarks.</param>
            <param name="dwUpdateFlags">
            Indicates whether certificates, CRLs, and CTLs can be added to the new sibling store member of the collection store. To enable
            addition, set dwUpdateFlag to CERT_PHYSICAL_STORE_ADD_ENABLE_FLAG. To disable additions, set dwUpdateFlag to zero.
            </param>
            <param name="dwPriority">
            Sets a priority level of the new store in the collection, with zero being the lowest priority. If zero is passed for this
            parameter, the specified store is appended as the last store in the collection. The priority levels of the stores in a
            collection determine the order in which the stores are enumerated, and the search order of the stores when attempting to
            retrieve a certificate, CRL, or CTL. Priority levels also determine to which store of a collection a new certificate, CRL, or
            CTL is added. For more information, see Remarks.
            </param>
            <returns>
            <para>If the function succeeds, the function returns nonzero and a new store is added to the collection of stores.</para>
            <para>If the function fails, it returns zero and the store was not added.</para>
            </returns>
            <remarks>
            <para>
            A collection store has the same <c>HCERTSTORE</c> handle as a single store; thus, almost all functions that apply to any
            certificate store also apply to any collection store. Enumeration and search processes span all of the stores in a collection
            store; however, functions such as CertAddCertificateLinkToStore that add links to stores cannot be used with collection stores.
            </para>
            <para>
            When a certificate, CRL, or CTL is added to a collection store, the list of sibling stores in the collection is searched in
            priority order to find the first store that allows adding. Adding is enabled if CERT_PHYSICAL_STORE_ADD_ENABLE_FLAG was set in
            the <c>CertAddStoreToCollection</c> call. With any function that adds elements to a store, if a store that allows adding does
            not return success, the addition function continues on to the next store without providing notification.
            </para>
            <para>
            When a collection store and its sibling stores are closed with CertCloseStore using CERT_CLOSE_STORE_FORCE_FLAG, the collection
            store must be closed before its sibling stores. If CERT_CLOSE_STORE_FORCE_FLAG is not used, the stores can be closed in any order.
            </para>
            <para>Examples</para>
            <para>
            The following example shows adding a sibling certificate store to a collection certificate store. For a full example including
            the complete context for this example, see Example C Program: Collection and Sibling Certificate Store Operations.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertCloseStore(Vanara.PInvoke.Crypt32.HCERTSTORE,Vanara.PInvoke.Crypt32.CertCloseStoreFlags)">
            <summary>
            The <c>CertCloseStore</c> function closes a certificate store handle and reduces the reference count on the store. There needs
            to be a corresponding call to <c>CertCloseStore</c> for each successful call to the CertOpenStore or CertDuplicateStore functions.
            </summary>
            <param name="hCertStore">Handle of the certificate store to be closed.</param>
            <param name="dwFlags">
            <para>
            Typically, this parameter uses the default value zero. The default is to close the store with memory remaining allocated for
            contexts that have not been freed. In this case, no check is made to determine whether memory for contexts remains allocated.
            </para>
            <para>
            Set flags can force the freeing of memory for all of a store's certificate, certificate revocation list (CRL), and certificate
            trust list (CTL) contexts when the store is closed. Flags can also be set that check whether all of the store's certificate,
            CRL, and CTL contexts have been freed. The following values are defined.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_CLOSE_STORE_CHECK_FLAG</term>
            <term>
            Checks for nonfreed certificate, CRL, and CTL contexts. A returned error code indicates that one or more store elements is still
            in use. This flag should only be used as a diagnostic tool in the development of applications.
            </term>
            </item>
            <item>
            <term>CERT_CLOSE_STORE_FORCE_FLAG</term>
            <term>
            Forces the freeing of memory for all contexts associated with the store. This flag can be safely used only when the store is
            opened in a function and neither the store handle nor any of its contexts are passed to any called functions. For details, see Remarks.
            </term>
            </item>
            </list>
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. For extended error information, call GetLastError.</para>
            <para>
            If CERT_CLOSE_STORE_CHECK_FLAG is not set or if it is set and all contexts associated with the store have been freed, the return
            value is <c>TRUE</c>.
            </para>
            <para>
            If CERT_CLOSE_STORE_CHECK_FLAG is set and memory for one or more contexts associated with the store remains allocated, the
            return value is <c>FALSE</c>. The store is always closed even when the function returns <c>FALSE</c>. For details, see Remarks.
            </para>
            <para>
            GetLastError is set to CRYPT_E_PENDING_CLOSE if memory for contexts associated with the store remains allocated. Any existing
            value returned by <c>GetLastError</c> is preserved unless CERT_CLOSE_STORE_CHECK_FLAG is set.
            </para>
            </returns>
            <remarks>
            <para>
            While a certificate store is open, contexts from that store can be retrieved or duplicated. When a context is retrieved or
            duplicated, its reference count is incremented. When a context is freed by passing it to a search or enumeration function as a
            previous context or by using CertFreeCertificateContext, CertFreeCRLContext, or CertFreeCTLContext, its reference count is
            decremented. When a context's reference count reaches zero, memory allocated for that context is automatically freed. When the
            memory allocated for a context has been freed, any pointers to that context become not valid.
            </para>
            <para>
            By default, memory used to store contexts with reference count greater than zero is not freed when a certificate store is
            closed. References to those contexts remain valid; however, this can cause memory leaks. Also, any changes made to the
            properties of a context after the store has been closed are not persisted.
            </para>
            <para>
            To force the freeing of memory for all contexts associated with a store, set CERT_CLOSE_STORE_FORCE_FLAG. With this flag set,
            memory for all contexts associated with the store is freed and all pointers to certificate, CRL, or CTL contexts associated with
            the store become not valid. This flag should only be set when the store is opened in a function and neither the store handle nor
            any of its contexts were ever passed to any called functions.
            </para>
            <para>
            The status of reference counts on contexts associated with a store can be checked when the store is closed by using
            CERT_CLOSE_STORE_CHECK_FLAG. When this flag is set, and all certificate, CRL, or CTL contexts have not been released, the
            function returns <c>FALSE</c> and GetLastError returns CRYPT_E_PENDING_CLOSE. Note that the store is still closed when
            <c>FALSE</c> is returned and the memory for any active contexts is not freed.
            </para>
            <para>If CERT_STORE_NO_CRYPT_RELEASE_FLAG was not set when the store was opened, closing a store releases its CSP handle.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertControlStore(Vanara.PInvoke.Crypt32.HCERTSTORE,Vanara.PInvoke.Crypt32.CertStoreControlFlags,Vanara.PInvoke.Crypt32.CertStoreControlType,System.IntPtr)">
            <summary>
            <para>
            The <c>CertControlStore</c> function allows an application to be notified when there is a difference between the contents of a
            cached store in use and the contents of that store as it is persisted to storage. Differences can occur as another process makes
            a change that affects the store as it is persisted.
            </para>
            <para>
            The <c>CertControlStore</c> function can be used to synchronize a cached store, if necessary, and provides a means to commit
            changes made in the cached store to persisted storage.
            </para>
            </summary>
            <param name="hCertStore">Handle of the certificate store.</param>
            <param name="dwFlags">
            <para>If the dwCtrlType parameter is set to CERT_STORE_CTRL_COMMIT, this parameter can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_STORE_CTRL_COMMIT_FORCE_FLAG</term>
            <term>Forces the contents of the cache memory store to be copied to permanent storage even if the cache has not been changed.</term>
            </item>
            <item>
            <term>CERT_STORE_CTRL_COMMIT_CLEAR_FLAG</term>
            <term>Inhibits the copying of the contents of the cache memory store to permanent storage even when the store is closed.</term>
            </item>
            <item>
            <term>CERT_STORE_CTRL_INHIBIT_DUPLICATE_HANDLE_FLAG</term>
            <term>
            Inhibits a duplicate handle of the event HANDLE. If this flag is set, CertControlStore with CERT_STORE_CTRL_CANCEL_NOTIFY passed
            must be called for this event HANDLE before closing the hCertStore handle.
            </term>
            </item>
            </list>
            <para>
            If dwCtrlType is set to CERT_STORE_CTRL_NOTIFY_CHANGE or CERT_STORE_CTRL_RESYNC, the dwFlags parameter is not used and must be
            set to zero.
            </para>
            </param>
            <param name="dwCtrlType">
            <para>
            Control action to be taken by <c>CertControlStore</c>. The interpretations of pvCtrlPara and dwFlags depend on the value of
            dwCtrlType. Currently, the following actions are defined.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_STORE_CTRL_RESYNC</term>
            <term>The cached store is resynchronized and made to match the persisted store.</term>
            </item>
            <item>
            <term>CERT_STORE_CTRL_NOTIFY_CHANGE</term>
            <term>
            A signal is returned in the space pointed to by pvCtrlPara to indicate that the current contents of the cached store differ from
            the store's persisted state.
            </term>
            </item>
            <item>
            <term>CERT_STORE_CTRL_COMMIT</term>
            <term>
            Any changes made to the cached store are copied to persisted storage. If no changes were made since the cached store was opened
            or since the last commit, the call is ignored. The call is also ignored if the store provider is a provider that automatically
            persists changes immediately.
            </term>
            </item>
            <item>
            <term>CERT_STORE_CTRL_AUTO_RESYNC</term>
            <term>
            At the start of every enumeration or find store call, a check is made to determine whether a change has been made in the store.
            If the store has changed, a re-synchronization is done. This check is only done on first enumeration or find calls, when the
            pPrevContext is NULL. The pvCtrPara member is not used and must be set to NULL.
            </term>
            </item>
            <item>
            <term>CERT_STORE_CTRL_CANCEL_NOTIFY</term>
            <term>
            Cancels notification signaling of the event HANDLE passed in a previous CERT_STORE_CTRL_NOTIFY_CHANGE or CERT_STORE_CTRL_RESYNC.
            The pvCtrlPara parameter points to the event HANDLE to be canceled.
            </term>
            </item>
            </list>
            </param>
            <param name="pvCtrlPara">
            <para>
            If dwCtrlType is CERT_STORE_NOTIFY_CHANGE, pvCtrlPara is set to the address of a handle where the system signals the
            notification change event when a change from the persisted state of the store is detected. The handle must be initialized with a
            call to the function CreateEvent. The pvCtrlPara parameter can be set to <c>NULL</c> for registry-based stores. If pvCtrlPara is
            <c>NULL</c>, an internal notification change event is created and registered to be signaled. Using the internal notification
            change event allows resynchronization operations only if the store was changed.
            </para>
            <para>
            If dwCtrlType is CERT_STORE_CTRL_RESYNC, set pvCtrlPara to the address of the event handle to be signaled on the next change in
            the persisted store. Typically, this address is the address of the event handle passed with CERT_STORE_CTRL_NOTIFY_CHANGE during
            initialization. The event handle passed is rearmed. If pvCtrlPara is set to <c>NULL</c>, no event is rearmed.
            </para>
            <para>If dwCtrlType CERT_STORE_CTRL_COMMIT, pvCtrlPara is not used and must be set to <c>NULL</c>.</para>
            </param>
            <returns>
            <para>If the function succeeds, the function returns nonzero.</para>
            <para>If the function fails, it returns zero. For extended error information, call GetLastError.</para>
            <para>
            If dwCtrlType is CERT_STORE_NOTIFY_CHANGE, the function returns nonzero if a handle for the event signal was successfully set
            up. The function returns zero if the event handle was not set up.
            </para>
            <para>
            If dwCtrlType is CERT_STORE_CTRL_RESYNC, the function returns nonzero if the resynchronization succeeded. The function returns
            zero if the resynchronization failed.
            </para>
            <para>
            If dwCtrlType is CERT_STORE_CTRL_COMMIT, the function returns nonzero to indicate the successful completion of the commit to
            persisted storage. The function returns zero if the commit failed.
            </para>
            <para>
            Some providers might not support specific control types. In these cases, <c>CertControlStore</c> returns zero and GetLastError
            is set to the ERROR_NOT_SUPPORTED code.
            </para>
            </returns>
            <remarks>
            <para>Resynchronization of a store can be done at any time. It need not follow a signaled notification change event.</para>
            <para>CERT_STORE_CTRL_NOTIFY_CHANGE is supported on registry-based store providers by using the RegNotifyChangeKeyValue function.</para>
            <para>
            <c>CertControlStore</c> using CERT_STORE_CTRL_NOTIFY_CHANGE is called once for each event handle to be passed with
            CERT_STORE_CTRL_RESYNC. These calls using CERT_STORE_CTRL_NOTIFY_CHANGE must be made after each event is created and not after
            an event has been signaled.
            </para>
            <para>Examples</para>
            <para>
            The following example shows allowing an application to be notified when there is a difference between the contents of a cached
            store in use and the contents of that store as it is persisted to storage. For the full example including the complete context
            for this example, see Example C Program: Setting and Getting Certificate Store Properties.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertCreateContext(Vanara.PInvoke.Crypt32.CertStoreContextType,Vanara.PInvoke.Crypt32.CertEncodingType,System.IntPtr,System.UInt32,Vanara.PInvoke.Crypt32.CertCreateContextFlags,Vanara.PInvoke.Crypt32.CERT_CREATE_CONTEXT_PARA@)">
            <summary>
            The <c>CertCreateContext</c> function creates the specified context from the encoded bytes. The context created does not include
            any extended properties.
            </summary>
            <param name="dwContextType">
            <para>Specifies the contexts that can be created. For example, to create a certificate context, set dwContextType to CERT_STORE_CERTIFICATE_CONTEXT.</para>
            <para>Currently defined context type flags are shown in the following table.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_STORE_CERTIFICATE_CONTEXT</term>
            <term>Certificate context.</term>
            </item>
            <item>
            <term>CERT_STORE_CRL_CONTEXT</term>
            <term>CRL context.</term>
            </item>
            <item>
            <term>CERT_STORE_CTL_CONTEXT</term>
            <term>CTL context.</term>
            </item>
            </list>
            </param>
            <param name="dwEncodingType">
            <para>
            Specifies the encoding type used. Currently, only X509_ASN_ENCODING and PKCS_7_ASN_ENCODING are being used; however, additional
            encoding types may be added in the future. For either current encoding type, use:
            </para>
            <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING.</para>
            </param>
            <param name="pbEncoded">A pointer to a buffer that contains the existing encoded context content to be copied.</param>
            <param name="cbEncoded">The size, in bytes, of the pbEncoded buffer.</param>
            <param name="dwFlags">
            <para>The following flag values are defined and can be combined by using a bitwise- <c>OR</c> operation.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_CREATE_CONTEXT_NOCOPY_FLAG</term>
            <term>The created context points directly to the content pointed to by pbEncoded instead of an allocated copy.</term>
            </item>
            <item>
            <term>CERT_CREATE_CONTEXT_SORTED_FLAG</term>
            <term>
            The function creates a context with sorted entries. Currently, this flag only applies to a CTL context. For CTLs, the cCTLEntry
            member of the returned CTL_INFO structure is always zero. CertFindSubjectInSortedCTL and CertEnumSubjectInSortedCTL must be
            called to find or enumerate the CTL entries.
            </term>
            </item>
            <item>
            <term>CERT_CREATE_CONTEXT_NO_HCRYPTMSG_FLAG</term>
            <term>
            By default, when a CTL context is created, a HCRYTPMSG handle to its SignedData message is created. This flag can be set to
            improve performance by not creating this handle. This flag can only be used when dwContextType is CERT_STORE_CTL_CONTEXT.
            </term>
            </item>
            <item>
            <term>CERT_CREATE_CONTEXT_NO_ENTRY_FLAG</term>
            <term>
            By default, when a CTL context is created, its entries are decoded. When this flag is set, the entries are not decoded and
            performance is improved. This flag can only be used when dwContextType is CERT_STORE_CTL_CONTEXT.
            </term>
            </item>
            </list>
            </param>
            <param name="pCreatePara">
            <para>A pointer to a CERT_CREATE_CONTEXT_PARA structure.</para>
            <para>
            If pCreatePara and its <c>pfnFree</c> member are both non- <c>NULL</c>, the <c>pfnFree</c> member is used to free the memory
            specified by the <c>pvFree</c> member. If the <c>pvFree</c> member is <c>NULL</c>, the <c>pfnFree</c> member is used to free the
            pbEncoded pointer.
            </para>
            <para>If pCreatePara or its <c>pfnFree</c> member is <c>NULL</c>, no attempt is made to free pbEncoded.</para>
            </param>
            <returns>
            <para>
            If the function succeeds, the return value is a pointer to the newly created context. The <c>pvFree</c> member of pCreatePara
            must be called to free the created context.
            </para>
            <para>If the function fails, the return value is <c>NULL</c>. For extended error information, call GetLastError.</para>
            <para>
            If GetLastError returns <c>ERROR_CANCELLED</c>, this means that the PFN_CERT_CREATE_CONTEXT_SORT_FUNC callback function returned
            <c>FALSE</c> to stop the sort.
            </para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertDuplicateStore(Vanara.PInvoke.Crypt32.HCERTSTORE)">
            <summary>The <c>CertDuplicateStore</c> function duplicates a store handle by incrementing the store's reference count.</summary>
            <param name="hCertStore">A handle of the certificate store for which the reference count is being incremented.</param>
            <returns>
            Currently, a copy is not made of the handle, and the returned handle is the same as the handle that was input. If <c>NULL</c> is
            passed in, the called function will raise an access violation exception.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertEnumPhysicalStore(System.String,Vanara.PInvoke.Crypt32.CertSystemStore,System.IntPtr,Vanara.PInvoke.Crypt32.CertEnumPhysicalStoreCallback)">
            <summary>
            The <c>CertEnumPhysicalStore</c> function retrieves the physical stores on a computer. The function calls the provided callback
            function for each physical store found.
            </summary>
            <param name="pvSystemStore">
            If CERT_SYSTEM_STORE_RELOCATE_FLAG is set in dwFlags, pvSystemStore points to a CERT_SYSTEM_STORE_RELOCATE_PARA structure that
            indicates both the name and the location of the system store to be enumerated. Otherwise, pvSystemStore is a pointer to a
            Unicode string that names the system store whose physical stores are to be enumerated. For information about prefixing a
            ServiceName or ComputerName to the system store name, see CertRegisterSystemStore.
            </param>
            <param name="dwFlags">
            <para>Specifies the location of the system store. The following flag values are defined:</para>
            <list type="bullet">
            <item>
            <term>CERT_SYSTEM_STORE_CURRENT_USER</term>
            </item>
            <item>
            <term>CERT_SYSTEM_STORE_CURRENT_SERVICE</term>
            </item>
            <item>
            <term>CERT_SYSTEM_STORE_LOCAL_MACHINE</term>
            </item>
            <item>
            <term>CERT_SYSTEM_STORE_LOCAL_MACHINE_GROUP_POLICY</term>
            </item>
            <item>
            <term>CERT_SYSTEM_STORE_CURRENT_USER_GROUP_POLICY</term>
            </item>
            <item>
            <term>CERT_SYSTEM_STORE_SERVICES</term>
            </item>
            <item>
            <term>CERT_SYSTEM_STORE_USERS</term>
            </item>
            <item>
            <term>CERT_SYSTEM_STORE_LOCAL_MACHINE_ENTERPRISE</term>
            </item>
            </list>
            <para>In addition, CERT_SYSTEM_STORE_RELOCATE_FLAG or CERT_PHYSICAL_STORE_PREDEFINED_ENUM_FLAG can be combined using a bitwise-</para>
            <para>OR</para>
            <para>operation with any of the high-word location flags.</para>
            </param>
            <param name="pvArg">
            A pointer to a <c>void</c> that allows the application to declare, define, and initialize a structure to hold any information to
            be passed to the callback enumeration function.
            </param>
            <param name="pfnEnum">
            A pointer to the callback function used to show the details for each physical store. This callback function determines the
            content and format for the presentation of information on each physical store. The application must provide the
            CertEnumPhysicalStoreCallback callback function.
            </param>
            <returns>
            <para>If the function succeeds and another physical store was found, the return value is <c>TRUE</c>.</para>
            <para>
            If the system store location only supports system stores and does not support physical stores, the function returns <c>FALSE</c>
            and GetLastError returns the ERROR_NOT_SUPPORTED code.
            </para>
            <para>
            If the function fails and another physical store was not found, the return value is <c>FALSE</c>. For extended error
            information, call GetLastError.
            </para>
            </returns>
            <remarks>
            <para>
            To use <c>CertEnumPhysicalStore</c>, an application must declare and define the <c>ENUM_ARG</c> structure and an enumeration
            callback function.
            </para>
            <para>Examples</para>
            <para>See Example C Program: Listing System and Physical Stores.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertEnumPhysicalStore(Vanara.PInvoke.Crypt32.CERT_SYSTEM_STORE_RELOCATE_PARA@,Vanara.PInvoke.Crypt32.CertSystemStore,System.IntPtr,Vanara.PInvoke.Crypt32.CertEnumPhysicalStoreCallback)">
            <summary>
            The <c>CertEnumPhysicalStore</c> function retrieves the physical stores on a computer. The function calls the provided callback
            function for each physical store found.
            </summary>
            <param name="pvSystemStore">
            If CERT_SYSTEM_STORE_RELOCATE_FLAG is set in dwFlags, pvSystemStore points to a CERT_SYSTEM_STORE_RELOCATE_PARA structure that
            indicates both the name and the location of the system store to be enumerated. Otherwise, pvSystemStore is a pointer to a
            Unicode string that names the system store whose physical stores are to be enumerated. For information about prefixing a
            ServiceName or ComputerName to the system store name, see CertRegisterSystemStore.
            </param>
            <param name="dwFlags">
            <para>Specifies the location of the system store. The following flag values are defined:</para>
            <list type="bullet">
            <item>
            <term>CERT_SYSTEM_STORE_CURRENT_USER</term>
            </item>
            <item>
            <term>CERT_SYSTEM_STORE_CURRENT_SERVICE</term>
            </item>
            <item>
            <term>CERT_SYSTEM_STORE_LOCAL_MACHINE</term>
            </item>
            <item>
            <term>CERT_SYSTEM_STORE_LOCAL_MACHINE_GROUP_POLICY</term>
            </item>
            <item>
            <term>CERT_SYSTEM_STORE_CURRENT_USER_GROUP_POLICY</term>
            </item>
            <item>
            <term>CERT_SYSTEM_STORE_SERVICES</term>
            </item>
            <item>
            <term>CERT_SYSTEM_STORE_USERS</term>
            </item>
            <item>
            <term>CERT_SYSTEM_STORE_LOCAL_MACHINE_ENTERPRISE</term>
            </item>
            </list>
            <para>In addition, CERT_SYSTEM_STORE_RELOCATE_FLAG or CERT_PHYSICAL_STORE_PREDEFINED_ENUM_FLAG can be combined using a bitwise-</para>
            <para>OR</para>
            <para>operation with any of the high-word location flags.</para>
            </param>
            <param name="pvArg">
            A pointer to a <c>void</c> that allows the application to declare, define, and initialize a structure to hold any information to
            be passed to the callback enumeration function.
            </param>
            <param name="pfnEnum">
            A pointer to the callback function used to show the details for each physical store. This callback function determines the
            content and format for the presentation of information on each physical store. The application must provide the
            CertEnumPhysicalStoreCallback callback function.
            </param>
            <returns>
            <para>If the function succeeds and another physical store was found, the return value is <c>TRUE</c>.</para>
            <para>
            If the system store location only supports system stores and does not support physical stores, the function returns <c>FALSE</c>
            and GetLastError returns the ERROR_NOT_SUPPORTED code.
            </para>
            <para>
            If the function fails and another physical store was not found, the return value is <c>FALSE</c>. For extended error
            information, call GetLastError.
            </para>
            </returns>
            <remarks>
            <para>
            To use <c>CertEnumPhysicalStore</c>, an application must declare and define the <c>ENUM_ARG</c> structure and an enumeration
            callback function.
            </para>
            <para>Examples</para>
            <para>See Example C Program: Listing System and Physical Stores.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertEnumSubjectInSortedCTL(Vanara.PInvoke.Crypt32.PCCTL_CONTEXT,System.IntPtr@,Vanara.PInvoke.Crypt32.CRYPTOAPI_BLOB@,Vanara.PInvoke.Crypt32.CRYPTOAPI_BLOB@)">
            <summary>
            The <c>CertEnumSubjectInSortedCTL</c> function retrieves the first or next TrustedSubject in a sorted certificate trust list
            (CTL). A sorted CTL is a CTL created with the CERT_CREATE_CONTEXT_SORTED_FLAG set. Used in a loop, this function can retrieve in
            sequence all TrustedSubjects in a sorted CTL.
            </summary>
            <param name="pCtlContext">A pointer to the CTL_CONTEXT structure to be searched.</param>
            <param name="ppvNextSubject">
            A pointer to the address of the last TrustedSubject found. To start the enumeration, ppvNextSubject must point to a pointer set
            to <c>NULL</c>. Upon return, the pointer addressed by ppvNextSubject is updated to point to the next TrustedSubject in the
            encoded sequence.
            </param>
            <param name="pSubjectIdentifier">
            A pointer to a CRYPT_DER_BLOB structure, uniquely identifying a TrustedSubject. The information in this structure can be a hash
            or any unique byte sequence.
            </param>
            <param name="pEncodedAttributes">
            A pointer to a CRYPT_DER_BLOB structure containing a byte count and a pointer to the TrustedSubject's encoded attributes.
            </param>
            <returns>
            <para>
            If the function succeeds, the return value is <c>TRUE</c>, with ppvNextSubject updated to point to the next TrustedSubject in
            the encoded sequence.
            </para>
            <para>
            If the function fails, the return value is <c>FALSE</c>. The return value is <c>FALSE</c> if there are no more subjects or there
            is an argument that is not valid.
            </para>
            </returns>
            <remarks>
            <para>
            The <c>pbData</c> members of CRYPT_DER_BLOB structures point directly to the encoded bytes. The <c>CRYPT_DER_BLOB</c>
            structures, themselves, must be allocated and freed by the application, but the memory addressed by the <c>pbData</c> members of
            these structures is not allocated by the application and must not be freed by the application.
            </para>
            <para>If the CTL is not sorted with the CERT_CREATE_CONTEXT_SORTED_FLAG flag set, an error results.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertEnumSystemStore(Vanara.PInvoke.Crypt32.CertSystemStore,Vanara.PInvoke.Crypt32.CERT_SYSTEM_STORE_RELOCATE_PARA@,System.IntPtr,Vanara.PInvoke.Crypt32.CertEnumSystemStoreCallback)">
            <summary>
            The <c>CertEnumSystemStore</c> function retrieves the system stores available. The function calls the provided callback function
            for each system store found.
            </summary>
            <param name="dwFlags">
            <para>Specifies the location of the system store. This parameter can be one of the following flags:</para>
            <list type="bullet">
            <item>
            <term>CERT_SYSTEM_STORE_CURRENT_USER</term>
            </item>
            <item>
            <term>CERT_SYSTEM_STORE_CURRENT_SERVICE</term>
            </item>
            <item>
            <term>CERT_SYSTEM_STORE_LOCAL_MACHINE</term>
            </item>
            <item>
            <term>CERT_SYSTEM_STORE_LOCAL_MACHINE_GROUP_POLICY</term>
            </item>
            <item>
            <term>CERT_SYSTEM_STORE_CURRENT_USER_GROUP_POLICY</term>
            </item>
            <item>
            <term>CERT_SYSTEM_STORE_SERVICES</term>
            </item>
            <item>
            <term>CERT_SYSTEM_STORE_USERS</term>
            </item>
            <item>
            <term>CERT_SYSTEM_STORE_LOCAL_MACHINE_ENTERPRISE</term>
            </item>
            </list>
            <para>In addition, the CERT_SYSTEM_STORE_RELOCATE_FLAG can be combined, by using a bitwise-</para>
            <para>OR</para>
            <para>operation, with any of the high-word location flags.</para>
            </param>
            <param name="pvSystemStoreLocationPara">
            <para>
            If CERT_SYSTEM_STORE_RELOCATE_FLAG is set in the dwFlags parameter, pvSystemStoreLocationPara points to a
            CERT_SYSTEM_STORE_RELOCATE_PARA structure that indicates both the name and the location of the system store. Otherwise,
            pvSystemStoreLocationPara is a pointer to a Unicode string that names the system store.
            </para>
            <para>
            For CERT_SYSTEM_STORE_LOCAL_MACHINE or CERT_SYSTEM_STORE_LOCAL_MACHINE_GROUP_POLICY, pvSystemStoreLocationPara can optionally be
            set to a Unicode computer name for enumerating local computer stores on a remote computer, for example "\computer_name" or
            "computer_name". The leading backslashes (\) are optional in the computer_name.
            </para>
            <para>
            For CERT_SYSTEM_STORE_SERVICES or CERT_SYSTEM_STORE_USERS, if pvSystemStoreLocationPara is <c>NULL</c>, the function enumerates
            both the service/user names and the stores for each service/user name. Otherwise, pvSystemStoreLocationPara is a Unicode string
            that contains a remote computer name and, if available, a service/user name, for example, "service_name", "\computer_name", or "computer_name".
            </para>
            <para>
            If only the computer_name is specified, it must have either the leading backslashes (\) or a trailing backslash (). Otherwise,
            it is interpreted as the service_name or user_name.
            </para>
            </param>
            <param name="pvArg">
            A pointer to a <c>void</c> that allows the application to declare, define, and initialize a structure to hold any information to
            be passed to the callback enumeration function.
            </param>
            <param name="pfnEnum">
            A pointer to the callback function used to show the details for each system store. This callback function determines the content
            and format for the presentation of information on each system store. The application must provide the
            CertEnumSystemStoreCallback callback function.
            </param>
            <returns>
            <para>If the function succeeds, the function returns <c>TRUE</c>.</para>
            <para>If the function fails, it returns <c>FALSE</c>.</para>
            </returns>
            <remarks>
            <para>
            To use <c>CertEnumSystemStore</c>, the application must declare and define the <c>ENUM_ARG</c> structure and the
            CertEnumSystemStoreCallback callback function.
            </para>
            <para>Examples</para>
            <para>For an example that uses this function, see Example C Program: Listing System and Physical Stores.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertEnumSystemStore(Vanara.PInvoke.Crypt32.CertSystemStore,System.String,System.IntPtr,Vanara.PInvoke.Crypt32.CertEnumSystemStoreCallback)">
            <summary>
            The <c>CertEnumSystemStore</c> function retrieves the system stores available. The function calls the provided callback function
            for each system store found.
            </summary>
            <param name="dwFlags">
            <para>Specifies the location of the system store. This parameter can be one of the following flags:</para>
            <list type="bullet">
            <item>
            <term>CERT_SYSTEM_STORE_CURRENT_USER</term>
            </item>
            <item>
            <term>CERT_SYSTEM_STORE_CURRENT_SERVICE</term>
            </item>
            <item>
            <term>CERT_SYSTEM_STORE_LOCAL_MACHINE</term>
            </item>
            <item>
            <term>CERT_SYSTEM_STORE_LOCAL_MACHINE_GROUP_POLICY</term>
            </item>
            <item>
            <term>CERT_SYSTEM_STORE_CURRENT_USER_GROUP_POLICY</term>
            </item>
            <item>
            <term>CERT_SYSTEM_STORE_SERVICES</term>
            </item>
            <item>
            <term>CERT_SYSTEM_STORE_USERS</term>
            </item>
            <item>
            <term>CERT_SYSTEM_STORE_LOCAL_MACHINE_ENTERPRISE</term>
            </item>
            </list>
            <para>In addition, the CERT_SYSTEM_STORE_RELOCATE_FLAG can be combined, by using a bitwise-</para>
            <para>OR</para>
            <para>operation, with any of the high-word location flags.</para>
            </param>
            <param name="pvSystemStoreLocationPara">
            <para>
            If CERT_SYSTEM_STORE_RELOCATE_FLAG is set in the dwFlags parameter, pvSystemStoreLocationPara points to a
            CERT_SYSTEM_STORE_RELOCATE_PARA structure that indicates both the name and the location of the system store. Otherwise,
            pvSystemStoreLocationPara is a pointer to a Unicode string that names the system store.
            </para>
            <para>
            For CERT_SYSTEM_STORE_LOCAL_MACHINE or CERT_SYSTEM_STORE_LOCAL_MACHINE_GROUP_POLICY, pvSystemStoreLocationPara can optionally be
            set to a Unicode computer name for enumerating local computer stores on a remote computer, for example "\computer_name" or
            "computer_name". The leading backslashes (\) are optional in the computer_name.
            </para>
            <para>
            For CERT_SYSTEM_STORE_SERVICES or CERT_SYSTEM_STORE_USERS, if pvSystemStoreLocationPara is <c>NULL</c>, the function enumerates
            both the service/user names and the stores for each service/user name. Otherwise, pvSystemStoreLocationPara is a Unicode string
            that contains a remote computer name and, if available, a service/user name, for example, "service_name", "\computer_name", or "computer_name".
            </para>
            <para>
            If only the computer_name is specified, it must have either the leading backslashes (\) or a trailing backslash (). Otherwise,
            it is interpreted as the service_name or user_name.
            </para>
            </param>
            <param name="pvArg">
            A pointer to a <c>void</c> that allows the application to declare, define, and initialize a structure to hold any information to
            be passed to the callback enumeration function.
            </param>
            <param name="pfnEnum">
            A pointer to the callback function used to show the details for each system store. This callback function determines the content
            and format for the presentation of information on each system store. The application must provide the
            CertEnumSystemStoreCallback callback function.
            </param>
            <returns>
            <para>If the function succeeds, the function returns <c>TRUE</c>.</para>
            <para>If the function fails, it returns <c>FALSE</c>.</para>
            </returns>
            <remarks>
            <para>
            To use <c>CertEnumSystemStore</c>, the application must declare and define the <c>ENUM_ARG</c> structure and the
            CertEnumSystemStoreCallback callback function.
            </para>
            <para>Examples</para>
            <para>For an example that uses this function, see Example C Program: Listing System and Physical Stores.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertEnumSystemStoreLocation(System.UInt32,System.IntPtr,Vanara.PInvoke.Crypt32.CertEnumSystemStoreLocationCallback)">
            <summary>
            The <c>CertEnumSystemStoreLocation</c> function retrieves all of the system store locations. The function calls the provided
            callback function for each system store location found.
            </summary>
            <param name="dwFlags">Reserved for future use; must be zero.</param>
            <param name="pvArg">
            A pointer to a <c>void</c> that allows the application to declare, define, and initialize a structure to hold any information to
            be passed to the callback enumeration function.
            </param>
            <param name="pfnEnum">
            A pointer to the callback function used to show the details for each store location. This callback function determines the
            content and format for the presentation of information on each store location. For the signature and parameters of the callback
            function, see CertEnumSystemStoreLocationCallback.
            </param>
            <returns>
            <para>If the function succeeds, the function returns <c>TRUE</c>.</para>
            <para>If the function fails, it returns <c>FALSE</c>.</para>
            </returns>
            <remarks>
            <para>
            To use <c>CertEnumSystemStoreLocation</c>, an application must declare and define the <c>ENUM_ARG</c> structure and an
            enumeration callback function.
            </para>
            <para>Examples</para>
            <para>For an example that uses this function, see Example C Program: Listing System and Physical Stores.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertFindSubjectInCTL(Vanara.PInvoke.Crypt32.CertEncodingType,Vanara.PInvoke.Crypt32.CtlCertSubject,System.IntPtr,Vanara.PInvoke.Crypt32.PCCTL_CONTEXT,System.UInt32)">
            <summary>
            The <c>CertFindSubjectInCTL</c> function attempts to find the specified subject in a certificate trust list (CTL). A subject can
            be identified either by the certificate's whole context or by any unique identifier of the certificate's subject such as the
            SHA1 hash of the certificate's issuer and serial number.
            </summary>
            <param name="dwEncodingType">
            <para>
            Specifies the encoding type used. Currently, only X509_ASN_ENCODING and PKCS_7_ASN_ENCODING are being used; however, additional
            encoding types may be added in the future. For either current encoding type, use:
            </para>
            <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING.</para>
            </param>
            <param name="dwSubjectType">
            <para>Specifies the type of subject to be searched for in the CTL. May be <c>NULL</c> for a default search.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CTL_CERT_SUBJECT_TYPE</term>
            <term>
            pvSubject data type: Pointer to a CERT_CONTEXT structure. The CTL's SubjectAlgorithm is examined to determine the representation
            of the subject's identity. Initially, only SHA1 and MD5 hashes are supported as values for SubjectAlgorithm. The appropriate
            hash property is obtained from the CERT_CONTEXT structure.
            </term>
            </item>
            <item>
            <term>CTL_ANY_SUBJECT_TYPE</term>
            <term>
            pvSubject data type: Pointer to a CTL_ANY_SUBJECT_INFO structure. The SubjectAlgorithm member of this structure must match the
            algorithm type of the CTL, and the SubjectIdentifier member must match one of the CTL entries.
            </term>
            </item>
            </list>
            <para>
            The certificate's hash or the <c>SubjectIdentifier</c> member of the CTL_ANY_SUBJECT_INFO structure is used as the key in
            searching the subject entries. A binary memory comparison is done between the key and the entry's SubjectIdentifier.
            </para>
            <para>If dwSubjectType is set to either preceding value, dwEncodingType is not used.</para>
            </param>
            <param name="pvSubject">Pointer used in conjunction with the dwSubjectType parameter.</param>
            <param name="pCtlContext">A pointer to the CTL_CONTEXT structure being searched.</param>
            <param name="dwFlags">Reserved for future use and must be zero.</param>
            <returns>
            <para>If the function succeeds, the return value is the entry, if it is found.</para>
            <para>
            If the function fails, the return value is <c>NULL</c>. For extended error information, call GetLastError. Some possible error
            codes follow.
            </para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>CRYPT_E_NOT_FOUND</term>
            <term>The subject was not found in the CTL.</term>
            </item>
            <item>
            <term>E_INVALIDARG</term>
            <term>The dwSubjectType parameter was not either CTL_CERT_SUBJECT_TYPE or CTL_ANY_SUBJECT_TYPE.</term>
            </item>
            <item>
            <term>NTE_BAD_ALGID</term>
            <term>The CTL's SubjectAlgorithm member did not map to either SHA1 or MD5.</term>
            </item>
            </list>
            </returns>
            <remarks>
            The certificate's hash or the <c>SubjectIdentifier</c> member of the CTL_ANY_SUBJECT_INFO structure is used as the key in
            searching the subject entries. A binary memory comparison is done between the key and the entry's <c>SubjectIdentifier</c>.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertFindSubjectInSortedCTL(Vanara.PInvoke.Crypt32.CRYPTOAPI_BLOB@,Vanara.PInvoke.Crypt32.PCCTL_CONTEXT,System.UInt32,System.IntPtr,Vanara.PInvoke.Crypt32.CRYPTOAPI_BLOB@)">
            <summary>
            The <c>CertFindSubjectInSortedCTL</c> function attempts to find the specified subject in a sorted certificate trust list (CTL).
            A subject can be identified either by the certificate's whole context or by any unique identifier of the certificate's subject,
            such as the SHA1 hash of the certificate's issuer and serial number.
            </summary>
            <param name="pSubjectIdentifier">
            A pointer to a CRYPT_DATA_BLOB structure uniquely identifying the subject. The information in this structure can be a hash or
            any unique byte sequence.
            </param>
            <param name="pCtlContext">A pointer to the CTL_CONTEXT structure to be searched.</param>
            <param name="dwFlags">Reserved for future use and must be <c>NULL</c>.</param>
            <param name="pvReserved">Reserved for future use and must be <c>NULL</c>.</param>
            <param name="pEncodedAttributes">
            A pointer to a CRYPT_DER_BLOB structure containing a byte count and a pointer to the subject's encoded attributes.
            </param>
            <returns>
            <para>If the function succeeds and the subject identifier exists in the CTL, the return value is <c>TRUE</c>.</para>
            <para>If the function fails and does not locate a matching subject identifier, the return value is <c>FALSE</c>.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertGetStoreProperty(Vanara.PInvoke.Crypt32.HCERTSTORE,System.UInt32,System.IntPtr,System.UInt32@)">
            <summary>The <c>CertGetStoreProperty</c> function retrieves a store property.</summary>
            <param name="hCertStore">A handle of an open certificate store.</param>
            <param name="dwPropId">
            <para>
            Indicates one of a range of store properties. There is one predefined store property, CERT_STORE_LOCALIZED_NAME_PROP_ID, the
            localized name of the store.
            </para>
            <para>
            User defined properties must be outside the current range of values for predefined context properties. Currently, user defined
            dwPropId values begin at 4,096.
            </para>
            </param>
            <param name="pvData">
            <para>
            A pointer to a buffer that receives the data as determined by dwPropId. For CERT_STORE_LOCALIZED_NAME_PROP_ID, this is the
            localized name of the store, and pvData points to a null-terminated Unicode wide-character string. For other dwPropIds, pvData
            points to an array of bytes.
            </para>
            <para>
            This parameter can be <c>NULL</c> to set the size of this information for memory allocation purposes. For more information, see
            Retrieving Data of Unknown Length.
            </para>
            </param>
            <param name="pcbData">
            A pointer to a <c>DWORD</c> value that specifies the size, in bytes, of the pvData buffer. When the function returns, the
            <c>DWORD</c> value contains the number of bytes stored in the buffer.
            </param>
            <returns>
            <para>If the function succeeds, the function returns nonzero.</para>
            <para>If the function fails, it returns zero.</para>
            <para>
            If the store property is found, the function returns nonzero, pvData points to the property, and pcbData points to the length of
            the string. If the store property is not found, the function returns zero and GetLastError returns CRYPT_E_NOT_FOUND.
            </para>
            </returns>
            <remarks>
            <para>
            Store property identifiers are properties applicable to an entire store. They are not properties on an individual certificate,
            certificate revocation list (CRL), or certificate trust list (CTL) context. Currently, no store properties are persisted.
            </para>
            <para>To find the localized name of a store, you can also use the CryptFindLocalizedName function.</para>
            <para>Examples</para>
            <para>
            The following example shows querying a store for its local name property. Similar code can be used to retrieve other store
            properties. For a complete example that uses this function, see Example C Program: Setting and Getting Certificate Store Properties.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertOpenStore(Vanara.PInvoke.Crypt32.SafeOID,Vanara.PInvoke.Crypt32.CertEncodingType,Vanara.PInvoke.Crypt32.HCRYPTPROV,Vanara.PInvoke.Crypt32.CertStoreFlags,System.IntPtr)">
            <summary>
            The <c>CertOpenStore</c> function opens a certificate store by using a specified store provider type. While this function can
            open a certificate store for most purposes, CertOpenSystemStore is recommended to open the most common certificate stores.
            <c>CertOpenStore</c> is required for more complex options and special cases.
            </summary>
            <param name="lpszStoreProvider">
            <para>A pointer to a null-terminated ANSI string that contains the store provider type.</para>
            <para>
            The following values represent the predefined store types. The store provider type determines the contents of the pvPara
            parameter and the use and meaning of the high word of the dwFlags parameter. Additional store providers can be installed or
            registered by using the CryptInstallOIDFunctionAddress or CryptRegisterOIDFunction function. For more information about adding
            store providers, see Extending CertOpenStore Functionality.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_STORE_PROV_COLLECTION sz_CERT_STORE_PROV_COLLECTION</term>
            <term>
            Opens a store that will be a collection of other stores. Stores are added to or removed from the collection by using
            CertAddStoreToCollection and CertRemoveStoreFromCollection. When a store is added to a collection, all certificates, CRLs, and
            CTLs in that store become available to searches or enumerations of the collection store. The high word of dwFlags is set to
            zero. pvPara value: The pvPara parameter must be NULL.
            </term>
            </item>
            <item>
            <term>CERT_STORE_PROV_FILE</term>
            <term>
            Initializes the store with certificates, CRLs, and CTLs read from a specified open file. This provider expects the file to
            contain only a serialized store and not either PKCS #7 signed messages or a single encoded certificate. The file pointer must be
            positioned at the beginning of the serialized store information. After the data in the serialized store has been loaded into the
            certificate store, the file pointer is positioned at the beginning of any data that can follow the serialized store data in the
            file. If CERT_FILE_STORE_COMMIT_ENABLE is set in dwFlags, the file handle is duplicated and the store is always committed as a
            serialized store. The file is not closed when the store is closed. pvPara value: The pvPara parameter must contain a pointer to
            the handle of a file opened by using CreateFile.
            </term>
            </item>
            <item>
            <term>CERT_STORE_PROV_FILENAME_A</term>
            <term>
            Initializes the store with certificates, CRLs, and CTLs from a file. The provider opens the file and first attempts to read the
            file as a serialized store, then as a PKCS #7 signed message, and finally as a single encoded certificate. The dwEncodingType
            parameter must contain the encoding types to be used with both messages and certificates. If the file contains an X.509 encoded
            certificate, the open operation fails and a call to the GetLastError function will return ERROR_ACCESS_DENIED. If the
            CERT_FILE_STORE_COMMIT_ENABLE flag is set in dwFlags, the dwCreationDisposition value passed to CreateFile is as follows: If
            dwFlags includes CERT_FILE_STORE_COMMIT_ENABLE, the file is committed as either a PKCS #7 or a serialized store depending on the
            file type opened. If the file was empty or if the file name has either a .p7c or .spc extension, the file is committed as a PKCS
            #7. Otherwise, the file is committed as a serialized store. pvPara value: The pvPara parameter must contain a pointer to
            null-terminated ANSI string that contains the name of an existing, unopened file.
            </term>
            </item>
            <item>
            <term>CERT_STORE_PROV_FILENAME(_W) sz_CERT_STORE_PROV_FILENAME(_W)</term>
            <term>
            Same as CERT_STORE_PROV_FILENAME_A. pvPara value: The pvPara parameter must contain a pointer to null-terminated Unicode string
            that contains the name of an existing, unopened file.
            </term>
            </item>
            <item>
            <term>CERT_STORE_PROV_LDAP(_W) sz_CERT_STORE_PROV_LDAP(_W)</term>
            <term>
            Initializes the store with certificates, CRLs, and CTLs from the results of an LDAP query. To perform write operations on the
            store, the query string must specify a BASE query with no filter and a single attribute. pvPara value: If the dwFlags parameter
            contains CERT_LDAP_STORE_OPENED_FLAG, set pvPara to the address of a CERT_LDAP_STORE_OPENED_PARA structure that specifies the
            established LDAP session to use. Otherwise, set pvPara to point to a null-terminated Unicode string that contains the LDAP query
            string. For more information about LDAP query strings, see LDAP Dialect.
            </term>
            </item>
            <item>
            <term>CERT_STORE_PROV_MEMORY sz_CERT_STORE_PROV_MEMORY</term>
            <term>
            Creates a certificate store in cached memory. No certificates, certificate revocation lists (CRLs), or certificate trust lists
            (CTLs) are initially loaded into the store. Typically used to create a temporary store. Any addition of certificates, CRLs, or
            CTLs or changes in properties of certificates, CRLs, or CTLs in a memory store are not automatically saved. They can be saved to
            a file or to a memory BLOB by using CertSaveStore. pvPara value: The pvPara parameter is not used.
            </term>
            </item>
            <item>
            <term>CERT_STORE_PROV_MSG</term>
            <term>
            Initializes the store with certificates, CRLs, and CTLs from the specified cryptographic message. The dwEncodingType parameter
            must contain the encoding types used with both messages and certificates. pvPara value: The pvPara parameter contains an
            HCRYPTMSG handle of the encoded message, returned by a call to CryptMsgOpenToDecode.
            </term>
            </item>
            <item>
            <term>CERT_STORE_PROV_PHYSICAL(_W) sz_CERT_STORE_PROV_PHYSICAL(_W)</term>
            <term>
            Initializes the store with certificates, CRLs, and CTLs from a specified physical store that is a member of a logical system
            store. Two names are separated with an intervening backslash (), for example "Root.Default". Here, "Root" is the name of the
            system store and ".Default" is the name of the physical store. The system and physical store names cannot contain any
            backslashes. The high word of dwFlags indicates the system store location, usually CERT_SYSTEM_STORE_CURRENT_USER. For more
            information, see dwFlags later in this topic and see System Store Locations. Some physical store locations can be opened
            remotely. pvPara value: The pvPara parameter points to a null-terminated Unicode string that contains both the system store name
            and physical names.
            </term>
            </item>
            <item>
            <term>CERT_STORE_PROV_PKCS7 sz_CERT_STORE_PROV_PKCS7</term>
            <term>
            Initializes the store with certificates, CRLs, and CTLs from an encoded PKCS #7 signed message. The dwEncodingType parameter
            must specify the encoding types to be used with both messages and certificates. pvPara value: The pvPara parameter points to a
            CRYPT_DATA_BLOB structure that represents the encoded message.
            </term>
            </item>
            <item>
            <term>CERT_STORE_PROV_PKCS12 sz_CERT_STORE_PROV_PKCS12</term>
            <term>
            Initializes the store with the contents of a PKCS #12 packet. If the PKCS #12 packet is protected with a NULL or empty password,
            this function will succeed in opening the store. Beginning with Windows 8 and Windows Server 2012, if the password embedded in
            the PFX packet was protected to an Active Directory (AD) principal and the current user, as a member of that principal, has
            permission to decrypt the password, this function will succeed in opening the store. For more information, see the pvPara
            parameter and the PKCS12_PROTECT_TO_DOMAIN_SIDS flag of the PFXExportCertStoreEx function. You can protect PFX passwords to an
            AD principal beginning in Windows 8 and Windows Server 2012. pvPara value: The pvPara parameter points to a CRYPT_DATA_BLOB
            structure that represents the PKCS #12 packet.
            </term>
            </item>
            <item>
            <term>CERT_STORE_PROV_REG</term>
            <term>
            Initializes the store with certificates, CRLs, and CTLs from a registry subkey. This provider opens or creates the registry
            subkeys Certificates, CRLs, and CTLs under the key passed in pvPara. The input key is not closed by the provider. Before
            returning, the provider opens its own copy of the key passed in pvPara. If CERT_STORE_READONLY_FLAG is set in the low word of
            dwFlags, registry subkeys are opened by using the RegOpenKey with KEY_READ_ACCESS. Otherwise, registry subkeys are created by
            using RegCreateKey with KEY_ALL_ACCESS. Any changes to the contents of the opened store are immediately persisted to the
            registry. However, if CERT_STORE_READONLY_FLAG is set in the low word of dwFlags, any attempt to add to the contents of the
            store or to change a context's property results in an error with GetLastError returning the E_ACCESSDENIED code. pvPara value:
            The pvPara parameter contains the handle of an open registry key.
            </term>
            </item>
            <item>
            <term>CERT_STORE_PROV_SERIALIZED sz_CERT_STORE_PROV_SERIALIZED</term>
            <term>
            Initializes the store with certificates, CRLs, and CTLs from a memory location that contains a serialized store. pvPara value:
            The pvPara parameter points to a CRYPT_DATA_BLOB structure that contains the serialized memory BLOB.
            </term>
            </item>
            <item>
            <term>CERT_STORE_PROV_SMART_CARD(_W) sz_CERT_STORE_PROV_SMART_CARD(_W)</term>
            <term>Not currently used.</term>
            </item>
            <item>
            <term>CERT_STORE_PROV_SYSTEM_A</term>
            <term>
            Initializes the store with certificates, CRLs, and CTLs from the specified system store. The system store is a logical,
            collection store that consists of one or more physical stores. A physical store associated with a system store is registered
            with the CertRegisterPhysicalStore function. After the system store is opened, all of the physical stores that are associated
            with it are also opened by calls to CertOpenStore and are added to the system store collection by using the
            CertAddStoreToCollection function. The high word of dwFlags indicates the system store location, usually set to
            CERT_SYSTEM_STORE_CURRENT_USER. For details about registry locations, see dwFlags later in this topic and System Store
            Locations. Some system store locations can be opened remotely; for more information, see System Store Locations. pvPara value:
            The pvPara parameter points to a null-terminated ANSI string that contains a system store name, such as "My" or "Root".
            </term>
            </item>
            <item>
            <term>CERT_STORE_PROV_SYSTEM(_W) sz_CERT_STORE_PROV_SYSTEM(_W)</term>
            <term>
            Same as CERT_STORE_PROV_SYSTEM_A. pvPara value: The pvPara parameter points to a null-terminated Unicode string that contains a
            system store name, such as "My" or "Root".
            </term>
            </item>
            <item>
            <term>CERT_STORE_PROV_SYSTEM_REGISTRY_A</term>
            <term>
            Initializes the store with certificates, CRLs, and CTLs from a physical registry store. The physical store is not opened as a
            collection store. Enumerations and searches go through only the certificates, CRLs, and CTLs in that one physical store. The
            high word of dwFlags indicates the system store location, usually set to CERT_SYSTEM_STORE_CURRENT_USER. For more information,
            see dwFlags later in this topic. Some system store locations can be open remotely; for more information, see System Store
            Locations. pvPara value: The pvPara parameter points to a null-terminated ANSI string that contains a system store name, such as
            "My" or "Root".
            </term>
            </item>
            <item>
            <term>CERT_STORE_PROV_SYSTEM_REGISTRY(_W) sz_CERT_STORE_PROV_SYSTEM_REGISTRY(_W)</term>
            <term>
            Same as CERT_STORE_PROV_SYSTEM_REGISTRY_A. pvPara value: The pvPara parameter points to a null-terminated Unicode string that
            contains a system store name, such as "My" or "Root".
            </term>
            </item>
            </list>
            </param>
            <param name="dwEncodingType">
            <para>
            Specifies the certificate encoding type and message encoding type. Encoding is used only when the dwSaveAs parameter of the
            CertSaveStore function contains <c>CERT_STORE_SAVE_AS_PKCS7</c>. Otherwise, the dwMsgAndCertEncodingType parameter is not used.
            </para>
            <para>
            This parameter is only applicable when the <c>CERT_STORE_PROV_MSG</c>, <c>CERT_STORE_PROV_PKCS7</c>, or
            <c>CERT_STORE_PROV_FILENAME</c> provider type is specified in the lpszStoreProvider parameter. For all other provider types,
            this parameter is unused and should be set to zero.
            </para>
            <para>This parameter can be a combination of one or more of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>PKCS_7_ASN_ENCODING 65536 (0x10000)</term>
            <term>Specifies PKCS #7 message encoding.</term>
            </item>
            <item>
            <term>X509_ASN_ENCODING 1 (0x1)</term>
            <term>Specifies X.509 certificate encoding.</term>
            </item>
            </list>
            </param>
            <param name="hCryptProv">
            <para>This parameter is not used and should be set to <c>NULL</c>.</para>
            <para>
            <c>Windows Server 2003 and Windows XP:</c> A handle to a cryptographic provider. Passing <c>NULL</c> for this parameter causes
            an appropriate, default provider to be used. Using the default provider is recommended. The default or specified cryptographic
            provider is used for all store functions that verify the signature of a subject certificate or CRL.This parameter's data type is <c>HCRYPTPROV</c>.
            </para>
            </param>
            <param name="dwFlags">
            <para>These values consist of high-word and low-word values combined by using a bitwise- <c>OR</c> operation.</para>
            <para>
            The low-word portion of dwFlags controls a variety of general characteristics of the certificate store opened. This portion can
            be used with all store provider types. The low-word portion of dwFlags can be one of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_STORE_BACKUP_RESTORE_FLAG</term>
            <term>
            Use the thread's SE_BACKUP_NAME and SE_RESTORE_NAME privileges to open registry or file-based system stores. If the thread does
            not have these privileges, this function must fail with an access denied error.
            </term>
            </item>
            <item>
            <term>CERT_STORE_CREATE_NEW_FLAG</term>
            <term>
            A new store is created if one did not exist. The function fails if the store already exists. If neither
            CERT_STORE_OPEN_EXISTING_FLAG nor CERT_STORE_CREATE_NEW_FLAG is set, a store is opened if it exists or is created and opened if
            it did not already exist.
            </term>
            </item>
            <item>
            <term>CERT_STORE_DEFER_CLOSE_UNTIL_LAST_FREE_FLAG</term>
            <term>
            Defer closing of the store's provider until all certificates, CRLs, or CTLs obtained from the store are no longer in use. The
            store is actually closed when the last certificate, CRL, or CTL obtained from the store is freed. Any changes made to properties
            of these certificates, CRLs, and CTLs, even after the call to CertCloseStore, are persisted. If this flag is not set and
            certificates, CRLs, or CTLs obtained from the store are still in use, any changes to the properties of those certificates, CRLs,
            and CTLs will not be persisted. If this function is called with CERT_CLOSE_STORE_FORCE_FLAG,
            CERT_STORE_DEFER_CLOSE_UNTIL_LAST_FREE_FLAG is ignored. When this flag is set and a non-NULL hCryptProv parameter value is
            passed, that provider will continue to be used even after the call to this function.
            </term>
            </item>
            <item>
            <term>CERT_STORE_DELETE_FLAG</term>
            <term>
            The store is deleted instead of being opened. This function returns NULL for both success and failure of the deletion. To
            determine the success of the deletion, call GetLastError, which returns zero if the store was deleted and a nonzero value if it
            was not deleted.
            </term>
            </item>
            <item>
            <term>CERT_STORE_ENUM_ARCHIVED_FLAG</term>
            <term>
            Normally, an enumeration of all certificates in the store will ignore any certificate with the CERT_ARCHIVED_PROP_ID property
            set. If this flag is set, an enumeration of the certificates in the store will contain all of the certificates in the store,
            including those that have the CERT_ARCHIVED_PROP_ID property.
            </term>
            </item>
            <item>
            <term>CERT_STORE_MAXIMUM_ALLOWED_FLAG</term>
            <term>
            Open the store with the maximum set of allowed permissions. If this flag is specified, registry stores are first opened with
            write access and if that fails, they are reopened with read-only access.
            </term>
            </item>
            <item>
            <term>CERT_STORE_NO_CRYPT_RELEASE_FLAG</term>
            <term>
            This flag is not used when the hCryptProv parameter is NULL. This flag is only valid when a non-NULL CSP handle is passed as the
            hCryptProv parameter. Setting this flag prevents the automatic release of a nondefault CSP when the certificate store is closed.
            </term>
            </item>
            <item>
            <term>CERT_STORE_OPEN_EXISTING_FLAG</term>
            <term>Only open an existing store. If the store does not exist, the function fails.</term>
            </item>
            <item>
            <term>CERT_STORE_READONLY_FLAG</term>
            <term>
            Open the store in read-only mode. Any attempt to change the contents of the store will result in an error. When this flag is set
            and a registry based store provider is being used, the registry subkeys are opened by using RegOpenKey with KEY_READ_ACCESS.
            Otherwise, the registry subkeys are created by using RegCreateKey with KEY_ALL_ACCESS.
            </term>
            </item>
            <item>
            <term>CERT_STORE_SET_LOCALIZED_NAME_FLAG</term>
            <term>
            If this flag is supported, the provider sets the store's CERT_STORE_LOCALIZED_NAME_PROP_ID property. The localized name can be
            retrieved by calling the CertGetStoreProperty function with dwPropID set to CERT_STORE_LOCALIZED_NAME_PROP_ID. This flag is
            supported for providers of types CERT_STORE_PROV_FILENAME, CERT_STORE_PROV_SYSTEM, CERT_STORE_PROV_SYSTEM_REGISTRY, and CERT_STORE_PROV_PHYSICAL_W.
            </term>
            </item>
            <item>
            <term>CERT_STORE_SHARE_CONTEXT_FLAG</term>
            <term>
            When opening a store multiple times, you can set this flag to ensure efficient memory usage by reusing the memory for the
            encoded parts of a certificate, CRL, or CTL context across the opened instances of the stores.
            </term>
            </item>
            <item>
            <term>CERT_STORE_UPDATE_KEYID_FLAG</term>
            <term>
            Lists of key identifiers exist within CurrentUser and LocalMachine. These key identifiers have properties much like the
            properties of certificates. If the CERT_STORE_UPDATE_KEYID_FLAG is set, then for every key identifier in the store's location
            that has a CERT_KEY_PROV_INFO_PROP_ID property, that property is automatically updated from the key identifier property
            CERT_KEY_PROV_INFO_PROP_ID or the CERT_KEY_IDENTIFIER_PROP_ID of the certificate related to that key identifier.
            </term>
            </item>
            </list>
            <para>
            The <c>CERT_STORE_PROV_SYSTEM</c>, <c>CERT_STORE_PROV_SYSTEM_REGISTRY</c>, and <c>CERT_STORE_PROV_PHYSICAL</c> provider types
            use the following high words of dwFlags to specify system store registry locations:
            </para>
            <para>CERT_SYSTEM_STORE_CURRENT_SERVICE</para>
            <para>CERT_SYSTEM_STORE_CURRENT_USER</para>
            <para>CERT_SYSTEM_STORE_CURRENT_USER_GROUP_POLICY</para>
            <para>CERT_SYSTEM_STORE_LOCAL_MACHINE</para>
            <para>CERT_SYSTEM_STORE_LOCAL_MACHINE_ENTERPRISE</para>
            <para>CERT_SYSTEM_STORE_LOCAL_MACHINE_GROUP_POLICY</para>
            <para>CERT_SYSTEM_STORE_SERVICES</para>
            <para>CERT_SYSTEM_STORE_USERS</para>
            <para>
            By default, a system store location is opened relative to the <c>HKEY_CURRENT_USER</c>, <c>HKEY_LOCAL_MACHINE</c>, or
            <c>HKEY_USERS</c> predefined registry key. For more information, see System Store Locations.
            </para>
            <para>The following high-word flags override this default behavior.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_SYSTEM_STORE_RELOCATE_FLAG</term>
            <term>
            When set, pvPara must contain a pointer to a CERT_SYSTEM_STORE_RELOCATE_PARA structure rather than a string. The structure
            indicates both the name of the store and its location in the registry.
            </term>
            </item>
            <item>
            <term>CERT_SYSTEM_STORE_UNPROTECTED_FLAG</term>
            <term>
            By default, when the CurrentUser "Root" store is opened, any SystemRegistry roots not on the protected root list are deleted
            from the cache before this function returns. When this flag is set, this default is overridden and all of the roots in the
            SystemRegistry are returned and no check of the protected root list is made.
            </term>
            </item>
            </list>
            <para>The <c>CERT_STORE_PROV_REGISTRY</c> provider uses the following high-word flags.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_REGISTRY_STORE_REMOTE_FLAG</term>
            <term>
            pvPara contains a handle to a registry key on a remote computer. To access a registry key on a remote computer, security
            permissions on the remote computer must be set to allow access. For more information, see Remarks.
            </term>
            </item>
            <item>
            <term>CERT_REGISTRY_STORE_SERIALIZED_FLAG</term>
            <term>
            The CERT_STORE_PROV_REG provider saves certificates, CRLs, and CTLs in a single serialized store subkey instead of performing
            the default save operation. The default is that each certificate, CRL, or CTL is saved as a separate registry subkey under the
            appropriate subkey. This flag is mainly used for stores downloaded from the group policy template (GPT), such as the
            CurrentUserGroupPolicy and LocalMachineGroupPolicy stores. When CERT_REGISTRY_STORE_SERIALIZED_FLAG is set, store additions,
            deletions, or property changes are not persisted until there is a call to either CertCloseStore or CertControlStore using CERT_STORE_CTRL_COMMIT.
            </term>
            </item>
            </list>
            <para>The <c>CERT_STORE_PROV_FILE</c> and <c>CERT_STORE_PROV_FILENAME</c> provider types use the following high-word flags.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_FILE_STORE_COMMIT_ENABLE</term>
            <term>
            Setting this flag commits any additions to the store or any changes made to properties of contexts in the store to the file
            store either when CertCloseStore is called or when CertControlStore is called with CERT_STORE_CONTROL_COMMIT. CertOpenStore
            fails with E_INVALIDARG if both CERT_FILE_STORE_COMMIT_ENABLE and CERT_STORE_READONLY_FLAG are set in dwFlags.
            </term>
            </item>
            </list>
            <para>The <c>CERT_STORE_PROV_LDAP</c> provider type uses the following high-word flags.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_LDAP_STORE_AREC_EXCLUSIVE_FLAG</term>
            <term>
            Performs an A-Record-only DNS lookup on the URL named in the pvPara parameter. This prevents false DNS queries from being
            generated when resolving URL host names. Use this flag when passing a host name as opposed to a domain name for the pvPara parameter.
            </term>
            </item>
            <item>
            <term>CERT_LDAP_STORE_OPENED_FLAG</term>
            <term>
            Use this flag to use an existing LDAP session. When this flag is specified, the pvPara parameter is the address of a
            CERT_LDAP_STORE_OPENED_PARA structure that contains information about the LDAP session to use.
            </term>
            </item>
            <item>
            <term>CERT_LDAP_STORE_SIGN_FLAG</term>
            <term>
            To provide integrity required by some applications, digitally sign all LDAP traffic to and from an LDAP server by using the
            Kerberos authentication protocol.
            </term>
            </item>
            <item>
            <term>CERT_LDAP_STORE_UNBIND_FLAG</term>
            <term>
            Use this flag with the CERT_LDAP_STORE_OPENED_FLAG flag to cause the LDAP session to be unbound when the store is closed. The
            system will unbind the LDAP session by using the ldap_unbind function when the store is closed.
            </term>
            </item>
            </list>
            </param>
            <param name="pvPara">
            A 32-bit value that can contain additional information for this function. The contents of this parameter depends on the value of
            the lpszStoreProvider and other parameters.
            </param>
            <returns>
            <para>
            If the function succeeds, the function returns a handle to the certificate store. When you have finished using the store,
            release the handle by calling the CertCloseStore function.
            </para>
            <para>If the function fails, it returns <c>NULL</c>. For extended error information, call GetLastError.</para>
            <para>
            <c>Note</c> CreateFile, ReadFile, or registry errors might be propagated and their error codes returned. <c>CertOpenStore</c>
            has a single error code of its own, the ERROR_FILE_NOT_FOUND code, which indicates that the function was unable to find the
            provider specified by the lpszStoreProvider parameter.
            </para>
            </returns>
            <remarks>
            <para>
            A system store is a collection that consists of one or more physical sibling stores. For each system store, there are predefined
            physical sibling stores. After opening a system store such as "My" at CERT_SYSTEM_STORE_CURRENT_USER, <c>CertOpenStore</c> is
            called to open all of the physical stores in the system store collection. Each of these physical stores is added to the system
            store collection by using the CertAddStoreToCollection function. All certificates, CRLs, and CTLs in those physical stores are
            available through the logical system store collection.
            </para>
            <para>
            <c>Note</c> The order of the certificate context may not be preserved within the store. To access a specific certificate you
            must iterate across the certificates in the store.
            </para>
            <para>The following system store locations can be opened remotely:</para>
            <list type="bullet">
            <item>
            <term>CERT_SYSTEM_STORE_LOCAL_MACHINE</term>
            </item>
            <item>
            <term>CERT_SYSTEM_STORE_LOCAL_MACHINE_GROUP_POLICY</term>
            </item>
            <item>
            <term>CERT_SYSTEM_STORE_SERVICES</term>
            </item>
            <item>
            <term>CERT_SYSTEM_STORE_USERS</term>
            </item>
            </list>
            <para>
            System store locations are opened remotely by prefixing the store name in the string passed to pvPara with the computer name.
            Examples of remote system store names are:
            </para>
            <list type="bullet">
            <item>
            <term>ComputerName\CA</term>
            </item>
            <item>
            <term>\\ComputerName\CA</term>
            </item>
            <item>
            <term>ComputerName\ServiceName\Trust</term>
            </item>
            <item>
            <term>\\ComputerName\ServiceName\Trust</term>
            </item>
            </list>
            <para>For more information about system stores, see System Store Locations.</para>
            <para>For more information about the stores that are automatically migrated, see Certificate Store Migration.</para>
            <para>Examples</para>
            <para>
            The following example shows opening several certificate stores of different store provider types. The example uses the
            <c>CreateMyDACL</c> function, defined in the Creating a DACL topic, to ensure the open file is created with a proper DACL. For
            more examples of opening other store provider types, see Example C Code for Opening Certificate Stores.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertOpenStore(Vanara.PInvoke.Crypt32.SafeOID,Vanara.PInvoke.Crypt32.CertEncodingType,Vanara.PInvoke.Crypt32.HCRYPTPROV,Vanara.PInvoke.Crypt32.CertStoreFlags,System.String)">
            <summary>
            The <c>CertOpenStore</c> function opens a certificate store by using a specified store provider type. While this function can
            open a certificate store for most purposes, CertOpenSystemStore is recommended to open the most common certificate stores.
            <c>CertOpenStore</c> is required for more complex options and special cases.
            </summary>
            <param name="lpszStoreProvider">
            <para>A pointer to a null-terminated ANSI string that contains the store provider type.</para>
            <para>
            The following values represent the predefined store types. The store provider type determines the contents of the pvPara
            parameter and the use and meaning of the high word of the dwFlags parameter. Additional store providers can be installed or
            registered by using the CryptInstallOIDFunctionAddress or CryptRegisterOIDFunction function. For more information about adding
            store providers, see Extending CertOpenStore Functionality.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_STORE_PROV_COLLECTION sz_CERT_STORE_PROV_COLLECTION</term>
            <term>
            Opens a store that will be a collection of other stores. Stores are added to or removed from the collection by using
            CertAddStoreToCollection and CertRemoveStoreFromCollection. When a store is added to a collection, all certificates, CRLs, and
            CTLs in that store become available to searches or enumerations of the collection store. The high word of dwFlags is set to
            zero. pvPara value: The pvPara parameter must be NULL.
            </term>
            </item>
            <item>
            <term>CERT_STORE_PROV_FILE</term>
            <term>
            Initializes the store with certificates, CRLs, and CTLs read from a specified open file. This provider expects the file to
            contain only a serialized store and not either PKCS #7 signed messages or a single encoded certificate. The file pointer must be
            positioned at the beginning of the serialized store information. After the data in the serialized store has been loaded into the
            certificate store, the file pointer is positioned at the beginning of any data that can follow the serialized store data in the
            file. If CERT_FILE_STORE_COMMIT_ENABLE is set in dwFlags, the file handle is duplicated and the store is always committed as a
            serialized store. The file is not closed when the store is closed. pvPara value: The pvPara parameter must contain a pointer to
            the handle of a file opened by using CreateFile.
            </term>
            </item>
            <item>
            <term>CERT_STORE_PROV_FILENAME_A</term>
            <term>
            Initializes the store with certificates, CRLs, and CTLs from a file. The provider opens the file and first attempts to read the
            file as a serialized store, then as a PKCS #7 signed message, and finally as a single encoded certificate. The dwEncodingType
            parameter must contain the encoding types to be used with both messages and certificates. If the file contains an X.509 encoded
            certificate, the open operation fails and a call to the GetLastError function will return ERROR_ACCESS_DENIED. If the
            CERT_FILE_STORE_COMMIT_ENABLE flag is set in dwFlags, the dwCreationDisposition value passed to CreateFile is as follows: If
            dwFlags includes CERT_FILE_STORE_COMMIT_ENABLE, the file is committed as either a PKCS #7 or a serialized store depending on the
            file type opened. If the file was empty or if the file name has either a .p7c or .spc extension, the file is committed as a PKCS
            #7. Otherwise, the file is committed as a serialized store. pvPara value: The pvPara parameter must contain a pointer to
            null-terminated ANSI string that contains the name of an existing, unopened file.
            </term>
            </item>
            <item>
            <term>CERT_STORE_PROV_FILENAME(_W) sz_CERT_STORE_PROV_FILENAME(_W)</term>
            <term>
            Same as CERT_STORE_PROV_FILENAME_A. pvPara value: The pvPara parameter must contain a pointer to null-terminated Unicode string
            that contains the name of an existing, unopened file.
            </term>
            </item>
            <item>
            <term>CERT_STORE_PROV_LDAP(_W) sz_CERT_STORE_PROV_LDAP(_W)</term>
            <term>
            Initializes the store with certificates, CRLs, and CTLs from the results of an LDAP query. To perform write operations on the
            store, the query string must specify a BASE query with no filter and a single attribute. pvPara value: If the dwFlags parameter
            contains CERT_LDAP_STORE_OPENED_FLAG, set pvPara to the address of a CERT_LDAP_STORE_OPENED_PARA structure that specifies the
            established LDAP session to use. Otherwise, set pvPara to point to a null-terminated Unicode string that contains the LDAP query
            string. For more information about LDAP query strings, see LDAP Dialect.
            </term>
            </item>
            <item>
            <term>CERT_STORE_PROV_MEMORY sz_CERT_STORE_PROV_MEMORY</term>
            <term>
            Creates a certificate store in cached memory. No certificates, certificate revocation lists (CRLs), or certificate trust lists
            (CTLs) are initially loaded into the store. Typically used to create a temporary store. Any addition of certificates, CRLs, or
            CTLs or changes in properties of certificates, CRLs, or CTLs in a memory store are not automatically saved. They can be saved to
            a file or to a memory BLOB by using CertSaveStore. pvPara value: The pvPara parameter is not used.
            </term>
            </item>
            <item>
            <term>CERT_STORE_PROV_MSG</term>
            <term>
            Initializes the store with certificates, CRLs, and CTLs from the specified cryptographic message. The dwEncodingType parameter
            must contain the encoding types used with both messages and certificates. pvPara value: The pvPara parameter contains an
            HCRYPTMSG handle of the encoded message, returned by a call to CryptMsgOpenToDecode.
            </term>
            </item>
            <item>
            <term>CERT_STORE_PROV_PHYSICAL(_W) sz_CERT_STORE_PROV_PHYSICAL(_W)</term>
            <term>
            Initializes the store with certificates, CRLs, and CTLs from a specified physical store that is a member of a logical system
            store. Two names are separated with an intervening backslash (), for example "Root.Default". Here, "Root" is the name of the
            system store and ".Default" is the name of the physical store. The system and physical store names cannot contain any
            backslashes. The high word of dwFlags indicates the system store location, usually CERT_SYSTEM_STORE_CURRENT_USER. For more
            information, see dwFlags later in this topic and see System Store Locations. Some physical store locations can be opened
            remotely. pvPara value: The pvPara parameter points to a null-terminated Unicode string that contains both the system store name
            and physical names.
            </term>
            </item>
            <item>
            <term>CERT_STORE_PROV_PKCS7 sz_CERT_STORE_PROV_PKCS7</term>
            <term>
            Initializes the store with certificates, CRLs, and CTLs from an encoded PKCS #7 signed message. The dwEncodingType parameter
            must specify the encoding types to be used with both messages and certificates. pvPara value: The pvPara parameter points to a
            CRYPT_DATA_BLOB structure that represents the encoded message.
            </term>
            </item>
            <item>
            <term>CERT_STORE_PROV_PKCS12 sz_CERT_STORE_PROV_PKCS12</term>
            <term>
            Initializes the store with the contents of a PKCS #12 packet. If the PKCS #12 packet is protected with a NULL or empty password,
            this function will succeed in opening the store. Beginning with Windows 8 and Windows Server 2012, if the password embedded in
            the PFX packet was protected to an Active Directory (AD) principal and the current user, as a member of that principal, has
            permission to decrypt the password, this function will succeed in opening the store. For more information, see the pvPara
            parameter and the PKCS12_PROTECT_TO_DOMAIN_SIDS flag of the PFXExportCertStoreEx function. You can protect PFX passwords to an
            AD principal beginning in Windows 8 and Windows Server 2012. pvPara value: The pvPara parameter points to a CRYPT_DATA_BLOB
            structure that represents the PKCS #12 packet.
            </term>
            </item>
            <item>
            <term>CERT_STORE_PROV_REG</term>
            <term>
            Initializes the store with certificates, CRLs, and CTLs from a registry subkey. This provider opens or creates the registry
            subkeys Certificates, CRLs, and CTLs under the key passed in pvPara. The input key is not closed by the provider. Before
            returning, the provider opens its own copy of the key passed in pvPara. If CERT_STORE_READONLY_FLAG is set in the low word of
            dwFlags, registry subkeys are opened by using the RegOpenKey with KEY_READ_ACCESS. Otherwise, registry subkeys are created by
            using RegCreateKey with KEY_ALL_ACCESS. Any changes to the contents of the opened store are immediately persisted to the
            registry. However, if CERT_STORE_READONLY_FLAG is set in the low word of dwFlags, any attempt to add to the contents of the
            store or to change a context's property results in an error with GetLastError returning the E_ACCESSDENIED code. pvPara value:
            The pvPara parameter contains the handle of an open registry key.
            </term>
            </item>
            <item>
            <term>CERT_STORE_PROV_SERIALIZED sz_CERT_STORE_PROV_SERIALIZED</term>
            <term>
            Initializes the store with certificates, CRLs, and CTLs from a memory location that contains a serialized store. pvPara value:
            The pvPara parameter points to a CRYPT_DATA_BLOB structure that contains the serialized memory BLOB.
            </term>
            </item>
            <item>
            <term>CERT_STORE_PROV_SMART_CARD(_W) sz_CERT_STORE_PROV_SMART_CARD(_W)</term>
            <term>Not currently used.</term>
            </item>
            <item>
            <term>CERT_STORE_PROV_SYSTEM_A</term>
            <term>
            Initializes the store with certificates, CRLs, and CTLs from the specified system store. The system store is a logical,
            collection store that consists of one or more physical stores. A physical store associated with a system store is registered
            with the CertRegisterPhysicalStore function. After the system store is opened, all of the physical stores that are associated
            with it are also opened by calls to CertOpenStore and are added to the system store collection by using the
            CertAddStoreToCollection function. The high word of dwFlags indicates the system store location, usually set to
            CERT_SYSTEM_STORE_CURRENT_USER. For details about registry locations, see dwFlags later in this topic and System Store
            Locations. Some system store locations can be opened remotely; for more information, see System Store Locations. pvPara value:
            The pvPara parameter points to a null-terminated ANSI string that contains a system store name, such as "My" or "Root".
            </term>
            </item>
            <item>
            <term>CERT_STORE_PROV_SYSTEM(_W) sz_CERT_STORE_PROV_SYSTEM(_W)</term>
            <term>
            Same as CERT_STORE_PROV_SYSTEM_A. pvPara value: The pvPara parameter points to a null-terminated Unicode string that contains a
            system store name, such as "My" or "Root".
            </term>
            </item>
            <item>
            <term>CERT_STORE_PROV_SYSTEM_REGISTRY_A</term>
            <term>
            Initializes the store with certificates, CRLs, and CTLs from a physical registry store. The physical store is not opened as a
            collection store. Enumerations and searches go through only the certificates, CRLs, and CTLs in that one physical store. The
            high word of dwFlags indicates the system store location, usually set to CERT_SYSTEM_STORE_CURRENT_USER. For more information,
            see dwFlags later in this topic. Some system store locations can be open remotely; for more information, see System Store
            Locations. pvPara value: The pvPara parameter points to a null-terminated ANSI string that contains a system store name, such as
            "My" or "Root".
            </term>
            </item>
            <item>
            <term>CERT_STORE_PROV_SYSTEM_REGISTRY(_W) sz_CERT_STORE_PROV_SYSTEM_REGISTRY(_W)</term>
            <term>
            Same as CERT_STORE_PROV_SYSTEM_REGISTRY_A. pvPara value: The pvPara parameter points to a null-terminated Unicode string that
            contains a system store name, such as "My" or "Root".
            </term>
            </item>
            </list>
            </param>
            <param name="dwEncodingType">
            <para>
            Specifies the certificate encoding type and message encoding type. Encoding is used only when the dwSaveAs parameter of the
            CertSaveStore function contains <c>CERT_STORE_SAVE_AS_PKCS7</c>. Otherwise, the dwMsgAndCertEncodingType parameter is not used.
            </para>
            <para>
            This parameter is only applicable when the <c>CERT_STORE_PROV_MSG</c>, <c>CERT_STORE_PROV_PKCS7</c>, or
            <c>CERT_STORE_PROV_FILENAME</c> provider type is specified in the lpszStoreProvider parameter. For all other provider types,
            this parameter is unused and should be set to zero.
            </para>
            <para>This parameter can be a combination of one or more of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>PKCS_7_ASN_ENCODING 65536 (0x10000)</term>
            <term>Specifies PKCS #7 message encoding.</term>
            </item>
            <item>
            <term>X509_ASN_ENCODING 1 (0x1)</term>
            <term>Specifies X.509 certificate encoding.</term>
            </item>
            </list>
            </param>
            <param name="hCryptProv">
            <para>This parameter is not used and should be set to <c>NULL</c>.</para>
            <para>
            <c>Windows Server 2003 and Windows XP:</c> A handle to a cryptographic provider. Passing <c>NULL</c> for this parameter causes
            an appropriate, default provider to be used. Using the default provider is recommended. The default or specified cryptographic
            provider is used for all store functions that verify the signature of a subject certificate or CRL.This parameter's data type is <c>HCRYPTPROV</c>.
            </para>
            </param>
            <param name="dwFlags">
            <para>These values consist of high-word and low-word values combined by using a bitwise- <c>OR</c> operation.</para>
            <para>
            The low-word portion of dwFlags controls a variety of general characteristics of the certificate store opened. This portion can
            be used with all store provider types. The low-word portion of dwFlags can be one of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_STORE_BACKUP_RESTORE_FLAG</term>
            <term>
            Use the thread's SE_BACKUP_NAME and SE_RESTORE_NAME privileges to open registry or file-based system stores. If the thread does
            not have these privileges, this function must fail with an access denied error.
            </term>
            </item>
            <item>
            <term>CERT_STORE_CREATE_NEW_FLAG</term>
            <term>
            A new store is created if one did not exist. The function fails if the store already exists. If neither
            CERT_STORE_OPEN_EXISTING_FLAG nor CERT_STORE_CREATE_NEW_FLAG is set, a store is opened if it exists or is created and opened if
            it did not already exist.
            </term>
            </item>
            <item>
            <term>CERT_STORE_DEFER_CLOSE_UNTIL_LAST_FREE_FLAG</term>
            <term>
            Defer closing of the store's provider until all certificates, CRLs, or CTLs obtained from the store are no longer in use. The
            store is actually closed when the last certificate, CRL, or CTL obtained from the store is freed. Any changes made to properties
            of these certificates, CRLs, and CTLs, even after the call to CertCloseStore, are persisted. If this flag is not set and
            certificates, CRLs, or CTLs obtained from the store are still in use, any changes to the properties of those certificates, CRLs,
            and CTLs will not be persisted. If this function is called with CERT_CLOSE_STORE_FORCE_FLAG,
            CERT_STORE_DEFER_CLOSE_UNTIL_LAST_FREE_FLAG is ignored. When this flag is set and a non-NULL hCryptProv parameter value is
            passed, that provider will continue to be used even after the call to this function.
            </term>
            </item>
            <item>
            <term>CERT_STORE_DELETE_FLAG</term>
            <term>
            The store is deleted instead of being opened. This function returns NULL for both success and failure of the deletion. To
            determine the success of the deletion, call GetLastError, which returns zero if the store was deleted and a nonzero value if it
            was not deleted.
            </term>
            </item>
            <item>
            <term>CERT_STORE_ENUM_ARCHIVED_FLAG</term>
            <term>
            Normally, an enumeration of all certificates in the store will ignore any certificate with the CERT_ARCHIVED_PROP_ID property
            set. If this flag is set, an enumeration of the certificates in the store will contain all of the certificates in the store,
            including those that have the CERT_ARCHIVED_PROP_ID property.
            </term>
            </item>
            <item>
            <term>CERT_STORE_MAXIMUM_ALLOWED_FLAG</term>
            <term>
            Open the store with the maximum set of allowed permissions. If this flag is specified, registry stores are first opened with
            write access and if that fails, they are reopened with read-only access.
            </term>
            </item>
            <item>
            <term>CERT_STORE_NO_CRYPT_RELEASE_FLAG</term>
            <term>
            This flag is not used when the hCryptProv parameter is NULL. This flag is only valid when a non-NULL CSP handle is passed as the
            hCryptProv parameter. Setting this flag prevents the automatic release of a nondefault CSP when the certificate store is closed.
            </term>
            </item>
            <item>
            <term>CERT_STORE_OPEN_EXISTING_FLAG</term>
            <term>Only open an existing store. If the store does not exist, the function fails.</term>
            </item>
            <item>
            <term>CERT_STORE_READONLY_FLAG</term>
            <term>
            Open the store in read-only mode. Any attempt to change the contents of the store will result in an error. When this flag is set
            and a registry based store provider is being used, the registry subkeys are opened by using RegOpenKey with KEY_READ_ACCESS.
            Otherwise, the registry subkeys are created by using RegCreateKey with KEY_ALL_ACCESS.
            </term>
            </item>
            <item>
            <term>CERT_STORE_SET_LOCALIZED_NAME_FLAG</term>
            <term>
            If this flag is supported, the provider sets the store's CERT_STORE_LOCALIZED_NAME_PROP_ID property. The localized name can be
            retrieved by calling the CertGetStoreProperty function with dwPropID set to CERT_STORE_LOCALIZED_NAME_PROP_ID. This flag is
            supported for providers of types CERT_STORE_PROV_FILENAME, CERT_STORE_PROV_SYSTEM, CERT_STORE_PROV_SYSTEM_REGISTRY, and CERT_STORE_PROV_PHYSICAL_W.
            </term>
            </item>
            <item>
            <term>CERT_STORE_SHARE_CONTEXT_FLAG</term>
            <term>
            When opening a store multiple times, you can set this flag to ensure efficient memory usage by reusing the memory for the
            encoded parts of a certificate, CRL, or CTL context across the opened instances of the stores.
            </term>
            </item>
            <item>
            <term>CERT_STORE_UPDATE_KEYID_FLAG</term>
            <term>
            Lists of key identifiers exist within CurrentUser and LocalMachine. These key identifiers have properties much like the
            properties of certificates. If the CERT_STORE_UPDATE_KEYID_FLAG is set, then for every key identifier in the store's location
            that has a CERT_KEY_PROV_INFO_PROP_ID property, that property is automatically updated from the key identifier property
            CERT_KEY_PROV_INFO_PROP_ID or the CERT_KEY_IDENTIFIER_PROP_ID of the certificate related to that key identifier.
            </term>
            </item>
            </list>
            <para>
            The <c>CERT_STORE_PROV_SYSTEM</c>, <c>CERT_STORE_PROV_SYSTEM_REGISTRY</c>, and <c>CERT_STORE_PROV_PHYSICAL</c> provider types
            use the following high words of dwFlags to specify system store registry locations:
            </para>
            <para>CERT_SYSTEM_STORE_CURRENT_SERVICE</para>
            <para>CERT_SYSTEM_STORE_CURRENT_USER</para>
            <para>CERT_SYSTEM_STORE_CURRENT_USER_GROUP_POLICY</para>
            <para>CERT_SYSTEM_STORE_LOCAL_MACHINE</para>
            <para>CERT_SYSTEM_STORE_LOCAL_MACHINE_ENTERPRISE</para>
            <para>CERT_SYSTEM_STORE_LOCAL_MACHINE_GROUP_POLICY</para>
            <para>CERT_SYSTEM_STORE_SERVICES</para>
            <para>CERT_SYSTEM_STORE_USERS</para>
            <para>
            By default, a system store location is opened relative to the <c>HKEY_CURRENT_USER</c>, <c>HKEY_LOCAL_MACHINE</c>, or
            <c>HKEY_USERS</c> predefined registry key. For more information, see System Store Locations.
            </para>
            <para>The following high-word flags override this default behavior.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_SYSTEM_STORE_RELOCATE_FLAG</term>
            <term>
            When set, pvPara must contain a pointer to a CERT_SYSTEM_STORE_RELOCATE_PARA structure rather than a string. The structure
            indicates both the name of the store and its location in the registry.
            </term>
            </item>
            <item>
            <term>CERT_SYSTEM_STORE_UNPROTECTED_FLAG</term>
            <term>
            By default, when the CurrentUser "Root" store is opened, any SystemRegistry roots not on the protected root list are deleted
            from the cache before this function returns. When this flag is set, this default is overridden and all of the roots in the
            SystemRegistry are returned and no check of the protected root list is made.
            </term>
            </item>
            </list>
            <para>The <c>CERT_STORE_PROV_REGISTRY</c> provider uses the following high-word flags.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_REGISTRY_STORE_REMOTE_FLAG</term>
            <term>
            pvPara contains a handle to a registry key on a remote computer. To access a registry key on a remote computer, security
            permissions on the remote computer must be set to allow access. For more information, see Remarks.
            </term>
            </item>
            <item>
            <term>CERT_REGISTRY_STORE_SERIALIZED_FLAG</term>
            <term>
            The CERT_STORE_PROV_REG provider saves certificates, CRLs, and CTLs in a single serialized store subkey instead of performing
            the default save operation. The default is that each certificate, CRL, or CTL is saved as a separate registry subkey under the
            appropriate subkey. This flag is mainly used for stores downloaded from the group policy template (GPT), such as the
            CurrentUserGroupPolicy and LocalMachineGroupPolicy stores. When CERT_REGISTRY_STORE_SERIALIZED_FLAG is set, store additions,
            deletions, or property changes are not persisted until there is a call to either CertCloseStore or CertControlStore using CERT_STORE_CTRL_COMMIT.
            </term>
            </item>
            </list>
            <para>The <c>CERT_STORE_PROV_FILE</c> and <c>CERT_STORE_PROV_FILENAME</c> provider types use the following high-word flags.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_FILE_STORE_COMMIT_ENABLE</term>
            <term>
            Setting this flag commits any additions to the store or any changes made to properties of contexts in the store to the file
            store either when CertCloseStore is called or when CertControlStore is called with CERT_STORE_CONTROL_COMMIT. CertOpenStore
            fails with E_INVALIDARG if both CERT_FILE_STORE_COMMIT_ENABLE and CERT_STORE_READONLY_FLAG are set in dwFlags.
            </term>
            </item>
            </list>
            <para>The <c>CERT_STORE_PROV_LDAP</c> provider type uses the following high-word flags.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_LDAP_STORE_AREC_EXCLUSIVE_FLAG</term>
            <term>
            Performs an A-Record-only DNS lookup on the URL named in the pvPara parameter. This prevents false DNS queries from being
            generated when resolving URL host names. Use this flag when passing a host name as opposed to a domain name for the pvPara parameter.
            </term>
            </item>
            <item>
            <term>CERT_LDAP_STORE_OPENED_FLAG</term>
            <term>
            Use this flag to use an existing LDAP session. When this flag is specified, the pvPara parameter is the address of a
            CERT_LDAP_STORE_OPENED_PARA structure that contains information about the LDAP session to use.
            </term>
            </item>
            <item>
            <term>CERT_LDAP_STORE_SIGN_FLAG</term>
            <term>
            To provide integrity required by some applications, digitally sign all LDAP traffic to and from an LDAP server by using the
            Kerberos authentication protocol.
            </term>
            </item>
            <item>
            <term>CERT_LDAP_STORE_UNBIND_FLAG</term>
            <term>
            Use this flag with the CERT_LDAP_STORE_OPENED_FLAG flag to cause the LDAP session to be unbound when the store is closed. The
            system will unbind the LDAP session by using the ldap_unbind function when the store is closed.
            </term>
            </item>
            </list>
            </param>
            <param name="pvPara">
            A 32-bit value that can contain additional information for this function. The contents of this parameter depends on the value of
            the lpszStoreProvider and other parameters.
            </param>
            <returns>
            <para>
            If the function succeeds, the function returns a handle to the certificate store. When you have finished using the store,
            release the handle by calling the CertCloseStore function.
            </para>
            <para>If the function fails, it returns <c>NULL</c>. For extended error information, call GetLastError.</para>
            <para>
            <c>Note</c> CreateFile, ReadFile, or registry errors might be propagated and their error codes returned. <c>CertOpenStore</c>
            has a single error code of its own, the ERROR_FILE_NOT_FOUND code, which indicates that the function was unable to find the
            provider specified by the lpszStoreProvider parameter.
            </para>
            </returns>
            <remarks>
            <para>
            A system store is a collection that consists of one or more physical sibling stores. For each system store, there are predefined
            physical sibling stores. After opening a system store such as "My" at CERT_SYSTEM_STORE_CURRENT_USER, <c>CertOpenStore</c> is
            called to open all of the physical stores in the system store collection. Each of these physical stores is added to the system
            store collection by using the CertAddStoreToCollection function. All certificates, CRLs, and CTLs in those physical stores are
            available through the logical system store collection.
            </para>
            <para>
            <c>Note</c> The order of the certificate context may not be preserved within the store. To access a specific certificate you
            must iterate across the certificates in the store.
            </para>
            <para>The following system store locations can be opened remotely:</para>
            <list type="bullet">
            <item>
            <term>CERT_SYSTEM_STORE_LOCAL_MACHINE</term>
            </item>
            <item>
            <term>CERT_SYSTEM_STORE_LOCAL_MACHINE_GROUP_POLICY</term>
            </item>
            <item>
            <term>CERT_SYSTEM_STORE_SERVICES</term>
            </item>
            <item>
            <term>CERT_SYSTEM_STORE_USERS</term>
            </item>
            </list>
            <para>
            System store locations are opened remotely by prefixing the store name in the string passed to pvPara with the computer name.
            Examples of remote system store names are:
            </para>
            <list type="bullet">
            <item>
            <term>ComputerName\CA</term>
            </item>
            <item>
            <term>\\ComputerName\CA</term>
            </item>
            <item>
            <term>ComputerName\ServiceName\Trust</term>
            </item>
            <item>
            <term>\\ComputerName\ServiceName\Trust</term>
            </item>
            </list>
            <para>For more information about system stores, see System Store Locations.</para>
            <para>For more information about the stores that are automatically migrated, see Certificate Store Migration.</para>
            <para>Examples</para>
            <para>
            The following example shows opening several certificate stores of different store provider types. The example uses the
            <c>CreateMyDACL</c> function, defined in the Creating a DACL topic, to ensure the open file is created with a proper DACL. For
            more examples of opening other store provider types, see Example C Code for Opening Certificate Stores.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertOpenSystemStore(System.IntPtr,System.String)">
            <summary>
            The <c>CertOpenSystemStore</c> function is a simplified function that opens the most common system certificate store. To open
            certificate stores with more complex requirements, such as file-based or memory-based stores, use CertOpenStore.
            </summary>
            <param name="hProv">
            <para>This parameter is not used and should be set to <c>NULL</c>.</para>
            <para>
            <c>Windows Server 2003 and Windows XP:</c> A handle of a cryptographic service provider (CSP). Set hProv to <c>NULL</c> to use
            the default CSP. If hProv is not <c>NULL</c>, it must be a CSP handle created by using the CryptAcquireContext function.This
            parameter's data type is <c>HCRYPTPROV</c>.
            </para>
            </param>
            <param name="szSubsystemProtocol">
            <para>
            A string that names a system store. If the system store name provided in this parameter is not the name of an existing system
            store, a new system store will be created and used. CertEnumSystemStore can be used to list the names of existing system stores.
            Some example system stores are listed in the following table.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CA</term>
            <term>Certification authority certificates.</term>
            </item>
            <item>
            <term>MY</term>
            <term>A certificate store that holds certificates with associated private keys.</term>
            </item>
            <item>
            <term>ROOT</term>
            <term>Root certificates.</term>
            </item>
            <item>
            <term>SPC</term>
            <term>Software Publisher Certificate.</term>
            </item>
            </list>
            </param>
            <returns>
            <para>If the function succeeds, the function returns a handle to the certificate store.</para>
            <para>If the function fails, it returns <c>NULL</c>. For extended error information, call GetLastError.</para>
            <para><c>Note</c> Errors from the called function CertOpenStore are propagated to this function.</para>
            </returns>
            <remarks>
            <para>Only current user certificates are accessible using this method, not the local machine store.</para>
            <para>After the system store is opened, all the standard certificate store functions can be used to manipulate the certificates.</para>
            <para>After use, the store should be closed by using CertCloseStore.</para>
            <para>For more information about the stores that are automatically migrated, see Certificate Store Migration.</para>
            <para>Examples</para>
            <para>
            The following example shows a simplified method for opening the most common system certificate stores. For another example that
            uses this function, see Example C Program: Certificate Store Operations.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertRegisterPhysicalStore(System.String,System.UInt32,System.String,Vanara.PInvoke.Crypt32.CERT_PHYSICAL_STORE_INFO@,System.IntPtr)">
            <summary>The <c>CertRegisterPhysicalStore</c> function adds a physical store to a registry system store collection.</summary>
            <param name="pvSystemStore">
            The system store collection to which the physical store is added. This parameter points either to a <c>null</c>-terminated
            Unicode string or to a CERT_SYSTEM_STORE_RELOCATE_PARA structure. For information about using the structure and on adding a
            ServiceName or ComputerName before the system store name string, see CertRegisterSystemStore.
            </param>
            <param name="dwFlags">
            <para>
            The high word of the dwFlags parameter specifies the location of the system store. For information about defined high-word flags
            and appending ServiceName, UserNames, and ComputerNames to the end of the system store name, see CertRegisterSystemStore.
            </para>
            <para>The following low-word flags are also defined and can be combined with high-word flags using a bitwise- <c>OR</c> operation.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_SYSTEM_STORE_RELOCATE_FLAG</term>
            <term>
            The system store is not in its default registry location and the pvSystemStore parameter must be a pointer to a
            CERT_SYSTEM_STORE_RELOCATE_PARA structure.
            </term>
            </item>
            <item>
            <term>CERT_STORE_CREATE_NEW_FLAG</term>
            <term>The function fails if the physical store already exists in the store location.</term>
            </item>
            </list>
            </param>
            <param name="pwszStoreName">
            A pointer to a Unicode string that names the physical store to be added to the system store collection. To remove a physical
            store from the system store collection, call the CertUnregisterPhysicalStore function.
            </param>
            <param name="pStoreInfo">
            A pointer to a CERT_PHYSICAL_STORE_INFO structure that provides basic information about the physical store.
            </param>
            <param name="pvReserved">Reserved for future use and must be set to <c>NULL</c>.</param>
            <returns>
            <para>If the function succeeds, the function returns nonzero.</para>
            <para>If the function fails, it returns zero.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertRegisterPhysicalStore(Vanara.PInvoke.Crypt32.CERT_SYSTEM_STORE_RELOCATE_PARA@,System.UInt32,System.String,Vanara.PInvoke.Crypt32.CERT_PHYSICAL_STORE_INFO@,System.IntPtr)">
            <summary>The <c>CertRegisterPhysicalStore</c> function adds a physical store to a registry system store collection.</summary>
            <param name="pvSystemStore">
            The system store collection to which the physical store is added. This parameter points either to a <c>null</c>-terminated
            Unicode string or to a CERT_SYSTEM_STORE_RELOCATE_PARA structure. For information about using the structure and on adding a
            ServiceName or ComputerName before the system store name string, see CertRegisterSystemStore.
            </param>
            <param name="dwFlags">
            <para>
            The high word of the dwFlags parameter specifies the location of the system store. For information about defined high-word flags
            and appending ServiceName, UserNames, and ComputerNames to the end of the system store name, see CertRegisterSystemStore.
            </para>
            <para>The following low-word flags are also defined and can be combined with high-word flags using a bitwise- <c>OR</c> operation.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_SYSTEM_STORE_RELOCATE_FLAG</term>
            <term>
            The system store is not in its default registry location and the pvSystemStore parameter must be a pointer to a
            CERT_SYSTEM_STORE_RELOCATE_PARA structure.
            </term>
            </item>
            <item>
            <term>CERT_STORE_CREATE_NEW_FLAG</term>
            <term>The function fails if the physical store already exists in the store location.</term>
            </item>
            </list>
            </param>
            <param name="pwszStoreName">
            A pointer to a Unicode string that names the physical store to be added to the system store collection. To remove a physical
            store from the system store collection, call the CertUnregisterPhysicalStore function.
            </param>
            <param name="pStoreInfo">
            A pointer to a CERT_PHYSICAL_STORE_INFO structure that provides basic information about the physical store.
            </param>
            <param name="pvReserved">Reserved for future use and must be set to <c>NULL</c>.</param>
            <returns>
            <para>If the function succeeds, the function returns nonzero.</para>
            <para>If the function fails, it returns zero.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertRegisterSystemStore(System.String,System.UInt32,Vanara.PInvoke.Crypt32.CERT_SYSTEM_STORE_INFO@,System.IntPtr)">
            <summary>The <c>CertRegisterSystemStore</c> function registers a system store.</summary>
            <param name="pvSystemStore">
            <para>
            Identifies the system store to be registered. If CERT_SYSTEM_STORE_RELOCATE_FLAG is set in the dwFlags parameter, pvSystemStore
            points to a CERT_SYSTEM_STORE_RELOCATE_PARA structure. Otherwise, it points to a <c>null</c>-terminated Unicode string that
            names the system store.
            </para>
            <para>
            With appropriate settings in dwFlags, the identified store can be a system store on a remote local computer. Stores on remote
            computers can be registered with the computer name as a prefix to the name of the system store. For example, a remote local
            computer store can be registered with pvSystemStore pointing to the string "\ComputerName\Trust" or "ComputerName\Trust".
            </para>
            <para>Leading "\" backslashes are optional before a ComputerName.</para>
            </param>
            <param name="dwFlags">
            <para>The high word of the dwFlags parameter is used to specify the location of the system store.</para>
            <para>The following high-word values are defined.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_SYSTEM_STORE_CURRENT_SERVICE</term>
            <term>pvSystemStore can be a system store name that is prefixed with the ServiceName.</term>
            </item>
            <item>
            <term>CERT_SYSTEM_STORE_CURRENT_USER</term>
            <term>pvSystemStore can be a system store name that is prefixed with the UserName.</term>
            </item>
            <item>
            <term>CERT_SYSTEM_STORE_LOCAL_MACHINE</term>
            <term>pvSystemStore can be a system store that is on a remote computer.</term>
            </item>
            <item>
            <term>CERT_SYSTEM_STORE_LOCAL_MACHINE_GROUP_POLICY</term>
            <term>pvSystemStore is a group policy store and can be on a remote computer.</term>
            </item>
            <item>
            <term>CERT_SYSTEM_STORE_SERVICES</term>
            <term>pvSystemStore must be a system store name prefixed with the ServiceName.</term>
            </item>
            <item>
            <term>CERT_SYSTEM_STORE_USERS</term>
            <term>pvSystemStore must be a system store name that is prefixed with the UserName.</term>
            </item>
            </list>
            <para>
            Stores on remote computers can be registered for CERT_SYSTEM_STORE_LOCAL_MACHINE, CERT_SYSTEM_STORE_SERVICES,
            CERT_SYSTEM_STORE_USERS, or CERT_SYSTEM_STORE_LOCAL_MACHINE_GROUP_POLICY.
            </para>
            <para>
            The following low-word values are also defined and can be combined using a bitwise- <c>OR</c> operation with high-word values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_SYSTEM_STORE_RELOCATE_FLAG</term>
            <term>
            The system store is not in its default register location and pvSystemStore must be a pointer to a
            CERT_SYSTEM_STORE_RELOCATE_PARA structure.
            </term>
            </item>
            <item>
            <term>CERT_STORE_CREATE_NEW_FLAG</term>
            <term>The function fails if the system store already exists in the store location.</term>
            </item>
            </list>
            </param>
            <param name="pStoreInfo">Reserved for future use and must be set to <c>NULL</c>.</param>
            <param name="pvReserved">Reserved for future use and must be set to <c>NULL</c>.</param>
            <returns>
            <para>If the function succeeds, the function returns nonzero.</para>
            <para>If the function fails, it returns zero.</para>
            </returns>
            <remarks>
            <para>To unregister a system store that has been registered by this function, call CertUnregisterSystemStore.</para>
            <para>Examples</para>
            <para>
            The following example shows adding a system store to a registry system store collection. For an example that includes the
            complete context for this example, see Example C Program: Listing System and Physical Stores.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertRegisterSystemStore(Vanara.PInvoke.Crypt32.CERT_SYSTEM_STORE_RELOCATE_PARA@,System.UInt32,Vanara.PInvoke.Crypt32.CERT_SYSTEM_STORE_INFO@,System.IntPtr)">
            <summary>The <c>CertRegisterSystemStore</c> function registers a system store.</summary>
            <param name="pvSystemStore">
            <para>
            Identifies the system store to be registered. If CERT_SYSTEM_STORE_RELOCATE_FLAG is set in the dwFlags parameter, pvSystemStore
            points to a CERT_SYSTEM_STORE_RELOCATE_PARA structure. Otherwise, it points to a <c>null</c>-terminated Unicode string that
            names the system store.
            </para>
            <para>
            With appropriate settings in dwFlags, the identified store can be a system store on a remote local computer. Stores on remote
            computers can be registered with the computer name as a prefix to the name of the system store. For example, a remote local
            computer store can be registered with pvSystemStore pointing to the string "\ComputerName\Trust" or "ComputerName\Trust".
            </para>
            <para>Leading "\" backslashes are optional before a ComputerName.</para>
            </param>
            <param name="dwFlags">
            <para>The high word of the dwFlags parameter is used to specify the location of the system store.</para>
            <para>The following high-word values are defined.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_SYSTEM_STORE_CURRENT_SERVICE</term>
            <term>pvSystemStore can be a system store name that is prefixed with the ServiceName.</term>
            </item>
            <item>
            <term>CERT_SYSTEM_STORE_CURRENT_USER</term>
            <term>pvSystemStore can be a system store name that is prefixed with the UserName.</term>
            </item>
            <item>
            <term>CERT_SYSTEM_STORE_LOCAL_MACHINE</term>
            <term>pvSystemStore can be a system store that is on a remote computer.</term>
            </item>
            <item>
            <term>CERT_SYSTEM_STORE_LOCAL_MACHINE_GROUP_POLICY</term>
            <term>pvSystemStore is a group policy store and can be on a remote computer.</term>
            </item>
            <item>
            <term>CERT_SYSTEM_STORE_SERVICES</term>
            <term>pvSystemStore must be a system store name prefixed with the ServiceName.</term>
            </item>
            <item>
            <term>CERT_SYSTEM_STORE_USERS</term>
            <term>pvSystemStore must be a system store name that is prefixed with the UserName.</term>
            </item>
            </list>
            <para>
            Stores on remote computers can be registered for CERT_SYSTEM_STORE_LOCAL_MACHINE, CERT_SYSTEM_STORE_SERVICES,
            CERT_SYSTEM_STORE_USERS, or CERT_SYSTEM_STORE_LOCAL_MACHINE_GROUP_POLICY.
            </para>
            <para>
            The following low-word values are also defined and can be combined using a bitwise- <c>OR</c> operation with high-word values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_SYSTEM_STORE_RELOCATE_FLAG</term>
            <term>
            The system store is not in its default register location and pvSystemStore must be a pointer to a
            CERT_SYSTEM_STORE_RELOCATE_PARA structure.
            </term>
            </item>
            <item>
            <term>CERT_STORE_CREATE_NEW_FLAG</term>
            <term>The function fails if the system store already exists in the store location.</term>
            </item>
            </list>
            </param>
            <param name="pStoreInfo">Reserved for future use and must be set to <c>NULL</c>.</param>
            <param name="pvReserved">Reserved for future use and must be set to <c>NULL</c>.</param>
            <returns>
            <para>If the function succeeds, the function returns nonzero.</para>
            <para>If the function fails, it returns zero.</para>
            </returns>
            <remarks>
            <para>To unregister a system store that has been registered by this function, call CertUnregisterSystemStore.</para>
            <para>Examples</para>
            <para>
            The following example shows adding a system store to a registry system store collection. For an example that includes the
            complete context for this example, see Example C Program: Listing System and Physical Stores.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertRemoveStoreFromCollection(Vanara.PInvoke.Crypt32.HCERTSTORE,Vanara.PInvoke.Crypt32.HCERTSTORE)">
            <summary>The <c>CertRemoveStoreFromCollection</c> function removes a sibling certificate store from a collection store.</summary>
            <param name="hCollectionStore">A handle of the collection certificate store.</param>
            <param name="hSiblingStore">Handle of the sibling certificate store to be removed from the collection store.</param>
            <returns>This function does not return a value.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertSaveStore(Vanara.PInvoke.Crypt32.HCERTSTORE,Vanara.PInvoke.Crypt32.CertEncodingType,Vanara.PInvoke.Crypt32.CertStoreSaveAs,Vanara.PInvoke.Crypt32.CertStoreSaveTo,System.IntPtr,System.UInt32)">
            <summary>The <c>CertSaveStore</c> function saves the certificate store to a file or to a memory BLOB.</summary>
            <param name="hCertStore">The handle of the certificate store to be saved.</param>
            <param name="dwEncodingType">
            <para>
            Specifies the certificate encoding type and message encoding type. Encoding is used only when dwSaveAs contains
            <c>CERT_STORE_SAVE_AS_PKCS7</c>. Otherwise, the dwMsgAndCertEncodingType parameter is not used.
            </para>
            <para>This parameter can be a combination of one or more of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>PKCS_7_ASN_ENCODING 65536 (0x10000)</term>
            <term>Specifies PKCS 7 message encoding.</term>
            </item>
            <item>
            <term>X509_ASN_ENCODING 1 (0x1)</term>
            <term>Specifies X.509 certificate encoding.</term>
            </item>
            </list>
            </param>
            <param name="dwSaveAs">
            <para>Specifies how to save the certificate store.</para>
            <para>This parameter can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_STORE_SAVE_AS_PKCS7 2</term>
            <term>
            The certificate store can be saved as a PKCS #7 signed message that does not include additional properties. The dwEncodingType
            parameter specifies the message encoding type.
            </term>
            </item>
            <item>
            <term>CERT_STORE_SAVE_AS_STORE 1</term>
            <term>
            The certificate store can be saved as a serialized store containing properties in addition to encoded certificates, certificate
            revocation lists (CRLs), and certificate trust lists (CTLs). The dwEncodingType parameter is ignored.
            </term>
            </item>
            </list>
            </param>
            <param name="dwSaveTo">
            <para>
            Specifies where and how to save the certificate store. The contents of this parameter determines the format of the pvSaveToPara parameter.
            </para>
            <para>This parameter can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_STORE_SAVE_TO_FILE 1</term>
            <term>
            The function saves the certificate store to a file. The pvSaveToPara parameter contains a handle to a file previously obtained
            by using the CreateFile function. The file must be opened with write permission. After a successful save operation, the file
            pointer is positioned after the last write operation.
            </term>
            </item>
            <item>
            <term>CERT_STORE_SAVE_TO_FILENAME 4</term>
            <term>
            The function saves the certificate store to a file. The pvSaveToPara parameter contains a pointer to a null-terminated Unicode
            string that contains the path and file name of the file to save to. The function opens the file, saves to it, and closes it.
            </term>
            </item>
            <item>
            <term>CERT_STORE_SAVE_TO_FILENAME_A 3</term>
            <term>
            The function saves the certificate store to a file. The pvSaveToPara parameter contains a pointer to a null-terminated ANSI
            string that contains the path and file name of the file to save to. The function opens the file, saves to it, and closes it.
            </term>
            </item>
            <item>
            <term>CERT_STORE_SAVE_TO_FILENAME_W 4</term>
            <term>
            The function saves the certificate store to a file. The pvSaveToPara parameter contains a pointer to a null-terminated Unicode
            string that contains the path and file name of the file to save to. The function opens the file, saves to it, and closes it.
            </term>
            </item>
            <item>
            <term>CERT_STORE_SAVE_TO_MEMORY 2</term>
            <term>
            The function saves the certificate store to a memory BLOB. The pvSaveToPara parameter contains a pointer to a CERT_BLOB
            structure. Before use, the CERT_BLOB's pbData and cbData members must be initialized. Upon return, cbData is updated with the
            actual length. For a length-only calculation, pbData must be set to NULL. If pbData is non-NULL and cbData is not large enough,
            the function returns zero with a last error code of ERROR_MORE_DATA.
            </term>
            </item>
            </list>
            </param>
            <param name="pvSaveToPara">
            A pointer that represents where the store should be saved to. The contents of this parameter depends on the value of the
            dwSaveTo parameter.
            </param>
            <param name="dwFlags">This parameter is reserved for future use and must be set to zero.</param>
            <returns>
            <para>If the function succeeds, the function returns nonzero.</para>
            <para>If the function fails, it returns zero. For extended error information, call GetLastError.</para>
            <para>
            Note that CreateFile or WriteFile errors can be propagated to this function. One possible error code is
            <c>CRYPT_E_FILE_ERROR</c> which indicates that an error occurred while writing to the file.
            </para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertSetStoreProperty(Vanara.PInvoke.Crypt32.HCERTSTORE,System.UInt32,System.UInt32,System.IntPtr)">
            <summary>The <c>CertSetStoreProperty</c> function sets a store property.</summary>
            <param name="hCertStore">Handle for the certificate store.</param>
            <param name="dwPropId">
            Indicates one of a range of store properties. Values for user-defined properties must be outside the current range of predefined
            context property values. Currently, user-defined dwPropId values begin at 4,096. There is one predefined store property,
            CERT_STORE_LOCALIZED_NAME_PROP_ID, the localized name of the store.
            </param>
            <param name="dwFlags">Reserved for future use and must be zero.</param>
            <param name="pvData">
            <para>
            The type definition for pvData depends on the dwPropId value. If dwPropId is CERT_STORE_LOCALIZED_NAME_PROP_ID, pvData points to
            a CRYPT_DATA_BLOB structure. The <c>pbData</c> member of that structure is a pointer to a <c>null</c>-terminated Unicode
            character string. The <c>cbData</c> member of that structure is a <c>DWORD</c> value holding the length of the string.
            </para>
            <para>For user-defined dwPropId values, pvData is a pointer to an encoded CRYPT_DATA_BLOB.</para>
            <para>If a value already exists for the selected property, the old value is replaced.</para>
            <para>Calling this function with pvData set to <c>NULL</c> deletes a property.</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>.</para>
            </returns>
            <remarks>
            <para>
            Store property identifiers are properties applicable to an entire store. They are not properties for an individual certificate,
            CRL, or CTL context. Currently, no store properties are persisted.
            </para>
            <para>Examples</para>
            <para>The following example shows setting the localized name property of an open certificate store.</para>
            <para>For another example that uses this function, see Example C Program: Setting and Getting Certificate Store Properties.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertUnregisterPhysicalStore(System.String,Vanara.PInvoke.Crypt32.CertStoreFlags,System.String)">
            <summary>
            The <c>CertUnregisterPhysicalStore</c> function removes a physical store from a specified system store collection.
            <c>CertUnregisterPhysicalStore</c> can also be used to delete the physical store.
            </summary>
            <param name="pvSystemStore">
            A pointer to an identifier of the system store collection from which the physical store is to be removed. It is either to a
            null-terminated Unicode string or to a CERT_SYSTEM_STORE_RELOCATE_PARA structure. For information about using the structure and
            on appending a ServiceName or ComputerName to the end of the system store name string, see CertRegisterSystemStore.
            </param>
            <param name="dwFlags">
            <para>
            The high word of the dwFlags parameter specifies the location of the system store. For information about defined high-word flags
            and on appending ServiceName, UserNames, and ComputerNames to the end of the system store name, see CertRegisterSystemStore.
            </para>
            <para>
            The following low-word values are also defined. They can be combined using bitwise- <c>OR</c> operations with high-word values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_SYSTEM_STORE_RELOCATE_FLAG</term>
            <term>
            The system store is not in its default registry location and pvSystemStore must be a pointer to a
            CERT_SYSTEM_STORE_RELOCATE_PARA structure.
            </term>
            </item>
            <item>
            <term>CERT_STORE_DELETE_FLAG</term>
            <term>The physical store is first removed from the system store collection and is then deleted.</term>
            </item>
            </list>
            </param>
            <param name="pwszStoreName">Null-terminated Unicode string that contains the name of the physical store.</param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertUnregisterPhysicalStore(Vanara.PInvoke.Crypt32.CERT_SYSTEM_STORE_RELOCATE_PARA@,Vanara.PInvoke.Crypt32.CertStoreFlags,System.String)">
            <summary>
            The <c>CertUnregisterPhysicalStore</c> function removes a physical store from a specified system store collection.
            <c>CertUnregisterPhysicalStore</c> can also be used to delete the physical store.
            </summary>
            <param name="pvSystemStore">
            A pointer to an identifier of the system store collection from which the physical store is to be removed. It is either to a
            null-terminated Unicode string or to a CERT_SYSTEM_STORE_RELOCATE_PARA structure. For information about using the structure and
            on appending a ServiceName or ComputerName to the end of the system store name string, see CertRegisterSystemStore.
            </param>
            <param name="dwFlags">
            <para>
            The high word of the dwFlags parameter specifies the location of the system store. For information about defined high-word flags
            and on appending ServiceName, UserNames, and ComputerNames to the end of the system store name, see CertRegisterSystemStore.
            </para>
            <para>
            The following low-word values are also defined. They can be combined using bitwise- <c>OR</c> operations with high-word values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_SYSTEM_STORE_RELOCATE_FLAG</term>
            <term>
            The system store is not in its default registry location and pvSystemStore must be a pointer to a
            CERT_SYSTEM_STORE_RELOCATE_PARA structure.
            </term>
            </item>
            <item>
            <term>CERT_STORE_DELETE_FLAG</term>
            <term>The physical store is first removed from the system store collection and is then deleted.</term>
            </item>
            </list>
            </param>
            <param name="pwszStoreName">Null-terminated Unicode string that contains the name of the physical store.</param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertUnregisterSystemStore(System.String,System.UInt32)">
            <summary>The <c>CertUnregisterSystemStore</c> function unregisters a specified system store.</summary>
            <param name="pvSystemStore">
            Identifies the system store to be unregistered. It points either to a null-terminated Unicode string or to a
            CERT_SYSTEM_STORE_RELOCATE_PARA structure. For information about using the structure and on appending a ServiceName or
            ComputerName to the end of the system store name string, see CertRegisterSystemStore.
            </param>
            <param name="dwFlags">
            <para>
            The high word of the dwFlags parameter specifies the location of the system store. For information about defined high-word flags
            and on appending ServiceName, UserNames, and ComputerNames to the end of the system store name, see CertRegisterSystemStore.
            </para>
            <para>The following low-word values are also defined and can be combined with high-word values using a bitwise- <c>OR</c> operation.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_SYSTEM_STORE_RELOCATE_FLAG</term>
            <term>
            The system store is not in its default registry location and pvSystemStore must be a pointer to a
            CERT_SYSTEM_STORE_RELOCATE_PARA structure.
            </term>
            </item>
            <item>
            <term>CERT_STORE_DELETE_FLAG</term>
            <term>The system store is deleted after it has been unregistered.</term>
            </item>
            </list>
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertUnregisterSystemStore(Vanara.PInvoke.Crypt32.CERT_SYSTEM_STORE_RELOCATE_PARA@,System.UInt32)">
            <summary>The <c>CertUnregisterSystemStore</c> function unregisters a specified system store.</summary>
            <param name="pvSystemStore">
            Identifies the system store to be unregistered. It points either to a null-terminated Unicode string or to a
            CERT_SYSTEM_STORE_RELOCATE_PARA structure. For information about using the structure and on appending a ServiceName or
            ComputerName to the end of the system store name string, see CertRegisterSystemStore.
            </param>
            <param name="dwFlags">
            <para>
            The high word of the dwFlags parameter specifies the location of the system store. For information about defined high-word flags
            and on appending ServiceName, UserNames, and ComputerNames to the end of the system store name, see CertRegisterSystemStore.
            </para>
            <para>The following low-word values are also defined and can be combined with high-word values using a bitwise- <c>OR</c> operation.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_SYSTEM_STORE_RELOCATE_FLAG</term>
            <term>
            The system store is not in its default registry location and pvSystemStore must be a pointer to a
            CERT_SYSTEM_STORE_RELOCATE_PARA structure.
            </term>
            </item>
            <item>
            <term>CERT_STORE_DELETE_FLAG</term>
            <term>The system store is deleted after it has been unregistered.</term>
            </item>
            </list>
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>.</para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CERT_CREATE_CONTEXT_PARA">
            <summary>
            The <c>CERT_CREATE_CONTEXT_PARA</c> structure defines additional values that can be used when calling the CertCreateContext function.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_CREATE_CONTEXT_PARA.cbSize">
            <summary>The size, in bytes, of this structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_CREATE_CONTEXT_PARA.pfnFree">
            <summary>
            A pointer to the function that frees the pbEncoded parameter of the CertCreateContext function. The <c>pfnFree</c> function
            is called when the context created by <c>CertCreateContext</c> is freed. This value can be <c>NULL</c>, in which case the
            pbEncoded parameter of the <c>CertCreateContext</c> function is not freed.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_CREATE_CONTEXT_PARA.pvFree">
            <summary>
            The address of the memory that gets freed by the <c>pfnFree</c> function. If <c>pvFree</c> is <c>NULL</c>, then the
            pbEncoded parameter of the CertCreateContext function is freed.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_CREATE_CONTEXT_PARA.pfnSort">
            <summary>
            <para>A PFN_CERT_CREATE_CONTEXT_SORT_FUNC function pointer that will be called for each sorted context entry.</para>
            <para>
            This member is only present for a <c>CERT_STORE_CTL_CONTEXT</c> when the <c>CERT_CREATE_CONTEXT_SORTED_FLAG</c> flag is set
            in the dwFlags parameter of the CertCreateContext function. You must verify that this member is present before trying to
            access it by examining the <c>cbSize</c> member of this structure.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_CREATE_CONTEXT_PARA.pvSort">
            <summary>
            <para>
            An application-defined value that will be passed in the pvSort parameter of the PFN_CERT_CREATE_CONTEXT_SORT_FUNC callback function.
            </para>
            <para>
            This member is only present for a <c>CERT_STORE_CTL_CONTEXT</c> when the <c>CERT_CREATE_CONTEXT_SORTED_FLAG</c> flag is set
            in the dwFlags parameter of the CertCreateContext function. You must verify that this member is present before trying to
            access it by examining the <c>cbSize</c> member of this structure.
            </para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CERT_PHYSICAL_STORE_INFO">
            <summary>
            The <c>CERT_PHYSICAL_STORE_INFO</c> structure contains information on physical certificate stores. Some members of these
            structures are passed directly to system calls of CertOpenStore to open the physical store.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_PHYSICAL_STORE_INFO.cbSize">
            <summary>The size, in bytes, of this structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_PHYSICAL_STORE_INFO.pszOpenStoreProvider">
            <summary>
            <para>
            A pointer to a string that names a certificate store provider type. This string is passed in a system call to CertOpenStore
            and determines the provider type of a certificate store to be opened. For the names of predefined certificate store types,
            see <c>CertOpenStore</c>.
            </para>
            <para>
            In addition to predefined certificate store provider types, new store provider types can be installed and registered with
            CryptInstallOIDFunctionAddress or CryptRegisterOIDFunction. For more information, see CertOpenStore.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_PHYSICAL_STORE_INFO.dwOpenEncodingType">
            <summary>
            <para>
            This member is applicable only when CERT_STORE_PROV_MSG, CERT_STORE_PROV_PKCS7, or CERT_STORE_PROV_FILENAME is passed in
            lpszStoreProvider. Otherwise, this member is not used.
            </para>
            <para>
            It is always acceptable to specify both the certificate and message encoding types by combining them with a bitwise-
            <c>OR</c> operation as shown in the following example:
            </para>
            <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are:</para>
            <list type="bullet">
            <item>
            <term>X509_ASN_ENCODING</term>
            </item>
            <item>
            <term>PKCS_7_ASN_ENCODING</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_PHYSICAL_STORE_INFO.dwOpenFlags">
            <summary>
            If a system store is opened with the SERVICES or USERS store location, the <c>dwOpenFlags</c> store location is set to
            CERT_SYSTEM_STORE_USERS or CERT_SYSTEM_STORE_SERVICES.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_PHYSICAL_STORE_INFO.OpenParameters">
            <summary>
            A CRYPT_DATA_BLOB that contains data to be passed to the pvPara parameter of the CertOpenStore function. The data type
            depends on the provider specified. For detailed information about the type and content to be passed, see descriptions of
            available providers in <c>CertOpenStore</c>.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_PHYSICAL_STORE_INFO.dwFlags">
            <summary>
            <para>The following <c>dwFlags</c> values for CERT_PHYSICAL_STORE_INFO are defined.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_PHYSICAL_STORE_ADD_ENABLE_FLAG</term>
            <term>Enables addition to a context to the store.</term>
            </item>
            <item>
            <term>CERT_PHYSICAL_STORE_OPEN_DISABLE_FLAG</term>
            <term>
            Set by the CertRegisterPhysicalStore function. By default, all system stores located in the registry have an implicit
            SystemRegistry physical store that is opened. To disable the opening of this store, the SystemRegistry physical store that
            corresponds to the System store must be registered by setting CERT_PHYSICAL_STORE_OPEN_DISABLE_FLAG or by registering a
            physical store named ".Default" with CertRegisterPhysicalStore.
            </term>
            </item>
            <item>
            <term>CERT_PHYSICAL_STORE_REMOTE_OPEN_DISABLE_FLAG</term>
            <term>Disables remote opening of the physical store.</term>
            </item>
            <item>
            <term>CERT_PHYSICAL_STORE_INSERT_COMPUTER_NAME_ENABLE_FLAG</term>
            <term>Places the string \\ComputerName in front of other provider types.</term>
            </item>
            <item>
            <term>CERT_SYSTEM_STORE_RELOCATE_FLAG</term>
            <term>
            Enables CertOpenStore to open a store relative to a user-specified HKEY instead of one of the predefined HKEY constants. For
            example, HKEY_CURRENT_USER can be replaced with a user-specified HKEY. When CERT_SYSTEM_STORE_RELOCATE_FLAG is set, the
            pvPara parameter passed to CertOpenStore points to a CERT_SYSTEM_STORE_RELOCATE_PARA structure instead of pointing to the
            store name as a null-terminated Unicode or ASCII string.
            </term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_PHYSICAL_STORE_INFO.dwPriority">
            <summary>
            When a system store is opened, its physical stores are ordered according to their <c>dwPriority</c> settings. A higher
            <c>dwPriority</c> indicates higher priority. The <c>dwPriority</c> member is passed to CertAddStoreToCollection.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CERT_SYSTEM_STORE_INFO">
            <summary>
            The <c>CERT_SYSTEM_STORE_INFO</c> structure contains information used by functions that work with system stores. Currently, no
            essential information is contained in this structure.
            </summary>
            <remarks>Currently, no system store information is persisted.</remarks>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_SYSTEM_STORE_INFO.cbSize">
            <summary>Size of this structure in bytes.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CERT_SYSTEM_STORE_RELOCATE_PARA">
            <summary>
            The <c>CERT_SYSTEM_STORE_RELOCATE_PARA</c> structure contains data to be passed to CertOpenStore when that function's dwFlags
            parameter is set to CERT_SYSTEM_STORE_RELOCATE_FLAG. It allows the application to specify not only the name of the store to be
            opened, but also registry hKey information indicating a registry location other than the default location.
            </summary>
            <remarks>
            The relocate capability is used to access system stores persisted in the Group Policy Template (GPT). For example, the Group
            Policy Editor's MMC snap-in extension for managing group policy trust lists and certificates uses the GPT's base HKEY to call CertOpenStore.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_SYSTEM_STORE_RELOCATE_PARA.pvBase">
            <summary>A pointer to a void to allow the system store location's base to be passed in a number of different forms.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_SYSTEM_STORE_RELOCATE_PARA.pvSystemStore">
            <summary>A pointer to a void to allow the name of the system store to be passed in various forms.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.HCERTSTORE">
            <summary>Provides a handle to a certificate store.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.HCERTSTORE.#ctor(System.IntPtr)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Crypt32.HCERTSTORE"/> struct.</summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
        </member>
        <member name="P:Vanara.PInvoke.Crypt32.HCERTSTORE.NULL">
            <summary>Returns an invalid handle by instantiating a <see cref="T:Vanara.PInvoke.Crypt32.HCERTSTORE"/> object with <see cref="F:System.IntPtr.Zero"/>.</summary>
        </member>
        <member name="P:Vanara.PInvoke.Crypt32.HCERTSTORE.IsNull">
            <summary>Gets a value indicating whether this instance is a null handle.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.HCERTSTORE.op_Explicit(Vanara.PInvoke.Crypt32.HCERTSTORE)~System.IntPtr">
            <summary>Performs an explicit conversion from <see cref="T:Vanara.PInvoke.Crypt32.HCERTSTORE"/> to <see cref="T:System.IntPtr"/>.</summary>
            <param name="h">The handle.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.HCERTSTORE.op_Implicit(System.IntPtr)~Vanara.PInvoke.Crypt32.HCERTSTORE">
            <summary>Performs an implicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:Vanara.PInvoke.Crypt32.HCERTSTORE"/>.</summary>
            <param name="h">The pointer to a handle.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.HCERTSTORE.op_Inequality(Vanara.PInvoke.Crypt32.HCERTSTORE,Vanara.PInvoke.Crypt32.HCERTSTORE)">
            <summary>Implements the operator !=.</summary>
            <param name="h1">The first handle.</param>
            <param name="h2">The second handle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.HCERTSTORE.op_Equality(Vanara.PInvoke.Crypt32.HCERTSTORE,Vanara.PInvoke.Crypt32.HCERTSTORE)">
            <summary>Implements the operator ==.</summary>
            <param name="h1">The first handle.</param>
            <param name="h2">The second handle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.HCERTSTORE.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.HCERTSTORE.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.HCERTSTORE.DangerousGetHandle">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.HCRYPTMSG">
            <summary>Provides a handle to a cryptographic-signed message.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.HCRYPTMSG.#ctor(System.IntPtr)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Crypt32.HCRYPTMSG"/> struct.</summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
        </member>
        <member name="P:Vanara.PInvoke.Crypt32.HCRYPTMSG.NULL">
            <summary>Returns an invalid handle by instantiating a <see cref="T:Vanara.PInvoke.Crypt32.HCRYPTMSG"/> object with <see cref="F:System.IntPtr.Zero"/>.</summary>
        </member>
        <member name="P:Vanara.PInvoke.Crypt32.HCRYPTMSG.IsNull">
            <summary>Gets a value indicating whether this instance is a null handle.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.HCRYPTMSG.op_Explicit(Vanara.PInvoke.Crypt32.HCRYPTMSG)~System.IntPtr">
            <summary>Performs an explicit conversion from <see cref="T:Vanara.PInvoke.Crypt32.HCRYPTMSG"/> to <see cref="T:System.IntPtr"/>.</summary>
            <param name="h">The handle.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.HCRYPTMSG.op_Implicit(System.IntPtr)~Vanara.PInvoke.Crypt32.HCRYPTMSG">
            <summary>Performs an implicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:Vanara.PInvoke.Crypt32.HCRYPTMSG"/>.</summary>
            <param name="h">The pointer to a handle.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.HCRYPTMSG.op_Inequality(Vanara.PInvoke.Crypt32.HCRYPTMSG,Vanara.PInvoke.Crypt32.HCRYPTMSG)">
            <summary>Implements the operator !=.</summary>
            <param name="h1">The first handle.</param>
            <param name="h2">The second handle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.HCRYPTMSG.op_Equality(Vanara.PInvoke.Crypt32.HCRYPTMSG,Vanara.PInvoke.Crypt32.HCRYPTMSG)">
            <summary>Implements the operator ==.</summary>
            <param name="h1">The first handle.</param>
            <param name="h2">The second handle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.HCRYPTMSG.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.HCRYPTMSG.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.HCRYPTMSG.DangerousGetHandle">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.SafeHCERTSTORE">
            <summary>Provides a <see cref="T:System.Runtime.InteropServices.SafeHandle"/> for <see cref="T:Vanara.PInvoke.Crypt32.HCERTSTORE"/> that is disposed using <see cref="M:Vanara.PInvoke.Crypt32.CertCloseStore(Vanara.PInvoke.Crypt32.HCERTSTORE,Vanara.PInvoke.Crypt32.CertCloseStoreFlags)"/>.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.SafeHCERTSTORE.#ctor(System.IntPtr,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Crypt32.SafeHCERTSTORE"/> class and assigns an existing handle.</summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
            <param name="ownsHandle">
            <see langword="true"/> to reliably release the handle during the finalization phase; otherwise, <see langword="false"/> (not recommended).
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.SafeHCERTSTORE.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Crypt32.SafeHCERTSTORE"/> class.</summary>
        </member>
        <member name="P:Vanara.PInvoke.Crypt32.SafeHCERTSTORE.Flag">
            <summary>
            Typically, this property uses the default value zero. The default is to close the store with memory remaining allocated for
            contexts that have not been freed. In this case, no check is made to determine whether memory for contexts remains allocated.
            <para>
            Set flags can force the freeing of memory for all of a store's certificate, certificate revocation list (CRL), and
            certificate trust list (CTL) contexts when the store is closed. Flags can also be set that check whether all of the store's
            certificate, CRL, and CTL contexts have been freed.The following values are defined.
            </para>
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.SafeHCERTSTORE.op_Implicit(Vanara.PInvoke.Crypt32.SafeHCERTSTORE)~Vanara.PInvoke.Crypt32.HCERTSTORE">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.Crypt32.SafeHCERTSTORE"/> to <see cref="T:Vanara.PInvoke.Crypt32.HCERTSTORE"/>.</summary>
            <param name="h">The safe handle instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.SafeHCERTSTORE.InternalReleaseHandle">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CertStoreProvider">
            <summary>Certificate Store Provider constants.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreProvider.CERT_STORE_PROV_MSG">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreProvider.CERT_STORE_PROV_MEMORY">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreProvider.CERT_STORE_PROV_FILE">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreProvider.CERT_STORE_PROV_REG">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreProvider.CERT_STORE_PROV_PKCS7">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreProvider.CERT_STORE_PROV_SERIALIZED">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreProvider.CERT_STORE_PROV_FILENAME">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreProvider.CERT_STORE_PROV_SYSTEM">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreProvider.CERT_STORE_PROV_COLLECTION">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreProvider.CERT_STORE_PROV_SYSTEM_REGISTRY">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreProvider.CERT_STORE_PROV_PHYSICAL">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreProvider.CERT_STORE_PROV_SMART_CARD">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreProvider.CERT_STORE_PROV_LDAP">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreProvider.CERT_STORE_PROV_PKCS12">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreProvider.sz_CERT_STORE_PROV_MEMORY">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreProvider.sz_CERT_STORE_PROV_FILENAME">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreProvider.sz_CERT_STORE_PROV_SYSTEM">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreProvider.sz_CERT_STORE_PROV_PKCS7">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreProvider.sz_CERT_STORE_PROV_PKCS12">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreProvider.sz_CERT_STORE_PROV_SERIALIZED">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreProvider.sz_CERT_STORE_PROV_COLLECTION">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreProvider.sz_CERT_STORE_PROV_SYSTEM_REGISTRY">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreProvider.sz_CERT_STORE_PROV_PHYSICAL">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreProvider.sz_CERT_STORE_PROV_SMART_CARD">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertStoreProvider.sz_CERT_STORE_PROV_LDAP">
            <summary/>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertAddCTLContextToStore(Vanara.PInvoke.Crypt32.HCERTSTORE,Vanara.PInvoke.Crypt32.PCCTL_CONTEXT,Vanara.PInvoke.Crypt32.CertStoreAdd,Vanara.PInvoke.Crypt32.SafePCCTL_CONTEXT@)">
            <summary>The <c>CertAddCTLContextToStore</c> function adds a certificate trust list (CTL) context to a certificate store.</summary>
            <param name="hCertStore">Handle of a certificate store.</param>
            <param name="pCtlContext">A pointer to the CTL_CONTEXT structure to be added to the store.</param>
            <param name="dwAddDisposition">
            <para>
            Specifies the action to take if a matching CTL or a link to a matching CTL already exists in the store. Currently defined
            disposition values and their uses are as follows.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_STORE_ADD_ALWAYS</term>
            <term>
            Makes no check for an existing matching CTL or link to a matching CTL. A new CTL is always added to the store. This can lead to
            duplicates in a store.
            </term>
            </item>
            <item>
            <term>CERT_STORE_ADD_NEW</term>
            <term>If a matching CTL or a link to a matching CTL exists, the operation fails. GetLastError returns the CRYPT_E_EXISTS code.</term>
            </item>
            <item>
            <term>CERT_STORE_ADD_NEWER</term>
            <term>
            If a matching CTL or a link to a matching CTL exists, the ThisUpdate times on the CTLs are compared. If the existing CTL has a
            ThisUpdate time less than the ThisUpdate time on the new CTL, the old CTL or link is replaced just as with
            CERT_STORE_ADD_REPLACE_EXISTING. If the existing CTL has a ThisUpdate time greater than or equal to the ThisUpdate time on the
            CTL to be added, the function fails with GetLastError returning the CRYPT_E_EXISTS code. If a matching CTL or a link to a
            matching CTL is not found in the store, a new CTL is added to the store.
            </term>
            </item>
            <item>
            <term>CERT_STORE_ADD_NEWER_INHERIT_PROPERTIES</term>
            <term>
            The action is the same as for CERT_STORE_ADD_NEWER, except that if an older CTL is replaced, the properties of the older CTL are
            incorporated into the replacement CTL.
            </term>
            </item>
            <item>
            <term>CERT_STORE_ADD_REPLACE_EXISTING</term>
            <term>
            If a matching CTL or a link to a matching CTL exists, the existing CTL or link is deleted and a new CTL is created and added to
            the store. If a matching CTL or a link to a matching CTL does not exist, one is added.
            </term>
            </item>
            <item>
            <term>CERT_STORE_ADD_REPLACE_EXISTING_INHERIT_PROPERTIES</term>
            <term>
            If a matching CTL exists in the store, that existing context is deleted before creating and adding the new context. The added
            context inherits properties from the existing CTL.
            </term>
            </item>
            <item>
            <term>CERT_STORE_ADD_USE_EXISTING</term>
            <term>
            If a matching CTL or a link to a matching CTL exists, that existing CTL is used and properties from the new CTL are added. The
            function does not fail, but no new CTL is added. If ppCertContext is not NULL, the existing context is duplicated. If a matching
            CTL or a link to a matching CTL does not exist, a new CTL is added.
            </term>
            </item>
            </list>
            </param>
            <param name="ppStoreContext">
            Pointer to a pointer to the decoded CTL context. This optional parameter can be <c>NULL</c> indicating that the calling
            application does not require a copy of the added or existing CTL. If a copy is made, that context must be freed using CertFreeCTLContext.
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>
            If the function fails, the return value is <c>FALSE</c>. Errors from the called functions CertAddEncodedCRLToStore and
            CertSetCRLContextProperty can be propagated to this function.
            </para>
            <para>For extended error information, call GetLastError. Some possible error codes follow.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>CRYPT_E_EXISTS</term>
            <term>
            This error is returned if CERT_STORE_ADD_NEW is set and the CTL exists in the store or if CERT_STORE_ADD_NEWER is set and a CTL
            exists in the store with a ThisUpdate date greater than or equal to the ThisUpdate date on the CTL to be added.
            </term>
            </item>
            <item>
            <term>E_INVALIDARG</term>
            <term>An add disposition that is not valid was specified by the dwAddDisposition parameter.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            The CTL context is not duplicated using CertDuplicateCTLContext. Instead, a new copy is created and added to the store. In
            addition to the encoded CTL, the context's properties are copied.
            </para>
            <para>To remove the CTL context from the certificate store, use the CertDeleteCTLFromStore function.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertAddCTLLinkToStore(Vanara.PInvoke.Crypt32.HCERTSTORE,Vanara.PInvoke.Crypt32.PCCTL_CONTEXT,Vanara.PInvoke.Crypt32.CertStoreAdd,Vanara.PInvoke.Crypt32.SafePCCTL_CONTEXT@)">
            <summary>
            The <c>CertAddCTLLinkToStore</c> function adds a link in a store to a certificate trust list (CTL) context in a different store.
            Instead of creating and adding a duplicate of a CTL context, this function adds a link to the original CTL context.
            </summary>
            <param name="hCertStore">Handle of the certificate store where the link is to be added.</param>
            <param name="pCtlContext">A pointer to the CTL_CONTEXT structure to be linked.</param>
            <param name="dwAddDisposition">
            <para>
            Specifies the action to take if a matching CTL or a link to a matching CTL already exists in the store. Currently defined
            disposition values and their uses are as follows.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_STORE_ADD_ALWAYS</term>
            <term>
            Makes no check for an existing matching CTL or link to a matching CTL. A new CTL is always added to the store. This can lead to
            duplicates in a store.
            </term>
            </item>
            <item>
            <term>CERT_STORE_ADD_NEW</term>
            <term>If a matching CTL or a link to a matching CTL exists, the operation fails. GetLastError returns the CRYPT_E_EXISTS code.</term>
            </item>
            <item>
            <term>CERT_STORE_ADD_NEWER</term>
            <term>
            If a matching CTL or a link to a matching CTL exists, the ThisUpdate times on the CTLs are compared. If the existing CTL has a
            ThisUpdate time less than the ThisUpdate time on the new CTL, the old CTL or link is replaced just as with
            CERT_STORE_ADD_REPLACE_EXISTING. If the existing CTL has a ThisUpdate time greater than or equal to the ThisUpdate time on the
            CTL to be added, the function fails with GetLastError returning the CRYPT_E_EXISTS code. If a matching CTL or a link to a
            matching CTL is not found in the store, a new CTL is added to the store.
            </term>
            </item>
            <item>
            <term>CERT_STORE_ADD_NEWER_INHERIT_PROPERTIES</term>
            <term>
            The action is the same as for CERT_STORE_ADD_NEWER, except that if an older CTL is replaced, the properties of the older CTL are
            incorporated into the replacement CTL.
            </term>
            </item>
            <item>
            <term>CERT_STORE_ADD_REPLACE_EXISTING</term>
            <term>
            If a matching CTL or a link to a matching CTL exists, the existing CTL or link is deleted and a new CTL is created and added to
            the store. If a matching CTL or a link to a matching CTL does not exist, one is added.
            </term>
            </item>
            <item>
            <term>CERT_STORE_ADD_REPLACE_EXISTING_INHERIT_PROPERTIES</term>
            <term>
            If a matching CTL exists in the store, that existing context is deleted before creating and adding the new context. The added
            context inherits properties from the existing CTL.
            </term>
            </item>
            <item>
            <term>CERT_STORE_ADD_USE_EXISTING</term>
            <term>
            If a matching CTL or a link to a matching CTL exists, that existing CTL is used and properties from the new CTL are added. The
            function does not fail, but no new CTL is added. If ppCertContext is not NULL, the existing context is duplicated. If a matching
            CTL or a link to a matching CTL does not exist, a new CTL is added.
            </term>
            </item>
            </list>
            </param>
            <param name="ppStoreContext">
            A pointer to a pointer to a copy of the link created. ppStoreContext can be <c>NULL</c> to indicate that a copy of the link is
            not needed. If a copy of the link is created, that copy must be freed using CertFreeCTLContext.
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>
            If the function fails, the return value is <c>FALSE</c>. For extended error information, call GetLastError. Some possible error
            codes follow.
            </para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>CRYPT_E_EXISTS</term>
            <term>For a dwAddDisposition of CERT_STORE_ADD_NEW, the CTL already exists in the store.</term>
            </item>
            <item>
            <term>E_INVALIDARG</term>
            <term>The add disposition specified by the dwAddDisposition parameter is not valid.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            Because the link provides access to the original CTL context, setting an extended property in the linked CTL context changes
            that extended property in the original CTL's location and in any other links to that CTL.
            </para>
            <para>
            Links cannot be added to a store that is opened as a collection. Stores opened as collections include all stores opened with
            CertOpenSystemStore or CertOpenStore using CERT_STORE_PROV_SYSTEM or CERT_STORE_PROV_COLLECTION. Also see CertAddStoreToCollection.
            </para>
            <para>
            When links are used and CertCloseStore is called with CERT_CLOSE_STORE_FORCE_FLAG, the store using links must be closed before
            the store containing the original contexts is closed. If CERT_CLOSE_STORE_FORCE_FLAG is not used, the two stores can be closed
            in either order.
            </para>
            <para>To remove the CTL context link from the certificate store, use the CertDeleteCTLFromStore function.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertAddEncodedCTLToStore(Vanara.PInvoke.Crypt32.HCERTSTORE,Vanara.PInvoke.Crypt32.CertEncodingType,System.IntPtr,System.UInt32,Vanara.PInvoke.Crypt32.CertStoreAdd,Vanara.PInvoke.Crypt32.SafePCCTL_CONTEXT@)">
            <summary>
            The <c>CertAddEncodedCTLToStore</c> function creates a certificate trust list (CTL) context from an encoded CTL and adds it to
            the certificate store. The function makes a copy of the CTL context before adding it to the store.
            </summary>
            <param name="hCertStore">Handle of a certificate store.</param>
            <param name="dwMsgAndCertEncodingType">
            <para>
            Specifies the type of encoding used. Both the certificate and message encoding types must be specified by combining them with a
            bitwise- <c>OR</c> operation as shown in the following example:
            </para>
            <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING</para>
            <para>Currently defined encoding types are:</para>
            <list type="bullet">
            <item>
            <term>X509_ASN_ENCODING</term>
            </item>
            <item>
            <term>PKCS_7_ASN_ENCODING</term>
            </item>
            </list>
            </param>
            <param name="pbCtlEncoded">A pointer to a buffer containing the encoded CTL to be added to the certificate store.</param>
            <param name="cbCtlEncoded">The size, in bytes, of the pbCtlEncoded buffer.</param>
            <param name="dwAddDisposition">
            <para>
            Specifies the action to take if a matching CTL or a link to a matching CTL already exists in the store. Currently defined
            disposition values and their uses are as follows
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_STORE_ADD_ALWAYS</term>
            <term>
            Makes no check for an existing matching CTL or link to a matching CTL. A new CTL is always added to the store. This can lead to
            duplicates in a store.
            </term>
            </item>
            <item>
            <term>CERT_STORE_ADD_NEW</term>
            <term>If a matching CTL or a link to a matching CTL exists, the operation fails. GetLastError returns the CRYPT_E_EXISTS code.</term>
            </item>
            <item>
            <term>CERT_STORE_ADD_NEWER</term>
            <term>
            If a matching CTL or a link to a matching CTL exists, the ThisUpdate times on the CTLs are compared. If the existing CTL has a
            ThisUpdate time less than the ThisUpdate time on the new CTL, the old CTL or link is replaced just as with
            CERT_STORE_ADD_REPLACE_EXISTING. If the existing CTL has a ThisUpdate time greater than or equal to the ThisUpdate time on the
            CTL to be added, the function fails with GetLastError returning the CRYPT_E_EXISTS code. If a matching CTL or a link to a
            matching CTL is not found in the store, a new CTL is added to the store.
            </term>
            </item>
            <item>
            <term>CERT_STORE_ADD_NEWER_INHERIT_PROPERTIES</term>
            <term>
            The action is the same as for CERT_STORE_ADD_NEWER, except that if an older CTL is replaced, the properties of the older CTL are
            incorporated into the replacement CTL.
            </term>
            </item>
            <item>
            <term>CERT_STORE_ADD_REPLACE_EXISTING</term>
            <term>
            If a matching CTL or a link to a matching CTL exists, the existing CTL or link is deleted and a new CTL is created and added to
            the store. If a matching CTL or a link to a matching CTL does not exist, one is added.
            </term>
            </item>
            <item>
            <term>CERT_STORE_ADD_REPLACE_EXISTING_INHERIT_PROPERTIES</term>
            <term>
            If a matching CTL exists in the store, that existing context is deleted before creating and adding the new context. The added
            context inherits properties from the existing CTL.
            </term>
            </item>
            <item>
            <term>CERT_STORE_ADD_USE_EXISTING</term>
            <term>
            If a matching CTL or a link to a matching CTL exists, that existing CTL is used and properties from the new CTL are added. The
            function does not fail, but no new CTL is added. If ppCertContext is not NULL, the existing context is duplicated. If a matching
            CTL or a link to a matching CTL does not exist, a new CTL is added.
            </term>
            </item>
            </list>
            </param>
            <param name="ppCtlContext">
            A pointer to a pointer to the decoded CTL_CONTEXT structure. Can be <c>NULL</c> indicating that the calling application does not
            require a copy of the added or existing CTL. If a copy is made, it must be freed by using CertFreeCTLContext.
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. For extended error information, call GetLastError.</para>
            <para>Some possible error codes follow.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>CRYPT_E_EXISTS</term>
            <term>
            CERT_STORE_ADD_NEW is set, and the CTL already exists in the store; or CERT_STORE_ADD_NEWER is set and there is a CTL in the
            store with a ThisUpdate time greater than or equal to the ThisUpdate time on the CTL to be added.
            </term>
            </item>
            <item>
            <term>E_INVALIDARG</term>
            <term>
            A disposition value that is not valid was specified in the dwAddDisposition parameter, or an encoding type that is not valid was
            specified. Currently, only the encoding types X509_ASN_ENCODING and PKCS_7_ASN_ENCODING are supported.
            </term>
            </item>
            </list>
            <para>
            If the function fails, GetLastError may return an Abstract Syntax Notation One (ASN.1) encoding/decoding error. For information
            about these errors, see ASN.1 Encoding/Decoding Return Values.
            </para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertCreateCTLContext(Vanara.PInvoke.Crypt32.CertEncodingType,System.IntPtr,System.UInt32)">
            <summary>
            The <c>CertCreateCTLContext</c> function creates a certificate trust list (CTL) context from an encoded CTL. The created context
            is not persisted to a certificate store. The function makes a copy of the encoded CTL within the created context.
            </summary>
            <param name="dwMsgAndCertEncodingType">
            <para>
            Specifies the type of encoding used. Both the certificate and message encoding types must be specified by combining them with a
            bitwise- <c>OR</c> operation as shown in the following example:
            </para>
            <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are:</para>
            <list type="bullet">
            <item>
            <term>X509_ASN_ENCODING</term>
            </item>
            <item>
            <term>PKCS_7_ASN_ENCODING</term>
            </item>
            </list>
            </param>
            <param name="pbCtlEncoded">A pointer to a buffer containing the encoded CTL from which the context is to be created.</param>
            <param name="cbCtlEncoded">The size, in bytes, of the pbCtlEncoded buffer.</param>
            <returns>
            <para>If the function succeeds, the return value is a pointer to a read-only CTL_CONTEXT.</para>
            <para>
            If the function fails and is unable to decode and create the CTL_CONTEXT, the return value is <c>NULL</c>. For extended error
            information, call GetLastError. The following table shows a possible error code.
            </para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>E_INVALIDARG</term>
            <term>Invalid certificate encoding type. Only PKCS_7_ASN_ENCODING and X509_ASN_ENCODING are supported.</term>
            </item>
            </list>
            <para>
            If the function fails, GetLastError may return an Abstract Syntax Notation One (ASN.1) encoding/decoding error. For information
            about these errors, see ASN.1 Encoding/Decoding Return Values.
            </para>
            </returns>
            <remarks>
            The CTL_CONTEXT must be freed by calling CertFreeCTLContext. CertDuplicateCTLContext can be called to make a duplicate.
            CertSetCTLContextProperty and CertGetCTLContextProperty can be called to store and read properties for the CTL.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertDeleteCTLFromStore(Vanara.PInvoke.Crypt32.PCCTL_CONTEXT)">
            <summary>
            The <c>CertDeleteCTLFromStore</c> function deletes the specified certificate trust list (CTL) context from a certificate store.
            </summary>
            <param name="pCtlContext">A pointer to the CTL_CONTEXT structure to be deleted.</param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>
            If the function fails, the return value is <c>FALSE</c>. For extended error information, call GetLastError. One possible error
            code is the following.
            </para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>E_ACCESSDENIED</term>
            <term>The store was opened read-only, and a delete operation is not allowed.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            All subsequent get or find operations for the CTL in this store fail. However, memory allocated for the CTL is not freed until
            all duplicated contexts have also been freed.
            </para>
            <para>The pCtlContext parameter is always freed by this function by using CertFreeCTLContext, even for an error.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertDuplicateCTLContext(Vanara.PInvoke.Crypt32.PCCTL_CONTEXT)">
            <summary>
            The <c>CertDuplicateCTLContext</c> function duplicates a certificate trust list (CTL) context by incrementing its reference count.
            </summary>
            <param name="pCtlContext">A pointer to the CTL_CONTEXT structure for which the reference count is being incremented.</param>
            <returns>
            Currently, a copy is not made of the context, and the returned pointer to CTL_CONTEXT is the same as pointer input. If the
            pointer passed into this function is <c>NULL</c>, <c>NULL</c> is returned.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertEnumCTLsInStore(Vanara.PInvoke.Crypt32.HCERTSTORE,Vanara.PInvoke.Crypt32.PCCTL_CONTEXT)">
            <summary>
            The <c>CertEnumCTLsInStore</c> function retrieves the first or next certificate trust list (CTL) context in a certificate store.
            Used in a loop, this function can retrieve in sequence all CTL contexts in a certificate store.
            </summary>
            <param name="hCertStore">Handle of a certificate store.</param>
            <param name="pPrevCtlContext">
            A pointer to the previous CTL_CONTEXT structure found. It must be <c>NULL</c> to get the first CTL in the store. Successive CTLs
            are enumerated by setting pPrevCtlContext to the pointer returned by a previous call. This function frees the <c>CTL_CONTEXT</c>
            referenced by non- <c>NULL</c> values of this parameter. The enumeration skips any CTLs previously deleted by CertDeleteCTLFromStore.
            </param>
            <returns>
            <para>If the function succeeds, the return value is a pointer to a read-only CTL_CONTEXT.</para>
            <para>If the function fails and a CTL is not found, the return value is <c>NULL</c>. For extended error information, call GetLastError.</para>
            <para>Some possible error codes follow.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>CRYPT_E_NOT_FOUND</term>
            <term>Either no CTLs exist in the store, or the function reached the end of the store's list.</term>
            </item>
            <item>
            <term>E_INVALIDARG</term>
            <term>The handle in the hCertStore parameter is not the same as that in the CTL context pointed to by the pPrevCtlContext parameter.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            The returned pointer is freed when passed as the pPrevCtlContext on a subsequent call. Otherwise, the pointer must be explicitly
            freed by calling CertFreeCTLContext. A pPrevCtlContext that is not <c>NULL</c> is always freed by this function (through a call
            to <c>CertFreeCTLContext</c>), even for an error.
            </para>
            <para>A duplicate can be made by calling CertDuplicateCTLContext.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertFindCTLInStore(Vanara.PInvoke.Crypt32.HCERTSTORE,Vanara.PInvoke.Crypt32.CertEncodingType,Vanara.PInvoke.Crypt32.CertInfoFlags,Vanara.PInvoke.Crypt32.CertFindType,System.IntPtr,Vanara.PInvoke.Crypt32.PCCTL_CONTEXT)">
            <summary>
            The <c>CertFindCTLInStore</c> function finds the first or next certificate trust list (CTL) context that matches search criteria
            established by the dwFindType and its associated pvFindPara. This function can be used in a loop to find all of the CTL contexts
            in a certificate store that match the specified find criteria.
            </summary>
            <param name="hCertStore">Handle of the certificate store to be searched.</param>
            <param name="dwMsgAndCertEncodingType">
            <para>
            Specifies the type of encoding used on the CTL. It is always acceptable to specify both the certificate and message encoding
            types by combining them with a bitwise- <c>OR</c> operation as shown in the following example:
            </para>
            <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are:</para>
            <list type="bullet">
            <item>
            <term>X509_ASN_ENCODING</term>
            </item>
            <item>
            <term>PKCS_7_ASN_ENCODING</term>
            </item>
            </list>
            <para>This parameter is used only when the dwFindType parameter is set to CTL_FIND_USAGE.</para>
            </param>
            <param name="dwFindFlags">
            Can be set when dwFindType is set to CTL_FIND_USAGE. For details, see the comments under CTL_FIND_USAGE, following.
            </param>
            <param name="dwFindType">
            <para>
            Specifies the type of search being made. The search type determines the data type, contents, and the use of pvFindPara. This
            parameter can be one of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CTL_FIND_ANY</term>
            <term>Data type of pvFindPara: NULL. Any CTL is a match.</term>
            </item>
            <item>
            <term>CTL_FIND_SHA1_HASH</term>
            <term>Data type of pvFindPara: CRYPT_HASH_BLOB. A CTL with a hash matching the hash in the CRYPT_HASH_BLOB structure is found.</term>
            </item>
            <item>
            <term>CTL_FIND_MD5_HASH</term>
            <term>Data type of pvFindPara: CRYPT_HASH_BLOB. A CTL with a hash matching the hash in the CRYPT_HASH_BLOB structure is found.</term>
            </item>
            <item>
            <term>CTL_FIND_USAGE</term>
            <term>
            Data type of pvFindPara: CTL_FIND_USAGE_PARA. Any CTL is found that has a usage identifier, list identifier, or signer matching
            the usage identifier, list identifier, or signer in the CTL_FIND_USAGE_PARA structure. If the cUsageIdentifier member is of
            SubjectUsage size, any CTL is a match. If the cbData member of ListIdentifier member is zero, any list identifier is a match. If
            the cbData member of ListIdentifier is CTL_FIND_NO_LIST_ID_CBDATA, only a CTL without a list identifier is a match. If the
            pSigner member in the CTL_FIND_USAGE_PARA structure is NULL, any CTL signer is a match, and only the Issuer and SerialNumber
            members in the pSigner CERT_INFO structure are used. If pSigner is CTL_FIND_NO_SIGNER_PTR, only a CTL without a signer is a match.
            </term>
            </item>
            <item>
            <term>CTL_FIND_SAME_USAGE_FLAG</term>
            <term>
            Data type of pvFindPara: CTL_FIND_USAGE_PARA. Only CTLs with exactly the same usage identifiers are matched. CTLs having
            additional usage identifiers are not matched. For example, if only "1.2.3" is specified in the CTL_FIND_USAGE_PARA structure,
            then for a match, the CTL must only contain "1.2.3" and no additional usage identifiers.
            </term>
            </item>
            <item>
            <term>CTL_FIND_EXISTING</term>
            <term>Data type of pvFindPara: PCCTL_CONTEXT. Searches for the next CRL that is an exact match of the CTL_CONTEXT.</term>
            </item>
            <item>
            <term>CTL_FIND_SUBJECT</term>
            <term>
            Data type of pvFindPara: CTL_FIND_SUBJECT_PARA. A CTL having the specified subject is found. CertFindSubjectInCTL can be called
            to get a pointer to the subject's entry in the CTL. The pUsagePara member in CTL_FIND_SUBJECT_PARA can optionally be set to
            enable the matching described preceding under CTL_FIND_USAGE.
            </term>
            </item>
            </list>
            </param>
            <param name="pvFindPara">A pointer to the search value associated with the dwFindType parameter.</param>
            <param name="pPrevCtlContext">
            A pointer to the last CTL_CONTEXT returned by this function. It must be <c>NULL</c> to get the first CTL in the store.
            Successive CTLs are retrieved by setting pPrevCtlContext to the pointer to the <c>CTL_CONTEXT</c> returned by a previous
            function call. Any certificates that do not meet the search criteria or that have been previously deleted by
            CertDeleteCTLFromStore are skipped. This function frees the <c>CTL_CONTEXT</c> referenced by non- <c>NULL</c> values of this parameter.
            </param>
            <returns>
            <para>If the function succeeds, the return value is a pointer to a read-only CTLcontext.</para>
            <para>For extended error information, call GetLastError. Some possible error codes follow.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>CRYPT_E_NOT_FOUND</term>
            <term>
            Either no CTLs were found in the store, no CTL was found matching the search criteria, or the function reached the end of the
            store's list.
            </term>
            </item>
            <item>
            <term>E_INVALIDARG</term>
            <term>
            The handle in the hCertStore parameter is not the same as that in the CTL context pointed to by the pPrevCtlContext parameter,
            or a value that is not valid was specified in the dwFindType parameter.
            </term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            A returned pointer is freed when passed as the pPrevCtlContext on a subsequent call to the function. Otherwise, the pointer must
            be freed by calling CertFreeCTLContext. A non- <c>NULL</c> pPrevCtlContext passed to the function is always freed with a call to
            <c>CertFreeCTLContext</c>, even if the function generates an error.
            </para>
            <para>
            CertDuplicateCTLContext can be called to make a duplicate of the returned context. The returned CTL context can be added to a
            different certificate store using CertAddCTLContextToStore, or a link to that CTL context can be added to a noncollection store
            using CertAddCTLLinkToStore. If a CTL matching the search criteria is not found, <c>NULL</c> is returned.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertFreeCTLContext(Vanara.PInvoke.Crypt32.PCCTL_CONTEXT)">
            <summary>
            <para>
            The <c>CertFreeCTLContext</c> function frees a certificate trust list (CTL) context by decrementing its reference count. When
            the reference count goes to zero, <c>CertFreeCTLContext</c> frees the memory used by a CTL context.
            </para>
            <para>
            To free a context obtained by a get, duplicate, or create function, call the appropriate free function. To free a context
            obtained by a find or enumerate function, either pass it in as the previous context parameter to a subsequent invocation of the
            function, or call the appropriate free function. For more information, see the reference topic for the function that obtains the context.
            </para>
            </summary>
            <param name="pCtlContext">A pointer to the CTL_CONTEXT to be freed.</param>
            <returns>The function always returns <c>TRUE</c>.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertSerializeCTLStoreElement(Vanara.PInvoke.Crypt32.PCCTL_CONTEXT,System.UInt32,System.IntPtr,System.UInt32@)">
            <summary>
            The <c>CertSerializeCTLStoreElement</c> function serializes an encoded certificate trust list (CTL) context and the encoded
            representation of its properties. The result can be persisted to storage so that the CTL and properties can be retrieved later.
            </summary>
            <param name="pCtlContext">A pointer to the CTL_CONTEXT structure being serialized.</param>
            <param name="dwFlags">Reserved for future use and must be zero.</param>
            <param name="pbElement">
            <para>A pointer to a buffer that receives the serialized output, including the encoded CTL and, possibly, its properties.</para>
            <para>
            This parameter can be <c>NULL</c> to set the size of this information for memory allocation purposes. For more information, see
            Retrieving Data of Unknown Length.
            </para>
            </param>
            <param name="pcbElement">
            <para>
            A pointer to a <c>DWORD</c> value that specifies the size, in bytes, of the buffer that is pointed to by the pbElement
            parameter. When the function returns the <c>DWORD</c> value contains the number of bytes stored in the buffer.
            </para>
            <para>
            <c>Note</c> When processing the data returned in the buffer, applications must use the actual size of the data returned. The
            actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually
            specified large enough to ensure that the largest possible output data fits in the buffer.) On output, the variable pointed to
            by this parameter is updated to reflect the actual size of the data copied to the buffer.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. For extended error information, call GetLastError.</para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.SafePCCTL_CONTEXT">
            <summary>Provides a <see cref="T:System.Runtime.InteropServices.SafeHandle"/> for <see cref="T:Vanara.PInvoke.Crypt32.PCCTL_CONTEXT"/> that is disposed using <see cref="M:Vanara.PInvoke.Crypt32.CertFreeCTLContext(Vanara.PInvoke.Crypt32.PCCTL_CONTEXT)"/>.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.SafePCCTL_CONTEXT.#ctor(System.IntPtr,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Crypt32.SafePCCTL_CONTEXT"/> class and assigns an existing handle.</summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
            <param name="ownsHandle">
            <see langword="true"/> to reliably release the handle during the finalization phase; otherwise, <see langword="false"/> (not recommended).
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.SafePCCTL_CONTEXT.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Crypt32.SafePCCTL_CONTEXT"/> class.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.SafePCCTL_CONTEXT.op_Implicit(Vanara.PInvoke.Crypt32.SafePCCTL_CONTEXT)~Vanara.PInvoke.Crypt32.PCCTL_CONTEXT">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.Crypt32.SafePCCTL_CONTEXT"/> to <see cref="T:Vanara.PInvoke.Crypt32.PCCTL_CONTEXT"/>.</summary>
            <param name="h">The safe handle instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.SafePCCTL_CONTEXT.op_Explicit(Vanara.PInvoke.Crypt32.SafePCCTL_CONTEXT)~Vanara.PInvoke.Crypt32.CTL_CONTEXT*">
            <summary>Performs an explicit conversion from <see cref="T:Vanara.PInvoke.Crypt32.SafePCCTL_CONTEXT"/> to <see cref="T:Vanara.PInvoke.Crypt32.CTL_CONTEXT"/>.</summary>
            <param name="ctx">The handle.</param>
            <returns>The resulting <see cref="T:Vanara.PInvoke.Crypt32.CTL_CONTEXT"/> instance from the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.SafePCCTL_CONTEXT.InternalReleaseHandle">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CertChainEngineExclusiveFlags">
            <summary>Flags used by <see cref="T:Vanara.PInvoke.Crypt32.CERT_CHAIN_ENGINE_CONFIG"/>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertChainEngineExclusiveFlags.CERT_CHAIN_EXCLUSIVE_ENABLE_CA_FLAG">
            <summary>
            Indicates that a non-self-signed intermediate CA certificate in the hExclusiveRoot store should be treated as a trust anchor
            during certificate validation. If a certificate chains up to this CA, chain building is terminated and the certificate is
            considered trusted. No signature verification or revocation checking is performed on the CA certificate.
            <para>
            By default, if this flag is not set, only self-signed certificates in the hExclusiveRoot store are treated as trust anchors.
            </para>
            <para>See also the CERT_TRUST_IS_CA_TRUSTED value in the CERT_TRUST_STATUS structure.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CertChainEngineFlags">
            <summary>Flags used by <see cref="T:Vanara.PInvoke.Crypt32.CERT_CHAIN_ENGINE_CONFIG"/>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertChainEngineFlags.CERT_CHAIN_CACHE_END_CERT">
            <summary>
            Information in the end certificate is cached. By default, information in all certificates except the end certificate is
            cached as a chain is built. Setting this flag extends the caching to the end certificate.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertChainEngineFlags.CERT_CHAIN_THREAD_STORE_SYNC">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertChainEngineFlags.CERT_CHAIN_CACHE_ONLY_URL_RETRIEVAL">
            <summary>
            Use only cached URLs in building a certificate chain. The Internet and intranet are not searched for URL-based objects.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertChainEngineFlags.CERT_CHAIN_USE_LOCAL_MACHINE_STORE">
            <summary>Build the chain using the LocalMachine registry location as opposed to the CurrentUser location.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertChainEngineFlags.CERT_CHAIN_ENABLE_CACHE_AUTO_UPDATE">
            <summary>Enable automatic updating of the cache as a chain is being built.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertChainEngineFlags.CERT_CHAIN_ENABLE_SHARE_STORE">
            <summary>Allow certificate stores used to build the chain to be shared.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertChainEngineFlags.CERT_CHAIN_DISABLE_AIA">
            <summary>Turn off Authority Information Access (AIA) retrievals explicitly.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CertChainFlags">
            <summary>Flags used by <see cref="M:Vanara.PInvoke.Crypt32.CertGetCertificateChain(Vanara.PInvoke.Crypt32.HCERTCHAINENGINE,Vanara.PInvoke.Crypt32.PCCERT_CONTEXT,System.Runtime.InteropServices.ComTypes.FILETIME@,Vanara.PInvoke.Crypt32.HCERTSTORE,Vanara.PInvoke.Crypt32.CERT_CHAIN_PARA@,Vanara.PInvoke.Crypt32.CertChainFlags,System.IntPtr,Vanara.PInvoke.Crypt32.SafePCCERT_CHAIN_CONTEXT@)"/>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertChainFlags.CERT_CHAIN_CACHE_END_CERT">
            <summary>
            When this flag is set, the end certificate is cached, which might speed up the chain-building process. By default, the end
            certificate is not cached, and it would need to be verified each time a chain is built for it.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertChainFlags.CERT_CHAIN_REVOCATION_CHECK_CACHE_ONLY">
            <summary>Revocation checking only accesses cached URLs.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertChainFlags.CERT_CHAIN_REVOCATION_CHECK_OCSP_CERT">
            <summary>
            This flag is used internally during chain building for an online certificate status protocol (OCSP) signer certificate to
            prevent cyclic revocation checks. During chain building, if the OCSP response is signed by an independent OCSP signer, then,
            in addition to the original chain build, there is a second chain built for the OCSP signer certificate itself. This flag is
            used during this second chain build to inhibit a recursive independent OCSP signer certificate. If the signer certificate
            contains the szOID_PKIX_OCSP_NOCHECK extension, revocation checking is skipped for the leaf signer certificate. Both OCSP
            and CRL checking are allowed.
            <para>Windows Server 2003 and Windows XP: This value is not supported.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertChainFlags.CERT_CHAIN_CACHE_ONLY_URL_RETRIEVAL">
            <summary>
            Uses only cached URLs in building a certificate chain. The Internet and intranet are not searched for URL-based objects.
            <para>
            Note This flag is not applicable to revocation checking. Set CERT_CHAIN_REVOCATION_CHECK_CACHE_ONLY to use only cached URLs
            for revocation checking.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertChainFlags.CERT_CHAIN_DISABLE_PASS1_QUALITY_FILTERING">
            <summary>
            For performance reasons, the second pass of chain building only considers potential chain paths that have quality greater
            than or equal to the highest quality determined during the first pass. The first pass only considers valid signature,
            complete chain, and trusted roots to calculate chain quality. This flag can be set to disable this optimization and consider
            all potential chain paths during the second pass.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertChainFlags.CERT_CHAIN_DISABLE_MY_PEER_TRUST">
            <summary>This flag is not supported. Certificates in the "My" store are never considered for peer trust.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertChainFlags.CERT_CHAIN_ENABLE_PEER_TRUST">
            <summary>
            End entity certificates in the "TrustedPeople" store are trusted without performing any chain building. This function does
            not set the CERT_TRUST_IS_PARTIAL_CHAIN or CERT_TRUST_IS_UNTRUSTED_ROOT dwErrorStatus member bits of the ppChainContext
            parameter. Windows Server 2003 Windows XP : This flag is not supported.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertChainFlags.CERT_CHAIN_OPT_IN_WEAK_SIGNATURE">
            <summary>
            Setting this flag indicates the caller wishes to opt into weak signature checks.
            <para>This flag is available in the rollup update for each OS starting with Windows 7 and Windows Server 2008 R2.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertChainFlags.CERT_CHAIN_RETURN_LOWER_QUALITY_CONTEXTS">
            <summary>
            The default is to return only the highest quality chain path. Setting this flag will return the lower quality chains. These
            are returned in the cLowerQualityChainContext and rgpLowerQualityChainContext fields of the chain context.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertChainFlags.CERT_CHAIN_DISABLE_AUTH_ROOT_AUTO_UPDATE">
            <summary>Setting this flag inhibits the auto update of third-party roots from the Windows Update Web Server.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertChainFlags.CERT_CHAIN_REVOCATION_ACCUMULATIVE_TIMEOUT">
            <summary>
            When you set CERT_CHAIN_REVOCATION_ACCUMULATIVE_TIMEOUT and you also specify a value for the dwUrlRetrievalTimeout member of
            the CERT_CHAIN_PARA structure, the value you specify in dwUrlRetrievalTimeout represents the cumulative timeout across all
            revocation URL retrievals.
            <para>
            If you set CERT_CHAIN_REVOCATION_ACCUMULATIVE_TIMEOUT but do not specify a dwUrlRetrievalTimeout value, the maximum
            cumulative timeout is set, by default, to 20 seconds. Each URL tested will timeout after half of the remaining cumulative
            balance has passed. That is, the first URL times out after 10 seconds, the second after 5 seconds, the third after 2.5
            seconds and so on until a URL succeeds, 20 seconds has passed, or there are no more URLs to test.
            </para>
            <para>
            If you do not set CERT_CHAIN_REVOCATION_ACCUMULATIVE_TIMEOUT, each revocation URL in the chain is assigned a maximum timeout
            equal to the value specified in dwUrlRetrievalTimeout. If you do not specify a value for the dwUrlRetrievalTimeout member,
            each revocation URL is assigned a maximum default timeout of 15 seconds. If no URL succeeds, the maximum cumulative timeout
            value is 15 seconds multiplied by the number of URLs in the chain.
            </para>
            <para>You can set the default values by using Group Policy.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertChainFlags.CERT_CHAIN_TIMESTAMP_TIME">
            <summary>
            When this flag is set, pTime is used as the time stamp time to determine whether the end certificate was time valid. Current
            time can also be used to determine whether the end certificate remains time valid. All other certification authority (CA)
            and root certificates in the chain are checked by using current time and not pTime.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertChainFlags.CERT_CHAIN_DISABLE_AIA">
            <summary>Setting this flag explicitly turns off Authority Information Access (AIA) retrievals.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertChainFlags.CERT_CHAIN_REVOCATION_CHECK_END_CERT">
            <summary>Revocation checking is done on the end certificate and only the end certificate.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertChainFlags.CERT_CHAIN_REVOCATION_CHECK_CHAIN">
            <summary>Revocation checking is done on all of the certificates in every chain.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertChainFlags.CERT_CHAIN_REVOCATION_CHECK_CHAIN_EXCLUDE_ROOT">
            <summary>Revocation checking is done on all certificates in all of the chains except the root certificate.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CertChainPolicyFlags">
            <summary>Flags used by <see cref="T:Vanara.PInvoke.Crypt32.CERT_CHAIN_POLICY_PARA"/></summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertChainPolicyFlags.CERT_CHAIN_POLICY_IGNORE_NOT_TIME_VALID_FLAG">
            <summary>Ignore not time valid errors.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertChainPolicyFlags.CERT_CHAIN_POLICY_IGNORE_CTL_NOT_TIME_VALID_FLAG">
            <summary>Ignore certificate trust list (CTL) not time valid errors.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertChainPolicyFlags.CERT_CHAIN_POLICY_IGNORE_NOT_TIME_NESTED_FLAG">
            <summary>Ignore time nesting errors.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertChainPolicyFlags.CERT_CHAIN_POLICY_IGNORE_INVALID_BASIC_CONSTRAINTS_FLAG">
            <summary>Ignore basic constraint errors.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertChainPolicyFlags.CERT_CHAIN_POLICY_IGNORE_ALL_NOT_TIME_VALID_FLAGS">
            <summary>Ignore all time validity errors.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertChainPolicyFlags.CERT_CHAIN_POLICY_ALLOW_UNKNOWN_CA_FLAG">
            <summary>Allow untrusted roots.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertChainPolicyFlags.CERT_CHAIN_POLICY_IGNORE_WRONG_USAGE_FLAG">
            <summary>Ignore invalid usage errors.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertChainPolicyFlags.CERT_CHAIN_POLICY_IGNORE_INVALID_NAME_FLAG">
            <summary>Ignore invalid name errors.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertChainPolicyFlags.CERT_CHAIN_POLICY_IGNORE_INVALID_POLICY_FLAG">
            <summary>Ignore invalid policy errors.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertChainPolicyFlags.CERT_CHAIN_POLICY_IGNORE_END_REV_UNKNOWN_FLAG">
            <summary>Ignores errors in obtaining valid revocation information.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertChainPolicyFlags.CERT_CHAIN_POLICY_IGNORE_CTL_SIGNER_REV_UNKNOWN_FLAG">
            <summary>Ignores errors in obtaining valid CTL revocation information.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertChainPolicyFlags.CERT_CHAIN_POLICY_IGNORE_CA_REV_UNKNOWN_FLAG">
            <summary>Ignores errors in obtaining valid certification authority (CA) revocation information.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertChainPolicyFlags.CERT_CHAIN_POLICY_IGNORE_ROOT_REV_UNKNOWN_FLAG">
            <summary>Ignores errors in obtaining valid root revocation information.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertChainPolicyFlags.CERT_CHAIN_POLICY_IGNORE_ALL_REV_UNKNOWN_FLAGS">
            <summary>Ignores errors in obtaining valid revocation information.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertChainPolicyFlags.CERT_CHAIN_POLICY_ALLOW_TESTROOT_FLAG">
            <summary>Allow untrusted test roots.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertChainPolicyFlags.CERT_CHAIN_POLICY_TRUST_TESTROOT_FLAG">
            <summary>Always trust test roots.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertChainPolicyFlags.CERT_CHAIN_POLICY_IGNORE_NOT_SUPPORTED_CRITICAL_EXT_FLAG">
            <summary>Ignore critical extension not supported errors.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertChainPolicyFlags.CERT_CHAIN_POLICY_IGNORE_PEER_TRUST_FLAG">
            <summary>Ignore peer trusts.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertChainPolicyFlags.CERT_CHAIN_POLICY_IGNORE_WEAK_SIGNATURE_FLAG">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertChainPolicyFlags.BASIC_CONSTRAINTS_CERT_CHAIN_POLICY_CA_FLAG">
            <summary>Checks if the first certificate element is a CA.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertChainPolicyFlags.BASIC_CONSTRAINTS_CERT_CHAIN_POLICY_END_ENTITY_FLAG">
            <summary>Checks if the first certificate element is an end entity.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertChainPolicyFlags.MICROSOFT_ROOT_CERT_CHAIN_POLICY_ENABLE_TEST_ROOT_FLAG">
            <summary>Also check for the Microsoft test roots in addition to the Microsoft public root.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertChainPolicyFlags.MICROSOFT_ROOT_CERT_CHAIN_POLICY_CHECK_APPLICATION_ROOT_FLAG">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertChainPolicyFlags.MICROSOFT_ROOT_CERT_CHAIN_POLICY_DISABLE_FLIGHT_ROOT_FLAG">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CertChainStrongSignFlags">
            <summary>Optional flags that modify chain retrieval behavior.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertChainStrongSignFlags.CERT_CHAIN_STRONG_SIGN_DISABLE_END_CHECK_FLAG">
            <summary>
            If the chain is strong signed, the public key in the end certificate will be checked to verify whether it satisfies the
            minimum public key length requirements for a strong signature. You can specify CERT_CHAIN_STRONG_SIGN_DISABLE_END_CHECK_FLAG
            to disable default checking.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CertCreateCTLEntryFlags">
            <summary>Flags used by <see cref="M:Vanara.PInvoke.Crypt32.CertCreateCTLEntryFromCertificateContextProperties(Vanara.PInvoke.Crypt32.PCCERT_CONTEXT,System.UInt32,Vanara.PInvoke.Crypt32.CRYPT_ATTRIBUTE[],Vanara.PInvoke.Crypt32.CertCreateCTLEntryFlags,System.IntPtr,System.IntPtr,System.UInt32@)"/>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertCreateCTLEntryFlags.CTL_ENTRY_FROM_PROP_CHAIN_FLAG">
            <summary>Force the inclusion of the chain building hash properties as attributes.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CertVerifyCTLFlags">
            <summary>Flags for CertVerifyCTLUsage.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertVerifyCTLFlags.CERT_VERIFY_INHIBIT_CTL_UPDATE_FLAG">
            <summary>
            If the CERT_VERIFY_INHIBIT_CTL_UPDATE_FLAG is not set, a CTL whose time is no longer valid in one of the stores specified by
            rghCtlStore in CTL_VERIFY_USAGE_PARA can be replaced. When replaced, the CERT_VERIFY_UPDATED_CTL_FLAG is set in the dwFlags
            member of pVerifyUsageStatus. If this flag is set, an update will not be made, even if a time-valid, updated CTL is received
            for a CTL that is in the store and whose time is no longer valid.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertVerifyCTLFlags.CERT_VERIFY_TRUSTED_SIGNERS_FLAG">
            <summary>
            If the CERT_VERIFY_TRUSTED_SIGNERS_FLAG is set, only the signer stores specified by rghSignerStore in CTL_VERIFY_USAGE_PARA
            are searched to find the signer. Otherwise, the signer stores provide additional sources to find the signer's certificate.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertVerifyCTLFlags.CERT_VERIFY_NO_TIME_CHECK_FLAG">
            <summary>If CERT_VERIFY_NO_TIME_CHECK_FLAG is set, the CTLs are not checked for time validity. Otherwise, they are.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertVerifyCTLFlags.CERT_VERIFY_ALLOW_MORE_USAGE_FLAG">
            <summary>
            If CERT_VERIFY_ALLOW_MORE_USAGE_FLAG is set, the CTL can contain usage identifiers in addition to those specified by
            pSubjectUsage. Otherwise, the found CTL will contain no additional usage identifiers.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CryptMsgEncodeFlags">
            <summary>Flags used by <see cref="M:Vanara.PInvoke.Crypt32.CryptMsgEncodeAndSignCTL(Vanara.PInvoke.Crypt32.CertEncodingType,Vanara.PInvoke.Crypt32.CTL_INFO@,Vanara.PInvoke.Crypt32.CMSG_SIGNED_ENCODE_INFO@,Vanara.PInvoke.Crypt32.CryptMsgEncodeFlags,System.IntPtr,System.UInt32@)"/>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptMsgEncodeFlags.CMSG_ENCODE_SORTED_CTL_FLAG">
            <summary>
            Set if the CTL entries are to be sorted before encoding. This flag is set if the CertFindSubjectInSortedCTL or
            CertEnumSubjectInSortedCTL functions will be called.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptMsgEncodeFlags.CMSG_ENCODE_HASHED_SUBJECT_IDENTIFIER_FLAG">
            <summary>
            Set if CMSG_ENCODE_SORTED_CTL_FLAG is set, and the identifier for the TrustedSubjects is a hash, such as MD5 or SHA1.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CryptMsgSignerFlags">
            <summary>Flags for <see cref="M:Vanara.PInvoke.Crypt32.CryptMsgGetAndVerifySigner(Vanara.PInvoke.Crypt32.HCRYPTMSG,System.UInt32,Vanara.PInvoke.Crypt32.HCERTSTORE[],Vanara.PInvoke.Crypt32.CryptMsgSignerFlags,Vanara.PInvoke.Crypt32.SafePCCERT_CONTEXT@,System.UInt32@)"/>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptMsgSignerFlags.CMSG_TRUSTED_SIGNER_FLAG">
            <summary>
            The stores in rghSignerStore are assumed trusted and they are the only stores searched to find the certificate corresponding
            to the signer's issuer and serial number. Otherwise, signer stores can be provided to supplement the message's store of
            certificates. If a signer certificate is found, its public key is used to verify the message signature.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptMsgSignerFlags.CMSG_SIGNER_ONLY_FLAG">
            <summary>Return the signer without doing the signature verification.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptMsgSignerFlags.CMSG_USE_SIGNER_INDEX_FLAG">
            <summary>
            Only the signer specified by *pdwSignerIndex is returned. Otherwise, iterate through all the signers until a signature is
            verified or there are no more signers.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CryptMsgSignFlags">
            <summary>Flags for <see cref="M:Vanara.PInvoke.Crypt32.CryptMsgSignCTL(Vanara.PInvoke.Crypt32.CertEncodingType,System.IntPtr,System.UInt32,Vanara.PInvoke.Crypt32.CMSG_SIGNED_ENCODE_INFO@,Vanara.PInvoke.Crypt32.CryptMsgSignFlags,System.IntPtr,System.UInt32@)"/>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CryptMsgSignFlags.CMSG_CMS_ENCAPSULATED_CTL_FLAG">
            <summary>
            If CMS_PKCS7 is defined, can be set to CMSG_CMS_ENCAPSULATED_CTL_FLAG to encode a CMS compatible V3 SignedData message.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CtlVerifyUsageStatusFlags">
            <summary>Flags returned in CTL_VERIFY_USAGE_STATUS.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CtlVerifyUsageStatusFlags.CERT_VERIFY_UPDATED_CTL_FLAG">
            <summary>CertVerifyCTLUsage updated a CTL whose time was no longer valid with a new, time-valid CTL.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.UsageMatchType">
            <summary>
            Determines the kind of issuer matching to be done. In <c>AND</c> logic, the certificate must meet all criteria. In <c>OR</c>
            logic, the certificate must meet at least one of the criteria.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.UsageMatchType.USAGE_MATCH_TYPE_AND">
            <summary>AND logic</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.UsageMatchType.USAGE_MATCH_TYPE_OR">
            <summary>OR logic</summary>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertCreateCertificateChainEngine(Vanara.PInvoke.Crypt32.CERT_CHAIN_ENGINE_CONFIG@,Vanara.PInvoke.Crypt32.SafeHCERTCHAINENGINE@)">
            <summary>
            The <c>CertCreateCertificateChainEngine</c> function creates a new, nondefault chain engine for an application. A chain engine
            restricts the certificates in the root store that can be used for verification, restricts the certificate stores to be searched
            for certificates and certificate trust lists (CTLs), sets a time-out limit for searches that involve URLs, and limits the number
            of certificates checked between checking for a certificate cycle.
            </summary>
            <param name="pConfig">A pointer to a CERT_CHAIN_ENGINE_CONFIG data structure that specifies the parameters for the chain engine.</param>
            <param name="phChainEngine">
            A pointer to the handle of the chain engine created. When you have finished using the chain engine, release the chain engine by
            calling the CertFreeCertificateChainEngine function.
            </param>
            <returns>
            <para>If the function succeeds, the function returns nonzero ( <c>TRUE</c>).</para>
            <para>If the function fails, it returns zero ( <c>FALSE</c>). For extended error information, call GetLastError.</para>
            <para>The phChainEngine parameter returns the chain engine handle.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertCreateCTLEntryFromCertificateContextProperties(Vanara.PInvoke.Crypt32.PCCERT_CONTEXT,System.UInt32,Vanara.PInvoke.Crypt32.CRYPT_ATTRIBUTE[],Vanara.PInvoke.Crypt32.CertCreateCTLEntryFlags,System.IntPtr,System.IntPtr,System.UInt32@)">
            <summary>
            <para>
            The <c>CertCreateCTLEntryFromCertificateContextProperties</c> function creates a certificate trust list (CTL) entry whose
            attributes are the properties of the certificate context. The SubjectIdentifier in the CTL entry is the SHA1 hash of the certificate.
            </para>
            <para>
            The certificate properties are added as attributes. The property attribute OID is the decimal PROP_ID preceded by
            szOID_CERT_PROP_ID_PREFIX. Each property value is copied as a single attribute value.
            </para>
            <para>Additional attributes can be included in the CTL entry by using the cOptAttr and rgOptAttr parameters.</para>
            </summary>
            <param name="pCertContext">A pointer to the CERT_CONTEXT used to create the CTL.</param>
            <param name="cOptAttr">A <c>DWORD</c> that specifies the number of additional attributes to be added.</param>
            <param name="rgOptAttr">A pointer to any array of CRYPT_ATTRIBUTE attributes to be added to the CTL.</param>
            <param name="dwFlags">
            A <c>DWORD</c>. Can be set to CTL_ENTRY_FROM_PROP_CHAIN_FLAG to force the inclusion of the chain building hash properties as attributes.
            </param>
            <param name="pvReserved">A pointer to a <c>VOID</c>. Reserved for future use.</param>
            <param name="pCtlEntry">
            Address of a pointer to a CTL_ENTRY structure. Call this function twice to retrieve a CTL entry. Set this parameter to
            <c>NULL</c> on the first call. When the function returns, use the number of bytes retrieved from the pcbCtlEntry parameter to
            allocate memory. Call the function again, setting this parameter to the address of the allocated memory.
            </param>
            <param name="pcbCtlEntry">
            Pointer to a <c>DWORD</c> that contains the number of bytes that must be allocated for the CTL_ENTRY structure. Call this
            function twice to retrieve the number of bytes. For the first call, set this parameter to the address of a <c>DWORD</c> value
            that contains zero and set the pCtlEntry parameter to <c>NULL</c>. If the first call succeeds, the <c>DWORD</c> value will
            contain the number of bytes that you must allocate for the <c>CTL_ENTRY</c> structure. Allocate the required memory and call the
            function again, supplying the address of the memory in the pCtlEntry parameter.
            </param>
            <returns>
            <para>If the function succeeds, the function returns nonzero ( <c>TRUE</c>).</para>
            <para>If the function fails, it returns zero ( <c>FALSE</c>). For extended error information, call GetLastError.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertDuplicateCertificateChain(Vanara.PInvoke.Crypt32.PCCERT_CHAIN_CONTEXT)">
            <summary>
            The <c>CertDuplicateCertificateChain</c> function duplicates a pointer to a certificate chain by incrementing the chain's
            reference count.
            </summary>
            <param name="pChainContext">A pointer to a CERT_CHAIN_CONTEXT chain context to be duplicated.</param>
            <returns>
            <para>
            If the function succeeds, a pointer is returned to the chain context. This pointer has the same value as the pChainContext
            passed into the function. When you have finished using the chain context, release the chain context by calling the
            CertFreeCertificateChain function.
            </para>
            <para>If the function fails, <c>NULL</c> is returned.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertFindChainInStore(Vanara.PInvoke.Crypt32.HCERTSTORE,System.UInt32,System.UInt32,System.UInt32,System.IntPtr,Vanara.PInvoke.Crypt32.PCCERT_CHAIN_CONTEXT)">
            <summary>
            The <c>CertFindChainInStore</c> function finds the first or next certificate in a store that meets the specified criteria. It
            then builds and verifies a certificate chain context for that certificate. The certificate that is found and for which the chain
            is built is selected according to criteria established by the dwFindFlags, dwFindType, and pvFindPara parameters. This function
            can be used in a loop to find all of the certificates in a certificate store that match the specified find criteria and to build
            a certificate chain context for each certificate found.
            </summary>
            <param name="hCertStore">
            The handle of the store to be searched for a certificate upon which a chain is built. This handle is passed as an additional
            store to the CertGetCertificateChain function as the chain is built.
            </param>
            <param name="dwCertEncodingType">
            <para>
            The certificate encoding type that was used to encode the store. The message encoding type identifier, contained in the high
            <c>WORD</c> of this value, is ignored by this function.
            </para>
            <para>This parameter can be the following currently defined certificate encoding type.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>X509_ASN_ENCODING 1 (0x1)</term>
            <term>Specifies X.509 certificate encoding.</term>
            </item>
            </list>
            </param>
            <param name="dwFindFlags">
            <para>
            Contains additional options for the search. The possible values for this parameter depend on the value of the dwFindType parameter.
            </para>
            <para>This parameter can contain zero or a combination of one or more of the following values when dwFindType contains <c>CERT_CHAIN_FIND_BY_ISSUER</c>.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_CHAIN_FIND_BY_ISSUER_COMPARE_KEY_FLAG</term>
            <term>
            Compares the public key in the certificate with the cryptographic service provider's public key. This comparison is the last
            check made on the chain when it is built. Because the hCryptProv member of an issuer contains a private key, it might need to be
            checked several times during this process; to facilitate this checking, the dwAcquirePrivateKeyFlags member can be set in the
            CERT_CHAIN_FIND_BY_ISSUER_PARA structure to enable caching of that hCryptProv.
            </term>
            </item>
            <item>
            <term>CERT_CHAIN_FIND_BY_ISSUER_COMPLEX_CHAIN_FLAG</term>
            <term>
            By default, only the first simple chain is checked for issuer name matches. With this flag set, the default is overridden and
            subsequent simple chains are also checked for issuer name matches.
            </term>
            </item>
            <item>
            <term>CERT_CHAIN_FIND_BY_ISSUER_CACHE_ONLY_FLAG</term>
            <term>
            Improves the performance of this function by causing it to search only the cached system stores (Root, My, Ca, Trust) to find
            issuer certificates. If this flag is not set, the function searches the cached system stores and the store represented by the
            hCertStore parameter.
            </term>
            </item>
            <item>
            <term>CERT_CHAIN_FIND_BY_ISSUER_CACHE_ONLY_URL_FLAG</term>
            <term>Only the URL cache is searched. The Internet is not searched.</term>
            </item>
            <item>
            <term>CERT_CHAIN_FIND_BY_ISSUER_LOCAL_MACHINE_FLAG</term>
            <term>Only opens the Local Machine certificate stores. The certificate stores of the current user are not opened.</term>
            </item>
            <item>
            <term>CERT_CHAIN_FIND_BY_ISSUER_NO_KEY_FLAG</term>
            <term>No check is made to determine whether the certificate has an associated private key.</term>
            </item>
            </list>
            </param>
            <param name="dwFindType">
            <para>Determines what criteria to use to find a certificate in the store.</para>
            <para>This parameter can be the following currently defined value.</para>
            <para>CERT_CHAIN_FIND_BY_ISSUER</para>
            <para>
            Finds the certificate based on the name of the issuer. The pvFindPara parameter is a pointer to a CERT_CHAIN_FIND_BY_ISSUER_PARA
            structure that contains members that modify the search.
            </para>
            <para>
            The certificate chain is built for a certificate with an available private key. By default, only the issuers in the first simple
            chain are compared in an issuer name match. If this flag is set, all of the chains are checked for an issuer certificate that
            matches one of a set of issuer names.
            </para>
            <para>
            This function will compare the name BLOBs passed in the pvFindPara structure to any certification authority (CA) in the chain,
            not just the certification authority in the root certificate.
            </para>
            <para>This function does not perform any revocation checks.</para>
            <para>
            If pPrevChainContext is not <c>NULL</c>, this function will return a chain for a different certificate every time the function
            is called. If there is only one suitable certificate, but there are two matching issuing certificate authorities, one of which
            is revoked, it is possible for this function to return the revoked chain. If the application then checks for revocation itself
            through calls to the CertVerifyRevocation function and finds the chain unsuitable, an additional call to the
            <c>CertFindChainInStore</c> function will not return a chain that includes the same certificate from the valid certification
            authority. It will instead return a completely different chain with a different certificate or <c>NULL</c>, if no such chain can
            be found.
            </para>
            </param>
            <param name="pvFindPara">
            A pointer that contains additional search criteria. The type and format of the data this parameter points to depends on the
            value of the dwFindType parameter.
            </param>
            <param name="pPrevChainContext">
            A pointer to a CERT_CHAIN_CONTEXT structure returned from a previous call to this function. The search is begun from this
            certificate. For the first call to this function, this parameter must be <c>NULL</c>. In subsequent calls, it is the pointer
            returned by the previous call to the function. If this parameter is not <c>NULL</c>, this function will free this structure.
            </param>
            <returns>
            If the first or next chain context is not built, <c>NULL</c> is returned. Otherwise, a pointer to a read-only CERT_CHAIN_CONTEXT
            structure is returned. The <c>CERT_CHAIN_CONTEXT</c> structure is freed when passed as the pPrevChainContext parameter on a
            subsequent call to this function. Otherwise, the <c>CERT_CHAIN_CONTEXT</c> structure must be freed explicitly by calling the
            CertFreeCertificateChain function.
            </returns>
            <remarks>
            The pPrevChainContext parameter must be <c>NULL</c> on the first call to build the chain context. To build the next chain
            context, the pPrevChainContext is set to the CERT_CHAIN_CONTEXT structure returned by a previous call. If pPrevChainContext is
            not <c>NULL</c>, the structure is always freed by this function by using the CertFreeCertificateChain function, even if an error occurs.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertFreeCertificateChain(Vanara.PInvoke.Crypt32.PCCERT_CHAIN_CONTEXT)">
            <summary>
            <para>
            The <c>CertFreeCertificateChain</c> function frees a certificate chain by reducing its reference count. If the reference count
            becomes zero, memory allocated for the chain is released.
            </para>
            <para>
            To free a context obtained by a get, duplicate, or create function, call the appropriate free function. To free a context
            obtained by a find or enumerate function, either pass it in as the previous context parameter to a subsequent invocation of the
            function, or call the appropriate free function. For more information, see the reference topic for the function that obtains the context.
            </para>
            </summary>
            <param name="pChainContext">
            A pointer to a CERT_CHAIN_CONTEXT certificate chain context to be freed. If the reference count on the context reaches zero, the
            storage allocated for the context is freed.
            </param>
            <returns>This function does not return a value.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertFreeCertificateChainEngine(Vanara.PInvoke.Crypt32.HCERTCHAINENGINE)">
            <summary>The <c>CertFreeCertificateChainEngine</c> function frees a certificate trust engine.</summary>
            <param name="hChainEngine">Handle of the chain engine to be freed.</param>
            <returns>This function does not return a value.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertFreeCertificateChainList(System.IntPtr@)">
            <summary>The <c>CertFreeCertificateChainList</c> function frees the array of pointers to chain contexts.</summary>
            <param name="prgpSelection">A pointer to a PCCERT_CHAIN_CONTEXT structure returned by the CertSelectCertificateChains function.</param>
            <returns>This function does not return a value.</returns>
            <remarks>
            Before calling the <c>CertFreeCertificateChainList</c> function, you must call the CertFreeCertificateChain function on each
            chain context within the array pointed to by the prgpSelection parameter.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertGetCertificateChain(Vanara.PInvoke.Crypt32.HCERTCHAINENGINE,Vanara.PInvoke.Crypt32.PCCERT_CONTEXT,System.Runtime.InteropServices.ComTypes.FILETIME@,Vanara.PInvoke.Crypt32.HCERTSTORE,Vanara.PInvoke.Crypt32.CERT_CHAIN_PARA@,Vanara.PInvoke.Crypt32.CertChainFlags,System.IntPtr,Vanara.PInvoke.Crypt32.SafePCCERT_CHAIN_CONTEXT@)">
            <summary>
            The <c>CertGetCertificateChain</c> function builds a certificate chain context starting from an end certificate and going back,
            if possible, to a trusted root certificate.
            </summary>
            <param name="hChainEngine">
            A handle of the chain engine (namespace and cache) to be used. If hChainEngine is <c>NULL</c>, the default chain engine,
            HCCE_CURRENT_USER, is used. This parameter can be set to HCCE_LOCAL_MACHINE.
            </param>
            <param name="pCertContext">
            A pointer to the CERT_CONTEXT of the end certificate, the certificate for which a chain is being built. This certificate context
            will be the zero-index element in the first simple chain.
            </param>
            <param name="pTime">
            A pointer to a FILETIME variable that indicates the time for which the chain is to be validated. Note that the time does not
            affect trust list, revocation, or root store checking. The current system time is used if <c>NULL</c> is passed to this
            parameter. Trust in a particular certificate being a trusted root is based on the current state of the root store and not the
            state of the root store at a time passed in by this parameter. For revocation, a certificate revocation list (CRL), itself, must
            be valid at the current time. The value of this parameter is used to determine whether a certificate listed in a CRL has been revoked.
            </param>
            <param name="hAdditionalStore">
            A handle to any additional store to search for supporting certificates and certificate trust lists (CTLs). This parameter can be
            <c>NULL</c> if no additional store is to be searched.
            </param>
            <param name="pChainPara">A pointer to a CERT_CHAIN_PARA structure that includes chain-building parameters.</param>
            <param name="dwFlags">
            <para>Flag values that indicate special processing. This parameter can be a combination of one or more of the following flags.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_CHAIN_CACHE_END_CERT 0x00000001</term>
            <term>
            When this flag is set, the end certificate is cached, which might speed up the chain-building process. By default, the end
            certificate is not cached, and it would need to be verified each time a chain is built for it.
            </term>
            </item>
            <item>
            <term>CERT_CHAIN_REVOCATION_CHECK_CACHE_ONLY 0x80000000</term>
            <term>Revocation checking only accesses cached URLs.</term>
            </item>
            <item>
            <term>CERT_CHAIN_REVOCATION_CHECK_OCSP_CERT 0x04000000</term>
            <term>
            This flag is used internally during chain building for an online certificate status protocol (OCSP) signer certificate to
            prevent cyclic revocation checks. During chain building, if the OCSP response is signed by an independent OCSP signer, then, in
            addition to the original chain build, there is a second chain built for the OCSP signer certificate itself. This flag is used
            during this second chain build to inhibit a recursive independent OCSP signer certificate. If the signer certificate contains
            the szOID_PKIX_OCSP_NOCHECK extension, revocation checking is skipped for the leaf signer certificate. Both OCSP and CRL
            checking are allowed. Windows Server 2003 and Windows XP: This value is not supported.
            </term>
            </item>
            <item>
            <term>CERT_CHAIN_CACHE_ONLY_URL_RETRIEVAL 0x00000004</term>
            <term>
            Uses only cached URLs in building a certificate chain. The Internet and intranet are not searched for URL-based objects. Note
            This flag is not applicable to revocation checking. Set CERT_CHAIN_REVOCATION_CHECK_CACHE_ONLY to use only cached URLs for
            revocation checking.
            </term>
            </item>
            <item>
            <term>CERT_CHAIN_DISABLE_PASS1_QUALITY_FILTERING 0x00000040</term>
            <term>
            For performance reasons, the second pass of chain building only considers potential chain paths that have quality greater than
            or equal to the highest quality determined during the first pass. The first pass only considers valid signature, complete chain,
            and trusted roots to calculate chain quality. This flag can be set to disable this optimization and consider all potential chain
            paths during the second pass.
            </term>
            </item>
            <item>
            <term>CERT_CHAIN_DISABLE_MY_PEER_TRUST 0x00000800</term>
            <term>This flag is not supported. Certificates in the "My" store are never considered for peer trust.</term>
            </item>
            <item>
            <term>CERT_CHAIN_ENABLE_PEER_TRUST 0x00000400</term>
            <term>
            End entity certificates in the "TrustedPeople" store are trusted without performing any chain building. This function does not
            set the CERT_TRUST_IS_PARTIAL_CHAIN or CERT_TRUST_IS_UNTRUSTED_ROOT dwErrorStatus member bits of the ppChainContext parameter.
            Windows Server 2003 Windows XP : This flag is not supported.
            </term>
            </item>
            <item>
            <term>CERT_CHAIN_OPT_IN_WEAK_SIGNATURE 0x00010000</term>
            <term>
            Setting this flag indicates the caller wishes to opt into weak signature checks. This flag is available in the rollup update for
            each OS starting with Windows 7 and Windows Server 2008 R2.
            </term>
            </item>
            <item>
            <term>CERT_CHAIN_RETURN_LOWER_QUALITY_CONTEXTS 0x00000080</term>
            <term>
            The default is to return only the highest quality chain path. Setting this flag will return the lower quality chains. These are
            returned in the cLowerQualityChainContext and rgpLowerQualityChainContext fields of the chain context.
            </term>
            </item>
            <item>
            <term>CERT_CHAIN_DISABLE_AUTH_ROOT_AUTO_UPDATE 0x00000100</term>
            <term>Setting this flag inhibits the auto update of third-party roots from the Windows Update Web Server.</term>
            </item>
            <item>
            <term>CERT_CHAIN_REVOCATION_ACCUMULATIVE_TIMEOUT 0x08000000</term>
            <term>
            When you set CERT_CHAIN_REVOCATION_ACCUMULATIVE_TIMEOUT and you also specify a value for the dwUrlRetrievalTimeout member of the
            CERT_CHAIN_PARA structure, the value you specify in dwUrlRetrievalTimeout represents the cumulative timeout across all
            revocation URL retrievals. If you set CERT_CHAIN_REVOCATION_ACCUMULATIVE_TIMEOUT but do not specify a dwUrlRetrievalTimeout
            value, the maximum cumulative timeout is set, by default, to 20 seconds. Each URL tested will timeout after half of the
            remaining cumulative balance has passed. That is, the first URL times out after 10 seconds, the second after 5 seconds, the
            third after 2.5 seconds and so on until a URL succeeds, 20 seconds has passed, or there are no more URLs to test. If you do not
            set CERT_CHAIN_REVOCATION_ACCUMULATIVE_TIMEOUT, each revocation URL in the chain is assigned a maximum timeout equal to the
            value specified in dwUrlRetrievalTimeout. If you do not specify a value for the dwUrlRetrievalTimeout member, each revocation
            URL is assigned a maximum default timeout of 15 seconds. If no URL succeeds, the maximum cumulative timeout value is 15 seconds
            multiplied by the number of URLs in the chain. You can set the default values by using Group Policy.
            </term>
            </item>
            <item>
            <term>CERT_CHAIN_TIMESTAMP_TIME 0x00000200</term>
            <term>
            When this flag is set, pTime is used as the time stamp time to determine whether the end certificate was time valid. Current
            time can also be used to determine whether the end certificate remains time valid. All other certification authority (CA) and
            root certificates in the chain are checked by using current time and not pTime.
            </term>
            </item>
            <item>
            <term>CERT_CHAIN_DISABLE_AIA 0x00002000</term>
            <term>Setting this flag explicitly turns off Authority Information Access (AIA) retrievals.</term>
            </item>
            </list>
            <para>You can also set the following revocation flags, but only one flag from this group may be set at a time.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_CHAIN_REVOCATION_CHECK_END_CERT 0x10000000</term>
            <term>Revocation checking is done on the end certificate and only the end certificate.</term>
            </item>
            <item>
            <term>CERT_CHAIN_REVOCATION_CHECK_CHAIN 0x20000000</term>
            <term>Revocation checking is done on all of the certificates in every chain.</term>
            </item>
            <item>
            <term>CERT_CHAIN_REVOCATION_CHECK_CHAIN_EXCLUDE_ROOT 0x40000000</term>
            <term>Revocation checking is done on all certificates in all of the chains except the root certificate.</term>
            </item>
            </list>
            </param>
            <param name="pvReserved">This parameter is reserved and must be <c>NULL</c>.</param>
            <param name="ppChainContext">
            The address of a pointer to the chain context created. When you have finished using the chain context, release the chain by
            calling the CertFreeCertificateChain function.
            </param>
            <returns>
            <para>If the function succeeds, the function returns nonzero ( <c>TRUE</c>).</para>
            <para>If the function fails, it returns zero ( <c>FALSE</c>). For extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            When an application requests a certificate chain, the structure returned is in the form of a CERT_CHAIN_CONTEXT. This context
            contains an array of CERT_SIMPLE_CHAIN structures where each simple chain goes from an end certificate to a self-signed
            certificate. The chain context connects simple chains through trust lists. Each simple chain contains the chain of certificates,
            summary trust information about the chain, and trust information about each certificate element in the chain.
            </para>
            <para>The following remarks apply to strong signature checking:</para>
            <list type="bullet">
            <item>
            <term>
            You can enable strong signature checking for this function by setting the <c>pStrongSignPara</c> member of the CERT_CHAIN_PARA
            structure that is pointed to by the pChainPara parameter.
            </term>
            </item>
            <item>
            <term>
            If a certificate without a strong signature is found in the chain, the <c>CERT_TRUST_HAS_WEAK_SIGNATURE</c> and
            <c>CERT_TRUST_IS_NOT_SIGNATURE_VALID</c> errors are set in the <c>dwErrorStatus</c> field of the CERT_TRUST_STATUS structure.
            The ppChainContext parameter points to a CERT_CHAIN_CONTEXT structure which, in turn, points to the <c>CERT_TRUST_STATUS</c> structure.
            </term>
            </item>
            <item>
            <term>
            If the chain is strong signed, the public key in the end certificate is checked to determine whether it satisfies the minimum
            public key length requirements for a strong signature. If the condition is not satisfied, the
            <c>CERT_TRUST_HAS_WEAK_SIGNATURE</c> and <c>CERT_TRUST_IS_NOT_SIGNATURE_VALID</c> errors are set in the <c>dwErrorStatus</c>
            field of the CERT_TRUST_STATUS structure. To disable checking the key length, set the
            <c>CERT_CHAIN_STRONG_SIGN_DISABLE_END_CHECK_FLAG</c> value in the <c>dwStrongSignFlags</c> member of the CERT_CHAIN_PARA
            structure pointed to by the pChainPara parameter.
            </term>
            </item>
            <item>
            <term>
            If the <c>CERT_STRONG_SIGN_ENABLE_CRL_CHECK</c> or <c>CERT_STRONG_SIGN_ENABLE_OCSP_CHECK</c> flags are set in the
            CERT_STRONG_SIGN_SERIALIZED_INFO structure and a CRL or OCSP response is found without a strong signature, the CRL or OCSP
            response will be treated as being offline. That is, the <c>CERT_TRUST_IS_OFFLINE_REVOCATION</c> and
            <c>CERT_TRUST_REVOCATION_STATUS_UNKNOWN</c> errors are set in the <c>dwErrorStatus</c> field of the CERT_TRUST_STATUS structure.
            Also, the <c>dwRevocationResult</c> member of the CERT_REVOCATION_INFO structure is set to <c>NTE_BAD_ALGID</c>.
            </term>
            </item>
            </list>
            <para>Examples</para>
            <para>For an example that uses this function, see Example C Program: Creating a Certificate Chain.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertGetCertificateChain(Vanara.PInvoke.Crypt32.HCERTCHAINENGINE,Vanara.PInvoke.Crypt32.PCCERT_CONTEXT,System.IntPtr,Vanara.PInvoke.Crypt32.HCERTSTORE,Vanara.PInvoke.Crypt32.CERT_CHAIN_PARA@,Vanara.PInvoke.Crypt32.CertChainFlags,System.IntPtr,Vanara.PInvoke.Crypt32.SafePCCERT_CHAIN_CONTEXT@)">
            <summary>
            The <c>CertGetCertificateChain</c> function builds a certificate chain context starting from an end certificate and going back,
            if possible, to a trusted root certificate.
            </summary>
            <param name="hChainEngine">
            A handle of the chain engine (namespace and cache) to be used. If hChainEngine is <c>NULL</c>, the default chain engine,
            HCCE_CURRENT_USER, is used. This parameter can be set to HCCE_LOCAL_MACHINE.
            </param>
            <param name="pCertContext">
            A pointer to the CERT_CONTEXT of the end certificate, the certificate for which a chain is being built. This certificate context
            will be the zero-index element in the first simple chain.
            </param>
            <param name="pTime">
            A pointer to a FILETIME variable that indicates the time for which the chain is to be validated. Note that the time does not
            affect trust list, revocation, or root store checking. The current system time is used if <c>NULL</c> is passed to this
            parameter. Trust in a particular certificate being a trusted root is based on the current state of the root store and not the
            state of the root store at a time passed in by this parameter. For revocation, a certificate revocation list (CRL), itself, must
            be valid at the current time. The value of this parameter is used to determine whether a certificate listed in a CRL has been revoked.
            </param>
            <param name="hAdditionalStore">
            A handle to any additional store to search for supporting certificates and certificate trust lists (CTLs). This parameter can be
            <c>NULL</c> if no additional store is to be searched.
            </param>
            <param name="pChainPara">A pointer to a CERT_CHAIN_PARA structure that includes chain-building parameters.</param>
            <param name="dwFlags">
            <para>Flag values that indicate special processing. This parameter can be a combination of one or more of the following flags.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_CHAIN_CACHE_END_CERT 0x00000001</term>
            <term>
            When this flag is set, the end certificate is cached, which might speed up the chain-building process. By default, the end
            certificate is not cached, and it would need to be verified each time a chain is built for it.
            </term>
            </item>
            <item>
            <term>CERT_CHAIN_REVOCATION_CHECK_CACHE_ONLY 0x80000000</term>
            <term>Revocation checking only accesses cached URLs.</term>
            </item>
            <item>
            <term>CERT_CHAIN_REVOCATION_CHECK_OCSP_CERT 0x04000000</term>
            <term>
            This flag is used internally during chain building for an online certificate status protocol (OCSP) signer certificate to
            prevent cyclic revocation checks. During chain building, if the OCSP response is signed by an independent OCSP signer, then, in
            addition to the original chain build, there is a second chain built for the OCSP signer certificate itself. This flag is used
            during this second chain build to inhibit a recursive independent OCSP signer certificate. If the signer certificate contains
            the szOID_PKIX_OCSP_NOCHECK extension, revocation checking is skipped for the leaf signer certificate. Both OCSP and CRL
            checking are allowed. Windows Server 2003 and Windows XP: This value is not supported.
            </term>
            </item>
            <item>
            <term>CERT_CHAIN_CACHE_ONLY_URL_RETRIEVAL 0x00000004</term>
            <term>
            Uses only cached URLs in building a certificate chain. The Internet and intranet are not searched for URL-based objects. Note
            This flag is not applicable to revocation checking. Set CERT_CHAIN_REVOCATION_CHECK_CACHE_ONLY to use only cached URLs for
            revocation checking.
            </term>
            </item>
            <item>
            <term>CERT_CHAIN_DISABLE_PASS1_QUALITY_FILTERING 0x00000040</term>
            <term>
            For performance reasons, the second pass of chain building only considers potential chain paths that have quality greater than
            or equal to the highest quality determined during the first pass. The first pass only considers valid signature, complete chain,
            and trusted roots to calculate chain quality. This flag can be set to disable this optimization and consider all potential chain
            paths during the second pass.
            </term>
            </item>
            <item>
            <term>CERT_CHAIN_DISABLE_MY_PEER_TRUST 0x00000800</term>
            <term>This flag is not supported. Certificates in the "My" store are never considered for peer trust.</term>
            </item>
            <item>
            <term>CERT_CHAIN_ENABLE_PEER_TRUST 0x00000400</term>
            <term>
            End entity certificates in the "TrustedPeople" store are trusted without performing any chain building. This function does not
            set the CERT_TRUST_IS_PARTIAL_CHAIN or CERT_TRUST_IS_UNTRUSTED_ROOT dwErrorStatus member bits of the ppChainContext parameter.
            Windows Server 2003 Windows XP : This flag is not supported.
            </term>
            </item>
            <item>
            <term>CERT_CHAIN_OPT_IN_WEAK_SIGNATURE 0x00010000</term>
            <term>
            Setting this flag indicates the caller wishes to opt into weak signature checks. This flag is available in the rollup update for
            each OS starting with Windows 7 and Windows Server 2008 R2.
            </term>
            </item>
            <item>
            <term>CERT_CHAIN_RETURN_LOWER_QUALITY_CONTEXTS 0x00000080</term>
            <term>
            The default is to return only the highest quality chain path. Setting this flag will return the lower quality chains. These are
            returned in the cLowerQualityChainContext and rgpLowerQualityChainContext fields of the chain context.
            </term>
            </item>
            <item>
            <term>CERT_CHAIN_DISABLE_AUTH_ROOT_AUTO_UPDATE 0x00000100</term>
            <term>Setting this flag inhibits the auto update of third-party roots from the Windows Update Web Server.</term>
            </item>
            <item>
            <term>CERT_CHAIN_REVOCATION_ACCUMULATIVE_TIMEOUT 0x08000000</term>
            <term>
            When you set CERT_CHAIN_REVOCATION_ACCUMULATIVE_TIMEOUT and you also specify a value for the dwUrlRetrievalTimeout member of the
            CERT_CHAIN_PARA structure, the value you specify in dwUrlRetrievalTimeout represents the cumulative timeout across all
            revocation URL retrievals. If you set CERT_CHAIN_REVOCATION_ACCUMULATIVE_TIMEOUT but do not specify a dwUrlRetrievalTimeout
            value, the maximum cumulative timeout is set, by default, to 20 seconds. Each URL tested will timeout after half of the
            remaining cumulative balance has passed. That is, the first URL times out after 10 seconds, the second after 5 seconds, the
            third after 2.5 seconds and so on until a URL succeeds, 20 seconds has passed, or there are no more URLs to test. If you do not
            set CERT_CHAIN_REVOCATION_ACCUMULATIVE_TIMEOUT, each revocation URL in the chain is assigned a maximum timeout equal to the
            value specified in dwUrlRetrievalTimeout. If you do not specify a value for the dwUrlRetrievalTimeout member, each revocation
            URL is assigned a maximum default timeout of 15 seconds. If no URL succeeds, the maximum cumulative timeout value is 15 seconds
            multiplied by the number of URLs in the chain. You can set the default values by using Group Policy.
            </term>
            </item>
            <item>
            <term>CERT_CHAIN_TIMESTAMP_TIME 0x00000200</term>
            <term>
            When this flag is set, pTime is used as the time stamp time to determine whether the end certificate was time valid. Current
            time can also be used to determine whether the end certificate remains time valid. All other certification authority (CA) and
            root certificates in the chain are checked by using current time and not pTime.
            </term>
            </item>
            <item>
            <term>CERT_CHAIN_DISABLE_AIA 0x00002000</term>
            <term>Setting this flag explicitly turns off Authority Information Access (AIA) retrievals.</term>
            </item>
            </list>
            <para>You can also set the following revocation flags, but only one flag from this group may be set at a time.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_CHAIN_REVOCATION_CHECK_END_CERT 0x10000000</term>
            <term>Revocation checking is done on the end certificate and only the end certificate.</term>
            </item>
            <item>
            <term>CERT_CHAIN_REVOCATION_CHECK_CHAIN 0x20000000</term>
            <term>Revocation checking is done on all of the certificates in every chain.</term>
            </item>
            <item>
            <term>CERT_CHAIN_REVOCATION_CHECK_CHAIN_EXCLUDE_ROOT 0x40000000</term>
            <term>Revocation checking is done on all certificates in all of the chains except the root certificate.</term>
            </item>
            </list>
            </param>
            <param name="pvReserved">This parameter is reserved and must be <c>NULL</c>.</param>
            <param name="ppChainContext">
            The address of a pointer to the chain context created. When you have finished using the chain context, release the chain by
            calling the CertFreeCertificateChain function.
            </param>
            <returns>
            <para>If the function succeeds, the function returns nonzero ( <c>TRUE</c>).</para>
            <para>If the function fails, it returns zero ( <c>FALSE</c>). For extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            When an application requests a certificate chain, the structure returned is in the form of a CERT_CHAIN_CONTEXT. This context
            contains an array of CERT_SIMPLE_CHAIN structures where each simple chain goes from an end certificate to a self-signed
            certificate. The chain context connects simple chains through trust lists. Each simple chain contains the chain of certificates,
            summary trust information about the chain, and trust information about each certificate element in the chain.
            </para>
            <para>The following remarks apply to strong signature checking:</para>
            <list type="bullet">
            <item>
            <term>
            You can enable strong signature checking for this function by setting the <c>pStrongSignPara</c> member of the CERT_CHAIN_PARA
            structure that is pointed to by the pChainPara parameter.
            </term>
            </item>
            <item>
            <term>
            If a certificate without a strong signature is found in the chain, the <c>CERT_TRUST_HAS_WEAK_SIGNATURE</c> and
            <c>CERT_TRUST_IS_NOT_SIGNATURE_VALID</c> errors are set in the <c>dwErrorStatus</c> field of the CERT_TRUST_STATUS structure.
            The ppChainContext parameter points to a CERT_CHAIN_CONTEXT structure which, in turn, points to the <c>CERT_TRUST_STATUS</c> structure.
            </term>
            </item>
            <item>
            <term>
            If the chain is strong signed, the public key in the end certificate is checked to determine whether it satisfies the minimum
            public key length requirements for a strong signature. If the condition is not satisfied, the
            <c>CERT_TRUST_HAS_WEAK_SIGNATURE</c> and <c>CERT_TRUST_IS_NOT_SIGNATURE_VALID</c> errors are set in the <c>dwErrorStatus</c>
            field of the CERT_TRUST_STATUS structure. To disable checking the key length, set the
            <c>CERT_CHAIN_STRONG_SIGN_DISABLE_END_CHECK_FLAG</c> value in the <c>dwStrongSignFlags</c> member of the CERT_CHAIN_PARA
            structure pointed to by the pChainPara parameter.
            </term>
            </item>
            <item>
            <term>
            If the <c>CERT_STRONG_SIGN_ENABLE_CRL_CHECK</c> or <c>CERT_STRONG_SIGN_ENABLE_OCSP_CHECK</c> flags are set in the
            CERT_STRONG_SIGN_SERIALIZED_INFO structure and a CRL or OCSP response is found without a strong signature, the CRL or OCSP
            response will be treated as being offline. That is, the <c>CERT_TRUST_IS_OFFLINE_REVOCATION</c> and
            <c>CERT_TRUST_REVOCATION_STATUS_UNKNOWN</c> errors are set in the <c>dwErrorStatus</c> field of the CERT_TRUST_STATUS structure.
            Also, the <c>dwRevocationResult</c> member of the CERT_REVOCATION_INFO structure is set to <c>NTE_BAD_ALGID</c>.
            </term>
            </item>
            </list>
            <para>Examples</para>
            <para>For an example that uses this function, see Example C Program: Creating a Certificate Chain.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertIsValidCRLForCertificate(Vanara.PInvoke.Crypt32.PCCERT_CONTEXT,Vanara.PInvoke.Crypt32.PCCRL_CONTEXT,System.UInt32,System.IntPtr)">
            <summary>
            The <c>CertIsValidCRLForCertificate</c> function checks a CRL to find out if it is a CRL that would include a specific
            certificate if that certificate were revoked. If the CRL has an issuing distribution point (IDP) extension, the function checks
            whether that IDP is valid for the certificate being checked.
            </summary>
            <param name="pCert">A pointer to a certificate context.</param>
            <param name="pCrl">
            A pointer to a CRL. The function checks this CRL to determine whether it could contain the certificate context pointed to by
            pCert. The function does not look for the certificate in the CRL.
            </param>
            <param name="dwFlags">Currently not used and must be set to zero.</param>
            <param name="pvReserved">Currently not used and must be set to <c>NULL</c>.</param>
            <returns>
            The function returns <c>TRUE</c> if the CRL is a valid CRL to be searched for the specific certificate. It returns <c>FALSE</c>
            if the CRL is not a valid CRL for searching for the certificate.
            </returns>
            <remarks>
            For the CRL to be valid for the certificate, the <c>CertIsValidCRLForCertificate</c> function does not require the CRL to be
            issued by the same certification authority (CA) as the issuer of the certificate.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertSetCertificateContextPropertiesFromCTLEntry(Vanara.PInvoke.Crypt32.PCCERT_CONTEXT,Vanara.PInvoke.Crypt32.CTL_ENTRY@,System.UInt32)">
            <summary>
            The <c>CertSetCertificateContextPropertiesFromCTLEntry</c> function sets the properties on the certificate context by using the
            attributes in the specified certificate trust list (CTL) entry.
            </summary>
            <param name="pCertContext">A pointer to the CERT_CONTEXT whose attributes are to be set.</param>
            <param name="pCtlEntry">A pointer to the CTL_ENTRY structure used to set the attributes on the certificate.</param>
            <param name="dwFlags">
            A <c>DWORD</c>. This parameter can be set to CERT_SET_PROPERTY_IGNORE_PERSIST_ERROR_FLAG to ignore any persisted error flags.
            </param>
            <returns>
            <para>If the function succeeds, the function returns nonzero.</para>
            <para>If the function fails, it returns zero. For extended error information, call GetLastError.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertVerifyCertificateChainPolicy(Vanara.PInvoke.Crypt32.SafeOID,Vanara.PInvoke.Crypt32.PCCERT_CHAIN_CONTEXT,Vanara.PInvoke.Crypt32.CERT_CHAIN_POLICY_PARA@,Vanara.PInvoke.Crypt32.CERT_CHAIN_POLICY_STATUS@)">
            <summary>
            The <c>CertVerifyCertificateChainPolicy</c> function checks a certificate chain to verify its validity, including its compliance
            with any specified validity policy criteria.
            </summary>
            <param name="pszPolicyOID">
            <para>Current predefined verify chain policy structures are listed in the following table.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_CHAIN_POLICY_BASE (LPCSTR) 1</term>
            <term>
            Implements the base chain policy verification checks. The dwFlags member of the structure pointed to by pPolicyPara can be set
            to alter the default policy checking behavior.
            </term>
            </item>
            <item>
            <term>CERT_CHAIN_POLICY_AUTHENTICODE (LPCSTR) 2</term>
            <term>
            Implements the Authenticode chain policy verification checks. The pvExtraPolicyPara member of the structure pointed to by
            pPolicyPara can be set to point to an AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA structure. The pvExtraPolicyStatus member of the
            structure pointed to by pPolicyStatus can be set to point to an AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS structure.
            </term>
            </item>
            <item>
            <term>CERT_CHAIN_POLICY_AUTHENTICODE_TS (LPCSTR) 3</term>
            <term>
            Implements Authenticode Time Stamp chain policy verification checks. The pvExtraPolicyPara member of the data structure pointed
            to by pPolicyPara can be set to point to an AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA structure. The pvExtraPolicyStatus
            member of the data structure pointed to by pPolicyStatus is not used and must be set to NULL
            </term>
            </item>
            <item>
            <term>CERT_CHAIN_POLICY_SSL (LPCSTR) 4</term>
            <term>
            Implements the SSL client/server chain policy verification checks. The pvExtraPolicyPara member in the data structure pointed to
            by pPolicyPara can be set to point to an SSL_EXTRA_CERT_CHAIN_POLICY_PARA structure initialized with additional policy criteria.
            </term>
            </item>
            <item>
            <term>CERT_CHAIN_POLICY_BASIC_CONSTRAINTS (LPCSTR) 5</term>
            <term>
            Implements the basic constraints chain policy. Iterates through all the certificates in the chain checking for either a
            szOID_BASIC_CONSTRAINTS or a szOID_BASIC_CONSTRAINTS2 extension. If neither extension is present, the certificate is assumed to
            have valid policy. Otherwise, for the first certificate element, checks if it matches the expected CA_FLAG or END_ENTITY_FLAG
            specified in the dwFlags member of the CERT_CHAIN_POLICY_PARA structure pointed to by the pPolicyPara parameter. If neither or
            both flags are set, then, the first element can be either a CA or END_ENTITY. All other elements must be a certification
            authority (CA). If the PathLenConstraint is present in the extension, it is checked. The first elements in the remaining simple
            chains (that is, the certificates used to sign the CTL) are checked to be an END_ENTITY. If this verification fails, dwError
            will be set to TRUST_E_BASIC_CONSTRAINTS.
            </term>
            </item>
            <item>
            <term>CERT_CHAIN_POLICY_NT_AUTH (LPCSTR) 6</term>
            <term>
            Implements the Windows NT Authentication chain policy, which consists of three distinct chain verifications in the following order:
            </term>
            </item>
            <item>
            <term>CERT_CHAIN_POLICY_MICROSOFT_ROOT (LPCSTR) 7</term>
            <term>
            Checks the last element of the first simple chain for a Microsoft root public key. If that element does not contain a Microsoft
            root public key, the dwError member of the CERT_CHAIN_POLICY_STATUS structure pointed to by the pPolicyStatus parameter is set
            to CERT_E_UNTRUSTEDROOT. The dwFlags member of the CERT_CHAIN_POLICY_PARA structure pointed to by the pPolicyStatus parameter
            can contain the MICROSOFT_ROOT_CERT_CHAIN_POLICY_CHECK_APPLICATION_ROOT_FLAG flag, which causes this function to also check for
            the Microsoft application root "Microsoft Root Certificate Authority 2011". The dwFlags member of the CERT_CHAIN_POLICY_PARA
            structure pointed to by the pPolicyPara parameter can contain the MICROSOFT_ROOT_CERT_CHAIN_POLICY_ENABLE_TEST_ROOT_FLAG flag,
            which causes this function to also check for the Microsoft test roots.
            </term>
            </item>
            <item>
            <term>CERT_CHAIN_POLICY_EV (LPCSTR) 8</term>
            <term>
            Specifies that extended validation of certificates is performed. Windows Server 2008, Windows Vista, Windows Server 2003 and
            Windows XP: This value is not supported.
            </term>
            </item>
            <item>
            <term>CERT_CHAIN_POLICY_SSL_F12 (LPCSTR) 9</term>
            <term>
            Checks if any certificates in the chain have weak crypto or if third party root certificate compliance and provide an error
            string. The pvExtraPolicyStatus member of the CERT_CHAIN_POLICY_STATUS structure pointed to by the pPolicyStatus parameter must
            point to SSL_F12_EXTRA_CERT_CHAIN_POLICY_STATUS, which is updated with the results of the weak crypto and root program
            compliance checks. Before calling, the cbSize member of the CERT_CHAIN_POLICY_STATUS structure pointed to by the pPolicyStatus
            parameter must be set to a value greater than or equal to sizeof(SSL_F12_EXTRA_CERT_CHAIN_POLICY_STATUS). The dwError member in
            CERT_CHAIN_POLICY_STATUS structure pointed to by the pPolicyStatus parameter will be set to TRUST_E_CERT_SIGNATURE for potential
            weak crypto and set to CERT_E_UNTRUSTEDROOT for Third Party Roots not in compliance with the Microsoft Root Program. Windows 10,
            version 1607, Windows Server 2016, Windows 10, version 1511 with KB3172985, Windows 10 RTM with KB3163912, Windows 8.1 and
            Windows Server 2012 R2 with KB3163912, and Windows 7 with SP1 and Windows Server 2008 R2 SP1 with KB3161029
            </term>
            </item>
            </list>
            </param>
            <param name="pChainContext">A pointer to a CERT_CHAIN_CONTEXT structure that contains a chain to be verified.</param>
            <param name="pPolicyPara">
            <para>
            A pointer to a CERT_CHAIN_POLICY_PARA structure that provides the policy verification criteria for the chain. The <c>dwFlags</c>
            member of that structure can be set to change the default policy checking behavior.
            </para>
            <para>In addition, policy-specific parameters can also be passed in the <c>pvExtraPolicyPara</c> member of the structure.</para>
            </param>
            <param name="pPolicyStatus">
            A pointer to a CERT_CHAIN_POLICY_STATUS structure where status information on the chain is returned. OID-specific extra status
            can be returned in the <c>pvExtraPolicyStatus</c> member of this structure.
            </param>
            <returns>
            <para>
            The return value indicates whether the function was able to check for the policy, it does not indicate whether the policy check
            failed or passed.
            </para>
            <para>
            If the chain can be verified for the specified policy, <c>TRUE</c> is returned and the <c>dwError</c> member of the
            pPolicyStatus is updated. A <c>dwError</c> of 0 (ERROR_SUCCESS or S_OK) indicates the chain satisfies the specified policy.
            </para>
            <para>
            If the chain cannot be validated, the return value is <c>TRUE</c> and you need to verify the pPolicyStatus parameter for the
            actual error.
            </para>
            <para>A value of <c>FALSE</c> indicates that the function wasn't able to check for the policy.</para>
            </returns>
            <remarks>
            <para>
            A <c>dwError</c> member of the CERT_CHAIN_POLICY_STATUS structure pointed to by pPolicyStatus can apply to a single chain
            element, to a simple chain, or to an entire chain context. If <c>dwError</c> applies to the entire chain context, both the
            <c>lChainIndex</c> and the <c>lElementIndex</c> members of the <c>CERT_CHAIN_POLICY_STATUS</c> structure are set to –1. If
            <c>dwError</c> applies to a complete simple chain, <c>lElementIndex</c> is set to –1 and <c>lChainIndex</c> is set to the index
            of the first chain that has an error. If <c>dwError</c> applies to a single certificate element, <c>lChainIndex</c> and
            <c>lElementIndex</c> index the first certificate that has the error.
            </para>
            <para>To get the certificate element use this syntax:</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertVerifyCertificateChainPolicy(System.IntPtr,Vanara.PInvoke.Crypt32.PCCERT_CHAIN_CONTEXT,Vanara.PInvoke.Crypt32.CERT_CHAIN_POLICY_PARA@,Vanara.PInvoke.Crypt32.CERT_CHAIN_POLICY_STATUS@)">
            <summary>
            The <c>CertVerifyCertificateChainPolicy</c> function checks a certificate chain to verify its validity, including its compliance
            with any specified validity policy criteria.
            </summary>
            <param name="pszPolicyOID">
            <para>Current predefined verify chain policy structures are listed in the following table.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_CHAIN_POLICY_BASE (LPCSTR) 1</term>
            <term>
            Implements the base chain policy verification checks. The dwFlags member of the structure pointed to by pPolicyPara can be set
            to alter the default policy checking behavior.
            </term>
            </item>
            <item>
            <term>CERT_CHAIN_POLICY_AUTHENTICODE (LPCSTR) 2</term>
            <term>
            Implements the Authenticode chain policy verification checks. The pvExtraPolicyPara member of the structure pointed to by
            pPolicyPara can be set to point to an AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA structure. The pvExtraPolicyStatus member of the
            structure pointed to by pPolicyStatus can be set to point to an AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS structure.
            </term>
            </item>
            <item>
            <term>CERT_CHAIN_POLICY_AUTHENTICODE_TS (LPCSTR) 3</term>
            <term>
            Implements Authenticode Time Stamp chain policy verification checks. The pvExtraPolicyPara member of the data structure pointed
            to by pPolicyPara can be set to point to an AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA structure. The pvExtraPolicyStatus
            member of the data structure pointed to by pPolicyStatus is not used and must be set to NULL
            </term>
            </item>
            <item>
            <term>CERT_CHAIN_POLICY_SSL (LPCSTR) 4</term>
            <term>
            Implements the SSL client/server chain policy verification checks. The pvExtraPolicyPara member in the data structure pointed to
            by pPolicyPara can be set to point to an SSL_EXTRA_CERT_CHAIN_POLICY_PARA structure initialized with additional policy criteria.
            </term>
            </item>
            <item>
            <term>CERT_CHAIN_POLICY_BASIC_CONSTRAINTS (LPCSTR) 5</term>
            <term>
            Implements the basic constraints chain policy. Iterates through all the certificates in the chain checking for either a
            szOID_BASIC_CONSTRAINTS or a szOID_BASIC_CONSTRAINTS2 extension. If neither extension is present, the certificate is assumed to
            have valid policy. Otherwise, for the first certificate element, checks if it matches the expected CA_FLAG or END_ENTITY_FLAG
            specified in the dwFlags member of the CERT_CHAIN_POLICY_PARA structure pointed to by the pPolicyPara parameter. If neither or
            both flags are set, then, the first element can be either a CA or END_ENTITY. All other elements must be a certification
            authority (CA). If the PathLenConstraint is present in the extension, it is checked. The first elements in the remaining simple
            chains (that is, the certificates used to sign the CTL) are checked to be an END_ENTITY. If this verification fails, dwError
            will be set to TRUST_E_BASIC_CONSTRAINTS.
            </term>
            </item>
            <item>
            <term>CERT_CHAIN_POLICY_NT_AUTH (LPCSTR) 6</term>
            <term>
            Implements the Windows NT Authentication chain policy, which consists of three distinct chain verifications in the following order:
            </term>
            </item>
            <item>
            <term>CERT_CHAIN_POLICY_MICROSOFT_ROOT (LPCSTR) 7</term>
            <term>
            Checks the last element of the first simple chain for a Microsoft root public key. If that element does not contain a Microsoft
            root public key, the dwError member of the CERT_CHAIN_POLICY_STATUS structure pointed to by the pPolicyStatus parameter is set
            to CERT_E_UNTRUSTEDROOT. The dwFlags member of the CERT_CHAIN_POLICY_PARA structure pointed to by the pPolicyStatus parameter
            can contain the MICROSOFT_ROOT_CERT_CHAIN_POLICY_CHECK_APPLICATION_ROOT_FLAG flag, which causes this function to also check for
            the Microsoft application root "Microsoft Root Certificate Authority 2011". The dwFlags member of the CERT_CHAIN_POLICY_PARA
            structure pointed to by the pPolicyPara parameter can contain the MICROSOFT_ROOT_CERT_CHAIN_POLICY_ENABLE_TEST_ROOT_FLAG flag,
            which causes this function to also check for the Microsoft test roots.
            </term>
            </item>
            <item>
            <term>CERT_CHAIN_POLICY_EV (LPCSTR) 8</term>
            <term>
            Specifies that extended validation of certificates is performed. Windows Server 2008, Windows Vista, Windows Server 2003 and
            Windows XP: This value is not supported.
            </term>
            </item>
            <item>
            <term>CERT_CHAIN_POLICY_SSL_F12 (LPCSTR) 9</term>
            <term>
            Checks if any certificates in the chain have weak crypto or if third party root certificate compliance and provide an error
            string. The pvExtraPolicyStatus member of the CERT_CHAIN_POLICY_STATUS structure pointed to by the pPolicyStatus parameter must
            point to SSL_F12_EXTRA_CERT_CHAIN_POLICY_STATUS, which is updated with the results of the weak crypto and root program
            compliance checks. Before calling, the cbSize member of the CERT_CHAIN_POLICY_STATUS structure pointed to by the pPolicyStatus
            parameter must be set to a value greater than or equal to sizeof(SSL_F12_EXTRA_CERT_CHAIN_POLICY_STATUS). The dwError member in
            CERT_CHAIN_POLICY_STATUS structure pointed to by the pPolicyStatus parameter will be set to TRUST_E_CERT_SIGNATURE for potential
            weak crypto and set to CERT_E_UNTRUSTEDROOT for Third Party Roots not in compliance with the Microsoft Root Program. Windows 10,
            version 1607, Windows Server 2016, Windows 10, version 1511 with KB3172985, Windows 10 RTM with KB3163912, Windows 8.1 and
            Windows Server 2012 R2 with KB3163912, and Windows 7 with SP1 and Windows Server 2008 R2 SP1 with KB3161029
            </term>
            </item>
            </list>
            </param>
            <param name="pChainContext">A pointer to a CERT_CHAIN_CONTEXT structure that contains a chain to be verified.</param>
            <param name="pPolicyPara">
            <para>
            A pointer to a CERT_CHAIN_POLICY_PARA structure that provides the policy verification criteria for the chain. The <c>dwFlags</c>
            member of that structure can be set to change the default policy checking behavior.
            </para>
            <para>In addition, policy-specific parameters can also be passed in the <c>pvExtraPolicyPara</c> member of the structure.</para>
            </param>
            <param name="pPolicyStatus">
            A pointer to a CERT_CHAIN_POLICY_STATUS structure where status information on the chain is returned. OID-specific extra status
            can be returned in the <c>pvExtraPolicyStatus</c> member of this structure.
            </param>
            <returns>
            <para>
            The return value indicates whether the function was able to check for the policy, it does not indicate whether the policy check
            failed or passed.
            </para>
            <para>
            If the chain can be verified for the specified policy, <c>TRUE</c> is returned and the <c>dwError</c> member of the
            pPolicyStatus is updated. A <c>dwError</c> of 0 (ERROR_SUCCESS or S_OK) indicates the chain satisfies the specified policy.
            </para>
            <para>
            If the chain cannot be validated, the return value is <c>TRUE</c> and you need to verify the pPolicyStatus parameter for the
            actual error.
            </para>
            <para>A value of <c>FALSE</c> indicates that the function wasn't able to check for the policy.</para>
            </returns>
            <remarks>
            <para>
            A <c>dwError</c> member of the CERT_CHAIN_POLICY_STATUS structure pointed to by pPolicyStatus can apply to a single chain
            element, to a simple chain, or to an entire chain context. If <c>dwError</c> applies to the entire chain context, both the
            <c>lChainIndex</c> and the <c>lElementIndex</c> members of the <c>CERT_CHAIN_POLICY_STATUS</c> structure are set to –1. If
            <c>dwError</c> applies to a complete simple chain, <c>lElementIndex</c> is set to –1 and <c>lChainIndex</c> is set to the index
            of the first chain that has an error. If <c>dwError</c> applies to a single certificate element, <c>lChainIndex</c> and
            <c>lElementIndex</c> index the first certificate that has the error.
            </para>
            <para>To get the certificate element use this syntax:</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertVerifyCTLUsage(Vanara.PInvoke.Crypt32.CertEncodingType,Vanara.PInvoke.Crypt32.CtlCertSubject,System.IntPtr,Vanara.PInvoke.Crypt32.CTL_USAGE@,Vanara.PInvoke.Crypt32.CertVerifyCTLFlags,Vanara.PInvoke.Crypt32.CTL_VERIFY_USAGE_PARA@,Vanara.PInvoke.Crypt32.CTL_VERIFY_USAGE_STATUS@)">
            <summary>
            The <c>CertVerifyCTLUsage</c> function verifies that a subject is trusted for a specified usage by finding a signed and
            time-valid certificate trust list (CTL) with the usage identifiers that contain the subject. A certificate's subject can be
            identified by either its certificate context or any unique identifier such as the SHA1 hash of the subject's certificate.
            </summary>
            <param name="dwEncodingType">
            <para>
            Specifies the encoding type used. Currently, only X509_ASN_ENCODING and PKCS_7_ASN_ENCODING are being used; however, additional
            encoding types can be added in the future. For either current encoding type, use
            </para>
            <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING.</para>
            </param>
            <param name="dwSubjectType">
            <para>
            If the dwSubjectType parameter is set to CTL_CERT_SUBJECT_TYPE, pvSubject points to a CERT_CONTEXT structure. The structure's
            <c>SubjectAlgorithm</c> member is examined to determine the representation of the subject's identity. Initially, only SHA1 and
            MD5 hashes are supported as values for <c>SubjectAlgorithm</c>. The appropriate hash property is obtained from the
            <c>CERT_CONTEXT</c> structure.
            </para>
            <para>
            If the dwSubjectType parameter is set to CTL_ANY_SUBJECT_TYPE, pvSubject points to the CTL_ANY_SUBJECT_INFO structure. The
            <c>SubjectAlgorithm</c> member of this structure must match the algorithm type of the CTL, and the <c>SubjectIdentifier</c>
            member must match one of the CTL entries.
            </para>
            <para>If dwSubjectType is set to either preceding value, dwEncodingType is not used.</para>
            </param>
            <param name="pvSubject">Value used in conjunction with the dwSubjectType parameter.</param>
            <param name="pSubjectUsage">A pointer to a CTL_USAGE structure used to specify the intended usage of the subject.</param>
            <param name="dwFlags">
            <para>
            If the CERT_VERIFY_INHIBIT_CTL_UPDATE_FLAG is not set, a CTL whose time is no longer valid in one of the stores specified by
            <c>rghCtlStore</c> in CTL_VERIFY_USAGE_PARA can be replaced. When replaced, the CERT_VERIFY_UPDATED_CTL_FLAG is set in the
            <c>dwFlags</c> member of pVerifyUsageStatus. If this flag is set, an update will not be made, even if a time-valid, updated CTL
            is received for a CTL that is in the store and whose time is no longer valid.
            </para>
            <para>
            If the CERT_VERIFY_TRUSTED_SIGNERS_FLAG is set, only the signer stores specified by <c>rghSignerStore</c> in
            CTL_VERIFY_USAGE_PARA are searched to find the signer. Otherwise, the signer stores provide additional sources to find the
            signer's certificate. For more information, see Remarks.
            </para>
            <para>If CERT_VERIFY_NO_TIME_CHECK_FLAG is set, the CTLs are not checked for time validity. Otherwise, they are.</para>
            <para>
            If CERT_VERIFY_ALLOW_MORE_USAGE_FLAG is set, the CTL can contain usage identifiers in addition to those specified by
            pSubjectUsage. Otherwise, the found CTL will contain no additional usage identifiers.
            </para>
            </param>
            <param name="pVerifyUsagePara">
            A pointer to a CTL_VERIFY_USAGE_PARA structure that specifies the stores to be searched to find the CTL and the stores that
            contain acceptable CTL signers. Setting the <c>ListIdentifier</c> member further limits the search.
            </param>
            <param name="pVerifyUsageStatus">
            A pointer to a CTL_VERIFY_USAGE_STATUS structure. The <c>cbSize</c> member of the structure must to be set to the size, in
            bytes, of the structure, and all other fields must be set to zero before <c>CertVerifyCTLUsage</c> is called. For more
            information, see <c>CTL_VERIFY_USAGE_STATUS</c>.
            </param>
            <returns>
            <para>
            If the subject is trusted for the specified usage, <c>TRUE</c> is returned. Otherwise, <c>FALSE</c> is returned. GetLastError
            can return one of the following error codes.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>CRYPT_E_NO_VERIFY_USAGE_DLL</term>
            <term>No DLL or exported function was found to verify subject usage.</term>
            </item>
            <item>
            <term>CRYPT_E_NO_VERIFY_USAGE_CHECK</term>
            <term>The called function was not able to do a usage check on the subject.</term>
            </item>
            <item>
            <term>CRYPT_E_VERIFY_USAGE_OFFLINE</term>
            <term>The server was offline; therefore, the called function could not complete the usage check.</term>
            </item>
            <item>
            <term>CRYPT_E_NOT_IN_CTL</term>
            <term>The subject was not found in a CTL.</term>
            </item>
            <item>
            <term>CRYPT_E_NO_TRUSTED_SIGNER</term>
            <term>No trusted signer was found to verify the signature of the message or trust list.</term>
            </item>
            </list>
            <para>The <c>dwError</c> member of the CTL_VERIFY_USAGE_PARA pointed to by pVerifyUsageStatus is set to the same error code.</para>
            </returns>
            <remarks>
            <para>
            <c>CertVerifyCTLUsage</c> is a dispatcher to functions that can be installed by using an object identifier (OID). First, it
            tries to find an OID function that matches the first usage object identifier in the CLT_USAGE structure pointed to by
            pSubjectUsage. If this fails, it uses the default <c>CertDllVerifyCTLUsage</c> functions.
            </para>
            <para>The <c>CertDllVerifyCTLUsage</c> function in Cryptnet.dll can be installed by using an OID; it has the following properties:</para>
            <list type="bullet">
            <item>
            <term>
            If CTL stores are specified by <c>rghCtlStore</c> in pVerifyUsagePara, only those stores are searched to find a CTL. Otherwise,
            the Trust system store is searched to find a CTL.
            </term>
            </item>
            <item>
            <term>
            If CERT_VERIFY_TRUSTED_SIGNERS_FLAG is set, only the signer stores specified by <c>rghSignerStore</c> in pVerifyUsagePara are
            searched to find the certificate that corresponds to the signer's issuer and serial number. Otherwise, the CTL message's store,
            the signer stores specified by <c>rghSignerStore</c> in pVerifyUsagePara, the Trust system store, CA system store, ROOT, and
            Software Publisher Certificate (SPC) system stores are searched to find the signer's certificate. In either case, the public key
            in the found certificate is used to verify the signature of the CTL.
            </term>
            </item>
            <item>
            <term>If the CTL has a set <c>NextUpdate</c> member and CERT_VERIFY_NO_TIME_CHECK is not set, it is verified for time validity.</term>
            </item>
            <item>
            <term>
            If the CTL obtained from the store has a time that is not valid, an attempt is made to get a time-valid version. The
            <c>CertDllVerifyCTLUsage</c> function uses the <c>NextUpdateLocation</c> property or the <c>NextUpdateLocation</c> extension of
            the CTL, or it searches the signer's information for a <c>NextUpdateLocation</c> attribute.
            </term>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CertVerifyCTLUsage(Vanara.PInvoke.Crypt32.CertEncodingType,Vanara.PInvoke.Crypt32.CtlCertSubject,System.IntPtr,Vanara.PInvoke.Crypt32.CTL_USAGE@,Vanara.PInvoke.Crypt32.CertVerifyCTLFlags,System.IntPtr,Vanara.PInvoke.Crypt32.CTL_VERIFY_USAGE_STATUS@)">
            <summary>
            The <c>CertVerifyCTLUsage</c> function verifies that a subject is trusted for a specified usage by finding a signed and
            time-valid certificate trust list (CTL) with the usage identifiers that contain the subject. A certificate's subject can be
            identified by either its certificate context or any unique identifier such as the SHA1 hash of the subject's certificate.
            </summary>
            <param name="dwEncodingType">
            <para>
            Specifies the encoding type used. Currently, only X509_ASN_ENCODING and PKCS_7_ASN_ENCODING are being used; however, additional
            encoding types can be added in the future. For either current encoding type, use
            </para>
            <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING.</para>
            </param>
            <param name="dwSubjectType">
            <para>
            If the dwSubjectType parameter is set to CTL_CERT_SUBJECT_TYPE, pvSubject points to a CERT_CONTEXT structure. The structure's
            <c>SubjectAlgorithm</c> member is examined to determine the representation of the subject's identity. Initially, only SHA1 and
            MD5 hashes are supported as values for <c>SubjectAlgorithm</c>. The appropriate hash property is obtained from the
            <c>CERT_CONTEXT</c> structure.
            </para>
            <para>
            If the dwSubjectType parameter is set to CTL_ANY_SUBJECT_TYPE, pvSubject points to the CTL_ANY_SUBJECT_INFO structure. The
            <c>SubjectAlgorithm</c> member of this structure must match the algorithm type of the CTL, and the <c>SubjectIdentifier</c>
            member must match one of the CTL entries.
            </para>
            <para>If dwSubjectType is set to either preceding value, dwEncodingType is not used.</para>
            </param>
            <param name="pvSubject">Value used in conjunction with the dwSubjectType parameter.</param>
            <param name="pSubjectUsage">A pointer to a CTL_USAGE structure used to specify the intended usage of the subject.</param>
            <param name="dwFlags">
            <para>
            If the CERT_VERIFY_INHIBIT_CTL_UPDATE_FLAG is not set, a CTL whose time is no longer valid in one of the stores specified by
            <c>rghCtlStore</c> in CTL_VERIFY_USAGE_PARA can be replaced. When replaced, the CERT_VERIFY_UPDATED_CTL_FLAG is set in the
            <c>dwFlags</c> member of pVerifyUsageStatus. If this flag is set, an update will not be made, even if a time-valid, updated CTL
            is received for a CTL that is in the store and whose time is no longer valid.
            </para>
            <para>
            If the CERT_VERIFY_TRUSTED_SIGNERS_FLAG is set, only the signer stores specified by <c>rghSignerStore</c> in
            CTL_VERIFY_USAGE_PARA are searched to find the signer. Otherwise, the signer stores provide additional sources to find the
            signer's certificate. For more information, see Remarks.
            </para>
            <para>If CERT_VERIFY_NO_TIME_CHECK_FLAG is set, the CTLs are not checked for time validity. Otherwise, they are.</para>
            <para>
            If CERT_VERIFY_ALLOW_MORE_USAGE_FLAG is set, the CTL can contain usage identifiers in addition to those specified by
            pSubjectUsage. Otherwise, the found CTL will contain no additional usage identifiers.
            </para>
            </param>
            <param name="pVerifyUsagePara">
            A pointer to a CTL_VERIFY_USAGE_PARA structure that specifies the stores to be searched to find the CTL and the stores that
            contain acceptable CTL signers. Setting the <c>ListIdentifier</c> member further limits the search.
            </param>
            <param name="pVerifyUsageStatus">
            A pointer to a CTL_VERIFY_USAGE_STATUS structure. The <c>cbSize</c> member of the structure must to be set to the size, in
            bytes, of the structure, and all other fields must be set to zero before <c>CertVerifyCTLUsage</c> is called. For more
            information, see <c>CTL_VERIFY_USAGE_STATUS</c>.
            </param>
            <returns>
            <para>
            If the subject is trusted for the specified usage, <c>TRUE</c> is returned. Otherwise, <c>FALSE</c> is returned. GetLastError
            can return one of the following error codes.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>CRYPT_E_NO_VERIFY_USAGE_DLL</term>
            <term>No DLL or exported function was found to verify subject usage.</term>
            </item>
            <item>
            <term>CRYPT_E_NO_VERIFY_USAGE_CHECK</term>
            <term>The called function was not able to do a usage check on the subject.</term>
            </item>
            <item>
            <term>CRYPT_E_VERIFY_USAGE_OFFLINE</term>
            <term>The server was offline; therefore, the called function could not complete the usage check.</term>
            </item>
            <item>
            <term>CRYPT_E_NOT_IN_CTL</term>
            <term>The subject was not found in a CTL.</term>
            </item>
            <item>
            <term>CRYPT_E_NO_TRUSTED_SIGNER</term>
            <term>No trusted signer was found to verify the signature of the message or trust list.</term>
            </item>
            </list>
            <para>The <c>dwError</c> member of the CTL_VERIFY_USAGE_PARA pointed to by pVerifyUsageStatus is set to the same error code.</para>
            </returns>
            <remarks>
            <para>
            <c>CertVerifyCTLUsage</c> is a dispatcher to functions that can be installed by using an object identifier (OID). First, it
            tries to find an OID function that matches the first usage object identifier in the CLT_USAGE structure pointed to by
            pSubjectUsage. If this fails, it uses the default <c>CertDllVerifyCTLUsage</c> functions.
            </para>
            <para>The <c>CertDllVerifyCTLUsage</c> function in Cryptnet.dll can be installed by using an OID; it has the following properties:</para>
            <list type="bullet">
            <item>
            <term>
            If CTL stores are specified by <c>rghCtlStore</c> in pVerifyUsagePara, only those stores are searched to find a CTL. Otherwise,
            the Trust system store is searched to find a CTL.
            </term>
            </item>
            <item>
            <term>
            If CERT_VERIFY_TRUSTED_SIGNERS_FLAG is set, only the signer stores specified by <c>rghSignerStore</c> in pVerifyUsagePara are
            searched to find the certificate that corresponds to the signer's issuer and serial number. Otherwise, the CTL message's store,
            the signer stores specified by <c>rghSignerStore</c> in pVerifyUsagePara, the Trust system store, CA system store, ROOT, and
            Software Publisher Certificate (SPC) system stores are searched to find the signer's certificate. In either case, the public key
            in the found certificate is used to verify the signature of the CTL.
            </term>
            </item>
            <item>
            <term>If the CTL has a set <c>NextUpdate</c> member and CERT_VERIFY_NO_TIME_CHECK is not set, it is verified for time validity.</term>
            </item>
            <item>
            <term>
            If the CTL obtained from the store has a time that is not valid, an attempt is made to get a time-valid version. The
            <c>CertDllVerifyCTLUsage</c> function uses the <c>NextUpdateLocation</c> property or the <c>NextUpdateLocation</c> extension of
            the CTL, or it searches the signer's information for a <c>NextUpdateLocation</c> attribute.
            </term>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptMsgEncodeAndSignCTL(Vanara.PInvoke.Crypt32.CertEncodingType,Vanara.PInvoke.Crypt32.CTL_INFO@,Vanara.PInvoke.Crypt32.CMSG_SIGNED_ENCODE_INFO@,Vanara.PInvoke.Crypt32.CryptMsgEncodeFlags,System.IntPtr,System.UInt32@)">
            <summary>
            <para>The <c>CryptMsgEncodeAndSignCTL</c> function encodes a CTL and creates a signed message containing the encoded CTL.</para>
            <para>This function first encodes the CTL pointed to by pCtlInfo and then calls CryptMsgSignCTL to sign the encoded message.</para>
            </summary>
            <param name="dwMsgEncodingType">
            <para>
            Specifies the encoding type used. It is always acceptable to specify both the certificate and message encoding types by
            combining them with a bitwise- <c>OR</c> operation as shown in the following example:
            </para>
            <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING</para>
            <para>Currently defined encoding types are:</para>
            <list type="bullet">
            <item>
            <term>X509_ASN_ENCODING</term>
            </item>
            <item>
            <term>PKCS_7_ASN_ENCODING</term>
            </item>
            </list>
            </param>
            <param name="pCtlInfo">A pointer to the CTL_INFO structure containing the CTL to be encoded and signed.</param>
            <param name="pSignInfo">
            <para>A pointer to a CMSG_SIGNED_ENCODE_INFO structure that contains an array of a CMSG_SIGNER_ENCODE_INFO structures.</para>
            <para>
            The message can be encoded without signers if the <c>cbSize</c> member of the structure is set to the size of the structure and
            all of the other members are set to zero.
            </para>
            </param>
            <param name="dwFlags">
            <para>
            CMSG_ENCODE_SORTED_CTL_FLAG is set if the CTL entries are to be sorted before encoding. This flag is set if the
            CertFindSubjectInSortedCTL or CertEnumSubjectInSortedCTL functions will be called.
            </para>
            <para>
            CMSG_ENCODE_HASHED_SUBJECT_IDENTIFIER_FLAG is set if CMSG_ENCODE_SORTED_CTL_FLAG is set, and the identifier for the
            TrustedSubjects is a hash, such as MD5 or SHA1.
            </para>
            <para>
            If CMS_PKCS7 is defined, dwFlags can be set to CMSG_CMS_ENCAPSULATED_CTL_FLAG to encode a CMS compatible V3 SignedData message.
            </para>
            </param>
            <param name="pbEncoded">
            <para>A pointer to a buffer that receives the encoded, signed message created.</para>
            <para>
            This parameter can be <c>NULL</c> to set the size of this information for memory allocation purposes. For more information, see
            Retrieving Data of Unknown Length.
            </para>
            </param>
            <param name="pcbEncoded">
            A pointer to a <c>DWORD</c> that specifies the size, in bytes, of the pbEncoded buffer. When the function returns, the
            <c>DWORD</c> contains the number of bytes stored or to be stored in the buffer.
            </param>
            <returns>
            <para>If the function succeeds, the return value is nonzero ( <c>TRUE</c>).</para>
            <para>
            If the function fails, the return value is zero ( <c>FALSE</c>). To get extended error information, call GetLastError. Errors
            can be propagated from calls to CryptMsgOpenToEncode and CryptMsgUpdate.
            </para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptMsgGetAndVerifySigner(Vanara.PInvoke.Crypt32.HCRYPTMSG,System.UInt32,Vanara.PInvoke.Crypt32.HCERTSTORE[],Vanara.PInvoke.Crypt32.CryptMsgSignerFlags,Vanara.PInvoke.Crypt32.SafePCCERT_CONTEXT@,System.UInt32@)">
            <summary>The <c>CryptMsgGetAndVerifySigner</c> function verifies a cryptographic message's signature.</summary>
            <param name="hCryptMsg">Handle of a cryptographic message.</param>
            <param name="cSignerStore">Number of stores in the rghSignerStore array.</param>
            <param name="rghSignerStore">Array of certificate store handles that can be searched for a signer's certificate.</param>
            <param name="dwFlags">
            <para>Indicates particular use of the function.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CMSG_TRUSTED_SIGNER_FLAG</term>
            <term>
            The stores in rghSignerStore are assumed trusted and they are the only stores searched to find the certificate corresponding to
            the signer's issuer and serial number. Otherwise, signer stores can be provided to supplement the message's store of
            certificates. If a signer certificate is found, its public key is used to verify the message signature.
            </term>
            </item>
            <item>
            <term>CMSG_SIGNER_ONLY_FLAG</term>
            <term>Return the signer without doing the signature verification.</term>
            </item>
            <item>
            <term>CMSG_USE_SIGNER_INDEX_FLAG</term>
            <term>
            Only the signer specified by *pdwSignerIndex is returned. Otherwise, iterate through all the signers until a signature is
            verified or there are no more signers.
            </term>
            </item>
            </list>
            </param>
            <param name="ppSigner">
            If the signature is verified, ppSigner is updated to point to the signer's certificate context. When you have finished using the
            certificate, free the context by calling the CertFreeCertificateContext function. This parameter can be <c>NULL</c> if the
            application has no need for the signer's certificate.
            </param>
            <param name="pdwSignerIndex">
            If the signature is verified, pdwSigner is updated to point to the index of the signer in the array of signers. This parameter
            can be <c>NULL</c> if the application has no need for the index of the signer.
            </param>
            <returns>
            <para>If the function succeeds, the return value is nonzero (TRUE).</para>
            <para>If the function fails, the return value is zero (FALSE). For extended error information, call GetLastError.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.CryptMsgSignCTL(Vanara.PInvoke.Crypt32.CertEncodingType,System.IntPtr,System.UInt32,Vanara.PInvoke.Crypt32.CMSG_SIGNED_ENCODE_INFO@,Vanara.PInvoke.Crypt32.CryptMsgSignFlags,System.IntPtr,System.UInt32@)">
            <summary>The <c>CryptMsgSignCTL</c> function creates a signed message containing an encoded CTL.</summary>
            <param name="dwMsgEncodingType">
            <para>
            Specifies the encoding type used. It is always acceptable to specify both the certificate and message encoding types by
            combining them with a bitwise- <c>OR</c> operation as shown in the following example:
            </para>
            <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING</para>
            <para>Currently defined encoding types are:</para>
            <list type="bullet">
            <item>
            <term>X509_ASN_ENCODING</term>
            </item>
            <item>
            <term>PKCS_7_ASN_ENCODING</term>
            </item>
            </list>
            </param>
            <param name="pbCtlContent">
            The encoded CTL_INFO that can be a member of a CTL_CONTEXT structure or can be created using the CryptEncodeObject function.
            </param>
            <param name="cbCtlContent">The size, in bytes, of the content pointed to by pbCtlContent.</param>
            <param name="pSignInfo">
            <para>A pointer to a CMSG_SIGNED_ENCODE_INFO structure containing an array of a CMSG_SIGNER_ENCODE_INFO structures.</para>
            <para>
            The message can be encoded without signers if the <c>cbSize</c> member of the structure is set to the size of the structure and
            all of the other members are set to zero.
            </para>
            </param>
            <param name="dwFlags">
            If CMS_PKCS7 is defined, can be set to CMSG_CMS_ENCAPSULATED_CTL_FLAG to encode a CMS compatible V3 SignedData message.
            </param>
            <param name="pbEncoded">
            <para>A pointer to a buffer to receives the encoded message.</para>
            <para>
            This parameter can be <c>NULL</c> to get the size of this information for memory allocation purposes. For more information, see
            Retrieving Data of Unknown Length.
            </para>
            </param>
            <param name="pcbEncoded">
            A pointer to a <c>DWORD</c> specifying the size, in bytes, of the pbEncoded buffer. When the function returns, the <c>DWORD</c>
            contains the number of bytes stored or to be stored in the buffer.
            </param>
            <returns>
            <para>If the function succeeds, the return value is nonzero ( <c>TRUE</c>).</para>
            <para>
            If the function fails, the return value is zero ( <c>FALSE</c>). For extended error information, call GetLastError. This
            function can return errors propagated from calls to CryptMsgOpenToEncode and CryptMsgUpdate.
            </para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CERT_CHAIN_ENGINE_CONFIG">
            <summary>
            The <c>CERT_CHAIN_ENGINE_CONFIG</c> structure sets parameters for building a non-default certificate chain engine. The engine
            used determines the ways that certificate chains are built.
            </summary>
            <remarks>
            <para>
            The chain-building engine uses four certificate stores in building chains. These are hRoot, hWorld, hTrust, and hOther. These
            stores' handles are established by using information in this structure when a chain engine is created.
            </para>
            <para>
            hRoot is the store handle from <c>hRestrictedRoot</c> or, if <c>hRestrictedRoot</c> is <c>NULL</c>, the handle for System Store "Root."
            </para>
            <para>
            hWorld is a collection certificate store including sibling stores hRoot, "CA," "My," "Trust," and any additional stores whose
            handles are in the array pointed to by <c>rghAdditionalStore</c>.
            </para>
            <para>hTrust is the store handle from <c>hRestrictedTrust</c> or, if <c>hRestrictedTrust</c> is <c>NULL</c>, hWorld.</para>
            <para>
            hOther is <c>hRestrictedOther</c> plus hRoot or, if <c>hRestrictedTrust</c> is non- <c>NULL</c>, the hWorld collection store
            plus the store handle from <c>hRestrictedTrust</c>.
            </para>
            <para>
            Exclusive trust mode allows applications to specify trust anchors and peer-trusted certificates for certificate chain
            validation. In the exclusive trust mode, the root store and the trusted people store on the system are ignored, and the anchors
            and certificates pointed to by the <c>hExclusiveRoot</c> and <c>hExclusiveTrustedPeople</c> members are used instead.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_CHAIN_ENGINE_CONFIG.cbSize">
            <summary>Size of this structure in bytes.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_CHAIN_ENGINE_CONFIG.hRestrictedRoot">
            <summary>
            This configuration parameter can be used to restrict the root store. If used, it can be the handle of any HCERTSTORE
            containing only a proper subset of the certificates in the root store.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_CHAIN_ENGINE_CONFIG.hRestrictedTrust">
            <summary>Store handle. If used, restricts the stores searched to find CTLs.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_CHAIN_ENGINE_CONFIG.hRestrictedOther">
            <summary>Store handle. If used, restricts the stores searched for certificates and CRLs.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_CHAIN_ENGINE_CONFIG.cAdditionalStore">
            <summary>Count of additional stores to be searched for certificates and CRLs needed to build chains.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_CHAIN_ENGINE_CONFIG.rghAdditionalStore">
            <summary>A pointer to an array of store handles for any additional stores to be searched in building chains.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_CHAIN_ENGINE_CONFIG.dwFlags">
            <summary>
            <para>The following flags are defined.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_CHAIN_CACHE_END_CERT 0x00000001</term>
            <term>
            Information in the end certificate is cached. By default, information in all certificates except the end certificate is
            cached as a chain is built. Setting this flag extends the caching to the end certificate.
            </term>
            </item>
            <item>
            <term>CERT_CHAIN_CACHE_ONLY_URL_RETRIEVAL 0x00000004</term>
            <term>Use only cached URLs in building a certificate chain. The Internet and intranet are not searched for URL-based objects.</term>
            </item>
            <item>
            <term>CERT_CHAIN_USE_LOCAL_MACHINE_STORE 0x00000008</term>
            <term>Build the chain using the LocalMachine registry location as opposed to the CurrentUser location.</term>
            </item>
            <item>
            <term>CERT_CHAIN_ENABLE_CACHE_AUTO_UPDATE 0x00000010</term>
            <term>Enable automatic updating of the cache as a chain is being built.</term>
            </item>
            <item>
            <term>CERT_CHAIN_ENABLE_SHARE_STORE 0x00000020</term>
            <term>Allow certificate stores used to build the chain to be shared.</term>
            </item>
            <item>
            <term>CERT_CHAIN_DISABLE_AIA 0x00002000</term>
            <term>Turn off Authority Information Access (AIA) retrievals explicitly.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_CHAIN_ENGINE_CONFIG.dwUrlRetrievalTimeout">
            <summary>
            Number of milliseconds before a time-out for network based–URL object retrievals. Can be set to zero to use the default limit.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_CHAIN_ENGINE_CONFIG.MaximumCachedCertificates">
            <summary>
            Limit on the number of certificates that can be cached as a chain is built. Can be set to 0 to use the default limit.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_CHAIN_ENGINE_CONFIG.CycleDetectionModulus">
            <summary>
            <para>
            Number of certificates added to the chain before a check is made to determine whether there is a cycle of certificates in
            the chain. A cycle may be defined as having the same certificate in two different places in a chain.
            </para>
            <para>
            The lower the number, the more frequently checks will be made. Extra checking for cycles of certificates will slow the
            process considerably. This parameter can be set to zero to use the default limit.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_CHAIN_ENGINE_CONFIG.hExclusiveRoot">
            <summary>
            <para>
            Handle to a certificate store that contains exclusive trust anchors. If either the <c>hExclusiveRoot</c> or
            <c>hExclusiveTrustedPeople</c> member points to a valid store, exclusive trust mode is used for the chain building.
            </para>
            <para><c>Windows 7 and Windows Server 2008 R2:</c> Support for this member begins.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_CHAIN_ENGINE_CONFIG.hExclusiveTrustedPeople">
            <summary>
            <para>
            Handle to a certificate store that contains application-specific peer trusted certificates. If either the
            <c>hExclusiveRoot</c> or <c>hExclusiveTrustedPeople</c> member points to a valid store, exclusive trust mode is used for the
            chain building.
            </para>
            <para><c>Windows 7 and Windows Server 2008 R2:</c> Support for this member begins.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_CHAIN_ENGINE_CONFIG.dwExclusiveFlags">
            <summary>
            <para>
            The following flag can be set. The flag applies only if the <c>hExclusiveRoot</c> or <c>hExclusiveTrustedPeople</c> or both
            are not <c>NULL</c>.
            </para>
            <para><c>Windows 8 and Windows Server 2012:</c> Support for this member begins.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_CHAIN_EXCLUSIVE_ENABLE_CA_FLAG 0x00000001</term>
            <term>
            Indicates that a non-self-signed intermediate CA certificate in the hExclusiveRoot store should be treated as a trust anchor
            during certificate validation. If a certificate chains up to this CA, chain building is terminated and the certificate is
            considered trusted. No signature verification or revocation checking is performed on the CA certificate. By default, if this
            flag is not set, only self-signed certificates in the hExclusiveRoot store are treated as trust anchors. See also the
            CERT_TRUST_IS_CA_TRUSTED value in the CERT_TRUST_STATUS structure.
            </term>
            </item>
            </list>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CERT_CHAIN_PARA">
            <summary>
            The <c>CERT_CHAIN_PARA</c> structure establishes the searching and matching criteria to be used in building a certificate chain.
            </summary>
            <remarks>
            <para>The following remarks apply when checking for strong signatures.</para>
            <list type="bullet">
            <item>
            <term>
            Set the <c>pStrongSignPara</c> member to check for strong signatures when using the CertGetCertificateChain or
            CertSelectCertificateChains function.
            </term>
            </item>
            <item>
            <term>
            If a certificate without a strong signature is found in the chain, the <c>CERT_TRUST_HAS_WEAK_SIGNATURE</c> and
            <c>CERT_TRUST_IS_NOT_SIGNATURE_VALID</c> errors are set in the <c>dwErrorStatus</c> field of the CERT_TRUST_STATUS structure.
            The ppChainContext parameter of the CertGetCertificateChain function and the pprgpSelection parameter of the
            CertSelectCertificateChains function point to a CERT_CHAIN_CONTEXT structure which, in turn, points to the
            <c>CERT_TRUST_STATUS</c> structure.
            </term>
            </item>
            <item>
            <term>
            If the chain is strong signed, the public key in the end certificate is checked to determine whether it satisfies the minimum
            public key length requirements for a strong signature. If the condition is not satisfied, the
            <c>CERT_TRUST_HAS_WEAK_SIGNATURE</c> and <c>CERT_TRUST_IS_NOT_SIGNATURE_VALID</c> errors are set in the <c>dwErrorStatus</c>
            field of the CERT_TRUST_STATUS structure. Set the <c>CERT_CHAIN_STRONG_SIGN_DISABLE_END_CHECK_FLAG</c> value in the
            <c>dwStrongSignFlags</c> member to disable this check.
            </term>
            </item>
            <item>
            <term>
            If the <c>CERT_STRONG_SIGN_ENABLE_CRL_CHECK</c> or <c>CERT_STRONG_SIGN_ENABLE_OCSP_CHECK</c> flags are set in the
            CERT_STRONG_SIGN_SERIALIZED_INFO structure referenced by the CERT_STRONG_SIGN_PARA structure pointed to by the
            <c>pStrongSignPara</c> member, and a CRL or OCSP response is found without a strong signature, the CRL or OCSP response will be
            treated as being offline. That is, the <c>CERT_TRUST_IS_OFFLINE_REVOCATION</c> and <c>CERT_TRUST_REVOCATION_STATUS_UNKNOWN</c>
            errors are set in the <c>dwErrorStatus</c> field of the CERT_TRUST_STATUS structure. Also, the <c>dwRevocationResult</c> member
            of the CERT_REVOCATION_INFO structure is set to <c>NTE_BAD_ALGID</c>.
            </term>
            </item>
            </list>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_CHAIN_PARA.cbSize">
            <summary>The size, in bytes, of this structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_CHAIN_PARA.RequestedUsage">
            <summary>
            Structure indicating the kind of matching necessary to find issuer certificates for building a certificate chain. The
            structure pointed to indicates whether AND or OR logic is to be used in the matching process. The structure also includes an
            array of OIDs to be matched.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_CHAIN_PARA.RequestedIssuancePolicy">
            <summary>
            <para>
            Optional structure that indicates the kind of issuance policy constraint matching that applies when building a certificate
            chain. The structure pointed to indicates whether AND or OR logic is to be used in the matching process. The structure also
            includes an array of OIDs to be matched.
            </para>
            <para>
            <c>Note</c> This member can be used only if <c>CERT_CHAIN_PARA_HAS_EXTRA_FIELDS</c> is defined by using the <c>#define</c>
            directive before including Wincrypt.h. If this value is defined, the application must zero all unused fields.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_CHAIN_PARA.dwUrlRetrievalTimeout">
            <summary>
            <para>Optional time, in milliseconds, before revocation checking times out. This member is optional.</para>
            <para>
            <c>Note</c> This member can be used only if <c>CERT_CHAIN_PARA_HAS_EXTRA_FIELDS</c> is defined by using the <c>#define</c>
            directive before including Wincrypt.h. If this value is defined, the application must zero all unused fields.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_CHAIN_PARA.fCheckRevocationFreshnessTime">
            <summary>
            <para>
            Optional member. When this flag is <c>TRUE</c>, an attempt is made to retrieve a new CRL if this update is greater than or
            equal to the current system time minus the <c>dwRevocationFreshnessTime</c> value. If this flag is not set, the CRL's next
            update time is used.
            </para>
            <para>
            <c>Note</c> This member can be used only if <c>CERT_CHAIN_PARA_HAS_EXTRA_FIELDS</c> is defined by using the <c>#define</c>
            directive before including Wincrypt.h. If this value is defined, the application must zero all unused fields.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_CHAIN_PARA.dwRevocationFreshnessTime">
            <summary>
            <para>The current time, in seconds, minus the CRL's update time of all elements checked.</para>
            <para>
            <c>Note</c> This member can be used only if <c>CERT_CHAIN_PARA_HAS_EXTRA_FIELDS</c> is defined by using the <c>#define</c>
            directive before including Wincrypt.h. If this value is defined, the application must zero all unused fields.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_CHAIN_PARA.pftCacheResync">
            <summary>
            <para>
            Optional member. When set to a non- <c>NULL</c> value, information cached before the time specified is considered to be not
            valid and cache resynchronization is performed.
            </para>
            <para><c>Windows Vista:</c> Support for this member begins.</para>
            <para>
            <c>Note</c> This member can be used only if <c>CERT_CHAIN_PARA_HAS_EXTRA_FIELDS</c> is defined by using the <c>#define</c>
            directive before including Wincrypt.h. If this value is defined, the application must zero all unused fields.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_CHAIN_PARA.pStrongSignPara">
            <summary>
            <para>Optional. Specify a pointer to a CERT_STRONG_SIGN_PARA structure to enable strong signature checking.</para>
            <para><c>Windows 8 and Windows Server 2012:</c> Support for this member begins.</para>
            <para>
            <c>Note</c> This member can be used only if <c>CERT_CHAIN_PARA_HAS_EXTRA_FIELDS</c> is defined by using the <c>#define</c>
            directive before including Wincrypt.h. If this value is defined, the application must zero all unused fields.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_CHAIN_PARA.dwStrongSignFlags">
            <summary>
            <para>Optional flags that modify chain retrieval behavior. This can be zero or the following value.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_CHAIN_STRONG_SIGN_DISABLE_END_CHECK_FLAG 0x00000001</term>
            <term>
            If the chain is strong signed, the public key in the end certificate will be checked to verify whether it satisfies the
            minimum public key length requirements for a strong signature. You can specify CERT_CHAIN_STRONG_SIGN_DISABLE_END_CHECK_FLAG
            to disable default checking.
            </term>
            </item>
            </list>
            <para><c>Windows 8 and Windows Server 2012:</c> Support for this property begins.</para>
            <para>
            <c>Note</c> This member can be used only if <c>CERT_CHAIN_PARA_HAS_EXTRA_FIELDS</c> is defined by using the <c>#define</c>
            directive before including Wincrypt.h. If this value is defined, the application must zero all unused fields.
            </para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CERT_CHAIN_POLICY_PARA">
            <summary>
            The <c>CERT_CHAIN_POLICY_PARA</c> structure contains information used in CertVerifyCertificateChainPolicy to establish policy
            criteria for the verification of certificate chains.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_CHAIN_POLICY_PARA.cbSize">
            <summary>The size, in bytes, of this structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_CHAIN_POLICY_PARA.dwFlags">
            <summary>
            <para>
            A set of flags that indicate conditions that could potentially be not valid and that are to be ignored in building
            certificate chains.
            </para>
            <para>The pszPolicyOID parameter of the CertVerifyCertificateChainPolicy function can contain one of the following values:</para>
            <list type="bullet">
            <item>
            <term><c>CERT_CHAIN_POLICY_BASE</c></term>
            </item>
            <item>
            <term><c>CERT_CHAIN_POLICY_AUTHENTICODE</c></term>
            </item>
            <item>
            <term><c>CERT_CHAIN_POLICY_AUTHENTICODE_TS</c></term>
            </item>
            <item>
            <term><c>CERT_CHAIN_POLICY_SSL</c></term>
            </item>
            <item>
            <term><c>CERT_CHAIN_POLICY_NT_AUTH</c></term>
            </item>
            </list>
            <para>If the</para>
            <para>pszPolicyOID</para>
            <para>parameter of the</para>
            <para>CertVerifyCertificateChainPolicy</para>
            <para>
            function contains one of the preceding values, then this member can be zero or a combination of one or more of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_CHAIN_POLICY_IGNORE_NOT_TIME_VALID_FLAG</term>
            <term>Ignore not time valid errors.</term>
            </item>
            <item>
            <term>CERT_CHAIN_POLICY_IGNORE_CTL_NOT_TIME_VALID_FLAG</term>
            <term>Ignore certificate trust list (CTL) not time valid errors.</term>
            </item>
            <item>
            <term>CERT_CHAIN_POLICY_IGNORE_NOT_TIME_NESTED_FLAG</term>
            <term>Ignore time nesting errors.</term>
            </item>
            <item>
            <term>CERT_CHAIN_POLICY_IGNORE_ALL_NOT_TIME_VALID_FLAGS</term>
            <term>Ignore all time validity errors.</term>
            </item>
            <item>
            <term>CERT_CHAIN_POLICY_IGNORE_INVALID_BASIC_CONSTRAINTS_FLAG</term>
            <term>Ignore basic constraint errors.</term>
            </item>
            <item>
            <term>CERT_CHAIN_POLICY_ALLOW_UNKNOWN_CA_FLAG</term>
            <term>Allow untrusted roots.</term>
            </item>
            <item>
            <term>CERT_CHAIN_POLICY_IGNORE_WRONG_USAGE_FLAG</term>
            <term>Ignore invalid usage errors.</term>
            </item>
            <item>
            <term>CERT_CHAIN_POLICY_IGNORE_INVALID_NAME_FLAG</term>
            <term>Ignore invalid name errors.</term>
            </item>
            <item>
            <term>CERT_CHAIN_POLICY_IGNORE_INVALID_POLICY_FLAG</term>
            <term>Ignore invalid policy errors.</term>
            </item>
            <item>
            <term>CERT_CHAIN_POLICY_IGNORE_END_REV_UNKNOWN_FLAG</term>
            <term>Ignores errors in obtaining valid revocation information.</term>
            </item>
            <item>
            <term>CERT_CHAIN_POLICY_IGNORE_CTL_SIGNER_REV_UNKNOWN_FLAG</term>
            <term>Ignores errors in obtaining valid CTL revocation information.</term>
            </item>
            <item>
            <term>CERT_CHAIN_POLICY_IGNORE_CA_REV_UNKNOWN_FLAG</term>
            <term>Ignores errors in obtaining valid certification authority (CA) revocation information.</term>
            </item>
            <item>
            <term>CERT_CHAIN_POLICY_IGNORE_ROOT_REV_UNKNOWN_FLAG</term>
            <term>Ignores errors in obtaining valid root revocation information.</term>
            </item>
            <item>
            <term>CERT_CHAIN_POLICY_IGNORE_ALL_REV_UNKNOWN_FLAGS</term>
            <term>Ignores errors in obtaining valid revocation information.</term>
            </item>
            <item>
            <term>CERT_CHAIN_POLICY_ALLOW_TESTROOT_FLAG</term>
            <term>Allow untrusted test roots.</term>
            </item>
            <item>
            <term>CERT_CHAIN_POLICY_TRUST_TESTROOT_FLAG</term>
            <term>Always trust test roots.</term>
            </item>
            <item>
            <term>CERT_CHAIN_POLICY_IGNORE_NOT_SUPPORTED_CRITICAL_EXT_FLAG</term>
            <term>Ignore critical extension not supported errors.</term>
            </item>
            <item>
            <term>CERT_CHAIN_POLICY_IGNORE_PEER_TRUST_FLAG</term>
            <term>Ignore peer trusts.</term>
            </item>
            </list>
            <para>
            If the pszPolicyOID parameter of the CertVerifyCertificateChainPolicy function contains
            <c>CERT_CHAIN_POLICY_BASIC_CONSTRAINTS</c>, this member can be zero or a combination of one or more of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_CHAIN_POLICY_IGNORE_PEER_TRUST_FLAG</term>
            <term>Ignore peer trusts.</term>
            </item>
            <item>
            <term>BASIC_CONSTRAINTS_CERT_CHAIN_POLICY_CA_FLAG</term>
            <term>Checks if the first certificate element is a CA.</term>
            </item>
            <item>
            <term>BASIC_CONSTRAINTS_CERT_CHAIN_POLICY_END_ENTITY_FLAG</term>
            <term>Checks if the first certificate element is an end entity.</term>
            </item>
            </list>
            <para>
            If the pszPolicyOID parameter of the CertVerifyCertificateChainPolicy function contains
            <c>CERT_CHAIN_POLICY_MICROSOFT_ROOT</c>, this member can be zero or the following value.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>MICROSOFT_ROOT_CERT_CHAIN_POLICY_ENABLE_TEST_ROOT_FLAG</term>
            <term>Also check for the Microsoft test roots in addition to the Microsoft public root.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_CHAIN_POLICY_PARA.pvExtraPolicyPara">
            <summary>The address of a pszPolicyOID-specific structure that provides additional validity policy conditions.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CERT_CHAIN_POLICY_STATUS">
            <summary>
            The <c>CERT_CHAIN_POLICY_STATUS</c> structure holds certificate chain status information returned by the
            CertVerifyCertificateChainPolicy function when the certificate chains are validated.
            </summary>
            <remarks>
            If both <c>lChainIndex</c> and <c>lElementIndex</c> are set to –1, the error or condition that is not valid applies to the whole
            chain context. If only <c>lElementIndex</c> is set to –1, the error or condition that is not valid applies to the chain indexed
            by <c>lChainIndex</c>. Otherwise, the error or condition that is not valid applies to the certificate element at
            pChainContext-&gt;rgpChain[ <c>lChainIndex</c>]-&gt;rgpElement[ <c>lElementIndex</c>].
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_CHAIN_POLICY_STATUS.cbSize">
            <summary>The size, in bytes, of this structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_CHAIN_POLICY_STATUS.dwError">
            <summary>
            <para>
            A value that indicates that an error or invalid condition was encountered during the validation process. The values of this
            member are specific to the policy type as specified by the value of the pszPolicyOID parameter of the
            CertVerifyCertificateChainPolicy function.
            </para>
            <para>Base Policy errors ( <c>CERT_CHAIN_POLICY_BASE</c>)</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>TRUST_E_CERT_SIGNATURE 0x80096004L</term>
            <term>The signature of the certificate cannot be verified.</term>
            </item>
            <item>
            <term>CRYPT_E_REVOKED 0x80092010L</term>
            <term>The certificate or signature has been revoked.</term>
            </item>
            <item>
            <term>CERT_E_UNTRUSTEDROOT 0x800B0109L</term>
            <term>A certification chain processed correctly but terminated in a root certificate that is not trusted by the trust provider.</term>
            </item>
            <item>
            <term>CERT_E_UNTRUSTEDTESTROOT 0x800B010DL</term>
            <term>The root certificate is a testing certificate, and policy settings disallow test certificates.</term>
            </item>
            <item>
            <term>CERT_E_CHAINING 0x800B010AL</term>
            <term>A chain of certificates was not correctly created.</term>
            </item>
            <item>
            <term>CERT_E_WRONG_USAGE 0x800B0110L</term>
            <term>The certificate is not valid for the requested usage.</term>
            </item>
            <item>
            <term>CERT_E_EXPIRED 0x800B0101L</term>
            <term>A required certificate is not within its validity period.</term>
            </item>
            <item>
            <term>CERT_E_INVALID_NAME 0x800B0114L</term>
            <term>The certificate has an invalid name. Either the name is not included in the permitted list, or it is explicitly excluded.</term>
            </item>
            <item>
            <term>CERT_E_INVALID_POLICY 0x800B0113L</term>
            <term>The certificate has an invalid policy.</term>
            </item>
            <item>
            <term>TRUST_E_BASIC_CONSTRAINTS 0x80096019L</term>
            <term>The basic constraints of the certificate are not valid, or they are missing.</term>
            </item>
            <item>
            <term>CERT_E_CRITICAL 0x800B0105L</term>
            <term>The certificate is being used for a purpose other than the purpose specified by its CA.</term>
            </item>
            <item>
            <term>CERT_E_VALIDITYPERIODNESTING 0x800B0102L</term>
            <term>The validity periods of the certification chain do not nest correctly.</term>
            </item>
            <item>
            <term>CRYPT_E_NO_REVOCATION_CHECK 0x80092012L</term>
            <term>The revocation function was unable to check revocation for the certificate.</term>
            </item>
            <item>
            <term>CRYPT_E_REVOCATION_OFFLINE 0x80092013L</term>
            <term>The revocation function was unable to check revocation because the revocation server was offline.</term>
            </item>
            </list>
            <para>Basic Constraints Policy errors ( <c>CERT_CHAIN_POLICY_BASIC_CONSTRAINTS</c>).</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>TRUST_E_BASIC_CONSTRAINTS 0x80096019L</term>
            <term>The basic constraints of the certificate are not valid, or they are missing.</term>
            </item>
            </list>
            <para>Authenticode Policy errors ( <c>CERT_CHAIN_POLICY_AUTHENTICODE</c> and <c>CERT_CHAIN_POLICY_AUTHENTICODE_TS</c>).</para>
            <para>These errors are in addition to the Base Policy errors.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_E_PURPOSE 0x800B0106L</term>
            <term>The certificate is being used for a purpose other than one specified by the issuing CA.</term>
            </item>
            <item>
            <term>CERT_E_REVOKED 0x800B010CL</term>
            <term>The certificate has been explicitly revoked by the issuer.</term>
            </item>
            <item>
            <term>CERT_E_REVOCATION_FAILURE 0x800B010EL</term>
            <term>The revocation process could not continue, and the certificate could not be checked.</term>
            </item>
            </list>
            <para>SSL Policy errors ( <c>CERT_CHAIN_POLICY_SSL</c>).</para>
            <para>These errors are in addition to the Base Policy errors.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_E_UNTRUSTEDROOT 0x800B0109L</term>
            <term>A certification chain processed correctly but terminated in a root certificate that is not trusted by the trust provider.</term>
            </item>
            <item>
            <term>CERT_E_CN_NO_MATCH 0x800B010FL</term>
            <term>The certificate's CN name does not match the passed value.</term>
            </item>
            <item>
            <term>CERT_E_PURPOSE 0x800B0106L</term>
            <term>The certificate is being used for a purpose other than the purposes specified by its CA.</term>
            </item>
            <item>
            <term>CERT_E_ROLE 0x800B0103L</term>
            <term>A certificate that can only be used as an end-entity is being used as a CA or vice versa.</term>
            </item>
            </list>
            <para>Microsoft Root Policy errors ( <c>CERT_CHAIN_POLICY_MICROSOFT_ROOT</c>).</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_E_UNTRUSTEDROOT 0x800B0109L</term>
            <term>A certification chain processed correctly but terminated in a root certificate that is not trusted by the trust provider.</term>
            </item>
            </list>
            <para>EV Policy errors.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_E_CHAINING 0x800B010AL</term>
            <term>The certificate chain to a trusted root authority could not be built.</term>
            </item>
            <item>
            <term>CERT_E_WRONG_USAGE 0x800B0110L</term>
            <term>The certificate is not valid for the requested usage.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_CHAIN_POLICY_STATUS.lChainIndex">
            <summary>
            Index that indicates the chain in which an error or condition that is not valid was found. For more information, see Remarks.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_CHAIN_POLICY_STATUS.lElementIndex">
            <summary>
            Index that indicates the element in a chain where an error or condition that is not valid was found. For more information,
            see Remarks.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_CHAIN_POLICY_STATUS.pvExtraPolicyStatus">
            <summary>
            A pointer to a structure. The structure type is determined by the value of the <c>pszPolicyOID</c> parameter of the
            CertVerifyCertificateChainPolicy function. In addition to <c>dwError</c> errors, policy OID–specific extra status can also
            be returned here to provide additional chain status information. This pointer can be optionally set to point to an
            AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS structure.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CERT_USAGE_MATCH">
            <summary>
            The <c>CERT_USAGE_MATCH</c> structure provides criteria for identifying issuer certificates to be used to build a certificate chain.
            </summary>
            <remarks>
            <para>If the dwType member is set to <c>USAGE_MATCH_TYPE_OR</c>, the Usage member cannot be empty.</para>
            <para>
            If the dwType member is set to <c>USAGE_MATCH_TYPE_AND</c>, an empty Usage member means that any nested usage in the chain will work.
            </para>
            <para>The following describes the behavior given two enhanced key usage (EKU) extensions EKU A and EKU B.</para>
            <para>AND Logic</para>
            <para>
            If the caller specifies EKU A AND EKU B then the target certificate is valid if EKU A and EKU B are supported by every
            certificate in the path (either by an explicit EKU setting or through an absent EKU extension in CA certificates.)
            </para>
            <para>OR Logic</para>
            <para>
            If the caller specifies EKU A OR EKU B then the target certificate is valid if either EKU A or EKU B is supported in the path.
            </para>
            <para>
            Besides the simple case where the certificates in the path contain EKU A or EKU B, the <c>OR</c> clause has the following
            special evaluation.
            </para>
            <para>Given the following path, the <c>OR</c> test is deemed valid:</para>
            <para>
            Although the intersection of the EKUs in the chain is an empty set, the use of the EE certificate is valid for EKU A because the
            request to the cryptography API specifies that the certificate is valid if each certificate of the path supports either EKU A OR
            EKU B.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_USAGE_MATCH.dwType">
            <summary>
            <para>
            Determines the kind of issuer matching to be done. In <c>AND</c> logic, the certificate must meet all criteria. In <c>OR</c>
            logic, the certificate must meet at least one of the criteria. The following codes are defined to determine the logic used
            in the match. For more information about how this applied, see Remarks.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>USAGE_MATCH_TYPE_AND</term>
            <term>AND logic</term>
            </item>
            <item>
            <term>USAGE_MATCH_TYPE_OR</term>
            <term>OR logic</term>
            </item>
            </list>
            <para>Default usage match logic is USAGE_MATCH_TYPE_AND.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CERT_USAGE_MATCH.Usage">
            <summary>
            CERT_ENHKEY_USAGE structure ( <c>CERT_ENHKEY_USAGE</c> is an alternate typedef name for the <c>CTL_USAGE</c> structure) that
            includes an array of certificate object identifiers (OIDs) that a certificate must match in order to be valid.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CMSG_SIGNED_ENCODE_INFO">
            <summary>
            The <c>CMSG_SIGNED_ENCODE_INFO</c> structure contains information to be passed to CryptMsgOpenToEncode if dwMsgType is CMSG_SIGNED.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_SIGNED_ENCODE_INFO.cbSize">
            <summary>Size of this structure in bytes.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_SIGNED_ENCODE_INFO.cSigners">
            <summary>Number of elements in the <c>rgSigners</c> array.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_SIGNED_ENCODE_INFO.rgSigners">
            <summary>Array of pointers to CMSG_SIGNER_ENCODE_INFOstructures each holding signer information.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_SIGNED_ENCODE_INFO.cCertEncoded">
            <summary>Number of elements in the <c>rgCertEncoded</c> array.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_SIGNED_ENCODE_INFO.rgCertEncoded">
            <summary>Array of pointers to CERT_BLOB structures, each containing an encoded certificate.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_SIGNED_ENCODE_INFO.cCrlEncoded">
            <summary>Number of elements in the <c>rgCrlEncoded</c> array.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_SIGNED_ENCODE_INFO.rgCrlEncoded">
            <summary>Array of pointers to CRL_BLOB structures, each containing an encoded CRL.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_SIGNED_ENCODE_INFO.cAttrCertEncoded">
            <summary>
            Number of elements in the <c>rgAttrCertEncoded</c> array. Used only if CMSG_SIGNED_ENCODE_INFO_HAS_CMS_FIELDS is defined.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CMSG_SIGNED_ENCODE_INFO.rgAttrCertEncoded">
            <summary>
            Array of encoded attribute certificates. Used only if CMSG_SIGNED_ENCODE_INFO_HAS_CMS_FIELDS is defined. This array of
            encoded attribute certificates can be used with CMS for PKCS #7 processing.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CTL_VERIFY_USAGE_PARA">
            <summary>
            The <c>CTL_VERIFY_USAGE_PARA</c> structure contains parameters used by CertVerifyCTLUsage to establish the validity of a CTL's usage.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CTL_VERIFY_USAGE_PARA.cbSize">
            <summary>Size of this structure in bytes.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CTL_VERIFY_USAGE_PARA.ListIdentifier">
            <summary>
            <para>
            BLOB that specifies a <c>ListIdentifier</c> of a CTL to be found or verified. Normally the <c>cbData</c> member of the
            <c>ListIdentifier</c> BLOB will be zero, indicating that a CTL with any <c>ListIdentifier</c> can be a match.
            </para>
            <para>
            To match only CTLs with no <c>ListIdentifier</c>, the <c>cbData</c> member of the <c>ListIdentifier</c> BLOB is set to CTL_FIND_NO_LIST_ID_CBDATA.
            </para>
            <para>
            If an issuer creates multiple CTLs for the same <c>SubjectUsage</c>, a <c>ListIdentifier</c> can distinguish among them.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CTL_VERIFY_USAGE_PARA.cCtlStore">
            <summary>The count of stores to be searched for a matching CTL.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CTL_VERIFY_USAGE_PARA.rghCtlStore">
            <summary>Array of handles of stores to be searched to find a matching CTL.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CTL_VERIFY_USAGE_PARA.cSignerStore">
            <summary>Count of stores to be searched for acceptable CTL signers.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CTL_VERIFY_USAGE_PARA.rghSignerStore">
            <summary>Array of handles of stores to be searched for acceptable CTL signers.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CTL_VERIFY_USAGE_STATUS">
            <summary>
            The <c>CTL_VERIFY_USAGE_STATUS</c> structure contains information about a Certificate Trust List (CTL) returned by CertVerifyCTLUsage.
            </summary>
            <remarks>
            The members <c>dwError</c>, <c>dwFlags</c>, <c>dwCtlEntryIndex</c>, and <c>dwSignerIndex</c> should be initialized to zero by
            the calling application.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CTL_VERIFY_USAGE_STATUS.cbSize">
            <summary>
            The size, in bytes, of the structure. The application calling CertVerifyCTLUsage sets this parameter. If <c>cbSize</c> is
            not greater than or equal to the required size of the structure, <c>CertVerifyCTLUsage</c> returns <c>FALSE</c> and
            GetLastError returns <c>E_INVALIDARG</c>.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CTL_VERIFY_USAGE_STATUS.dwError">
            <summary>
            The error status, if any, returned by the call to CertVerifyCTLUsage. For the list of possible error values, see the Return
            Values section in <c>CertVerifyCTLUsage</c>.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CTL_VERIFY_USAGE_STATUS.dwFlags">
            <summary>
            If <c>CERT_VERIFY_UPDATED_CTL_FLAG</c> is returned, CertVerifyCTLUsage updated a CTL whose time was no longer valid with a
            new, time-valid CTL.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CTL_VERIFY_USAGE_STATUS.ppCtl">
            <summary>
            <para>
            Pointer to a pointer to a CTL context containing the matched subject. The calling application can set this pointer to
            <c>NULL</c> to indicate that a CTL containing the subject is not to be returned.
            </para>
            <para>If <c>ppCtl</c> is not <c>NULL</c>, the calling application must free the returned context using CertFreeCTLContext.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CTL_VERIFY_USAGE_STATUS.dwCtlEntryIndex">
            <summary>Returns the array location of the matching subject's entry in the CTL's array.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CTL_VERIFY_USAGE_STATUS.ppSigner">
            <summary>
            <para>
            A pointer to a pointer to the certificate context of the signer of the CTL. This pointer can be set to <c>NULL</c> by the
            calling application indicating that the certificate of the signer of the CTL is not to be returned.
            </para>
            <para>If <c>ppSigner</c> is not <c>NULL</c>, the calling application must free the returned context using CertFreeCTLContext.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CTL_VERIFY_USAGE_STATUS.dwSignerIndex">
            <summary>Index of the signer actually used. Needed if a message has more than one signer.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.PCCERT_CHAIN_CONTEXT">
            <summary>Provides a handle to a CERT_CHAIN_CONTEXT.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.PCCERT_CHAIN_CONTEXT.#ctor(System.IntPtr)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Crypt32.PCCERT_CHAIN_CONTEXT"/> struct.</summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
        </member>
        <member name="P:Vanara.PInvoke.Crypt32.PCCERT_CHAIN_CONTEXT.NULL">
            <summary>Returns an invalid handle by instantiating a <see cref="T:Vanara.PInvoke.Crypt32.PCCERT_CHAIN_CONTEXT"/> object with <see cref="F:System.IntPtr.Zero"/>.</summary>
        </member>
        <member name="P:Vanara.PInvoke.Crypt32.PCCERT_CHAIN_CONTEXT.IsNull">
            <summary>Gets a value indicating whether this instance is a null handle.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.PCCERT_CHAIN_CONTEXT.op_Explicit(Vanara.PInvoke.Crypt32.PCCERT_CHAIN_CONTEXT)~System.IntPtr">
            <summary>Performs an explicit conversion from <see cref="T:Vanara.PInvoke.Crypt32.PCCERT_CHAIN_CONTEXT"/> to <see cref="T:System.IntPtr"/>.</summary>
            <param name="h">The handle.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.PCCERT_CHAIN_CONTEXT.op_Explicit(Vanara.PInvoke.Crypt32.PCCERT_CHAIN_CONTEXT)~Vanara.PInvoke.Crypt32.CERT_CHAIN_CONTEXT">
            <summary>Performs an explicit conversion from <see cref="T:Vanara.PInvoke.Crypt32.PCCERT_CHAIN_CONTEXT"/> to <see cref="T:Vanara.PInvoke.Crypt32.CERT_CHAIN_CONTEXT"/>.</summary>
            <param name="h">The <see cref="T:Vanara.PInvoke.Crypt32.PCCERT_CHAIN_CONTEXT"/> instance.</param>
            <returns>The resulting <see cref="T:Vanara.PInvoke.Crypt32.CERT_CHAIN_CONTEXT"/> instance from the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.PCCERT_CHAIN_CONTEXT.op_Implicit(System.IntPtr)~Vanara.PInvoke.Crypt32.PCCERT_CHAIN_CONTEXT">
            <summary>Performs an implicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:Vanara.PInvoke.Crypt32.PCCERT_CHAIN_CONTEXT"/>.</summary>
            <param name="h">The pointer to a handle.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.PCCERT_CHAIN_CONTEXT.op_Inequality(Vanara.PInvoke.Crypt32.PCCERT_CHAIN_CONTEXT,Vanara.PInvoke.Crypt32.PCCERT_CHAIN_CONTEXT)">
            <summary>Implements the operator !=.</summary>
            <param name="h1">The first handle.</param>
            <param name="h2">The second handle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.PCCERT_CHAIN_CONTEXT.op_Equality(Vanara.PInvoke.Crypt32.PCCERT_CHAIN_CONTEXT,Vanara.PInvoke.Crypt32.PCCERT_CHAIN_CONTEXT)">
            <summary>Implements the operator ==.</summary>
            <param name="h1">The first handle.</param>
            <param name="h2">The second handle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.PCCERT_CHAIN_CONTEXT.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.PCCERT_CHAIN_CONTEXT.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.PCCERT_CHAIN_CONTEXT.DangerousGetHandle">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.SafeHCERTCHAINENGINE">
            <summary>Provides a <see cref="T:System.Runtime.InteropServices.SafeHandle"/> for <see cref="T:Vanara.PInvoke.Crypt32.HCERTCHAINENGINE"/> that is disposed using <see cref="M:Vanara.PInvoke.Crypt32.CertFreeCertificateChainEngine(Vanara.PInvoke.Crypt32.HCERTCHAINENGINE)"/>.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.SafeHCERTCHAINENGINE.#ctor(System.IntPtr,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Crypt32.SafeHCERTCHAINENGINE"/> class and assigns an existing handle.</summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
            <param name="ownsHandle">
            <see langword="true"/> to reliably release the handle during the finalization phase; otherwise, <see langword="false"/> (not recommended).
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.SafeHCERTCHAINENGINE.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Crypt32.SafeHCERTCHAINENGINE"/> class.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.SafeHCERTCHAINENGINE.op_Implicit(Vanara.PInvoke.Crypt32.SafeHCERTCHAINENGINE)~Vanara.PInvoke.Crypt32.HCERTCHAINENGINE">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.Crypt32.SafeHCERTCHAINENGINE"/> to <see cref="T:Vanara.PInvoke.Crypt32.HCERTCHAINENGINE"/>.</summary>
            <param name="h">The safe handle instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.SafeHCERTCHAINENGINE.InternalReleaseHandle">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.SafePCCERT_CHAIN_CONTEXT">
            <summary>Provides a <see cref="T:System.Runtime.InteropServices.SafeHandle"/> for <see cref="T:Vanara.PInvoke.Crypt32.PCCERT_CHAIN_CONTEXT"/> that is disposed using <see cref="M:Vanara.PInvoke.Crypt32.CertFreeCertificateChain(Vanara.PInvoke.Crypt32.PCCERT_CHAIN_CONTEXT)"/>.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.SafePCCERT_CHAIN_CONTEXT.#ctor(System.IntPtr,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Crypt32.SafePCCERT_CHAIN_CONTEXT"/> class and assigns an existing handle.</summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
            <param name="ownsHandle">
            <see langword="true"/> to reliably release the handle during the finalization phase; otherwise, <see langword="false"/> (not recommended).
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.SafePCCERT_CHAIN_CONTEXT.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Crypt32.SafePCCERT_CHAIN_CONTEXT"/> class.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.SafePCCERT_CHAIN_CONTEXT.op_Implicit(Vanara.PInvoke.Crypt32.SafePCCERT_CHAIN_CONTEXT)~Vanara.PInvoke.Crypt32.PCCERT_CHAIN_CONTEXT">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.Crypt32.SafePCCERT_CHAIN_CONTEXT"/> to <see cref="T:Vanara.PInvoke.Crypt32.PCCERT_CHAIN_CONTEXT"/>.</summary>
            <param name="h">The safe handle instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.SafePCCERT_CHAIN_CONTEXT.op_Explicit(Vanara.PInvoke.Crypt32.SafePCCERT_CHAIN_CONTEXT)~Vanara.PInvoke.Crypt32.CERT_CHAIN_CONTEXT">
            <summary>Performs an explicit conversion from <see cref="T:Vanara.PInvoke.Crypt32.SafePCCERT_CHAIN_CONTEXT"/> to <see cref="T:Vanara.PInvoke.Crypt32.CERT_CHAIN_CONTEXT"/>.</summary>
            <param name="h">The safe handle instance.</param>
            <returns>The resulting <see cref="T:Vanara.PInvoke.Crypt32.CERT_CHAIN_CONTEXT"/> instance from the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Crypt32.SafePCCERT_CHAIN_CONTEXT.InternalReleaseHandle">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.Crypt32.CertVerifyChainPolicy">
            <summary>Predefined verify chain policies.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertVerifyChainPolicy.CERT_CHAIN_POLICY_BASE">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertVerifyChainPolicy.CERT_CHAIN_POLICY_AUTHENTICODE">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertVerifyChainPolicy.CERT_CHAIN_POLICY_AUTHENTICODE_TS">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertVerifyChainPolicy.CERT_CHAIN_POLICY_SSL">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertVerifyChainPolicy.CERT_CHAIN_POLICY_BASIC_CONSTRAINTS">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertVerifyChainPolicy.CERT_CHAIN_POLICY_NT_AUTH">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertVerifyChainPolicy.CERT_CHAIN_POLICY_MICROSOFT_ROOT">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertVerifyChainPolicy.CERT_CHAIN_POLICY_EV">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertVerifyChainPolicy.CERT_CHAIN_POLICY_SSL_F12">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertVerifyChainPolicy.CERT_CHAIN_POLICY_SSL_HPKP_HEADER">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertVerifyChainPolicy.CERT_CHAIN_POLICY_THIRD_PARTY_ROOT">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Crypt32.CertVerifyChainPolicy.CERT_CHAIN_POLICY_SSL_KEY_PIN">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.CryptDlg">
            <summary>Methods and data types found in CryptDlg.dll.</summary>
        </member>
        <member name="T:Vanara.PInvoke.CryptDlg.PFNCMFILTERPROC">
            <summary>
            The <c>PFNCMFILTERPROC</c> function is a filter procedure that filters each certificate to determine whether it will appear in
            the certificate selection dialog box that is displayed by the CertSelectCertificate function. <c>PFNCMFILTERPROC</c> is an
            application-defined callback function that is specified in the CERT_SELECT_STRUCT structure. The <c>CERT_SELECT_STRUCT</c>
            structure is a parameter in the CertSelectCertificate function. The <c>PFNCMFILTERPROC</c> function must be implemented by the
            developer to suit each application.
            </summary>
            <param name="pCertContext">
            A pointer to a CERT_CONTEXT structure that contains a certificate to make a filtering determination on.
            </param>
            <param name="lCustData">The customer data.</param>
            <param name="dwFlags">The flags.</param>
            <param name="dwDisplayWell">The display well.</param>
            <returns>
            Return a nonzero value ( <c>TRUE</c>) to display the certificate. Return zero ( <c>FALSE</c>) to not display the certificate.
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.CryptDlg.PFNCMHOOKPROC">
            <summary>
            The <c>PFNCMHOOKPROC</c> function is a hook procedure that is called before messages are processed by the certificate selection
            dialog box produced by the CertSelectCertificate function. The function allows the caller to customize the dialog box.
            <c>PFNCMHOOKPROC</c> is an application-defined callback function specified in the CERT_SELECT_STRUCT structure. The
            <c>CERT_SELECT_STRUCT</c> structure is a parameter in the CertSelectCertificate function. The <c>PFNCMHOOKPROC</c> function must
            be implemented by the developer to suit each application.
            </summary>
            <param name="hwndDialog">A handle to a dialog box window.</param>
            <param name="message">The message.</param>
            <param name="wParam">Additional information about the message sent or posted.</param>
            <param name="lParam">Additional information about the message sent or posted.</param>
            <returns>
            Return a nonzero value ( <c>TRUE</c>) if this function processes the message. Return zero ( <c>FALSE</c>) if this function does
            not process the message.
            </returns>
            <remarks>For information about hooks, see Hooks.</remarks>
        </member>
        <member name="T:Vanara.PInvoke.CryptDlg.CertDisplayWell">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.CryptDlg.CertDisplayWell.CERT_DISPWELL_SELECT">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.CryptDlg.CertDisplayWell.CERT_DISPWELL_TRUST_CA_CERT">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.CryptDlg.CertDisplayWell.CERT_DISPWELL_TRUST_LEAF_CERT">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.CryptDlg.CertDisplayWell.CERT_DISPWELL_TRUST_ADD_CA_CERT">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.CryptDlg.CertDisplayWell.CERT_DISPWELL_TRUST_ADD_LEAF_CERT">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.CryptDlg.CertDisplayWell.CERT_DISPWELL_DISTRUST_CA_CERT">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.CryptDlg.CertDisplayWell.CERT_DISPWELL_DISTRUST_LEAF_CERT">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.CryptDlg.CertDisplayWell.CERT_DISPWELL_DISTRUST_ADD_CA_CERT">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.CryptDlg.CertDisplayWell.CERT_DISPWELL_DISTRUST_ADD_LEAF_CERT">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.CryptDlg.CertModifyCertificatesOp">
            <summary>The operation to be performed.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptDlg.CertModifyCertificatesOp.CTL_MODIFY_REQUEST_ADD_NOT_TRUSTED">
            <summary>Add the certificate to the Untrusted Certificates certificate store. The certificate is explicitly not trusted.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptDlg.CertModifyCertificatesOp.CTL_MODIFY_REQUEST_REMOVE">
            <summary>
            Remove the certificate from the CTL. The certificate is neither explicitly trusted nor untrusted. To be trusted, the
            certificate must have a trusted root certificate at the root of its certificate chain.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptDlg.CertModifyCertificatesOp.CTL_MODIFY_REQUEST_ADD_TRUSTED">
            <summary>Add the certificate to the CTL. The certificate is explicitly trusted.</summary>
        </member>
        <member name="T:Vanara.PInvoke.CryptDlg.CertSelectFlags">
            <summary>Flags for CERT_SELECT_STRUCT</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptDlg.CertSelectFlags.CSS_SELECTCERT_MASK">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.CryptDlg.CertSelectFlags.CSS_HIDE_PROPERTIES">
            <summary>Hide the Properties button.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptDlg.CertSelectFlags.CSS_ENABLEHOOK">
            <summary>Pass a hook procedure in pfnHook.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptDlg.CertSelectFlags.CSS_ALLOWMULTISELECT">
            <summary>Enable multi-selection of certificates. This option is not currently supported and is ignored.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptDlg.CertSelectFlags.CSS_SHOW_HELP">
            <summary>Show the Help button.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptDlg.CertSelectFlags.CSS_ENABLETEMPLATE">
            <summary>
            Cause CertSelectCertificate function to call the DialogBoxIndirectParam function to create a dialog box. For more
            information, see pTemplateName.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptDlg.CertSelectFlags.CSS_ENABLETEMPLATEHANDLE">
            <summary>
            Cause the CertSelectCertificate function to call the DialogBoxParam function to create a dialog box. For more information,
            see pTemplateName.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.CryptDlg.ViewPropertiesFlags">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.CryptDlg.ViewPropertiesFlags.CM_VIEWFLAGS_MASK">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.CryptDlg.ViewPropertiesFlags.CM_ENABLEHOOK">
            <summary>Specifies that a hook function is enabled.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptDlg.ViewPropertiesFlags.CM_SHOW_HELP">
            <summary>Specifies that a help file is used.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptDlg.ViewPropertiesFlags.CM_SHOW_HELPICON">
            <summary>Specifies that a help icon is used.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptDlg.ViewPropertiesFlags.CM_ENABLETEMPLATE">
            <summary>Specifies that a template is enabled.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptDlg.ViewPropertiesFlags.CM_HIDE_ADVANCEPAGE">
            <summary>Specifies that the Advance tab is not displayed.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptDlg.ViewPropertiesFlags.CM_HIDE_TRUSTPAGE">
            <summary>Specifies that the Trust tab is not displayed.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptDlg.ViewPropertiesFlags.CM_NO_NAMECHANGE">
            <summary>Specifies that the name cannot be changed.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptDlg.ViewPropertiesFlags.CM_NO_EDITTRUST">
            <summary>Specifies that the trust cannot be edited.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptDlg.ViewPropertiesFlags.CM_HIDE_DETAILPAGE">
            <summary>Specifies that the Detail tab is not displayed.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptDlg.ViewPropertiesFlags.CM_ADD_CERT_STORES">
            <summary>Specifies that certificate stores are opened.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptDlg.ViewPropertiesFlags.CERTVIEW_CRYPTUI_LPARAM">
            <summary/>
        </member>
        <member name="M:Vanara.PInvoke.CryptDlg.CertModifyCertificatesToTrust(System.Int32,Vanara.PInvoke.CryptDlg.CTL_MODIFY_REQUEST[],Vanara.PInvoke.Crypt32.SafeOID,Vanara.PInvoke.HWND,Vanara.PInvoke.Crypt32.HCERTSTORE,Vanara.PInvoke.Crypt32.PCCERT_CONTEXT)">
            <summary>
            <para>
            The <c>CertModifyCertificatesToTrust</c> function modifies the set of certificates in a certificate trust list (CTL) for a given purpose.
            </para>
            <para>
            <c>Note</c> This function has no associated import library. You must use the LoadLibrary and GetProcAddress functions to
            dynamically link to CryptDlg.dll.
            </para>
            </summary>
            <param name="cCerts">The number of modification requests that are in the rgCerts parameter.</param>
            <param name="rgCerts">A pointer to a CTL_MODIFY_REQUEST structure that contains an array of modification requests.</param>
            <param name="szPurpose">
            A pointer to a null-terminated string that contains the string representation of an object identifier (OID). The OID specifies
            the enhanced key usage (EKU) of the CTL to be modified.
            </param>
            <param name="hwnd">A handle to the parent window of the dialog boxes that this function generates.</param>
            <param name="hcertstoreTrust">
            A handle to the certificate store in which to modify the list of trusted certificates. If <c>NULL</c>, the Trusted People store
            is used with the Current User location.
            </param>
            <param name="pccertSigner">
            A pointer to a CERT_CONTEXT structure that contains a certificate. It is used to sign the trust list. The certificate also
            restricts the set of trust lists that may be modified. If <c>NULL</c>, the trust list is not signed.
            </param>
            <returns>An <c>HRESULT</c>. A value of S_OK indicates success.</returns>
        </member>
        <member name="M:Vanara.PInvoke.CryptDlg.CertSelectCertificate(Vanara.PInvoke.CryptDlg.CERT_SELECT_STRUCT@)">
            <summary>
            <para>
            The <c>CertSelectCertificate</c> function presents a dialog box that allows the user to select certificates from a set of
            certificates that match the given criteria.
            </para>
            <para>
            <c>Note</c> This function has no associated import library. You must use the LoadLibrary and GetProcAddress functions to
            dynamically link to CryptDlg.dll.
            </para>
            </summary>
            <param name="pCertSelectInfo">
            A pointer to a CERT_SELECT_STRUCT structure that contains criteria that control the displayed certificates for selection and
            receives the selected certificate.
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. For extended error information, call the GetLastError function.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.CryptDlg.CertViewProperties(Vanara.PInvoke.CryptDlg.CERT_VIEWPROPERTIES_STRUCT@)">
            <summary>
            <para>
            [The <c>CertViewProperties</c> function is available for use in the operating systems specified in the Requirements section. It
            may be altered or unavailable in subsequent versions. Instead, use the CryptUIDlgViewContext function.]
            </para>
            <para>
            The <c>CertViewProperties</c> function displays the properties for a certificate in a user interface (UI) dialog box. This
            function has no associated import library. You must use the LoadLibrary and GetProcAddress functions to dynamically link to CryptDlg.dll.
            </para>
            <para>
            <c>Note</c> This function has no associated import library. You must use the LoadLibrary and GetProcAddress functions to
            dynamically link to CryptDlg.dll.
            </para>
            </summary>
            <param name="pCertViewInfo">
            A pointer to a CERT_VIEWPROPERTIES_STRUCT structure that contains the information about the certificate to view.
            </param>
            <returns>The return value is <c>TRUE</c> if the function is successful; <c>FALSE</c> if the function fails.</returns>
        </member>
        <member name="M:Vanara.PInvoke.CryptDlg.GetFriendlyNameOfCert(Vanara.PInvoke.Crypt32.PCCERT_CONTEXT,System.Text.StringBuilder,System.UInt32)">
            <summary>
            <para>
            [The <c>GetFriendlyNameOfCert</c> function is available for use in the operating systems specified in the Requirements section.
            It may be altered or unavailable in subsequent versions. Instead, use the CertGetNameString function with the
            CERT_NAME_FRIENDLY_DISPLAY_TYPE flag.]
            </para>
            <para>The <c>GetFriendlyNameOfCert</c> function retrieves the display name for a certificate.</para>
            <para>
            <c>Note</c> This function has no associated import library. You must use the LoadLibrary and GetProcAddress functions to
            dynamically link to CryptDlg.dll.
            </para>
            </summary>
            <param name="pccert">A pointer to the certificate context whose display name is being retrieved.</param>
            <param name="pch">A pointer to a character string that receives the display name for the certificate.</param>
            <param name="cch">Number of characters allocated for pchBuffer, including the terminating <c>NULL</c> character.</param>
            <returns>
            The return value is the number of characters, including the terminating <c>NULL</c> character, in the returned display name.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.CryptDlg.GetFriendlyNameOfCert(Vanara.PInvoke.Crypt32.PCCERT_CONTEXT,System.IntPtr,System.UInt32)">
            <summary>
            <para>
            [The <c>GetFriendlyNameOfCert</c> function is available for use in the operating systems specified in the Requirements section.
            It may be altered or unavailable in subsequent versions. Instead, use the CertGetNameString function with the
            CERT_NAME_FRIENDLY_DISPLAY_TYPE flag.]
            </para>
            <para>The <c>GetFriendlyNameOfCert</c> function retrieves the display name for a certificate.</para>
            <para>
            <c>Note</c> This function has no associated import library. You must use the LoadLibrary and GetProcAddress functions to
            dynamically link to CryptDlg.dll.
            </para>
            </summary>
            <param name="pccert">A pointer to the certificate context whose display name is being retrieved.</param>
            <param name="pch">A pointer to a character string that receives the display name for the certificate.</param>
            <param name="cch">Number of characters allocated for pchBuffer, including the terminating <c>NULL</c> character.</param>
            <returns>
            The return value is the number of characters, including the terminating <c>NULL</c> character, in the returned display name.
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.CryptDlg.CERT_SELECT_STRUCT">
            <summary>
            The <c>CERT_SELECT_STRUCT</c> structure contains criteria upon which to select certificates that are presented in a certificate
            selection dialog box. This structure is used in the CertSelectCertificate function.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptDlg.CERT_SELECT_STRUCT.dwSize">
            <summary>The size, in bytes, of this structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptDlg.CERT_SELECT_STRUCT.hwndParent">
            <summary>A handle to the parent window of any dialog boxes that CertSelectCertificate generates.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptDlg.CERT_SELECT_STRUCT.hInstance">
            <summary>A handle to the module whose executable file contains the dialog box template.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptDlg.CERT_SELECT_STRUCT.pTemplateName">
            <summary>
            <para>
            If the <c>CSS_ENABLETEMPLATE</c> flag is set in the <c>dwFlags</c> member, set <c>pTemplateName</c> to a pointer to a global
            memory object that contains the template that DialogBoxIndirectParam uses to create the dialog box. A dialog box template
            consists of a header that describes the dialog box. The header is followed by one or more additional blocks of data that
            describe each of the controls in the dialog box. The template can use either the standard format or the extended format.
            </para>
            <para>
            If the <c>CSS_ENABLETEMPLATEHANDLE</c> flag is set in <c>dwFlags</c>, <c>pTemplateName</c> specifies the dialog box
            template. <c>pTemplateName</c> is either the pointer to a null-terminated character string that specifies the name of the
            dialog box template or an integer value that specifies the resource identifier of the dialog box template. If the specifies
            a resource identifier, its high-order word must be zero and its low-order word must contain the identifier. One way to
            create this integer value is to use the MAKEINTRESOURCE macro.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptDlg.CERT_SELECT_STRUCT.dwFlags">
            <summary>
            <para>This member can be one or more of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CSS_HIDE_PROPERTIES</term>
            <term>Hide the Properties button.</term>
            </item>
            <item>
            <term>CSS_ENABLEHOOK</term>
            <term>Pass a hook procedure in pfnHook.</term>
            </item>
            <item>
            <term>CSS_ALLOWMULTISELECT</term>
            <term>Enable multi-selection of certificates. This option is not currently supported and is ignored.</term>
            </item>
            <item>
            <term>CSS_SHOW_HELP</term>
            <term>Show the Help button.</term>
            </item>
            <item>
            <term>CSS_ENABLETEMPLATE</term>
            <term>
            Cause CertSelectCertificate function to call the DialogBoxIndirectParam function to create a dialog box. For more
            information, see pTemplateName.
            </term>
            </item>
            <item>
            <term>CSS_ENABLETEMPLATEHANDLE</term>
            <term>
            Cause the CertSelectCertificate function to call the DialogBoxParam function to create a dialog box. For more information,
            see pTemplateName.
            </term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptDlg.CERT_SELECT_STRUCT.szTitle">
            <summary>A pointer to a string that contains the text for the title of the dialog box.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptDlg.CERT_SELECT_STRUCT.cCertStore">
            <summary>The number of elements in <c>arrayCertStore</c> array.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptDlg.CERT_SELECT_STRUCT.arrayCertStore">
            <summary>
            A pointer to the array of certificate stores that the dialog box enumerates and displays the certificates from. The
            <c>cCertStore</c> member contains the number of elements in this array.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptDlg.CERT_SELECT_STRUCT.szPurposeOid">
            <summary>
            A pointer to a string representation of an object identifier (OID) for an enhanced key usage (EKU). If an OID is provided,
            only certificates that include this EKU will be displayed.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptDlg.CERT_SELECT_STRUCT.cCertContext">
            <summary>
            The number of elements in the <c>arrayCertContext</c> array. After the CertSelectCertificate function returns, this member
            contains the number of certificates that were selected by the user. Currently, only one certificate can be selected by the user.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptDlg.CERT_SELECT_STRUCT.arrayCertContext">
            <summary>
            <para>
            A pointer to an array of CERT_CONTEXT structures. The <c>cCertContext</c> member specifies the number of elements in this
            array. This array must contain at least one element.
            </para>
            <para>
            The certificates represented by these structures are selected when the dialog box displayed by the CertSelectCertificate
            function is initially displayed. Currently, only the first certificate in this array is used. The first certificate in this
            array will be released with the CertFreeCertificateContext function if the <c>CertSelectCertificate</c> function is
            successful. If the first element in this array is <c>NULL</c>, no certificates are initially selected in the dialog box.
            </para>
            <para>
            After the CertSelectCertificate function returns, this array contains the certificates that were selected by the user.
            Currently, only one certificate can be selected by the user.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptDlg.CERT_SELECT_STRUCT.lCustData">
            <summary>
            A pointer to an array of byte values that hold custom data that is passed through to the filter procedure referenced by
            <c>pfnFilter</c>. This custom data is not used by the CertSelectCertificate function.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptDlg.CERT_SELECT_STRUCT.pfnHook">
            <summary>
            A PFNCMHOOKPROC function pointer to the Hook callback function. This function is called before messages are processed by the
            dialog box. For more information, see Hooks.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptDlg.CERT_SELECT_STRUCT.pfnFilter">
            <summary>
            A PFNCMFILTERPROC function pointer to the filter callback function. This is called to determine which certificates will be
            displayed by the dialog box.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptDlg.CERT_SELECT_STRUCT.szHelpFileName">
            <summary>A pointer to a null-terminated string that contains the full path to the Help file.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptDlg.CERT_SELECT_STRUCT.dwHelpId">
            <summary>The context identifier for the topic. For more information, see WinHelp.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptDlg.CERT_SELECT_STRUCT.hprov">
            <summary>A handle to the Cryptographic Service Provider (CSP) to use for certificate verification.</summary>
        </member>
        <member name="T:Vanara.PInvoke.CryptDlg.CERT_VIEWPROPERTIES_STRUCT">
            <summary>
            <para>
            [The <c>CERT_VIEWPROPERTIES_STRUCT</c> structure is available for use in the operating systems specified in the Requirements
            section. It may be altered or unavailable in subsequent versions.]
            </para>
            <para>
            The <c>CERT_VIEWPROPERTIES_STRUCT</c> structure defines information used when the CertViewProperties function is called to
            display a certificate's properties.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptDlg.CERT_VIEWPROPERTIES_STRUCT.dwSize">
            <summary>The size, in bytes, of this structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptDlg.CERT_VIEWPROPERTIES_STRUCT.hwndParent">
            <summary>A handle to the parent window.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptDlg.CERT_VIEWPROPERTIES_STRUCT.hInstance">
            <summary>A handle to the module instance.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptDlg.CERT_VIEWPROPERTIES_STRUCT.dwFlags">
            <summary>
            <para>Bitwise combination of zero or more of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CM_ENABLEHOOK 1 (0x1)</term>
            <term>Specifies that a hook function is enabled.</term>
            </item>
            <item>
            <term>CM_SHOW_HELP 2 (0x2)</term>
            <term>Specifies that a help file is used.</term>
            </item>
            <item>
            <term>CM_SHOW_HELPICON 4 (0x4)</term>
            <term>Specifies that a help icon is used.</term>
            </item>
            <item>
            <term>CM_ENABLETEMPLATE 8 (0x8)</term>
            <term>Specifies that a template is enabled.</term>
            </item>
            <item>
            <term>CM_HIDE_ADVANCEPAGE 16 (0x10)</term>
            <term>Specifies that the Advance tab is not displayed.</term>
            </item>
            <item>
            <term>CM_HIDE_TRUSTPAGE 32 (0x20)</term>
            <term>Specifies that the Trust tab is not displayed.</term>
            </item>
            <item>
            <term>CM_NO_NAMECHANGE 64 (0x40)</term>
            <term>Specifies that the name cannot be changed.</term>
            </item>
            <item>
            <term>CM_NO_EDITTRUST 128 (0x80)</term>
            <term>Specifies that the trust cannot be edited.</term>
            </item>
            <item>
            <term>CM_HIDE_DETAILPAGE 256 (0x100)</term>
            <term>Specifies that the Detail tab is not displayed.</term>
            </item>
            <item>
            <term>CM_ADD_CERT_STORES 512 (0x200)</term>
            <term>Specifies that certificate stores are opened.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptDlg.CERT_VIEWPROPERTIES_STRUCT.szTitle">
            <summary>A pointer to a null-terminated string for the title of the user interface.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptDlg.CERT_VIEWPROPERTIES_STRUCT.pCertContext">
            <summary>Certificate context for the certificate to be shown.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptDlg.CERT_VIEWPROPERTIES_STRUCT.arrayPurposes">
            <summary>A pointer to an array of null-terminated strings that specify the certificate purposes.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptDlg.CERT_VIEWPROPERTIES_STRUCT.cArrayPurposes">
            <summary>Number of elements in the <c>arrayPurposes</c> array. If this value is zero, then no trust status is displayed.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptDlg.CERT_VIEWPROPERTIES_STRUCT.cRootStores">
            <summary>Number of elements in the <c>rghstoreRoots</c> array.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptDlg.CERT_VIEWPROPERTIES_STRUCT.rghstoreRoots">
            <summary>Array of Root certificate store handles.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptDlg.CERT_VIEWPROPERTIES_STRUCT.cStores">
            <summary>Number of elements in the <c>rghstoreCAs</c> array.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptDlg.CERT_VIEWPROPERTIES_STRUCT.rghstoreCAs">
            <summary>Array of other certificate store handles.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptDlg.CERT_VIEWPROPERTIES_STRUCT.cTrustStores">
            <summary>Number of elements in the <c>rghstoreTrust</c> array.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptDlg.CERT_VIEWPROPERTIES_STRUCT.rghstoreTrust">
            <summary>Array of trust certificate store handles.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptDlg.CERT_VIEWPROPERTIES_STRUCT.hprov">
            <summary>A handle to the cryptographic service provider (CSP) to use for verification.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptDlg.CERT_VIEWPROPERTIES_STRUCT.lCustData">
            <summary>Value used for custom data.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptDlg.CERT_VIEWPROPERTIES_STRUCT.dwPad">
            <summary>Padding location.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptDlg.CERT_VIEWPROPERTIES_STRUCT.szHelpFileName">
            <summary>A pointer to a null-terminated string for the Help file name.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptDlg.CERT_VIEWPROPERTIES_STRUCT.dwHelpId">
            <summary>ID for the Help file topic.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptDlg.CERT_VIEWPROPERTIES_STRUCT.nStartPage">
            <summary>Number of the first property page.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptDlg.CERT_VIEWPROPERTIES_STRUCT.cArrayPropSheetPages">
            <summary>Number of elements in the <c>arrayPropSheetPages</c> array.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptDlg.CERT_VIEWPROPERTIES_STRUCT.arrayPropSheetPages">
            <summary>A pointer to an array of <c>PROPSHEETPAGE</c> structures that specify the property pages.</summary>
        </member>
        <member name="T:Vanara.PInvoke.CryptDlg.CTL_MODIFY_REQUEST">
            <summary>
            The <c>CTL_MODIFY_REQUEST</c> structure contains a request to modify a certificate trust list (CTL). This structure is used in
            the CertModifyCertificatesToTrust function.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptDlg.CTL_MODIFY_REQUEST.pccert">
            <summary>A pointer to a CERT_CONTEXT structure that contains the certificate to change the trust on.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptDlg.CTL_MODIFY_REQUEST.dwOperation">
            <summary>
            <para>The operation to be performed. This member can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CTL_MODIFY_REQUEST_ADD_TRUSTED</term>
            <term>Add the certificate to the CTL. The certificate is explicitly trusted.</term>
            </item>
            <item>
            <term>CTL_MODIFY_REQUEST_ADD_NOT_TRUSTED</term>
            <term>Add the certificate to the Untrusted Certificates certificate store. The certificate is explicitly not trusted.</term>
            </item>
            <item>
            <term>CTL_MODIFY_REQUEST_REMOVE</term>
            <term>
            Remove the certificate from the CTL. The certificate is neither explicitly trusted nor untrusted. To be trusted, the
            certificate must have a trusted root certificate at the root of its certificate chain.
            </term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptDlg.CTL_MODIFY_REQUEST.dwError">
            <summary>The error code generated for this operation.</summary>
        </member>
        <member name="T:Vanara.PInvoke.CryptNet">
            <summary>Methods and data types found in CryptNet.dll.</summary>
        </member>
        <member name="T:Vanara.PInvoke.CryptNet.CryptGetUrlFlags">
            <summary>A set of flags used to get the URL locator for an object.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptNet.CryptGetUrlFlags.CRYPT_GET_URL_FROM_PROPERTY">
            <summary>Locates the URL from the property of the object (the location of the data).</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptNet.CryptGetUrlFlags.CRYPT_GET_URL_FROM_EXTENSION">
            <summary>Locates the URL from the extension of the object.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptNet.CryptGetUrlFlags.CRYPT_GET_URL_FROM_UNAUTH_ATTRIBUTE">
            <summary>Locates the URL from an unauthenticated attribute from the signer information data.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptNet.CryptGetUrlFlags.CRYPT_GET_URL_FROM_AUTH_ATTRIBUTE">
            <summary>Locates the URL from an authenticated attribute from the signer information data.</summary>
        </member>
        <member name="T:Vanara.PInvoke.CryptNet.CryptGetUrlFromFlags">
            <summary>A set of flags used to get the URL locator for an object.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptNet.CryptGetUrlFromFlags.CRYPT_GET_URL_FROM_PROPERTY">
            <term>Locates the URL from the property of the object (the location of the data).</term>
        </member>
        <member name="F:Vanara.PInvoke.CryptNet.CryptGetUrlFromFlags.CRYPT_GET_URL_FROM_EXTENSION">
            <term>Locates the URL from the extension of the object.</term>
        </member>
        <member name="F:Vanara.PInvoke.CryptNet.CryptGetUrlFromFlags.CRYPT_GET_URL_FROM_UNAUTH_ATTRIBUTE">
            <term>Locates the URL from an unauthenticated attribute from the signer information data.</term>
        </member>
        <member name="F:Vanara.PInvoke.CryptNet.CryptGetUrlFromFlags.CRYPT_GET_URL_FROM_AUTH_ATTRIBUTE">
            <term>Locates the URL from an authenticated attribute from the signer information data.</term>
        </member>
        <member name="T:Vanara.PInvoke.CryptNet.TimeValidObjectFlags">
            <summary>A value that determines various retrieval factors such as time-out, source, and validity checks.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptNet.TimeValidObjectFlags.CRYPT_ACCUMULATIVE_TIMEOUT">
            <summary>Use the cumulative time-out registry setting of the client computer for revocation URL retrievals.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptNet.TimeValidObjectFlags.CRYPT_CACHE_ONLY_RETRIEVAL">
            <summary>Retrieve the encoded bits from the client URL cache only. Do not use the wire to retrieve the URL.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptNet.TimeValidObjectFlags.CRYPT_CHECK_FRESHNESS_TIME_VALIDITY">
            <summary>
            Check if the ThisUpdate property or extension of the current context is greater than or equal to the ftValidFor parameter.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptNet.TimeValidObjectFlags.CRYPT_DONT_CHECK_TIME_VALIDITY">
            <summary>
            Do not perform time validity check. Use this to retrieve a more recent base CRL over the wire or to bypass time validity
            check during a cache retrieval. When this flag is set, pftValidFor can be NULL.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptNet.TimeValidObjectFlags.CRYPT_DONT_VERIFY_SIGNATURE">
            <summary>
            Do not perform signature verification. Use this when verification of the retrieved object will be performed outside of this
            function or to force a replacement of a retrieved cache entry with a new cache entry for the object.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptNet.TimeValidObjectFlags.CRYPT_KEEP_TIME_VALID">
            <summary>This value is reserved for future use.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptNet.TimeValidObjectFlags.CRYPT_OCSP_ONLY_RETRIEVAL">
            <summary>
            Retrieves the time valid object from an OCSP responder service only based on Authority Information Access URLs in the
            current context. The CertVerifyRevocation function sets this flag when it is called with the dwFlags parameter set to CERT_VERIFY_REV_SERVER_OCSP_FLAG.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptNet.TimeValidObjectFlags.CRYPT_WIRE_ONLY_RETRIEVAL">
            <summary>Retrieves the encoded bits from the wire only. Does not use the URL cache.</summary>
        </member>
        <member name="M:Vanara.PInvoke.CryptNet.CryptGetObjectUrl(Vanara.PInvoke.Crypt32.SafeOID,System.IntPtr,Vanara.PInvoke.CryptNet.CryptGetUrlFromFlags,System.IntPtr,System.UInt32@,System.IntPtr,System.UInt32@,System.IntPtr)">
            <summary>
            <para>
            The <c>CryptGetObjectUrl</c> function acquires the URL of the remote object from a certificate, certificate trust list (CTL), or
            certificate revocation list (CRL).
            </para>
            <para>
            The function takes the object, decodes it, and provides a pointer to an array of URLs from the object. For example, from a
            certificate, a CRL distribution list of URLs would be in the array.
            </para>
            </summary>
            <param name="pszUrlOid">
            <para>
            A pointer to an object identifier (OID) that identifies the URL being requested. If the HIWORD of the pszUrlOid parameter is
            zero, the LOWORD specifies the integer identifier for the type of the specified structure.
            </para>
            <para>
            This parameter can be one of the following values. For information about how these values affect the pvPara parameter, see the
            heading "For the pvPara parameter" in the <c>Meaning</c> column.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>URL_OID_CERTIFICATE_ISSUER</term>
            <term>
            Provides the URL of the certificate issuer retrieved from the authority information access extension or property of a
            certificate. For the pvPara parameter: A pointer to a CERT_CONTEXT structure that was issued by the issuer whose URL is being requested.
            </term>
            </item>
            <item>
            <term>URL_OID_CERTIFICATE_CRL_DIST_POINT</term>
            <term>
            Provides a list of URLs of the CRL distribution points retrieved from the CRL distribution point extension or property of a
            certificate. For the pvPara parameter: A pointer to a CERT_CONTEXT structure whose CRL distribution point is requested.
            </term>
            </item>
            <item>
            <term>URL_OID_CERTIFICATE_CRL_DIST_POINT_AND_OCSP</term>
            <term>
            Provides a list of OCSP and CRL distribution point URLs from the authority information access (AIA) and CRL distribution point
            extensions or properties of a certificate. The function returns any CRL distribution point URLs first. Before using any OCSP
            URLs, you must remove the L"ocsp:" prefix. For the pvPara parameter: A pointer to a CERT_CONTEXT structure whose OCSP and CRL
            distribution point URLs are requested.
            </term>
            </item>
            <item>
            <term>URL_OID_CERTIFICATE_OCSP</term>
            <term>
            Provides an OCSP URL from the authority information access (AIA) extension or property of a certificate. For the pvPara
            parameter: A pointer to a CERT_CONTEXT structure whose OCSP URL is requested.
            </term>
            </item>
            <item>
            <term>URL_OID_CERTIFICATE_OCSP_AND_CRL_DIST_POINT</term>
            <term>
            Provides a list of OCSP and CRL distribution point URLs from the authority information access (AIA) and CRL distribution point
            extensions or properties of a certificate. The function returns any OCSP URLs first. Before using any OCSP URLs, you must remove
            the L"ocsp:" prefix. For the pvPara parameter: A pointer to a CERT_CONTEXT structure whose OCSP and CRL distribution point URLs
            are requested.
            </term>
            </item>
            <item>
            <term>URL_OID_CERTIFICATE_ONLY_OCSP</term>
            <term>
            Provides a list of OCSP URLs from the authority information access (AIA) extension or property of a certificate. Before using
            any OCSP URLs, you must remove the L"ocsp:" prefix. For the pvPara parameter: A pointer to a CERT_CONTEXT structure whose OCSP
            URLs are requested.
            </term>
            </item>
            <item>
            <term>URL_OID_CTL_ISSUER</term>
            <term>
            Provides the URL of the CTL issuer retrieved from an authority information access attribute method encoded in each signer
            information in the PKCS #7 CTL. For the pvPara parameter: A pointer to a Signer Index CTL_CONTEXT structure that was issued by
            the issuer whose URL, identified by the signer index, is requested.
            </term>
            </item>
            <item>
            <term>URL_OID_CTL_NEXT_UPDATE</term>
            <term>
            Provides the URL of the next update of that CTL retrieved from an authority information access CTL extension, property, or
            signer information attribute method. For the pvPara parameter: A pointer to a Signer Index CTL_CONTEXT structure whose next
            update URL is requested, and an optional signer index, in case it is needed to check the signer information attributes.
            </term>
            </item>
            <item>
            <term>URL_OID_CRL_ISSUER</term>
            <term>
            Provides the URL of the CRL issuer retrieved from a property on a CRL that was inherited from the subject certificate (either
            from the subject certificate issuer or the subject certificate distribution point extension). It is encoded as an authority
            information access extension method. For the pvPara parameter: A pointer to a CRL_CONTEXT structure that was issued by the
            issuer whose URL is requested.
            </term>
            </item>
            <item>
            <term>URL_OID_CERTIFICATE_FRESHEST_CRL</term>
            <term>
            Retrieves the most recent CRL extension or property of the certificate. For the pvPara parameter: The PCCERT_CONTEXT of a
            certificate whose most recent CRL distribution point is being requested.
            </term>
            </item>
            <item>
            <term>URL_OID_CRL_FRESHEST_CRL</term>
            <term>
            Retrieves the most recent CRL extension or property of the CRL. For the pvPara parameter: A pointer to a CERT_CRL_CONTEXT_PAIR
            structure that contains the base CRL of a certificate whose most recent CRL distribution point is being requested.
            </term>
            </item>
            <item>
            <term>URL_OID_CROSS_CERT_DIST_POINT</term>
            <term>
            Retrieves the cross certificate distribution point extension or property of the certificate. For the pvPara parameter: The
            PCCERT_CONTEXT of a certificate whose cross certificate distribution point is being requested.
            </term>
            </item>
            <item>
            <term>URL_OID_CROSS_CERT_SUBJECT_INFO_ACCESS</term>
            <term>
            Retrieves the cross certificate Subject Information Access extension or property of the certificate. For the pvPara parameter:
            The PCCERT_CONTEXT of a certificate whose cross certificate Subject Information Access is being requested.
            </term>
            </item>
            </list>
            </param>
            <param name="pvPara">A structure determined by the value of pszUrlOid. For details, see the description for the pszUrlOid parameter.</param>
            <param name="dwFlags">
            <para>
            A set of flags used to get the URL locator for an object. This can be zero or a combination of one or more of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPT_GET_URL_FROM_PROPERTY</term>
            <term>Locates the URL from the property of the object (the location of the data).</term>
            </item>
            <item>
            <term>CRYPT_GET_URL_FROM_EXTENSION</term>
            <term>Locates the URL from the extension of the object.</term>
            </item>
            <item>
            <term>CRYPT_GET_URL_FROM_UNAUTH_ATTRIBUTE</term>
            <term>Locates the URL from an unauthenticated attribute from the signer information data.</term>
            </item>
            <item>
            <term>CRYPT_GET_URL_FROM_AUTH_ATTRIBUTE</term>
            <term>Locates the URL from an authenticated attribute from the signer information data.</term>
            </item>
            </list>
            </param>
            <param name="pUrlArray">
            <para>
            A pointer to a buffer to receive the data for the value entry. This parameter can be <c>NULL</c> to find the length of the
            buffer required to hold the data.
            </para>
            <para>For more information, see Retrieving Data of Unknown Length.</para>
            </param>
            <param name="pcbUrlArray">
            A pointer to a <c>DWORD</c> that specifies the size, in bytes, of the buffer pointed to by the pUrlArray parameter. When the
            function returns, the <c>DWORD</c> contains the number of bytes stored in the buffer. This parameter can be <c>NULL</c> only if
            pUrlArray is <c>NULL</c>.
            </param>
            <param name="pUrlInfo">An optional pointer to a CRYPT_URL_INFO structure that receives the data for the value entry.</param>
            <param name="pcbUrlInfo">
            <para>
            A pointer to a <c>DWORD</c> that specifies the size, in bytes, of the buffer pointed to by the pUrlArray parameter. When the
            function returns, the <c>DWORD</c> contains the number of bytes stored in the buffer.
            </para>
            <para>
            <c>Note</c> When processing the data returned in the buffer, applications must use the actual size of the data returned. The
            actual size can be slightly smaller than the size of the buffer specified on input. On input, buffer sizes are usually specified
            large enough to ensure that the largest possible output data will fit in the buffer. On output, the variable pointed to by this
            parameter is updated to reflect the actual size of the data copied to the buffer.
            </para>
            </param>
            <param name="pvReserved">Reserved for future use and must be <c>NULL</c>.</param>
            <returns>
            <para>If the function succeeds, the function returns nonzero ( <c>TRUE</c>).</para>
            <para>If the function fails, it returns zero ( <c>FALSE</c>). For extended error information, call GetLastError.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.CryptNet.CryptGetObjectUrl(Vanara.PInvoke.Crypt32.SafeOID,System.IntPtr,Vanara.PInvoke.CryptNet.CryptGetUrlFlags,System.IntPtr,System.UInt32@,System.IntPtr,System.UInt32@,System.IntPtr)">
            <summary>
            <para>
            The <c>CryptGetObjectUrl</c> function acquires the URL of the remote object from a certificate, certificate trust list (CTL), or
            certificate revocation list (CRL).
            </para>
            <para>
            The function takes the object, decodes it, and provides a pointer to an array of URLs from the object. For example, from a
            certificate, a CRL distribution list of URLs would be in the array.
            </para>
            </summary>
            <param name="pszUrlOid">
            <para>
            A pointer to an object identifier (OID) that identifies the URL being requested. If the HIWORD of the pszUrlOid parameter is
            zero, the LOWORD specifies the integer identifier for the type of the specified structure.
            </para>
            <para>
            This parameter can be one of the following values. For information about how these values affect the pvPara parameter, see the
            heading "For the pvPara parameter" in the <c>Meaning</c> column.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>URL_OID_CERTIFICATE_ISSUER</term>
            <term>
            Provides the URL of the certificate issuer retrieved from the authority information access extension or property of a
            certificate. For the pvPara parameter: A pointer to a CERT_CONTEXT structure that was issued by the issuer whose URL is being requested.
            </term>
            </item>
            <item>
            <term>URL_OID_CERTIFICATE_CRL_DIST_POINT</term>
            <term>
            Provides a list of URLs of the CRL distribution points retrieved from the CRL distribution point extension or property of a
            certificate. For the pvPara parameter: A pointer to a CERT_CONTEXT structure whose CRL distribution point is requested.
            </term>
            </item>
            <item>
            <term>URL_OID_CERTIFICATE_CRL_DIST_POINT_AND_OCSP</term>
            <term>
            Provides a list of OCSP and CRL distribution point URLs from the authority information access (AIA) and CRL distribution point
            extensions or properties of a certificate. The function returns any CRL distribution point URLs first. Before using any OCSP
            URLs, you must remove the L"ocsp:" prefix. For the pvPara parameter: A pointer to a CERT_CONTEXT structure whose OCSP and CRL
            distribution point URLs are requested.
            </term>
            </item>
            <item>
            <term>URL_OID_CERTIFICATE_OCSP</term>
            <term>
            Provides an OCSP URL from the authority information access (AIA) extension or property of a certificate. For the pvPara
            parameter: A pointer to a CERT_CONTEXT structure whose OCSP URL is requested.
            </term>
            </item>
            <item>
            <term>URL_OID_CERTIFICATE_OCSP_AND_CRL_DIST_POINT</term>
            <term>
            Provides a list of OCSP and CRL distribution point URLs from the authority information access (AIA) and CRL distribution point
            extensions or properties of a certificate. The function returns any OCSP URLs first. Before using any OCSP URLs, you must remove
            the L"ocsp:" prefix. For the pvPara parameter: A pointer to a CERT_CONTEXT structure whose OCSP and CRL distribution point URLs
            are requested.
            </term>
            </item>
            <item>
            <term>URL_OID_CERTIFICATE_ONLY_OCSP</term>
            <term>
            Provides a list of OCSP URLs from the authority information access (AIA) extension or property of a certificate. Before using
            any OCSP URLs, you must remove the L"ocsp:" prefix. For the pvPara parameter: A pointer to a CERT_CONTEXT structure whose OCSP
            URLs are requested.
            </term>
            </item>
            <item>
            <term>URL_OID_CTL_ISSUER</term>
            <term>
            Provides the URL of the CTL issuer retrieved from an authority information access attribute method encoded in each signer
            information in the PKCS #7 CTL. For the pvPara parameter: A pointer to a Signer Index CTL_CONTEXT structure that was issued by
            the issuer whose URL, identified by the signer index, is requested.
            </term>
            </item>
            <item>
            <term>URL_OID_CTL_NEXT_UPDATE</term>
            <term>
            Provides the URL of the next update of that CTL retrieved from an authority information access CTL extension, property, or
            signer information attribute method. For the pvPara parameter: A pointer to a Signer Index CTL_CONTEXT structure whose next
            update URL is requested, and an optional signer index, in case it is needed to check the signer information attributes.
            </term>
            </item>
            <item>
            <term>URL_OID_CRL_ISSUER</term>
            <term>
            Provides the URL of the CRL issuer retrieved from a property on a CRL that was inherited from the subject certificate (either
            from the subject certificate issuer or the subject certificate distribution point extension). It is encoded as an authority
            information access extension method. For the pvPara parameter: A pointer to a CRL_CONTEXT structure that was issued by the
            issuer whose URL is requested.
            </term>
            </item>
            <item>
            <term>URL_OID_CERTIFICATE_FRESHEST_CRL</term>
            <term>
            Retrieves the most recent CRL extension or property of the certificate. For the pvPara parameter: The PCCERT_CONTEXT of a
            certificate whose most recent CRL distribution point is being requested.
            </term>
            </item>
            <item>
            <term>URL_OID_CRL_FRESHEST_CRL</term>
            <term>
            Retrieves the most recent CRL extension or property of the CRL. For the pvPara parameter: A pointer to a CERT_CRL_CONTEXT_PAIR
            structure that contains the base CRL of a certificate whose most recent CRL distribution point is being requested.
            </term>
            </item>
            <item>
            <term>URL_OID_CROSS_CERT_DIST_POINT</term>
            <term>
            Retrieves the cross certificate distribution point extension or property of the certificate. For the pvPara parameter: The
            PCCERT_CONTEXT of a certificate whose cross certificate distribution point is being requested.
            </term>
            </item>
            <item>
            <term>URL_OID_CROSS_CERT_SUBJECT_INFO_ACCESS</term>
            <term>
            Retrieves the cross certificate Subject Information Access extension or property of the certificate. For the pvPara parameter:
            The PCCERT_CONTEXT of a certificate whose cross certificate Subject Information Access is being requested.
            </term>
            </item>
            </list>
            </param>
            <param name="pvPara">A structure determined by the value of pszUrlOid. For details, see the description for the pszUrlOid parameter.</param>
            <param name="dwFlags">
            <para>
            A set of flags used to get the URL locator for an object. This can be zero or a combination of one or more of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPT_GET_URL_FROM_PROPERTY</term>
            <term>Locates the URL from the property of the object (the location of the data).</term>
            </item>
            <item>
            <term>CRYPT_GET_URL_FROM_EXTENSION</term>
            <term>Locates the URL from the extension of the object.</term>
            </item>
            <item>
            <term>CRYPT_GET_URL_FROM_UNAUTH_ATTRIBUTE</term>
            <term>Locates the URL from an unauthenticated attribute from the signer information data.</term>
            </item>
            <item>
            <term>CRYPT_GET_URL_FROM_AUTH_ATTRIBUTE</term>
            <term>Locates the URL from an authenticated attribute from the signer information data.</term>
            </item>
            </list>
            </param>
            <param name="pUrlArray">
            <para>
            A pointer to a buffer to receive the data for the value entry. This parameter can be <c>NULL</c> to find the length of the
            buffer required to hold the data.
            </para>
            <para>For more information, see Retrieving Data of Unknown Length.</para>
            </param>
            <param name="pcbUrlArray">
            A pointer to a <c>DWORD</c> that specifies the size, in bytes, of the buffer pointed to by the pUrlArray parameter. When the
            function returns, the <c>DWORD</c> contains the number of bytes stored in the buffer. This parameter can be <c>NULL</c> only if
            pUrlArray is <c>NULL</c>.
            </param>
            <param name="pUrlInfo">An optional pointer to a CRYPT_URL_INFO structure that receives the data for the value entry.</param>
            <param name="pcbUrlInfo">
            <para>
            A pointer to a <c>DWORD</c> that specifies the size, in bytes, of the buffer pointed to by the pUrlArray parameter. When the
            function returns, the <c>DWORD</c> contains the number of bytes stored in the buffer.
            </para>
            <para>
            <c>Note</c> When processing the data returned in the buffer, applications must use the actual size of the data returned. The
            actual size can be slightly smaller than the size of the buffer specified on input. On input, buffer sizes are usually specified
            large enough to ensure that the largest possible output data will fit in the buffer. On output, the variable pointed to by this
            parameter is updated to reflect the actual size of the data copied to the buffer.
            </para>
            </param>
            <param name="pvReserved">Reserved for future use and must be <c>NULL</c>.</param>
            <returns>
            <para>If the function succeeds, the function returns nonzero ( <c>TRUE</c>).</para>
            <para>If the function fails, it returns zero ( <c>FALSE</c>). For extended error information, call GetLastError.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.CryptNet.CryptGetTimeValidObject(Vanara.PInvoke.Crypt32.SafeOID,System.IntPtr,Vanara.PInvoke.Crypt32.PCCERT_CONTEXT,System.Runtime.InteropServices.ComTypes.FILETIME@,Vanara.PInvoke.CryptNet.TimeValidObjectFlags,System.UInt32,System.IntPtr@,Vanara.PInvoke.CryptNet.CRYPT_CREDENTIALS@,Vanara.PInvoke.CryptNet.CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO@)">
            <summary>
            The <c>CryptGetTimeValidObject</c> function retrieves a CRL, an OCSP response, or CTL object that is valid within a given
            context and time.
            </summary>
            <param name="pszTimeValidOid">
            <para>
            A pointer to an object identifier (OID) that identifies the object being requested. If the HIWORD of the pszTimeValidOid
            parameter is zero, the LOWORD specifies the integer identifier for the type of the specified structure.
            </para>
            <para>
            This parameter can be one of the following values. For information about how these values affect the pvPara parameter, see the
            heading "For the pvPara parameter" in the Meaning column.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>TIME_VALID_OID_GET_CTL ((LPCSTR)1)</term>
            <term>
            Provides a certificate trust list (CTL) based on a URL obtained from the NextUpdateLocation property or extension of the current
            CTL context. For the pvPara parameter: A pointer to a PCCTL_CONTEXT that represents the current certificate trust list.
            </term>
            </item>
            <item>
            <term>TIME_VALID_OID_GET_CRL</term>
            <term>This value is reserved for future use.</term>
            </item>
            <item>
            <term>TIME_VALID_OID_GET_CRL_FROM_CERT ((LPCSTR)3)</term>
            <term>
            Provides a CRL based on information obtained from the CRL distribution points extension of the current certificate context. For
            the pvPara parameter: A pointer to a PCCERT_CONTEXT that represents the subject certificate.
            </term>
            </item>
            <item>
            <term>TIME_VALID_OID_GET_FRESHEST_CRL_FROM_CERT ((LPCSTR)4)</term>
            <term>
            Provides a delta CRL based on information obtained from the freshest CRL extension of the current certificate context. For the
            pvPara parameter: A pointer to a PCCERT_CONTEXT that represents the subject certificate.
            </term>
            </item>
            <item>
            <term>TIME_VALID_OID_GET_FRESHEST_CRL_FROM_CRL ((LPCSTR)5)</term>
            <term>
            Provides a delta CRL based on information obtained from the freshest CRL extension of the current CRL context. For the pvPara
            parameter: A pointer to a PCCERT_CRL_CONTEXT_PAIR that represents the subject certificate and its base CRL.
            </term>
            </item>
            </list>
            </param>
            <param name="pvPara">
            A structure determined by the value of pszTimeValidOid. For details, see the description for the pszTimeValidOid parameter.
            </param>
            <param name="pIssuer">A pointer to a CERT_CONTEXT containing the issuer's certificate.</param>
            <param name="pftValidFor">
            A pointer to an optional FILETIME structure version of the current system time or a freshness time from the current context.
            </param>
            <param name="dwFlags">
            <para>A value that determines various retrieval factors such as time-out, source, and validity checks.</para>
            <para>The following table lists possible values for the dwFlags parameter.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPT_ACCUMULATIVE_TIMEOUT 0x00000800</term>
            <term>Use the cumulative time-out registry setting of the client computer for revocation URL retrievals.</term>
            </item>
            <item>
            <term>CRYPT_CACHE_ONLY_RETRIEVAL 0x00000002</term>
            <term>Retrieve the encoded bits from the client URL cache only. Do not use the wire to retrieve the URL.</term>
            </item>
            <item>
            <term>CRYPT_CHECK_FRESHNESS_TIME_VALIDITY 0x00000400</term>
            <term>Check if the ThisUpdate property or extension of the current context is greater than or equal to the ftValidFor parameter.</term>
            </item>
            <item>
            <term>CRYPT_DONT_CHECK_TIME_VALIDITY 0x00000200</term>
            <term>
            Do not perform time validity check. Use this to retrieve a more recent base CRL over the wire or to bypass time validity check
            during a cache retrieval. When this flag is set, pftValidFor can be NULL.
            </term>
            </item>
            <item>
            <term>CRYPT_DONT_VERIFY_SIGNATURE 0x00000100</term>
            <term>
            Do not perform signature verification. Use this when verification of the retrieved object will be performed outside of this
            function or to force a replacement of a retrieved cache entry with a new cache entry for the object.
            </term>
            </item>
            <item>
            <term>CRYPT_KEEP_TIME_VALID 0x00000080</term>
            <term>This value is reserved for future use.</term>
            </item>
            <item>
            <term>CRYPT_OCSP_ONLY_RETRIEVAL 0x01000000</term>
            <term>
            Retrieves the time valid object from an OCSP responder service only based on Authority Information Access URLs in the current
            context. The CertVerifyRevocation function sets this flag when it is called with the dwFlags parameter set to CERT_VERIFY_REV_SERVER_OCSP_FLAG.
            </term>
            </item>
            <item>
            <term>CRYPT_WIRE_ONLY_RETRIEVAL 0x00000004</term>
            <term>Retrieves the encoded bits from the wire only. Does not use the URL cache.</term>
            </item>
            </list>
            </param>
            <param name="dwTimeout">
            A value, in milliseconds, that specifies when to terminate an URL retrieval attempt that has not returned a result.
            </param>
            <param name="ppvObject">
            A pointer to an address for the returned object. The return type can be one of the supported types shown in the pszObjectOid
            parameter of the CryptRetrieveObjectByUrl function.
            </param>
            <param name="pCredentials">
            A pointer to an optional CRYPT_CREDENTIALS structure used to access the URL. The only type of credentials currently supported
            are user name and password credentials.
            </param>
            <param name="pExtraInfo">
            A pointer to an optional CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO structure that contains extra information about the cache entry
            for an object.
            </param>
            <returns>
            <para>If the function succeeds, the function returns <c>TRUE</c>.</para>
            <para>If the function fails, it returns <c>FALSE</c>. For extended error information, call GetLastError.</para>
            <para>Some possible error codes follow.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>CRYPT_E_NOT_FOUND</term>
            <term>The caller specified TIME_VALID_OID_GET_CRL for the pszTimeValidOid parameter. This OID is not supported.</term>
            </item>
            <item>
            <term>CRYPT_E_NOT_IN_REVOCATION_DATABASE</term>
            <term>The caller set the CRYPT_OCSP_ONLY_RETRIEVAL flag and the context includes a non-OCSP URL.</term>
            </item>
            <item>
            <term>E_INVALIDARG</term>
            <term>
            The function failed to retrieve a CRL from a certificate context or retrieve a CTL, and it failed to copy any URLs from a cache entry.
            </term>
            </item>
            <item>
            <term>E_OUTOFMEMORY</term>
            <term>The function could not allocate memory for an internal array operation.</term>
            </item>
            <item>
            <term>ERROR_NOT_CONNECTED</term>
            <term>The caller did not set the CRYPT_CACHE_ONLY_RETRIEVAL flag and is not connected to the Internet.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            The Cryptnet dynamic link library implements a time valid object (TVO) cache that is used to support the
            <c>CryptGetTimeValidObject</c> function. The cache is used by a process-global TVO agent where each cache entry consists of the
            following information.
            </para>
            <list type="bullet">
            <item>
            <term>Origin Identifier</term>
            </item>
            <item>
            <term>Context OID</term>
            </item>
            <item>
            <term>Context</term>
            </item>
            <item>
            <term>Retrieval URL</term>
            </item>
            <item>
            <term>Expire Time</term>
            </item>
            <item>
            <term>Offline URL Time Information</term>
            </item>
            </list>
            <para>The TVO agent supports retrieval of TVO objects on-demand or by auto-update.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.CryptNet.CryptGetTimeValidObject(Vanara.PInvoke.Crypt32.SafeOID,System.IntPtr,Vanara.PInvoke.Crypt32.PCCERT_CONTEXT,System.IntPtr,Vanara.PInvoke.CryptNet.TimeValidObjectFlags,System.UInt32,System.IntPtr@,System.IntPtr,System.IntPtr)">
            <summary>
            The <c>CryptGetTimeValidObject</c> function retrieves a CRL, an OCSP response, or CTL object that is valid within a given
            context and time.
            </summary>
            <param name="pszTimeValidOid">
            <para>
            A pointer to an object identifier (OID) that identifies the object being requested. If the HIWORD of the pszTimeValidOid
            parameter is zero, the LOWORD specifies the integer identifier for the type of the specified structure.
            </para>
            <para>
            This parameter can be one of the following values. For information about how these values affect the pvPara parameter, see the
            heading "For the pvPara parameter" in the Meaning column.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>TIME_VALID_OID_GET_CTL ((LPCSTR)1)</term>
            <term>
            Provides a certificate trust list (CTL) based on a URL obtained from the NextUpdateLocation property or extension of the current
            CTL context. For the pvPara parameter: A pointer to a PCCTL_CONTEXT that represents the current certificate trust list.
            </term>
            </item>
            <item>
            <term>TIME_VALID_OID_GET_CRL</term>
            <term>This value is reserved for future use.</term>
            </item>
            <item>
            <term>TIME_VALID_OID_GET_CRL_FROM_CERT ((LPCSTR)3)</term>
            <term>
            Provides a CRL based on information obtained from the CRL distribution points extension of the current certificate context. For
            the pvPara parameter: A pointer to a PCCERT_CONTEXT that represents the subject certificate.
            </term>
            </item>
            <item>
            <term>TIME_VALID_OID_GET_FRESHEST_CRL_FROM_CERT ((LPCSTR)4)</term>
            <term>
            Provides a delta CRL based on information obtained from the freshest CRL extension of the current certificate context. For the
            pvPara parameter: A pointer to a PCCERT_CONTEXT that represents the subject certificate.
            </term>
            </item>
            <item>
            <term>TIME_VALID_OID_GET_FRESHEST_CRL_FROM_CRL ((LPCSTR)5)</term>
            <term>
            Provides a delta CRL based on information obtained from the freshest CRL extension of the current CRL context. For the pvPara
            parameter: A pointer to a PCCERT_CRL_CONTEXT_PAIR that represents the subject certificate and its base CRL.
            </term>
            </item>
            </list>
            </param>
            <param name="pvPara">
            A structure determined by the value of pszTimeValidOid. For details, see the description for the pszTimeValidOid parameter.
            </param>
            <param name="pIssuer">A pointer to a CERT_CONTEXT containing the issuer's certificate.</param>
            <param name="pftValidFor">
            A pointer to an optional FILETIME structure version of the current system time or a freshness time from the current context.
            </param>
            <param name="dwFlags">
            <para>A value that determines various retrieval factors such as time-out, source, and validity checks.</para>
            <para>The following table lists possible values for the dwFlags parameter.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPT_ACCUMULATIVE_TIMEOUT 0x00000800</term>
            <term>Use the cumulative time-out registry setting of the client computer for revocation URL retrievals.</term>
            </item>
            <item>
            <term>CRYPT_CACHE_ONLY_RETRIEVAL 0x00000002</term>
            <term>Retrieve the encoded bits from the client URL cache only. Do not use the wire to retrieve the URL.</term>
            </item>
            <item>
            <term>CRYPT_CHECK_FRESHNESS_TIME_VALIDITY 0x00000400</term>
            <term>Check if the ThisUpdate property or extension of the current context is greater than or equal to the ftValidFor parameter.</term>
            </item>
            <item>
            <term>CRYPT_DONT_CHECK_TIME_VALIDITY 0x00000200</term>
            <term>
            Do not perform time validity check. Use this to retrieve a more recent base CRL over the wire or to bypass time validity check
            during a cache retrieval. When this flag is set, pftValidFor can be NULL.
            </term>
            </item>
            <item>
            <term>CRYPT_DONT_VERIFY_SIGNATURE 0x00000100</term>
            <term>
            Do not perform signature verification. Use this when verification of the retrieved object will be performed outside of this
            function or to force a replacement of a retrieved cache entry with a new cache entry for the object.
            </term>
            </item>
            <item>
            <term>CRYPT_KEEP_TIME_VALID 0x00000080</term>
            <term>This value is reserved for future use.</term>
            </item>
            <item>
            <term>CRYPT_OCSP_ONLY_RETRIEVAL 0x01000000</term>
            <term>
            Retrieves the time valid object from an OCSP responder service only based on Authority Information Access URLs in the current
            context. The CertVerifyRevocation function sets this flag when it is called with the dwFlags parameter set to CERT_VERIFY_REV_SERVER_OCSP_FLAG.
            </term>
            </item>
            <item>
            <term>CRYPT_WIRE_ONLY_RETRIEVAL 0x00000004</term>
            <term>Retrieves the encoded bits from the wire only. Does not use the URL cache.</term>
            </item>
            </list>
            </param>
            <param name="dwTimeout">
            A value, in milliseconds, that specifies when to terminate an URL retrieval attempt that has not returned a result.
            </param>
            <param name="ppvObject">
            A pointer to an address for the returned object. The return type can be one of the supported types shown in the pszObjectOid
            parameter of the CryptRetrieveObjectByUrl function.
            </param>
            <param name="pCredentials">
            A pointer to an optional CRYPT_CREDENTIALS structure used to access the URL. The only type of credentials currently supported
            are user name and password credentials.
            </param>
            <param name="pExtraInfo">
            A pointer to an optional CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO structure that contains extra information about the cache entry
            for an object.
            </param>
            <returns>
            <para>If the function succeeds, the function returns <c>TRUE</c>.</para>
            <para>If the function fails, it returns <c>FALSE</c>. For extended error information, call GetLastError.</para>
            <para>Some possible error codes follow.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>CRYPT_E_NOT_FOUND</term>
            <term>The caller specified TIME_VALID_OID_GET_CRL for the pszTimeValidOid parameter. This OID is not supported.</term>
            </item>
            <item>
            <term>CRYPT_E_NOT_IN_REVOCATION_DATABASE</term>
            <term>The caller set the CRYPT_OCSP_ONLY_RETRIEVAL flag and the context includes a non-OCSP URL.</term>
            </item>
            <item>
            <term>E_INVALIDARG</term>
            <term>
            The function failed to retrieve a CRL from a certificate context or retrieve a CTL, and it failed to copy any URLs from a cache entry.
            </term>
            </item>
            <item>
            <term>E_OUTOFMEMORY</term>
            <term>The function could not allocate memory for an internal array operation.</term>
            </item>
            <item>
            <term>ERROR_NOT_CONNECTED</term>
            <term>The caller did not set the CRYPT_CACHE_ONLY_RETRIEVAL flag and is not connected to the Internet.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            The Cryptnet dynamic link library implements a time valid object (TVO) cache that is used to support the
            <c>CryptGetTimeValidObject</c> function. The cache is used by a process-global TVO agent where each cache entry consists of the
            following information.
            </para>
            <list type="bullet">
            <item>
            <term>Origin Identifier</term>
            </item>
            <item>
            <term>Context OID</term>
            </item>
            <item>
            <term>Context</term>
            </item>
            <item>
            <term>Retrieval URL</term>
            </item>
            <item>
            <term>Expire Time</term>
            </item>
            <item>
            <term>Offline URL Time Information</term>
            </item>
            </list>
            <para>The TVO agent supports retrieval of TVO objects on-demand or by auto-update.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.CryptNet.CryptRetrieveObjectByUrl(System.String,System.String,Vanara.PInvoke.Crypt32.CryptRetrievalFlags,System.UInt32,System.IntPtr@,System.IntPtr,System.IntPtr,System.IntPtr,Vanara.PInvoke.CryptNet.CRYPT_RETRIEVE_AUX_INFO@)">
            <summary>
            <para>
            The <c>CryptRetrieveObjectByUrl</c> function retrieves the public key infrastructure (PKI) object from a location specified by a URL.
            </para>
            <para>These remote objects are in encoded format and are retrieved in a "context" form.</para>
            </summary>
            <param name="pszUrl">
            <para>The address of a PKI object to be retrieved. The following schemes are supported:</para>
            <list type="bullet">
            <item>
            <term>ldap (Lightweight Directory Access Protocol)</term>
            </item>
            <item>
            <term>http</term>
            </item>
            <item>
            <term>https (certificate revocation list (CRL) or online certificate status protocol (OCSP) retrievals only)</term>
            </item>
            <item>
            <term>file</term>
            </item>
            </list>
            </param>
            <param name="pszObjectOid">
            <para>
            The address of a null-terminated ANSI string that identifies the type of object to retrieve. This can be one of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>NULL BLOB</term>
            <term>
            Retrieve one or more data BLOBs. The encoded bits are returned in an array of BLOBs. ppvObject is the address of a
            CRYPT_BLOB_ARRAY structure pointer that receives the BLOB array. When this structure is no longer needed, you must free it by
            passing the address of this structure to the CryptMemFree function.
            </term>
            </item>
            <item>
            <term>CONTEXT_OID_CERTIFICATE certificate</term>
            <term>
            Retrieve one or more certificates. If a single object is being retrieved, ppvObject is the address of a CERT_CONTEXT structure
            pointer that receives the context. When this context is no longer needed, you must free it by passing the CERT_CONTEXT structure
            pointer to the CertFreeCertificateContext function. If multiple objects are being retrieved, ppvObject is the address of an
            HCERTSTORE variable that receives the handle of a store that contains the certificates. When this store is no longer needed, you
            must close it by passing this handle to the CertCloseStore function.
            </term>
            </item>
            <item>
            <term>CONTEXT_OID_CRL CRL</term>
            <term>
            Retrieve one or more certificate revocation lists (CRLs). If a single object is being retrieved, ppvObject is the address of a
            CRL_CONTEXT structure pointer that receives the context. When this context is no longer needed, you must free it by passing the
            CRL_CONTEXT structure pointer to the CertFreeCRLContext function. If multiple objects are being retrieved, ppvObject is the
            address of an HCERTSTORE variable that receives the handle of a store that contains the CRLs. When this store is no longer
            needed, you must close it by passing this handle to the CertCloseStore function.
            </term>
            </item>
            <item>
            <term>CONTEXT_OID_CTL CTL</term>
            <term>
            Retrieve one or more certificate trust lists (CTLs). If a single object is being retrieved, ppvObject is the address of a
            CTL_CONTEXT structure pointer that receives the context. When this context is no longer needed, you must free it by passing the
            CTL_CONTEXT structure pointer to the CertFreeCTLContext function. If multiple objects are being retrieved, ppvObject is the
            address of an HCERTSTORE variable that receives the handle of a store that contains the CTLs. When this store is no longer
            needed, you must close it by passing this handle to the CertCloseStore function.
            </term>
            </item>
            <item>
            <term>CONTEXT_OID_PKCS7 PKCS7</term>
            <term>
            ppvObject is the address of an HCERTSTORE variable that receives the handle of a store that contains the objects from the
            message. When this store is no longer needed, you must close it by passing this handle to the CertCloseStore function.
            </term>
            </item>
            <item>
            <term>CONTEXT_OID_CAPI2_ANY Function will determine appropriate item</term>
            <term>
            ppvObject is the address of an HCERTSTORE variable that receives the handle of a store that contains the objects. When this
            store is no longer needed, you must close it by passing this handle to the CertCloseStore function.
            </term>
            </item>
            <item>
            <term>CONTEXT_OID_OCSP_RESP OCSP Response</term>
            <term>ppvObject is the address of a pointer to a CRYPT_BLOB_ARRAY structure.</term>
            </item>
            </list>
            </param>
            <param name="dwRetrievalFlags">
            <para>
            Determines whether to use the cached URL or a URL retrieved from the wire URL. The form in which objects are returned is
            determined by the value of pszObjectOid.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPT_AIA_RETRIEVAL</term>
            <term>
            Validates the content retrieved by a wire URL before writing the URL to the cache. The default provider does not support the
            HTTPS protocol for AIA retrievals.
            </term>
            </item>
            <item>
            <term>CRYPT_ASYNC_RETRIEVAL</term>
            <term>This value is not supported.</term>
            </item>
            <item>
            <term>CRYPT_CACHE_ONLY_RETRIEVAL</term>
            <term>Retrieves the encoded bits from the URL cache only. Do not use the wire to retrieve the URL.</term>
            </item>
            <item>
            <term>CRYPT_DONT_CACHE_RESULT</term>
            <term>Does not store the retrieved encoded bits to the URL cache. If this flag is not set, the retrieved URL is cached.</term>
            </item>
            <item>
            <term>CRYPT_HTTP_POST_RETRIEVAL</term>
            <term>
            Uses the POST method instead of the default GET method for HTTP retrievals. In a POST URL, additional binary data and header
            strings are appended to the base URL in the following format:
            BaseURL/OptionalURLEscaped&amp;Base64EncodedAdditionalData?OptionalAdditionalHTTPHeaders The following example shows the
            additional binary data delimited by the last slash mark (/) and a Content-Type header delimited by a question mark (?) appended
            to a base URL. When this flag is set, the CryptRetrieveObjectByUrl function parses the URL by using the last slash mark (/) and
            question mark (?) delimiters. The string, which is delimited by a slash mark (/), contains an unescaped URL (that is, a plain
            text URL without escape characters or escape sequences) and Base64 data decoded into binary form before being passed to the
            WinHttpSendRequest function as the lpOptional parameter. The string delimited by a question mark (?) is passed to the
            WinHttpSendRequest function as the pwszHeaders parameter.
            </term>
            </item>
            <item>
            <term>CRYPT_LDAP_AREC_EXCLUSIVE_RETRIEVAL</term>
            <term>
            Performs A-Record-only DNS lookup on the supplied host string, preventing the generation of false DNS queries when resolving
            host names. This flag should be used when passing a host name as opposed to a domain name.
            </term>
            </item>
            <item>
            <term>CRYPT_LDAP_INSERT_ENTRY_ATTRIBUTE</term>
            <term>
            Retrieves the entry index and attribute name for each LDAP object. The beginning of each returned BLOB contains the following
            ANSI string: "entry index in decimal\0attribute name\0" When this flag is set, pszObjectOid must be NULL so that a BLOB is
            returned. This flag only applies to the ldap scheme.
            </term>
            </item>
            <item>
            <term>CRYPT_LDAP_SCOPE_BASE_ONLY_RETRIEVAL</term>
            <term>Fails if the LDAP search scope is not set to base in the URL. Use with LDAP only.</term>
            </item>
            <item>
            <term>CRYPT_LDAP_SIGN_RETRIEVAL</term>
            <term>
            Digitally signs all of the LDAP traffic to and from a server by using the Kerberos authentication protocol. This feature
            provides integrity required by some applications.
            </term>
            </item>
            <item>
            <term>CRYPT_NO_AUTH_RETRIEVAL</term>
            <term>Inhibits automatic authentication handling.</term>
            </item>
            <item>
            <term>CRYPT_NOT_MODIFIED_RETRIEVAL</term>
            <term>
            Enables a conditional HTTP URL retrieval. When this flag is set, for a conditional retrieval that returns
            HTTP_STATUS_NOT_MODIFIED, CryptRetrieveObjectByUrl returns TRUE and ppvObject is set to NULL. If pAuxInfo is not NULL,
            dwHttpStatusCode is set to HTTP_STATUS_NOT_MODIFIED. Otherwise, ppvObject is updated for a successful retrieval.
            </term>
            </item>
            <item>
            <term>CRYPT_OFFLINE_CHECK_RETRIEVAL</term>
            <term>
            Keeps track of offline failures and delays before hitting the wire on subsequent retrievals. This value is for wire retrieval only.
            </term>
            </item>
            <item>
            <term>CRYPT_PROXY_CACHE_RETRIEVAL</term>
            <term>
            Enables proxy cache retrieval of an object. If a proxy cache was not explicitly bypassed, fProxyCacheRetrieval is set to TRUE in
            pAuxInfo. This value only applies to HTTP URL retrievals.
            </term>
            </item>
            <item>
            <term>CRYPT_RETRIEVE_MULTIPLE_OBJECTS</term>
            <term>
            Retrieves multiple objects if available. All objects must be of a homogeneous object type as determined by the value of
            pszObjectOid, unless the object identifier (OID) value is CONTEXT_OID_CAPI2_ANY.
            </term>
            </item>
            <item>
            <term>CRYPT_STICKY_CACHE_RETRIEVAL</term>
            <term>Tags the URL as exempt from being flushed from the cache. For more information, see STICKY_CACHE_ENTRY in INTERNET_CACHE_ENTRY_INFO.</term>
            </item>
            <item>
            <term>CRYPT_VERIFY_CONTEXT_SIGNATURE</term>
            <term>
            Acquires signature verification on the context created. In this case pszObjectOid must be non-NULL and pvVerify points to the
            signer certificate context.
            </term>
            </item>
            <item>
            <term>CRYPT_VERIFY_DATA_HASH</term>
            <term>This flag is not implemented. Do not use it.</term>
            </item>
            <item>
            <term>CRYPT_WIRE_ONLY_RETRIEVAL</term>
            <term>Retrieves the encoded bits from the wire only. Does not use the URL cache.</term>
            </item>
            </list>
            </param>
            <param name="dwTimeout">
            Specifies the maximum number of milliseconds to wait for retrieval. If a value of zero is specified, this function does not time
            out. This parameter is not used if the URL scheme is file:///.
            </param>
            <param name="ppvObject">
            The address of a pointer to the returned object. The return type can be one of the supported types shown in pszObjectOid.
            </param>
            <param name="hAsyncRetrieve">This parameter is reserved and must be set to <c>NULL</c>.</param>
            <param name="pCredentials">This parameter is not used.</param>
            <param name="pvVerify">
            A pointer to a verification object. This object is a function of the dwRetrievalFlags parameter. It can be <c>NULL</c> to
            indicate that the caller is not interested in getting the certificate context or index of the signer if dwRetrievalFlags is CRYPT_VERIFY_CONTEXT_SIGNATURE.
            </param>
            <param name="pAuxInfo">
            An optional pointer to a CRYPT_RETRIEVE_AUX_INFO structure. If not <c>NULL</c> and if the <c>cbSize</c> member of the structure
            is set, this parameter returns the time of the last successful wire retrieval.
            </param>
            <returns>
            <para>If the function succeeds, the return value is nonzero ( <c>TRUE</c>).</para>
            <para>If the function fails, the return value is zero ( <c>FALSE</c>).</para>
            </returns>
            <remarks>
            <para>
            The remote object retrieval manager exposes two provider models. One is the Scheme Provider model that allows for installable
            protocol providers as defined by the URL scheme, that is, ldap, http, ftp, or file. The scheme provider entry point is the same
            as the <c>CryptRetrieveObjectByUrl</c> function; however, the *ppvObject returned is always a counted array of encoded bits (one
            per object retrieved).
            </para>
            <para>
            The second provider model is the Context Provider model that allows for installable creators of the context handles (objects)
            based on the retrieved encoded bits. These are dispatched based on the object identifier (OID) specified in the call to <c>CryptRetrieveObjectByUrl</c>.
            </para>
            <para>
            Individual PKI objects such as certificates, trusts lists, revocation lists, PKCS #7 messages, and multiple homogenous objects
            can be retrieved. Starting with Windows Vista with Service Pack 1 (SP1) and Windows Server 2008, security of "http:" and "ldap:"
            retrievals have been hardened. For more information, see http://support.microsoft.com/kb/946401.
            </para>
            <para>This function supports "http:" and "ldap:" URL schemes as well as newly defined schemes.</para>
            <para>
            <c>Windows XP:</c>"ftp:" is not supported for network retrieval. For a summary of changes to the CryptoAPI certificate chain
            validation logic in Q835732 on Windows XP, see http://support.microsoft.com/kb/887195.
            </para>
            <para><c>Note</c> By default, "file:" is not supported for network retrieval.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.CryptNet.CryptRetrieveObjectByUrl(Vanara.PInvoke.Crypt32.SafeOID,Vanara.PInvoke.Crypt32.SafeOID,System.UInt32,System.UInt32,System.IntPtr@,System.IntPtr,Vanara.PInvoke.CryptNet.CRYPT_CREDENTIALS@,System.IntPtr,Vanara.PInvoke.CryptNet.CRYPT_RETRIEVE_AUX_INFO@)">
            <summary>
            <para>
            The <c>CryptRetrieveObjectByUrl</c> function retrieves the public key infrastructure (PKI) object from a location specified by a URL.
            </para>
            <para>These remote objects are in encoded format and are retrieved in a "context" form.</para>
            </summary>
            <param name="pszUrl">
            <para>The address of a PKI object to be retrieved. The following schemes are supported:</para>
            <list type="bullet">
            <item>
            <term>ldap (Lightweight Directory Access Protocol)</term>
            </item>
            <item>
            <term>http</term>
            </item>
            <item>
            <term>https (certificate revocation list (CRL) or online certificate status protocol (OCSP) retrievals only)</term>
            </item>
            <item>
            <term>file</term>
            </item>
            </list>
            </param>
            <param name="pszObjectOid">
            <para>
            The address of a null-terminated ANSI string that identifies the type of object to retrieve. This can be one of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>NULL BLOB</term>
            <term>
            Retrieve one or more data BLOBs. The encoded bits are returned in an array of BLOBs. ppvObject is the address of a
            CRYPT_BLOB_ARRAY structure pointer that receives the BLOB array. When this structure is no longer needed, you must free it by
            passing the address of this structure to the CryptMemFree function.
            </term>
            </item>
            <item>
            <term>CONTEXT_OID_CERTIFICATE certificate</term>
            <term>
            Retrieve one or more certificates. If a single object is being retrieved, ppvObject is the address of a CERT_CONTEXT structure
            pointer that receives the context. When this context is no longer needed, you must free it by passing the CERT_CONTEXT structure
            pointer to the CertFreeCertificateContext function. If multiple objects are being retrieved, ppvObject is the address of an
            HCERTSTORE variable that receives the handle of a store that contains the certificates. When this store is no longer needed, you
            must close it by passing this handle to the CertCloseStore function.
            </term>
            </item>
            <item>
            <term>CONTEXT_OID_CRL CRL</term>
            <term>
            Retrieve one or more certificate revocation lists (CRLs). If a single object is being retrieved, ppvObject is the address of a
            CRL_CONTEXT structure pointer that receives the context. When this context is no longer needed, you must free it by passing the
            CRL_CONTEXT structure pointer to the CertFreeCRLContext function. If multiple objects are being retrieved, ppvObject is the
            address of an HCERTSTORE variable that receives the handle of a store that contains the CRLs. When this store is no longer
            needed, you must close it by passing this handle to the CertCloseStore function.
            </term>
            </item>
            <item>
            <term>CONTEXT_OID_CTL CTL</term>
            <term>
            Retrieve one or more certificate trust lists (CTLs). If a single object is being retrieved, ppvObject is the address of a
            CTL_CONTEXT structure pointer that receives the context. When this context is no longer needed, you must free it by passing the
            CTL_CONTEXT structure pointer to the CertFreeCTLContext function. If multiple objects are being retrieved, ppvObject is the
            address of an HCERTSTORE variable that receives the handle of a store that contains the CTLs. When this store is no longer
            needed, you must close it by passing this handle to the CertCloseStore function.
            </term>
            </item>
            <item>
            <term>CONTEXT_OID_PKCS7 PKCS7</term>
            <term>
            ppvObject is the address of an HCERTSTORE variable that receives the handle of a store that contains the objects from the
            message. When this store is no longer needed, you must close it by passing this handle to the CertCloseStore function.
            </term>
            </item>
            <item>
            <term>CONTEXT_OID_CAPI2_ANY Function will determine appropriate item</term>
            <term>
            ppvObject is the address of an HCERTSTORE variable that receives the handle of a store that contains the objects. When this
            store is no longer needed, you must close it by passing this handle to the CertCloseStore function.
            </term>
            </item>
            <item>
            <term>CONTEXT_OID_OCSP_RESP OCSP Response</term>
            <term>ppvObject is the address of a pointer to a CRYPT_BLOB_ARRAY structure.</term>
            </item>
            </list>
            </param>
            <param name="dwRetrievalFlags">
            <para>
            Determines whether to use the cached URL or a URL retrieved from the wire URL. The form in which objects are returned is
            determined by the value of pszObjectOid.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPT_AIA_RETRIEVAL</term>
            <term>
            Validates the content retrieved by a wire URL before writing the URL to the cache. The default provider does not support the
            HTTPS protocol for AIA retrievals.
            </term>
            </item>
            <item>
            <term>CRYPT_ASYNC_RETRIEVAL</term>
            <term>This value is not supported.</term>
            </item>
            <item>
            <term>CRYPT_CACHE_ONLY_RETRIEVAL</term>
            <term>Retrieves the encoded bits from the URL cache only. Do not use the wire to retrieve the URL.</term>
            </item>
            <item>
            <term>CRYPT_DONT_CACHE_RESULT</term>
            <term>Does not store the retrieved encoded bits to the URL cache. If this flag is not set, the retrieved URL is cached.</term>
            </item>
            <item>
            <term>CRYPT_HTTP_POST_RETRIEVAL</term>
            <term>
            Uses the POST method instead of the default GET method for HTTP retrievals. In a POST URL, additional binary data and header
            strings are appended to the base URL in the following format:
            BaseURL/OptionalURLEscaped&amp;Base64EncodedAdditionalData?OptionalAdditionalHTTPHeaders The following example shows the
            additional binary data delimited by the last slash mark (/) and a Content-Type header delimited by a question mark (?) appended
            to a base URL. When this flag is set, the CryptRetrieveObjectByUrl function parses the URL by using the last slash mark (/) and
            question mark (?) delimiters. The string, which is delimited by a slash mark (/), contains an unescaped URL (that is, a plain
            text URL without escape characters or escape sequences) and Base64 data decoded into binary form before being passed to the
            WinHttpSendRequest function as the lpOptional parameter. The string delimited by a question mark (?) is passed to the
            WinHttpSendRequest function as the pwszHeaders parameter.
            </term>
            </item>
            <item>
            <term>CRYPT_LDAP_AREC_EXCLUSIVE_RETRIEVAL</term>
            <term>
            Performs A-Record-only DNS lookup on the supplied host string, preventing the generation of false DNS queries when resolving
            host names. This flag should be used when passing a host name as opposed to a domain name.
            </term>
            </item>
            <item>
            <term>CRYPT_LDAP_INSERT_ENTRY_ATTRIBUTE</term>
            <term>
            Retrieves the entry index and attribute name for each LDAP object. The beginning of each returned BLOB contains the following
            ANSI string: "entry index in decimal\0attribute name\0" When this flag is set, pszObjectOid must be NULL so that a BLOB is
            returned. This flag only applies to the ldap scheme.
            </term>
            </item>
            <item>
            <term>CRYPT_LDAP_SCOPE_BASE_ONLY_RETRIEVAL</term>
            <term>Fails if the LDAP search scope is not set to base in the URL. Use with LDAP only.</term>
            </item>
            <item>
            <term>CRYPT_LDAP_SIGN_RETRIEVAL</term>
            <term>
            Digitally signs all of the LDAP traffic to and from a server by using the Kerberos authentication protocol. This feature
            provides integrity required by some applications.
            </term>
            </item>
            <item>
            <term>CRYPT_NO_AUTH_RETRIEVAL</term>
            <term>Inhibits automatic authentication handling.</term>
            </item>
            <item>
            <term>CRYPT_NOT_MODIFIED_RETRIEVAL</term>
            <term>
            Enables a conditional HTTP URL retrieval. When this flag is set, for a conditional retrieval that returns
            HTTP_STATUS_NOT_MODIFIED, CryptRetrieveObjectByUrl returns TRUE and ppvObject is set to NULL. If pAuxInfo is not NULL,
            dwHttpStatusCode is set to HTTP_STATUS_NOT_MODIFIED. Otherwise, ppvObject is updated for a successful retrieval.
            </term>
            </item>
            <item>
            <term>CRYPT_OFFLINE_CHECK_RETRIEVAL</term>
            <term>
            Keeps track of offline failures and delays before hitting the wire on subsequent retrievals. This value is for wire retrieval only.
            </term>
            </item>
            <item>
            <term>CRYPT_PROXY_CACHE_RETRIEVAL</term>
            <term>
            Enables proxy cache retrieval of an object. If a proxy cache was not explicitly bypassed, fProxyCacheRetrieval is set to TRUE in
            pAuxInfo. This value only applies to HTTP URL retrievals.
            </term>
            </item>
            <item>
            <term>CRYPT_RETRIEVE_MULTIPLE_OBJECTS</term>
            <term>
            Retrieves multiple objects if available. All objects must be of a homogeneous object type as determined by the value of
            pszObjectOid, unless the object identifier (OID) value is CONTEXT_OID_CAPI2_ANY.
            </term>
            </item>
            <item>
            <term>CRYPT_STICKY_CACHE_RETRIEVAL</term>
            <term>Tags the URL as exempt from being flushed from the cache. For more information, see STICKY_CACHE_ENTRY in INTERNET_CACHE_ENTRY_INFO.</term>
            </item>
            <item>
            <term>CRYPT_VERIFY_CONTEXT_SIGNATURE</term>
            <term>
            Acquires signature verification on the context created. In this case pszObjectOid must be non-NULL and pvVerify points to the
            signer certificate context.
            </term>
            </item>
            <item>
            <term>CRYPT_VERIFY_DATA_HASH</term>
            <term>This flag is not implemented. Do not use it.</term>
            </item>
            <item>
            <term>CRYPT_WIRE_ONLY_RETRIEVAL</term>
            <term>Retrieves the encoded bits from the wire only. Does not use the URL cache.</term>
            </item>
            </list>
            </param>
            <param name="dwTimeout">
            Specifies the maximum number of milliseconds to wait for retrieval. If a value of zero is specified, this function does not time
            out. This parameter is not used if the URL scheme is file:///.
            </param>
            <param name="ppvObject">
            The address of a pointer to the returned object. The return type can be one of the supported types shown in pszObjectOid.
            </param>
            <param name="hAsyncRetrieve">This parameter is reserved and must be set to <c>NULL</c>.</param>
            <param name="pCredentials">This parameter is not used.</param>
            <param name="pvVerify">
            A pointer to a verification object. This object is a function of the dwRetrievalFlags parameter. It can be <c>NULL</c> to
            indicate that the caller is not interested in getting the certificate context or index of the signer if dwRetrievalFlags is CRYPT_VERIFY_CONTEXT_SIGNATURE.
            </param>
            <param name="pAuxInfo">
            An optional pointer to a CRYPT_RETRIEVE_AUX_INFO structure. If not <c>NULL</c> and if the <c>cbSize</c> member of the structure
            is set, this parameter returns the time of the last successful wire retrieval.
            </param>
            <returns>
            <para>If the function succeeds, the return value is nonzero ( <c>TRUE</c>).</para>
            <para>If the function fails, the return value is zero ( <c>FALSE</c>).</para>
            </returns>
            <remarks>
            <para>
            The remote object retrieval manager exposes two provider models. One is the Scheme Provider model that allows for installable
            protocol providers as defined by the URL scheme, that is, ldap, http, ftp, or file. The scheme provider entry point is the same
            as the <c>CryptRetrieveObjectByUrl</c> function; however, the *ppvObject returned is always a counted array of encoded bits (one
            per object retrieved).
            </para>
            <para>
            The second provider model is the Context Provider model that allows for installable creators of the context handles (objects)
            based on the retrieved encoded bits. These are dispatched based on the object identifier (OID) specified in the call to <c>CryptRetrieveObjectByUrl</c>.
            </para>
            <para>
            Individual PKI objects such as certificates, trusts lists, revocation lists, PKCS #7 messages, and multiple homogenous objects
            can be retrieved. Starting with Windows Vista with Service Pack 1 (SP1) and Windows Server 2008, security of "http:" and "ldap:"
            retrievals have been hardened. For more information, see http://support.microsoft.com/kb/946401.
            </para>
            <para>This function supports "http:" and "ldap:" URL schemes as well as newly defined schemes.</para>
            <para>
            <c>Windows XP:</c>"ftp:" is not supported for network retrieval. For a summary of changes to the CryptoAPI certificate chain
            validation logic in Q835732 on Windows XP, see http://support.microsoft.com/kb/887195.
            </para>
            <para><c>Note</c> By default, "file:" is not supported for network retrieval.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.CryptNet.CryptRetrieveObjectByUrl(Vanara.PInvoke.Crypt32.SafeOID,Vanara.PInvoke.Crypt32.SafeOID,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            <para>
            The <c>CryptRetrieveObjectByUrl</c> function retrieves the public key infrastructure (PKI) object from a location specified by a URL.
            </para>
            <para>These remote objects are in encoded format and are retrieved in a "context" form.</para>
            </summary>
            <param name="pszUrl">
            <para>The address of a PKI object to be retrieved. The following schemes are supported:</para>
            <list type="bullet">
            <item>
            <term>ldap (Lightweight Directory Access Protocol)</term>
            </item>
            <item>
            <term>http</term>
            </item>
            <item>
            <term>https (certificate revocation list (CRL) or online certificate status protocol (OCSP) retrievals only)</term>
            </item>
            <item>
            <term>file</term>
            </item>
            </list>
            </param>
            <param name="pszObjectOid">
            <para>
            The address of a null-terminated ANSI string that identifies the type of object to retrieve. This can be one of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>NULL BLOB</term>
            <term>
            Retrieve one or more data BLOBs. The encoded bits are returned in an array of BLOBs. ppvObject is the address of a
            CRYPT_BLOB_ARRAY structure pointer that receives the BLOB array. When this structure is no longer needed, you must free it by
            passing the address of this structure to the CryptMemFree function.
            </term>
            </item>
            <item>
            <term>CONTEXT_OID_CERTIFICATE certificate</term>
            <term>
            Retrieve one or more certificates. If a single object is being retrieved, ppvObject is the address of a CERT_CONTEXT structure
            pointer that receives the context. When this context is no longer needed, you must free it by passing the CERT_CONTEXT structure
            pointer to the CertFreeCertificateContext function. If multiple objects are being retrieved, ppvObject is the address of an
            HCERTSTORE variable that receives the handle of a store that contains the certificates. When this store is no longer needed, you
            must close it by passing this handle to the CertCloseStore function.
            </term>
            </item>
            <item>
            <term>CONTEXT_OID_CRL CRL</term>
            <term>
            Retrieve one or more certificate revocation lists (CRLs). If a single object is being retrieved, ppvObject is the address of a
            CRL_CONTEXT structure pointer that receives the context. When this context is no longer needed, you must free it by passing the
            CRL_CONTEXT structure pointer to the CertFreeCRLContext function. If multiple objects are being retrieved, ppvObject is the
            address of an HCERTSTORE variable that receives the handle of a store that contains the CRLs. When this store is no longer
            needed, you must close it by passing this handle to the CertCloseStore function.
            </term>
            </item>
            <item>
            <term>CONTEXT_OID_CTL CTL</term>
            <term>
            Retrieve one or more certificate trust lists (CTLs). If a single object is being retrieved, ppvObject is the address of a
            CTL_CONTEXT structure pointer that receives the context. When this context is no longer needed, you must free it by passing the
            CTL_CONTEXT structure pointer to the CertFreeCTLContext function. If multiple objects are being retrieved, ppvObject is the
            address of an HCERTSTORE variable that receives the handle of a store that contains the CTLs. When this store is no longer
            needed, you must close it by passing this handle to the CertCloseStore function.
            </term>
            </item>
            <item>
            <term>CONTEXT_OID_PKCS7 PKCS7</term>
            <term>
            ppvObject is the address of an HCERTSTORE variable that receives the handle of a store that contains the objects from the
            message. When this store is no longer needed, you must close it by passing this handle to the CertCloseStore function.
            </term>
            </item>
            <item>
            <term>CONTEXT_OID_CAPI2_ANY Function will determine appropriate item</term>
            <term>
            ppvObject is the address of an HCERTSTORE variable that receives the handle of a store that contains the objects. When this
            store is no longer needed, you must close it by passing this handle to the CertCloseStore function.
            </term>
            </item>
            <item>
            <term>CONTEXT_OID_OCSP_RESP OCSP Response</term>
            <term>ppvObject is the address of a pointer to a CRYPT_BLOB_ARRAY structure.</term>
            </item>
            </list>
            </param>
            <param name="dwRetrievalFlags">
            <para>
            Determines whether to use the cached URL or a URL retrieved from the wire URL. The form in which objects are returned is
            determined by the value of pszObjectOid.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPT_AIA_RETRIEVAL</term>
            <term>
            Validates the content retrieved by a wire URL before writing the URL to the cache. The default provider does not support the
            HTTPS protocol for AIA retrievals.
            </term>
            </item>
            <item>
            <term>CRYPT_ASYNC_RETRIEVAL</term>
            <term>This value is not supported.</term>
            </item>
            <item>
            <term>CRYPT_CACHE_ONLY_RETRIEVAL</term>
            <term>Retrieves the encoded bits from the URL cache only. Do not use the wire to retrieve the URL.</term>
            </item>
            <item>
            <term>CRYPT_DONT_CACHE_RESULT</term>
            <term>Does not store the retrieved encoded bits to the URL cache. If this flag is not set, the retrieved URL is cached.</term>
            </item>
            <item>
            <term>CRYPT_HTTP_POST_RETRIEVAL</term>
            <term>
            Uses the POST method instead of the default GET method for HTTP retrievals. In a POST URL, additional binary data and header
            strings are appended to the base URL in the following format:
            BaseURL/OptionalURLEscaped&amp;Base64EncodedAdditionalData?OptionalAdditionalHTTPHeaders The following example shows the
            additional binary data delimited by the last slash mark (/) and a Content-Type header delimited by a question mark (?) appended
            to a base URL. When this flag is set, the CryptRetrieveObjectByUrl function parses the URL by using the last slash mark (/) and
            question mark (?) delimiters. The string, which is delimited by a slash mark (/), contains an unescaped URL (that is, a plain
            text URL without escape characters or escape sequences) and Base64 data decoded into binary form before being passed to the
            WinHttpSendRequest function as the lpOptional parameter. The string delimited by a question mark (?) is passed to the
            WinHttpSendRequest function as the pwszHeaders parameter.
            </term>
            </item>
            <item>
            <term>CRYPT_LDAP_AREC_EXCLUSIVE_RETRIEVAL</term>
            <term>
            Performs A-Record-only DNS lookup on the supplied host string, preventing the generation of false DNS queries when resolving
            host names. This flag should be used when passing a host name as opposed to a domain name.
            </term>
            </item>
            <item>
            <term>CRYPT_LDAP_INSERT_ENTRY_ATTRIBUTE</term>
            <term>
            Retrieves the entry index and attribute name for each LDAP object. The beginning of each returned BLOB contains the following
            ANSI string: "entry index in decimal\0attribute name\0" When this flag is set, pszObjectOid must be NULL so that a BLOB is
            returned. This flag only applies to the ldap scheme.
            </term>
            </item>
            <item>
            <term>CRYPT_LDAP_SCOPE_BASE_ONLY_RETRIEVAL</term>
            <term>Fails if the LDAP search scope is not set to base in the URL. Use with LDAP only.</term>
            </item>
            <item>
            <term>CRYPT_LDAP_SIGN_RETRIEVAL</term>
            <term>
            Digitally signs all of the LDAP traffic to and from a server by using the Kerberos authentication protocol. This feature
            provides integrity required by some applications.
            </term>
            </item>
            <item>
            <term>CRYPT_NO_AUTH_RETRIEVAL</term>
            <term>Inhibits automatic authentication handling.</term>
            </item>
            <item>
            <term>CRYPT_NOT_MODIFIED_RETRIEVAL</term>
            <term>
            Enables a conditional HTTP URL retrieval. When this flag is set, for a conditional retrieval that returns
            HTTP_STATUS_NOT_MODIFIED, CryptRetrieveObjectByUrl returns TRUE and ppvObject is set to NULL. If pAuxInfo is not NULL,
            dwHttpStatusCode is set to HTTP_STATUS_NOT_MODIFIED. Otherwise, ppvObject is updated for a successful retrieval.
            </term>
            </item>
            <item>
            <term>CRYPT_OFFLINE_CHECK_RETRIEVAL</term>
            <term>
            Keeps track of offline failures and delays before hitting the wire on subsequent retrievals. This value is for wire retrieval only.
            </term>
            </item>
            <item>
            <term>CRYPT_PROXY_CACHE_RETRIEVAL</term>
            <term>
            Enables proxy cache retrieval of an object. If a proxy cache was not explicitly bypassed, fProxyCacheRetrieval is set to TRUE in
            pAuxInfo. This value only applies to HTTP URL retrievals.
            </term>
            </item>
            <item>
            <term>CRYPT_RETRIEVE_MULTIPLE_OBJECTS</term>
            <term>
            Retrieves multiple objects if available. All objects must be of a homogeneous object type as determined by the value of
            pszObjectOid, unless the object identifier (OID) value is CONTEXT_OID_CAPI2_ANY.
            </term>
            </item>
            <item>
            <term>CRYPT_STICKY_CACHE_RETRIEVAL</term>
            <term>Tags the URL as exempt from being flushed from the cache. For more information, see STICKY_CACHE_ENTRY in INTERNET_CACHE_ENTRY_INFO.</term>
            </item>
            <item>
            <term>CRYPT_VERIFY_CONTEXT_SIGNATURE</term>
            <term>
            Acquires signature verification on the context created. In this case pszObjectOid must be non-NULL and pvVerify points to the
            signer certificate context.
            </term>
            </item>
            <item>
            <term>CRYPT_VERIFY_DATA_HASH</term>
            <term>This flag is not implemented. Do not use it.</term>
            </item>
            <item>
            <term>CRYPT_WIRE_ONLY_RETRIEVAL</term>
            <term>Retrieves the encoded bits from the wire only. Does not use the URL cache.</term>
            </item>
            </list>
            </param>
            <param name="dwTimeout">
            Specifies the maximum number of milliseconds to wait for retrieval. If a value of zero is specified, this function does not time
            out. This parameter is not used if the URL scheme is file:///.
            </param>
            <param name="ppvObject">
            The address of a pointer to the returned object. The return type can be one of the supported types shown in pszObjectOid.
            </param>
            <param name="hAsyncRetrieve">This parameter is reserved and must be set to <c>NULL</c>.</param>
            <param name="pCredentials">This parameter is not used.</param>
            <param name="pvVerify">
            A pointer to a verification object. This object is a function of the dwRetrievalFlags parameter. It can be <c>NULL</c> to
            indicate that the caller is not interested in getting the certificate context or index of the signer if dwRetrievalFlags is CRYPT_VERIFY_CONTEXT_SIGNATURE.
            </param>
            <param name="pAuxInfo">
            An optional pointer to a CRYPT_RETRIEVE_AUX_INFO structure. If not <c>NULL</c> and if the <c>cbSize</c> member of the structure
            is set, this parameter returns the time of the last successful wire retrieval.
            </param>
            <returns>
            <para>If the function succeeds, the return value is nonzero ( <c>TRUE</c>).</para>
            <para>If the function fails, the return value is zero ( <c>FALSE</c>).</para>
            </returns>
            <remarks>
            <para>
            The remote object retrieval manager exposes two provider models. One is the Scheme Provider model that allows for installable
            protocol providers as defined by the URL scheme, that is, ldap, http, ftp, or file. The scheme provider entry point is the same
            as the <c>CryptRetrieveObjectByUrl</c> function; however, the *ppvObject returned is always a counted array of encoded bits (one
            per object retrieved).
            </para>
            <para>
            The second provider model is the Context Provider model that allows for installable creators of the context handles (objects)
            based on the retrieved encoded bits. These are dispatched based on the object identifier (OID) specified in the call to <c>CryptRetrieveObjectByUrl</c>.
            </para>
            <para>
            Individual PKI objects such as certificates, trusts lists, revocation lists, PKCS #7 messages, and multiple homogenous objects
            can be retrieved. Starting with Windows Vista with Service Pack 1 (SP1) and Windows Server 2008, security of "http:" and "ldap:"
            retrievals have been hardened. For more information, see http://support.microsoft.com/kb/946401.
            </para>
            <para>This function supports "http:" and "ldap:" URL schemes as well as newly defined schemes.</para>
            <para>
            <c>Windows XP:</c>"ftp:" is not supported for network retrieval. For a summary of changes to the CryptoAPI certificate chain
            validation logic in Q835732 on Windows XP, see http://support.microsoft.com/kb/887195.
            </para>
            <para><c>Note</c> By default, "file:" is not supported for network retrieval.</para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.CryptNet.CERT_REVOCATION_CHAIN_PARA">
            <summary>
            The <c>CERT_REVOCATION_CHAIN_PARA</c> structure contains parameters used for building a chain for an independent online
            certificate status protocol (OCSP) response signer certificate. The CERT_REVOCATION_PARA and
            CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO structure definitions include optional pointers to this structure.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptNet.CERT_REVOCATION_CHAIN_PARA.cbSize">
            <summary>The size, in bytes, of this structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptNet.CERT_REVOCATION_CHAIN_PARA.hChainEngine">
            <summary>A handle to the chain engine used by the caller.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptNet.CERT_REVOCATION_CHAIN_PARA.hAdditionalStore">
            <summary>A handle to a store that contains the certificates used to build the original chain. The handle can be <c>NULL</c>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptNet.CERT_REVOCATION_CHAIN_PARA.dwChainFlags">
            <summary>
            <para>A value for the dwFlags parameter passed to the CertGetCertificateChain function.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_CHAIN_REVOCATION_CHECK_OCSP_CERT 0x04000000</term>
            <term>
            This flag will be set by the CertVerifyRevocation provider when it calls CertGetCertificateChain with an independent OCSP
            signer certificate. When set, CertGetCertificateChain will call CertVerifyRevocation without setting the pointer to the
            above CERT_REVOCATION_CHAIN_PARA data structure; this helps to prevent circular revocation checking.
            </term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptNet.CERT_REVOCATION_CHAIN_PARA.dwUrlRetrievalTimeout">
            <summary>
            A value that contains the time-out limit, in milliseconds. If zero, the revocation handler's default time-out is used.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptNet.CERT_REVOCATION_CHAIN_PARA.pftCurrentTime">
            <summary>
            A pointer to a FILETIME structure used in the freshness time check. If this pointer is <c>NULL</c>, the revocation handler
            uses the current time.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptNet.CERT_REVOCATION_CHAIN_PARA.pftCacheResync">
            <summary>
            A pointer to a FILETIME structure that governs the use of cached information. Any information cached before this time is
            considered invalid and new information is retrieved. When set, this value overrides the registry configuration CacheResync time.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptNet.CERT_REVOCATION_CHAIN_PARA.cbMaxUrlRetrievalByteCount">
            <summary>
            <para>
            A <c>DWORD</c> value that specifies the maximum number of bytes to download from the URL object. A value of 0 specifies no limit.
            </para>
            <para><c>Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:</c> This member is not supported.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.CryptNet.CRYPT_CREDENTIALS">
            <summary>
            The <c>CRYPT_CREDENTIALS</c> structure contains information about credentials that can be passed as optional input to a remote
            object retrieval function such as CryptRetrieveObjectByUrl or CryptGetTimeValidObject.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptNet.CRYPT_CREDENTIALS.cbSize">
            <summary>The size in bytes of this structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptNet.CRYPT_CREDENTIALS.pszCredentialsOid">
            <summary>
            <para>
            A pointer to a null-terminated string that contains the type of credential object represented by the <c>pvCredentials</c> member.
            </para>
            <para>This member can contain the following possible value.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CREDENTIAL_OID_PASSWORD_CREDENTIALS</term>
            <term>
            The pvCredentials member contains a CRYPT_PASSWORD_CREDENTIALS structure that represents a user name and password combination.
            </term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptNet.CRYPT_CREDENTIALS.pvCredentials">
            <summary>A pointer to a structure as defined by the <c>pszCredentialsOid</c> member.</summary>
        </member>
        <member name="T:Vanara.PInvoke.CryptNet.CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO">
            <summary>
            The <c>CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO</c> structure contains optional extra information that can be passed to the
            CryptGetTimeValidObject function in the pExtraInfo parameter.
            </summary>
            <remarks>
            All members of the <c>CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO</c> structure that do not have a value must be set to zero.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.CryptNet.CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO.cbSize">
            <summary>The size, in bytes, of this structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptNet.CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO.iDeltaCrlIndicator">
            <summary>
            <para>
            A value used to compare to the base certificate revocation list (CRL) number. If the base CRL number is less than this
            value, the caller should attempt to retrieve a newer base CRL.
            </para>
            <para>
            If the <c>pDeltaCrlIndicator</c> member is non- <c>NULL</c> the value of this member must be 0x7fffffff. <c>Windows Server
            2008, Windows Vista, Windows Server 2003 and Windows XP:</c> Because the <c>pDeltaCrlIndicator</c> member does not exist,
            the <c>iDeltaCrlIndicator</c> value requirement does not apply.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptNet.CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO.pftCacheResync">
            <summary>
            A pointer to a FILETIME structure that governs the use of cached information. Any information cached before this time is
            considered invalid and new information is retrieved.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptNet.CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO.pLastSyncTime">
            <summary>
            A pointer to a FILETIME structure that contains the time of the last synchronization of the data retrieved for the object.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptNet.CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO.pMaxAgeTime">
            <summary>
            A pointer to a FILETIME structure that specifies an expiration time of the data retrieved based on the <c>dwMaxAge</c>
            member of the CRYPTNET_URL_CACHE_RESPONSE_INFO structure.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptNet.CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO.pChainPara">
            <summary>
            A pointer to a <see cref="T:Vanara.PInvoke.CryptNet.CERT_REVOCATION_CHAIN_PARA"/> structure that contains the CertGetCertificateChain function
            parameters used by the caller. The data in this member enables independent online certificate status protocol (OCSP) signer
            certificate chain verification.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptNet.CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO.pDeltaCrlIndicator">
            <summary>
            <para>
            A pointer to a CRYPT_INTEGER_BLOB structure that contains a CRL with a length of more than 4 bytes. If this member is non-
            <c>NULL</c> and the <c>iDeltaCrlIndicator</c> member is equal to <c>MAXLONG</c>, then if the base CRL number is less than
            this value, the caller should attempt to retrieve a newer base CRL.
            </para>
            <para><c>Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:</c> This member is not supported.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.CryptNet.CRYPT_RETRIEVE_AUX_INFO">
            <summary>
            The <c>CRYPT_RETRIEVE_AUX_INFO</c> structure contains optional information to pass to the CryptRetrieveObjectByUrl function. All
            unused members of this structure must contain zero.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptNet.CRYPT_RETRIEVE_AUX_INFO.cbSize">
            <summary>The size, in bytes, of the structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptNet.CRYPT_RETRIEVE_AUX_INFO.pLastSyncTime">
            <summary>A FILETIME structure that contains the time of the last synchronization of the data retrieved.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptNet.CRYPT_RETRIEVE_AUX_INFO.dwMaxUrlRetrievalByteCount">
            <summary>A value that specifies a limit to the number of byes retrieved. A value of zero or less specifies no limit.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptNet.CRYPT_RETRIEVE_AUX_INFO.pPreFetchInfo">
            <summary>
            A pointer to a CRYPTNET_URL_CACHE_PRE_FETCH_INFO structure. To get prefetch information, set its <c>cbSize</c> upon input.
            For no prefetch information, except for <c>cbSize</c>, the data structure contains zero upon return.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptNet.CRYPT_RETRIEVE_AUX_INFO.pFlushInfo">
            <summary>
            A pointer to a CRYPTNET_URL_CACHE_FLUSH_INFO structure. To get flush information, set its <c>cbSize</c> upon input. For no
            flush information, except for <c>cbSize</c>, the data structure contains zero upon return.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptNet.CRYPT_RETRIEVE_AUX_INFO.ppResponseInfo">
            <summary>
            A pointer to a PCRYPTNET_URL_CACHE_RESPONSE_INFO structure. To get response information, set the pointer to the address of a
            <c>CRYPTNET_URL_CACHE_RESPONSE_INFO</c> pointer updated with the allocated structure. For no response information,
            <c>ppResponseInfo</c> is set to <c>NULL</c>. If it is not <c>NULL</c>, it must be freed by using the CryptMemFree function.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptNet.CRYPT_RETRIEVE_AUX_INFO.pwszCacheFileNamePrefix">
            <summary>
            A pointer to a string that contains a prefix for a cached file name. If not <c>NULL</c>, the specified prefix string is
            concatenated to the front of the cached file name.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptNet.CRYPT_RETRIEVE_AUX_INFO.pftCacheResync">
            <summary>
            A pointer to a FILETIME structure that specifies a cache synchronization time. If not <c>NULL</c>, any information cached
            before this time is considered time invalid. For a <c>CRYPT_CACHE_ONLY_RETRIEVAL</c>, if there is a cached entry before this
            time, CryptRetrieveObjectByUrl returns <c>ERROR_INVALID_TIME</c>. When used with an HTTP retrieval, this specifies the
            maximum age for a time-valid object.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptNet.CRYPT_RETRIEVE_AUX_INFO.fProxyCacheRetrieval">
            <summary>
            A value that indicates whether CryptRetrieveObjectByUrl was called with <c>CRYPT_PROXY_CACHE_RETRIEVAL</c> set in
            dwRetrievalFlags and a proxy cache was not explicitly bypassed for the retrieval. This flag is not explicitly cleared and
            only applies to HTTP URL retrievals.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptNet.CRYPT_RETRIEVE_AUX_INFO.dwHttpStatusCode">
            <summary>
            A value that specifies a status code from an unsuccessful HTTP response header. If <c>CRYPT_NOT_MODIFIED_RETRIEVAL</c> was
            set in dwRetrievalFlags, and the HTTP retrieval returns <c>HTTP_STATUS_NOT_MODIFIED</c>, this contains the
            <c>HTTP_STATUS_NOT_MODIFIED</c> status code. This value is not explicitly cleared and is only updated for HTTP or HTTPS URL retrievals.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptNet.CRYPT_RETRIEVE_AUX_INFO.ppwszErrorResponseHeaders">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.CryptNet.CRYPT_RETRIEVE_AUX_INFO.ppErrorContentBlob">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.CryptNet.CRYPT_URL_ARRAY">
            <summary>The data for the value entry.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptNet.CRYPT_URL_ARRAY.cUrl">
            <summary>Number of elements in the rgwszUrl array of URLs.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptNet.CRYPT_URL_ARRAY.rgwszUrl">
            <summary>An array of Unicode string pointers to URLs.</summary>
        </member>
        <member name="T:Vanara.PInvoke.CryptNet.CRYPT_URL_INFO">
            <summary>The <c>CRYPT_URL_INFO</c> structure contains information about groupings of URLs.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptNet.CRYPT_URL_INFO.cbSize">
            <summary>The size, in bytes, of the structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptNet.CRYPT_URL_INFO.dwSyncDeltaTime">
            <summary>Number of seconds between synchronizations.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptNet.CRYPT_URL_INFO.cGroup">
            <summary>Number of elements in the rgcGroupEntry array of URL groups.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptNet.CRYPT_URL_INFO.rgcGroupEntry">
            <summary>Array of URL groups returned.</summary>
        </member>
        <member name="T:Vanara.PInvoke.CryptUI">
            <summary>Methods and data types found in CryptUI.dll.</summary>
        </member>
        <member name="T:Vanara.PInvoke.CryptUI.PFNCFILTERPROC">
            <summary>
            The <c>PFNCFILTERPROC</c> function is an application-defined callback function that filters the certificates that appear in the
            digital signature wizard that are displayed by the CryptUIWizDigitalSign function.
            </summary>
            <param name="pCertContext">A pointer to a CERT_CONTEXT structure that contains the certificate to filter.</param>
            <param name="pfInitialSelectedCert"/>
            <param name="pvCallbackData"/>
            <returns>
            A Boolean value that specifies whether the certificate contained in the CERT_CONTEXT structure pointed to by the pCertContext
            parameter should be displayed in the digital signature wizard.
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.CryptUI.CryptUISelect">
            <summary>Flags that can be combined to exclude columns of the display.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CryptUISelect.CRYPTUI_SELECT_ISSUEDTO_COLUMN">
            <summary>Do not display the ISSUEDTO information.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CryptUISelect.CRYPTUI_SELECT_ISSUEDBY_COLUMN">
            <summary>Do not display the ISSUEDBY information.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CryptUISelect.CRYPTUI_SELECT_INTENDEDUSE_COLUMN">
            <summary>Do not display IntendedUse information.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CryptUISelect.CRYPTUI_SELECT_FRIENDLYNAME_COLUMN">
            <summary>Do not display the display name information.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CryptUISelect.CRYPTUI_SELECT_LOCATION_COLUMN">
            <summary>Do not display location information.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CryptUISelect.CRYPTUI_SELECT_EXPIRATION_COLUMN">
            <summary>Do not display expiration information.</summary>
        </member>
        <member name="T:Vanara.PInvoke.CryptUI.CryptUIViewCertificateFlags">
            <summary>Flags for <see cref="T:Vanara.PInvoke.CryptUI.CRYPTUI_VIEWCERTIFICATE_STRUCT"/>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CryptUIViewCertificateFlags.CRYPTUI_HIDE_HIERARCHYPAGE">
            <summary>The Certification Path page is disabled.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CryptUIViewCertificateFlags.CRYPTUI_HIDE_DETAILPAGE">
            <summary>The Details page is disabled.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CryptUIViewCertificateFlags.CRYPTUI_DISABLE_EDITPROPERTIES">
            <summary>The user is not allowed to change the properties.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CryptUIViewCertificateFlags.CRYPTUI_ENABLE_EDITPROPERTIES">
            <summary>The user is allowed to change the properties.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CryptUIViewCertificateFlags.CRYPTUI_DISABLE_ADDTOSTORE">
            <summary>The Install button is disabled.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CryptUIViewCertificateFlags.CRYPTUI_ENABLE_ADDTOSTORE">
            <summary>The Install button is enabled.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CryptUIViewCertificateFlags.CRYPTUI_ACCEPT_DECLINE_STYLE">
            <summary>The pages or buttons that allow the user to accept or decline any decision are disabled.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CryptUIViewCertificateFlags.CRYPTUI_IGNORE_UNTRUSTED_ROOT">
            <summary>An untrusted root error is ignored.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CryptUIViewCertificateFlags.CRYPTUI_DONT_OPEN_STORES">
            <summary>Known trusted stores will not be used to build the chain.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CryptUIViewCertificateFlags.CRYPTUI_ONLY_OPEN_ROOT_STORE">
            <summary>A known trusted root store will not be used to build the chain.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CryptUIViewCertificateFlags.CRYPTUI_WARN_UNTRUSTED_ROOT">
            <summary>
            Use only when viewing certificates on remote computers. If this flag is used, the first element of rghStores must be the
            handle of the root store on the remote computer.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CryptUIViewCertificateFlags.CRYPTUI_ENABLE_REVOCATION_CHECKING">
            <summary>
            Enable revocation checking with default behavior. The default behavior is to enable revocation checking of the entire
            certificate chain except the root certificate. Valid only if neither the pCryptProviderData nor the hWVTStateData union
            member is passed in.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CryptUIViewCertificateFlags.CRYPTUI_WARN_REMOTE_TRUST">
            <summary>
            When building a certificate chain for a remote computer, warn that the chain may not be trusted on the remote computer.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CryptUIViewCertificateFlags.CRYPTUI_DISABLE_EXPORT">
            <summary>If this flag is set, the Copy to file button will be disabled on the Detail page.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CryptUIViewCertificateFlags.CRYPTUI_ENABLE_REVOCATION_CHECK_END_CERT">
            <summary>
            Enable revocation checking only on the leaf certificate in the certificate chain. Valid only if neither the
            pCryptProviderData nor the hWVTStateData union member is passed in.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CryptUIViewCertificateFlags.CRYPTUI_ENABLE_REVOCATION_CHECK_CHAIN">
            <summary>
            Enable revocation checking on each certificate in the certificate chain. Valid only if neither the pCryptProviderData nor
            the hWVTStateData union member is passed in. Note Because root certificates rarely contain information that allows
            revocation checking, it is expected that use of this option will usually result in failure of the CryptUIDlgViewCertificate
            function. The recommended option is to use CRYPTUI_ENABLE_REVOCATION_CHECK_CHAIN_EXCLUDE_ROOT.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CryptUIViewCertificateFlags.CRYPTUI_ENABLE_REVOCATION_CHECK_CHAIN_EXCLUDE_ROOT">
            <summary>
            Enable revocation checking on each certificate in the certificate chain except for the root certificate. This is the
            recommended option to use for certificate revocation checking. Valid only if neither the pCryptProviderData nor the
            hWVTStateData union member is passed in. Note This flag is equivalent to CRYPTUI_ENABLE_REVOCATION_CHECKING.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CryptUIViewCertificateFlags.CRYPTUI_DISABLE_HTMLLINK">
            <summary>Disable the HTML Help button (?) in the Certificate dialog box.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CryptUIViewCertificateFlags.CRYPTUI_DISABLE_ISSUERSTATEMENT">
            <summary>Disable the Issuer Statement button on the General tab of the Certificate dialog box.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CryptUIViewCertificateFlags.CRYPTUI_CACHE_ONLY_URL_RETRIEVAL">
            <summary>
            Disable online revocation checking. Set this flag to ensure that the CryptUIDlgViewCertificate function uses the local cache
            to retrieve the certificate and does not attempt to retrieve the certificate from the network. Windows Server 2008, Windows
            Vista, Windows Server 2003 and Windows XP: This flag is not supported.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.CryptUI.CryptUIWizAddChoice">
            <summary>A value that indicates whether additional certificates will be included in the signature.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CryptUIWizAddChoice.CRYPTUI_WIZ_DIGITAL_SIGN_ADD_NONE">
            <summary>No additional certificates will be included in the signature.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CryptUIWizAddChoice.CRYPTUI_WIZ_DIGITAL_SIGN_ADD_CHAIN">
            <summary>The entire certificate chain will be included in the signature.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CryptUIWizAddChoice.CRYPTUI_WIZ_DIGITAL_SIGN_ADD_CHAIN_NO_ROOT">
            <summary>All certificates in the certificate chain except the root will be included in the signature.</summary>
        </member>
        <member name="T:Vanara.PInvoke.CryptUI.CryptUIWizExportType">
            <summary>Indicates the type of the subject to export.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CryptUIWizExportType.CRYPTUI_WIZ_EXPORT_CERT_CONTEXT">
            <summary>Export the certificate context that is specified in the pCertContext member.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CryptUIWizExportType.CRYPTUI_WIZ_EXPORT_CTL_CONTEXT">
            <summary>Export the certificate trust list (CTL) context that is specified in the pCTLContext member.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CryptUIWizExportType.CRYPTUI_WIZ_EXPORT_CRL_CONTEXT">
            <summary>Export the certificate revocation list (CRL) context that is specified in the pCRLContext member.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CryptUIWizExportType.CRYPTUI_WIZ_EXPORT_CERT_STORE">
            <summary>Export the certificate store that is specified in the hCertStore member.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CryptUIWizExportType.CRYPTUI_WIZ_EXPORT_CERT_STORE_CERTIFICATES_ONLY">
            <summary>Export only the certificates from the certificate store that is specified in the hCertStore member.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CryptUIWizExportType.CRYPTUI_WIZ_EXPORT_FORMAT_CRL">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CryptUIWizExportType.CRYPTUI_WIZ_EXPORT_FORMAT_CTL">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.CryptUI.CryptUIWizFlags">
            <summary>Contains flags that modify the behavior of <see cref="M:Vanara.PInvoke.CryptUI.CryptUIWizDigitalSign(Vanara.PInvoke.CryptUI.CryptUIWizFlags,Vanara.PInvoke.HWND,System.String,Vanara.PInvoke.CryptUI.CRYPTUI_WIZ_DIGITAL_SIGN_INFO@,Vanara.PInvoke.CryptUI.SafePCCRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT@)"/>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CryptUIWizFlags.CRYPTUI_WIZ_NO_UI">
            <summary>
            This function will sign the document based on the information in the CRYPTUI_WIZ_DIGITAL_SIGN_INFO structure pointed to by
            the pDigitalSignInfo parameter without displaying any user interface. If this flag is not specified, this function will
            display a wizard to guide the user through the signing process.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CryptUIWizFlags.CRYPTUI_WIZ_IGNORE_NO_UI_FLAG_FOR_CSPS">
            <summary>
            Suppress all user interfaces generated by cryptographic service providers (CSPs). This option can be overridden by the
            CRYPTUI_WIZ_NO_UI_EXCEPT_CSP option.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CryptUIWizFlags.CRYPTUI_WIZ_NO_UI_EXCEPT_CSP">
            <summary>
            Suppress all user interfaces except those generated by CSPs. This option overrides the
            CRYPTUI_WIZ_IGNORE_NO_UI_FLAG_FOR_CSPS option.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CryptUIWizFlags.CRYPTUI_WIZ_EXPORT_PRIVATE_KEY">
            <summary>Skip the Export Private Key page and assume that the private key is to be exported.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CryptUIWizFlags.CRYPTUI_WIZ_EXPORT_NO_DELETE_PRIVATE_KEY">
            <summary>Disable the Delete the private key check box in the Export File Format page.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CryptUIWizFlags.CRYPTUI_WIZ_IMPORT_ALLOW_CERT">
            <summary>Allow certificates to be imported.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CryptUIWizFlags.CRYPTUI_WIZ_IMPORT_ALLOW_CRL">
            <summary>Allow CRLs to be imported.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CryptUIWizFlags.CRYPTUI_WIZ_IMPORT_ALLOW_CTL">
            <summary>Allow CTLs to be imported.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CryptUIWizFlags.CRYPTUI_WIZ_IMPORT_NO_CHANGE_DEST_STORE">
            <summary>Do not allow the user to change the destination certificate store represented by the hDestCertStore parameter.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CryptUIWizFlags.CRYPTUI_WIZ_IMPORT_TO_LOCALMACHINE">
            <summary>
            Import the object to the certificate store for the local computer. This applies only to Personal Information Exchange (PFX) imports.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CryptUIWizFlags.CRYPTUI_WIZ_IMPORT_TO_CURRENTUSER">
            <summary>Import the object to the certificate store for the current user. This applies only to PFX imports.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CryptUIWizFlags.CRYPTUI_WIZ_IMPORT_REMOTE_DEST_STORE">
            <summary>
            Import the object to a remote certificate store. Set this flag if the hDestCertStore parameter represents a remote
            certificate store.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.CryptUI.CryptUIWizImportType">
            <summary>Indicates the type of subject to import.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CryptUIWizImportType.CRYPTUI_WIZ_IMPORT_SUBJECT_FILE">
            <summary>Import the certificate stored in the file referenced in the pwszFileName member.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CryptUIWizImportType.CRYPTUI_WIZ_IMPORT_SUBJECT_CERT_CONTEXT">
            <summary>Import the certificate referenced in the pCertContext member.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CryptUIWizImportType.CRYPTUI_WIZ_IMPORT_SUBJECT_CTL_CONTEXT">
            <summary>Import the CTL referenced in the pCTLContext member.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CryptUIWizImportType.CRYPTUI_WIZ_IMPORT_SUBJECT_CRL_CONTEXT">
            <summary>Import the CRL referenced in the pCRLContext member.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CryptUIWizImportType.CRYPTUI_WIZ_IMPORT_SUBJECT_CERT_STORE">
            <summary>Import the certificate store referenced in the hCertStore member.</summary>
        </member>
        <member name="T:Vanara.PInvoke.CryptUI.CryptUIWizPVKChoice">
            <summary>Specifies the type of entity that contains the certificates.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CryptUIWizPVKChoice.CRYPTUI_WIZ_DIGITAL_SIGN_PVK_FILE">
            <summary>The entity is a PVK file.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CryptUIWizPVKChoice.CRYPTUI_WIZ_DIGITAL_SIGN_PVK_PROV">
            <summary>The entity is a PVK provider.</summary>
        </member>
        <member name="T:Vanara.PInvoke.CryptUI.CryptUIWizSignLoc">
            <summary>A value that specifies the location of the certificate that is used to sign the entity.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CryptUIWizSignLoc.CRYPTUI_WIZ_DIGITAL_SIGN_USE_MY_STORE">
            <summary>The certificates in the My store are used.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CryptUIWizSignLoc.CRYPTUI_WIZ_DIGITAL_SIGN_CERT">
            <summary>The certificate is contained in the CERT_CONTEXT structure pointed to by the pSigningCertContext member.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CryptUIWizSignLoc.CRYPTUI_WIZ_DIGITAL_SIGN_STORE">
            <summary>
            The certificate is contained in the certificate store contained in the CRYPTUI_WIZ_DIGITAL_SIGN_STORE_INFO structure pointed
            to by the pSigningCertStore member.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CryptUIWizSignLoc.CRYPTUI_WIZ_DIGITAL_SIGN_PVK">
            <summary>
            The certificate is contained in the PVK file contained in the CRYPTUI_WIZ_DIGITAL_SIGN_CERT_PVK_INFO structure pointed to by
            the pSigningCertPvkInfo member.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.CryptUI.CryptUIWizSigType">
            <summary>A value that indicates the type of the signature.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CryptUIWizSigType.CRYPTUI_WIZ_DIGITAL_SIGN_COMMERCIAL">
            <summary>The signature is a commercial signature.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CryptUIWizSigType.CRYPTUI_WIZ_DIGITAL_SIGN_INDIVIDUAL">
            <summary>The signature is a personal signature.</summary>
        </member>
        <member name="T:Vanara.PInvoke.CryptUI.CryptUIWizToSign">
            <summary>A value that indicates the entity that is to be signed.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CryptUIWizToSign.CRYPTUI_WIZ_DIGITAL_SIGN_SUBJECT_PROMPT">
            <summary>The user will be prompted for a file to sign.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CryptUIWizToSign.CRYPTUI_WIZ_DIGITAL_SIGN_SUBJECT_FILE">
            <summary>The memory BLOB specified by the pSignBlobInfo member is to be signed.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CryptUIWizToSign.CRYPTUI_WIZ_DIGITAL_SIGN_SUBJECT_BLOB">
            <summary>The file specified by the pwszFileName member is to be signed.</summary>
        </member>
        <member name="M:Vanara.PInvoke.CryptUI.CertSelectionGetSerializedBlob(Vanara.PInvoke.CryptUI.CERT_SELECTUI_INPUT@,System.IntPtr@,System.UInt32@)">
            <summary>
            The <c>CertSelectionGetSerializedBlob</c> function is a helper function used to retrieve a serialized certificate BLOB from a
            CERT_SELECTUI_INPUT structure.
            </summary>
            <param name="pcsi">
            A pointer to a CERT_SELECTUI_INPUT structure that contains the certificate store and certificate context chain information.
            </param>
            <param name="ppOutBuffer">The address of a pointer to a buffer that receives the serialized certificates BLOB.</param>
            <param name="pulOutBufferSize">
            A pointer to a <c>ULONG</c> to receive the size, in bytes, of the BLOB received in the buffer pointed to by the ppOutBuffer parameter.
            </param>
            <returns>
            <para>If the function succeeds, the function returns <c>S_OK</c>.</para>
            <para>
            If the function fails, it returns an <c>HRESULT</c> value that indicates the error. If both <c>hStore</c> and <c>prgpChain</c>
            parameters are not <c>NULL</c>, return <c>E_INVALIDARG</c>. For a list of common error codes, see Common HRESULT Values.
            </para>
            </returns>
            <remarks>
            <para>
            The returned serialized BLOB is passed to the CredUIPromptForWindowsCredentials function in the pvInAuthBuffer parameter to
            allow a user to select a certificate by using the credential selection UI.
            </para>
            <para>
            The certificates that are serialized in the BLOB returned in the buffer pointed to by the ppOutBuffer parameter of this function
            are dependent on the values of the <c>hStore</c> and <c>prgpChain</c> members of the CERT_SELECTUI_INPUT structure.
            </para>
            <list type="table">
            <listheader>
            <term>hStore</term>
            <term>prgpChain</term>
            <term>Certificates serialized</term>
            </listheader>
            <item>
            <term>NULL</term>
            <term>not NULL</term>
            <term>The certificates pointed to by the prgpChain member are serialized.</term>
            </item>
            <item>
            <term>not NULL</term>
            <term>NULL</term>
            <term>The certificates specified by the hStore member are serialized.</term>
            </item>
            <item>
            <term>NULL</term>
            <term>NULL</term>
            <term>An empty BLOB is returned.</term>
            </item>
            <item>
            <term>not NULL</term>
            <term>not NULL</term>
            <term>The call fails and the function returns E_INVALIDARG.</term>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.CryptUI.CryptUIDlgCertMgr(Vanara.PInvoke.CryptUI.CRYPTUI_CERT_MGR_STRUCT@)">
            <summary>The <c>CryptUIDlgCertMgr</c> function displays a dialog box that allows the user to manage certificates.</summary>
            <param name="pCryptUICertMgr">
            A pointer to a CRYPTUI_CERT_MGR_STRUCT structure that contains information about how to create the dialog box.
            </param>
            <returns>The return value is <c>TRUE</c> if the function succeeds; otherwise, <c>FALSE.</c></returns>
        </member>
        <member name="M:Vanara.PInvoke.CryptUI.CryptUIDlgSelectCertificateFromStore(Vanara.PInvoke.Crypt32.HCERTSTORE,Vanara.PInvoke.HWND,System.String,System.String,Vanara.PInvoke.CryptUI.CryptUISelect,System.UInt32,System.IntPtr)">
            <summary>
            The <c>CryptUIDlgSelectCertificateFromStore</c> function displays a dialog box that allows the selection of a certificate from a
            specified store.
            </summary>
            <param name="hCertStore">Handle of the certificate store to be searched.</param>
            <param name="hwnd">Handle of the window for the display. If <c>NULL</c>, defaults to the desktop window.</param>
            <param name="pwszTitle">
            String used as the title of the dialog box. If <c>NULL</c>, the default title, "Select Certificate," is used.
            </param>
            <param name="pwszDisplayString">
            Text statement in the selection dialog box. If <c>NULL</c>, the default phrase, "Select a certificate you want to use," is used.
            </param>
            <param name="dwDontUseColumn">
            <para>Flags that can be combined to exclude columns of the display.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPTUI_SELECT_ISSUEDTO_COLUMN</term>
            <term>Do not display the ISSUEDTO information.</term>
            </item>
            <item>
            <term>CRYPTUI_SELECT_ISSUEDBY_COLUMN</term>
            <term>Do not display the ISSUEDBY information.</term>
            </item>
            <item>
            <term>CRYPTUI_SELECT_INTENDEDUSE_COLUMN</term>
            <term>Do not display IntendedUse information.</term>
            </item>
            <item>
            <term>CRYPTUI_SELECT_FRIENDLYNAME_COLUMN</term>
            <term>Do not display the display name information.</term>
            </item>
            <item>
            <term>CRYPTUI_SELECT_LOCATION_COLUMN</term>
            <term>Do not display location information.</term>
            </item>
            <item>
            <term>CRYPTUI_SELECT_EXPIRATION_COLUMN</term>
            <term>Do not display expiration information.</term>
            </item>
            </list>
            </param>
            <param name="dwFlags">Currently not used and should be set to 0.</param>
            <param name="pvReserved">Reserved for future use.</param>
            <returns>
            Returns a pointer to the selected certificate context. If no certificate was selected, <c>NULL</c> is returned. When you have
            finished using the certificate, free the certificate context by calling the CertFreeCertificateContext function.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.CryptUI.CryptUIDlgViewCertificate(Vanara.PInvoke.CryptUI.CRYPTUI_VIEWCERTIFICATE_STRUCT@,System.Boolean@)">
            <summary>The <c>CryptUIDlgViewCertificate</c> function presents a dialog box that displays a specified certificate.</summary>
            <param name="pCertViewInfo">
            A pointer to a CRYPTUI_VIEWCERTIFICATE_STRUCT structure that contains information about the certificate to view.
            </param>
            <param name="pfPropertiesChanged">Indicates whether any certificate properties were modified by the caller.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero ( <c>TRUE</c>).</para>
            <para>
            If the function fails, the return value is zero ( <c>FALSE</c>). For extended error information, call the GetLastError function.
            </para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.CryptUI.CryptUIDlgViewContext(Vanara.PInvoke.Crypt32.CertStoreContextType,System.IntPtr,Vanara.PInvoke.HWND,System.String,System.UInt32,System.IntPtr)">
            <summary>The <c>CryptUIDlgViewContext</c> function displays a certificate, CTL, or CRL context.</summary>
            <param name="dwContextType">
            <para>
            <c>DWORD</c> indicating whether pvContext is a pointer to a certificate, a CRL, or a CTL context as indicated in the following table.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_STORE_CERTIFICATE_CONTEXT</term>
            <term>PCCERT_CONTEXT</term>
            </item>
            <item>
            <term>CERT_STORE_CRL_CONTEXT</term>
            <term>PCCRL_CONTEXT</term>
            </item>
            <item>
            <term>CERT_STORE_CTL_CONTEXT</term>
            <term>PCCTL_CONTEXT</term>
            </item>
            </list>
            </param>
            <param name="pvContext">A pointer to a certificate, CRL, or CTL context to be displayed.</param>
            <param name="hwnd">Handle of the window for the display. If <c>NULL</c>, the display defaults to the desktop window.</param>
            <param name="pwszTitle">Display title string. If <c>NULL</c>, the default context type is used as the title.</param>
            <param name="dwFlags">Currently not used and should be set to 0.</param>
            <param name="pvReserved">Reserved for future use.</param>
            <returns>This function returns <c>TRUE</c> on success and <c>FALSE</c> on failure.</returns>
        </member>
        <member name="M:Vanara.PInvoke.CryptUI.CryptUIWizDigitalSign(Vanara.PInvoke.CryptUI.CryptUIWizFlags,Vanara.PInvoke.HWND,System.String,Vanara.PInvoke.CryptUI.CRYPTUI_WIZ_DIGITAL_SIGN_INFO@,Vanara.PInvoke.CryptUI.SafePCCRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT@)">
            <summary>
            <para>
            [The <c>CryptUIWizDigitalSign</c> function is available for use in the operating systems specified in the Requirements section.
            It may be altered or unavailable in subsequent versions.]
            </para>
            <para>
            The <c>CryptUIWizDigitalSign</c> function digitally signs a document or BLOB. The document or BLOB can be signed with or without
            user interaction.
            </para>
            </summary>
            <param name="dwFlags">
            <para>Contains flags that modify the behavior of the function. This can be zero or the following value.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPTUI_WIZ_NO_UI 0x0001</term>
            <term>
            This function will sign the document based on the information in the CRYPTUI_WIZ_DIGITAL_SIGN_INFO structure pointed to by the
            pDigitalSignInfo parameter without displaying any user interface. If this flag is not specified, this function will display a
            wizard to guide the user through the signing process.
            </term>
            </item>
            </list>
            </param>
            <param name="hwndParent">
            The handle of the window to use as the parent of the dialog box that this function creates. This parameter is ignored if the
            <c>CRYPTUI_WIZ_NO_UI</c> flag is set in dwFlags.
            </param>
            <param name="pwszWizardTitle">
            A pointer to a null-terminated Unicode string that contains the title to use in the dialog box that this function creates. This
            parameter is ignored if the <c>CRYPT_WIZ_NO_UI</c> flag is set in dwFlags. If this parameter is <c>NULL</c>, a default title is used.
            </param>
            <param name="pDigitalSignInfo">
            A pointer to a CRYPTUI_WIZ_DIGITAL_SIGN_INFO structure that contains information about the signing process.
            </param>
            <param name="ppSignContext">
            A pointer to a CRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT structure pointer that receives the signed BLOB. When you have finished using
            this structure, you must free the memory by passing this pointer to the CryptUIWizFreeDigitalSignContext function. This
            parameter can be <c>NULL</c> if the signed BLOB is not needed.
            </param>
            <returns>
            <para>If the function succeeds, the function returns nonzero.</para>
            <para>If the function fails, it returns zero.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.CryptUI.CryptUIWizExport(Vanara.PInvoke.CryptUI.CryptUIWizFlags,Vanara.PInvoke.HWND,System.String,Vanara.PInvoke.CryptUI.CRYPTUI_WIZ_EXPORT_INFO@,System.IntPtr)">
            <summary>
            The <c>CryptUIWizExport</c> function exports a certificate, a certificate trust list (CTL), a certificate revocation list (CRL),
            or a certificate store to a file. The export can be performed with or without user interaction.
            </summary>
            <param name="dwFlags">
            <para>
            Contains flags that modify the behavior of the function. This can be zero or a combination of one or more of the following values.
            </para>
            <para>
            <c>Note</c> Except for <c>CRYPTUI_WIZ_NO_UI</c>, none of the following constants are defined in a published header file. To use
            these constants, you must define them by using the specified values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPTUI_WIZ_NO_UI 0x0001</term>
            <term>
            This function will perform the export based on the information in the CRYPTUI_WIZ_EXPORT_INFO structure pointed to by
            pExportInfo without displaying any user interface. If this flag is not specified, this function will display a wizard to guide
            the user through the export process.
            </term>
            </item>
            <item>
            <term>CRYPTUI_WIZ_IGNORE_NO_UI_FLAG_FOR_CSPS 0x0002</term>
            <term>
            Suppress all user interfaces generated by cryptographic service providers (CSPs). This option can be overridden by the
            CRYPTUI_WIZ_NO_UI_EXCEPT_CSP option.
            </term>
            </item>
            <item>
            <term>CRYPTUI_WIZ_NO_UI_EXCEPT_CSP 0x0003</term>
            <term>
            Suppress all user interfaces except those generated by CSPs. This option overrides the CRYPTUI_WIZ_IGNORE_NO_UI_FLAG_FOR_CSPS option.
            </term>
            </item>
            <item>
            <term>CRYPTUI_WIZ_EXPORT_PRIVATE_KEY 0x0100</term>
            <term>Skip the Export Private Key page and assume that the private key is to be exported.</term>
            </item>
            <item>
            <term>CRYPTUI_WIZ_EXPORT_NO_DELETE_PRIVATE_KEY 0x0200</term>
            <term>Disable the Delete the private key check box in the Export File Format page.</term>
            </item>
            </list>
            </param>
            <param name="hwndParent">
            The handle of the window to use as the parent of the dialog box that this function creates. This parameter is ignored if the
            <c>CRYPT_WIZ_NO_UI</c> flag is set in dwFlags.
            </param>
            <param name="pwszWizardTitle">
            A pointer to a null-terminated Unicode string that contains the title to use in the dialog box that this function creates. This
            parameter is ignored if the <c>CRYPT_WIZ_NO_UI</c> flag is set in dwFlags.
            </param>
            <param name="pExportInfo">
            A pointer to a CRYPTUI_WIZ_EXPORT_INFO structure that contains information about producing the export wizard.
            </param>
            <param name="pvoid">
            <para>
            If the <c>dwSubjectChoice</c> member of the CRYPTUI_WIZ_EXPORT_INFO structure that pExportInfo references is
            <c>CRYPTUI_WIZ_EXPORT_CERT_CONTEXT</c>, and if the <c>CRYPTUI_WIZ_NO_UI</c> flag is set in dwFlags, this parameter is a pointer
            to a CRYPTUI_WIZ_EXPORT_CERTCONTEXT_INFO structure.
            </para>
            <para>
            If the <c>CRYPTUI_WIZ_NO_UI</c> flag is not set in dwFlags, this parameter is optional and can be <c>NULL</c>. If this parameter
            is not <c>NULL</c>, the CRYPTUI_WIZ_EXPORT_CERTCONTEXT_INFO structure contains the values that are displayed to the user as the
            default choices.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the function returns nonzero.</para>
            <para>If the function fails, it returns zero. For extended error information, call the GetLastError function.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.CryptUI.CryptUIWizFreeDigitalSignContext(Vanara.PInvoke.CryptUI.PCCRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT)">
            <summary>
            The <c>CryptUIWizFreeDigitalSignContext</c> function frees the CRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT structure allocated by the
            CryptUIWizDigitalSign function.
            </summary>
            <param name="pSignContext">A pointer to the CRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT structure to be freed.</param>
            <returns>
            <para>If the function succeeds, the function returns nonzero.</para>
            <para>If the function fails, it returns zero.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.CryptUI.CryptUIWizImport(Vanara.PInvoke.CryptUI.CryptUIWizFlags,Vanara.PInvoke.HWND,System.String,Vanara.PInvoke.CryptUI.CRYPTUI_WIZ_IMPORT_SRC_INFO@,Vanara.PInvoke.Crypt32.HCERTSTORE)">
            <summary>
            The function imports a certificate, a certificate trust list (CTL), a certificate revocation list (CRL), or a certificate store
            to a certificate store. The import can be performed with or without user interaction.
            </summary>
            <param name="dwFlags">
            <para>
            Contains flags that modify the behavior of the function. This can be zero or a combination of one or more of the following values.
            </para>
            <para>
            <c>Note</c> Except for <c>CRYPTUI_WIZ_NO_UI</c>, none of the following constants are defined in a published header file. To use
            these constants, you must define them by using the specified values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPTUI_WIZ_NO_UI 0x0001</term>
            <term>
            This function will perform the import based on the information in the CRYPTUI_WIZ_IMPORT_SRC_INFO structure pointed to by
            pImportSrc into the store specified by hDestCertStore without displaying any user interface. If this flag is not specified, this
            function will display a wizard to guide the user through the import process. Beginning with Windows 8 and Windows Server 2012,
            if you set this flag and are importing a certificate from a PFX BLOB that was protected to an Active Directory (AD) principal,
            and the current user, as part of that principal, has permission to decrypt the password embedded in the PFX packet, the
            importation will succeed without requiring that a password be set in the CRYPTUI_WIZ_IMPORT_SRC_INFO structure. For more
            information about protecting PFX to an AD principal, see the pvPara parameter and the PKCS12_PROTECT_TO_DOMAIN_SIDS flag of the
            PFXExportCertStoreEx function.
            </term>
            </item>
            <item>
            <term>CRYPTUI_WIZ_IGNORE_NO_UI_FLAG_FOR_CSPS 0x0002</term>
            <term>
            Suppress all user interfaces generated by cryptographic service providers (CSPs). This option can be overridden by the
            CRYPTUI_WIZ_NO_UI_EXCEPT_CSP option.
            </term>
            </item>
            <item>
            <term>CRYPTUI_WIZ_NO_UI_EXCEPT_CSP 0x0003</term>
            <term>
            Suppress all user interfaces except those generated by CSPs. This option overrides the CRYPTUI_WIZ_IGNORE_NO_UI_FLAG_FOR_CSPS option.
            </term>
            </item>
            <item>
            <term>CRYPTUI_WIZ_IMPORT_ALLOW_CERT 0x00020000</term>
            <term>Allow certificates to be imported.</term>
            </item>
            <item>
            <term>CRYPTUI_WIZ_IMPORT_ALLOW_CRL 0x00040000</term>
            <term>Allow CRLs to be imported.</term>
            </item>
            <item>
            <term>CRYPTUI_WIZ_IMPORT_ALLOW_CTL 0x00080000</term>
            <term>Allow CTLs to be imported.</term>
            </item>
            <item>
            <term>CRYPTUI_WIZ_IMPORT_NO_CHANGE_DEST_STORE 0x00010000</term>
            <term>Do not allow the user to change the destination certificate store represented by the hDestCertStore parameter.</term>
            </item>
            <item>
            <term>CRYPTUI_WIZ_IMPORT_TO_LOCALMACHINE 0x00100000</term>
            <term>
            Import the object to the certificate store for the local computer. This applies only to Personal Information Exchange (PFX) imports.
            </term>
            </item>
            <item>
            <term>CRYPTUI_WIZ_IMPORT_TO_CURRENTUSER 0x00200000</term>
            <term>Import the object to the certificate store for the current user. This applies only to PFX imports.</term>
            </item>
            <item>
            <term>CRYPTUI_WIZ_IMPORT_REMOTE_DEST_STORE 0x00400000</term>
            <term>
            Import the object to a remote certificate store. Set this flag if the hDestCertStore parameter represents a remote certificate store.
            </term>
            </item>
            </list>
            </param>
            <param name="hwndParent">
            The handle of the window to use as the parent of the dialog box that this function creates. This parameter is ignored if the
            <c>CRYPTUI_WIZ_NO_UI</c> flag is set in dwFlags.
            </param>
            <param name="pwszWizardTitle">
            A pointer to a null-terminated Unicode string that contains the title to use in the dialog box that this function creates. This
            parameter is ignored if the <c>CRYPTUI_WIZ_NO_UI</c> flag is set in dwFlags.
            </param>
            <param name="pImportSrc">
            A pointer to a CRYPTUI_WIZ_IMPORT_SRC_INFO structure that contains information about the object to import. This parameter is
            required if <c>CRYPTUI_WIZ_NO_UI</c> is set in dwFlags and is optional otherwise.
            </param>
            <param name="hDestCertStore">
            A handle to the certificate store to import to. If this parameter is <c>NULL</c> and the <c>CRYPTUI_WIZ_NO_UI</c> flag is not
            set in dwFlags, the wizard will prompt the user to select a certificate store.
            </param>
            <returns>
            <para>If the function succeeds, the function returns nonzero.</para>
            <para>If the function fails, it returns zero. For extended error information, call the GetLastError function.</para>
            </returns>
            <remarks>
            <para>If none of following three flags are set in dwFlags, import of any type of content is allowed:</para>
            <list type="bullet">
            <item>
            <term>CRYPTUI_WIZ_IMPORT_ALLOW_CERT</term>
            </item>
            <item>
            <term>CRYPTUI_WIZ_IMPORT_ALLOW_CRL</term>
            </item>
            <item>
            <term>CRYPTUI_WIZ_IMPORT_ALLOW_CTL</term>
            </item>
            </list>
            <para>
            The <c>CRYPTUI_WIZ_IMPORT_TO_LOCALMACHINE</c> and <c>CRYPTUI_WIZ_IMPORT_TO_CURRENTUSER</c> flags are used to force the content
            of a PFX BLOB into either the local machine store or the current user store. If neither of these flags are set and
            hDestCertStore is <c>NULL</c>:
            </para>
            <list type="bullet">
            <item>
            <term>The private key in the PFX BLOB will be forced to be imported into the current user store.</term>
            </item>
            <item>
            <term>
            And if <c>CRYPTUI_WIZ_NO_UI</c> is not set, the wizard prompts the user to select a certificate store from among the current
            user certificate stores.
            </term>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.CryptUI.CryptUIWizImport(Vanara.PInvoke.CryptUI.CryptUIWizFlags,Vanara.PInvoke.HWND,System.String,System.IntPtr,Vanara.PInvoke.Crypt32.HCERTSTORE)">
            <summary>
            The function imports a certificate, a certificate trust list (CTL), a certificate revocation list (CRL), or a certificate store
            to a certificate store. The import can be performed with or without user interaction.
            </summary>
            <param name="dwFlags">
            <para>
            Contains flags that modify the behavior of the function. This can be zero or a combination of one or more of the following values.
            </para>
            <para>
            <c>Note</c> Except for <c>CRYPTUI_WIZ_NO_UI</c>, none of the following constants are defined in a published header file. To use
            these constants, you must define them by using the specified values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPTUI_WIZ_NO_UI 0x0001</term>
            <term>
            This function will perform the import based on the information in the CRYPTUI_WIZ_IMPORT_SRC_INFO structure pointed to by
            pImportSrc into the store specified by hDestCertStore without displaying any user interface. If this flag is not specified, this
            function will display a wizard to guide the user through the import process. Beginning with Windows 8 and Windows Server 2012,
            if you set this flag and are importing a certificate from a PFX BLOB that was protected to an Active Directory (AD) principal,
            and the current user, as part of that principal, has permission to decrypt the password embedded in the PFX packet, the
            importation will succeed without requiring that a password be set in the CRYPTUI_WIZ_IMPORT_SRC_INFO structure. For more
            information about protecting PFX to an AD principal, see the pvPara parameter and the PKCS12_PROTECT_TO_DOMAIN_SIDS flag of the
            PFXExportCertStoreEx function.
            </term>
            </item>
            <item>
            <term>CRYPTUI_WIZ_IGNORE_NO_UI_FLAG_FOR_CSPS 0x0002</term>
            <term>
            Suppress all user interfaces generated by cryptographic service providers (CSPs). This option can be overridden by the
            CRYPTUI_WIZ_NO_UI_EXCEPT_CSP option.
            </term>
            </item>
            <item>
            <term>CRYPTUI_WIZ_NO_UI_EXCEPT_CSP 0x0003</term>
            <term>
            Suppress all user interfaces except those generated by CSPs. This option overrides the CRYPTUI_WIZ_IGNORE_NO_UI_FLAG_FOR_CSPS option.
            </term>
            </item>
            <item>
            <term>CRYPTUI_WIZ_IMPORT_ALLOW_CERT 0x00020000</term>
            <term>Allow certificates to be imported.</term>
            </item>
            <item>
            <term>CRYPTUI_WIZ_IMPORT_ALLOW_CRL 0x00040000</term>
            <term>Allow CRLs to be imported.</term>
            </item>
            <item>
            <term>CRYPTUI_WIZ_IMPORT_ALLOW_CTL 0x00080000</term>
            <term>Allow CTLs to be imported.</term>
            </item>
            <item>
            <term>CRYPTUI_WIZ_IMPORT_NO_CHANGE_DEST_STORE 0x00010000</term>
            <term>Do not allow the user to change the destination certificate store represented by the hDestCertStore parameter.</term>
            </item>
            <item>
            <term>CRYPTUI_WIZ_IMPORT_TO_LOCALMACHINE 0x00100000</term>
            <term>
            Import the object to the certificate store for the local computer. This applies only to Personal Information Exchange (PFX) imports.
            </term>
            </item>
            <item>
            <term>CRYPTUI_WIZ_IMPORT_TO_CURRENTUSER 0x00200000</term>
            <term>Import the object to the certificate store for the current user. This applies only to PFX imports.</term>
            </item>
            <item>
            <term>CRYPTUI_WIZ_IMPORT_REMOTE_DEST_STORE 0x00400000</term>
            <term>
            Import the object to a remote certificate store. Set this flag if the hDestCertStore parameter represents a remote certificate store.
            </term>
            </item>
            </list>
            </param>
            <param name="hwndParent">
            The handle of the window to use as the parent of the dialog box that this function creates. This parameter is ignored if the
            <c>CRYPTUI_WIZ_NO_UI</c> flag is set in dwFlags.
            </param>
            <param name="pwszWizardTitle">
            A pointer to a null-terminated Unicode string that contains the title to use in the dialog box that this function creates. This
            parameter is ignored if the <c>CRYPTUI_WIZ_NO_UI</c> flag is set in dwFlags.
            </param>
            <param name="pImportSrc">
            A pointer to a CRYPTUI_WIZ_IMPORT_SRC_INFO structure that contains information about the object to import. This parameter is
            required if <c>CRYPTUI_WIZ_NO_UI</c> is set in dwFlags and is optional otherwise.
            </param>
            <param name="hDestCertStore">
            A handle to the certificate store to import to. If this parameter is <c>NULL</c> and the <c>CRYPTUI_WIZ_NO_UI</c> flag is not
            set in dwFlags, the wizard will prompt the user to select a certificate store.
            </param>
            <returns>
            <para>If the function succeeds, the function returns nonzero.</para>
            <para>If the function fails, it returns zero. For extended error information, call the GetLastError function.</para>
            </returns>
            <remarks>
            <para>If none of following three flags are set in dwFlags, import of any type of content is allowed:</para>
            <list type="bullet">
            <item>
            <term>CRYPTUI_WIZ_IMPORT_ALLOW_CERT</term>
            </item>
            <item>
            <term>CRYPTUI_WIZ_IMPORT_ALLOW_CRL</term>
            </item>
            <item>
            <term>CRYPTUI_WIZ_IMPORT_ALLOW_CTL</term>
            </item>
            </list>
            <para>
            The <c>CRYPTUI_WIZ_IMPORT_TO_LOCALMACHINE</c> and <c>CRYPTUI_WIZ_IMPORT_TO_CURRENTUSER</c> flags are used to force the content
            of a PFX BLOB into either the local machine store or the current user store. If neither of these flags are set and
            hDestCertStore is <c>NULL</c>:
            </para>
            <list type="bullet">
            <item>
            <term>The private key in the PFX BLOB will be forced to be imported into the current user store.</term>
            </item>
            <item>
            <term>
            And if <c>CRYPTUI_WIZ_NO_UI</c> is not set, the wizard prompts the user to select a certificate store from among the current
            user certificate stores.
            </term>
            </item>
            </list>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.CryptUI.CERT_SELECTUI_INPUT">
            <summary>
            The <c>CERT_SELECTUI_INPUT</c> structure is used by the CertSelectionGetSerializedBlob function to serialize the certificates
            contained in a store or an array of certificate chains. The returned serialized BLOB can be passed to the
            CredUIPromptForWindowsCredentials function.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CERT_SELECTUI_INPUT.hStore">
            <summary>
            The handle of a certificate store created by the caller. The store contains the set of application preselected certificates.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CERT_SELECTUI_INPUT.prgpChain">
            <summary>
            An array of pointers to CERT_CHAIN_CONTEXT structures. Applications provision this array by preselecting certificate chains
            using the CertSelectCertificateChains function.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CERT_SELECTUI_INPUT.cChain">
            <summary>The number of CERT_CHAIN_CONTEXT structures that are in the array pointed to by the <c>prgpChain</c> member.</summary>
        </member>
        <member name="M:Vanara.PInvoke.CryptUI.CERT_SELECTUI_INPUT.GetChain">
            <summary>Gets the array of pointers to CERT_CHAIN_CONTEXT structures.</summary>
        </member>
        <member name="T:Vanara.PInvoke.CryptUI.CRYPTUI_CERT_MGR_STRUCT">
            <summary>The <c>CRYPTUI_CERT_MGR_STRUCT</c> structure contains information about a certificate manager dialog box.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_CERT_MGR_STRUCT.dwSize">
            <summary>The size, in bytes, of the structure. This value must be set to .</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_CERT_MGR_STRUCT.hwndParent">
            <summary>Handle of the parent window of the dialog box.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_CERT_MGR_STRUCT.dwFlags">
            <summary>Reserved. This value must be set to zero.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_CERT_MGR_STRUCT.pwszTitle">
            <summary>Title of the dialog box.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_CERT_MGR_STRUCT.pszInitUsageOID">
            <summary>
            Enhanced key usage object identifier (OID) of the certificates that will initially appear in the dialog box. The default
            value is <c>NULL</c>, which displays all certificates.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.CryptUI.CRYPTUI_INITDIALOG_STRUCT">
            <summary>
            The <c>CRYPTUI_INITDIALOG_STRUCT</c> structure supports the CRYPTUI_VIEWCERTIFICATE_STRUCT structure. It is passed as the lParam
            in the WM_INITDIALOG call to each property sheet that is in the <c>rgPropSheetPages</c> array of the
            CRYPTUI_VIEWCERTIFICATE_STRUCT structure. The <c>CRYPTUI_VIEWCERTIFICATE_STRUCT</c> structure is used in the
            CryptUIDlgViewCertificate function.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_INITDIALOG_STRUCT.lParam">
            <summary>The <c>lParam</c> in the PROPSHEETPAGE structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_INITDIALOG_STRUCT.pCertContext">
            <summary>A pointer to the CERT_CONTEXT structure for the certificate that CryptUIDlgViewCertificate is displaying.</summary>
        </member>
        <member name="T:Vanara.PInvoke.CryptUI.CRYPTUI_VIEWCERTIFICATE_STRUCT">
            <summary>
            The <c>CRYPTUI_VIEWCERTIFICATE_STRUCT</c> structure contains information about a certificate to view. This structure is used in
            the CryptUIDlgViewCertificate function.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_VIEWCERTIFICATE_STRUCT.dwSize">
            <summary>The size, in bytes, of the <c>CRYPTUI_VIEWCERTIFICATE_STRUCT</c> structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_VIEWCERTIFICATE_STRUCT.hwndParent">
            <summary>A handle to the window that is the parent of the dialog box produced by CryptUIDlgViewCertificate.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_VIEWCERTIFICATE_STRUCT.dwFlags">
            <summary>
            <para>This member can be one or more of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPTUI_HIDE_HIERARCHYPAGE</term>
            <term>The Certification Path page is disabled.</term>
            </item>
            <item>
            <term>CRYPTUI_HIDE_DETAILPAGE</term>
            <term>The Details page is disabled.</term>
            </item>
            <item>
            <term>CRYPTUI_DISABLE_EDITPROPERTIES</term>
            <term>The user is not allowed to change the properties.</term>
            </item>
            <item>
            <term>CRYPTUI_ENABLE_EDITPROPERTIES</term>
            <term>The user is allowed to change the properties.</term>
            </item>
            <item>
            <term>CRYPTUI_DISABLE_ADDTOSTORE</term>
            <term>The Install button is disabled.</term>
            </item>
            <item>
            <term>CRYPTUI_ENABLE_ADDTOSTORE</term>
            <term>The Install button is enabled.</term>
            </item>
            <item>
            <term>CRYPTUI_ACCEPT_DECLINE_STYLE</term>
            <term>The pages or buttons that allow the user to accept or decline any decision are disabled.</term>
            </item>
            <item>
            <term>CRYPTUI_IGNORE_UNTRUSTED_ROOT</term>
            <term>An untrusted root error is ignored.</term>
            </item>
            <item>
            <term>CRYPTUI_DONT_OPEN_STORES</term>
            <term>Known trusted stores will not be used to build the chain.</term>
            </item>
            <item>
            <term>CRYPTUI_ONLY_OPEN_ROOT_STORE</term>
            <term>A known trusted root store will not be used to build the chain.</term>
            </item>
            <item>
            <term>CRYPTUI_WARN_UNTRUSTED_ROOT</term>
            <term>
            Use only when viewing certificates on remote computers. If this flag is used, the first element of rghStores must be the
            handle of the root store on the remote computer.
            </term>
            </item>
            <item>
            <term>CRYPTUI_ENABLE_REVOCATION_CHECKING</term>
            <term>
            Enable revocation checking with default behavior. The default behavior is to enable revocation checking of the entire
            certificate chain except the root certificate. Valid only if neither the pCryptProviderData nor the hWVTStateData union
            member is passed in.
            </term>
            </item>
            <item>
            <term>CRYPTUI_WARN_REMOTE_TRUST</term>
            <term>When building a certificate chain for a remote computer, warn that the chain may not be trusted on the remote computer.</term>
            </item>
            <item>
            <term>CRYPTUI_DISABLE_EXPORT</term>
            <term>If this flag is set, the Copy to file button will be disabled on the Detail page.</term>
            </item>
            <item>
            <term>CRYPTUI_ENABLE_REVOCATION_CHECK_END_CERT</term>
            <term>
            Enable revocation checking only on the leaf certificate in the certificate chain. Valid only if neither the
            pCryptProviderData nor the hWVTStateData union member is passed in.
            </term>
            </item>
            <item>
            <term>CRYPTUI_ENABLE_REVOCATION_CHECK_CHAIN</term>
            <term>
            Enable revocation checking on each certificate in the certificate chain. Valid only if neither the pCryptProviderData nor
            the hWVTStateData union member is passed in. Note Because root certificates rarely contain information that allows
            revocation checking, it is expected that use of this option will usually result in failure of the CryptUIDlgViewCertificate
            function. The recommended option is to use CRYPTUI_ENABLE_REVOCATION_CHECK_CHAIN_EXCLUDE_ROOT.
            </term>
            </item>
            <item>
            <term>CRYPTUI_ENABLE_REVOCATION_CHECK_CHAIN_EXCLUDE_ROOT</term>
            <term>
            Enable revocation checking on each certificate in the certificate chain except for the root certificate. This is the
            recommended option to use for certificate revocation checking. Valid only if neither the pCryptProviderData nor the
            hWVTStateData union member is passed in. Note This flag is equivalent to CRYPTUI_ENABLE_REVOCATION_CHECKING.
            </term>
            </item>
            <item>
            <term>CRYPTUI_DISABLE_HTMLLINK</term>
            <term>Disable the HTML Help button (?) in the Certificate dialog box.</term>
            </item>
            <item>
            <term>CRYPTUI_DISABLE_ISSUERSTATEMENT</term>
            <term>Disable the Issuer Statement button on the General tab of the Certificate dialog box.</term>
            </item>
            <item>
            <term>CRYPTUI_CACHE_ONLY_URL_RETRIEVAL</term>
            <term>
            Disable online revocation checking. Set this flag to ensure that the CryptUIDlgViewCertificate function uses the local cache
            to retrieve the certificate and does not attempt to retrieve the certificate from the network. Windows Server 2008, Windows
            Vista, Windows Server 2003 and Windows XP: This flag is not supported.
            </term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_VIEWCERTIFICATE_STRUCT.szTitle">
            <summary>A pointer to a null-terminated string that contains the title for the window.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_VIEWCERTIFICATE_STRUCT.pCertContext">
            <summary>A pointer to the CERT_CONTEXT structure that contains the certificate context to display.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_VIEWCERTIFICATE_STRUCT.rgszPurposes">
            <summary>
            An array of pointers to null-terminated strings that contain the purposes for which this certificate will be validated.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_VIEWCERTIFICATE_STRUCT.cPurposes">
            <summary>The number of purposes in the <c>rgszPurposes</c> array.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_VIEWCERTIFICATE_STRUCT.pData">
            <summary>
            If the WinVerifyTrust function has already been called for the certificate and the WTHelperProvDataFromStateData function
            was also called, pass in a pointer to the state structure that was acquired from the call to
            <c>WTHelperProvDataFromStateData</c>. If <c>pCryptProviderData</c> is set, <c>fpCryptProviderDataTrustedUsage</c>,
            <c>idxSigner</c>, <c>idxCert</c>, and <c>fCounterSignature</c> must also be set.
            <para>OR</para>
            <para>
            If WinVerifyTrust has already been called for the certificate and WTHelperProvDataFromStateData was not called, pass in the
            <c>hWVTStateData</c> member of the WINTRUST_DATA structure. If <c>hWVTStateData</c> is set,
            <c>fpCryptProviderDataTrustedUsage</c>, <c>idxSigner</c>, <c>idxCert</c>, and <c>fCounterSignature</c> must also be set.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_VIEWCERTIFICATE_STRUCT.fpCryptProviderDataTrustedUsage">
            <summary>If WinVerifyTrust was called, this is the result of whether the certificate was trusted.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_VIEWCERTIFICATE_STRUCT.idxSigner">
            <summary>The index of the signer to view.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_VIEWCERTIFICATE_STRUCT.idxCert">
            <summary>
            The index of the certificate that is being viewed within the signer chain. The certificate context of this cert must match <c>pCertContext</c>.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_VIEWCERTIFICATE_STRUCT.fCounterSigner">
            <summary><c>TRUE</c> if a countersignature is being viewed. If this is <c>TRUE</c>, <c>idxCounterSigner</c> must be valid.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_VIEWCERTIFICATE_STRUCT.idxCounterSigner">
            <summary>The index of the countersigner to view.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_VIEWCERTIFICATE_STRUCT.cStores">
            <summary>
            The number of other stores in the <c>rghStores</c> array of certificate stores to search when building and validating the
            certificate chain.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_VIEWCERTIFICATE_STRUCT.rghStores">
            <summary>
            An array of <c>HCERTSTORE</c> handles to other certificate stores to search when building and validating the certificate chain.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_VIEWCERTIFICATE_STRUCT.cPropSheetPages">
            <summary>The number of property pages to add to the dialog box.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_VIEWCERTIFICATE_STRUCT.rgPropSheetPages">
            <summary>
            An array of property pages to add to the dialog box. Each page in this array will not receive the <c>lParam</c> in the
            PROPSHEETPAGE structure as the <c>lParam</c> in the WM_INITDIALOG message. It will instead receive a pointer to a
            CRYPTUI_INITDIALOG_STRUCT structure. It contains the <c>lParam</c> in <c>PROPSHEETPAGE</c> and the pointer to the
            CERT_CONTEXT for which the page is being displayed.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_VIEWCERTIFICATE_STRUCT.nStartPage">
            <summary>
            The index of the initial page that will be displayed. If the highest bit (0x8000) is set, the index is assumed to index
            <c>rgPropSheetPages</c> (after the highest bit has been stripped off, for example, 0x8000 will indicate the first page in
            <c>rgPropSheetPages</c>). If the highest bit is zero, <c>nStartPage</c> will be the starting index of the default
            certificate dialog box property pages.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.CryptUI.CRYPTUI_WIZ_DIGITAL_SIGN_BLOB_INFO">
            <summary>
            <para>
            [The <c>CRYPTUI_WIZ_DIGITAL_SIGN_BLOB_INFO</c> structure is available for use in the operating systems specified in the
            Requirements section. It may be altered or unavailable in subsequent versions.]
            </para>
            <para>
            The <c>CRYPTUI_WIZ_DIGITAL_SIGN_BLOB_INFO</c> structure contains information about the public key BLOB used by the
            CryptUIWizDigitalSign function.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_WIZ_DIGITAL_SIGN_BLOB_INFO.dwSize">
            <summary>The size, in bytes, of the structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_WIZ_DIGITAL_SIGN_BLOB_INFO.pGuidSubject">
            <summary>
            A pointer to a <c>GUID</c> that contains the GUID that identifies the Session Initiation Protocol (SIP) functions to load.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_WIZ_DIGITAL_SIGN_BLOB_INFO.cbBlob">
            <summary>The size, in bytes, of the BLOB pointed to by the <c>pbBlob</c> member.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_WIZ_DIGITAL_SIGN_BLOB_INFO.pbBlob">
            <summary>A pointer to the BLOB to sign.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_WIZ_DIGITAL_SIGN_BLOB_INFO.pwszDisplayName">
            <summary>A pointer to a null-terminated Unicode string that contains the display name of the BLOB to sign.</summary>
        </member>
        <member name="T:Vanara.PInvoke.CryptUI.CRYPTUI_WIZ_DIGITAL_SIGN_CERT_PVK_INFO">
            <summary>
            <para>
            [The <c>CRYPTUI_WIZ_DIGITAL_SIGN_CERT_PVK_INFO</c> structure is available for use in the operating systems specified in the
            Requirements section. It may be altered or unavailable in subsequent versions.]
            </para>
            <para>
            The <c>CRYPTUI_WIZ_DIGITAL_SIGN_CERT_PVK_INFO</c> structure contains information about the PVK file that contains the
            certificates used by the CryptUIWizDigitalSign function.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_WIZ_DIGITAL_SIGN_CERT_PVK_INFO.dwSize">
            <summary>The size, in bytes, of the structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_WIZ_DIGITAL_SIGN_CERT_PVK_INFO.pwszSigningCertFileName">
            <summary>
            A pointer to a null-terminated Unicode string that contains the path and file named of the file that contains the signing certificates.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_WIZ_DIGITAL_SIGN_CERT_PVK_INFO.dwPvkChoice">
            <summary>
            <para>Specifies the type of entity that contains the certificates. This can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPTUI_WIZ_DIGITAL_SIGN_PVK_FILE</term>
            <term>The entity is a PVK file.</term>
            </item>
            <item>
            <term>CRYPTUI_WIZ_DIGITAL_SIGN_PVK_PROV</term>
            <term>The entity is a PVK provider.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_WIZ_DIGITAL_SIGN_CERT_PVK_INFO.pPvkInfo">
            <summary>
            A pointer to a CRYPTUI_WIZ_DIGITAL_SIGN_PVK_FILE_INFO structure that contains the PVK file that contains the certificates.
            This member is used if <c>CRYPTUI_WIZ_DIGITAL_SIGN_PVK_FILE</c> is specified for the <c>dwPvkChoice</c> member.
            <para>OR</para>
            <para>
            A pointer to a CRYPT_KEY_PROV_INFO structure that contains information about the PVK provider that contains the
            certificates. This member is used if <c>CRYPTUI_WIZ_DIGITAL_SIGN_PVK_PROV</c> is specified for the <c>dwPvkChoice</c> member.
            </para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.CryptUI.CRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT">
            <summary>
            <para>
            [The <c>CRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT</c> structure is available for use in the operating systems specified in the
            Requirements section. It may be altered or unavailable in subsequent versions.]
            </para>
            <para>
            The <c>CRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT</c> structure is used with the CryptUIWizDigitalSign function to contain information
            about a BLOB.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT.dwSize">
            <summary>The size, in bytes, of the structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT.cbBlob">
            <summary>The size, in bytes, of the BLOB pointed to by the <c>pbBlob</c> member.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT.pbBlob">
            <summary>A pointer to the signed BLOB.</summary>
        </member>
        <member name="T:Vanara.PInvoke.CryptUI.CRYPTUI_WIZ_DIGITAL_SIGN_EXTENDED_INFO">
            <summary>
            <para>
            [The <c>CRYPTUI_WIZ_DIGITAL_SIGN_EXTENDED_INFO</c> structure is available for use in the operating systems specified in the
            Requirements section. It may be altered or unavailable in subsequent versions.]
            </para>
            <para>
            The <c>CRYPTUI_WIZ_DIGITAL_SIGN_EXTENDED_INFO</c> structure is used with the CRYPTUI_WIZ_DIGITAL_SIGN_INFO structure to contain
            extended information about a signature.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_WIZ_DIGITAL_SIGN_EXTENDED_INFO.dwSize">
            <summary>The size, in bytes, of the structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_WIZ_DIGITAL_SIGN_EXTENDED_INFO.dwAttrFlags">
            <summary>
            <para>A value that indicates the type of the signature. This can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPTUI_WIZ_DIGITAL_SIGN_COMMERCIAL</term>
            <term>The signature is a commercial signature.</term>
            </item>
            <item>
            <term>CRYPTUI_WIZ_DIGITAL_SIGN_INDIVIDUAL</term>
            <term>The signature is a personal signature.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_WIZ_DIGITAL_SIGN_EXTENDED_INFO.pwszDescription">
            <summary>A pointer to a null-terminated Unicode string that contains the description of the subject of the signature.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_WIZ_DIGITAL_SIGN_EXTENDED_INFO.pwszMoreInfoLocation">
            <summary>
            A pointer to a null-terminated Unicode string that contains the location from which to get more information about the file.
            This information will be displayed when the file is downloaded.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_WIZ_DIGITAL_SIGN_EXTENDED_INFO.pszHashAlg">
            <summary>
            A pointer to a null-terminated ANSI string that contains the object identifier (OID) of the hash algorithm used for the
            signature. The default value is <c>NULL</c>, which indicates that the SHA-1 hash algorithm is used.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_WIZ_DIGITAL_SIGN_EXTENDED_INFO.pwszSigningCertDisplayString">
            <summary>
            A pointer to a null-terminated Unicode string that contains the string displayed on the digital signature wizard page. The
            string should prompt the user to select a certificate for a specific purpose.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_WIZ_DIGITAL_SIGN_EXTENDED_INFO.hAdditionalCertStore">
            <summary>A handle to an additional certificate store that will be added to the signature.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_WIZ_DIGITAL_SIGN_EXTENDED_INFO.psAuthenticated">
            <summary>A pointer to a CRYPT_ATTRIBUTES structure that contains authenticated attributes supplied by the user.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_WIZ_DIGITAL_SIGN_EXTENDED_INFO.psUnauthenticated">
            <summary>A pointer to a CRYPT_ATTRIBUTES structure that contains unauthenticated attributes supplied by the user.</summary>
        </member>
        <member name="T:Vanara.PInvoke.CryptUI.CRYPTUI_WIZ_DIGITAL_SIGN_INFO">
            <summary>
            <para>
            [The <c>CRYPTUI_WIZ_DIGITAL_SIGN_INFO</c> structure is available for use in the operating systems specified in the Requirements
            section. It may be altered or unavailable in subsequent versions.]
            </para>
            <para>
            The <c>CRYPTUI_WIZ_DIGITAL_SIGN_INFO</c> structure contains information about digital signing. This structure is used by the
            CryptUIWizDigitalSign function.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_WIZ_DIGITAL_SIGN_INFO.dwSize">
            <summary>The size, in bytes, of the structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_WIZ_DIGITAL_SIGN_INFO.dwSubjectChoice">
            <summary>
            <para>
            A value that indicates the entity that is to be signed. This member is required if <c>CRYPTUI_WIZ_NO_UI</c> is specified in
            the dwFlags parameter of the CryptUIWizDigitalSign function. This can be one of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPTUI_WIZ_DIGITAL_SIGN_SUBJECT_BLOB</term>
            <term>The memory BLOB specified by the pSignBlobInfo member is to be signed.</term>
            </item>
            <item>
            <term>CRYPTUI_WIZ_DIGITAL_SIGN_SUBJECT_FILE</term>
            <term>The file specified by the pwszFileName member is to be signed.</term>
            </item>
            <item>
            <term>0</term>
            <term>The user will be prompted for a file to sign.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_WIZ_DIGITAL_SIGN_INFO.ToSign">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.CryptUI.CRYPTUI_WIZ_DIGITAL_SIGN_INFO.CRYPTUI_WIZ_DIGITAL_SIGN_INFO_UNION">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_WIZ_DIGITAL_SIGN_INFO.CRYPTUI_WIZ_DIGITAL_SIGN_INFO_UNION.pwszFileName">
            <summary>
            A pointer to a null-terminated Unicode string that contains the path and file name of the file to sign. This member is
            used if <c>CRYPTUI_WIZ_DIGITAL_SIGN_SUBJECT_FILE</c> is specified for the <c>dwSubjectChoice</c> member.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_WIZ_DIGITAL_SIGN_INFO.CRYPTUI_WIZ_DIGITAL_SIGN_INFO_UNION.pSignBlobInfo">
            <summary>
            A pointer to a CRYPTUI_WIZ_DIGITAL_SIGN_BLOB_INFO structure that contains the BLOB to sign. This member is used if
            <c>CRYPTUI_WIZ_DIGITAL_SIGN_SUBJECT_BLOB</c> is specified for the <c>dwSubjectChoice</c> member.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_WIZ_DIGITAL_SIGN_INFO.dwSigningCertChoice">
            <summary>
            <para>
            A value that specifies the location of the certificate that is used to sign the entity. The default value is zero. This can
            be one of the following values.
            </para>
            <para>
            <c>Note</c> If <c>CRYPTUI_WIZ_NO_UI</c> is specified in the dwFlags parameter of the CryptUIWizDigitalSign function, this
            value must be either <c>CRYPTUI_WIZ_DIGITAL_SIGN_CERT</c> or <c>CRYPTUI_WIZ_DIGITAL_SIGN_PVK</c>.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPTUI_WIZ_DIGITAL_SIGN_CERT</term>
            <term>The certificate is contained in the CERT_CONTEXT structure pointed to by the pSigningCertContext member.</term>
            </item>
            <item>
            <term>CRYPTUI_WIZ_DIGITAL_SIGN_STORE</term>
            <term>
            The certificate is contained in the certificate store contained in the CRYPTUI_WIZ_DIGITAL_SIGN_STORE_INFO structure pointed
            to by the pSigningCertStore member.
            </term>
            </item>
            <item>
            <term>CRYPTUI_WIZ_DIGITAL_SIGN_PVK</term>
            <term>
            The certificate is contained in the PVK file contained in the CRYPTUI_WIZ_DIGITAL_SIGN_CERT_PVK_INFO structure pointed to by
            the pSigningCertPvkInfo member.
            </term>
            </item>
            <item>
            <term>0</term>
            <term>The certificates in the My store are used.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_WIZ_DIGITAL_SIGN_INFO.pSigningCertObject">
            <summary>
            A pointer to a CERT_CONTEXT structure that contains the certificate to use to sign the entity. This member is used if
            <c>CRYPTUI_WIZ_DIGITAL_SIGN_CERT</c> is specified for the <c>dwSigningCertChoice</c> member.
            <para>OR</para>
            <para>
            A pointer to a CRYPTUI_WIZ_DIGITAL_SIGN_STORE_INFO structure that contains the certificate to use to sign the entity. This
            member is used if <c>CRYPTUI_WIZ_DIGITAL_SIGN_STORE</c> is specified for the <c>dwSigningCertChoice</c> member.
            </para>
            <para>OR</para>
            <para>
            A pointer to a CRYPTUI_WIZ_DIGITAL_SIGN_CERT_PVK_INFO structure that contains the certificate to use to sign the entity.
            This member is used if <c>CRYPTUI_WIZ_DIGITAL_SIGN_PVK</c> is specified for the <c>dwSigningCertChoice</c> member.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_WIZ_DIGITAL_SIGN_INFO.pwszTimestampURL">
            <summary>A pointer to a null-terminated Unicode string that contains the URL for the time stamp.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_WIZ_DIGITAL_SIGN_INFO.dwAdditionalCertChoice">
            <summary>
            <para>
            A value that indicates whether additional certificates will be included in the signature. The default value is zero. This
            can be one of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPTUI_WIZ_DIGITAL_SIGN_ADD_CHAIN</term>
            <term>The entire certificate chain will be included in the signature.</term>
            </item>
            <item>
            <term>CRYPTUI_WIZ_DIGITAL_SIGN_ADD_CHAIN_NO_ROOT</term>
            <term>All certificates in the certificate chain except the root will be included in the signature.</term>
            </item>
            <item>
            <term>0</term>
            <term>No additional certificates will be included in the signature.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_WIZ_DIGITAL_SIGN_INFO.pSignExtInfo">
            <summary>
            A pointer to a CRYPTUI_WIZ_DIGITAL_SIGN_EXTENDED_INFO structure that contains extended information about the signature.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.CryptUI.CRYPTUI_WIZ_DIGITAL_SIGN_PVK_FILE_INFO">
            <summary>
            <para>
            [The <c>CRYPTUI_WIZ_DIGITAL_SIGN_PVK_FILE_INFO</c> structure is available for use in the operating systems specified in the
            Requirements section. It may be altered or unavailable in subsequent versions.]
            </para>
            <para>
            The <c>CRYPTUI_WIZ_DIGITAL_SIGN_PVK_FILE_INFO</c> structure is used with the CRYPTUI_WIZ_DIGITAL_SIGN_INFO structure to contain
            information about the PVK file used by the digital signature wizard.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_WIZ_DIGITAL_SIGN_PVK_FILE_INFO.dwSize">
            <summary>The size, in bytes, of the structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_WIZ_DIGITAL_SIGN_PVK_FILE_INFO.pwszPvkFileName">
            <summary>A pointer to a null-terminated Unicode string that contains the path and file name of the PVK file.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_WIZ_DIGITAL_SIGN_PVK_FILE_INFO.pwszProvName">
            <summary>A pointer to a null-terminated Unicode string that contains the name of the provider.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_WIZ_DIGITAL_SIGN_PVK_FILE_INFO.dwProvType">
            <summary>
            Contains the provider type identifier. For more information about the provider types, see Cryptographic Provider Types.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.CryptUI.CRYPTUI_WIZ_DIGITAL_SIGN_STORE_INFO">
            <summary>
            <para>
            [The <c>CRYPTUI_WIZ_DIGITAL_SIGN_STORE_INFO</c> structure is available for use in the operating systems specified in the
            Requirements section. It may be altered or unavailable in subsequent versions.]
            </para>
            <para>
            The <c>CRYPTUI_WIZ_DIGITAL_SIGN_STORE_INFO</c> structure contains information about the certificate store used by the digital
            signature wizard.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_WIZ_DIGITAL_SIGN_STORE_INFO.dwSize">
            <summary>The size, in bytes, of the structure. This value must be set to .</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_WIZ_DIGITAL_SIGN_STORE_INFO.cCertStore">
            <summary>Number of certificates in the <c>rghCertStore</c> member.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_WIZ_DIGITAL_SIGN_STORE_INFO.rghCertStore">
            <summary>A pointer to a handle to the certificate store that will be used by the digital signature wizard.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_WIZ_DIGITAL_SIGN_STORE_INFO.pFilterCallback">
            <summary>Filter callback function used to display the certificate.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_WIZ_DIGITAL_SIGN_STORE_INFO.pvCallbackData">
            <summary>A pointer to the callback data.</summary>
        </member>
        <member name="T:Vanara.PInvoke.CryptUI.CRYPTUI_WIZ_EXPORT_CERTCONTEXT_INFO">
            <summary>
            <para>
            [The <c>CRYPTUI_WIZ_EXPORT_CERTCONTEXT_INFO</c> structure is available for use in the operating systems specified in the
            Requirements section. It may be altered or unavailable in subsequent versions.]
            </para>
            <para>
            The <c>CRYPTUI_WIZ_EXPORT_CERTCONTEXT_INFO</c> structure contains information that controls the operation of the
            CryptUIWizExport function when a certificate is the object being exported.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_WIZ_EXPORT_CERTCONTEXT_INFO.dwSize">
            <summary>The size, in bytes, of this structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_WIZ_EXPORT_CERTCONTEXT_INFO.dwExportFormat">
            <summary>
            <para>A value that indicates the export format of the certificate. This member can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPTUI_WIZ_EXPORT_FORMAT_DER</term>
            <term>Export in Abstract Syntax Notation One (ASN.1) Distinguished Encoding Rules (DER) format.</term>
            </item>
            <item>
            <term>CRYPTUI_WIZ_EXPORT_FORMAT_PFX</term>
            <term>Export in Private Information Exchange (PFX) format.</term>
            </item>
            <item>
            <term>CRYPTUI_WIZ_EXPORT_FORMAT_PKCS7</term>
            <term>Export in Public Key Cryptography Standard #7 (PKCS #7) format.</term>
            </item>
            <item>
            <term>CRYPTUI_WIZ_EXPORT_FORMAT_BASE64</term>
            <term>Export in base 64 format.</term>
            </item>
            <item>
            <term>CRYPTUI_WIZ_EXPORT_FORMAT_CRL</term>
            <term>Export in certificate revocation list (CRL) format.</term>
            </item>
            <item>
            <term>CRYPTUI_WIZ_EXPORT_FORMAT_CTL</term>
            <term>Export in certificate trust list (CTL) format.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_WIZ_EXPORT_CERTCONTEXT_INFO.fExportChain">
            <summary>
            Indicates whether the certificate chain should be exported in addition to the certificate. Contains nonzero to export the
            chain or zero to not export the chain.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_WIZ_EXPORT_CERTCONTEXT_INFO.fExportPrivateKeys">
            <summary>
            Indicates whether the private key should be exported in addition to the certificate. Contains nonzero to export the private
            key or zero to not export the private key.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_WIZ_EXPORT_CERTCONTEXT_INFO.pwszPassword">
            <summary>
            A pointer to a null-terminated Unicode string that contains the password used to access the private key. This is required if
            <c>fExportPrivateKeys</c> is nonzero and is otherwise ignored.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_WIZ_EXPORT_CERTCONTEXT_INFO.fStrongEncryption">
            <summary>
            <para>
            Indicates whether strong encryption should be used in the export process. Contains nonzero to use strong encryption or zero
            to use weak encryption. This must be nonzero if <c>dwExportFormat</c> is <c>CRYPTUI_WIZ_EXPORT_FORMAT_PFX</c>. If this is
            nonzero, the PFX BLOB produced is not compatible with Internet Explorer 4.0 or earlier versions.
            </para>
            <para>
            <c>Note</c> We recommend that you set this to nonzero; otherwise, a substantially weaker encryption algorithm is used in the
            export process.
            </para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.CryptUI.CRYPTUI_WIZ_EXPORT_INFO">
            <summary>
            <para>
            [The <c>CRYPTUI_WIZ_EXPORT_INFO</c> structure is available for use in the operating systems specified in the Requirements
            section. It may be altered or unavailable in subsequent versions.]
            </para>
            <para>
            The <c>CRYPTUI_WIZ_EXPORT_INFO</c> structure contains information that controls the operation of the CryptUIWizExport function.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_WIZ_EXPORT_INFO.dwSize">
            <summary>The size, in bytes, of this structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_WIZ_EXPORT_INFO.pwszExportFileName">
            <summary>
            A pointer to a null-terminated Unicode string that contains the fully qualified file name to export to. If this member is
            not <c>NULL</c> and the <c>CRYPTUI_WIZ_NO_UI</c> flag in the dwFlags parameter of the CryptUIWizExport function is not set,
            this string is displayed to the user as the default file name. This member is required if the <c>CRYPTUI_WIZ_NO_UI</c> flag
            is set. This member is otherwise optional.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_WIZ_EXPORT_INFO.dwSubjectChoice">
            <summary>
            <para>Indicates the type of the subject to export. This member can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPTUI_WIZ_EXPORT_CERT_CONTEXT</term>
            <term>Export the certificate context that is specified in the pCertContext member.</term>
            </item>
            <item>
            <term>CRYPTUI_WIZ_EXPORT_CTL_CONTEXT</term>
            <term>Export the certificate trust list (CTL) context that is specified in the pCTLContext member.</term>
            </item>
            <item>
            <term>CRYPTUI_WIZ_EXPORT_CRL_CONTEXT</term>
            <term>Export the certificate revocation list (CRL) context that is specified in the pCRLContext member.</term>
            </item>
            <item>
            <term>CRYPTUI_WIZ_EXPORT_CERT_STORE</term>
            <term>Export the certificate store that is specified in the hCertStore member.</term>
            </item>
            <item>
            <term>CRYPTUI_WIZ_EXPORT_CERT_STORE_CERTIFICATES_ONLY</term>
            <term>Export only the certificates from the certificate store that is specified in the hCertStore member.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_WIZ_EXPORT_INFO.Subject">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.CryptUI.CRYPTUI_WIZ_EXPORT_INFO.CRYPTUI_WIZ_EXPORT_INFO_UNION">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_WIZ_EXPORT_INFO.CRYPTUI_WIZ_EXPORT_INFO_UNION.pCertContext">
            <summary>
            A pointer to the CERT_CONTEXT structure that contains the certificate to export. This member is used if the
            <c>dwSubjectChoice</c> member contains <c>CRYPTUI_WIZ_EXPORT_CERT_CONTEXT</c>.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_WIZ_EXPORT_INFO.CRYPTUI_WIZ_EXPORT_INFO_UNION.pCTLContext">
            <summary>
            A pointer to the CTL_CONTEXT structure that contains the CTL to export. This member is used if the
            <c>dwSubjectChoice</c> member contains <c>CRYPTUI_WIZ_EXPORT_CTL_CONTEXT</c>.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_WIZ_EXPORT_INFO.CRYPTUI_WIZ_EXPORT_INFO_UNION.pCRLContext">
            <summary>
            A pointer to the CRL_CONTEXT structure that contains the CRL to export. This member is used if the
            <c>dwSubjectChoice</c> member contains <c>CRYPTUI_WIZ_EXPORT_CRL_CONTEXT</c>.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_WIZ_EXPORT_INFO.CRYPTUI_WIZ_EXPORT_INFO_UNION.hCertStore">
            <summary>
            A handle to the certificate store to export. This member is used if the <c>dwSubjectChoice</c> member contains
            <c>CRYPTUI_WIZ_EXPORT_CERT_STORE</c> or <c>CRYPTUI_WIZ_EXPORT_CERT_STORE_CERTIFICATES_ONLY</c>.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_WIZ_EXPORT_INFO.cStores">
            <summary>The number of elements in the <c>rghStores</c> array.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_WIZ_EXPORT_INFO.rghStores">
            <summary>
            An array of extra certificate stores to search for certificates in the trust chain if the chain is being exported with a
            certificate. This member is ignored if <c>dwSubjectChoice</c> is anything other than the
            <c>CRYPTUI_WIZ_EXPORT_CERT_CONTEXT</c> value. The <c>cStores</c> member contains the number of elements in this array.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.CryptUI.CRYPTUI_WIZ_IMPORT_SRC_INFO">
            <summary>
            <para>
            [The <c>CRYPTUI_WIZ_IMPORT_SRC_INFO</c> structure is available for use in the operating systems specified in the Requirements
            section. It may be altered or unavailable in subsequent versions.]
            </para>
            <para>
            The <c>CRYPTUI_WIZ_IMPORT_SRC_INFO</c> structure contains the subject to import into the CryptUIWizImport function. The subject
            can be a certificate, a certificate trust list (CTL), or a certificate revocation list (CRL).
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_WIZ_IMPORT_SRC_INFO.dwSize">
            <summary>The size, in bytes, of this structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_WIZ_IMPORT_SRC_INFO.dwSubjectChoice">
            <summary>
            <para>Indicates the type of subject to import. This member can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPTUI_WIZ_IMPORT_SUBJECT_FILE</term>
            <term>Import the certificate stored in the file referenced in the pwszFileName member.</term>
            </item>
            <item>
            <term>CRYPTUI_WIZ_IMPORT_SUBJECT_CERT_CONTEXT</term>
            <term>Import the certificate referenced in the pCertContext member.</term>
            </item>
            <item>
            <term>CRYPTUI_WIZ_IMPORT_SUBJECT_CTL_CONTEXT</term>
            <term>Import the CTL referenced in the pCTLContext member.</term>
            </item>
            <item>
            <term>CRYPTUI_WIZ_IMPORT_SUBJECT_CRL_CONTEXT</term>
            <term>Import the CRL referenced in the pCRLContext member.</term>
            </item>
            <item>
            <term>CRYPTUI_WIZ_IMPORT_SUBJECT_CERT_STORE</term>
            <term>Import the certificate store referenced in the hCertStore member.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_WIZ_IMPORT_SRC_INFO.Subject">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.CryptUI.CRYPTUI_WIZ_IMPORT_SRC_INFO.CRYPTUI_WIZ_IMPORT_SRC_INFO_UNION">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_WIZ_IMPORT_SRC_INFO.CRYPTUI_WIZ_IMPORT_SRC_INFO_UNION.pwszFileName">
            <summary>
            A pointer to a null-terminated Unicode string that contains the path and file name of the file that contains the
            certificate to import. This member is used if the <c>dwSubjectChoice</c> member contains <c>CRYPTUI_WIZ_IMPORT_SUBJECT_FILE</c>.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_WIZ_IMPORT_SRC_INFO.CRYPTUI_WIZ_IMPORT_SRC_INFO_UNION.pCertContext">
            <summary>
            A pointer to the CERT_CONTEXT structure that contains the certificate to import. This member is used if the
            <c>dwSubjectChoice</c> member contains <c>CRYPTUI_WIZ_IMPORT_SUBJECT_CERT_CONTEXT</c>.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_WIZ_IMPORT_SRC_INFO.CRYPTUI_WIZ_IMPORT_SRC_INFO_UNION.pCTLContext">
            <summary>
            A pointer to the CTL_CONTEXT structure that contains the CTL to import. This member is used if the
            <c>dwSubjectChoice</c> member contains <c>CRYPTUI_WIZ_IMPORT_SUBJECT_CTL_CONTEXT</c>.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_WIZ_IMPORT_SRC_INFO.CRYPTUI_WIZ_IMPORT_SRC_INFO_UNION.pCRLContext">
            <summary>
            A pointer to the CRL_CONTEXT structure that contains the CRL to import. This member is used if the
            <c>dwSubjectChoice</c> member contains <c>CRYPTUI_WIZ_IMPORT_SUBJECT_CRL_CONTEXT</c>.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_WIZ_IMPORT_SRC_INFO.CRYPTUI_WIZ_IMPORT_SRC_INFO_UNION.hCertStore">
            <summary>
            A handle to the certificate store to import. This member is used if the <c>dwSubjectChoice</c> member contains <c>CRYPTUI_WIZ_IMPORT_SUBJECT_CERT_STORE</c>.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_WIZ_IMPORT_SRC_INFO.dwFlags">
            <summary>
            <para>
            Contains flags that modify the import operation. This member is required if <c>pwszFileName</c> contains a Personal
            Information Exchange (PFX) BLOB. Otherwise, this member is ignored. This member can be zero or a combination of one or more
            of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CRYPT_EXPORTABLE</term>
            <term>
            Imported keys are marked as exportable. If this flag is not used, calls to the CryptExportKey function with the key handle fail.
            </term>
            </item>
            <item>
            <term>CRYPT_USER_PROTECTED</term>
            <term>
            The user is to be notified by means of a dialog box or some other manner when certain actions are attempting to use this
            key. The precise behavior is specified by the cryptographic service provider (CSP) that is being used. Prior to Internet
            Explorer 4.0, Microsoft CSPs ignored this flag. Starting with Internet Explorer 4.0, Microsoft CSPs support this flag. If
            the provider context was opened with the CRYPT_SILENT flag set, using this flag causes a failure, and the last error is set
            to NTE_SILENT_CONTEXT.
            </term>
            </item>
            <item>
            <term>CRYPT_MACHINE_KEYSET</term>
            <term>The private keys are stored under the local computer and not under the current user.</term>
            </item>
            <item>
            <term>CRYPT_USER_KEYSET</term>
            <term>
            The private keys are stored under the current user and not under the local computer, even if the PFX BLOB specifies that
            they should go under the local computer.
            </term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.CryptUI.CRYPTUI_WIZ_IMPORT_SRC_INFO.pwszPassword">
            <summary>
            Pointer to a null-terminated Unicode string that contains the password used to access the private key. A password is
            required if <c>pwszFileName</c> contains a PFX BLOB. If a password is not required, the variable can be an empty string.
            This member cannot be <c>NULL</c>.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.CryptUI.PCCRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT">
            <summary>Provides a pointer to a CRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT structure.</summary>
        </member>
        <member name="M:Vanara.PInvoke.CryptUI.PCCRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT.#ctor(System.IntPtr)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.CryptUI.PCCRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT"/> struct.</summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
        </member>
        <member name="P:Vanara.PInvoke.CryptUI.PCCRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT.NULL">
            <summary>
            Returns an invalid handle by instantiating a <see cref="T:Vanara.PInvoke.CryptUI.PCCRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT"/> object with <see cref="F:System.IntPtr.Zero"/>.
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.CryptUI.PCCRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT.IsNull">
            <summary>Gets a value indicating whether this instance is a null handle.</summary>
        </member>
        <member name="M:Vanara.PInvoke.CryptUI.PCCRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT.op_Explicit(Vanara.PInvoke.CryptUI.PCCRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT)~System.IntPtr">
            <summary>Performs an explicit conversion from <see cref="T:Vanara.PInvoke.CryptUI.PCCRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT"/> to <see cref="T:System.IntPtr"/>.</summary>
            <param name="h">The handle.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.CryptUI.PCCRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT.op_Explicit(Vanara.PInvoke.CryptUI.PCCRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT)~Vanara.PInvoke.CryptUI.CRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT">
            <summary>Performs an explicit conversion from <see cref="T:Vanara.PInvoke.CryptUI.PCCRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT"/> to <see cref="T:Vanara.PInvoke.CryptUI.CRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT"/>.</summary>
            <param name="h">The handle.</param>
            <returns>The resulting <see cref="T:Vanara.PInvoke.CryptUI.CRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT"/> instance from the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.CryptUI.PCCRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT.op_Implicit(System.IntPtr)~Vanara.PInvoke.CryptUI.PCCRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT">
            <summary>Performs an implicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:Vanara.PInvoke.CryptUI.PCCRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT"/>.</summary>
            <param name="h">The pointer to a handle.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.CryptUI.PCCRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT.op_Inequality(Vanara.PInvoke.CryptUI.PCCRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT,Vanara.PInvoke.CryptUI.PCCRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT)">
            <summary>Implements the operator !=.</summary>
            <param name="h1">The first handle.</param>
            <param name="h2">The second handle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.PInvoke.CryptUI.PCCRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT.op_Equality(Vanara.PInvoke.CryptUI.PCCRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT,Vanara.PInvoke.CryptUI.PCCRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT)">
            <summary>Implements the operator ==.</summary>
            <param name="h1">The first handle.</param>
            <param name="h2">The second handle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.PInvoke.CryptUI.PCCRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.CryptUI.PCCRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.CryptUI.PCCRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT.DangerousGetHandle">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.CryptUI.SafePCCRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT">
            <summary>
            Provides a <see cref="T:System.Runtime.InteropServices.SafeHandle"/> for <see cref="T:Vanara.PInvoke.CryptUI.PCCRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT"/> that is disposed using <see cref="M:Vanara.PInvoke.CryptUI.CryptUIWizFreeDigitalSignContext(Vanara.PInvoke.CryptUI.PCCRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT)"/>.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.CryptUI.SafePCCRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT.#ctor(System.IntPtr,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Vanara.PInvoke.CryptUI.SafePCCRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT"/> class and assigns an existing handle.
            </summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
            <param name="ownsHandle">
            <see langword="true"/> to reliably release the handle during the finalization phase; otherwise, <see langword="false"/> (not recommended).
            </param>
        </member>
        <member name="M:Vanara.PInvoke.CryptUI.SafePCCRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.CryptUI.SafePCCRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT"/> class.</summary>
        </member>
        <member name="M:Vanara.PInvoke.CryptUI.SafePCCRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT.op_Implicit(Vanara.PInvoke.CryptUI.SafePCCRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT)~Vanara.PInvoke.CryptUI.PCCRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.CryptUI.SafePCCRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT"/> to <see cref="T:Vanara.PInvoke.CryptUI.PCCRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT"/>.</summary>
            <param name="h">The safe handle instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.CryptUI.SafePCCRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT.InternalReleaseHandle">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.NCrypt">
            <summary>Methods and data types found in NCrypt.dll.</summary>
            <summary>Methods and data types found in ncrypt.dll.</summary>
            <summary>Methods and data types found in NCrypt.dll.</summary>
        </member>
        <member name="T:Vanara.PInvoke.NCrypt.PFN_NCRYPT_ALLOC">
            <summary>A custom function that can allocate memory.</summary>
            <param name="cbSize">Size of the memory to allocate.</param>
            <returns>Pointer to the allocated memory.</returns>
        </member>
        <member name="T:Vanara.PInvoke.NCrypt.PFN_NCRYPT_FREE">
            <summary>A custom function that can free allocated memory.</summary>
            <param name="pv">Pointer to the allocated memory.</param>
        </member>
        <member name="T:Vanara.PInvoke.NCrypt.CreatePersistedFlags">
            <summary>Flags used with <c>NCryptCreatePersistedKey</c>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.CreatePersistedFlags.NCRYPT_MACHINE_KEY_FLAG">
            <summary>The key applies to the local computer. If this flag is not present, the key applies to the current user.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.CreatePersistedFlags.NCRYPT_OVERWRITE_KEY_FLAG">
            <summary>
            If a key already exists in the container with the specified name, the existing key will be overwritten. If this flag is not
            specified and a key with the specified name already exists, this function will return NTE_EXISTS.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.NCrypt.ExportPolicy">
            <summary>A set of flags that specify the export policy for a persisted key. This property only applies to keys.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.ExportPolicy.NCRYPT_ALLOW_EXPORT_FLAG">
            <summary>The private key can be exported.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.ExportPolicy.NCRYPT_ALLOW_PLAINTEXT_EXPORT_FLAG">
            <summary>The private key can be exported in plaintext form.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.ExportPolicy.NCRYPT_ALLOW_ARCHIVING_FLAG">
            <summary>
            The private key can be exported once for archiving purposes. This flag only applies to the original key handle on which it is
            set. This policy can only be applied to the original key handle. After the key handle has been closed, the key can no longer
            be exported for archiving purposes.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.ExportPolicy.NCRYPT_ALLOW_PLAINTEXT_ARCHIVING_FLAG">
            <summary>
            The private key can be exported once in plaintext form for archiving purposes. This flag only applies to the original key
            handle on which it is set. This policy can only be applied to the original key handle. After the key handle has been closed,
            the key can no longer be exported for archiving purposes.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.NCrypt.FinalizeKeyFlags">
            <summary>Flags for <c>NCryptFinalizeKey</c>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.FinalizeKeyFlags.NCRYPT_WRITE_KEY_TO_LEGACY_STORE_FLAG">
            <summary>
            Also save the key in legacy storage. This allows the key to be used with CryptoAPI. This flag only applies to RSA keys.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.FinalizeKeyFlags.NCRYPT_NO_KEY_VALIDATION">
            <summary>Do not validate the public portion of the key pair. This flag only applies to public/private key pairs.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.FinalizeKeyFlags.NCRYPT_SILENT_FLAG">
            <summary>
            Requests that the key service provider (KSP) not display any user interface. If the provider must display the UI to operate,
            the call fails and the KSP should set the NTE_SILENT_CONTEXT error code as the last error.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.NCrypt.GetPropertyFlags">
            <summary>Flags for <c>NCryptGetProperty</c>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.GetPropertyFlags.NCRYPT_PERSIST_ONLY_FLAG">
            <summary>
            Ignore any built in values for this property and only retrieve the user-persisted properties of the key. The maximum size of
            the data for any persisted property is NCRYPT_MAX_PROPERTY_DATA bytes.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.GetPropertyFlags.NCRYPT_SILENT_FLAG">
            <summary>
            Requests that the key service provider (KSP) not display any user interface. If the provider must display the UI to operate,
            the call fails and the KSP should set the NTE_SILENT_CONTEXT error code as the last error.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.GetPropertyFlags.OWNER_SECURITY_INFORMATION">
            <summary>
            Retrieve the security identifier (SID) of the object's owner. Use the GetSecurityDescriptorOwner function to obtain the owner
            SID from the SECURITY_DESCRIPTOR structure.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.GetPropertyFlags.GROUP_SECURITY_INFORMATION">
            <summary>
            Retrieve the SID of the object's primary group. Use the GetSecurityDescriptorGroup function to obtain the group SID from the
            SECURITY_DESCRIPTOR structure.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.GetPropertyFlags.DACL_SECURITY_INFORMATION">
            <summary>
            Retrieve the discretionary access control list (DACL). Use the GetSecurityDescriptorSacl function to obtain the DACL from the
            SECURITY_DESCRIPTOR structure.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.GetPropertyFlags.SACL_SECURITY_INFORMATION">
            <summary>
            Retrieve the system access control list (SACL). Use the GetSecurityDescriptorDacl function to obtain the SACL from the
            SECURITY_DESCRIPTOR structure.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.NCrypt.ImplType">
            <summary>A set of flags that define implementation details of the provider. This property only applies to key storage providers.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.ImplType.NCRYPT_IMPL_HARDWARE_FLAG">
            <summary>The provider is hardware based.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.ImplType.NCRYPT_IMPL_SOFTWARE_FLAG">
            <summary>The provider is software based.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.ImplType.NCRYPT_IMPL_REMOVABLE_FLAG">
            <summary>The provider is removable.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.ImplType.NCRYPT_IMPL_HARDWARE_RNG_FLAG">
            <summary>The provider is a hardware based random number generator.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.ImplType.NCRYPT_IMPL_VIRTUAL_ISOLATION_FLAG">
            <summary>Undocumented.</summary>
        </member>
        <member name="T:Vanara.PInvoke.NCrypt.KeyDerivationBufferType">
            <summary>Key derivation function buffer types.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.KeyDerivationBufferType.KDF_HASH_ALGORITHM">
            <summary>
            The buffer is a key derivation function (KDF) parameter that contains a null-terminated Unicode string that identifies the
            hash algorithm. This can be one of the standard hash algorithm identifiers from CNG Algorithm Identifiers or the identifier
            for another registered hash algorithm.
            <para>The size specified by the cbBuffer member of this structure must include the terminating NULL character.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.KeyDerivationBufferType.KDF_SECRET_PREPEND">
            <summary>
            The buffer is a KDF parameter that contains the value to add to the beginning of the message input to the hash function.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.KeyDerivationBufferType.KDF_SECRET_APPEND">
            <summary>The buffer is a KDF parameter that contains the value to add to the end of the message input to the hash function.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.KeyDerivationBufferType.KDF_HMAC_KEY">
            <summary>The buffer is a KDF parameter that contains the plain text value of the HMAC key.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.KeyDerivationBufferType.KDF_TLS_PRF_LABEL">
            <summary>
            The buffer is a KDF parameter that contains an ANSI string that contains the transport layer security (TLS) pseudo-random
            function (PRF) label.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.KeyDerivationBufferType.KDF_TLS_PRF_SEED">
            <summary>The buffer is a KDF parameter that contains the PRF seed value. The seed must be 64 bytes long.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.KeyDerivationBufferType.KDF_SECRET_HANDLE">
            <summary>
            The buffer is a KDF parameter that contains the secret agreement handle. The pvBuffer member contains a BCRYPT_SECRET_HANDLE
            value and is not a pointer.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.KeyDerivationBufferType.KDF_TLS_PRF_PROTOCOL">
            <summary>
            The buffer is a KDF parameter that contains a DWORD value identifying the SSL/TLS protocol version whose PRF algorithm is to
            be used.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.KeyDerivationBufferType.KDF_ALGORITHMID">
            <summary>
            The buffer is a KDF parameter that contains the byte array to use as the AlgorithmID subfield of the OtherInfo parameter to
            the SP 800-56A KDF.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.KeyDerivationBufferType.KDF_PARTYUINFO">
            <summary>
            The buffer is a KDF parameter that contains the byte array to use as the PartyUInfo subfield of the OtherInfo parameter to
            the SP 800-56A KDF.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.KeyDerivationBufferType.KDF_PARTYVINFO">
            <summary>
            The buffer is a KDF parameter that contains the byte array to use as the PartyVInfo subfield of the OtherInfo parameter to
            the SP 800-56A KDF.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.KeyDerivationBufferType.KDF_SUPPPUBINFO">
            <summary>
            The buffer is a KDF parameter that contains the byte array to use as the SuppPubInfo subfield of the OtherInfo parameter to
            the SP 800-56A KDF.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.KeyDerivationBufferType.KDF_SUPPPRIVINFO">
            <summary>
            The buffer is a KDF parameter that contains the byte array to use as the SuppPrivInfo subfield of the OtherInfo parameter to
            the SP 800-56A KDF.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.KeyDerivationBufferType.KDF_LABEL">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.KeyDerivationBufferType.KDF_CONTEXT">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.KeyDerivationBufferType.KDF_SALT">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.KeyDerivationBufferType.KDF_ITERATION_COUNT">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.KeyDerivationBufferType.KDF_GENERIC_PARAMETER">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.KeyDerivationBufferType.KDF_KEYBITLENGTH">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.KeyDerivationBufferType.KDF_HKDF_SALT">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.KeyDerivationBufferType.KDF_HKDF_INFO">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.KeyDerivationBufferType.NCRYPTBUFFER_SSL_CLIENT_RANDOM">
            <summary>The buffer contains the random number of the SSL client.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.KeyDerivationBufferType.NCRYPTBUFFER_SSL_SERVER_RANDOM">
            <summary>The buffer contains the random number of the SSL server.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.KeyDerivationBufferType.NCRYPTBUFFER_SSL_HIGHEST_VERSION">
            <summary>The buffer contains the highest SSL version supported.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.KeyDerivationBufferType.NCRYPTBUFFER_SSL_CLEAR_KEY">
            <summary>The buffer contains the clear portion of the SSL master key.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.KeyDerivationBufferType.NCRYPTBUFFER_SSL_KEY_ARG_DATA">
            <summary>The buffer contains the SSL key argument data.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.KeyDerivationBufferType.NCRYPTBUFFER_SSL_SESSION_HASH">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.KeyDerivationBufferType.NCRYPTBUFFER_PKCS_OID">
            <summary>The buffer contains a null-terminated ANSI string that contains the PKCS object identifier.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.KeyDerivationBufferType.NCRYPTBUFFER_PKCS_ALG_OID">
            <summary>The buffer contains a null-terminated ANSI string that contains the PKCS algorithm object identifier.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.KeyDerivationBufferType.NCRYPTBUFFER_PKCS_ALG_PARAM">
            <summary>The buffer contains the PKCS algorithm parameters.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.KeyDerivationBufferType.NCRYPTBUFFER_PKCS_ALG_ID">
            <summary>The buffer contains the PKCS algorithm identifier.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.KeyDerivationBufferType.NCRYPTBUFFER_PKCS_ATTRS">
            <summary>The buffer contains the PKCS attributes.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.KeyDerivationBufferType.NCRYPTBUFFER_PKCS_KEY_NAME">
            <summary>The buffer contains a null-terminated Unicode string that contains the key name.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.KeyDerivationBufferType.NCRYPTBUFFER_PKCS_SECRET">
            <summary>
            The buffer contains a null-terminated Unicode string that contains the PKCS8 password. This parameter is optional and can be NULL.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.KeyDerivationBufferType.NCRYPTBUFFER_CERT_BLOB">
            <summary>
            The buffer contains a serialized certificate store that contains the PKCS certificate. This serialized store is obtained by
            using the CertSaveStore function with the CERT_STORE_SAVE_TO_MEMORY option. When this property is being retrieved, you can
            access the certificate store by passing this serialized store to the CertOpenStore function with the
            CERT_STORE_PROV_SERIALIZED option.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.KeyDerivationBufferType.NCRYPTBUFFER_CLAIM_IDBINDING_NONCE">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.KeyDerivationBufferType.NCRYPTBUFFER_CLAIM_KEYATTESTATION_NONCE">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.KeyDerivationBufferType.NCRYPTBUFFER_KEY_PROPERTY_FLAGS">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.KeyDerivationBufferType.NCRYPTBUFFER_ATTESTATIONSTATEMENT_BLOB">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.KeyDerivationBufferType.NCRYPTBUFFER_ATTESTATION_CLAIM_TYPE">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.KeyDerivationBufferType.NCRYPTBUFFER_ATTESTATION_CLAIM_CHALLENGE_REQUIRED">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.KeyDerivationBufferType.NCRYPTBUFFER_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.KeyDerivationBufferType.NCRYPTBUFFER_ECC_CURVE_NAME">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.KeyDerivationBufferType.NCRYPTBUFFER_ECC_PARAMETERS">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.KeyDerivationBufferType.NCRYPTBUFFER_TPM_SEAL_PASSWORD">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.KeyDerivationBufferType.NCRYPTBUFFER_TPM_SEAL_POLICYINFO">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.KeyDerivationBufferType.NCRYPTBUFFER_TPM_SEAL_TICKET">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.KeyDerivationBufferType.NCRYPTBUFFER_TPM_SEAL_NO_DA_PROTECTION">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.KeyDerivationBufferType.NCRYPTBUFFER_TPM_PLATFORM_CLAIM_PCR_MASK">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.KeyDerivationBufferType.NCRYPTBUFFER_TPM_PLATFORM_CLAIM_NONCE">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.KeyDerivationBufferType.NCRYPTBUFFER_TPM_PLATFORM_CLAIM_STATIC_CREATE">
            <summary>Undocumented.</summary>
        </member>
        <member name="T:Vanara.PInvoke.NCrypt.KeyDerivationFlags">
            <summary>Flags for <c>NCryptKeyDerivation</c>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.KeyDerivationFlags.BCRYPT_CAPI_AES_FLAG">
            <summary>
            Specifies that the target algorithm is AES and that the key therefore must be double expanded. This flag is only valid with
            the CAPI_KDF algorithm.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.KeyDerivationFlags.NCRYPT_SILENT_FLAG">
            <summary>
            Requests that the key service provider (KSP) not display any user interface. If the provider must display the UI to operate,
            the call fails and the KSP should set the NTE_SILENT_CONTEXT error code as the last error.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.NCrypt.KeyUsage">
            <summary>A set of flags that define the usage details for a key. This property only applies to keys.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.KeyUsage.NCRYPT_ALLOW_DECRYPT_FLAG">
            <summary>The key can be used for decryption.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.KeyUsage.NCRYPT_ALLOW_SIGNING_FLAG">
            <summary>The key can be used for signing.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.KeyUsage.NCRYPT_ALLOW_KEY_AGREEMENT_FLAG">
            <summary>The key can be used for secret agreement encryption.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.KeyUsage.NCRYPT_ALLOW_ALL_USAGES">
            <summary>The key can be used for any purpose.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.KeyUsage.NCRYPT_ALLOW_KEY_IMPORT_FLAG">
            <summary>Undocumented.</summary>
        </member>
        <member name="T:Vanara.PInvoke.NCrypt.NCryptDecryptFlag">
            <summary>Flags that modify function behavior. The allowed set of flags depends on the type of key specified by the hKey parameter.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.NCryptDecryptFlag.NCRYPT_NO_PADDING_FLAG">
            <summary>No padding was used when the data was encrypted. The pPaddingInfo parameter is not used.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.NCryptDecryptFlag.NCRYPT_PAD_PKCS1_FLAG">
            <summary>
            The data was padded with a random number to round out the block size when the data was encrypted. The pPaddingInfo parameter
            is not used.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.NCryptDecryptFlag.NCRYPT_PAD_OAEP_FLAG">
            <summary>
            The Optimal Asymmetric Encryption Padding (OAEP) scheme was used when the data was encrypted. The pPaddingInfo parameter is a
            pointer to a BCRYPT_OAEP_PADDING_INFO structure.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.NCryptDecryptFlag.NCRYPT_PAD_PSS_FLAG">
            <summary>
            The Probabilistic Signature Scheme (PSS) padding scheme was used when the signature was created. The pPaddingInfo parameter
            is a pointer to a BCRYPT_PSS_PADDING_INFO structure.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.NCryptDecryptFlag.NCRYPT_PAD_CIPHER_FLAG">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.NCryptDecryptFlag.NCRYPT_ATTESTATION_FLAG">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.NCryptDecryptFlag.NCRYPT_SILENT_FLAG">
            <summary>
            Requests that the key service provider (KSP) not display any user interface. If the provider must display the UI to operate,
            the call fails and the KSP should set the NTE_SILENT_CONTEXT error code as the last error.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.NCryptDecryptFlag.NCRYPT_SEALING_FLAG">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.NCrypt.NCryptUIFlags">
            <summary>Flags for NCrypt functions that can show a UI.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.NCryptUIFlags.NCRYPT_SILENT_FLAG">
            <summary>
            Requests that the key service provider (KSP) not display any user interface. If the provider must display the UI to operate,
            the call fails and the KSP should set the NTE_SILENT_CONTEXT error code as the last error.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.NCrypt.NotifyFlags">
            <summary>Flags used by <see cref="M:Vanara.PInvoke.NCrypt.NCryptNotifyChangeKey(Vanara.PInvoke.NCrypt.NCRYPT_PROV_HANDLE,System.IntPtr@,Vanara.PInvoke.NCrypt.NotifyFlags)"/>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.NotifyFlags.NCRYPT_REGISTER_NOTIFY_FLAG">
            <summary>Create a new change notification. The phEvent parameter will receive the key change notification handle.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.NotifyFlags.NCRYPT_UNREGISTER_NOTIFY_FLAG">
            <summary>
            Remove an existing change notification. The phEvent parameter must contain a valid key change notification handle. This
            handle is no longer valid after this function is called with this flag and the INVALID_HANDLE_VALUE value is placed in this handle.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.NotifyFlags.NCRYPT_MACHINE_KEY_FLAG">
            <summary>
            Receive change notifications for keys in the machine key store. If this flag is not specified, the change notification events
            will only occur for keys in the calling user's key store. This flag is only valid when combined with the
            NCRYPT_REGISTER_NOTIFY_FLAG flag.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.NCrypt.OpenKeyFlags">
            <summary>Flags used with <c>NCryptOpenKey</c>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.OpenKeyFlags.NCRYPT_SILENT_FLAG">
            <summary>
            Requests that the key service provider (KSP) not display any user interface. If the provider must display the UI to operate,
            the call fails and the KSP should set the NTE_SILENT_CONTEXT error code as the last error.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.OpenKeyFlags.NCRYPT_MACHINE_KEY_FLAG">
            <summary>Open the key for the local computer. If this flag is not present, the current user key is opened.</summary>
        </member>
        <member name="T:Vanara.PInvoke.NCrypt.SetPropFlags">
            <summary>Used by <c>NCryptSetProperty</c>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.SetPropFlags.NCRYPT_SILENT_FLAG">
            <summary>
            Requests that the key service provider (KSP) not display any user interface. If the provider must display the UI to operate,
            the call fails and the KSP should set the NTE_SILENT_CONTEXT error code as the last error.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.SetPropFlags.NCRYPT_PERSIST_ONLY_FLAG">
            <summary>
            Do not overwrite any built-in values for this property and only set the user-persisted properties of the key. The maximum
            size of the data for any persisted property is NCRYPT_MAX_PROPERTY_DATA bytes. This flag cannot be used with the
            NCRYPT_SECURITY_DESCR_PROPERTY property.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.SetPropFlags.NCRYPT_PERSIST_FLAG">
            <summary>
            The property should be stored in key storage along with the key material. This flag can only be used when the hObject
            parameter is the handle of a persisted key. The maximum size of the data for any persisted property is
            NCRYPT_MAX_PROPERTY_DATA bytes.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.NCrypt.UIPolicy">
            <summary>A set of flags that provide additional user interface information or requirements.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.UIPolicy.NCRYPT_UI_PROTECT_KEY_FLAG">
            <summary>Display the strong key user interface as needed.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.UIPolicy.NCRYPT_UI_FORCE_HIGH_PROTECTION_FLAG">
            <summary>Force high protection.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.UIPolicy.NCRYPT_UI_FINGERPRINT_PROTECTION_FLAG">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.UIPolicy.NCRYPT_UI_APPCONTAINER_ACCESS_MEDIUM_FLAG">
            <summary>
            An app container has accessed a medium key that is not strongly protected. For example, a key that is for user consent only,
            or is password or fingerprint protected.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCryptCreateClaim(Vanara.PInvoke.NCrypt.NCRYPT_KEY_HANDLE,Vanara.PInvoke.NCrypt.NCRYPT_KEY_HANDLE,System.UInt32,Vanara.PInvoke.NCrypt.NCryptBufferDesc[],System.IntPtr,System.UInt32,System.UInt32@,System.UInt32)">
            <summary>
            <para>
            [Some information relates to pre-released product which may be substantially modified before it's commercially released.
            Microsoft makes no warranties, express or implied, with respect to the information provided here.]
            </para>
            <para>Creates a key attestation claim.</para>
            </summary>
            <param name="hSubjectKey">The subject key handle that the claim is created for.</param>
            <param name="hAuthorityKey">The authority key handle that the claim is based on.</param>
            <param name="dwClaimType">The type of claim.</param>
            <param name="pParameterList">An optional parameter list.</param>
            <param name="pbClaimBlob">Output of the created claim blob.</param>
            <param name="cbClaimBlob"/>
            <param name="pcbResult">The output of the created claim blob.</param>
            <param name="dwFlags">As of Windows 10, no flags are defined. This parameter should be set to 0.</param>
            <returns>Returns a status code that indicates the success or failure of the function.</returns>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCryptCreatePersistedKey(Vanara.PInvoke.NCrypt.NCRYPT_PROV_HANDLE,Vanara.PInvoke.NCrypt.SafeNCRYPT_KEY_HANDLE@,System.String,System.String,Vanara.PInvoke.Crypt32.PrivateKeyType,Vanara.PInvoke.NCrypt.CreatePersistedFlags)">
            <summary>
            The <c>NCryptCreatePersistedKey</c> function creates a new key and stores it in the specified key storage provider. After you
            create a key by using this function, you can use the NCryptSetProperty function to set its properties; however, the key cannot be
            used until the NCryptFinalizeKey function is called.
            </summary>
            <param name="hProvider">
            The handle of the key storage provider to create the key in. This handle is obtained by using the NCryptOpenStorageProvider function.
            </param>
            <param name="phKey">
            The address of an <c>NCRYPT_KEY_HANDLE</c> variable that receives the handle of the key. When you have finished using this
            handle, release it by passing it to the NCryptFreeObject function.
            </param>
            <param name="pszAlgId">
            A pointer to a null-terminated Unicode string that contains the identifier of the cryptographic algorithm to create the key. This
            can be one of the standard CNG Algorithm Identifiers or the identifier for another registered algorithm.
            </param>
            <param name="pszKeyName">
            A pointer to a null-terminated Unicode string that contains the name of the key. If this parameter is <c>NULL</c>, this function
            will create an ephemeral key that is not persisted.
            </param>
            <param name="dwLegacyKeySpec">
            <para>A legacy identifier that specifies the type of key. This can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>AT_KEYEXCHANGE</term>
            <term>The key is a key exchange key.</term>
            </item>
            <item>
            <term>AT_SIGNATURE</term>
            <term>The key is a signature key.</term>
            </item>
            <item>
            <term>0</term>
            <term>The key is none of the above types.</term>
            </item>
            </list>
            </param>
            <param name="dwFlags">
            <para>
            A set of flags that modify the behavior of this function. This can be zero or a combination of one or more of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>NCRYPT_MACHINE_KEY_FLAG</term>
            <term>The key applies to the local computer. If this flag is not present, the key applies to the current user.</term>
            </item>
            <item>
            <term>NCRYPT_OVERWRITE_KEY_FLAG</term>
            <term>
            If a key already exists in the container with the specified name, the existing key will be overwritten. If this flag is not
            specified and a key with the specified name already exists, this function will return NTE_EXISTS.
            </term>
            </item>
            </list>
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>NTE_BAD_FLAGS</term>
            <term>The dwFlags parameter contains a value that is not valid.</term>
            </item>
            <item>
            <term>NTE_EXISTS</term>
            <term>A key with the specified name already exists and the NCRYPT_OVERWRITE_KEY_FLAG was not specified.</term>
            </item>
            <item>
            <term>NTE_INVALID_HANDLE</term>
            <term>The hProvider parameter is not valid.</term>
            </item>
            <item>
            <term>NTE_INVALID_PARAMETER</term>
            <term>One or more parameters are not valid.</term>
            </item>
            <item>
            <term>NTE_NO_MEMORY</term>
            <term>A memory allocation failure occurred.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            If you are creating an RSA key pair, you can also have the key stored in legacy storage so that it can be used with the CryptoAPI
            by passing the <c>NCRYPT_WRITE_KEY_TO_LEGACY_STORE_FLAG</c> flag to the NCryptFinalizeKey function when the key is finalized.
            </para>
            <para>
            A service must not call this function from its StartService Function. If a service calls this function from its StartService
            function, a deadlock can occur, and the service may stop responding.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCryptDecrypt(Vanara.PInvoke.NCrypt.NCRYPT_KEY_HANDLE,System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr,System.UInt32,System.UInt32@,Vanara.PInvoke.NCrypt.NCryptDecryptFlag)">
            <summary>The <c>NCryptDecrypt</c> function decrypts a block of encrypted data.</summary>
            <param name="hKey">The handle of the key to use to decrypt the data.</param>
            <param name="pbInput">
            The address of a buffer that contains the data to be decrypted. The cbInput parameter contains the size of the data to decrypt.
            For more information, see Remarks.
            </param>
            <param name="cbInput">The number of bytes in the pbInput buffer to decrypt.</param>
            <param name="pPaddingInfo">
            A pointer to a structure that contains padding information. The actual type of structure this parameter points to depends on the
            value of the dwFlags parameter. This parameter is only used with asymmetric keys and must be <c>NULL</c> otherwise.
            </param>
            <param name="pbOutput">
            <para>
            The address of a buffer that will receive the decrypted data produced by this function. The cbOutput parameter contains the size
            of this buffer. For more information, see Remarks.
            </para>
            <para>
            If this parameter is <c>NULL</c>, this function will calculate the size needed for the decrypted data and return the size in the
            location pointed to by the pcbResult parameter.
            </para>
            </param>
            <param name="cbOutput">The size, in bytes, of the pbOutput buffer. This parameter is ignored if the pbOutput parameter is <c>NULL</c>.</param>
            <param name="pcbResult">
            A pointer to a <c>DWORD</c> variable that receives the number of bytes copied to the pbOutput buffer. If pbOutput is <c>NULL</c>,
            this receives the size, in bytes, required for the decrypted data.
            </param>
            <param name="dwFlags">
            <para>Flags that modify function behavior. The allowed set of flags depends on the type of key specified by the hKey parameter.</para>
            <para>If the key is an asymmetric key, this can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>NCRYPT_NO_PADDING_FLAG</term>
            <term>No padding was used when the data was encrypted. The pPaddingInfo parameter is not used.</term>
            </item>
            <item>
            <term>NCRYPT_PAD_OAEP_FLAG</term>
            <term>
            The Optimal Asymmetric Encryption Padding (OAEP) scheme was used when the data was encrypted. The pPaddingInfo parameter is a
            pointer to a BCRYPT_OAEP_PADDING_INFO structure.
            </term>
            </item>
            <item>
            <term>NCRYPT_PAD_PKCS1_FLAG</term>
            <term>
            The data was padded with a random number to round out the block size when the data was encrypted. The pPaddingInfo parameter is
            not used.
            </term>
            </item>
            </list>
            <para>The following value can be used for any key.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>NCRYPT_SILENT_FLAG</term>
            <term>
            Requests that the key service provider (KSP) not display any user interface. If the provider must display the UI to operate, the
            call fails and the KSP should set the NTE_SILENT_CONTEXT error code as the last error.
            </term>
            </item>
            </list>
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>NTE_BAD_FLAGS</term>
            <term>The dwFlags parameter contains a value that is not valid.</term>
            </item>
            <item>
            <term>NTE_BUFFER_TOO_SMALL</term>
            <term>The size specified by the cbOutput parameter is not large enough to hold the decrypted data.</term>
            </item>
            <item>
            <term>NTE_INVALID_HANDLE</term>
            <term>The hKey parameter is not valid.</term>
            </item>
            <item>
            <term>NTE_INVALID_PARAMETER</term>
            <term>One or more parameters are not valid.</term>
            </item>
            <item>
            <term>NTE_PERM</term>
            <term>The key identified by the hKey parameter cannot be used for decryption.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            The pbInput and pbOutput parameters can point to the same buffer. In this case, this function will perform the decryption in place.
            </para>
            <para>
            A service must not call this function from its StartService Function. If a service calls this function from its StartService
            function, a deadlock can occur, and the service may stop responding.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCryptDeleteKey(Vanara.PInvoke.NCrypt.NCRYPT_KEY_HANDLE,Vanara.PInvoke.NCrypt.NCryptUIFlags)">
            <summary>The <c>NCryptDeleteKey</c> function deletes a CNG key.</summary>
            <param name="hKey">
            <para>The handle of the key to delete. This handle is obtained by using the NCryptOpenKey function.</para>
            <para>
            <c>Note</c> The <c>NCryptDeleteKey</c> function frees the handle. Applications must not use the handle or attempt to call the
            NCryptFreeObject function on it after calling the <c>NCryptDeleteKey</c> function.
            </para>
            </param>
            <param name="dwFlags">
            <para>
            Flags that modify function behavior. This can be zero or a combination of values that is specific to each key storage provider.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>NCRYPT_SILENT_FLAG</term>
            <term>
            Requests that the key service provider (KSP) not display any user interface. If the provider must display the UI to operate, the
            call fails and the KSP should set the NTE_SILENT_CONTEXT error code as the last error.
            </term>
            </item>
            </list>
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>NTE_BAD_FLAGS</term>
            <term>The dwFlags parameter contains a value that is not valid.</term>
            </item>
            <item>
            <term>NTE_INVALID_HANDLE</term>
            <term>The hKey parameter is not valid.</term>
            </item>
            </list>
            </returns>
            <remarks>
            A service must not call this function from its StartService Function. If a service calls this function from its StartService
            function, a deadlock can occur, and the service may stop responding.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCryptDeriveKey(Vanara.PInvoke.NCrypt.NCRYPT_SECRET_HANDLE,System.String,Vanara.PInvoke.NCrypt.NCryptBufferDesc,Vanara.InteropServices.SafeAllocatedMemoryHandle,System.UInt32,System.UInt32@,Vanara.PInvoke.BCrypt.DeriveKeyFlags)">
            <summary>
            <para>
            The <c>NCryptDeriveKey</c> function derives a key from a secret agreement value. This function is intended to be used as part of
            a secret agreement procedure using persisted secret agreement keys. To derive key material by using a persisted secret instead,
            use the NCryptKeyDerivation function.
            </para>
            </summary>
            <param name="hSharedSecret">
            <para>The secret agreement handle to create the key from. This handle is obtained from the NCryptSecretAgreement function.</para>
            </param>
            <param name="pwszKDF">
            <para>
            A pointer to a null-terminated Unicode string that identifies the key derivation function (KDF) to use to derive the key. This
            can be one of the following strings.
            </para>
            <para>BCRYPT_KDF_HASH (L"HASH")</para>
            <para>Use the hash key derivation function.</para>
            <para>
            If the cbDerivedKey parameter is less than the size of the derived key, this function will only copy the specified number of
            bytes to the pbDerivedKey buffer. If the cbDerivedKey parameter is greater than the size of the derived key, this function will
            copy the key to the pbDerivedKey buffer and set the variable pointed to by the pcbResult to the actual number of bytes copied.
            </para>
            <para>
            The parameters identified by the pParameterList parameter either can or must contain the following parameters, as indicated by
            the Required or optional column.
            </para>
            <list type="table">
            <listheader>
            <term>Parameter</term>
            <term>Description</term>
            <term>Required or optional</term>
            </listheader>
            <item>
            <term>KDF_HASH_ALGORITHM</term>
            <term>
            A null-terminated Unicode string that identifies the hash algorithm to use. This can be one of the standard hash algorithm
            identifiers from CNG Algorithm Identifiers or the identifier for another registered hash algorithm. If this parameter is not
            specified, the SHA1 hash algorithm is used.
            </term>
            <term>Optional</term>
            </item>
            <item>
            <term>KDF_SECRET_PREPEND</term>
            <term>A value to add to the beginning of the message input to the hash function. For more information, see Remarks.</term>
            <term>Optional</term>
            </item>
            <item>
            <term>KDF_SECRET_APPEND</term>
            <term>A value to add to the end of the message input to the hash function. For more information, see Remarks.</term>
            <term>Optional</term>
            </item>
            </list>
            <para>The call to the KDF is made as shown in the following pseudocode.</para>
            <para>BCRYPT_KDF_HMAC (L"HMAC")</para>
            <para>Use the Hash-Based Message Authentication Code (HMAC) key derivation function.</para>
            <para>
            If the cbDerivedKey parameter is less than the size of the derived key, this function will only copy the specified number of
            bytes to the pbDerivedKey buffer. If the cbDerivedKey parameter is greater than the size of the derived key, this function will
            copy the key to the pbDerivedKey buffer and set the variable pointed to by the pcbResult to the actual number of bytes copied.
            </para>
            <para>
            The parameters identified by the pParameterList parameter either can or must contain the following parameters, as indicated by
            the Required or optional column.
            </para>
            <list type="table">
            <listheader>
            <term>Parameter</term>
            <term>Description</term>
            <term>Required or optional</term>
            </listheader>
            <item>
            <term>KDF_HASH_ALGORITHM</term>
            <term>
            A null-terminated Unicode string that identifies the hash algorithm to use. This can be one of the standard hash algorithm
            identifiers from CNG Algorithm Identifiers or the identifier for another registered hash algorithm. If this parameter is not
            specified, the SHA1 hash algorithm is used.
            </term>
            <term>Optional</term>
            </item>
            <item>
            <term>KDF_HMAC_KEY</term>
            <term>The key to use for the pseudo-random function (PRF).</term>
            <term>Optional</term>
            </item>
            <item>
            <term>KDF_SECRET_PREPEND</term>
            <term>A value to add to the beginning of the message input to the hash function. For more information, see Remarks.</term>
            <term>Optional</term>
            </item>
            <item>
            <term>KDF_SECRET_APPEND</term>
            <term>A value to add to the end of the message input to the hash function. For more information, see Remarks.</term>
            <term>Optional</term>
            </item>
            </list>
            <para>The call to the KDF is made as shown in the following pseudocode.</para>
            <para>BCRYPT_KDF_TLS_PRF (L"TLS_PRF")</para>
            <para>
            Use the transport layer security (TLS) pseudo-random function (PRF) key derivation function. The size of the derived key is
            always 48 bytes, so the cbDerivedKey parameter must be 48.
            </para>
            <para>
            The parameters identified by the pParameterList parameter either can or must contain the following parameters, as indicated by
            the Required or optional column.
            </para>
            <list type="table">
            <listheader>
            <term>Parameter</term>
            <term>Description</term>
            <term>Required or optional</term>
            </listheader>
            <item>
            <term>KDF_TLS_PRF_LABEL</term>
            <term>An ANSI string that contains the PRF label.</term>
            <term>Required</term>
            </item>
            <item>
            <term>KDF_TLS_PRF_SEED</term>
            <term>The PRF seed. The seed must be 64 bytes long.</term>
            <term>Required</term>
            </item>
            </list>
            <para>The call to the KDF is made as shown in the following pseudocode.</para>
            <para>BCRYPT_KDF_SP80056A_CONCAT (L"SP800_56A_CONCAT")</para>
            <para>Use the SP800-56A key derivation function.</para>
            <para>
            The parameters identified by the pParameterList parameter either can or must contain the following parameters, as indicated by
            the Required or optional column. All parameter values are treated as opaque byte arrays.
            </para>
            <list type="table">
            <listheader>
            <term>Parameter</term>
            <term>Description</term>
            <term>Required or optional</term>
            </listheader>
            <item>
            <term>KDF_ALGORITHMID</term>
            <term>
            Specifies the AlgorithmID subfield of the OtherInfo field in the SP800-56A key derivation function. Indicates the intended
            purpose of the derived key.
            </term>
            <term>Required</term>
            </item>
            <item>
            <term>KDF_PARTYUINFO</term>
            <term>
            Specifies the PartyUInfo subfield of the OtherInfo field in the SP800-56A key derivation function. The field contains public
            information contributed by the initiator.
            </term>
            <term>Required</term>
            </item>
            <item>
            <term>KDF_PARTYVINFO</term>
            <term>
            Specifies the PartyVInfo subfield of the OtherInfo field in the SP800-56A key derivation function. The field contains public
            information contributed by the responder.
            </term>
            <term>Required</term>
            </item>
            <item>
            <term>KDF_SUPPPUBINFO</term>
            <term>
            Specifies the SuppPubInfo subfield of the OtherInfo field in the SP800-56A key derivation function. The field contains public
            information known to both initiator and responder.
            </term>
            <term>Optional</term>
            </item>
            <item>
            <term>KDF_SUPPPRIVINFO</term>
            <term>
            Specifies the SuppPrivInfo subfield of the OtherInfo field in the SP800-56A key derivation function. It contains private
            information known to both initiator and responder, such as a shared secret.
            </term>
            <term>Optional</term>
            </item>
            </list>
            <para>The call to the KDF is made as shown in the following pseudocode.</para>
            <para><c>Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:</c> This value is not supported.</para>
            </param>
            <param name="pParameterList">
            <para>
            The address of a NCryptBufferDesc structure that contains the KDF parameters. This parameter is optional and can be <c>NULL</c>
            if it is not needed.
            </para>
            </param>
            <param name="pbDerivedKey">
            <para>
            The address of a buffer that receives the key. The cbDerivedKey parameter contains the size of this buffer. If this parameter is
            <c>NULL</c>, this function will place the required size, in bytes, in the <c>DWORD</c> pointed to by the pcbResult parameter.
            </para>
            </param>
            <param name="cbDerivedKey">
            <para>The size, in bytes, of the pbDerivedKey buffer.</para>
            </param>
            <param name="pcbResult">
            <para>
            A pointer to a <c>DWORD</c> that receives the number of bytes that were copied to the pbDerivedKey buffer. If the pbDerivedKey
            parameter is <c>NULL</c>, this function will place the required size, in bytes, in the <c>DWORD</c> pointed to by this parameter.
            </para>
            </param>
            <param name="dwFlags">
            <para>A set of flags that modify the behavior of this function. This can be zero or the following value.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>KDF_USE_SECRET_AS_HMAC_KEY_FLAG</term>
            <term>
            The secret agreement value will also serve as the HMAC key. If this flag is specified, the KDF_HMAC_KEY parameter should not be
            included in the set of parameters in the pParameterList parameter. This flag is only used by the BCRYPT_KDF_HMAC key derivation function.
            </term>
            </item>
            </list>
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>NTE_INVALID_HANDLE</term>
            <term>The hSharedSecret parameter is not valid.</term>
            </item>
            <item>
            <term>NTE_INVALID_PARAMETER</term>
            <term>One or more parameters are not valid.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            The BCryptBufferDesc structure in the pParameterList parameter can contain more than one of the <c>KDF_SECRET_PREPEND</c> and
            <c>KDF_SECRET_APPEND</c> parameters. If more than one of these parameters is specified, the parameter values are concatenated in
            the order in which they are contained in the array before the KDF is called. For example, assume the following parameter values
            are specified.
            </para>
            <para>If the above parameter values are specified, the concatenated values to the actual KDF are as follows.</para>
            <para>
            A service must not call this function from its StartService Function. If a service calls this function from its StartService
            function, a deadlock can occur, and the service may stop responding.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCryptDeriveKey(Vanara.PInvoke.NCrypt.NCRYPT_SECRET_HANDLE,System.String,Vanara.PInvoke.NCrypt.NCryptBufferDesc,System.IntPtr,System.UInt32,System.UInt32@,Vanara.PInvoke.BCrypt.DeriveKeyFlags)">
            <summary>
            <para>
            The <c>NCryptDeriveKey</c> function derives a key from a secret agreement value. This function is intended to be used as part of
            a secret agreement procedure using persisted secret agreement keys. To derive key material by using a persisted secret instead,
            use the NCryptKeyDerivation function.
            </para>
            </summary>
            <param name="hSharedSecret">
            <para>The secret agreement handle to create the key from. This handle is obtained from the NCryptSecretAgreement function.</para>
            </param>
            <param name="pwszKDF">
            <para>
            A pointer to a null-terminated Unicode string that identifies the key derivation function (KDF) to use to derive the key. This
            can be one of the following strings.
            </para>
            <para>BCRYPT_KDF_HASH (L"HASH")</para>
            <para>Use the hash key derivation function.</para>
            <para>
            If the cbDerivedKey parameter is less than the size of the derived key, this function will only copy the specified number of
            bytes to the pbDerivedKey buffer. If the cbDerivedKey parameter is greater than the size of the derived key, this function will
            copy the key to the pbDerivedKey buffer and set the variable pointed to by the pcbResult to the actual number of bytes copied.
            </para>
            <para>
            The parameters identified by the pParameterList parameter either can or must contain the following parameters, as indicated by
            the Required or optional column.
            </para>
            <list type="table">
            <listheader>
            <term>Parameter</term>
            <term>Description</term>
            <term>Required or optional</term>
            </listheader>
            <item>
            <term>KDF_HASH_ALGORITHM</term>
            <term>
            A null-terminated Unicode string that identifies the hash algorithm to use. This can be one of the standard hash algorithm
            identifiers from CNG Algorithm Identifiers or the identifier for another registered hash algorithm. If this parameter is not
            specified, the SHA1 hash algorithm is used.
            </term>
            <term>Optional</term>
            </item>
            <item>
            <term>KDF_SECRET_PREPEND</term>
            <term>A value to add to the beginning of the message input to the hash function. For more information, see Remarks.</term>
            <term>Optional</term>
            </item>
            <item>
            <term>KDF_SECRET_APPEND</term>
            <term>A value to add to the end of the message input to the hash function. For more information, see Remarks.</term>
            <term>Optional</term>
            </item>
            </list>
            <para>The call to the KDF is made as shown in the following pseudocode.</para>
            <para>BCRYPT_KDF_HMAC (L"HMAC")</para>
            <para>Use the Hash-Based Message Authentication Code (HMAC) key derivation function.</para>
            <para>
            If the cbDerivedKey parameter is less than the size of the derived key, this function will only copy the specified number of
            bytes to the pbDerivedKey buffer. If the cbDerivedKey parameter is greater than the size of the derived key, this function will
            copy the key to the pbDerivedKey buffer and set the variable pointed to by the pcbResult to the actual number of bytes copied.
            </para>
            <para>
            The parameters identified by the pParameterList parameter either can or must contain the following parameters, as indicated by
            the Required or optional column.
            </para>
            <list type="table">
            <listheader>
            <term>Parameter</term>
            <term>Description</term>
            <term>Required or optional</term>
            </listheader>
            <item>
            <term>KDF_HASH_ALGORITHM</term>
            <term>
            A null-terminated Unicode string that identifies the hash algorithm to use. This can be one of the standard hash algorithm
            identifiers from CNG Algorithm Identifiers or the identifier for another registered hash algorithm. If this parameter is not
            specified, the SHA1 hash algorithm is used.
            </term>
            <term>Optional</term>
            </item>
            <item>
            <term>KDF_HMAC_KEY</term>
            <term>The key to use for the pseudo-random function (PRF).</term>
            <term>Optional</term>
            </item>
            <item>
            <term>KDF_SECRET_PREPEND</term>
            <term>A value to add to the beginning of the message input to the hash function. For more information, see Remarks.</term>
            <term>Optional</term>
            </item>
            <item>
            <term>KDF_SECRET_APPEND</term>
            <term>A value to add to the end of the message input to the hash function. For more information, see Remarks.</term>
            <term>Optional</term>
            </item>
            </list>
            <para>The call to the KDF is made as shown in the following pseudocode.</para>
            <para>BCRYPT_KDF_TLS_PRF (L"TLS_PRF")</para>
            <para>
            Use the transport layer security (TLS) pseudo-random function (PRF) key derivation function. The size of the derived key is
            always 48 bytes, so the cbDerivedKey parameter must be 48.
            </para>
            <para>
            The parameters identified by the pParameterList parameter either can or must contain the following parameters, as indicated by
            the Required or optional column.
            </para>
            <list type="table">
            <listheader>
            <term>Parameter</term>
            <term>Description</term>
            <term>Required or optional</term>
            </listheader>
            <item>
            <term>KDF_TLS_PRF_LABEL</term>
            <term>An ANSI string that contains the PRF label.</term>
            <term>Required</term>
            </item>
            <item>
            <term>KDF_TLS_PRF_SEED</term>
            <term>The PRF seed. The seed must be 64 bytes long.</term>
            <term>Required</term>
            </item>
            </list>
            <para>The call to the KDF is made as shown in the following pseudocode.</para>
            <para>BCRYPT_KDF_SP80056A_CONCAT (L"SP800_56A_CONCAT")</para>
            <para>Use the SP800-56A key derivation function.</para>
            <para>
            The parameters identified by the pParameterList parameter either can or must contain the following parameters, as indicated by
            the Required or optional column. All parameter values are treated as opaque byte arrays.
            </para>
            <list type="table">
            <listheader>
            <term>Parameter</term>
            <term>Description</term>
            <term>Required or optional</term>
            </listheader>
            <item>
            <term>KDF_ALGORITHMID</term>
            <term>
            Specifies the AlgorithmID subfield of the OtherInfo field in the SP800-56A key derivation function. Indicates the intended
            purpose of the derived key.
            </term>
            <term>Required</term>
            </item>
            <item>
            <term>KDF_PARTYUINFO</term>
            <term>
            Specifies the PartyUInfo subfield of the OtherInfo field in the SP800-56A key derivation function. The field contains public
            information contributed by the initiator.
            </term>
            <term>Required</term>
            </item>
            <item>
            <term>KDF_PARTYVINFO</term>
            <term>
            Specifies the PartyVInfo subfield of the OtherInfo field in the SP800-56A key derivation function. The field contains public
            information contributed by the responder.
            </term>
            <term>Required</term>
            </item>
            <item>
            <term>KDF_SUPPPUBINFO</term>
            <term>
            Specifies the SuppPubInfo subfield of the OtherInfo field in the SP800-56A key derivation function. The field contains public
            information known to both initiator and responder.
            </term>
            <term>Optional</term>
            </item>
            <item>
            <term>KDF_SUPPPRIVINFO</term>
            <term>
            Specifies the SuppPrivInfo subfield of the OtherInfo field in the SP800-56A key derivation function. It contains private
            information known to both initiator and responder, such as a shared secret.
            </term>
            <term>Optional</term>
            </item>
            </list>
            <para>The call to the KDF is made as shown in the following pseudocode.</para>
            <para><c>Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:</c> This value is not supported.</para>
            </param>
            <param name="pParameterList">
            <para>
            The address of a NCryptBufferDesc structure that contains the KDF parameters. This parameter is optional and can be <c>NULL</c>
            if it is not needed.
            </para>
            </param>
            <param name="pbDerivedKey">
            <para>
            The address of a buffer that receives the key. The cbDerivedKey parameter contains the size of this buffer. If this parameter is
            <c>NULL</c>, this function will place the required size, in bytes, in the <c>DWORD</c> pointed to by the pcbResult parameter.
            </para>
            </param>
            <param name="cbDerivedKey">
            <para>The size, in bytes, of the pbDerivedKey buffer.</para>
            </param>
            <param name="pcbResult">
            <para>
            A pointer to a <c>DWORD</c> that receives the number of bytes that were copied to the pbDerivedKey buffer. If the pbDerivedKey
            parameter is <c>NULL</c>, this function will place the required size, in bytes, in the <c>DWORD</c> pointed to by this parameter.
            </para>
            </param>
            <param name="dwFlags">
            <para>A set of flags that modify the behavior of this function. This can be zero or the following value.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>KDF_USE_SECRET_AS_HMAC_KEY_FLAG</term>
            <term>
            The secret agreement value will also serve as the HMAC key. If this flag is specified, the KDF_HMAC_KEY parameter should not be
            included in the set of parameters in the pParameterList parameter. This flag is only used by the BCRYPT_KDF_HMAC key derivation function.
            </term>
            </item>
            </list>
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>NTE_INVALID_HANDLE</term>
            <term>The hSharedSecret parameter is not valid.</term>
            </item>
            <item>
            <term>NTE_INVALID_PARAMETER</term>
            <term>One or more parameters are not valid.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            The BCryptBufferDesc structure in the pParameterList parameter can contain more than one of the <c>KDF_SECRET_PREPEND</c> and
            <c>KDF_SECRET_APPEND</c> parameters. If more than one of these parameters is specified, the parameter values are concatenated in
            the order in which they are contained in the array before the KDF is called. For example, assume the following parameter values
            are specified.
            </para>
            <para>If the above parameter values are specified, the concatenated values to the actual KDF are as follows.</para>
            <para>
            A service must not call this function from its StartService Function. If a service calls this function from its StartService
            function, a deadlock can occur, and the service may stop responding.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCryptEncrypt(Vanara.PInvoke.NCrypt.NCRYPT_KEY_HANDLE,System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr,System.UInt32,System.UInt32@,Vanara.PInvoke.NCrypt.NCryptDecryptFlag)">
            <summary>The <c>NCryptEncrypt</c> function encrypts a block of data.</summary>
            <param name="hKey">The handle of the key to use to encrypt the data.</param>
            <param name="pbInput">
            The address of a buffer that contains the data to be encrypted. The cbInput parameter contains the size of the data to encrypt.
            For more information, see Remarks.
            </param>
            <param name="cbInput">The number of bytes in the pbInput buffer to encrypt.</param>
            <param name="pPaddingInfo">
            A pointer to a structure that contains padding information. The actual type of structure this parameter points to depends on the
            value of the dwFlags parameter. This parameter is only used with asymmetric keys and must be <c>NULL</c> otherwise.
            </param>
            <param name="pbOutput">
            <para>
            The address of a buffer that will receive the encrypted data produced by this function. The cbOutput parameter contains the size
            of this buffer. For more information, see Remarks.
            </para>
            <para>
            If this parameter is <c>NULL</c>, this function will calculate the size needed for the encrypted data and return the size in the
            location pointed to by the pcbResult parameter.
            </para>
            </param>
            <param name="cbOutput">The size, in bytes, of the pbOutput buffer. This parameter is ignored if the pbOutput parameter is <c>NULL</c>.</param>
            <param name="pcbResult">
            A pointer to a <c>DWORD</c> variable that receives the number of bytes copied to the pbOutput buffer. If pbOutput is <c>NULL</c>,
            this receives the size, in bytes, required for the ciphertext.
            </param>
            <param name="dwFlags">
            <para>Flags that modify function behavior. The allowed set of flags depends on the type of key specified by the hKey parameter.</para>
            <para>If the key is an asymmetric key, this can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>NCRYPT_NO_PADDING_FLAG</term>
            <term>
            Do not use any padding. The pPaddingInfo parameter is not used. If you specify the NCRYPT_NO_PADDING_FLAG, then the NCryptEncrypt
            function only encrypts the first N bits, where N is the length of the key that was passed as the hKey parameter. Any bits after
            the first N bits are ignored.
            </term>
            </item>
            <item>
            <term>NCRYPT_PAD_OAEP_FLAG</term>
            <term>
            Use the Optimal Asymmetric Encryption Padding (OAEP) scheme. The pPaddingInfo parameter is a pointer to a
            BCRYPT_OAEP_PADDING_INFO structure.
            </term>
            </item>
            <item>
            <term>NCRYPT_PAD_PKCS1_FLAG</term>
            <term>The data will be padded with a random number to round out the block size. The pPaddingInfo parameter is not used.</term>
            </item>
            <item>
            <term>NCRYPT_SILENT_FLAG</term>
            <term>
            Requests that the key service provider (KSP) not display any user interface. If the provider must display the UI to operate, the
            call fails and the KSP should set the NTE_SILENT_CONTEXT error code as the last error.
            </term>
            </item>
            </list>
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>NTE_BAD_FLAGS</term>
            <term>The dwFlags parameter contains a value that is not valid.</term>
            </item>
            <item>
            <term>NTE_BAD_KEY_STATE</term>
            <term>The key identified by the hKey parameter has not been finalized or is incomplete.</term>
            </item>
            <item>
            <term>NTE_BUFFER_TOO_SMALL</term>
            <term>The size specified by the cbOutput parameter is not large enough to hold the encrypted data.</term>
            </item>
            <item>
            <term>NTE_INVALID_HANDLE</term>
            <term>The hKey parameter is not valid.</term>
            </item>
            <item>
            <term>NTE_INVALID_PARAMETER</term>
            <term>One or more parameters are not valid.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            The pbInput and pbOutput parameters can point to the same buffer. In this case, this function will perform the encryption in
            place. It is possible that the encrypted data size will be larger than the unencrypted data size, so the buffer must be large
            enough to hold the encrypted data.
            </para>
            <para>
            A service must not call this function from its StartService Function. If a service calls this function from its StartService
            function, a deadlock can occur, and the service may stop responding.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCryptEnumAlgorithms(Vanara.PInvoke.NCrypt.NCRYPT_PROV_HANDLE,Vanara.PInvoke.BCrypt.AlgOperations,System.UInt32@,Vanara.PInvoke.NCrypt.SafeNCryptBuffer@,Vanara.PInvoke.NCrypt.NCryptDecryptFlag)">
            <summary>
            The <c>NCryptEnumAlgorithms</c> function obtains the names of the algorithms that are supported by the specified key storage provider.
            </summary>
            <param name="hProvider">
            The handle of the key storage provider to enumerate the algorithms for. This handle is obtained with the
            NCryptOpenStorageProvider function.
            </param>
            <param name="dwAlgOperations">
            <para>
            A set of values that determine which algorithm classes to enumerate. This can be zero or a combination of one or more of the
            following values. If dwAlgOperations is zero, all algorithms are enumerated.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>NCRYPT_CIPHER_OPERATION 0x00000001</term>
            <term>Enumerate the cipher (symmetric encryption) algorithms.</term>
            </item>
            <item>
            <term>NCRYPT_HASH_OPERATION 0x00000002</term>
            <term>Enumerate the hashing algorithms.</term>
            </item>
            <item>
            <term>NCRYPT_ASYMMETRIC_ENCRYPTION_OPERATION 0x00000004</term>
            <term>Enumerate the asymmetric encryption algorithms.</term>
            </item>
            <item>
            <term>NCRYPT_SECRET_AGREEMENT_OPERATION 0x00000008</term>
            <term>Enumerate the secret agreement algorithms.</term>
            </item>
            <item>
            <term>NCRYPT_SIGNATURE_OPERATION 0x00000010</term>
            <term>Enumerate the digital signature algorithms.</term>
            </item>
            </list>
            </param>
            <param name="pdwAlgCount">The address of a <c>DWORD</c> that receives the number of elements in the ppAlgList array.</param>
            <param name="ppAlgList">
            <para>
            The address of an NCryptAlgorithmName structure pointer that receives an array of the registered algorithm names. The variable
            pointed to by the pdwAlgCount parameter receives the number of elements in this array.
            </para>
            <para>When this memory is no longer needed, it must be freed by passing this pointer to the NCryptFreeBuffer function.</para>
            </param>
            <param name="dwFlags">
            <para>Flags that modify function behavior. This can be zero (0) or the following value.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>NCRYPT_SILENT_FLAG</term>
            <term>
            Requests that the key service provider (KSP) not display any user interface. If the provider must display the UI to operate, the
            call fails and the KSP should set the NTE_SILENT_CONTEXT error code as the last error.
            </term>
            </item>
            </list>
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>NTE_BAD_FLAGS</term>
            <term>The dwFlags parameter contains a value that is not valid.</term>
            </item>
            <item>
            <term>NTE_INVALID_HANDLE</term>
            <term>The hProvider parameter is not valid.</term>
            </item>
            <item>
            <term>NTE_INVALID_PARAMETER</term>
            <term>One or more parameters are not valid.</term>
            </item>
            <item>
            <term>NTE_NO_MEMORY</term>
            <term>A memory allocation failure occurred.</term>
            </item>
            </list>
            </returns>
            <remarks>
            A service must not call this function from its StartService Function. If a service calls this function from its StartService
            function, a deadlock can occur, and the service may stop responding.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCryptEnumKeys(Vanara.PInvoke.NCrypt.NCRYPT_PROV_HANDLE,System.String,Vanara.PInvoke.NCrypt.SafeNCryptBuffer@,System.IntPtr@,Vanara.PInvoke.NCrypt.OpenKeyFlags)">
            <summary>The <c>NCryptEnumKeys</c> function obtains the names of the keys that are stored by the provider.</summary>
            <param name="hProvider">
            The handle of the key storage provider to enumerate the keys for. This handle is obtained with the NCryptOpenStorageProvider function.
            </param>
            <param name="pszScope">This parameter is not currently used and must be <c>NULL</c>.</param>
            <param name="ppKeyName">
            The address of a pointer to an NCryptKeyName structure that receives the name of the retrieved key. When the application has
            finished using this memory, free it by calling the NCryptFreeBuffer function.
            </param>
            <param name="ppEnumState">
            <para>
            The address of a <c>VOID</c> pointer that receives enumeration state information that is used in subsequent calls to this
            function. This information only has meaning to the key storage provider and is opaque to the caller. The key storage provider
            uses this information to determine which item is next in the enumeration. If the variable pointed to by this parameter contains
            <c>NULL</c>, the enumeration is started from the beginning.
            </para>
            <para>When this memory is no longer needed, it must be freed by passing this pointer to the NCryptFreeBuffer function.</para>
            </param>
            <param name="dwFlags">
            <para>Flags that modify function behavior. This can be zero or a combination of one or more of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>NCRYPT_MACHINE_KEY_FLAG</term>
            <term>Enumerate the keys for the local computer. If this flag is not present, the current user keys are enumerated.</term>
            </item>
            <item>
            <term>NCRYPT_SILENT_FLAG</term>
            <term>
            Requests that the key service provider (KSP) not display any user interface. If the provider must display the UI to operate, the
            call fails and the KSP should set the NTE_SILENT_CONTEXT error code as the last error.
            </term>
            </item>
            </list>
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>NTE_BAD_FLAGS</term>
            <term>The dwFlags parameter contains a value that is not valid.</term>
            </item>
            <item>
            <term>NTE_INVALID_HANDLE</term>
            <term>The hProvider parameter is not valid.</term>
            </item>
            <item>
            <term>NTE_INVALID_PARAMETER</term>
            <term>One or more parameters are not valid.</term>
            </item>
            <item>
            <term>NTE_NO_MEMORY</term>
            <term>A memory allocation failure occurred.</term>
            </item>
            <item>
            <term>NTE_NO_MORE_ITEMS</term>
            <term>The end of the enumeration has been reached.</term>
            </item>
            <item>
            <term>NTE_SILENT_CONTEXT</term>
            <term>The dwFlags parameter contains the NCRYPT_SILENT_FLAG flag, but the key being enumerated requires user interaction.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            This function retrieves only one item each time it is called. The state of the enumeration is stored in the variable pointed to
            by the ppEnumState parameter, so this must be preserved between calls to this function. When the last key stored by the provider
            has been retrieved, this function will return <c>NTE_NO_MORE_ITEMS</c> the next time it is called. To start the enumeration over,
            set the variable pointed to by the ppEnumState parameter to <c>NULL</c>, free the memory pointed to by the ppKeyName parameter,
            if it is not <c>NULL</c>, and call this function again.
            </para>
            <para>
            A service must not call this function from its StartService Function. If a service calls this function from its StartService
            function, a deadlock can occur, and the service may stop responding.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCryptEnumStorageProviders(System.UInt32@,Vanara.PInvoke.NCrypt.SafeNCryptBuffer@,Vanara.PInvoke.NCrypt.NCryptUIFlags)">
            <summary>The <c>NCryptEnumStorageProviders</c> function obtains the names of the registered key storage providers.</summary>
            <param name="pdwProviderCount">The address of a <c>DWORD</c> to receive the number of elements in the ppProviderList array.</param>
            <param name="ppProviderList">
            <para>
            The address of an NCryptProviderName structure pointer to receive an array of the registered key storage provider names. The
            variable pointed to by the pdwProviderCount parameter receives the number of elements in this array.
            </para>
            <para>When this memory is no longer needed, free it by passing this pointer to the NCryptFreeBuffer function.</para>
            </param>
            <param name="dwFlags">
            <para>Flags that modify function behavior. This can be zero (0) or the following value.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>NCRYPT_SILENT_FLAG</term>
            <term>
            Requests that the key service provider (KSP) not display any user interface. If the provider must display the UI to operate, the
            call fails and the KSP should set the NTE_SILENT_CONTEXT error code as the last error.
            </term>
            </item>
            </list>
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>NTE_BAD_FLAGS</term>
            <term>The dwFlags parameter contains a value that is not valid.</term>
            </item>
            <item>
            <term>NTE_INVALID_PARAMETER</term>
            <term>One or more parameters are not valid.</term>
            </item>
            <item>
            <term>NTE_NO_MEMORY</term>
            <term>A memory allocation failure occurred.</term>
            </item>
            </list>
            </returns>
            <remarks>
            A service must not call this function from its StartService Function. If a service calls this function from its StartService
            function, a deadlock can occur, and the service may stop responding.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCryptExportKey(Vanara.PInvoke.NCrypt.NCRYPT_KEY_HANDLE,Vanara.PInvoke.NCrypt.NCRYPT_KEY_HANDLE,System.String,Vanara.PInvoke.NCrypt.NCryptBufferDesc,Vanara.InteropServices.SafeAllocatedMemoryHandle,System.UInt32,System.UInt32@,Vanara.PInvoke.NCrypt.NCryptUIFlags)">
            <summary>
            <para>The <c>NCryptExportKey</c> function exports a CNG key to a memory BLOB.</para>
            </summary>
            <param name="hKey">
            <para>A handle of the key to export.</para>
            </param>
            <param name="hExportKey">
            <para>
            A handle to a cryptographic key of the destination user. The key data within the exported key BLOB is encrypted by using this
            key. This ensures that only the destination user is able to make use of the key BLOB.
            </para>
            </param>
            <param name="pszBlobType">
            <para>
            A null-terminated Unicode string that contains an identifier that specifies the type of BLOB to export. This can be one of the
            following values.
            </para>
            <para>BCRYPT_DH_PRIVATE_BLOB</para>
            <para>
            Export a Diffie-Hellman public/private key pair. The pbOutput buffer receives a BCRYPT_DH_KEY_BLOB structure immediately followed
            by the key data.
            </para>
            <para>BCRYPT_DH_PUBLIC_BLOB</para>
            <para>
            Export a Diffie-Hellman public key. The pbOutput buffer receives a BCRYPT_DH_KEY_BLOB structure immediately followed by the key data.
            </para>
            <para>BCRYPT_DSA_PRIVATE_BLOB</para>
            <para>
            Export a DSA public/private key pair. The pbOutput buffer receives a BCRYPT_DSA_KEY_BLOB structure immediately followed by the
            key data.
            </para>
            <para>BCRYPT_DSA_PUBLIC_BLOB</para>
            <para>
            Export a DSA public key. The pbOutput buffer receives a BCRYPT_DSA_KEY_BLOB structure immediately followed by the key data.
            </para>
            <para>BCRYPT_ECCPRIVATE_BLOB</para>
            <para>
            Export an elliptic curve cryptography (ECC) private key. The pbOutput buffer receives a BCRYPT_ECCKEY_BLOB structure immediately
            followed by the key data.
            </para>
            <para>BCRYPT_ECCPUBLIC_BLOB</para>
            <para>
            Export an ECC public key. The pbOutput buffer receives a BCRYPT_ECCKEY_BLOB structure immediately followed by the key data.
            </para>
            <para>BCRYPT_PUBLIC_KEY_BLOB</para>
            <para>
            Export a generic public key of any type. The type of key in this BLOB is determined by the <c>Magic</c> member of the
            BCRYPT_KEY_BLOB structure.
            </para>
            <para>BCRYPT_PRIVATE_KEY_BLOB</para>
            <para>
            Export a generic private key of any type. The private key does not necessarily contain the public key. The type of key in this
            BLOB is determined by the <c>Magic</c> member of the BCRYPT_KEY_BLOB structure.
            </para>
            <para>BCRYPT_RSAFULLPRIVATE_BLOB</para>
            <para>
            Export a full RSA public/private key pair. The pbOutput buffer receives a BCRYPT_RSAKEY_BLOB structure immediately followed by
            the key data. This BLOB will include additional key material compared to the <c>BCRYPT_RSAPRIVATE_BLOB</c> type.
            </para>
            <para>BCRYPT_RSAPRIVATE_BLOB</para>
            <para>
            Export an RSA public/private key pair. The pbOutput buffer receives a BCRYPT_RSAKEY_BLOB structure immediately followed by the
            key data.
            </para>
            <para>BCRYPT_RSAPUBLIC_BLOB</para>
            <para>
            Export an RSA public key. The pbOutput buffer receives a BCRYPT_RSAKEY_BLOB structure immediately followed by the key data.
            </para>
            <para>LEGACY_DH_PRIVATE_BLOB</para>
            <para>
            Export a legacy Diffie-Hellman Version 3 Private Key BLOB that contains a Diffie-Hellman public/private key pair that can be
            imported by using CryptoAPI.
            </para>
            <para>LEGACY_DH_PUBLIC_BLOB</para>
            <para>
            Export a legacy Diffie-Hellman Version 3 Private Key BLOB that contains a Diffie-Hellman public key that can be imported by using CryptoAPI.
            </para>
            <para>LEGACY_DSA_PRIVATE_BLOB</para>
            <para>Export a DSA public/private key pair in a form that can be imported by using CryptoAPI.</para>
            <para>LEGACY_DSA_PUBLIC_BLOB</para>
            <para>Export a DSA public key in a form that can be imported by using CryptoAPI.</para>
            <para>LEGACY_RSAPRIVATE_BLOB</para>
            <para>Export an RSA public/private key pair in a form that can be imported by using CryptoAPI.</para>
            <para>LEGACY_RSAPUBLIC_BLOB</para>
            <para>Export an RSA public key in a form that can be imported by using CryptoAPI.</para>
            <para>NCRYPT_CIPHER_KEY_BLOB</para>
            <para>Export a cipher key in a NCRYPT_KEY_BLOB_HEADER structure.</para>
            <para><c>Windows 8 and Windows Server 2012:</c> Support for this value begins.</para>
            <para>NCRYPT_OPAQUETRANSPORT_BLOB</para>
            <para>
            Export a key in a format that is specific to a single CSP and is suitable for transport. Opaque BLOBs are not transferable and
            must be imported by using the same CSP that generated the BLOB.
            </para>
            <para>NCRYPT_PKCS7_ENVELOPE_BLOB</para>
            <para>
            Export a PKCS #7 envelope BLOB. The parameters identified by the pParameterList parameter either can or must contain the
            following parameters, as indicated by the Required or optional column.
            </para>
            <list type="table">
            <listheader>
            <term>Parameter</term>
            <term>Required or optional</term>
            </listheader>
            <item>
            <term>NCRYPTBUFFER_CERT_BLOB</term>
            <term>Required</term>
            </item>
            <item>
            <term>NCRYPTBUFFER_PKCS_ALG_OID</term>
            <term>Required</term>
            </item>
            <item>
            <term>NCRYPTBUFFER_PKCS_ALG_PARAM</term>
            <term>Optional</term>
            </item>
            </list>
            <para>NCRYPT_PKCS8_PRIVATE_KEY_BLOB</para>
            <para>
            Export a PKCS #8 private key BLOB. The parameters identified by the pParameterList parameter either can or must contain the
            following parameters, as indicated by the Required or optional column.
            </para>
            <list type="table">
            <listheader>
            <term>Parameter</term>
            <term>Required or optional</term>
            </listheader>
            <item>
            <term>NCRYPTBUFFER_PKCS_ALG_OID</term>
            <term>Optional</term>
            </item>
            <item>
            <term>NCRYPTBUFFER_PKCS_ALG_PARAM</term>
            <term>Optional</term>
            </item>
            <item>
            <term>NCRYPTBUFFER_PKCS_SECRET</term>
            <term>Optional</term>
            </item>
            </list>
            <para>NCRYPT_PROTECTED_KEY_BLOB</para>
            <para>Export a protected key in a NCRYPT_KEY_BLOB_HEADER structure.</para>
            <para><c>Windows 8 and Windows Server 2012:</c> Support for this value begins.</para>
            </param>
            <param name="pParameterList">
            <para>
            The address of an NCryptBufferDesc structure that receives parameter information for the key. This parameter can be <c>NULL</c>
            if this information is not needed.
            </para>
            </param>
            <param name="pbOutput">
            <para>
            The address of a buffer that receives the key BLOB. The cbOutput parameter contains the size of this buffer. If this parameter is
            <c>NULL</c>, this function will place the required size, in bytes, in the <c>DWORD</c> pointed to by the pcbResult parameter.
            </para>
            </param>
            <param name="cbOutput">
            <para>The size, in bytes, of the pbOutput buffer.</para>
            </param>
            <param name="pcbResult">
            <para>
            The address of a <c>DWORD</c> variable that receives the number of bytes copied to the pbOutput buffer. If the pbOutput parameter
            is <c>NULL</c>, this function will place the required size, in bytes, in the <c>DWORD</c> pointed to by this parameter.
            </para>
            </param>
            <param name="dwFlags">
            <para>
            Flags that modify function behavior. This can be zero or a combination of one or more of the following values. The set of valid
            flags is specific to each key storage provider. The following flag applies to all providers.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>NCRYPT_SILENT_FLAG</term>
            <term>
            Requests that the key service provider (KSP) not display any user interface. If the provider must display the UI to operate, the
            call fails and the KSP should set the NTE_SILENT_CONTEXT error code as the last error.
            </term>
            </item>
            </list>
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>NTE_BAD_FLAGS</term>
            <term>The dwFlags parameter contains a value that is not valid.</term>
            </item>
            <item>
            <term>NTE_BAD_KEY_STATE</term>
            <term>
            The key specified by the hKey parameter is not valid. The most common cause of this error is that the key was not completed by
            using the NCryptFinalizeKey function.
            </term>
            </item>
            <item>
            <term>NTE_BAD_TYPE</term>
            <term>The key specified by the hKey parameter cannot be exported into the BLOB type specified by the pszBlobType parameter.</term>
            </item>
            <item>
            <term>NTE_INVALID_HANDLE</term>
            <term>The hKey or the hExportKey parameter is not valid.</term>
            </item>
            <item>
            <term>NTE_INVALID_PARAMETER</term>
            <term>One or more parameters are not valid.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            A service must not call this function from its StartService Function. If a service calls this function from its StartService
            function, a deadlock can occur, and the service may stop responding.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCryptExportKey(Vanara.PInvoke.NCrypt.NCRYPT_KEY_HANDLE,Vanara.PInvoke.NCrypt.NCRYPT_KEY_HANDLE,System.String,Vanara.PInvoke.NCrypt.NCryptBufferDesc,System.IntPtr,System.UInt32,System.UInt32@,Vanara.PInvoke.NCrypt.NCryptUIFlags)">
            <summary>
            <para>The <c>NCryptExportKey</c> function exports a CNG key to a memory BLOB.</para>
            </summary>
            <param name="hKey">
            <para>A handle of the key to export.</para>
            </param>
            <param name="hExportKey">
            <para>
            A handle to a cryptographic key of the destination user. The key data within the exported key BLOB is encrypted by using this
            key. This ensures that only the destination user is able to make use of the key BLOB.
            </para>
            </param>
            <param name="pszBlobType">
            <para>
            A null-terminated Unicode string that contains an identifier that specifies the type of BLOB to export. This can be one of the
            following values.
            </para>
            <para>BCRYPT_DH_PRIVATE_BLOB</para>
            <para>
            Export a Diffie-Hellman public/private key pair. The pbOutput buffer receives a BCRYPT_DH_KEY_BLOB structure immediately followed
            by the key data.
            </para>
            <para>BCRYPT_DH_PUBLIC_BLOB</para>
            <para>
            Export a Diffie-Hellman public key. The pbOutput buffer receives a BCRYPT_DH_KEY_BLOB structure immediately followed by the key data.
            </para>
            <para>BCRYPT_DSA_PRIVATE_BLOB</para>
            <para>
            Export a DSA public/private key pair. The pbOutput buffer receives a BCRYPT_DSA_KEY_BLOB structure immediately followed by the
            key data.
            </para>
            <para>BCRYPT_DSA_PUBLIC_BLOB</para>
            <para>
            Export a DSA public key. The pbOutput buffer receives a BCRYPT_DSA_KEY_BLOB structure immediately followed by the key data.
            </para>
            <para>BCRYPT_ECCPRIVATE_BLOB</para>
            <para>
            Export an elliptic curve cryptography (ECC) private key. The pbOutput buffer receives a BCRYPT_ECCKEY_BLOB structure immediately
            followed by the key data.
            </para>
            <para>BCRYPT_ECCPUBLIC_BLOB</para>
            <para>
            Export an ECC public key. The pbOutput buffer receives a BCRYPT_ECCKEY_BLOB structure immediately followed by the key data.
            </para>
            <para>BCRYPT_PUBLIC_KEY_BLOB</para>
            <para>
            Export a generic public key of any type. The type of key in this BLOB is determined by the <c>Magic</c> member of the
            BCRYPT_KEY_BLOB structure.
            </para>
            <para>BCRYPT_PRIVATE_KEY_BLOB</para>
            <para>
            Export a generic private key of any type. The private key does not necessarily contain the public key. The type of key in this
            BLOB is determined by the <c>Magic</c> member of the BCRYPT_KEY_BLOB structure.
            </para>
            <para>BCRYPT_RSAFULLPRIVATE_BLOB</para>
            <para>
            Export a full RSA public/private key pair. The pbOutput buffer receives a BCRYPT_RSAKEY_BLOB structure immediately followed by
            the key data. This BLOB will include additional key material compared to the <c>BCRYPT_RSAPRIVATE_BLOB</c> type.
            </para>
            <para>BCRYPT_RSAPRIVATE_BLOB</para>
            <para>
            Export an RSA public/private key pair. The pbOutput buffer receives a BCRYPT_RSAKEY_BLOB structure immediately followed by the
            key data.
            </para>
            <para>BCRYPT_RSAPUBLIC_BLOB</para>
            <para>
            Export an RSA public key. The pbOutput buffer receives a BCRYPT_RSAKEY_BLOB structure immediately followed by the key data.
            </para>
            <para>LEGACY_DH_PRIVATE_BLOB</para>
            <para>
            Export a legacy Diffie-Hellman Version 3 Private Key BLOB that contains a Diffie-Hellman public/private key pair that can be
            imported by using CryptoAPI.
            </para>
            <para>LEGACY_DH_PUBLIC_BLOB</para>
            <para>
            Export a legacy Diffie-Hellman Version 3 Private Key BLOB that contains a Diffie-Hellman public key that can be imported by using CryptoAPI.
            </para>
            <para>LEGACY_DSA_PRIVATE_BLOB</para>
            <para>Export a DSA public/private key pair in a form that can be imported by using CryptoAPI.</para>
            <para>LEGACY_DSA_PUBLIC_BLOB</para>
            <para>Export a DSA public key in a form that can be imported by using CryptoAPI.</para>
            <para>LEGACY_RSAPRIVATE_BLOB</para>
            <para>Export an RSA public/private key pair in a form that can be imported by using CryptoAPI.</para>
            <para>LEGACY_RSAPUBLIC_BLOB</para>
            <para>Export an RSA public key in a form that can be imported by using CryptoAPI.</para>
            <para>NCRYPT_CIPHER_KEY_BLOB</para>
            <para>Export a cipher key in a NCRYPT_KEY_BLOB_HEADER structure.</para>
            <para><c>Windows 8 and Windows Server 2012:</c> Support for this value begins.</para>
            <para>NCRYPT_OPAQUETRANSPORT_BLOB</para>
            <para>
            Export a key in a format that is specific to a single CSP and is suitable for transport. Opaque BLOBs are not transferable and
            must be imported by using the same CSP that generated the BLOB.
            </para>
            <para>NCRYPT_PKCS7_ENVELOPE_BLOB</para>
            <para>
            Export a PKCS #7 envelope BLOB. The parameters identified by the pParameterList parameter either can or must contain the
            following parameters, as indicated by the Required or optional column.
            </para>
            <list type="table">
            <listheader>
            <term>Parameter</term>
            <term>Required or optional</term>
            </listheader>
            <item>
            <term>NCRYPTBUFFER_CERT_BLOB</term>
            <term>Required</term>
            </item>
            <item>
            <term>NCRYPTBUFFER_PKCS_ALG_OID</term>
            <term>Required</term>
            </item>
            <item>
            <term>NCRYPTBUFFER_PKCS_ALG_PARAM</term>
            <term>Optional</term>
            </item>
            </list>
            <para>NCRYPT_PKCS8_PRIVATE_KEY_BLOB</para>
            <para>
            Export a PKCS #8 private key BLOB. The parameters identified by the pParameterList parameter either can or must contain the
            following parameters, as indicated by the Required or optional column.
            </para>
            <list type="table">
            <listheader>
            <term>Parameter</term>
            <term>Required or optional</term>
            </listheader>
            <item>
            <term>NCRYPTBUFFER_PKCS_ALG_OID</term>
            <term>Optional</term>
            </item>
            <item>
            <term>NCRYPTBUFFER_PKCS_ALG_PARAM</term>
            <term>Optional</term>
            </item>
            <item>
            <term>NCRYPTBUFFER_PKCS_SECRET</term>
            <term>Optional</term>
            </item>
            </list>
            <para>NCRYPT_PROTECTED_KEY_BLOB</para>
            <para>Export a protected key in a NCRYPT_KEY_BLOB_HEADER structure.</para>
            <para><c>Windows 8 and Windows Server 2012:</c> Support for this value begins.</para>
            </param>
            <param name="pParameterList">
            <para>
            The address of an NCryptBufferDesc structure that receives parameter information for the key. This parameter can be <c>NULL</c>
            if this information is not needed.
            </para>
            </param>
            <param name="pbOutput">
            <para>
            The address of a buffer that receives the key BLOB. The cbOutput parameter contains the size of this buffer. If this parameter is
            <c>NULL</c>, this function will place the required size, in bytes, in the <c>DWORD</c> pointed to by the pcbResult parameter.
            </para>
            </param>
            <param name="cbOutput">
            <para>The size, in bytes, of the pbOutput buffer.</para>
            </param>
            <param name="pcbResult">
            <para>
            The address of a <c>DWORD</c> variable that receives the number of bytes copied to the pbOutput buffer. If the pbOutput parameter
            is <c>NULL</c>, this function will place the required size, in bytes, in the <c>DWORD</c> pointed to by this parameter.
            </para>
            </param>
            <param name="dwFlags">
            <para>
            Flags that modify function behavior. This can be zero or a combination of one or more of the following values. The set of valid
            flags is specific to each key storage provider. The following flag applies to all providers.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>NCRYPT_SILENT_FLAG</term>
            <term>
            Requests that the key service provider (KSP) not display any user interface. If the provider must display the UI to operate, the
            call fails and the KSP should set the NTE_SILENT_CONTEXT error code as the last error.
            </term>
            </item>
            </list>
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>NTE_BAD_FLAGS</term>
            <term>The dwFlags parameter contains a value that is not valid.</term>
            </item>
            <item>
            <term>NTE_BAD_KEY_STATE</term>
            <term>
            The key specified by the hKey parameter is not valid. The most common cause of this error is that the key was not completed by
            using the NCryptFinalizeKey function.
            </term>
            </item>
            <item>
            <term>NTE_BAD_TYPE</term>
            <term>The key specified by the hKey parameter cannot be exported into the BLOB type specified by the pszBlobType parameter.</term>
            </item>
            <item>
            <term>NTE_INVALID_HANDLE</term>
            <term>The hKey or the hExportKey parameter is not valid.</term>
            </item>
            <item>
            <term>NTE_INVALID_PARAMETER</term>
            <term>One or more parameters are not valid.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            A service must not call this function from its StartService Function. If a service calls this function from its StartService
            function, a deadlock can occur, and the service may stop responding.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCryptFinalizeKey(Vanara.PInvoke.NCrypt.NCRYPT_KEY_HANDLE,Vanara.PInvoke.NCrypt.FinalizeKeyFlags)">
            <summary>
            <para>
            The <c>NCryptFinalizeKey</c> function completes a CNG key storage key. The key cannot be used until this function has been called.
            </para>
            </summary>
            <param name="hKey">
            <para>The handle of the key to complete. This handle is obtained by calling the NCryptCreatePersistedKey function.</para>
            </param>
            <param name="dwFlags">
            <para>Flags that modify function behavior. This can be zero or a combination of one or more of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>NCRYPT_NO_KEY_VALIDATION</term>
            <term>Do not validate the public portion of the key pair. This flag only applies to public/private key pairs.</term>
            </item>
            <item>
            <term>NCRYPT_WRITE_KEY_TO_LEGACY_STORE_FLAG</term>
            <term>Also save the key in legacy storage. This allows the key to be used with CryptoAPI. This flag only applies to RSA keys.</term>
            </item>
            <item>
            <term>NCRYPT_SILENT_FLAG</term>
            <term>
            Requests that the key service provider (KSP) not display any user interface. If the provider must display the UI to operate, the
            call fails and the KSP should set the NTE_SILENT_CONTEXT error code as the last error.
            </term>
            </item>
            </list>
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>NTE_BAD_FLAGS</term>
            <term>The dwFlags parameter contains a value that is not valid.</term>
            </item>
            <item>
            <term>NTE_INVALID_HANDLE</term>
            <term>The hKey parameter is not valid.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            A service must not call this function from its StartService Function. If a service calls this function from its StartService
            function, a deadlock can occur, and the service may stop responding.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCryptFreeBuffer(System.IntPtr)">
            <summary>The <c>NCryptFreeBuffer</c> function releases a block of memory allocated by a CNG key storage provider.</summary>
            <param name="pvInput">The address of the memory to be released.</param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>NTE_INVALID_PARAMETER</term>
            <term>The pvInput parameter is not valid.</term>
            </item>
            </list>
            </returns>
            <remarks>
            A service must not call this function from its StartService Function. If a service calls this function from its StartService
            function, a deadlock can occur, and the service may stop responding.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCryptFreeObject(System.IntPtr)">
            <summary>
            <para>The <c>NCryptFreeObject</c> function frees a CNG key storage object.</para>
            </summary>
            <param name="hObject">
            <para>
            The handle of the object to free. This can be either a provider handle ( <c>NCRYPT_PROV_HANDLE</c>) or a key handle ( <c>NCRYPT_KEY_HANDLE</c>).
            </para>
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>NTE_INVALID_HANDLE</term>
            <term>The handle in the hObject parameter is not valid.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            A service must not call this function from its StartService Function. If a service calls this function from its StartService
            function, a deadlock can occur, and the service may stop responding.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCryptGetProperty(Vanara.PInvoke.NCrypt.NCRYPT_HANDLE,System.String,System.IntPtr,System.UInt32,System.UInt32@,Vanara.PInvoke.NCrypt.GetPropertyFlags)">
            <summary>The <c>NCryptGetProperty</c> function retrieves the value of a named property for a key storage object.</summary>
            <param name="hObject">
            The handle of the object to get the property for. This can be a provider handle ( <c>NCRYPT_PROV_HANDLE</c>) or a key handle ( <c>NCRYPT_KEY_HANDLE</c>).
            </param>
            <param name="pszProperty">
            A pointer to a null-terminated Unicode string that contains the name of the property to retrieve. This can be one of the
            predefined Key Storage Property Identifiers or a custom property identifier.
            </param>
            <param name="pbOutput">
            <para>The address of a buffer that receives the property value. The cbOutput parameter contains the size of this buffer.</para>
            <para>
            To calculate the size required for the buffer, set this parameter to <c>NULL</c>. The size, in bytes, required is returned in the
            location pointed to by the pcbResult parameter.
            </para>
            </param>
            <param name="cbOutput">The size, in bytes, of the pbOutput buffer.</param>
            <param name="pcbResult">
            <para>A pointer to a <c>DWORD</c> variable that receives the number of bytes that were copied to the pbOutput buffer.</para>
            <para>
            If the pbOutput parameter is <c>NULL</c>, the size, in bytes, required for the buffer is placed in the location pointed to by
            this parameter.
            </para>
            </param>
            <param name="dwFlags">
            <para>Flags that modify function behavior. This can be zero or the following value.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>NCRYPT_PERSIST_ONLY_FLAG</term>
            <term>
            Ignore any built in values for this property and only retrieve the user-persisted properties of the key. The maximum size of the
            data for any persisted property is NCRYPT_MAX_PROPERTY_DATA bytes.
            </term>
            </item>
            <item>
            <term>NCRYPT_SILENT_FLAG</term>
            <term>
            Requests that the key service provider (KSP) not display any user interface. If the provider must display the UI to operate, the
            call fails and the KSP should set the NTE_SILENT_CONTEXT error code as the last error.
            </term>
            </item>
            </list>
            <para>
            For the <c>NCRYPT_SECURITY_DESCR_PROPERTY</c> property, this parameter must also contain one of the following values, which
            identifies the part of the security descriptor to retrieve.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>OWNER_SECURITY_INFORMATION</term>
            <term>
            Retrieve the security identifier (SID) of the object's owner. Use the GetSecurityDescriptorOwner function to obtain the owner SID
            from the SECURITY_DESCRIPTOR structure.
            </term>
            </item>
            <item>
            <term>GROUP_SECURITY_INFORMATION</term>
            <term>
            Retrieve the SID of the object's primary group. Use the GetSecurityDescriptorGroup function to obtain the group SID from the
            SECURITY_DESCRIPTOR structure.
            </term>
            </item>
            <item>
            <term>DACL_SECURITY_INFORMATION</term>
            <term>
            Retrieve the discretionary access control list (DACL). Use the GetSecurityDescriptorSacl function to obtain the DACL from the
            SECURITY_DESCRIPTOR structure.
            </term>
            </item>
            <item>
            <term>SACL_SECURITY_INFORMATION</term>
            <term>
            Retrieve the system access control list (SACL). Use the GetSecurityDescriptorDacl function to obtain the SACL from the
            SECURITY_DESCRIPTOR structure.
            </term>
            </item>
            </list>
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>NTE_BAD_FLAGS</term>
            <term>The dwFlags parameter contains a value that is not valid.</term>
            </item>
            <item>
            <term>NTE_INVALID_HANDLE</term>
            <term>The hObject parameter is not valid.</term>
            </item>
            <item>
            <term>NTE_INVALID_PARAMETER</term>
            <term>One or more parameters are not valid.</term>
            </item>
            <item>
            <term>NTE_NO_MEMORY</term>
            <term>A memory allocation failure occurred.</term>
            </item>
            <item>
            <term>NTE_NOT_SUPPORTED</term>
            <term>The specified property is not supported for the object.</term>
            </item>
            </list>
            </returns>
            <remarks>
            A service must not call this function from its StartService Function. If a service calls this function from its StartService
            function, a deadlock can occur, and the service may stop responding.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCryptImportKey(Vanara.PInvoke.NCrypt.NCRYPT_PROV_HANDLE,Vanara.PInvoke.NCrypt.NCRYPT_KEY_HANDLE,System.String,Vanara.PInvoke.NCrypt.NCryptBufferDesc,Vanara.PInvoke.NCrypt.SafeNCRYPT_KEY_HANDLE@,Vanara.InteropServices.SafeAllocatedMemoryHandle,System.UInt32,Vanara.PInvoke.NCrypt.NCryptUIFlags)">
            <summary>
            <para>The <c>NCryptImportKey</c> function imports a Cryptography API: Next Generation (CNG) key from a memory BLOB.</para>
            </summary>
            <param name="hProvider">
            <para>The handle of the key storage provider.</para>
            </param>
            <param name="hImportKey">
            <para>
            The handle of the cryptographic key with which the key data within the imported key BLOB was encrypted. This must be a handle to
            the same key that was passed in the hExportKey parameter of the NCryptExportKey function. If this parameter is <c>NULL</c>, the
            key BLOB is assumed to not be encrypted.
            </para>
            </param>
            <param name="pszBlobType">
            <para>
            A null-terminated Unicode string that contains an identifier that specifies the format of the key BLOB. These formats are
            specific to a particular key storage provider. For the BLOB formats supported by Microsoft providers, see Remarks.
            </para>
            </param>
            <param name="pParameterList">
            <para>
            The address of an NCryptBufferDesc structure that points to an array of buffers that contain parameter information for the key.
            </para>
            </param>
            <param name="phKey">
            <para>
            The address of an <c>NCRYPT_KEY_HANDLE</c> variable that receives the handle of the key. When you have finished using this
            handle, release it by passing it to the NCryptFreeObject function.
            </para>
            </param>
            <param name="pbData">
            <para>The address of a buffer that contains the key BLOB to be imported. The cbData parameter contains the size of this buffer.</para>
            </param>
            <param name="cbData">
            <para>The size, in bytes, of the pbData buffer.</para>
            </param>
            <param name="dwFlags">
            <para>
            Flags that modify function behavior. This can be zero or a combination of one or more of the following values. The set of valid
            flags is specific to each key storage provider.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>NCRYPT_SILENT_FLAG</term>
            <term>
            Requests that the key service provider (KSP) not display any user interface. If the provider must display the UI to operate, the
            call fails and the KSP should set the NTE_SILENT_CONTEXT error code as the last error.
            </term>
            </item>
            </list>
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>NTE_BAD_FLAGS</term>
            <term>The dwFlags parameter contains a value that is not valid.</term>
            </item>
            <item>
            <term>NTE_EXISTS</term>
            <term>A key with the specified name already exists and the NCRYPT_OVERWRITE_KEY_FLAG was not specified.</term>
            </item>
            <item>
            <term>NTE_INVALID_HANDLE</term>
            <term>The hProvider parameter is not valid.</term>
            </item>
            <item>
            <term>NTE_INVALID_PARAMETER</term>
            <term>One or more parameters are not valid.</term>
            </item>
            <item>
            <term>NTE_NO_MEMORY</term>
            <term>A memory allocation failure occurred.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            A service must not call this function from its StartService Function. If a service calls this function from its StartService
            function, a deadlock can occur, and the service may stop responding.
            </para>
            <para>The following sections describe behaviors specific to the Microsoft key storage providers:</para>
            <list type="bullet">
            <item>
            <term><c>Microsoft Software KSP</c></term>
            </item>
            <item>
            <term><c>Microsoft Smart Card KSP</c></term>
            </item>
            </list>
            <para>Microsoft Software KSP</para>
            <para>The following constants are supported by the Microsoft software KSP for the pszBlobType parameter.</para>
            <para>
            If a key name is not supplied, the Microsoft Software KSP treats the key as ephemeral and does not store it persistently. For the
            <c>NCRYPT_OPAQUETRANSPORT_BLOB</c> type, the key name is stored within the BLOB when it is exported. For other BLOB formats, the
            name can be supplied in an <c>NCRYPTBUFFER_PKCS_KEY_NAME</c> buffer parameter within the pParameterList parameter.
            </para>
            <para>
            On Windows Server 2008 and Windows Vista, only keys imported as PKCS #7 envelope BLOBs ( <c>NCRYPT_PKCS7_ENVELOPE_BLOB</c>) or
            PKCS #8 private key BLOBs ( <c>NCRYPT_PKCS8_PRIVATE_KEY_BLOB</c>) can be persisted by using the above method. To persist keys
            imported through other BLOB types on these platforms, use the method documented in Key Import and Export.
            </para>
            <para>The following flags are supported by this KSP.</para>
            <list type="table">
            <listheader>
            <term>Term</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>NCRYPT_NO_KEY_VALIDATION</term>
            <term>Do not validate the public portion of the key pair. This flag only applies to public/private key pairs.</term>
            </item>
            <item>
            <term>NCRYPT_DO_NOT_FINALIZE_FLAG</term>
            <term>
            Do not finalize the key. This option is useful when you need to add or modify properties of the key after importing it. You must
            finalize the key before it can be used by passing the key handle to the NCryptFinalizeKey function. This flag is supported for
            the private keys PKCS #7 and PKCS #8 but not public keys.
            </term>
            </item>
            <item>
            <term>NCRYPT_MACHINE_KEY_FLAG</term>
            <term>The key applies to the local computer. If this flag is not present, the key applies to the current user.</term>
            </item>
            <item>
            <term>NCRYPT_OVERWRITE_KEY_FLAG</term>
            <term>
            If a key already exists in the container with the specified name, the existing key will be overwritten. If this flag is not
            specified and a key with the specified name already exists, this function will return NTE_EXISTS.
            </term>
            </item>
            <item>
            <term>NCRYPT_WRITE_KEY_TO_LEGACY_STORE_FLAG</term>
            <term>
            Also save the key in legacy storage. This allows the key to be used with the CryptoAPI. This flag only applies to RSA keys.
            </term>
            </item>
            </list>
            <para>Microsoft Smart Card KSP</para>
            <para>
            The set of key BLOB formats and flags supported by this KSP is identical to the set supported by the Microsoft Software KSP.
            </para>
            <para>
            On Windows Server 2008 and Windows Vista, the Microsoft Smart Card KSP imports all keys into the Microsoft Software KSP. Thus,
            keys cannot be persisted on to a smart card by using this API, and the guidance in the above section applies when trying to
            persist keys within the Microsoft Software KSP.
            </para>
            <para>
            On Windows Server 2008 R2 and Windows 7, the Microsoft Smart Card Key Storage Provider can import a private key to a smart card,
            provided the following conditions are met:
            </para>
            <list type="bullet">
            <item>
            <term>The key container name on the card is valid.</term>
            </item>
            <item>
            <term>Importing private keys is supported by the smart card.</term>
            </item>
            <item>
            <term>The following two registry keys are set to a <c>DWORD</c> of 0x1:</term>
            </item>
            </list>
            <para>
            If the key container name is <c>NULL</c>, the Microsoft Smart Card KSP treats the key as ephemeral and imports it into the
            Microsoft Software KSP.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCryptImportKey(Vanara.PInvoke.NCrypt.NCRYPT_PROV_HANDLE,Vanara.PInvoke.NCrypt.NCRYPT_KEY_HANDLE,System.String,Vanara.PInvoke.NCrypt.NCryptBufferDesc,Vanara.PInvoke.NCrypt.SafeNCRYPT_KEY_HANDLE@,System.IntPtr,System.UInt32,Vanara.PInvoke.NCrypt.NCryptUIFlags)">
            <summary>
            <para>The <c>NCryptImportKey</c> function imports a Cryptography API: Next Generation (CNG) key from a memory BLOB.</para>
            </summary>
            <param name="hProvider">
            <para>The handle of the key storage provider.</para>
            </param>
            <param name="hImportKey">
            <para>
            The handle of the cryptographic key with which the key data within the imported key BLOB was encrypted. This must be a handle to
            the same key that was passed in the hExportKey parameter of the NCryptExportKey function. If this parameter is <c>NULL</c>, the
            key BLOB is assumed to not be encrypted.
            </para>
            </param>
            <param name="pszBlobType">
            <para>
            A null-terminated Unicode string that contains an identifier that specifies the format of the key BLOB. These formats are
            specific to a particular key storage provider. For the BLOB formats supported by Microsoft providers, see Remarks.
            </para>
            </param>
            <param name="pParameterList">
            <para>
            The address of an NCryptBufferDesc structure that points to an array of buffers that contain parameter information for the key.
            </para>
            </param>
            <param name="phKey">
            <para>
            The address of an <c>NCRYPT_KEY_HANDLE</c> variable that receives the handle of the key. When you have finished using this
            handle, release it by passing it to the NCryptFreeObject function.
            </para>
            </param>
            <param name="pbData">
            <para>The address of a buffer that contains the key BLOB to be imported. The cbData parameter contains the size of this buffer.</para>
            </param>
            <param name="cbData">
            <para>The size, in bytes, of the pbData buffer.</para>
            </param>
            <param name="dwFlags">
            <para>
            Flags that modify function behavior. This can be zero or a combination of one or more of the following values. The set of valid
            flags is specific to each key storage provider.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>NCRYPT_SILENT_FLAG</term>
            <term>
            Requests that the key service provider (KSP) not display any user interface. If the provider must display the UI to operate, the
            call fails and the KSP should set the NTE_SILENT_CONTEXT error code as the last error.
            </term>
            </item>
            </list>
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>NTE_BAD_FLAGS</term>
            <term>The dwFlags parameter contains a value that is not valid.</term>
            </item>
            <item>
            <term>NTE_EXISTS</term>
            <term>A key with the specified name already exists and the NCRYPT_OVERWRITE_KEY_FLAG was not specified.</term>
            </item>
            <item>
            <term>NTE_INVALID_HANDLE</term>
            <term>The hProvider parameter is not valid.</term>
            </item>
            <item>
            <term>NTE_INVALID_PARAMETER</term>
            <term>One or more parameters are not valid.</term>
            </item>
            <item>
            <term>NTE_NO_MEMORY</term>
            <term>A memory allocation failure occurred.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            A service must not call this function from its StartService Function. If a service calls this function from its StartService
            function, a deadlock can occur, and the service may stop responding.
            </para>
            <para>The following sections describe behaviors specific to the Microsoft key storage providers:</para>
            <list type="bullet">
            <item>
            <term><c>Microsoft Software KSP</c></term>
            </item>
            <item>
            <term><c>Microsoft Smart Card KSP</c></term>
            </item>
            </list>
            <para>Microsoft Software KSP</para>
            <para>The following constants are supported by the Microsoft software KSP for the pszBlobType parameter.</para>
            <para>
            If a key name is not supplied, the Microsoft Software KSP treats the key as ephemeral and does not store it persistently. For the
            <c>NCRYPT_OPAQUETRANSPORT_BLOB</c> type, the key name is stored within the BLOB when it is exported. For other BLOB formats, the
            name can be supplied in an <c>NCRYPTBUFFER_PKCS_KEY_NAME</c> buffer parameter within the pParameterList parameter.
            </para>
            <para>
            On Windows Server 2008 and Windows Vista, only keys imported as PKCS #7 envelope BLOBs ( <c>NCRYPT_PKCS7_ENVELOPE_BLOB</c>) or
            PKCS #8 private key BLOBs ( <c>NCRYPT_PKCS8_PRIVATE_KEY_BLOB</c>) can be persisted by using the above method. To persist keys
            imported through other BLOB types on these platforms, use the method documented in Key Import and Export.
            </para>
            <para>The following flags are supported by this KSP.</para>
            <list type="table">
            <listheader>
            <term>Term</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>NCRYPT_NO_KEY_VALIDATION</term>
            <term>Do not validate the public portion of the key pair. This flag only applies to public/private key pairs.</term>
            </item>
            <item>
            <term>NCRYPT_DO_NOT_FINALIZE_FLAG</term>
            <term>
            Do not finalize the key. This option is useful when you need to add or modify properties of the key after importing it. You must
            finalize the key before it can be used by passing the key handle to the NCryptFinalizeKey function. This flag is supported for
            the private keys PKCS #7 and PKCS #8 but not public keys.
            </term>
            </item>
            <item>
            <term>NCRYPT_MACHINE_KEY_FLAG</term>
            <term>The key applies to the local computer. If this flag is not present, the key applies to the current user.</term>
            </item>
            <item>
            <term>NCRYPT_OVERWRITE_KEY_FLAG</term>
            <term>
            If a key already exists in the container with the specified name, the existing key will be overwritten. If this flag is not
            specified and a key with the specified name already exists, this function will return NTE_EXISTS.
            </term>
            </item>
            <item>
            <term>NCRYPT_WRITE_KEY_TO_LEGACY_STORE_FLAG</term>
            <term>
            Also save the key in legacy storage. This allows the key to be used with the CryptoAPI. This flag only applies to RSA keys.
            </term>
            </item>
            </list>
            <para>Microsoft Smart Card KSP</para>
            <para>
            The set of key BLOB formats and flags supported by this KSP is identical to the set supported by the Microsoft Software KSP.
            </para>
            <para>
            On Windows Server 2008 and Windows Vista, the Microsoft Smart Card KSP imports all keys into the Microsoft Software KSP. Thus,
            keys cannot be persisted on to a smart card by using this API, and the guidance in the above section applies when trying to
            persist keys within the Microsoft Software KSP.
            </para>
            <para>
            On Windows Server 2008 R2 and Windows 7, the Microsoft Smart Card Key Storage Provider can import a private key to a smart card,
            provided the following conditions are met:
            </para>
            <list type="bullet">
            <item>
            <term>The key container name on the card is valid.</term>
            </item>
            <item>
            <term>Importing private keys is supported by the smart card.</term>
            </item>
            <item>
            <term>The following two registry keys are set to a <c>DWORD</c> of 0x1:</term>
            </item>
            </list>
            <para>
            If the key container name is <c>NULL</c>, the Microsoft Smart Card KSP treats the key as ephemeral and imports it into the
            Microsoft Software KSP.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCryptIsAlgSupported(Vanara.PInvoke.NCrypt.NCRYPT_PROV_HANDLE,System.String,Vanara.PInvoke.NCrypt.NCryptUIFlags)">
            <summary>
            The <c>NCryptIsAlgSupported</c> function determines if a CNG key storage provider supports a specific cryptographic algorithm.
            </summary>
            <param name="hProvider">
            The handle of the key storage provider. This handle is obtained with the NCryptOpenStorageProvider function.
            </param>
            <param name="pszAlgId">
            A pointer to a null-terminated Unicode string that identifies the cryptographic algorithm in question. This can be one of the
            standard CNG Algorithm Identifiers or the identifier for another registered algorithm.
            </param>
            <param name="dwFlags">
            <para>Flags that modify function behavior. This can be zero (0) or the following value.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>NCRYPT_SILENT_FLAG</term>
            <term>
            Requests that the key service provider (KSP) not display any user interface. If the provider must display the UI to operate, the
            call fails and the KSP should set the NTE_SILENT_CONTEXT error code as the last error.
            </term>
            </item>
            </list>
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_SUCCESS</term>
            <term>The provider supports the specified algorithm.</term>
            </item>
            <item>
            <term>NTE_BAD_FLAGS</term>
            <term>The dwFlags parameter contains one or more flags that are not supported.</term>
            </item>
            <item>
            <term>NTE_INVALID_HANDLE</term>
            <term>The handle specified by the hProvider parameter is not valid.</term>
            </item>
            <item>
            <term>NTE_INVALID_PARAMETER</term>
            <term>One or more parameters are not valid.</term>
            </item>
            <item>
            <term>NTE_NOT_SUPPORTED</term>
            <term>The provider does not support the specified algorithm.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            If the provider supports the algorithm, this function returns <c>ERROR_SUCCESS</c>. If the provider does not support the
            algorithm, and no other errors occurred, this function returns <c>NTE_NOT_SUPPORTED</c>.
            </para>
            <para>
            A service must not call this function from its StartService Function. If a service calls this function from its StartService
            function, a deadlock can occur, and the service may stop responding.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCryptIsKeyHandle(Vanara.PInvoke.NCrypt.NCRYPT_KEY_HANDLE)">
            <summary>The <c>NCryptIsKeyHandle</c> function determines if the specified handle is a CNG key handle.</summary>
            <param name="hKey">The handle of the key to test.</param>
            <returns>Returns a nonzero value if the handle is a key handle or zero otherwise.</returns>
            <remarks>
            A service must not call this function from its StartService Function. If a service calls this function from its StartService
            function, a deadlock can occur, and the service may stop responding.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCryptKeyDerivation(Vanara.PInvoke.NCrypt.NCRYPT_KEY_HANDLE,Vanara.PInvoke.NCrypt.NCryptBufferDesc@,System.IntPtr,System.UInt32,System.UInt32@,Vanara.PInvoke.NCrypt.KeyDerivationFlags)">
            <summary>
            The <c>NCryptKeyDerivation</c> function creates a key from another key by using the specified key derivation function. The
            function returns the key in a byte array.
            </summary>
            <param name="hKey">Handle of the key derivation function (KDF) key.</param>
            <param name="pParameterList">
            <para>
            The address of a NCryptBufferDesc structure that contains the KDF parameters. The parameters can be specific to a KDF or generic.
            The following table shows the required and optional parameters for specific KDFs implemented by the Microsoft software key
            storage provider.
            </para>
            <list type="table">
            <listheader>
            <term>KDF</term>
            <term>Parameter</term>
            <term>Required</term>
            </listheader>
            <item>
            <term>SP800-108 HMAC in counter mode</term>
            <term>KDF_LABEL</term>
            <term>yes</term>
            </item>
            <item>
            <term/>
            <term>KDF_CONTEXT</term>
            <term>yes</term>
            </item>
            <item>
            <term/>
            <term>KDF_HASH_ALGORITHM</term>
            <term>yes</term>
            </item>
            <item>
            <term>SP800-56A</term>
            <term>KDF_ALGORITHMID</term>
            <term>yes</term>
            </item>
            <item>
            <term/>
            <term>KDF_PARTYUINFO</term>
            <term>yes</term>
            </item>
            <item>
            <term/>
            <term>KDF_PARTYVINFO</term>
            <term>yes</term>
            </item>
            <item>
            <term/>
            <term>KDF_HASH_ALGORITHM</term>
            <term>yes</term>
            </item>
            <item>
            <term/>
            <term>KDF_SUPPPUBINFO</term>
            <term>no</term>
            </item>
            <item>
            <term/>
            <term>KDF_SUPPPRIVINFO</term>
            <term>no</term>
            </item>
            <item>
            <term>PBKDF2</term>
            <term>KDF_HASH_ALGORITHM</term>
            <term>yes</term>
            </item>
            <item>
            <term/>
            <term>KDF_SALT</term>
            <term>yes</term>
            </item>
            <item>
            <term/>
            <term>KDF_ITERATION_COUNT</term>
            <term>no</term>
            </item>
            <item>
            <term>CAPI_KDF</term>
            <term>KDF_HASH_ALGORITHM</term>
            <term>yes</term>
            </item>
            </list>
            <para>The following generic parameter can be used:</para>
            <list type="bullet">
            <item>
            <term>KDF_GENERIC_PARAMETER</term>
            </item>
            </list>
            <para>Generic parameters map to KDF specific parameters in the following manner:</para>
            <para>SP800-108 HMAC in counter mode:</para>
            <list type="bullet">
            <item>
            <term>KDF_GENERIC_PARAMETER = KDF_LABEL||0x00||KDF_CONTEXT</term>
            </item>
            </list>
            <para>SP800-56A</para>
            <list type="bullet">
            <item>
            <term>
            KDF_GENERIC_PARAMETER = KDF_ALGORITHMID || KDF_PARTYUINFO || KDF_PARTYVINFO {|| KDF_SUPPPUBINFO } {|| KDF_SUPPPRIVINFO }
            </term>
            </item>
            </list>
            <para>PBKDF2</para>
            <list type="bullet">
            <item>
            <term>KDF_GENERIC_PARAMETER = KDF_SALT</term>
            </item>
            <item>
            <term>KDF_ITERATION_COUNT – defaults to 10000</term>
            </item>
            </list>
            <para>CAPI_KDF</para>
            <list type="bullet">
            <item>
            <term>KDF_GENERIC_PARAMETER = Not Used</term>
            </item>
            </list>
            </param>
            <param name="pbDerivedKey">
            Address of a buffer that receives the key. The cbDerivedKey parameter contains the size, in bytes, of the key buffer.
            </param>
            <param name="cbDerivedKey">Size, in bytes, of the buffer pointed to by the pbDerivedKey parameter.</param>
            <param name="pcbResult">
            Pointer to a <c>DWORD</c> that receives the number of bytes copied to the buffer pointed to by the pbDerivedKey parameter.
            </param>
            <param name="dwFlags">
            <para>Flags that modify function behavior. The following value can be used with the Microsoft software key storage provider.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>BCRYPT_CAPI_AES_FLAG</term>
            <term>
            Specifies that the target algorithm is AES and that the key therefore must be double expanded. This flag is only valid with the
            CAPI_KDF algorithm.
            </term>
            </item>
            <item>
            <term>NCRYPT_SILENT_FLAG</term>
            <term>
            Requests that the key service provider (KSP) not display any user interface. If the provider must display the UI to operate, the
            call fails and the KSP should set the NTE_SILENT_CONTEXT error code as the last error.
            </term>
            </item>
            </list>
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>NTE_INVALID_HANDLE</term>
            <term>The hProvider or hKey handles are not valid.</term>
            </item>
            <item>
            <term>NTE_INVALID_PARAMETER</term>
            <term>The pwszDerivedKeyAlg and pParameterList parameters cannot be NULL.</term>
            </item>
            <item>
            <term>NTE_NO_MEMORY</term>
            <term>There was not enough memory to create the key.</term>
            </item>
            <item>
            <term>NTE_NOT_SUPPORTED</term>
            <term>This function is not supported by the key storage provider.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>You can use the following algorithm identifiers in the NCryptCreatePersistedKey function before calling <c>NCryptKeyDerivation</c>:</para>
            <list type="bullet">
            <item>
            <term><c>BCRYPT_CAPI_KDF_ALGORITHM</c></term>
            </item>
            <item>
            <term><c>BCRYPT_SP800108_CTR_HMAC_ALGORITHM</c></term>
            </item>
            <item>
            <term><c>BCRYPT_SP80056A_CONCAT_ALGORITHM</c></term>
            </item>
            <item>
            <term><c>BCRYPT_PBKDF2_ALGORITHM</c></term>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCryptKeyDerivation(Vanara.PInvoke.NCrypt.NCRYPT_KEY_HANDLE,System.IntPtr,System.IntPtr,System.UInt32,System.UInt32@,Vanara.PInvoke.NCrypt.KeyDerivationFlags)">
            <summary>
            The <c>NCryptKeyDerivation</c> function creates a key from another key by using the specified key derivation function. The
            function returns the key in a byte array.
            </summary>
            <param name="hKey">Handle of the key derivation function (KDF) key.</param>
            <param name="pParameterList">
            <para>
            The address of a NCryptBufferDesc structure that contains the KDF parameters. The parameters can be specific to a KDF or generic.
            The following table shows the required and optional parameters for specific KDFs implemented by the Microsoft software key
            storage provider.
            </para>
            <list type="table">
            <listheader>
            <term>KDF</term>
            <term>Parameter</term>
            <term>Required</term>
            </listheader>
            <item>
            <term>SP800-108 HMAC in counter mode</term>
            <term>KDF_LABEL</term>
            <term>yes</term>
            </item>
            <item>
            <term/>
            <term>KDF_CONTEXT</term>
            <term>yes</term>
            </item>
            <item>
            <term/>
            <term>KDF_HASH_ALGORITHM</term>
            <term>yes</term>
            </item>
            <item>
            <term>SP800-56A</term>
            <term>KDF_ALGORITHMID</term>
            <term>yes</term>
            </item>
            <item>
            <term/>
            <term>KDF_PARTYUINFO</term>
            <term>yes</term>
            </item>
            <item>
            <term/>
            <term>KDF_PARTYVINFO</term>
            <term>yes</term>
            </item>
            <item>
            <term/>
            <term>KDF_HASH_ALGORITHM</term>
            <term>yes</term>
            </item>
            <item>
            <term/>
            <term>KDF_SUPPPUBINFO</term>
            <term>no</term>
            </item>
            <item>
            <term/>
            <term>KDF_SUPPPRIVINFO</term>
            <term>no</term>
            </item>
            <item>
            <term>PBKDF2</term>
            <term>KDF_HASH_ALGORITHM</term>
            <term>yes</term>
            </item>
            <item>
            <term/>
            <term>KDF_SALT</term>
            <term>yes</term>
            </item>
            <item>
            <term/>
            <term>KDF_ITERATION_COUNT</term>
            <term>no</term>
            </item>
            <item>
            <term>CAPI_KDF</term>
            <term>KDF_HASH_ALGORITHM</term>
            <term>yes</term>
            </item>
            </list>
            <para>The following generic parameter can be used:</para>
            <list type="bullet">
            <item>
            <term>KDF_GENERIC_PARAMETER</term>
            </item>
            </list>
            <para>Generic parameters map to KDF specific parameters in the following manner:</para>
            <para>SP800-108 HMAC in counter mode:</para>
            <list type="bullet">
            <item>
            <term>KDF_GENERIC_PARAMETER = KDF_LABEL||0x00||KDF_CONTEXT</term>
            </item>
            </list>
            <para>SP800-56A</para>
            <list type="bullet">
            <item>
            <term>
            KDF_GENERIC_PARAMETER = KDF_ALGORITHMID || KDF_PARTYUINFO || KDF_PARTYVINFO {|| KDF_SUPPPUBINFO } {|| KDF_SUPPPRIVINFO }
            </term>
            </item>
            </list>
            <para>PBKDF2</para>
            <list type="bullet">
            <item>
            <term>KDF_GENERIC_PARAMETER = KDF_SALT</term>
            </item>
            <item>
            <term>KDF_ITERATION_COUNT – defaults to 10000</term>
            </item>
            </list>
            <para>CAPI_KDF</para>
            <list type="bullet">
            <item>
            <term>KDF_GENERIC_PARAMETER = Not Used</term>
            </item>
            </list>
            </param>
            <param name="pbDerivedKey">
            Address of a buffer that receives the key. The cbDerivedKey parameter contains the size, in bytes, of the key buffer.
            </param>
            <param name="cbDerivedKey">Size, in bytes, of the buffer pointed to by the pbDerivedKey parameter.</param>
            <param name="pcbResult">
            Pointer to a <c>DWORD</c> that receives the number of bytes copied to the buffer pointed to by the pbDerivedKey parameter.
            </param>
            <param name="dwFlags">
            <para>Flags that modify function behavior. The following value can be used with the Microsoft software key storage provider.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>BCRYPT_CAPI_AES_FLAG</term>
            <term>
            Specifies that the target algorithm is AES and that the key therefore must be double expanded. This flag is only valid with the
            CAPI_KDF algorithm.
            </term>
            </item>
            <item>
            <term>NCRYPT_SILENT_FLAG</term>
            <term>
            Requests that the key service provider (KSP) not display any user interface. If the provider must display the UI to operate, the
            call fails and the KSP should set the NTE_SILENT_CONTEXT error code as the last error.
            </term>
            </item>
            </list>
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>NTE_INVALID_HANDLE</term>
            <term>The hProvider or hKey handles are not valid.</term>
            </item>
            <item>
            <term>NTE_INVALID_PARAMETER</term>
            <term>The pwszDerivedKeyAlg and pParameterList parameters cannot be NULL.</term>
            </item>
            <item>
            <term>NTE_NO_MEMORY</term>
            <term>There was not enough memory to create the key.</term>
            </item>
            <item>
            <term>NTE_NOT_SUPPORTED</term>
            <term>This function is not supported by the key storage provider.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>You can use the following algorithm identifiers in the NCryptCreatePersistedKey function before calling <c>NCryptKeyDerivation</c>:</para>
            <list type="bullet">
            <item>
            <term><c>BCRYPT_CAPI_KDF_ALGORITHM</c></term>
            </item>
            <item>
            <term><c>BCRYPT_SP800108_CTR_HMAC_ALGORITHM</c></term>
            </item>
            <item>
            <term><c>BCRYPT_SP80056A_CONCAT_ALGORITHM</c></term>
            </item>
            <item>
            <term><c>BCRYPT_PBKDF2_ALGORITHM</c></term>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCryptNotifyChangeKey(Vanara.PInvoke.NCrypt.NCRYPT_PROV_HANDLE,System.IntPtr@,Vanara.PInvoke.NCrypt.NotifyFlags)">
            <summary>
            <para>The <c>NCryptNotifyChangeKey</c> function creates or removes a key change notification.</para>
            <para>
            The handle provided by this function is the same handle that is returned by the FindFirstChangeNotification function. You use the
            wait functions to wait for the notification handle to be signaled.
            </para>
            </summary>
            <param name="hProvider">
            The handle of the key storage provider. This handle is obtained by using the NCryptOpenStorageProvider function.
            </param>
            <param name="phEvent">
            The address of a <c>HANDLE</c> variable that either receives or contains the key change notification event handle. This is the
            same handle that is returned by the FindFirstChangeNotification function. For more information, see the dwFlags parameter description.
            </param>
            <param name="dwFlags">
            <para>
            A set of flags that modify the behavior of this function. This parameter contains a combination of one or more of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>NCRYPT_REGISTER_NOTIFY_FLAG 0x00000001</term>
            <term>Create a new change notification. The phEvent parameter will receive the key change notification handle.</term>
            </item>
            <item>
            <term>NCRYPT_UNREGISTER_NOTIFY_FLAG 0x00000002</term>
            <term>
            Remove an existing change notification. The phEvent parameter must contain a valid key change notification handle. This handle is
            no longer valid after this function is called with this flag and the INVALID_HANDLE_VALUE value is placed in this handle.
            </term>
            </item>
            <item>
            <term>NCRYPT_MACHINE_KEY_FLAG 0x00000020</term>
            <term>
            Receive change notifications for keys in the machine key store. If this flag is not specified, the change notification events
            will only occur for keys in the calling user's key store. This flag is only valid when combined with the
            NCRYPT_REGISTER_NOTIFY_FLAG flag.
            </term>
            </item>
            </list>
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>NTE_BAD_FLAGS</term>
            <term>The dwFlags parameter contains a value that is not valid.</term>
            </item>
            <item>
            <term>NTE_INVALID_HANDLE</term>
            <term>The hProvider parameter is not valid.</term>
            </item>
            <item>
            <term>NTE_INVALID_PARAMETER</term>
            <term>One or more parameters are not valid.</term>
            </item>
            </list>
            </returns>
            <remarks>
            A service must not call this function from its StartService Function. If a service calls this function from its StartService
            function, a deadlock can occur, and the service may stop responding.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCryptOpenKey(Vanara.PInvoke.NCrypt.NCRYPT_PROV_HANDLE,Vanara.PInvoke.NCrypt.SafeNCRYPT_KEY_HANDLE@,System.String,Vanara.PInvoke.Crypt32.PrivateKeyType,Vanara.PInvoke.NCrypt.OpenKeyFlags)">
            <summary>
            <para>The <c>NCryptOpenKey</c> function opens a key that exists in the specified CNG key storage provider.</para>
            </summary>
            <param name="hProvider">
            <para>The handle of the key storage provider to open the key from.</para>
            </param>
            <param name="phKey">
            <para>
            A pointer to a <c>NCRYPT_KEY_HANDLE</c> variable that receives the key handle. When you have finished using this handle, release
            it by passing it to the NCryptFreeObject function.
            </para>
            </param>
            <param name="pszKeyName">
            <para>A pointer to a null-terminated Unicode string that contains the name of the key to retrieve.</para>
            </param>
            <param name="dwLegacyKeySpec">
            <para>A legacy identifier that specifies the type of key. This can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>AT_KEYEXCHANGE</term>
            <term>The key is a key exchange key.</term>
            </item>
            <item>
            <term>AT_SIGNATURE</term>
            <term>The key is a signature key.</term>
            </item>
            <item>
            <term>0</term>
            <term>The key is none of the above types.</term>
            </item>
            </list>
            </param>
            <param name="dwFlags">
            <para>Flags that modify function behavior. This can be zero or a combination of one or more of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>NCRYPT_MACHINE_KEY_FLAG</term>
            <term>Open the key for the local computer. If this flag is not present, the current user key is opened.</term>
            </item>
            <item>
            <term>NCRYPT_SILENT_FLAG</term>
            <term>
            Requests that the key service provider (KSP) not display any user interface. If the provider must display the UI to operate, the
            call fails and the KSP should set the NTE_SILENT_CONTEXT error code as the last error.
            </term>
            </item>
            </list>
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>NTE_BAD_FLAGS</term>
            <term>The dwFlags parameter contains a value that is not valid.</term>
            </item>
            <item>
            <term>NTE_BAD_KEYSET</term>
            <term>The specified key was not found.</term>
            </item>
            <item>
            <term>NTE_INVALID_HANDLE</term>
            <term>The hProvider parameter is not valid.</term>
            </item>
            <item>
            <term>NTE_INVALID_PARAMETER</term>
            <term>One or more parameters are not valid.</term>
            </item>
            <item>
            <term>NTE_NO_MEMORY</term>
            <term>A memory allocation failure occurred.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            A service must not call this function from its StartService Function. If a service calls this function from its StartService
            function, a deadlock can occur, and the service may stop responding.
            </para>
            <para>
            For performance reasons, Microsoft software-based KSPs cache private key material in the Local Security Authority (LSA) for as
            long as a handle to the key is open. The LSA is a privilidged system process. Therefore, other users cannot access this cached
            copy of the key unless the user possesses administrator privileges on the system. This behavior cannot be altered through configuration.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCryptOpenStorageProvider(Vanara.PInvoke.NCrypt.SafeNCRYPT_PROV_HANDLE@,System.String,System.UInt32)">
            <summary>
            <para>The <c>NCryptOpenStorageProvider</c> function loads and initializes a CNG key storage provider.</para>
            </summary>
            <param name="phProvider">
            <para>
            A pointer to a <c>NCRYPT_PROV_HANDLE</c> variable that receives the provider handle. When you have finished using this handle,
            release it by passing it to the NCryptFreeObject function.
            </para>
            </param>
            <param name="pszProviderName">
            <para>
            A pointer to a null-terminated Unicode string that identifies the key storage provider to load. This is the registered alias of
            the key storage provider. This parameter is optional and can be <c>NULL</c>. If this parameter is <c>NULL</c>, the default key
            storage provider is loaded. The following values identify the built-in key storage providers.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>MS_KEY_STORAGE_PROVIDER L"Microsoft Software Key Storage Provider"</term>
            <term>Identifies the software key storage provider that is provided by Microsoft.</term>
            </item>
            <item>
            <term>MS_SMART_CARD_KEY_STORAGE_PROVIDER L"Microsoft Smart Card Key Storage Provider"</term>
            <term>Identifies the smart card key storage provider that is provided by Microsoft.</term>
            </item>
            </list>
            </param>
            <param name="dwFlags">
            <para>Flags that modify the behavior of the function. No flags are defined for this function.</para>
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>NTE_BAD_FLAGS</term>
            <term>The dwFlags parameter contains one or more flags that are not supported.</term>
            </item>
            <item>
            <term>NTE_INVALID_PARAMETER</term>
            <term>One or more parameters are not valid.</term>
            </item>
            <item>
            <term>NTE_NO_MEMORY</term>
            <term>A memory allocation failure occurred.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            In the case that an error condition is returned, the provider will have been unloaded from memory. Functions within the provider
            must not be called after a failure error is returned.
            </para>
            <para>
            A service must not call this function from its StartService Function. If a service calls this function from its StartService
            function, a deadlock can occur, and the service may stop responding.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCryptSecretAgreement(Vanara.PInvoke.NCrypt.NCRYPT_KEY_HANDLE,Vanara.PInvoke.NCrypt.NCRYPT_KEY_HANDLE,Vanara.PInvoke.NCrypt.SafeNCRYPT_SECRET_HANDLE@,Vanara.PInvoke.NCrypt.NCryptUIFlags)">
            <summary>
            <para>The <c>NCryptSecretAgreement</c> function creates a secret agreement value from a private and a public key.</para>
            </summary>
            <param name="hPrivKey">
            <para>
            The handle of the private key to use to create the secret agreement value. This key and the hPubKey key must come from the same
            key storage provider.
            </para>
            </param>
            <param name="hPubKey">
            <para>
            The handle of the public key to use to create the secret agreement value. This key and the hPrivKey key must come from the same
            key storage provider.
            </para>
            </param>
            <param name="phAgreedSecret">
            <para>
            A pointer to an <c>NCRYPT_SECRET_HANDLE</c> variable that receives a handle that represents the secret agreement value. When this
            handle is no longer needed, release it by passing it to the NCryptFreeObject function.
            </para>
            </param>
            <param name="dwFlags">
            <para>
            Flags that modify function behavior. This can be zero or a combination of one or more of the following values. The set of valid
            flags is specific to each key storage provider. The following flag applies to all providers.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>NCRYPT_SILENT_FLAG</term>
            <term>
            Requests that the key service provider (KSP) not display any user interface. If the provider must display the UI to operate, the
            call fails and the KSP should set the NTE_SILENT_CONTEXT error code as the last error.
            </term>
            </item>
            </list>
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>NTE_INVALID_HANDLE</term>
            <term>The hPrivKey or the hPubKey parameter is not valid.</term>
            </item>
            <item>
            <term>NTE_INVALID_PARAMETER</term>
            <term>One or more parameters are not valid.</term>
            </item>
            <item>
            <term>NTE_NO_MEMORY</term>
            <term>A memory allocation failure occurred.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            A service must not call this function from its StartService Function. If a service calls this function from its StartService
            function, a deadlock can occur, and the service may stop responding.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCryptSetProperty(Vanara.PInvoke.NCrypt.NCRYPT_HANDLE,System.String,System.IntPtr,System.UInt32,Vanara.PInvoke.NCrypt.SetPropFlags)">
            <summary>
            <para>The <c>NCryptSetProperty</c> function sets the value for a named property for a CNG key storage object.</para>
            </summary>
            <param name="hObject">
            <para>The handle of the key storage object to set the property for.</para>
            </param>
            <param name="pszProperty">
            <para>
            A pointer to a null-terminated Unicode string that contains the name of the property to set. This can be one of the predefined
            Key Storage Property Identifiers or a custom property identifier.
            </para>
            </param>
            <param name="pbInput">
            <para>The address of a buffer that contains the new property value. The cbInput parameter contains the size of this buffer.</para>
            </param>
            <param name="cbInput">
            <para>The size, in bytes, of the pbInput buffer.</para>
            </param>
            <param name="dwFlags">
            <para>Flags that modify function behavior. This can be zero or a combination of one or more of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>NCRYPT_PERSIST_FLAG</term>
            <term>
            The property should be stored in key storage along with the key material. This flag can only be used when the hObject parameter
            is the handle of a persisted key. The maximum size of the data for any persisted property is NCRYPT_MAX_PROPERTY_DATA bytes.
            </term>
            </item>
            <item>
            <term>NCRYPT_PERSIST_ONLY_FLAG</term>
            <term>
            Do not overwrite any built-in values for this property and only set the user-persisted properties of the key. The maximum size of
            the data for any persisted property is NCRYPT_MAX_PROPERTY_DATA bytes. This flag cannot be used with the
            NCRYPT_SECURITY_DESCR_PROPERTY property.
            </term>
            </item>
            <item>
            <term>NCRYPT_SILENT_FLAG</term>
            <term>
            Requests that the key service provider (KSP) not display any user interface. If the provider must display the UI to operate, the
            call fails and the KSP should set the NTE_SILENT_CONTEXT error code as the last error.
            </term>
            </item>
            </list>
            <para>
            For the <c>NCRYPT_SECURITY_DESCR_PROPERTY</c> property, this parameter must also contain one of the following values, which
            identifies the part of the security descriptor to set.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>OWNER_SECURITY_INFORMATION</term>
            <term>
            Set the security identifier (SID) of the object's owner. Use the SetSecurityDescriptorOwner function to set the owner SID in the
            SECURITY_DESCRIPTOR structure.
            </term>
            </item>
            <item>
            <term>GROUP_SECURITY_INFORMATION</term>
            <term>
            Set the SID of the object's primary group. Use the SetSecurityDescriptorGroup function to set the group SID in the
            SECURITY_DESCRIPTOR structure.
            </term>
            </item>
            <item>
            <term>DACL_SECURITY_INFORMATION</term>
            <term>
            Set the discretionary access control list (DACL). Use the SetSecurityDescriptorSacl function to set the DACL in the
            SECURITY_DESCRIPTOR structure.
            </term>
            </item>
            <item>
            <term>SACL_SECURITY_INFORMATION</term>
            <term>
            Set the system access control list (SACL). Use the SetSecurityDescriptorDacl function to set the SACL in the SECURITY_DESCRIPTOR structure.
            </term>
            </item>
            <item>
            <term>LABEL_SECURITY_INFORMATION</term>
            <term>
            Set the mandatory label access control entry in the SACL of the object. Use the SetSecurityDescriptorDacl function to set the
            SACL in the SECURITY_DESCRIPTOR structure. For more information about the mandatory label access control entry, see Windows
            Integrity Mechanism Design.
            </term>
            </item>
            </list>
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>NTE_BAD_FLAGS</term>
            <term>The dwFlags parameter contains a value that is not valid.</term>
            </item>
            <item>
            <term>NTE_INVALID_HANDLE</term>
            <term>The hObject parameter is not valid.</term>
            </item>
            <item>
            <term>NTE_INVALID_PARAMETER</term>
            <term>One or more parameters are not valid.</term>
            </item>
            <item>
            <term>NTE_NO_MEMORY</term>
            <term>A memory allocation failure occurred.</term>
            </item>
            <item>
            <term>NTE_NOT_SUPPORTED</term>
            <term>The specified property is not supported for the object.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            A service must not call this function from its StartService Function. If a service calls this function from its StartService
            function, a deadlock can occur, and the service may stop responding.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCryptSetProperty(Vanara.PInvoke.NCrypt.NCRYPT_HANDLE,System.String,System.Byte[],System.UInt32,Vanara.PInvoke.NCrypt.SetPropFlags)">
            <summary>
            <para>The <c>NCryptSetProperty</c> function sets the value for a named property for a CNG key storage object.</para>
            </summary>
            <param name="hObject">
            <para>The handle of the key storage object to set the property for.</para>
            </param>
            <param name="pszProperty">
            <para>
            A pointer to a null-terminated Unicode string that contains the name of the property to set. This can be one of the predefined
            Key Storage Property Identifiers or a custom property identifier.
            </para>
            </param>
            <param name="pbInput">
            <para>The address of a buffer that contains the new property value. The cbInput parameter contains the size of this buffer.</para>
            </param>
            <param name="cbInput">
            <para>The size, in bytes, of the pbInput buffer.</para>
            </param>
            <param name="dwFlags">
            <para>Flags that modify function behavior. This can be zero or a combination of one or more of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>NCRYPT_PERSIST_FLAG</term>
            <term>
            The property should be stored in key storage along with the key material. This flag can only be used when the hObject parameter
            is the handle of a persisted key. The maximum size of the data for any persisted property is NCRYPT_MAX_PROPERTY_DATA bytes.
            </term>
            </item>
            <item>
            <term>NCRYPT_PERSIST_ONLY_FLAG</term>
            <term>
            Do not overwrite any built-in values for this property and only set the user-persisted properties of the key. The maximum size of
            the data for any persisted property is NCRYPT_MAX_PROPERTY_DATA bytes. This flag cannot be used with the
            NCRYPT_SECURITY_DESCR_PROPERTY property.
            </term>
            </item>
            <item>
            <term>NCRYPT_SILENT_FLAG</term>
            <term>
            Requests that the key service provider (KSP) not display any user interface. If the provider must display the UI to operate, the
            call fails and the KSP should set the NTE_SILENT_CONTEXT error code as the last error.
            </term>
            </item>
            </list>
            <para>
            For the <c>NCRYPT_SECURITY_DESCR_PROPERTY</c> property, this parameter must also contain one of the following values, which
            identifies the part of the security descriptor to set.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>OWNER_SECURITY_INFORMATION</term>
            <term>
            Set the security identifier (SID) of the object's owner. Use the SetSecurityDescriptorOwner function to set the owner SID in the
            SECURITY_DESCRIPTOR structure.
            </term>
            </item>
            <item>
            <term>GROUP_SECURITY_INFORMATION</term>
            <term>
            Set the SID of the object's primary group. Use the SetSecurityDescriptorGroup function to set the group SID in the
            SECURITY_DESCRIPTOR structure.
            </term>
            </item>
            <item>
            <term>DACL_SECURITY_INFORMATION</term>
            <term>
            Set the discretionary access control list (DACL). Use the SetSecurityDescriptorSacl function to set the DACL in the
            SECURITY_DESCRIPTOR structure.
            </term>
            </item>
            <item>
            <term>SACL_SECURITY_INFORMATION</term>
            <term>
            Set the system access control list (SACL). Use the SetSecurityDescriptorDacl function to set the SACL in the SECURITY_DESCRIPTOR structure.
            </term>
            </item>
            <item>
            <term>LABEL_SECURITY_INFORMATION</term>
            <term>
            Set the mandatory label access control entry in the SACL of the object. Use the SetSecurityDescriptorDacl function to set the
            SACL in the SECURITY_DESCRIPTOR structure. For more information about the mandatory label access control entry, see Windows
            Integrity Mechanism Design.
            </term>
            </item>
            </list>
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>NTE_BAD_FLAGS</term>
            <term>The dwFlags parameter contains a value that is not valid.</term>
            </item>
            <item>
            <term>NTE_INVALID_HANDLE</term>
            <term>The hObject parameter is not valid.</term>
            </item>
            <item>
            <term>NTE_INVALID_PARAMETER</term>
            <term>One or more parameters are not valid.</term>
            </item>
            <item>
            <term>NTE_NO_MEMORY</term>
            <term>A memory allocation failure occurred.</term>
            </item>
            <item>
            <term>NTE_NOT_SUPPORTED</term>
            <term>The specified property is not supported for the object.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            A service must not call this function from its StartService Function. If a service calls this function from its StartService
            function, a deadlock can occur, and the service may stop responding.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCryptSignHash(Vanara.PInvoke.NCrypt.NCRYPT_KEY_HANDLE,System.IntPtr,System.IntPtr,System.UInt32,System.IntPtr,System.UInt32,System.UInt32@,Vanara.PInvoke.BCrypt.EncryptFlags)">
            <summary>The <c>NCryptSignHash</c> function creates a signature of a hash value.</summary>
            <param name="hKey">The handle of the key to use to sign the hash.</param>
            <param name="pPaddingInfo">
            A pointer to a structure that contains padding information. The actual type of structure this parameter points to depends on the
            value of the dwFlags parameter. This parameter is only used with asymmetric keys and must be <c>NULL</c> otherwise.
            </param>
            <param name="pbHashValue">
            A pointer to a buffer that contains the hash value to sign. The cbInput parameter contains the size of this buffer.
            </param>
            <param name="cbHashValue">The number of bytes in the pbHashValue buffer to sign.</param>
            <param name="pbSignature">
            <para>
            The address of a buffer to receive the signature produced by this function. The cbSignature parameter contains the size of this buffer.
            </para>
            <para>
            If this parameter is <c>NULL</c>, this function will calculate the size required for the signature and return the size in the
            location pointed to by the pcbResult parameter.
            </para>
            </param>
            <param name="cbSignature">
            The size, in bytes, of the pbSignature buffer. This parameter is ignored if the pbSignature parameter is <c>NULL</c>.
            </param>
            <param name="pcbResult">
            <para>A pointer to a <c>DWORD</c> variable that receives the number of bytes copied to the pbSignature buffer.</para>
            <para>If pbSignature is <c>NULL</c>, this receives the size, in bytes, required for the signature.</para>
            </param>
            <param name="dwFlags">
            <para>Flags that modify function behavior. The allowed set of flags depends on the type of key specified by the hKey parameter.</para>
            <para>If the key is a symmetric key, this parameter is not used and should be set to zero.</para>
            <para>If the key is an asymmetric key, this can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>BCRYPT_PAD_PKCS1</term>
            <term>Use the PKCS1 padding scheme. The pPaddingInfo parameter is a pointer to a BCRYPT_PKCS1_PADDING_INFO structure.</term>
            </item>
            <item>
            <term>BCRYPT_PAD_PSS</term>
            <term>
            Use the Probabilistic Signature Scheme (PSS) padding scheme. The pPaddingInfo parameter is a pointer to a BCRYPT_PSS_PADDING_INFO structure.
            </term>
            </item>
            <item>
            <term>NCRYPT_SILENT_FLAG</term>
            <term>
            Requests that the key service provider (KSP) not display any user interface. If the provider must display the UI to operate, the
            call fails and the KSP should set the NTE_SILENT_CONTEXT error code as the last error.
            </term>
            </item>
            </list>
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>NTE_BAD_ALGID</term>
            <term>The key represented by the hKey parameter does not support signing.</term>
            </item>
            <item>
            <term>NTE_BAD_FLAGS</term>
            <term>The dwFlags parameter contains a value that is not valid.</term>
            </item>
            <item>
            <term>NTE_INVALID_HANDLE</term>
            <term>The hKey parameter is not valid.</term>
            </item>
            <item>
            <term>NTE_INVALID_PARAMETER</term>
            <term>One or more parameters are not valid.</term>
            </item>
            <item>
            <term>NTE_NO_MEMORY</term>
            <term>A memory allocation failure occurred.</term>
            </item>
            </list>
            </returns>
            <remarks>
            A service must not call this function from its StartService Function. If a service calls this function from its StartService
            function, a deadlock can occur, and the service may stop responding.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCryptTranslateHandle(Vanara.PInvoke.NCrypt.SafeNCRYPT_PROV_HANDLE@,Vanara.PInvoke.NCrypt.SafeNCRYPT_KEY_HANDLE@,Vanara.PInvoke.Crypt32.HCRYPTPROV,Vanara.PInvoke.Crypt32.HCRYPTKEY,Vanara.PInvoke.Crypt32.PrivateKeyType,System.UInt32)">
            <summary>The <c>NCryptTranslateHandle</c> function translates a CryptoAPI handle into a CNG key handle.</summary>
            <param name="phProvider">
            A pointer to an <c>NCRYPT_PROV_HANDLE</c> variable that receives the handle of the CNG key storage provider that owns the CNG key
            placed in the phKey parameter. This parameter can be <c>NULL</c> if this handle is not needed.
            </param>
            <param name="phKey">A pointer to a <c>NCRYPT_KEY_HANDLE</c> variable that receives the CNG key handle.</param>
            <param name="hLegacyProv">
            The handle of the CryptoAPI provider that contains the key to translate. This function will translate the CryptoAPI key that is
            in the container in this provider.
            </param>
            <param name="hLegacyKey">
            <para>
            The handle of a CryptoAPI key to use to help determine the key specification for the returned key. This parameter is ignored if
            the dwLegacyKeySpec parameter contains a value other than zero.
            </para>
            <para>
            If hLegacyKey is <c>NULL</c> and dwLegacyKeySpec is zero, this function will attempt to determine the key specification from the
            hLegacyProv handle.
            </para>
            </param>
            <param name="dwLegacyKeySpec">
            <para>Specifies the key specification for the key. This can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>0</term>
            <term>The key is none of the types below.</term>
            </item>
            <item>
            <term>AT_KEYEXCHANGE 1</term>
            <term>The key is a key exchange key.</term>
            </item>
            <item>
            <term>AT_SIGNATURE 2</term>
            <term>The key is a signature key.</term>
            </item>
            </list>
            <para>
            If hLegacyKey is <c>NULL</c> and dwLegacyKeySpec is zero, this function will attempt to determine the key specification from the
            hLegacyProv handle.
            </para>
            </param>
            <param name="dwFlags">A set of flags that modify the behavior of this function. No flags are defined for this function.</param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>NTE_BAD_FLAGS</term>
            <term>The dwFlags parameter contains a value that is not valid.</term>
            </item>
            <item>
            <term>NTE_INVALID_PARAMETER</term>
            <term>One or more parameters are not valid.</term>
            </item>
            <item>
            <term>NTE_NO_MEMORY</term>
            <term>A memory allocation failure occurred.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            This is a helper function intended to help applications and system components that currently use the CryptoAPI to make a graceful
            transition to using CNG.
            </para>
            <para>
            This function will only be successful if a CNG key storage provider is registered with a name or alias that is identical to the
            name of the cryptographic service provider (CSP) referred to by the hLegacyProv parameter.
            </para>
            <para>This function will perform the following steps to translate the CSP handle into a CNG key handle:</para>
            <list type="number">
            <item>
            <term>Obtain the name of the CSP from the hLegacyProv handle.</term>
            </item>
            <item>
            <term>Open the CNG provider whose name or alias is identical to the CSP name.</term>
            </item>
            <item>
            <term>Obtain the name of the current key container in the CSP.</term>
            </item>
            <item>
            <term>Obtain the CryptoAPI key, translate it into a CNG key, and return it in the phKey parameter.</term>
            </item>
            </list>
            <para>
            A service must not call this function from its StartService Function. If a service calls this function from its StartService
            function, a deadlock can occur, and the service may stop responding.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCryptVerifyClaim(Vanara.PInvoke.NCrypt.NCRYPT_KEY_HANDLE,Vanara.PInvoke.NCrypt.NCRYPT_KEY_HANDLE,System.UInt32,Vanara.PInvoke.NCrypt.NCryptBufferDesc[],System.IntPtr,System.UInt32,Vanara.PInvoke.NCrypt.NCryptBufferDesc@,System.UInt32)">
            <summary>
            <para>
            [Some information relates to pre-released product which may be substantially modified before it's commercially released.
            Microsoft makes no warranties, express or implied, with respect to the information provided here.]
            </para>
            <para>Verifies a key attestation claim.</para>
            </summary>
            <param name="hSubjectKey">The subject key handle for the claim.</param>
            <param name="hAuthorityKey">
            The authority key handle to use when verifying the claim. This parameter is optional because the authority key is self-contained
            for certain claim types.
            </param>
            <param name="dwClaimType">The type of claim.</param>
            <param name="pParameterList">An optional parameter list.</param>
            <param name="pbClaimBlob">The input claim blob.</param>
            <param name="cbClaimBlob"/>
            <param name="pOutput">The output blob.</param>
            <param name="dwFlags">As of Windows 10, no flags are defined. This parameter should be set to 0.</param>
            <returns>Returns a status code that indicates the success or failure of the function.</returns>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCryptVerifySignature(Vanara.PInvoke.NCrypt.NCRYPT_KEY_HANDLE,System.IntPtr,System.IntPtr,System.UInt32,System.IntPtr,System.UInt32,Vanara.PInvoke.NCrypt.NCryptDecryptFlag)">
            <summary>The <c>NCryptVerifySignature</c> function verifies that the specified signature matches the specified hash.</summary>
            <param name="hKey">
            The handle of the key to use to decrypt the signature. This must be an identical key or the public key portion of the key pair
            used to sign the data with the NCryptSignHash function.
            </param>
            <param name="pPaddingInfo">
            A pointer to a structure that contains padding information. The actual type of structure this parameter points to depends on the
            value of the dwFlags parameter. This parameter is only used with asymmetric keys and must be <c>NULL</c> otherwise.
            </param>
            <param name="pbHashValue">
            The address of a buffer that contains the hash of the data. The cbHash parameter contains the size of this buffer.
            </param>
            <param name="cbHashValue">The size, in bytes, of the pbHash buffer.</param>
            <param name="pbSignature">
            The address of a buffer that contains the signed hash of the data. The NCryptSignHash function is used to create the signature.
            The cbSignature parameter contains the size of this buffer.
            </param>
            <param name="cbSignature">
            The size, in bytes, of the pbSignature buffer. The NCryptSignHash function is used to create the signature.
            </param>
            <param name="dwFlags">
            <para>Flags that modify function behavior. The allowed set of flags depends on the type of key specified by the hKey parameter.</para>
            <para>If the key is a symmetric key, this parameter is not used and should be zero.</para>
            <para>If the key is an asymmetric key, this can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>NCRYPT_PAD_PKCS1_FLAG</term>
            <term>
            The PKCS1 padding scheme was used when the signature was created. The pPaddingInfo parameter is a pointer to a
            BCRYPT_PKCS1_PADDING_INFO structure.
            </term>
            </item>
            <item>
            <term>NCRYPT_PAD_PSS_FLAG</term>
            <term>
            The Probabilistic Signature Scheme (PSS) padding scheme was used when the signature was created. The pPaddingInfo parameter is a
            pointer to a BCRYPT_PSS_PADDING_INFO structure.
            </term>
            </item>
            <item>
            <term>NCRYPT_SILENT_FLAG</term>
            <term>
            Requests that the key service provider (KSP) not display any user interface. If the provider must display the UI to operate, the
            call fails and the KSP should set the NTE_SILENT_CONTEXT error code as the last error.
            </term>
            </item>
            </list>
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>NTE_BAD_SIGNATURE</term>
            <term>The signature was not verified.</term>
            </item>
            <item>
            <term>NTE_INVALID_HANDLE</term>
            <term>The hKey parameter is not valid.</term>
            </item>
            <item>
            <term>NTE_NO_MEMORY</term>
            <term>A memory allocation failure occurred.</term>
            </item>
            <item>
            <term>NTE_NOT_SUPPORTED</term>
            <term>The algorithm provider used to create the key handle specified by the hKey parameter is not a signing algorithm.</term>
            </item>
            </list>
            </returns>
            <remarks>
            A service must not call this function from its StartService Function. If a service calls this function from its StartService
            function, a deadlock can occur, and the service may stop responding.
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.NCrypt.NCRYPT_ALLOC_PARA">
            <summary>
            <para>
            The <c>NCRYPT_ALLOC_PARA</c> structure enables you to specify custom functions that can be used to allocate and free data. This
            structure is used in the following functions:
            </para>
            <list type="bullet">
            <item>
            <term>NCryptGetProtectionDescriptorInfo</term>
            </item>
            <item>
            <term>NCryptProtectSecret</term>
            </item>
            <item>
            <term>NCryptUnprotectSecret</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.NCRYPT_ALLOC_PARA.cbSize">
            <summary>The size, in bytes, of this structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.NCRYPT_ALLOC_PARA.pfnAlloc">
            <summary>Address of a custom function that can allocate memory.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.NCRYPT_ALLOC_PARA.pfnFree">
            <summary>Address of a function that can free memory allocated by the function specified by the <c>pfnAlloc</c> member.</summary>
        </member>
        <member name="T:Vanara.PInvoke.NCrypt.NCRYPT_HASH_HANDLE">
            <summary>Provides a handle to a hash handle.</summary>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCRYPT_HASH_HANDLE.#ctor(System.IntPtr)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.NCrypt.NCRYPT_HASH_HANDLE"/> struct.</summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
        </member>
        <member name="P:Vanara.PInvoke.NCrypt.NCRYPT_HASH_HANDLE.NULL">
            <summary>Returns an invalid handle by instantiating a <see cref="T:Vanara.PInvoke.NCrypt.NCRYPT_HASH_HANDLE"/> object with <see cref="F:System.IntPtr.Zero"/>.</summary>
        </member>
        <member name="P:Vanara.PInvoke.NCrypt.NCRYPT_HASH_HANDLE.IsNull">
            <summary>Gets a value indicating whether this instance is a null handle.</summary>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCRYPT_HASH_HANDLE.op_Explicit(Vanara.PInvoke.NCrypt.NCRYPT_HASH_HANDLE)~System.IntPtr">
            <summary>Performs an explicit conversion from <see cref="T:Vanara.PInvoke.NCrypt.NCRYPT_HASH_HANDLE"/> to <see cref="T:System.IntPtr"/>.</summary>
            <param name="h">The handle.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCRYPT_HASH_HANDLE.op_Implicit(System.IntPtr)~Vanara.PInvoke.NCrypt.NCRYPT_HASH_HANDLE">
            <summary>Performs an implicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:Vanara.PInvoke.NCrypt.NCRYPT_HASH_HANDLE"/>.</summary>
            <param name="h">The pointer to a handle.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCRYPT_HASH_HANDLE.op_Inequality(Vanara.PInvoke.NCrypt.NCRYPT_HASH_HANDLE,Vanara.PInvoke.NCrypt.NCRYPT_HASH_HANDLE)">
            <summary>Implements the operator !=.</summary>
            <param name="h1">The first handle.</param>
            <param name="h2">The second handle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCRYPT_HASH_HANDLE.op_Equality(Vanara.PInvoke.NCrypt.NCRYPT_HASH_HANDLE,Vanara.PInvoke.NCrypt.NCRYPT_HASH_HANDLE)">
            <summary>Implements the operator ==.</summary>
            <param name="h1">The first handle.</param>
            <param name="h2">The second handle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCRYPT_HASH_HANDLE.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCRYPT_HASH_HANDLE.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCRYPT_HASH_HANDLE.DangerousGetHandle">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.NCrypt.NCRYPT_HANDLE">
            <summary>Provides a handle to a key storage object.</summary>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCRYPT_HANDLE.#ctor(System.IntPtr)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.NCrypt.NCRYPT_HANDLE"/> struct.</summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
        </member>
        <member name="P:Vanara.PInvoke.NCrypt.NCRYPT_HANDLE.NULL">
            <summary>Returns an invalid handle by instantiating a <see cref="T:Vanara.PInvoke.NCrypt.NCRYPT_HANDLE"/> object with <see cref="F:System.IntPtr.Zero"/>.</summary>
        </member>
        <member name="P:Vanara.PInvoke.NCrypt.NCRYPT_HANDLE.IsNull">
            <summary>Gets a value indicating whether this instance is a null handle.</summary>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCRYPT_HANDLE.op_Explicit(Vanara.PInvoke.NCrypt.NCRYPT_HANDLE)~System.IntPtr">
            <summary>Performs an explicit conversion from <see cref="T:Vanara.PInvoke.NCrypt.NCRYPT_HANDLE"/> to <see cref="T:System.IntPtr"/>.</summary>
            <param name="h">The handle.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCRYPT_HANDLE.op_Implicit(System.IntPtr)~Vanara.PInvoke.NCrypt.NCRYPT_HANDLE">
            <summary>Performs an implicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:Vanara.PInvoke.NCrypt.NCRYPT_HANDLE"/>.</summary>
            <param name="h">The pointer to a handle.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCRYPT_HANDLE.op_Inequality(Vanara.PInvoke.NCrypt.NCRYPT_HANDLE,Vanara.PInvoke.NCrypt.NCRYPT_HANDLE)">
            <summary>Implements the operator !=.</summary>
            <param name="h1">The first handle.</param>
            <param name="h2">The second handle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCRYPT_HANDLE.op_Equality(Vanara.PInvoke.NCrypt.NCRYPT_HANDLE,Vanara.PInvoke.NCrypt.NCRYPT_HANDLE)">
            <summary>Implements the operator ==.</summary>
            <param name="h1">The first handle.</param>
            <param name="h2">The second handle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCRYPT_HANDLE.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCRYPT_HANDLE.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCRYPT_HANDLE.DangerousGetHandle">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.NCrypt.NCRYPT_KEY_HANDLE">
            <summary>Provides a handle to a key.</summary>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCRYPT_KEY_HANDLE.#ctor(System.IntPtr)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.NCrypt.NCRYPT_KEY_HANDLE"/> struct.</summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
        </member>
        <member name="P:Vanara.PInvoke.NCrypt.NCRYPT_KEY_HANDLE.NULL">
            <summary>Returns an invalid handle by instantiating a <see cref="T:Vanara.PInvoke.NCrypt.NCRYPT_KEY_HANDLE"/> object with <see cref="F:System.IntPtr.Zero"/>.</summary>
        </member>
        <member name="P:Vanara.PInvoke.NCrypt.NCRYPT_KEY_HANDLE.IsNull">
            <summary>Gets a value indicating whether this instance is a null handle.</summary>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCRYPT_KEY_HANDLE.op_Explicit(Vanara.PInvoke.NCrypt.NCRYPT_KEY_HANDLE)~System.IntPtr">
            <summary>Performs an explicit conversion from <see cref="T:Vanara.PInvoke.NCrypt.NCRYPT_KEY_HANDLE"/> to <see cref="T:System.IntPtr"/>.</summary>
            <param name="h">The handle.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCRYPT_KEY_HANDLE.op_Implicit(System.IntPtr)~Vanara.PInvoke.NCrypt.NCRYPT_KEY_HANDLE">
            <summary>Performs an implicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:Vanara.PInvoke.NCrypt.NCRYPT_KEY_HANDLE"/>.</summary>
            <param name="h">The pointer to a handle.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCRYPT_KEY_HANDLE.op_Inequality(Vanara.PInvoke.NCrypt.NCRYPT_KEY_HANDLE,Vanara.PInvoke.NCrypt.NCRYPT_KEY_HANDLE)">
            <summary>Implements the operator !=.</summary>
            <param name="h1">The first handle.</param>
            <param name="h2">The second handle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCRYPT_KEY_HANDLE.op_Equality(Vanara.PInvoke.NCrypt.NCRYPT_KEY_HANDLE,Vanara.PInvoke.NCrypt.NCRYPT_KEY_HANDLE)">
            <summary>Implements the operator ==.</summary>
            <param name="h1">The first handle.</param>
            <param name="h2">The second handle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCRYPT_KEY_HANDLE.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCRYPT_KEY_HANDLE.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCRYPT_KEY_HANDLE.DangerousGetHandle">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.NCrypt.NCRYPT_PROV_HANDLE">
            <summary>Provides a handle to a provider handle.</summary>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCRYPT_PROV_HANDLE.#ctor(System.IntPtr)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.NCrypt.NCRYPT_PROV_HANDLE"/> struct.</summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
        </member>
        <member name="P:Vanara.PInvoke.NCrypt.NCRYPT_PROV_HANDLE.NULL">
            <summary>Returns an invalid handle by instantiating a <see cref="T:Vanara.PInvoke.NCrypt.NCRYPT_PROV_HANDLE"/> object with <see cref="F:System.IntPtr.Zero"/>.</summary>
        </member>
        <member name="P:Vanara.PInvoke.NCrypt.NCRYPT_PROV_HANDLE.IsNull">
            <summary>Gets a value indicating whether this instance is a null handle.</summary>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCRYPT_PROV_HANDLE.op_Explicit(Vanara.PInvoke.NCrypt.NCRYPT_PROV_HANDLE)~System.IntPtr">
            <summary>Performs an explicit conversion from <see cref="T:Vanara.PInvoke.NCrypt.NCRYPT_PROV_HANDLE"/> to <see cref="T:System.IntPtr"/>.</summary>
            <param name="h">The handle.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCRYPT_PROV_HANDLE.op_Implicit(System.IntPtr)~Vanara.PInvoke.NCrypt.NCRYPT_PROV_HANDLE">
            <summary>Performs an implicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:Vanara.PInvoke.NCrypt.NCRYPT_PROV_HANDLE"/>.</summary>
            <param name="h">The pointer to a handle.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCRYPT_PROV_HANDLE.op_Inequality(Vanara.PInvoke.NCrypt.NCRYPT_PROV_HANDLE,Vanara.PInvoke.NCrypt.NCRYPT_PROV_HANDLE)">
            <summary>Implements the operator !=.</summary>
            <param name="h1">The first handle.</param>
            <param name="h2">The second handle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCRYPT_PROV_HANDLE.op_Equality(Vanara.PInvoke.NCrypt.NCRYPT_PROV_HANDLE,Vanara.PInvoke.NCrypt.NCRYPT_PROV_HANDLE)">
            <summary>Implements the operator ==.</summary>
            <param name="h1">The first handle.</param>
            <param name="h2">The second handle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCRYPT_PROV_HANDLE.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCRYPT_PROV_HANDLE.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCRYPT_PROV_HANDLE.DangerousGetHandle">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.NCrypt.NCRYPT_SECRET_HANDLE">
            <summary>Provides a handle to a secret agreement value.</summary>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCRYPT_SECRET_HANDLE.#ctor(System.IntPtr)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.NCrypt.NCRYPT_SECRET_HANDLE"/> struct.</summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
        </member>
        <member name="P:Vanara.PInvoke.NCrypt.NCRYPT_SECRET_HANDLE.NULL">
            <summary>Returns an invalid handle by instantiating a <see cref="T:Vanara.PInvoke.NCrypt.NCRYPT_SECRET_HANDLE"/> object with <see cref="F:System.IntPtr.Zero"/>.</summary>
        </member>
        <member name="P:Vanara.PInvoke.NCrypt.NCRYPT_SECRET_HANDLE.IsNull">
            <summary>Gets a value indicating whether this instance is a null handle.</summary>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCRYPT_SECRET_HANDLE.op_Explicit(Vanara.PInvoke.NCrypt.NCRYPT_SECRET_HANDLE)~System.IntPtr">
            <summary>Performs an explicit conversion from <see cref="T:Vanara.PInvoke.NCrypt.NCRYPT_SECRET_HANDLE"/> to <see cref="T:System.IntPtr"/>.</summary>
            <param name="h">The handle.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCRYPT_SECRET_HANDLE.op_Implicit(System.IntPtr)~Vanara.PInvoke.NCrypt.NCRYPT_SECRET_HANDLE">
            <summary>Performs an implicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:Vanara.PInvoke.NCrypt.NCRYPT_SECRET_HANDLE"/>.</summary>
            <param name="h">The pointer to a handle.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCRYPT_SECRET_HANDLE.op_Inequality(Vanara.PInvoke.NCrypt.NCRYPT_SECRET_HANDLE,Vanara.PInvoke.NCrypt.NCRYPT_SECRET_HANDLE)">
            <summary>Implements the operator !=.</summary>
            <param name="h1">The first handle.</param>
            <param name="h2">The second handle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCRYPT_SECRET_HANDLE.op_Equality(Vanara.PInvoke.NCrypt.NCRYPT_SECRET_HANDLE,Vanara.PInvoke.NCrypt.NCRYPT_SECRET_HANDLE)">
            <summary>Implements the operator ==.</summary>
            <param name="h1">The first handle.</param>
            <param name="h2">The second handle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCRYPT_SECRET_HANDLE.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCRYPT_SECRET_HANDLE.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCRYPT_SECRET_HANDLE.DangerousGetHandle">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.NCrypt.NCryptAlgorithmName">
            <summary>The <c>NCryptAlgorithmName</c> structure is used to contain information about a CNG algorithm.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.NCryptAlgorithmName.pszName">
            <summary>
            A pointer to a null-terminated Unicode string that contains the name of the algorithm. This can be one of the standard CNG
            Algorithm Identifiers or the identifier for another registered algorithm.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.NCryptAlgorithmName.dwClass">
            <summary>
            <para>
            A <c>DWORD</c> value that defines which algorithm class this algorithm belongs to. This can be one of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>NCRYPT_ASYMMETRIC_ENCRYPTION_INTERFACE 0x00000003</term>
            <term>The algorithm belongs to the asymmetric encryption class of algorithms.</term>
            </item>
            <item>
            <term>NCRYPT_SECRET_AGREEMENT_INTERFACE 0x00000004</term>
            <term>The algorithm belongs to the secret agreement (Diffie-Hellman) class of algorithms.</term>
            </item>
            <item>
            <term>NCRYPT_SIGNATURE_INTERFACE 0x00000005</term>
            <term>The algorithm belongs to the signature class of algorithms.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.NCryptAlgorithmName.dwAlgOperations">
            <summary>
            <para>
            A <c>DWORD</c> value that defines which operational classes this algorithm belongs to. This can be a combination of one or
            more of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>NCRYPT_ASYMMETRIC_ENCRYPTION_OPERATION 0x00000004</term>
            <term>The algorithm is an asymmetric encryption algorithm.</term>
            </item>
            <item>
            <term>NCRYPT_SECRET_AGREEMENT_OPERATION 0x00000008</term>
            <term>The algorithm is a secret agreement (Diffie-Hellman) algorithm.</term>
            </item>
            <item>
            <term>NCRYPT_SIGNATURE_OPERATION 0x00000010</term>
            <term>The algorithm is a digital signature algorithm.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.NCryptAlgorithmName.dwFlags">
            <summary>A set of flags that provide more information about the algorithm.</summary>
        </member>
        <member name="T:Vanara.PInvoke.NCrypt.NCryptBuffer">
            <summary>The <c>NCryptBuffer</c> structure is used to identify a variable-length memory buffer.</summary>
            <remarks>BCryptBuffer is an alias for this structure.</remarks>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.NCryptBuffer.BufferType">
            <summary>
            <para>A value that identifies the type of data that is contained by the buffer. This can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>KDF_HASH_ALGORITHM 0</term>
            <term>
            The buffer is a key derivation function (KDF) parameter that contains a null-terminated Unicode string that identifies the
            hash algorithm. This can be one of the standard hash algorithm identifiers from CNG Algorithm Identifiers or the identifier
            for another registered hash algorithm. The size specified by the cbBuffer member of this structure must include the
            terminating NULL character.
            </term>
            </item>
            <item>
            <term>KDF_SECRET_PREPEND 1</term>
            <term>The buffer is a KDF parameter that contains the value to add to the beginning of the message input to the hash function.</term>
            </item>
            <item>
            <term>KDF_SECRET_APPEND 2</term>
            <term>The buffer is a KDF parameter that contains the value to add to the end of the message input to the hash function.</term>
            </item>
            <item>
            <term>KDF_HMAC_KEY 3</term>
            <term>The buffer is a KDF parameter that contains the plain text value of the HMAC key.</term>
            </item>
            <item>
            <term>KDF_TLS_PRF_LABEL 4</term>
            <term>
            The buffer is a KDF parameter that contains an ANSI string that contains the transport layer security (TLS) pseudo-random
            function (PRF) label.
            </term>
            </item>
            <item>
            <term>KDF_TLS_PRF_SEED 5</term>
            <term>The buffer is a KDF parameter that contains the PRF seed value. The seed must be 64 bytes long.</term>
            </item>
            <item>
            <term>KDF_SECRET_HANDLE 6</term>
            <term>
            The buffer is a KDF parameter that contains the secret agreement handle. The pvBuffer member contains a BCRYPT_SECRET_HANDLE
            value and is not a pointer.
            </term>
            </item>
            <item>
            <term>KDF_TLS_PRF_PROTOCOL 7</term>
            <term>
            The buffer is a KDF parameter that contains a DWORD value identifying the SSL/TLS protocol version whose PRF algorithm is to
            be used.
            </term>
            </item>
            <item>
            <term>KDF_ALGORITHMID 8</term>
            <term>
            The buffer is a KDF parameter that contains the byte array to use as the AlgorithmID subfield of the OtherInfo parameter to
            the SP 800-56A KDF.
            </term>
            </item>
            <item>
            <term>KDF_PARTYUINFO 9</term>
            <term>
            The buffer is a KDF parameter that contains the byte array to use as the PartyUInfo subfield of the OtherInfo parameter to
            the SP 800-56A KDF.
            </term>
            </item>
            <item>
            <term>KDF_PARTYVINFO 10</term>
            <term>
            The buffer is a KDF parameter that contains the byte array to use as the PartyVInfo subfield of the OtherInfo parameter to
            the SP 800-56A KDF.
            </term>
            </item>
            <item>
            <term>KDF_SUPPPUBINFO 11</term>
            <term>
            The buffer is a KDF parameter that contains the byte array to use as the SuppPubInfo subfield of the OtherInfo parameter to
            the SP 800-56A KDF.
            </term>
            </item>
            <item>
            <term>KDF_SUPPPRIVINFO 12</term>
            <term>
            The buffer is a KDF parameter that contains the byte array to use as the SuppPrivInfo subfield of the OtherInfo parameter to
            the SP 800-56A KDF.
            </term>
            </item>
            <item>
            <term>NCRYPTBUFFER_SSL_CLIENT_RANDOM 20</term>
            <term>The buffer contains the random number of the SSL client.</term>
            </item>
            <item>
            <term>NCRYPTBUFFER_SSL_SERVER_RANDOM 21</term>
            <term>The buffer contains the random number of the SSL server.</term>
            </item>
            <item>
            <term>NCRYPTBUFFER_SSL_HIGHEST_VERSION 22</term>
            <term>The buffer contains the highest SSL version supported.</term>
            </item>
            <item>
            <term>NCRYPTBUFFER_SSL_CLEAR_KEY 23</term>
            <term>The buffer contains the clear portion of the SSL master key.</term>
            </item>
            <item>
            <term>NCRYPTBUFFER_SSL_KEY_ARG_DATA 24</term>
            <term>The buffer contains the SSL key argument data.</term>
            </item>
            <item>
            <term>NCRYPTBUFFER_PKCS_OID 40</term>
            <term>The buffer contains a null-terminated ANSI string that contains the PKCS object identifier.</term>
            </item>
            <item>
            <term>NCRYPTBUFFER_PKCS_ALG_OID 41</term>
            <term>The buffer contains a null-terminated ANSI string that contains the PKCS algorithm object identifier.</term>
            </item>
            <item>
            <term>NCRYPTBUFFER_PKCS_ALG_PARAM 42</term>
            <term>The buffer contains the PKCS algorithm parameters.</term>
            </item>
            <item>
            <term>NCRYPTBUFFER_PKCS_ALG_ID 43</term>
            <term>The buffer contains the PKCS algorithm identifier.</term>
            </item>
            <item>
            <term>NCRYPTBUFFER_PKCS_ATTRS 44</term>
            <term>The buffer contains the PKCS attributes.</term>
            </item>
            <item>
            <term>NCRYPTBUFFER_PKCS_KEY_NAME 45</term>
            <term>The buffer contains a null-terminated Unicode string that contains the key name.</term>
            </item>
            <item>
            <term>NCRYPTBUFFER_PKCS_SECRET 46</term>
            <term>
            The buffer contains a null-terminated Unicode string that contains the PKCS8 password. This parameter is optional and can be NULL.
            </term>
            </item>
            <item>
            <term>NCRYPTBUFFER_CERT_BLOB 47</term>
            <term>
            The buffer contains a serialized certificate store that contains the PKCS certificate. This serialized store is obtained by
            using the CertSaveStore function with the CERT_STORE_SAVE_TO_MEMORY option. When this property is being retrieved, you can
            access the certificate store by passing this serialized store to the CertOpenStore function with the
            CERT_STORE_PROV_SERIALIZED option.
            </term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.NCryptBuffer.pvBuffer">
            <summary>
            <para>The buffer.</para>
            <para>The format and contents of this buffer are identified by the <c>BufferType</c> member.</para>
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCryptBuffer.#ctor(Vanara.PInvoke.NCrypt.KeyDerivationBufferType,System.Byte[])">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.NCrypt.NCryptBuffer"/> struct.</summary>
            <param name="bufferType">Type of the buffer.</param>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCryptBuffer.#ctor(Vanara.PInvoke.NCrypt.KeyDerivationBufferType,System.String)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.NCrypt.NCryptBuffer"/> struct.</summary>
            <param name="bufferType">Type of the buffer.</param>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="T:Vanara.PInvoke.NCrypt.KnownStorageProvider">
            <summary>NCrypt known storage providers.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.KnownStorageProvider.MS_KEY_STORAGE_PROVIDER">
            <summary>The Microsoft Software Key Storage Provider</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.KnownStorageProvider.MS_NGC_KEY_STORAGE_PROVIDER">
            <summary>The Microsoft Passport Key Storage Provider</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.KnownStorageProvider.MS_PLATFORM_KEY_STORAGE_PROVIDER">
            <summary>The Microsoft Platform Crypto Provider</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.KnownStorageProvider.MS_SMART_CARD_KEY_STORAGE_PROVIDER">
            <summary>The Microsoft Smart Card Key Storage Provider</summary>
        </member>
        <member name="T:Vanara.PInvoke.NCrypt.PropertyName">
            <summary>The following values are used with the NCryptGetProperty and NCryptSetProperty functions to identify a property.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_ALGORITHM_GROUP_PROPERTY">
            <summary>Algorithm Group</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_ALGORITHM_PROPERTY">
            <summary>Algorithm Name</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_ASSOCIATED_ECDH_KEY">
            <summary>SmartCardAssociatedECDHKey</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_AUTH_TAG_LENGTH">
            <summary>AuthTagLength</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_BLOCK_LENGTH_PROPERTY">
            <summary>Block Length</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_CERTIFICATE_PROPERTY">
            <summary>SmartCardKeyCertificate</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_CHAINING_MODE_PROPERTY">
            <summary>Chaining Mode</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_DISMISS_UI_TIMEOUT_SEC_PROPERTY">
            <summary>SmartCardDismissUITimeoutSeconds</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_ECC_CURVE_NAME_LIST_PROPERTY">
            <summary>BCrypt.PropertyName.BCRYPT_ECC_CURVE_NAME_LIS</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_ECC_CURVE_NAME_PROPERTY">
            <summary>BCrypt.PropertyName.BCRYPT_ECC_CURVE_NAM</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_ECC_PARAMETERS_PROPERTY">
            <summary>BCrypt.PropertyName.BCRYPT_ECC_PARAMETER</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_EXPORT_POLICY_PROPERTY">
            <summary>Export Policy</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_IMPL_TYPE_PROPERTY">
            <summary>Impl Type</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_KDF_SECRET_VALUE">
            <summary>KDFKeySecret</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_KEY_TYPE_PROPERTY">
            <summary>Key Type</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_KEY_USAGE_PROPERTY">
            <summary>Key Usage</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_LAST_MODIFIED_PROPERTY">
            <summary>Modified</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_LENGTH_PROPERTY">
            <summary>Length</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_LENGTHS_PROPERTY">
            <summary>Lengths</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_MAX_NAME_LENGTH_PROPERTY">
            <summary>Max Name Length</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_NAME_PROPERTY">
            <summary>Name</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_PCP_ALTERNATE_KEY_STORAGE_LOCATION_PROPERTY">
            <summary>PCP_ALTERNATE_KEY_STORAGE_LOCATION</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_PCP_CHANGEPASSWORD_PROPERTY">
            <summary>PCP_CHANGEPASSWORD</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_PCP_ECC_EKCERT_PROPERTY">
            <summary>PCP_ECC_EKCERT</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_PCP_ECC_EKNVCERT_PROPERTY">
            <summary>PCP_ECC_EKNVCERT</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_PCP_ECC_EKPUB_PROPERTY">
            <summary>PCP_ECC_EKPUB</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_PCP_EKCERT_PROPERTY">
            <summary>PCP_EKCERT</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_PCP_EKNVCERT_PROPERTY">
            <summary>PCP_EKNVCERT</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_PCP_EKPUB_PROPERTY">
            <summary>PCP_EKPUB</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_PCP_EXPORT_ALLOWED_PROPERTY">
            <summary>PCP_EXPORT_ALLOWED</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_PCP_HMAC_AUTH_NONCE">
            <summary>PCP_HMAC_AUTH_NONCE</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_PCP_HMAC_AUTH_POLICYINFO">
            <summary>PCP_HMAC_AUTH_POLICYINFO</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_PCP_HMAC_AUTH_POLICYREF">
            <summary>PCP_HMAC_AUTH_POLICYREF</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_PCP_HMAC_AUTH_SIGNATURE">
            <summary>PCP_HMAC_AUTH_SIGNATURE</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_PCP_HMAC_AUTH_TICKET">
            <summary>PCP_HMAC_AUTH_TICKET</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_PCP_KEY_CREATIONHASH_PROPERTY">
            <summary>PCP_KEY_CREATIONHASH</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_PCP_KEY_CREATIONTICKET_PROPERTY">
            <summary>PCP_KEY_CREATIONTICKET</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_PCP_KEY_USAGE_POLICY_PROPERTY">
            <summary>PCP_KEY_USAGE_POLICY</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_PCP_KEYATTESTATION_PROPERTY">
            <summary>PCP_TPM12_KEYATTESTATION</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_PCP_MIGRATIONPASSWORD_PROPERTY">
            <summary>PCP_MIGRATIONPASSWORD</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_PCP_NO_DA_PROTECTION_PROPERTY">
            <summary>PCP_NO_DA_PROTECTION</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_PCP_PASSWORD_REQUIRED_PROPERTY">
            <summary>PCP_PASSWORD_REQUIRED</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_PCP_PCRTABLE_PROPERTY">
            <summary>PCP_PCRTABLE</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_PCP_PLATFORM_BINDING_PCRDIGEST_PROPERTY">
            <summary>PCP_PLATFORM_BINDING_PCRDIGEST</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_PCP_PLATFORM_BINDING_PCRDIGESTLIST_PROPERTY">
            <summary>PCP_PLATFORM_BINDING_PCRDIGESTLIST</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_PCP_PLATFORM_BINDING_PCRMASK_PROPERTY">
            <summary>PCP_PLATFORM_BINDING_PCRMASK</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_PCP_PLATFORM_TYPE_PROPERTY">
            <summary>PCP_PLATFORM_TYPE</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_PCP_PLATFORMHANDLE_PROPERTY">
            <summary>PCP_PLATFORMHANDLE</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_PCP_PROVIDER_VERSION_PROPERTY">
            <summary>PCP_PROVIDER_VERSION</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_PCP_PROVIDERHANDLE_PROPERTY">
            <summary>PCP_PROVIDERMHANDLE</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_PCP_RAW_POLICYDIGEST_PROPERTY">
            <summary>PCP_RAW_POLICYDIGEST</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_PCP_RSA_EKCERT_PROPERTY">
            <summary>PCP_RSA_EKCERT</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_PCP_RSA_EKNVCERT_PROPERTY">
            <summary>PCP_RSA_EKNVCERT</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_PCP_RSA_EKPUB_PROPERTY">
            <summary>PCP_RSA_EKPUB</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_PCP_RSA_SCHEME_HASH_ALG_PROPERTY">
            <summary>PCP_RSA_SCHEME_HASH_ALG</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_PCP_RSA_SCHEME_PROPERTY">
            <summary>PCP_RSA_SCHEME</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_PCP_SESSIONID_PROPERTY">
            <summary>PCP_SESSIONID</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_PCP_SRKPUB_PROPERTY">
            <summary>PCP_SRKPUB</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_PCP_STORAGEPARENT_PROPERTY">
            <summary>PCP_STORAGEPARENT</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_PCP_TPM_FW_VERSION_PROPERTY">
            <summary>PCP_TPM_FW_VERSION</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_PCP_TPM_IFX_RSA_KEYGEN_PROHIBITED_PROPERTY">
            <summary>PCP_TPM_IFX_RSA_KEYGEN_PROHIBITED</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_PCP_TPM_IFX_RSA_KEYGEN_VULNERABILITY_PROPERTY">
            <summary>PCP_TPM_IFX_RSA_KEYGEN_VULNERABILITY</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_PCP_TPM_MANUFACTURER_ID_PROPERTY">
            <summary>PCP_TPM_MANUFACTURER_ID</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_PCP_TPM_VERSION_PROPERTY">
            <summary>PCP_TPM_VERSION</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_PCP_TPM12_IDACTIVATION_PROPERTY">
            <summary>PCP_TPM12_IDACTIVATION</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_PCP_TPM12_IDBINDING_DYNAMIC_PROPERTY">
            <summary>PCP_TPM12_IDBINDING_DYNAMIC</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_PCP_TPM12_IDBINDING_PROPERTY">
            <summary>PCP_TPM12_IDBINDING</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_PCP_TPM2BNAME_PROPERTY">
            <summary>PCP_TPM2BNAME</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_PCP_USAGEAUTH_PROPERTY">
            <summary>PCP_USAGEAUTH</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_PIN_PROMPT_PROPERTY">
            <summary>SmartCardPinPrompt</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_PIN_PROPERTY">
            <summary>SmartCardPin</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_PROVIDER_HANDLE_PROPERTY">
            <summary>Provider Handle</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_PUBLIC_LENGTH_PROPERTY">
            <summary>BCrypt.PropertyName.BCRYPT_PUBLIC_KEY_LENGT</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_READER_ICON_PROPERTY">
            <summary>SmartCardReaderIcon</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_READER_PROPERTY">
            <summary>SmartCardReader</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_ROOT_CERTSTORE_PROPERTY">
            <summary>SmartcardRootCertStore</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_SCARD_PIN_ID">
            <summary>SmartCardPinId</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_SCARD_PIN_INFO">
            <summary>SmartCardPinInfo</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_SECURE_PIN_PROPERTY">
            <summary>SmartCardSecurePin</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_SECURITY_DESCR_PROPERTY">
            <summary>Security Descr</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_SECURITY_DESCR_SUPPORT_PROPERTY">
            <summary>Security Descr Support</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_SIGNATURE_LENGTH_PROPERTY">
            <summary>BCrypt.PropertyName.BCRYPT_SIGNATURE_LENGT</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_SMARTCARD_GUID_PROPERTY">
            <summary>SmartCardGuid</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_UI_POLICY_PROPERTY">
            <summary>UI Policy</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_UNIQUE_NAME_PROPERTY">
            <summary>Unique Name</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_USE_CONTEXT_PROPERTY">
            <summary>Use Context</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_USE_COUNT_ENABLED_PROPERTY">
            <summary>Enabled Use Count</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_USE_COUNT_PROPERTY">
            <summary>Use Count</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_USE_PER_BOOT_KEY_PROPERTY">
            <summary>Per Boot Key</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_USE_VIRTUAL_ISOLATION_PROPERTY">
            <summary>Virtual Iso</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_USER_CERTSTORE_PROPERTY">
            <summary>SmartCardUserCertStore</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_VERSION_PROPERTY">
            <summary>Version</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PropertyName.NCRYPT_WINDOW_HANDLE_PROPERTY">
            <summary>HWND Handle</summary>
        </member>
        <member name="T:Vanara.PInvoke.NCrypt.NCryptBufferDesc">
            <summary>The <c>BCryptBufferDesc</c> structure is used to contain a set of generic CNG buffers.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.NCryptBufferDesc.ulVersion">
            <summary>
            <para>The version of the structure. This must be the following value.</para>
            <para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>BCRYPTBUFFER_VERSION</term>
            <term>The default version number.</term>
            </item>
            </list>
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.NCryptBufferDesc.cBuffers">
            <summary>The number of elements in the <c>pBuffers</c> array.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.NCryptBufferDesc._pBuffers">
            <summary>
            The address of an array of <c>BCryptBuffer</c> structures that contain the buffers. The <c>cBuffers</c> member contains the
            number of elements in this array.
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.NCrypt.NCryptBufferDesc.pBuffers">
            <summary>
            The address of an array of <c>BCryptBuffer</c> structures that contain the buffers. The <c>cBuffers</c> member contains the
            number of elements in this array.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCryptBufferDesc.System#IDisposable#Dispose">
            <inheritdoc/>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.NCryptBufferDesc._NCryptBuffer.cbBuffer">
            <summary>
            <para>The size, in bytes, of the buffer.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.NCryptBufferDesc._NCryptBuffer.BufferType">
            <summary>A value that identifies the type of data that is contained by the buffer.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.NCryptBufferDesc._NCryptBuffer.pvBuffer">
            <summary>
            <para>The address of the buffer. The size of this buffer is contained in the <c>cbBuffer</c> member.</para>
            <para>The format and contents of this buffer are identified by the <c>BufferType</c> member.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.NCrypt.SafeNCRYPT_KEY_HANDLE">
            <summary>Provides a <see cref="T:System.Runtime.InteropServices.SafeHandle"/> for <see cref="T:Vanara.PInvoke.NCrypt.NCRYPT_KEY_HANDLE"/> that is disposed using <see cref="M:Vanara.PInvoke.NCrypt.NCryptFreeObject(System.IntPtr)"/>.</summary>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.SafeNCRYPT_KEY_HANDLE.#ctor(System.IntPtr,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.NCrypt.SafeNCRYPT_KEY_HANDLE"/> class and assigns an existing handle.</summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
            <param name="ownsHandle">
            <see langword="true"/> to reliably release the handle during the finalization phase; otherwise, <see langword="false"/> (not recommended).
            </param>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.SafeNCRYPT_KEY_HANDLE.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.NCrypt.SafeNCRYPT_KEY_HANDLE"/> class.</summary>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.SafeNCRYPT_KEY_HANDLE.op_Implicit(Vanara.PInvoke.NCrypt.SafeNCRYPT_KEY_HANDLE)~Vanara.PInvoke.NCrypt.NCRYPT_HANDLE">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.NCrypt.SafeNCRYPT_KEY_HANDLE"/> to <see cref="T:Vanara.PInvoke.NCrypt.NCRYPT_HANDLE"/>.</summary>
            <param name="h">The safe handle instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.SafeNCRYPT_KEY_HANDLE.op_Implicit(Vanara.PInvoke.NCrypt.SafeNCRYPT_KEY_HANDLE)~Vanara.PInvoke.NCrypt.NCRYPT_KEY_HANDLE">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.NCrypt.SafeNCRYPT_KEY_HANDLE"/> to <see cref="T:Vanara.PInvoke.NCrypt.NCRYPT_KEY_HANDLE"/>.</summary>
            <param name="h">The safe handle instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.SafeNCRYPT_KEY_HANDLE.InternalReleaseHandle">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.NCrypt.SafeNCRYPT_PROV_HANDLE">
            <summary>Provides a <see cref="T:System.Runtime.InteropServices.SafeHandle"/> for <see cref="T:Vanara.PInvoke.NCrypt.NCRYPT_PROV_HANDLE"/> that is disposed using <see cref="M:Vanara.PInvoke.NCrypt.NCryptFreeObject(System.IntPtr)"/>.</summary>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.SafeNCRYPT_PROV_HANDLE.#ctor(System.IntPtr,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.NCrypt.SafeNCRYPT_PROV_HANDLE"/> class and assigns an existing handle.</summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
            <param name="ownsHandle">
            <see langword="true"/> to reliably release the handle during the finalization phase; otherwise, <see langword="false"/> (not recommended).
            </param>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.SafeNCRYPT_PROV_HANDLE.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.NCrypt.SafeNCRYPT_PROV_HANDLE"/> class.</summary>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.SafeNCRYPT_PROV_HANDLE.op_Implicit(Vanara.PInvoke.NCrypt.SafeNCRYPT_PROV_HANDLE)~Vanara.PInvoke.NCrypt.NCRYPT_HANDLE">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.NCrypt.SafeNCRYPT_PROV_HANDLE"/> to <see cref="T:Vanara.PInvoke.NCrypt.NCRYPT_HANDLE"/>.</summary>
            <param name="h">The safe handle instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.SafeNCRYPT_PROV_HANDLE.op_Implicit(Vanara.PInvoke.NCrypt.SafeNCRYPT_PROV_HANDLE)~Vanara.PInvoke.NCrypt.NCRYPT_PROV_HANDLE">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.NCrypt.SafeNCRYPT_PROV_HANDLE"/> to <see cref="T:Vanara.PInvoke.NCrypt.NCRYPT_PROV_HANDLE"/>.</summary>
            <param name="h">The safe handle instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.SafeNCRYPT_PROV_HANDLE.InternalReleaseHandle">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.NCrypt.SafeNCRYPT_SECRET_HANDLE">
            <summary>Provides a <see cref="T:System.Runtime.InteropServices.SafeHandle"/> for <see cref="T:Vanara.PInvoke.NCrypt.NCRYPT_SECRET_HANDLE"/> that is disposed using <see cref="M:Vanara.PInvoke.NCrypt.NCryptFreeObject(System.IntPtr)"/>.</summary>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.SafeNCRYPT_SECRET_HANDLE.#ctor(System.IntPtr,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.NCrypt.SafeNCRYPT_SECRET_HANDLE"/> class and assigns an existing handle.</summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
            <param name="ownsHandle">
            <see langword="true"/> to reliably release the handle during the finalization phase; otherwise, <see langword="false"/> (not recommended).
            </param>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.SafeNCRYPT_SECRET_HANDLE.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.NCrypt.SafeNCRYPT_SECRET_HANDLE"/> class.</summary>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.SafeNCRYPT_SECRET_HANDLE.op_Implicit(Vanara.PInvoke.NCrypt.SafeNCRYPT_SECRET_HANDLE)~Vanara.PInvoke.NCrypt.NCRYPT_SECRET_HANDLE">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.NCrypt.SafeNCRYPT_SECRET_HANDLE"/> to <see cref="T:Vanara.PInvoke.NCrypt.NCRYPT_SECRET_HANDLE"/>.</summary>
            <param name="h">The safe handle instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.SafeNCRYPT_SECRET_HANDLE.InternalReleaseHandle">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.NCrypt.SafeNCryptBuffer">
            <summary>Provides a <see cref="T:System.Runtime.InteropServices.SafeHandle"/> for buffers allocated by the NCrypt library that is disposed using <see cref="M:Vanara.PInvoke.NCrypt.NCryptFreeBuffer(System.IntPtr)"/>.</summary>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.SafeNCryptBuffer.#ctor(System.IntPtr,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.NCrypt.SafeNCryptBuffer"/> class and assigns an existing handle.</summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
            <param name="ownsHandle">
            <see langword="true"/> to reliably release the handle during the finalization phase; otherwise, <see langword="false"/> (not recommended).
            </param>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.SafeNCryptBuffer.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.NCrypt.SafeNCryptBuffer"/> class.</summary>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.SafeNCryptBuffer.ToArray``1(System.UInt32)">
            <summary>Converts an <see cref="T:System.IntPtr"/> that points to a C-style array into a CLI array.</summary>
            <typeparam name="T">Type of native structure used by the C-style array.</typeparam>
            <param name="count">The number of items in the native array.</param>
            <returns>An array of type <typeparamref name="T"/> containing the elements of the native array.</returns>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.SafeNCryptBuffer.ToStructure``1">
            <summary>Marshals data to a newly allocated managed object of the type specified by a generic type parameter.</summary>
            <typeparam name="T">The type of the object to which the data is to be copied. This must be a structure.</typeparam>
            <returns>A managed object that contains the data pointed to by this object.</returns>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.SafeNCryptBuffer.InternalReleaseHandle">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.NCrypt.PFNCryptStreamOutputCallback">
            <summary>
            <para>
            The <c>PFNCryptStreamOutputCallback</c> function receives encrypted or decrypted data from tasks started by using the
            NCryptStreamOpenToProtect or NCryptStreamOpenToUnprotect functions. This callback must be defined by your application using the
            following syntax.
            </para>
            </summary>
            <param name="pvCallbackCtxt">
            <para>Pointer to data that you can use to keep track of your application. The data is not modified by the data protection API.</para>
            <para>
            <c>Note</c> You can set a pointer to your context data in the <c>pvCallbackCtxt</c> member of the NCRYPT_PROTECT_STREAM_INFO
            structure before passing a pointer to that structure in the pStreamInfo parameter of the NCryptStreamOpenToProtect or
            NCryptStreamOpenToUnprotect functions.
            </para>
            </param>
            <param name="pbData">
            <para>Pointer to a block of processed data that can be used by the application.</para>
            </param>
            <param name="cbData">
            <para>The size, in bytes, of the processed data pointed to by the pbData parameter.</para>
            </param>
            <param name="fFinal">
            <para>
            If this value is <c>TRUE</c>, the current data block is the last to be processed and this is the last time the callback will be called.
            </para>
            </param>
            <returns>
            <para>
            If you return any status code other than <c>ERROR_SUCCESS</c> from your implementation of this callback function, the stream
            encryption or decryption process will fail.
            </para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            Set a pointer to this callback function in the <c>pfnStreamOutput</c> member of the NCRYPT_PROTECT_STREAM_INFO structure. Set a
            pointer to the structure in the pStreamInfo parameter of the NCryptStreamOpenToProtect or NCryptStreamOpenToUnprotect functions.
            </para>
            <para>
            You can use this callback to further process the encrypted or decrypted data. A common use of the function is to write the data
            to disk as it is received from the data protection API. The blocks of encrypted or unencrypted data are created by the
            NCryptStreamUpdate function.
            </para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.NCrypt.PFNCryptStreamOutputCallbackEx">
            <summary>
            The <c>PFNCryptStreamOutputCallbackEx</c> function receives encrypted or decrypted data from tasks started by using the
            NCryptStreamOpenToProtectEx or NCryptStreamOpenToUnprotectEx functions. This callback must be defined by your application using
            the following syntax.
            </summary>
            <param name="pvCallbackCtxt">The arguments specified by NCRYPT_PROTECT_STREAM_INFO_EX.</param>
            <param name="pbData">
            A pointer to a block of processed data that is available to the application. If data is not available yet, but the descriptor is,
            this will be NULL.
            </param>
            <param name="cbData">The size, in bytes, of the processed data pointed to by the pbData parameter.</param>
            <param name="hDescriptor">Handle of Protection Descriptor.</param>
            <param name="fFinal">
            If this value is <c>TRUE</c>, the current data block is the last to be processed and this is the last time the callback will be called.
            </param>
            <returns>
            <para>
            If you return any status code other than <c>ERROR_SUCCESS</c> from your implementation of this callback function, the stream
            encryption or decryption process will fail.
            </para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            Set a pointer to this callback function in the <c>pfnStreamOutput</c> member of the NCRYPT_PROTECT_STREAM_INFO structure. Set a
            pointer to the structure in the pStreamInfo parameter of the NCryptStreamOpenToProtect or NCryptStreamOpenToUnprotect functions.
            </para>
            <para>
            You can use this callback to further process the encrypted or decrypted data. A common use of the function is to write the data
            to disk as it is received from the data protection API. The blocks of encrypted or unencrypted data are created by the
            NCryptStreamUpdate function.
            </para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.NCrypt.CreateProtectionDescriptorFlags">
            <summary>Flags for <c>NCryptCreateProtectionDescriptor</c>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.CreateProtectionDescriptorFlags.NCRYPT_NAMED_DESCRIPTOR_FLAG">
            <summary>
            To indicate that the string is a display name and that it is saved, along with its associated descriptor string rule, in the
            HKEY_CURRENT_USER registry hive, set only the NCRYPT_NAMED_DESCRIPTOR_FLAG value. That is, there is no unique flag to specify
            the current user registry hive.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.CreateProtectionDescriptorFlags.NCRYPT_MACHINE_KEY_FLAG">
            <summary>
            To indicate that the string is a display name and that it is saved, along with its associated descriptor rule string, in the
            HKEY_LOCAL_MACHINE registry hive, bitwise-OR the NCRYPT_NAMED_DESCRIPTOR_FLAG value and the NCRYPT_MACHINE_KEY_FLAG value.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.NCrypt.ProtectFlags">
            <summary>Flags for <c>NCryptProtectSecret</c>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.ProtectFlags.NCRYPT_SILENT_FLAG">
            <summary>Requests that the key service provider not display a user interface.</summary>
        </member>
        <member name="T:Vanara.PInvoke.NCrypt.ProtectionDescriptorInfoType">
            <summary>Flags used by <c>NCryptGetProtectionDescriptorInfo</c>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.ProtectionDescriptorInfoType.NCRYPT_PROTECTION_INFO_TYPE_DESCRIPTOR_STRING">
            <summary>The ppvInfo argument returns the descriptor rule string.</summary>
        </member>
        <member name="T:Vanara.PInvoke.NCrypt.ProtectionDescriptorNameFlags">
            <summary>Flags for <c>NCryptQueryProtectionDescriptorName</c>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.ProtectionDescriptorNameFlags.NCRYPT_MACHINE_KEY_FLAG">
            <summary>
            To indicate that the string is a display name and that it is saved, along with its associated descriptor rule string, in the
            HKEY_LOCAL_MACHINE registry hive, bitwise-OR the NCRYPT_NAMED_DESCRIPTOR_FLAG value and the NCRYPT_MACHINE_KEY_FLAG value.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.NCrypt.UnprotectSecretFlags">
            <summary>Flags used by <c>NCryptUnprotectSecret</c>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.UnprotectSecretFlags.NCRYPT_UNPROTECT_NO_DECRYPT">
            <summary>Decodes only the header of the protected data blob. No actual decryption takes place.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.UnprotectSecretFlags.NCRYPT_SILENT_FLAG">
            <summary>Requests that the key service provider not display a user interface.</summary>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCryptCloseProtectionDescriptor(Vanara.PInvoke.NCrypt.NCRYPT_DESCRIPTOR_HANDLE)">
            <summary>
            <para>The <c>NCryptCloseProtectionDescriptor</c> function zeros and frees a protection descriptor object and releases its handle.</para>
            </summary>
            <param name="hDescriptor">
            <para>Handle of a protection descriptor created by calling NCryptCreateProtectionDescriptor.</para>
            </param>
            <returns>
            <para>
            Returns a status code that indicates the success or failure of the function. Possible return codes include, but are not limited
            to, the following.
            </para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>NTE_INVALID_HANDLE</term>
            <term>The handle specified by the hDescriptor parameter cannot be NULL and it must represent a valid descriptor.</term>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCryptCreateProtectionDescriptor(System.String,Vanara.PInvoke.NCrypt.CreateProtectionDescriptorFlags,Vanara.PInvoke.NCrypt.SafeNCRYPT_DESCRIPTOR_HANDLE@)">
            <summary>
            <para>The <c>NCryptCreateProtectionDescriptor</c> function retrieves a handle to a protection descriptor object.</para>
            </summary>
            <param name="pwszDescriptorString">
            <para>
            Null-terminated Unicode string that contains a protection descriptor rule string or a registered display name for the rule.
            </para>
            <para>
            If you specify the display name and you want this function to look in the registry for the associated protection descriptor rule
            string, you must set the dwFlags parameter to <c>NCRYPT_NAMED_DESCRIPTOR_FLAG</c>.
            </para>
            </param>
            <param name="dwFlags">
            <para>
            Flag that specifies whether the string in pwszDescriptorString represents the display name of a protection descriptor and, if so,
            where in the registry the function should search for the associated protection rule string. The following value combinations can
            be set:
            </para>
            <list type="bullet">
            <item>
            <term>
            To indicate that the value set in the pwszDescriptorString parameter is a complete protection descriptor rule string rather than
            a display name, set the dwFlags parameter to zero (0).
            </term>
            </item>
            <item>
            <term>
            To indicate that the string is a display name and that it is saved, along with its associated descriptor rule string, in the
            <c>HKEY_LOCAL_MACHINE</c> registry hive, bitwise-OR the <c>NCRYPT_NAMED_DESCRIPTOR_FLAG</c> value and the
            <c>NCRYPT_MACHINE_KEY_FLAG</c> value.
            </term>
            </item>
            <item>
            <term>
            To indicate that the string is a display name and that it is saved, along with its associated descriptor string rule, in the
            <c>HKEY_CURRENT_USER</c> registry hive, set only the <c>NCRYPT_NAMED_DESCRIPTOR_FLAG</c> value. That is, there is no unique flag
            to specify the current user registry hive.
            </term>
            </item>
            </list>
            <para>
            <c>Note</c> To associate a descriptor rule with a display name and save both in the registry, call the
            NCryptRegisterProtectionDescriptorName function.
            </para>
            </param>
            <param name="phDescriptor">
            <para>Pointer to a protection descriptor object handle.</para>
            </param>
            <returns>
            <para>
            Returns a status code that indicates the success or failure of the function. Possible return codes include, but are not limited
            to, the following.
            </para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>NTE_INVALID_PARAMETER</term>
            <term>
            The phDescriptor parameter cannot be NULL. The pwszDescriptorString parameter cannot be NULL and it cannot be an empty sting.
            </term>
            </item>
            <item>
            <term>NTE_BAD_FLAGS</term>
            <term>The dwFlags parameter must be NCRYPT_MACHINE_KEY_FLAG or NCRYPT_NAMED_DESCRIPTOR_FLAG.</term>
            </item>
            <item>
            <term>NTE_NO_MEMORY</term>
            <term>Memory could not be allocated to retrieve the registered protection descriptor string.</term>
            </item>
            <item>
            <term>NTE_NOT_FOUND</term>
            <term>The protection descriptor name specified in the pwszDescriptorString parameter could not be found.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            The protection descriptor object created by this function is an internal data structure that contains information about the
            descriptor. You cannot use it directly. Your application can, however, use the returned handle in the following functions:
            </para>
            <list type="bullet">
            <item>
            <term>NCryptCloseProtectionDescriptor</term>
            </item>
            <item>
            <term>NCryptGetProtectionDescriptorInfo</term>
            </item>
            <item>
            <term>NCryptProtectSecret</term>
            </item>
            <item>
            <term>NCryptProtectSecret</term>
            </item>
            <item>
            <term>NCryptUnprotectSecret</term>
            </item>
            <item>
            <term>NCryptStreamOpenToProtect</term>
            </item>
            </list>
            <para>The following examples show protection descriptor rule strings:</para>
            <list type="bullet">
            <item>
            <term>"SID=S-1-5-21-4392301 AND SID=S-1-5-21-3101812"</term>
            </item>
            <item>
            <term>"SDDL=O:S-1-5-5-0-290724G:SYD:(A;;CCDC;;;S-1-5-5-0-290724)(A;;DC;;;WD)"</term>
            </item>
            <item>
            <term>"LOCAL=user"</term>
            </item>
            <item>
            <term>"LOCAL=machine"</term>
            </item>
            <item>
            <term>"WEBCREDENTIALS=MyPasswordName"</term>
            </item>
            <item>
            <term>"WEBCREDENTIALS=MyPasswordName,myweb.com"</term>
            </item>
            </list>
            <para>
            You can use the NCryptRegisterProtectionDescriptorName function to associate a display name with a rule string and save both in
            the registry.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCryptGetProtectionDescriptorInfo(Vanara.PInvoke.NCrypt.NCRYPT_DESCRIPTOR_HANDLE,Vanara.PInvoke.NCrypt.NCRYPT_ALLOC_PARA@,Vanara.PInvoke.NCrypt.ProtectionDescriptorInfoType,System.IntPtr@)">
            <summary>
            <para>The <c>NCryptGetProtectionDescriptorInfo</c> function retrieves a protection descriptor rule string.</para>
            </summary>
            <param name="hDescriptor">
            <para>Protection descriptor handle created by calling NCryptCreateProtectionDescriptor.</para>
            </param>
            <param name="pMemPara">
            <para>
            Pointer to an NCRYPT_ALLOC_PARA structure that you can use to specify custom memory management functions. If you set this
            argument to <c>NULL</c>, the LocalAlloc function is used internally to allocate memory and your application must call LocalFree
            to release memory pointed to by the ppvInfo parameter.
            </para>
            </param>
            <param name="dwInfoType">
            <para>Specifies how to return descriptor information to the ppvInfo parameter. This can be the following value:</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>NCRYPT_PROTECTION_INFO_TYPE_DESCRIPTOR_STRING</term>
            <term>The ppvInfo argument returns the descriptor rule string.</term>
            </item>
            </list>
            </param>
            <param name="ppvInfo">
            <para>Pointer to the descriptor information.</para>
            </param>
            <returns>
            <para>
            Returns a status code that indicates the success or failure of the function. Possible return codes include, but are not limited
            to, the following.
            </para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>NTE_INVALID_PARAMETER</term>
            <term>The ppvInfo parameter cannot be NULL.</term>
            </item>
            <item>
            <term>NTE_NOT_SUPPORTED</term>
            <term>An unsupported value was specified in the dwInfoType parameter.</term>
            </item>
            <item>
            <term>NTE_INVALID_HANDLE</term>
            <term>The handle specified by the hDescriptor parameter is not valid.</term>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCryptGetProtectionDescriptorInfo(Vanara.PInvoke.NCrypt.NCRYPT_DESCRIPTOR_HANDLE,System.IntPtr,Vanara.PInvoke.NCrypt.ProtectionDescriptorInfoType,System.IntPtr@)">
            <summary>
            <para>The <c>NCryptGetProtectionDescriptorInfo</c> function retrieves a protection descriptor rule string.</para>
            </summary>
            <param name="hDescriptor">
            <para>Protection descriptor handle created by calling NCryptCreateProtectionDescriptor.</para>
            </param>
            <param name="pMemPara">
            <para>
            Pointer to an NCRYPT_ALLOC_PARA structure that you can use to specify custom memory management functions. If you set this
            argument to <c>NULL</c>, the LocalAlloc function is used internally to allocate memory and your application must call LocalFree
            to release memory pointed to by the ppvInfo parameter.
            </para>
            </param>
            <param name="dwInfoType">
            <para>Specifies how to return descriptor information to the ppvInfo parameter. This can be the following value:</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>NCRYPT_PROTECTION_INFO_TYPE_DESCRIPTOR_STRING</term>
            <term>The ppvInfo argument returns the descriptor rule string.</term>
            </item>
            </list>
            </param>
            <param name="ppvInfo">
            <para>Pointer to the descriptor information.</para>
            </param>
            <returns>
            <para>
            Returns a status code that indicates the success or failure of the function. Possible return codes include, but are not limited
            to, the following.
            </para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>NTE_INVALID_PARAMETER</term>
            <term>The ppvInfo parameter cannot be NULL.</term>
            </item>
            <item>
            <term>NTE_NOT_SUPPORTED</term>
            <term>An unsupported value was specified in the dwInfoType parameter.</term>
            </item>
            <item>
            <term>NTE_INVALID_HANDLE</term>
            <term>The handle specified by the hDescriptor parameter is not valid.</term>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCryptProtectSecret(Vanara.PInvoke.NCrypt.NCRYPT_DESCRIPTOR_HANDLE,Vanara.PInvoke.NCrypt.ProtectFlags,System.IntPtr,System.UInt32,Vanara.PInvoke.NCrypt.NCRYPT_ALLOC_PARA@,Vanara.PInvoke.HWND,System.IntPtr@,System.UInt32@)">
            <summary>
            <para>
            The <c>NCryptProtectSecret</c> function encrypts data to a specified protection descriptor. Call NCryptUnprotectSecret to decrypt
            the data.
            </para>
            </summary>
            <param name="hDescriptor">
            <para>Handle of the protection descriptor object. Create the handle by calling NCryptCreateProtectionDescriptor.</para>
            </param>
            <param name="dwFlags">
            <para>The flag can be zero or the following value.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>NCRYPT_SILENT_FLAG</term>
            <term>Requests that the key service provider not display a user interface.</term>
            </item>
            </list>
            </param>
            <param name="pbData">
            <para>Pointer to the byte array to be protected.</para>
            </param>
            <param name="cbData">
            <para>Number of bytes in the binary array specified by the pbData parameter.</para>
            </param>
            <param name="pMemPara">
            <para>
            Pointer to an NCRYPT_ALLOC_PARA structure that you can use to specify custom memory management functions. If you set this
            argument to <c>NULL</c>, the LocalAlloc function is used internally to allocate memory and your application must call LocalFree
            to release memory pointed to by the ppbProtectedBlob parameter.
            </para>
            </param>
            <param name="hWnd">
            <para>Handle to the parent window of the user interface, if any, to be displayed.</para>
            </param>
            <param name="ppbProtectedBlob">
            <para>Address of a variable that receives a pointer to the encrypted data.</para>
            </param>
            <param name="pcbProtectedBlob">
            <para>
            Pointer to a <c>ULONG</c> variable that contains the size, in bytes, of the encrypted data pointed to by the ppbProtectedBlob variable.
            </para>
            </param>
            <returns>
            <para>
            Returns a status code that indicates the success or failure of the function. Possible return codes include, but are not limited
            to, the following.
            </para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>NTE_INVALID_PARAMETER</term>
            <term>
            The pbData, ppbProtectedBlob, and pcbProtectedBlob parameters cannot be NULL. The cbData parameter cannot be less than one.
            </term>
            </item>
            <item>
            <term>NTE_NO_MEMORY</term>
            <term>Insufficient memory exists to allocate the content encryption key.</term>
            </item>
            <item>
            <term>NTE_INVALID_HANDLE</term>
            <term>The handle specified by the hDescriptor parameter is not valid.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            Use the <c>NCryptProtectSecret</c> function to protect keys, key material, and passwords. Use the NCryptStreamOpenToProtect and
            the NCryptStreamUpdate functions to encrypt larger messages.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCryptProtectSecret(Vanara.PInvoke.NCrypt.NCRYPT_DESCRIPTOR_HANDLE,Vanara.PInvoke.NCrypt.ProtectFlags,System.IntPtr,System.UInt32,System.IntPtr,Vanara.PInvoke.HWND,System.IntPtr@,System.UInt32@)">
            <summary>
            <para>
            The <c>NCryptProtectSecret</c> function encrypts data to a specified protection descriptor. Call NCryptUnprotectSecret to decrypt
            the data.
            </para>
            </summary>
            <param name="hDescriptor">
            <para>Handle of the protection descriptor object. Create the handle by calling NCryptCreateProtectionDescriptor.</para>
            </param>
            <param name="dwFlags">
            <para>The flag can be zero or the following value.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>NCRYPT_SILENT_FLAG</term>
            <term>Requests that the key service provider not display a user interface.</term>
            </item>
            </list>
            </param>
            <param name="pbData">
            <para>Pointer to the byte array to be protected.</para>
            </param>
            <param name="cbData">
            <para>Number of bytes in the binary array specified by the pbData parameter.</para>
            </param>
            <param name="pMemPara">
            <para>
            Pointer to an NCRYPT_ALLOC_PARA structure that you can use to specify custom memory management functions. If you set this
            argument to <c>NULL</c>, the LocalAlloc function is used internally to allocate memory and your application must call LocalFree
            to release memory pointed to by the ppbProtectedBlob parameter.
            </para>
            </param>
            <param name="hWnd">
            <para>Handle to the parent window of the user interface, if any, to be displayed.</para>
            </param>
            <param name="ppbProtectedBlob">
            <para>Address of a variable that receives a pointer to the encrypted data.</para>
            </param>
            <param name="pcbProtectedBlob">
            <para>
            Pointer to a <c>ULONG</c> variable that contains the size, in bytes, of the encrypted data pointed to by the ppbProtectedBlob variable.
            </para>
            </param>
            <returns>
            <para>
            Returns a status code that indicates the success or failure of the function. Possible return codes include, but are not limited
            to, the following.
            </para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>NTE_INVALID_PARAMETER</term>
            <term>
            The pbData, ppbProtectedBlob, and pcbProtectedBlob parameters cannot be NULL. The cbData parameter cannot be less than one.
            </term>
            </item>
            <item>
            <term>NTE_NO_MEMORY</term>
            <term>Insufficient memory exists to allocate the content encryption key.</term>
            </item>
            <item>
            <term>NTE_INVALID_HANDLE</term>
            <term>The handle specified by the hDescriptor parameter is not valid.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            Use the <c>NCryptProtectSecret</c> function to protect keys, key material, and passwords. Use the NCryptStreamOpenToProtect and
            the NCryptStreamUpdate functions to encrypt larger messages.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCryptQueryProtectionDescriptorName(System.String,System.Text.StringBuilder,Vanara.PInvoke.SizeT@,Vanara.PInvoke.NCrypt.ProtectionDescriptorNameFlags)">
            <summary>
            <para>
            The <c>NCryptQueryProtectionDescriptorName</c> function retrieves the protection descriptor rule string associated with a
            registered descriptor display name.
            </para>
            </summary>
            <param name="pwszName">
            <para>
            The registered display name for the protection descriptor. Register a name by calling the NCryptRegisterProtectionDescriptorName function.
            </para>
            </param>
            <param name="pwszDescriptorString">
            <para>
            A null-terminated Unicode string that contains the protection descriptor rule. Set this value to <c>NULL</c> and set the size of
            the descriptor string pointed to by pcDescriptorString argument to zero on your initial call to this function. For more
            information, see Remarks.
            </para>
            </param>
            <param name="pcDescriptorString">
            <para>
            Pointer to a variable that contains the number of characters in the string retrieved in the pwszDescriptorString parameter. Set
            the variable to zero on your initial call to this function. For more information, see Remarks.
            </para>
            </param>
            <param name="dwFlags">
            <para>
            Flag that specifies which registry hive to query for the registered name. This can be zero to look in the
            <c>HKEY_CURRENT_USER</c> hive or you can specify <c>NCRYPT_MACHINE_KEY_FLAG</c> to query the <c>HKEY_LOCAL_MACHINE</c> hive.
            </para>
            </param>
            <returns>
            <para>
            Returns a status code that indicates the success or failure of the function. Possible return codes include, but are not limited
            to, the following.
            </para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>NTE_INVALID_PARAMETER</term>
            <term>The pwszName parameter cannot be NULL, and the value pointed to by the parameter cannot be an empty string.</term>
            </item>
            <item>
            <term>NTE_BAD_FLAGS</term>
            <term>The dwFlags parameter must be zero or NCRYPT_MACHINE_KEY_FLAG.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            To retrieve a protection descriptor rule string, you must call this function twice. The first time you call, set the
            pwszDescriptorString argument to <c>NULL</c> and the value pointed to by the pcDescriptorString argument to zero. Your first call
            retrieves the number of characters in the descriptor string. Use this number to allocate memory for the string and retrieve a
            pointer to the allocated buffer. To retrieve the string, call the function again using the pointer.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCryptRegisterProtectionDescriptorName(System.String,System.String,Vanara.PInvoke.NCrypt.ProtectionDescriptorNameFlags)">
            <summary>
            <para>
            The <c>NCryptRegisterProtectionDescriptorName</c> function registers the display name and the associated rule string for a
            protection descriptor.
            </para>
            </summary>
            <param name="pwszName">
            <para>Pointer to a null-terminated Unicode string that contains the display name of the descriptor to be registered.</para>
            </param>
            <param name="pwszDescriptorString">
            <para>
            Pointer to a null-terminated Unicode string that contains a protection descriptor rule. If this parameter is <c>NULL</c> or the
            string is empty, the registry value previously created for the pwszName parameter will be deleted.
            </para>
            </param>
            <param name="dwFlags">
            <para>
            A constant that indicates the registry hive under which to register the new entry. If this value is zero (0), the registry root
            is <c>HKEY_CURRENT_USER</c>. If this value is <c>NCRYPT_MACHINE_KEY_FLAG</c>, the root is <c>HKEY_LOCAL_MACHINE</c>.
            </para>
            </param>
            <returns>
            <para>
            Returns a status code that indicates the success or failure of the function. Possible return codes include, but are not limited
            to, the following.
            </para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>NTE_INVALID_PARAMETER</term>
            <term>The pwszName parameter cannot be NULL, and the value pointed to by the parameter cannot be an empty string.</term>
            </item>
            <item>
            <term>NTE_BAD_FLAGS</term>
            <term>The dwFlags parameter must be zero or NCRYPT_MACHINE_KEY_FLAG.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            The registry key created by using this function is not volatile. The information is stored in a file and preserved when the
            computer shuts down.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCryptStreamClose(Vanara.PInvoke.NCrypt.NCRYPT_STREAM_HANDLE)">
            <summary>
            <para>
            The <c>NCryptStreamClose</c> function closes a data protection stream object opened by using the NCryptStreamOpenToProtect or
            NCryptStreamOpenToUnprotect functions.
            </para>
            </summary>
            <param name="hStream">
            <para>Data stream handle returned by NCryptStreamOpenToProtect or NCryptStreamOpenToUnprotect.</para>
            </param>
            <returns>
            <para>
            Returns a status code that indicates the success or failure of the function. Possible return codes include, but are not limited
            to, the following.
            </para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>NTE_INVALID_HANDLE</term>
            <term>The handle specified by the hStream parameter is not valid.</term>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCryptStreamOpenToProtect(Vanara.PInvoke.NCrypt.NCRYPT_DESCRIPTOR_HANDLE,Vanara.PInvoke.NCrypt.ProtectFlags,Vanara.PInvoke.HWND,Vanara.PInvoke.NCrypt.NCRYPT_PROTECT_STREAM_INFO@,Vanara.PInvoke.NCrypt.SafeNCRYPT_STREAM_HANDLE@)">
            <summary>
            <para>
            The <c>NCryptStreamOpenToProtect</c> function opens a stream object that can be used to encrypt large amounts of data to a given
            protection descriptor. Call NCryptStreamUpdate to encrypt the content. To encrypt smaller messages such as keys and passwords,
            call NCryptProtectSecret.
            </para>
            </summary>
            <param name="hDescriptor">
            <para>Handle of the protection descriptor. Create the handle by calling NCryptCreateProtectionDescriptor.</para>
            </param>
            <param name="dwFlags">
            <para>The flag can be zero or the following value.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>NCRYPT_SILENT_FLAG</term>
            <term>Requests that the key service provider not display a user interface.</term>
            </item>
            </list>
            </param>
            <param name="hWnd">
            <para>Handle to the parent window of the user interface, if any, to be displayed.</para>
            </param>
            <param name="pStreamInfo">
            <para>
            Pointer to an NCRYPT_PROTECT_STREAM_INFO structure that contains the address of a user defined callback function to receive the
            encrypted data and a pointer to user-defined context data.
            </para>
            </param>
            <param name="phStream">
            <para>Pointer to the stream object handle.</para>
            </param>
            <returns>
            <para>
            Returns a status code that indicates the success or failure of the function. Possible return codes include, but are not limited
            to, the following.
            </para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>NTE_BAD_FLAGS</term>
            <term>The dwFlags parameter must contain zero (0), NCRYPT_MACHINE_KEY_FLAG, or NCRYPT_SILENT_FLAG.</term>
            </item>
            <item>
            <term>NTE_INVALID_HANDLE</term>
            <term>The handle specified by the hDescriptor parameter is not valid.</term>
            </item>
            <item>
            <term>NTE_INVALID_PARAMETER</term>
            <term>
            The phStream and pStreamInfo parameters cannot be NULL. The callback function pointed to by the pfnStreamOutput member of the
            NCRYPT_PROTECT_STREAM_INFO structure pointed to by the pStreamInfo parameter cannot be NULL.
            </term>
            </item>
            <item>
            <term>NTE_NO_MEMORY</term>
            <term>There was insufficient memory to allocate a data stream.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            The <c>NCryptStreamOpenToProtect</c> function creates an internal stream object that can be used to encrypt large messages. You
            cannot use the object directly. Instead, you must use the object handle returned by this function.
            </para>
            <para>
            Call this function before calling the NCryptStreamUpdate function. If you are encrypting a large file, use
            <c>NCryptStreamUpdate</c> in a loop that advances through the file block by block, encrypting each block as it advances and
            notifying your callback when each block is finished. For more information, see <c>NCryptStreamUpdate</c>.
            </para>
            <para>
            The <c>NCryptStreamOpenToProtect</c> function writes the unencrypted protection descriptor rule string to the stream object
            header so that NCryptStreamOpenToUnprotect will be able to start the decrypting the stream by using the same protector used
            during encryption.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCryptStreamOpenToUnprotect(Vanara.PInvoke.NCrypt.NCRYPT_PROTECT_STREAM_INFO@,Vanara.PInvoke.NCrypt.ProtectFlags,Vanara.PInvoke.HWND,Vanara.PInvoke.NCrypt.SafeNCRYPT_STREAM_HANDLE@)">
            <summary>
            <para>
            The <c>NCryptStreamOpenToUnprotect</c> function opens a stream object that can be used to decrypt large amounts of data to the
            same protection descriptor used for encryption. Call NCryptStreamUpdate to perform the decryption. To decrypt smaller messages
            such as keys and passwords, call NCryptUnprotectSecret.
            </para>
            </summary>
            <param name="pStreamInfo">
            <para>
            Pointer to an NCRYPT_PROTECT_STREAM_INFO structure that contains the address of a user defined callback function to receive the
            decrypted data and a pointer to user-defined context data.
            </para>
            </param>
            <param name="dwFlags">
            <para>A flag that specifies additional information for the key service provider. This can be zero or the following value.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>NCRYPT_SILENT_FLAG</term>
            <term>Requests that the key service provider not display a user interface.</term>
            </item>
            </list>
            </param>
            <param name="hWnd">
            <para>Handle to the parent window of the user interface, if any, to be displayed.</para>
            </param>
            <param name="phStream">
            <para>Pointer to the handle of the decrypted stream of data.</para>
            </param>
            <returns>
            <para>
            Returns a status code that indicates the success or failure of the function. Possible return codes include, but are not limited
            to, the following.
            </para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>NTE_BAD_FLAGS</term>
            <term>The dwFlags parameter must contain zero (0) or NCRYPT_SILENT_FLAG.</term>
            </item>
            <item>
            <term>NTE_INVALID_PARAMETER</term>
            <term>
            The phStream and pStreamInfo parameters cannot be NULL. The callback function pointed to by the pfnStreamOutput member of the
            NCRYPT_PROTECT_STREAM_INFO structure pointed to by the pStreamInfo parameter cannot be NULL.
            </term>
            </item>
            <item>
            <term>NTE_NO_MEMORY</term>
            <term>There was insufficient memory to allocate a data stream.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            The <c>NCryptStreamOpenToUnprotect</c> function creates an internal stream object that can be used to encrypt large messages. You
            cannot use the object directly. Instead, you must use the object handle returned by this function.
            </para>
            <para>
            Call this function before calling the NCryptStreamUpdate function. If you are encrypting a large file, use
            <c>NCryptStreamUpdate</c> in a loop that advances through the file block by block, encrypting each block as it advances and
            notifying your callback when each block is finished. For more information, see <c>NCryptStreamUpdate</c>.
            </para>
            <para>
            The <c>NCryptStreamOpenToUnprotect</c> function retrieves the unencrypted protection descriptor rule string from the stream
            header. The rule string is placed in the header by the <c>NCryptStreamOpenToUnprotect</c> function.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCryptStreamOpenToUnprotectEx(Vanara.PInvoke.NCrypt.NCRYPT_PROTECT_STREAM_INFO_EX@,Vanara.PInvoke.NCrypt.ProtectFlags,Vanara.PInvoke.HWND,Vanara.PInvoke.NCrypt.SafeNCRYPT_STREAM_HANDLE@)">
            <summary>
            <para>
            [Some information relates to pre-released product which may be substantially modified before it's commercially released.
            Microsoft makes no warranties, express or implied, with respect to the information provided here.]
            </para>
            <para>
            Opens a stream object that can be used to decrypt large amounts of data to the same protection descriptor used for
            encryption.Call NCryptStreamUpdate to perform the decryption. To decrypt smaller messages such as keys and passwords, call NCryptUnprotectSecret.
            </para>
            </summary>
            <param name="pStreamInfo">
            <para>A pointer to NCRYPT_PROTECT_STREAM_INFO_EX.</para>
            </param>
            <param name="dwFlags">
            <para>Only the NCRYPT_SILENT_FLAG is supported.</para>
            </param>
            <param name="hWnd">
            <para>A window handle to be used as the parent of any user interface that is displayed.</para>
            </param>
            <param name="phStream">
            <para>Receives a pointer to a stream handle.</para>
            </param>
            <returns>
            <para>
            Returns a status code that indicates the success or failure of the function. Possible return codes include, but are not limited to:
            </para>
            <list type="bullet">
            <item>
            <term>ERROR_SUCCESS</term>
            </item>
            <item>
            <term>NTE_INVALID_PARAMETER</term>
            </item>
            <item>
            <term>NTE_BAD_FLAGS</term>
            </item>
            <item>
            <term>NTE_BAD_DATA</term>
            </item>
            <item>
            <term>NTE_NO_MEMORY</term>
            </item>
            <item>
            <term>NTE_NOT_FOUND</term>
            </item>
            <item>
            <term>NTE_NOT_SUPPORTED</term>
            </item>
            <item>
            <term>NTE_INVALID_HANDLE</term>
            </item>
            <item>
            <term>NTE_BAD_KEY</term>
            </item>
            <item>
            <term>NTE_BAD_PROVIDER</term>
            </item>
            <item>
            <term>NTE_BAD_TYPE</term>
            </item>
            <item>
            <term>NTE_DECRYPTION_FAILURE</term>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCryptStreamUpdate(Vanara.PInvoke.NCrypt.NCRYPT_STREAM_HANDLE,System.IntPtr,Vanara.PInvoke.SizeT,System.Boolean)">
            <summary>
            <para>The <c>NCryptStreamUpdate</c> function encrypts and decrypts blocks of data.</para>
            </summary>
            <param name="hStream">
            <para>Handle to the stream object created by calling NCryptStreamOpenToProtect or NCryptStreamOpenToUnprotect.</para>
            </param>
            <param name="pbData">
            <para>Pointer to the byte array to be processed.</para>
            </param>
            <param name="cbData">
            <para>Number of bytes in the binary array specified by the pbData parameter.</para>
            </param>
            <param name="fFinal">
            <para>A Boolean value that specifies whether the last block of data has been processed.</para>
            </param>
            <returns>
            <para>
            Returns a status code that indicates the success or failure of the function. Possible return codes include, but are not limited
            to, the following.
            </para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>NTE_BAD_DATA</term>
            <term>The content could not be decoded.</term>
            </item>
            <item>
            <term>NTE_INVALID_HANDLE</term>
            <term>The stream handle pointed to by the hStream parameter is not valid.</term>
            </item>
            <item>
            <term>NTE_NO_MEMORY</term>
            <term>There was insufficient memory available to process the content.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>You must call NCryptStreamOpenToProtect or NCryptStreamOpenToUnprotect to open a stream before calling <c>NCryptStreamUpdate</c></para>
            <para>
            Messages can be so large that processing them all at once by storing the entire message in memory can be difficult. It is
            possible, however, to process large messages by partitioning the data to be processed into manageable blocks.
            </para>
            <para>
            To do this, use <c>NCryptStreamUpdate</c> in a loop that advances through the file block by block. As the streamed message is
            processed, the resulting output data is passed back to your application by using a callback function that you specify. This is
            shown by the following example. For more information about the callback function, see PFNCryptStreamOutputCallback.
            </para>
            <para>
            <c>Note</c> We recommend against using too small of a block size. Small blocks require more calls and therefore more calling
            overhead. Further, the streaming APIs are optimized for larger blocks. You should experiment to find the best block size for the
            data you must process.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCryptUnprotectSecret(Vanara.PInvoke.NCrypt.SafeNCRYPT_DESCRIPTOR_HANDLE@,Vanara.PInvoke.NCrypt.UnprotectSecretFlags,System.IntPtr,System.UInt32,Vanara.PInvoke.NCrypt.NCRYPT_ALLOC_PARA@,Vanara.PInvoke.HWND,System.IntPtr@,System.UInt32@)">
            <summary>
            <para>
            The <c>NCryptUnprotectSecret</c> function decrypts data to a specified protection descriptor. Call NCryptProtectSecret to encrypt
            the data.
            </para>
            </summary>
            <param name="phDescriptor">
            <para>Pointer to the protection descriptor handle.</para>
            </param>
            <param name="dwFlags">
            <para>The flag can be zero or a bitwise OR of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>NCRYPT_SILENT_FLAG</term>
            <term>Requests that the key service provider not display a user interface.</term>
            </item>
            <item>
            <term>NCRYPT_UNPROTECT_NO_DECRYPT</term>
            <term>Decodes only the header of the protected data blob. No actual decryption takes place.</term>
            </item>
            </list>
            </param>
            <param name="pbProtectedBlob">
            <para>Pointer to an array of bytes that contains the data to decrypt.</para>
            </param>
            <param name="cbProtectedBlob">
            <para>The number of bytes in the array pointed to by the pbProtectedBlob parameter.</para>
            </param>
            <param name="pMemPara">
            <para>
            Pointer to an NCRYPT_ALLOC_PARA structure that you can use to specify custom memory management functions. If you set this
            argument to <c>NULL</c>, the LocalAlloc function is used internally to allocate memory and your application must call LocalFree
            to release memory pointed to by the ppbData parameter.
            </para>
            </param>
            <param name="hWnd">
            <para>Handle to the parent window of the user interface, if any, to be displayed.</para>
            </param>
            <param name="ppbData">
            <para>Address of a variable that receives a pointer to the decrypted data.</para>
            </param>
            <param name="pcbData">
            <para>Pointer to a <c>ULONG</c> variable that contains the size, in bytes, of the decrypted data pointed to by the ppbData variable.</para>
            </param>
            <returns>
            <para>
            Returns a status code that indicates the success or failure of the function. Possible return codes include, but are not limited
            to, the following.
            </para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>NTE_BAD_FLAGS</term>
            <term>The dwFlags parameter can only contain NCRYPT_SILENT_FLAG or NCRYPT_UNPROTECT_NO_DECRYPT.</term>
            </item>
            <item>
            <term>NTE_INVALID_PARAMETER</term>
            <term>The pbProtectedBlob, ppbData, and pcbData parameters cannot be NULL. The cbData parameter cannot be less than one.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            Use the <c>NCryptUnprotectSecret</c> function to decrypt keys, key material, and passwords. Use the NCryptStreamOpenToUnprotect
            and the NCryptStreamUpdate functions to decrypt larger messages.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCryptUnprotectSecret(Vanara.PInvoke.NCrypt.SafeNCRYPT_DESCRIPTOR_HANDLE@,Vanara.PInvoke.NCrypt.UnprotectSecretFlags,System.IntPtr,System.UInt32,System.IntPtr,Vanara.PInvoke.HWND,System.IntPtr@,System.UInt32@)">
            <summary>
            <para>
            The <c>NCryptUnprotectSecret</c> function decrypts data to a specified protection descriptor. Call NCryptProtectSecret to encrypt
            the data.
            </para>
            </summary>
            <param name="phDescriptor">
            <para>Pointer to the protection descriptor handle.</para>
            </param>
            <param name="dwFlags">
            <para>The flag can be zero or a bitwise OR of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>NCRYPT_SILENT_FLAG</term>
            <term>Requests that the key service provider not display a user interface.</term>
            </item>
            <item>
            <term>NCRYPT_UNPROTECT_NO_DECRYPT</term>
            <term>Decodes only the header of the protected data blob. No actual decryption takes place.</term>
            </item>
            </list>
            </param>
            <param name="pbProtectedBlob">
            <para>Pointer to an array of bytes that contains the data to decrypt.</para>
            </param>
            <param name="cbProtectedBlob">
            <para>The number of bytes in the array pointed to by the pbProtectedBlob parameter.</para>
            </param>
            <param name="pMemPara">
            <para>
            Pointer to an NCRYPT_ALLOC_PARA structure that you can use to specify custom memory management functions. If you set this
            argument to <c>NULL</c>, the LocalAlloc function is used internally to allocate memory and your application must call LocalFree
            to release memory pointed to by the ppbData parameter.
            </para>
            </param>
            <param name="hWnd">
            <para>Handle to the parent window of the user interface, if any, to be displayed.</para>
            </param>
            <param name="ppbData">
            <para>Address of a variable that receives a pointer to the decrypted data.</para>
            </param>
            <param name="pcbData">
            <para>Pointer to a <c>ULONG</c> variable that contains the size, in bytes, of the decrypted data pointed to by the ppbData variable.</para>
            </param>
            <returns>
            <para>
            Returns a status code that indicates the success or failure of the function. Possible return codes include, but are not limited
            to, the following.
            </para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_SUCCESS</term>
            <term>The function was successful.</term>
            </item>
            <item>
            <term>NTE_BAD_FLAGS</term>
            <term>The dwFlags parameter can only contain NCRYPT_SILENT_FLAG or NCRYPT_UNPROTECT_NO_DECRYPT.</term>
            </item>
            <item>
            <term>NTE_INVALID_PARAMETER</term>
            <term>The pbProtectedBlob, ppbData, and pcbData parameters cannot be NULL. The cbData parameter cannot be less than one.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            Use the <c>NCryptUnprotectSecret</c> function to decrypt keys, key material, and passwords. Use the NCryptStreamOpenToUnprotect
            and the NCryptStreamUpdate functions to decrypt larger messages.
            </para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.NCrypt.NCRYPT_DESCRIPTOR_HANDLE">
            <summary>Provides a handle to a protection descriptor.</summary>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCRYPT_DESCRIPTOR_HANDLE.#ctor(System.IntPtr)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.NCrypt.NCRYPT_DESCRIPTOR_HANDLE"/> struct.</summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
        </member>
        <member name="P:Vanara.PInvoke.NCrypt.NCRYPT_DESCRIPTOR_HANDLE.NULL">
            <summary>Returns an invalid handle by instantiating a <see cref="T:Vanara.PInvoke.NCrypt.NCRYPT_DESCRIPTOR_HANDLE"/> object with <see cref="F:System.IntPtr.Zero"/>.</summary>
        </member>
        <member name="P:Vanara.PInvoke.NCrypt.NCRYPT_DESCRIPTOR_HANDLE.IsNull">
            <summary>Gets a value indicating whether this instance is a null handle.</summary>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCRYPT_DESCRIPTOR_HANDLE.op_Explicit(Vanara.PInvoke.NCrypt.NCRYPT_DESCRIPTOR_HANDLE)~System.IntPtr">
            <summary>Performs an explicit conversion from <see cref="T:Vanara.PInvoke.NCrypt.NCRYPT_DESCRIPTOR_HANDLE"/> to <see cref="T:System.IntPtr"/>.</summary>
            <param name="h">The handle.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCRYPT_DESCRIPTOR_HANDLE.op_Implicit(System.IntPtr)~Vanara.PInvoke.NCrypt.NCRYPT_DESCRIPTOR_HANDLE">
            <summary>Performs an implicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:Vanara.PInvoke.NCrypt.NCRYPT_DESCRIPTOR_HANDLE"/>.</summary>
            <param name="h">The pointer to a handle.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCRYPT_DESCRIPTOR_HANDLE.op_Inequality(Vanara.PInvoke.NCrypt.NCRYPT_DESCRIPTOR_HANDLE,Vanara.PInvoke.NCrypt.NCRYPT_DESCRIPTOR_HANDLE)">
            <summary>Implements the operator !=.</summary>
            <param name="h1">The first handle.</param>
            <param name="h2">The second handle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCRYPT_DESCRIPTOR_HANDLE.op_Equality(Vanara.PInvoke.NCrypt.NCRYPT_DESCRIPTOR_HANDLE,Vanara.PInvoke.NCrypt.NCRYPT_DESCRIPTOR_HANDLE)">
            <summary>Implements the operator ==.</summary>
            <param name="h1">The first handle.</param>
            <param name="h2">The second handle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCRYPT_DESCRIPTOR_HANDLE.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCRYPT_DESCRIPTOR_HANDLE.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCRYPT_DESCRIPTOR_HANDLE.DangerousGetHandle">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.NCrypt.NCRYPT_PROTECT_STREAM_INFO">
            <summary>
            The <c>NCRYPT_PROTECT_STREAM_INFO</c> structure is used by the NCryptStreamOpenToProtect and NCryptStreamOpenToUnprotect
            functions to pass blocks of processed data to your application.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.NCRYPT_PROTECT_STREAM_INFO.pfnStreamOutput">
            <summary>
            Address of a callback function that accepts data from the stream encryption or decryption process. for more information, see PFNCryptStreamOutputCallback.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.NCRYPT_PROTECT_STREAM_INFO.pvCallbackCtxt">
            <summary>
            Pointer to a buffer supplied the caller. The buffer is not modified by the data protection API. You can use the buffer to
            keep track of your application.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.NCrypt.NCRYPT_PROTECT_STREAM_INFO_EX">
            <summary>
            The <c>NCRYPT_PROTECT_STREAM_INFO_EX</c> structure is used by the NCryptStreamOpenToProtectEx and NCryptStreamOpenToUnprotectEx
            functions to pass blocks of processed data to your application.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.NCRYPT_PROTECT_STREAM_INFO_EX.pfnStreamOutput">
            <summary>
            Address of a callback function that accepts data from the stream encryption or decryption process. for more information, see PFNCryptStreamOutputCallback.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.NCRYPT_PROTECT_STREAM_INFO_EX.pvCallbackCtxt">
            <summary>
            Pointer to a buffer supplied the caller. The buffer is not modified by the data protection API. You can use the buffer to
            keep track of your application.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.NCrypt.NCRYPT_STREAM_HANDLE">
            <summary>Provides a handle to a data protection stream object.</summary>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCRYPT_STREAM_HANDLE.#ctor(System.IntPtr)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.NCrypt.NCRYPT_STREAM_HANDLE"/> struct.</summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
        </member>
        <member name="P:Vanara.PInvoke.NCrypt.NCRYPT_STREAM_HANDLE.NULL">
            <summary>Returns an invalid handle by instantiating a <see cref="T:Vanara.PInvoke.NCrypt.NCRYPT_STREAM_HANDLE"/> object with <see cref="F:System.IntPtr.Zero"/>.</summary>
        </member>
        <member name="P:Vanara.PInvoke.NCrypt.NCRYPT_STREAM_HANDLE.IsNull">
            <summary>Gets a value indicating whether this instance is a null handle.</summary>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCRYPT_STREAM_HANDLE.op_Explicit(Vanara.PInvoke.NCrypt.NCRYPT_STREAM_HANDLE)~System.IntPtr">
            <summary>Performs an explicit conversion from <see cref="T:Vanara.PInvoke.NCrypt.NCRYPT_STREAM_HANDLE"/> to <see cref="T:System.IntPtr"/>.</summary>
            <param name="h">The handle.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCRYPT_STREAM_HANDLE.op_Implicit(System.IntPtr)~Vanara.PInvoke.NCrypt.NCRYPT_STREAM_HANDLE">
            <summary>Performs an implicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:Vanara.PInvoke.NCrypt.NCRYPT_STREAM_HANDLE"/>.</summary>
            <param name="h">The pointer to a handle.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCRYPT_STREAM_HANDLE.op_Inequality(Vanara.PInvoke.NCrypt.NCRYPT_STREAM_HANDLE,Vanara.PInvoke.NCrypt.NCRYPT_STREAM_HANDLE)">
            <summary>Implements the operator !=.</summary>
            <param name="h1">The first handle.</param>
            <param name="h2">The second handle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCRYPT_STREAM_HANDLE.op_Equality(Vanara.PInvoke.NCrypt.NCRYPT_STREAM_HANDLE,Vanara.PInvoke.NCrypt.NCRYPT_STREAM_HANDLE)">
            <summary>Implements the operator ==.</summary>
            <param name="h1">The first handle.</param>
            <param name="h2">The second handle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCRYPT_STREAM_HANDLE.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCRYPT_STREAM_HANDLE.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.NCRYPT_STREAM_HANDLE.DangerousGetHandle">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.NCrypt.SafeNCRYPT_DESCRIPTOR_HANDLE">
            <summary>Provides a <see cref="T:System.Runtime.InteropServices.SafeHandle"/> for <see cref="T:Vanara.PInvoke.NCrypt.NCRYPT_DESCRIPTOR_HANDLE"/> that is disposed using <see cref="M:Vanara.PInvoke.NCrypt.NCryptCloseProtectionDescriptor(Vanara.PInvoke.NCrypt.NCRYPT_DESCRIPTOR_HANDLE)"/>.</summary>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.SafeNCRYPT_DESCRIPTOR_HANDLE.#ctor(System.IntPtr,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.NCrypt.SafeNCRYPT_DESCRIPTOR_HANDLE"/> class and assigns an existing handle.</summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
            <param name="ownsHandle">
            <see langword="true"/> to reliably release the handle during the finalization phase; otherwise, <see langword="false"/> (not recommended).
            </param>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.SafeNCRYPT_DESCRIPTOR_HANDLE.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.NCrypt.SafeNCRYPT_DESCRIPTOR_HANDLE"/> class.</summary>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.SafeNCRYPT_DESCRIPTOR_HANDLE.op_Implicit(Vanara.PInvoke.NCrypt.SafeNCRYPT_DESCRIPTOR_HANDLE)~Vanara.PInvoke.NCrypt.NCRYPT_DESCRIPTOR_HANDLE">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.NCrypt.SafeNCRYPT_DESCRIPTOR_HANDLE"/> to <see cref="T:Vanara.PInvoke.NCrypt.NCRYPT_DESCRIPTOR_HANDLE"/>.</summary>
            <param name="h">The safe handle instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.SafeNCRYPT_DESCRIPTOR_HANDLE.InternalReleaseHandle">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.NCrypt.SafeNCRYPT_STREAM_HANDLE">
            <summary>Provides a <see cref="T:System.Runtime.InteropServices.SafeHandle"/> for <see cref="T:Vanara.PInvoke.NCrypt.NCRYPT_STREAM_HANDLE"/> that is disposed using <see cref="M:Vanara.PInvoke.NCrypt.NCryptStreamClose(Vanara.PInvoke.NCrypt.NCRYPT_STREAM_HANDLE)"/>.</summary>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.SafeNCRYPT_STREAM_HANDLE.#ctor(System.IntPtr,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.NCrypt.SafeNCRYPT_STREAM_HANDLE"/> class and assigns an existing handle.</summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
            <param name="ownsHandle">
            <see langword="true"/> to reliably release the handle during the finalization phase; otherwise, <see langword="false"/> (not recommended).
            </param>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.SafeNCRYPT_STREAM_HANDLE.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.NCrypt.SafeNCRYPT_STREAM_HANDLE"/> class.</summary>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.SafeNCRYPT_STREAM_HANDLE.op_Implicit(Vanara.PInvoke.NCrypt.SafeNCRYPT_STREAM_HANDLE)~Vanara.PInvoke.NCrypt.NCRYPT_STREAM_HANDLE">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.NCrypt.SafeNCRYPT_STREAM_HANDLE"/> to <see cref="T:Vanara.PInvoke.NCrypt.NCRYPT_STREAM_HANDLE"/>.</summary>
            <param name="h">The safe handle instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.SafeNCRYPT_STREAM_HANDLE.InternalReleaseHandle">
            <inheritdoc/>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.NCRYPT_SSL_MAX_NAME_SIZE">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.NCrypt.PacketContentType">
            <summary>
            The content type that corresponds to this packet, which specifies the higher level protocol used to process the enclosed packet.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PacketContentType.CT_CHANGE_CIPHER_SPEC">
            <summary>Indicates a change in the ciphering strategy.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PacketContentType.CT_ALERT">
            <summary>Indicates that the enclosed packet contains an alert.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PacketContentType.CT_HANDSHAKE">
            <summary>Indicates that the enclosed packet is part of the handshake protocol.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.PacketContentType.CT_APPLICATIONDATA">
            <summary>Indicates that the packet contains application data.</summary>
        </member>
        <member name="T:Vanara.PInvoke.NCrypt.SslHost">
            <summary>Specifies the type of host for the call.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.SslHost.NCRYPT_SSL_CLIENT_FLAG">
            <summary>Specifies that this is a client call.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.SslHost.NCRYPT_SSL_SERVER_FLAG">
            <summary>Specifies that this is a server call.</summary>
        </member>
        <member name="T:Vanara.PInvoke.NCrypt.SslProviderCipherSuiteId">
            <summary>CNG SSL Provider Cipher Suite Identifiers</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.SslProviderCipherSuiteId.TLS_RSA_WITH_NULL_MD5">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.SslProviderCipherSuiteId.TLS_RSA_WITH_NULL_SHA">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.SslProviderCipherSuiteId.TLS_RSA_EXPORT_WITH_RC4_40_MD5">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.SslProviderCipherSuiteId.TLS_RSA_WITH_RC4_128_MD5">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.SslProviderCipherSuiteId.TLS_RSA_WITH_RC4_128_SHA">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.SslProviderCipherSuiteId.TLS_RSA_WITH_DES_CBC_SHA">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.SslProviderCipherSuiteId.TLS_RSA_WITH_3DES_EDE_CBC_SHA">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.SslProviderCipherSuiteId.TLS_DHE_DSS_WITH_DES_CBC_SHA">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.SslProviderCipherSuiteId.TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.SslProviderCipherSuiteId.TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.SslProviderCipherSuiteId.TLS_RSA_WITH_AES_128_CBC_SHA">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.SslProviderCipherSuiteId.TLS_DHE_DSS_WITH_AES_128_CBC_SHA">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.SslProviderCipherSuiteId.TLS_DHE_RSA_WITH_AES_128_CBC_SHA">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.SslProviderCipherSuiteId.TLS_RSA_WITH_AES_256_CBC_SHA">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.SslProviderCipherSuiteId.TLS_DHE_DSS_WITH_AES_256_CBC_SHA">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.SslProviderCipherSuiteId.TLS_DHE_RSA_WITH_AES_256_CBC_SHA">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.SslProviderCipherSuiteId.TLS_RSA_EXPORT1024_WITH_DES_CBC_SHA">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.SslProviderCipherSuiteId.TLS_DHE_DSS_EXPORT1024_WITH_DES_CBC_SHA">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.SslProviderCipherSuiteId.TLS_RSA_EXPORT1024_WITH_RC4_56_SHA">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.SslProviderCipherSuiteId.TLS_RSA_WITH_NULL_SHA256">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.SslProviderCipherSuiteId.TLS_RSA_WITH_AES_128_CBC_SHA256">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.SslProviderCipherSuiteId.TLS_RSA_WITH_AES_256_CBC_SHA256">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.SslProviderCipherSuiteId.TLS_DHE_DSS_WITH_AES_128_CBC_SHA256">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.SslProviderCipherSuiteId.TLS_DHE_DSS_WITH_AES_256_CBC_SHA256">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.SslProviderCipherSuiteId.TLS_PSK_WITH_3DES_EDE_CBC_SHA">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.SslProviderCipherSuiteId.TLS_PSK_WITH_AES_128_CBC_SHA">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.SslProviderCipherSuiteId.TLS_PSK_WITH_AES_256_CBC_SHA">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.SslProviderCipherSuiteId.TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.SslProviderCipherSuiteId.TLS_RSA_PSK_WITH_AES_128_CBC_SHA">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.SslProviderCipherSuiteId.TLS_RSA_PSK_WITH_AES_256_CBC_SHA">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.SslProviderCipherSuiteId.TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.SslProviderCipherSuiteId.TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.SslProviderCipherSuiteId.TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.SslProviderCipherSuiteId.TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.SslProviderCipherSuiteId.TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.SslProviderCipherSuiteId.TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.SslProviderCipherSuiteId.TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.SslProviderCipherSuiteId.TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.SslProviderCipherSuiteId.TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.SslProviderCipherSuiteId.TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.SslProviderCipherSuiteId.SSL_CK_RC4_128_WITH_MD5">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.SslProviderCipherSuiteId.SSL_CK_RC4_128_EXPORT40_WITH_MD5">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.SslProviderCipherSuiteId.SSL_CK_RC2_128_CBC_WITH_MD5">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.SslProviderCipherSuiteId.SSL_CK_RC2_128_CBC_EXPORT40_WITH_MD5">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.SslProviderCipherSuiteId.SSL_CK_IDEA_128_CBC_WITH_MD5">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.SslProviderCipherSuiteId.SSL_CK_DES_64_CBC_WITH_MD5">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.SslProviderCipherSuiteId.SSL_CK_DES_192_EDE3_CBC_WITH_MD5">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.NCrypt.SslProviderKeyTypeId">
            <summary>CNG SSL Provider Key Type Identifiers</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.SslProviderKeyTypeId.TLS_ECC_P256_CURVE_KEY_TYPE">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.SslProviderKeyTypeId.TLS_ECC_P384_CURVE_KEY_TYPE">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.SslProviderKeyTypeId.TLS_ECC_P521_CURVE_KEY_TYPE">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.NCrypt.SslProviderProtocolId">
            <summary>CNG SSL Provider Protocol Identifiers</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.SslProviderProtocolId.SSL2_PROTOCOL_VERSION">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.SslProviderProtocolId.SSL3_PROTOCOL_VERSION">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.SslProviderProtocolId.TLS1_PROTOCOL_VERSION">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.SslProviderProtocolId.TLS1_0_PROTOCOL_VERSION">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.SslProviderProtocolId.TLS1_1_PROTOCOL_VERSION">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.SslProviderProtocolId.TLS1_2_PROTOCOL_VERSION">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.SslProviderProtocolId.DTLS1_0_PROTOCOL_VERSION">
            <summary/>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.SslComputeClientAuthHash(Vanara.PInvoke.NCrypt.NCRYPT_PROV_HANDLE,Vanara.PInvoke.NCrypt.NCRYPT_KEY_HANDLE,Vanara.PInvoke.NCrypt.NCRYPT_HASH_HANDLE,System.String,System.IntPtr,System.UInt32,System.UInt32@,System.UInt32)">
            <summary>The <c>SslComputeClientAuthHash</c> function computes a hash to use during certificate authentication.</summary>
            <param name="hSslProvider">The handle of the Secure Sockets Layer protocol (SSL) protocol provider instance.</param>
            <param name="hMasterKey">The handle of the master key object.</param>
            <param name="hHandshakeHash">The handle of the hash of the handshake computed so far.</param>
            <param name="pszAlgId">
            A pointer to a null-terminated Unicode string that identifies the requested cryptographic algorithm. This can be one of the
            standard <c>CNG Algorithm Identifiers</c> or the identifier for another registered algorithm.
            </param>
            <param name="pbOutput">
            The address of a buffer that receives the key BLOB. The cbOutput parameter contains the size of this buffer. If this parameter is
            <c>NULL</c>, this function will place the required size, in bytes, in the <c>DWORD</c> pointed to by the pcbResult parameter.
            </param>
            <param name="cbOutput">The length, in bytes, of the pbOutput buffer.</param>
            <param name="pcbResult">
            A pointer to a <c>DWORD</c> value that specifies the length, in bytes, of the hash written to the pbOutput buffer.
            </param>
            <param name="dwFlags">This parameter is reserved for future use.</param>
            <returns>
            <para>If the function succeeds, it returns zero.</para>
            <para>If the function fails, it returns a nonzero error value.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code/value</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>NTE_INVALID_HANDLE 0x80090026L</term>
            <term>One of the supplied handles is not valid.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            The <c>SslComputeClientAuthHash</c> function computes the hash that is sent in the certificate verification message of the SSL
            handshake. The hash value is computed by creating a hash that contains the master secret with a hash of all previous handshake
            messages sent or received. For more information about the SSL handshake sequence, see Description of the Secure Sockets Layer
            (SSL) Handshake.
            </para>
            <para>
            The manner in which the hash is computed depends on the protocol and cipher suite used. In addition, the hash depends on the type
            of client authentication key used; the pszAlgId parameter indicates the type of key used for client authentication.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.SslComputeEapKeyBlock(Vanara.PInvoke.NCrypt.NCRYPT_PROV_HANDLE,Vanara.PInvoke.NCrypt.NCRYPT_KEY_HANDLE,System.IntPtr,System.UInt32,System.IntPtr,System.UInt32,System.UInt32@,Vanara.PInvoke.NCrypt.SslHost)">
            <summary>
            The <c>SslComputeEapKeyBlock</c> function computes the key block used by the Extensible Authentication Protocol (EAP).
            </summary>
            <param name="hSslProvider">The handle of the Secure Sockets Layer protocol (SSL) protocol provider instance.</param>
            <param name="hMasterKey">The handle of the master key object.</param>
            <param name="pbRandoms">
            A pointer to a buffer that contains a concatenation of the client_random and server_random values of the SSL session.
            </param>
            <param name="cbRandoms">The length, in bytes, of the pbRandoms buffer.</param>
            <param name="pbOutput">
            The address of a buffer that receives the key BLOB. The cbOutput parameter contains the size of this buffer. If this parameter is
            <c>NULL</c>, this function will place the required size, in bytes, in the <c>DWORD</c> pointed to by the pcbResult parameter.
            </param>
            <param name="cbOutput">The length, in bytes, of the pbOutput buffer.</param>
            <param name="pcbResult">
            A pointer to a <c>DWORD</c> value that specifies the length, in bytes, of the hash written to the pbOutput buffer.
            </param>
            <param name="dwFlags">Set to <c>NCRYPT_SSL_SERVER_FLAG</c> to indicate that this is a server call.</param>
            <returns>
            <para>If the function succeeds, it returns zero.</para>
            <para>If the function fails, it returns a nonzero error value.</para>
            <list type="table">
            <listheader>
            <term>Return code/value</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>NTE_INVALID_HANDLE 0x80090026L</term>
            <term>One of the supplied handles is not valid.</term>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.SslComputeFinishedHash(Vanara.PInvoke.NCrypt.NCRYPT_PROV_HANDLE,Vanara.PInvoke.NCrypt.NCRYPT_KEY_HANDLE,Vanara.PInvoke.NCrypt.NCRYPT_HASH_HANDLE,System.IntPtr,System.UInt32,Vanara.PInvoke.NCrypt.SslHost)">
            <summary>
            The <c>SslComputeFinishedHash</c> function computes the hash sent in the finished message of the Secure Sockets Layer protocol
            (SSL) handshake. For more information about the SSL handshake sequence, see Description of the Secure Sockets Layer (SSL) Handshake.
            </summary>
            <param name="hSslProvider">The handle of the SSL protocol provider instance.</param>
            <param name="hMasterKey">The handle of the master key object.</param>
            <param name="hHandshakeHash">The handle of the hash of the handshake messages.</param>
            <param name="pbOutput">A pointer to a buffer that receives the hash for the finish message.</param>
            <param name="cbOutput">The length, in bytes, of the pbOutput buffer.</param>
            <param name="dwFlags">
            <para>One of the following constants.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>NCRYPT_SSL_CLIENT_FLAG 0x00000001</term>
            <term>Specifies that this is a client call.</term>
            </item>
            <item>
            <term>NCRYPT_SSL_SERVER_FLAG 0x00000002</term>
            <term>Specifies that this is a server call.</term>
            </item>
            </list>
            </param>
            <returns>
            <para>If the function succeeds, it returns zero.</para>
            <para>If the function fails, it returns a nonzero error value.</para>
            <list type="table">
            <listheader>
            <term>Return code/value</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>NTE_INVALID_HANDLE 2148073510 (0x80090026)</term>
            <term>One of the supplied handles is not valid.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The <c>SslComputeFinishedHash</c> function is one of three functions used to generate a hash to use during the SSL handshake.</para>
            <list type="number">
            <item>
            <term>The <c>SslCreateHandshakeHash</c> function is called to obtain a hash handle.</term>
            </item>
            <item>
            <term>The <c>SslHashHandshake</c> function is called any number of times with the hash handle to add data to the hash.</term>
            </item>
            <item>
            <term>The <c>SslComputeFinishedHash</c> function is called with the hash handle to obtain the digest of the hashed data.</term>
            </item>
            </list>
            <para>The hash value is computed by hashing the master secret with a hash of all previous handshake messages sent or received.</para>
            <para>
            The value of cbOutput determines the length of the hash data. When the Transport Layer Security protocol (TLS) 1.0 protocol is
            used, this should always be 12 (bytes). For more information, see The TLS Protocol Version 1.0.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.SslCreateClientAuthHash(Vanara.PInvoke.NCrypt.NCRYPT_PROV_HANDLE,Vanara.PInvoke.NCrypt.NCRYPT_HASH_HANDLE@,Vanara.PInvoke.NCrypt.SslProviderProtocolId,Vanara.PInvoke.NCrypt.SslProviderCipherSuiteId,System.String,System.UInt32)">
            <summary>The <c>SslCreateClientAuthHash</c> function retrieves a handle to the handshake hash that is used for client authentication.</summary>
            <param name="hSslProvider">The handle of the Secure Sockets Layer protocol (SSL) protocol provider instance.</param>
            <param name="phHandshakeHash">A pointer to an <c>NCRYPT_HASH_HANDLE</c> variable to receive the hash handle.</param>
            <param name="dwProtocol">One of the <c>CNG SSL Provider Protocol Identifier</c> values.</param>
            <param name="dwCipherSuite">One of the <c>CNG SSL Provider Cipher Suite Identifier</c> values.</param>
            <param name="pszHashAlgId">One of the <c>CNG Algorithm Identifiers</c> values.</param>
            <param name="dwFlags">This parameter is reserved for future use and must be set to zero.</param>
            <returns>
            <para>If the function succeeds, it returns zero.</para>
            <para>If the function fails, it returns a nonzero error value.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code/value</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>NTE_INVALID_HANDLE 0x80090026L</term>
            <term>The hSslProvider parameter contains a pointer that is not valid.</term>
            </item>
            <item>
            <term>NTE_INVALID_PARAMETER 0x80090027L</term>
            <term>The phHandshakeHash parameter is set to NULL.</term>
            </item>
            <item>
            <term>NTE_NOT_SUPPORTED 0x80090029L</term>
            <term>The selected function is not supported in the specified version of the interface.</term>
            </item>
            <item>
            <term>NTE_NO_MEMORY 0x8009000EL</term>
            <term>Insufficient memory to allocate buffers.</term>
            </item>
            <item>
            <term>NTE_BAD_FLAGS 0x80090009L</term>
            <term>The dwFlags parameter must be set to zero.</term>
            </item>
            </list>
            </returns>
            <remarks>
            The <c>SslCreateClientAuthHash</c> function is called for Transport Layer Security protocol (TLS) 1.2 or later conversations to
            create hash objects that are used to hash handshake messages. It is called once for each possible hashing algorithm that can be
            used in the client authentication signature.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.SslCreateEphemeralKey(Vanara.PInvoke.NCrypt.NCRYPT_PROV_HANDLE,Vanara.PInvoke.NCrypt.NCRYPT_KEY_HANDLE@,Vanara.PInvoke.NCrypt.SslProviderProtocolId,Vanara.PInvoke.NCrypt.SslProviderCipherSuiteId,Vanara.PInvoke.NCrypt.SslProviderKeyTypeId,System.UInt32,System.IntPtr,System.UInt32,System.UInt32)">
            <summary>
            The <c>SslCreateEphemeralKey</c> function creates an ephemeral key for use during the authentication that occurs during the
            Secure Sockets Layer protocol (SSL) handshake.
            </summary>
            <param name="hSslProvider">The handle of the SSL protocol provider instance.</param>
            <param name="phEphemeralKey">The handle of the ephemeral key.</param>
            <param name="dwProtocol">One of the <c>CNG SSL Provider Protocol Identifier</c> values.</param>
            <param name="dwCipherSuite">One of the <c>CNG SSL Provider Cipher Suite Identifier</c> values.</param>
            <param name="dwKeyType">
            One of the <c>CNG SSL Provider Key Type Identifier</c> values. Set this parameter to zero for key types that are not elliptic
            curve cryptography (ECC).
            </param>
            <param name="dwKeyBitLen">The length, in bits, of the key.</param>
            <param name="pbParams">
            A pointer to a buffer to contain parameters for the key that is to be created. If a Diffie-Hellman (ephemeral) key-exchange
            algorithm (DHE) cipher suite is not used, set the pbParams parameter to <c>NULL</c> and the cbParams parameter to zero.
            </param>
            <param name="cbParams">The length, in bytes, of the data in the pbParams buffer.</param>
            <param name="dwFlags">This parameter is reserved for future use.</param>
            <returns>
            <para>If the function succeeds, it returns zero.</para>
            <para>If the function fails, it returns a nonzero error value.</para>
            <list type="table">
            <listheader>
            <term>Return code/value</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>NTE_NO_MEMORY 0x8009000EL</term>
            <term>There is insufficient memory to allocate the buffer.</term>
            </item>
            <item>
            <term>NTE_INVALID_HANDLE 0x80090026L</term>
            <term>The hSslProvider handle is not valid.</term>
            </item>
            <item>
            <term>NTE_INVALID_PARAMETER 0x80090027L</term>
            <term>One of the supplied parameters is not valid.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            When using a DHE cipher suite, the internal SSL implementation passes server p and g parameters to the
            <c>SslCreateEphemeralKey</c> function in the pbParams and cbParams parameters.
            </para>
            <para>
            The format of the data in the pbParams buffer is the same as that used when setting the <c>BCRYPT_DH_PARAMETERS</c> property, and
            it starts with a <c>BCRYPT_DH_PARAMETER_HEADER</c> structure.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.SslCreateHandshakeHash(Vanara.PInvoke.NCrypt.NCRYPT_PROV_HANDLE,Vanara.PInvoke.NCrypt.NCRYPT_HASH_HANDLE@,Vanara.PInvoke.NCrypt.SslProviderProtocolId,Vanara.PInvoke.NCrypt.SslProviderCipherSuiteId,System.UInt32)">
            <summary>The <c>SslCreateHandshakeHash</c> function obtains a hash handle that is used to hash handshake messages.</summary>
            <param name="hSslProvider">The handle of the Secure Sockets Layer protocol (SSL) protocol provider instance.</param>
            <param name="phHandshakeHash">A hash handle that can be passed to other SSL provider functions.</param>
            <param name="dwProtocol">One of the <c>CNG SSL Provider Protocol Identifier</c> values.</param>
            <param name="dwCipherSuite">One of the <c>CNG SSL Provider Cipher Suite Identifier</c> values.</param>
            <param name="dwFlags">This parameter is reserved for future use.</param>
            <returns>
            <para>If the function succeeds, it returns zero.</para>
            <para>If the function fails, it returns a nonzero error value.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code/value</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>NTE_NO_MEMORY 0x8009000EL</term>
            <term>There is insufficient memory to allocate the hash buffer.</term>
            </item>
            <item>
            <term>NTE_INVALID_HANDLE 0x80090026L</term>
            <term>The hSslProvider handle is not valid.</term>
            </item>
            <item>
            <term>NTE_INVALID_PARAMETER 0x80090027L</term>
            <term>The phHandshakeHash is null.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The <c>SslCreateHandshakeHash</c> function is one of three functions used to generate a hash to use during the SSL handshake.</para>
            <list type="number">
            <item>
            <term>The <c>SslCreateHandshakeHash</c> function is called to obtain a hash handle.</term>
            </item>
            <item>
            <term>The <c>SslHashHandshake</c> function is called any number of times with the hash handle to add data to the hash.</term>
            </item>
            <item>
            <term>The <c>SslComputeFinishedHash</c> function is called with the hash handle to obtain the digest of the hashed data.</term>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.SslDecrementProviderReferenceCount(Vanara.PInvoke.NCrypt.NCRYPT_PROV_HANDLE)">
            <summary>
            The <c>SslDecrementProviderReferenceCount</c> function decrements the references to the Secure Sockets Layer protocol (SSL) provider.
            </summary>
            <param name="hSslProvider">The handle of the SSL protocol provider instance.</param>
            <returns>
            <para>If the function succeeds, it returns zero.</para>
            <para>If the function fails, it returns a nonzero error value.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code/value</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>STATUS_INVALID_HANDLE 0xC0000008L</term>
            <term>The SSL provider handle is not valid.</term>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.SslDecryptPacket(Vanara.PInvoke.NCrypt.NCRYPT_PROV_HANDLE,Vanara.PInvoke.NCrypt.NCRYPT_KEY_HANDLE,System.IntPtr@,System.UInt32,System.IntPtr,System.UInt32,System.UInt32@,System.UInt64,System.UInt32)">
            <summary>the <c>SslDecryptPacket</c> function decrypts a single Secure Sockets Layer protocol (SSL) packet.</summary>
            <param name="hSslProvider">The handle of the SSL protocol provider instance.</param>
            <param name="hKey">The handle to the key that is used to decrypt the packet.</param>
            <param name="pbInput">A pointer to the buffer that contains the packet to be decrypted.</param>
            <param name="cbInput">The length, in bytes, of the pbInput buffer.</param>
            <param name="pbOutput">A pointer to a buffer to contain the decrypted packet.</param>
            <param name="cbOutput">The length, bytes, of the pbOutput buffer.</param>
            <param name="pcbResult">The number of bytes written to the pbOutput buffer.</param>
            <param name="SequenceNumber">The sequence number that corresponds to this packet.</param>
            <param name="dwFlags">This parameter is reserved for future use.</param>
            <returns>
            <para>If the function succeeds, it returns zero.</para>
            <para>If the function fails, it returns a nonzero error value.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code/value</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>NTE_INVALID_HANDLE 0x80090026L</term>
            <term>One of the provided handles is not valid.</term>
            </item>
            </list>
            </returns>
            <remarks>The length of the packet can be zero, such as when a "HelloRequest" message is decrypted.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.SslEncryptPacket(Vanara.PInvoke.NCrypt.NCRYPT_PROV_HANDLE,Vanara.PInvoke.NCrypt.NCRYPT_KEY_HANDLE,System.IntPtr@,System.UInt32,System.IntPtr,System.UInt32,System.UInt32@,System.UInt64,Vanara.PInvoke.NCrypt.PacketContentType,System.UInt32)">
            <summary>The <c>SslEncryptPacket</c> function encrypts a single Secure Sockets Layer protocol (SSL) packet.</summary>
            <param name="hSslProvider">The handle of the SSL protocol provider instance.</param>
            <param name="hKey">The handle to the key that is used to encrypt the packet.</param>
            <param name="pbInput">A pointer to the buffer that contains the packet to be encrypted.</param>
            <param name="cbInput">The length, in bytes, of the pbInput buffer.</param>
            <param name="pbOutput">A pointer to a buffer to receive the encrypted packet.</param>
            <param name="cbOutput">The length, bytes, of the pbOutput buffer.</param>
            <param name="pcbResult">The number of bytes written to the pbOutput buffer.</param>
            <param name="SequenceNumber">The sequence number that corresponds to this packet.</param>
            <param name="dwContentType">
            <para>
            The content type that corresponds to this packet, which specifies the higher level protocol used to process the enclosed packet.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CT_CHANGE_CIPHER_SPEC 20</term>
            <term>Indicates a change in the ciphering strategy.</term>
            </item>
            <item>
            <term>CT_ALERT 21</term>
            <term>Indicates that the enclosed packet contains an alert.</term>
            </item>
            <item>
            <term>CT_HANDSHAKE 22</term>
            <term>Indicates that the enclosed packet is part of the handshake protocol.</term>
            </item>
            <item>
            <term>CT_APPLICATIONDATA 23</term>
            <term>Indicates that the packet contains application data.</term>
            </item>
            </list>
            </param>
            <param name="dwFlags">This parameter is reserved for future use.</param>
            <returns>
            <para>If the function succeeds, it returns zero.</para>
            <para>If the function fails, it returns a nonzero error value.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code/value</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>NTE_INVALID_HANDLE 0x80090026L</term>
            <term>One of the provided handles is not valid.</term>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.SslEnumCipherSuites(Vanara.PInvoke.NCrypt.NCRYPT_PROV_HANDLE,Vanara.PInvoke.NCrypt.NCRYPT_KEY_HANDLE,System.IntPtr@,System.IntPtr@,System.UInt32)">
            <summary>
            The <c>SslEnumCipherSuites</c> function enumerates the cipher suites supported by a Secure Sockets Layer protocol (SSL) protocol provider.
            </summary>
            <param name="hSslProvider">The handle of the SSL protocol provider instance.</param>
            <param name="hPrivateKey">
            <para>
            The handle of a private key. When a private key is specified, <c>SslEnumCipherSuites</c> enumerates the cipher suites that are
            compatible with the private key. For example, if the private key is a DSS key, then only the DSS_DHE cipher suites are returned.
            If the private key is an RSA key, but it does not support raw decryption operations, then the SSL2 cipher suites are not returned.
            </para>
            <para>Set this parameter to <c>NULL</c> when you are not specifying a private key.</para>
            </param>
            <param name="ppCipherSuite">
            A pointer to a <c>NCRYPT_SSL_CIPHER_SUITE</c> structure to receive the address of the next cipher suite in the list.
            </param>
            <param name="ppEnumState">
            <para>A pointer to a buffer that indicates the current position in the list of cipher suites.</para>
            <para>
            Set the pointer to <c>NULL</c> on the first call to <c>SslEnumCipherSuites</c>. On each subsequent call, pass the unmodified
            value back to <c>SslEnumCipherSuites</c>.
            </para>
            <para>When there are no more cipher suites available, you should free ppEnumState by calling the <c>SslFreeBuffer</c> function.</para>
            </param>
            <param name="dwFlags">This parameter is reserved for future use.</param>
            <returns>
            <para>If the function succeeds, it returns zero.</para>
            <para>If the function fails, it returns a nonzero error value.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code/value</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>NTE_NO_MEMORY 0x8009000EL</term>
            <term>Not enough memory is available to allocate necessary buffers.</term>
            </item>
            <item>
            <term>NTE_INVALID_HANDLE 0x80090026L</term>
            <term>One of the provided handles is not valid.</term>
            </item>
            <item>
            <term>NTE_NO_MORE_ITEMS 0x8009002AL</term>
            <term>No additional cipher suites are supported.</term>
            </item>
            </list>
            </returns>
            <remarks>
            To enumerate all cipher suites supported by the SSL provider, call the <c>SslEnumCipherSuites</c> function in a loop until
            <c>NTE_NO_MORE_ITEMS</c> is returned.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.SslEnumProtocolProviders(System.UInt32@,Vanara.PInvoke.NCrypt.SafeSslBuffer@,System.UInt32)">
            <summary>
            The <c>SslEnumProtocolProviders</c> function returns an array of installed Secure Sockets Layer protocol (SSL) protocol providers.
            </summary>
            <param name="pdwProviderCount">A pointer to a <c>DWORD</c> value to receive the number of protocol providers returned.</param>
            <param name="ppProviderList">A pointer to a buffer that receives the array of <c>NCryptProviderName</c> structures.</param>
            <param name="dwFlags">This parameter is reserved for future use.</param>
            <returns>
            <para>If the function succeeds, it returns zero.</para>
            <para>If the function fails, it returns a nonzero error value.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code/value</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>NTE_BAD_FLAGS 0x80090009L</term>
            <term>The dwFlags parameter is not zero.</term>
            </item>
            <item>
            <term>NTE_NO_MEMORY 0x8009000EL</term>
            <term>Not enough memory is available to allocate necessary buffers.</term>
            </item>
            <item>
            <term>NTE_INVALID_PARAMETER 0x80090027L</term>
            <term>The pdwProviderCount or ppProviderList parameter is NULL.</term>
            </item>
            </list>
            </returns>
            <remarks>
            When you have finished using the array of <c>NCryptProviderName</c> structures, call the <c>SslFreeBuffer</c> function to free
            the array.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.SslExportKey(Vanara.PInvoke.NCrypt.NCRYPT_PROV_HANDLE,Vanara.PInvoke.NCrypt.NCRYPT_KEY_HANDLE,System.String,System.IntPtr,System.UInt32,System.UInt32@,System.UInt32)">
            <summary>
            The <c>SslExportKey</c> function returns an Secure Sockets Layer protocol (SSL) session key or public ephemeral key into a
            serialized BLOB.
            </summary>
            <param name="hSslProvider">The handle of the SSL protocol provider instance.</param>
            <param name="hKey">
            <para>The handle of the key to export.</para>
            <para>When you are not specifying a key, set this parameter to <c>NULL</c>.</para>
            </param>
            <param name="pszBlobType">
            <para>
            A null-terminated Unicode string that contains an identifier that specifies the type of BLOB to export. This can be one of the
            following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>BCRYPT_DH_PUBLIC_BLOB</term>
            <term>
            Export a Diffie-Hellman public key. The pbOutput buffer receives a BCRYPT_DH_KEY_BLOB structure immediately followed by the key data.
            </term>
            </item>
            <item>
            <term>BCRYPT_ECCPUBLIC_BLOB</term>
            <term>
            Export an elliptic curve cryptography (ECC) public key. The pbOutput buffer receives a BCRYPT_ECCKEY_BLOB structure immediately
            followed by the key data.
            </term>
            </item>
            <item>
            <term>BCRYPT_OPAQUE_KEY_BLOB</term>
            <term>
            Export a symmetric key in a format that is specific to a single cryptographic service provider (CSP). Opaque BLOBs are not
            transferable and must be imported by using the same cryptographic service provider (CSP) that generated the BLOB.
            </term>
            </item>
            <item>
            <term>BCRYPT_RSAPUBLIC_BLOB</term>
            <term>
            Export an RSA public key. The pbOutput buffer receives a BCRYPT_RSAKEY_BLOB structure immediately followed by the key data.
            </term>
            </item>
            </list>
            </param>
            <param name="pbOutput">
            The address of a buffer that receives the key BLOB. The cbOutput parameter contains the size of this buffer. If this parameter is
            <c>NULL</c>, this function will place the required size, in bytes, in the <c>DWORD</c> pointed to by the pcbResult parameter.
            </param>
            <param name="cbOutput">The size, in bytes, of the pbOutput buffer.</param>
            <param name="pcbResult">
            The address of a <c>DWORD</c> variable that receives the number of bytes copied to the pbOutput buffer. If the pbOutput parameter
            is set to <c>NULL</c> when the function is called, the required size for the pbOutput buffer, in bytes, is returned in the
            <c>DWORD</c> pointed to by this parameter.
            </param>
            <param name="dwFlags">Reserved for future use.</param>
            <returns>
            <para>If the function succeeds, it returns zero.</para>
            <para>If the function fails, it returns a nonzero error value.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code/value</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>NTE_INVALID_HANDLE 0x80090026L</term>
            <term>One of the provided handles is not valid.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            The <c>SslExportKey</c> function facilitates transporting session keys from one process to another as well as exporting the
            public portion an ephemeral key.
            </para>
            <para>
            When exporting session keys, the BLOB type is opaque, meaning that the format of the BLOB is irrelevant as long as both the
            <c>SslExportKey</c> and <c>SslImportKey</c> functions can interpret it.
            </para>
            <para>
            When exporting the public portion of an ephemeral key the BLOB type must be the appropriate type, such as
            <c>NCRYPT_DH_PUBLIC_BLOB</c> or <c>NCRYPT_ECCPUBLIC_BLOB</c>.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.SslExportKeyingMaterial(Vanara.PInvoke.NCrypt.NCRYPT_PROV_HANDLE,Vanara.PInvoke.NCrypt.NCRYPT_KEY_HANDLE,System.String,System.IntPtr,System.UInt32,System.IntPtr,System.UInt16,System.IntPtr,System.UInt32,System.UInt32)">
            <summary>
            Exports keying material per the RFC 5705 standard. This function uses the TLS pseudorandom function to produce a byte buffer of
            keying material. It takes a reference to the master secret, the disambiguating ASCII label, client and server random values, and
            optionally the application context data.
            </summary>
            <param name="hSslProvider">The handle of the TLS protocol provider instance.</param>
            <param name="hMasterKey">The handle of the master key object that will be used to create the keying material to br exported.</param>
            <param name="sLabel">
            a NUL-terminated ASCII label string. Schannel will remove the terminating NUL character before passing it to the pseudorandom function.
            </param>
            <param name="pbRandoms">
            A pointer to a buffer that contains a concatenation of the client_random and server_random values of the TLS connection.
            </param>
            <param name="cbRandoms">The length, in bytes, of the pbRandoms buffer.</param>
            <param name="pbContextValue">
            A pointer to a buffer that contains the application context. If pbContextValue is <c>NULL</c>, cbContextValue must be zero.
            </param>
            <param name="cbContextValue">The length, in bytes, of the pbContextValue buffer.</param>
            <param name="pbOutput">
            The address of a buffer that receives the exported keying material. The cbOutput parameter contains the size of this buffer. This
            value cannot be <c>NULL</c>.
            </param>
            <param name="cbOutput">The length, in bytes, of the pbOutput buffer. Must be greater than zero.</param>
            <param name="dwFlags">Not used. Must be set to zero.</param>
            <returns>
            <para>If the function succeeds, it returns zero.</para>
            <para>If the function fails, it returns a nonzero error value.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code/value</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>NTE_INVALID_HANDLE 0x80090026L</term>
            <term>One of the provided handles is not valid.</term>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.SslFreeBuffer(System.IntPtr)">
            <summary>
            The <c>SslFreeBuffer</c> function is used to free memory that was allocated by one of the Secure Sockets Layer protocol (SSL)
            provider functions.
            </summary>
            <param name="pvInput">A pointer to the memory buffer to be freed.</param>
            <returns>
            <para>If the function succeeds, it returns zero.</para>
            <para>If the function fails, it returns a nonzero error value.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code/value</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>NTE_INVALID_PARAMETER 0x80090027L</term>
            <term>The pdwProviderCount or ppProviderList parameter is NULL.</term>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.SslFreeObject(Vanara.PInvoke.NCrypt.NCRYPT_HANDLE,System.UInt32)">
            <summary>The <c>SslFreeObject</c> function frees a key, hash, or provider object.</summary>
            <param name="hObject">The handle of the object to free.</param>
            <param name="dwFlags">This parameter is reserved for future use.</param>
            <returns>
            <para>If the function succeeds, it returns zero.</para>
            <para>If the function fails, it returns a nonzero error value.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code/value</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>NTE_INVALID_HANDLE 0x80090026L</term>
            <term>An internal handle is not valid.</term>
            </item>
            <item>
            <term>STATUS_INVALID_HANDLE 0xC0000008L</term>
            <term>The provided handle is not valid.</term>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.SslGenerateMasterKey(Vanara.PInvoke.NCrypt.NCRYPT_PROV_HANDLE,Vanara.PInvoke.NCrypt.NCRYPT_KEY_HANDLE,Vanara.PInvoke.NCrypt.NCRYPT_KEY_HANDLE,Vanara.PInvoke.NCrypt.NCRYPT_KEY_HANDLE@,Vanara.PInvoke.NCrypt.SslProviderProtocolId,Vanara.PInvoke.NCrypt.SslProviderCipherSuiteId,Vanara.PInvoke.NCrypt.NCryptBufferDesc,System.IntPtr,System.UInt32,System.UInt32@,Vanara.PInvoke.NCrypt.SslHost)">
            <summary>The <c>SslGenerateMasterKey</c> function computes the Secure Sockets Layer protocol (SSL) master secret key.</summary>
            <param name="hSslProvider">The handle to the SSL protocol provider instance.</param>
            <param name="hPrivateKey">The handle to the private key used in the exchange.</param>
            <param name="hPublicKey">The handle to the public key used in the exchange.</param>
            <param name="phMasterKey">A pointer to the handle to the generated master key.</param>
            <param name="dwProtocol">One of the <c>CNG SSL Provider Protocol Identifier</c> values.</param>
            <param name="dwCipherSuite">One of the <c>CNG SSL Provider Cipher Suite Identifier</c> values.</param>
            <param name="pParameterList">
            A pointer to an array of <c>NCryptBuffer</c> buffers that contain information used as part of the key exchange operation. The
            precise set of buffers is dependent on the protocol and cipher suite that is used. At the minimum, the list will contain buffers
            that contain the client and server supplied random values.
            </param>
            <param name="pbOutput">
            The address of a buffer that receives the premaster secret encrypted with the public key of the server. The cbOutput parameter
            contains the size of this buffer. If this parameter is <c>NULL</c>, this function returns the required size, in bytes, in the
            <c>DWORD</c> pointed to by the pcbResult parameter.
            </param>
            <param name="cbOutput">The size, in bytes, of the pbOutput buffer.</param>
            <param name="pcbResult">A pointer to a <c>DWORD</c> value in which to place number of bytes written to the pbOutput buffer.</param>
            <param name="dwFlags">
            <para>Specifies whether this function is being used for client-side or server-side key exchange.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>NCRYPT_SSL_CLIENT_FLAG 0x00000001</term>
            <term>Specifies a client-side key exchange.</term>
            </item>
            <item>
            <term>NCRYPT_SSL_SERVER_FLAG 0x00000002</term>
            <term>Specifies a server-side key exchange.</term>
            </item>
            </list>
            </param>
            <returns>
            <para>If the function succeeds, it returns zero.</para>
            <para>If the function fails, it returns a nonzero error value.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code/value</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>NTE_NO_MEMORY 0x8009000EL</term>
            <term>Not enough memory is available to allocate necessary buffers.</term>
            </item>
            <item>
            <term>NTE_INVALID_HANDLE 0x80090026L</term>
            <term>One of the provided handles is not valid.</term>
            </item>
            <item>
            <term>NTE_INVALID_PARAMETER 0x80090027L</term>
            <term>The phMasterKey or hPublicKey parameter is not valid.</term>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.SslGenerateSessionKeys(Vanara.PInvoke.NCrypt.NCRYPT_PROV_HANDLE,Vanara.PInvoke.NCrypt.NCRYPT_KEY_HANDLE,Vanara.PInvoke.NCrypt.NCRYPT_KEY_HANDLE@,Vanara.PInvoke.NCrypt.NCRYPT_KEY_HANDLE@,Vanara.PInvoke.NCrypt.NCryptBufferDesc,System.UInt32)">
            <summary>The <c>SslGenerateSessionKeys</c> function generates a set of Secure Sockets Layer protocol (SSL) session keys.</summary>
            <param name="hSslProvider">The handle to the SSL protocol provider instance.</param>
            <param name="hMasterKey">The handle to the master key object.</param>
            <param name="phReadKey">A pointer to the returned read key handle.</param>
            <param name="phWriteKey">A pointer to the returned write key handle.</param>
            <param name="pParameterList">
            A pointer to an array of <c>NCryptBuffer</c> buffers that contain information used as part of the key exchange operation. The
            precise set of buffers is dependent on the protocol and cipher suite that is used. At the minimum, the list will contain buffers
            that contain the client and server supplied random values.
            </param>
            <param name="dwFlags">This parameter is reserved for future use.</param>
            <returns>
            <para>If the function succeeds, it returns zero.</para>
            <para>If the function fails, it returns a nonzero error value.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code/value</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>NTE_NO_MEMORY 0x8009000EL</term>
            <term>Not enough memory is available to allocate necessary buffers.</term>
            </item>
            <item>
            <term>NTE_INVALID_HANDLE 0x80090026L</term>
            <term>One of the provided handles is not valid.</term>
            </item>
            <item>
            <term>NTE_INVALID_PARAMETER 0x80090027L</term>
            <term>The phReadKey or phWriteKey parameter is null.</term>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.SslGetCipherSuitePRFHashAlgorithm(Vanara.PInvoke.NCrypt.NCRYPT_PROV_HANDLE,Vanara.PInvoke.NCrypt.SslProviderProtocolId,Vanara.PInvoke.NCrypt.SslProviderCipherSuiteId,Vanara.PInvoke.NCrypt.SslProviderKeyTypeId,System.Text.StringBuilder,System.UInt32)">
            <summary>
            The <c>SslGetCipherSuitePRFHashAlgorithm</c> function returns the Cryptography API: Next Generation (CNG) Algorithm Identifier of
            the hashing algorithm that is used for the Transport Layer Security protocol (TLS) pseudo-random function (PRF) for the input
            protocol, cipher suite, and key type.
            </summary>
            <param name="hSslProvider">The handle of the Secure Sockets Layer protocol (SSL) protocol provider instance.</param>
            <param name="dwProtocol">One of the <c>CNG SSL Provider Protocol Identifier</c> values.</param>
            <param name="dwCipherSuite">One of the <c>CNG SSL Provider Cipher Suite Identifier</c> values.</param>
            <param name="dwKeyType">
            One of the <c>CNG SSL Provider Key Type Identifier</c> values. For key types that are not elliptic curve cryptography (ECC), set
            this parameter to zero.
            </param>
            <param name="szPRFHash">One of the <c>CNG Algorithm Identifiers</c> for the hash that will be used for the TLS PRF.</param>
            <param name="dwFlags">This parameter is reserved for future use and must be set to zero.</param>
            <returns>
            <para>If the function succeeds, it returns zero.</para>
            <para>If the function fails, it returns a nonzero error value.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code/value</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>NTE_INVALID_HANDLE 0x80090026L</term>
            <term>The hSslProvider parameter contains a pointer that is not valid.</term>
            </item>
            <item>
            <term>NTE_INVALID_PARAMETER 0x80090027L</term>
            <term>The szPRFHash parameter is set to NULL.</term>
            </item>
            <item>
            <term>NTE_NOT_SUPPORTED 0x80090029L</term>
            <term>The selected function is not supported in the specified version of the interface.</term>
            </item>
            <item>
            <term>NTE_BAD_FLAGS 0x80090009L</term>
            <term>The dwFlags parameter must be set to zero.</term>
            </item>
            </list>
            </returns>
            <remarks>
            This <c>SslGetCipherSuitePRFHashAlgorithm</c> function is called for TLS 1.2 or later conversations to query the hashing
            algorithm that will be used in the TLS PRF.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.SslGetKeyProperty(Vanara.PInvoke.NCrypt.NCRYPT_KEY_HANDLE,System.String,System.IntPtr,System.UInt32@,System.UInt32)">
            <summary>
            The <c>SslGetKeyProperty</c> function retrieves the value of a named property for a Secure Sockets Layer protocol (SSL) provider
            key object.
            </summary>
            <param name="hKey">The handle of the SSL provider.</param>
            <param name="pszProperty">
            A pointer to a null-terminated Unicode string that contains the name of the property to retrieve. This can be one of the
            predefined <c>Key Storage Property Identifiers</c> or a custom property identifier.
            </param>
            <param name="ppbOutput">
            A pointer to a buffer that receives the property value. The caller of the function must free this buffer by calling the
            <c>SslFreeBuffer</c> function.
            </param>
            <param name="pcbOutput">The size, in bytes, of the pbOutput buffer.</param>
            <param name="dwFlags">This parameter is reserved for future use.</param>
            <returns>
            <para>If the function succeeds, it returns zero.</para>
            <para>If the function fails, it returns a nonzero error value.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code/value</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>NTE_INVALID_HANDLE 0x80090026L</term>
            <term>One of the provided handles is not valid.</term>
            </item>
            <item>
            <term>NTE_INVALID_PARAMETER 0x80090027L</term>
            <term>One of the supplied parameters is not valid.</term>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.SslGetProviderProperty(Vanara.PInvoke.NCrypt.NCRYPT_PROV_HANDLE,System.String,System.IntPtr,System.UInt32@,System.IntPtr@,System.UInt32)">
            <summary>The <c>SslGetProviderProperty</c> function retrieves the value of a specified provider property.</summary>
            <param name="hSslProvider">The handle of the Secure Sockets Layer protocol (SSL) provider for which to retrieve the property.</param>
            <param name="pszProperty">A pointer to a null-terminated Unicode string that contains the name of the property to retrieve.</param>
            <param name="ppbOutput">
            <para>The address of a buffer that receives the property value.</para>
            <para>The caller of the function must free this buffer by calling the <c>SslFreeBuffer</c> function.</para>
            </param>
            <param name="pcbOutput">The size, in bytes, of the pbOutput buffer.</param>
            <param name="ppEnumState">
            <para>
            The address of a <c>VOID</c> pointer that receives enumeration state information that is used in subsequent calls to this
            function. This information only has meaning to the SSL provider and is opaque to the caller. The SSL provider uses this
            information to determine which item is next in the enumeration. If the variable pointed to by this parameter contains
            <c>NULL</c>, the enumeration is started from the beginning.
            </para>
            <para>The caller of the function must free this memory by calling the <c>SslFreeBuffer</c> function.</para>
            </param>
            <param name="dwFlags">This parameter is reserved for future use.</param>
            <returns>
            <para>If the function succeeds, it returns zero.</para>
            <para>If the function fails, it returns a nonzero error value.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code/value</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>NTE_NO_MEMORY 0x8009000EL</term>
            <term>Not enough memory is available to allocate necessary buffers.</term>
            </item>
            <item>
            <term>NTE_INVALID_HANDLE 0x80090026L</term>
            <term>The hSslProvider handle is not valid.</term>
            </item>
            <item>
            <term>NTE_INVALID_PARAMETER 0x80090027L</term>
            <term>One of the supplied parameters is not valid.</term>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.SslHashHandshake(Vanara.PInvoke.NCrypt.NCRYPT_PROV_HANDLE,Vanara.PInvoke.NCrypt.NCRYPT_HASH_HANDLE,System.IntPtr,System.UInt32,System.UInt32)">
            <summary>The <c>SslHashHandshake</c> function returns a handle to the handshake hash.</summary>
            <param name="hSslProvider">The handle to the Secure Sockets Layer protocol (SSL) protocol provider instance.</param>
            <param name="hHandshakeHash">The handle to the hash object.</param>
            <param name="pbInput">The address of a buffer that contains the data to be hashed.</param>
            <param name="cbInput">The size, in bytes, of the pbInput buffer.</param>
            <param name="dwFlags">This parameter is reserved for future use.</param>
            <returns>If the function succeeds, it returns zero.</returns>
            <remarks>
            <para>The <c>SslHashHandshake</c> function is one of three functions used to generate a hash to use during the SSL handshake.</para>
            <list type="number">
            <item>
            <term>The <c>SslCreateHandshakeHash</c> function is called to obtain a hash handle.</term>
            </item>
            <item>
            <term>The <c>SslHashHandshake</c> function is called any number of times with the hash handle to add data to the hash.</term>
            </item>
            <item>
            <term>The <c>SslComputeFinishedHash</c> function is called with the hash handle to obtain the digest of the hashed data.</term>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.SslImportKey(Vanara.PInvoke.NCrypt.NCRYPT_PROV_HANDLE,Vanara.PInvoke.NCrypt.NCRYPT_KEY_HANDLE@,System.String,System.IntPtr,System.UInt32,System.UInt32)">
            <summary>The <c>SslImportKey</c> function imports a key into the Secure Sockets Layer protocol (SSL) protocol provider.</summary>
            <param name="hSslProvider">The handle to the SSL protocol provider instance.</param>
            <param name="phKey">A pointer to the handle of the cryptographic key to receive the imported key.</param>
            <param name="pszBlobType">
            <para>
            A null-terminated Unicode string that contains an identifier that specifies the type of BLOB that is contained in the pbInput
            buffer. This can be one of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>BCRYPT_DH_PUBLIC_BLOB</term>
            <term>
            Export a Diffie-Hellman public key. The pbOutput buffer receives a BCRYPT_DH_KEY_BLOB structure immediately followed by the key data.
            </term>
            </item>
            <item>
            <term>BCRYPT_ECCPUBLIC_BLOB</term>
            <term>
            Export an elliptic curve cryptography (ECC) public key. The pbOutput buffer receives a BCRYPT_ECCKEY_BLOB structure immediately
            followed by the key data.
            </term>
            </item>
            <item>
            <term>BCRYPT_OPAQUE_KEY_BLOB</term>
            <term>
            Export a symmetric key in a format that is specific to a single cryptographic service provider (CSP). Opaque BLOBs are not
            transferable and must be imported by using the same CSP that generated the BLOB.
            </term>
            </item>
            <item>
            <term>BCRYPT_RSAPUBLIC_BLOB</term>
            <term>
            Export an RSA public key. The pbOutput buffer receives a BCRYPT_RSAKEY_BLOB structure immediately followed by the key data.
            </term>
            </item>
            </list>
            </param>
            <param name="pbKeyBlob">A pointer to the buffer that contains the key BLOB.</param>
            <param name="cbKeyBlob">The size, in bytes, of the pbKeyBlob buffer.</param>
            <param name="dwFlags">This parameter is reserved for future use.</param>
            <returns>
            <para>If the function succeeds, it returns zero.</para>
            <para>If the function fails, it returns a nonzero error value.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code/value</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>NTE_NO_MEMORY 0x8009000EL</term>
            <term>Not enough memory is available to allocate necessary buffers.</term>
            </item>
            <item>
            <term>NTE_INVALID_HANDLE 0x80090026L</term>
            <term>The hSslProvider handle is not valid.</term>
            </item>
            <item>
            <term>NTE_INVALID_PARAMETER 0x80090027L</term>
            <term>The phKey parameter is NULL.</term>
            </item>
            </list>
            </returns>
            <remarks>
            You can use the <c>SslImportKey</c> function to import session keys as a part of the process of transferring session keys from
            one process to another.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.SslImportMasterKey(Vanara.PInvoke.NCrypt.NCRYPT_PROV_HANDLE,Vanara.PInvoke.NCrypt.NCRYPT_KEY_HANDLE,Vanara.PInvoke.NCrypt.NCRYPT_KEY_HANDLE@,Vanara.PInvoke.NCrypt.SslProviderProtocolId,Vanara.PInvoke.NCrypt.SslProviderCipherSuiteId,Vanara.PInvoke.NCrypt.NCryptBufferDesc,System.IntPtr,System.UInt32,Vanara.PInvoke.NCrypt.SslHost)">
            <summary>The <c>SslImportMasterKey</c> function performs a server-side Secure Sockets Layer protocol (SSL) key exchange operation.</summary>
            <param name="hSslProvider">The handle to the SSL protocol provider instance.</param>
            <param name="hPrivateKey">The handle to the private key used in the exchange.</param>
            <param name="phMasterKey">A pointer to the handle to receive the master key.</param>
            <param name="dwProtocol">One of the <c>CNG SSL Provider Protocol Identifier</c> values.</param>
            <param name="dwCipherSuite">One of the <c>CNG SSL Provider Cipher Suite Identifiers</c> values.</param>
            <param name="pParameterList">
            A pointer to an array of <c>NCryptBuffer</c> buffers that contain information used as part of the key exchange operation. The
            precise set of buffers is dependent on the protocol and cipher suite that is used. At the minimum, the list will contain buffers
            that contain the client and server supplied random values.
            </param>
            <param name="pbEncryptedKey">
            A pointer to a buffer that contains the encrypted premaster secret key encrypted with the public key of the server.
            </param>
            <param name="cbEncryptedKey">The size, in bytes, of the pbEncryptedKey buffer.</param>
            <param name="dwFlags">Set this parameter to <c>NCRYPT_SSL_SERVER_FLAG</c> to indicate that this is a server call.</param>
            <returns>
            <para>If the function succeeds, it returns zero.</para>
            <para>If the function fails, it returns a nonzero error value.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code/value</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>NTE_NO_MEMORY 0x8009000EL</term>
            <term>Not enough memory is available to allocate necessary buffers.</term>
            </item>
            <item>
            <term>NTE_INVALID_HANDLE 0x80090026L</term>
            <term>One of the provided handles is not valid.</term>
            </item>
            <item>
            <term>NTE_INVALID_PARAMETER 0x80090027L</term>
            <term>The phMasterKey parameter is NULL.</term>
            </item>
            </list>
            </returns>
            <remarks>
            This function decrypts the premaster secret, computes the SSL master secret, and returns a handle to this object to the caller.
            This master key can then be used to derive the SSL session key and finish the SSL handshake.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.SslIncrementProviderReferenceCount(Vanara.PInvoke.NCrypt.NCRYPT_PROV_HANDLE)">
            <summary>
            The <c>SslIncrementProviderReferenceCount</c> function increments the reference count to a Secure Sockets Layer protocol (SSL)
            provider instance.
            </summary>
            <param name="hSslProvider">The handle to the SSL protocol provider instance.</param>
            <returns>
            <para>If the function succeeds, it returns zero.</para>
            <para>If the function fails, it returns a nonzero error value.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code/value</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>NTE_INVALID_HANDLE 0x80090026L</term>
            <term>The hSslProvider handle is not valid.</term>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.SslLookupCipherLengths(Vanara.PInvoke.NCrypt.NCRYPT_PROV_HANDLE,Vanara.PInvoke.NCrypt.SslProviderProtocolId,Vanara.PInvoke.NCrypt.SslProviderCipherSuiteId,Vanara.PInvoke.NCrypt.SslProviderKeyTypeId,Vanara.PInvoke.NCrypt.NCRYPT_SSL_CIPHER_LENGTHS@,System.UInt32,System.UInt32)">
            <summary>
            The <c>SslLookupCipherLengths</c> function returns an <c>NCRYPT_SSL_CIPHER_LENGTHS</c> structure that contains the header and
            trailer lengths of the input protocol, cipher suite, and key type.
            </summary>
            <param name="hSslProvider">The handle of the Secure Sockets Layer protocol (SSL) protocol provider instance.</param>
            <param name="dwProtocol">One of the <c>CNG SSL Provider Protocol Identifier</c> values.</param>
            <param name="dwCipherSuite">One of the <c>CNG SSL Provider Cipher Suite Identifier</c> values.</param>
            <param name="dwKeyType">
            One of the <c>CNG SSL Provider Key Type Identifier</c> values. For key types that are not elliptic curve cryptography (ECC), set
            this parameter to zero.
            </param>
            <param name="pCipherLengths">A pointer to a buffer to receive the <c>NCRYPT_SSL_CIPHER_LENGTHS</c> structure.</param>
            <param name="cbCipherLengths">The length, in bytes, of the buffer pointed to by the pCipherLengths parameter.</param>
            <param name="dwFlags">This parameter is reserved for future use and must be set to zero.</param>
            <returns>
            <para>If the function succeeds, it returns zero.</para>
            <para>If the function fails, it returns a nonzero error value.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code/value</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>NTE_INVALID_HANDLE 0x80090026L</term>
            <term>The hSslProvider parameter contains a pointer that is not valid.</term>
            </item>
            <item>
            <term>NTE_INVALID_PARAMETER 0x80090027L</term>
            <term>The pCipherLengths parameter is set to NULL or the buffer length specified by the cbCipherLengths is too short.</term>
            </item>
            <item>
            <term>NTE_BAD_FLAGS 0x80090009L</term>
            <term>The dwFlags parameter must be set to zero.</term>
            </item>
            </list>
            </returns>
            <remarks>
            The <c>SslLookupCipherLengths</c> function is called for Transport Layer Security protocol (TLS) 1.1 or later conversations to
            query the header and trailer lengths for the requested protocol, cipher suite, and key type.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.SslLookupCipherSuiteInfo(Vanara.PInvoke.NCrypt.NCRYPT_PROV_HANDLE,Vanara.PInvoke.NCrypt.SslProviderProtocolId,Vanara.PInvoke.NCrypt.SslProviderCipherSuiteId,Vanara.PInvoke.NCrypt.SslProviderKeyTypeId,Vanara.PInvoke.NCrypt.NCRYPT_SSL_CIPHER_SUITE@,System.UInt32)">
            <summary>
            The <c>SslLookupCipherSuiteInfo</c> function retrieves the cipher suite information for a specified protocol, cipher suite, and
            key type set.
            </summary>
            <param name="hSslProvider">The handle to the Secure Sockets Layer protocol (SSL) protocol provider instance.</param>
            <param name="dwProtocol">One of the <c>CNG SSL Provider Protocol Identifier</c> values.</param>
            <param name="dwCipherSuite">One of the <c>CNG SSL Provider Cipher Suite Identifiers</c> values.</param>
            <param name="dwKeyType">One of the <c>CNG SSL Provider Key Type Identifiers</c> values.</param>
            <param name="pCipherSuite">
            The address of a buffer that contains a <c>NCRYPT_SSL_CIPHER_SUITE</c> structure in which to write the cipher suite information.
            </param>
            <param name="dwFlags">This parameter is reserved for future use.</param>
            <returns>
            <para>If the function succeeds, it returns zero.</para>
            <para>If the function fails, it returns a nonzero error value.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code/value</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>NTE_INVALID_HANDLE 0x80090026L</term>
            <term>The hSslProvider handle is not valid.</term>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.SslOpenPrivateKey(Vanara.PInvoke.NCrypt.NCRYPT_PROV_HANDLE,Vanara.PInvoke.NCrypt.NCRYPT_KEY_HANDLE@,Vanara.PInvoke.Crypt32.CERT_CONTEXT@,System.UInt32)">
            <summary>The <c>SslOpenPrivateKey</c> function opens a handle to a private key.</summary>
            <param name="hSslProvider">The handle to the Secure Sockets Layer protocol (SSL) protocol provider instance.</param>
            <param name="phPrivateKey">
            <para>The address of a buffer in which to write the handle to the private key.</para>
            <para>When you have finished using the key, you should free phPrivateKey by calling the <c>SslFreeObject</c> function.</para>
            </param>
            <param name="pCertContext">The address of the certificate from which to obtain the private key.</param>
            <param name="dwFlags">This parameter is reserved for future use.</param>
            <returns>
            <para>If the function succeeds, it returns zero.</para>
            <para>If the function fails, it returns a nonzero error value.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code/value</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>NTE_NO_MEMORY 0x8009000EL</term>
            <term>Not enough memory is available to allocate necessary buffers.</term>
            </item>
            <item>
            <term>NTE_INVALID_HANDLE 0x80090026L</term>
            <term>The hSslProvider handle is not valid.</term>
            </item>
            <item>
            <term>NTE_INVALID_PARAMETER 0x80090027L</term>
            <term>The phPrivateKey or pCertContext parameter is NULL.</term>
            </item>
            </list>
            </returns>
            <remarks>
            The private key obtained is part of a public/private key pair within a certificate. This function merely extracts the private key
            from the certificate specified by the pCertContext parameter.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.SslOpenProvider(Vanara.PInvoke.NCrypt.NCRYPT_PROV_HANDLE@,System.String,System.UInt32)">
            <summary>
            The <c>SslOpenProvider</c> function opens a handle to the specified Secure Sockets Layer protocol (SSL) protocol provider.
            </summary>
            <param name="phSslProvider">
            <para>The address of an <c>NCRYPT_PROV_HANDLE</c> in which to write the provider handle.</para>
            <para>When you have finished using the handle, you should free it by calling the <c>SslFreeObject</c> function.</para>
            </param>
            <param name="pszProviderName">
            A pointer to a Unicode string that contains the provider name. If the value of this parameter is <c>NULL</c>, a handle to the
            <c>MS_SCHANNEL_PROVIDER</c> is returned.
            </param>
            <param name="dwFlags">This parameter is reserved for future use, and it must be set to zero.</param>
            <returns>
            <para>If the function succeeds, it returns zero.</para>
            <para>If the function fails, it returns a nonzero error value.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code/value</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>NTE_INVALID_HANDLE 0x80090026L</term>
            <term>One of the provided handles is not valid.</term>
            </item>
            <item>
            <term>NTE_INVALID_PARAMETER 0x80090027L</term>
            <term>The phSslProvider or ppProviderList parameter is NULL.</term>
            </item>
            <item>
            <term>STATUS_NO_MEMORY 0xC0000017L</term>
            <term>Not enough memory is available to allocate necessary buffers.</term>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.SslSignHash(Vanara.PInvoke.NCrypt.NCRYPT_PROV_HANDLE,Vanara.PInvoke.NCrypt.NCRYPT_KEY_HANDLE,System.IntPtr,System.UInt32,System.IntPtr,System.UInt32,System.UInt32@,System.UInt32)">
            <summary>
            The <c>SslSignHash</c> function signs a hash by using the specified private key. The signing process is performed on the server.
            </summary>
            <param name="hSslProvider">The handle to the Secure Sockets Layer protocol (SSL) protocol provider instance.</param>
            <param name="hPrivateKey">The handle to the private key to use to sign the hash.</param>
            <param name="pbHashValue">A pointer to a buffer that contains the hash to sign.</param>
            <param name="cbHashValue">The size, in bytes, of the pbHashValue buffer.</param>
            <param name="pbSignature">
            The address of a buffer that receives the signature of the hash. The cbSignature parameter contains the size of this buffer. To
            determine the required sized size of the buffer, set the pbSignature parameter to <c>NULL</c>. The required size of the buffer
            will be returned in the pcbResult parameter.
            </param>
            <param name="cbSignature">The size, in bytes, of the pbSignature buffer.</param>
            <param name="pcbResult">
            A pointer to a value that, upon completion, contains the actual number of bytes written to the pbSignature buffer.
            </param>
            <param name="dwFlags">This parameter is reserved for future use.</param>
            <returns>
            <para>If the function succeeds, it returns zero.</para>
            <para>If the function fails, it returns a nonzero error value.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code/value</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>NTE_INVALID_HANDLE 0x80090026L</term>
            <term>One of the provided handles is not valid.</term>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.SslVerifySignature(Vanara.PInvoke.NCrypt.NCRYPT_PROV_HANDLE,Vanara.PInvoke.NCrypt.NCRYPT_KEY_HANDLE,System.IntPtr,System.UInt32,System.IntPtr,System.UInt32,System.UInt32)">
            <summary>
            The <c>SslVerifySignature</c> function verifies the specified signature by using the supplied hash and the public key.
            </summary>
            <param name="hSslProvider">The handle to the Secure Sockets Layer protocol (SSL) protocol provider instance.</param>
            <param name="hPublicKey">The handle to the public key.</param>
            <param name="pbHashValue">A pointer to a buffer that contains the hash to use to verify the signature.</param>
            <param name="cbHashValue">The size, in bytes, of the pbHashValue buffer.</param>
            <param name="pbSignature">A pointer to a buffer that contains the signature to verify.</param>
            <param name="cbSignature">The size, in bytes, of the pbSignature buffer.</param>
            <param name="dwFlags">This parameter is reserved for future use.</param>
            <returns>
            <para>If the function succeeds, it returns zero.</para>
            <para>If the function fails, it returns a nonzero error value.</para>
            <para>Possible return codes include, but are not limited to, the following.</para>
            <list type="table">
            <listheader>
            <term>Return code/value</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>NTE_INVALID_HANDLE 0x80090026L</term>
            <term>One of the provided handles is not valid.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            The <c>SslVerifySignature</c> function is not currently called by Windows. This function is a required part of the SSL Provider
            interface and should be fully implemented to ensure forward compatibility.
            </para>
            <para>
            Current implementations of the server side of the Transport Layer Security protocol (TLS) connection call the
            <c>NCryptVerifySignature</c> function during the client authentication to process the certificate verify message.
            </para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.NCrypt.NCRYPT_SSL_CIPHER_LENGTHS">
            <summary>Contains the header and trailer lengths of the input protocol, cipher suite, and key type.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.NCRYPT_SSL_CIPHER_LENGTHS.cbLength">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.NCRYPT_SSL_CIPHER_LENGTHS.dwHeaderLen">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.NCRYPT_SSL_CIPHER_LENGTHS.dwFixedTrailerLen">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.NCRYPT_SSL_CIPHER_LENGTHS.dwMaxVariableTrailerLen">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.NCRYPT_SSL_CIPHER_LENGTHS.dwFlags">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.NCrypt.NCRYPT_SSL_CIPHER_SUITE">
            <summary>The cipher suite information for a specified protocol, cipher suite, and key type set.</summary>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.NCRYPT_SSL_CIPHER_SUITE.dwProtocol">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.NCRYPT_SSL_CIPHER_SUITE.dwCipherSuite">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.NCRYPT_SSL_CIPHER_SUITE.dwBaseCipherSuite">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.NCRYPT_SSL_CIPHER_SUITE.szCipherSuite">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.NCRYPT_SSL_CIPHER_SUITE.szCipher">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.NCRYPT_SSL_CIPHER_SUITE.dwCipherLen">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.NCRYPT_SSL_CIPHER_SUITE.dwCipherBlockLen">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.NCRYPT_SSL_CIPHER_SUITE.szHash">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.NCRYPT_SSL_CIPHER_SUITE.dwHashLen">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.NCRYPT_SSL_CIPHER_SUITE.szExchange">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.NCRYPT_SSL_CIPHER_SUITE.dwMinExchangeLen">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.NCRYPT_SSL_CIPHER_SUITE.dwMaxExchangeLen">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.NCRYPT_SSL_CIPHER_SUITE.szCertificate">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.NCrypt.NCRYPT_SSL_CIPHER_SUITE.dwKeyType">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.NCrypt.SafeSslBuffer">
            <summary>Provides a <see cref="T:System.Runtime.InteropServices.SafeHandle"/> for an SSL buffer that is disposed using <see cref="M:Vanara.PInvoke.NCrypt.SslFreeBuffer(System.IntPtr)"/>.</summary>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.SafeSslBuffer.#ctor(System.IntPtr,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.NCrypt.SafeSslBuffer"/> class and assigns an existing handle.</summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
            <param name="ownsHandle">
            <see langword="true"/> to reliably release the handle during the finalization phase; otherwise, <see langword="false"/> (not recommended).
            </param>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.SafeSslBuffer.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.NCrypt.SafeSslBuffer"/> class.</summary>
        </member>
        <member name="M:Vanara.PInvoke.NCrypt.SafeSslBuffer.InternalReleaseHandle">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.TokenBinding">
            <summary>Methods and data types found in TokenBinding.dll.</summary>
        </member>
        <member name="T:Vanara.PInvoke.TokenBinding.TOKENBINDING_EXTENSION_FORMAT">
            <summary>
            <para>Specifies the formats that are available to interpret extension data.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.TokenBinding.TOKENBINDING_EXTENSION_FORMAT.TOKENBINDING_EXTENSION_FORMAT_UNDEFINED">
            <summary>The format for interpreting the extension data is undefined.</summary>
        </member>
        <member name="T:Vanara.PInvoke.TokenBinding.TOKENBINDING_KEY_PARAMETERS_TYPE">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.TokenBinding.TOKENBINDING_KEY_PARAMETERS_TYPE.TOKENBINDING_KEY_PARAMETERS_TYPE_RSA2048_PKCS">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.TokenBinding.TOKENBINDING_KEY_PARAMETERS_TYPE.TOKENBINDING_KEY_PARAMETERS_TYPE_RSA2048_PSS">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.TokenBinding.TOKENBINDING_KEY_PARAMETERS_TYPE.TOKENBINDING_KEY_PARAMETERS_TYPE_ECDSAP256">
            <summary>Undocumented.</summary>
        </member>
        <member name="T:Vanara.PInvoke.TokenBinding.TOKENBINDING_TYPE">
            <summary>
            <para>Specifies the possible types for a token binding.</para>
            </summary>
            <remarks>
            <para>
            More information about the use of these Token Binding types can be found in the <c>Token Binding over HTTP Internet</c> draft.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.TokenBinding.TOKENBINDING_TYPE.TOKENBINDING_TYPE_PROVIDED">
            <summary>
            This type of Token Binding is used to protect tokens issued by the Identity Provider for the client to present with
            subsequent requests back to this Identity Provider.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.TokenBinding.TOKENBINDING_TYPE.TOKENBINDING_TYPE_REFERRED">
            <summary>
            This type of Token Binding is used to protect tokens issued by the Identity Provider for the client to present to a Relying Party.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.TokenBinding.TokenBindingDeleteAllBindings">
            <summary>
            <para>Deletes all token binding keys that are associated with the calling user or app container.</para>
            </summary>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            </returns>
            <remarks>
            <para>You can call <c>TokenBindingDeleteAllBindings</c> from user mode.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.TokenBinding.TokenBindingDeleteBinding(System.String)">
            <summary>
            <para>Deletes the token binding key that is associated with the specified target string.</para>
            </summary>
            <param name="targetURL">
            <para>The target string for which <c>TokenBindingDeleteBinding</c> should delete the associated token binding key.</para>
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            </returns>
            <remarks>
            <para>You can call <c>TokenBindingDeleteBinding</c> from user mode.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.TokenBinding.TokenBindingGenerateBinding(Vanara.PInvoke.TokenBinding.TOKENBINDING_KEY_PARAMETERS_TYPE,System.String,Vanara.PInvoke.TokenBinding.TOKENBINDING_TYPE,System.IntPtr,System.UInt32,Vanara.PInvoke.TokenBinding.TOKENBINDING_EXTENSION_FORMAT,System.IntPtr,System.IntPtr@,System.UInt32@,System.IntPtr@)">
            <summary>
            <para>
            Constructs one token binding that contains the exported public key and signature by using the specified key type for the token
            binding, a target identifier string for creating and retrieving the token binding key, and the unique data. This function also
            returns the token binding identifier, if needed.
            </para>
            </summary>
            <param name="keyType">
            <para>
            The negotiated key type to use. Use a value from the list of key types that you retrieved by calling the
            TokenBindingGetKeyTypesClient function.
            </para>
            </param>
            <param name="targetURL">
            <para>
            The target string to use in conjunction with the key type to generate or retrieve a token binding key for the NCrypt operations
            that build the buffer for the tokenBinding parameter.
            </para>
            </param>
            <param name="bindingType">
            <para>The type of token binding that <c>TokenBindingGenerateBinding</c> should generate.</para>
            </param>
            <param name="tlsEKM">
            <para>A pointer to the buffer that contains unique data.</para>
            </param>
            <param name="tlsEKMSize">
            <para>The size of the buffer that the tlsUnique parameter points to, in bytes.</para>
            </param>
            <param name="extensionFormat">
            <para>The format to use to interpret the data in the extensionData parameter. This value must be <c>TOKENBINDING_EXTENSION_FORMAT_UNDEFINED</c>.</para>
            </param>
            <param name="extensionData">
            <para>
            A pointer to a buffer that contains extension data. The value of the extensionFormat parameter determines how to interpret this data.
            </para>
            </param>
            <param name="tokenBinding">
            <para>
            A pointer that receives the address of the token binding buffer. Use the HeapAlloc function to allocate the memory for this
            buffer, and the HeapFree function to free that memory.
            </para>
            </param>
            <param name="tokenBindingSize">
            <para>Pointer to a variable that receives the size of the buffer allocated for the tokenBinding parameter, in bytes.</para>
            </param>
            <param name="resultData">
            <para>
            A pointer that receives the address of the buffer that contains result data that includes the token binding identifier of the
            token binding that <c>TokenBindingGenerateBinding</c> generates. Use the HeapAlloc function to allocate the memory for this
            buffer, and the HeapFree function to free that memory. Specify NULL is you do not need this information.
            </para>
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            </returns>
            <remarks>
            <para>You can call <c>TokenBindingGenerateBinding</c> from user mode.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.TokenBinding.TokenBindingGenerateID(Vanara.PInvoke.TokenBinding.TOKENBINDING_KEY_PARAMETERS_TYPE,System.IntPtr,System.UInt32,System.IntPtr@)">
            <summary>
            <para>
            Constructs the token binding identifier by extracting the signature algorithm from the key type and copying the exported public key.
            </para>
            </summary>
            <param name="keyType">
            <para>
            The negotiated key type to use. Use a value from the list of key types that you retrieved by calling the
            TokenBindingGetKeyTypesClient function.
            </para>
            </param>
            <param name="publicKey">
            <para>An exported public key blob.</para>
            </param>
            <param name="publicKeySize">
            <para>The size of the exported public key blob.</para>
            </param>
            <param name="resultData">
            <para>
            A pointer that receives the address of the buffer that is allocated for the token binding result data. The token binding result
            data contains the token binding identifier.
            </para>
            <para>Use the HeapAlloc function to allocate the memory for this buffer, and the HeapFree method to free that memory.</para>
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            </returns>
            <remarks>
            <para>You can call <c>TokenBindingGenerateID</c> from user mode.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.TokenBinding.TokenBindingGenerateMessage(System.IntPtr[],System.UInt32[],System.UInt32,System.IntPtr@,System.UInt32@)">
            <summary>
            <para>Assembles the list of token bindings and generates the final message for the client device to the server.</para>
            </summary>
            <param name="tokenBindings">
            <para>Pointer to an array of token binding structures.</para>
            </param>
            <param name="tokenBindingsSize">
            <para>
            An array that contains the sizes of the corresponding token binding structures that the array in the tokenBindings parameter
            contains, in bytes.
            </para>
            </param>
            <param name="tokenBindingsCount">
            <para>The number of elements that the array in the tokenBindings parameter contains. This value cannot be 0.</para>
            </param>
            <param name="tokenBindingMessage">
            <para>
            A pointer that receives the address of the buffer that is allocated for the token binding message. Use the HeapAlloc function to
            allocate the memory for this buffer, and the HeapFree method to free that memory.
            </para>
            </param>
            <param name="tokenBindingMessageSize">
            <para>A pointer to a variable that contains the size of the buffer allocated for the tokenBindingMessage parameter.</para>
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            </returns>
            <remarks>
            <para>You can call <c>TokenBindingGenerateMessage</c> from user mode.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.TokenBinding.TokenBindingGetKeyTypesClient(System.IntPtr@)">
            <summary>
            <para>Retrieves a list of the key types that the client device supports.</para>
            </summary>
            <param name="keyTypes">
            <para>
            A pointer to a buffer that contains the list of key types that the client device supports. <c>TokenBindingGetKeyTypesClient</c>
            returns the string identifiers for well-known algorithms that correspond to the keys that the client device supports. Use
            HeapAlloc to allocate the memory for the buffer, and HeapFree to free that memory.
            </para>
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            </returns>
            <remarks>
            <para>You can call <c>TokenBindingGetKeyTypesClient</c> from user mode.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.TokenBinding.TokenBindingGetKeyTypesServer(System.IntPtr@)">
            <summary>
            <para>Retrieves a list of the key types that the server supports.</para>
            </summary>
            <param name="keyTypes">
            <para>
            A pointer to a buffer that contains the list of key types that the server supports. <c>TokenBindingGetKeyTypesServer</c> returns
            the string identifiers for well-known algorithms that correspond to the keys that the server supports.
            </para>
            <para>
            In user mode, use HeapAlloc to allocate the memory for the buffer, and HeapFree to free that memory. In kernel mode, use
            ExAllocatePoolWithTag to allocate the memory for the buffer, and ExFreePool to free that memory.
            </para>
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            </returns>
            <remarks>
            <para>
            You can call <c>TokenBindingGetKeyTypesServer</c> from both user mode and kernel mode. To call this function in kernel mode, link
            to Ksecdd.sys, and use the functions mentioned in the description for the keyTypes parameter for allocating and freeing memory.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.TokenBinding.TokenBindingVerifyMessage(System.IntPtr,System.UInt32,Vanara.PInvoke.TokenBinding.TOKENBINDING_KEY_PARAMETERS_TYPE,System.IntPtr,System.UInt32,System.IntPtr@)">
            <summary>
            <para>Validates the token binding message and verifies the token bindings that the message contains.</para>
            </summary>
            <param name="tokenBindingMessage">
            <para>A pointer to the buffer that contains the token binding message.</para>
            </param>
            <param name="tokenBindingMessageSize">
            <para>The size of the buffer that the tokenBindingMessage parameter points to, in bytes.</para>
            </param>
            <param name="keyType">
            <para>
            The negotiated key algorithm to use. Use a value from the list of key types that you retrieved by calling the
            TokenBindingGetKeyTypesServer function.
            </para>
            </param>
            <param name="tlsEKM">
            <para>A pointer to a buffer that contains unique data.</para>
            </param>
            <param name="tlsEKMSize">
            <para>The size of the buffer that the tlsUnique parameter points to, in bytes.</para>
            </param>
            <param name="resultList">
            <para>
            A pointer that receives the address for the buffer that contains the results for each of the token bindings that
            <c>TokenBindingVerifyMessage</c> verifies.
            </para>
            <para>
            In user mode, use HeapAlloc to allocate the memory for the buffer, and HeapFree to free that memory. In kernel mode, use
            ExAllocatePoolWithTag to allocate the memory for the buffer, and ExFreePool to free that memory.
            </para>
            </param>
            <returns>
            <para>Returns a status code that indicates the success or failure of the function.</para>
            </returns>
            <remarks>
            <para>
            You can call <c>TokenBindingVerifyMessage</c> from both user mode and kernel mode. o call this function in kernel mode, link to
            Ksecdd.sys, and use the functions mentioned in the description for the resultList parameter for allocating and freeing memory.
            </para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.TokenBinding.TOKENBINDING_IDENTIFIER">
            <summary>
            <para>Contains the information for representing a token binding identifier that results from a token binding message exchange.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.TokenBinding.TOKENBINDING_IDENTIFIER.keyType">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.TokenBinding.TOKENBINDING_KEY_TYPES">
            <summary>
            <para>Contains all of the combinations of types of token binding keys that a client device or server supports.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.TokenBinding.TOKENBINDING_KEY_TYPES.keyCount">
            <summary>
            <para>The number of elements in the array that the <c>key</c> member contains.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.TokenBinding.TOKENBINDING_KEY_TYPES.keyType">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.TokenBinding.TOKENBINDING_RESULT_DATA">
            <summary>
            <para>
            Contains data about the result of generating a token binding or verifying one of the token bindings in a token binding message.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.TokenBinding.TOKENBINDING_RESULT_DATA.bindingType">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.TokenBinding.TOKENBINDING_RESULT_DATA.identifierSize">
            <summary>
            <para>The size of the TOKENBINDING_IDENTIFIER structure that the <c>identifierData</c> member points to, in bytes.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.TokenBinding.TOKENBINDING_RESULT_DATA.identifierData">
            <summary>
            <para>Pointer to the token binding identifier for the token binding that was generated or verified.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.TokenBinding.TOKENBINDING_RESULT_DATA.extensionFormat">
            <summary>
            <para>The format to use to interpret the data in the extensionData parameter. This value must be <c>TOKENBINDING_EXTENSION_FORMAT_UNDEFINED</c>.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.TokenBinding.TOKENBINDING_RESULT_DATA.extensionSize">
            <summary>
            <para>The size of the buffer that the <c>extensionData</c> member points to, in bytes.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.TokenBinding.TOKENBINDING_RESULT_DATA.extensionData">
            <summary>
            <para>
            A pointer to a buffer that contains extension data. The value of the extensionFormat parameter determines how to interpret
            this data.
            </para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.TokenBinding.TOKENBINDING_RESULT_LIST">
            <summary>
            <para>Contains the results for each of the token bindings that TokenBindingVerifyMessage verified.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.TokenBinding.TOKENBINDING_RESULT_LIST.resultCount">
            <summary>
            <para>The number of elements in the array that the <c>resultData</c> member contains.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.TokenBinding.TOKENBINDING_RESULT_LIST.resultData">
            <summary>
            <para>An array of results, one for each of the token bindings that TokenBindingVerifyMessage verified.</para>
            </summary>
        </member>
    </members>
</doc>
