<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Vanara.PInvoke.Rpc</name>
    </assembly>
    <members>
        <member name="T:Vanara.PInvoke.Rpc">
            <summary>Items from the Rpc.dll</summary>
            <summary>Items from the Rpc.dll</summary>
            <summary>Items from the Rpc.dll</summary>
            <summary>Items from the Rpc.dll</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_C_CANCEL_INFINITE_TIMEOUT">
            <summary>Specifies that a client waits an indefinite amount of time.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_C_LISTEN_MAX_CALLS_DEFAULT">
            <summary>Max calls value.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_C_PROTSEQ_MAX_REQS_DEFAULT">
            <summary>Max length value.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Rpc.RCP_C_BINDING_TIMEOUT">
            <summary>
            The RPC library uses the binding time-out constants to specify the relative amount of time that should be spent to establish a
            binding to the server before giving up. The timeout can be enabled with a call to the <c>RpcMgmtSetComTimeout</c> function. The
            following list contains the valid time-out values.
            </summary>
            <remarks>
            The values in the preceding table are not in seconds. These values represent a relative amount of time on a scale of zero to 10.
            For more information on avoiding communication delays, refer to Preventing Client-side Hangs.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RCP_C_BINDING_TIMEOUT.RPC_C_BINDING_INFINITE_TIMEOUT">
            <summary>Keeps trying to establish communications forever.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RCP_C_BINDING_TIMEOUT.RPC_C_BINDING_MIN_TIMEOUT">
            <summary>
            Tries the minimum amount of time for the network protocol being used. This value favors response time over correctness in
            determining whether the server is running.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RCP_C_BINDING_TIMEOUT.RPC_C_BINDING_DEFAULT_TIMEOUT">
            <summary>
            Tries an average amount of time for the network protocol being used. This value gives correctness in determining whether a
            server is running and gives response time equal weight. This is the default value.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RCP_C_BINDING_TIMEOUT.RPC_C_BINDING_MAX_TIMEOUT">
            <summary>
            Tries the longest amount of time for the network protocol being used. This value favors correctness in determining whether a
            server is running over response time.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Rpc.RPC_BHO">
            <summary>A set of flags describing specific RPC behaviors.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_BHO.RPC_BHO_NONCAUSAL">
            <summary>Specifies causal ordering whereby calls are executed independently of one another rather than in order of submission.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_BHO.RPC_BHO_DONTLINGER">
            <summary>Specifies that a socket association must be shutdown after the last binding handle on it is freed.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_BHO.RPC_BHO_EXCLUSIVE_AND_GUARANTEED">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.Rpc.RPC_C_AUTHN">
            <summary>
            The authentication-level constants represent authentication levels passed to various run-time functions. These levels are listed
            in order of increasing authentication. Each new level adds to the authentication provided by the previous level. If the RPC
            run-time library does not support the specified level, it automatically upgrades to the next higher supported level.
            </summary>
            <remarks>Regardless of the value specified by the constant, <c>ncalrpc</c> always uses RPC_C_AUTHN_LEVEL_PKT_PRIVACY.</remarks>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_C_AUTHN.RPC_C_AUTHN_NONE">
            <summary>No authentication.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_C_AUTHN.RPC_C_AUTHN_DCE_PRIVATE">
            <summary>Use Distributed Computing Environment (DCE) private key authentication.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_C_AUTHN.RPC_C_AUTHN_DCE_PUBLIC">
            <summary>DCE public key authentication (reserved for future use).</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_C_AUTHN.RPC_C_AUTHN_DEC_PUBLIC">
            <summary>DEC public key authentication (reserved for future use).</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_C_AUTHN.RPC_C_AUTHN_GSS_NEGOTIATE">
            <summary>
            Use the Microsoft Negotiate SSP. This SSP negotiates between the use of the NTLM and Kerberos protocol Security Support
            Providers (SSP).
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_C_AUTHN.RPC_C_AUTHN_WINNT">
            <summary>Use the Microsoft NT LAN Manager (NTLM) SSP.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_C_AUTHN.RPC_C_AUTHN_GSS_SCHANNEL">
            <summary>
            Use the Schannel SSP. This SSP supports Secure Socket Layer (SSL), private communication technology (PCT), and transport
            level security (TLS).
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_C_AUTHN.RPC_C_AUTHN_GSS_KERBEROS">
            <summary>Use the Microsoft Kerberos SSP.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_C_AUTHN.RPC_C_AUTHN_DPA">
            <summary>Use Distributed Password Authentication (DPA).</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_C_AUTHN.RPC_C_AUTHN_MSN">
            <summary>Authentication protocol SSP used for the Microsoft Network (MSN).</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_C_AUTHN.RPC_C_AUTHN_DIGEST">
            <summary>Windows XP or later: Use the Microsoft Digest SSP</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_C_AUTHN.RPC_C_AUTHN_NEGO_EXTENDER">
            <summary>Windows 7 or later: Reserved. Do not use</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_C_AUTHN.RPC_C_AUTHN_MQ">
            <summary>This SSP provides an SSPI-compatible wrapper for the Microsoft Message Queue (MSMQ) transport-level protocol.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_C_AUTHN.RPC_C_AUTHN_DEFAULT">
            <summary>Use the default authentication service.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_C_AUTHN.RPC_C_AUTHN_KERNEL">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_C_AUTHN.RPC_C_AUTHN_PKU2U">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_C_AUTHN.RPC_C_AUTHN_LIVE_SSP">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_C_AUTHN.RPC_C_AUTHN_LIVEXP_SSP">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_C_AUTHN.RPC_C_AUTHN_CLOUD_AP">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_C_AUTHN.RPC_C_AUTHN_MSONLINE">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.Rpc.RPC_C_AUTHN_INFO_TYPE">
            <summary>Specifies the type of additional credentials present in the <c>u</c> union.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_C_AUTHN_INFO_TYPE.RPC_C_AUTHN_INFO_TYPE_NONE">
            <summary>No additional credentials are passed in the u union.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_C_AUTHN_INFO_TYPE.RPC_C_AUTHN_INFO_TYPE_HTTP">
            <summary>
            The HttpCredentials member of the u union points to a RPC_HTTP_TRANSPORT_CREDENTIALS structure. This value can be used only
            when the protocol sequence is ncacn_http. Any other protocol sequence returns RPC_S_INVALID_ARG.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Rpc.RPC_C_AUTHN_LEVEL">
            <summary>
            The authentication-level constants represent authentication levels passed to various run-time functions. These levels are listed
            in order of increasing authentication. Each new level adds to the authentication provided by the previous level. If the RPC
            run-time library does not support the specified level, it automatically upgrades to the next higher supported level.
            </summary>
            <remarks>Regardless of the value specified by the constant, <c>ncalrpc</c> always uses RPC_C_AUTHN_LEVEL_PKT_PRIVACY.</remarks>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_C_AUTHN_LEVEL.RPC_C_AUTHN_LEVEL_DEFAULT">
            <summary>Uses the default authentication level for the specified authentication service.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_C_AUTHN_LEVEL.RPC_C_AUTHN_LEVEL_NONE">
            <summary>Performs no authentication.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_C_AUTHN_LEVEL.RPC_C_AUTHN_LEVEL_CONNECT">
            <summary>Authenticates only when the client establishes a relationship with a server.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_C_AUTHN_LEVEL.RPC_C_AUTHN_LEVEL_CALL">
            <summary>
            Authenticates only at the beginning of each remote procedure call when the server receives the request. Does not apply to
            remote procedure calls made using the connection-based protocol sequences (those that start with the prefix "ncacn"). If the
            protocol sequence in a binding handle is a connection-based protocol sequence and you specify this level, this routine
            instead uses the RPC_C_AUTHN_LEVEL_PKT constant.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_C_AUTHN_LEVEL.RPC_C_AUTHN_LEVEL_PKT">
            <summary>Authenticates only that all data received is from the expected client. Does not validate the data itself.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_C_AUTHN_LEVEL.RPC_C_AUTHN_LEVEL_PKT_INTEGRITY">
            <summary>Authenticates and verifies that none of the data transferred between client and server has been modified.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_C_AUTHN_LEVEL.RPC_C_AUTHN_LEVEL_PKT_PRIVACY">
            <summary>
            Includes all previous levels, and ensures clear text data can only be seen by the sender and the receiver. In the local
            case, this involves using a secure channel. In the remote case, this involves encrypting the argument value of each remote
            procedure call.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Rpc.RPC_C_AUTHZ">
            <summary>
            <para>The authorization service constants represent the authorization services passed to various run-time functions.</para>
            <para>Most applications find RPC_C_AUTHZ_NON sufficient.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_C_AUTHZ.RPC_C_AUTHZ_NONE">
            <summary>Server performs no authorization.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_C_AUTHZ.RPC_C_AUTHZ_NAME">
            <summary>Server performs authorization based on the client's principal name.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_C_AUTHZ.RPC_C_AUTHZ_DCE">
            <summary>
            Server performs authorization checking using the client's DCE privilege attribute certificate (PAC) information, which is
            sent to the server with each remote procedure call made using the binding handle. Generally, access is checked against DCE
            access control lists (ACLs).
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_C_AUTHZ.RPC_C_AUTHZ_DEFAULT">
            <summary>Server uses the default authorization service for the current SSP.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Rpc.RPC_C_HTTP_AUTHN_SCHEME">
            <summary>RPC authentication schemes.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_C_HTTP_AUTHN_SCHEME.RPC_C_HTTP_AUTHN_SCHEME_BASIC">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_C_HTTP_AUTHN_SCHEME.RPC_C_HTTP_AUTHN_SCHEME_NTLM">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_C_HTTP_AUTHN_SCHEME.RPC_C_HTTP_AUTHN_SCHEME_PASSPORT">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_C_HTTP_AUTHN_SCHEME.RPC_C_HTTP_AUTHN_SCHEME_DIGEST">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_C_HTTP_AUTHN_SCHEME.RPC_C_HTTP_AUTHN_SCHEME_NEGOTIATE">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_C_HTTP_AUTHN_SCHEME.RPC_C_HTTP_AUTHN_SCHEME_CERT">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.Rpc.RPC_C_HTTP_AUTHN_TARGET">
            <summary>Specifies the authentication target.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_C_HTTP_AUTHN_TARGET.RPC_C_HTTP_AUTHN_TARGET_SERVER">
            <summary>
            Authenticate against the RPC Proxy, which is the HTTP Server from an HTTP perspective. This is the most common value.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_C_HTTP_AUTHN_TARGET.RPC_C_HTTP_AUTHN_TARGET_PROXY">
            <summary>Authenticate against the HTTP Proxy. This value is uncommon.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Rpc.RPC_C_HTTP_FLAG">
            <summary>A set of flags that can be combined with the bitwise OR operator.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_C_HTTP_FLAG.RPC_C_HTTP_FLAG_USE_SSL">
            <summary>Instructs RPC to use SSL to communicate with the RPC Proxy.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_C_HTTP_FLAG.RPC_C_HTTP_FLAG_USE_FIRST_AUTH_SCHEME">
            <summary>
            When set, RPC chooses the first scheme in the AuthnSchemes array and attempts to authenticate to the RPC Proxy. If the RPC
            Proxy does not support the selected authentication scheme, the call fails. When not set, the RPC client queries the RPC
            Proxy for supported authentication schemes, and chooses one.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_C_HTTP_FLAG.RPC_C_HTTP_FLAG_IGNORE_CERT_CN_INVALID">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_C_HTTP_FLAG.RPC_C_HTTP_FLAG_ENABLE_CERT_REVOCATION_CHECK">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.Rpc.RPC_C_IMP_LEVEL">
            <summary>
            <para>
            Specifies an impersonation level, which indicates the amount of authority given to the server when it is impersonating the client.
            </para>
            </summary>
            <remarks>
            <para>
            <c>GetUserName</c> will fail while impersonating at identify level. The workaround is to impersonate, call
            <c>OpenThreadToken</c>, revert, call <c>GetTokenInformation</c>, and finally, call <c>LookupAccountSid</c>. Using
            <c>CoSetProxyBlanket</c>, the client sets the impersonation level
            </para>
            <para>
            Using <c>CoSetProxyBlanket</c>, the client sets the impersonation level and proxy identity that will be available when a server
            calls <c>CoImpersonateClient</c>. The identity the server will see when impersonating takes place is described in Cloaking. Note
            that when making a call while impersonating, the callee will normally receive the caller's process token, not the caller's
            impersonation token. To receive the caller's impersonation token, the caller must enable cloaking.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_C_IMP_LEVEL.RPC_C_IMP_LEVEL_DEFAULT">
            <summary>
            DCOM can choose the impersonation level using its normal security blanket negotiation algorithm. For more information, see
            Security Blanket Negotiation.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_C_IMP_LEVEL.RPC_C_IMP_LEVEL_ANONYMOUS">
            <summary>
            The client is anonymous to the server. The server process can impersonate the client, but the impersonation token will not
            contain any information and cannot be used.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_C_IMP_LEVEL.RPC_C_IMP_LEVEL_IDENTIFY">
            <summary>
            The server can obtain the client's identity. The server can impersonate the client for ACL checking, but it cannot access
            system objects as the client.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_C_IMP_LEVEL.RPC_C_IMP_LEVEL_IMPERSONATE">
            <summary>
            The server process can impersonate the client's security context while acting on behalf of the client. This level of
            impersonation can be used to access local resources such as files. When impersonating at this level, the impersonation token
            can only be passed across one machine boundary. The Schannel authentication service only supports this level of impersonation.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_C_IMP_LEVEL.RPC_C_IMP_LEVEL_DELEGATE">
            <summary>
            The server process can impersonate the client's security context while acting on behalf of the client. The server process
            can also make outgoing calls to other servers while acting on behalf of the client, using cloaking. The server may use the
            client's security context on other machines to access local and remote resources as the client. When impersonating at this
            level, the impersonation token can be passed across any number of computer boundaries.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Rpc.RPC_C_MGMT">
            <summary>Values passed to RPC_MGMT_AUTHORIZATION_FN.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_C_MGMT.RPC_C_MGMT_INQ_IF_IDS">
            <summary>RpcMgmtInqIfIds</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_C_MGMT.RPC_C_MGMT_INQ_PRINC_NAME">
            <summary>RpcMgmtInqServerPrincName</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_C_MGMT.RPC_C_MGMT_INQ_STATS">
            <summary>RpcMgmtInqStats</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_C_MGMT.RPC_C_MGMT_IS_SERVER_LISTEN">
            <summary>RpcMgmtIsServerListening</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_C_MGMT.RPC_C_MGMT_STOP_SERVER_LISTEN">
            <summary>RpcMgmtStopServerListening</summary>
        </member>
        <member name="T:Vanara.PInvoke.Rpc.RPC_C_OPT">
            <summary>
            Applications set the binding option constants to control how the RPC run-time library processes remote procedure calls. The
            following table lists each binding property, and the relevant constant values for the binding properties.
            </summary>
            <remarks>
            <para>
            By default, the RPC run-time library executes the calls on a given binding handle from each thread of an application in strict
            order of submission. This does not guarantee that calls from different threads on the same binding handle are serialized.
            Multithreaded applications must serialize their RPC calls. If this behavior is too restrictive, you can enable noncausal
            ordering. When you do, the RPC run-time library executes calls independently. It imposes no ordering on their submission.
            </para>
            <para>
            One example of an application that might find noncausal ordering useful is a multithreaded program whose threads make calls on
            the same binding handle. Similarly, a program that uses multiple asynchronous calls on a binding handle will find noncausal
            ordering a convenient option. Another example might be an Internet proxy program that uses a single thread to handle requests
            for several clients. In each of these cases, it would be extremely restrictive to try to serialize the remote procedure calls.
            </para>
            <para>
            The <c>RPC_C_OPT_DONT_LINGER</c> option can be set only on binding handles that use the <c>ncalrpc</c> or <c>ncacn_*</c>
            protocol sequences. It cannot be used on <c>ncadg_*</c> protocol sequences. The <c>RpcBindingSetOption</c> function with this
            option must be called on a binding handle on which at least one RPC call has been made. If no RPC call have been made on the
            binding handle, <c>RPC_S_WRONG_KIND_OF_BINDING</c> is returned from the <c>RpcBindingSetOption</c> function call. The option
            takes effect for the entire association, regardless of how many binding handles are attached to the association. Since it is
            checked before the association is destroyed, it can be set at any time before the binding handle is closed.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_C_OPT.RPC_C_OPT_BINDING_NONCAUSAL">
            <summary>
            Default. If FALSE, causal call ordering. RPC calls are executed in strict order of submission. See Remarks.
            <para>If TRUE, noncausal call ordering. RPC calls are executed independently. See Remarks.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_C_OPT.RPC_C_OPT_MAX_OPTIONS">
            <summary>Not needed for application programs. Used internally by Microsoft.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_C_OPT.RPC_C_DONT_FAIL">
            <summary>Not needed for application programs. Used internally by Microsoft.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_C_OPT.RPC_C_OPT_SESSION_ID">
            <summary>If TRUE, a session ID is generated for each connection.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_C_OPT.RPC_C_OPT_COOKIE_AUTH">
            <summary>
            If TRUE, client-side cookie-based authentication is used for connections. A pointer to the RPC_C_OPT_COOKIE_AUTH_DESCRIPTOR
            structure is passed as the OptionValue parameter in RpcBindingSetOption.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_C_OPT.RPC_C_OPT_RESOURCE_TYPE_UUID">
            <summary>Not needed for application programs. Used internally by Microsoft.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_C_OPT.RPC_C_OPT_DONT_LINGER">
            <summary>If TRUE, force shutdown of the association after the last binding handle/context handle on it is freed.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_C_OPT.RPC_C_OPT_UNIQUE_BINDING">
            <summary>
            When set to true, RPC does not reuse existing connections. A unique binding handle is opened for each connection and state
            is maintained for each unique binding handle.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Rpc.RPC_C_POL_ENDPT">
            <summary>Set of flags that determine the attributes of the port or ports where the server receives remote procedure calls.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_C_POL_ENDPT.RPC_C_USE_INTERNET_PORT">
            <summary>
            Allocates the endpoint from one of the ports defined in the registry as "Internet Available." Valid only with ncacn_ip_tcp
            and ncadg_ip_udp protocol sequences.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_C_POL_ENDPT.RPC_C_USE_INTRANET_PORT">
            <summary>
            Allocates the endpoint from one of the ports defined in the registry as "Intranet Available." Valid only with ncacn_ip_tcp
            and ncadg_ip_udp protocol sequences.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_C_POL_ENDPT.RPC_C_DONT_FAIL">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_C_POL_ENDPT.RPC_C_RPCHTTP_USE_LOAD_BALANCE">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.Rpc.RPC_C_POL_NIC">
            <summary>Policy for binding to Network Interface Cards (NICs).</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_C_POL_NIC.RPC_C_BIND_TO_REG_NICS">
            <summary>
            Binds to NICs on the basis of the registry settings. Always use this value when you are using the RPC_POLICY structure to
            define message-queue properties.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_C_POL_NIC.RPC_C_BIND_TO_ALL_NICS">
            <summary>
            Overrides the registry settings and binds to all NICs. If the Bind key is missing from the registry, then the NICFlags
            member will have no effect at run time. If the key contains an invalid value, then the entire configuration is marked as
            invalid and all calls to RpcServerUseProtseq* will fail.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Rpc.RPC_C_QOS_CAPABILITIES">
            <summary>Security services being provided to the application.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_C_QOS_CAPABILITIES.RPC_C_QOS_CAPABILITIES_DEFAULT">
            <summary>Used when no provider-specific capabilities are needed.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_C_QOS_CAPABILITIES.RPC_C_QOS_CAPABILITIES_MUTUAL_AUTH">
            <summary>
            Specifying this flag causes the RPC run time to request mutual authentication from the security provider. Some security
            providers do not support mutual authentication. If the security provider does not support mutual authentication, or the
            identity of the server cannot be established, a remote procedure call to such server fails with error RPC_S_SEC_PKG_ERROR.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_C_QOS_CAPABILITIES.RPC_C_QOS_CAPABILITIES_MAKE_FULLSIC">
            <summary>Not currently implemented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_C_QOS_CAPABILITIES.RPC_C_QOS_CAPABILITIES_ANY_AUTHORITY">
            <summary>
            Accepts the client's credentials even if the certificate authority (CA) is not in the server's list of trusted CAs. This
            constant is used only by the SCHANNEL SSP.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_C_QOS_CAPABILITIES.RPC_C_QOS_CAPABILITIES_IGNORE_DELEGATE_FAILURE">
            <summary>
            When specified, this flag directs the RPC runtime on the client to ignore an error to establish a security context that
            supports delegation. Normally, if the client asks for delegation and the security system cannot establish a security context
            that supports delegation, error RPC_S_SEC_PKG_ERROR is returned; when this flag is specified, no error is returned.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_C_QOS_CAPABILITIES.RPC_C_QOS_CAPABILITIES_LOCAL_MA_HINT">
            <summary>
            This flag specifies to RPC that the server is local to the machine making the RPC call. In this situation RPC instructs the
            endpoint mapper to pick up only endpoints registered by the principal specified in the ServerPrincName or Sid members (these
            members are available in RPC_SECURITY_QOS_V3, RPC_SECURITY_QOS_V4, and RPC_SECURITY_QOS_V5 only). See Remarks for more information.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_C_QOS_CAPABILITIES.RPC_C_QOS_CAPABILITIES_SCHANNEL_FULL_AUTH_IDENTITY">
            <summary>
            If set, the RPC runtime uses the SChannel SSP to perform smartcard-based authentication without displaying a PIN prompt
            dialog box by the cryptographic services provider (CSP). In the call to RpcBindingSetAuthInfoEx, the AuthIdentity parameter
            must be a SEC_WINNT_AUTH_IDENTITY structure whose members contain the following: If the
            RPC_C_QOS_CAPABILITIES_SCHANNEL_FULL_AUTH_IDENTITY flag is used for any SSP other than SChannel, or if the members of
            SEC_WINNT_AUTH_IDENTITY do not conform to the above, RPC_S_INVALID_ARG will be returned by RpcBindingSetAuthInfoEx.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Rpc.RPC_C_QOS_IDENTITY">
            <summary>Sets the context tracking mode.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_C_QOS_IDENTITY.RPC_C_QOS_IDENTITY_STATIC">
            <summary>
            Security context is created only once and is never revised during the entire communication, even if the client side changes
            it. This is the default behavior if RPC_SECURITY_QOS is not specified.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_C_QOS_IDENTITY.RPC_C_QOS_IDENTITY_DYNAMIC">
            <summary>
            Context is revised whenever the ModifiedId in the client's token is changed. All protocols use the ModifiedId (see note).
            Windows 2000: All remote protocols (all protocols other than ncalrpc) use the AuthenticationID, also known as the LogonId,
            to track changes in the client's identity. The ncalrpc protocol uses ModifiedId.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Rpc.RPC_IF">
            <summary>
            <para>Interface Registration Flags</para>
            <para>These constants are used in the Flags parameter of the <c>RpcServerRegisterIf2</c> and <c>RpcServerRegisterIfEx</c> functions.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_IF.RPC_IF_AUTOLISTEN">
            <summary>
            This is an auto-listen interface. The run time begins listening for calls as soon as the first autolisten interface is
            registered, and stops listening when the last autolisten interface is unregistered.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_IF.RPC_IF_OLE">
            <summary>Reserved for OLE. Do not use this flag.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_IF.RPC_IF_ALLOW_UNKNOWN_AUTHORITY">
            <summary>Currently not implemented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_IF.RPC_IF_ALLOW_SECURE_ONLY">
            <summary>
            Limits connections to clients that use an authorization level higher than RPC_C_AUTHN_LEVEL_NONE. Specifying this flag
            allows clients to come through on the NULL session. On Windows XP and Windows Server 2003, such clients are not allowed.
            Clients that fail the RPC_IF_ALLOW_SECURE_ONLY test receive an RPC_S_ACCESS_DENIED error. Using the RPC_IF_ALLOW_SECURE_ONLY
            flag does not imply or guarantee a high level of privilege on the part of the calling user. RPC only checks that the user
            has valid credentials; the calling user may be using the guest account or other low privileged accounts. Do not assume high
            privilege when RPC_IF_ALLOW_SECURE_ONLY is used. Windows NT 4.0 and Windows Me/98/95:
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_IF.RPC_IF_ALLOW_CALLBACKS_WITH_NO_AUTH">
            <summary>
            When this interface flag is registered, the RPC runtime invokes the registered security callback for all calls, regardless
            of identity, protocol sequence, or authentication level of the client.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_IF.RPC_IF_ALLOW_LOCAL_ONLY">
            <summary>
            When this interface flag is registered, the RPC runtime rejects calls made by remote clients. All local calls using ncadg_*
            and ncacn_* protocol sequences are also rejected, with the exception of ncacn_np. RPC allows ncacn_NP calls only if the call
            does not come from SRV. Calls from ncalrpc are always processed.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_IF.RPC_IF_SEC_NO_CACHE">
            <summary>Disables security callback caching, forcing a security callback for each RPC call on a given interface.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_IF.RPC_IF_SEC_CACHE_PER_PROC">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_IF.RPC_IF_ASYNC_CALLBACK">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.Rpc.SEC_WINNT_AUTH_IDENTITY_CHARSET">
            <summary>Character set used by <see cref="T:Vanara.PInvoke.Rpc.SEC_WINNT_AUTH_IDENTITY"/></summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.SEC_WINNT_AUTH_IDENTITY_CHARSET.SEC_WINNT_AUTH_IDENTITY_ANSI">
            <summary>The strings in this structure are in ANSI format.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.SEC_WINNT_AUTH_IDENTITY_CHARSET.SEC_WINNT_AUTH_IDENTITY_UNICODE">
            <summary>The strings in this structure are in Unicode format.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Rpc.RPC_AUTH_IDENTITY_HANDLE">
            <summary>Provides a RPC_AUTH_IDENTITY_HANDLE.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Rpc.RPC_AUTH_IDENTITY_HANDLE.#ctor(System.IntPtr)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Rpc.RPC_AUTH_IDENTITY_HANDLE"/> struct.</summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
        </member>
        <member name="P:Vanara.PInvoke.Rpc.RPC_AUTH_IDENTITY_HANDLE.NULL">
            <summary>Returns an invalid handle by instantiating a <see cref="T:Vanara.PInvoke.Rpc.RPC_AUTH_IDENTITY_HANDLE"/> object with <see cref="F:System.IntPtr.Zero"/>.</summary>
        </member>
        <member name="P:Vanara.PInvoke.Rpc.RPC_AUTH_IDENTITY_HANDLE.IsNull">
            <summary>Gets a value indicating whether this instance is a null handle.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Rpc.RPC_AUTH_IDENTITY_HANDLE.op_Explicit(Vanara.PInvoke.Rpc.RPC_AUTH_IDENTITY_HANDLE)~System.IntPtr">
            <summary>Performs an explicit conversion from <see cref="T:Vanara.PInvoke.Rpc.RPC_AUTH_IDENTITY_HANDLE"/> to <see cref="T:System.IntPtr"/>.</summary>
            <param name="h">The handle.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Rpc.RPC_AUTH_IDENTITY_HANDLE.op_Implicit(System.IntPtr)~Vanara.PInvoke.Rpc.RPC_AUTH_IDENTITY_HANDLE">
            <summary>Performs an implicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:Vanara.PInvoke.Rpc.RPC_AUTH_IDENTITY_HANDLE"/>.</summary>
            <param name="h">The pointer to a handle.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Rpc.RPC_AUTH_IDENTITY_HANDLE.op_Inequality(Vanara.PInvoke.Rpc.RPC_AUTH_IDENTITY_HANDLE,Vanara.PInvoke.Rpc.RPC_AUTH_IDENTITY_HANDLE)">
            <summary>Implements the operator !=.</summary>
            <param name="h1">The first handle.</param>
            <param name="h2">The second handle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Rpc.RPC_AUTH_IDENTITY_HANDLE.op_Equality(Vanara.PInvoke.Rpc.RPC_AUTH_IDENTITY_HANDLE,Vanara.PInvoke.Rpc.RPC_AUTH_IDENTITY_HANDLE)">
            <summary>Implements the operator ==.</summary>
            <param name="h1">The first handle.</param>
            <param name="h2">The second handle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Rpc.RPC_AUTH_IDENTITY_HANDLE.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.Rpc.RPC_AUTH_IDENTITY_HANDLE.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.Rpc.RPC_AUTH_IDENTITY_HANDLE.DangerousGetHandle">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.Rpc.RPC_AUTHZ_HANDLE">
            <summary>Provides a RPC_AUTHZ_HANDLE.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Rpc.RPC_AUTHZ_HANDLE.#ctor(System.IntPtr)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Rpc.RPC_AUTHZ_HANDLE"/> struct.</summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
        </member>
        <member name="P:Vanara.PInvoke.Rpc.RPC_AUTHZ_HANDLE.NULL">
            <summary>Returns an invalid handle by instantiating a <see cref="T:Vanara.PInvoke.Rpc.RPC_AUTHZ_HANDLE"/> object with <see cref="F:System.IntPtr.Zero"/>.</summary>
        </member>
        <member name="P:Vanara.PInvoke.Rpc.RPC_AUTHZ_HANDLE.IsNull">
            <summary>Gets a value indicating whether this instance is a null handle.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Rpc.RPC_AUTHZ_HANDLE.op_Explicit(Vanara.PInvoke.Rpc.RPC_AUTHZ_HANDLE)~System.IntPtr">
            <summary>Performs an explicit conversion from <see cref="T:Vanara.PInvoke.Rpc.RPC_AUTHZ_HANDLE"/> to <see cref="T:System.IntPtr"/>.</summary>
            <param name="h">The handle.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Rpc.RPC_AUTHZ_HANDLE.op_Implicit(System.IntPtr)~Vanara.PInvoke.Rpc.RPC_AUTHZ_HANDLE">
            <summary>Performs an implicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:Vanara.PInvoke.Rpc.RPC_AUTHZ_HANDLE"/>.</summary>
            <param name="h">The pointer to a handle.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Rpc.RPC_AUTHZ_HANDLE.op_Inequality(Vanara.PInvoke.Rpc.RPC_AUTHZ_HANDLE,Vanara.PInvoke.Rpc.RPC_AUTHZ_HANDLE)">
            <summary>Implements the operator !=.</summary>
            <param name="h1">The first handle.</param>
            <param name="h2">The second handle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Rpc.RPC_AUTHZ_HANDLE.op_Equality(Vanara.PInvoke.Rpc.RPC_AUTHZ_HANDLE,Vanara.PInvoke.Rpc.RPC_AUTHZ_HANDLE)">
            <summary>Implements the operator ==.</summary>
            <param name="h1">The first handle.</param>
            <param name="h2">The second handle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Rpc.RPC_AUTHZ_HANDLE.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.Rpc.RPC_AUTHZ_HANDLE.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.Rpc.RPC_AUTHZ_HANDLE.DangerousGetHandle">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.Rpc.RPC_BINDING_HANDLE">
            <summary>Provides a handle to an RPC binding.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Rpc.RPC_BINDING_HANDLE.#ctor(System.IntPtr)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Rpc.RPC_BINDING_HANDLE"/> struct.</summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
        </member>
        <member name="P:Vanara.PInvoke.Rpc.RPC_BINDING_HANDLE.NULL">
            <summary>Returns an invalid handle by instantiating a <see cref="T:Vanara.PInvoke.Rpc.RPC_BINDING_HANDLE"/> object with <see cref="F:System.IntPtr.Zero"/>.</summary>
        </member>
        <member name="P:Vanara.PInvoke.Rpc.RPC_BINDING_HANDLE.IsNull">
            <summary>Gets a value indicating whether this instance is a null handle.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Rpc.RPC_BINDING_HANDLE.op_Explicit(Vanara.PInvoke.Rpc.RPC_BINDING_HANDLE)~System.IntPtr">
            <summary>Performs an explicit conversion from <see cref="T:Vanara.PInvoke.Rpc.RPC_BINDING_HANDLE"/> to <see cref="T:System.IntPtr"/>.</summary>
            <param name="h">The handle.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Rpc.RPC_BINDING_HANDLE.op_Implicit(System.IntPtr)~Vanara.PInvoke.Rpc.RPC_BINDING_HANDLE">
            <summary>Performs an implicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:Vanara.PInvoke.Rpc.RPC_BINDING_HANDLE"/>.</summary>
            <param name="h">The pointer to a handle.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Rpc.RPC_BINDING_HANDLE.op_Inequality(Vanara.PInvoke.Rpc.RPC_BINDING_HANDLE,Vanara.PInvoke.Rpc.RPC_BINDING_HANDLE)">
            <summary>Implements the operator !=.</summary>
            <param name="h1">The first handle.</param>
            <param name="h2">The second handle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Rpc.RPC_BINDING_HANDLE.op_Equality(Vanara.PInvoke.Rpc.RPC_BINDING_HANDLE,Vanara.PInvoke.Rpc.RPC_BINDING_HANDLE)">
            <summary>Implements the operator ==.</summary>
            <param name="h1">The first handle.</param>
            <param name="h2">The second handle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Rpc.RPC_BINDING_HANDLE.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.Rpc.RPC_BINDING_HANDLE.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.Rpc.RPC_BINDING_HANDLE.DangerousGetHandle">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.Rpc.RPC_BINDING_HANDLE_OPTIONS_V1">
            <summary>
            The <c>RPC_BINDING_HANDLE_OPTIONS_V1</c> structure contains additional options with which to create an RPC binding handle.
            </summary>
            <remarks>If this structure is not specified in a call to RpcBindingCreate, the default values for each option are used.</remarks>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_BINDING_HANDLE_OPTIONS_V1.Version">
            <summary>The version of this structure. For <c>RPC_BINDING_HANDLE_OPTIONS_V1</c> this must be set to 1.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_BINDING_HANDLE_OPTIONS_V1.Flags">
            <summary>
            <para>
            A set of flags describing specific RPC behaviors. This parameter can be set to one or more of the following values. Note
            that by default, RPC calls use causal order and socket lingering.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>RPC_BHO_NONCAUSAL</term>
            <term>Specifies causal ordering whereby calls are executed independently of one another rather than in order of submission.</term>
            </item>
            <item>
            <term>RPC_BHO_DONTLINGER</term>
            <term>Specifies that a socket association must be shutdown after the last binding handle on it is freed.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_BINDING_HANDLE_OPTIONS_V1.ComTimeout">
            <summary>
            The communication timeout value, specified in microseconds. The default value for RPC is <see
            cref="F:Vanara.PInvoke.Rpc.RCP_C_BINDING_TIMEOUT.RPC_C_BINDING_DEFAULT_TIMEOUT"/>. This option can be changed later by calling RpcMgmtSetComTimeout.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_BINDING_HANDLE_OPTIONS_V1.CallTimeout">
            <summary>The call timeout value, specified in microseconds. The default value for RPC is 0.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Rpc.RPC_BINDING_HANDLE_SECURITY_V1">
            <summary>
            The <c>RPC_BINDING_HANDLE_SECURITY_V1</c> structure contains the basic security options with which to create an RPC binding handle.
            </summary>
            <remarks>
            <para>
            If this structure is not passed to RpcBindingCreate -- that is, if the Security parameter of <c>RpcBindingCreate</c> is set to
            <c>NULL</c> -- then the following default security behaviors are assumed:
            </para>
            <list type="bullet">
            <item>
            <term>
            For the protocol sequence ncalrpc (local RPC), RPC will use transport-level security. This means that RPC will use the security
            mechanisms offered by the Windows kernel to provide security, and RPC will not authenticate the server since it connects using
            the current thread identity. In this case, the identity tracking is static, the impersonation type is set to "Impersonate", and
            the authentication level is set to "Privacy".
            </term>
            </item>
            <item>
            <term>
            For the protocol sequence ncacn_np, RPC will also use transport-level security. If the call is remote, RPC uses the security
            mechanisms provided by the Windows file system redirector and there is no mutual authentication. In this case, the identity is
            the current thread identity, the identity tracking state is static, the impersonation type is set to "Impersonate", and the
            authentication level is determined by the policies of the remote machine.
            </term>
            </item>
            <item>
            <term>
            For the protocol sequences ncacn_ip_tcp, ncacn_ip_udp and ncacn_http, no security is used when Security is set to <c>NULL</c>.
            The server will not perform impersonation, and all data will be sent as clear text. To provide maximum protection for data, the
            application must always provide security data.
            </term>
            </item>
            </list>
            <para>
            The following table summarizes the default security settings for the different protocol sequences if the Security parameter of
            RpcBindingCreate is set to <c>NULL</c>.
            </para>
            <list type="table">
            <listheader>
            <term>Default Security Settings</term>
            <term>ncalrpc</term>
            <term>local ncacn_np</term>
            <term>remote ncacn_np</term>
            <term>ncacn_ip_tcp, ncacn_ip_udp, and ncacn_http</term>
            </listheader>
            <item>
            <term>Security Mechanism</term>
            <term>Windows Kernel</term>
            <term>NPFS</term>
            <term>File system redirector</term>
            <term>None</term>
            </item>
            <item>
            <term>Authentication Level</term>
            <term>Privacy</term>
            <term>Privacy</term>
            <term>Server policy dependent</term>
            <term>None</term>
            </item>
            <item>
            <term>Mutual Authentication?</term>
            <term>No</term>
            <term>No</term>
            <term>No</term>
            <term>No</term>
            </item>
            <item>
            <term>Impersonation Type</term>
            <term>Impersonate</term>
            <term>Impersonate</term>
            <term>Impersonate</term>
            <term>N/A</term>
            </item>
            <item>
            <term>Identity Tracking Type</term>
            <term>Static</term>
            <term>Dynamic</term>
            <term>Static</term>
            <term>N/A</term>
            </item>
            <item>
            <term>Effective Only?</term>
            <term>Yes</term>
            <term>No</term>
            <term>N/A</term>
            <term>N/A</term>
            </item>
            <item>
            <term>Call Identity</term>
            <term>Current thread</term>
            <term>Current thread</term>
            <term>Current thread or "net use" settings</term>
            <term>N/A</term>
            </item>
            </list>
            <para>
            <c>Note</c> If you create your binding handle by calling the RpcBindingFromStringBinding API, the default identity tracking for
            ncalrpc in the absence of specific security settings is dynamic. If you create a fast binding handle by calling the
            RpcBindingCreate API, the default identity tracking for ncalrpc in the absence of specific security settings is static. You
            should be aware of the differences in these two APIs if you are switching between them in your application. After the binding
            handle is created, the RpcBindingSetAuthInfo and RpcBindingSetAuthInfoEx APIs can be used to change the settings of the binding
            handle set with this structure.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_BINDING_HANDLE_SECURITY_V1.Version">
            <summary>The version of this structure. For <c>RPC_BINDING_HANDLE_SECURITY_V1</c> this must be set to 1.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_BINDING_HANDLE_SECURITY_V1.ServerPrincName">
            <summary>
            Pointer to a string that contains the server principal name referenced by the binding handle. The content of the name and
            its syntax are defined by the authentication service in use.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_BINDING_HANDLE_SECURITY_V1.AuthnLevel">
            <summary>
            <para>
            Level of authentication to be performed on remote procedure calls made using this binding handle. For a list of the
            RPC-supported authentication levels, see Authentication-Level Constants.
            </para>
            <para>If AuthnSvc is set to RPC_C_AUTHN_NONE, this member must likewise be set to RPC_C_AUTHN_NONE.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_BINDING_HANDLE_SECURITY_V1.AuthnSvc">
            <summary>
            <para>Authentication service to use when binding.</para>
            <para>Specify RPC_C_AUTHN_NONE to turn off authentication for remote procedure calls made using the binding handle.</para>
            <para>
            If RPC_C_AUTHN_DEFAULT is specified, the RPC run-time library uses the RPC_C_AUTHN_WINNT authentication service for remote
            procedure calls made using the binding handle.
            </para>
            <para>If AuthnLevel is set to RPC_C_AUTHN_NONE, this member must likewise be set to RPC_C_AUTHN_NONE.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_BINDING_HANDLE_SECURITY_V1.AuthIdentity">
            <summary>
            <see cref="T:Vanara.PInvoke.Secur32.SEC_WINNT_AUTH_IDENTITY"/> structure that contains the client's authentication and authorization
            credentials appropriate for the selected authentication and authorization service.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_BINDING_HANDLE_SECURITY_V1.SecurityQos">
            <summary>
            <para><see cref="T:Vanara.PInvoke.Rpc.RPC_SECURITY_QOS"/> structure that contains the security quality-of-service settings for the binding handle.</para>
            <para><c>Note</c> For a list of the RPC-supported authentication services, see Authentication-Service Constants.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Rpc.RPC_BINDING_HANDLE_TEMPLATE_V1">
            <summary>
            The <c>RPC_BINDING_HANDLE_TEMPLATE_V1</c> structure contains the basic options with which to create an RPC binding handle.
            </summary>
            <remarks>
            <para>
            Fast binding handles are slightly different from "classic" binding handles in the way they are handled during calls to
            RpcBindingReset. <c>RpcBindingReset</c> is a no-op call for static fast binding handles. For classic binding handles, however,
            <c>RpcBindingReset</c> converts a static binding handle into a dynamic one to preserve backwards compatibility.
            </para>
            <para>
            The following table demonstrates the behavior of static and dynamic binding handles with regards to RpcBindingReset and RpcEpResolveBinding.
            </para>
            <list type="table">
            <listheader>
            <term>Endpoint Type</term>
            <term>Static</term>
            <term>Dynamic</term>
            </listheader>
            <item>
            <term>Binding Handle Type</term>
            <term>Fast</term>
            <term>Classic</term>
            <term>Fast</term>
            <term>Classic</term>
            </item>
            <item>
            <term>RpcBindingReset</term>
            <term>No-op</term>
            <term>Converts to dynamic</term>
            <term>Removes resolved endpoint if one is present</term>
            <term>Removes resolved endpoint if one is present</term>
            </item>
            <item>
            <term>RpcEpResolveBinding</term>
            <term>No-op</term>
            <term>No-op</term>
            <term>Resolves endpoint if not previously resolved</term>
            <term>Resolves endpoint if not previously resolved</term>
            </item>
            </list>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_BINDING_HANDLE_TEMPLATE_V1.Version">
            <summary>The version of this structure. For <c>RPC_BINDING_HANDLE_TEMPLATE_V1</c> this must be set to 1.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_BINDING_HANDLE_TEMPLATE_V1.Flags">
            <summary>
            <para>Flag values that describe specific properties of the RPC template.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>RPC_BHT_OBJECT_UUID_VALID</term>
            <term>
            The ObjectUuid member contains a valid value. If this flag is not set, then the ObjectUuid member does not contain a valid UUID.
            </term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_BINDING_HANDLE_TEMPLATE_V1.ProtocolSequence">
            <summary>
            <para>A protocol sequence string literal associated with this binding handle. It can be one of the following values.</para>
            <list type="bullet">
            <item>
            <term><c>ncalrpc</c> - Specifies local RPC.</term>
            </item>
            <item>
            <term><c>ncacn_ip_tcp</c> - Specifies RPC over TCP/IP.</term>
            </item>
            <item>
            <term><c>ncacn_np</c> - Specifies RPC over named pipes.</term>
            </item>
            <item>
            <term><c>ncacn_http</c> - Specifies RPC over HTTP.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_BINDING_HANDLE_TEMPLATE_V1.NetworkAddress">
            <summary>Pointer to a string representation of the network address to bind to.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_BINDING_HANDLE_TEMPLATE_V1.StringEndpoint">
            <summary>
            Pointer to a string representation of the endpoint to bind to. If a dynamic endpoint is used, set this member to
            <c>NULL</c>. After the endpoint is resolved, use RpcBindingToStringBinding to obtain it.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_BINDING_HANDLE_TEMPLATE_V1.u1">
            <summary>Reserved. This member must be set to <c>NULL</c>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_BINDING_HANDLE_TEMPLATE_V1.ObjectUuid">
            <summary>
            The UUID of the remote object. The semantics for this UUID are the same as those for a string binding. After the binding
            handle is created, call RpcBindingSetObject to change the UUID as needed.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Rpc.RPC_BINDING_VECTOR">
            <summary>
            The <c>RPC_BINDING_VECTOR</c> structure contains a list of binding handles over which a server application can receive remote
            procedure calls.
            </summary>
            <remarks>
            <para>
            The binding vector contains a count member ( <c>Count</c>), followed by an array of binding-handle ( <c>BindingH</c>) elements.
            </para>
            <para>
            The RPC run-time library creates binding handles when a server application registers protocol sequences. To obtain a binding
            vector, a server application calls RpcServerInqBindings.
            </para>
            <para>A client application obtains a binding vector of compatible servers from the name-service database by calling RpcNsBindingLookupNext.</para>
            <para>
            In both routines, the RPC run-time library allocates memory for the binding vector. An application calls RpcBindingVectorFree to
            free the binding vector.
            </para>
            <para>
            To remove an individual binding handle from the vector, the application must set the value in the vector to <c>NULL</c>. When
            setting a vector element to <c>NULL</c>, the application must:
            </para>
            <list type="bullet">
            <item>
            <term>Free the individual binding.</term>
            </item>
            <item>
            <term>Not change the value of <c>Count</c>.</term>
            </item>
            </list>
            <para>Calling RpcBindingFree allows an application to free all binding handles in the vector.</para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_BINDING_VECTOR.Count">
            <summary>Number of binding handles present in the binding-handle array <c>BindingH</c>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_BINDING_VECTOR.BindingH">
            <summary>Array of binding handles that contains <c>Count</c> elements.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Rpc.RPC_ENDPOINT_TEMPLATE">
            <summary>
            The <c>RPC_ENDPOINT_TEMPLATE</c> structure specifies the properties of an RPC interface group server endpoint, including
            protocol sequence and name.
            </summary>
            <remarks>
            <para>
            The value provided in Backlog by applications is only a hint. The RPC run time or the Windows Sockets provider may override the
            value. For example, on Windows XP or Windows 2000 Professional, the value is limited to 5. Values greater than 5 are ignored and
            5 is used instead. On Windows Server 2003 and Windows 2000 Server, the value will be honored.
            </para>
            <para>
            Applications must be careful to pass reasonable values in Backlog. Large values on Server, Advanced Server, or Datacenter Server
            can cause a large amount of non-paged pool memory to be used. Using too small a value is also unfavorable, as it may result in
            TCP SYN packets being met by TCP RST from the server if the backlog queue gets exhausted.
            </para>
            <para>
            An application developer should balance memory footprint versus scalability requirements when determining the proper value for Backlog.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_ENDPOINT_TEMPLATE.Version">
            <summary>This field is reserved and must be set to 0.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_ENDPOINT_TEMPLATE.ProtSeq">
            <summary>
            Pointer to a string identifier of the protocol sequence to register with the RPC run-time library. Only ncalrpc,
            ncacn_ip_tcp, and ncacn_np are supported. This value must not be <c>NULL</c>.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_ENDPOINT_TEMPLATE.Endpoint">
            <summary>
            Optional pointer to the endpoint-address information to use in creating a binding for the protocol sequence specified in the
            Protseq parameter. Specify <c>NULL</c> to use dynamic endpoints.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_ENDPOINT_TEMPLATE.SecurityDescriptor">
            <summary>
            Pointer to an optional parameter provided for the security subsystem. Used only for ncacn_np and ncalrpc protocol sequences.
            All other protocol sequences ignore this parameter. Using a security descriptor on the endpoint in order to make a server
            secure is not recommended.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_ENDPOINT_TEMPLATE.Backlog">
            <summary>
            Backlog queue length for the ncacn_ip_tcp protocol sequence. All other protocol sequences ignore this parameter. Use
            <c>RPC_C_PROTSEQ_MAX_REQS_DEFAULT</c> to specify the default value. See Remarks for more informatation.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Rpc.RPC_HTTP_TRANSPORT_CREDENTIALS">
            <summary>
            The <c>RPC_HTTP_TRANSPORT_CREDENTIALS</c> structure defines additional credentials to authenticate to an RPC proxy server when
            using RPC/HTTP.
            </summary>
            <remarks>
            <para>
            If the <c>TransportCredentials</c> member is <c>NULL</c> and the authentication scheme is NTLM, the credentials of the currently
            logged on user are used. To avoid exposing user credentials on the network through a weak LM hash, user logon credentials are
            used only if one or both of the following conditions are true:
            </para>
            <list type="bullet">
            <item>
            <term>
            Caller requested use of SSL and used the <c>ServerCertificateSubject</c> member. This scenario guarantees credentials are
            protected both in transit and at the final destination, even if a weak hash is used.
            </term>
            </item>
            <item>
            <term>
            The lncompatibilitylevel key is set to 2 or higher. This causes the NTLM security provider to emit or respond to only the strong
            NT hash, not the weak LM hash. In addition, customers are encouraged to use level 3 or higher, which will attempt NTLMv2.
            </term>
            </item>
            </list>
            <para>
            If the Unicode version of the RpcBindingSetAuthInfoEx function is used, Unicode versions of the
            <c>RPC_HTTP_TRANSPORT_CREDENTIALS</c> and SEC_WINNT_AUTH_IDENTITY structures must also be provided, and the <c>Flags</c> member
            in <c>TransportCredentials</c> must be set to SEC_WINNT_AUTH_IDENTITY_UNICODE. If the ANSI version of the
            <c>RpcBindingSetAuthInfoEx</c> function is used, ANSI versions of <c>RPC_HTTP_TRANSPORT_CREDENTIALS</c> and
            <c>SEC_WINNT_AUTH_IDENTITY</c> structures must be provided, and the <c>Flags</c> member in <c>TransportCredentials</c> must be
            set to SEC_WINNT_AUTH_IDENTITY_ANSI.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_HTTP_TRANSPORT_CREDENTIALS.TransportCredentials">
            <summary>
            A pointer to a <see cref="T:Vanara.PInvoke.Secur32.SEC_WINNT_AUTH_IDENTITY"/> structure that contains the user name, domain, and password for
            the user.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_HTTP_TRANSPORT_CREDENTIALS.Flags">
            <summary>
            <para>A set of flags that can be combined with the bitwise OR operator.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>RPC_C_HTTP_FLAG_USE_SSL</term>
            <term>Instructs RPC to use SSL to communicate with the RPC Proxy.</term>
            </item>
            <item>
            <term>RPC_C_HTTP_FLAG_USE_FIRST_AUTH_SCHEME</term>
            <term>
            When set, RPC chooses the first scheme in the AuthnSchemes array and attempts to authenticate to the RPC Proxy. If the RPC
            Proxy does not support the selected authentication scheme, the call fails. When not set, the RPC client queries the RPC
            Proxy for supported authentication schemes, and chooses one.
            </term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_HTTP_TRANSPORT_CREDENTIALS.AuthenticationTarget">
            <summary>
            <para>Specifies the authentication target.</para>
            <para>Should be set to one or both of the following values:</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>RPC_C_HTTP_AUTHN_TARGET_SERVER</term>
            <term>Authenticate against the RPC Proxy, which is the HTTP Server from an HTTP perspective. This is the most common value.</term>
            </item>
            <item>
            <term>RPC_C_HTTP_AUTHN_TARGET_PROXY</term>
            <term>Authenticate against the HTTP Proxy. This value is uncommon.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_HTTP_TRANSPORT_CREDENTIALS.NumberOfAuthnSchemes">
            <summary>The number of elements in the <c>AuthnScheme</c> array.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_HTTP_TRANSPORT_CREDENTIALS.AuthnSchemes">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_HTTP_TRANSPORT_CREDENTIALS.ServerCertificateSubject">
            <summary>
            Contains an optional string with the expected server principal name. The principal name is in the same format as that
            generated for RpcCertGeneratePrincipalName (see Principal Names for more information). This member is used only when SSL is
            used. In such cases, the server certificate is checked against the generated principal name. If they do not match, an error
            is returned. This member enables clients to authenticate the RPC Proxy.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Rpc.RPC_HTTP_TRANSPORT_CREDENTIALS_V2">
            <summary>
            <para>
            The <c>RPC_HTTP_TRANSPORT_CREDENTIALS_V2</c> structure defines additional credentials to authenticate to an RPC proxy server or
            HTTP proxy server when using RPC/HTTP.
            </para>
            <para>
            <c>RPC_HTTP_TRANSPORT_CREDENTIALS_V2</c> extends RPC_HTTP_TRANSPORT_CREDENTIALS by allowing authentication against an HTTP proxy server.
            </para>
            </summary>
            <remarks>
            <para>
            If the <c>TransportCredentials</c> member is <c>NULL</c> and the authentication scheme is NTLM, the credentials of the currently
            logged on user are used. To avoid exposing user credentials on the network through a weak LM hash, user logon credentials are
            used only if one or both of the following conditions are true:
            </para>
            <list type="bullet">
            <item>
            <term>
            Caller requested use of SSL and used the <c>ServerCertificateSubject</c> member. This scenario guarantees credentials are
            protected both in transit and at the final destination, even if a weak hash is used.
            </term>
            </item>
            <item>
            <term>
            The lncompatibilitylevel key is set to 2 or higher. This causes the NTLM security provider to emit or respond to only the strong
            NT hash, not the weak LM hash. In addition, customers are encouraged to use level 3 or higher, which will attempt NTLMv2.
            </term>
            </item>
            </list>
            <para>
            If the Unicode version of the RpcBindingSetAuthInfoEx function is used, Unicode versions of the
            <c>RPC_HTTP_TRANSPORT_CREDENTIALS_V2</c> and SEC_WINNT_AUTH_IDENTITY structures must also be provided, and the <c>Flags</c>
            member in <c>TransportCredentials</c> must be set to SEC_WINNT_AUTH_IDENTITY_UNICODE. If the ANSI version of the
            <c>RpcBindingSetAuthInfoEx</c> function is used, ANSI versions of <c>RPC_HTTP_TRANSPORT_CREDENTIALS_V2</c> and
            <c>SEC_WINNT_AUTH_IDENTITY</c> structures must be provided, and the <c>Flags</c> member in <c>TransportCredentials</c> must be
            set to SEC_WINNT_AUTH_IDENTITY_ANSI.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_HTTP_TRANSPORT_CREDENTIALS_V2.TransportCredentials">
            <summary>
            A pointer to a <see cref="T:Vanara.PInvoke.Secur32.SEC_WINNT_AUTH_IDENTITY"/> structure that contains the user name, domain, and password for
            the user.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_HTTP_TRANSPORT_CREDENTIALS_V2.Flags">
            <summary>
            <para>A set of flags that can be combined with the bitwise OR operator.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>RPC_C_HTTP_FLAG_USE_SSL</term>
            <term>Instructs RPC to use SSL to communicate with the RPC Proxy.</term>
            </item>
            <item>
            <term>RPC_C_HTTP_FLAG_USE_FIRST_AUTH_SCHEME</term>
            <term>
            When set, RPC chooses the first scheme in the AuthnSchemes array and attempts to authenticate to the RPC Proxy. If the RPC
            Proxy does not support the selected authentication scheme, the call fails. When not set, the RPC client queries the RPC
            Proxy for supported authentication schemes, and chooses one.
            </term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_HTTP_TRANSPORT_CREDENTIALS_V2.AuthenticationTarget">
            <summary>
            <para>Specifies the authentication target.</para>
            <para>Should be set to one or both of the following values:</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>RPC_C_HTTP_AUTHN_TARGET_SERVER</term>
            <term>Authenticate against the RPC Proxy, which is the HTTP Server from an HTTP perspective. This is the most common value.</term>
            </item>
            <item>
            <term>RPC_C_HTTP_AUTHN_TARGET_PROXY</term>
            <term>Authenticate against the HTTP Proxy. This value is uncommon.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_HTTP_TRANSPORT_CREDENTIALS_V2.NumberOfAuthnSchemes">
            <summary>The number of elements in the <c>AuthnScheme</c> array.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_HTTP_TRANSPORT_CREDENTIALS_V2.AuthnSchemes">
            <summary>
            <para>
            A pointer to an array of <see cref="T:Vanara.PInvoke.Rpc.RPC_C_HTTP_AUTHN_SCHEME"/> values representing authentication schemes the client is
            willing to use. Each element of the array can contain one of the following constants:
            </para>
            <list type="bullet">
            <item>RPC_C_HTTP_AUTHN_SCHEME_BASIC</item>
            <item>RPC_C_HTTP_AUTHN_SCHEME_NTLM</item>
            <item>RPC_C_HTTP_AUTHN_SCHEME_PASSPORT</item>
            <item>RPC_C_HTTP_AUTHN_SCHEME_DIGEST</item>
            <item>RPC_C_HTTP_AUTHN_SCHEME_NEGOTIATE</item>
            </list>
            <para>
            RPC_C_HTTP_AUTHN_SCHEME_PASSPORT, RPC_C_HTTP_AUTHN_SCHEME_NEGOTIATE and RPC_C_HTTP_AUTHN_SCHEME_DIGEST are defined as
            constants, but not currently supported. Callers should not specify them; doing so results in RPC_S_CANNOT_SUPPORT error.
            Each constant can be specified once. RPC does not verify this restriction for performance reasons, but specifying a constant
            more than once produces undefined results.
            </para>
            <para>The algorithm for choosing the actual authentication scheme is as follows:</para>
            <para>
            If RPC_C_HTTP_FLAG_USE_FIRST_AUTH_SCHEME is specified, the first authentication scheme is chosen. If it is not supported by
            the server, the connection establishment fails. If RPC_C_HTTP_FLAG_USE_FIRST_AUTH_SCHEME is not specified, the RPC client
            first attempts anonymous connection to the RPC Proxy. If IIS returns authentication challenge, the RPC client chooses the
            authentication scheme preferred by the server if it is also in the <c>AuthnScheme</c> array. If the scheme preferred by the
            server is not in the <c>AuthnScheme</c> array, the <c>AuthnScheme</c> array will be traversed from start to finish, and if a
            scheme is found that is also supported by the server, that authentication scheme is used.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_HTTP_TRANSPORT_CREDENTIALS_V2.ServerCertificateSubject">
            <summary>
            Contains an optional string with the expected server principal name. The principal name is in the same format as that
            generated for RpcCertGeneratePrincipalName (see Principal Names for more information). This member is used only when SSL is
            used. In such cases, the server certificate is checked against the generated principal name. If they do not match, an error
            is returned. This member enables clients to authenticate the RPC Proxy.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_HTTP_TRANSPORT_CREDENTIALS_V2.ProxyCredentials">
            <summary>
            A pointer to a <see cref="T:Vanara.PInvoke.Secur32.SEC_WINNT_AUTH_IDENTITY"/> structure that contains the user name, domain, and password for
            the user when authenticating against an HTTP proxy server. <c>ProxyCredentials</c> is only valid when
            <c>AuthenticationTarget</c> contains <c>RPC_C_HTTP_AUTHN_TARGET_PROXY</c>.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_HTTP_TRANSPORT_CREDENTIALS_V2.NumberOfProxyAuthnSchemes">
            <summary>
            The number of elements in the <c>ProxyAuthnSchemes</c> array when authenticating against an HTTP proxy server.
            <c>NumberOfProxyAuthnSchemes</c> is only valid when <c>AuthenticationTarget</c> contains <c>RPC_C_HTTP_AUTHN_TARGET_PROXY</c>.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_HTTP_TRANSPORT_CREDENTIALS_V2.ProxyAuthnSchemes">
            <summary>
            <para>
            A pointer to an array of <see cref="T:Vanara.PInvoke.Rpc.RPC_C_HTTP_AUTHN_SCHEME"/> values representing authentication schemes the client is
            willing to use when authenticating against an HTTP proxy server. Each element of the array can contain one of the following
            constants. <c>ProxyAuthnSchemes</c> is only valid when <c>AuthenticationTarget</c> contains <c>RPC_C_HTTP_AUTHN_TARGET_PROXY</c>.
            </para>
            <list type="bullet">
            <item>RPC_C_HTTP_AUTHN_SCHEME_BASIC</item>
            <item>RPC_C_HTTP_AUTHN_SCHEME_NTLM</item>
            <item>RPC_C_HTTP_AUTHN_SCHEME_PASSPORT</item>
            <item>RPC_C_HTTP_AUTHN_SCHEME_DIGEST</item>
            <item>RPC_C_HTTP_AUTHN_SCHEME_NEGOTIATE</item>
            </list>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Rpc.RPC_HTTP_TRANSPORT_CREDENTIALS_V3">
            <summary>
            <para>
            The <c>RPC_HTTP_TRANSPORT_CREDENTIALS_V3</c> structure defines additional credentials to authenticate to an RPC proxy server or
            HTTP proxy server when using RPC/HTTP.
            </para>
            <para>
            <c>RPC_HTTP_TRANSPORT_CREDENTIALS_V3</c> extends RPC_HTTP_TRANSPORT_CREDENTIALS_V2 by allowing arbitrary credential forms to be used.
            </para>
            </summary>
            <remarks>
            <para>
            If the <c>TransportCredentials</c> member is <c>NULL</c> and the authentication scheme is NTLM, the credentials of the currently
            logged on user are used. To avoid exposing user credentials on the network through a weak LM hash, user logon credentials are
            used only if one or both of the following conditions are true:
            </para>
            <list type="bullet">
            <item>
            <term>
            Caller requested use of SSL and used the <c>ServerCertificateSubject</c> member. This scenario guarantees credentials are
            protected both in transit and at the final destination, even if a weak hash is used.
            </term>
            </item>
            <item>
            <term>
            The lncompatibilitylevel key is set to 2 or higher. This causes the NTLM security provider to emit or respond to only the strong
            NT hash, not the weak LM hash. In addition, customers are encouraged to use level 3 or higher, which will attempt NTLMv2.
            </term>
            </item>
            </list>
            <para>
            If the Unicode version of the RpcBindingSetAuthInfoEx function is used, Unicode versions of the
            <c>RPC_HTTP_TRANSPORT_CREDENTIALS_V3</c> and SEC_WINNT_AUTH_IDENTITY structures must also be provided, and the <c>Flags</c>
            member in <c>TransportCredentials</c> must be set to SEC_WINNT_AUTH_IDENTITY_UNICODE. If the ANSI version of the
            <c>RpcBindingSetAuthInfoEx</c> function is used, ANSI versions of <c>RPC_HTTP_TRANSPORT_CREDENTIALS_V3</c> and
            <c>SEC_WINNT_AUTH_IDENTITY</c> structures must be provided, and the <c>Flags</c> member in <c>TransportCredentials</c> must be
            set to SEC_WINNT_AUTH_IDENTITY_ANSI.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_HTTP_TRANSPORT_CREDENTIALS_V3.TransportCredentials">
            <summary>
            A pointer to a <see cref="T:Vanara.PInvoke.Secur32.SEC_WINNT_AUTH_IDENTITY"/> structure that contains the user name, domain, and password for
            the user.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_HTTP_TRANSPORT_CREDENTIALS_V3.Flags">
            <summary>
            <para>A set of flags that can be combined with the bitwise OR operator.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>RPC_C_HTTP_FLAG_USE_SSL</term>
            <term>Instructs RPC to use SSL to communicate with the RPC Proxy.</term>
            </item>
            <item>
            <term>RPC_C_HTTP_FLAG_USE_FIRST_AUTH_SCHEME</term>
            <term>
            When set, RPC chooses the first scheme in the AuthnSchemes array and attempts to authenticate to the RPC Proxy. If the RPC
            Proxy does not support the selected authentication scheme, the call fails. When not set, the RPC client queries the RPC
            Proxy for supported authentication schemes, and chooses one.
            </term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_HTTP_TRANSPORT_CREDENTIALS_V3.AuthenticationTarget">
            <summary>
            <para>Specifies the authentication target.</para>
            <para>Should be set to one or both of the following values:</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>RPC_C_HTTP_AUTHN_TARGET_SERVER</term>
            <term>Authenticate against the RPC Proxy, which is the HTTP Server from an HTTP perspective. This is the most common value.</term>
            </item>
            <item>
            <term>RPC_C_HTTP_AUTHN_TARGET_PROXY</term>
            <term>Authenticate against the HTTP Proxy. This value is uncommon.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_HTTP_TRANSPORT_CREDENTIALS_V3.NumberOfAuthnSchemes">
            <summary>The number of elements in the <c>AuthnScheme</c> array.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_HTTP_TRANSPORT_CREDENTIALS_V3.AuthnSchemes">
            <summary>
            <para>
            A pointer to an array of <see cref="T:Vanara.PInvoke.Rpc.RPC_C_HTTP_AUTHN_SCHEME"/> values representing authentication schemes the client is
            willing to use. Each element of the array can contain one of the following constants:
            </para>
            <list type="bullet">
            <item>RPC_C_HTTP_AUTHN_SCHEME_BASIC</item>
            <item>RPC_C_HTTP_AUTHN_SCHEME_NTLM</item>
            <item>RPC_C_HTTP_AUTHN_SCHEME_PASSPORT</item>
            <item>RPC_C_HTTP_AUTHN_SCHEME_DIGEST</item>
            <item>RPC_C_HTTP_AUTHN_SCHEME_NEGOTIATE</item>
            </list>
            <para>
            RPC_C_HTTP_AUTHN_SCHEME_PASSPORT, RPC_C_HTTP_AUTHN_SCHEME_NEGOTIATE and RPC_C_HTTP_AUTHN_SCHEME_DIGEST are defined as
            constants, but not currently supported. Callers should not specify them; doing so results in RPC_S_CANNOT_SUPPORT error.
            Each constant can be specified once. RPC does not verify this restriction for performance reasons, but specifying a constant
            more than once produces undefined results.
            </para>
            <para>The algorithm for choosing the actual authentication scheme is as follows:</para>
            <para>
            If RPC_C_HTTP_FLAG_USE_FIRST_AUTH_SCHEME is specified, the first authentication scheme is chosen. If it is not supported by
            the server, the connection establishment fails. If RPC_C_HTTP_FLAG_USE_FIRST_AUTH_SCHEME is not specified, the RPC client
            first attempts anonymous connection to the RPC Proxy. If IIS returns authentication challenge, the RPC client chooses the
            authentication scheme preferred by the server if it is also in the <c>AuthnScheme</c> array. If the scheme preferred by the
            server is not in the <c>AuthnScheme</c> array, the <c>AuthnScheme</c> array will be traversed from start to finish, and if a
            scheme is found that is also supported by the server, that authentication scheme is used.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_HTTP_TRANSPORT_CREDENTIALS_V3.ServerCertificateSubject">
            <summary>
            Contains an optional string with the expected server principal name. The principal name is in the same format as that
            generated for RpcCertGeneratePrincipalName (see Principal Names for more information). This member is used only when SSL is
            used. In such cases, the server certificate is checked against the generated principal name. If they do not match, an error
            is returned. This member enables clients to authenticate the RPC Proxy.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_HTTP_TRANSPORT_CREDENTIALS_V3.ProxyCredentials">
            <summary>
            A pointer to an opaque authentication handle in the form of an RPC_AUTH_IDENTITY_HANDLE structure when authenticating
            against an HTTP proxy server. <c>ProxyCredentials</c> is only valid when <c>AuthenticationTarget</c> contains <c>RPC_C_HTTP_AUTHN_TARGET_PROXY</c>.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_HTTP_TRANSPORT_CREDENTIALS_V3.NumberOfProxyAuthnSchemes">
            <summary>
            The number of elements in the <c>ProxyAuthnSchemes</c> array when authenticating against an HTTP proxy server.
            <c>NumberOfProxyAuthnSchemes</c> is only valid when <c>AuthenticationTarget</c> contains <c>RPC_C_HTTP_AUTHN_TARGET_PROXY</c>.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_HTTP_TRANSPORT_CREDENTIALS_V3.ProxyAuthnSchemes">
            <summary>
            <para>
            A pointer to an array of <see cref="T:Vanara.PInvoke.Rpc.RPC_C_HTTP_AUTHN_SCHEME"/> values representing authentication schemes the client is
            willing to use when authenticating against an HTTP proxy server. Each element of the array can contain one of the following
            constants. <c>ProxyAuthnSchemes</c> is only valid when <c>AuthenticationTarget</c> contains <c>RPC_C_HTTP_AUTHN_TARGET_PROXY</c>.
            </para>
            <list type="bullet">
            <item>RPC_C_HTTP_AUTHN_SCHEME_BASIC</item>
            <item>RPC_C_HTTP_AUTHN_SCHEME_NTLM</item>
            <item>RPC_C_HTTP_AUTHN_SCHEME_PASSPORT</item>
            <item>RPC_C_HTTP_AUTHN_SCHEME_DIGEST</item>
            <item>RPC_C_HTTP_AUTHN_SCHEME_NEGOTIATE</item>
            </list>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Rpc.RPC_IF_HANDLE">
            <summary>Provides a handle to an RPC interface.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Rpc.RPC_IF_HANDLE.#ctor(System.IntPtr)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Rpc.RPC_IF_HANDLE"/> struct.</summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
        </member>
        <member name="P:Vanara.PInvoke.Rpc.RPC_IF_HANDLE.NULL">
            <summary>Returns an invalid handle by instantiating a <see cref="T:Vanara.PInvoke.Rpc.RPC_IF_HANDLE"/> object with <see cref="F:System.IntPtr.Zero"/>.</summary>
        </member>
        <member name="P:Vanara.PInvoke.Rpc.RPC_IF_HANDLE.IsNull">
            <summary>Gets a value indicating whether this instance is a null handle.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Rpc.RPC_IF_HANDLE.op_Explicit(Vanara.PInvoke.Rpc.RPC_IF_HANDLE)~System.IntPtr">
            <summary>Performs an explicit conversion from <see cref="T:Vanara.PInvoke.Rpc.RPC_IF_HANDLE"/> to <see cref="T:System.IntPtr"/>.</summary>
            <param name="h">The handle.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Rpc.RPC_IF_HANDLE.op_Implicit(System.IntPtr)~Vanara.PInvoke.Rpc.RPC_IF_HANDLE">
            <summary>Performs an implicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:Vanara.PInvoke.Rpc.RPC_IF_HANDLE"/>.</summary>
            <param name="h">The pointer to a handle.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Rpc.RPC_IF_HANDLE.op_Inequality(Vanara.PInvoke.Rpc.RPC_IF_HANDLE,Vanara.PInvoke.Rpc.RPC_IF_HANDLE)">
            <summary>Implements the operator !=.</summary>
            <param name="h1">The first handle.</param>
            <param name="h2">The second handle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Rpc.RPC_IF_HANDLE.op_Equality(Vanara.PInvoke.Rpc.RPC_IF_HANDLE,Vanara.PInvoke.Rpc.RPC_IF_HANDLE)">
            <summary>Implements the operator ==.</summary>
            <param name="h1">The first handle.</param>
            <param name="h2">The second handle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Rpc.RPC_IF_HANDLE.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.Rpc.RPC_IF_HANDLE.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.Rpc.RPC_IF_HANDLE.DangerousGetHandle">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.Rpc.RPC_IF_ID">
            <summary>The <c>RPC_IF_ID</c> structure contains the interface UUID and major and minor version numbers of an interface.</summary>
            <remarks>
            An interface identification is a subset of the data contained in the interface-specification structure. Routines that require an
            interface identification structure show a data type of <c>RPC_IF_ID</c>. In those routines, the application is responsible for
            providing memory for the structure.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_IF_ID.Uuid">
            <summary>Specifies the interface UUID.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_IF_ID.VersMajor">
            <summary>Major version number, an integer from 0 to 65535, inclusive.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_IF_ID.VersMinor">
            <summary>Minor version number, an integer from 0 to 65535, inclusive.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Rpc.RPC_IF_ID_VECTOR">
            <summary>The <c>RPC_IF_ID_VECTOR</c> structure contains a list of interfaces offered by a server.</summary>
            <remarks>
            <para>
            The interface identification vector contains a count member ( <c>Count</c>), followed by an array of pointers to interface
            identifiers ( RPC_IF_ID).
            </para>
            <para>
            The interface identification vector is a read-only vector. To obtain a vector of the interface identifiers registered by a
            server with the run-time library, an application calls RpcMgmtInqIfIds. To obtain a vector of the interface identifiers exported
            by a server, an application calls RpcNsMgmtEntryInqIfIds.
            </para>
            <para>
            The RPC run-time library allocates memory for the interface identification vector. The application calls RpcIfIdVectorFree to
            free the interface identification vector.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_IF_ID_VECTOR.Count">
            <summary>Number of interface-identification structures present in the array <c>IfHandl</c>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_IF_ID_VECTOR.IfId">
            <summary>An array of pointers to interface identifiers ( <see cref="T:Vanara.PInvoke.Rpc.RPC_IF_ID"/>).</summary>
        </member>
        <member name="T:Vanara.PInvoke.Rpc.RPC_INTERFACE_GROUP">
            <summary>Provides a handle to an RPC interface group.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Rpc.RPC_INTERFACE_GROUP.#ctor(System.IntPtr)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Rpc.RPC_INTERFACE_GROUP"/> struct.</summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
        </member>
        <member name="P:Vanara.PInvoke.Rpc.RPC_INTERFACE_GROUP.NULL">
            <summary>Returns an invalid handle by instantiating a <see cref="T:Vanara.PInvoke.Rpc.RPC_INTERFACE_GROUP"/> object with <see cref="F:System.IntPtr.Zero"/>.</summary>
        </member>
        <member name="P:Vanara.PInvoke.Rpc.RPC_INTERFACE_GROUP.IsNull">
            <summary>Gets a value indicating whether this instance is a null handle.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Rpc.RPC_INTERFACE_GROUP.op_Explicit(Vanara.PInvoke.Rpc.RPC_INTERFACE_GROUP)~System.IntPtr">
            <summary>Performs an explicit conversion from <see cref="T:Vanara.PInvoke.Rpc.RPC_INTERFACE_GROUP"/> to <see cref="T:System.IntPtr"/>.</summary>
            <param name="h">The handle.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Rpc.RPC_INTERFACE_GROUP.op_Implicit(System.IntPtr)~Vanara.PInvoke.Rpc.RPC_INTERFACE_GROUP">
            <summary>Performs an implicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:Vanara.PInvoke.Rpc.RPC_INTERFACE_GROUP"/>.</summary>
            <param name="h">The pointer to a handle.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Rpc.RPC_INTERFACE_GROUP.op_Inequality(Vanara.PInvoke.Rpc.RPC_INTERFACE_GROUP,Vanara.PInvoke.Rpc.RPC_INTERFACE_GROUP)">
            <summary>Implements the operator !=.</summary>
            <param name="h1">The first handle.</param>
            <param name="h2">The second handle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Rpc.RPC_INTERFACE_GROUP.op_Equality(Vanara.PInvoke.Rpc.RPC_INTERFACE_GROUP,Vanara.PInvoke.Rpc.RPC_INTERFACE_GROUP)">
            <summary>Implements the operator ==.</summary>
            <param name="h1">The first handle.</param>
            <param name="h2">The second handle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Rpc.RPC_INTERFACE_GROUP.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.Rpc.RPC_INTERFACE_GROUP.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.Rpc.RPC_INTERFACE_GROUP.DangerousGetHandle">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.Rpc.RPC_INTERFACE_TEMPLATE">
            <summary>The <c>RPC_INTERFACE_TEMPLATE</c> structure defines an RPC interface group server interface.</summary>
            <remarks>
            <para>To register an interface, the server provides the following information:</para>
            <list type="bullet">
            <item>
            <term>Interface specificationThe interface specification is a data structure that the MIDL compiler generates.</term>
            </item>
            <item>
            <term>
            Manager type UUID and manager EPVThe manager type UUID and the manager EPV determine which manager routine executes when a
            server receives a remote procedure call request from a client. For each implementation of an interface offered by a server, it
            must register a separate manager EPV. Note that when specifying a non-nil, manager type <c>UUID</c>, the server must also call
            RpcObjectSetType to register objects of this non-nil type.
            </term>
            </item>
            </list>
            <para>
            All interface group interfaces are treated as <c>auto-listen</c>. The runtime begins listening for calls as soon as the
            interface group is activated. Calls to RpcServerListen and RpcMgmtStopServerListening do not affect the interface, nor does a
            call to RpcServerUnregisterIf with IfSpec set to <c>NULL</c>.
            </para>
            <para>
            Specifying a security-callback function in IfCallback allows the server application to restrict access to its interfaces on an
            individual client basis. That is, by default, security is optional; the server run-time will dispatch unsecured calls even if
            the server has called RpcServerRegisterAuthInfo. If the server wants to accept only authenticated clients, an interface callback
            function must call RpcBindingInqAuthClient, RpcGetAuthorizationContextForClient, or RpcServerInqCallAttributes to retrieve the
            security level, or attempt to impersonate the client with RpcImpersonateClient. It can also specify the RPC_IF_ALLOW_SECURE_ONLY
            flag in Flags to reject unauthenticated calls.
            </para>
            <para>
            When a server application specifies a security-callback function for its interface(s) in IfCallback, the RPC run time
            automatically rejects calls without authentication information to that interface. In addition, the run-time records the
            interfaces each client has used. When a client makes an RPC to an interface that it has not used during the current
            communication session, the RPC run-time library calls the interface's security-callback function. Specifying
            RPC_IF_ALLOW_CALLBACKS_WITH_NO_AUTH in Flags will prevent the automatic rejection of unauthenticated clients. Note that calls on
            the <c>NULL</c> security session can have authentication information, even though they come from anonymous clients. Thus, the
            existence of a callback alone is not sufficient to prevent anonymous clients from connecting; either the security callback
            function must check for that, or the RPC_IF_ALLOW_SECURE_ONLY flag must be used. RPC_IF_ALLOW_SECURE_ONLY rejects null session
            calls only on Windows XP and later versions of Windows.
            </para>
            <para>For the signature for the callback function, see RPC_IF_CALLBACK_FN.</para>
            <para>
            The callback function in IfCallback should return <c>RPC_S_OK</c> if the client is allowed to call methods in this interface.
            Any other return code will cause the client to receive the exception <c>RPC_S_ACCESS_DENIED</c>.
            </para>
            <para>
            In some cases, the RPC run time may call the security-callback function more than once per client, per interface. The callback
            function must be able to handle this possibility.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_INTERFACE_TEMPLATE.Version">
            <summary>This field is reserved and must be set to 0.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_INTERFACE_TEMPLATE.IfSpec">
            <summary>MIDL-generated structure that defines the interface to register.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_INTERFACE_TEMPLATE.MgrTypeUuid">
            <summary>Pointer to a UUID to associate with MgrEpv. <c>NULL</c> or a nil <c>UUID</c> registers IfSpec with a nil <c>UUID</c>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_INTERFACE_TEMPLATE.MgrEpv">
            <summary>
            Pointer to a RPC_MGR_EPV structure that contains the manager routines' entry-point vector (EPV). If
            <c>NULL</c>,the MIDL-generated default EPV is used.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_INTERFACE_TEMPLATE.Flags">
            <summary>
            Flags. For a list of flag values, see Interface Registration Flags. Interface group interfaces are always treated as <c>auto-listen</c>.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_INTERFACE_TEMPLATE.MaxCalls">
            <summary>
            <para>
            Maximum number of concurrent remote procedure call requests the server can accept on this interface. The RPC run-time
            library makes its best effort to ensure the server does not allow more concurrent call requests than the number of calls
            specified in MaxCalls. However, the actual number can be greater than MaxCalls and can vary for each protocol sequence.
            </para>
            <para>Calls on other interfaces are governed by the value of the process-wide MaxCalls parameter specified in RpcServerListen.</para>
            <para>
            If the number of concurrent calls is not a concern, slightly better server-side performance can be achieved by specifying
            the default value using <c>RPC_C_LISTEN_MAX_CALLS_DEFAULT</c>. Doing so relieves the RPC run-time environment from enforcing
            an unnecessary restriction.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_INTERFACE_TEMPLATE.MaxRpcSize">
            <summary>
            Maximum size, in bytes, of incoming data blocks. MaxRpcSize may be used to help prevent malicious denial-of-service attacks.
            If the data block of a remote procedure call is larger than MaxRpcSize, the RPC run-time library rejects the call and sends
            an <c>RPC_S_ACCESS_DENIED</c> error to the client. Specifying a value of (unsigned int) –1 in MaxRpcSize removes the limit
            on the size of incoming data blocks. This parameter has no effect on calls made over the ncalrpc protocol.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_INTERFACE_TEMPLATE.IfCallback">
            <summary>
            A pointer to a RPC_INTERFACE_GROUP_IDLE_CALLBACK_FN security-callback function, or <c>NULL</c> for no callback. Each
            registered interface can have a different callback function.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_INTERFACE_TEMPLATE.UuidVector">
            <summary>
            Pointer to a vector of object UUIDs offered by the server to be registered with the RPC endpoint mapper. The server
            application constructs this vector. <c>NULL</c> indicates there are no object <c>UUIDs</c> to register.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_INTERFACE_TEMPLATE.Annotation">
            <summary>
            <para>
            Pointer to the character-string comment applied to each cross-product element added to the local endpoint-map database. The
            string can be up to 64 characters long, including the null terminating character. Specify a null value or a null-terminated
            string ("\0") if there is no annotation string.
            </para>
            <para>
            The annotation string is used by applications for information only. RPC does not use this string to determine which server
            instance a client communicates with or for enumerating elements in the endpoint-map database.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_INTERFACE_TEMPLATE.SecurityDescriptor">
            <summary>Optional security descriptor describing which clients have the right to access the interface.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Rpc.RPC_POLICY">
            <summary>
            The <c>RPC_POLICY</c> structure contains flags that determine binding on multihomed computers, and port allocations when using
            the ncacn_ip_tcp and ncadg_ip_udp protocols.
            </summary>
            <remarks>
            <para>You can use the <c>RPC_Policy</c> structure to set policies for remote procedure calls at run time. These policies include:</para>
            <list type="bullet">
            <item>
            <term>
            Message queuing: Allows the server to specify message-queuing properties, such as security, quality of delivery, and the
            lifetime of the server-process queue. This policy is only effective for remote calls over the message-queuing transport (ncadg_mq).
            </term>
            </item>
            <item>
            <term>
            Port allocation for dynamic ports: Specifies whether the endpoint registered by this application should go to the
            Internet-available or intranet-available port set.
            </term>
            </item>
            <item>
            <term>Selective binding: Allows multihomed machines to bind selectively to NICs.</term>
            </item>
            </list>
            <para>
            <c>Note</c> Port allocation and selective binding policies are effective only for remote calls over TCP ( ncacn_ip_tcp) and UDP
            ( ncadg_ip_udp) connections. For more information, see Configuring the Registry for Port Allocations and Selective Binding.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_POLICY.Length">
            <summary>
            Size of the <c>RPC_POLICY</c> structure, in bytes. The <c>Length</c> member allows compatibility with future versions of
            this structure, which may contain additional fields. Always set the <c>Length</c> equal to <c>sizeof</c>(RPC_POLICY) when
            you initialize the <c>RPC_POLICY</c> structure in your code.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_POLICY.EndpointFlags">
            <summary>
            <para>
            Set of flags that determine the attributes of the port or ports where the server receives remote procedure calls. You can
            specify more than one flag (by using the bitwise OR operator) from the set of values for a given protocol sequence.
            </para>
            <para>
            <c>Note</c> If the registry does not contain any of the keys that specify the default policies, then the
            <c>EndpointFlags</c> member will have no effect at run time. If a key is missing or contains an invalid value, then the
            entire configuration for that protocol ( ncacn_ip_tcp, ncadg_ip_udp or ncadg_mq) is marked as invalid and all calls to
            <c>RpcServerUseProtseq*</c> functions over that protocol will fail.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_POLICY.NICFlags">
            <summary>Policy for binding to Network Interface Cards (NICs).</summary>
        </member>
        <member name="T:Vanara.PInvoke.Rpc.RPC_PROTSEQ_VECTOR">
            <summary>
            The <c>RPC_PROTSEQ_VECTOR</c> structure contains a list of protocol sequences the RPC run-time library uses to send and receive
            remote procedure calls.
            </summary>
            <remarks>
            <para>
            The protocol-sequence vector contains a count member ( <c>Count</c>), followed by an array of pointers to protocol-sequence
            strings ( <c>Protseq</c>).
            </para>
            <para>
            The protocol-sequence vector is a read-only vector. To obtain a protocol-sequence vector, a server application calls
            RpcNetworkInqProtseqs. The RPC run-time library allocates memory for the protocol-sequence vector. The server application calls
            RpcProtseqVectorFree to free the protocol-sequence vector.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_PROTSEQ_VECTOR.Count">
            <summary>Number of protocol-sequence strings present in the array <c>Protseq</c>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_PROTSEQ_VECTOR.Protseq">
            <summary>
            Array of pointers to protocol-sequence strings. The number of pointers present is specified by the <c>Count</c> member.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Rpc.RPC_SECURITY_QOS">
            <summary>
            The <c>RPC_SECURITY_QOS</c> structure defines security quality-of-service settings on a binding handle. See Remarks for version
            availability on Windows editions.
            </summary>
            <remarks>
            <para>The following listing defines the availability of QOS versions on various Windows operating systems:</para>
            <list type="bullet">
            <item>
            <term>Version 1: Windows 2000 and later.</term>
            </item>
            <item>
            <term>Version 2: Windows XP with Service Pack 1 (SP1) and later.</term>
            </item>
            <item>
            <term>Version 3: Windows Server 2003 and later.</term>
            </item>
            <item>
            <term>Version 4: Windows Vista and later.</term>
            </item>
            <item>
            <term>Version 5: Windows 8 and later.</term>
            </item>
            </list>
            <para>
            Windows editions support downlevel versions as well. For example, Windows Server 2003 supports version 3, but also supports
            versions 1 and 2.
            </para>
            <para>
            The client-side security functions RpcBindingInqAuthInfoEx and RpcBindingSetAuthInfo use the <c>RPC_SECURITY_QOS</c> structure
            to inquire about, or to set, the security quality of service for a binding handle.
            </para>
            <para>
            RPC supports the RPC_C_QOS_CAPABILITIES_LOCAL_MA_HINT hint. This hint is used only when dynamic endpoints and mutual
            authentication are used. Furthermore, it is not supported for the <c>ncadg_</c> protocol sequences. If this flag is used for a
            <c>ncadg_</c> protocol sequence, or without using mutual authentication, RPC_S_INVALID_ARG is returned from the
            RpcBindingSetAuthInfoEx function call. This flag is designed to prevent a Denial of Service Attack. Using this flag forces the
            RPC Runtime to ask the endpoint mapper only for endpoints registered by the principal specified in the <c>ServerPrincName</c> or
            <c>Sid</c> members. This prevents an attacker on the local machine from trying to trick your RPC client to connect to a spoof
            endpoint it has registered in the endpoint mapper. Note that since the attack is local only (such as from a terminal server
            machine with many users), the flag also works only for RPC calls made locally.
            </para>
            <para>
            <c>Note</c> Some security providers, such as Kerberos, support delegation-impersonation type. On Windows editions that support
            delegation-impersonation type, if the client has asked for delegation but the security provider is unable to provide it, the
            call fails with PRC_S_SEC_PKG_ERROR unless the RPC_C_QOS_CAPABILITIES_IGNORE_DELEGATE_FAILURE flag is specified.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_SECURITY_QOS.Version">
            <summary>
            Version of the <c>RPC_SECURITY_QOS</c> structure being used. This topic documents version 1 of the <c>RPC_SECURITY_QOS</c>
            structure. See RPC_SECURITY_QOS_V2, RPC_SECURITY_QOS_V3, RPC_SECURITY_QOS_V4 and RPC_SECURITY_QOS_V5 for other versions.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_SECURITY_QOS.Capabilities">
            <summary>
            <para>
            Security services being provided to the application. Capabilities is a set of flags that can be combined using the bitwise
            OR operator.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>RPC_C_QOS_CAPABILITIES_DEFAULT</term>
            <term>Used when no provider-specific capabilities are needed.</term>
            </item>
            <item>
            <term>RPC_C_QOS_CAPABILITIES_MUTUAL_AUTH</term>
            <term>
            Specifying this flag causes the RPC run time to request mutual authentication from the security provider. Some security
            providers do not support mutual authentication. If the security provider does not support mutual authentication, or the
            identity of the server cannot be established, a remote procedure call to such server fails with error RPC_S_SEC_PKG_ERROR.
            </term>
            </item>
            <item>
            <term>RPC_C_QOS_CAPABILITIES_MAKE_FULLSIC</term>
            <term>Not currently implemented.</term>
            </item>
            <item>
            <term>RPC_C_QOS_CAPABILITIES_ANY_AUTHORITY</term>
            <term>
            Accepts the client's credentials even if the certificate authority (CA) is not in the server's list of trusted CAs. This
            constant is used only by the SCHANNEL SSP.
            </term>
            </item>
            <item>
            <term>RPC_C_QOS_CAPABILITIES_IGNORE_DELEGATE_FAILURE</term>
            <term>
            When specified, this flag directs the RPC runtime on the client to ignore an error to establish a security context that
            supports delegation. Normally, if the client asks for delegation and the security system cannot establish a security context
            that supports delegation, error RPC_S_SEC_PKG_ERROR is returned; when this flag is specified, no error is returned.
            </term>
            </item>
            <item>
            <term>RPC_C_QOS_CAPABILITIES_LOCAL_MA_HINT</term>
            <term>
            This flag specifies to RPC that the server is local to the machine making the RPC call. In this situation RPC instructs the
            endpoint mapper to pick up only endpoints registered by the principal specified in the ServerPrincName or Sid members (these
            members are available in RPC_SECURITY_QOS_V3, RPC_SECURITY_QOS_V4, and RPC_SECURITY_QOS_V5 only). See Remarks for more information.
            </term>
            </item>
            <item>
            <term>RPC_C_QOS_CAPABILITIES_SCHANNEL_FULL_AUTH_IDENTITY</term>
            <term>
            If set, the RPC runtime uses the SChannel SSP to perform smartcard-based authentication without displaying a PIN prompt
            dialog box by the cryptographic services provider (CSP). In the call to RpcBindingSetAuthInfoEx, the AuthIdentity parameter
            must be a SEC_WINNT_AUTH_IDENTITY structure whose members contain the following: If the
            RPC_C_QOS_CAPABILITIES_SCHANNEL_FULL_AUTH_IDENTITY flag is used for any SSP other than SChannel, or if the members of
            SEC_WINNT_AUTH_IDENTITY do not conform to the above, RPC_S_INVALID_ARG will be returned by RpcBindingSetAuthInfoEx.
            </term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_SECURITY_QOS.IdentityTracking">
            <summary>
            <para>Sets the context tracking mode. Should be set to one of the values shown in the following table.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>RPC_C_QOS_IDENTITY_STATIC</term>
            <term>
            Security context is created only once and is never revised during the entire communication, even if the client side changes
            it. This is the default behavior if RPC_SECURITY_QOS is not specified.
            </term>
            </item>
            <item>
            <term>RPC_C_QOS_IDENTITY_DYNAMIC</term>
            <term>
            Context is revised whenever the ModifiedId in the client's token is changed. All protocols use the ModifiedId (see note).
            Windows 2000: All remote protocols (all protocols other than ncalrpc) use the AuthenticationID, also known as the LogonId,
            to track changes in the client's identity. The ncalrpc protocol uses ModifiedId.
            </term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_SECURITY_QOS.ImpersonationType">
            <summary>
            <para>Level at which the server process can impersonate the client.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>RPC_C_IMP_LEVEL_DEFAULT</term>
            <term>Uses the default impersonation level.</term>
            </item>
            <item>
            <term>RPC_C_IMP_LEVEL_ANONYMOUS</term>
            <term>
            Client does not provide identification information to the server. The server cannot impersonate the client or identify the
            client. Many servers reject calls with this impersonation type.
            </term>
            </item>
            <item>
            <term>RPC_C_IMP_LEVEL_IDENTIFY</term>
            <term>
            Server can obtain the client's identity, and impersonate the client to perform Access Control List (ACL) checks, but cannot
            impersonate the client. See Impersonation Levels for more information.
            </term>
            </item>
            <item>
            <term>RPC_C_IMP_LEVEL_IMPERSONATE</term>
            <term>Server can impersonate the client's security context on its local system, but not on remote systems.</term>
            </item>
            <item>
            <term>RPC_C_IMP_LEVEL_DELEGATE</term>
            <term>
            The server can impersonate the client's security context while acting on behalf of the client. The server can also make
            outgoing calls to other servers while acting on behalf of the client. The server may use the client's security context on
            other machines to access local and remote resources as the client.
            </term>
            </item>
            </list>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Rpc.RPC_SECURITY_QOS_V2">
            <summary>
            The <c>RPC_SECURITY_QOS_V2</c> structure defines version 2 security quality-of-service settings on a binding handle. See Remarks
            for version availability on Windows editions.
            </summary>
            <remarks>
            <para>The following listing defines the availability of QOS versions on various Windows operating systems:</para>
            <list type="bullet">
            <item>
            <term>Version 1: Windows 2000 and later.</term>
            </item>
            <item>
            <term>Version 2: Windows XP with Service Pack 1 (SP1) and later.</term>
            </item>
            <item>
            <term>Version 3: Windows Server 2003 and later.</term>
            </item>
            <item>
            <term>Version 4: Windows Vista and later.</term>
            </item>
            <item>
            <term>Version 5: Windows 8 and later.</term>
            </item>
            </list>
            <para>
            Windows editions support downlevel versions as well. For example, Windows Server 2003 supports version 3, but also supports
            versions 1 and 2.
            </para>
            <para>
            The client-side security functions RpcBindingInqAuthInfoEx and RpcBindingSetAuthInfo use the RPC_SECURITY_QOS structure to
            inquire about, or to set, the security quality of service for a binding handle.
            </para>
            <para>
            RPC supports the RPC_C_QOS_CAPABILITIES_LOCAL_MA_HINT hint (unsupported on Windows XP and earlier client editions, unsupported
            on Windows 2000 and earlier server editions). This hint is used only when dynamic endpoints and mutual authentication are used.
            Furthermore, it is not supported for the <c>ncadg_</c> protocol sequences. If this flag is used for a <c>ncadg_</c> protocol
            sequence, or without using mutual authentication, RPC_S_INVALID_ARG is returned from the RpcBindingSetAuthInfoEx function call.
            This flag is designed to prevent a Denial of Service Attack. Using this flag forces the RPC Runtime to ask the endpoint mapper
            only for endpoints registered by the principal specified in the <c>ServerPrincName</c> or <c>Sid</c> members. This prevents an
            attacker on the local machine from trying to trick your RPC client to connect to a spoof endpoint it has registered in the
            endpoint mapper. Note that since the attack is local only (such as from a terminal server machine with many users), the flag
            also works only for RPC calls made locally.
            </para>
            <para>
            <c>Note</c> Some security providers, such as Kerberos, support delegation-impersonation type. On Windows editions that support
            delegation-impersonation type, if the client has asked for delegation but the security provider is unable to provide it, the
            call fails with PRC_S_SEC_PKG_ERROR unless the RPC_C_QOS_CAPABILITIES_IGNORE_DELEGATE_FAILURE flag is specified.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_SECURITY_QOS_V2.Version">
            <summary>
            Version of the <c>RPC_SECURITY_QOS</c> structure being used. This topic documents version 1 of the <c>RPC_SECURITY_QOS</c>
            structure. See RPC_SECURITY_QOS_V2, RPC_SECURITY_QOS_V3, RPC_SECURITY_QOS_V4 and RPC_SECURITY_QOS_V5 for other versions.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_SECURITY_QOS_V2.Capabilities">
            <summary>
            <para>
            Security services being provided to the application. Capabilities is a set of flags that can be combined using the bitwise
            OR operator.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>RPC_C_QOS_CAPABILITIES_DEFAULT</term>
            <term>Used when no provider-specific capabilities are needed.</term>
            </item>
            <item>
            <term>RPC_C_QOS_CAPABILITIES_MUTUAL_AUTH</term>
            <term>
            Specifying this flag causes the RPC run time to request mutual authentication from the security provider. Some security
            providers do not support mutual authentication. If the security provider does not support mutual authentication, or the
            identity of the server cannot be established, a remote procedure call to such server fails with error RPC_S_SEC_PKG_ERROR.
            </term>
            </item>
            <item>
            <term>RPC_C_QOS_CAPABILITIES_MAKE_FULLSIC</term>
            <term>Not currently implemented.</term>
            </item>
            <item>
            <term>RPC_C_QOS_CAPABILITIES_ANY_AUTHORITY</term>
            <term>
            Accepts the client's credentials even if the certificate authority (CA) is not in the server's list of trusted CAs. This
            constant is used only by the SCHANNEL SSP.
            </term>
            </item>
            <item>
            <term>RPC_C_QOS_CAPABILITIES_IGNORE_DELEGATE_FAILURE</term>
            <term>
            When specified, this flag directs the RPC runtime on the client to ignore an error to establish a security context that
            supports delegation. Normally, if the client asks for delegation and the security system cannot establish a security context
            that supports delegation, error RPC_S_SEC_PKG_ERROR is returned; when this flag is specified, no error is returned.
            </term>
            </item>
            <item>
            <term>RPC_C_QOS_CAPABILITIES_LOCAL_MA_HINT</term>
            <term>
            This flag specifies to RPC that the server is local to the machine making the RPC call. In this situation RPC instructs the
            endpoint mapper to pick up only endpoints registered by the principal specified in the ServerPrincName or Sid members (these
            members are available in RPC_SECURITY_QOS_V3, RPC_SECURITY_QOS_V4, and RPC_SECURITY_QOS_V5 only). See Remarks for more information.
            </term>
            </item>
            <item>
            <term>RPC_C_QOS_CAPABILITIES_SCHANNEL_FULL_AUTH_IDENTITY</term>
            <term>
            If set, the RPC runtime uses the SChannel SSP to perform smartcard-based authentication without displaying a PIN prompt
            dialog box by the cryptographic services provider (CSP). In the call to RpcBindingSetAuthInfoEx, the AuthIdentity parameter
            must be a SEC_WINNT_AUTH_IDENTITY structure whose members contain the following: If the
            RPC_C_QOS_CAPABILITIES_SCHANNEL_FULL_AUTH_IDENTITY flag is used for any SSP other than SChannel, or if the members of
            SEC_WINNT_AUTH_IDENTITY do not conform to the above, RPC_S_INVALID_ARG will be returned by RpcBindingSetAuthInfoEx.
            </term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_SECURITY_QOS_V2.IdentityTracking">
            <summary>
            <para>Sets the context tracking mode. Should be set to one of the values shown in the following table.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>RPC_C_QOS_IDENTITY_STATIC</term>
            <term>
            Security context is created only once and is never revised during the entire communication, even if the client side changes
            it. This is the default behavior if RPC_SECURITY_QOS is not specified.
            </term>
            </item>
            <item>
            <term>RPC_C_QOS_IDENTITY_DYNAMIC</term>
            <term>
            Context is revised whenever the ModifiedId in the client's token is changed. All protocols use the ModifiedId (see note).
            Windows 2000: All remote protocols (all protocols other than ncalrpc) use the AuthenticationID, also known as the LogonId,
            to track changes in the client's identity. The ncalrpc protocol uses ModifiedId.
            </term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_SECURITY_QOS_V2.ImpersonationType">
            <summary>
            <para>Level at which the server process can impersonate the client.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>RPC_C_IMP_LEVEL_DEFAULT</term>
            <term>Uses the default impersonation level.</term>
            </item>
            <item>
            <term>RPC_C_IMP_LEVEL_ANONYMOUS</term>
            <term>
            Client does not provide identification information to the server. The server cannot impersonate the client or identify the
            client. Many servers reject calls with this impersonation type.
            </term>
            </item>
            <item>
            <term>RPC_C_IMP_LEVEL_IDENTIFY</term>
            <term>
            Server can obtain the client's identity, and impersonate the client to perform Access Control List (ACL) checks, but cannot
            impersonate the client. See Impersonation Levels for more information.
            </term>
            </item>
            <item>
            <term>RPC_C_IMP_LEVEL_IMPERSONATE</term>
            <term>Server can impersonate the client's security context on its local system, but not on remote systems.</term>
            </item>
            <item>
            <term>RPC_C_IMP_LEVEL_DELEGATE</term>
            <term>
            The server can impersonate the client's security context while acting on behalf of the client. The server can also make
            outgoing calls to other servers while acting on behalf of the client. The server may use the client's security context on
            other machines to access local and remote resources as the client.
            </term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_SECURITY_QOS_V2.AdditionalSecurityInfoType">
            <summary>
            <para>Specifies the type of additional credentials present in the <c>u</c> union. The following constants are supported:</para>
            <list type="table">
            <listheader>
            <term>Supported Constants</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>0</term>
            <term>No additional credentials are passed in the u union.</term>
            </item>
            <item>
            <term>RPC_C_AUTHN_INFO_TYPE_HTTP</term>
            <term>
            The HttpCredentials member of the u union points to a RPC_HTTP_TRANSPORT_CREDENTIALS structure. This value can be used only
            when the protocol sequence is ncacn_http. Any other protocol sequence returns RPC_S_INVALID_ARG.
            </term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_SECURITY_QOS_V2.u">
            <summary>
            Additional set of credentials to pass to RPC, in the form of an RPC_HTTP_TRANSPORT_CREDENTIALS structure. Used when the
            <c>AdditionalSecurityInfoType</c> member is set to RPC_C_AUTHN_INFO_TYPE_HTTP.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Rpc.RPC_SECURITY_QOS_V3">
            <summary>
            The <c>RPC_SECURITY_QOS_V3</c> structure defines version 3 security quality-of-service settings on a binding handle. See Remarks
            for version availability on Windows editions.
            </summary>
            <remarks>
            <para>The following listing defines the availability of QOS versions on various Windows operating systems:</para>
            <list type="bullet">
            <item>
            <term>Version 1: Windows 2000 and later.</term>
            </item>
            <item>
            <term>Version 2: Windows XP with Service Pack 1 (SP1) and later.</term>
            </item>
            <item>
            <term>Version 3: Windows Server 2003 and later.</term>
            </item>
            <item>
            <term>Version 4: Windows Vista and later.</term>
            </item>
            <item>
            <term>Version 5: Windows 8 and later.</term>
            </item>
            </list>
            <para>
            Windows editions support downlevel versions as well. For example, Windows Server 2003 supports version 3, but also supports
            versions 1 and 2.
            </para>
            <para>
            The client-side security functions RpcBindingInqAuthInfoEx and RpcBindingSetAuthInfo use the RPC_SECURITY_QOS structure to
            inquire about, or to set, the security quality of service for a binding handle.
            </para>
            <para>
            RPC supports the RPC_C_QOS_CAPABILITIES_LOCAL_MA_HINT hint (unsupported on Windows XP and earlier client editions, unsupported
            on Windows 2000 and earlier server editions). This hint is used only when dynamic endpoints and mutual authentication are used.
            Furthermore, it is not supported for the <c>ncadg_</c> protocol sequences. If this flag is used for a <c>ncadg_</c> protocol
            sequence, or without using mutual authentication, RPC_S_INVALID_ARG is returned from the RpcBindingSetAuthInfoEx function call.
            This flag is designed to prevent a Denial of Service Attack. Using this flag forces the RPC Runtime to ask the endpoint mapper
            only for endpoints registered by the principal specified in the <c>ServerPrincName</c> or <c>Sid</c> members. This prevents an
            attacker on the local machine from trying to trick your RPC client to connect to a spoof endpoint it has registered in the
            endpoint mapper. Note that since the attack is local only (such as from a terminal server machine with many users), the flag
            also works only for RPC calls made locally.
            </para>
            <para>
            <c>Note</c> Some security providers, such as Kerberos, support delegation-impersonation type. On Windows editions that support
            delegation-impersonation type, if the client has asked for delegation but the security provider is unable to provide it, the
            call fails with PRC_S_SEC_PKG_ERROR unless the RPC_C_QOS_CAPABILITIES_IGNORE_DELEGATE_FAILURE flag is specified.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_SECURITY_QOS_V3.Version">
            <summary>
            Version of the <c>RPC_SECURITY_QOS</c> structure being used. This topic documents version 1 of the <c>RPC_SECURITY_QOS</c>
            structure. See RPC_SECURITY_QOS_V2, RPC_SECURITY_QOS_V3, RPC_SECURITY_QOS_V4 and RPC_SECURITY_QOS_V5 for other versions.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_SECURITY_QOS_V3.Capabilities">
            <summary>
            <para>
            Security services being provided to the application. Capabilities is a set of flags that can be combined using the bitwise
            OR operator.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>RPC_C_QOS_CAPABILITIES_DEFAULT</term>
            <term>Used when no provider-specific capabilities are needed.</term>
            </item>
            <item>
            <term>RPC_C_QOS_CAPABILITIES_MUTUAL_AUTH</term>
            <term>
            Specifying this flag causes the RPC run time to request mutual authentication from the security provider. Some security
            providers do not support mutual authentication. If the security provider does not support mutual authentication, or the
            identity of the server cannot be established, a remote procedure call to such server fails with error RPC_S_SEC_PKG_ERROR.
            </term>
            </item>
            <item>
            <term>RPC_C_QOS_CAPABILITIES_MAKE_FULLSIC</term>
            <term>Not currently implemented.</term>
            </item>
            <item>
            <term>RPC_C_QOS_CAPABILITIES_ANY_AUTHORITY</term>
            <term>
            Accepts the client's credentials even if the certificate authority (CA) is not in the server's list of trusted CAs. This
            constant is used only by the SCHANNEL SSP.
            </term>
            </item>
            <item>
            <term>RPC_C_QOS_CAPABILITIES_IGNORE_DELEGATE_FAILURE</term>
            <term>
            When specified, this flag directs the RPC runtime on the client to ignore an error to establish a security context that
            supports delegation. Normally, if the client asks for delegation and the security system cannot establish a security context
            that supports delegation, error RPC_S_SEC_PKG_ERROR is returned; when this flag is specified, no error is returned.
            </term>
            </item>
            <item>
            <term>RPC_C_QOS_CAPABILITIES_LOCAL_MA_HINT</term>
            <term>
            This flag specifies to RPC that the server is local to the machine making the RPC call. In this situation RPC instructs the
            endpoint mapper to pick up only endpoints registered by the principal specified in the ServerPrincName or Sid members (these
            members are available in RPC_SECURITY_QOS_V3, RPC_SECURITY_QOS_V4, and RPC_SECURITY_QOS_V5 only). See Remarks for more information.
            </term>
            </item>
            <item>
            <term>RPC_C_QOS_CAPABILITIES_SCHANNEL_FULL_AUTH_IDENTITY</term>
            <term>
            If set, the RPC runtime uses the SChannel SSP to perform smartcard-based authentication without displaying a PIN prompt
            dialog box by the cryptographic services provider (CSP). In the call to RpcBindingSetAuthInfoEx, the AuthIdentity parameter
            must be a SEC_WINNT_AUTH_IDENTITY structure whose members contain the following: If the
            RPC_C_QOS_CAPABILITIES_SCHANNEL_FULL_AUTH_IDENTITY flag is used for any SSP other than SChannel, or if the members of
            SEC_WINNT_AUTH_IDENTITY do not conform to the above, RPC_S_INVALID_ARG will be returned by RpcBindingSetAuthInfoEx.
            </term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_SECURITY_QOS_V3.IdentityTracking">
            <summary>
            <para>Sets the context tracking mode. Should be set to one of the values shown in the following table.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>RPC_C_QOS_IDENTITY_STATIC</term>
            <term>
            Security context is created only once and is never revised during the entire communication, even if the client side changes
            it. This is the default behavior if RPC_SECURITY_QOS is not specified.
            </term>
            </item>
            <item>
            <term>RPC_C_QOS_IDENTITY_DYNAMIC</term>
            <term>
            Context is revised whenever the ModifiedId in the client's token is changed. All protocols use the ModifiedId (see note).
            Windows 2000: All remote protocols (all protocols other than ncalrpc) use the AuthenticationID, also known as the LogonId,
            to track changes in the client's identity. The ncalrpc protocol uses ModifiedId.
            </term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_SECURITY_QOS_V3.ImpersonationType">
            <summary>
            <para>Level at which the server process can impersonate the client.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>RPC_C_IMP_LEVEL_DEFAULT</term>
            <term>Uses the default impersonation level.</term>
            </item>
            <item>
            <term>RPC_C_IMP_LEVEL_ANONYMOUS</term>
            <term>
            Client does not provide identification information to the server. The server cannot impersonate the client or identify the
            client. Many servers reject calls with this impersonation type.
            </term>
            </item>
            <item>
            <term>RPC_C_IMP_LEVEL_IDENTIFY</term>
            <term>
            Server can obtain the client's identity, and impersonate the client to perform Access Control List (ACL) checks, but cannot
            impersonate the client. See Impersonation Levels for more information.
            </term>
            </item>
            <item>
            <term>RPC_C_IMP_LEVEL_IMPERSONATE</term>
            <term>Server can impersonate the client's security context on its local system, but not on remote systems.</term>
            </item>
            <item>
            <term>RPC_C_IMP_LEVEL_DELEGATE</term>
            <term>
            The server can impersonate the client's security context while acting on behalf of the client. The server can also make
            outgoing calls to other servers while acting on behalf of the client. The server may use the client's security context on
            other machines to access local and remote resources as the client.
            </term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_SECURITY_QOS_V3.AdditionalSecurityInfoType">
            <summary>
            <para>Specifies the type of additional credentials present in the <c>u</c> union. The following constants are supported:</para>
            <list type="table">
            <listheader>
            <term>Supported Constants</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>0</term>
            <term>No additional credentials are passed in the u union.</term>
            </item>
            <item>
            <term>RPC_C_AUTHN_INFO_TYPE_HTTP</term>
            <term>
            The HttpCredentials member of the u union points to a RPC_HTTP_TRANSPORT_CREDENTIALS structure. This value can be used only
            when the protocol sequence is ncacn_http. Any other protocol sequence returns RPC_S_INVALID_ARG.
            </term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_SECURITY_QOS_V3.u">
            <summary>
            Additional set of credentials to pass to RPC, in the form of an RPC_HTTP_TRANSPORT_CREDENTIALS structure. Used when the
            <c>AdditionalSecurityInfoType</c> member is set to RPC_C_AUTHN_INFO_TYPE_HTTP.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_SECURITY_QOS_V3.Sid">
            <summary>
            Points to a security identifier (SID). The SID is an alternative to the <c>ServerPrincName</c> member, and only one can be
            specified. The <c>Sid</c> member cannot be set to non- <c>NULL</c> if the security provider is the SCHANNEL SSP. Some
            protocol sequences use <c>Sid</c> internally for security, and some use a <c>ServerPrincName</c>. For example, ncalrpc uses
            a <c>Sid</c> internally, and if the caller knows both the SID and the <c>ServerPrincName</c>, a call using <c>ncalrpc</c>
            can complete much faster in some cases if the SID is passed. In contrast, the <c>ncacn_</c> and <c>ncadg_</c> protocol
            sequences use a <c>ServerPrincName</c> internally, and therefore can execute calls faster when provided the <c>ServerPrincName</c>.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Rpc.RPC_SECURITY_QOS_V4">
            <summary>
            The <c>RPC_SECURITY_QOS_V4</c> structure defines version 4 security quality-of-service settings on a binding handle. See Remarks
            for version availability on Windows editions.
            </summary>
            <remarks>
            <para>The following listing defines the availability of QOS versions on various Windows operating systems:</para>
            <list type="bullet">
            <item>
            <term>Version 1: Windows 2000 and later.</term>
            </item>
            <item>
            <term>Version 2: Windows XP with Service Pack 1 (SP1) and later.</term>
            </item>
            <item>
            <term>Version 3: Windows Server 2003 and later.</term>
            </item>
            <item>
            <term>Version 4: Windows Vista and later.</term>
            </item>
            <item>
            <term>Version 5: Windows 8 and later.</term>
            </item>
            </list>
            <para>
            Windows editions support downlevel versions as well. For example, Windows Server 2003 supports version 3, but also supports
            versions 1 and 2.
            </para>
            <para>
            The client-side security functions RpcBindingInqAuthInfoEx and RpcBindingSetAuthInfo use the RPC_SECURITY_QOS structure to
            inquire about, or to set, the security quality of service for a binding handle.
            </para>
            <para>
            RPC supports the RPC_C_QOS_CAPABILITIES_LOCAL_MA_HINT hint (unsupported on Windows XP and earlier client editions, unsupported
            on Windows 2000 and earlier server editions). This hint is used only when dynamic endpoints and mutual authentication are used.
            Furthermore, it is not supported for the <c>ncadg_</c> protocol sequences. If this flag is used for a <c>ncadg_</c> protocol
            sequence, or without using mutual authentication, RPC_S_INVALID_ARG is returned from the RpcBindingSetAuthInfoEx function call.
            This flag is designed to prevent a Denial of Service Attack. Using this flag forces the RPC Runtime to ask the endpoint mapper
            only for endpoints registered by the principal specified in the <c>ServerPrincName</c> or <c>Sid</c> members. This prevents an
            attacker on the local machine from trying to trick your RPC client to connect to a spoof endpoint it has registered in the
            endpoint mapper. Note that since the attack is local only (such as from a terminal server machine with many users), the flag
            also works only for RPC calls made locally.
            </para>
            <para>
            <c>Note</c> Some security providers, such as Kerberos, support delegation-impersonation type. On Windows editions that support
            delegation-impersonation type, if the client has asked for delegation but the security provider is unable to provide it, the
            call fails with PRC_S_SEC_PKG_ERROR unless the RPC_C_QOS_CAPABILITIES_IGNORE_DELEGATE_FAILURE flag is specified.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_SECURITY_QOS_V4.Version">
            <summary>
            Version of the <c>RPC_SECURITY_QOS</c> structure being used. This topic documents version 1 of the <c>RPC_SECURITY_QOS</c>
            structure. See RPC_SECURITY_QOS_V2, RPC_SECURITY_QOS_V3, RPC_SECURITY_QOS_V4 and RPC_SECURITY_QOS_V5 for other versions.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_SECURITY_QOS_V4.Capabilities">
            <summary>
            <para>
            Security services being provided to the application. Capabilities is a set of flags that can be combined using the bitwise
            OR operator.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>RPC_C_QOS_CAPABILITIES_DEFAULT</term>
            <term>Used when no provider-specific capabilities are needed.</term>
            </item>
            <item>
            <term>RPC_C_QOS_CAPABILITIES_MUTUAL_AUTH</term>
            <term>
            Specifying this flag causes the RPC run time to request mutual authentication from the security provider. Some security
            providers do not support mutual authentication. If the security provider does not support mutual authentication, or the
            identity of the server cannot be established, a remote procedure call to such server fails with error RPC_S_SEC_PKG_ERROR.
            </term>
            </item>
            <item>
            <term>RPC_C_QOS_CAPABILITIES_MAKE_FULLSIC</term>
            <term>Not currently implemented.</term>
            </item>
            <item>
            <term>RPC_C_QOS_CAPABILITIES_ANY_AUTHORITY</term>
            <term>
            Accepts the client's credentials even if the certificate authority (CA) is not in the server's list of trusted CAs. This
            constant is used only by the SCHANNEL SSP.
            </term>
            </item>
            <item>
            <term>RPC_C_QOS_CAPABILITIES_IGNORE_DELEGATE_FAILURE</term>
            <term>
            When specified, this flag directs the RPC runtime on the client to ignore an error to establish a security context that
            supports delegation. Normally, if the client asks for delegation and the security system cannot establish a security context
            that supports delegation, error RPC_S_SEC_PKG_ERROR is returned; when this flag is specified, no error is returned.
            </term>
            </item>
            <item>
            <term>RPC_C_QOS_CAPABILITIES_LOCAL_MA_HINT</term>
            <term>
            This flag specifies to RPC that the server is local to the machine making the RPC call. In this situation RPC instructs the
            endpoint mapper to pick up only endpoints registered by the principal specified in the ServerPrincName or Sid members (these
            members are available in RPC_SECURITY_QOS_V3, RPC_SECURITY_QOS_V4, and RPC_SECURITY_QOS_V5 only). See Remarks for more information.
            </term>
            </item>
            <item>
            <term>RPC_C_QOS_CAPABILITIES_SCHANNEL_FULL_AUTH_IDENTITY</term>
            <term>
            If set, the RPC runtime uses the SChannel SSP to perform smartcard-based authentication without displaying a PIN prompt
            dialog box by the cryptographic services provider (CSP). In the call to RpcBindingSetAuthInfoEx, the AuthIdentity parameter
            must be a SEC_WINNT_AUTH_IDENTITY structure whose members contain the following: If the
            RPC_C_QOS_CAPABILITIES_SCHANNEL_FULL_AUTH_IDENTITY flag is used for any SSP other than SChannel, or if the members of
            SEC_WINNT_AUTH_IDENTITY do not conform to the above, RPC_S_INVALID_ARG will be returned by RpcBindingSetAuthInfoEx.
            </term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_SECURITY_QOS_V4.IdentityTracking">
            <summary>
            <para>Sets the context tracking mode. Should be set to one of the values shown in the following table.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>RPC_C_QOS_IDENTITY_STATIC</term>
            <term>
            Security context is created only once and is never revised during the entire communication, even if the client side changes
            it. This is the default behavior if RPC_SECURITY_QOS is not specified.
            </term>
            </item>
            <item>
            <term>RPC_C_QOS_IDENTITY_DYNAMIC</term>
            <term>
            Context is revised whenever the ModifiedId in the client's token is changed. All protocols use the ModifiedId (see note).
            Windows 2000: All remote protocols (all protocols other than ncalrpc) use the AuthenticationID, also known as the LogonId,
            to track changes in the client's identity. The ncalrpc protocol uses ModifiedId.
            </term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_SECURITY_QOS_V4.ImpersonationType">
            <summary>
            <para>Level at which the server process can impersonate the client.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>RPC_C_IMP_LEVEL_DEFAULT</term>
            <term>Uses the default impersonation level.</term>
            </item>
            <item>
            <term>RPC_C_IMP_LEVEL_ANONYMOUS</term>
            <term>
            Client does not provide identification information to the server. The server cannot impersonate the client or identify the
            client. Many servers reject calls with this impersonation type.
            </term>
            </item>
            <item>
            <term>RPC_C_IMP_LEVEL_IDENTIFY</term>
            <term>
            Server can obtain the client's identity, and impersonate the client to perform Access Control List (ACL) checks, but cannot
            impersonate the client. See Impersonation Levels for more information.
            </term>
            </item>
            <item>
            <term>RPC_C_IMP_LEVEL_IMPERSONATE</term>
            <term>Server can impersonate the client's security context on its local system, but not on remote systems.</term>
            </item>
            <item>
            <term>RPC_C_IMP_LEVEL_DELEGATE</term>
            <term>
            The server can impersonate the client's security context while acting on behalf of the client. The server can also make
            outgoing calls to other servers while acting on behalf of the client. The server may use the client's security context on
            other machines to access local and remote resources as the client.
            </term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_SECURITY_QOS_V4.AdditionalSecurityInfoType">
            <summary>
            <para>Specifies the type of additional credentials present in the <c>u</c> union. The following constants are supported:</para>
            <list type="table">
            <listheader>
            <term>Supported Constants</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>0</term>
            <term>No additional credentials are passed in the u union.</term>
            </item>
            <item>
            <term>RPC_C_AUTHN_INFO_TYPE_HTTP</term>
            <term>
            The HttpCredentials member of the u union points to a RPC_HTTP_TRANSPORT_CREDENTIALS structure. This value can be used only
            when the protocol sequence is ncacn_http. Any other protocol sequence returns RPC_S_INVALID_ARG.
            </term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_SECURITY_QOS_V4.u">
            <summary>
            Additional set of credentials to pass to RPC, in the form of an RPC_HTTP_TRANSPORT_CREDENTIALS structure. Used when the
            <c>AdditionalSecurityInfoType</c> member is set to RPC_C_AUTHN_INFO_TYPE_HTTP.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_SECURITY_QOS_V4.Sid">
            <summary>
            Points to a security identifier (SID). The SID is an alternative to the <c>ServerPrincName</c> member, and only one can be
            specified. The <c>Sid</c> member cannot be set to non- <c>NULL</c> if the security provider is the SCHANNEL SSP. Some
            protocol sequences use <c>Sid</c> internally for security, and some use a <c>ServerPrincName</c>. For example, ncalrpc uses
            a <c>Sid</c> internally, and if the caller knows both the SID and the <c>ServerPrincName</c>, a call using <c>ncalrpc</c>
            can complete much faster in some cases if the SID is passed. In contrast, the <c>ncacn_</c> and <c>ncadg_</c> protocol
            sequences use a <c>ServerPrincName</c> internally, and therefore can execute calls faster when provided the <c>ServerPrincName</c>.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_SECURITY_QOS_V4.EffectiveOnly">
            <summary>If set, only enabled privileges are seen by the server.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Rpc.RPC_SECURITY_QOS_V5">
            <summary>
            The <c>RPC_SECURITY_QOS_V5</c> structure defines version 5 security quality-of-service settings on a binding handle. See Remarks
            for version availability on Windows editions.
            </summary>
            <remarks>
            <para>The following listing defines the availability of QOS versions on various Windows operating systems:</para>
            <list type="bullet">
            <item>
            <term>Version 1: Windows 2000 and later.</term>
            </item>
            <item>
            <term>Version 2: Windows XP with Service Pack 1 (SP1) and later.</term>
            </item>
            <item>
            <term>Version 3: Windows Server 2003 and later.</term>
            </item>
            <item>
            <term>Version 4: Windows Vista and later.</term>
            </item>
            <item>
            <term>Version 5: Windows 8 and later.</term>
            </item>
            </list>
            <para>
            Windows editions support downlevel versions as well. For example, Windows Server 2003 supports version 3, but also supports
            versions 1 and 2.
            </para>
            <para>
            The client-side security functions RpcBindingInqAuthInfoEx and RpcBindingSetAuthInfo use the RPC_SECURITY_QOS structure to
            inquire about, or to set, the security quality of service for a binding handle.
            </para>
            <para>
            RPC supports the RPC_C_QOS_CAPABILITIES_LOCAL_MA_HINT hint (unsupported on Windows XP and earlier client editions, unsupported
            on Windows 2000 and earlier server editions). This hint is used only when dynamic endpoints and mutual authentication are used.
            Furthermore, it is not supported for the <c>ncadg_</c> protocol sequences. If this flag is used for a <c>ncadg_</c> protocol
            sequence, or without using mutual authentication, RPC_S_INVALID_ARG is returned from the RpcBindingSetAuthInfoEx function call.
            This flag is designed to prevent a Denial of Service Attack. Using this flag forces the RPC Runtime to ask the endpoint mapper
            only for endpoints registered by the principal specified in the <c>ServerPrincName</c> or <c>Sid</c> members. This prevents an
            attacker on the local machine from trying to trick your RPC client to connect to a spoof endpoint it has registered in the
            endpoint mapper. Note that since the attack is local only (such as from a terminal server machine with many users), the flag
            also works only for RPC calls made locally.
            </para>
            <para>
            <c>Note</c> Some security providers, such as Kerberos, support delegation-impersonation type. On Windows editions that support
            delegation-impersonation type, if the client has asked for delegation but the security provider is unable to provide it, the
            call fails with PRC_S_SEC_PKG_ERROR unless the RPC_C_QOS_CAPABILITIES_IGNORE_DELEGATE_FAILURE flag is specified.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_SECURITY_QOS_V5.Version">
            <summary>
            Version of the <c>RPC_SECURITY_QOS</c> structure being used. This topic documents version 1 of the <c>RPC_SECURITY_QOS</c>
            structure. See RPC_SECURITY_QOS_V2, RPC_SECURITY_QOS_V3, RPC_SECURITY_QOS_V4 and RPC_SECURITY_QOS_V5 for other versions.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_SECURITY_QOS_V5.Capabilities">
            <summary>
            <para>
            Security services being provided to the application. Capabilities is a set of flags that can be combined using the bitwise
            OR operator.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>RPC_C_QOS_CAPABILITIES_DEFAULT</term>
            <term>Used when no provider-specific capabilities are needed.</term>
            </item>
            <item>
            <term>RPC_C_QOS_CAPABILITIES_MUTUAL_AUTH</term>
            <term>
            Specifying this flag causes the RPC run time to request mutual authentication from the security provider. Some security
            providers do not support mutual authentication. If the security provider does not support mutual authentication, or the
            identity of the server cannot be established, a remote procedure call to such server fails with error RPC_S_SEC_PKG_ERROR.
            </term>
            </item>
            <item>
            <term>RPC_C_QOS_CAPABILITIES_MAKE_FULLSIC</term>
            <term>Not currently implemented.</term>
            </item>
            <item>
            <term>RPC_C_QOS_CAPABILITIES_ANY_AUTHORITY</term>
            <term>
            Accepts the client's credentials even if the certificate authority (CA) is not in the server's list of trusted CAs. This
            constant is used only by the SCHANNEL SSP.
            </term>
            </item>
            <item>
            <term>RPC_C_QOS_CAPABILITIES_IGNORE_DELEGATE_FAILURE</term>
            <term>
            When specified, this flag directs the RPC runtime on the client to ignore an error to establish a security context that
            supports delegation. Normally, if the client asks for delegation and the security system cannot establish a security context
            that supports delegation, error RPC_S_SEC_PKG_ERROR is returned; when this flag is specified, no error is returned.
            </term>
            </item>
            <item>
            <term>RPC_C_QOS_CAPABILITIES_LOCAL_MA_HINT</term>
            <term>
            This flag specifies to RPC that the server is local to the machine making the RPC call. In this situation RPC instructs the
            endpoint mapper to pick up only endpoints registered by the principal specified in the ServerPrincName or Sid members (these
            members are available in RPC_SECURITY_QOS_V3, RPC_SECURITY_QOS_V4, and RPC_SECURITY_QOS_V5 only). See Remarks for more information.
            </term>
            </item>
            <item>
            <term>RPC_C_QOS_CAPABILITIES_SCHANNEL_FULL_AUTH_IDENTITY</term>
            <term>
            If set, the RPC runtime uses the SChannel SSP to perform smartcard-based authentication without displaying a PIN prompt
            dialog box by the cryptographic services provider (CSP). In the call to RpcBindingSetAuthInfoEx, the AuthIdentity parameter
            must be a SEC_WINNT_AUTH_IDENTITY structure whose members contain the following: If the
            RPC_C_QOS_CAPABILITIES_SCHANNEL_FULL_AUTH_IDENTITY flag is used for any SSP other than SChannel, or if the members of
            SEC_WINNT_AUTH_IDENTITY do not conform to the above, RPC_S_INVALID_ARG will be returned by RpcBindingSetAuthInfoEx.
            </term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_SECURITY_QOS_V5.IdentityTracking">
            <summary>
            <para>Sets the context tracking mode. Should be set to one of the values shown in the following table.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>RPC_C_QOS_IDENTITY_STATIC</term>
            <term>
            Security context is created only once and is never revised during the entire communication, even if the client side changes
            it. This is the default behavior if RPC_SECURITY_QOS is not specified.
            </term>
            </item>
            <item>
            <term>RPC_C_QOS_IDENTITY_DYNAMIC</term>
            <term>
            Context is revised whenever the ModifiedId in the client's token is changed. All protocols use the ModifiedId (see note).
            Windows 2000: All remote protocols (all protocols other than ncalrpc) use the AuthenticationID, also known as the LogonId,
            to track changes in the client's identity. The ncalrpc protocol uses ModifiedId.
            </term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_SECURITY_QOS_V5.ImpersonationType">
            <summary>
            <para>Level at which the server process can impersonate the client.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>RPC_C_IMP_LEVEL_DEFAULT</term>
            <term>Uses the default impersonation level.</term>
            </item>
            <item>
            <term>RPC_C_IMP_LEVEL_ANONYMOUS</term>
            <term>
            Client does not provide identification information to the server. The server cannot impersonate the client or identify the
            client. Many servers reject calls with this impersonation type.
            </term>
            </item>
            <item>
            <term>RPC_C_IMP_LEVEL_IDENTIFY</term>
            <term>
            Server can obtain the client's identity, and impersonate the client to perform Access Control List (ACL) checks, but cannot
            impersonate the client. See Impersonation Levels for more information.
            </term>
            </item>
            <item>
            <term>RPC_C_IMP_LEVEL_IMPERSONATE</term>
            <term>Server can impersonate the client's security context on its local system, but not on remote systems.</term>
            </item>
            <item>
            <term>RPC_C_IMP_LEVEL_DELEGATE</term>
            <term>
            The server can impersonate the client's security context while acting on behalf of the client. The server can also make
            outgoing calls to other servers while acting on behalf of the client. The server may use the client's security context on
            other machines to access local and remote resources as the client.
            </term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_SECURITY_QOS_V5.AdditionalSecurityInfoType">
            <summary>
            <para>Specifies the type of additional credentials present in the <c>u</c> union. The following constants are supported:</para>
            <list type="table">
            <listheader>
            <term>Supported Constants</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>0</term>
            <term>No additional credentials are passed in the u union.</term>
            </item>
            <item>
            <term>RPC_C_AUTHN_INFO_TYPE_HTTP</term>
            <term>
            The HttpCredentials member of the u union points to a RPC_HTTP_TRANSPORT_CREDENTIALS structure. This value can be used only
            when the protocol sequence is ncacn_http. Any other protocol sequence returns RPC_S_INVALID_ARG.
            </term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_SECURITY_QOS_V5.u">
            <summary>
            Additional set of credentials to pass to RPC, in the form of an RPC_HTTP_TRANSPORT_CREDENTIALS structure. Used when the
            <c>AdditionalSecurityInfoType</c> member is set to RPC_C_AUTHN_INFO_TYPE_HTTP.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_SECURITY_QOS_V5.Sid">
            <summary>
            Points to a security identifier (SID). The SID is an alternative to the <c>ServerPrincName</c> member, and only one can be
            specified. The <c>Sid</c> member cannot be set to non- <c>NULL</c> if the security provider is the SCHANNEL SSP. Some
            protocol sequences use <c>Sid</c> internally for security, and some use a <c>ServerPrincName</c>. For example, ncalrpc uses
            a <c>Sid</c> internally, and if the caller knows both the SID and the <c>ServerPrincName</c>, a call using <c>ncalrpc</c>
            can complete much faster in some cases if the SID is passed. In contrast, the <c>ncacn_</c> and <c>ncadg_</c> protocol
            sequences use a <c>ServerPrincName</c> internally, and therefore can execute calls faster when provided the <c>ServerPrincName</c>.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_SECURITY_QOS_V5.EffectiveOnly">
            <summary>If set, only enabled privileges are seen by the server.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_SECURITY_QOS_V5.ServerSecurityDescriptor">
            <summary>A pointer to the SECURITY_DESCRIPTOR that identifies the server. It is required for mutual authentication.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Rpc.RPC_STATS_VECTOR">
            <summary>The <c>RPC_STATS_VECTOR</c> structure contains statistics from the RPC run-time library on a per-server basis.</summary>
            <remarks>
            The statistics vector contains a count member ( <c>Count</c>), followed by an array of statistics. To obtain run-time
            statistics, an application calls RpcMgmtInqStats. The RPC run-time library allocates memory for the statistics vector. The
            application calls RpcMgmtStatsVectorFree to free the statistics vector.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_STATS_VECTOR.Count">
            <summary>Number of statistics values present in the array <c>Stats</c>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_STATS_VECTOR.Stats">
            <summary>
            <para>
            Array of unsigned long integers representing server statistics that contains <c>Count</c> elements. Each array element
            contains an unsigned long value from the following list.
            </para>
            <list type="table">
            <listheader>
            <term>Constant</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>RPC_C_STATS_CALLS_IN</term>
            <term>The number of remote procedure calls received by the server.</term>
            </item>
            <item>
            <term>RPC_C_STATS_CALLS_OUT</term>
            <term>The number of remote procedure calls initiated by the server.</term>
            </item>
            <item>
            <term>RPC_C_STATS_PKTS_IN</term>
            <term>The number of network packets received by the server.</term>
            </item>
            <item>
            <term>RPC_C_STATS_PKTS_OUT</term>
            <term>The number of network packets sent by the server.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Rpc.SEC_WINNT_AUTH_IDENTITY">
            <summary>Allows you to pass a particular user name and password to the run-time library for the purpose of authentication.</summary>
            <remarks>
            <para>When this structure is used with RPC, the structure must remain valid for the lifetime of the binding handle.</para>
            <para>The strings may be ANSI or Unicode, depending on the value you assign to the <c>Flags</c> member.</para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.SEC_WINNT_AUTH_IDENTITY.User">
            <summary>A string that contains the user name.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.SEC_WINNT_AUTH_IDENTITY.UserLength">
            <summary>The length, in characters, of the user string, not including the terminating null character.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.SEC_WINNT_AUTH_IDENTITY.Domain">
            <summary>A string that contains the domain name or the workgroup name.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.SEC_WINNT_AUTH_IDENTITY.DomainLength">
            <summary>The length, in characters, of the domain string, not including the terminating null character.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.SEC_WINNT_AUTH_IDENTITY.Password">
            <summary>
            A string that contains the password of the user in the domain or workgroup. When you have finished using the password,
            remove the sensitive information from memory by calling SecureZeroMemory. For more information about protecting the
            password, see Handling Passwords.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.SEC_WINNT_AUTH_IDENTITY.PasswordLength">
            <summary>The length, in characters, of the password string, not including the terminating null character.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.SEC_WINNT_AUTH_IDENTITY.Flags">
            <summary>
            <para>This member can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>SEC_WINNT_AUTH_IDENTITY_ANSI</term>
            <term>The strings in this structure are in ANSI format.</term>
            </item>
            <item>
            <term>SEC_WINNT_AUTH_IDENTITY_UNICODE</term>
            <term>The strings in this structure are in Unicode format.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.SEC_WINNT_AUTH_IDENTITY.Default">
            <summary>Gets the default value of the instance and sets <see cref="F:Vanara.PInvoke.Rpc.SEC_WINNT_AUTH_IDENTITY.Flags"/> to the value defined by the runtime.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Rpc.SEC_WINNT_AUTH_IDENTITY.#ctor(System.String,System.String,System.String)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Rpc.SEC_WINNT_AUTH_IDENTITY"/> struct.</summary>
            <param name="user">The user name.</param>
            <param name="domain">The domain name or the workgroup name.</param>
            <param name="password">The password of the user in the domain or workgroup.</param>
        </member>
        <member name="T:Vanara.PInvoke.Rpc.UUID_VECTOR">
            <summary>The <c>UUID_VECTOR</c> structure contains a list of UUIDs.</summary>
            <remarks>
            <para>
            The UUID vector contains a count member containing the total number of <c>UUID</c> s in the vector, followed by an array of
            pointers to <c>UUID</c> s.
            </para>
            <para>An application constructs a UUID vector to contain object <c>UUID</c> s to be exported or unexported from the name service.</para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.UUID_VECTOR.Count">
            <summary>Number of UUIDs present in the array <c>Uuid</c>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.UUID_VECTOR.Uuid">
            <summary>Array of pointers to UUIDs that contains <c>Count</c> elements.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Rpc.SafeRPC_BINDING_HANDLE">
            <summary>
            Provides a <see cref="T:System.Runtime.InteropServices.SafeHandle"/> for <see cref="T:Vanara.PInvoke.Rpc.RPC_BINDING_HANDLE"/> that is disposed using <see cref="M:Vanara.PInvoke.Rpc.RpcBindingFree(Vanara.PInvoke.Rpc.RPC_BINDING_HANDLE@)"/>.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Rpc.SafeRPC_BINDING_HANDLE.#ctor(System.IntPtr,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Rpc.SafeRPC_BINDING_HANDLE"/> class and assigns an existing handle.</summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
            <param name="ownsHandle">
            <see langword="true"/> to reliably release the handle during the finalization phase; otherwise, <see langword="false"/> (not recommended).
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Rpc.SafeRPC_BINDING_HANDLE.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Rpc.SafeRPC_BINDING_HANDLE"/> class.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Rpc.SafeRPC_BINDING_HANDLE.op_Implicit(Vanara.PInvoke.Rpc.SafeRPC_BINDING_HANDLE)~Vanara.PInvoke.Rpc.RPC_BINDING_HANDLE">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.Rpc.SafeRPC_BINDING_HANDLE"/> to <see cref="T:Vanara.PInvoke.Rpc.RPC_BINDING_HANDLE"/>.</summary>
            <param name="h">The safe handle instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Rpc.SafeRPC_BINDING_HANDLE.InternalReleaseHandle">
            <inheritdoc/>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_C_FULL_CERT_CHAIN">
            <summary>Passes back the principal name in fullsic format.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_C_SECURITY_QOS_VERSION">
            <summary>The RPC QOS version.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Rpc.RPC_AUTH_KEY_RETRIEVAL_FN">
            <summary>
            The RPC_AUTH_KEY_RETRIEVAL_FN function is a prototype for a function that specifies the address of a server-application-provided
            routine returning encryption keys.
            </summary>
            <param name="Arg"/>
            <param name="ServerPrincName">
            Pointer to the principal name to use for the server when authenticating remote procedure calls. The RPC run-time library uses
            the ServerPrincName parameter supplied to RpcServerRegisterAuthInfo.
            </param>
            <param name="KeyVer">
            Value that the RPC run-time library automatically provides for the key-version parameter. When the value is zero, the
            acquisition function must return the most recent key available.
            </param>
            <param name="Key">Pointer to a pointer to the authentication key returned by the user-supplied function.</param>
            <param name="Status"/>
            <returns>None</returns>
            <remarks>
            An authorization key–retrieval function specifies the address of a server-application-provided routine returning encryption keys.
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Rpc.RPC_IF_CALLBACK_FN">
            <summary>
            The <c>RPC_IF_CALLBACK_FN</c> is a prototype for a security-callback function that your application supplies. Your program can
            provide a callback function for each interface it defines.
            </summary>
            <param name="InterfaceUuid"/>
            <param name="Context"/>
            <returns>
            <para>
            The callback function should return RPC_S_OK if the client is allowed to call methods in this interface. Any other return code
            will cause the client to receive the exception RPC_S_ACCESS_DENIED.
            </para>
            <para><c>Note</c> For a list of valid error codes, see RPC Return Values.</para>
            </returns>
            <remarks>
            <para>
            In some cases, the RPC run time may call the security-callback function more than once per client per interface. Be sure your
            callback function can handle this possibility.
            </para>
            <para>The security callback must be declared as RPC_ENTRY.</para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Rpc.RPC_INTERFACE_GROUP_IDLE_CALLBACK_FN">
            <summary>
            The <c>RPC_INTERFACE_GROUP_IDLE_CALLBACK_FN</c> is a user-defined callback that can be implemented for each defined interface
            group. This callback is invoked by the RPC runtime when it detects that the idle state of an interface group has changed.
            </summary>
            <param name="IfGroup">
            A <c>RPC_INTERFACE_GROUP</c> from RpcServerInterfaceGroupCreate that defines the interface group for which the idle state has changed.
            </param>
            <param name="IdleCallbackContext"/>
            <param name="IsGroupIdle">
            <c>TRUE</c> if the interface group has just become idle. <c>FALSE</c> if the interface group was previously idle but has since
            received new activity.
            </param>
            <returns>None</returns>
            <remarks>
            <para>
            When a server registers an interface group, it provides a pointer to an idle callback function through which RPC will notify the
            application when the interface group’s idle state has changed. The server application can use this callback to attempt to
            deactivate the interface group when it becomes idle.
            </para>
            <para>RpcServerInterfaceGroupClose must not be called from this callback or deadlock can occur.</para>
            <para>
            Note that RPC server activity is not always visible to the server application. In some cases, simply having a client with an
            open connection to the server may keep it active even if no calls have been dispatched for a long period of time. Server
            applications must not rely on any correlation between the RPC runtime declaring that the group is idle and the time since the
            last call was dispatched.
            </para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Rpc.RPC_MGMT_AUTHORIZATION_FN">
            <summary>The RPC_MGMT_AUTHORIZATION_FN enables server programs to implement custom RPC authorization techniques.</summary>
            <param name="ClientBinding">Client/server binding handle.</param>
            <param name="RequestedMgmtOperation">
            <para>The value for RequestedMgmtOperation depends on the remote function requested, as shown in the following table.</para>
            <list type="table">
            <listheader>
            <term>Called remote function</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>RpcMgmtInqIfIds</term>
            <term>RPC_C_MGMT_INQ_IF_IDS</term>
            </item>
            <item>
            <term>RpcMgmtInqServerPrincName</term>
            <term>RPC_C_MGMT_INQ_PRINC_NAME</term>
            </item>
            <item>
            <term>RpcMgmtInqStats</term>
            <term>RPC_C_MGMT_INQ_STATS</term>
            </item>
            <item>
            <term>RpcMgmtIsServerListening</term>
            <term>RPC_C_MGMT_IS_SERVER_LISTEN</term>
            </item>
            <item>
            <term>RpcMgmtStopServerListening</term>
            <term>RPC_C_MGMT_STOP_SERVER_LISTEN</term>
            </item>
            </list>
            <para>The authorization function must handle all of these values.</para>
            </param>
            <param name="Status"/>
            <returns>
            Returns <c>TRUE</c> if the calling client is allowed access to the requested management function. If the authorization function
            returns <c>FALSE</c>, the management function cannot execute. In this case, the function returns a Status value to the client:
            </returns>
            <remarks>
            When a client requests one of the server's remote management functions, the server run-time library calls the authorization
            function with ClientBinding and RequestedMgmtOperation. The authorization function uses these parameters to determine whether
            the calling client can execute the requested management function.
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Rpc.RPC_OBJECT_INQ_FN">
            <summary>
            The <c>RPC_OBJECT_INQ_FN</c> function is a prototype for a function that facilitates replacement of the default object UUID to
            type UUID mapping.
            </summary>
            <param name="ObjectUuid"/>
            <param name="TypeUuid"/>
            <param name="Status"/>
            <returns>None</returns>
            <remarks>
            You can replace the default mapping function that maps object UUIDs to type UUIDs by calling RpcObjectSetInqFn and supplying a
            pointer to a function of type RPC_OBJECT_INQ_FN. The supplied function must match the function prototype specified by the type
            definition: a function with three parameters and the function return value of void.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Rpc.DceErrorInqText(Vanara.PInvoke.Win32Error,System.String)">
            <summary>The <c>DceErrorInqText</c> function returns the message text for a status code.</summary>
            <param name="RpcStatus">Status code to convert to a text string.</param>
            <param name="ErrorText">
            <para>Returns the text corresponding to the error code.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>RPC_S_OK</term>
            <term>The call succeeded.</term>
            </item>
            <item>
            <term>RPC_S_INVALID_ARG</term>
            <term>Unknown error code.</term>
            </item>
            </list>
            </param>
            <returns>
            <para>This function returns RPC_S_OK if it is successful, or an error code if not.</para>
            <para><c>Note</c> For a list of valid error codes, see RPC Return Values.</para>
            </returns>
            <remarks>
            The <c>DceErrorInqText</c> routine fills the string pointed to by the ErrorText parameter with a null-terminated character
            string message for a particular status code.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Rpc.RpcBindingCopy(Vanara.PInvoke.Rpc.RPC_BINDING_HANDLE,Vanara.PInvoke.Rpc.SafeRPC_BINDING_HANDLE@)">
            <summary>The <c>RpcBindingCopy</c> function copies binding information and creates a new binding handle.</summary>
            <param name="SourceBinding">Server binding handle whose referenced binding information is copied.</param>
            <param name="DestinationBinding">Returns a pointer to the server binding handle that refers to the copied binding information.</param>
            <returns>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>RPC_S_OK</term>
            <term>The call succeeded.</term>
            </item>
            <item>
            <term>RPC_S_INVALID_BINDING</term>
            <term>The binding handle was invalid.</term>
            </item>
            <item>
            <term>RPC_S_WRONG_KIND_OF_BINDING</term>
            <term>This was the wrong kind of binding for the operation.</term>
            </item>
            </list>
            <para><c>Note</c> For a list of valid error codes, see RPC Return Values.</para>
            </returns>
            <remarks>
            <para>
            The <c>RpcBindingCopy</c> function copies the server-binding information referenced by the SourceBinding parameter.
            <c>RpcBindingCopy</c> uses the DestinationBinding parameter to return a new server binding handle for the copied binding
            information. <c>RpcBindingCopy</c> also copies the authentication information from the SourceBinding parameter to the
            DestinationBinding parameter.
            </para>
            <para>
            An application uses <c>RpcBindingCopy</c> when it wants to prevent a change being made to binding information by one thread from
            affecting the binding information used by other threads.
            </para>
            <para>
            Once an application calls <c>RpcBindingCopy</c>, operations performed on the SourceBinding binding handle do not affect the
            binding information referenced by the DestinationBinding binding handle. Similarly, operations performed on the
            DestinationBinding binding handle do not affect the binding information referenced by the SourceBinding binding handle.
            </para>
            <para>
            If an application wants one thread's changes to binding information to affect the binding information used by other threads, the
            application should share a single binding handle across the threads. In this case, the application is responsible for
            binding-handle concurrency control.
            </para>
            <para>
            When an application is finished using the binding handle specified by the DestinationBinding parameter, the application should
            call the RpcBindingFree function to release the memory used by the DestinationBinding binding handle and its referenced binding information.
            </para>
            <para><c>Note</c> Microsoft RPC supports <c>RpcBindingCopy</c> only in client applications, not in server applications.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Rpc.RpcBindingCreate(Vanara.PInvoke.Rpc.RPC_BINDING_HANDLE_TEMPLATE_V1@,Vanara.PInvoke.Rpc.RPC_BINDING_HANDLE_SECURITY_V1@,Vanara.PInvoke.Rpc.RPC_BINDING_HANDLE_OPTIONS_V1@,Vanara.PInvoke.Rpc.SafeRPC_BINDING_HANDLE@)">
            <summary>The <c>RpcBindingCreate</c> function creates a new fast RPC binding handle based on a supplied template.</summary>
            <param name="Template">
            RPC_BINDING_HANDLE_TEMPLATE structure that describes the binding handle to be created by this call. This data may be overwritten
            during the call, so the API does not maintain a reference to this data. The caller must free the memory used by this structure
            when the API returns.
            </param>
            <param name="Security">
            <para>
            RPC_BINDING_HANDLE_SECURITY structure that describes the security options for this binding handle. This data may be overwritten
            during the call, so the API does not maintain a reference to this data. The caller must free the memory used by this structure
            when the API returns.
            </para>
            <para>
            This parameter is optional. If this parameter is set to <c>NULL</c>, the default security settings for
            RPC_BINDING_HANDLE_SECURITY will be used.
            </para>
            </param>
            <param name="Options">
            <para>
            RPC_BINDING_HANDLE_OPTIONS structure that describes additional options for the binding handle. This data may be overwritten
            during the call, so the API does not maintain a reference to this data. The caller must free the memory used by this structure
            when the API returns.
            </para>
            <para>
            This parameter is optional. If this parameter is set to <c>NULL</c>, the default options for RPC_BINDING_HANDLE_OPTIONS will be used.
            </para>
            </param>
            <param name="Binding">
            RPC_BINDING_HANDLE structure that contains the newly-created binding handle. If this function did not return RPC_S_OK, then the
            contents of this structure are undefined. For non-local RPC calls, this handle must be passed to RpcBindingBind.
            </param>
            <returns>
            <para>
            This function returns RPC_S_OK on success; otherwise, an RPC_S_* error code is returned. For information on these error codes,
            see RPC Return Values.
            </para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>RPC_S_OK</term>
            <term>The binding handle was successfully created.</term>
            </item>
            <item>
            <term>RPC_S_CANNOT_SUPPORT</term>
            <term>An obsolete feature of RPC was requested for this binding handle.</term>
            </item>
            </list>
            <para><c>Note</c> For a list of valid error codes, see RPC Return Values.</para>
            </returns>
            <remarks>
            <para>The RPC binding handle returned by this API can be used with any other functions that accepts a binding handle as a parameter.</para>
            <para>
            However, before any calls can be made on the binding handle, RpcBindingBind must be called to make the binding handle available
            for remote calls. The <c>RpcBindingCreate</c> API does not touch the network or attempt to communicate with the RPC server --
            rather, it simply builds an internal data structure based on the values supplied in the template. A successful return does not
            indicate that the RPC server is available, accessible, or correctly specified.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Rpc.RpcBindingCreate(Vanara.PInvoke.Rpc.RPC_BINDING_HANDLE_TEMPLATE_V1@,System.IntPtr,System.IntPtr,Vanara.PInvoke.Rpc.SafeRPC_BINDING_HANDLE@)">
            <summary>The <c>RpcBindingCreate</c> function creates a new fast RPC binding handle based on a supplied template.</summary>
            <param name="Template">
            RPC_BINDING_HANDLE_TEMPLATE structure that describes the binding handle to be created by this call. This data may be overwritten
            during the call, so the API does not maintain a reference to this data. The caller must free the memory used by this structure
            when the API returns.
            </param>
            <param name="Security">
            <para>
            RPC_BINDING_HANDLE_SECURITY structure that describes the security options for this binding handle. This data may be overwritten
            during the call, so the API does not maintain a reference to this data. The caller must free the memory used by this structure
            when the API returns.
            </para>
            <para>
            This parameter is optional. If this parameter is set to <c>NULL</c>, the default security settings for
            RPC_BINDING_HANDLE_SECURITY will be used.
            </para>
            </param>
            <param name="Options">
            <para>
            RPC_BINDING_HANDLE_OPTIONS structure that describes additional options for the binding handle. This data may be overwritten
            during the call, so the API does not maintain a reference to this data. The caller must free the memory used by this structure
            when the API returns.
            </para>
            <para>
            This parameter is optional. If this parameter is set to <c>NULL</c>, the default options for RPC_BINDING_HANDLE_OPTIONS will be used.
            </para>
            </param>
            <param name="Binding">
            RPC_BINDING_HANDLE structure that contains the newly-created binding handle. If this function did not return RPC_S_OK, then the
            contents of this structure are undefined. For non-local RPC calls, this handle must be passed to RpcBindingBind.
            </param>
            <returns>
            <para>
            This function returns RPC_S_OK on success; otherwise, an RPC_S_* error code is returned. For information on these error codes,
            see RPC Return Values.
            </para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>RPC_S_OK</term>
            <term>The binding handle was successfully created.</term>
            </item>
            <item>
            <term>RPC_S_CANNOT_SUPPORT</term>
            <term>An obsolete feature of RPC was requested for this binding handle.</term>
            </item>
            </list>
            <para><c>Note</c> For a list of valid error codes, see RPC Return Values.</para>
            </returns>
            <remarks>
            <para>The RPC binding handle returned by this API can be used with any other functions that accepts a binding handle as a parameter.</para>
            <para>
            However, before any calls can be made on the binding handle, RpcBindingBind must be called to make the binding handle available
            for remote calls. The <c>RpcBindingCreate</c> API does not touch the network or attempt to communicate with the RPC server --
            rather, it simply builds an internal data structure based on the values supplied in the template. A successful return does not
            indicate that the RPC server is available, accessible, or correctly specified.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Rpc.RpcBindingFree(Vanara.PInvoke.Rpc.RPC_BINDING_HANDLE@)">
            <summary>The <c>RpcBindingFree</c> function releases binding-handle resources.</summary>
            <param name="Binding">Pointer to the server binding to be freed.</param>
            <returns>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>RPC_S_OK</term>
            <term>The call succeeded.</term>
            </item>
            <item>
            <term>RPC_S_INVALID_BINDING</term>
            <term>The binding handle was invalid.</term>
            </item>
            <item>
            <term>RPC_S_WRONG_KIND_OF_BINDING</term>
            <term>This was the wrong kind of binding for the operation.</term>
            </item>
            </list>
            <para><c>Note</c> For a list of valid error codes, see RPC Return Values.</para>
            </returns>
            <remarks>
            <para>
            The <c>RpcBindingFree</c> function releases memory used by a server binding handle. Referenced binding information that was
            dynamically created during program execution is released as well. An application calls the <c>RpcBindingFree</c> function when
            it is finished using the binding handle. RPC binding handles must not be freed until all calls using the handle have completed;
            failure to do so will cause unpredictable results.
            </para>
            <para>Binding handles are dynamically created by calling the following functions:</para>
            <list type="bullet">
            <item>
            <term>RpcBindingCopy</term>
            </item>
            <item>
            <term>RpcBindingFromStringBinding</term>
            </item>
            <item>
            <term>RpcBindingServerFromClient</term>
            </item>
            <item>
            <term>RpcServerInqBindings</term>
            </item>
            <item>
            <term>RpcNsBindingImportNext</term>
            </item>
            <item>
            <term>RpcNsBindingSelect</term>
            </item>
            </list>
            <para>If the operation successfully frees the binding, the Binding parameter returns a value of <c>NULL</c>.</para>
            <para>
            <c>Note</c> Microsoft RPC supports <c>RpcBindingFree</c> only in client applications, or in server applications for binding
            handles generated with RpcBindingServerFromClient.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Rpc.RpcBindingFree(Vanara.PInvoke.Rpc.SafeRPC_BINDING_HANDLE)">
            <summary>The <c>RpcBindingFree</c> function releases binding-handle resources.</summary>
            <param name="Binding">Pointer to the server binding to be freed.</param>
            <returns>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>RPC_S_OK</term>
            <term>The call succeeded.</term>
            </item>
            <item>
            <term>RPC_S_INVALID_BINDING</term>
            <term>The binding handle was invalid.</term>
            </item>
            <item>
            <term>RPC_S_WRONG_KIND_OF_BINDING</term>
            <term>This was the wrong kind of binding for the operation.</term>
            </item>
            </list>
            <para><c>Note</c> For a list of valid error codes, see RPC Return Values.</para>
            </returns>
            <remarks>
            <para>
            The <c>RpcBindingFree</c> function releases memory used by a server binding handle. Referenced binding information that was
            dynamically created during program execution is released as well. An application calls the <c>RpcBindingFree</c> function when
            it is finished using the binding handle. RPC binding handles must not be freed until all calls using the handle have completed;
            failure to do so will cause unpredictable results.
            </para>
            <para>Binding handles are dynamically created by calling the following functions:</para>
            <list type="bullet">
            <item>
            <term>RpcBindingCopy</term>
            </item>
            <item>
            <term>RpcBindingFromStringBinding</term>
            </item>
            <item>
            <term>RpcBindingServerFromClient</term>
            </item>
            <item>
            <term>RpcServerInqBindings</term>
            </item>
            <item>
            <term>RpcNsBindingImportNext</term>
            </item>
            <item>
            <term>RpcNsBindingSelect</term>
            </item>
            </list>
            <para>If the operation successfully frees the binding, the Binding parameter returns a value of <c>NULL</c>.</para>
            <para>
            <c>Note</c> Microsoft RPC supports <c>RpcBindingFree</c> only in client applications, or in server applications for binding
            handles generated with RpcBindingServerFromClient.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Rpc.RpcBindingFromStringBinding(System.String,Vanara.PInvoke.Rpc.SafeRPC_BINDING_HANDLE@)">
            <summary>
            The <c>RpcBindingFromStringBinding</c> function returns a binding handle from a string representation of a binding handle.
            </summary>
            <param name="StringBinding">Pointer to a string representation of a binding handle.</param>
            <param name="Binding">Returns a pointer to the server binding handle.</param>
            <returns>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>RPC_S_OK</term>
            <term>The call succeeded.</term>
            </item>
            <item>
            <term>RPC_S_INVALID_STRING_BINDING</term>
            <term>The string binding is not valid.</term>
            </item>
            <item>
            <term>RPC_S_PROTSEQ_NOT_SUPPORTED</term>
            <term>Protocol sequence not supported on this host.</term>
            </item>
            <item>
            <term>RPC_S_INVALID_RPC_PROTSEQ</term>
            <term>The protocol sequence is not valid.</term>
            </item>
            <item>
            <term>RPC_S_INVALID_ENDPOINT_FORMAT</term>
            <term>The endpoint format is not valid.</term>
            </item>
            <item>
            <term>RPC_S_STRING_TOO_LONG</term>
            <term>String too long.</term>
            </item>
            <item>
            <term>RPC_S_INVALID_NET_ADDR</term>
            <term>The network address is not valid.</term>
            </item>
            <item>
            <term>RPC_S_INVALID_ARG</term>
            <term>The argument was not valid.</term>
            </item>
            <item>
            <term>RPC_S_INVALID_NAF_ID</term>
            <term>The network address family identifier is not valid.</term>
            </item>
            </list>
            <para><c>Note</c> For a list of valid error codes, see RPC Return Values.</para>
            </returns>
            <remarks>
            <para>
            The <c>RpcBindingFromStringBinding</c> function creates a server binding handle from a string representation of a binding
            handle. The StringBinding parameter does not have to contain an object UUID. In this case, the returned binding contains a nil
            UUID. If the provided StringBinding parameter does not contain an endpoint field, the returned Binding parameter is a
            partially-bound binding handle. If the provided StringBinding parameter contains an endpoint field, the endpoint is considered
            to be a well-known endpoint. If the provided StringBinding parameter does not contain a host address field, the returned Binding
            parameter references the local host.
            </para>
            <para>
            An application creates a string binding by calling the RpcStringBindingCompose function or by providing a character-string
            constant. The creation of a string binding by this method does not involve contact with the server. Success or failure of the
            API will not indicate server availability.
            </para>
            <para>
            When an application is finished using the Binding parameter, the application should call the RpcBindingFree function to release
            the memory used by the binding handle.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Rpc.RpcBindingInqAuthClient(Vanara.PInvoke.Rpc.RPC_BINDING_HANDLE,Vanara.PInvoke.Rpc.RPC_AUTHZ_HANDLE@,System.String@,Vanara.PInvoke.Rpc.RPC_C_AUTHN_LEVEL@,Vanara.PInvoke.Rpc.RPC_C_AUTHN@,Vanara.PInvoke.Rpc.RPC_C_AUTHZ@)">
            <summary>
            A server application calls the <c>RpcBindingInqAuthClient</c> function to obtain the principal name or privilege attributes of
            the authenticated client that made the remote procedure call.
            </summary>
            <param name="ClientBinding">
            Client binding handle of the client that made the remote procedure call. This value can be zero. See Remarks.
            </param>
            <param name="Privs">
            <para>
            Returns a pointer to a handle to the privileged information for the client application that made the remote procedure call on
            the ClientBinding binding handle. For <c>ncalrpc</c> calls, Privs contains a string with the client's principal name.
            </para>
            <para>
            The data referenced by this parameter is read-only and should not be modified by the server application. If the server wants to
            preserve any of the returned data, the server must copy the data into server-allocated memory.
            </para>
            <para>
            The data that the Privs parameter points to comes directly from the SSP. Therefore, the format of the data is specific to the
            SSP. For more information on SSPs, see Security Support Providers (SSPs).
            </para>
            </param>
            <param name="ServerPrincName">
            <para>
            Returns a pointer to a pointer to the server principal name specified by the server application that called the
            RpcServerRegisterAuthInfo function. The content of the returned name and its syntax are defined by the authentication service in
            use. For the SCHANNEL SSP, the principal name is in Microsoft-standard (msstd) format. For further information on msstd format,
            see Principal Names.
            </para>
            <para>
            Specify a null value to prevent <c>RpcBindingInqAuthClient</c> from returning the ServerPrincName parameter. In this case, the
            application does not call the RpcStringFree function.
            </para>
            </param>
            <param name="AuthnLevel">
            <para>
            Returns a pointer set to the level of authentication requested by the client application that made the remote procedure call on
            the ClientBinding binding handle.
            </para>
            <para>Specify a null value to prevent <c>RpcBindingInqAuthClient</c> from returning the AuthnLevel parameter.</para>
            </param>
            <param name="AuthnSvc">
            <para>
            Returns a pointer set to the authentication service requested by the client application that made the remote procedure call on
            the ClientBinding binding handle. For a list of the RPC-supported authentication levels, see Authentication-Level Constants.
            </para>
            <para>Specify a null value to prevent <c>RpcBindingInqAuthClient</c> from returning the AuthnSvc parameter.</para>
            </param>
            <param name="AuthzSvc">
            <para>
            Returns a pointer set to the authorization service requested by the client application that made the remote procedure call on
            the ClientBinding binding handle.
            </para>
            <para>
            Specify a null value to prevent <c>RpcBindingInqAuthClient</c> from returning the AuthzSvc parameter. This parameter is not used
            by the RPC_C_AUTHN_WINNT authentication service. The returned value will always be RPC_C_AUTHZ_NONE.
            </para>
            </param>
            <returns>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>RPC_S_OK</term>
            <term>The call succeeded.</term>
            </item>
            <item>
            <term>RPC_S_INVALID_BINDING</term>
            <term>The binding handle was invalid.</term>
            </item>
            <item>
            <term>RPC_S_WRONG_KIND_OF_BINDING</term>
            <term>This was the wrong kind of binding for the operation.</term>
            </item>
            <item>
            <term>RPC_S_BINDING_HAS_NO_AUTH</term>
            <term>Binding has no authentication information.</term>
            </item>
            </list>
            <para><c>Note</c> For a list of valid error codes, see RPC Return Values.</para>
            </returns>
            <remarks>
            <para>
            A server application calls the <c>RpcBindingInqAuthClient</c> function to obtain the principal name or privilege attributes of
            the authenticated client that made the remote procedure call. In addition, <c>RpcBindingInqAuthClient</c> returns the
            authentication service, authentication level, and server principal name specified by the client. The server can use the returned
            data for authorization purposes.
            </para>
            <para>
            The RPC run-time library allocates memory for the returned ServerPrincName parameter. The application is responsible for calling
            the RpcStringFree function for the returned argument string.
            </para>
            <para>
            For synchronous RPC calls, the server application can use zero as the value for the ClientBinding parameter. Using zero
            retrieves the authentication and authorization information from the currently executing remote procedure call.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Rpc.RpcBindingInqAuthClientEx(Vanara.PInvoke.Rpc.RPC_BINDING_HANDLE,Vanara.PInvoke.Rpc.RPC_AUTHZ_HANDLE@,System.String@,Vanara.PInvoke.Rpc.RPC_C_AUTHN_LEVEL@,Vanara.PInvoke.Rpc.RPC_C_AUTHN@,Vanara.PInvoke.Rpc.RPC_C_AUTHZ@,System.UInt32)">
            <summary>
            A server application calls the <c>RpcBindingInqAuthClientEx</c> function to obtain extended information about the client program
            that made the remote procedure call.
            </summary>
            <param name="ClientBinding">
            Client binding handle of the client that made the remote procedure call. This value can be zero. See Remarks.
            </param>
            <param name="Privs">
            <para>
            Returns a pointer to a handle to the privileged information for the client application that made the remote procedure call on
            the ClientBinding binding handle. For <c>ncalrpc</c> calls, Privs contains a string with the client's principal name.
            </para>
            <para>
            The server application must cast the Privs parameter to the data type specified by the AuthnSvc parameter. The data referenced
            by this argument is read-only and should not be modified by the server application. If the server wants to preserve any of the
            returned data, the server must copy the data into server-allocated memory.
            </para>
            <para>For more information on SSPs, see Security Support Providers (SSPs).</para>
            </param>
            <param name="ServerPrincName">
            <para>
            Returns a pointer to a pointer to the server principal name specified by the server application that called the
            RpcServerRegisterAuthInfo function. The content of the returned name and its syntax are defined by the authentication service in
            use. For the SCHANNEL SSP, the principal name is in msstd format. For further information on msstd format, see Principal Names.
            </para>
            <para>
            Specify a null value to prevent <c>RpcBindingInqAuthClientEx</c> from returning the ServerPrincName parameter. In this case, the
            application does not call the RpcStringFree function.
            </para>
            </param>
            <param name="AuthnLevel">
            <para>
            Returns a pointer set to the level of authentication requested by the client application that made the remote procedure call on
            the ClientBinding binding handle. For a list of the RPC-supported authentication levels, see Authentication-Level Constants.
            </para>
            <para>Specify a null value to prevent <c>RpcBindingInqAuthClientEx</c> from returning the AuthnLevel parameter.</para>
            </param>
            <param name="AuthnSvc">
            <para>
            Returns a pointer set to the authentication service requested by the client application that made the remote procedure call on
            the ClientBinding binding handle. For a list of the RPC-supported authentication services, see Authentication-Service Constants.
            </para>
            <para>Specify a null value to prevent <c>RpcBindingInqAuthClientEx</c> from returning the AuthnSvc parameter.</para>
            <para>
            <c>Note</c> AuthnSvc corresponds to the <c>SECURITY_STATUS</c> returned by QueryContextAttributes on each certificate-based SSP
            for <c>SECPKG_ATTR_DCE_INFO</c> or <c>SECPKG_ATTR_REMOTE_CERT_CONTEXT</c>.
            </para>
            </param>
            <param name="AuthzSvc">
            <para>
            Returns a pointer set to the authorization service requested by the client application that made the remote procedure call on
            the Binding binding handle. For a list of the RPC-supported authorization services, see Authorization-Service Constants .
            </para>
            <para>
            Specify a null value to prevent <c>RpcBindingInqAuthClientEx</c> from returning the AuthzSvc parameter. This parameter is not
            used by the RPC_C_AUTHN_WINNT authentication service. The returned value will always be RPC_S_AUTHZ_NONE.
            </para>
            </param>
            <param name="Flags">
            <para>Controls the format of the principal name. This parameter can be set to the following value.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>RPC_C_FULL_CERT_CHAIN</term>
            <term>Passes back the principal name in fullsic format.</term>
            </item>
            </list>
            </param>
            <returns>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>RPC_S_OK</term>
            <term>The call succeeded.</term>
            </item>
            <item>
            <term>RPC_S_INVALID_BINDING</term>
            <term>The binding handle was invalid.</term>
            </item>
            <item>
            <term>RPC_S_WRONG_KIND_OF_BINDING</term>
            <term>This was the wrong kind of binding for the operation.</term>
            </item>
            <item>
            <term>RPC_S_BINDING_HAS_NO_AUTH</term>
            <term>Binding has no authentication information.</term>
            </item>
            </list>
            <para><c>Note</c> For a list of valid error codes, see RPC Return Values.</para>
            </returns>
            <remarks>
            <para>
            A server application calls the <c>RpcBindingInqAuthClientEx</c> function to obtain the principal name or privilege attributes of
            the authenticated client that made the remote procedure call. In addition, <c>RpcBindingInqAuthClientEx</c> returns the
            authentication service, authentication level, and server principal name specified by the client. The server can use the returned
            data for authorization purposes.
            </para>
            <para>
            The RPC run-time library allocates memory for the returned ServerPrincName parameter. The application is responsible for calling
            the RpcStringFree function for the returned argument string.
            </para>
            <para>
            For synchronous RPC calls, the server application can use zero as the value for the ClientBinding parameter. Using zero
            retrieves the authentication and authorization information from the currently executing remote procedure call.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Rpc.RpcBindingInqAuthInfo(Vanara.PInvoke.Rpc.RPC_BINDING_HANDLE,System.String@,Vanara.PInvoke.Rpc.RPC_C_AUTHN_LEVEL@,Vanara.PInvoke.Rpc.RPC_C_AUTHN@,Vanara.PInvoke.Rpc.RPC_AUTH_IDENTITY_HANDLE@,Vanara.PInvoke.Rpc.RPC_C_AUTHZ@)">
            <summary>The <c>RpcBindingInqAuthInfo</c> function returns authentication and authorization information from a binding handle.</summary>
            <param name="Binding">Server binding handle from which authentication and authorization information is returned.</param>
            <param name="ServerPrincName">
            <para>
            Returns a pointer to a pointer to the expected principal name of the server referenced in Binding. The content of the returned
            name and its syntax are defined by the authentication service in use.
            </para>
            <para>
            Specify a null value to prevent <c>RpcBindingInqAuthInfo</c> from returning the ServerPrincName parameter. In this case, the
            application does not call the RpcStringFree function.
            </para>
            </param>
            <param name="AuthnLevel">
            <para>Returns a pointer set to the level of authentication used for remote procedure calls made using Binding. See Note.</para>
            <para>Specify a null value to prevent the function from returning the AuthnLevel parameter.</para>
            <para>
            The level returned in the AuthnLevel parameter may be different from the level specified when the client called the
            RpcBindingSetAuthInfo function. This discrepancy occurs when the RPC run-time library does not support the authentication level
            specified by the client and automatically upgrades to the next higher authentication level.
            </para>
            </param>
            <param name="AuthnSvc">
            <para>Returns a pointer set to the authentication service specified for remote procedure calls made using Binding. See Note.</para>
            <para>Specify a null value to prevent <c>RpcBindingInqAuthInfo</c> from returning the AuthnSvc parameter.</para>
            </param>
            <param name="AuthIdentity">
            <para>
            Returns a pointer to a handle to the data structure that contains the client's authentication and authorization credentials
            specified for remote procedure calls made using Binding.
            </para>
            <para>Specify a null value to prevent <c>RpcBindingInqAuthInfo</c> from returning the AuthIdentity parameter.</para>
            </param>
            <param name="AuthzSvc">
            <para>
            Returns a pointer set to the authorization service requested by the client application that made the remote procedure call on
            Binding See Note.
            </para>
            <para>Specify a null value to prevent <c>RpcBindingInqAuthInfo</c> from returning the AuthzSvc parameter.</para>
            <para><c>Note</c> For a list of the RPC-supported authentication services, see Authentication-Service Constants.</para>
            </param>
            <returns>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>RPC_S_OK</term>
            <term>The call succeeded.</term>
            </item>
            <item>
            <term>RPC_S_INVALID_BINDING</term>
            <term>The binding handle was invalid.</term>
            </item>
            <item>
            <term>RPC_S_WRONG_KIND_OF_BINDING</term>
            <term>This was the wrong kind of binding for the operation.</term>
            </item>
            <item>
            <term>RPC_BINDING_HAS_NO_AUTH</term>
            <term>Binding has no authentication information.</term>
            </item>
            </list>
            <para><c>Note</c> For a list of valid error codes, see RPC Return Values.</para>
            </returns>
            <remarks>
            <para>
            A client application calls the <c>RpcBindingInqAuthInfo</c> function to view the authentication and authorization information
            associated with a server binding handle. A similar function, RpcBindingInqAuthInfoEx additionally provides security
            quality-of-service information on the binding handle.
            </para>
            <para>
            The RPC run-time library allocates memory for the returned ServerPrincName parameter. The application is responsible for calling
            the RpcStringFree function for that returned argument string.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Rpc.RpcBindingInqAuthInfoEx(Vanara.PInvoke.Rpc.RPC_BINDING_HANDLE,System.String@,Vanara.PInvoke.Rpc.RPC_C_AUTHN_LEVEL@,Vanara.PInvoke.Rpc.RPC_C_AUTHN@,Vanara.PInvoke.Rpc.RPC_AUTH_IDENTITY_HANDLE@,Vanara.PInvoke.Rpc.RPC_C_AUTHZ@,System.UInt32,Vanara.PInvoke.Rpc.RPC_SECURITY_QOS@)">
            <summary>
            The <c>RpcBindingInqAuthInfoEx</c> function returns authentication, authorization, and security quality-of-service information
            from a binding handle.
            </summary>
            <param name="Binding">Server binding handle from which authentication and authorization information is returned.</param>
            <param name="ServerPrincName">
            <para>
            Returns a pointer to a pointer to the expected principal name of the server referenced in Binding. The content of the returned
            name and its syntax are defined by the authentication service in use.
            </para>
            <para>
            Specify a null value to prevent <c>RpcBindingInqAuthInfoEx</c> from returning the ServerPrincName parameter. In this case, the
            application does not call the RpcStringFree function.
            </para>
            </param>
            <param name="AuthnLevel">
            <para>
            Returns a pointer set to the level of authentication used for remote procedure calls made using Binding. For a list of the
            RPC-supported authentication levels, see Authentication-Level Constants. Specify a null value to prevent the function from
            returning the AuthnLevel parameter.
            </para>
            <para>
            The level returned in the AuthnLevel parameter may be different from the level specified when the client called the
            RpcBindingSetAuthInfoEx function. This discrepancy happens when the RPC run-time library does not support the authentication
            level specified by the client and automatically upgrades to the next higher authentication level.
            </para>
            </param>
            <param name="AuthnSvc">
            <para>
            Returns a pointer set to the authentication service specified for remote procedure calls made using Binding. For a list of the
            RPC-supported authentication services, see Authentication-Service Constants.
            </para>
            <para>Specify a null value to prevent <c>RpcBindingInqAuthInfoEx</c> from returning the AuthnSvc parameter.</para>
            </param>
            <param name="AuthIdentity">
            <para>
            Returns a pointer to a handle to the data structure that contains the client's authentication and authorization credentials
            specified for remote procedure calls made using Binding.
            </para>
            <para>Specify a null value to prevent <c>RpcBindingInqAuthInfoEx</c> from returning the AuthIdentity parameter.</para>
            </param>
            <param name="AuthzSvc">
            <para>
            Returns a pointer set to the authorization service requested by the client application that made the remote procedure call on
            Binding. For a list of the RPC-supported authentication services, see Authentication-Service Constants.
            </para>
            <para>Specify a null value to prevent <c>RpcBindingInqAuthInfoEx</c> from returning the AuthzSvc parameter.</para>
            </param>
            <param name="RpcQosVersion">
            Passes value of current version (needed for forward compatibility if extensions are made to this function). Always set this
            parameter to RPC_C_SECURITY_QOS_VERSION.
            </param>
            <param name="SecurityQOS">Returns pointer to the RPC_SECURITY_QOS structure, which defines quality-of-service settings.</param>
            <returns>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>RPC_S_OK</term>
            <term>The call succeeded.</term>
            </item>
            <item>
            <term>RPC_S_INVALID_BINDING</term>
            <term>The binding handle was invalid.</term>
            </item>
            <item>
            <term>RPC_S_WRONG_KIND_OF_BINDING</term>
            <term>This was the wrong kind of binding for the operation.</term>
            </item>
            <item>
            <term>RPC_BINDING_HAS_NO_AUTH</term>
            <term>Binding has no authentication information.</term>
            </item>
            </list>
            <para><c>Note</c> For a list of valid error codes, see RPC Return Values.</para>
            </returns>
            <remarks>
            <para>
            A client application calls the <c>RpcBindingInqAuthInfoEx</c> function to view the authentication and authorization information
            associated with a server binding handle. This function provides the ability to inquire about the security quality of service on
            the binding handle. It is otherwise identical to RpcBindingInqAuthInfo.
            </para>
            <para>
            The RPC run-time library allocates memory for the returned ServerPrincName parameter. The application is responsible for calling
            the RpcStringFree function for that returned argument string.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Rpc.RpcBindingInqAuthInfoEx(Vanara.PInvoke.Rpc.RPC_BINDING_HANDLE,System.String@,Vanara.PInvoke.Rpc.RPC_C_AUTHN_LEVEL@,Vanara.PInvoke.Rpc.RPC_C_AUTHN@,Vanara.PInvoke.Rpc.RPC_AUTH_IDENTITY_HANDLE@,Vanara.PInvoke.Rpc.RPC_C_AUTHZ@,System.UInt32,System.IntPtr)">
            <summary>
            The <c>RpcBindingInqAuthInfoEx</c> function returns authentication, authorization, and security quality-of-service information
            from a binding handle.
            </summary>
            <param name="Binding">Server binding handle from which authentication and authorization information is returned.</param>
            <param name="ServerPrincName">
            <para>
            Returns a pointer to a pointer to the expected principal name of the server referenced in Binding. The content of the returned
            name and its syntax are defined by the authentication service in use.
            </para>
            <para>
            Specify a null value to prevent <c>RpcBindingInqAuthInfoEx</c> from returning the ServerPrincName parameter. In this case, the
            application does not call the RpcStringFree function.
            </para>
            </param>
            <param name="AuthnLevel">
            <para>
            Returns a pointer set to the level of authentication used for remote procedure calls made using Binding. For a list of the
            RPC-supported authentication levels, see Authentication-Level Constants. Specify a null value to prevent the function from
            returning the AuthnLevel parameter.
            </para>
            <para>
            The level returned in the AuthnLevel parameter may be different from the level specified when the client called the
            RpcBindingSetAuthInfoEx function. This discrepancy happens when the RPC run-time library does not support the authentication
            level specified by the client and automatically upgrades to the next higher authentication level.
            </para>
            </param>
            <param name="AuthnSvc">
            <para>
            Returns a pointer set to the authentication service specified for remote procedure calls made using Binding. For a list of the
            RPC-supported authentication services, see Authentication-Service Constants.
            </para>
            <para>Specify a null value to prevent <c>RpcBindingInqAuthInfoEx</c> from returning the AuthnSvc parameter.</para>
            </param>
            <param name="AuthIdentity">
            <para>
            Returns a pointer to a handle to the data structure that contains the client's authentication and authorization credentials
            specified for remote procedure calls made using Binding.
            </para>
            <para>Specify a null value to prevent <c>RpcBindingInqAuthInfoEx</c> from returning the AuthIdentity parameter.</para>
            </param>
            <param name="AuthzSvc">
            <para>
            Returns a pointer set to the authorization service requested by the client application that made the remote procedure call on
            Binding. For a list of the RPC-supported authentication services, see Authentication-Service Constants.
            </para>
            <para>Specify a null value to prevent <c>RpcBindingInqAuthInfoEx</c> from returning the AuthzSvc parameter.</para>
            </param>
            <param name="RpcQosVersion">
            Passes value of current version (needed for forward compatibility if extensions are made to this function). Always set this
            parameter to RPC_C_SECURITY_QOS_VERSION.
            </param>
            <param name="SecurityQOS">Returns pointer to the RPC_SECURITY_QOS structure, which defines quality-of-service settings.</param>
            <returns>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>RPC_S_OK</term>
            <term>The call succeeded.</term>
            </item>
            <item>
            <term>RPC_S_INVALID_BINDING</term>
            <term>The binding handle was invalid.</term>
            </item>
            <item>
            <term>RPC_S_WRONG_KIND_OF_BINDING</term>
            <term>This was the wrong kind of binding for the operation.</term>
            </item>
            <item>
            <term>RPC_BINDING_HAS_NO_AUTH</term>
            <term>Binding has no authentication information.</term>
            </item>
            </list>
            <para><c>Note</c> For a list of valid error codes, see RPC Return Values.</para>
            </returns>
            <remarks>
            <para>
            A client application calls the <c>RpcBindingInqAuthInfoEx</c> function to view the authentication and authorization information
            associated with a server binding handle. This function provides the ability to inquire about the security quality of service on
            the binding handle. It is otherwise identical to RpcBindingInqAuthInfo.
            </para>
            <para>
            The RPC run-time library allocates memory for the returned ServerPrincName parameter. The application is responsible for calling
            the RpcStringFree function for that returned argument string.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Rpc.RpcBindingInqObject(Vanara.PInvoke.Rpc.RPC_BINDING_HANDLE,System.Guid@)">
            <summary>The <c>RpcBindingInqObject</c> function returns the object UUID from a binding handle.</summary>
            <param name="Binding">Client or server binding handle.</param>
            <param name="ObjectUuid">
            Returns a pointer to the object UUID found in the Binding parameter. ObjectUuid is a unique identifier of an object to which a
            remote procedure call can be made.
            </param>
            <returns>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>RPC_S_OK</term>
            <term>The call succeeded.</term>
            </item>
            <item>
            <term>RPC_S_INVALID_BINDING</term>
            <term>The binding handle was invalid.</term>
            </item>
            </list>
            <para><c>Note</c> For a list of valid error codes, see RPC Return Values.</para>
            </returns>
            <remarks>
            An application calls the <c>RpcBindingInqObject</c> function to see the object UUID associated with a client or server binding handle.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Rpc.RpcBindingInqOption(Vanara.PInvoke.Rpc.RPC_BINDING_HANDLE,Vanara.PInvoke.Rpc.RPC_C_OPT,System.IntPtr@)">
            <summary>
            RPC client processes use <c>RpcBindingInqOption</c> to determine current values of the binding options for a given binding handle.
            </summary>
            <param name="hBinding">Server binding about which to determine binding-option values.</param>
            <param name="option">Binding handle property to inquire about.</param>
            <param name="pOptionValue">
            <para>Memory location to place the value for the specified Option</para>
            <para><c>Note</c> For a list of binding options and their possible values, see Binding Option Constants.</para>
            </param>
            <returns>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>RPC_S_OK</term>
            <term>The call succeeded.</term>
            </item>
            <item>
            <term>RPC_S_CANNOT_SUPPORT</term>
            <term>The function is not supported for either the operating system or the transport.</term>
            </item>
            </list>
            <para><c>Note</c> For a list of valid error codes, see RPC Return Values.</para>
            </returns>
            <remarks>
            Client processes call <c>RpcBindingInqOption</c> to determine the current settings of the binding handle options. To inquire
            about authentication settings clients call the RpcBindingInqAuthClient function. .
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Rpc.RpcBindingReset(Vanara.PInvoke.Rpc.RPC_BINDING_HANDLE)">
            <summary>
            The <c>RpcBindingReset</c> function resets a binding handle so that the host is specified but the server on that host is unspecified.
            </summary>
            <param name="Binding">Server binding handle to reset.</param>
            <returns>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>RPC_S_OK</term>
            <term>The call succeeded.</term>
            </item>
            <item>
            <term>RPC_S_INVALID_BINDING</term>
            <term>The binding handle was invalid.</term>
            </item>
            <item>
            <term>RPC_S_WRONG_KIND_OF_BINDING</term>
            <term>This was the wrong kind of binding for the operation.</term>
            </item>
            </list>
            <para><c>Note</c> For a list of valid error codes, see RPC Return Values.</para>
            </returns>
            <remarks>
            <para>
            A client calls the <c>RpcBindingReset</c> function to disassociate a particular server instance from the server binding handle
            specified in the Binding parameter. The <c>RpcBindingReset</c> function dissociates a server instance by removing the endpoint
            portion of the server address in the binding handle. The host remains unchanged in the binding handle. The result is a
            partially-bound server binding handle.
            </para>
            <para><c>RpcBindingReset</c> does not affect the Binding parameter's authentication information, if there is any.</para>
            <para>
            If a client is willing to be serviced by any compatible server instance on the host specified in the binding handle, the client
            calls the <c>RpcBindingReset</c> function before making a remote procedure call using the Binding binding handle. Clients must
            not call the <c>RpcBindingReset</c> function for binding handles on which calls are being executed.
            </para>
            <para>
            When the client makes the next remote procedure call using the reset (partially-bound) binding, the client's RPC run-time
            library uses a well-known endpoint from the client's interface specification, if any. Otherwise, the client's run-time library
            automatically communicates with the endpoint-mapping service on the specified remote host to obtain the endpoint of a compatible
            server from the endpoint-map database. If a compatible server is located, the RPC run-time library updates the binding with a
            new endpoint. If a compatible server is not found, the remote procedure call fails. For calls using a connection protocol
            (ncacn), the EPT_S_NOT_REGISTERED status code is returned to the client. For calls using a datagram protocol (ncadg), the
            RPC_S_COMM_FAILURE status code is returned to the client.
            </para>
            <para>
            Server applications should register all binding handles by calling RpcEpRegister and RpcEpRegisterNoReplace if the server wants
            to be available to clients that make a remote procedure call on a reset binding handle.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Rpc.RpcBindingServerFromClient(Vanara.PInvoke.Rpc.RPC_BINDING_HANDLE,Vanara.PInvoke.Rpc.SafeRPC_BINDING_HANDLE@)">
            <summary>
            An application calls <c>RpcBindingServerFromClient</c> to convert a client binding handle into a partially-bound server binding handle.
            </summary>
            <param name="ClientBinding">
            <para>
            Client binding handle to convert to a server binding handle. If a value of zero is specified, the server impersonates the client
            that is being served by this server thread.
            </para>
            <para><c>Note</c> This parameter cannot be <c>NULL</c> in Windows NT 4.0.</para>
            </param>
            <param name="ServerBinding">Returns a server binding handle.</param>
            <returns>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>RPC_S_OK</term>
            <term>The call succeeded.</term>
            </item>
            <item>
            <term>RPC_S_INVALID_BINDING</term>
            <term>The binding handle was invalid.</term>
            </item>
            <item>
            <term>RPC_S_WRONG_KIND_OF_BINDING</term>
            <term>This was the wrong kind of binding for the operation.</term>
            </item>
            <item>
            <term>RPC_S_CANNOT_SUPPORT</term>
            <term>Cannot determine the client's host. See Remarks for a list of supported protocol sequences.</term>
            </item>
            </list>
            <para><c>Note</c> For a list of valid error codes, see RPC Return Values.</para>
            </returns>
            <remarks>
            <para>The following protocol sequences support <c>RpcBindingServerFromClient</c>:</para>
            <list type="bullet">
            <item>
            <term>ncadg_ip_udp</term>
            </item>
            <item>
            <term>ncadg_ipx</term>
            </item>
            <item>
            <term>ncacn_ip_tcp</term>
            </item>
            <item>
            <term>ncacn_spx.</term>
            </item>
            <item>
            <term>ncacn_np (effective with Windows 2000)</term>
            </item>
            <item>
            <term>ncacn_http</term>
            </item>
            <item>
            <term>ncalrpc</term>
            </item>
            </list>
            <para>
            An application gets a client binding handle from the RPC run-time. When the remote procedure call arrives at a server, the
            run-time creates a client binding handle that contains information about the calling client. The run-time passes this handle to
            the server manager function as the first argument.
            </para>
            <para>Calling <c>RpcBindingServerFromClient</c> converts this client handle to a server handle that has these properties:</para>
            <list type="bullet">
            <item>
            <term>The server handle is a partially-bound handle. It contains a network address for the calling client, but lacks an endpoint.</term>
            </item>
            <item>
            <term>
            The server handle contains the same object UUID used by the calling client. This can be the nil UUID. For more information on
            how a client specifies an object UUID for a call, see RpcBindingsetObject, RpcNsBindingImportBegin, RpcNsBindingLookupBegin, and RpcBindingFromStringBinding.
            </term>
            </item>
            <item>
            <term>The server handle contains no authentication information.</term>
            </item>
            </list>
            <para>
            The server application must call RpcBindingFree to free the resources used by the server binding handle once it is no longer needed.
            </para>
            <para>
            <c>Note</c> To query a client's address, an application starts by calling the RpcBindingServerFromClient function to obtain a
            partially bound server binding handle. The server binding handle can be used to obtain a string binding by invoking
            RpcBindingToStringBinding. The server can then call RpcStringBindingParse to extract the client's network address from the
            string binding.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Rpc.RpcBindingSetAuthInfo(Vanara.PInvoke.Rpc.RPC_BINDING_HANDLE,System.String,Vanara.PInvoke.Rpc.RPC_C_AUTHN_LEVEL,Vanara.PInvoke.Rpc.RPC_C_AUTHN,Vanara.PInvoke.Rpc.RPC_AUTH_IDENTITY_HANDLE,Vanara.PInvoke.Rpc.RPC_C_AUTHZ)">
            <summary>The <c>RpcBindingSetAuthInfo</c> function sets a binding handle's authentication and authorization information.</summary>
            <param name="Binding">Server binding handle to which authentication and authorization information is to be applied.</param>
            <param name="ServerPrincName">
            <para>
            Pointer to the expected principal name of the server referenced by Binding. The content of the name and its syntax are defined
            by the authentication service in use.
            </para>
            <para>
            <c>Note</c> For the set of allowable target names for SSPs, please refer to the comments in the InitializeSecurityContext documentation.
            </para>
            </param>
            <param name="AuthnLevel">
            Level of authentication to be performed on remote procedure calls made using Binding. For a list of the RPC-supported
            authentication levels, see the list of Authentication-Level Constants.
            </param>
            <param name="AuthnSvc">
            <para>Authentication service to use. See Note.</para>
            <para>Specify RPC_C_AUTHN_NONE to turn off authentication for remote procedure calls made using Binding.</para>
            <para>
            If RPC_C_AUTHN_DEFAULT is specified, the RPC run-time library uses the RPC_C_AUTHN_WINNT authentication service for remote
            procedure calls made using Binding.
            </para>
            </param>
            <param name="AuthIdentity">
            <para>
            Handle to the structure containing the client's authentication and authorization credentials appropriate for the selected
            authentication and authorization service.When using the RPC_C_AUTHN_WINNT authentication service AuthIdentity should be a
            pointer to a SEC_WINNT_AUTH_IDENTITY structure (defined in Rpcdce.h). Kerberos and Negotiate authentication services also use
            the <c>SEC_WINNT_AUTH_IDENTITY</c> structure.
            </para>
            <para>
            When you select the RPC_C_AUTHN_GSS_SCHANNEL authentication service, the AuthIdentity parameter should be a pointer to an
            <c>SCHANNEL_CRED</c> structure (defined in Schannel.h). Specify a null value to use the security login context for the current
            address space. Pass the value RPC_C_NO_CREDENTIALS to use an anonymous log-in context.
            </para>
            <para>
            <c>Note</c> When selecting the RPC_C_AUTHN_GSS_SCHANNEL authentication service, the AuthIdentity parameter may also be a pointer
            to a <c>SCH_CRED</c> structure. However, in Windows XP and later releases of Windows, the only acceptable structure to be passed
            as the AuthIdentity parameter for the RPC_C_AUTHN_GSS_SCHANNEL authentication service is the <c>SCHANNEL_CRED</c> structure.
            </para>
            </param>
            <param name="AuthzSvc">
            <para>Authorization service implemented by the server for the interface of interest. See Note.</para>
            <para>
            The validity and trustworthiness of authorization data, like any application data, depends on the authentication service and
            authentication level selected. This parameter is ignored when using the RPC_C_AUTHN_WINNT authentication service.
            </para>
            <para><c>Note</c> For more information, see Authentication-Service Constants.</para>
            </param>
            <returns>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>RPC_S_OK</term>
            <term>The call succeeded.</term>
            </item>
            <item>
            <term>RPC_S_INVALID_BINDING</term>
            <term>The binding handle was invalid.</term>
            </item>
            <item>
            <term>RPC_S_WRONG_KIND_OF_BINDING</term>
            <term>This was the wrong kind of binding for the operation.</term>
            </item>
            <item>
            <term>RPC_S_UNKNOWN_AUTHN_SERVICE</term>
            <term>Unknown authentication service.</term>
            </item>
            </list>
            <para><c>Note</c> For a list of valid error codes, see RPC Return Values.</para>
            </returns>
            <remarks>
            <para>
            A client application calls the <c>RpcBindingSetAuthInfo</c> function to set up a server binding handle for making authenticated
            remote procedure calls. A client is not required to call this function.
            </para>
            <para>
            Unless a client calls <c>RpcBindingSetAuthInfo</c>, no remote procedure calls on the Binding binding handle are authenticated. A
            server can call RpcBindingInqAuthClient from within a remote procedure call to determine whether that call has been authenticated.
            </para>
            <para>
            The <c>RpcBindingSetAuthInfo</c> function takes a snapshot of the credentials. Therefore, the memory dedicated to the
            AuthIdentity parameter can be freed before the binding handle.
            </para>
            <para>
            Due to varying requirements of different versions of Microsoft RPC, Microsoft recommends that your application maintain a
            pointer to the AuthIdentity parameter for as long as the binding handle exists. Doing so increases the application's portability.
            </para>
            <para>
            <c>Windows Server 2003 with SP1 and Windows XP with SP2:</c> For Windows XP SP2 and Windows Server 2003 SP1, the pointer to the
            AuthIdentity parameter need not be maintained for the life of the binding handle. This pointer must only be maintained if
            subsequent calls to RpcBindingInqAuthInfo or RpcBindingInqAuthInfoEx are made.
            </para>
            <para>
            <c>Note</c> The <c>RpcBindingSetAuthInfo</c> function must not be called on a binding handle while an RPC call on the same
            handle is in progress. Doing so produces undefined results.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Rpc.RpcBindingSetAuthInfoEx(Vanara.PInvoke.Rpc.RPC_BINDING_HANDLE,System.String,Vanara.PInvoke.Rpc.RPC_C_AUTHN_LEVEL,Vanara.PInvoke.Rpc.RPC_C_AUTHN,Vanara.PInvoke.Rpc.RPC_AUTH_IDENTITY_HANDLE,Vanara.PInvoke.Rpc.RPC_C_AUTHZ,Vanara.PInvoke.Rpc.RPC_SECURITY_QOS@)">
            <summary>
            The <c>RpcBindingSetAuthInfoEx</c> function sets a binding handle's authentication, authorization, and security
            quality-of-service information.
            </summary>
            <param name="Binding">Server binding handle into which authentication and authorization information is set.</param>
            <param name="ServerPrincName">
            <para>
            Pointer to the expected principal name of the server referenced by Binding. The content of the name and its syntax are defined
            by the authentication service in use.
            </para>
            <para>
            <c>Note</c> For the set of allowable target names for SSPs, please refer to the comments in the InitializeSecurityContext documentation.
            </para>
            </param>
            <param name="AuthnLevel">
            Level of authentication to be performed on remote procedure calls made using Binding. For a list of the RPC-supported
            authentication levels, see Authentication-Level Constants.
            </param>
            <param name="AuthnSvc">
            <para>Authentication service to use.</para>
            <para>Specify RPC_C_AUTHN_NONE to turn off authentication for remote procedure calls made using Binding.</para>
            <para>
            If RPC_C_AUTHN_DEFAULT is specified, the RPC run-time library uses the RPC_C_AUTHN_WINNT authentication service for remote
            procedure calls made using Binding.
            </para>
            </param>
            <param name="AuthIdentity">
            <para>
            Handle for the structure that contains the client's authentication and authorization credentials appropriate for the selected
            authentication and authorization service.
            </para>
            <para>
            When using the RPC_C_AUTHN_WINNTauthentication service AuthIdentity should be a pointer to a SEC_WINNT_AUTH_IDENTITY structure
            (defined in Rpcdce.h). Kerberos and Negotiate authentication services also use the <c>SEC_WINNT_AUTH_IDENTITY</c> structure.
            </para>
            <para>
            Specify a null value to use the security login context for the current address space. Pass the value RPC_C_NO_CREDENTIALS to use
            an anonymous log-in context. Note that RPC_C_NO_CREDENTIALS is only valid if RPC_C_AUTHN_GSS_SCHANNEL is selected as the
            authentication service.
            </para>
            </param>
            <param name="AuthzSvc">
            Authorization service implemented by the server for the interface of interest. The validity and trustworthiness of authorization
            data, like any application data, depends on the authentication service and authentication level selected. This parameter is
            ignored when using the RPC_C_AUTHN_WINNT authentication service. See Note.
            </param>
            <param name="SecurityQos">TBD</param>
            <returns>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>RPC_S_OK</term>
            <term>The call succeeded.</term>
            </item>
            <item>
            <term>RPC_S_INVALID_BINDING</term>
            <term>The binding handle was invalid.</term>
            </item>
            <item>
            <term>RPC_S_WRONG_KIND_OF_BINDING</term>
            <term>This was the wrong kind of binding for the operation.</term>
            </item>
            <item>
            <term>RPC_S_UNKNOWN_AUTHN_SERVICE</term>
            <term>Unknown authentication service.</term>
            </item>
            </list>
            <para><c>Note</c> For a list of valid error codes, see RPC Return Values.</para>
            </returns>
            <remarks>
            <para>
            A client application calls the <c>RpcBindingSetAuthInfoEx</c> function to set up a server binding handle for making
            authenticated remote procedure calls. This function provides the capability to set security quality-of-service information on
            the binding handle. It is otherwise identical to RpcBindingSetAuthInfo.
            </para>
            <para>
            Unless a client calls <c>RpcBindingSetAuthInfoEx</c>, all remote procedure calls on Binding are unauthenticated. A client is not
            required to call this function.
            </para>
            <para>
            The <c>RpcBindingSetAuthInfoEx</c> function takes a snapshot of the credentials. Therefore, the memory dedicated to the
            AuthIdentity parameter can be freed before the binding handle. The exception to this is when your application uses
            <c>RpcBindingSetAuthInfoEx</c> with RPC_C_QOS_IDENTITY_DYNAMIC and also specifies a non- <c>NULL</c> value for AuthIdentity.
            </para>
            <para>
            <c>Note</c> The RpcBindingSetAuthInfo function must not be called on a binding handle while an RPC call on the same handle is in
            progress. Doing so produces undefined results.
            </para>
            <para>
            Due to the varying requirements of different versions of Microsoft RPC, Microsoft recommends that an application maintain a
            pointer to the AuthIdentity parameter for as long as the binding handle exists. Doing so increases the applications portability.
            </para>
            <para>
            <c>Windows Server 2003 with SP1 and Windows XP with SP2:</c> For Windows XP SP2 and Windows Server 2003 SP1, the pointer to the
            AuthIdentity parameter need not be maintained for the life of the binding handle. This pointer must only be maintained if
            subsequent calls to RpcBindingInqAuthInfo or RpcBindingInqAuthInfoEx are made.
            </para>
            <para>
            <c>Note</c> The <c>ncalrpc</c> protocol sequence supports only RPC_C_AUTHN_WINNT, but does support mutual authentication; supply
            an SPN and request mutual authentication through the SecurityQOS parameter to achieve this.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Rpc.RpcBindingSetAuthInfoEx(Vanara.PInvoke.Rpc.RPC_BINDING_HANDLE,System.String,Vanara.PInvoke.Rpc.RPC_C_AUTHN_LEVEL,Vanara.PInvoke.Rpc.RPC_C_AUTHN,Vanara.PInvoke.Rpc.RPC_AUTH_IDENTITY_HANDLE,Vanara.PInvoke.Rpc.RPC_C_AUTHZ,System.IntPtr)">
            <summary>
            The <c>RpcBindingSetAuthInfoEx</c> function sets a binding handle's authentication, authorization, and security
            quality-of-service information.
            </summary>
            <param name="Binding">Server binding handle into which authentication and authorization information is set.</param>
            <param name="ServerPrincName">
            <para>
            Pointer to the expected principal name of the server referenced by Binding. The content of the name and its syntax are defined
            by the authentication service in use.
            </para>
            <para>
            <c>Note</c> For the set of allowable target names for SSPs, please refer to the comments in the InitializeSecurityContext documentation.
            </para>
            </param>
            <param name="AuthnLevel">
            Level of authentication to be performed on remote procedure calls made using Binding. For a list of the RPC-supported
            authentication levels, see Authentication-Level Constants.
            </param>
            <param name="AuthnSvc">
            <para>Authentication service to use.</para>
            <para>Specify RPC_C_AUTHN_NONE to turn off authentication for remote procedure calls made using Binding.</para>
            <para>
            If RPC_C_AUTHN_DEFAULT is specified, the RPC run-time library uses the RPC_C_AUTHN_WINNT authentication service for remote
            procedure calls made using Binding.
            </para>
            </param>
            <param name="AuthIdentity">
            <para>
            Handle for the structure that contains the client's authentication and authorization credentials appropriate for the selected
            authentication and authorization service.
            </para>
            <para>
            When using the RPC_C_AUTHN_WINNTauthentication service AuthIdentity should be a pointer to a SEC_WINNT_AUTH_IDENTITY structure
            (defined in Rpcdce.h). Kerberos and Negotiate authentication services also use the <c>SEC_WINNT_AUTH_IDENTITY</c> structure.
            </para>
            <para>
            Specify a null value to use the security login context for the current address space. Pass the value RPC_C_NO_CREDENTIALS to use
            an anonymous log-in context. Note that RPC_C_NO_CREDENTIALS is only valid if RPC_C_AUTHN_GSS_SCHANNEL is selected as the
            authentication service.
            </para>
            </param>
            <param name="AuthzSvc">
            Authorization service implemented by the server for the interface of interest. The validity and trustworthiness of authorization
            data, like any application data, depends on the authentication service and authentication level selected. This parameter is
            ignored when using the RPC_C_AUTHN_WINNT authentication service. See Note.
            </param>
            <param name="SecurityQos">TBD</param>
            <returns>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>RPC_S_OK</term>
            <term>The call succeeded.</term>
            </item>
            <item>
            <term>RPC_S_INVALID_BINDING</term>
            <term>The binding handle was invalid.</term>
            </item>
            <item>
            <term>RPC_S_WRONG_KIND_OF_BINDING</term>
            <term>This was the wrong kind of binding for the operation.</term>
            </item>
            <item>
            <term>RPC_S_UNKNOWN_AUTHN_SERVICE</term>
            <term>Unknown authentication service.</term>
            </item>
            </list>
            <para><c>Note</c> For a list of valid error codes, see RPC Return Values.</para>
            </returns>
            <remarks>
            <para>
            A client application calls the <c>RpcBindingSetAuthInfoEx</c> function to set up a server binding handle for making
            authenticated remote procedure calls. This function provides the capability to set security quality-of-service information on
            the binding handle. It is otherwise identical to RpcBindingSetAuthInfo.
            </para>
            <para>
            Unless a client calls <c>RpcBindingSetAuthInfoEx</c>, all remote procedure calls on Binding are unauthenticated. A client is not
            required to call this function.
            </para>
            <para>
            The <c>RpcBindingSetAuthInfoEx</c> function takes a snapshot of the credentials. Therefore, the memory dedicated to the
            AuthIdentity parameter can be freed before the binding handle. The exception to this is when your application uses
            <c>RpcBindingSetAuthInfoEx</c> with RPC_C_QOS_IDENTITY_DYNAMIC and also specifies a non- <c>NULL</c> value for AuthIdentity.
            </para>
            <para>
            <c>Note</c> The RpcBindingSetAuthInfo function must not be called on a binding handle while an RPC call on the same handle is in
            progress. Doing so produces undefined results.
            </para>
            <para>
            Due to the varying requirements of different versions of Microsoft RPC, Microsoft recommends that an application maintain a
            pointer to the AuthIdentity parameter for as long as the binding handle exists. Doing so increases the applications portability.
            </para>
            <para>
            <c>Windows Server 2003 with SP1 and Windows XP with SP2:</c> For Windows XP SP2 and Windows Server 2003 SP1, the pointer to the
            AuthIdentity parameter need not be maintained for the life of the binding handle. This pointer must only be maintained if
            subsequent calls to RpcBindingInqAuthInfo or RpcBindingInqAuthInfoEx are made.
            </para>
            <para>
            <c>Note</c> The <c>ncalrpc</c> protocol sequence supports only RPC_C_AUTHN_WINNT, but does support mutual authentication; supply
            an SPN and request mutual authentication through the SecurityQOS parameter to achieve this.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Rpc.RpcMgmtStopServerListening(Vanara.PInvoke.Rpc.RPC_BINDING_HANDLE)">
            <summary>
            The <c>RpcMgmtStopServerListening</c> function tells a server to stop listening for remote procedure calls. This function will
            not affect auto-listen interfaces. See RpcServerRegisterIfEx for more details.
            </summary>
            <param name="Binding">
            To direct a remote application to stop listening for remote procedure calls, specify a server binding handle for that
            application. To direct your own (local) application to stop listening for remote procedure calls, specify a value of <c>NULL</c>.
            </param>
            <returns>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>RPC_S_OK</term>
            <term>The call succeeded.</term>
            </item>
            <item>
            <term>RPC_S_INVALID_BINDING</term>
            <term>The binding handle was invalid.</term>
            </item>
            <item>
            <term>RPC_S_WRONG_KIND_OF_BINDING</term>
            <term>This was the wrong kind of binding for the operation.</term>
            </item>
            </list>
            <para><c>Note</c> For a list of valid error codes, see RPC Return Values.</para>
            </returns>
            <remarks>
            <para>
            An application calls the <c>RpcMgmtStopServerListening</c> function to direct a server to stop listening for remote procedure
            calls. If DontWait was <c>TRUE</c>, the application should call RpcMgmtWaitServerListen to wait for all calls to complete.
            </para>
            <para>
            When it receives a stop-listening request, the RPC run-time library stops accepting new remote procedure calls for all
            registered interfaces. Executing calls are allowed to complete, including callbacks. After all calls complete, this function
            signals RpcServerListen function that it must stop listening and return to the caller. If the DontWait parameter of
            <c>RpcServerListen</c> was set to <c>TRUE</c>, the application calls RpcMgmtWaitServerListen for all remaining calls to complete.
            </para>
            <para>
            <c>Note</c> From the client-side, <c>RpcMgmtStopServerListening</c> is disabled by default. To enable this function, create an
            authorization function in your server application that returns <c>TRUE</c> (to allow a remote shutdown) whenever
            <c>RpcMgmtStopServerListening</c> is called. Use RpcMgmtSetAuthorizationFn to give the client access to the management function.
            </para>
            <para>
            The server must be listening for remote procedure calls for this function to succeed. If the server is not listening, the
            function fails.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Rpc.RpcMgmtWaitServerListen">
            <summary>The <c>RpcMgmtWaitServerListen</c> function performs the wait operation usually associated with RpcServerListen.</summary>
            <returns>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>RPC_S_OK</term>
            <term>All remote procedure calls are complete.</term>
            </item>
            <item>
            <term>RPC_S_ALREADY_LISTENING</term>
            <term>Another thread has called RpcMgmtWaitServerListen and has not yet returned.</term>
            </item>
            <item>
            <term>RPC_S_NOT_LISTENING</term>
            <term>The server application must call RpcServerListen before calling RpcMgmtWaitServerListen.</term>
            </item>
            </list>
            <para><c>Note</c> For a list of valid error codes, see RPC Return Values.</para>
            </returns>
            <remarks>
            <para>
            When the RpcServerListen flag parameter DontWait has a nonzero value, the RpcServerListen function returns to the server
            application without performing the wait operation. In this case, the wait can be performed by <c>RpcMgmtWaitServerListen</c>.
            </para>
            <para>
            Applications must call RpcServerListen with a nonzero value for the DontWait parameter before calling
            <c>RpcMgmtWaitServerListen</c>. The <c>RpcMgmtWaitServerListen</c> function returns after the server application calls
            RpcMgmtStopServerListening and all active remote procedure calls complete, or after a fatal error occurs in the RPC run-time library.
            </para>
            <para><c>Note</c><c>RpcMgmtWaitServerListen</c> is a Microsoft extension to the DCE API set.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Rpc.RpcServerListen(System.UInt32,System.UInt32,System.Boolean)">
            <summary>
            The <c>RpcServerListen</c> function signals the RPC run-time library to listen for remote procedure calls. This function will
            not affect auto-listen interfaces; use RpcServerRegisterIfEx if you need that functionality.
            </summary>
            <param name="MinimumCallThreads">
            Hint to the RPC run time that specifies the minimum number of call threads that should be created and maintained in the given
            server. This value is only a hint and is interpreted differently in different versions of Windows. In Windows XP, this value is
            the number of previously created threads in each thread pool that the RPC run time creates. An application should specify one
            for this parameter, and defer thread creation decisions to the RPC run time.
            </param>
            <param name="MaxCalls">
            <para>
            Recommended maximum number of concurrent remote procedure calls the server can execute. To allow efficient performance, the RPC
            run-time libraries interpret the MaxCalls parameter as a suggested limit rather than as an absolute upper bound.
            </para>
            <para>Use RPC_C_LISTEN_MAX_CALLS_DEFAULT to specify the default value.</para>
            </param>
            <param name="DontWait">
            Flag controlling the return from <c>RpcServerListen</c>. A value of nonzero indicates that <c>RpcServerListen</c> should return
            immediately after completing function processing. A value of zero indicates that <c>RpcServerListen</c> should not return until
            the RpcMgmtStopServerListening function has been called and all remote calls have completed.
            </param>
            <returns>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>RPC_S_OK</term>
            <term>The call succeeded.</term>
            </item>
            <item>
            <term>RPC_S_ALREADY_LISTENING</term>
            <term>The server is already listening.</term>
            </item>
            <item>
            <term>RPC_S_NO_PROTSEQS_REGISTERED</term>
            <term>There are no protocol sequences registered.</term>
            </item>
            <item>
            <term>RPC_S_MAX_CALLS_TOO_SMALL</term>
            <term>The maximum calls value is too small.</term>
            </item>
            </list>
            <para><c>Note</c> For a list of valid error codes, see RPC Return Values.</para>
            </returns>
            <remarks>
            <para>
            A server calls <c>RpcServerListen</c> when the server is ready to process remote procedure calls. RPC allows a server to
            simultaneously process multiple calls. The MaxCalls parameter recommends the maximum number of concurrent remote procedure calls
            the server should execute.
            </para>
            <para>
            The MaxCalls value should not be zero, and should be larger than MinimumCallThreads. Values larger than 0x7FFFFFFF are set to
            0x7FFFFFFF without notice.
            </para>
            <para>
            <c>Windows XP/2000:</c> Setting the MaxCalls parameter to RPC_C_LISTEN_MAX_CALLS_DEFAULT removes the limit on concurrent remote
            procedure calls, rather than setting it to the constant-defined value of 1234. Removing the limit on maximum concurrent calls
            allows as many concurrent remote procedure calls as the computer can handle. This behavior enables increased efficiency in the
            RPC run time.
            </para>
            <para>
            A server application is responsible for concurrency control between the server manager routines because each routine executes in
            a separate thread.
            </para>
            <para>
            When the DontWait parameter has a value of zero, the RPC run-time library continues listening for remote procedure calls (that
            is, the routine does not return to the server application) until one of the following events occurs:
            </para>
            <list type="bullet">
            <item>
            <term>One of the server application's manager routines calls RpcMgmtStopServerListening.</term>
            </item>
            <item>
            <term>A client calls a remote procedure provided by the server that directs the server to call RpcMgmtStopServerListening.</term>
            </item>
            <item>
            <term>A client calls RpcMgmtStopServerListening with a binding handle to the server.</term>
            </item>
            </list>
            <para>
            After it receives a stop-listening request, the RPC run-time library stops accepting new remote procedure calls for all
            registered interfaces. Executing calls are allowed to complete, including callbacks. After all calls complete,
            <c>RpcServerListen</c> returns to the caller.
            </para>
            <para>
            When the DontWait parameter has a nonzero value, <c>RpcServerListen</c> returns to the server immediately after processing all
            the instructions associated with the function. You can use the RpcMgmtWaitServerListen function to perform the wait operation
            usually associated with <c>RpcServerListen</c>.
            </para>
            <para>
            <c>Note</c> The Microsoft RPC implementation of <c>RpcServerListen</c> includes two additional parameters that do not appear in
            the DCE specification: DontWait and MinimumCallThreads.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Rpc.RpcServerRegisterAuthInfo(System.String,Vanara.PInvoke.Rpc.RPC_C_AUTHN,Vanara.PInvoke.Rpc.RPC_AUTH_KEY_RETRIEVAL_FN,System.IntPtr)">
            <summary>The <c>RpcServerRegisterAuthInfo</c> function registers authentication information with the RPC run-time library.</summary>
            <param name="ServerPrincName">
            Pointer to the principal name to use for the server when authenticating remote procedure calls using the service specified by
            the AuthnSvc parameter. The content of the name and its syntax are defined by the authentication service in use. For more
            information, see Principal Names.
            </param>
            <param name="AuthnSvc">Authentication service to use when the server receives a request for a remote procedure call.</param>
            <param name="GetKeyFn">
            <para>Address of a server-application-provided routine that returns encryption keys. See RPC_AUTH_KEY_RETRIEVAL_FN.</para>
            <para>
            Specify a <c>NULL</c> parameter value to use the default method of encryption-key acquisition. In this case, the authentication
            service specifies the default behavior. Set this parameter to <c>NULL</c> when using the RPC_C_AUTHN_WINNT authentication service.
            </para>
            <list type="table">
            <listheader>
            <term>Authentication service</term>
            <term>GetKeyFn</term>
            <term>Arg</term>
            <term>Run-time behavior</term>
            </listheader>
            <item>
            <term>RPC_C_AUTHN_DPA</term>
            <term>Ignored</term>
            <term>Ignored</term>
            <term>Does not support</term>
            </item>
            <item>
            <term>RPC_C_AUTHN_GSS_KERBEROS</term>
            <term>Ignored</term>
            <term>Ignored</term>
            <term>Does not support</term>
            </item>
            <item>
            <term>RPC_C_AUTHN_GSS_NEGOTIATE</term>
            <term>Ignored</term>
            <term>Ignored</term>
            <term>Does not support</term>
            </item>
            <item>
            <term>RPC_C_AUTHN_GSS_SCHANNEL</term>
            <term>Ignored</term>
            <term>Ignored</term>
            <term>Does not support</term>
            </item>
            <item>
            <term>RPC_C_AUTHN_MQ</term>
            <term>Ignored</term>
            <term>Ignored</term>
            <term>Does not support</term>
            </item>
            <item>
            <term>RPC_C_AUTHN_MSN</term>
            <term>Ignored</term>
            <term>Ignored</term>
            <term>Does not support</term>
            </item>
            <item>
            <term>RPC_C_AUTHN_WINNT</term>
            <term>Ignored</term>
            <term>Ignored</term>
            <term>Does not support</term>
            </item>
            <item>
            <term>RPC_C_AUTHN_DCE_PRIVATE</term>
            <term>NULL</term>
            <term>Non-null</term>
            <term>
            Uses default method of encryption-key acquisition from specified key table; specified argument is passed to default acquisition function.
            </term>
            </item>
            <item>
            <term>RPC_C_AUTHN_DCE_PRIVATE</term>
            <term>Non-null</term>
            <term>NULL</term>
            <term>Uses specified encryption-key acquisition function to obtain keys from default key table.</term>
            </item>
            <item>
            <term>RPC_C_AUTHN_DCE_PRIVATE</term>
            <term>Non-null</term>
            <term>Non-null</term>
            <term>
            Uses specified encryption-key acquisition function to obtain keys from specified key table; specified argument is passed to
            acquisition function.
            </term>
            </item>
            <item>
            <term>RPC_C_AUTHN_DEC_PUBLIC</term>
            <term>Ignored</term>
            <term>Ignored</term>
            <term>Reserved for future use.</term>
            </item>
            </list>
            <para>
            The RPC run-time library passes the ServerPrincName parameter value from <c>RpcServerRegisterAuthInfo</c> as the ServerPrincName
            parameter value to the GetKeyFn acquisition function. The RPC run-time library automatically provides a value for the key
            version (KeyVer) parameter. For a KeyVer parameter value of zero, the acquisition function must return the most recent key
            available. The retrieval function returns the authentication key in the Key parameter.
            </para>
            <para>
            If the acquisition function called from <c>RpcServerRegisterAuthInfo</c> returns a status other than RPC_S_OK, then this
            function fails and returns an error code to the server application. If the acquisition function called by the RPC run-time
            library while authenticating a client's remote procedure call request returns a status other than RPC_S_OK, the request fails
            and the RPC run-time library returns an error code to the client application.
            </para>
            </param>
            <param name="Arg">
            <para>
            Pointer to a parameter to pass to the GetKeyFn routine, if specified. This parameter can also be used to pass a pointer to an
            SCHANNEL_CRED structure to specify explicit credentials if the authentication service is set to SCHANNEL.
            </para>
            <para>
            If the Arg parameter is set to <c>NULL</c>, this function will use the default certificate or credential if it has been set up
            in the directory service.
            </para>
            </param>
            <returns>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>RPC_S_OK</term>
            <term>The call succeeded.</term>
            </item>
            <item>
            <term>RPC_S_UNKNOWN_AUTHN_SERVICE</term>
            <term>The authentication service is unknown.</term>
            </item>
            </list>
            <para><c>Note</c> For a list of valid error codes, see RPC Return Values.</para>
            </returns>
            <remarks>
            <para>
            A server application calls <c>RpcServerRegisterAuthInfo</c> to register an authentication service to use for authenticating
            remote procedure calls. A server calls this routine once for each authentication service the server wants to register. If the
            server calls this function more than once for a given authentication service, the results are undefined.
            </para>
            <para>
            The authentication service that a client application specifies (using RpcBindingSetAuthInfo or <c>RpcServerRegisterAuthInfo</c>)
            must be one of the authentication services specified by the server application. Otherwise, the client's remote procedure call
            fails and an RPC_S_UNKNOWN_AUTHN_SERVICE status code is returned.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Rpc.RpcServerRegisterIfEx(Vanara.PInvoke.Rpc.RPC_IF_HANDLE,System.Guid@,System.IntPtr,Vanara.PInvoke.Rpc.RPC_IF,System.UInt32,Vanara.PInvoke.Rpc.RPC_IF_CALLBACK_FN)">
            <summary>The <c>RpcServerRegisterIfEx</c> function registers an interface with the RPC run-time library.</summary>
            <param name="IfSpec">MIDL-generated structure indicating the interface to register.</param>
            <param name="MgrTypeUuid">
            Pointer to a type UUID to associate with the MgrEpv parameter. Specifying a <c>null</c> parameter value (or a nil UUID)
            registers IfSpec with a nil-type UUID.
            </param>
            <param name="MgrEpv">
            Manager routines' entry-point vector (EPV). To use the MIDL-generated default EPV, specify a <c>null</c> value. For more
            information, please see RPC_MGR_EPV.
            </param>
            <param name="Flags">Flags. For a list of flag values, see Interface Registration Flags.</param>
            <param name="MaxCalls">
            <para>
            Maximum number of concurrent remote procedure call requests the server can accept on an auto-listen interface. The MaxCalls
            parameters is only applicable on an auto-listen interface, and is ignored on interfaces that are not auto-listen. The RPC
            run-time library makes its best effort to ensure the server does not allow more concurrent call requests than the number of
            calls specified in MaxCalls. The actual number can be greater and can vary for each protocol sequence.
            </para>
            <para>
            Calls on other interfaces are governed by the value of the process-wide MaxCalls parameter specified in the RpcServerListen
            function call.
            </para>
            <para>
            If the number of concurrent calls is not a concern, you can achieve slightly better server-side performance by specifying the
            default value using RPC_C_LISTEN_MAX_CALLS_DEFAULT. Doing so relieves the RPC run-time environment from enforcing an unnecessary restriction.
            </para>
            </param>
            <param name="IfCallback">
            Security-callback function, or <c>NULL</c> for no callback. Each registered interface can have a different callback function.
            See Remarks for more details.
            </param>
            <returns>
            <para>Returns RPC_S_OK upon success.</para>
            <para><c>Note</c> For a list of valid error codes, see RPC Return Values.</para>
            </returns>
            <remarks>
            <para>
            The parameters and effects of <c>RpcServerRegisterIfEx</c> subsume those of RpcServerRegisterIf. The difference is the ability
            to register an auto-listen interface and to specify a security-callback function.
            </para>
            <para>
            The server application code calls <c>RpcServerRegisterIfEx</c> to register an interface. To register an interface, the server
            provides the following information:
            </para>
            <list type="bullet">
            <item>
            <term>Interface specification</term>
            </item>
            <item>
            <term>Manager type UUID and manager EPV</term>
            </item>
            </list>
            <para>
            Specifying the RPC_IF_AUTOLISTEN flags marks the interface as an auto-listen interface. The run time begins listening for calls
            as soon as the interface is registered, and stops listening when the interface is unregistered. A call to RpcServerUnregisterIf
            for this interface will wait for the completion of all pending calls on this interface. Calls to RpcServerListen and
            RpcMgmtStopServerListening will not affect the interface, nor will a call to RpcServerUnregisterIf with IfSpec == <c>NULL</c>.
            This allows a DLL to register RPC interfaces or remove them from the registry without changing the main application's RPC state.
            </para>
            <para>
            Specifying a security-callback function allows the server application to restrict access to its interfaces on a per-client
            basis. Remember that, by default, security is optional; the server run time will dispatch unsecured calls even if the server has
            called RpcServerRegisterAuthInfo. If the server wants to accept only authenticated clients, an interface callback function must
            call the RpcBindingInqAuthClient or RpcGetAuthorizationContextForClient function to retrieve the security level, or attempt to
            impersonate the client with RpcImpersonateClient. It can also specify the RPC_IF_ALLOW_SECURE_ONLY flag in the interface flags.
            </para>
            <para>
            When a server application specifies a security-callback function for its interface(s), the RPC run time automatically rejects
            unauthenticated calls to that interface. In addition, the run-time records the interfaces that each client has used. When a
            client makes an RPC to an interface that it has not used during the current communication session, the RPC run-time library will
            call the interface's security-callback function. Specifying RPC_IF_ALLOW_CALLBACKS_WITH_NO_AUTH flag will prevent the automatic
            rejection of unauthenticated clients.
            </para>
            <para>For the signature for the callback function, see RPC_IF_CALLBACK_FN.</para>
            <para>
            The callback function should return RPC_S_OK if the client is allowed to call methods in this interface. Any other return code
            will cause the client to receive the exception RPC_S_ACCESS_DENIED.
            </para>
            <para>
            In some cases, the RPC run time may call the security-callback function more than once per client–per interface. Be sure your
            callback function can handle this possibility.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Rpc.RpcServerUnregisterIf(Vanara.PInvoke.Rpc.RPC_IF_HANDLE,System.Guid@,System.Boolean)">
            <summary>The <c>RpcServerUnregisterIf</c> function removes an interface from the RPC run-time library registry.</summary>
            <param name="IfSpec">
            <para>Interface to remove from the registry.</para>
            <para>
            Specify a <c>null</c> value to remove all interfaces previously registered with the type UUID value specified in the MgrTypeUuid parameter.
            </para>
            </param>
            <param name="MgrTypeUuid">
            <para>
            Pointer to the type UUID of the manager entry-point vector (EPV) to remove from the registry. The value of MgrTypeUuid should be
            the same value as was provided in a call to the RpcServerRegisterIf function, RpcServerRegisterIf2 function, or the
            RpcServerRegisterIfEx function.
            </para>
            <para>
            Specify a <c>null</c> value to remove the interface specified in the IfSpec parameter for all previously registered type UUIDs
            from the registry.
            </para>
            <para>
            Specify a nil UUID to remove the MIDL-generated default manager EPV from the registry. In this case, all manager EPVs registered
            with a non-nil type UUID remain registered.
            </para>
            </param>
            <param name="WaitForCallsToComplete">
            <para>
            Flag that indicates whether to remove the interface from the registry immediately or to wait until all current calls are complete.
            </para>
            <para>
            Specify a value of zero to disregard calls in progress and remove the interface from the registry immediately. Specify any
            nonzero value to wait until all active calls complete.
            </para>
            </param>
            <returns>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>RPC_S_OK</term>
            <term>The call succeeded.</term>
            </item>
            <item>
            <term>RPC_S_UNKNOWN_MGR_TYPE</term>
            <term>The manager type is unknown.</term>
            </item>
            <item>
            <term>RPC_S_UNKNOWN_IF</term>
            <term>The interface is unknown.</term>
            </item>
            </list>
            <para><c>Note</c> For a list of valid error codes, see RPC Return Values.</para>
            </returns>
            <remarks>
            <para>
            A server calls <c>RpcServerUnregisterIf</c> to remove the association between an interface and a manager EPV. To specify the
            manager EPV to remove in the MgrTypeUuid parameter, provide the type UUID value that was specified in a call to
            RpcServerRegisterIf. After it is removed from the registry, an interface is no longer available to client applications.
            </para>
            <para>
            When an interface is removed from the registry, the RPC run-time library stops accepting new calls for that interface. Calls
            that are currently executing on the interface are allowed to complete, including callbacks.
            </para>
            <para>The following table summarizes the behavior of <c>RpcServerUnregisterIf</c>.</para>
            <list type="table">
            <listheader>
            <term>IfSpec</term>
            <term>MgrTypeUuid</term>
            <term>Behavior</term>
            </listheader>
            <item>
            <term>Non-null</term>
            <term>Non-null</term>
            <term>Removes from the registry the manager EPV associated with the specified parameters.</term>
            </item>
            <item>
            <term>Non-null</term>
            <term>NULL</term>
            <term>Removes all manager EPVs associated with the IfSpec parameter.</term>
            </item>
            <item>
            <term>NULL</term>
            <term>Non-null</term>
            <term>Removes all manager EPVs associated with the MgrTypeUuid parameter.</term>
            </item>
            <item>
            <term>NULL</term>
            <term>NULL</term>
            <term>
            Removes all manager EPVs. This call has the effect of preventing the server from receiving any new remote procedure calls
            because all the manager EPVs for all interfaces have been unregistered.
            </term>
            </item>
            </list>
            <para>
            <c>Note</c> If the value of IfSpec is <c>NULL</c>, this function will leave auto-listen interfaces registered. Auto-listen
            interfaces must be removed from the registry individually. See RpcServerRegisterIfEx for more details.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Rpc.RpcServerUnregisterIf(Vanara.PInvoke.Rpc.RPC_IF_HANDLE,System.IntPtr,System.Boolean)">
            <summary>The <c>RpcServerUnregisterIf</c> function removes an interface from the RPC run-time library registry.</summary>
            <param name="IfSpec">
            <para>Interface to remove from the registry.</para>
            <para>
            Specify a <c>null</c> value to remove all interfaces previously registered with the type UUID value specified in the MgrTypeUuid parameter.
            </para>
            </param>
            <param name="MgrTypeUuid">
            <para>
            Pointer to the type UUID of the manager entry-point vector (EPV) to remove from the registry. The value of MgrTypeUuid should be
            the same value as was provided in a call to the RpcServerRegisterIf function, RpcServerRegisterIf2 function, or the
            RpcServerRegisterIfEx function.
            </para>
            <para>
            Specify a <c>null</c> value to remove the interface specified in the IfSpec parameter for all previously registered type UUIDs
            from the registry.
            </para>
            <para>
            Specify a nil UUID to remove the MIDL-generated default manager EPV from the registry. In this case, all manager EPVs registered
            with a non-nil type UUID remain registered.
            </para>
            </param>
            <param name="WaitForCallsToComplete">
            <para>
            Flag that indicates whether to remove the interface from the registry immediately or to wait until all current calls are complete.
            </para>
            <para>
            Specify a value of zero to disregard calls in progress and remove the interface from the registry immediately. Specify any
            nonzero value to wait until all active calls complete.
            </para>
            </param>
            <returns>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>RPC_S_OK</term>
            <term>The call succeeded.</term>
            </item>
            <item>
            <term>RPC_S_UNKNOWN_MGR_TYPE</term>
            <term>The manager type is unknown.</term>
            </item>
            <item>
            <term>RPC_S_UNKNOWN_IF</term>
            <term>The interface is unknown.</term>
            </item>
            </list>
            <para><c>Note</c> For a list of valid error codes, see RPC Return Values.</para>
            </returns>
            <remarks>
            <para>
            A server calls <c>RpcServerUnregisterIf</c> to remove the association between an interface and a manager EPV. To specify the
            manager EPV to remove in the MgrTypeUuid parameter, provide the type UUID value that was specified in a call to
            RpcServerRegisterIf. After it is removed from the registry, an interface is no longer available to client applications.
            </para>
            <para>
            When an interface is removed from the registry, the RPC run-time library stops accepting new calls for that interface. Calls
            that are currently executing on the interface are allowed to complete, including callbacks.
            </para>
            <para>The following table summarizes the behavior of <c>RpcServerUnregisterIf</c>.</para>
            <list type="table">
            <listheader>
            <term>IfSpec</term>
            <term>MgrTypeUuid</term>
            <term>Behavior</term>
            </listheader>
            <item>
            <term>Non-null</term>
            <term>Non-null</term>
            <term>Removes from the registry the manager EPV associated with the specified parameters.</term>
            </item>
            <item>
            <term>Non-null</term>
            <term>NULL</term>
            <term>Removes all manager EPVs associated with the IfSpec parameter.</term>
            </item>
            <item>
            <term>NULL</term>
            <term>Non-null</term>
            <term>Removes all manager EPVs associated with the MgrTypeUuid parameter.</term>
            </item>
            <item>
            <term>NULL</term>
            <term>NULL</term>
            <term>
            Removes all manager EPVs. This call has the effect of preventing the server from receiving any new remote procedure calls
            because all the manager EPVs for all interfaces have been unregistered.
            </term>
            </item>
            </list>
            <para>
            <c>Note</c> If the value of IfSpec is <c>NULL</c>, this function will leave auto-listen interfaces registered. Auto-listen
            interfaces must be removed from the registry individually. See RpcServerRegisterIfEx for more details.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Rpc.RpcServerUseProtseqEp(System.String,System.UInt32,System.String,System.IntPtr)">
            <summary>
            The <c>RpcServerUseProtseqEp</c> function tells the RPC run-time library to use the specified protocol sequence combined with
            the specified endpoint for receiving remote procedure calls.
            </summary>
            <param name="Protseq">Pointer to a string identifier of the protocol sequence to register with the RPC run-time library.</param>
            <param name="MaxCalls">
            Backlog queue length for the <c>ncacn_ip_tcp</c> protocol sequence. All other protocol sequences ignore this parameter. Use
            RPC_C_PROTSEQ_MAX_REQS_DEFAULT to specify the default value. See Remarks.
            </param>
            <param name="Endpoint">
            Pointer to the endpoint-address information to use in creating a binding for the protocol sequence specified in the Protseq parameter.
            </param>
            <param name="SecurityDescriptor">
            Pointer to an optional parameter provided for the security subsystem. Used only for <c>ncacn_np</c> and <c>ncalrpc</c> protocol
            sequences. All other protocol sequences ignore this parameter. Using a security descriptor on the endpoint in order to make a
            server secure is not recommended. This parameter does not appear in the DCE specification for this API.
            </param>
            <returns>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>RPC_S_OK</term>
            <term>The call succeeded.</term>
            </item>
            <item>
            <term>RPC_S_PROTSEQ_NOT_SUPPORTED</term>
            <term>The protocol sequence is not supported on this host.</term>
            </item>
            <item>
            <term>RPC_S_INVALID_RPC_PROTSEQ</term>
            <term>The protocol sequence is invalid.</term>
            </item>
            <item>
            <term>RPC_S_INVALID_ENDPOINT_FORMAT</term>
            <term>The endpoint format is invalid.</term>
            </item>
            <item>
            <term>RPC_S_OUT_OF_MEMORY</term>
            <term>The system is out of memory.</term>
            </item>
            <item>
            <term>RPC_S_DUPLICATE_ENDPOINT</term>
            <term>The endpoint is a duplicate.</term>
            </item>
            <item>
            <term>RPC_S_INVALID_SECURITY_DESC</term>
            <term>The security descriptor is invalid.</term>
            </item>
            </list>
            <para><c>Note</c> For a list of valid error codes, see RPC Return Values.</para>
            </returns>
            <remarks>
            <para>
            A server application calls <c>RpcServerUseProtseqEp</c> to register one protocol sequence with the RPC run-time library. With
            each protocol sequence registration, <c>RpcServerUseProtseqEp</c> includes the specified endpoint-address information.
            </para>
            <para>
            To receive remote procedure call requests, a server must register at least one protocol sequence with the RPC run-time library.
            A server application can call this routine multiple times to register additional protocol sequences and endpoints. For each
            protocol sequence registered by a server, the RPC run-time library creates one or more endpoints through which the server
            receives remote procedure call requests. The RPC run-time library creates different endpoints for each protocol sequence.
            However, each interface in the process is accessible through any endpoint. For more information, see Writing a Secure RPC Client
            or Server.
            </para>
            <para>
            For MaxCalls, the value provided by the application is only a hint. The RPC run time or the Windows Sockets provider may
            override the value. For example, on Windows XP or Windows 2000 Professional, the value is limited to 5. Values greater than 5
            are ignored and 5 is used instead. On Windows Server 2003 and Windows 2000 Server, the value will be honored.
            </para>
            <para>
            Applications must be careful to pass reasonable values in MaxCalls. Large values on Server, Advanced Server, or Datacenter
            Server can cause a large amount of non-paged pool memory to be used. Using too small a value is also unfavorable, as it may
            result in TCP SYN packets being met by TCP RST from the server if the backlog queue gets exhausted. An application developer
            should balance memory footprint versus scalability requirements when determining the proper value for MaxCalls.
            </para>
            <para>
            When the computer is configured to use selective binding, successful return does not guarantee that the server has created
            endpoints for all the network interfaces present on the computer. The RPC run-time may not listen on some network interfaces
            depending on the selective binding settings. In addition, if an interface has not yet received an IP address using DHCP, the RPC
            server does not listen on the network interface until a DHCP address is assigned to it. A successful return implies that the
            server is listening on at least one network interface; the full list of the binding handles over which remote procedure calls
            can be received can be obtained with a call to the RpcServerInqBindings function.
            </para>
            <para>For more information, see Server-Side Binding and String Binding.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Rpc.RpcStringBindingCompose(System.String,System.String,System.String,System.String,System.String,System.String@)">
            <summary>The <c>RpcStringBindingCompose</c> function creates a string binding handle.</summary>
            <param name="ObjUuid">
            Pointer to a <c>null</c>-terminated string representation of an object UUID. For example, the string
            6B29FC40-CA47-1067-B31D-00DD010662DA represents a valid UUID.
            </param>
            <param name="ProtSeq">Pointer to a <c>null</c>-terminated string representation of a protocol sequence. See Note.</param>
            <param name="NetworkAddr">
            Pointer to a <c>null</c>-terminated string representation of a network address. The network-address format is associated with
            the protocol sequence. See Note.
            </param>
            <param name="Endpoint">
            Pointer to a <c>null</c>-terminated string representation of an endpoint. The endpoint format and content are associated with
            the protocol sequence. For example, the endpoint associated with the protocol sequence <c>ncacn_np</c> is a pipe name in the
            format \pipe\pipename. See Note.
            </param>
            <param name="Options">
            Pointer to a <c>null</c>-terminated string representation of network options. The option string is associated with the protocol
            sequence. See Note.
            </param>
            <param name="StringBinding">
            <para>Returns a pointer to a pointer to a <c>null</c>-terminated string representation of a binding handle.</para>
            <para>
            Specify a <c>NULL</c> value to prevent <c>RpcStringBindingCompose</c> from returning the StringBinding parameter. In this case,
            the application does not call RpcStringFree. See Note.
            </para>
            <para><c>Note</c> For more information, see String Binding.</para>
            </param>
            <returns>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>RPC_S_OK</term>
            <term>The call succeeded.</term>
            </item>
            <item>
            <term>RPC_S_INVALID_STRING_UUID</term>
            <term>The string representation of the UUID is not valid.</term>
            </item>
            </list>
            <para><c>Note</c> For a list of valid error codes, see RPC Return Values.</para>
            </returns>
            <remarks>
            <para>
            An application calls <c>RpcStringBindingCompose</c> routine to combine an object UUID, a protocol sequence, a network address,
            an endpoint and other network options into a string representation of a binding handle.
            </para>
            <para>
            The RPC run-time library allocates memory for the string returned in the StringBinding parameter. The application is responsible
            for calling RpcStringFree to deallocate that memory.
            </para>
            <para>Specify a <c>null</c> parameter value or provide an empty string (\0) for each input string that has no data.</para>
            <para>
            Literal backslash characters within C-language strings must be quoted. The actual C string for the server name for the
            <c>ncacn_np</c> protocol sequence appears as \\servername, and the actual C string for a pipe name appears as \pipe\pipename.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Rpc.RpcStringFree(System.IntPtr@)">
            <summary>The <c>RpcStringFree</c> function frees a character string allocated by the RPC run-time library.</summary>
            <param name="String">Pointer to a pointer to the character string to free.</param>
            <returns>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>RPC_S_OK</term>
            <term>The call succeeded.</term>
            </item>
            </list>
            <para><c>Note</c> For a list of valid error codes, see RPC Return Values.</para>
            </returns>
            <remarks>
            An application is responsible for calling <c>RpcStringFree</c> once for each character string allocated and returned by calls to
            other RPC run-time library routines.
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Rpc.RPC_DISPATCH_FUNCTION">
            <summary>Dispatch function delegate.</summary>
            <param name="Message">The message.</param>
        </member>
        <member name="M:Vanara.PInvoke.Rpc.I_RpcBindingInqLocalClientPID(Vanara.PInvoke.Rpc.RPC_BINDING_HANDLE,System.UInt32@)">
            <summary>
            <para>
            [The <c>I_RpcBindingInqLocalClientPID</c> function is available for use in the operating systems specified in the Requirements
            section. Instead, call RpcServerInqCallAttributes.]
            </para>
            <para>The <c>I_RpcBindingInqLocalClientPID</c> function obtains a client process ID.</para>
            </summary>
            <param name="Binding">
            <c>RPC_BINDING_HANDLE</c> that specifies the binding handle for an explicit RPC binding from the client to a server application.
            </param>
            <param name="Pid">Contains the process ID of the client that issued the call upon return.</param>
            <returns>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>RPC_S_OK</term>
            <term>The function call was successful.</term>
            </item>
            <item>
            <term>RPC_S_NO_CALL_ACTIVE</term>
            <term>The current thread does not have an active RPC call.</term>
            </item>
            <item>
            <term>RPC_S_INVALID_BINDING</term>
            <term>The RPC binding handle is invalid.</term>
            </item>
            </list>
            <para><c>Note</c> For a list of valid error codes, see RPC Return Values.</para>
            </returns>
            <remarks>
            The client process ID is only returned in ClientBinding when the "ncalrpc" protocol sequence is used. Until the process
            terminates, the process ID value uniquely identifies it on the client. When the process terminates, the process ID can be used
            by new processes.
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Rpc.RPC_CLIENT_INTERFACE">
            <summary>
            <para>
            The <c>RPC_CLIENT_INTERFACE</c> structure is part of the private interface between the run-time libraries and the stubs. Most
            distributed applications that use Microsoft RPC do not need this structure.
            </para>
            <para>The data structure is defined in the header file Rpcdcep.h. See the header file for syntax block and member definitions.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_CLIENT_INTERFACE.Length">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_CLIENT_INTERFACE.InterfaceId">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_CLIENT_INTERFACE.TransferSyntax">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_CLIENT_INTERFACE.DispatchTable">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_CLIENT_INTERFACE.RpcProtseqEndpointCount">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_CLIENT_INTERFACE.RpcProtseqEndpoint">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_CLIENT_INTERFACE.Reserved">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_CLIENT_INTERFACE.InterpreterInfo">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_CLIENT_INTERFACE.Flags">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.Rpc.RPC_DISPATCH_TABLE">
            <summary>
            <para>
            The <c>RPC_DISPATCH_TABLE</c> structure is part of the private interface between the run-time libraries and the stubs. Most
            distributed applications that use Microsoft RPC do not need this structure.
            </para>
            <para>The structure is defined in the header file Rpcdcep.h. See the header file for syntax block and member definitions.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_DISPATCH_TABLE.DispatchTableCount">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_DISPATCH_TABLE.DispatchTable">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_DISPATCH_TABLE.Reserved">
            <summary/>
        </member>
        <member name="M:Vanara.PInvoke.Rpc.RPC_DISPATCH_TABLE.GetDispatchTable">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.Rpc.RPC_MESSAGE">
            <summary>The <c>RPC_MESSAGE</c> structure contains information shared between NDR and the rest of the RPC or OLE runtime.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_MESSAGE.Handle">
            <summary>Reserved.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_MESSAGE.DataRepresentation">
            <summary>Data representation of the network buffer as defined by the NDR specification.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_MESSAGE.Buffer">
            <summary>Pointer to the beginning of the network buffer.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_MESSAGE.BufferLength">
            <summary>Size, in bytes, of <c>Buffer</c>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_MESSAGE.ProcNum">
            <summary>Reserved.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_MESSAGE.TransferSyntax">
            <summary>Reserved.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_MESSAGE.RpcInterfaceInformation">
            <summary>Reserved.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_MESSAGE.ReservedForRuntime">
            <summary>Reserved.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_MESSAGE.ManagerEpv">
            <summary>Reserved.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_MESSAGE.ImportContext">
            <summary>Reserved.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_MESSAGE.RpcFlags">
            <summary>Reserved.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Rpc.RPC_PROTSEQ_ENDPOINT">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_PROTSEQ_ENDPOINT.RpcProtocolSequence">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_PROTSEQ_ENDPOINT.Endpoint">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.Rpc.RPC_SERVER_INTERFACE">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_SERVER_INTERFACE.Length">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_SERVER_INTERFACE.InterfaceId">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_SERVER_INTERFACE.TransferSyntax">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_SERVER_INTERFACE.DispatchTable">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_SERVER_INTERFACE.RpcProtseqEndpointCount">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_SERVER_INTERFACE.RpcProtseqEndpoint">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_SERVER_INTERFACE.DefaultManagerEpv">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_SERVER_INTERFACE.InterpreterInfo">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_SERVER_INTERFACE.Flags">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.Rpc.RPC_SYNTAX_IDENTIFIER">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_SYNTAX_IDENTIFIER.SyntaxGUID">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_SYNTAX_IDENTIFIER.SyntaxVersion">
            <summary/>
        </member>
        <member name="M:Vanara.PInvoke.Rpc.RPC_SYNTAX_IDENTIFIER.#ctor(System.Guid@,System.UInt16,System.UInt16)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Rpc.RPC_SYNTAX_IDENTIFIER"/> struct.</summary>
            <param name="syntax">The syntax.</param>
            <param name="majVer">The maj ver.</param>
            <param name="minVer">The minimum ver.</param>
        </member>
        <member name="T:Vanara.PInvoke.Rpc.RPC_VERSION">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_VERSION.MajorVersion">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.RPC_VERSION.MinorVersion">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.Rpc.SERVER_ROUTINE">
            <summary/>
            <returns/>
        </member>
        <member name="M:Vanara.PInvoke.Rpc.NdrClientCall2(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>The <c>NdrClientCall2</c> function is the client-side entry point for the /Oicf mode stub.</summary>
            <param name="pStubDescriptor">
            Pointer to the MIDL-generated MIDL_STUB_DESC structure that contains information about the description of the remote interface.
            </param>
            <param name="pFormat">Pointer to the MIDL-generated procedure format string that describes the method and parameters.</param>
            <param name="pArguments">Pointer to the client-side calling stack.</param>
            <returns>
            <para>
            Return value of the remote call. The maximum size of a return value is equivalent to the register size of the system. MIDL
            switches to the /Os mode stub if the return value size is larger than the register size.
            </para>
            <para>Depending on the method definition, this function can throw an exception if there is a network or server failure.</para>
            </returns>
            <remarks>
            The <c>NdrClientCall2</c> function is used by all /Oicf mode client-side stubs. The <c>NdrClientCall2</c> function transmits all
            [in] data to the remote server, and upon receipt of the response packet, returns the [out] value to the client-side application.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Rpc.NdrFcLong(System.Int32)">
            <summary>Converts a value to a four-byte array.</summary>
            <param name="s">The value.</param>
            <returns>The byte array.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Rpc.NdrFcShort(System.Int32)">
            <summary>Converts a value to a two-byte array.</summary>
            <param name="s">The value.</param>
            <returns>The byte array.</returns>
        </member>
        <member name="T:Vanara.PInvoke.Rpc.MIDL_SERVER_INFO">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.MIDL_SERVER_INFO.pStubDesc">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.MIDL_SERVER_INFO.DispatchTable">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.MIDL_SERVER_INFO.ProcString">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.MIDL_SERVER_INFO.FmtStringOffset">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.MIDL_SERVER_INFO.ThunkTable">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.MIDL_SERVER_INFO.pTransferSyntax">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.MIDL_SERVER_INFO.nCount">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.MIDL_SERVER_INFO.pSyntaxInfo">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.Rpc.MIDL_STUB_DESC">
            <summary>
            The <c>MIDL_STUB_DESC</c> structure is a MIDL-generated structure that contains information about the interface stub regarding
            RPC calls between the client and server.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.MIDL_STUB_DESC.RpcInterfaceInformation">
            <summary>
            For a nonobject RPC interface on the server-side, it points to an RPC server interface structure. On the client-side, it
            points to an RPC client interface structure. It is null for an object interface.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.MIDL_STUB_DESC.pfnAllocate">
            <summary>
            Memory allocation function to be used by the stub. Set to midl_user_allocate for nonobject interface and NdrOleAllocate for
            object interface.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.MIDL_STUB_DESC.pfnFree">
            <summary>
            Memory-free function to be used by the stub. Set to midl_user_free for nonobject interface and NdrOleFree for object interface.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.MIDL_STUB_DESC.pImplicitHandleInfo">
            <summary>
            <para>The union contains one of the following handles.</para>
            <list type="bullet">
            <item>Pointer to the implicit auto handle for the RPC call.</item>
            <item>Pointer to the implicit primitive handle for the RPC call.</item>
            <item>Pointer to the information about the implicit generic handle.</item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.MIDL_STUB_DESC.apfnNdrRundownRoutines">
            <summary>Array of context handle rundown functions.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.MIDL_STUB_DESC.aGenericBindingRoutinePairs">
            <summary>Array of function pointers to bind and unbind function pairs for the implicit generic handle.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.MIDL_STUB_DESC.apfnExprEval">
            <summary>
            Array of function pointers to expression evaluator functions used to evaluate MIDL complex conformance and varying
            descriptions. For example, size_is(param1 + param2).
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.MIDL_STUB_DESC.aXmitQuintuple">
            <summary>Array of an array of function pointers for user-defined transmit_as and represent_as types.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.MIDL_STUB_DESC.pFormatTypes">
            <summary>Pointer to the type format description.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.MIDL_STUB_DESC.fCheckBounds">
            <summary>Flag describing the user-specified /error MIDL compiler option.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.MIDL_STUB_DESC.Version">
            <summary>NDR version required for the stub.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.MIDL_STUB_DESC.pMallocFreeStruct">
            <summary>
            Pointer to the MALLOC_FREE_STRUCT structure which contains the allocate and free function pointers. Use if the
            enable_allocate MIDL attribute is specified.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.MIDL_STUB_DESC.MIDLVersion">
            <summary>Version of the MIDL compiler used to compile the .idl file.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.MIDL_STUB_DESC.CommFaultOffsets">
            <summary>Array of stack offsets for parameters with comm_status or fault_status attributes.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.MIDL_STUB_DESC.aUserMarshalQuadruple">
            <summary>Array of an array of function pointers for user-defined user_marshal and wire_marshal types.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.MIDL_STUB_DESC.NotifyRoutineTable">
            <summary>Array of notification function pointers for methods with the notify or notify_flag attribute specified.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.MIDL_STUB_DESC.mFlags">
            <summary>
            <para>Flag describing the attributes of the stub</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>RPCFLG_HAS_MULTI_SYNTAXES</term>
            <term>Set if the stub supports multiple transfer syntaxes.</term>
            </item>
            <item>
            <term>RPCFLG_HAS_CALLBACK</term>
            <term>Set if the interface contains callback functions.</term>
            </item>
            <item>
            <term>RPC_INTERFACE_HAS_PIPES</term>
            <term>Set if the interface contains a method that uses pipes.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.MIDL_STUB_DESC.CsRoutineTables">
            <summary>Unused.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.MIDL_STUB_DESC.ProxyServerInfo">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Rpc.MIDL_STUB_DESC.pExprInfo">
            <summary/>
        </member>
    </members>
</doc>
