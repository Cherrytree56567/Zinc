<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Vanara.PInvoke.Shell32</name>
    </assembly>
    <members>
        <member name="T:Vanara.PInvoke.Shell32">
            <summary>Interfaces, functions, enumerated types and structures for Shell32.dll.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.DROPIMAGETYPE">
            <summary>
            <para>Values used with the DROPDESCRIPTION structure to specify the drop image.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DROPIMAGETYPE.DROPIMAGE_INVALID">
            <summary>No drop image preference; use the default image.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DROPIMAGETYPE.DROPIMAGE_NONE">
            <summary>A red bisected circle such as that found on a "no smoking" sign.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DROPIMAGETYPE.DROPIMAGE_COPY">
            <summary>A plus sign (+) that indicates a copy operation.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DROPIMAGETYPE.DROPIMAGE_MOVE">
            <summary>An arrow that indicates a move operation.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DROPIMAGETYPE.DROPIMAGE_LINK">
            <summary>An arrow that indicates a link.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DROPIMAGETYPE.DROPIMAGE_LABEL">
            <summary>A tag icon that indicates that the metadata will be changed.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DROPIMAGETYPE.DROPIMAGE_WARNING">
            <summary>A yellow exclamation mark that indicates that a problem has been encountered in the operation.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DROPIMAGETYPE.DROPIMAGE_NOIMAGE">
            <summary>Windows 7 and later. Use no drop image.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.FD_FLAGS">
            <summary>An array of flags that indicate which of the <see cref="T:Vanara.PInvoke.Shell32.FILEDESCRIPTOR"/> structure members contain valid data.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FD_FLAGS.FD_CLSID">
            <summary>The <c>clsid</c> member is valid.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FD_FLAGS.FD_SIZEPOINT">
            <summary>The <c>sizel</c> and <c>pointl</c> members are valid.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FD_FLAGS.FD_ATTRIBUTES">
            <summary>The <c>dwFileAttributes</c> member is valid.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FD_FLAGS.FD_CREATETIME">
            <summary>The <c>ftCreationTime</c> member is valid.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FD_FLAGS.FD_ACCESSTIME">
            <summary>The <c>ftLastAccessTime</c> member is valid.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FD_FLAGS.FD_WRITESTIME">
            <summary>The <c>ftLastWriteTime</c> member is valid.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FD_FLAGS.FD_FILESIZE">
            <summary>The <c>nFileSizeHigh</c> and <c>nFileSizeLow</c> members are valid.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FD_FLAGS.FD_PROGRESSUI">
            <summary>A progress indicator is shown with drag-and-drop operations.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FD_FLAGS.FD_LINKUI">
            <summary>Treat the operation as a shortcut.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FD_FLAGS.FD_UNICODE">
            <summary><c>Windows Vista and later</c>. The descriptor is Unicode.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.AnsiToUnicode(System.String)">
            <summary>Converts an ANSI string to Unicode.</summary>
            <param name="value">The ANSI string value.</param>
            <returns>The Unicode string value.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.EnumFormats(System.Runtime.InteropServices.ComTypes.IDataObject)">
            <summary>Enumerates the <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC"/> structures that define the formats and media supported by a given data object.</summary>
            <param name="dataObj">The data object.</param>
            <returns>A sequence of <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC"/> structures.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.FormatHtmlForClipboard(System.String,System.String)">
            <summary>Takes an HTML fragment and wraps it in the HTML format specification for the clipboard.</summary>
            <param name="htmlFragment">
            The fragment contains pure, valid HTML representing the area the user has selected (to Copy, for example). This contains the
            selected text plus the opening tags and attributes of any element that has an end tag within the selected text, and end tags at
            the end of the fragment for any start tag included. This is all information required for basic pasting of an HTML fragment.
            </param>
            <param name="sourceUrl"></param>
            <returns></returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.GetData(System.Runtime.InteropServices.ComTypes.IDataObject,System.String,System.Runtime.InteropServices.ComTypes.DVASPECT,System.Int32)">
            <summary>Obtains data from a source data object.</summary>
            <param name="dataObj">The data object.</param>
            <param name="format">Specifies the particular clipboard format of interest.</param>
            <param name="aspect">
            Indicates how much detail should be contained in the rendering. This parameter should be one of the DVASPECT enumeration values.
            A single clipboard format can support multiple aspects or views of the object. Most data and presentation transfer and caching
            methods pass aspect information. For example, a caller might request an object's iconic picture, using the metafile clipboard
            format to retrieve it. Note that only one DVASPECT value can be used in dwAspect. That is, dwAspect cannot be the result of a
            Boolean OR operation on several DVASPECT values.
            </param>
            <param name="index">
            Part of the aspect when the data must be split across page boundaries. The most common value is -1, which identifies all of the
            data. For the aspects DVASPECT_THUMBNAIL and DVASPECT_ICON, lindex is ignored.
            </param>
            <returns>The object associated with the request. If no object can be determined, a <see cref="T:System.Byte"/>[] is returned.</returns>
            <exception cref="T:System.InvalidOperationException">Unrecognized TYMED value.</exception>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.GetData(System.Runtime.InteropServices.ComTypes.IDataObject,System.UInt32,System.Runtime.InteropServices.ComTypes.DVASPECT,System.Int32)">
            <summary>Obtains data from a source data object.</summary>
            <param name="dataObj">The data object.</param>
            <param name="formatId">Specifies the particular clipboard format of interest.</param>
            <param name="aspect">
            Indicates how much detail should be contained in the rendering. This parameter should be one of the DVASPECT enumeration values.
            A single clipboard format can support multiple aspects or views of the object. Most data and presentation transfer and caching
            methods pass aspect information. For example, a caller might request an object's iconic picture, using the metafile clipboard
            format to retrieve it. Note that only one DVASPECT value can be used in dwAspect. That is, dwAspect cannot be the result of a
            Boolean OR operation on several DVASPECT values.
            </param>
            <param name="index">
            Part of the aspect when the data must be split across page boundaries. The most common value is -1, which identifies all of the
            data. For the aspects DVASPECT_THUMBNAIL and DVASPECT_ICON, lindex is ignored.
            </param>
            <returns>
            <para>The object associated with the request. If no object can be determined, a <see cref="T:System.Byte"/>[] is returned.</para>
            <para>Conversion for different clipboard formats is as follows:</para>
            <list type="table">
            <listheader>
            <term>Format</term>
            <term>Return Type</term>
            </listheader>
            <item>
            <description><see cref="F:Vanara.PInvoke.CLIPFORMAT.CF_HDROP"/>, <see cref="F:Vanara.PInvoke.Shell32.ShellClipboardFormat.CFSTR_FILENAMEMAPA"/>, <see cref="F:Vanara.PInvoke.Shell32.ShellClipboardFormat.CFSTR_FILENAMEMAPW"/></description>
            <description><see cref="T:System.String"/>[]</description>
            </item>
            <item>
            <description><see cref="F:Vanara.PInvoke.CLIPFORMAT.CF_BITMAP"/></description>
            <description><see cref="T:Vanara.PInvoke.HBITMAP"/></description>
            </item>
            <item>
            <description><see cref="F:Vanara.PInvoke.CLIPFORMAT.CF_LOCALE"/></description>
            <description><see cref="T:Vanara.PInvoke.LCID"/></description>
            </item>
            <item>
            <description>
            <see cref="F:Vanara.PInvoke.CLIPFORMAT.CF_OEMTEXT"/>, <see cref="F:Vanara.PInvoke.CLIPFORMAT.CF_TEXT"/>, <see cref="F:Vanara.PInvoke.CLIPFORMAT.CF_UNICODETEXT"/>, <see
            cref="F:Vanara.PInvoke.Shell32.ShellClipboardFormat.CF_CSV"/>, <see cref="F:Vanara.PInvoke.Shell32.ShellClipboardFormat.CF_HTML"/>, <see cref="F:Vanara.PInvoke.Shell32.ShellClipboardFormat.CF_RTF"/>, <see
            cref="F:Vanara.PInvoke.Shell32.ShellClipboardFormat.CF_RTFNOOBJS"/>, <see cref="F:Vanara.PInvoke.Shell32.ShellClipboardFormat.CFSTR_FILENAMEA"/>, <see
            cref="F:Vanara.PInvoke.Shell32.ShellClipboardFormat.CFSTR_FILENAMEW"/>, <see cref="F:Vanara.PInvoke.Shell32.ShellClipboardFormat.CFSTR_INETURLA"/>, <see
            cref="F:Vanara.PInvoke.Shell32.ShellClipboardFormat.CFSTR_INETURLW"/>, <see cref="F:Vanara.PInvoke.Shell32.ShellClipboardFormat.CFSTR_INVOKECOMMAND_DROPPARAM"/>, <see
            cref="F:Vanara.PInvoke.Shell32.ShellClipboardFormat.CFSTR_MOUNTEDVOLUME"/>, <see cref="F:Vanara.PInvoke.Shell32.ShellClipboardFormat.CFSTR_PRINTERGROUP"/>, <see cref="F:Vanara.PInvoke.Shell32.ShellClipboardFormat.CFSTR_SHELLURL"/>
            </description>
            <description><see cref="T:System.String"/></description>
            </item>
            <item>
            <description><see cref="F:Vanara.PInvoke.Shell32.ShellClipboardFormat.CFSTR_DROPDESCRIPTION"/></description>
            <description><see cref="T:Vanara.PInvoke.Shell32.DROPDESCRIPTION"/></description>
            </item>
            <item>
            <description><see cref="F:Vanara.PInvoke.Shell32.ShellClipboardFormat.CFSTR_FILE_ATTRIBUTES_ARRAY"/></description>
            <description><see cref="T:Vanara.PInvoke.Shell32.FILE_ATTRIBUTES_ARRAY"/></description>
            </item>
            <item>
            <description><see cref="F:Vanara.PInvoke.Shell32.ShellClipboardFormat.CFSTR_FILECONTENTS"/></description>
            <description><see cref="T:System.Runtime.InteropServices.ComTypes.IStream"/></description>
            </item>
            <item>
            <description><see cref="F:Vanara.PInvoke.Shell32.ShellClipboardFormat.CFSTR_FILEDESCRIPTORA"/>, <see cref="F:Vanara.PInvoke.Shell32.ShellClipboardFormat.CFSTR_FILEDESCRIPTORW"/></description>
            <description><see cref="T:Vanara.PInvoke.Shell32.FILEGROUPDESCRIPTOR"/></description>
            </item>
            <item>
            <description><see cref="F:Vanara.PInvoke.Shell32.ShellClipboardFormat.CFSTR_INDRAGLOOP"/></description>
            <description><see cref="T:Vanara.BOOL"/></description>
            </item>
            <item>
            <description>
            <see cref="F:Vanara.PInvoke.Shell32.ShellClipboardFormat.CFSTR_LOGICALPERFORMEDDROPEFFECT"/>, <see cref="F:Vanara.PInvoke.Shell32.ShellClipboardFormat.CFSTR_PASTESUCCEEDED"/>,
            <see cref="F:Vanara.PInvoke.Shell32.ShellClipboardFormat.CFSTR_PERFORMEDDROPEFFECT"/>, <see cref="F:Vanara.PInvoke.Shell32.ShellClipboardFormat.CFSTR_PREFERREDDROPEFFECT"/>
            </description>
            <description><see cref="T:Vanara.PInvoke.Ole32.DROPEFFECT"/></description>
            </item>
            <item>
            <description><see cref="F:Vanara.PInvoke.Shell32.ShellClipboardFormat.CFSTR_NETRESOURCES"/></description>
            <description><see cref="T:Vanara.PInvoke.Shell32.NRESARRAY"/></description>
            </item>
            <item>
            <description><see cref="F:Vanara.PInvoke.Shell32.ShellClipboardFormat.CFSTR_SHELLDROPHANDLER"/>, <see cref="F:Vanara.PInvoke.Shell32.ShellClipboardFormat.CFSTR_TARGETCLSID"/></description>
            <description><see cref="T:System.Guid"/></description>
            </item>
            <item>
            <description><see cref="F:Vanara.PInvoke.Shell32.ShellClipboardFormat.CFSTR_SHELLIDLIST"/></description>
            <description><see cref="T:Vanara.PInvoke.Shell32.IShellItemArray"/>
            </description>
            </item>
            <item>
            <description><see cref="F:Vanara.PInvoke.Shell32.ShellClipboardFormat.CFSTR_SHELLIDLISTOFFSET"/></description>
            <description><see cref="T:Vanara.PInvoke.POINT"/>[]</description>
            </item>
            <item>
            <description><see cref="F:Vanara.PInvoke.Shell32.ShellClipboardFormat.CFSTR_UNTRUSTEDDRAGDROP"/>, <see cref="F:Vanara.PInvoke.Shell32.ShellClipboardFormat.CFSTR_ZONEIDENTIFIER"/></description>
            <description><see cref="T:System.UInt32"/></description>
            </item>
            </list>
            </returns>
            <exception cref="T:System.InvalidOperationException">Unrecognized TYMED value.</exception>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.GetData``1(System.Runtime.InteropServices.ComTypes.IDataObject,System.String,System.Int32,System.Runtime.InteropServices.CharSet)">
            <summary>Obtains data from a source data object.</summary>
            <typeparam name="T">The type of the object being retrieved.</typeparam>
            <param name="dataObj">The data object.</param>
            <param name="format">Specifies the particular clipboard format of interest.</param>
            <param name="index">
            Part of the aspect when the data must be split across page boundaries. The most common value is -1, which identifies all of the
            data. For the aspects DVASPECT_THUMBNAIL and DVASPECT_ICON, lindex is ignored.
            </param>
            <param name="charSet">The character set to use for string types.</param>
            <returns>The object associated with the request. If no object can be determined, <c>default(T)</c> is returned.</returns>
            <exception cref="T:System.ArgumentException">This format does not support direct type access. - formatId</exception>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.GetData``1(System.Runtime.InteropServices.ComTypes.IDataObject,System.UInt32,System.Int32,System.Runtime.InteropServices.CharSet)">
            <summary>Obtains data from a source data object.</summary>
            <typeparam name="T">The type of the object being retrieved.</typeparam>
            <param name="dataObj">The data object.</param>
            <param name="formatId">Specifies the particular clipboard format of interest.</param>
            <param name="index">
            Part of the aspect when the data must be split across page boundaries. The most common value is -1, which identifies all of the
            data. For the aspects DVASPECT_THUMBNAIL and DVASPECT_ICON, lindex is ignored.
            </param>
            <param name="charSet">The character set to use for string types.</param>
            <returns>The object associated with the request. If no object can be determined, <c>default(T)</c> is returned.</returns>
            <exception cref="T:System.ArgumentException">This format does not support direct type access. - formatId</exception>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.GetFileNameMap(System.Runtime.InteropServices.ComTypes.IDataObject)">
            <summary>
            This is used when a group of files in CF_HDROP (FileDrop) format is being renamed as well as transferred. The data consists of an
            array that contains a new name for each file, in the same order that the files are listed in the accompanying CF_HDROP format.
            The format of the character array is the same as that used by CF_HDROP to list the transferred files.
            </summary>
            <returns>A list of strings containing a new name for each file.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.GetHtmlFromClipboard(System.Byte[])">
            <summary>Gets an HTML string from bytes returned from the clipboard.</summary>
            <param name="bytes">The bytes from the clipboard.</param>
            <returns>The string representing the HTML.</returns>
            <exception cref="T:System.InvalidOperationException">HTML format header cannot be processed.</exception>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.GetText(System.Runtime.InteropServices.ComTypes.IDataObject,System.UInt32)">
            <summary>Gets the text from the native Clipboard in the specified format.</summary>
            <param name="dataObj">The data object.</param>
            <param name="formatId">A clipboard format. For a description of the standard clipboard formats, see Standard Clipboard Formats.</param>
            <returns>The string value or <see langword="null"/> if the format is not available.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.GetText(System.Runtime.InteropServices.ComTypes.IDataObject,System.String)">
            <summary>Gets the text from the native Clipboard in the specified format.</summary>
            <param name="dataObj">The data object.</param>
            <param name="format">A clipboard format. For a description of the standard clipboard formats, see Standard Clipboard Formats.</param>
            <returns>The string value or <see langword="null"/> if the format is not available.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IsFormatAvailable(System.Runtime.InteropServices.ComTypes.IDataObject,System.UInt32)">
            <summary>
            Determines whether the data object is capable of rendering the data described in the parameters. Objects attempting a paste or
            drop operation can call this method before calling GetData to get an indication of whether the operation may be successful.
            </summary>
            <param name="dataObj">The data object.</param>
            <param name="formatId">Specifies the particular clipboard format of interest.</param>
            <returns><see langword="true"/> if <paramref name="formatId"/> is available; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SetData(System.Runtime.InteropServices.ComTypes.IDataObject,System.String,System.Object,System.Runtime.InteropServices.ComTypes.DVASPECT,System.Int32)">
            <summary>Transfer a data stream to an object that contains a data source.</summary>
            <param name="dataObj">The data object.</param>
            <param name="format">Specifies the particular clipboard format of interest.</param>
            <param name="obj">The object to add.</param>
            <param name="aspect">
            Indicates how much detail should be contained in the rendering. This parameter should be one of the DVASPECT enumeration values.
            A single clipboard format can support multiple aspects or views of the object. Most data and presentation transfer and caching
            methods pass aspect information. For example, a caller might request an object's iconic picture, using the metafile clipboard
            format to retrieve it. Note that only one DVASPECT value can be used in dwAspect. That is, dwAspect cannot be the result of a
            Boolean OR operation on several DVASPECT values.
            </param>
            <param name="index">
            Part of the aspect when the data must be split across page boundaries. The most common value is -1, which identifies all of the
            data. For the aspects DVASPECT_THUMBNAIL and DVASPECT_ICON, lindex is ignored.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SetData(System.Runtime.InteropServices.ComTypes.IDataObject,System.UInt32,System.Object,System.Runtime.InteropServices.ComTypes.DVASPECT,System.Int32)">
            <summary>Transfer a data stream to an object that contains a data source.</summary>
            <param name="dataObj">The data object.</param>
            <param name="formatId">Specifies the particular clipboard format of interest.</param>
            <param name="obj">The object to add.</param>
            <param name="aspect">
            Indicates how much detail should be contained in the rendering. This parameter should be one of the DVASPECT enumeration values.
            A single clipboard format can support multiple aspects or views of the object. Most data and presentation transfer and caching
            methods pass aspect information. For example, a caller might request an object's iconic picture, using the metafile clipboard
            format to retrieve it. Note that only one DVASPECT value can be used in dwAspect. That is, dwAspect cannot be the result of a
            Boolean OR operation on several DVASPECT values.
            </param>
            <param name="index">
            Part of the aspect when the data must be split across page boundaries. The most common value is -1, which identifies all of the
            data. For the aspects DVASPECT_THUMBNAIL and DVASPECT_ICON, lindex is ignored.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SetData``1(System.Runtime.InteropServices.ComTypes.IDataObject,System.String,``0,System.Int32)">
            <summary>Transfer a data stream to an object that contains a data source.</summary>
            <typeparam name="T">The type of the object being passed.</typeparam>
            <param name="dataObj">The data object.</param>
            <param name="format">Specifies the particular clipboard format of interest.</param>
            <param name="obj">The object to add.</param>
            <param name="index">
            Part of the aspect when the data must be split across page boundaries. The most common value is -1, which identifies all of the
            data. For the aspects DVASPECT_THUMBNAIL and DVASPECT_ICON, lindex is ignored.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SetData``1(System.Runtime.InteropServices.ComTypes.IDataObject,System.UInt32,``0,System.Int32)">
            <summary>Transfer a data stream to an object that contains a data source.</summary>
            <typeparam name="T">The type of the object being passed.</typeparam>
            <param name="dataObj">The data object.</param>
            <param name="formatId">Specifies the particular clipboard format of interest.</param>
            <param name="obj">The object to add.</param>
            <param name="index">
            Part of the aspect when the data must be split across page boundaries. The most common value is -1, which identifies all of the
            data. For the aspects DVASPECT_THUMBNAIL and DVASPECT_ICON, lindex is ignored.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SetText(System.Runtime.InteropServices.ComTypes.IDataObject,System.String,System.String,System.String)">
            <summary>Sets multiple text types to the data object.</summary>
            <param name="dataObj">The data object.</param>
            <param name="text">The Unicode Text value.</param>
            <param name="htmlText">The HTML text value. If <see langword="null"/>, this format will not be set.</param>
            <param name="rtfText">The Rich Text Format value. If <see langword="null"/>, this format will not be set.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SetUrl(System.Runtime.InteropServices.ComTypes.IDataObject,System.String,System.String)">
            <summary>Sets a URL with optional title to a data object.</summary>
            <param name="dataObj">The data object.</param>
            <param name="url">The URL.</param>
            <param name="title">The title. This value can be <see langword="null"/>.</param>
            <exception cref="T:System.ArgumentNullException">url</exception>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.TryGetData``1(System.Runtime.InteropServices.ComTypes.IDataObject,System.UInt32,``0@,System.Int32)">
            <summary>Obtains data from a source data object.</summary>
            <typeparam name="T">The type of the object being retrieved.</typeparam>
            <param name="dataObj">The data object.</param>
            <param name="formatId">Specifies the particular clipboard format of interest.</param>
            <param name="obj">The object associated with the request. If no object can be determined, <c>default(T)</c> is returned.</param>
            <param name="index">
            Part of the aspect when the data must be split across page boundaries. The most common value is -1, which identifies all of the
            data. For the aspects DVASPECT_THUMBNAIL and DVASPECT_ICON, lindex is ignored.
            </param>
            <returns><see langword="true"/> if data is available and retrieved; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.UnicodeToAnsiBytes(System.String)">
            <summary>Converts an Unicode string to ANSI.</summary>
            <param name="value">The Unicode string value.</param>
            <returns>The ANSI string value.</returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.CIDA">
            <summary>
            <para>
            Used with the CFSTR_SHELLIDLIST clipboard format to transfer the pointer to an item identifier list (PIDL) of one or more Shell
            namespace objects.
            </para>
            </summary>
            <remarks>
            <para>
            To use this structure to retrieve a particular PIDL, add the <c>aoffset</c> value of the PIDL to the address of the structure.
            The following two macros can be used to retrieve PIDLs from the structure. The first retrieves the PIDL of the parent folder. The
            second retrieves a PIDL, specified by its zero-based index.
            </para>
            <para>
            The value that is returned by these macros is a pointer to the ITEMIDLIST structure. Since these structures vary in length, you
            must determine the end of the structure by parsing it. See NameSpace for further discussion of PIDLs and the <c>ITEMIDLIST</c> structure.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CIDA.cidl">
            <summary>
            <para>Type: <c>UINT</c></para>
            <para>The number of PIDLs that are being transferred, not including the parent folder.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CIDA.aoffset">
            <summary>
            <para>Type: <c>UINT[1]</c></para>
            <para>
            An array of offsets, relative to the beginning of this structure. The array contains <c>cidl</c>+1 elements. The first
            element of <c>aoffset</c> contains an offset to the fully qualified PIDL of a parent folder. If this PIDL is empty, the
            parent folder is the desktop. Each of the remaining elements of the array contains an offset to one of the PIDLs to be
            transferred. All of these PIDLs are relative to the PIDL of the parent folder.
            </para>
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.CIDA.GetFolderPIDL">
            <summary>Gets the folder PIDL from <see cref="F:Vanara.PInvoke.Shell32.CIDA.aoffset"/>.</summary>
            <returns>A PIDL.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.CIDA.GetItemRelativePIDL(System.Int32)">
            <summary>Gets the item relative PIDL from <see cref="F:Vanara.PInvoke.Shell32.CIDA.aoffset"/> at the specified index.</summary>
            <param name="childIndex">Index of the child PIDL.</param>
            <returns>A PIDL.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">childIndex</exception>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.DROPDESCRIPTION">
            <summary>Describes the image and accompanying text for a drop object.</summary>
            <remarks>
            Some UI coloring is applied to the text in szInsert if used by specifying %1 in szMessage. The characters %% and %1 are the
            subset of FormatMessage markers that are processed here.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DROPDESCRIPTION.type">
            <summary>A DROPIMAGETYPE indicating the stock image to use.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DROPDESCRIPTION.szMessage">
            <summary>Text such as "Move to %1".</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DROPDESCRIPTION.szInsert">
            <summary>Text such as "Documents", inserted as specified by szMessage.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.DROPFILES">
            <summary>
            <para>Defines the CF_HDROP clipboard format. The data that follows is a double null-terminated list of file names.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DROPFILES.pFiles">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The offset of the file list from the beginning of this structure, in bytes.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DROPFILES.pt">
            <summary>
            <para>Type: <c>POINT</c></para>
            <para>The drop point. The coordinates depend on <c>fNC</c>.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DROPFILES.fNC">
            <summary>
            <para>Type: <c>BOOL</c></para>
            <para>
            A nonclient area flag. If this member is <c>TRUE</c>, <c>pt</c> specifies the screen coordinates of a point in a window's
            nonclient area. If it is <c>FALSE</c>, <c>pt</c> specifies the client coordinates of a point in the client area.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DROPFILES.fWide">
            <summary>
            <para>Type: <c>BOOL</c></para>
            <para>
            A value that indicates whether the file contains ANSI or Unicode characters. If the value is zero, the file contains ANSI
            characters. Otherwise, it contains Unicode characters.
            </para>
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.DROPFILES.DangerousGetFileList(System.IntPtr)">
            <summary>
            Gets the file name array appended to a <see cref="T:Vanara.PInvoke.Shell32.DROPFILES"/> struture in memory. It consists of a series of strings, each
            containing one file's fully qualified path. This method should only be called when <paramref name="pDropFiles"/> is a valid
            pointer to a <see cref="T:Vanara.PInvoke.Shell32.DROPFILES"/> structure.
            </summary>
            <returns>The file list.</returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.FILE_ATTRIBUTES_ARRAY">
            <summary>Contains the clipboard format definition for CFSTR_FILE_ATTRIBUTES_ARRAY.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FILE_ATTRIBUTES_ARRAY.cItems">
            <summary>
            <para>Type: <c>UINT</c></para>
            <para>The number of items in the <c>rgdwFileAttributes</c> array.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FILE_ATTRIBUTES_ARRAY.dwSumFileAttributes">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>All of the attributes combined using OR.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FILE_ATTRIBUTES_ARRAY.dwProductFileAttributes">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>All of the attributes combined using AND.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FILE_ATTRIBUTES_ARRAY.rgdwFileAttributes">
            <summary>
            <para>Type: <c>DWORD[1]</c></para>
            <para>An array of file attributes.</para>
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.FILE_ATTRIBUTES_ARRAY.#ctor(System.Collections.Generic.IEnumerable{Vanara.PInvoke.FileFlagsAndAttributes})">
            <summary>
            Initializes a new instance of the <see cref="T:Vanara.PInvoke.Shell32.FILE_ATTRIBUTES_ARRAY"/> struct from a sequence of <see
            cref="T:Vanara.PInvoke.FileFlagsAndAttributes"/> values.
            </summary>
            <param name="fileAttrs">The sequence of file attributes.</param>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.FILEDESCRIPTOR">
            <summary>
            Describes the properties of a file that is being copied by means of the clipboard during a Microsoft ActiveX drag-and-drop operation.
            </summary>
            <remarks>
            <para>
            If the CFSTR_FILECONTENTS format that corresponds to this structure contains the file as a global memory object,
            <c>nFileSizeHigh</c> and <c>nFileSizeLow</c> specify the size of the associated memory block. If they are set, they can also be
            used if a user-interface needs to be displayed. For example, if a file is about to be overwritten, you would typically use
            information from this structure to display a dialog box containing the size, data, and name of the file.
            </para>
            <para>
            To create a zero-length file, set the <c>FD_FILESIZE</c> flag in the <c>dwFlags</c>, and set <c>nFileSizeHigh</c> and
            <c>nFileSizeLow</c> to zero. The CFSTR_FILECONTENTS format should represent the file as either a stream or global memory object
            (TYMED_ISTREAM or TYMED_HGLOBAL).
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FILEDESCRIPTOR.dwFlags">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>
            An array of flags that indicate which of the other structure members contain valid data. This member can be a combination of
            the following values.
            </para>
            <para>FD_CLSID (0x00000001)</para>
            <para>0x00000001. The <c>clsid</c> member is valid.</para>
            <para>FD_SIZEPOINT (0x00000002)</para>
            <para>0x00000002. The <c>sizel</c> and <c>pointl</c> members are valid.</para>
            <para>FD_ATTRIBUTES (0x00000004)</para>
            <para>0x00000004. The <c>dwFileAttributes</c> member is valid.</para>
            <para>FD_CREATETIME (0x00000008)</para>
            <para>0x00000008. The <c>ftCreationTime</c> member is valid.</para>
            <para>FD_ACCESSTIME (0x00000010)</para>
            <para>0x00000010. The <c>ftLastAccessTime</c> member is valid.</para>
            <para>FD_WRITESTIME (0x00000020)</para>
            <para>0x00000020. The <c>ftLastWriteTime</c> member is valid.</para>
            <para>FD_FILESIZE (0x00000040)</para>
            <para>0x00000040. The <c>nFileSizeHigh</c> and <c>nFileSizeLow</c> members are valid.</para>
            <para>FD_PROGRESSUI (0x00004000)</para>
            <para>0x00004000. A progress indicator is shown with drag-and-drop operations.</para>
            <para>FD_LINKUI (0x00008000)</para>
            <para>0x00008000. Treat the operation as a shortcut.</para>
            <para>FD_UNICODE ((int)0x80000000)</para>
            <para>(int)0x80000000. <c>Windows Vista and later</c>. The descriptor is Unicode.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FILEDESCRIPTOR.clsid">
            <summary>
            <para>Type: <c>CLSID</c></para>
            <para>The file type identifier.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FILEDESCRIPTOR.sizel">
            <summary>
            <para>Type: <c>SIZEL</c></para>
            <para>The width and height of the file icon.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FILEDESCRIPTOR.pointl">
            <summary>
            <para>Type: <c>POINTL</c></para>
            <para>The screen coordinates of the file object.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FILEDESCRIPTOR.dwFileAttributes">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>File attribute flags. This will be a combination of the FILE_ATTRIBUTE_ values described in GetFileAttributes.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FILEDESCRIPTOR.ftCreationTime">
            <summary>
            <para>Type: <c>FILETIME</c></para>
            <para>The FILETIME structure that contains the time of file creation.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FILEDESCRIPTOR.ftLastAccessTime">
            <summary>
            <para>Type: <c>FILETIME</c></para>
            <para>The FILETIME structure that contains the time that the file was last accessed.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FILEDESCRIPTOR.ftLastWriteTime">
            <summary>
            <para>Type: <c>FILETIME</c></para>
            <para>The FILETIME structure that contains the time of the last write operation.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FILEDESCRIPTOR.nFileSizeHigh">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The high-order <c>DWORD</c> of the file size, in bytes.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FILEDESCRIPTOR.nFileSizeLow">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The low-order <c>DWORD</c> of the file size, in bytes.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FILEDESCRIPTOR.cFileName">
            <summary>
            <para>Type: <c>TCHAR[MAX_PATH]</c></para>
            <para>The null-terminated string that contains the name of the file.</para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.FILEDESCRIPTOR.nFileSize">
            <summary>The file size, in bytes.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.FILEDESCRIPTOR.op_Implicit(System.IO.FileSystemInfo)~Vanara.PInvoke.Shell32.FILEDESCRIPTOR">
            <summary>Performs an implicit conversion from <see cref="T:System.IO.FileSystemInfo"/> to <see cref="T:Vanara.PInvoke.Shell32.FILEDESCRIPTOR"/>.</summary>
            <param name="fi">The <see cref="T:System.IO.FileSystemInfo"/> instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.FILEDESCRIPTOR.op_Implicit(System.IO.FileInfo)~Vanara.PInvoke.Shell32.FILEDESCRIPTOR">
            <summary>Performs an implicit conversion from <see cref="T:System.IO.FileInfo"/> to <see cref="T:Vanara.PInvoke.Shell32.FILEDESCRIPTOR"/>.</summary>
            <param name="fi">The <see cref="T:System.IO.FileInfo"/> instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.FILEGROUPDESCRIPTOR">
            <summary>Defines the CF_FILEGROUPDESCRIPTOR clipboard format.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FILEGROUPDESCRIPTOR.cItems">
            <summary>
            <para>Type: <c>UINT</c></para>
            <para>The number of elements in <c>fgd</c>.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FILEGROUPDESCRIPTOR.fgd">
            <summary>
            <para>Type: <c>FILEDESCRIPTOR[1]</c></para>
            <para>An array of FILEDESCRIPTOR structures that contain the file information.</para>
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.FILEGROUPDESCRIPTOR.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.FILEGROUPDESCRIPTOR.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.NETRESOURCE">
            <summary>
            <para>
            The following structure contains information about a network resource. It is used by several of the network provider functions,
            including NPOpenEnum and NPAddConnection.
            </para>
            <note type="note">This is a duplicate of the structure in the <c>Vanara.PInvoke.Mpr</c> library. Here, however, the string values
            must be represented as offsets within the memory.</note>
            </summary>
            <remarks>
            <note type="">The winnetwk.h header defines NETRESOURCE as an alias which automatically selects the ANSI or Unicode version of
            this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code
            that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see
            Conventions for Function Prototypes.</note>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NETRESOURCE.dwScope">
            <summary>
            <para>Indicates the scope of the enumeration. This can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term><c>RESOURCE_CONNECTED</c></term>
            <term>Current connections to network resources.</term>
            </item>
            <item>
            <term><c>RESOURCE_GLOBALNET</c></term>
            <term>All network resources. These may or may not be connected.</term>
            </item>
            <item>
            <term><c>RESOURCE_CONTEXT</c></term>
            <term>The network resources associated with the user's current and default network context. The meaning of this is provider-specific.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NETRESOURCE.dwType">
            <summary>
            <para>Indicates the resource type. This can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term><c>RESOURCETYPE_DISK</c></term>
            <term>The resource is a shared disk volume.</term>
            </item>
            <item>
            <term><c>RESOURCETYPE_PRINT</c></term>
            <term>The resource is a shared printer.</term>
            </item>
            <item>
            <term><c>RESOURCETYPE_ANY</c></term>
            <term>
            The resource matches more than one type, for example, a container of both print and disk resources, or a resource which is
            neither print or disk.
            </term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NETRESOURCE.dwDisplayType">
            <summary>
            <para>
            Set by the provider to indicate what display type a user interface should use to represent this resource. The following types
            are defined.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term><c>RESOURCEDISPLAYTYPE_NETWORK</c></term>
            <term>The resource is a network provider.</term>
            </item>
            <item>
            <term><c>RESOURCEDISPLAYTYPE_DOMAIN</c></term>
            <term>The resource is a collection of servers.</term>
            </item>
            <item>
            <term><c>RESOURCEDISPLAYTYPE_SERVER</c></term>
            <term>The resource is a server.</term>
            </item>
            <item>
            <term><c>RESOURCEDISPLAYTYPE_SHARE</c></term>
            <term>The resource is a share point.</term>
            </item>
            <item>
            <term><c>RESOURCEDISPLAYTYPE_DIRECTORY</c></term>
            <term>The resource is a directory.</term>
            </item>
            <item>
            <term><c>RESOURCEDISPLAYTYPE_GENERIC</c></term>
            <term>The resource type is unspecified. This value is used by network providers that do not specify resource types.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NETRESOURCE.dwUsage">
            <summary>
            <para>
            A bitmask that indicates how you can enumerate information about the resource. It is defined only if <c>dwScope</c> is set to
            RESOURCE_GLOBALNET. The <c>dwUsage</c> field can contain one or more of the following flags.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term><c>RESOURCEUSAGE_CONNECTABLE</c></term>
            <term>
            You can connect to the resource by calling NPAddConnection. If <c>dwType</c> is RESOURCETYPE_DISK, then, after you have
            connected to the resource, you can use the file system APIs, such as FindFirstFile, and FindNextFile, to enumerate any files
            and directories the resource contains.
            </term>
            </item>
            <item>
            <term><c>RESOURCEUSAGE_CONTAINER</c></term>
            <term>
            The resource is a container for other resources that can be enumerated by means of the NPOpenEnum, NPEnumResource, and
            NPCloseEnum functions. The container may, however, be empty at the time the enumeration is made. In other words, the first
            call to NPEnumResource may return WN_NO_MORE_ENTRIES.
            </term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NETRESOURCE.lpLocalName">
            <summary>
            <para>
            If <c>dwScope</c> is RESOURCE_CONNECTED, the <c>lpLocalName</c> field contains the name of a redirected device. If the
            connection is a deviceless connection, this field contains <c>NULL</c>.
            </para>
            <para>If <c>dwScope</c> is not set to RESOURCE_CONNECTED, this field is undefined.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NETRESOURCE.lpRemoteName">
            <summary>
            If the enumerated item is a network resource, this field contains a remote network name. This name may be then passed to
            NPAddConnection to make a network connection if <c>dwUsage</c> is set to RESOURCEUSAGE_CONNECTABLE. If the enumerated item is
            a current connection, this field will refer to the remote network name that <c>lpLocalName</c> is connected to.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NETRESOURCE.lpComment">
            <summary>May be any provider-supplied comment associated with the enumerated item.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NETRESOURCE.lpProvider">
            <summary>Specifies the name of the provider that owns this enumerated item.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.NRESARRAY">
            <summary>Defines the <see cref="F:Vanara.PInvoke.Shell32.ShellClipboardFormat.CFSTR_NETRESOURCES"/> clipboard format.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NRESARRAY.cItems">
            <summary>
            <para>Type: <c>UINT</c></para>
            <para>The number of elements in the <c>nr</c> array.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NRESARRAY.nr">
            <summary>
            <para>Type: <c>NETRESOURCE[1]</c></para>
            <para>
            The array of NETRESOURCE structures that contain information about network resources. The string members ( <c>LPSTR</c>
            types) in the structure contain offsets instead of addresses.
            </para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.SHDRAGIMAGE">
            <summary>
            <para>Contains the information needed to create a drag image.</para>
            </summary>
            <remarks>
            <para>In Windows Vista this structure is defined in Shobjidl.idl. Prior to that, it was defined in Shlobj.h.</para>
            <para>Use the following procedure to create the drag image.</para>
            <list type="number">
            <item>
            <term>
            Create a bitmap of the size specified by <c>sizeDragImage</c> with a handle to a device context (HDC) that is compatible with the screen.
            </term>
            </item>
            <item>
            <term>Draw the bitmap.</term>
            </item>
            <item>
            <term>Select the bitmap out of the HDC it was created with.</term>
            </item>
            <item>
            <term>Destroy the HDC.</term>
            </item>
            <item>
            <term>Assign the bitmap handle to <c>hbmpDragImage</c>.</term>
            </item>
            </list>
            <para>
            <c>Note</c> Turn off antialiasing when drawing text. Otherwise, artifacts could occur at the edges, between the text color and
            the color key.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHDRAGIMAGE.sizeDragImage">
            <summary>
            <para>Type: <c>SIZE</c></para>
            <para>A SIZE structure with the length and width of the drag image.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHDRAGIMAGE.ptOffset">
            <summary>
            <para>Type: <c>POINT</c></para>
            <para>
            A POINT structure that specifies the location of the cursor within the drag image. The structure should contain the offset
            from the upper-left corner of the drag image to the location of the cursor.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHDRAGIMAGE.hbmpDragImage">
            <summary>
            <para>Type: <c>HBITMAP</c></para>
            <para>The drag image's bitmap handle.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHDRAGIMAGE.crColorKey">
            <summary>
            <para>Type: <c>COLORREF</c></para>
            <para>The color used by the control to fill the background of the drag image.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.ShellClipboardFormat">
            <summary>
            <para>
            Shell clipboard formats are used to identify the type of Shell data being transferred through the clipboard. Most Shell clipboard
            formats identify a type of data, such as a list of file names or pointers to item identifier lists (PIDLs). However, some formats
            are used for communication between source and target. They can expedite the data transfer process by supporting Shell operations
            such as optimized move and delete_on_paste. Shell data is always contained in a data object that uses a FORMATETC structure as a
            more general way to characterize data. The structure's cfFormat member is set to the clipboard format for the particular item of
            data. The other members provide additional information, such as the data transfer mechanism. The data is contained in an
            accompanying STGMEDIUM structure.
            </para>
            <note type="note">Standard clipboard format identifiers have the form CF_XXX.A common example is CF_TEXT, which is used for
            transferring ANSI text data. These identifiers have predefined values and can be used directly with FORMATETC structures. With
            the exception of CF_HDROP, Shell format identifiers are not predefined. With the exception of DragWindow, they have the form
            CFSTR_XXX.To differentiate these values from predefined formats, they are often referred to as simply formats. However, unlike
            predefined formats, they must be registered by both source and target before they can be used to transfer data. To register a
            Shell format, include the Shlobj.h header file and pass the CFSTR_XXX format identifier to RegisterClipboardFormat. This function
            returns a valid clipboard format value, which can then be used as the cfFormat member of a FORMATETC structure.</note>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellClipboardFormat.CF_CSV">
            <summary>Comma Separated Value</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellClipboardFormat.CF_HTML">
            <summary>HTML Format</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellClipboardFormat.CF_RETEXTOBJ">
            <summary>RichEdit Text and Objects</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellClipboardFormat.CF_RTF">
            <summary>Rich Text Format</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellClipboardFormat.CF_RTFNOOBJS">
            <summary>Rich Text Format Without Objects</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellClipboardFormat.CFSTR_AUTOPLAY_SHELLIDLISTS">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellClipboardFormat.CFSTR_DROPDESCRIPTION">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellClipboardFormat.CFSTR_FILE_ATTRIBUTES_ARRAY">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellClipboardFormat.CFSTR_FILECONTENTS">
            <summary>
            This format identifier is used with the CFSTR_FILEDESCRIPTOR format to transfer data as if it were a file, regardless of how
            it is actually stored. The data consists of an STGMEDIUM structure that represents the contents of one file. The file is
            normally represented as a stream object, which avoids having to place the contents of the file in memory. In that case, the
            tymed member of the STGMEDIUM structure is set to TYMED_ISTREAM, and the file is represented by an IStream interface. The
            file can also be a storage or global memory object (TYMED_ISTORAGE or TYMED_HGLOBAL). The associated CFSTR_FILEDESCRIPTOR
            format contains a FILEDESCRIPTOR structure for each file that specifies the file's name and attributes.
            <para>
            The target treats the data associated with a CFSTR_FILECONTENTS format as if it were a file. When the target calls
            IDataObject::GetData to extract the data, it specifies a particular file by setting the lindex member of the FORMATETC
            structure to the zero-based index of the file's FILEDESCRIPTOR structure in the accompanying CFSTR_FILEDESCRIPTOR format. The
            target then uses the returned interface pointer or global memory handle to extract the data.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellClipboardFormat.CFSTR_FILEDESCRIPTORA">
            <summary>
            This format identifier is used with the CFSTR_FILECONTENTS format to transfer data as a group of files. These two formats are
            the preferred way to transfer Shell objects that are not stored as file-system files. For example, these formats can be used
            to transfer a group of email messages as individual files, even though each email is actually stored as a block of data in a
            database. The data consists of an STGMEDIUM structure that contains a global memory object. The structure's hGlobal member
            points to a FILEGROUPDESCRIPTOR structure that is followed by an array containing one FILEDESCRIPTOR structure for each file
            in the group. For each FILEDESCRIPTOR structure, there is a separate CFSTR_FILECONTENTS format that contains the contents of
            the file. To identify a particular file's CFSTR_FILECONTENTS format, set the lIndex value of the FORMATETC structure to the
            zero-based index of the file's FILEDESCRIPTOR structure.
            <para>
            The CFSTR_FILEDESCRIPTOR format is commonly used to transfer data as if it were a group of files, regardless of how it is
            actually stored. From the target's perspective, each CFSTR_FILECONTENTS format represents a single file and is treated
            accordingly. However, the source can store the data in any way it chooses. While a CSFTR_FILECONTENTS format might correspond
            to a single file, it could also, for example, represent data extracted by the source from a database or text document.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellClipboardFormat.CFSTR_FILEDESCRIPTORW">
            <summary>
            This format identifier is used with the CFSTR_FILECONTENTS format to transfer data as a group of files. These two formats are
            the preferred way to transfer Shell objects that are not stored as file-system files. For example, these formats can be used
            to transfer a group of email messages as individual files, even though each email is actually stored as a block of data in a
            database. The data consists of an STGMEDIUM structure that contains a global memory object. The structure's hGlobal member
            points to a FILEGROUPDESCRIPTOR structure that is followed by an array containing one FILEDESCRIPTOR structure for each file
            in the group. For each FILEDESCRIPTOR structure, there is a separate CFSTR_FILECONTENTS format that contains the contents of
            the file. To identify a particular file's CFSTR_FILECONTENTS format, set the lIndex value of the FORMATETC structure to the
            zero-based index of the file's FILEDESCRIPTOR structure.
            <para>
            The CFSTR_FILEDESCRIPTOR format is commonly used to transfer data as if it were a group of files, regardless of how it is
            actually stored. From the target's perspective, each CFSTR_FILECONTENTS format represents a single file and is treated
            accordingly. However, the source can store the data in any way it chooses. While a CSFTR_FILECONTENTS format might correspond
            to a single file, it could also, for example, represent data extracted by the source from a database or text document.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellClipboardFormat.CFSTR_FILENAMEA">
            <summary>
            This format identifier is used to transfer a single file. The data consists of an STGMEDIUM structure that contains a global
            memory object. The structure's hGlobal member points to a single null-terminated string containing the file's fully qualified
            file path. This format has been superseded by CF_HDROP, but it is supported for backward compatibility with Windows 3.1 applications.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellClipboardFormat.CFSTR_FILENAMEMAPA">
            <summary>
            This format identifier is used when a group of files in CF_HDROP format is being renamed as well as transferred. The data
            consists of an STGMEDIUM structure that contains a global memory object. The structure's hGlobal member points to a double
            null-terminated character array. This array contains a new name for each file, in the same order that the files are listed in
            the accompanying CF_HDROP format. The format of the character array is the same as that used by CF_HDROP to list the
            transferred files.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellClipboardFormat.CFSTR_FILENAMEMAPW">
            <summary>
            This format identifier is used when a group of files in CF_HDROP format is being renamed as well as transferred. The data
            consists of an STGMEDIUM structure that contains a global memory object. The structure's hGlobal member points to a double
            null-terminated character array. This array contains a new name for each file, in the same order that the files are listed in
            the accompanying CF_HDROP format. The format of the character array is the same as that used by CF_HDROP to list the
            transferred files.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellClipboardFormat.CFSTR_FILENAMEW">
            <summary>
            This format identifier is used to transfer a single file. The data consists of an STGMEDIUM structure that contains a global
            memory object. The structure's hGlobal member points to a single null-terminated string containing the file's fully qualified
            file path. This format has been superseded by CF_HDROP, but it is supported for backward compatibility with Windows 3.1 applications.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellClipboardFormat.CFSTR_INDRAGLOOP">
            <summary>
            This format identifier is used by a data object to indicate whether it is in a drag-and-drop loop. The data is an STGMEDIUM
            structure that contains a global memory object. The structure's hGlobal member points to a DWORD value. If the DWORD value is
            nonzero, the data object is within a drag-and-drop loop. If the value is set to zero, the data object is not within a
            drag-and-drop loop.
            <para>
            Some drop targets might call IDataObject::GetData and attempt to extract data while the object is still within the
            drag-and-drop loop. Fully rendering the object for each such occurrence might cause the drag cursor to stall. If the data
            object supports CFSTR_INDRAGLOOP, the target can instead use that format to check the status of the drag-and-drop loop and
            avoid memory intensive rendering of the object until it is actually dropped. The formats that are memory intensive to render
            should still be included in the FORMATETC enumerator and in calls to IDataObject::QueryGetData.If the data object does not
            set CFSTR_INDRAGLOOP, it should act as if the value is set to zero.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellClipboardFormat.CFSTR_INETURLA">
            <summary>
            This format identifier replaces CFSTR_SHELLURL (deprecated). If you want your application to manipulate clipboard URLs, use
            CFSTR_INETURL instead of CFSTR_SHELLURL (deprecated). This format gives the best clipboard representation of a single URL. If
            UNICODE is not defined, the application retrieves the CF_TEXT/CFSTR_SHELLURL version of the URL. If UNICODE is defined, the
            application retrieves the CF_UNICODE version of the URL.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellClipboardFormat.CFSTR_INETURLW">
            <summary>
            This format identifier replaces CFSTR_SHELLURL (deprecated). If you want your application to manipulate clipboard URLs, use
            CFSTR_INETURL instead of CFSTR_SHELLURL (deprecated). This format gives the best clipboard representation of a single URL. If
            UNICODE is not defined, the application retrieves the CF_TEXT/CFSTR_SHELLURL version of the URL. If UNICODE is defined, the
            application retrieves the CF_UNICODE version of the URL.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellClipboardFormat.CFSTR_INVOKECOMMAND_DROPPARAM">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellClipboardFormat.CFSTR_LOGICALPERFORMEDDROPEFFECT">
            <summary>
            Version 5.0.This format identifier allows a drop source to call the data object's IDataObject::GetData method to determine
            the outcome of a Shell data transfer. The data is an STGMEDIUM structure that contains a global memory object. The
            structure's hGlobal member points to a DWORD containing a DROPEFFECT value.
            <para>
            The CFSTR_PERFORMEDDROPEFFECT format identifier was intended to allow the target to indicate to the data object what
            operation actually took place.However, the Shell uses optimized moves for file system objects whenever possible.In that case,
            the Shell normally sets the CFSTR_PERFORMEDDROPEFFECT value to DROPEFFECT_NONE, to indicate to the data object that the
            original data has been deleted. Thus, the source cannot use the CFSTR_PERFORMEDDROPEFFECT value to determine which operation
            has taken place. While most sources do not need this information, there are some exceptions. For instance, even though
            optimized moves eliminate the need for a source to delete any data, the source might still need to update a related database
            to indicate that the files have been moved or copied.
            </para>
            <para>
            If a source needs to know which operation took place, it can call the data object's IDataObject::GetData method and request
            the CFSTR_LOGICALPERFORMEDDROPEFFECT format. This format essentially reflects what happens from the user's point of view
            after the operation is complete. If a new file is created and the original file is deleted, the user sees a move operation
            and the format's data value is set to DROPEFFECT_MOVE. If the original file is still there, the user sees a copy operation
            and the format's data value is set to DROPEFFECT_COPY. If a link was created, the format's data value will be DROPEFFECT_LINK.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellClipboardFormat.CFSTR_MOUNTEDVOLUME">
            <summary>
            This format identifier is used to transfer a path on a mounted volume. It is similar to CF_HDROP, but it contains only a
            single path and can handle the longer path strings that might be needed to represent a path when the volume is mounted on a
            folder. The data consists of an STGMEDIUM structure that contains a global memory object. The structure's hGlobal member
            points to a single null-terminated string containing the fully qualified file path. The path string must end with a '\'
            character, followed by the terminating NULL.
            <para>
            Prior to Windows 2000, volumes could be mounted only on drive letters. For Windows 2000 and later systems with an NTFS
            formatted drive, you can also mount volumes on empty folders. This feature allows a volume to be mounted without taking up a
            drive letter. The mounted volume can use any currently supported format, including FAT, FAT32, NTFS, and CDFS.
            </para>
            <para>
            You can add pages to a Drive Properties property sheet by implementing a property sheet handler. If the volume is mounted on
            a drive letter, the Shell passes path information to the handler with the CF_HDROP format. With Windows 2000 and later
            systems, the CF_HDROP format is used when a volume is mounted on a drive letter, just as with earlier systems.However, if a
            volume is mounted on a folder, the CFSTR_MOUNTEDVOLUME format identifier is used instead of CF_HDROP.
            </para>
            <para>
            If only drive letters will be used to mount volumes, only CF_HDROP will be used, and existing property sheet handlers will
            work as they did with earlier systems.However, if you want your handler to display a page for volumes that are mounted on
            folders as well as drive letters, the handler must be able to understand both the CSFTR_MOUNTEDVOLUME and CF_HDROP formats.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellClipboardFormat.CFSTR_NETRESOURCES">
            <summary>
            This format identifier is used when transferring network resources, such as a domain or server. The data is an STGMEDIUM
            structure that contains a global memory object. The structure's hGlobal member points to a NRESARRAY structure. The nr member
            of that structure indicates a NETRESOURCE structure whose lpRemoteName member contains a null-terminated string identifying
            the network resource. The drop target can then use the data with any of the Windows Networking (WNet) API functions, such as
            WNetAddConnection, to perform network operations on the object.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellClipboardFormat.CFSTR_PASTESUCCEEDED">
            <summary>
            This format identifier is used by the target to inform the data object, through its IDataObject::SetData method, that a
            delete-on-paste operation succeeded. The data is an STGMEDIUM structure that contains a global memory object. The structure's
            hGlobal member points to a DWORD containing a DROPEFFECT value. This format is used to notify the data object that it should
            complete the cut operation and delete the original data, if necessary. For more information, see Delete-on-Paste Operations.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellClipboardFormat.CFSTR_PERFORMEDDROPEFFECT">
            <summary>
            This format identifier is used by the target to inform the data object through its IDataObject::SetData method of the outcome
            of a data transfer. The data is an STGMEDIUM structure that contains a global memory object. The structure's hGlobal member
            points to a DWORD set to the appropriate DROPEFFECT value, normally DROPEFFECT_MOVE or DROPEFFECT_COPY.
            <para>
            This format is normally used when the outcome of an operation can be either move or copy, such as in an optimized move or
            delete-on-paste operation.It provides a reliable way for the target to tell the data object what actually happened. It was
            introduced because the value of pdwEffect returned by DoDragDrop did not reliably indicate which operation had taken place.
            The CFSTR_PERFORMEDDROPEFFECT format is the reliable way to indicate that an unoptimized move has taken place.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellClipboardFormat.CFSTR_PERSISTEDDATAOBJECT">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellClipboardFormat.CFSTR_PREFERREDDROPEFFECT">
            <summary>
            <para>
            This format identifier is used by the source to specify whether its preferred method of data transfer is move or copy. A drop
            target requests this format by calling the data object's IDataObject::GetData method. The data is an STGMEDIUM structure that
            contains a global memory object. The structure's hGlobal member points to a DWORD value. This value is set to DROPEFFECT_MOVE
            if a move operation is preferred or DROPEFFECT_COPY if a copy operation is preferred.
            </para>
            <para>
            This feature is used when a source can support either a move or copy operation. It uses the CFSTR_PREFERREDDROPEFFECT format
            to communicate its preference to the target. Because the target is not obligated to honor the request, the target must call
            the source's IDataObject::SetData method with a CFSTR_PERFORMEDDROPEFFECT format to tell the data object which operation was
            actually performed.
            </para>
            <para>
            With a delete-on-paste operation, the CFSTR_PREFERREDDROPFORMAT format is used to tell the target whether the source did a
            cut or copy. With a drag-and-drop operation, you can use CFSTR_PREFERREDDROPFORMAT to specify the Shell's action. If this
            format is not present, the Shell performs a default action, based on context. For instance, if a user drags a file from one
            volume and drops it on another volume, the Shell's default action is to copy the file. By including a
            CFSTR_PREFERREDDROPFORMAT format in the data object, you can override the default action and explicitly tell the Shell to
            copy, move, or link the file. If the user chooses to drag with the right button, CFSTR_PREFERREDDROPFORMAT specifies the
            default command on the drag-and-drop shortcut menu. The user is still free to choose other commands on the menu.
            </para>
            <para>
            Before Microsoft Internet Explorer 4.0, an application indicated that it was transferring shortcut file types by setting
            FD_LINKUI in the dwFlags member of the FILEDESCRIPTOR structure. Targets then had to use a potentially time-consuming call to
            IDataObject::GetData to find out if the FD_LINKUI flag was set. Now, the preferred way to indicate that shortcuts are being
            transferred is to use the CFSTR_PREFERREDDROPEFFECT format set to DROPEFFECT_LINK. However, for backward compatibility with
            older systems, sources should still set the FD_LINKUI flag.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellClipboardFormat.CFSTR_PRINTERGROUP">
            <summary>
            This format identifier is used when transferring the friendly names of printers. The data is an STGMEDIUM structure that
            contains a global memory object. The structure's hGlobal member points to a string in the same format as that used with
            CF_HDROP. However, the pFiles member of the DROPFILES structure contains one or more friendly names of printers instead of
            file paths.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellClipboardFormat.CFSTR_SHELLDROPHANDLER">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellClipboardFormat.CFSTR_SHELLIDLIST">
             <summary>
               <para>This format identifier is used when transferring the locations of one or more existing namespace objects. It is used in much the same way as CF_HDROP, but it contains PIDLs instead of file system paths. Using PIDLs allows the CFSTR_SHELLIDLIST format to handle virtual objects as well as file system objects. The data is an STGMEDIUM structure that contains a global memory object. The structure's hGlobal member points to a CIDA structure.</para>
               <para>The aoffset member of the CIDA structure is an array containing offsets to the beginning of the ITEMIDLIST structure for each PIDL that is being transferred. To extract a particular PIDL, first determine its index. Then, add the aoffset value that corresponds to that index to the address of the CIDA structure.</para>
               <para>The first element of aoffset contains an offset to the fully qualified PIDL of a parent folder. If this PIDL is empty, the parent folder is the desktop. Each of the remaining elements of the array contains an offset to one of the PIDLs to be transferred. All of these PIDLs are relative to the PIDL of the parent folder.</para>
               <para>The following two macros can be used to retrieve PIDLs from a CIDA structure. The first takes a pointer to the structure and retrieves the PIDL of the parent folder. The second takes a pointer to the structure and retrieves one of the other PIDLs, identified by its zero-based index.</para>
               <code lang="cpp">#define GetPIDLFolder(pida) (LPCITEMIDLIST)(((LPBYTE)pida)+(pida)-&gt;aoffset[0])
            #define GetPIDLItem(pida, i) (LPCITEMIDLIST)(((LPBYTE)pida)+(pida)-&gt;aoffset[i+1])</code>
               <note type="note">The value that is returned by these macros is a pointer to the PIDL's ITEMIDLIST structure. Since these structures vary in length, you must determine the end of the structure by walking through each of the ITEMIDLIST structure's SHITEMID structures until you reach the two-byte NULL that marks the end.</note>
             </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellClipboardFormat.CFSTR_SHELLIDLISTOFFSET">
            <summary>
            This format identifier is used with formats such as CF_HDROP, CFSTR_SHELLIDLIST, and CFSTR_FILECONTENTS to specify the
            position of a group of objects following a transfer. The data consists of an STGMEDIUM structure that contains a global
            memory object. The structure's hGlobal member points to an array of POINT structures. The first structure specifies the
            screen coordinates, in pixels, of the upper-left corner of the rectangle that encloses the group. The remainder of the
            structures specify the locations of the individual objects relative to the group's position. They must be in the same order
            as that used to list the objects in the associated format.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellClipboardFormat.CFSTR_SHELLURL">
            <summary><note type="note">This format identifier has been deprecated; use <see cref="F:Vanara.PInvoke.Shell32.ShellClipboardFormat.CFSTR_INETURLA"/> instead.</note></summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellClipboardFormat.CFSTR_TARGETCLSID">
            <summary>
            <para>
            This format identifier is used by a target to provide its CLSID to the source. The data is an STGMEDIUM structure that
            contains a global memory object. The structure's hGlobal member points to the CLSID GUID of the drop target.
            </para>
            <para>
            This format is used primarily to allow objects to be deleted by dragging them to the Recycle Bin. When an object is dropped
            in the Recycle Bin, the source's IDataObject::SetData method is called with a CFSTR_TARGETCLSID format set to the Recycle
            Bin's CLSID (CLSID_RecycleBin). The source can then delete the original object.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellClipboardFormat.CFSTR_UNTRUSTEDDRAGDROP">
            <summary>
            <para>
            This format identifier is used by Windows Internet Explorer and the Windows Shell to provide a mechanism through which to
            block or prompt for drag-and-drop operations originating from Internet Explorer in conjunction with the
            URLACTION_SHELL_ENHANCED_DRAGDROP_SECURITY flag.
            </para>
            <para>
            CFSTR_UNTRUSTEDDRAGDROP is added by the source of a drag-and-drop operation to specify that the data object might contain
            untrustworthy data. The data is represented by an STGMEDIUM structure that contains a global memory object. The structure's
            hGlobal member points to a DWORD set to an appropriate URL Action flag to cause a policy check through the
            IInternetSecurityManager::ProcessUrlAction method, using the PUAF_ENFORCERESTRICTED flag.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellClipboardFormat.CFSTR_ZONEIDENTIFIER">
            <summary>Undocumented.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ShellClipboardFormat.GetName(System.UInt32)">
            <summary>Retrieves from the clipboard the name of the specified registered format.</summary>
            <param name="formatId">The type of format to be retrieved.</param>
            <returns>The format name.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ShellClipboardFormat.Register(System.String)">
            <summary>Registers a new clipboard format. This format can then be used as a valid clipboard format.</summary>
            <param name="format">The name of the new format.</param>
            <returns>The registered clipboard format identifier.</returns>
            <exception cref="T:System.ArgumentNullException">format</exception>
            <remarks>
            If a registered format with the specified name already exists, a new format is not registered and the return value identifies the
            existing format. This enables more than one application to copy and paste data using the same registered clipboard format. Note
            that the format name comparison is case-insensitive.
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.ShellWindowFindWindowOptions">
            <summary>Specifies options for finding window in the Shell windows collection.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellWindowFindWindowOptions.SWFO_COOKIEPASSED">
            <summary>Causes IShellWindows::FindWindowSW to interpret pvarLoc as a cookie rather than a PIDL.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellWindowFindWindowOptions.SWFO_INCLUDEPENDING">
            <summary>Include windows that were registered with IShellWindows::RegisterPending.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellWindowFindWindowOptions.SWFO_NEEDDISPATCH">
            <summary>The window must have an IDispatch interface.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.ShellWindowTypeConstants">
            <summary>Specifies types of Shell windows.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellWindowTypeConstants.SWC_3RDPARTY">
            <summary>A non-Microsoft browser window.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellWindowTypeConstants.SWC_BROWSER">
            <summary>An Internet Explorer (Iexplore.exe) browser window.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellWindowTypeConstants.SWC_CALLBACK">
            <summary>A creation callback window.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellWindowTypeConstants.SWC_DESKTOP">
            <summary>Windows Vista and later. The Windows desktop.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellWindowTypeConstants.SWC_EXPLORER">
            <summary>An Windows Explorer (Explorer.exe) window.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IShellWindows">
            <summary>Provides access to the collection of open Shell windows.</summary>
            <remarks>
            <para>
            A Shell window is a window that has been registered by calling IShellWindows::Register or IShellWindows::RegisterPending. Upon
            registration, the specified window is added to the collection of Shell windows, and granted a cookie that uniquely identifies the
            window within the collection. A window can be un-registered by calling IShellWindows::Revoke.
            </para>
            <para>
            The Shell windows collection includes file explorer windows and web browser windows Internet Explorer and 3rd-party web
            browsers). Normally each Shell window implements IDispatch; IShellWindows::Item and IShellWindows::FindWindowSW provide ways to
            access a Shell window's <c>IDispatch</c> interface. For more information, see Dispatch Interface and Automation Functions.
            </para>
            <list type="table">
            <listheader>
            <term>IID</term>
            <term>IID_IShellWindows (85CB6900-4D95-11CF-960C-0080C7F4EE85)</term>
            </listheader>
            <item>
            <term>CLSID</term>
            <term>CLSID_ShellWindows (9BA05972-F6A8-11CF-A442-00A0C90A8F39)</term>
            </item>
            </list>
            <para>The following example shows how to retrieve an <c>IShellWindows</c> instance.</para>
            </remarks>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.IShellWindows.Count">
            <summary>Gets the number of windows in the Shell windows collection.</summary>
            <value>Returns a <see cref="T:System.Int32"/> value.</value>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellWindows.Item(System.Object)">
            <summary>Returns the registered Shell window for a specified index.</summary>
            <param name="index">
            A VARIANT of type VT_UI4, VT_I2, or VT_I4. If the type is VT_UI4, the value of index is interpreted as a member of
            ShellWindowTypeConstants; in this case, Item returns the window that is closest to the foreground window and has a matching
            type. If the type is VT_I, or VT_I4, index is treated as an index into the Shell windows collection.
            </param>
            <returns>A reference to the window's IDispatch interface, or NULL if the specified window was not found.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellWindows.GetEnumerator">
            <summary>Retrieves an enumerator for the collection of Shell windows.</summary>
            <returns>When this method returns, contains an interface pointer to an object that implements the IEnumVARIANT interface.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellWindows.Register(System.Object,System.Int32,Vanara.PInvoke.Shell32.ShellWindowTypeConstants)">
            <summary>Registers an open window as a Shell window; the window is specified by handle.</summary>
            <param name="pid">The window's IDispatch interface.</param>
            <param name="HWND">A handle that specifies the window to register.</param>
            <param name="swClass">A member of ShellWindowTypeConstants that specifies the type of window.</param>
            <returns>The window's cookie.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellWindows.RegisterPending(System.Int32,System.Object@,System.Object@,Vanara.PInvoke.Shell32.ShellWindowTypeConstants)">
            <summary>Registers a pending window as a Shell window; the window is specified by an absolute PIDL.</summary>
            <param name="lThreadId">TBD</param>
            <param name="pvarloc">
            A VARIANT of type VT_VARIANT | VT_BYREF. Set the value of pvarloc to an absolute PIDL (PIDLIST_ABSOLUTE) that specifies the
            window to register.
            </param>
            <param name="pvarlocRoot">Must be NULL or of type VT_EMPTY.</param>
            <param name="swClass">A member of ShellWindowTypeConstants that specifies the type of window.</param>
            <returns>The window's cookie.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellWindows.Revoke(System.Int32)">
            <summary>Revokes a Shell window's registration and removes the window from the Shell windows collection.</summary>
            <param name="lCookie">The cookie that identifies the window to un-register.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellWindows.OnNavigate(System.Int32,System.Object@)">
            <summary>Occurs when a Shell window is navigated to a new location.</summary>
            <param name="lCookie">The cookie that identifies the window.</param>
            <param name="pvarloc">
            A VARIANT of type VT_VARIANT | VT_BYREF. Set the value of pvarLoc to an absolute PIDL (PIDLIST_ABSOLUTE) that specifies the
            new location.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellWindows.OnActivated(System.Int32,System.Boolean)">
            <summary>Occurs when a Shell window's activation state changes.</summary>
            <param name="lCookie">The cookie that identifies the window.</param>
            <param name="fActive">TRUE if the window is being activated; FALSE if the window is being deactivated.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellWindows.FindWindowSW(System.Object@,System.Object@,Vanara.PInvoke.Shell32.ShellWindowTypeConstants,System.Int32@,Vanara.PInvoke.Shell32.ShellWindowFindWindowOptions)">
            <summary>Finds a window in the Shell windows collection and returns the window's handle and IDispatch interface.</summary>
            <param name="pvarloc">
            A VARIANT of type VT_VARIANT | VT_BYREF. Set the value of pvarLoc to an absolute PIDL (PIDLIST_ABSOLUTE) that specifies the
            window to find. (See remarks.)
            </param>
            <param name="pvarlocRoot">Must be NULL or of type VT_EMPTY.</param>
            <param name="swClass">One or more ShellWindowTypeConstants flags that specify window types to include in the search.</param>
            <param name="pHWND">A handle for the window matching the specified search criteria, or NULL if no such window was found.</param>
            <param name="swfwOptions">One or more ShellWindowFindWindowOptions flags that specify search options.</param>
            <returns>A reference to the window's IDispatch interface, or NULL if no such window was found.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellWindows.OnCreated(System.Int32,System.Object)">
            <summary>Occurs when a new Shell window is created for a frame.</summary>
            <param name="lCookie">The cookie that identifies the window.</param>
            <param name="punk">The address of the new window's IUnknown interface.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellWindows.ProcessAttachDetach(System.Boolean)">
            <summary>Deprecated. Always returns S_OK.</summary>
            <param name="fAttach">Not used.</param>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.ShellWindows">
            <summary>CoClass for IShellWindows</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.TI_FLAGS">
            <summary>Indicates the format of the resulting image.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.TI_FLAGS.TI_BITMAP">
            <summary>Convert the image to BMP format.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.TI_FLAGS.TI_JPEG">
            <summary>Convert the image to JPEG format.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.ITranscodeImage">
            <summary>Exposes a method that allows conversion to JPEG or bitmap (BMP) image formats from any image type supported by Windows.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ITranscodeImage.TranscodeImage(Vanara.PInvoke.Shell32.IShellItem,System.UInt32,System.UInt32,Vanara.PInvoke.Shell32.TI_FLAGS,System.Runtime.InteropServices.ComTypes.IStream,System.UInt32@,System.UInt32@)">
            <summary>Converts an image to JPEG or bitmap (BMP) image format.</summary>
            <param name="pShellItem">
            <para>Type: <c>IShellItem*</c></para>
            <para>The Shell Item for the image to convert.</para>
            </param>
            <param name="uiMaxWidth">
            <para>Type: <c>UINT</c></para>
            <para>The requested height in pixels. Should be less than or equal to the actual height of the original image. See Remarks.</para>
            </param>
            <param name="uiMaxHeight">
            <para>Type: <c>UINT</c></para>
            <para>The requested width in pixels. Should be less than or equal to the actual width of the original image. See Remarks.</para>
            </param>
            <param name="flags">
            <para>Type: <c>TI_FLAGS</c></para>
            <para>One of the following flags.</para>
            <para>TI_BITMAP</para>
            <para>Convert the image to BMP format.</para>
            <para>TI_JPEG</para>
            <para>Convert the image to JPEG format.</para>
            </param>
            <param name="pvImage">
            <para>Type: <c>IStream*</c></para>
            <para>A stream to receive the converted image. The stream must be created by the calling code prior to calling <c>TranscodeImage</c>.</para>
            </param>
            <param name="puiWidth">
            <para>Type: <c>UINT*</c></para>
            <para>The actual width of the converted image.</para>
            </param>
            <param name="puiHeight">
            <para>Type: <c>UINT*</c></para>
            <para>The actual height of the converted image.</para>
            </param>
            <remarks>
            <para>
            The aspect ratio of the original image is preserved. The new image is resized so that it will fit into a box of width
            <c>uiMaxWidth</c> and height <c>uiMaxHeight</c>.
            </para>
            <para>The image size will not be changed if the original image already fits in this bounding box.</para>
            <para>If both uiMaxWidth and uiMaxHeight are zero, the returned image will be the same size as the original.</para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.ImageTranscode">
            <summary>CLSID_ImageTranscode</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IInputPanelConfiguration">
            <summary>Provides functionality for desktop apps to opt in to the focus tracking mechanism used in Windows Store apps.</summary>
            <remarks>
            <para><c>Warning</c>
            <para></para>
            <c>IInputPanelConfiguration</c> will not work in Windows 10.
            </para>
            <para>
            Implement the <c>IInputPanelConfiguration</c> interface if your Desktop client processes need to leverage the invoking and dismissing
            semantics of the touch keyboard and handwriting input panel.
            </para>
            <para>
            The <c>IInputPanelConfiguration</c> interface enables your app to opt in to the focus tracking mechanism for Windows Store apps.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IInputPanelConfiguration.EnableFocusTracking">
            <summary>
            Enables a client process to opt-in to the focus tracking mechanism for Windows Store apps that controls the invoking and
            dismissing semantics of the touch keyboard.
            </summary>
            <returns>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</returns>
            <remarks>
            <c>Note</c>
            <para></para>
            This method will not work in Windows 10. A user can manually configure settings through the notification center or through the
            <c>Typing</c> settings to enable pulling up a touch keyboard automatically when focusing on an edit control.
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IInputPanelInvocationConfiguration">
            <summary>Enables Windows Store apps to opt out of the automatic invocation behavior.</summary>
            <remarks>
            Clients can request that the touch keyboard and handwriting input panel check to see that a user tapped in the edit control with
            focus before invoking.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IInputPanelInvocationConfiguration.RequireTouchInEditControl">
            <summary>Requires an explicit user tap in an edit field before the touch keyboard invokes.</summary>
            <returns>The <c>RequireTouchInEditControl</c> method always returns <c>S_OK</c>.</returns>
            <remarks>
            <para>
            When the <c>RequireTouchInEditControl</c> method is called, all future focus changes require an explicit user tap in an edit
            field before the touch keyboard invokes. You can call the <c>RequireTouchInEditControl</c> method multiple times, but there's no
            way to undo the setting.
            </para>
            <para>
            This setting applies for any focus event that takes place to a window that is running in the process that called it. The
            <c>RequireTouchInEditControl</c> method doesn't affect owned windows in another process that have an ownership chain to the
            current process that called <c>RequireTouchInEditControl</c>.
            </para>
            <para>
            The <c>RequireTouchInEditControl</c> method always returns <c>S_OK</c>. If this API is used, then the <c>IsUIBusy</c> property
            has no effect. The two interaction models are essentially mutually exclusive.
            </para>
            <para>The following code shows how to call the <c>RequireTouchInEditControl</c> method.</para>
            <para>
            <code>#include &lt;inputpanelconfiguration.h&gt;
            #include &lt;inputpanelconfiguration_i.c&gt;
            
            IInputPanelInvocationConfiguration *pInputPanelInvocationConfiguration;
            CoCreateInstance(CLSID_InputPanelConfiguration, NULL, CLSCTX_INPROC_SERVER, IID_PPV_ARGS(&amp;pInputPanelInvocationConfiguration));
            pInputPanelInvocationConfiguration-&gt;RequireTouchInEditControl();</code>
            </para>
            <para>
            <c>Note</c> Calling Release before the app finishes drawing UI can cause undefined behavior. If the touch keyboard isn't already
            running, calling <c>Release</c> could cause tiptsf.dll to be unloaded, because there are no more references to the dll. If this
            occurs, the state set by the <c>RequireTouchInEditControl</c> method is lost.
            </para>
            <para>
            If you need to delay the invocation of the touch keyboard until a later time, like when animations or direct manipulation have
            completed, use the <c>IsUIBusy</c> custom UI automation property. For more info, see Registering Custom Properties, Events, and
            Control Patterns.
            </para>
            <para>
            When you set <c>IsUIBusy</c> to <c>True</c>, the touch keyboard doesn't change visual state based on focus changes within the
            app. It's still able to change visual state based on overriding user action, like using a physical keyboard or manual dismissal.
            </para>
            <para>
            When you set <c>IsUIBusy</c> to <c>False</c>, the touch keyboard resumes its default behavior and queries synchronously for the
            control that has focus.
            </para>
            <para>The following code shows how to register the <c>IsUIBusy</c> custom UI automation property.</para>
            <para>
            <code>/* 03391bea-6681-474b-955c-60f664397ac6 */
            DEFINE_GUID( GUID_UIBusy, 0x03391bea, 0x6681, 0x474b, 0x95, 0x5c, 0x60, 0xf6, 0x64, 0x39, 0x7a, 0xc6);
            UIAutomationPropertyInfo customPropertyInfo = { GUID_UIBusy, L"IsUIBusy", UIAutomationType_Bool };
            CComPtr&lt;IUIAutomationRegistrar&gt; spRegistrar;
            hr = spRegistrar.CoCreateInstance( CLSID_CUIAutomationRegistrar, nullptr, CLSCTX_INPROC_SERVER);
            if (SUCCEEDED(hr)) {
               PATTERNID customPropertyId;
               hr = spRegistrar-&gt;RegisterProperty(&amp;customPropertyInfo, &amp;customPropertyId);
            }</code>
            </para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.InputPanelConfiguration">
            <summary>CLSID_InputPanelConfiguration</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.INotificationActivationCallback">
            <summary>
            <para>
            [Some information relates to pre-released product which may be substantially modified before it's commercially released.
            Microsoft makes no warranties, express or implied, with respect to the information provided here.]
            </para>
            <para>Receives notification messages when an app is triggered through a toast from the action center.</para>
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INotificationActivationCallback.Activate(System.String,System.String,Vanara.PInvoke.Shell32.NOTIFICATION_USER_INPUT_DATA[],System.Int32)">
            <summary>
            <para>
            [Some information relates to pre-released product which may be substantially modified before it's commercially released.
            Microsoft makes no warranties, express or implied, with respect to the information provided here.]
            </para>
            <para>Called when a user interacts with a toast in the action center.</para>
            </summary>
            <param name="appUserModelId">The unique identifier representing your app to the notification platform.</param>
            <param name="invokedArgs">
            Arguments from the invoked button. <c>NULL</c> if the toast indicates the default activation and no launch arguments were
            specified in the XML payload.
            </param>
            <param name="data">The data from the input elements available on the notification toast.</param>
            <param name="count">The number of data elements.</param>
            <returns>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</returns>
            <remarks>
            <para>
            In order for your app to respond to toasts in the action center, you need to override this method in your app. You also will
            need to create a shortcut on the start menu. For more information about how to respond to activation notifications, see
            Respond to toast activations.
            </para>
            <para>If your application uses non-interactive toasts, you can respond to those without using invokedArgs or data.</para>
            <para>If you return a failure code, the activation will fail and the user can try again to activate your app.</para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.NOTIFICATION_USER_INPUT_DATA">
            <summary>
            <para>
            [Some information relates to pre-released product which may be substantially modified before it's commercially released.
            Microsoft makes no warranties, express or implied, with respect to the information provided here.]
            </para>
            <para>
            Contains information about how a user interacted with a notification toast in the action center. This structure is used by Activate.
            </para>
            </summary>
            <remarks>
            Each key-value pair contains a piece of information based on an item in the notification toast when the Activate callback is triggered.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NOTIFICATION_USER_INPUT_DATA.Key">
            <summary>The ID of the user input field in the XML payload.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NOTIFICATION_USER_INPUT_DATA.Value">
            <summary>The input value selected by the user for a given input field.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IObjectArray">
            <summary>
            <para>Exposes methods that enable clients to access items in a collection of objects that support IUnknown.</para>
            </summary>
            <remarks>
            <para>When to Implement</para>
            <para>Clients do not need to implement this interface.</para>
            <para>When to Use</para>
            <para>Use this interface to access generic objects in an array.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IObjectArray.GetCount">
            <summary>Provides a count of the objects in the collection.</summary>
            <returns>The number of objects in the collection.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IObjectArray.GetAt(System.UInt32,System.Guid@)">
            <summary>
            Provides a pointer to a specified object's interface. The object and interface are specified by index and interface ID.
            </summary>
            <param name="uiIndex">The index of the object</param>
            <param name="riid">Reference to the desired interface ID.</param>
            <returns>Receives the interface pointer requested in riid.</returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IObjectCollection">
            <summary>
            <para>
            Extends the IObjectArray interface by providing methods that enable clients to add and remove objects that support IUnknown in a collection.
            </para>
            </summary>
            <remarks>
            <para>When to Use</para>
            <para>Use this interface to interact with a collection of generic objects.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IObjectCollection.GetCount">
            <summary>Provides a count of the objects in the collection.</summary>
            <returns>The number of objects in the collection.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IObjectCollection.GetAt(System.UInt32,System.Guid@)">
            <summary>
            Provides a pointer to a specified object's interface. The object and interface are specified by index and interface ID.
            </summary>
            <param name="uiIndex">The index of the object</param>
            <param name="riid">Reference to the desired interface ID.</param>
            <returns>Receives the interface pointer requested in riid.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IObjectCollection.AddObject(System.Object)">
            <summary>Adds a single object to the collection.</summary>
            <param name="punk">Pointer to the IUnknown of the object to be added to the collection.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IObjectCollection.AddFromArray(Vanara.PInvoke.Shell32.IObjectArray)">
            <summary>Adds the objects contained in an IObjectArray to the collection.</summary>
            <param name="poaSource">Pointer to the IObjectArray whose contents are to be added to the collection.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IObjectCollection.RemoveObjectAt(System.UInt32)">
            <summary>Removes a single, specified object from the collection.</summary>
            <param name="uiIndex">A pointer to the index of the object within the collection.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IObjectCollection.Clear">
            <summary>Removes all objects from the collection.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.GetAt``1(Vanara.PInvoke.Shell32.IObjectArray,System.UInt32)">
            <summary>Extension method to simplify using the <see cref="M:Vanara.PInvoke.Shell32.IObjectArray.GetAt(System.UInt32,System.Guid@)"/> method.</summary>
            <typeparam name="T">Type of the interface to get.</typeparam>
            <param name="a">An <see cref="T:Vanara.PInvoke.Shell32.IObjectArray"/> instance.</param>
            <param name="uiIndex">The index of the object</param>
            <returns>Receives the interface pointer requested in <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ToArray``1(Vanara.PInvoke.Shell32.IObjectArray)">
            <summary>Extension method to convert an <see cref="T:Vanara.PInvoke.Shell32.IObjectArray"/> instance to an array of <typeparamref name="T"/>.</summary>
            <typeparam name="T">Type of the interface to get. Supplying a type <see cref="T:System.Object"/> will get the <c>IUnknown</c> reference.</typeparam>
            <param name="a">An <see cref="T:Vanara.PInvoke.Shell32.IObjectArray"/> instance.</param>
            <returns>An array of <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.InitVariantFromStrRet(Vanara.PInvoke.Shell32.STRRET@,Vanara.PInvoke.Shell32.PIDL,Vanara.PInvoke.OleAut32.VARIANT@)">
            <summary>Initializes a VARIANT structure with a string stored in a STRRET structure.</summary>
            <param name="pstrret">
            <para>Type: <c>STRRET*</c></para>
            <para>Pointer to a STRRET structure.</para>
            </param>
            <param name="pidl">
            <para>Type: <c>PCUITEMID_CHILD</c></para>
            <para>PIDL of the item whose details are being retrieved.</para>
            </param>
            <param name="pvar">
            <para>Type: <c>VARIANT*</c></para>
            <para>When this function returns, contains the initialized VARIANT structure.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this function succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            <para>Creates a VT_BSTR variant.</para>
            <para><c>Note</c> This function frees the resources used for the STRRET contents.</para>
            <para>Examples</para>
            <para>The following example, to be included as part of a larger program, demonstrates how to use InitVariantFromStrRet.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.VariantToStrRet(Vanara.PInvoke.OleAut32.VARIANT@,Vanara.PInvoke.Shell32.STRRET@)">
            <summary>If the source variant is a VT_BSTR, extracts string and places it into a STRRET structure.</summary>
            <param name="varIn">
            <para>Type: <c>REFVARIANT</c></para>
            <para>Reference to a source variant structure.</para>
            </param>
            <param name="pstrret">
            <para>Type: <c>STRRET*</c></para>
            <para>Pointer to the extracted string if one exists.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this function succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.APPACTIONFLAGS">
            <summary>Specifies application management actions supported by an application publisher. These flags are bitmasks passed to IShellApp::GetPossibleActions.</summary>
            <remarks>
            The Add or Remove Programs application in Control Panel uses only <c><c>APPACTION_INSTALL</c></c> and
            <c><c>APPACTION_ADDLATER</c></c> for published applications.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.APPACTIONFLAGS.APPACTION_INSTALL">
            <summary>
            <para>Value:</para>
            <para>0x1</para>
            <para>Indicates that the application can be installed. Published applications always set this bit.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.APPACTIONFLAGS.APPACTION_UNINSTALL">
            <summary>
            <para>Value:</para>
            <para>0x2</para>
            <para>Not applicable to published applications.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.APPACTIONFLAGS.APPACTION_MODIFY">
            <summary>
            <para>Value:</para>
            <para>0x4</para>
            <para>Not applicable to published applications.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.APPACTIONFLAGS.APPACTION_REPAIR">
            <summary>
            <para>Value:</para>
            <para>0x8</para>
            <para>Not applicable to published applications.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.APPACTIONFLAGS.APPACTION_UPGRADE">
            <summary>
            <para>Value:</para>
            <para>0x10</para>
            <para>Not applicable to published applications.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.APPACTIONFLAGS.APPACTION_CANGETSIZE">
            <summary>
            <para>Value:</para>
            <para>0x20</para>
            <para>Not applicable to published applications.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.APPACTIONFLAGS.APPACTION_MODIFYREMOVE">
            <summary>
            <para>Value:</para>
            <para>0x80</para>
            <para>Not applicable to published applications.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.APPACTIONFLAGS.APPACTION_ADDLATER">
            <summary>
            <para>Value:</para>
            <para>0x100</para>
            <para>
            Indicates that the application supports scheduled installation. If this bit is set, then the Control Panel's Add or Remove
            Programs application presents the user an
            </para>
            <para>Add Later</para>
            <para>button. If you select</para>
            <para>Add Later</para>
            <para>, you are prompted to select the desired time of installation. The</para>
            <para>IPublishedApp::Install</para>
            <para>method is then called with the installation time.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.APPACTIONFLAGS.APPACTION_UNSCHEDULE">
            <summary>
            <para>Value:</para>
            <para>0x200</para>
            <para>Obsolete.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.APPINFODATAFLAGS">
            <summary>
            Specifies application information to return from IShellApp::GetAppInfo. These flags are bitmasks used in the dwMask member of the
            <c>APPINFODATA</c> structure.
            </summary>
            <remarks>Add/Remove Programs in Control Panel uses only <c>AIM_DISPLAYNAME</c> and <c>AIM_SUPPORTURL.</c></remarks>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.APPINFODATAFLAGS.AIM_DISPLAYNAME">
            <summary>
            <para>Value:</para>
            <para>0x1</para>
            <para>Returns the display name.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.APPINFODATAFLAGS.AIM_VERSION">
            <summary>
            <para>Value:</para>
            <para>0x2</para>
            <para>Returns the version.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.APPINFODATAFLAGS.AIM_PUBLISHER">
            <summary>
            <para>Value:</para>
            <para>0x4</para>
            <para>Returns the application publisher.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.APPINFODATAFLAGS.AIM_PRODUCTID">
            <summary>
            <para>Value:</para>
            <para>0x8</para>
            <para>Returns the application's product ID.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.APPINFODATAFLAGS.AIM_REGISTEREDOWNER">
            <summary>
            <para>Value:</para>
            <para>0x10</para>
            <para>Returns the application's registered owner.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.APPINFODATAFLAGS.AIM_REGISTEREDCOMPANY">
            <summary>
            <para>Value:</para>
            <para>0x20</para>
            <para>Returns the application's registered company.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.APPINFODATAFLAGS.AIM_LANGUAGE">
            <summary>
            <para>Value:</para>
            <para>0x40</para>
            <para>Returns the language.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.APPINFODATAFLAGS.AIM_SUPPORTURL">
            <summary>
            <para>Value:</para>
            <para>0x80</para>
            <para>Returns the support URL.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.APPINFODATAFLAGS.AIM_SUPPORTTELEPHONE">
            <summary>
            <para>Value:</para>
            <para>0x100</para>
            <para>Returns the support telephone number.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.APPINFODATAFLAGS.AIM_HELPLINK">
            <summary>
            <para>Value:</para>
            <para>0x200</para>
            <para>Returns the Help link.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.APPINFODATAFLAGS.AIM_INSTALLLOCATION">
            <summary>
            <para>Value:</para>
            <para>0x400</para>
            <para>Returns the application's install location.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.APPINFODATAFLAGS.AIM_INSTALLSOURCE">
            <summary>
            <para>Value:</para>
            <para>0x800</para>
            <para>Returns the install source.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.APPINFODATAFLAGS.AIM_INSTALLDATE">
            <summary>
            <para>Value:</para>
            <para>0x1000</para>
            <para>Returns the application's install date.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.APPINFODATAFLAGS.AIM_CONTACT">
            <summary>
            <para>Value:</para>
            <para>0x4000</para>
            <para>Returns the application's contact information.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.APPINFODATAFLAGS.AIM_COMMENTS">
            <summary>
            <para>Value:</para>
            <para>0x8000</para>
            <para>Returns application comments.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.APPINFODATAFLAGS.AIM_IMAGE">
            <summary>
            <para>Value:</para>
            <para>0x20000</para>
            <para>Returns the application image.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.APPINFODATAFLAGS.AIM_READMEURL">
            <summary>
            <para>Value:</para>
            <para>0x40000</para>
            <para>Returns the URL of the application's ReadMe file.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.APPINFODATAFLAGS.AIM_UPDATEINFOURL">
            <summary>
            <para>Value:</para>
            <para>0x80000</para>
            <para>Returns the URL of the application's update information.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.PUBAPPINFOFLAGS">
            <summary>
            Specifies which members in the PUBAPPINFO structure are valid. These flags are bitmasks set in the <c>dwMask</c> member and passed to IPublishedApp::GetPublishedAppInfo.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.PUBAPPINFOFLAGS.PAI_SOURCE">
            <summary>
            <para>Value:</para>
            <para>0x1</para>
            <para>The</para>
            <para>pszSource</para>
            <para>
            string is valid and contains the display name of the publishing source. If multiple sources publish an application of the same
            name, Add/Remove Programs identifies them by "&lt;application name&gt; : &lt;publishing source&gt;".
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.PUBAPPINFOFLAGS.PAI_ASSIGNEDTIME">
            <summary>
            <para>Value:</para>
            <para>0x2</para>
            <para>The</para>
            <para>stAssigned</para>
            <para>member is valid and contains the time that the application should be installed as assigned by an application administrator.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.PUBAPPINFOFLAGS.PAI_PUBLISHEDTIME">
            <summary>
            <para>Value:</para>
            <para>0x4</para>
            <para>Not used.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.PUBAPPINFOFLAGS.PAI_SCHEDULEDTIME">
            <summary>
            <para>Value:</para>
            <para>0x8</para>
            <para>The</para>
            <para>stScheduled</para>
            <para>member is valid and contains the time that the application should be installed as assigned by the user.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.PUBAPPINFOFLAGS.PAI_EXPIRETIME">
            <summary>
            <para>Value:</para>
            <para>0x10</para>
            <para>The</para>
            <para>stExpired</para>
            <para>member is valid and contains the time after which Add/Remove Programs should no longer install the program.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IAppPublisher">
            <summary>
            Exposes methods for publishing applications through <c>Add/Remove Programs</c> in Control Panel. This is the principal interface
            implemented for this purpose.
            </summary>
            <remarks>
            <para>
            <c>Add/Remove Programs</c> in Control Panel creates a registered publisher object and requests its <c>IAppPublisher</c> interface.
            You can create published application objects using the application enumerator, which you create using <c>IAppPublisher</c>.
            </para>
            <para>
            <c>Add/Remove Programs</c> gathers a list of published applications from publishers and then uses a publisher to display these
            applications with Microsoft Active Directory. When the user clicks <c>Add New Programs</c> in <c>Add/Remove Programs,</c> a list of
            published applications appears.
            </para>
            <para>You can publish applications in <c>Add/Remove Programs</c> using the following Component Object Model (COM) interfaces.</para>
            <list type="bullet">
            <item>
            <term><c>IAppPublisher</c></term>
            </item>
            <item>
            <term>IEnumPublishedApps</term>
            </item>
            <item>
            <term>IPublishedApp</term>
            </item>
            </list>
            <para>
            When you implement these interfaces, you must register your COM object in the registry. To register your publisher, add your object's
            class identifier (CLSID) under the following registry key.
            </para>
            <para><c>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\AppManagement\Publishers</c></para>
            <para>
            For example, if your publisher is named "My Publisher", you create a new key under "Publishers" named "My Publisher" with its default
            REG_SZ value as the publisher's CLSID:
            </para>
            <para><c>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\AppManagement\Publishers\My Publisher (Default) = {4D05CD3D-FFED-46bb-B9F1-321C26BE6362}</c></para>
            <para>You can also create the typical COM server registration entries as follows:</para>
            <para>
            <c>HKEY_CLASSES_ROOT\CLSID\{469EE8CE-1B86-4524-9042-AAA44FD9C8F2} (Default) = Sample Applications Publisher</c>
            <c>InProcServer32</c> (Default) = pubdemo.dll <c>ThreadingModel</c> = Apartment
            </para>
            <para>
            With the publisher registered in this way, <c>Add/Remove Programs</c> creates an instance of your object by calling CoCreateInstance
            for your object and requesting the appropriate <c>IAppPublisher</c> interface when the <c>Add New Programs</c> view is populated.
            Using <c>IAppPublisher</c>, Add/Remove Programs retrieves the application enumerator (IEnumPublishedApps) and information that
            describes the published applications. Your implementation of IPublishedApp is responsible for installing the associated application
            in its IPublishedApp::Install method. Add/Remove Programs calls this method when the user clicks the <c>Add</c> or the <c>Add
            Later</c> button in the user interface.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IAppPublisher.GetNumberOfCategories(System.UInt32@)">
            <summary>Obsolete. Clients of the Add/Remove Programs Control Panel Application may return E_NOTIMPL.</summary>
            <param name="pdwCat">This parameter is unused.</param>
            <returns>This method does not return a value.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IAppPublisher.GetCategories(Vanara.PInvoke.Shell32.APPCATEGORYINFOLIST@)">
            <summary>Retrieves a structure listing the categories provided by an application publisher.</summary>
            <param name="pAppCategoryList">
            <para>Type: <c>APPCATEGORYINFOLIST*</c></para>
            <para>
            A pointer to an APPCATEGORYINFOLIST structure. This structure's <c>cCategory</c> member returns the count of supported
            categories. The <c>pCategoryInfo</c> member returns a pointer to an array of APPCATEGORYINFO structures. This array contains all
            the categories an application publisher supports and must be allocated using CoTaskMemAlloc and freed using CoTaskMemFree.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            <para>
            The Add/Remove Programs Control Panel Application passes the ID returned for a category to the IAppPublisher::EnumApps method to
            identify which category is to be enumerated.
            </para>
            <para>Examples</para>
            <para>The following example shows how to calculate the size of the array of APPCATEGORYINFO structures that is returned by <c>IAppPublisher::GetCategories</c>.</para>
            <para>
            <code>size_t CategoryListArraySize = sizeof(APPCATEGORYINFO) * pInfoList-&gt;cCategory;</code>
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IAppPublisher.GetNumberOfApps(System.UInt32@)">
            <summary>Obsolete. Clients of Add/Remove Programs Control Panel Application can return E_NOTIMPL.</summary>
            <param name="pdwApps">This parameter is unused.</param>
            <returns>This method does not return a value.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IAppPublisher.EnumApps(System.Guid*,Vanara.PInvoke.Shell32.IEnumPublishedApps@)">
            <summary>Creates an enumerator for enumerating all applications published by an application publisher for a given category.</summary>
            <param name="pAppCategoryId">
            <para>Type: <c>GUID*</c></para>
            <para>
            A pointer to a GUID that specifies the application category to be enumerated. This must be one of the categories provided through
            IAppPublisher::GetCategories. If <c>pAppCategoryID</c> identifies a category not provided through
            <c>IAppPublisher::GetCategories</c>, creation of the enumerator succeeds with the enumerator returning zero items. If this
            parameter value is <c>NULL</c>, the enumerator returns applications published for all categories.
            </para>
            </param>
            <param name="ppepa">
            <para>Type: <c>IEnumPublishedApps**</c></para>
            <para>
            The address of a pointer to an IEnumPublishedApps reference variable that points to a <c>IEnumPublishedApps</c> interface.
            Application publishers must create an enumeration object that supports the <c>IEnumPublishedApps</c> interface, and return its
            pointer value through this parameter.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            <c>Note</c> IEnumPublishedApps is not a standard enumeration interface. It does not support a Skip method nor does its Next
            method support retrieval of multiple items.
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IEnumPublishedApps">
            <summary>
            Exposes methods that enumerate published applications to Add/Remove Programs in the Control Panel. The object exposing this interface
            is requested through IAppPublisher::EnumApps.
            </summary>
            <remarks>
            To publish applications to Add/Remove Programs in the Control Panel, you must support <c>IEnumPublishedApps</c>, IAppPublisher and IPublishedApp.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IEnumPublishedApps.Next(Vanara.PInvoke.Shell32.IPublishedApp@)">
            <summary>Gets the next IPublishedApp object in the enumeration.</summary>
            <param name="pia">
            <para>Type: <c>IPublishedApp**</c></para>
            <para>
            A pointer to an IPublishedApp interface reference variable that returns the next application object. Note that the category of
            the application object returned must match that passed into EnumApps.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>Returns S_OK if an item is returned, S_FALSE if there are no more items to enumerate, a COM-defined error value otherwise.</para>
            </returns>
            <remarks>
            <c>Note</c> IEnumPublishedApps is not a standard enumeration interface. It does not support a Skip method, nor does its Next
            method support retrieval of multiple items.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IEnumPublishedApps.Reset">
            <summary>Resets the enumeration of IPublishedApp objects to the first item.</summary>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>Returns the following value.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term><c>S_OK</c></term>
            <term>This method only returns S_OK.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para><c>Note</c> IEnumPublishedApps is not a standard enumeration interface.</para>
            <para>It does not support a Skip method nor does its Next method support retrieval of multiple items.</para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IPublishedApp">
            <summary>Exposes methods that represent applications to Add/Remove Programs in Control Panel.</summary>
            <remarks>
            To publish applications to Add/Remove Programs in Control Panel, you must support IEnumPublishedApps, IAppPublisher and <c>IPublishedApp</c>.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IPublishedApp.GetAppInfo(Vanara.PInvoke.Shell32.APPINFODATA@)">
            <summary>Gets general information about an application.</summary>
            <param name="pai">
            <para>Type: <c>APPINFODATA*</c></para>
            <para>A pointer to an APPINFODATA structure that returns the application information.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            <para><c>Note</c> Add/Remove Programs in the Control Panel sets the cbSize and dwMask members of the APPINFODATA structure.</para>
            <para>
            Your implementation should validate cbSize by comparing it with the size of APPINFODATA. If cbSize does not equal the size of
            <c>APPINFODATA</c>, this method should return a COM error value like E_FAIL.
            </para>
            <para>
            Add/Remove Programs in the Control Panel will set the dwMask member of the APPINFODATA structure to indicate that you should
            return AIM_DISPLAYNAME and AIM_SUPPORTURL. For each value that you return in APPINFODATA, you must set the corresponding bit in
            dwMask. All other bits should be cleared.
            </para>
            <para>Examples</para>
            <para>Here is a sample of how to use the dwMask bits::</para>
            <para>
            <code>HRESULT CPubApp::GetAppInfo(APPINFODATA *pData) { if (sizeof(APPINFODATA) != pData-&gt;cbSize) return E_FAIL; // First save off the mask of requested data items. const DWORD dwMask = pData-&gt;dwMask; // Zero-out the mask. Bits will be set as items are obtained. pData-&gt;dwMask = 0; // Call an internal function that obtains data and sets // bits in pData-&gt;dwMask for each item obtained. return get_app_info_data(pData, dwMask); }</code>
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IPublishedApp.GetPossibleActions(Vanara.PInvoke.Shell32.APPACTIONFLAGS@)">
            <summary>Gets a bitmask of management actions allowed for an application.</summary>
            <param name="pdwActions">
            <para>Type: <c>DWORD*</c></para>
            <para>
            A pointer to a variable of type <c>DWORD</c> that returns the bitmask of supported actions. The bit flags are described in APPACTIONFLAGS.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>Of the set of APPACTIONFLAGS bitmasks, Add/Remove Programs only recognizes APPACTION_INSTALL and APPACTION_ADDLATER.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IPublishedApp.GetSlowAppInfo(Vanara.PInvoke.Shell32.SLOWAPPINFO@)">
            <summary>
            Returns information to the application that originates from a slow source. This method is not applicable to published applications.
            </summary>
            <param name="psaid">
            <para>Type: <c>PSLOWAPPINFO</c></para>
            <para>A pointer to a SLOWAPPINFO structure in which to return application information.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            Implementations of IPublishedApp should return E_NOTIMPL. This method is used internally by Add/Remove Programs for installed applications.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IPublishedApp.GetCachedSlowAppInfo(Vanara.PInvoke.Shell32.SLOWAPPINFO@)">
            <summary>
            Returns information to the application that originates from a slow source. Unlike IShellApp::GetSlowAppInfo, this method can
            return information that has been cached. This method is not applicable to published applications.
            </summary>
            <param name="psaid">
            <para>Type: <c>PSLOWAPPINFO</c></para>
            <para>A pointer to a SLOWAPPINFO structure in which to return application information.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            Implementations of IPublishedApp return E_NOTIMPL. This method is used internally by Add/Remove Programs for installed applications.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IPublishedApp.IsInstalled">
            <summary>Gets a value indicating whether a specified application is currently installed.</summary>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>This method can return one of these values.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term><c>S_OK</c></term>
            <term>The application is installed.</term>
            </item>
            <item>
            <term><c>S_FALSE</c></term>
            <term>The application is not installed.</term>
            </item>
            </list>
            </returns>
            <remarks>
            Application publishers should determine if the application is currently installed and return S_OK if so, or S_FALSE if not.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IPublishedApp.Install(Vanara.PInvoke.SYSTEMTIME*)">
            <summary>
            Installs an application published by an application publisher. This method is invoked when the user selects <c>Add</c> or <c>Add
            Later</c> in <c>Add/Remove Programs</c> in Control Panel.
            </summary>
            <param name="pstInstall">
            <para>Type: <c>LPSYSTEMTIME</c></para>
            <para>
            A pointer to a SYSTEMTIME structure that specifies the time the user elected to schedule installation through the <c>Add
            Later</c> button in <c>Add/Remove Programs</c>. This option is only available if the application supports scheduled installation
            (compare GetPossibleActions). If this parameter is <c>NULL</c>, the application should be installed immediately.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IPublishedApp.GetPublishedAppInfo(Vanara.PInvoke.Shell32.PUBAPPINFO@)">
            <summary>Gets publishing-related information about an application published by an application publisher.</summary>
            <param name="ppai">
            <para>Type: <c>PUBAPPINFO*</c></para>
            <para>A pointer to an PUBAPPINFO structure that returns the application information.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            <para>
            The dwMask member of the PUBAPPINFO structure indicates which members have been requested. Note that Add/Remove Programs will not
            set the PAI_SCHEDULEDTIME and PAI_EXPIREDTIME bits. However, the corresponding values stScheduled and stExpired will be used when
            applicable if the implementation provides them. A publisher should provide this data if it is available.
            </para>
            <para>Examples</para>
            <para>The example shows a sample implementation:</para>
            <para>
            <code>HRESULT CPubApp::GetPublishedAppInfo(PUBAPPINFO *pInfo) { if (sizeof(PUBAPPINFO) != pInfo-&gt;cbSize) return E_FAIL; // Add/Remove Programs will use these items but will not ask for them. pInfo-&gt;dwMask |= (PAI_EXPIRETIME | PAI_SCHEDULEDTIME); // First save off the mask of requested data items. const DWORD dwMask = pInfo-&gt;dwMask; // Zero-out the mask. The bits should be set as items are retrieved. pInfo-&gt;dwMask = 0; // Call an internal function that obtains data and sets // bits in pInfo-&gt;dwMask for each item obtained. return get_pub_app_info(pInfo, dwMask); }</code>
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IPublishedApp.Unschedule">
            <summary>Cancels the installation of an application published by an application publisher.</summary>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            <para>This method is called in each of the following circumstances.</para>
            <list type="number">
            <item>
            <term>
            The user selected the <c>Do Not Add Program</c> option in the <c>Add Later</c> dialog box in <c>Add/Remove Programs</c> in
            Control Panel.
            </term>
            </item>
            <item>
            <term>
            The user has selected an installation time later than either the expiration time or the assigned time as specified in the
            published application information. In these circumstances, implementations are expected to cancel any scheduled installation for
            the application.
            </term>
            </item>
            </list>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IPublishedApp2">
            <summary>Extends the IPublishedApp interface by providing an additional installation method.</summary>
            <remarks>This interface also provides the methods of the IPublishedApp interface, from which it inherits.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IPublishedApp2.GetAppInfo(Vanara.PInvoke.Shell32.APPINFODATA@)">
            <summary>Gets general information about an application.</summary>
            <param name="pai">
            <para>Type: <c>APPINFODATA*</c></para>
            <para>A pointer to an APPINFODATA structure that returns the application information.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            <para><c>Note</c> Add/Remove Programs in the Control Panel sets the cbSize and dwMask members of the APPINFODATA structure.</para>
            <para>
            Your implementation should validate cbSize by comparing it with the size of APPINFODATA. If cbSize does not equal the size of
            <c>APPINFODATA</c>, this method should return a COM error value like E_FAIL.
            </para>
            <para>
            Add/Remove Programs in the Control Panel will set the dwMask member of the APPINFODATA structure to indicate that you should
            return AIM_DISPLAYNAME and AIM_SUPPORTURL. For each value that you return in APPINFODATA, you must set the corresponding bit in
            dwMask. All other bits should be cleared.
            </para>
            <para>Examples</para>
            <para>Here is a sample of how to use the dwMask bits::</para>
            <para>
            <code>HRESULT CPubApp::GetAppInfo(APPINFODATA *pData) { if (sizeof(APPINFODATA) != pData-&gt;cbSize) return E_FAIL; // First save off the mask of requested data items. const DWORD dwMask = pData-&gt;dwMask; // Zero-out the mask. Bits will be set as items are obtained. pData-&gt;dwMask = 0; // Call an internal function that obtains data and sets // bits in pData-&gt;dwMask for each item obtained. return get_app_info_data(pData, dwMask); }</code>
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IPublishedApp2.GetPossibleActions(Vanara.PInvoke.Shell32.APPACTIONFLAGS@)">
            <summary>Gets a bitmask of management actions allowed for an application.</summary>
            <param name="pdwActions">
            <para>Type: <c>DWORD*</c></para>
            <para>
            A pointer to a variable of type <c>DWORD</c> that returns the bitmask of supported actions. The bit flags are described in APPACTIONFLAGS.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>Of the set of APPACTIONFLAGS bitmasks, Add/Remove Programs only recognizes APPACTION_INSTALL and APPACTION_ADDLATER.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IPublishedApp2.GetSlowAppInfo(Vanara.PInvoke.Shell32.SLOWAPPINFO@)">
            <summary>
            Returns information to the application that originates from a slow source. This method is not applicable to published applications.
            </summary>
            <param name="psaid">
            <para>Type: <c>PSLOWAPPINFO</c></para>
            <para>A pointer to a SLOWAPPINFO structure in which to return application information.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            Implementations of IPublishedApp should return E_NOTIMPL. This method is used internally by Add/Remove Programs for installed applications.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IPublishedApp2.GetCachedSlowAppInfo(Vanara.PInvoke.Shell32.SLOWAPPINFO@)">
            <summary>
            Returns information to the application that originates from a slow source. Unlike IShellApp::GetSlowAppInfo, this method can
            return information that has been cached. This method is not applicable to published applications.
            </summary>
            <param name="psaid">
            <para>Type: <c>PSLOWAPPINFO</c></para>
            <para>A pointer to a SLOWAPPINFO structure in which to return application information.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            Implementations of IPublishedApp return E_NOTIMPL. This method is used internally by Add/Remove Programs for installed applications.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IPublishedApp2.IsInstalled">
            <summary>Gets a value indicating whether a specified application is currently installed.</summary>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>This method can return one of these values.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term><c>S_OK</c></term>
            <term>The application is installed.</term>
            </item>
            <item>
            <term><c>S_FALSE</c></term>
            <term>The application is not installed.</term>
            </item>
            </list>
            </returns>
            <remarks>
            Application publishers should determine if the application is currently installed and return S_OK if so, or S_FALSE if not.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IPublishedApp2.Install(Vanara.PInvoke.SYSTEMTIME*)">
            <summary>
            Installs an application published by an application publisher. This method is invoked when the user selects <c>Add</c> or <c>Add
            Later</c> in <c>Add/Remove Programs</c> in Control Panel.
            </summary>
            <param name="pstInstall">
            <para>Type: <c>LPSYSTEMTIME</c></para>
            <para>
            A pointer to a SYSTEMTIME structure that specifies the time the user elected to schedule installation through the <c>Add
            Later</c> button in <c>Add/Remove Programs</c>. This option is only available if the application supports scheduled installation
            (compare GetPossibleActions). If this parameter is <c>NULL</c>, the application should be installed immediately.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IPublishedApp2.GetPublishedAppInfo(Vanara.PInvoke.Shell32.PUBAPPINFO@)">
            <summary>Gets publishing-related information about an application published by an application publisher.</summary>
            <param name="ppai">
            <para>Type: <c>PUBAPPINFO*</c></para>
            <para>A pointer to an PUBAPPINFO structure that returns the application information.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            <para>
            The dwMask member of the PUBAPPINFO structure indicates which members have been requested. Note that Add/Remove Programs will not
            set the PAI_SCHEDULEDTIME and PAI_EXPIREDTIME bits. However, the corresponding values stScheduled and stExpired will be used when
            applicable if the implementation provides them. A publisher should provide this data if it is available.
            </para>
            <para>Examples</para>
            <para>The example shows a sample implementation:</para>
            <para>
            <code>HRESULT CPubApp::GetPublishedAppInfo(PUBAPPINFO *pInfo) { if (sizeof(PUBAPPINFO) != pInfo-&gt;cbSize) return E_FAIL; // Add/Remove Programs will use these items but will not ask for them. pInfo-&gt;dwMask |= (PAI_EXPIRETIME | PAI_SCHEDULEDTIME); // First save off the mask of requested data items. const DWORD dwMask = pInfo-&gt;dwMask; // Zero-out the mask. The bits should be set as items are retrieved. pInfo-&gt;dwMask = 0; // Call an internal function that obtains data and sets // bits in pInfo-&gt;dwMask for each item obtained. return get_pub_app_info(pInfo, dwMask); }</code>
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IPublishedApp2.Unschedule">
            <summary>Cancels the installation of an application published by an application publisher.</summary>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            <para>This method is called in each of the following circumstances.</para>
            <list type="number">
            <item>
            <term>
            The user selected the <c>Do Not Add Program</c> option in the <c>Add Later</c> dialog box in <c>Add/Remove Programs</c> in
            Control Panel.
            </term>
            </item>
            <item>
            <term>
            The user has selected an installation time later than either the expiration time or the assigned time as specified in the
            published application information. In these circumstances, implementations are expected to cancel any scheduled installation for
            the application.
            </term>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IPublishedApp2.Install2(Vanara.PInvoke.SYSTEMTIME*,Vanara.PInvoke.HWND*)">
            <summary>
            Installs an application published by an application publisher, while preventing multiple windows from being active on the same thread.
            </summary>
            <param name="pstInstall">
            <para>Type: <c>LPSYSTEMTIME</c></para>
            <para>A pointer to a SYSTEMTIME structure.</para>
            </param>
            <param name="hwndParent">
            <para>Type: <c>HWND</c></para>
            <para>A handle to the parent window.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IShellApp">
            <summary>
            Exposes methods that provide general information about an application to the Add/Remove Programs Application. You cannot use it
            outside the Add/Remove Programs application. The information given by this interface includes a list of supported management actions
            and whether the application is currently installed.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellApp.GetAppInfo(Vanara.PInvoke.Shell32.APPINFODATA@)">
            <summary>Gets general information about an application.</summary>
            <param name="pai">A pointer to an APPINFODATA structure that returns the application information.</param>
            <returns>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</returns>
            <remarks>
            <para><c>Note</c> Add/Remove Programs in the Control Panel sets the cbSize and dwMask members of the APPINFODATA structure.</para>
            <para>
            Your implementation should validate cbSize by comparing it with the size of APPINFODATA. If cbSize does not equal the size of
            <c>APPINFODATA</c>, this method should return a COM error value like E_FAIL.
            </para>
            <para>
            Add/Remove Programs in the Control Panel will set the dwMask member of the APPINFODATA structure to indicate that you should
            return AIM_DISPLAYNAME and AIM_SUPPORTURL. For each value that you return in APPINFODATA, you must set the corresponding bit in
            dwMask. All other bits should be cleared.
            </para>
            <para>Examples</para>
            <para>Here is a sample of how to use the dwMask bits::</para>
            <para>
            <code>HRESULT CPubApp::GetAppInfo(APPINFODATA *pData)
            {
               if (sizeof(APPINFODATA) != pData-&gt;cbSize)
                  return E_FAIL;
               // First save off the mask of requested data items.
               const DWORD dwMask = pData-&gt;dwMask;
               // Zero-out the mask. Bits will be set as items are obtained.
               pData-&gt;dwMask = 0;
               // Call an internal function that obtains data and sets
               // bits in pData-&gt;dwMask for each item obtained.
               return get_app_info_data(pData, dwMask);
            }</code>
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellApp.GetPossibleActions(Vanara.PInvoke.Shell32.APPACTIONFLAGS@)">
            <summary>Gets a bitmask of management actions allowed for an application.</summary>
            <param name="pdwActions">
            <para>Type: <c>DWORD*</c></para>
            <para>
            A pointer to a variable of type <c>DWORD</c> that returns the bitmask of supported actions. The bit flags are described in APPACTIONFLAGS.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>Of the set of APPACTIONFLAGS bitmasks, Add/Remove Programs only recognizes APPACTION_INSTALL and APPACTION_ADDLATER.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellApp.GetSlowAppInfo(Vanara.PInvoke.Shell32.SLOWAPPINFO@)">
            <summary>
            Returns information to the application that originates from a slow source. This method is not applicable to published applications.
            </summary>
            <param name="psaid">
            <para>Type: <c>PSLOWAPPINFO</c></para>
            <para>A pointer to a SLOWAPPINFO structure in which to return application information.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            Implementations of IPublishedApp should return E_NOTIMPL. This method is used internally by Add/Remove Programs for installed applications.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellApp.GetCachedSlowAppInfo(Vanara.PInvoke.Shell32.SLOWAPPINFO@)">
            <summary>
            Returns information to the application that originates from a slow source. Unlike IShellApp::GetSlowAppInfo, this method can
            return information that has been cached. This method is not applicable to published applications.
            </summary>
            <param name="psaid">
            <para>Type: <c>PSLOWAPPINFO</c></para>
            <para>A pointer to a SLOWAPPINFO structure in which to return application information.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            Implementations of IPublishedApp return E_NOTIMPL. This method is used internally by Add/Remove Programs for installed applications.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellApp.IsInstalled">
            <summary>Gets a value indicating whether a specified application is currently installed.</summary>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>This method can return one of these values.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term><c>S_OK</c></term>
            <term>The application is installed.</term>
            </item>
            <item>
            <term><c>S_FALSE</c></term>
            <term>The application is not installed.</term>
            </item>
            </list>
            </returns>
            <remarks>
            Application publishers should determine if the application is currently installed and return S_OK if so, or S_FALSE if not.
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.APPCATEGORYINFO">
            <summary>
            Provides application category information to Add/Remove Programs in Control Panel. The APPCATEGORYINFOLIST structure is used create a
            complete list of categories for an application publisher.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.APPCATEGORYINFO.Locale">
            <summary>
            <para>Type: <c>LCID</c></para>
            <para>Unused.</para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.APPCATEGORYINFO.Description">
            <summary>
            A string containing the display name of the category. This string displays in the <c>Category</c> list in Add/Remove
            Programs.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.APPCATEGORYINFO.AppCategoryId">
            <summary>
            <para>Type: <c>GUID</c></para>
            <para>A GUID identifying the application category.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.APPCATEGORYINFOLIST">
            <summary>Provides a list of supported application categories from an application publisher to Add/Remove Programs in Control Panel.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.APPCATEGORYINFOLIST.cCategory">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>A value of type <c>DWORD</c> that specifies the count of APPCATEGORYINFO elements in the array pointed to by <c>pCategoryInfo</c>.</para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.APPCATEGORYINFOLIST.CategoryInfo">
            <summary>An array of APPCATEGORYINFO structures. This array contains all the categories an application publisher supports.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.APPCATEGORYINFOLIST.Free">
            <summary>Releases the memory allocated for <see cref="F:Vanara.PInvoke.Shell32.APPCATEGORYINFOLIST.pCategoryInfo"/>.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.APPINFODATA">
            <summary>Provides information about a published application to the Add/Remove Programs Control Panel utility.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.APPINFODATA.cbSize">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>
            A value of type <c>DWORD</c> that specifies the size of the <c>APPINFODATA</c> data structure. This field is set by the
            Add/Remove Program executable code.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.APPINFODATA.dwMask">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>
            A value of type <c>DWORD</c> that specifies the bitmask that indicates which items in the structure are desired or valid.
            Implementations of GetAppInfo should inspect this value for bits that are set and attempt to provide values corresponding to
            those bits. Implementations should also return with bits set for only those members that are being returned.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.APPINFODATA.pszDisplayName">
            <summary>
            <para>Type: <c>LPWSTR</c></para>
            <para>
            A pointer to a string that contains the application display name. Memory for this string must be allocated using CoTaskMemAlloc
            and freed using CoTaskMemFree.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.APPINFODATA.pszVersion">
            <summary>
            <para>Type: <c>LPWSTR</c></para>
            <para>Not applicable to published applications.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.APPINFODATA.pszPublisher">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.APPINFODATA.pszProductID">
            <summary>
            <para>Type: <c>LPWSTR</c></para>
            <para>Not applicable to published applications.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.APPINFODATA.pszRegisteredOwner">
            <summary>
            <para>Type: <c>LPWSTR</c></para>
            <para>Not applicable to published applications.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.APPINFODATA.pszRegisteredCompany">
            <summary>
            <para>Type: <c>LPWSTR</c></para>
            <para>Not applicable to published applications.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.APPINFODATA.pszLanguage">
            <summary>
            <para>Type: <c>LPWSTR</c></para>
            <para>Not applicable to published applications.</para>
            <para>Type: <c>LPWSTR</c></para>
            <para>Not applicable to published applications.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.APPINFODATA.pszSupportUrl">
            <summary>
            <para>Type: <c>LPWSTR</c></para>
            <para>
            A URL to support information. This string is displayed as a link with the application name in Control Panel Add/Remove Programs.
            Memory for this string must be allocated using CoTaskMemAlloc and freed using CoTaskMemFree.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.APPINFODATA.pszSupportTelephone">
            <summary>
            <para>Type: <c>LPWSTR</c></para>
            <para>Not applicable to published applications.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.APPINFODATA.pszHelpLink">
            <summary>
            <para>Type: <c>LPWSTR</c></para>
            <para>Not applicable to published applications.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.APPINFODATA.pszInstallLocation">
            <summary>
            <para>Type: <c>LPWSTR</c></para>
            <para>Not applicable to published applications.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.APPINFODATA.pszInstallSource">
            <summary>
            <para>Type: <c>LPWSTR</c></para>
            <para>Not applicable to published applications.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.APPINFODATA.pszInstallDate">
            <summary>
            <para>Type: <c>LPWSTR</c></para>
            <para>Not applicable to published applications.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.APPINFODATA.pszContact">
            <summary>
            <para>Type: <c>LPWSTR</c></para>
            <para>Not applicable to published applications.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.APPINFODATA.pszComments">
            <summary>
            <para>Type: <c>LPWSTR</c></para>
            <para>Not applicable to published applications.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.APPINFODATA.pszImage">
            <summary>
            <para>Type: <c>LPWSTR</c></para>
            <para>Not applicable to published applications.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.APPINFODATA.pszReadmeUrl">
            <summary>
            <para>Type: <c>LPWSTR</c></para>
            <para>Not applicable to published applications.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.APPINFODATA.pszUpdateInfoUrl">
            <summary>
            <para>Type: <c>LPWSTR</c></para>
            <para>Not applicable to published applications.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.PUBAPPINFO">
            <summary>
            Provides information about a published application from an application publisher to <c>Add/Remove Programs</c> in Control Panel.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.PUBAPPINFO.cbSize">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>
            A value of type <c>DWORD</c> that specifies the size of the structure. This member is set by the <c>Add/Remove Programs</c> utility.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.PUBAPPINFO.dwMask">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>A bitmask that indicates which items in the structure are valid. This member can contain one or more PUBAPPINFOFLAGS.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.PUBAPPINFO.pszSource">
            <summary>
            <para>Type: <c>LPWSTR</c></para>
            <para>
            A pointer to a string containing the display name of the publisher. This name appears in <c>Add/Remove Programs</c> if duplicate
            application names are encountered. The string buffer must be allocated using the Shell task allocator.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.PUBAPPINFO.stAssigned">
            <summary>
            <para>Type: <c>SYSTEMTIME</c></para>
            <para>
            The time when an application manager schedules the application installation. <c>Add/Remove Programs</c> does not allow the user
            to schedule an installation time later than the value in this member. This member is ignored if it describes a time prior to the
            current time.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.PUBAPPINFO.stPublished">
            <summary>Type: <c>SYSTEMTIME</c></summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.PUBAPPINFO.stScheduled">
            <summary>
            <para>Type: <c>SYSTEMTIME</c></para>
            <para>
            The installation time that the user sets by clicking <c>Add Later</c>. <c>Add/Remove Programs</c> calls the
            IPublishedApp::Install method with the <c>pInstallTime</c> parameter pointing to a SYSTEMTIME structure that contains the time
            the user entered. The application publisher maintains this value for installation scheduling. IPublishedApp::GetPublishedAppInfo
            returns the scheduled installation time in this member if the scheduled time has not been canceled using IPublishedApp::Unschedule.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.PUBAPPINFO.stExpire">
            <summary>
            <para>Type: <c>SYSTEMTIME</c></para>
            <para>The time after which you cannot install the published application using <c>Add/Remove Programs</c>.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.SLOWAPPINFO">
            <summary>
            Provides specialized application information to <c>Add/Remove Programs</c> in Control Panel. This structure is not applicable to
            published applications.
            </summary>
            <remarks>
            This structure is used by the IShellApp::GetSlowAppInfo and IShellApp::GetCachedSlowAppInfo interfaces, neither of which are
            applicable to published applications. Therefore, this structure is also not applicable to published applications.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SLOWAPPINFO.ullSize">
            <summary>
            <para>Type: <c>ULONGLONG</c></para>
            <para>The size of the application in bytes.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SLOWAPPINFO.ftLastUsed">
            <summary>
            <para>Type: <c>FILETIME</c></para>
            <para>The time the application was last used.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SLOWAPPINFO.iTimesUsed">
            <summary>
            <para>Type: <c>int</c></para>
            <para>The count of times the application has been used.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SLOWAPPINFO.pszImage">
            <summary>
            <para>Type: <c>LPWSTR</c></para>
            <para>
            A pointer to a string containing the path to the image that represents the application. The string buffer must be allocated using
            CoTaskMemAlloc and freed using CoTaskMemFree.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NINF_KEY">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.ABE">
            <summary>Values used in APPBARDATA.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ABE.ABE_LEFT">
            <summary>Left edge.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ABE.ABE_TOP">
            <summary>Top edge.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ABE.ABE_RIGHT">
            <summary>Right edge.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ABE.ABE_BOTTOM">
            <summary>Bottom edge.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.ABM">
            <summary>Values used by SHAppBarMessage.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ABM.ABM_NEW">
            <summary>
            Registers a new appbar and specifies the message identifier that the system should use to send notification messages to the appbar.
            <para><strong>Parameters</strong></para>
            <para>
            A pointer to an APPBARDATA structure that contains the new appbar's window handle and message identifier. You must specify
            the cbSize, hWnd, and uCallbackMessage members when sending this message; all other members are ignored.
            </para>
            <para><strong>Return value</strong></para>
            <para>Returns TRUE if successful, or FALSE if an error occurs or if the appbar is already registered.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ABM.ABM_REMOVE">
            <summary>
            Unregisters an appbar, removing the bar from the system's internal list.
            <para><strong>Parameters</strong></para>
            <para>
            A pointer to an APPBARDATA structure that contains the handle to the appbar to unregister. You must specify the cbSize and
            hWnd members when sending this message; all other members are ignored.
            </para>
            <para><strong>Return value</strong></para>
            <para>Always returns TRUE.</para>
            </summary>
            <remarks>This message causes the system to send the ABN_POSCHANGED notification message to all appbars.</remarks>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ABM.ABM_QUERYPOS">
            <summary>
            Requests a size and screen position for an appbar. When the request is made, the message proposes a screen edge and a
            bounding rectangle for the appbar. The system adjusts the bounding rectangle so that the appbar does not interfere with the
            Windows taskbar or any other appbars.
            <para><strong>Parameters</strong></para>
            <para>
            A pointer to an APPBARDATA structure. The uEdge member specifies a screen edge, and the rc member contains the proposed
            bounding rectangle. When the SHAppBarMessage function returns, rc contains the approved bounding rectangle. You must specify
            the cbSize, hWnd, uEdge, and rc members when sending this message; all other members are ignored.
            </para>
            <para><strong>Return value</strong></para>
            <para>Always returns TRUE.</para>
            </summary>
            <remarks>An appbar should send this message before sending the ABM_SETPOS message.</remarks>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ABM.ABM_SETPOS">
            <summary>
            Sets the size and screen position of an appbar. The message specifies a screen edge and the bounding rectangle for the
            appbar. The system may adjust the bounding rectangle so that the appbar does not interfere with the Windows taskbar or any
            other appbars.
            <para><strong>Parameters</strong></para>
            <para>
            A pointer to an APPBARDATA structure. The uEdge member specifies a screen edge, and the rc member contains the bounding
            rectangle. When the SHAppBarMessage function returns, rc contains the approved bounding rectangle. You must specify the
            cbSize, hWnd, uEdge, and rc members when sending this message; all other members are ignored.
            </para>
            <para><strong>Return value</strong></para>
            <para>Always returns TRUE.</para>
            </summary>
            <remarks>This message causes the system to send the ABN_POSCHANGED notification message to all appbars.</remarks>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ABM.ABM_GETSTATE">
            <summary>
            Retrieves the autohide and always-on-top states of the Windows taskbar.
            <para><strong>Parameters</strong></para>
            <para>
            Pointer to an APPBARDATA structure. You must specify the cbSize member when sending this message; all other members are ignored.
            </para>
            <para><strong>Return value</strong></para>
            <para>
            Returns zero if the taskbar is neither in the autohide nor always-on-top state. Otherwise, the return value is one or both of
            the following:
            </para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ABS_ALWAYSONTOP</term>
            <description>
            The taskbar is in the always-on-top state. <note type="note">As of Windows 7, ABS_ALWAYSONTOP is no longer returned because
            the taskbar is always in that state. Older code should be updated to ignore the absence of this value in not assume that
            return value to mean that the taskbar is not in the always-on-top state.</note>
            </description>
            </item>
            <item>
            <term>ABS_AUTOHIDE</term>
            <description>The taskbar is in the autohide state.</description>
            </item>
            </list>
            </summary>
            <remarks>This message causes the system to send the ABN_POSCHANGED notification message to all appbars.</remarks>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ABM.ABM_GETTASKBARPOS">
            <summary>
            <para>
            Retrieves the bounding rectangle of the Windows taskbar. Note that this applies only to the system taskbar. Other objects,
            particularly toolbars supplied with third-party software, also can be present. As a result, some of the screen area not
            covered by the Windows taskbar might not be visible to the user. To retrieve the area of the screen not covered by both the
            taskbar and other app bars—the working area available to your application—, use the GetMonitorInfo function.
            </para>
            <para><strong>Parameters</strong></para>
            <para>
            A pointer to an APPBARDATA structure whose rc member receives the bounding rectangle, in screen coordinates, of the taskbar.
            You must specify the cbSize when sending this message; all other members are ignored.
            </para>
            <para><strong>Return value</strong></para>
            <para>Returns TRUE if successful; otherwise, FALSE.</para>
            </summary>
            <remarks>
            Note that this applies only to the system taskbar. Other objects, particularly toolbars supplied with third-party software,
            also can be present. As a result, some of the screen area not covered by the Windows taskbar might not be visible to the
            user. To retrieve the area of the screen not covered by both the taskbar and other app bars the working area available to
            your application , use the GetMonitorInfo function.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ABM.ABM_ACTIVATE">
            <summary>
            Notifies the system that an appbar has been activated. An appbar should call this message in response to the WM_ACTIVATE message.
            <para><strong>Parameters</strong></para>
            <para>
            A pointer to an APPBARDATA structure that identifies the appbar to activate. You must specify the cbSize and hWnd members
            when sending this message; all other members are ignored.
            </para>
            <para><strong>Return value</strong></para>
            <para>Always returns TRUE.</para>
            </summary>
            <remarks>
            This message is ignored if the hWnd member of the structure pointed to by pabd identifies an autohide appbar. The system
            automatically sets the z-order for autohide appbars.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ABM.ABM_GETAUTOHIDEBAR">
            <summary>
            Retrieves the handle to the autohide appbar associated with an edge of the screen. If the system has multiple monitors, the
            monitor that contains the primary taskbar is used. <note type="note">To query for an autohide appbar on a specific monitor,
            use ABM_GETAUTOHIDEBAREX.</note>
            <para><strong>Parameters</strong></para>
            <para>
            A pointer to an APPBARDATA structure that specifies the screen edge. You must specify the cbSize and uEdge members when
            sending this message; all other members are ignored.
            </para>
            <para><strong>Return value</strong></para>
            <para>
            Returns the handle to the autohide appbar. The return value is NULL if an error occurs or if no autohide appbar is associated
            with the given edge.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ABM.ABM_SETAUTOHIDEBAR">
            <summary>
            Registers or unregisters an autohide appbar for a given edge of the screen. If the system has multiple monitors, the monitor
            that contains the primary taskbar is used. <note type="note">To register or unregister an autohide appbar on a specific
            monitor, use ABM_SETAUTOHIDEBAREX.</note>
            <para><strong>Parameters</strong></para>
            <para>
            A pointer to an APPBARDATA structure. Set the lParam member to TRUE to register the appbar or FALSE to unregister it. You
            must specify the cbSize, hWnd, uEdge, and lParam members when sending this message; all other members are ignored.
            </para>
            <para><strong>Return value</strong></para>
            <para>
            Returns TRUE if successful, or FALSE if an error occurs or if an autohide appbar is already registered for the given edge.
            </para>
            </summary>
            <remarks>
            The system allows only one autohide appbar for each edge of the screen. This is determined when the member uEdge of the
            APPBARDATA structure is set.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ABM.ABM_WINDOWPOSCHANGED">
            <summary>
            Notifies the system when an appbar's position has changed. An appbar should call this message in response to the
            WM_WINDOWPOSCHANGED message.
            <para><strong>Parameters</strong></para>
            <para>
            A pointer to an APPBARDATA structure that identifies the appbar to activate. You must specify the cbSize and hWnd members
            when sending this message; all other members are ignored.
            </para>
            <para><strong>Return value</strong></para>
            <para>Always returns TRUE.</para>
            </summary>
            <remarks>This message is ignored if the hWnd member of the structure pointed to by pabd identifies an autohide appbar.</remarks>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ABM.ABM_SETSTATE">
            <summary>
            Sets the autohide and always-on-top states of the Windows taskbar.
            <para><strong>Parameters</strong></para>
            <para>
            A pointer to an APPBARDATA structure. You must specify the cbSize and hWnd members when sending this message. Data for the
            desired state is sent in the lParam member using one of the following values.
            </para>
            <list type="definition">
            <item>
            <term>0</term>
            <description>Autohide and always-on-top both off</description>
            </item>
            <item>
            <term>ABS_ALWAYSONTOP</term>
            <description>Always-on-top on, autohide off</description>
            </item>
            <item>
            <term>ABS_AUTOHIDE</term>
            <description>Autohide on, always-on-top off</description>
            </item>
            <item>
            <term>ABS_AUTOHIDE | ABS_ALWAYSONTOP</term>
            <description>Autohide and always-on-top both on</description>
            </item>
            </list>
            <para><strong>Return value</strong></para>
            <para>Always returns TRUE.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ABM.ABM_GETAUTOHIDEBAREX">
            <summary>
            Retrieves the handle to the autohide appbar associated with an edge of the screen. This message extends ABM_GETAUTOHIDEBAR by
            enabling you to specify a particular monitor, for use in multiple monitor situations.
            <para><strong>Parameters</strong></para>
            <para>
            A pointer to an APPBARDATA structure that specifies the screen edge and monitor. You must specify the cbSize, uEdge, and rc
            members when sending this message; all other members are ignored.
            </para>
            <para><strong>Return value</strong></para>
            <para>
            Returns the handle to the autohide appbar. The return value is NULL if an error occurs or if no autohide appbar is associated
            with the given edge of the given monitor.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ABM.ABM_SETAUTOHIDEBAREX">
            <summary>
            Registers or unregisters an autohide appbar for a given edge of the screen. This message extends ABM_SETAUTOHIDEBAR by
            enabling you to specify a particular monitor, for use in multiple monitor situations.
            <para><strong>Parameters</strong></para>
            <para>
            A pointer to an APPBARDATA structure. Set the lParam member is to TRUE to register the appbar or FALSE to unregister it. You
            must specify the cbSize, hWnd, uEdge, rc, and lParam members when sending this message; all other members are ignored.
            </para>
            <para><strong>Return value</strong></para>
            <para>
            Returns TRUE if successful, or FALSE if an error occurs or if an autohide appbar is already registered for the given edge on
            the given monitor.
            </para>
            </summary>
            <remarks>
            The system allows only one autohide appbar for each edge of each monitor. The monitor is determined by the rc member and the
            edge is determined by the uEdge member of the APPBARDATA structure.
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.ABN">
            <summary>Windows Shell notifications.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ABN.ABN_STATECHANGE">
            <summary>
            Notifies an appbar that the taskbar's autohide or always-on-top state has changed that is, the user has selected or cleared
            the "Always on top" or "Auto hide" check box on the taskbar's property sheet.
            <para><strong>Parameters</strong></para>
            <para>This message has no parameters.</para>
            <para><strong>Return value</strong></para>
            <para>No return value.</para>
            </summary>
            <remarks>An appbar can use this notification message to set its state to conform to that of the taskbar, if desired.</remarks>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ABN.ABN_POSCHANGED">
            <summary>
            Notifies an appbar when an event has occurred that may affect the appbar's size and position. Events include changes in the
            taskbar's size, position, and visibility state, as well as the addition, removal, or resizing of another appbar on the same
            side of the screen.
            <para><strong>Parameters</strong></para>
            <para>This message has no parameters.</para>
            <para><strong>Return value</strong></para>
            <para>No return value.</para>
            </summary>
            <remarks>
            An appbar should respond to this notification message by sending the ABM_QUERYPOS and ABM_SETPOS messages. If its position
            has changed, the appbar should call the MoveWindow function to move itself to the new position.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ABN.ABN_FULLSCREENAPP">
            <summary>
            Notifies an appbar when a full-screen application is opening or closing. This notification is sent in the form of an
            application-defined message that is set by the ABM_NEW message.
            <para><strong>Parameters</strong></para>
            <para>
            <em>lParam:</em> A flag specifying whether a full-screen application is opening or closing. This parameter is TRUE if the
            application is opening or FALSE if it is closing.
            </para>
            <para><strong>Return value</strong></para>
            <para>No return value.</para>
            </summary>
            <remarks>
            When a full-screen application is opening, an appbar must drop to the bottom of the z-order. When it is closing, the appbar
            should restore its z-order position.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ABN.ABN_WINDOWARRANGE">
            <summary>
            Notifies an appbar that the user has selected the Cascade, Tile Horizontally, or Tile Vertically command from the taskbar's
            shortcut menu.
            <para><strong>Parameters</strong></para>
            <para>
            <em>lParam:</em> A flag specifying whether the cascade or tile operation is beginning. This parameter is TRUE if the
            operation is beginning and the windows have not yet been moved. It is FALSE if the operation has completed.
            </para>
            <para><strong>Return value</strong></para>
            <para>No return value.</para>
            </summary>
            <remarks>
            The system sends this notification message twice first with lParam set to TRUE and then with lParam set to FALSE. The first
            notification is sent before the windows are cascaded or tiled, and the second is sent after the cascade or tile operation has occurred.
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.ABS">
            <summary>Data for the desired state of the Windows taskbar.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ABS.ABS_AUTOHIDE">
            <summary>Autohide on, always-on-top off.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ABS.ABS_ALWAYSONTOP">
            <summary>
            Always-on-top on, autohide off. As of Windows 7, ABS_ALWAYSONTOP is no longer returned because the taskbar is always in that
            state. Older code should be updated to ignore the absence of this value in not assume that return value to mean that the
            taskbar is not in the always-on-top state.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.ASSOCCLASS">
            <summary>Where to obtain association data and the form the data is stored in.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ASSOCCLASS.ASSOCCLASS_SHELL_KEY">
            <summary>The hkClass member names a key found as <b>HKEY_CLASSES_ROOT</b>\ <b>SystemFileAssociations</b>\ <i>hkClass</i>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ASSOCCLASS.ASSOCCLASS_PROGID_KEY">
            <summary>The hkClass member provides the full registry path of a ProgID.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ASSOCCLASS.ASSOCCLASS_PROGID_STR">
            <summary>The pszClass member names a ProgID found as <b>HKEY_CLASSES_ROOT</b>\ <i>pszClass</i>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ASSOCCLASS.ASSOCCLASS_CLSID_KEY">
            <summary>The hkClass member provides the full registry path of a CLSID.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ASSOCCLASS.ASSOCCLASS_CLSID_STR">
            <summary>The hkClass member names a CLSID found as <b>HKEY_CLASSES_ROOT</b>\ <b>CLSID</b>\ <i>pszClass</i>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ASSOCCLASS.ASSOCCLASS_APP_KEY">
            <summary>The hkClass member provides the full registry path of an application identifier (APPID).</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ASSOCCLASS.ASSOCCLASS_APP_STR">
            <summary>
            The APPID storing the application information is found at <b>HKEY_CLASSES_ROOT</b>\ <b>Applications</b>\ <i>FileName</i>
            where <i>FileName</i> is obtained by sending <b>pszClass</b> to PathFindFileName.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ASSOCCLASS.ASSOCCLASS_SYSTEM_STR">
            <summary>The pszClass member names a key found as <b>HKEY_CLASSES_ROOT</b>\ <b>SystemFileAssociations</b>\ <i>pszClass</i>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ASSOCCLASS.ASSOCCLASS_FOLDER">
            <summary>
            Use the association information for folders stored under <b>HKEY_CLASSES_ROOT</b>\ <b>Folder</b>. When this flag is set,
            <b>hkClass</b> and <b>pszClass</b> are ignored.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ASSOCCLASS.ASSOCCLASS_STAR">
            <summary>
            Use the association information stored under the <b>HKEY_CLASSES_ROOT</b>\ <b>*</b> subkey. When this flag is set,
            <b>hkClass</b> and <b>pszClass</b> are ignored.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ASSOCCLASS.ASSOCCLASS_FIXED_PROGID_STR">
            <summary>
            Introduced in Windows 8. Do not use the user defaults to apply the mapping of the class specified by the pszClass member.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ASSOCCLASS.ASSOCCLASS_PROTOCOL_STR">
            <summary>
            Introduced in Windows 8. Use the user defaults to apply the mapping of the class specified by the pszClass member; the class
            is a protocol.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.NIF">
            <summary>Flags for NOTIFYICONDATA.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NIF.NIF_MESSAGE">
            <summary>The uCallbackMessage member is valid.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NIF.NIF_ICON">
            <summary>The hIcon member is valid.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NIF.NIF_TIP">
            <summary>The szTip member is valid.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NIF.NIF_STATE">
            <summary>The dwState and dwStateMask members are valid.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NIF.NIF_INFO">
            <summary>
            Display a balloon notification. The szInfo, szInfoTitle, dwInfoFlags, and uTimeout members are valid. Note that uTimeout is
            valid only in Windows 2000 and Windows XP.
            <list type="bullet">
            <item>
            <description>To display the balloon notification, specify NIF_INFO and provide text in szInfo.</description>
            </item>
            <item>
            <description>To remove a balloon notification, specify NIF_INFO and provide an empty string through szInfo.</description>
            </item>
            <item>
            <description>To add a notification area icon without displaying a notification, do not set the NIF_INFO flag.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NIF.NIF_GUID">
            <summary>Windows 7 and later: The guidItem is valid.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NIF.NIF_REALTIME">
            <summary>
            Windows Vista and later. If the balloon notification cannot be displayed immediately, discard it. Use this flag for
            notifications that represent real-time information which would be meaningless or misleading if displayed at a later time. For
            example, a message that states "Your telephone is ringing." NIF_REALTIME is meaningful only when combined with the NIF_INFO flag.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NIF.NIF_SHOWTIP">
            <summary>
            Windows Vista and later. Use the standard tooltip. Normally, when uVersion is set to NOTIFYICON_VERSION_4, the standard
            tooltip is suppressed and can be replaced by the application-drawn, pop-up UI. If the application wants to show the standard
            tooltip with NOTIFYICON_VERSION_4, it can specify NIF_SHOWTIP to indicate the standard tooltip should still be shown.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.NIIF">
            <summary>Info flags for NOTIFYICONDATA.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NIIF.NIIF_NONE">
            <summary>No icon.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NIIF.NIIF_INFO">
            <summary>An information icon.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NIIF.NIIF_WARNING">
            <summary>A warning icon.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NIIF.NIIF_ERROR">
            <summary>An error icon.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NIIF.NIIF_USER">
            <summary>
            Windows XP SP2 and later.
            <list type="bullet">
            <item>
            <description>Windows XP: Use the icon identified in hIcon as the notification balloon's title icon.</description>
            </item>
            <item>
            <description>
            Windows Vista and later: Use the icon identified in hBalloonIcon as the notification balloon's title icon.
            </description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NIIF.NIIF_ICON_MASK">
            <summary>Windows XP and later. Reserved.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NIIF.NIIF_NOSOUND">
            <summary>Windows XP and later. Do not play the associated sound. Applies only to notifications.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NIIF.NIIF_LARGE_ICON">
            <summary>
            Windows Vista and later. The large version of the icon should be used as the notification icon. This corresponds to the icon
            with dimensions SM_CXICON x SM_CYICON. If this flag is not set, the icon with dimensions XM_CXSMICON x SM_CYSMICON is used.
            <list type="bullet">
            <item>
            <description>This flag can be used with all stock icons.</description>
            </item>
            <item>
            <description>
            Applications that use older customized icons (NIIF_USER with hIcon) must provide a new SM_CXICON x SM_CYICON version in the
            tray icon(hIcon). These icons are scaled down when they are displayed in the System Tray or System Control Area(SCA).
            </description>
            </item>
            <item>
            <description>
            New customized icons(NIIF_USER with hBalloonIcon) must supply an SM_CXICON x SM_CYICON version in the supplied icon(hBalloonIcon).
            </description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NIIF.NIIF_RESPECT_QUIET_TIME">
            <summary>
            Windows 7 and later. Do not display the balloon notification if the current user is in "quiet time", which is the first hour
            after a new user logs into his or her account for the first time. During this time, most notifications should not be sent or
            shown. This lets a user become accustomed to a new computer system without those distractions. Quiet time also occurs for
            each user after an operating system upgrade or clean installation. A notification sent with this flag during quiet time is
            not queued; it is simply dismissed unshown. The application can resend the notification later if it is still valid at that time.
            <para>
            Because an application cannot predict when it might encounter quiet time, we recommended that this flag always be set on all
            appropriate notifications by any application that means to honor quiet time.&gt;
            </para>
            <para>
            During quiet time, certain notifications should still be sent because they are expected by the user as feedback in response
            to a user action, for instance when he or she plugs in a USB device or prints a document.
            </para>
            <para>If the current user is not in quiet time, this flag has no effect.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.NIM">
            <summary>A value that specifies the action to be taken by <c>Shell_NotifyIcon</c>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NIM.NIM_ADD">
            <summary>
            Adds an icon to the status area. The icon is given an identifier in the NOTIFYICONDATA structure pointed to by lpdata—either
            through its uID or guidItem member. This identifier is used in subsequent calls to Shell_NotifyIcon to perform later actions
            on the icon.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NIM.NIM_MODIFY">
            <summary>
            Modifies an icon in the status area. NOTIFYICONDATA structure pointed to by lpdata uses the ID originally assigned to the
            icon when it was added to the notification area (NIM_ADD) to identify the icon to be modified.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NIM.NIM_DELETE">
            <summary>
            Deletes an icon from the status area. NOTIFYICONDATA structure pointed to by lpdata uses the ID originally assigned to the
            icon when it was added to the notification area (NIM_ADD) to identify the icon to be deleted.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NIM.NIM_SETFOCUS">
            <summary>
            Shell32.dll version 5.0 and later only. Returns focus to the taskbar notification area. Notification area icons should use
            this message when they have completed their UI operation. For example, if the icon displays a shortcut menu, but the user
            presses ESC to cancel it, use NIM_SETFOCUS to return focus to the notification area.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NIM.NIM_SETVERSION">
            <summary>
            Shell32.dll version 5.0 and later only. Instructs the notification area to behave according to the version number specified
            in the uVersion member of the structure pointed to by lpdata. The version number specifies which members are recognized.
            <para>
            NIM_SETVERSION must be called every time a notification area icon is added (NIM_ADD)&gt;. It does not need to be called with
            NIM_MOFIDY. The version setting is not persisted once a user logs off.
            </para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.NIN">
            <summary>Shell notification messages delivered as a result of calling <see cref="M:Vanara.PInvoke.Shell32.Shell_NotifyIcon(Vanara.PInvoke.Shell32.NIM,Vanara.PInvoke.Shell32.NOTIFYICONDATA@)"/>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NIN.NIN_SELECT">
            <summary>Sent when a user selects a notify icon with the mouse and activates it with the ENTER key</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NIN.NIN_KEYSELECT">
            <summary>
            Sent when a user selects a notify icon with the keyboard and activates it with the SPACEBAR or ENTER key, the version 5.0
            Shell sends the associated application an NIN_KEYSELECT notification. Earlier versions send WM_RBUTTONDOWN and WM_RBUTTONUP messages.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NIN.NIN_BALLOONSHOW">
            <summary>Sent when the balloon is shown (balloons are queued).</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NIN.NIN_BALLOONHIDE">
            <summary>
            Sent when the balloon disappears. For example, when the icon is deleted. This message is not sent if the balloon is
            dismissed because of a timeout or if the user clicks the mouse.
            <para>
            As of Windows 7, NIN_BALLOONHIDE is also sent when a notification with the NIIF_RESPECT_QUIET_TIME flag set attempts to
            display during quiet time (a user's first hour on a new computer). In that case, the balloon is never displayed at all.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NIN.NIN_BALLOONTIMEOUT">
            <summary>Sent when the balloon is dismissed because of a timeout.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NIN.NIN_BALLOONUSERCLICK">
            <summary>Sent when the balloon is dismissed because the user clicked the mouse.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NIN.NIN_POPUPOPEN">
            <summary>
            Sent when the user hovers the cursor over an icon to indicate that the richer pop-up UI should be used in place of a
            standard textual tooltip.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NIN.NIN_POPUPCLOSE">
            <summary>Sent when a cursor no longer hovers over an icon to indicate that the rich pop-up UI should be closed.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.NIS">
            <summary>State flags for NOTIFYICONDATA.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NIS.NIS_HIDDEN">
            <summary>The icon is hidden.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NIS.NIS_SHAREDICON">
            <summary>The icon resource is shared between multiple icons.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.OFFLINE_STATUS">
            <summary>Flags for SHIsFileAvailableOffline.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.OFFLINE_STATUS.OFFLINE_STATUS_LOCAL">
            <summary>If the file is open, it is open in the cache.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.OFFLINE_STATUS.OFFLINE_STATUS_REMOTE">
            <summary>If the file is open, it is open on the server.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.OFFLINE_STATUS.OFFLINE_STATUS_INCOMPLETE">
            <summary>The local copy is currently incomplete. The file cannot be opened in offline mode until it has been synchronized.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.PRINTACTION">
            <summary>Flags for SHInvokePrinterCommand.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.PRINTACTION.PRINTACTION_OPEN">
            <summary>0x0. Open the printer specified by . The parameter is ignored.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.PRINTACTION.PRINTACTION_PROPERTIES">
            <summary>
            0x1. Display the property pages for the printer specified by . The parameter can be <c>NULL</c> or can name a specific
            property sheet to display, either by name or number. If the high <c>WORD</c> of is nonzero, it is assumed that this parameter
            is a pointer to a buffer that contains the name of the sheet to open. Otherwise, is seen as the zero-based index of the
            property sheet to open.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.PRINTACTION.PRINTACTION_NETINSTALL">
            <summary>0x2. Install the network printer specified by . The parameter is ignored.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.PRINTACTION.PRINTACTION_NETINSTALLLINK">
            <summary>
            0x3. Create a shortcut to the network printer specified by . The parameter specifies the drive and path of the folder in
            which to create the shortcut. The network printer must already have been installed on the local computer.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.PRINTACTION.PRINTACTION_TESTPAGE">
            <summary>0x4. Print a test page on the printer specified by . The parameter is ignored.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.PRINTACTION.PRINTACTION_OPENNETPRN">
            <summary>0x5. Open the network printer specified by . The parameter is ignored.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.PRINTACTION.PRINTACTION_DOCUMENTDEFAULTS">
            <summary>0x6. Display the default document properties for the printer specified by . The parameter is ignored.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.PRINTACTION.PRINTACTION_SERVERPROPERTIES">
            <summary>0x7. Display the properties for the printer server specified by . The parameter is ignored.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.QUERY_USER_NOTIFICATION_STATE">
            <summary>
            <para>
            Specifies the state of the machine for the current user in relation to the propriety of sending a notification. Used by SHQueryUserNotificationState.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.QUERY_USER_NOTIFICATION_STATE.QUNS_NOT_PRESENT">
            <summary>A screen saver is displayed, the machine is locked, or a nonactive Fast User Switching session is in progress.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.QUERY_USER_NOTIFICATION_STATE.QUNS_BUSY">
            <summary>
            A full-screen application is running or Presentation Settings are applied. Presentation Settings allow a user to put their
            machine into a state fit for an uninterrupted presentation, such as a set of PowerPoint slides, with a single click.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.QUERY_USER_NOTIFICATION_STATE.QUNS_RUNNING_D3D_FULL_SCREEN">
            <summary>A full-screen (exclusive mode) Direct3D application is running.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.QUERY_USER_NOTIFICATION_STATE.QUNS_PRESENTATION_MODE">
            <summary>The user has activated Windows presentation settings to block notifications and pop-up messages.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.QUERY_USER_NOTIFICATION_STATE.QUNS_ACCEPTS_NOTIFICATIONS">
            <summary>None of the other states are found, notifications can be freely sent.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.QUERY_USER_NOTIFICATION_STATE.QUNS_QUIET_TIME">
            <summary>
            Introduced in Windows 7. The current user is in "quiet time", which is the first hour after a new user logs into his or her
            account for the first time. During this time, most notifications should not be sent or shown. This lets a user become
            accustomed to a new computer system without those distractions. Quiet time also occurs for each user after an operating
            system upgrade or clean installation. Applications should set the NIIF_RESPECT_QUIET_TIME flag in their notifications or
            balloon tooltip, which prevents those items from being displayed while the current user is in the quiet-time state. Note that
            during quiet time, if the user is in one of the other blocked modes (QUNS_NOT_PRESENT, QUNS_BUSY, QUNS_PRESENTATION_MODE, or
            QUNS_RUNNING_D3D_FULL_SCREEN) SHQueryUserNotificationState returns only that value, and does not report QUNS_QUIET_TIME.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.QUERY_USER_NOTIFICATION_STATE.QUNS_APP">
            <summary>Introduced in Windows 8. A Windows Store app is running.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.ShellExecuteMaskFlags">
            <summary>Flags that indicate the content and validity of the other structure members in <see cref="T:Vanara.PInvoke.Shell32.SHELLEXECUTEINFO"/>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellExecuteMaskFlags.SEE_MASK_DEFAULT">
            <summary>Use default values.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellExecuteMaskFlags.SEE_MASK_CLASSNAME">
            <summary>
            Use the class name given by the lpClass member. If both SEE_MASK_CLASSKEY and SEE_MASK_CLASSNAME are set, the class key is used.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellExecuteMaskFlags.SEE_MASK_CLASSKEY">
            <summary>
            Use the class key given by the hkeyClass member. If both SEE_MASK_CLASSKEY and SEE_MASK_CLASSNAME are set, the class key is used.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellExecuteMaskFlags.SEE_MASK_IDLIST">
            <summary>Use the item identifier list given by the lpIDList member. The lpIDList member must point to an ITEMIDLIST structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellExecuteMaskFlags.SEE_MASK_INVOKEIDLIST">
            <summary>
            Use the IContextMenu interface of the selected item's shortcut menu handler. Use either lpFile to identify the item by its
            file system path or lpIDList to identify the item by its PIDL. This flag allows applications to use ShellExecuteEx to invoke
            verbs from shortcut menu extensions instead of the static verbs listed in the registry. <note>SEE_MASK_INVOKEIDLIST overrides
            and implies SEE_MASK_IDLIST.</note>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellExecuteMaskFlags.SEE_MASK_ICON">
            <summary>
            Use the icon given by the hIcon member. This flag cannot be combined with SEE_MASK_HMONITOR. <note>This flag is used only in
            Windows XP and earlier. It is ignored as of Windows Vista.</note>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellExecuteMaskFlags.SEE_MASK_HOTKEY">
            <summary>Use the keyboard shortcut given by the dwHotKey member.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellExecuteMaskFlags.SEE_MASK_NOCLOSEPROCESS">
            <summary>
            Use to indicate that the hProcess member receives the process handle. This handle is typically used to allow an application
            to find out when a process created with ShellExecuteEx terminates. In some cases, such as when execution is satisfied through
            a DDE conversation, no handle will be returned. The calling application is responsible for closing the handle when it is no
            longer needed.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellExecuteMaskFlags.SEE_MASK_CONNECTNETDRV">
            <summary>
            Validate the share and connect to a drive letter. This enables reconnection of disconnected network drives. The lpFile member
            is a UNC path of a file on a network.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellExecuteMaskFlags.SEE_MASK_NOASYNC">
            <summary>
            Wait for the execute operation to complete before returning. This flag should be used by callers that are using ShellExecute
            forms that might result in an async activation, for example DDE, and create a process that might be run on a background
            thread. (Note: ShellExecuteEx runs on a background thread by default if the caller's threading model is not Apartment.) Calls
            to ShellExecuteEx from processes already running on background threads should always pass this flag. Also, applications that
            exit immediately after calling ShellExecuteEx should specify this flag.
            <para>
            If the execute operation is performed on a background thread and the caller did not specify the SEE_MASK_ASYNCOK flag, then
            the calling thread waits until the new process has started before returning. This typically means that either CreateProcess
            has been called, the DDE communication has completed, or that the custom execution delegate has notified ShellExecuteEx that
            it is done. If the SEE_MASK_WAITFORINPUTIDLE flag is specified, then ShellExecuteEx calls WaitForInputIdle and waits for the
            new process to idle before returning, with a maximum timeout of 1 minute.
            </para>
            <para>For further discussion on when this flag is necessary, see the Remarks section.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellExecuteMaskFlags.SEE_MASK_FLAG_DDEWAIT">
            <summary>Do not use; use SEE_MASK_NOASYNC instead.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellExecuteMaskFlags.SEE_MASK_DOENVSUBST">
            <summary>Expand any environment variables specified in the string given by the lpDirectory or lpFile member.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellExecuteMaskFlags.SEE_MASK_FLAG_NO_UI">
            <summary>Do not display an error message box if an error occurs.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellExecuteMaskFlags.SEE_MASK_UNICODE">
            <summary>Use this flag to indicate a Unicode application.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellExecuteMaskFlags.SEE_MASK_NO_CONSOLE">
            <summary>
            Use to inherit the parent's console for the new process instead of having it create a new console. It is the opposite of
            using a CREATE_NEW_CONSOLE flag with CreateProcess.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellExecuteMaskFlags.SEE_MASK_ASYNCOK">
            <summary>
            The execution can be performed on a background thread and the call should return immediately without waiting for the
            background thread to finish. Note that in certain cases ShellExecuteEx ignores this flag and waits for the process to finish
            before returning.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellExecuteMaskFlags.SEE_MASK_HMONITOR">
            <summary>
            Use this flag when specifying a monitor on multi-monitor systems. The monitor is specified in the hMonitor member. This flag
            cannot be combined with SEE_MASK_ICON.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellExecuteMaskFlags.SEE_MASK_NOZONECHECKS">
            <summary>
            Introduced in Windows XP. Do not perform a zone check. This flag allows ShellExecuteEx to bypass zone checking put into place
            by IAttachmentExecute.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellExecuteMaskFlags.SEE_MASK_NOQUERYCLASSSTORE">
            <summary>Not used.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellExecuteMaskFlags.SEE_MASK_WAITFORINPUTIDLE">
            <summary>
            After the new process is created, wait for the process to become idle before returning, with a one minute timeout. See
            WaitForInputIdle for more details.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellExecuteMaskFlags.SEE_MASK_FLAG_LOG_USAGE">
            <summary>
            Introduced in Windows XP. Keep track of the number of times this application has been launched. Applications with
            sufficiently high counts appear in the Start Menu's list of most frequently used programs.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellExecuteMaskFlags.SEE_MASK_FLAG_HINST_IS_SITE">
            <summary>
            The hInstApp member is used to specify the IUnknown of an object that implements IServiceProvider. This object will be used
            as a site pointer. The site pointer is used to provide services to the ShellExecute function, the handler binding process,
            and invoked verb handlers.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.ShellFileOperation">
            <summary>A value that indicates which operation to perform.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellFileOperation.FO_MOVE">
            <summary>Move the files specified in pFrom to the location specified in pTo.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellFileOperation.FO_COPY">
            <summary>Copy the files specified in the pFrom member to the location specified in the pTo member.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellFileOperation.FO_DELETE">
            <summary>Delete the files specified in pFrom.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellFileOperation.FO_RENAME">
            <summary>
            Rename the file specified in pFrom. You cannot use this flag to rename multiple files with a single function call. Use
            FO_MOVE instead.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.SHERB">
            <summary>FLags used by SHEmptyRecycleBin.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHERB.SHERB_NOCONFIRMATION">
            <summary>No dialog box confirming the deletion of the objects will be displayed.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHERB.SHERB_NOPROGRESSUI">
            <summary>No dialog box indicating the progress will be displayed.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHERB.SHERB_NOSOUND">
            <summary>No sound will be played when the operation is complete.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.SHGFI">
            <summary>
            The flags that specify the file information to retrieve from <see cref="M:Vanara.PInvoke.Shell32.SHGetFileInfo(System.String,System.IO.FileAttributes,Vanara.PInvoke.Shell32.SHFILEINFO@,System.Int32,Vanara.PInvoke.Shell32.SHGFI)"/>.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHGFI.SHGFI_ICON">
            <summary>
            Retrieve the handle to the icon that represents the file and the index of the icon within the system image list. The handle
            is copied to the hIcon member of the structure specified by psfi, and the index is copied to the iIcon member.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHGFI.SHGFI_DISPLAYNAME">
            <summary>
            Retrieve the display name for the file, which is the name as it appears in Windows Explorer. The name is copied to the
            szDisplayName member of the structure specified in psfi. The returned display name uses the long file name, if there is one,
            rather than the 8.3 form of the file name. Note that the display name can be affected by settings such as whether extensions
            are shown.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHGFI.SHGFI_TYPENAME">
            <summary>
            Retrieve the string that describes the file's type. The string is copied to the szTypeName member of the structure specified
            in psfi.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHGFI.SHGFI_ATTRIBUTES">
            <summary>
            Retrieve the item attributes. The attributes are copied to the dwAttributes member of the structure specified in the psfi
            parameter. These are the same attributes that are obtained from IShellFolder::GetAttributesOf.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHGFI.SHGFI_ICONLOCATION">
            <summary>
            Retrieve the name of the file that contains the icon representing the file specified by pszPath, as returned by the
            IExtractIcon::GetIconLocation method of the file's icon handler. Also retrieve the icon index within that file. The name of
            the file containing the icon is copied to the szDisplayName member of the structure specified by psfi. The icon's index is
            copied to that structure's iIcon member.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHGFI.SHGFI_EXETYPE">
            <summary>
            Retrieve the type of the executable file if pszPath identifies an executable file. The information is packed into the return
            value. This flag cannot be specified with any other flags.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHGFI.SHGFI_SYSICONINDEX">
            <summary>
            Retrieve the index of a system image list icon. If successful, the index is copied to the iIcon member of psfi. The return
            value is a handle to the system image list. Only those images whose indices are successfully copied to iIcon are valid.
            Attempting to access other images in the system image list will result in undefined behavior.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHGFI.SHGFI_LINKOVERLAY">
            <summary>
            Modify SHGFI_ICON, causing the function to add the link overlay to the file's icon. The SHGFI_ICON flag must also be set.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHGFI.SHGFI_SELECTED">
            <summary>
            Modify SHGFI_ICON, causing the function to blend the file's icon with the system highlight color. The SHGFI_ICON flag must
            also be set.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHGFI.SHGFI_ATTR_SPECIFIED">
            <summary>
            Modify SHGFI_ATTRIBUTES to indicate that the dwAttributes member of the SHFILEINFO structure at psfi contains the specific
            attributes that are desired. These attributes are passed to IShellFolder::GetAttributesOf. If this flag is not specified,
            0xFFFFFFFF is passed to IShellFolder::GetAttributesOf, requesting all attributes. This flag cannot be specified with the
            SHGFI_ICON flag.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHGFI.SHGFI_LARGEICON">
            <summary>
            Modify SHGFI_ICON, causing the function to retrieve the file's large icon. The SHGFI_ICON flag must also be set.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHGFI.SHGFI_SMALLICON">
            <summary>
            Modify SHGFI_ICON, causing the function to retrieve the file's small icon. Also used to modify SHGFI_SYSICONINDEX, causing
            the function to return the handle to the system image list that contains small icon images. The SHGFI_ICON and/or
            SHGFI_SYSICONINDEX flag must also be set.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHGFI.SHGFI_OPENICON">
            <summary>
            Modify SHGFI_ICON, causing the function to retrieve the file's open icon. Also used to modify SHGFI_SYSICONINDEX, causing the
            function to return the handle to the system image list that contains the file's small open icon. A container object displays
            an open icon to indicate that the container is open. The SHGFI_ICON and/or SHGFI_SYSICONINDEX flag must also be set.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHGFI.SHGFI_SHELLICONSIZE">
            <summary>
            Modify SHGFI_ICON, causing the function to retrieve a Shell-sized icon. If this flag is not specified the function sizes the
            icon according to the system metric values. The SHGFI_ICON flag must also be set.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHGFI.SHGFI_PIDL">
            <summary>Indicate that pszPath is the address of an ITEMIDLIST structure rather than a path name.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHGFI.SHGFI_USEFILEATTRIBUTES">
            <summary>
            Indicates that the function should not attempt to access the file specified by pszPath. Rather, it should act as if the file
            specified by pszPath exists with the file attributes passed in dwFileAttributes. This flag cannot be combined with the
            SHGFI_ATTRIBUTES, SHGFI_EXETYPE, or SHGFI_PIDL flags.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHGFI.SHGFI_ADDOVERLAYS">
            <summary>Apply the appropriate overlays to the file's icon. The SHGFI_ICON flag must also be set.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHGFI.SHGFI_OVERLAYINDEX">
            <summary>
            Return the index of the overlay icon. The value of the overlay index is returned in the upper eight bits of the iIcon member
            of the structure specified by psfi. This flag requires that the SHGFI_ICON be set as well.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.SHGNLI">
            <summary>Flags for SHGetNewLinkInfo.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHGNLI.SHGNLI_PIDL">
            <summary>
            0x000000001. The target pointed to by is a PIDL that represents the target. If this flag is not included, is regarded as the
            address of a string that contains the path and file name of the target.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHGNLI.SHGNLI_NOUNIQUE">
            <summary>
            0x000000002. Skip the normal checks that ensure that the shortcut name is unique within the destination folder. If this flag
            is not included, the function creates the shortcut name and then determines whether the name is unique in the destination
            folder. If a file with the same name already exists in the destination folder, the shortcut name will be modified. This
            process is repeated until a unique name is found.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHGNLI.SHGNLI_PREFIXNAME">
            <summary>0x000000004. The created name will be preceded by the string "Shortcut to ".</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHGNLI.SHGNLI_NOLNK">
            <summary>
            0x000000008. Version 5.0 Do not add the .lnk file name extension. You must set the <c>_WIN32_IE</c> macro to 5.01 or greater
            to use this flag. For more information about versioning, see Shell and Common Controls Versions.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHGNLI.SHGNLI_NOLOCNAME">
            <summary>
            0x000000010. <c>Windows Vista and later</c>. Use the non-localized parsing name of the target pointed to by as the name of
            the shortcut file. If this flag is not set, the localized name is used.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHGNLI.SHGNLI_USEURLEXT">
            <summary>
            0x000000020. <c>Windows 7 and later</c>. Append a .url file name extension (rather than .lnk) to the name pointed to by . If
            this flag is not set, the shortcut name uses a .lnk extension unless SHGNLI_NOLNK is set.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.SHGSI">
            <summary>Flags for SHGetStockIconInfo.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHGSI.SHGSI_ICONLOCATION">
            <summary>
            The <c>szPath</c> and <c>iIcon</c> members of the SHSTOCKICONINFO structure receive the path and icon index of the requested
            icon, in a format suitable for passing to the ExtractIcon function. The numerical value of this flag is zero, so you always
            get the icon location regardless of other flags.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHGSI.SHGSI_ICON">
            <summary>The <c>hIcon</c> member of the SHSTOCKICONINFO structure receives a handle to the specified icon.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHGSI.SHGSI_SYSICONINDEX">
            <summary>
            The <c>iSysImageImage</c> member of the SHSTOCKICONINFO structure receives the index of the specified icon in the system imagelist.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHGSI.SHGSI_LINKOVERLAY">
            <summary>Modifies the SHGSI_ICON value by causing the function to add the link overlay to the file's icon.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHGSI.SHGSI_SELECTED">
            <summary>Modifies the SHGSI_ICON value by causing the function to blend the icon with the system highlight color.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHGSI.SHGSI_LARGEICON">
            <summary>
            Modifies the SHGSI_ICON value by causing the function to retrieve the large version of the icon, as specified by the
            SM_CXICON and SM_CYICON system metrics.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHGSI.SHGSI_SMALLICON">
            <summary>
            Modifies the SHGSI_ICON value by causing the function to retrieve the small version of the icon, as specified by the
            SM_CXSMICON and SM_CYSMICON system metrics.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHGSI.SHGSI_SHELLICONSIZE">
            <summary>
            Modifies the SHGSI_LARGEICON or SHGSI_SMALLICON values by causing the function to retrieve the Shell-sized icons rather than
            the sizes specified by the system metrics.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.SHSTOCKICONID">
            <summary>
            <para>Used by SHGetStockIconInfo to identify which stock system icon to retrieve.</para>
            </summary>
            <remarks>
            <para>SIID_INVALID, with a value of -1, indicates an invalid <c>SHSTOCKICONID</c> value.</para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_DOCNOASSOC">
            <summary>Document of a type with no associated application.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_DOCASSOC">
            <summary>Document of a type with an associated application.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_APPLICATION">
            <summary>Generic application with no custom icon.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_FOLDER">
            <summary>Folder (generic, unspecified state).</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_FOLDEROPEN">
            <summary>Folder (open).</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_DRIVE525">
            <summary>5.25-inch disk drive.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_DRIVE35">
            <summary>3.5-inch disk drive.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_DRIVEREMOVE">
            <summary>Removable drive.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_DRIVEFIXED">
            <summary>Fixed drive (hard disk).</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_DRIVENET">
            <summary>Network drive (connected).</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_DRIVENETDISABLED">
            <summary>Network drive (disconnected).</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_DRIVECD">
            <summary>CD drive.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_DRIVERAM">
            <summary>RAM disk drive.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_WORLD">
            <summary>The entire network.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_SERVER">
            <summary>A computer on the network.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_PRINTER">
            <summary>A local printer or print destination.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_MYNETWORK">
            <summary>The Network virtual folder (FOLDERID_NetworkFolder/CSIDL_NETWORK).</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_FIND">
            <summary>The Search feature.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_HELP">
            <summary>The Help and Support feature.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_SHARE">
            <summary>Overlay for a shared item.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_LINK">
            <summary>Overlay for a shortcut.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_SLOWFILE">
            <summary>Overlay for items that are expected to be slow to access.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_RECYCLER">
            <summary>The Recycle Bin (empty).</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_RECYCLERFULL">
            <summary>The Recycle Bin (not empty).</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_MEDIACDAUDIO">
            <summary>Audio CD media.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_LOCK">
            <summary>Security lock.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_AUTOLIST">
            <summary>A virtual folder that contains the results of a search.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_PRINTERNET">
            <summary>A network printer.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_SERVERSHARE">
            <summary>A server shared on a network.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_PRINTERFAX">
            <summary>A local fax printer.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_PRINTERFAXNET">
            <summary>A network fax printer.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_PRINTERFILE">
            <summary>A file that receives the output of a Print to file operation.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_STACK">
            <summary>A category that results from a Stack by command to organize the contents of a folder.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_MEDIASVCD">
            <summary>Super Video CD (SVCD) media.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_STUFFEDFOLDER">
            <summary>A folder that contains only subfolders as child items.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_DRIVEUNKNOWN">
            <summary>Unknown drive type.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_DRIVEDVD">
            <summary>DVD drive.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_MEDIADVD">
            <summary>DVD media.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_MEDIADVDRAM">
            <summary>DVD-RAM media.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_MEDIADVDRW">
            <summary>DVD-RW media.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_MEDIADVDR">
            <summary>DVD-R media.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_MEDIADVDROM">
            <summary>DVD-ROM media.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_MEDIACDAUDIOPLUS">
            <summary>CD+ (enhanced audio CD) media.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_MEDIACDRW">
            <summary>CD-RW media.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_MEDIACDR">
            <summary>CD-R media.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_MEDIACDBURN">
            <summary>A writeable CD in the process of being burned.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_MEDIABLANKCD">
            <summary>Blank writable CD media.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_MEDIACDROM">
            <summary>CD-ROM media.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_AUDIOFILES">
            <summary>An audio file.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_IMAGEFILES">
            <summary>An image file.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_VIDEOFILES">
            <summary>A video file.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_MIXEDFILES">
            <summary>A mixed file.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_FOLDERBACK">
            <summary>Folder back.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_FOLDERFRONT">
            <summary>Folder front.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_SHIELD">
            <summary>Security shield. Use for UAC prompts only.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_WARNING">
            <summary>Warning.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_INFO">
            <summary>Informational.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_ERROR">
            <summary>Error.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_KEY">
            <summary>Key.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_SOFTWARE">
            <summary>Software.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_RENAME">
            <summary>A UI item, such as a button, that issues a rename command.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_DELETE">
            <summary>A UI item, such as a button, that issues a delete command.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_MEDIAAUDIODVD">
            <summary>Audio DVD media.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_MEDIAMOVIEDVD">
            <summary>Movie DVD media.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_MEDIAENHANCEDCD">
            <summary>Enhanced CD media.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_MEDIAENHANCEDDVD">
            <summary>Enhanced DVD media.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_MEDIAHDDVD">
            <summary>High definition DVD media in the HD DVD format.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_MEDIABLURAY">
            <summary>High definition DVD media in the Blu-ray Disc™ format.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_MEDIAVCD">
            <summary>Video CD (VCD) media.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_MEDIADVDPLUSR">
            <summary>DVD+R media.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_MEDIADVDPLUSRW">
            <summary>DVD+RW media.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_DESKTOPPC">
            <summary>A desktop computer.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_MOBILEPC">
            <summary>A mobile computer (laptop).</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_USERS">
            <summary>The User Accounts Control Panel item.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_MEDIASMARTMEDIA">
            <summary>Smart media.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_MEDIACOMPACTFLASH">
            <summary>CompactFlash media.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_DEVICECELLPHONE">
            <summary>A cell phone.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_DEVICECAMERA">
            <summary>A digital camera.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_DEVICEVIDEOCAMERA">
            <summary>A digital video camera.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_DEVICEAUDIOPLAYER">
            <summary>An audio player.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_NETWORKCONNECT">
            <summary>Connect to network.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_INTERNET">
            <summary>The Network and Internet Control Panel item.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_ZIPFILE">
            <summary>A compressed file with a .zip file name extension.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_SETTINGS">
            <summary>The Additional Options Control Panel item.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_DRIVEHDDVD">
            <summary>
            Windows Vista with Service Pack 1 (SP1) and later. High definition DVD drive (any type - HD DVD-ROM, HD DVD-R, HD-DVD-RAM)
            that uses the HD DVD format.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_DRIVEBD">
            <summary>
            Windows Vista with SP1 and later. High definition DVD drive (any type - BD-ROM, BD-R, BD-RE) that uses the Blu-ray Disc format.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_MEDIAHDDVDROM">
            <summary>Windows Vista with SP1 and later. High definition DVD-ROM media in the HD DVD-ROM format.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_MEDIAHDDVDR">
            <summary>Windows Vista with SP1 and later. High definition DVD-R media in the HD DVD-R format.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_MEDIAHDDVDRAM">
            <summary>Windows Vista with SP1 and later. High definition DVD-RAM media in the HD DVD-RAM format.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_MEDIABDROM">
            <summary>Windows Vista with SP1 and later. High definition DVD-ROM media in the Blu-ray Disc BD-ROM format.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_MEDIABDR">
            <summary>Windows Vista with SP1 and later. High definition write-once media in the Blu-ray Disc BD-R format.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_MEDIABDRE">
            <summary>Windows Vista with SP1 and later. High definition read/write media in the Blu-ray Disc BD-RE format.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_CLUSTEREDDRIVE">
            <summary>Windows Vista with SP1 and later. A cluster disk array.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONID.SIID_MAX_ICONS">
            <summary>The highest valid value in the enumeration. Values over 160 are Windows 7-only icons.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.AssocCreateForClasses(Vanara.PInvoke.Shell32.ASSOCIATIONELEMENT[],System.UInt32,System.Guid@,System.Object@)">
            <summary>
            <para>Retrieves an object that implements an IQueryAssociations interface.</para>
            </summary>
            <param name="rgClasses">
            <para>Type: <c>const ASSOCIATIONELEMENT*</c></para>
            <para>A pointer to an array of ASSOCIATIONELEMENT structures.</para>
            </param>
            <param name="cClasses">
            <para>Type: <c>ULONG</c></para>
            <para>The number of elements in the array pointed to by .</para>
            </param>
            <param name="riid">
            <para>Type: <c>REFIID</c></para>
            <para>Reference to the desired IID, normally IID_IQueryAssociations.</para>
            </param>
            <param name="ppv">
            <para>Type: <c>void**</c></para>
            <para>When this method returns, contains the interface pointer requested in . This is normally IQueryAssociations.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this function succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            <para>For systems earlier than Windows Vista, use the AssocCreate function.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.AssocCreateForClasses``1(Vanara.PInvoke.Shell32.ASSOCIATIONELEMENT[])">
            <summary>Retrieves an object that implements an IQueryAssociations interface.</summary>
            <typeparam name="TIntf">Reference to the desired IID type, normally IQueryAssociations.</typeparam>
            <param name="rgClasses"><para>Type: <c>const ASSOCIATIONELEMENT*</c></para>
            <para>A pointer to an array of ASSOCIATIONELEMENT structures.</para></param>
            <returns>
            When this method returns, contains the interface pointer requested in . This is normally IQueryAssociations.
            </returns>
            <remarks>For systems earlier than Windows Vista, use the AssocCreate function.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.CommandLineToArgvW(System.String,System.Int32@)">
            <summary>
            <para>
            Parses a Unicode command line string and returns an array of pointers to the command line arguments, along with a count of such
            arguments, in a way that is similar to the standard C run-time and values.
            </para>
            </summary>
            <param name="lpCmdLine">
            <para>Type: <c>LPCWSTR</c></para>
            <para>
            Pointer to a <c>null</c>-terminated Unicode string that contains the full command line. If this parameter is an empty string the
            function returns the path to the current executable file.
            </para>
            </param>
            <param name="pNumArgs">
            <para>Type: <c>int*</c></para>
            <para>Pointer to an <c>int</c> that receives the number of array elements returned, similar to .</para>
            </param>
            <returns>
            <para>Type: <c>LPWSTR*</c></para>
            <para>A pointer to an array of <c>LPWSTR</c> values, similar to .</para>
            <para>If the function fails, the return value is <c>NULL</c>. To get extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            The address returned by <c>CommandLineToArgvW</c> is the address of the first element in an array of <c>LPWSTR</c> values; the
            number of pointers in this array is indicated by . Each pointer to a <c>null</c>-terminated Unicode string represents an
            individual argument found on the command line.
            </para>
            <para>
            <c>CommandLineToArgvW</c> allocates a block of contiguous memory for pointers to the argument strings, and for the argument
            strings themselves; the calling application must free the memory used by the argument list when it is no longer needed. To free
            the memory, use a single call to the LocalFree function.
            </para>
            <para>For more information about the and argument convention, see Argument Definitions and Parsing C++ Command-Line Arguments.</para>
            <para>The GetCommandLineW function can be used to get a command line string that is suitable for use as the parameter.</para>
            <para>
            This function accepts command lines that contain a program name; the program name can be enclosed in quotation marks or not.
            </para>
            <para>
            <c>CommandLineToArgvW</c> has a special interpretation of backslash characters when they are followed by a quotation mark
            character ("). This interpretation assumes that any preceding argument is a valid file system path, or else it may behave unpredictably.
            </para>
            <para>
            This special interpretation controls the "in quotes" mode tracked by the parser. When this mode is off, whitespace terminates the
            current argument. When on, whitespace is added to the argument like all other characters.
            </para>
            <list type="bullet">
            <item>
            2 backslashes followed by a quotation mark produce backslashes followed by begin/end quote. This does not become part of the
            parsed argument, but toggles the "in quotes" mode.
            </item>
            <item>
            (2) + 1 backslashes followed by a quotation mark again produce backslashes followed by a quotation mark literal ("). This does
            not toggle the "in quotes" mode.
            </item>
            <item>backslashes not followed by a quotation mark simply produce backslashes.</item>
            </list>
            <para>
            <c>Important</c><c>CommandLineToArgvW</c> treats whitespace outside of quotation marks as argument delimiters. However, if starts
            with any amount of whitespace, <c>CommandLineToArgvW</c> will consider the first argument to be an empty string. Excess
            whitespace at the end of is ignored.
            </para>
            <para>Examples</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.CommandLineToArgvW(System.String)">
            <summary>Parses a Unicode command line string and returns an array of pointers to the command line arguments, along with a count of such arguments, in a way that is similar to the standard C run-time argv and argc values.</summary>
            <param name="lpCmdLine">
            <para>Type: <c>LPCWSTR</c></para>
            <para>Pointer to a <c>null</c>-terminated Unicode string that contains the full command line. If this parameter is an empty string the function returns the path to the current executable file.</para>
            </param>
            <returns>
            <para>An array of <c>LPWSTR</c> values, similar to argv.</para>
            <para>If the function fails, the return value is an empty array. To get extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>For more information about the argv and argc argument convention, see Argument Definitions and Parsing C++ Command-Line Arguments.</para>
            <para>The GetCommandLineW function can be used to get a command line string that is suitable for use as the lpCmdLine parameter.</para>
            <para>This function accepts command lines that contain a program name; the program name can be enclosed in quotation marks or not.</para>
            <para><c>CommandLineToArgvW</c> has a special interpretation of backslash characters when they are followed by a quotation mark character ("). This interpretation assumes that any preceding argument is a valid file system path, or else it may behave unpredictably.</para>
            <para>This special interpretation controls the "in quotes" mode tracked by the parser. When this mode is off, whitespace terminates the current argument. When on, whitespace is added to the argument like all other characters.</para>
            <list type="bullet">
            <item>
            <term>2n backslashes followed by a quotation mark produce n backslashes followed by begin/end quote. This does not become part of the parsed argument, but toggles the "in quotes" mode.</term>
            </item>
            <item>
            <term>(2n) + 1 backslashes followed by a quotation mark again produce n backslashes followed by a quotation mark literal ("). This does not toggle the "in quotes" mode.</term>
            </item>
            <item>
            <term>n backslashes not followed by a quotation mark simply produce n backslashes.</term>
            </item>
            </list>
            <para><c>Important</c> <c>CommandLineToArgvW</c> treats whitespace outside of quotation marks as argument delimiters. However, if lpCmdLine starts with any amount of whitespace, <c>CommandLineToArgvW</c> will consider the first argument to be an empty string. Excess whitespace at the end of lpCmdLine is ignored.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.DragAcceptFiles(Vanara.PInvoke.HWND,System.Boolean)">
            <summary>
            <para>Registers whether a window accepts dropped files.</para>
            </summary>
            <param name="hWnd">
            <para>Type: <c>HWND</c></para>
            <para>The identifier of the window that is registering whether it will accept dropped files.</para>
            </param>
            <param name="fAccept">
            <para>Type: <c>BOOL</c></para>
            <para>
            A value that indicates if the window identified by the parameter accepts dropped files. This value is <c>TRUE</c> to accept
            dropped files or <c>FALSE</c> to discontinue accepting dropped files.
            </para>
            </param>
            <returns>
            <para>No return value.</para>
            </returns>
            <remarks>
            <para>
            An application that calls <c>DragAcceptFiles</c> with the parameter set to <c>TRUE</c> has identified itself as able to process
            the WM_DROPFILES message from File Manager.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.DragFinish(Vanara.PInvoke.HDROP)">
            <summary>
            <para>Releases memory that the system allocated for use in transferring file names to the application.</para>
            </summary>
            <param name="hDrop">
            <para>Type: <c>HDROP</c></para>
            <para>
            Identifier of the structure that describes dropped files. This handle is retrieved from the parameter of the WM_DROPFILES message.
            </para>
            </param>
            <returns>
            <para>No return value.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.DragQueryFile(Vanara.PInvoke.HDROP,System.UInt32,System.String,System.UInt32)">
            <summary>
            <para>Retrieves the names of dropped files that result from a successful drag-and-drop operation.</para>
            </summary>
            <param name="hDrop">
            <para>Type: <c>HDROP</c></para>
            <para>Identifier of the structure that contains the file names of the dropped files.</para>
            </param>
            <param name="iFile">
            <para>Type: <c>UINT</c></para>
            <para>
            Index of the file to query. If the value of this parameter is 0xFFFFFFFF, <c>DragQueryFile</c> returns a count of the files
            dropped. If the value of this parameter is between zero and the total number of files dropped, <c>DragQueryFile</c> copies the
            file name with the corresponding value to the buffer pointed to by the parameter.
            </para>
            </param>
            <param name="lpszFile">
            <para>Type: <c>LPTSTR</c></para>
            <para>
            The address of a buffer that receives the file name of a dropped file when the function returns. This file name is a
            null-terminated string. If this parameter is <c>NULL</c>, <c>DragQueryFile</c> returns the required size, in characters, of this buffer.
            </para>
            </param>
            <param name="cch">
            <para>Type: <c>UINT</c></para>
            <para>The size, in characters, of the buffer.</para>
            </param>
            <returns>
            <para>Type: <c>UINT</c></para>
            <para>A nonzero value indicates a successful call.</para>
            <para>
            When the function copies a file name to the buffer, the return value is a count of the characters copied, not including the
            terminating null character.
            </para>
            <para>
            If the index value is 0xFFFFFFFF, the return value is a count of the dropped files. Note that the index variable itself returns
            unchanged, and therefore remains 0xFFFFFFFF.
            </para>
            <para>
            If the index value is between zero and the total number of dropped files, and the buffer address is <c>NULL</c>, the return value
            is the required size, in characters, of the buffer, the terminating null character.
            </para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.DragQueryPoint(Vanara.PInvoke.HDROP,Vanara.PInvoke.POINT@)">
            <summary>
            <para>Retrieves the position of the mouse pointer at the time a file was dropped during a drag-and-drop operation.</para>
            </summary>
            <param name="hDrop">
            <para>Type: <c>HDROP</c></para>
            <para>Handle of the drop structure that describes the dropped file.</para>
            </param>
            <param name="ppt">
            <para>TBD</para>
            </param>
            <returns>
            <para>Type: <c>BOOL</c></para>
            <para><c>TRUE</c> if the drop occurred in the client area of the window; otherwise <c>FALSE</c>.</para>
            </returns>
            <remarks>
            <para>The window for which coordinates are returned is the window that received the WM_DROPFILES message.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.DuplicateIcon(Vanara.PInvoke.HINSTANCE,Vanara.PInvoke.HICON)">
            <summary>Creates a duplicate of a specified icon.</summary>
            <param name="hInst">Type: <c>HINSTANCE</c></param>
            <param name="hIcon">
            <para>Type: <c>HICON</c></para>
            <para>Handle to the icon to be duplicated.</para>
            </param>
            <returns>
            <para>Type: <c>HICON</c></para>
            <para>If successful, the function returns the handle to the new icon that was created; otherwise, <c>NULL</c>.</para>
            </returns>
            <remarks>
            When it is no longer needed, the caller is responsible for freeing the icon handle returned by <c>DuplicateIcon</c> by calling
            the DestroyIcon function.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ExtractAssociatedIcon(Vanara.PInvoke.HINSTANCE,System.Text.StringBuilder,System.UInt16@)">
            <summary>Gets a handle to an icon stored as a resource in a file or an icon stored in a file's associated executable file.</summary>
            <param name="hInst">
            <para>Type: <c>HINSTANCE</c></para>
            <para>A handle to the instance of the calling application.</para>
            </param>
            <param name="pszIconPath">
            <para>Type: <c>LPTSTR</c></para>
            <para>
            Pointer to a string that, on entry, specifies the full path and file name of the file that contains the icon. The function
            extracts the icon handle from that file, or from an executable file associated with that file.
            </para>
            <para>
            When this function returns, if the icon handle was obtained from an executable file (either an executable file pointed to by
            <c>lpIconPath</c> or an associated executable file) the function stores the full path and file name of that executable in the
            buffer pointed to by this parameter.
            </para>
            </param>
            <param name="piIcon">
            <para>Type: <c>LPWORD</c></para>
            <para>Pointer to a <c>WORD</c> value that, on entry, specifies the index of the icon whose handle is to be obtained.</para>
            <para>
            When the function returns, if the icon handle was obtained from an executable file (either an executable file pointed to by
            <c>lpIconPath</c> or an associated executable file), this value points to the icon's index in that file.
            </para>
            </param>
            <returns>
            <para>Type: <c>HICON</c></para>
            <para>
            If the function succeeds, the return value is an icon handle. If the icon is extracted from an associated executable file, the
            function stores the full path and file name of the executable file in the string pointed to by <c>lpIconPath</c>, and stores the
            icon's identifier in the <c>WORD</c> pointed to by <c>lpiIcon</c>.
            </para>
            <para>If the function fails, the return value is <c>NULL</c>.</para>
            </returns>
            <remarks>
            <para>
            When it is no longer needed, the caller is responsible for freeing the icon handle returned by <c>ExtractAssociatedIcon</c> by
            calling the DestroyIcon function.
            </para>
            <para>
            The <c>ExtractAssociatedIcon</c> function first looks for the indexed icon in the file specified by <c>lpIconPath</c>. If the
            function cannot obtain the icon handle from that file, and the file has an associated executable file, it looks in that
            executable file for an icon. Associations with executable files are based on file name extensions and are stored in the per-user
            part of the registry.
            </para>
            <para>
            <para>Note</para>
            <para>
            The shellapi.h header defines ExtractAssociatedIcon as an alias which automatically selects the ANSI or Unicode version of this
            function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that
            not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see Conventions
            for Function Prototypes.
            </para>
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ExtractAssociatedIconEx(Vanara.PInvoke.HINSTANCE,System.Text.StringBuilder,System.UInt16@,System.UInt16@)">
            <summary>
            <para>
            [ <c>ExtractAssociatedIconEx</c> is available for use in the operating systems specified in the Requirements section. It may be
            altered or unavailable in subsequent versions.]
            </para>
            <para>
            Gets a handle to an icon stored as a resource in a file or an icon stored in a file's associated executable file. It extends the
            ExtractAssociatedIcon function by retrieving the icon's ID when that icon is extracted from an executable file.
            </para>
            </summary>
            <param name="hInst">
            <para>Type: <c>HINSTANCE</c></para>
            <para>The handle of the module from which to extract the icon.</para>
            </param>
            <param name="pszIconPath">
            <para>Type: <c>LPTSTR</c></para>
            <para>
            Pointer to a string that, on entry, specifies the full path and file name of the file that contains the icon. The function
            extracts the icon handle from that file, or from an executable file associated with that file.
            </para>
            <para>
            When this function returns, if the icon handle was obtained from an executable file (either an executable file directly pointed
            to by this parameter or an associated executable file) the function stores the full path and file name of that executable in the
            buffer pointed to by this parameter.
            </para>
            </param>
            <param name="piIconIndex">
            <para>Type: <c>LPWORD</c></para>
            <para>Pointer to a <c>WORD</c> value that, on entry, specifies the index of the icon whose handle is to be obtained.</para>
            <para>
            When the function returns, if the icon handle was obtained from an executable file (either an executable file pointed to by
            <c>lpIconPath</c> or an associated executable file), this value points to the icon's index in that file.
            </para>
            </param>
            <param name="piIconId">
            <para>Type: <c>LPWORD</c></para>
            <para>Pointer to a <c>WORD</c> value that, on entry, specifies the ID of the icon whose handle is to be obtained.</para>
            <para>
            When the function returns, if the icon handle was obtained from an executable file (either an executable file pointed to by
            <c>lpIconPath</c> or an associated executable file), this value points to the icon's ID within that file.
            </para>
            </param>
            <returns>
            <para>Type: <c>HICON</c></para>
            <para>Returns the icon's handle if successful, otherwise <c>NULL</c>.</para>
            </returns>
            <remarks>
            <para>The icon handle returned by this function must be released by calling DestroyIcon when it is no longer needed.</para>
            <para>
            <para>Note</para>
            <para>
            The shellapi.h header defines ExtractAssociatedIconEx as an alias which automatically selects the ANSI or Unicode version of this
            function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that
            not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see Conventions
            for Function Prototypes.
            </para>
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ExtractIcon(Vanara.PInvoke.HINSTANCE,System.String,System.Int32)">
            <summary>
            <para>Gets a handle to an icon from the specified executable file, DLL, or icon file.</para>
            <para>To retrieve an array of handles to large or small icons, use the ExtractIconEx function.</para>
            </summary>
            <param name="hInst">
            <para>Type: <c>HINSTANCE</c></para>
            <para>Handle to the instance of the application that calls the function.</para>
            </param>
            <param name="pszExeFileName">
            <para>Type: <c>LPCTSTR</c></para>
            <para>Pointer to a null-terminated string that specifies the name of an executable file, DLL, or icon file.</para>
            </param>
            <param name="nIconIndex">
            <para>Type: <c>UINT</c></para>
            <para>
            Specifies the zero-based index of the icon to retrieve. For example, if this value is 0, the function returns a handle to the
            first icon in the specified file.
            </para>
            <para>
            If this value is -1, the function returns the total number of icons in the specified file. If the file is an executable file or
            DLL, the return value is the number of RT_GROUP_ICON resources. If the file is an .ICO file, the return value is 1.
            </para>
            <para>
            If this value is a negative number not equal to –1, the function returns a handle to the icon in the specified file whose
            resource identifier is equal to the absolute value of <c>nIconIndex</c>. For example, you should use –3 to extract the icon whose
            resource identifier is 3. To extract the icon whose resource identifier is 1, use the ExtractIconEx function.
            </para>
            </param>
            <returns>
            <para>Type: <c>HICON</c></para>
            <para>
            The return value is a handle to an icon. If the file specified was not an executable file, DLL, or icon file, the return is 1. If
            no icons were found in the file, the return value is <c>NULL</c>.
            </para>
            </returns>
            <remarks>
            <para>
            When it is no longer needed, you must destroy the icon handle returned by <c>ExtractIcon</c> by calling the DestroyIcon function.
            </para>
            <para>
            <para>Note</para>
            <para>
            The shellapi.h header defines ExtractIcon as an alias which automatically selects the ANSI or Unicode version of this function
            based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not
            encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see Conventions for
            Function Prototypes.
            </para>
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ExtractIconEx(System.String,System.Int32,Vanara.PInvoke.HICON[],Vanara.PInvoke.HICON[],System.UInt32)">
            <summary>
            The <c>ExtractIconEx</c> function creates an array of handles to large or small icons extracted from the specified executable
            file, DLL, or icon file.
            </summary>
            <param name="lpszFile">
            <para>Type: <c>LPCTSTR</c></para>
            <para>
            Pointer to a null-terminated string that specifies the name of an executable file, DLL, or icon file from which icons will be extracted.
            </para>
            </param>
            <param name="nIconIndex">
            <para>Type: <c>int</c></para>
            <para>
            Specifies the zero-based index of the first icon to extract. For example, if this value is zero, the function extracts the first
            icon in the specified file.
            </para>
            <para>
            If this value is –1 and <c>phiconLarge</c> and <c>phiconSmall</c> are both <c>NULL</c>, the function returns the total number of
            icons in the specified file. If the file is an executable file or DLL, the return value is the number of RT_GROUP_ICON resources.
            If the file is an .ico file, the return value is 1.
            </para>
            <para>
            If this value is a negative number and either <c>phiconLarge</c> or <c>phiconSmall</c> is not <c>NULL</c>, the function begins by
            extracting the icon whose resource identifier is equal to the absolute value of <c>nIconIndex</c>. For example, use -3 to extract
            the icon whose resource identifier is 3.
            </para>
            </param>
            <param name="phiconLarge">
            <para>Type: <c>HICON*</c></para>
            <para>
            Pointer to an array of icon handles that receives handles to the large icons extracted from the file. If this parameter is
            <c>NULL</c>, no large icons are extracted from the file.
            </para>
            </param>
            <param name="phiconSmall">
            <para>Type: <c>HICON*</c></para>
            <para>
            Pointer to an array of icon handles that receives handles to the small icons extracted from the file. If this parameter is
            <c>NULL</c>, no small icons are extracted from the file.
            </para>
            </param>
            <param name="nIcons">
            <para>Type: <c>UINT</c></para>
            <para>The number of icons to extract from the file.</para>
            </param>
            <returns>
            <para>Type: <c>UINT</c></para>
            <para>
            If the nIconIndex parameter is -1 and both the phiconLarge and phiconSmall parameters are <c>NULL</c>, then the return value is
            the number of icons contained in the specified file.
            </para>
            <para>
            If the nIconIndex parameter is any value other than -1 and either phiconLarge or phiconSmall is not <c>NULL</c>, the return value
            is the number of icons successfully extracted from the file.
            </para>
            <para>
            <para>Note</para>
            <para>
            If the function encounters an error, it returns <c>UINT_MAX</c>. In this case, you can call GetLastError to retrieve the error
            code. For example, this function returns <c>UINT_MAX</c> if the file specified by lpszFile cannot be found while the nIconIndex
            parameter is any value other than -1 and either phiconLarge or phiconSmall is not <c>NULL</c>. In this case, <c>GetLastError</c>
            returns <c>ERROR_FILE_NOT_FOUND</c> (2).
            </para>
            </para>
            </returns>
            <remarks>
            <para>
            When they are no longer needed, you must destroy all icons extracted by <c>ExtractIconEx</c> by calling the DestroyIcon function.
            </para>
            <para>
            To retrieve the dimensions of the large and small icons, use this function with the SM_CXICON, SM_CYICON, SM_CXSMICON, and
            SM_CYSMICON flags.
            </para>
            <para>
            <para>Note</para>
            <para>
            The shellapi.h header defines ExtractIconEx as an alias which automatically selects the ANSI or Unicode version of this function
            based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not
            encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see Conventions for
            Function Prototypes.
            </para>
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ExtractIconEx(System.String,System.Int32,System.UInt32,Vanara.PInvoke.User32.SafeHICON[]@,Vanara.PInvoke.User32.SafeHICON[]@)">
            <summary>The <c>ExtractIconEx</c> function creates an array of handles to large or small icons extracted from the specified executable file, DLL, or icon file.</summary>
            <param name="lpszFile">
            <para>Type: <c>LPCTSTR</c></para>
            <para>Pointer to a null-terminated string that specifies the name of an executable file, DLL, or icon file from which icons will be extracted.</para>
            </param>
            <param name="nIconIndex">
            <para>Type: <c>int</c></para>
            <para>Specifies the zero-based index of the first icon to extract. For example, if this value is zero, the function extracts the first icon in the specified file.</para>
            <para>If this value is –1 and phiconLarge and phiconSmall are both <c>NULL</c>, the function returns the total number of icons in the specified file. If the file is an executable file or DLL, the return value is the number of RT_GROUP_ICON resources. If the file is an .ico file, the return value is 1.</para>
            <para>If this value is a negative number and either phiconLarge or phiconSmall is not <c>NULL</c>, the function begins by extracting the icon whose resource identifier is equal to the absolute value of nIconIndex. For example, use -3 to extract the icon whose resource identifier is 3.</para>
            </param>
            <param name="nIcons">
            <para>Type: <c>UINT</c></para>
            <para>The number of icons to extract from the file.</para>
            </param>
            <param name="phiconLarge">
            <para>Type: <c>SafeHICON[]</c></para>
            <para>An array of icon handles that receives handles to the large icons extracted from the file. If this parameter is <c>NULL</c>, no large icons were extracted from the file.</para>
            </param>
            <param name="phiconSmall">
            <para>Type: <c>SafeHICON[]</c></para>
            <para>An array of icon handles that receives handles to the small icons extracted from the file. If this parameter is <c>NULL</c>, no small icons were extracted from the file.</para>
            </param>
            <returns>
            <para>Type: <c>UINT</c></para>
            <para>If the nIconIndex parameter is -1, the phiconLarge parameter is <c>NULL</c>, and the phiconSmall parameter is <c>NULL</c>, then the return value is the number of icons contained in the specified file. Otherwise, the return value is the number of icons successfully extracted from the file.</para>
            </returns>
            <remarks>
            <para>To retrieve the dimensions of the large and small icons, use this function with the SM_CXICON, SM_CYICON, SM_CXSMICON, and SM_CYSMICON flags.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.FileIconInit(System.Boolean)">
            <summary>Initializes or reinitializes the system image list.</summary>
            <param name="fRestoreCache">
            <para>Type: <c>BOOL</c></para>
            <para><c>TRUE</c> to restore the system image cache from disk; <c>FALSE</c> otherwise.</para>
            </param>
            <returns>
            <para>Type: <c>BOOL</c></para>
            <para><c>TRUE</c> if the cache was successfully refreshed, <c>FALSE</c> if the initialization failed.</para>
            </returns>
            <remarks>
            <para>If you are using system image lists in your own process, you must call <c>FileIconInit</c> at the following times:</para>
            <list type="bullet">
            <item>
            <term>On launch.</term>
            </item>
            <item>
            <term>In response to a <c>WM_SETTINGCHANGE</c> message when the <c>SPI_SETNONCLIENTMETRICS</c> flag is set.</term>
            </item>
            </list>
            <para><c>FileIconInit</c> is not included in a header file. You must call it directly from Shell32.dll, using ordinal 660.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.FindExecutable(System.String,System.String,System.Text.StringBuilder)">
            <summary>
            <para>Retrieves the name of and handle to the executable (.exe) file associated with a specific document file.</para>
            </summary>
            <param name="lpFile">
            <para>Type: <c>LPCTSTR</c></para>
            <para>The address of a <c>null</c>-terminated string that specifies a file name. This file should be a document.</para>
            </param>
            <param name="lpDirectory">
            <para>Type: <c>LPCTSTR</c></para>
            <para>The address of a <c>null</c>-terminated string that specifies the default directory. This value can be <c>NULL</c>.</para>
            </param>
            <param name="lpResult">
            <para>Type: <c>LPTSTR</c></para>
            <para>
            The address of a buffer that receives the file name of the associated executable file. This file name is a <c>null</c>-terminated
            string that specifies the executable file started when an "open" by association is run on the file specified in the parameter.
            Put simply, this is the application that is launched when the document file is directly double-clicked or when <c>Open</c> is
            chosen from the file's shortcut menu. This parameter must contain a valid non- <c>null</c> value and is assumed to be of length
            MAX_PATH. Responsibility for validating the value is left to the programmer.
            </para>
            </param>
            <returns>
            <para>Type: <c>HINSTANCE</c></para>
            <para>Returns a value greater than 32 if successful, or a value less than or equal to 32 representing an error.</para>
            <para>The following table lists possible error values.</para>
            <list type="table">
            <listheader>
            <term>Return code/value</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>SE_ERR_FNF 2</term>
            <term>The specified file was not found.</term>
            </item>
            <item>
            <term>SE_ERR_PNF 3</term>
            <term>The specified path is invalid.</term>
            </item>
            <item>
            <term>SE_ERR_ACCESSDENIED 5</term>
            <term>The specified file cannot be accessed.</term>
            </item>
            <item>
            <term>SE_ERR_OOM 8</term>
            <term>The system is out of memory or resources.</term>
            </item>
            <item>
            <term>SE_ERR_NOASSOC 31</term>
            <term>There is no association for the specified file type with an executable file.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>Use <c>FindExecutable</c> for documents. If you want to retrieve the path of an executable file, use the following:</para>
            <para>
            Here, pszExecutableName is a pointer to a null-terminated string that specifies the name of the executable file, pszPath is a
            pointer to the null-terminated string buffer that receives the path to the executable file, and pcchOut is a pointer to a DWORD
            that specifies the number of characters in the pszPath buffer. When the function returns, pcchOut is set to the number of
            characters actually placed in the buffer. See AssocQueryString for more information.
            </para>
            <para>
            When <c>FindExecutable</c> returns, the parameter may contain the path to the Dynamic Data Exchange (DDE) server started if a
            server does not respond to a request to initiate a DDE conversation with the DDE client application.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.InitNetworkAddressControl">
            <summary>
            <para>Initializes the network address control window class.</para>
            </summary>
            <returns>
            <para>Type: <c>BOOL</c></para>
            <para><c>TRUE</c> if the initialization succeeded; or <c>FALSE</c> otherwise.</para>
            </returns>
            <remarks>
            <para>
            The network address control looks like an edit control and offers the additional functionality of network address verification.
            The control uses a balloon tip to display error messages.
            </para>
            <para>This function initializes class WC_NETADDRESS. If this function returns <c>TRUE</c>, the control can be created.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHAddDefaultPropertiesByExt(System.String,Vanara.PInvoke.PropSys.IPropertyStore)">
            <summary>
            <para>Adds default properties to the property store as registered for the specified file extension.</para>
            </summary>
            <param name="pszExt">
            <para>Type: <c>PCWSTR</c></para>
            <para>A pointer to a null-terminated, Unicode string that specifies the extension.</para>
            </param>
            <param name="pPropStore">
            <para>Type: <c>IPropertyStore*</c></para>
            <para>A pointer to the IPropertyStore interface that defines the default properties to add.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this function succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            <para>
            The list of properties used to set a default value comes from the registry value of the ProgID for the file association of the
            specified file extension. The list is prefixed by "" and contains the canonical names of the properties to set the default value,
            such as: "". The possible properties for this list are <c>System.Author</c>, <c>System.Document.DateCreated</c>, and
            <c>System.Photo.DateTaken</c>. If the value does not exist on the ProgID, this function uses the default found on the value of <c>HKEY_CLASSES_ROOT*</c>.
            </para>
            <para>
            <c>System.Author</c> has the value of the user that performed the action. <c>System.Document.DateCreated</c> and
            <c>System.Photo.DateTaken</c> use the current date. These three properties are the only ones for which the system provides
            special defaults.
            </para>
            <para>Note that there are several types of properties:</para>
            <list type="number">
            <item>Properties that derive from the file system (such as, size and date created)</item>
            <item>Properties that derive from the file (such as, dimensions and number of pages)</item>
            <item>Properties that are placed in the file (such as, author and tags)</item>
            </list>
            <para>
            When creating a new file, types one and two are provided just by creating the file. But properties of type three must be set
            explicitly by a program. The system provides
            </para>
            <para>SHAddDefaultPropertiesByExt</para>
            <para>
            to provide values for up to three specific properties of type three. Sometimes Windows Explorer uses this API when saving a file
            for the first time, or when creating a new file after the menu choice
            </para>
            <para>New</para>
            <para>is selected from a shortcut menu.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHAddFromPropSheetExtArray(System.IntPtr,Vanara.PInvoke.ComCtl32.AddPropSheetPageProc,System.IntPtr)">
            <summary>
            <para>
            [This function is available through Windows XP Service Pack 2 (SP2) and Windows Server 2003. It might be altered or unavailable
            in subsequent versions of Windows.]
            </para>
            <para>Adds pages to a property sheet extension array created by SHCreatePropSheetExtArray.</para>
            </summary>
            <param name="hpsxa">
            <para>Type: <c>HPSXA</c></para>
            <para>The array of property sheet handlers returned by SHCreatePropSheetExtArray.</para>
            </param>
            <param name="lpfnAddPage">
            <para>Type: <c>LPFNADDPROPSHEETPAGE</c></para>
            <para>
            A pointer to an AddPropSheetPageProc callback function. It is called once for each property sheet handler. The callback function
            then returns the information needed to add a page to the handler's property sheet.
            </para>
            </param>
            <param name="lParam">
            <para>Type: <c>LPARAM</c></para>
            <para>A pointer to application-defined data. This data is passed to the callback function specified by .</para>
            </param>
            <returns>
            <para>Type: <c>UINT</c></para>
            <para>Returns the number of pages actually added.</para>
            </returns>
            <remarks>
            <para>This function should be called only once for the property sheet extension array named in .</para>
            <para>This function calls each extension's IShellPropSheetExt::AddPages method. See that page for further details.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHAlloc(Vanara.PInvoke.SizeT)">
            <summary>
            <para>
            [This function is available through Windows XP Service Pack 2 (SP2) and Windows Server 2003. It might be altered or unavailable
            in subsequent versions of Windows. Use CoTaskMemAlloc instead.]
            </para>
            <para>Allocates memory from the Shell's heap.</para>
            </summary>
            <param name="cb">
            <para>Type: <c>SIZE_T</c></para>
            <para>The number of bytes of memory to allocate.</para>
            </param>
            <returns>
            <para>Type: <c>LPVOID</c></para>
            <para>A pointer to the allocated memory.</para>
            </returns>
            <remarks>
            <para>You can free this memory by calling SHFree.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHAppBarMessage(Vanara.PInvoke.Shell32.ABM,Vanara.PInvoke.Shell32.APPBARDATA@)">
            <summary>
            <para>Sends an appbar message to the system.</para>
            </summary>
            <param name="dwMessage">
            <para>Type: <c>DWORD</c></para>
            <para>Appbar message value to send. This parameter can be one of the following values.</para>
            <para>ABM_NEW (0x00000000)</para>
            <para>
            Registers a new appbar and specifies the message identifier that the system should use to send notification messages to the appbar.
            </para>
            <para>ABM_REMOVE (0x00000001)</para>
            <para>Unregisters an appbar, removing the bar from the system's internal list.</para>
            <para>ABM_QUERYPOS (0x00000002)</para>
            <para>Requests a size and screen position for an appbar.</para>
            <para>ABM_SETPOS (0x00000003)</para>
            <para>Sets the size and screen position of an appbar.</para>
            <para>ABM_GETSTATE (0x00000004)</para>
            <para>Retrieves the autohide and always-on-top states of the Windows taskbar.</para>
            <para>ABM_GETTASKBARPOS (0x00000005)</para>
            <para>
            Retrieves the bounding rectangle of the Windows taskbar. Note that this applies only to the system taskbar. Other objects,
            particularly toolbars supplied with third-party software, also can be present. As a result, some of the screen area not covered
            by the Windows taskbar might not be visible to the user. To retrieve the area of the screen not covered by both the taskbar and
            other app bars—the working area available to your application—, use the GetMonitorInfo function.
            </para>
            <para>ABM_ACTIVATE (0x00000006)</para>
            <para>
            Notifies the system to activate or deactivate an appbar. The <c>lParam</c> member of the APPBARDATA pointed to by is set to
            <c>TRUE</c> to activate or <c>FALSE</c> to deactivate.
            </para>
            <para>ABM_GETAUTOHIDEBAR (0x00000007)</para>
            <para>Retrieves the handle to the autohide appbar associated with a particular edge of the screen.</para>
            <para>ABM_SETAUTOHIDEBAR (0x00000008)</para>
            <para>Registers or unregisters an autohide appbar for an edge of the screen.</para>
            <para>ABM_WINDOWPOSCHANGED (0x00000009)</para>
            <para>Notifies the system when an appbar's position has changed.</para>
            <para>ABM_SETSTATE (0x0000000A)</para>
            <para><c>Windows XP and later:</c> Sets the state of the appbar's autohide and always-on-top attributes.</para>
            <para>ABM_GETAUTOHIDEBAREX (0x0000000B)</para>
            <para>
            <c>Windows XP and later:</c> Retrieves the handle to the autohide appbar associated with a particular edge of a particular monitor.
            </para>
            <para>ABM_SETAUTOHIDEBAREX (0x0000000C)</para>
            <para><c>Windows XP and later:</c> Registers or unregisters an autohide appbar for an edge of a particular monitor.</para>
            </param>
            <param name="pData">
            <para>Type: <c>PAPPBARDATA</c></para>
            <para>
            A pointer to an APPBARDATA structure. The content of the structure on entry and on exit depends on the value set in the
            parameter. See the individual message pages for specifics.
            </para>
            </param>
            <returns>
            <para>Type: <c>UINT_PTR</c></para>
            <para>
            This function returns a message-dependent value. For more information, see the Windows SDK documentation for the specific appbar
            message sent. Links to those documents are given in the See Also section.
            </para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.Shell_NotifyIcon(Vanara.PInvoke.Shell32.NIM,Vanara.PInvoke.Shell32.NOTIFYICONDATA@)">
            <summary>
            <para>Sends a message to the taskbar's status area.</para>
            </summary>
            <param name="dwMessage">
            <para>Type: <c>DWORD</c></para>
            <para>A value that specifies the action to be taken by this function. It can have one of the following values:</para>
            <para>NIM_ADD (0x00000000)</para>
            <para>
            0x00000000. Adds an icon to the status area. The icon is given an identifier in the NOTIFYICONDATA structure pointed to by
            lpdata—either through its <c>uID</c> or <c>guidItem</c> member. This identifier is used in subsequent calls to
            <c>Shell_NotifyIcon</c> to perform later actions on the icon.
            </para>
            <para>NIM_MODIFY (0x00000001)</para>
            <para>
            0x00000001. Modifies an icon in the status area. NOTIFYICONDATA structure pointed to by lpdata uses the ID originally assigned to
            the icon when it was added to the notification area (NIM_ADD) to identify the icon to be modified.
            </para>
            <para>NIM_DELETE (0x00000002)</para>
            <para>
            0x00000002. Deletes an icon from the status area. NOTIFYICONDATA structure pointed to by lpdata uses the ID originally assigned
            to the icon when it was added to the notification area (NIM_ADD) to identify the icon to be deleted.
            </para>
            <para>NIM_SETFOCUS (0x00000003)</para>
            <para>
            0x00000003. Shell32.dll version 5.0 and later only. Returns focus to the taskbar notification area. Notification area icons
            should use this message when they have completed their UI operation. For example, if the icon displays a shortcut menu, but the
            user presses ESC to cancel it, use <c>NIM_SETFOCUS</c> to return focus to the notification area.
            </para>
            <para>NIM_SETVERSION (0x00000004)</para>
            <para>
            0x00000004. Shell32.dll version 5.0 and later only. Instructs the notification area to behave according to the version number
            specified in the <c>uVersion</c> member of the structure pointed to by lpdata. The version number specifies which members are recognized.
            </para>
            <para>
            NIM_SETVERSION must be called every time a notification area icon is added (NIM_ADD)&gt;. It does not need to be called with
            NIM_MOFIDY. The version setting is not persisted once a user logs off.
            </para>
            <para>For details, see the Remarks section.</para>
            </param>
            <param name="lpData">
            <para>Type: <c>PNOTIFYICONDATA</c></para>
            <para>
            A pointer to a NOTIFYICONDATA structure. The content of the structure depends on the value of dwMessage. It can define an icon to
            add to the notification area, cause that icon to display a notification, or identify an icon to modify or delete.
            </para>
            </param>
            <returns>
            <para>Type: <c>BOOL</c></para>
            <para>
            Returns <c>TRUE</c> if successful, or <c>FALSE</c> otherwise. If dwMessage is set to NIM_SETVERSION, the function returns
            <c>TRUE</c> if the version was successfully changed, or <c>FALSE</c> if the requested version is not supported.
            </para>
            </returns>
            <remarks>
            <para>
            As of Windows 2000 (Shell32.dll version 5.0), if you set the <c>uVersion</c> member of the NOTIFYICONDATA structure pointed to by
            lpdata to NOTIFYICON_VERSION_4 or higher, <c>Shell_NotifyIcon</c> mouse and keyboard events are handled differently than in
            earlier versions of Windows. The differences include the following:
            </para>
            <list type="bullet">
            <item>
            <term>
            If a user selects a notify icon's shortcut menu with the keyboard, the Shell now sends the associated application a
            WM_CONTEXTMENU message. Earlier versions send WM_RBUTTONDOWN and WM_RBUTTONUP messages.
            </term>
            </item>
            <item>
            <term>
            If a user selects a notify icon with the keyboard and activates it with the SPACEBAR or ENTER key, the version 5.0 Shell sends
            the associated application an NIN_KEYSELECT notification. Earlier versions send WM_RBUTTONDOWN and WM_RBUTTONUP messages.
            </term>
            </item>
            <item>
            <term>
            If a user selects a notify icon with the mouse and activates it with the ENTER key, the Shell now sends the associated
            application an NIN_SELECT notification. Earlier versions send WM_RBUTTONDOWN and WM_RBUTTONUP messages.
            </term>
            </item>
            </list>
            <para>
            As of Windows XP (Shell32.dll version 6.0), if a user passes the mouse pointer over an icon with which a balloon notification is
            associated, the Shell sends the following messages:
            </para>
            <list type="bullet">
            <item>
            <term>NIN_BALLOONSHOW. Sent when the balloon is shown (balloons are queued).</term>
            </item>
            <item>
            <term>
            NIN_BALLOONHIDE. Sent when the balloon disappears. For example, when the icon is deleted. This message is not sent if the balloon
            is dismissed because of a timeout or if the user clicks the mouse.
            </term>
            </item>
            <item>
            <term>NIN_BALLOONTIMEOUT. Sent when the balloon is dismissed because of a timeout.</term>
            </item>
            <item>
            <term>NIN_BALLOONUSERCLICK. Sent when the balloon is dismissed because the user clicked the mouse.</term>
            </item>
            </list>
            <para>
            In addition to those messages, as of Windows Vista (Shell32.dll version 6.0.6), if a user passes the mouse pointer over an icon
            with which a balloon notification is associated, the Windows Vista Shell also adds the following messages:
            </para>
            <list type="bullet">
            <item>
            <term>
            NIN_POPUPOPEN. Sent when the user hovers the cursor over an icon to indicate that the richer pop-up UI should be used in place of
            a standard textual tooltip.
            </term>
            </item>
            <item>
            <term>NIN_POPUPCLOSE. Sent when a cursor no longer hovers over an icon to indicate that the rich pop-up UI should be closed.</term>
            </item>
            </list>
            <para>
            Regardless of the operating system version, you can select which way the Shell should behave by calling <c>Shell_NotifyIcon</c>
            with dwMessage set to <c>NIM_SETVERSION</c>. Set the <c>uVersion</c> member of the NOTIFYICONDATA structure pointed to by lpdata
            to indicate whether you want Windows 2000, Windows Vista, or pre-version 5.0 (Windows 95) behavior.
            </para>
            <para>
            <c>Note</c> The messages discussed above are not conventional Windows messages. They are sent as the lParam value of the
            application-defined message that is specified in the <c>uCallbackMessage</c> member of the NOTIFYICONDATA structure pointed to by
            lpdata, when <c>Shell_NotifyIcon</c> is called with the <c>NIM_ADD</c> flag set in dwMessage.
            </para>
            <para>
            As of Windows XP Service Pack 2 (SP2), a custom icon can be displayed in the notification balloon. This allows the calling
            process to customize the notification beyond the previously available options of info, warning, and error, and distinguish it
            from other types of notification for the user.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.Shell_NotifyIconGetRect(Vanara.PInvoke.Shell32.NOTIFYICONIDENTIFIER@,Vanara.PInvoke.RECT@)">
            <summary>
            <para>Gets the screen coordinates of the bounding rectangle of a notification icon.</para>
            </summary>
            <param name="identifier">
            <para>Type: <c>const NOTIFYICONIDENTIFIER*</c></para>
            <para>Pointer to a NOTIFYICONIDENTIFIER structure that identifies the icon.</para>
            </param>
            <param name="iconLocation">
            <para>Type: <c>RECT*</c></para>
            <para>Pointer to a RECT structure that, when this function returns successfully, receives the coordinates of the icon.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this function succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ShellAbout(Vanara.PInvoke.HWND,System.String,System.String,Vanara.PInvoke.HICON)">
            <summary>
            <para>Displays a <c>ShellAbout</c> dialog box.</para>
            </summary>
            <param name="hWnd">
            <para>Type: <c>HWND</c></para>
            <para>A window handle to a parent window. This parameter can be <c>NULL</c>.</para>
            </param>
            <param name="szApp">
            <para>Type: <c>LPCTSTR</c></para>
            <para>
            A pointer to a null-terminated string that contains text to be displayed in the title bar of the <c>ShellAbout</c> dialog box and
            on the first line of the dialog box after the text "Microsoft". If the text contains a separator (#) that divides it into two
            parts, the function displays the first part in the title bar and the second part on the first line after the text "Microsoft".
            </para>
            <para>
            <c>Windows 2000, Windows XP, Windows Server 2003</c>: If the string pointed to by this parameter contains a separator (#), then
            the string must be writeable.
            </para>
            <para><c>Windows Vista, Windows Server 2008</c>: This string cannot exceed 200 characters in length.</para>
            </param>
            <param name="szOtherStuff">
            <para>Type: <c>LPCTSTR</c></para>
            <para>
            A pointer to a null-terminated string that contains text to be displayed in the dialog box after the version and copyright
            information. This parameter can be <c>NULL</c>.
            </para>
            </param>
            <param name="hIcon">
            <para>Type: <c>HICON</c></para>
            <para>
            The handle of an icon that the function displays in the dialog box. This parameter can be <c>NULL</c>, in which case the function
            displays the Windows icon.
            </para>
            </param>
            <returns>
            <para>Type: <c>int</c></para>
            <para><c>TRUE</c> if successful; otherwise, <c>FALSE</c>.</para>
            </returns>
            <remarks>
            <para>Note that the <c>ShellAbout</c> function dialog box uses text and a default icon that are specific to Windows.</para>
            <para>
            To see an example of a <c>ShellAbout</c> dialog box, choose <c>About Windows</c> from the <c>Help</c> menu drop-down list in
            Windows Explorer.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ShellExecute(Vanara.PInvoke.HWND,System.String,System.String,System.String,System.String,Vanara.PInvoke.ShowWindowCommand)">
            <summary>
            <para>Performs an operation on a specified file.</para>
            </summary>
            <param name="hwnd">
            <para>Type: <c>HWND</c></para>
            <para>
            A handle to the parent window used for displaying a UI or error messages. This value can be <c>NULL</c> if the operation is not
            associated with a window.
            </para>
            </param>
            <param name="lpOperation">
            <para>Type: <c>LPCTSTR</c></para>
            <para>
            A pointer to a <c>null</c>-terminated string, referred to in this case as a , that specifies the action to be performed. The set
            of available verbs depends on the particular file or folder. Generally, the actions available from an object's shortcut menu are
            available verbs. The following verbs are commonly used:
            </para>
            <para>edit</para>
            <para>Launches an editor and opens the document for editing. If is not a document file, the function will fail.</para>
            <para>explore</para>
            <para>Explores a folder specified by .</para>
            <para>find</para>
            <para>Initiates a search beginning in the directory specified by .</para>
            <para>open</para>
            <para>Opens the item specified by the parameter. The item can be a file or folder.</para>
            <para>print</para>
            <para>Prints the file specified by . If is not a document file, the function fails.</para>
            <para>NULL</para>
            <para>
            The default verb is used, if available. If not, the "open" verb is used. If neither verb is available, the system uses the first
            verb listed in the registry.
            </para>
            </param>
            <param name="lpFile">
            <para>Type: <c>LPCTSTR</c></para>
            <para>
            A pointer to a <c>null</c>-terminated string that specifies the file or object on which to execute the specified verb. To specify
            a Shell namespace object, pass the fully qualified parse name. Note that not all verbs are supported on all objects. For example,
            not all document types support the "print" verb. If a relative path is used for the parameter do not use a relative path for .
            </para>
            </param>
            <param name="lpParameters">
            <para>Type: <c>LPCTSTR</c></para>
            <para>
            If specifies an executable file, this parameter is a pointer to a <c>null</c>-terminated string that specifies the parameters to
            be passed to the application. The format of this string is determined by the verb that is to be invoked. If specifies a document
            file, should be <c>NULL</c>.
            </para>
            </param>
            <param name="lpDirectory">
            <para>Type: <c>LPCTSTR</c></para>
            <para>
            A pointer to a <c>null</c>-terminated string that specifies the default (working) directory for the action. If this value is
            <c>NULL</c>, the current working directory is used. If a relative path is provided at , do not use a relative path for .
            </para>
            </param>
            <param name="nShowCmd">
            <para>Type: <c>INT</c></para>
            <para>
            The flags that specify how an application is to be displayed when it is opened. If specifies a document file, the flag is simply
            passed to the associated application. It is up to the application to decide how to handle it. These values are defined in Winuser.h.
            </para>
            <para>SW_HIDE (0)</para>
            <para>Hides the window and activates another window.</para>
            <para>SW_MAXIMIZE (3)</para>
            <para>Maximizes the specified window.</para>
            <para>SW_MINIMIZE (6)</para>
            <para>Minimizes the specified window and activates the next top-level window in the z-order.</para>
            <para>SW_RESTORE (9)</para>
            <para>
            Activates and displays the window. If the window is minimized or maximized, Windows restores it to its original size and
            position. An application should specify this flag when restoring a minimized window.
            </para>
            <para>SW_SHOW (5)</para>
            <para>Activates the window and displays it in its current size and position.</para>
            <para>SW_SHOWDEFAULT (10)</para>
            <para>
            Sets the show state based on the SW_ flag specified in the STARTUPINFO structure passed to the CreateProcess function by the
            program that started the application. An application should call ShowWindow with this flag to set the initial show state of its
            main window.
            </para>
            <para>SW_SHOWMAXIMIZED (3)</para>
            <para>Activates the window and displays it as a maximized window.</para>
            <para>SW_SHOWMINIMIZED (2)</para>
            <para>Activates the window and displays it as a minimized window.</para>
            <para>SW_SHOWMINNOACTIVE (7)</para>
            <para>Displays the window as a minimized window. The active window remains active.</para>
            <para>SW_SHOWNA (8)</para>
            <para>Displays the window in its current state. The active window remains active.</para>
            <para>SW_SHOWNOACTIVATE (4)</para>
            <para>Displays a window in its most recent size and position. The active window remains active.</para>
            <para>SW_SHOWNORMAL (1)</para>
            <para>
            Activates and displays a window. If the window is minimized or maximized, Windows restores it to its original size and position.
            An application should specify this flag when displaying the window for the first time.
            </para>
            </param>
            <returns>
            <para>Type: <c>HINSTANCE</c></para>
            <para>
            If the function succeeds, it returns a value greater than 32. If the function fails, it returns an error value that indicates the
            cause of the failure. The return value is cast as an HINSTANCE for backward compatibility with 16-bit Windows applications. It is
            not a true HINSTANCE, however. It can be cast only to an <c>int</c> and compared to either 32 or the following error codes below.
            </para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>0</term>
            <term>The operating system is out of memory or resources.</term>
            </item>
            <item>
            <term>ERROR_FILE_NOT_FOUND</term>
            <term>The specified file was not found.</term>
            </item>
            <item>
            <term>ERROR_PATH_NOT_FOUND</term>
            <term>The specified path was not found.</term>
            </item>
            <item>
            <term>ERROR_BAD_FORMAT</term>
            <term>The .exe file is invalid (non-Win32 .exe or error in .exe image).</term>
            </item>
            <item>
            <term>SE_ERR_ACCESSDENIED</term>
            <term>The operating system denied access to the specified file.</term>
            </item>
            <item>
            <term>SE_ERR_ASSOCINCOMPLETE</term>
            <term>The file name association is incomplete or invalid.</term>
            </item>
            <item>
            <term>SE_ERR_DDEBUSY</term>
            <term>The DDE transaction could not be completed because other DDE transactions were being processed.</term>
            </item>
            <item>
            <term>SE_ERR_DDEFAIL</term>
            <term>The DDE transaction failed.</term>
            </item>
            <item>
            <term>SE_ERR_DDETIMEOUT</term>
            <term>The DDE transaction could not be completed because the request timed out.</term>
            </item>
            <item>
            <term>SE_ERR_DLLNOTFOUND</term>
            <term>The specified DLL was not found.</term>
            </item>
            <item>
            <term>SE_ERR_FNF</term>
            <term>The specified file was not found.</term>
            </item>
            <item>
            <term>SE_ERR_NOASSOC</term>
            <term>
            There is no application associated with the given file name extension. This error will also be returned if you attempt to print a
            file that is not printable.
            </term>
            </item>
            <item>
            <term>SE_ERR_OOM</term>
            <term>There was not enough memory to complete the operation.</term>
            </item>
            <item>
            <term>SE_ERR_PNF</term>
            <term>The specified path was not found.</term>
            </item>
            <item>
            <term>SE_ERR_SHARE</term>
            <term>A sharing violation occurred.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            Because <c>ShellExecute</c> can delegate execution to Shell extensions (data sources, context menu handlers, verb
            implementations) that are activated using Component Object Model (COM), COM should be initialized before <c>ShellExecute</c> is
            called. Some Shell extensions require the COM single-threaded apartment (STA) type. In that case, COM should be initialized as
            shown here:
            </para>
            <para>This method allows you to execute any commands in a folder's shortcut menu or stored in the registry.</para>
            <para>To open a folder, use either of the following calls:</para>
            <para>or</para>
            <para>To explore a folder, use the following call:</para>
            <para>To launch the Shell's Find utility for a directory, use the following call.</para>
            <para>If</para>
            <para>lpOperation</para>
            <para>is</para>
            <para>NULL</para>
            <para>, the function opens the file specified by</para>
            <para>lpFile</para>
            <para>. If</para>
            <para>lpOperation</para>
            <para>is "open" or "explore", the function attempts to open or explore the folder.</para>
            <para>To obtain information about the application that is launched as a result of calling <c>ShellExecute</c>, use ShellExecuteEx.</para>
            <para>
            <c>Note</c> The <c>Launch folder windows in a separate process</c> setting in Folder Options affects <c>ShellExecute</c>. If that
            option is disabled (the default setting), <c>ShellExecute</c> uses an open Explorer window rather than launch a new one. If no
            Explorer window is open, <c>ShellExecute</c> launches a new one.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ShellExecuteEx(Vanara.PInvoke.Shell32.SHELLEXECUTEINFO@)">
            <summary>Performs an operation on a specified file.</summary>
            <param name="lpExecInfo">
            A pointer to a SHELLEXECUTEINFO structure that contains and receives information about the application being executed.
            </param>
            <returns>Returns TRUE if successful; otherwise, FALSE. Call GetLastError for extended error information.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHEmptyRecycleBin(Vanara.PInvoke.HWND,System.String,Vanara.PInvoke.Shell32.SHERB)">
            <summary>
            <para>Empties the Recycle Bin on the specified drive.</para>
            </summary>
            <param name="hwnd">
            <para>Type: <c>HWND</c></para>
            <para>
            A handle to the parent window of any dialog boxes that might be displayed during the operation. This parameter can be <c>NULL</c>.
            </para>
            </param>
            <param name="pszRootPath">
            <para>Type: <c>LPCTSTR</c></para>
            <para>
            The address of a null-terminated string of maximum length MAX_PATH that contains the path of the root drive on which the Recycle
            Bin is located. This parameter can contain the address of a string formatted with the drive, folder, and subfolder names, for
            example c:\windows\system. It can also contain an empty string or <c>NULL</c>. If this value is an empty string or <c>NULL</c>,
            all Recycle Bins on all drives will be emptied.
            </para>
            </param>
            <param name="dwFlags">
            <para>Type: <c>DWORD</c></para>
            <para>One or more of the following values.</para>
            <para>SHERB_NOCONFIRMATION</para>
            <para>No dialog box confirming the deletion of the objects will be displayed.</para>
            <para>SHERB_NOPROGRESSUI</para>
            <para>No dialog box indicating the progress will be displayed.</para>
            <para>SHERB_NOSOUND</para>
            <para>No sound will be played when the operation is complete.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this function succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHEnumerateUnreadMailAccounts(Vanara.PInvoke.HKEY,System.UInt32,System.Text.StringBuilder,System.Int32)">
            <summary>
            <para>Enumerates the user accounts that have unread email.</para>
            </summary>
            <param name="hKeyUser">
            <para>Type: <c>HKEY</c></para>
            <para>A valid HKEY for a given user.</para>
            </param>
            <param name="dwIndex">
            <para>Type: <c>DWORD</c></para>
            <para>The index of the user account.</para>
            </param>
            <param name="pszMailAddress">
            <para>Type: <c>LPTSTR</c></para>
            <para>A pointer to a Unicode string that specifies the email address of an account belonging to the specified user.</para>
            </param>
            <param name="cchMailAddress">
            <para>Type: <c>int</c></para>
            <para>The number of characters in the email address.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this function succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            <para>
            The parameter is the HKEY for the root of the user's information, for example <c>HKEY_CURRENT_USER</c>, or any key enumerated
            under <c>HKEY_USERS</c>.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHEvaluateSystemCommandTemplate(System.String,System.String@,System.String@,System.String@)">
            <summary>
            <para>Enforces strict validation of parameters used in a call to CreateProcess or ShellExecute.</para>
            </summary>
            <param name="pszCmdTemplate">
            <para>Type: <c>PCWSTR</c></para>
            <para>
            A command line, which may or may not include parameters. If the parameters are substitution parameters, then
            <c>SHEvaluateSystemCommandTemplate</c> should be called before parameters have been replaced.
            </para>
            </param>
            <param name="ppszApplication">
            <para>Type: <c>PWSTR*</c></para>
            <para>
            A pointer to the verified path to the application. This value should be passed as the parameter in a call to CreateProcess or as
            the parameter in a call to ShellExecute. This resource is allocated using CoTaskMemAlloc, and it is the responsibility of the
            caller to free the resource when it is no longer needed by calling CoTaskMemFree.
            </para>
            </param>
            <param name="ppszCommandLine">
            <para>Type: <c>PWSTR*</c></para>
            <para>
            A pointer to a command-line string template to be used in a call to CreateProcess. Command-line parameters should be specified
            based on this template, and then passed as the parameter to <c>CreateProcess</c>. It is guaranteed to be of a form that
            PathGetArgs can always read correctly. This resource is allocated using CoTaskMemAlloc, and it is the responsibility of the
            caller to free the resource when it is no longer needed by calling CoTaskMemFree.
            </para>
            <para>This parameter can be <c>NULL</c> if this function is not being used in association with a call to CreateProcess.</para>
            </param>
            <param name="ppszParameters">
            <para>Type: <c>PWSTR*</c></para>
            <para>
            A pointer to a command-line string template to be used in a call to ShellExecute. Command-line parameters should be specified
            based on this template, and then passed as the parameter to <c>ShellExecute</c>. This parameter is identical to calling
            PathGetArgs. This resource is allocated using CoTaskMemAlloc, and it is the responsibility of the caller to free the resource
            when it is no longer needed by calling CoTaskMemFree.
            </para>
            <para>This parameter can be <c>NULL</c> if this function is not being used in association with a call to CreateProcess.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this function succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            <para>
            This function is used when a calling process needs the deterministic behavior from a command template, regardless of execution
            context. It ignores the current process state, such as the , GetCurrentDirectory, and parent process directory.
            </para>
            <para>This function is used when the command is hard-coded.</para>
            <para>
            This function is used by ShellExecute when handling file associations from HKEY_CLASSES_ROOT. The purpose of this function is to
            reduce CreateProcess command-line exploits. It is not designed for processing user input and if used for that purpose can
            generate unexpected failures.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHFileOperation(Vanara.PInvoke.Shell32.SHFILEOPSTRUCT@)">
            <summary>
            Copies, moves, renames, or deletes a file system object. This function has been replaced in Windows Vista by <see cref="T:Vanara.PInvoke.Shell32.IFileOperation"/>.
            </summary>
            <param name="lpFileOp">
            A pointer to an SHFILEOPSTRUCT structure that contains information this function needs to carry out the specified operation. This
            parameter must contain a valid value that is not NULL. You are responsible for validating the value. If you do not validate it,
            you will experience unexpected results.
            </param>
            <returns>Returns zero if successful; otherwise nonzero. Applications normally should simply check for zero or nonzero.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHFreeNameMappings(System.IntPtr)">
            <summary>
            <para>Frees a file name mapping object that was retrieved by the SHFileOperation function.</para>
            </summary>
            <param name="hNameMappings">
            <para>Type: <c>HANDLE</c></para>
            <para>A handle to the file name mapping object to be freed.</para>
            </param>
            <returns>
            <para>This function does not return a value.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHGetDiskFreeSpace(System.String,System.UInt64@,System.UInt64@,System.UInt64@)">
            <summary>Retrieves disk space information for a disk volume.</summary>
            <param name="pszVolume">
            <para>Type: <c>LPCTSTR</c></para>
            <para>
            A null-terminated string that specifies the volume for which size information is retrieved. This can be a drive letter, UNC name,
            or the path of a folder. You cannot use <c>NULL</c> to represent the current drive.
            </para>
            <para>
            When using Shell32.dll versions previous to version 5.0, this must be an ANSI string. Unicode is not supported in those versions.
            </para>
            </param>
            <param name="pqwFreeCaller">
            <para>Type: <c><c>ULARGE_INTEGER</c>*</c></para>
            <para>
            The address of a <c>ULARGE_INTEGER</c> value that receives the number of bytes on the volume available to the calling
            application. If the operating system implements per-user quotas, this value may be less than the total number of free bytes on
            the volume.
            </para>
            </param>
            <param name="pqwTot">
            <para>Type: <c><c>ULARGE_INTEGER</c>*</c></para>
            <para>The address of a <c>ULARGE_INTEGER</c> value that receives the total size of the volume, in bytes.</para>
            </param>
            <param name="pqwFree">
            <para>Type: <c><c>ULARGE_INTEGER</c>*</c></para>
            <para>The address of a <c>ULARGE_INTEGER</c> value that receives the number of bytes of free space on the volume.</para>
            </param>
            <returns>
            <para>Type: <c>BOOL</c></para>
            <para>Returns <c>TRUE</c> if successful, <c>FALSE</c> otherwise.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHGetDiskFreeSpaceEx(System.String,System.UInt64@,System.UInt64@,System.UInt64@)">
            <summary>
            <para>Retrieves disk space information for a disk volume.</para>
            </summary>
            <param name="pszDirectoryName">
            <para>Type: <c>LPCTSTR</c></para>
            <para>
            A null-terminated string that specifies the volume for which size information is retrieved. This can be a drive letter, UNC name,
            or the path of a folder. You cannot use <c>NULL</c> to represent the current drive.
            </para>
            </param>
            <param name="pulFreeBytesAvailableToCaller">
            <para>Type: <c>ULARGE_INTEGER*</c></para>
            <para>
            Pointer to a value that receives the number of bytes on the volume available to the calling application. If the operating system
            implements per-user quotas, this value may be less than the total number of free bytes on the volume.
            </para>
            </param>
            <param name="pulTotalNumberOfBytes">
            <para>Type: <c>ULARGE_INTEGER*</c></para>
            <para>Pointer to a value that receives the total size of the volume, in bytes.</para>
            </param>
            <param name="pulTotalNumberOfFreeBytes">
            <para>Type: <c>ULARGE_INTEGER*</c></para>
            <para>Pointer to a value that receives the number of bytes of free space on the volume.</para>
            </param>
            <returns>
            <para>Type: <c>BOOL</c></para>
            <para>Returns <c>TRUE</c> if successful, <c>FALSE</c> otherwise.</para>
            </returns>
            <remarks>
            <para>
            The similarly named function SHGetDiskFreeSpace is merely an alias for <c>SHGetDiskFreeSpaceEx</c>. When you call
            <c>SHGetDiskFreeSpace</c> you actually call this function.
            </para>
            <para>
            This function calls the GetDiskFreeSpaceEx function if it is available on the operating system. If <c>GetDiskFreeSpaceEx</c> is
            not available, it is emulated by calling the GetDiskFreeSpace function and manipulating the return values. For additional
            information, see the documentation for <c>GetDiskFreeSpaceEx</c>.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHGetDriveMedia(System.String,Vanara.PInvoke.Shell32.ARCONTENT@)">
            <summary>
            <para>Returns the type of media that is in the given drive.</para>
            </summary>
            <param name="pszDrive">
            <para>Type: <c>PCWSTR</c></para>
            <para>The drive in which to check the media type.</para>
            </param>
            <param name="pdwMediaContent">
            <para>Type: <c>DWORD*</c></para>
            <para>A pointer to the type of media in the given drive. A combination of ARCONTENT flags.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this function succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHGetFileInfo(System.String,System.IO.FileAttributes,Vanara.PInvoke.Shell32.SHFILEINFO@,System.Int32,Vanara.PInvoke.Shell32.SHGFI)">
            <summary>Retrieves information about an object in the file system, such as a file, folder, directory, or drive root.</summary>
            <param name="pszPath">
            A pointer to a null-terminated string of maximum length MAX_PATH that contains the path and file name. Both absolute and relative
            paths are valid.
            <para>
            If the uFlags parameter includes the SHGFI_PIDL flag, this parameter must be the address of an ITEMIDLIST (PIDL) structure that
            contains the list of item identifiers that uniquely identifies the file within the Shell's namespace. The PIDL must be a fully
            qualified PIDL. Relative PIDLs are not allowed.
            </para>
            <para>
            If the uFlags parameter includes the SHGFI_USEFILEATTRIBUTES flag, this parameter does not have to be a valid file name. The
            function will proceed as if the file exists with the specified name and with the file attributes passed in the dwFileAttributes
            parameter. This allows you to obtain information about a file type by passing just the extension for pszPath and passing
            FILE_ATTRIBUTE_NORMAL in dwFileAttributes.
            </para>
            <para>This string can use either short (the 8.3 form) or long file names.</para>
            </param>
            <param name="dwFileAttributes">
            A combination of one or more file attribute flags (FILE_ATTRIBUTE_ values as defined in Winnt.h). If uFlags does not include the
            SHGFI_USEFILEATTRIBUTES flag, this parameter is ignored.
            </param>
            <param name="psfi">Pointer to a SHFILEINFO structure to receive the file information.</param>
            <param name="cbFileInfo">The size, in bytes, of the SHFILEINFO structure pointed to by the psfi parameter.</param>
            <param name="uFlags">The flags that specify the file information to retrieve.</param>
            <returns>
            Returns a value whose meaning depends on the uFlags parameter.
            <para>If uFlags does not contain SHGFI_EXETYPE or SHGFI_SYSICONINDEX, the return value is nonzero if successful, or zero otherwise.</para>
            <para>
            If uFlags contains the SHGFI_EXETYPE flag, the return value specifies the type of the executable file. It will be one of the
            following values.
            </para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHGetFileInfo(Vanara.PInvoke.Shell32.PIDL,System.IO.FileAttributes,Vanara.PInvoke.Shell32.SHFILEINFO@,System.Int32,Vanara.PInvoke.Shell32.SHGFI)">
            <summary>Retrieves information about an object in the file system, such as a file, folder, directory, or drive root.</summary>
            <param name="itemIdList">
            A pointer to a null-terminated string of maximum length MAX_PATH that contains the path and file name. Both absolute and relative
            paths are valid.
            <para>
            If the uFlags parameter includes the SHGFI_PIDL flag, this parameter must be the address of an ITEMIDLIST (PIDL) structure that
            contains the list of item identifiers that uniquely identifies the file within the Shell's namespace. The PIDL must be a fully
            qualified PIDL. Relative PIDLs are not allowed.
            </para>
            <para>
            If the uFlags parameter includes the SHGFI_USEFILEATTRIBUTES flag, this parameter does not have to be a valid file name. The
            function will proceed as if the file exists with the specified name and with the file attributes passed in the dwFileAttributes
            parameter. This allows you to obtain information about a file type by passing just the extension for pszPath and passing
            FILE_ATTRIBUTE_NORMAL in dwFileAttributes.
            </para>
            <para>This string can use either short (the 8.3 form) or long file names.</para>
            </param>
            <param name="dwFileAttributes">
            A combination of one or more file attribute flags (FILE_ATTRIBUTE_ values as defined in Winnt.h). If uFlags does not include the
            SHGFI_USEFILEATTRIBUTES flag, this parameter is ignored.
            </param>
            <param name="psfi">Pointer to a SHFILEINFO structure to receive the file information.</param>
            <param name="cbFileInfo">The size, in bytes, of the SHFILEINFO structure pointed to by the psfi parameter.</param>
            <param name="uFlags">The flags that specify the file information to retrieve.</param>
            <returns>
            Returns a value whose meaning depends on the uFlags parameter.
            <para>If uFlags does not contain SHGFI_EXETYPE or SHGFI_SYSICONINDEX, the return value is nonzero if successful, or zero otherwise.</para>
            <para>
            If uFlags contains the SHGFI_EXETYPE flag, the return value specifies the type of the executable file. It will be one of the
            following values.
            </para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHGetLocalizedName(System.String,System.Text.StringBuilder,System.UInt32,System.Int32@)">
            <summary>
            <para>Retrieves the localized name of a file in a Shell folder.</para>
            </summary>
            <param name="pszPath">
            <para>Type: <c>PCWSTR</c></para>
            <para>A pointer to a string that specifies the fully qualified path of the file.</para>
            </param>
            <param name="pszResModule">
            <para>Type: <c>PWSTR</c></para>
            <para>When this function returns, contains a pointer to a string resource that specifies the localized version of the file name.</para>
            </param>
            <param name="cch">
            <para>Type: <c>UINT</c></para>
            <para>When this function returns, contains the size of the string, in <c>WCHARs</c>, at pszResModule.</para>
            </param>
            <param name="pidsRes">
            <para>Type: <c>int*</c></para>
            <para>When this function returns, contains a pointer to the ID of the localized file name in the resource file.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this function succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHGetNewLinkInfo(System.String,System.String,System.Text.StringBuilder,System.Boolean@,Vanara.PInvoke.Shell32.SHGNLI)">
            <summary>
            <para>
            Creates a name for a new shortcut based on the shortcut's proposed target. This function does not create the shortcut, just the name.
            </para>
            </summary>
            <param name="pszLinkTo">
            <para>Type: <c>LPCTSTR</c></para>
            <para>
            A pointer to the path and file name of the shortcut's target. If does not contain the <c>SHGNLI_PIDL</c> value, this parameter is
            the address of a null-terminated string that contains the target. If contains the <c>SHGNLI_PIDL</c> value, this parameter is a
            PIDL that represents the target.
            </para>
            </param>
            <param name="pszDir">
            <para>Type: <c>LPCTSTR</c></para>
            <para>A pointer to a null-terminated string that contains the path of the folder in which the shortcut would be created.</para>
            </param>
            <param name="pszName">
            <para>Type: <c>LPTSTR</c></para>
            <para>
            A pointer to a string that receives the null-terminated path and file name for the shortcut. This buffer is assumed to be at
            least MAX_PATH characters in size.
            </para>
            </param>
            <param name="pfMustCopy">
            <para>Type: <c>BOOL*</c></para>
            <para>
            The address of a <c>BOOL</c> value that receives a flag indicating whether the shortcut would be copied. When a shortcut to
            another shortcut is created, the Shell simply copies the target shortcut and modifies that copied shortcut appropriately. This
            parameter receives a nonzero value if the target specified in specifies a shortcut that will cause the target shortcut to be
            copied. This parameter receives zero if the target does not specify a shortcut that would be copied.
            </para>
            </param>
            <param name="uFlags">
            <para>Type: <c>UINT</c></para>
            <para>The options for the function. This can be zero or a combination of the following values.</para>
            <para>SHGNLI_PIDL (0x000000001)</para>
            <para>
            0x000000001. The target pointed to by is a PIDL that represents the target. If this flag is not included, is regarded as the
            address of a string that contains the path and file name of the target.
            </para>
            <para>SHGNLI_NOUNIQUE (0x000000002)</para>
            <para>
            0x000000002. Skip the normal checks that ensure that the shortcut name is unique within the destination folder. If this flag is
            not included, the function creates the shortcut name and then determines whether the name is unique in the destination folder. If
            a file with the same name already exists in the destination folder, the shortcut name will be modified. This process is repeated
            until a unique name is found.
            </para>
            <para>SHGNLI_PREFIXNAME (0x000000004)</para>
            <para>0x000000004. The created name will be preceded by the string "Shortcut to ".</para>
            <para>SHGNLI_NOLNK (0x000000008)</para>
            <para>
            0x000000008. Version 5.0 Do not add the .lnk file name extension. You must set the <c>_WIN32_IE</c> macro to 5.01 or greater to
            use this flag. For more information about versioning, see Shell and Common Controls Versions.
            </para>
            <para>SHGNLI_NOLOCNAME (0x000000010)</para>
            <para>
            0x000000010. <c>Windows Vista and later</c>. Use the non-localized parsing name of the target pointed to by as the name of the
            shortcut file. If this flag is not set, the localized name is used.
            </para>
            <para>SHGNLI_USEURLEXT (0x000000020)</para>
            <para>
            0x000000020. <c>Windows 7 and later</c>. Append a .url file name extension (rather than .lnk) to the name pointed to by . If this
            flag is not set, the shortcut name uses a .lnk extension unless SHGNLI_NOLNK is set.
            </para>
            </param>
            <returns>
            <para>Type: <c>BOOL</c></para>
            <para>Returns <c>TRUE</c> if successful; otherwise, <c>FALSE</c>.</para>
            </returns>
            <remarks>
            <para>
            <c>SHGetNewLinkInfo</c> determines whether the destination file system supports long file names. If it does, a long file name is
            used for the shortcut name. If the destination file system does not support long file names, the shortcut name is returned in an
            8.3 format.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHGetPropertyStoreForWindow(Vanara.PInvoke.HWND,System.Guid@,System.Object@)">
            <summary>
            <para>
            Retrieves an object that represents a specific window's collection of properties, which allows those properties to be queried or set.
            </para>
            </summary>
            <param name="hwnd">
            <para>Type: <c>HWND</c></para>
            <para>A handle to the window whose properties are being retrieved.</para>
            </param>
            <param name="riid">
            <para>Type: <c>REFIID</c></para>
            <para>A reference to the IID of the property store object to retrieve through . This is typically IID_IPropertyStore.</para>
            </param>
            <param name="ppv">
            <para>Type: <c>void**</c></para>
            <para>When this function returns, contains the interface pointer requested in . This is typically IPropertyStore.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this function succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            <para>
            An application can use this function to obtain access to a window's property store so that it can set an explicit Application
            User Model ID (AppUserModelID) in the System.AppUserModel.ID property.
            </para>
            <para>
            A window's properties must be removed before the window is closed. If this is not done, the resources used by those properties
            are not returned to the system. A property is removed by setting it to the PROPVARIANT type VT_EMPTY.
            </para>
            <para>
            When a call is made to IPropertyStore::SetValue on the object retrieved through , the properties and values are immediately
            stored on the window. Therefore, no call to IPropertyStore::Commit is needed. No error occurs if it is called, but it has no effect.
            </para>
            <para>
            An application sets AppUserModelIDs on individual windows to control the application's taskbar grouping and Jump List contents.
            For instance, a suite application might want to provide a different taskbar button for each of its subfeatures, with the windows
            relating to that subfeature grouped under that button. Without window-level AppUserModelIDs, those windows would all be grouped
            together under the main process.
            </para>
            <para>
            Applications should also use this property store to set these relaunch properties so that the system can return the application
            to that state.
            </para>
            <list type="bullet">
            <item>System.AppUserModel.RelaunchCommand</item>
            <item>System.AppUserModel.RelaunchDisplayNameResource</item>
            <item>System.AppUserModel.RelaunchIconResource</item>
            </list>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHGetPropertyStoreForWindow``1(Vanara.PInvoke.HWND)">
            <summary>
            Retrieves an object that represents a specific window's collection of properties, which allows those properties to be queried or set.
            </summary>
            <typeparam name="TIntf">The type of the property store object to retrieve. This is typically IPropertyStore.</typeparam>
            <param name="hwnd"><para>Type: <c>HWND</c></para>
            <para>A handle to the window whose properties are being retrieved.</para></param>
            <returns>
            When this function returns, contains the interface pointer requested in . This is typically IPropertyStore.
            </returns>
            <remarks>
            <para>
            An application can use this function to obtain access to a window's property store so that it can set an explicit Application
            User Model ID (AppUserModelID) in the System.AppUserModel.ID property.
            </para>
            <para>
            A window's properties must be removed before the window is closed. If this is not done, the resources used by those properties
            are not returned to the system. A property is removed by setting it to the PROPVARIANT type VT_EMPTY.
            </para>
            <para>
            When a call is made to IPropertyStore::SetValue on the object retrieved through , the properties and values are immediately
            stored on the window. Therefore, no call to IPropertyStore::Commit is needed. No error occurs if it is called, but it has no effect.
            </para>
            <para>
            An application sets AppUserModelIDs on individual windows to control the application's taskbar grouping and Jump List contents.
            For instance, a suite application might want to provide a different taskbar button for each of its subfeatures, with the windows
            relating to that subfeature grouped under that button. Without window-level AppUserModelIDs, those windows would all be grouped
            together under the main process.
            </para>
            <para>
            Applications should also use this property store to set these relaunch properties so that the system can return the application
            to that state.
            </para>
            <list type="bullet">
              <item>System.AppUserModel.RelaunchCommand</item>
              <item>System.AppUserModel.RelaunchDisplayNameResource</item>
              <item>System.AppUserModel.RelaunchIconResource</item>
            </list>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHGetStockIconInfo(Vanara.PInvoke.Shell32.SHSTOCKICONID,Vanara.PInvoke.Shell32.SHGSI,Vanara.PInvoke.Shell32.SHSTOCKICONINFO@)">
            <summary>
            <para>Retrieves information about system-defined Shell icons.</para>
            </summary>
            <param name="siid">
            <para>Type: <c>SHSTOCKICONID</c></para>
            <para>One of the values from the SHSTOCKICONID enumeration that specifies which icon should be retrieved.</para>
            </param>
            <param name="uFlags">
            <para>Type: <c>UINT</c></para>
            <para>A combination of zero or more of the following flags that specify which information is requested.</para>
            <para>SHGSI_ICONLOCATION</para>
            <para>
            The <c>szPath</c> and <c>iIcon</c> members of the SHSTOCKICONINFO structure receive the path and icon index of the requested
            icon, in a format suitable for passing to the ExtractIcon function. The numerical value of this flag is zero, so you always get
            the icon location regardless of other flags.
            </para>
            <para>SHGSI_ICON</para>
            <para>The <c>hIcon</c> member of the SHSTOCKICONINFO structure receives a handle to the specified icon.</para>
            <para>SHGSI_SYSICONINDEX</para>
            <para>
            The <c>iSysImageImage</c> member of the SHSTOCKICONINFO structure receives the index of the specified icon in the system imagelist.
            </para>
            <para>SHGSI_LINKOVERLAY</para>
            <para>Modifies the SHGSI_ICON value by causing the function to add the link overlay to the file's icon.</para>
            <para>SHGSI_SELECTED</para>
            <para>Modifies the SHGSI_ICON value by causing the function to blend the icon with the system highlight color.</para>
            <para>SHGSI_LARGEICON</para>
            <para>
            Modifies the SHGSI_ICON value by causing the function to retrieve the large version of the icon, as specified by the SM_CXICON
            and SM_CYICON system metrics.
            </para>
            <para>SHGSI_SMALLICON</para>
            <para>
            Modifies the SHGSI_ICON value by causing the function to retrieve the small version of the icon, as specified by the SM_CXSMICON
            and SM_CYSMICON system metrics.
            </para>
            <para>SHGSI_SHELLICONSIZE</para>
            <para>
            Modifies the SHGSI_LARGEICON or SHGSI_SMALLICON values by causing the function to retrieve the Shell-sized icons rather than the
            sizes specified by the system metrics.
            </para>
            </param>
            <param name="psii">
            <para>Type: <c>SHSTOCKICONINFO*</c></para>
            <para>
            A pointer to a SHSTOCKICONINFO structure. When this function is called, the <c>cbSize</c> member of this structure needs to be
            set to the size of the <c>SHSTOCKICONINFO</c> structure. When this function returns, contains a pointer to a
            <c>SHSTOCKICONINFO</c> structure that contains the requested information.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this function succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            <para>
            If this function returns an icon handle in the <c>hIcon</c> member of the SHSTOCKICONINFO structure pointed to by , you are
            responsible for freeing the icon with DestroyIcon when you no longer need it.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHGetUnreadMailCountW(Vanara.PInvoke.HKEY,System.String,System.UInt32@,System.Runtime.InteropServices.ComTypes.FILETIME@,System.Text.StringBuilder,System.Int32)">
            <summary>
            <para>Retrieves a specified user's unread message count for any or all email accounts.</para>
            </summary>
            <param name="hKeyUser">
            <para>Type: <c>HKEY</c></para>
            <para>
            A valid HKEY for a given user. This parameter should be <c>NULL</c> if the function is called in a user's environment, in which
            case <c>HKEY_CURRENT_USER</c> is used. This parameter should be <c>NULL</c> if the function is called from the SYSTEM context, in
            which case <c>HKEY_USERS</c>&lt;i&gt;{SID} is used.
            </para>
            </param>
            <param name="pszMailAddress">
            <para>Type: <c>LPCTSTR</c></para>
            <para>
            A pointer to a string in Unicode that specifies the email address of an account belonging to the specified user. When this
            parameter is <c>NULL</c>, returns the total count of unread messages for all accounts owned by the designated user.
            </para>
            </param>
            <param name="pdwCount">
            <para>Type: <c>DWORD*</c></para>
            <para>Pointer to a DWORD value which receives the unread message count.</para>
            </param>
            <param name="pFileTime">
            <para>Type: <c>FILETIME*</c></para>
            <para>
            A pointer to a FILETIME structure. The use of this parameter is determined by whether is <c>NULL</c>. If is <c>NULL</c>, then
            this parameter is treated as an [in] parameter, which specifies a filter, so that only unread mail newer than the specified time
            appears. If is not <c>NULL</c>, then this parameter is treated as an [out] parameter, which points to a <c>FILETIME</c> structure
            into which the function places the <c>timestamp</c> of the last SHSetUnreadMailCount call for the specified user and email account.
            </para>
            </param>
            <param name="pszShellExecuteCommand">
            <para>Type: <c>LPCTSTR</c></para>
            <para>
            A pointer to a string that returns the ShellExecute command statement passed into the last SHSetUnreadMailCount call for the
            specified user and email account. This command string starts the email application that owns the account referenced by . If the
            ShellExecute command is not required, this parameter can be <c>NULL</c>. If is <c>NULL</c>, this parameter is ignored and must be <c>NULL</c>.
            </para>
            </param>
            <param name="cchShellExecuteCommand">
            <para>Type: <c>int</c></para>
            <para>
            The maximum size, in characters, of the ShellExecute command buffer pointed to by . This parameter must be zero for total counts
            when is <c>NULL</c>. It can also be <c>NULL</c> whenever the ShellExecute command string is not required.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this function succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHInvokePrinterCommand(Vanara.PInvoke.HWND,Vanara.PInvoke.Shell32.PRINTACTION,System.String,System.String,System.Boolean)">
            <summary>
            <para>Executes a command on a printer object.</para>
            <para>
            <c>Note</c> This function has been deprecated as of Windows Vista. It is recommended that, in its place, you invoke verbs on
            printers through IContextMenu or ShellExecute.
            </para>
            </summary>
            <param name="hwnd">
            <para>Type: <c>HWND</c></para>
            <para>The handle of the parent window of any windows or dialog boxes that are created during the operation.</para>
            </param>
            <param name="uAction">
            <para>Type: <c>UINT</c></para>
            <para>The type of printer operation to perform. One of the following values:</para>
            <para>PRINTACTION_OPEN (0)</para>
            <para>0x0. Open the printer specified by <c>lpBuf1</c>. The <c>lpBuf2</c> parameter is ignored.</para>
            <para>PRINTACTION_PROPERTIES (1)</para>
            <para>
            0x1. Display the property pages for the printer specified by <c>lpBuf1</c>. The <c>lpBuf2</c> parameter can be <c>NULL</c> or can
            name a specific property sheet to display, either by name or number. If the high <c>WORD</c> of <c>lpBuf2</c> is nonzero, it is
            assumed that this parameter is a pointer to a buffer that contains the name of the sheet to open. Otherwise, <c>lpBuf2</c> is
            seen as the zero-based index of the property sheet to open.
            </para>
            <para>PRINTACTION_NETINSTALL (2)</para>
            <para>0x2. Install the network printer specified by <c>lpBuf1</c>. The <c>lpBuf2</c> parameter is ignored.</para>
            <para>PRINTACTION_NETINSTALLLINK (3)</para>
            <para>
            0x3. Create a shortcut to the network printer specified by <c>lpBuf1</c>. The <c>lpBuf2</c> parameter specifies the drive and
            path of the folder in which to create the shortcut. The network printer must already have been installed on the local computer.
            </para>
            <para>PRINTACTION_TESTPAGE (4)</para>
            <para>0x4. Print a test page on the printer specified by <c>lpBuf1</c>. The <c>lpBuf2</c> parameter is ignored.</para>
            <para>PRINTACTION_OPENNETPRN (5)</para>
            <para>0x5. Open the network printer specified by <c>lpBuf1</c>. The <c>lpBuf2</c> parameter is ignored.</para>
            <para>PRINTACTION_DOCUMENTDEFAULTS (6)</para>
            <para>
            0x6. Display the default document properties for the printer specified by <c>lpBuf1</c>. The <c>lpBuf2</c> parameter is ignored.
            </para>
            <para>PRINTACTION_SERVERPROPERTIES (7)</para>
            <para>0x7. Display the properties for the printer server specified by <c>lpBuf1</c>. The <c>lpBuf2</c> parameter is ignored.</para>
            </param>
            <param name="lpBuf1">
            <para>Type: <c>LPCTSTR</c></para>
            <para>
            Pointer to a null-terminated string that contains additional information for the printer command. The information contained in
            this parameter depends upon the value of <c>uAction</c>.
            </para>
            </param>
            <param name="lpBuf2">
            <para>Type: <c>LPCTSTR</c></para>
            <para>
            Pointer to a null-terminated string that contains additional information for the printer command. The information contained in
            this parameter depends upon the value of <c>uAction</c>.
            </para>
            </param>
            <param name="fModal">
            <para>Type: <c>BOOL</c></para>
            <para>
            <c>TRUE</c> to specify that <c>SHInvokePrinterCommand</c> should not return until the command is completed; <c>FALSE</c> if the
            function should return as soon as the command is initialized.
            </para>
            </param>
            <returns>
            <para>Type: <c>BOOL</c></para>
            <para>Returns <c>TRUE</c> if successful; otherwise, <c>FALSE</c>.</para>
            </returns>
            <remarks>
            <para>
            When a printer name is specified by <c>lpBuf1</c>, the name can either be the name of a local printer or the server and share
            name of a network printer. When specifying a network printer name, the name must be specified in this format:
            </para>
            <para>
            <code>"\\&lt;server&gt;&lt;shared printer name&gt;"</code>
            </para>
            <para>
            This function is implemented in Shell versions 4.71 and later. In order to maintain backward compatibility with previous Shell
            versions, this function should not be used explicitly. Instead, the LoadLibrary and GetProcAddress functions should be used to
            obtain the function address.
            </para>
            <para>
            <para>Note</para>
            <para>
            The shellapi.h header defines SHInvokePrinterCommand as an alias which automatically selects the ANSI or Unicode version of this
            function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that
            not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see Conventions
            for Function Prototypes.
            </para>
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHIsFileAvailableOffline(System.String,Vanara.PInvoke.Shell32.OFFLINE_STATUS@)">
            <summary>
            <para>
            Determines whether a file or folder is available for offline use. This function also determines whether the file would be opened
            from the network, from the local Offline Files cache, or from both locations.
            </para>
            </summary>
            <param name="pwszPath">
            <para>TBD</para>
            </param>
            <param name="pdwStatus">
            <para>Type: <c>LPDWORD</c></para>
            <para>A pointer to a variable of type <c>DWORD</c> that receives one or more of the following flags if the function succeeds.</para>
            <para>OFFLINE_STATUS_LOCAL (0x01)</para>
            <para>If the file is open, it is open in the cache.</para>
            <para>OFFLINE_STATUS_REMOTE (0x02)</para>
            <para>If the file is open, it is open on the server.</para>
            <para>OFFLINE_STATUS_INCOMPLETE (0x04)</para>
            <para>The local copy is currently incomplete. The file cannot be opened in offline mode until it has been synchronized.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>This function can return one of these values.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>S_OK</term>
            <term>The file or directory is cached. It is available offline unless OFFLINE_STATUS_INCOMPLETE is set.</term>
            </item>
            <item>
            <term>E_INVALIDARG</term>
            <term>The path is invalid or not a network path. The file or directory is not cached.</term>
            </item>
            <item>
            <term>E_FAIL</term>
            <term>The file or directory is not cached.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>If is a directory, <c>SHIsFileAvailableOffline</c> will not return the <c>OFFLINE_STATUS_INCOMPLETE</c> flag.</para>
            <para>
            If <c>SHIsFileAvailableOffline</c> returns both <c>OFFLINE_STATUS_LOCAL</c> and <c>OFFLINE_STATUS_REMOTE</c>, the file or
            directory is open in both places. This is common when the server is online.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHLoadNonloadedIconOverlayIdentifiers">
            <summary>
            <para>
            Signals the Shell that during the next operation requiring overlay information, it should load icon overlay identifiers that
            either failed creation or were not present for creation at startup. Identifiers that have already been loaded are not affected.
            </para>
            </summary>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>Always returns S_OK.</para>
            </returns>
            <remarks>
            <para>
            A call to <c>SHLoadNonloadedIconOverlayIdentifiers</c> does not result in the immediate loading of a Shell extension, nor does it
            cause an icon overlay handler to be loaded. A call to <c>SHLoadNonloadedIconOverlayIdentifiers</c> results in a situation such
            that the next code to ask for icon overlay information triggers a comparison of icon overlays in the registry to those that are
            already loaded. If an icon overlay is newly registered and the system has not already reached its upper limit of fifteen icon
            overlays, the new overlay is loaded. <c>SHLoadNonloadedIconOverlayIdentifiers</c> alone does not load a new icon overlay; you
            also need to trigger an action that uses the overlay, such as a refresh of a Windows Explorer view.
            </para>
            <para>For more information, see How to Implement Icon Overlay Handlers.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHQueryRecycleBin(System.String,Vanara.PInvoke.Shell32.SHQUERYRBINFO@)">
            <summary>
            <para>Retrieves the size of the Recycle Bin and the number of items in it, for a specified drive.</para>
            </summary>
            <param name="pszRootPath">
            <para>Type: <c>LPCTSTR</c></para>
            <para>
            The address of a <c>null</c>-terminated string of maximum length MAX_PATH to contain the path of the root drive on which the
            Recycle Bin is located. This parameter can contain the address of a string formatted with the drive, folder, and subfolder names (C:\Windows\System...).
            </para>
            </param>
            <param name="pSHQueryRBInfo">
            <para>Type: <c>LPSHQUERYRBINFO</c></para>
            <para>
            The address of a SHQUERYRBINFO structure that receives the Recycle Bin information. The <c>cbSize</c> member of the structure
            must be set to the size of the structure before calling this API.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this function succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            <para>
            With Windows 2000, if <c>NULL</c> is passed in the parameter, the function fails and returns an E_INVALIDARG error code. In
            earlier versions of the operating system, you can pass an empty string or <c>NULL</c>. If contains an empty string or
            <c>NULL</c>, information is retrieved for all Recycle Bins on all drives.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHQueryUserNotificationState(Vanara.PInvoke.Shell32.QUERY_USER_NOTIFICATION_STATE@)">
            <summary>
            <para>Checks the state of the computer for the current user to determine whether sending a notification is appropriate.</para>
            </summary>
            <param name="pquns">
            <para>Type: <c>QUERY_USER_NOTIFICATION_STATE*</c></para>
            <para>When this function returns, contains a pointer to one of the values of the QUERY_USER_NOTIFICATION_STATE enumeration.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this function succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            <para>
            Applications should call <c>SHQueryUserNotificationState</c> and test the return value before displaying any notification UI that
            is similar to the balloon notifications generated by Shell_NotifyIcon. Notifications should only be displayed if this API returns
            QNS_ACCEPTS_NOTIFICATIONS. This informs the application whether the user is running processes that should not be interrupted.
            Top-level windows receive a WM_SETTINGCHANGE message when the user turns presentation settings on or off, and also when the
            user's session is locked or unlocked. Note that there are no notifications sent when the user starts or stops a full-screen application.
            </para>
            <para>If this function returns QUNS_QUIET_TIME, notifications should be displayed only if critical.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHRemoveLocalizedName(System.String)">
            <summary>
            <para>Removes the localized name of a file in a Shell folder.</para>
            </summary>
            <param name="pszPath">
            <para>Type: <c>PCWSTR</c></para>
            <para>A pointer to a null-terminated, Unicode string that specifies the fully qualified path of the target file.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this function succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            <para>
            When a display name string is set by SHSetLocalizedName, Windows Explorer uses that string for display instead of the file name.
            The path to the file is unchanged.
            </para>
            <para>
            Applications can use the IShellFolder::GetDisplayNameOf method to get the display (localized) name through with the
            SIGDN_NORMALDISPLAY flag and the parsing (non-localized) name with SIGDN_DESKTOPABSOLUTEPARSING.
            </para>
            <para>Calling <c>SHRemoveLocalizedName</c> makes the display name identical to the parsing name.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHSetLocalizedName(System.String,System.String,System.Int32)">
            <summary>
            <para>Sets the localized name of a file in a Shell folder.</para>
            </summary>
            <param name="pszPath">
            <para>Type: <c>PCWSTR</c></para>
            <para>A pointer to a string that specifies the fully qualified path of the target file.</para>
            </param>
            <param name="pszResModule">
            <para>Type: <c>PCWSTR</c></para>
            <para>A pointer to a string resource that specifies the localized version of the file name.</para>
            </param>
            <param name="idsRes">
            <para>Type: <c>int</c></para>
            <para>An integer ID that specifies the localized file name in the string resource.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this function succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            <para>When this string is set, Explorer displays this string instead of the file name. The path to the file is unchanged.</para>
            <para>
            Applications can get the display (localized) name with IShellFolder::GetDisplayNameOf with the SIGDN_NORMALDISPLAY flag and the
            parsing (non-localized) name with IShellItem::GetDisplayName using the SIGDN_DESKTOPABSOLUTEPARSING flag.
            </para>
            <para>Calling SHRemoveLocalizedName makes the display name identical to the parsing name.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHSetUnreadMailCountW(System.String,System.UInt32,System.String)">
            <summary>
            <para>Stores the current user's unread message count for a specified email account in the registry.</para>
            </summary>
            <param name="pszMailAddress">
            <para>Type: <c>LPCTSTR</c></para>
            <para>A pointer to a string in Unicode that contains the current user's full email address.</para>
            </param>
            <param name="dwCount">
            <para>Type: <c>DWORD</c></para>
            <para>The number of unread messages.</para>
            </param>
            <param name="pszShellExecuteCommand">
            <para>Type: <c>LPCTSTR</c></para>
            <para>
            A pointer to a string in Unicode that contains the full text of a command that can be passed to ShellExecute. This command should
            start the email application that owns the account referenced by .
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para><c>HRESULT</c>, which includes the following possible values.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>S_OK</term>
            <term>The call completed successfully.</term>
            </item>
            <item>
            <term>E_OUTOFMEMORY</term>
            <term>Insufficient memory available.</term>
            </item>
            <item>
            <term>E_INVALIDARG</term>
            <term>Invalid string argument in either the or parameters.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>When this function updates the registry, the new registry entry is automatically stamped with the current time and date.</para>
            <para>
            If this function is called by different independent software vendors (ISVs) that specify the same email name, only the last call
            is saved. That is, calls to this function overwrite any previously saved value for the same email address, even if the calls are
            made by different ISVs.
            </para>
            <para>
            It is recommended that the count of unread messages be set only for the main Inbox of the users account. Mail in sub-folders such
            as Drafts or Deleted Items should be ignored.
            </para>
            <para>
            It is important that email clients do not set the number of unread messages to 0 when the application exits, because this causes
            the number of unread messages to be erroneously reported as 0.
            </para>
            <para>Because this function uses HKEY_CURRENT_USER, it should not be called by a system process impersonating a user.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHTestTokenMembership(Vanara.PInvoke.HTOKEN,System.UInt32)">
            <summary>
            <para>Uses CheckTokenMembership to test whether the given token is a member of the local group with the specified RID.</para>
            </summary>
            <param name="hToken">
            <para>Type: <c>HANDLE</c></para>
            <para>A handle to the token. This value can be <c>NULL</c>.</para>
            </param>
            <param name="ulRID">
            <para>Type: <c>ULONG</c></para>
            <para>The RID of the local group for which membership is tested.</para>
            </param>
            <returns>
            <para>Type: <c>BOOL</c></para>
            <para>Returns <c>TRUE</c> on success, <c>FALSE</c> on failure.</para>
            </returns>
            <remarks>
            <para>This function wraps CheckTokenMembership and only checks local groups.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHUpdateRecycleBinIcon">
            <summary>
            UNDOCUMENTED: Use at your own risk.
            <para>Updates the icon status for the Recycle Bin.</para>
            </summary>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this function succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.APPBARDATA">
            <summary>
            <para>Contains information about a system appbar message.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.APPBARDATA.cbSize">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The size of the structure, in bytes.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.APPBARDATA.hWnd">
            <summary>
            <para>Type: <c>HWND</c></para>
            <para>
            The handle to the appbar window. Not all messages use this member. See the individual message page to see if you need to
            provide an <c>hWind</c> value.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.APPBARDATA.uCallbackMessage">
            <summary>
            <para>Type: <c>UINT</c></para>
            <para>
            An application-defined message identifier. The application uses the specified identifier for notification messages that it
            sends to the appbar identified by the <c>hWnd</c> member. This member is used when sending the ABM_NEW message.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.APPBARDATA.uEdge">
            <summary>
            <para>Type: <c>UINT</c></para>
            <para>A value that specifies an edge of the screen. This member is used when sending one of these messages:</para>
            <para>ABM_GETAUTOHIDEBAR</para>
            <para>ABM_SETAUTOHIDEBAR</para>
            <para>ABM_GETAUTOHIDEBAREX</para>
            <para>ABM_SETAUTOHIDEBAREX</para>
            <para>ABM_QUERYPOS</para>
            <para>ABM_SETPOS</para>
            <para>This member can be one of the following values.</para>
            <para>ABE_BOTTOM</para>
            <para>Bottom edge.</para>
            <para>ABE_LEFT</para>
            <para>Left edge.</para>
            <para>ABE_RIGHT</para>
            <para>Right edge.</para>
            <para>ABE_TOP</para>
            <para>Top edge.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.APPBARDATA.rc">
            <summary>
            <para>Type: <c>RECT</c></para>
            <para>A RECT structure whose use varies depending on the message:</para>
            <list type="bullet">
            <item>
            ABM_GETTASKBARPOS, ABM_QUERYPOS, ABM_SETPOS: The bounding rectangle, in screen coordinates, of an appbar or the Windows taskbar.
            </item>
            <item>
            ABM_GETAUTOHIDEBAREX, ABM_SETAUTOHIDEBAREX: The monitor on which the operation is being performed. This information can be
            retrieved through the GetMonitorInfo function.
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.APPBARDATA.lParam">
            <summary>
            <para>Type: <c>LPARAM</c></para>
            <para>A message-dependent value. This member is used with these messages:</para>
            <para>ABM_SETAUTOHIDEBAR</para>
            <para>ABM_SETAUTOHIDEBAREX</para>
            <para>ABM_SETSTATE</para>
            <para>See the individual message pages for details.</para>
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.APPBARDATA.#ctor(Vanara.PInvoke.HWND,System.UInt32,Vanara.PInvoke.Shell32.ABE,Vanara.PInvoke.RECT,System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Shell32.APPBARDATA"/> struct.</summary>
            <param name="hWnd">The handle to the appbar window.</param>
            <param name="callbackMessage">An application-defined message identifier.</param>
            <param name="edge">A value that specifies an edge of the screen.</param>
            <param name="rect">A RECT structure whose use varies depending on the message.</param>
            <param name="lParam">A message-dependent value.</param>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.ASSOCIATIONELEMENT">
            <summary>Defines information used by AssocCreateForClasses to retrieve an IQueryAssociations interface for a given file association.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ASSOCIATIONELEMENT.ac">
            <summary>
            Where to obtain association data and the form the data is stored in. One of the following values from the ASSOCCLASS enumeration.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ASSOCIATIONELEMENT.hkClass">
            <summary>A registry key that specifies a class that contains association information.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ASSOCIATIONELEMENT.pszClass">
            <summary>A pointer to the name of a class that contains association information.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.NOTIFYICONDATA">
            <summary>
            <para>Contains information that the system needs to display notifications in the notification area. Used by Shell_NotifyIcon.</para>
            </summary>
            <remarks>
            <para>
            See Notifications in the Windows User Experience Interaction Guidelines for more information on notification UI and content best practices.
            </para>
            <para>
            If you set the <c>NIF_INFO</c> flag in the <c>uFlags</c> member, the balloon-style notification is used. For more discussion of
            these notifications, see Balloon tooltips.
            </para>
            <para>
            No more than one balloon notification at a time can be displayed for the taskbar. If an application attempts to display a
            notification when one is already being displayed, the new notification is queued and displayed when the older notification goes
            away. In versions of Windows before Windows Vista, the new notification would not appear until the existing notification has been
            visible for at least the system minimum timeout length, regardless of the original notification's <c>uTimeout</c> value. If the
            user does not appear to be using the computer, the system does not count this time toward the timeout.
            </para>
            <para>
            Several members of this structure are only supported for Windows 2000 and later. To enable these members, include one of the
            following lines in your header:
            </para>
            <para>
            Note that you must initialize the structure with its size. If you use the size of the currently defined structure, the
            application might not run with earlier versions of Shell32.dll, which expect a smaller structure. You can run your application
            against earlier versions of Shell32.dll by defining the appropriate version number (see
            </para>
            <para>Shell and Common Controls Versions</para>
            <para>). However, this might cause problems if your application also needs to run on more recent systems.</para>
            <para>
            You can maintain application compatibility with all Shell32.dll versions while still using the current header files by setting
            the size of the <c>NOTIFYICONDATA</c> structure appropriately. Before you initialize the structure, use DllGetVersion to
            determine which Shell32.dll version is installed on the system and initialize <c>cbSize</c> with one of these values:
            </para>
            <list type="table">
            <listheader>
            <term>Shell32.dll Version</term>
            <term>cbSize</term>
            </listheader>
            <item>
            <term>6.0.6 or higher (Windows Vista and later)</term>
            <term>sizeof(NOTIFYICONDATA)</term>
            </item>
            <item>
            <term>6.0 (Windows XP)</term>
            <term>NOTIFYICONDATA_V3_SIZE</term>
            </item>
            <item>
            <term>5.0 (Windows 2000)</term>
            <term>NOTIFYICONDATA_V2_SIZE</term>
            </item>
            <item>
            <term>Versions lower than 5.0</term>
            <term>NOTIFYICONDATA_V1_SIZE</term>
            </item>
            </list>
            <para>
            Using this value for <c>cbSize</c> allows your application to use <c>NOTIFYICONDATA</c> in a method compatible with earlier
            Shell32.dll versions.
            </para>
            <para>
            The following code example shows version checking that can enable an application that uses the <c>guidItem</c> member to run on
            both Windows Vista and Windows 7. It provides a Boolean function that returns <c>TRUE</c> if the operating system is Windows 7.
            Unless this member returns <c>TRUE</c>, the <c>guidItem</c> member must be set to 0.
            </para>
            <para>
            <c>Note</c> This code is specific to the Windows 7 version number. It is expected that future versions of Windows and Windows
            Server will support the <c>guidItem</c> member, and at that time this code must be updated to identify later version numbers as
            valid as well.
            </para>
            <para>The following code example shows the use of</para>
            <para>LoadIconMetric</para>
            <para>to load an icon for use with high DPI.</para>
            <para>Troubleshooting</para>
            <para>If you are using the</para>
            <para>guidItem</para>
            <para>member to identify the icon, and that icon is not seen or some calls to</para>
            <para>Shell_NotifyIcon</para>
            <para>fail, one of the following cases is the likely cause:</para>
            <list type="number">
            <item>
            The NIF_GUID flag was not set in every call to Shell_NotifyIcon. Once you identify the notification icon with a GUID in one call
            to <c>Shell_NotifyIcon</c>, you must use that same GUID to identify the icon in any subsequent <c>Shell_NotifyIcon</c> calls that
            deal with that same icon.
            </item>
            <item>
            The binary file that contains the icon was moved. The path of the binary file is included in the registration of the icon's GUID
            and cannot be changed. Settings associated with the icon are preserved through an upgrade only if the file path and GUID are
            unchanged. If the path must be changed, the application should remove any GUID information that was added when the existing icon
            was registered. Once that information is removed, you can move the binary file to a new location and reregister it with a new
            GUID. Any settings associated with the original GUID registration will be lost.
            </item>
            </list>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NOTIFYICONDATA.cbSize">
            <summary>Size of this structure, in bytes.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NOTIFYICONDATA.hwnd">
            <summary>
            Handle to the window that receives notification messages associated with an icon in the taskbar status area. The Shell uses
            hWnd and uID to identify which icon to operate on when Shell_NotifyIcon is invoked.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NOTIFYICONDATA.uID">
            <summary>
            Application-defined identifier of the taskbar icon. The Shell uses hWnd and uID to identify which icon to operate on when
            Shell_NotifyIcon is invoked. You can have multiple icons associated with a single hWnd by assigning each a different uID.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NOTIFYICONDATA.uFlags">
            <summary>
            Flags that indicate which of the other members contain valid data. This member can be a combination of the NIF_XXX constants.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NOTIFYICONDATA.uCallbackMessage">
            <summary>
            Application-defined message identifier. The system uses this identifier to send notifications to the window identified in hWnd.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NOTIFYICONDATA.hIcon">
            <summary>Handle to the icon to be added, modified, or deleted.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NOTIFYICONDATA.szTip">
            <summary>
            String with the text for a standard ToolTip. It can have a maximum of 64 characters including the terminating NULL. For
            Version 5.0 and later, szTip can have a maximum of 128 characters, including the terminating NULL.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NOTIFYICONDATA.dwState">
            <summary>State of the icon.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NOTIFYICONDATA.dwStateMask">
            <summary>
            A value that specifies which bits of the state member are retrieved or modified. For example, setting this member to
            NIS_HIDDEN causes only the item's hidden state to be retrieved.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NOTIFYICONDATA.szInfo">
            <summary>
            String with the text for a balloon ToolTip. It can have a maximum of 255 characters. To remove the ToolTip, set the NIF_INFO
            flag in uFlags and set szInfo to an empty string.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NOTIFYICONDATA.uTimeoutOrVersion">
            <summary>
            NOTE: This field is also used for the Timeout value. Specifies whether the Shell notify icon interface should use Windows 95
            or Windows 2000 behavior. For more information on the differences in these two behaviors, see Shell_NotifyIcon. This member
            is only employed when using Shell_NotifyIcon to send an NIM_VERSION message.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NOTIFYICONDATA.szInfoTitle">
            <summary>
            String containing a title for a balloon ToolTip. This title appears in boldface above the text. It can have a maximum of 63 characters.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NOTIFYICONDATA.dwInfoFlags">
            <summary>
            Adds an icon to a balloon ToolTip. It is placed to the left of the title. If the szTitleInfo member is zero-length, the icon
            is not shown.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NOTIFYICONDATA.guidItem">
            <summary>
            <para>
            Windows 7 and later: A registered GUID that identifies the icon.This value overrides uID and is the recommended method of
            identifying the icon.The NIF_GUID flag must be set in the uFlags member.
            </para>
            <para>Windows XP and Windows Vista: Reserved; must be set to 0.</para>
            <para>
            If your application is intended to run on both Windows Vista and Windows 7, it is imperative that you check the version of
            Windows and only specify a nonzero guidItem if on Windows 7 or later.
            </para>
            <para>
            If you identify the notification icon with a GUID in one call to Shell_NotifyIcon, you must use that same GUID to identify
            the icon in any subsequent Shell_NotifyIcon calls that deal with that same icon.
            </para>
            <para>To generate a GUID for use in this member, use a GUID-generating tool such as Guidgen.exe.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NOTIFYICONDATA.hBalloonIcon">
            <summary>
            Windows Vista and later. The handle of a customized notification icon provided by the application that should be used
            independently of the notification area icon. If this member is non-NULL and the NIIF_USER flag is set in the dwInfoFlags
            member, this icon is used as the notification icon. If this member is NULL, the legacy behavior is carried out.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.NOTIFYICONIDENTIFIER">
            <summary>
            <para>Contains information used by Shell_NotifyIconGetRect to identify the icon for which to retrieve the bounding rectangle.</para>
            </summary>
            <remarks>
            <para>The icon can be identified to Shell_NotifyIconGetRect through this structure in two ways:</para>
            <list type="bullet">
            <item>
            <description>guidItem alone (recommended)</description>
            </item>
            <item>
            <description>hWnd plus uID</description>
            </item>
            </list>
            <para>If guidItem is not GUID_NULL, hWnd and uID are ignored.</para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NOTIFYICONIDENTIFIER.cbSize">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The size of this structure, in bytes.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NOTIFYICONIDENTIFIER.hWnd">
            <summary>
            <para>Type: <c>HWND</c></para>
            <para>
            A handle to the parent window used by the notification's callback function. For more information, see the <see
            cref="F:Vanara.PInvoke.Shell32.NOTIFYICONDATA.hwnd"/> member of the NOTIFYICONDATA structure.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NOTIFYICONIDENTIFIER.uID">
            <summary>
            <para>Type: <c>UINT</c></para>
            <para>
            The application-defined identifier of the notification icon. Multiple icons can be associated with a single <c>hWnd</c>,
            each with their own <c>uID</c>.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NOTIFYICONIDENTIFIER.guidItem">
            <summary>
            <para>Type: <c>GUID</c></para>
            <para>A registered GUID that identifies the icon. Use <c>GUID_NULL</c> if the icon is not identified by a GUID.</para>
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.NOTIFYICONIDENTIFIER.#ctor(Vanara.PInvoke.HWND,System.UInt32)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Shell32.NOTIFYICONIDENTIFIER"/> struct.</summary>
            <param name="hWnd">A handle to the parent window used by the notification's callback function.</param>
            <param name="uID">The application-defined identifier of the notification icon.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.NOTIFYICONIDENTIFIER.#ctor(System.Guid)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Shell32.NOTIFYICONIDENTIFIER"/> struct.</summary>
            <param name="guidItem">A registered GUID that identifies the icon.</param>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.SHELLEXECUTEINFO">
            <summary>Contains information used by ShellExecuteEx.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHELLEXECUTEINFO.cbSize">
            <summary>Required. The size of this structure, in bytes.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHELLEXECUTEINFO.fMask">
            <summary>Flags that indicate the content and validity of the other structure members.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHELLEXECUTEINFO.hwnd">
            <summary>
            Optional. A handle to the parent window, used to display any message boxes that the system might produce while executing this
            function. This value can be NULL.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHELLEXECUTEINFO.lpVerb">
            <summary>
            A string, referred to as a verb, that specifies the action to be performed. The set of available verbs depends on the
            particular file or folder. Generally, the actions available from an object's shortcut menu are available verbs. This
            parameter can be NULL, in which case the default verb is used if available. If not, the "open" verb is used. If neither verb
            is available, the system uses the first verb listed in the registry. The following verbs are commonly used:
            <list>
            <item>
            <term>edit</term>
            <definition>Launches an editor and opens the document for editing.If lpFile is not a document file, the function will fail.</definition>
            </item>
            <item>
            <term>explore</term>
            <definition>Explores the folder specified by lpFile.</definition>
            </item>
            <item>
            <term>find</term>
            <definition>Initiates a search starting from the specified directory.</definition>
            </item>
            <item>
            <term>open</term>
            <definition>Opens the file specified by the lpFile parameter. The file can be an executable file, a document file, or a folder.</definition>
            </item>
            <item>
            <term>print</term>
            <definition>Prints the document file specified by lpFile.If lpFile is not a document file, the function will fail.</definition>
            </item>
            <item>
            <term>properties</term>
            <definition>Displays the file or folder's properties.</definition>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHELLEXECUTEINFO.lpFile">
            <summary>
            The address of a null-terminated string that specifies the name of the file or object on which ShellExecuteEx will perform
            the action specified by the lpVerb parameter. The system registry verbs that are supported by the ShellExecuteEx function
            include "open" for executable files and document files and "print" for document files for which a print handler has been
            registered. Other applications might have added Shell verbs through the system registry, such as "play" for .avi and .wav
            files. To specify a Shell namespace object, pass the fully qualified parse name and set the SEE_MASK_INVOKEIDLIST flag in the
            fMask parameter. <note>If the SEE_MASK_INVOKEIDLIST flag is set, you can use either lpFile or lpIDList to identify the item
            by its file system path or its PIDL respectively. One of the two values—lpFile or lpIDList—must be set.</note><note>If the
            path is not included with the name, the current directory is assumed.</note>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHELLEXECUTEINFO.lpParameters">
            <summary>
            Optional. The address of a null-terminated string that contains the application parameters. The parameters must be separated
            by spaces. If the lpFile member specifies a document file, lpParameters should be NULL.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHELLEXECUTEINFO.lpDirectory">
            <summary>
            Optional. The address of a null-terminated string that specifies the name of the working directory. If this member is NULL,
            the current directory is used as the working directory.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHELLEXECUTEINFO.nShellExecuteShow">
            <summary>
            Required. Flags that specify how an application is to be shown when it is opened; one of the SW_ values listed for the
            ShellExecute function. If lpFile specifies a document file, the flag is simply passed to the associated application. It is up
            to the application to decide how to handle it.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHELLEXECUTEINFO.hInstApp">
            <summary>
            [out] If SEE_MASK_NOCLOSEPROCESS is set and the ShellExecuteEx call succeeds, it sets this member to a value greater than 32.
            If the function fails, it is set to an SE_ERR_XXX error value that indicates the cause of the failure. Although hInstApp is
            declared as an HINSTANCE for compatibility with 16-bit Windows applications, it is not a true HINSTANCE. It can be cast only
            to an int and compared to either 32 or the following SE_ERR_XXX error codes.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHELLEXECUTEINFO.lpIDList">
            <summary>
            The address of an absolute ITEMIDLIST structure (PCIDLIST_ABSOLUTE) to contain an item identifier list that uniquely
            identifies the file to execute. This member is ignored if the fMask member does not include SEE_MASK_IDLIST or SEE_MASK_INVOKEIDLIST.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHELLEXECUTEINFO.lpClass">
            <summary>
            The address of a null-terminated string that specifies one of the following:
            <list type="bullet">
            <item>
            <term>A ProgId. For example, "Paint.Picture".</term>
            </item>
            <item>
            <term>A URI protocol scheme. For example, "http".</term>
            </item>
            <item>
            <term>A file extension. For example, ".txt".</term>
            </item>
            <item>
            <term>
            A registry path under HKEY_CLASSES_ROOT that names a subkey that contains one or more Shell verbs. This key will have a
            subkey that conforms to the Shell verb registry schema, such as <c>shell\verb name</c>.
            </term>
            </item>
            </list>
            <para>This member is ignored if fMask does not include SEE_MASK_CLASSNAME.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHELLEXECUTEINFO.hkeyClass">
            <summary>
            A handle to the registry key for the file type. The access rights for this registry key should be set to KEY_READ. This
            member is ignored if fMask does not include SEE_MASK_CLASSKEY.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHELLEXECUTEINFO.dwHotKey">
            <summary>
            A keyboard shortcut to associate with the application. The low-order word is the virtual key code, and the high-order word is
            a modifier flag (HOTKEYF_). For a list of modifier flags, see the description of the WM_SETHOTKEY message. This member is
            ignored if fMask does not include SEE_MASK_HOTKEY.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHELLEXECUTEINFO.hIcon">
            <summary>
            A handle to the icon for the file type. This member is ignored if fMask does not include SEE_MASK_ICON. This value is used
            only in Windows XP and earlier. It is ignored as of Windows Vista.
            <para><c>OR</c></para>
            <para>
            A handle to the monitor upon which the document is to be displayed. This member is ignored if fMask does not include SEE_MASK_HMONITOR.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHELLEXECUTEINFO.hProcess">
            <summary>
            A handle to the newly started application. This member is set on return and is always NULL unless fMask is set to
            SEE_MASK_NOCLOSEPROCESS. Even if fMask is set to SEE_MASK_NOCLOSEPROCESS, hProcess will be NULL if no process was launched.
            For example, if a document to be launched is a URL and an instance of Internet Explorer is already running, it will display
            the document. No new process is launched, and hProcess will be NULL. <note>ShellExecuteEx does not always return an hProcess,
            even if a process is launched as the result of the call. For example, an hProcess does not return when you use
            SEE_MASK_INVOKEIDLIST to invoke IContextMenu.</note>
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHELLEXECUTEINFO.#ctor(System.String,System.String)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Shell32.SHELLEXECUTEINFO"/> struct.</summary>
            <param name="fileName">Name of the file.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.SHFILEINFO">
            <summary>Contains information about a file object.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHFILEINFO.hIcon">
            <summary>
            A handle to the icon that represents the file. You are responsible for destroying this handle with DestroyIcon when you no
            longer need it.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHFILEINFO.iIcon">
            <summary>The index of the icon image within the system image list.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHFILEINFO.dwAttributes">
            <summary>
            An array of values that indicates the attributes of the file object. For information about these values, see the
            IShellFolder::GetAttributesOf method.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHFILEINFO.szDisplayName">
            <summary>
            A string that contains the name of the file as it appears in the Windows Shell, or the path and file name of the file that
            contains the icon representing the file.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHFILEINFO.szTypeName">
            <summary>A string that describes the type of file.</summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.SHFILEINFO.Size">
            <summary>Gets the size of this structure.</summary>
            <value>The structure size in bytes.</value>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.SHFILEOPSTRUCT">
            <summary>Contains information that the SHFileOperation function uses to perform file operations.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHFILEOPSTRUCT.hwnd">
            <summary>A window handle to the dialog box to display information about the status of the file operation.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHFILEOPSTRUCT.wFunc">
            <summary>A value that indicates which operation to perform.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHFILEOPSTRUCT.pFrom">
            <summary>
            <note type="note">This string must be double-null terminated.</note>
            <para>A pointer to one or more source file names.These names should be fully qualified paths to prevent unexpected results.</para>
            <para>
            Standard MS-DOS wildcard characters, such as "*", are permitted only in the file-name position.Using a wildcard character
            elsewhere in the string will lead to unpredictable results.
            </para>
            <para>
            Although this member is declared as a single null-terminated string, it is actually a buffer that can hold multiple
            null-delimited file names.Each file name is terminated by a single NULL character. The last file name is terminated with a
            double NULL character ("\0\0") to indicate the end of the buffer.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHFILEOPSTRUCT.pTo">
            <summary>
            <note type="note">This string must be double-null terminated.</note>
            <para>
            A pointer to the destination file or directory name. This parameter must be set to NULL if it is not used. Wildcard
            characters are not allowed. Their use will lead to unpredictable results.
            </para>
            <para>
            Like pFrom, the pTo member is also a double-null terminated string and is handled in much the same way. However, pTo must
            meet the following specifications:
            </para>
            <list type="bullet">
            <item>
            <description>Wildcard characters are not supported.</description>
            </item>
            <item>
            <description>
            Copy and Move operations can specify destination directories that do not exist. In those cases, the system attempts to create
            them and normally displays a dialog box to ask the user if they want to create the new directory. To suppress this dialog box
            and have the directories created silently, set the FOF_NOCONFIRMMKDIR flag in fFlags.
            </description>
            </item>
            <item>
            <description>
            For Copy and Move operations, the buffer can contain multiple destination file names if the fFlags member specifies FOF_MULTIDESTFILES.
            </description>
            </item>
            <item>
            <description>Pack multiple names into the pTo string in the same way as for pFrom.</description>
            </item>
            <item>
            <description>Use fully qualified paths. Using relative paths is not prohibited, but can have unpredictable results.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHFILEOPSTRUCT.fFlags">
            <summary>Flags that control the file operation.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHFILEOPSTRUCT.fAnyOperationsAborted">
            <summary>
            When the function returns, this member contains TRUE if any file operations were aborted before they were completed;
            otherwise, FALSE. An operation can be manually aborted by the user through UI or it can be silently aborted by the system if
            the FOF_NOERRORUI or FOF_NOCONFIRMATION flags were set.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHFILEOPSTRUCT.hNameMappings">
            <summary>
            When the function returns, this member contains a handle to a name mapping object that contains the old and new names of the
            renamed files. This member is used only if the fFlags member includes the FOF_WANTMAPPINGHANDLE flag. See Remarks for more details.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHFILEOPSTRUCT.lpszProgressTitle">
            <summary>
            A pointer to the title of a progress dialog box. This is a null-terminated string. This member is used only if fFlags
            includes the FOF_SIMPLEPROGRESS flag.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.SHQUERYRBINFO">
            <summary>
            <para>Contains the size and item count information retrieved by the SHQueryRecycleBin function.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHQUERYRBINFO.cbSize">
            <summary>The size of the structure, in bytes. This member must be filled in prior to calling the function.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHQUERYRBINFO.i64Size">
            <summary>The total size, in bytes, of all the items currently in the Recycle Bin.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHQUERYRBINFO.i64NumItems">
            <summary>The total number of items currently in the Recycle Bin.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.SHSTOCKICONINFO">
            <summary>
            <para>Receives information used to retrieve a stock Shell icon. This structure is used in a call SHGetStockIconInfo.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONINFO.cbSize">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The size of this structure, in bytes.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONINFO.hIcon">
            <summary>
            <para>Type: <c>HICON</c></para>
            <para>When SHGetStockIconInfo is called with the SHGSI_ICON flag, this member receives a handle to the icon.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONINFO.iSysImageIndex">
            <summary>
            <para>Type: <c>int</c></para>
            <para>
            When SHGetStockIconInfo is called with the SHGSI_SYSICONINDEX flag, this member receives the index of the image in the system
            icon cache.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONINFO.iIcon">
            <summary>
            <para>Type: <c>int</c></para>
            <para>
            When SHGetStockIconInfo is called with the SHGSI_ICONLOCATION flag, this member receives the index of the icon in the
            resource whose path is received in <c>szPath</c>.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONINFO.szPath">
            <summary>
            <para>Type: <c>WCHAR[MAX_PATH]</c></para>
            <para>
            When SHGetStockIconInfo is called with the SHGSI_ICONLOCATION flag, this member receives the path of the resource that
            contains the icon. The index of the icon within the resource is received in <c>iIcon</c>.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHSTOCKICONINFO.Default">
            <summary>The default empty instance of SHSTOCKICONINFO with cbSize set appropriately.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.AUTOCOMPLETEOPTIONS">
            <summary>Specifies values used by IAutoComplete2::GetOptions and IAutoComplete2::SetOptions for options surrounding autocomplete.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.AUTOCOMPLETEOPTIONS.ACO_NONE">
            <summary>Do not autocomplete.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.AUTOCOMPLETEOPTIONS.ACO_AUTOSUGGEST">
            <summary>Enable the autosuggest drop-down list.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.AUTOCOMPLETEOPTIONS.ACO_AUTOAPPEND">
            <summary>Enable autoappend.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.AUTOCOMPLETEOPTIONS.ACO_SEARCH">
            <summary>Add a search item to the list of completed strings. When the user selects this item, it launches a search engine.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.AUTOCOMPLETEOPTIONS.ACO_FILTERPREFIXES">
            <summary>Do not match common prefixes, such as "www." or "http://".</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.AUTOCOMPLETEOPTIONS.ACO_USETAB">
            <summary>Use the TAB key to select an item from the drop-down list.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.AUTOCOMPLETEOPTIONS.ACO_UPDOWNKEYDROPSLIST">
            <summary>Use the UP ARROW and DOWN ARROW keys to display the autosuggest drop-down list.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.AUTOCOMPLETEOPTIONS.ACO_RTLREADING">
            <summary>
            Normal windows display text left-to-right (LTR). Windows can be mirrored to display languages such as Hebrew or Arabic that
            read right-to-left (RTL). Typically, control text is displayed in the same direction as the text in its parent window. If
            ACO_RTLREADING is set, the text reads in the opposite direction from the text in the parent window.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.AUTOCOMPLETEOPTIONS.ACO_WORD_FILTER">
            <summary>
            Windows Vista and later. If set, the autocompleted suggestion is treated as a phrase for search purposes. The suggestion,
            Microsoft Office, would be treated as "Microsoft Office" (where both Microsoft AND Office must appear in the search results).
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.AUTOCOMPLETEOPTIONS.ACO_NOPREFIXFILTERING">
            <summary>
            Windows Vista and later. Disable prefix filtering when displaying the autosuggest dropdown. Always display all suggestions.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.OfflineFolderStatus">
            <summary>The offline status of the folder.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.OfflineFolderStatus.OFS_DIRTYCACHE">
            <summary>Server is online with unsynchronized changes.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.OfflineFolderStatus.OFS_INACTIVE">
            <summary>Offline caching is not enabled for this folder.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.OfflineFolderStatus.OFS_OFFLINE">
            <summary>Server is offline.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.OfflineFolderStatus.OFS_ONLINE">
            <summary>Server is online.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.OfflineFolderStatus.OFS_SERVERBACK">
            <summary>Server is offline but can be reached.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.ShellFolderViewOptions">
            <summary>Specifies the view options returned by the ViewOptions property.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellFolderViewOptions.SFVVO_DESKTOPHTML">
            <summary>The Active Desktop – View as Web Page option is enabled.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellFolderViewOptions.SFVVO_DOUBLECLICKINWEBVIEW">
            <summary>The Double-Click to Open an Item option is enabled.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellFolderViewOptions.SFVVO_SHOWALLOBJECTS">
            <summary>The Show All Files option is enabled.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellFolderViewOptions.SFVVO_SHOWCOMPCOLOR">
            <summary>The Display Compressed Files and Folders with Alternate Color option is enabled.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellFolderViewOptions.SFVVO_SHOWEXTENSIONS">
            <summary>The Hide extensions for known file types option is disabled.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellFolderViewOptions.SFVVO_SHOWSYSFILES">
            <summary>The Do Not Show Hidden Files option is enabled.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellFolderViewOptions.SFVVO_WIN95CLASSIC">
            <summary>The Classic Style option is enabled.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.ShellSpecialFolderConstants">
            <summary>
            Specifies unique, system-independent values that identify special folders. These folders are frequently used by applications but
            which may not have the same name or location on any given system. For example, the system folder can be "C:\Windows" on one
            system and "C:\Winnt" on another.
            </summary>
            <remarks>
            <para>
            The values in this enumeration are equivalent to their corresponding CSIDL or KNOWNFOLDERID values, used in C++ applications.
            They supersede the use of environment variables for this purpose. Note that not all <c>CSIDL</c> or <c>KNOWNFOLDERID</c> values
            have an equivalent value in <c>ShellSpecialFolderConstants</c>.
            </para>
            <para>
            <c>Note</c> Where a constant identifies a file system folder, a commonly used path on Windows Vista systems is given as an
            example. However, there is no guarantee that this path will be used on any particular system, including Windows Vista systems.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellSpecialFolderConstants.ssfDESKTOP">
            <summary>0x00 (0). Windows desktop—the virtual folder that is the root of the namespace.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellSpecialFolderConstants.ssfPROGRAMS">
            <summary>
            0x02 (2). File system directory that contains the user's program groups (which are also file system directories). A typical
            path is C:\Users\username\AppData\Roaming\Microsoft\Windows\Start Menu\Programs.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellSpecialFolderConstants.ssfCONTROLS">
            <summary>0x03 (3). Virtual folder that contains icons for the Control Panel applications.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellSpecialFolderConstants.ssfPRINTERS">
            <summary>0x04 (4). Virtual folder that contains installed printers.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellSpecialFolderConstants.ssfPERSONAL">
            <summary>
            0x05 (5). File system directory that serves as a common repository for a user's documents. A typical path is C:\Users\username\Documents.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellSpecialFolderConstants.ssfFAVORITES">
            <summary>
            0x06 (6). File system directory that serves as a common repository for the user's favorite URLs. A typical path is
            C:\Documents and Settings\username\Favorites.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellSpecialFolderConstants.ssfSTARTUP">
            <summary>
            0x07 (7). File system directory that corresponds to the user's Startup program group. The system starts these programs
            whenever any user first logs into their profile after a reboot. A typical path is
            C:\Users\username\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\StartUp.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellSpecialFolderConstants.ssfRECENT">
            <summary>0x08 (8). File system directory that contains the user's most recently used documents. A typical path is C:\Users\username\AppData\Roaming\Microsoft\Windows\Recent.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellSpecialFolderConstants.ssfSENDTO">
            <summary>0x09 (9). File system directory that contains Send To menu items. A typical path is C:\Users\username\AppData\Roaming\Microsoft\Windows\SendTo.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellSpecialFolderConstants.ssfBITBUCKET">
            <summary>0x0a (10). Virtual folder that contains the objects in the user's Recycle Bin.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellSpecialFolderConstants.ssfSTARTMENU">
            <summary>
            0x0b (11). File system directory that contains Start menu items. A typical path is
            C:\Users\username\AppData\Roaming\Microsoft\Windows\Start Menu.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellSpecialFolderConstants.ssfDESKTOPDIRECTORY">
            <summary>
            0x10 (16). File system directory used to physically store the file objects that are displayed on the desktop. It is not to be
            confused with the desktop folder itself, which is a virtual folder. A typical path is C:\Documents and Settings\username\Desktop.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellSpecialFolderConstants.ssfDRIVES">
            <summary>
            0x11 (17). My Computer—the virtual folder that contains everything on the local computer: storage devices, printers, and
            Control Panel. This folder can also contain mapped network drives.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellSpecialFolderConstants.ssfNETWORK">
            <summary>0x12 (18). Network Neighborhood—the virtual folder that represents the root of the network namespace hierarchy.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellSpecialFolderConstants.ssfNETHOOD">
            <summary>
            0x13 (19). A file system folder that contains any link objects in the My Network Places virtual folder. It is not the same as
            ssfNETWORK, which represents the network namespace root. A typical path is
            C:\Users\username\AppData\Roaming\Microsoft\Windows\Network Shortcuts.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellSpecialFolderConstants.ssfFONTS">
            <summary>0x14 (20). Virtual folder that contains installed fonts. A typical path is C:\Windows\Fonts.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellSpecialFolderConstants.ssfTEMPLATES">
            <summary>0x15 (21). File system directory that serves as a common repository for document templates.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellSpecialFolderConstants.ssfCOMMONSTARTMENU">
            <summary>
            0x16 (22). File system directory that contains the programs and folders that appear on the Start menu for all users. A
            typical path is C:\Documents and Settings\All Users\Start Menu. Valid only for Windows NT systems.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellSpecialFolderConstants.ssfCOMMONPROGRAMS">
            <summary>
            0x17 (23). File system directory that contains the directories for the common program groups that appear on the Start menu
            for all users. A typical path is C:\Documents and Settings\All Users\Start Menu\Programs. Valid only for Windows NT systems.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellSpecialFolderConstants.ssfCOMMONSTARTUP">
            <summary>
            0x18 (24). File system directory that contains the programs that appear in the Startup folder for all users. A typical path
            is C:\Documents and Settings\All Users\Microsoft\Windows\Start Menu\Programs\StartUp. Valid only for Windows NT systems.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellSpecialFolderConstants.ssfCOMMONDESKTOPDIR">
            <summary>
            0x19 (25). File system directory that contains files and folders that appear on the desktop for all users. A typical path is
            C:\Documents and Settings\All Users\Desktop. Valid only for Windows NT systems.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellSpecialFolderConstants.ssfAPPDATA">
            <summary>
            0x1a (26). Version 4.71. File system directory that serves as a common repository for application-specific data. A typical
            path is C:\Documents and Settings\username\Application Data.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellSpecialFolderConstants.ssfPRINTHOOD">
            <summary>
            0x1b (27). File system directory that contains any link objects in the Printers virtual folder. A typical path is
            C:\Users\username\AppData\Roaming\Microsoft\Windows\Printer Shortcuts.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellSpecialFolderConstants.ssfLOCALAPPDATA">
            <summary>
            0x1c (28). Version 5.0. File system directory that serves as a data repository for local (non-roaming) applications. A
            typical path is C:\Users\username\AppData\Local.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellSpecialFolderConstants.ssfALTSTARTUP">
            <summary>0x1d (29). File system directory that corresponds to the user's non-localized Startup program group.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellSpecialFolderConstants.ssfCOMMONALTSTARTUP">
            <summary>
            0x1e (30). File system directory that corresponds to the non-localized Startup program group for all users. Valid only for
            Windows NT systems.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellSpecialFolderConstants.ssfCOMMONFAVORITES">
            <summary>
            0x1f (31). File system directory that serves as a common repository for the favorite URLs shared by all users. Valid only for
            Windows NT systems.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellSpecialFolderConstants.ssfINTERNETCACHE">
            <summary>
            0x20 (32). File system directory that serves as a common repository for temporary Internet files. A typical path is
            C:\Users\username\AppData\Local\Microsoft\Windows\Temporary Internet Files.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellSpecialFolderConstants.ssfCOOKIES">
            <summary>
            0x21 (33). File system directory that serves as a common repository for Internet cookies. A typical path is C:\Documents and
            Settings\username\Application Data\Microsoft\Windows\Cookies.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellSpecialFolderConstants.ssfHISTORY">
            <summary>0x22 (34). File system directory that serves as a common repository for Internet history items.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellSpecialFolderConstants.ssfCOMMONAPPDATA">
            <summary>
            0x23 (35). Version 5.0. Application data for all users. A typical path is C:\Documents and Settings\All Users\Application Data.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellSpecialFolderConstants.ssfWINDOWS">
            <summary>
            0x24 (36). Version 5.0. Windows directory. This corresponds to the %windir% or %SystemRoot% environment variables. A typical
            path is C:\Windows.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellSpecialFolderConstants.ssfSYSTEM">
            <summary>0x25 (37). Version 5.0. The System folder. A typical path is C:\Windows\System32.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellSpecialFolderConstants.ssfPROGRAMFILES">
            <summary>0x26 (38). Version 5.0. Program Files folder. A typical path is C:\Program Files.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellSpecialFolderConstants.ssfMYPICTURES">
            <summary>0x27 (39). My Pictures folder. A typical path is C:\Users\username\Pictures.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellSpecialFolderConstants.ssfPROFILE">
            <summary>0x28 (40). Version 5.0. User's profile folder.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellSpecialFolderConstants.ssfSYSTEMx86">
            <summary>
            0x29 (41). Version 5.0. System folder. A typical path is C:\Windows\System32, or C:\Windows\Syswow32 on a 64-bit computer.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellSpecialFolderConstants.ssfPROGRAMFILESx86">
            <summary>
            0x30 (48). Version 6.0. Program Files folder. A typical path is C:\Program Files, or C:\Program Files (X86) on a 64-bit computer.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.DFConstraint">
            <summary>Constraint used in search command.</summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.DFConstraint.Name">
            <summary>Get the constraint name.</summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.DFConstraint.Value">
            <summary>Get the constraint value.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.DShellFolderViewEvents">
            <summary>Event interface for ShellFolderView.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.DShellFolderViewEvents.SelectionChanged">
            <summary>The Selection in the view changed.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.DShellFolderViewEvents.EnumDone">
            <summary>The folder has finished enumerating (flashlight is gone).</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.DShellFolderViewEvents.VerbInvoked">
            <summary>A verb was invoked on an items in the view (return false to cancel).</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.DShellFolderViewEvents.DefaultVerbInvoked">
            <summary>the default verb (double click) was invoked on an items in the view (return false to cancel).</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.DShellFolderViewEvents.BeginDrag">
            <summary>user started to drag an item (return false to cancel).</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.Folder">
            <summary>
            Represents a Shell folder. This object contains properties and methods that allow you to retrieve information about the folder.
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.Folder.Title">
            <summary>Contains the title of the folder.</summary>
            <value>Returns a <see cref="T:System.String"/> value.</value>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.Folder.Application">
            <summary>Contains the folder's Application object.</summary>
            <value>An object reference to the Application object.</value>
            <remarks>
            The Application property returns the automation object supported by the application that contains the WebBrowser control, if
            that object is accessible. Otherwise, this property returns the WebBrowser control's automation object.
            <para>
            Use this property with the Set and CreateObject commands or with the GetObject command to create and manipulate an instance
            of the Internet Explorer application.
            </para>
            <note type="note">Not all methods are implemented for all folders. For example, the ParseName method is not implemented for
            the Control Panel folder (CSIDL_CONTROLS). If you attempt to call an unimplemented method, a 0x800A01BD (decimal 445) error
            is raised.</note>
            </remarks>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.Folder.Parent">
            <summary>This property is not implemented.</summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.Folder.ParentFolder">
            <summary>Contains the parent Folder object.</summary>
            <value>An object reference to the ParentFolder object.</value>
            <remarks>
            <note type="note">Not all methods are implemented for all folders. For example, the ParseName method is not implemented for
            the Control Panel folder (CSIDL_CONTROLS). If you attempt to call an unimplemented method, a 0x800A01BD (decimal 445) error
            is raised.</note>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.Folder.Items">
            <summary>Retrieves a FolderItems object that represents the collection of items in the folder.</summary>
            <returns>An object reference to the FolderItems object.</returns>
            <remarks>
            <note type="note">Not all methods are implemented for all folders. For example, the ParseName method is not implemented for
            the Control Panel folder (CSIDL_CONTROLS). If you attempt to call an unimplemented method, a 0x800A01BD (decimal 445) error
            is raised.</note>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.Folder.ParseName(System.String)">
            <summary>Creates and returns a FolderItem object that represents a specified item.</summary>
            <param name="bName">A string that specifies the name of the item.</param>
            <returns>An object reference to the FolderItem object.</returns>
            <remarks>ParseName should not be used for virtual folders such as My Documents.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.Folder.NewFolder(System.String,System.Object)">
            <summary>Creates a new folder.</summary>
            <param name="bName">A string that specifies the name of the new folder.</param>
            <param name="vOptions">This value is not currently used.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.Folder.MoveHere(System.Object,Vanara.PInvoke.Shell32.FILEOP_FLAGS)">
            <summary>Moves an item or items to this folder.</summary>
            <param name="vItem">
            The item or items to move. This can be a string that represents a file name, a FolderItem object, or a FolderItems object.
            </param>
            <param name="vOptions">
            Options for the move operation. This value can be zero or a combination of the following values. These values are based upon
            flags defined for use with the fFlags member of the C++ SHFILEOPSTRUCT structure. These flags are not defined as such for
            Visual Basic, VBScript, or JScript, so you must define them yourself or use their numeric equivalents.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.Folder.CopyHere(System.Object,Vanara.PInvoke.Shell32.FILEOP_FLAGS)">
            <summary>Copies an item or items to a folder.</summary>
            <param name="vItem">
            The item or items to copy. This can be a string that represents a file name, a FolderItem object, or a FolderItems object.
            </param>
            <param name="vOptions">
            Options for the copy operation. This value can be zero or a combination of the following values. These values are based upon
            flags defined for use with the fFlags member of the C++ SHFILEOPSTRUCT structure. Each Shell namespace must provide its own
            implementation of these flags, and each namespace can choose to ignore some or even all of these flags. These flags are not
            defined by name for Visual Basic, VBScript, or JScript, so you must define them yourself or use their numeric equivalents.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.Folder.GetDetailsOf(System.Object,System.Int32)">
            <summary>Retrieves details about an item in a folder. For example, its size, type, or the time of its last modification.</summary>
            <param name="vItem">The item for which to retrieve the information. This must be a FolderItem object.</param>
            <param name="iColumn">
            An Integer value that specifies the information to be retrieved. The information available for an item depends on the folder
            in which it is displayed. This value corresponds to the zero-based column number that is displayed in a Shell view.
            </param>
            <returns>String containing the retrieved detail.</returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.Folder2">
            <summary>Extends the Folder object to support offline folders.</summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.Folder2.Title">
            <summary>Contains the title of the folder.</summary>
            <value>Returns a <see cref="T:System.String"/> value.</value>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.Folder2.Application">
            <summary>Contains the folder's Application object.</summary>
            <value>An object reference to the Application object.</value>
            <remarks>
            The Application property returns the automation object supported by the application that contains the WebBrowser control, if
            that object is accessible. Otherwise, this property returns the WebBrowser control's automation object.
            <para>
            Use this property with the Set and CreateObject commands or with the GetObject command to create and manipulate an instance
            of the Internet Explorer application.
            </para>
            <note type="note">Not all methods are implemented for all folders. For example, the ParseName method is not implemented for
            the Control Panel folder (CSIDL_CONTROLS). If you attempt to call an unimplemented method, a 0x800A01BD (decimal 445) error
            is raised.</note>
            </remarks>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.Folder2.Parent">
            <summary>This property is not implemented.</summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.Folder2.ParentFolder">
            <summary>Contains the parent Folder object.</summary>
            <value>An object reference to the ParentFolder object.</value>
            <remarks>
            <note type="note">Not all methods are implemented for all folders. For example, the ParseName method is not implemented for
            the Control Panel folder (CSIDL_CONTROLS). If you attempt to call an unimplemented method, a 0x800A01BD (decimal 445) error
            is raised.</note>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.Folder2.Items">
            <summary>Retrieves a FolderItems object that represents the collection of items in the folder.</summary>
            <returns>An object reference to the FolderItems object.</returns>
            <remarks>
            <note type="note">Not all methods are implemented for all folders. For example, the ParseName method is not implemented for
            the Control Panel folder (CSIDL_CONTROLS). If you attempt to call an unimplemented method, a 0x800A01BD (decimal 445) error
            is raised.</note>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.Folder2.ParseName(System.String)">
            <summary>Creates and returns a FolderItem object that represents a specified item.</summary>
            <param name="bName">A string that specifies the name of the item.</param>
            <returns>An object reference to the FolderItem object.</returns>
            <remarks>ParseName should not be used for virtual folders such as My Documents.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.Folder2.NewFolder(System.String,System.Object)">
            <summary>Creates a new folder.</summary>
            <param name="bName">A string that specifies the name of the new folder.</param>
            <param name="vOptions">This value is not currently used.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.Folder2.MoveHere(System.Object,Vanara.PInvoke.Shell32.FILEOP_FLAGS)">
            <summary>Moves an item or items to this folder.</summary>
            <param name="vItem">
            The item or items to move. This can be a string that represents a file name, a FolderItem object, or a FolderItems object.
            </param>
            <param name="vOptions">
            Options for the move operation. This value can be zero or a combination of the following values. These values are based upon
            flags defined for use with the fFlags member of the C++ SHFILEOPSTRUCT structure. These flags are not defined as such for
            Visual Basic, VBScript, or JScript, so you must define them yourself or use their numeric equivalents.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.Folder2.CopyHere(System.Object,Vanara.PInvoke.Shell32.FILEOP_FLAGS)">
            <summary>Copies an item or items to a folder.</summary>
            <param name="vItem">
            The item or items to copy. This can be a string that represents a file name, a FolderItem object, or a FolderItems object.
            </param>
            <param name="vOptions">
            Options for the copy operation. This value can be zero or a combination of the following values. These values are based upon
            flags defined for use with the fFlags member of the C++ SHFILEOPSTRUCT structure. Each Shell namespace must provide its own
            implementation of these flags, and each namespace can choose to ignore some or even all of these flags. These flags are not
            defined by name for Visual Basic, VBScript, or JScript, so you must define them yourself or use their numeric equivalents.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.Folder2.GetDetailsOf(System.Object,System.Int32)">
            <summary>Retrieves details about an item in a folder. For example, its size, type, or the time of its last modification.</summary>
            <param name="vItem">The item for which to retrieve the information. This must be a FolderItem object.</param>
            <param name="iColumn">
            An Integer value that specifies the information to be retrieved. The information available for an item depends on the folder
            in which it is displayed. This value corresponds to the zero-based column number that is displayed in a Shell view.
            </param>
            <returns>String containing the retrieved detail.</returns>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.Folder2.Self">
            <summary>Contains the folder's FolderItem object.</summary>
            <value>The object that evaluates to the folder's FolderItem object.</value>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.Folder2.OfflineStatus">
            <summary>Contains the offline status of the folder.</summary>
            <value>Returns a <see cref="T:Vanara.PInvoke.Shell32.OfflineFolderStatus"/> value.</value>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.Folder2.Synchronize">
            <summary>Synchronizes all offline files in the folder.</summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.Folder2.HaveToShowWebViewBarricade">
            <summary>This property is not supported.</summary>
            <value><see langword="true"/> if [have to show web view barricade]; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.Folder2.DismissedWebViewBarricade">
            <summary>Called in response to the web view barricade being dismissed by the user.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.Folder3">
            <summary>Extends the Folder object to support offline folders.</summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.Folder3.Title">
            <summary>Contains the title of the folder.</summary>
            <value>Returns a <see cref="T:System.String"/> value.</value>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.Folder3.Application">
            <summary>Contains the folder's Application object.</summary>
            <value>An object reference to the Application object.</value>
            <remarks>
            The Application property returns the automation object supported by the application that contains the WebBrowser control, if
            that object is accessible. Otherwise, this property returns the WebBrowser control's automation object.
            <para>
            Use this property with the Set and CreateObject commands or with the GetObject command to create and manipulate an instance
            of the Internet Explorer application.
            </para>
            <note type="note">Not all methods are implemented for all folders. For example, the ParseName method is not implemented for
            the Control Panel folder (CSIDL_CONTROLS). If you attempt to call an unimplemented method, a 0x800A01BD (decimal 445) error
            is raised.</note>
            </remarks>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.Folder3.Parent">
            <summary>This property is not implemented.</summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.Folder3.ParentFolder">
            <summary>Contains the parent Folder object.</summary>
            <value>An object reference to the ParentFolder object.</value>
            <remarks>
            <note type="note">Not all methods are implemented for all folders. For example, the ParseName method is not implemented for
            the Control Panel folder (CSIDL_CONTROLS). If you attempt to call an unimplemented method, a 0x800A01BD (decimal 445) error
            is raised.</note>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.Folder3.Items">
            <summary>Retrieves a FolderItems object that represents the collection of items in the folder.</summary>
            <returns>An object reference to the FolderItems object.</returns>
            <remarks>
            <note type="note">Not all methods are implemented for all folders. For example, the ParseName method is not implemented for
            the Control Panel folder (CSIDL_CONTROLS). If you attempt to call an unimplemented method, a 0x800A01BD (decimal 445) error
            is raised.</note>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.Folder3.ParseName(System.String)">
            <summary>Creates and returns a FolderItem object that represents a specified item.</summary>
            <param name="bName">A string that specifies the name of the item.</param>
            <returns>An object reference to the FolderItem object.</returns>
            <remarks>ParseName should not be used for virtual folders such as My Documents.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.Folder3.NewFolder(System.String,System.Object)">
            <summary>Creates a new folder.</summary>
            <param name="bName">A string that specifies the name of the new folder.</param>
            <param name="vOptions">This value is not currently used.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.Folder3.MoveHere(System.Object,Vanara.PInvoke.Shell32.FILEOP_FLAGS)">
            <summary>Moves an item or items to this folder.</summary>
            <param name="vItem">
            The item or items to move. This can be a string that represents a file name, a FolderItem object, or a FolderItems object.
            </param>
            <param name="vOptions">
            Options for the move operation. This value can be zero or a combination of the following values. These values are based upon
            flags defined for use with the fFlags member of the C++ SHFILEOPSTRUCT structure. These flags are not defined as such for
            Visual Basic, VBScript, or JScript, so you must define them yourself or use their numeric equivalents.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.Folder3.CopyHere(System.Object,Vanara.PInvoke.Shell32.FILEOP_FLAGS)">
            <summary>Copies an item or items to a folder.</summary>
            <param name="vItem">
            The item or items to copy. This can be a string that represents a file name, a FolderItem object, or a FolderItems object.
            </param>
            <param name="vOptions">
            Options for the copy operation. This value can be zero or a combination of the following values. These values are based upon
            flags defined for use with the fFlags member of the C++ SHFILEOPSTRUCT structure. Each Shell namespace must provide its own
            implementation of these flags, and each namespace can choose to ignore some or even all of these flags. These flags are not
            defined by name for Visual Basic, VBScript, or JScript, so you must define them yourself or use their numeric equivalents.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.Folder3.GetDetailsOf(System.Object,System.Int32)">
            <summary>Retrieves details about an item in a folder. For example, its size, type, or the time of its last modification.</summary>
            <param name="vItem">The item for which to retrieve the information. This must be a FolderItem object.</param>
            <param name="iColumn">
            An Integer value that specifies the information to be retrieved. The information available for an item depends on the folder
            in which it is displayed. This value corresponds to the zero-based column number that is displayed in a Shell view.
            </param>
            <returns>String containing the retrieved detail.</returns>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.Folder3.Self">
            <summary>Contains the folder's FolderItem object.</summary>
            <value>The object that evaluates to the folder's FolderItem object.</value>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.Folder3.OfflineStatus">
            <summary>Contains the offline status of the folder.</summary>
            <value>Returns a <see cref="T:Vanara.PInvoke.Shell32.OfflineFolderStatus"/> value.</value>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.Folder3.Synchronize">
            <summary>Synchronizes all offline files in the folder.</summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.Folder3.HaveToShowWebViewBarricade">
            <summary>This property is not supported.</summary>
            <value><see langword="true"/> if [have to show web view barricade]; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.Folder3.DismissedWebViewBarricade">
            <summary>Called in response to the web view barricade being dismissed by the user.</summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.Folder3.ShowWebViewBarricade">
            <summary>Gets or sets a value indicating whether to show web view barricade.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.FolderItem">
            <summary>
            Represents an item in a Shell folder. This object contains properties and methods that allow you to retrieve information about
            the item.
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.FolderItem.Application">
            <summary>Contains the Application object of the folder item.</summary>
            <value>A variable of type IDispatch that receives the Application object.</value>
            <remarks>
            The Application property returns the automation object supported by the application that contains the WebBrowser control, if
            that object is accessible. Otherwise, this property returns the WebBrowser control's automation object.
            <para>
            Use this property with the Set and CreateObject commands or with the GetObject command to create and manipulate an instance
            of the Internet Explorer application.
            </para>
            </remarks>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.FolderItem.Parent">
            <summary>Gets an object that represents the parent of the item.</summary>
            <value>A variable of type IDispatch that receives the parent object.</value>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.FolderItem.Name">
            <summary>Gets or sets the item's name.</summary>
            <value>A variable of type BSTR that specifies or receives the item's name.</value>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.FolderItem.Path">
            <summary>Contains the item's full path and name.</summary>
            <value>A variable of type BSTR that receives the item's full path and name.</value>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.FolderItem.GetLink">
            <summary>Contains the item's ShellLinkObject object, if the item is a shortcut.</summary>
            <value>A variable of type IDispatch that receives the ShellLinkObject object.</value>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.FolderItem.GetFolder">
            <summary>Contains the item's Folder object, if the item is a folder.</summary>
            <value>A variable of type IDispatch that receives the Folder object.</value>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.FolderItem.IsLink">
            <summary>Indicates whether the item is a shortcut.</summary>
            <value>A Boolean that receives <see langword="true"/> if the item is a shortcut or <see langword="false"/> if not.</value>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.FolderItem.IsFolder">
            <summary>Indicates if the item is a folder.</summary>
            <value>A Boolean that receives <see langword="true"/> if the item is a folder or <see langword="false"/> if not.</value>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.FolderItem.IsFileSystem">
            <summary>Indicates if the item is part of the file system.</summary>
            <value>
            A Boolean that receives <see langword="true"/> if the item is part of the file system or <see langword="false"/> if not.
            </value>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.FolderItem.IsBrowsable">
            <summary>Indicates if the item can be hosted inside a browser or Windows Explorer frame.</summary>
            <value>A Boolean that receives <see langword="true"/> if the item can be browsed or <see langword="false"/> if not.</value>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.FolderItem.ModifyDate">
            <summary>
            For a file, sets or gets the date and time that it was last modified. For a folder, retrieves the date and time that a folder
            was last modified, but cannot set it.
            </summary>
            <value>Date that specifies or receives the date and time that the item was last modified.</value>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.FolderItem.Size">
            <summary>Contains the item's size.</summary>
            <value>An Integer that receives the item's size.</value>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.FolderItem.Type">
            <summary>Contains a string representation of the item's type.</summary>
            <value>A variable of type BSTR that receives the item's type.</value>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.FolderItem.Verbs">
            <summary>
            Retrieves the item's FolderItemVerbs object. This object is the collection of verbs that can be executed on the item.
            </summary>
            <returns>An object reference to the FolderItemVerbs object.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.FolderItem.InvokeVerb(System.String)">
            <summary>Executes a verb on the item.</summary>
            <param name="vVerb">
            A string that specifies the verb to be executed. It must be one of the values returned by the item's FolderItemVerb.Name
            property. If no verb is specified, the default verb will be invoked.
            </param>
            <remarks>
            A verb is a string used to specify a particular action that an item supports. Invoking a verb is equivalent to selecting a
            command from an item's shortcut menu. Typically, invoking a verb launches a related application. For example, invoking the
            "open" verb on a .txt file opens the file with a text editor, usually Microsoft Notepad. See Launching Applications for
            further discussion of verbs.
            <para>
            The FolderItemVerbs object represents the collection of verbs associated with the item.The default verb may vary for
            different items, but it is typically "open".
            </para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.FolderItem2">
            <summary>Extends the FolderItems object. It supports one additional method.</summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.FolderItem2.Application">
            <summary>Contains the Application object of the folder item.</summary>
            <value>A variable of type IDispatch that receives the Application object.</value>
            <remarks>
            The Application property returns the automation object supported by the application that contains the WebBrowser control, if
            that object is accessible. Otherwise, this property returns the WebBrowser control's automation object.
            <para>
            Use this property with the Set and CreateObject commands or with the GetObject command to create and manipulate an instance
            of the Internet Explorer application.
            </para>
            </remarks>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.FolderItem2.Parent">
            <summary>Gets an object that represents the parent of the item.</summary>
            <value>A variable of type IDispatch that receives the parent object.</value>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.FolderItem2.Name">
            <summary>Gets or sets the item's name.</summary>
            <value>A variable of type BSTR that specifies or receives the item's name.</value>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.FolderItem2.Path">
            <summary>Contains the item's full path and name.</summary>
            <value>A variable of type BSTR that receives the item's full path and name.</value>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.FolderItem2.GetLink">
            <summary>Contains the item's ShellLinkObject object, if the item is a shortcut.</summary>
            <value>A variable of type IDispatch that receives the ShellLinkObject object.</value>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.FolderItem2.GetFolder">
            <summary>Contains the item's Folder object, if the item is a folder.</summary>
            <value>A variable of type IDispatch that receives the Folder object.</value>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.FolderItem2.IsLink">
            <summary>Indicates whether the item is a shortcut.</summary>
            <value>A Boolean that receives <see langword="true"/> if the item is a shortcut or <see langword="false"/> if not.</value>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.FolderItem2.IsFolder">
            <summary>Indicates if the item is a folder.</summary>
            <value>A Boolean that receives <see langword="true"/> if the item is a folder or <see langword="false"/> if not.</value>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.FolderItem2.IsFileSystem">
            <summary>Indicates if the item is part of the file system.</summary>
            <value>
            A Boolean that receives <see langword="true"/> if the item is part of the file system or <see langword="false"/> if not.
            </value>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.FolderItem2.IsBrowsable">
            <summary>Indicates if the item can be hosted inside a browser or Windows Explorer frame.</summary>
            <value>A Boolean that receives <see langword="true"/> if the item can be browsed or <see langword="false"/> if not.</value>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.FolderItem2.ModifyDate">
            <summary>
            For a file, sets or gets the date and time that it was last modified. For a folder, retrieves the date and time that a folder
            was last modified, but cannot set it.
            </summary>
            <value>Date that specifies or receives the date and time that the item was last modified.</value>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.FolderItem2.Size">
            <summary>Contains the item's size.</summary>
            <value>An Integer that receives the item's size.</value>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.FolderItem2.Type">
            <summary>Contains a string representation of the item's type.</summary>
            <value>A variable of type BSTR that receives the item's type.</value>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.FolderItem2.Verbs">
            <summary>
            Retrieves the item's FolderItemVerbs object. This object is the collection of verbs that can be executed on the item.
            </summary>
            <returns>An object reference to the FolderItemVerbs object.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.FolderItem2.InvokeVerb(System.String)">
            <summary>Executes a verb on the item.</summary>
            <param name="vVerb">
            A string that specifies the verb to be executed. It must be one of the values returned by the item's FolderItemVerb.Name
            property. If no verb is specified, the default verb will be invoked.
            </param>
            <remarks>
            A verb is a string used to specify a particular action that an item supports. Invoking a verb is equivalent to selecting a
            command from an item's shortcut menu. Typically, invoking a verb launches a related application. For example, invoking the
            "open" verb on a .txt file opens the file with a text editor, usually Microsoft Notepad. See Launching Applications for
            further discussion of verbs.
            <para>
            The FolderItemVerbs object represents the collection of verbs associated with the item.The default verb may vary for
            different items, but it is typically "open".
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.FolderItem2.InvokeVerbEx(System.String,System.String)">
            <summary>
            Executes a verb on a collection of FolderItem objects. This method is an extension of the InvokeVerb method, allowing
            additional control of the operation through a set of flags.
            </summary>
            <param name="vVerb">
            A Variant with the verb string that corresponds to the command to be executed. If no verb is specified, the default verb is executed.
            </param>
            <param name="vArgs">
            A Variant that consists of a string with one or more arguments to the command specified by vVerb. The format of this string
            depends on the particular verb.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.FolderItem2.ExtendedProperty(System.String)">
            <summary>Access an extended property</summary>
            <param name="bstrPropName">Name of the property.</param>
            <returns>Property value.</returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.FolderItems">
            <summary>
            Represents the collection of items in a Shell folder. This object contains properties and methods that allow you to retrieve
            information about the collection.
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.FolderItems.Count">
            <summary>Contains the number of items in the collection.</summary>
            <value>An Integer that contains a value for the Count property.</value>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.FolderItems.Application">
            <summary>Contains the Application object of the folder items collection.</summary>
            <value>An object reference to the Application object.</value>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.FolderItems.Parent">
            <summary>This property is not implemented.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.FolderItems.Item(System.Int32)">
            <summary>Retrieves the FolderItem object for a specified item in the collection.</summary>
            <param name="index">The zero-based index of the item to retrieve. This value must be less than the value of the Count property.</param>
            <returns>An object reference to the FolderItem object.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.FolderItems._NewEnum">
            <summary>Creates and returns a new FolderItems object that is a copy of this FolderItemsss object.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.FolderItems2">
            <summary>Extends the FolderItems object. It supports one additional method.</summary>
            <seealso cref="T:Vanara.PInvoke.Shell32.FolderItems"/>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.FolderItems2.Count">
            <summary>Contains the number of items in the collection.</summary>
            <value>An Integer that contains a value for the Count property.</value>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.FolderItems2.Application">
            <summary>Contains the Application object of the folder items collection.</summary>
            <value>An object reference to the Application object.</value>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.FolderItems2.Parent">
            <summary>This property is not implemented.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.FolderItems2.Item(System.Int32)">
            <summary>Retrieves the FolderItem object for a specified item in the collection.</summary>
            <param name="index">The zero-based index of the item to retrieve. This value must be less than the value of the Count property.</param>
            <returns>An object reference to the FolderItem object.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.FolderItems2._NewEnum">
            <summary>Creates and returns a new FolderItems object that is a copy of this FolderItemsss object.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.FolderItems2.InvokeVerbEx(System.String,System.String)">
            <summary>
            Executes a verb on a collection of FolderItem objects. This method is an extension of the InvokeVerb method, allowing
            additional control of the operation through a set of flags.
            </summary>
            <param name="vVerb">
            A Variant with the verb string that corresponds to the command to be executed. If no verb is specified, the default verb is executed.
            </param>
            <param name="vArgs">
            A Variant that consists of a string with one or more arguments to the command specified by vVerb. The format of this string
            depends on the particular verb.
            </param>
            <remarks>
            A verb is a string used to specify a particular action associated with an item or collection of items. Typically, calling a
            verb launches a related application. For example, calling the open verb on a .txt file normally opens the file with a text
            editor, usually Microsoft Notepad. For further discussion of verbs, see Launching Applications.
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.FolderItems3">
            <summary>Extends the FolderItems2 object. This object supports an additional method and property.</summary>
            <seealso cref="T:Vanara.PInvoke.Shell32.FolderItems2"/>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.FolderItems3.Count">
            <summary>Contains the number of items in the collection.</summary>
            <value>An Integer that contains a value for the Count property.</value>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.FolderItems3.Application">
            <summary>Contains the Application object of the folder items collection.</summary>
            <value>An object reference to the Application object.</value>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.FolderItems3.Parent">
            <summary>This property is not implemented.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.FolderItems3.Item(System.Int32)">
            <summary>Retrieves the FolderItem object for a specified item in the collection.</summary>
            <param name="index">The zero-based index of the item to retrieve. This value must be less than the value of the Count property.</param>
            <returns>An object reference to the FolderItem object.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.FolderItems3._NewEnum">
            <summary>Creates and returns a new FolderItems object that is a copy of this FolderItemsss object.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.FolderItems3.InvokeVerbEx(System.String,System.String)">
            <summary>
            Executes a verb on a collection of FolderItem objects. This method is an extension of the InvokeVerb method, allowing
            additional control of the operation through a set of flags.
            </summary>
            <param name="vVerb">
            A Variant with the verb string that corresponds to the command to be executed. If no verb is specified, the default verb is executed.
            </param>
            <param name="vArgs">
            A Variant that consists of a string with one or more arguments to the command specified by vVerb. The format of this string
            depends on the particular verb.
            </param>
            <remarks>
            A verb is a string used to specify a particular action associated with an item or collection of items. Typically, calling a
            verb launches a related application. For example, calling the open verb on a .txt file normally opens the file with a text
            editor, usually Microsoft Notepad. For further discussion of verbs, see Launching Applications.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.FolderItems3.Filter(Vanara.PInvoke.Shell32.SHCONTF,System.String)">
            <summary>Sets a wildcard filter to apply to the items returned.</summary>
            <param name="grfFlags">This parameter can be one of the flags listed in SHCONTF.</param>
            <param name="bstrFileSpec">A filter string that specifies what should be listed in the FolderItems collection.</param>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.FolderItems3.Verbs">
            <summary>Gets the list of verbs common to all the folder items.</summary>
            <value>Address of a pointer to the collection of verbs. See FolderItemVerbs.</value>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.FolderItemVerb">
            <summary>
            Represents a single verb available to an item. This object contains properties and methods that allow you to retrieve information
            about the verb.
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.FolderItemVerb.FolderItemVerb_Application">
            <summary>This property is not implemented.</summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.FolderItemVerb.Parent">
            <summary>This property is not implemented.</summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.FolderItemVerb.Name">
            <summary>
            <para>Contains the verb's name.</para>
            <para>This property is read-only.</para>
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.FolderItemVerb.DoIt">
            <summary>Executes a verb on the <c>FolderItem</c> associated with the verb.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.FolderItemVerbs">
            <summary>
            Represents the collection of verbs for an item in a Shell folder. This object contains properties and methods that allow you to
            retrieve information about the collection.
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.FolderItemVerbs.Count">
            <summary>
            <para>Contains the number of items in the collection.</para>
            <para>This property is read-only.</para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.FolderItemVerbs.Application">
            <summary>This property is not implemented.</summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.FolderItemVerbs.Parent">
            <summary>This property is not implemented.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.FolderItemVerbs.Item(System.Int32)">
            <summary>Retrieves the <c>FolderItemVerb</c> object for a specified item in the collection.</summary>
            <param name="index">
            <para>Type: <c>Variant</c></para>
            <para>The zero-based index of the item to retrieve. This value must be less than the value of the <c>Count</c> property.</para>
            </param>
            <returns>
            <para>Type: <c><c>IDispatch</c>**</c></para>
            <para>Object that receives the <c>FolderItemVerb</c> object.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.FolderItemVerbs._NewEnum">
            <summary>Creates and returns a new FolderItemVerbs object that is a copy of this FolderItemVerbs object.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IAutoComplete">
            <summary>
            Exposed by the autocomplete object (CLSID_AutoComplete). This interface allows applications to initialize, enable, and disable
            the object.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IAutoComplete.Init(Vanara.PInvoke.HWND,System.Runtime.InteropServices.ComTypes.IEnumString,System.String,System.String)">
            <summary>Initializes the autocomplete object.</summary>
            <param name="hwndEdit">A handle to the window for the system edit control for which autocompletion will be enabled.</param>
            <param name="punkAcl">
            A pointer to the IUnknown interface of the string list object that generates candidates for the completed string. The object
            must expose an IEnumString interface.
            </param>
            <param name="pwszRegKeyPath">
            A pointer to an optional, null-terminated Unicode string that gives the registry path, including the value name, where the
            format string is stored as a REG_SZ value. The autocomplete object first looks for the path under HKEY_CURRENT_USER. If it
            fails, it tries HKEY_LOCAL_MACHINE. For a discussion of the format string, see the definition of pwszQuickComplete.
            </param>
            <param name="pwszQuickComplete">
            A pointer to an optional null-terminated Unicode string that specifies the format to be used if the user enters text and
            presses CTRL+ENTER. Set this parameter to NULL to disable quick completion. Otherwise, the autocomplete object treats
            pwszQuickComplete as a StringCchPrintf format string and the text in the edit box as its associated argument, to produce a
            new string. For example, set pwszQuickComplete to "http://www.%s.com/". When a user enters "MyURL" into the edit box and
            presses CTRL+ENTER, the text in the edit box is updated to "http://www.MyURL.com/".
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IAutoComplete.Enable(System.Boolean)">
            <summary>Enables or disables autocompletion.</summary>
            <param name="fEnable">A value that is set to TRUE to enable autocompletion, or FALSE to disable it.</param>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IAutoComplete2">
            <summary>
            Extends IAutoComplete. This interface enables clients of the autocomplete object to retrieve and set a number of options that
            control how autocompletion operates.
            </summary>
            <seealso cref="T:Vanara.PInvoke.Shell32.IAutoComplete"/>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IAutoComplete2.Init(Vanara.PInvoke.HWND,System.Runtime.InteropServices.ComTypes.IEnumString,System.String,System.String)">
            <summary>Initializes the autocomplete object.</summary>
            <param name="hwndEdit">A handle to the window for the system edit control for which autocompletion will be enabled.</param>
            <param name="punkAcl">
            A pointer to the IUnknown interface of the string list object that generates candidates for the completed string. The object
            must expose an IEnumString interface.
            </param>
            <param name="pwszRegKeyPath">
            A pointer to an optional, null-terminated Unicode string that gives the registry path, including the value name, where the
            format string is stored as a REG_SZ value. The autocomplete object first looks for the path under HKEY_CURRENT_USER. If it
            fails, it tries HKEY_LOCAL_MACHINE. For a discussion of the format string, see the definition of pwszQuickComplete.
            </param>
            <param name="pwszQuickComplete">
            A pointer to an optional null-terminated Unicode string that specifies the format to be used if the user enters text and
            presses CTRL+ENTER. Set this parameter to NULL to disable quick completion. Otherwise, the autocomplete object treats
            pwszQuickComplete as a StringCchPrintf format string and the text in the edit box as its associated argument, to produce a
            new string. For example, set pwszQuickComplete to "http://www.%s.com/". When a user enters "MyURL" into the edit box and
            presses CTRL+ENTER, the text in the edit box is updated to "http://www.MyURL.com/".
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IAutoComplete2.Enable(System.Boolean)">
            <summary>Enables or disables autocompletion.</summary>
            <param name="fEnable">A value that is set to TRUE to enable autocompletion, or FALSE to disable it.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IAutoComplete2.SetOptions(Vanara.PInvoke.Shell32.AUTOCOMPLETEOPTIONS)">
            <summary>Sets the current autocomplete options.</summary>
            <param name="dwFlag">One or more flags from the AUTOCOMPLETEOPTIONS enumeration that specify autocomplete options.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IAutoComplete2.GetOptions(Vanara.PInvoke.Shell32.AUTOCOMPLETEOPTIONS@)">
            <summary>Gets the current autocomplete options.</summary>
            <param name="dwFlag">
            One or more flags from the AUTOCOMPLETEOPTIONS enumeration that indicate the options that are currently set.
            </param>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IFileSearchBand">
            <summary>Undocumented.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileSearchBand.SetFocus">
            <summary>Undocumented.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileSearchBand.SetSearchParameters(System.String@,System.Boolean,System.Object@,System.Object@)">
            <summary>Undocumented.</summary>
            <param name="pbstrSearchID"/>
            <param name="bNavToResults"/>
            <param name="pvarScope"/>
            <param name="pvarQueryFile"/>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.IFileSearchBand.SearchID">
            <summary>Undocumented.</summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.IFileSearchBand.Scope">
            <summary>Undocumented.</summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.IFileSearchBand.QueryFile">
            <summary>Undocumented.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IFolderViewOC">
            <summary>Undocumented.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFolderViewOC.SetFolderView(System.Object)">
            <summary>Undocumented.</summary>
            <param name="pdisp"/>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.INewWDEvents">
            <summary>
            Extends the <c>WebWizardHost</c> object by enabling server-side pages hosted in a wizard to verify that the user has been
            authenticated through a Microsoft account.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INewWDEvents.FinalBack">
            <summary>Navigates to the client-side page immediately preceding the page hosting the server-side HTML pages.</summary>
            <remarks>
            When the wizard displays the first server-side page and the user clicks the <c>Back</c> button, the server invokes
            <c>FinalBack</c> when notified of that event by the client's event handler.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INewWDEvents.FinalNext">
            <summary>
            Navigates to the client-side wizard page that follows the page that hosts the server-side HTML pages, or finishes the wizard
            if there are no further client-side pages.
            </summary>
            <remarks>
            When the wizard is displaying the last server-side HTML page and the user clicks the <c>Next</c> or <c>Finish</c> button, the
            server invokes <c>FinalNext</c> in that button's event handler.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INewWDEvents.Cancel">
            <summary>Simulates a <c>Cancel</c> button click.</summary>
            <remarks>The client is responsible for responding to this method with the expected behavior by closing the wizard.</remarks>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.INewWDEvents.Caption">
            <summary>This property is not implemented.</summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.INewWDEvents.Item(System.String)">
            <summary>Sets or retrieves a property's current value.</summary>
            <value>The property value.</value>
            <param name="bstrPropertyName">Name of the property.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INewWDEvents.SetWizardButtons(System.Boolean,System.Boolean,System.Boolean)">
            <summary>Updates the <c>Back</c>, <c>Next</c>, and <c>Finish</c> buttons in the client's wizard frame.</summary>
            <param name="vfEnableBack">Enables the <c>Back</c> button.</param>
            <param name="vfEnableNext">Enables the <c>Next</c> button.</param>
            <param name="vfLastPage">Enables the <c>Finish</c> button. States that this is the last server-side page.</param>
            <remarks>
            Be sure to implement handler functions in each server-side page for OnBack() and OnNext(), corresponding to the wizard
            buttons <c>Back</c> and <c>Next</c>. The OnBack() and OnNext() functions respond to <c>SetWizardButtons</c>. At the
            appropriate time, the OnNext() function calls <c>SetWizardButtons</c> with vbLastPage= <c>true</c>, which can enable a
            <c>Finish</c> button. OnNext() also calls <c>FinalNext</c> when a user clicks the <c>Finish</c> button.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INewWDEvents.SetHeaderText(System.String,System.String)">
            <summary>
            Sets the title and subtitle that appear in the wizard header. In general, the client will display the header above the HTML
            and below the title bar.
            </summary>
            <param name="bstrHeaderTitle">String containing the title.</param>
            <param name="bstrHeaderSubtitle">String containing the subtitle.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INewWDEvents.PassportAuthenticate(System.String)">
            <summary>
            Enables server-side pages hosted in a wizard to verify that the user has been authenticated through a Microsoft account.
            </summary>
            <param name="bstrSignInUrl">A string containing the URL of a webpage that redirects to the Microsoft account log on UI.</param>
            <returns>Set to <c>true</c> if authentication succeeds, <c>false</c> otherwise.</returns>
            <remarks>
            This method may be called even if a user is already logged on to a Microsoft account. In that case, the method returns
            <c>true</c> without displaying the Microsoft account log on UI.
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IShellDispatch">
            <summary>
            Represents an object in the Shell. Methods are provided to control the Shell and to execute commands within the Shell. There are
            also methods to obtain other Shell-related objects.
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.IShellDispatch.Application">
            <summary>
            <para>Contains an object that represents an application.</para>
            <para>This property is read-only.</para>
            </summary>
            <remarks>
            <para>This property is implemented and accessed through the <c>Shell.EjectPC</c> property.</para>
            <para>
            The <c>Application</c> property returns the automation object supported by the application that contains the WebBrowser
            control, if that object is accessible. Otherwise, this property returns the WebBrowser control's automation object.
            </para>
            <para>
            Use this property with the <c>Set</c> and <c>CreateObject</c> commands or with the <c>GetObject</c> command to create and
            manipulate an instance of the Windows Internet Explorer application.
            </para>
            </remarks>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.IShellDispatch.Parent">
            <summary>
            <para>Retrieves an object that represents the parent of the current object.</para>
            <para>This property is read-only.</para>
            </summary>
            <remarks>This property is implemented and accessed through the <c>Shell.Parent</c> property.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch.NameSpace(System.Object)">
            <summary>Creates and returns a <c>Folder</c> object for the specified folder.</summary>
            <param name="vDir">
            <para>Type: <c>Variant</c></para>
            <para>
            The folder for which to create the <c>Folder</c> object. This can be a string that specifies the path of the folder or one of
            the <c>ShellSpecialFolderConstants</c> values. Note that the constant names found in <c>ShellSpecialFolderConstants</c> are
            available in Visual Basic, but not in VBScript or JScript. In those cases, the numeric values must be used in their place.
            </para>
            </param>
            <returns>
            <para>JScript</para>
            <para>Type: <c><c>Folder</c>**</c></para>
            <para>
            Object reference to the <c>Folder</c> object for the specified folder. If the folder is not successfully created, this value
            returns <c>null</c>.
            </para>
            <para>VB</para>
            <para>Type: <c><c>Folder</c>**</c></para>
            <para>
            Object reference to the <c>Folder</c> object for the specified folder. If the folder is not successfully created, this value
            returns <c>null</c>.
            </para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.NameSpace</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch.BrowseForFolder(System.Int32,System.String,System.Int32,System.Object)">
            <summary>
            Creates a dialog box that enables the user to select a folder and then returns the selected folder's <c>Folder</c> object.
            </summary>
            <param name="Hwnd">
            <para>Type: <c>Integer</c></para>
            <para>The handle to the parent window of the dialog box. This value can be zero.</para>
            </param>
            <param name="Title">
            <para>Type: <c><c>BSTR</c></c></para>
            <para>A <c>String</c> value that represents the title displayed inside the <c>Browse</c> dialog box.</para>
            </param>
            <param name="Options">
            <para>Type: <c>Integer</c></para>
            <para>
            An <c>Integer</c> value that contains the options for the method. This can be zero or a combination of the values listed
            under the <c>ulFlags</c> member of the <c>BROWSEINFO</c> structure.
            </para>
            </param>
            <param name="RootFolder">
            <para>Type: <c>Variant</c></para>
            <para>
            The root folder to use in the dialog box. The user cannot browse higher in the tree than this folder. If this value is not
            specified, the root folder used in the dialog box is the desktop. This value can be a string that specifies the path of the
            folder or one of the <c>ShellSpecialFolderConstants</c> values. Note that the constant names found in
            <c>ShellSpecialFolderConstants</c> are available in Visual Basic, but not in VBScript or JScript. In those cases, the numeric
            values must be used in their place.
            </para>
            </param>
            <returns>
            <para>JScript</para>
            <para>Type: <c>FOLDER**</c></para>
            <para>An object reference to the selected folder's <c>Folder</c> object.</para>
            <para>VB</para>
            <para>Type: <c>FOLDER**</c></para>
            <para>An object reference to the selected folder's <c>Folder</c> object.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.BrowseForFolder</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch.Windows">
            <summary>
            Creates and returns a <c>ShellWindows</c> object. This object represents a collection of all of the open windows that belong
            to the Shell.
            </summary>
            <returns>
            <para>JScript</para>
            <para>Type: <c><c>IDispatch</c>**</c></para>
            <para>An object reference to the <c>ShellWindows</c> object.</para>
            <para>VB</para>
            <para>Type: <c><c>IDispatch</c>**</c></para>
            <para>An object reference to the <c>ShellWindows</c> object.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.Windows</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch.Open(System.Object)">
            <summary>Opens the specified folder.</summary>
            <param name="vDir">
            <para>Type: <c>Variant</c></para>
            <para>
            A string that specifies the path of the folder or one of the <c>ShellSpecialFolderConstants</c> values. Note that the
            constant names found in <c>ShellSpecialFolderConstants</c> are available in Visual Basic, but not in VBScript or JScript. In
            those cases, the numeric values must be used in their place.
            </para>
            <para>
            If vDir is set to one of the <c>ShellSpecialFolderConstants</c> and the special folder does not exist, this function will
            create the folder.
            </para>
            </param>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.Open</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch.Explore(System.Object)">
            <summary>Opens a specified folder in a Windows Explorer window.</summary>
            <param name="vDir">
            <para>Type: <c>Variant</c></para>
            <para>
            The folder to be displayed. This can be a string that specifies the path of the folder or one of the
            <c>ShellSpecialFolderConstants</c> values. Note that the constant names found in <c>ShellSpecialFolderConstants</c> are
            available in Visual Basic, but not in VBScript or JScript. In those cases, the numeric values must be used in their place.
            </para>
            </param>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.Explore</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch.MinimizeAll">
            <summary>
            Minimizes all of the windows on the desktop. This method has the same effect as right-clicking the taskbar and selecting
            <c>Minimize All Windows</c> on older systems or clicking the <c>Show Desktop</c> icon on the taskbar.
            </summary>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.MinimizeAll</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch.UndoMinimizeALL">
            <summary>
            Restores all desktop windows to the state they were in before the last <c>MinimizeAll</c> command. This method has the same
            effect as right-clicking the taskbar and selecting <c>Undo Minimize All Windows</c> (on older systems) or a second clicking
            of the <c>Show Desktop</c> icon in the taskbar.
            </summary>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.UndoMinimizeAll</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch.FileRun">
            <summary>Displays the <c>Run</c> dialog to the user.</summary>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.FileRun</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch.CascadeWindows">
            <summary>
            Cascades all of the windows on the desktop. This method has the same effect as right-clicking the taskbar and selecting
            <c>Cascade windows</c>.
            </summary>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.CascadeWindows</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch.TileVertically">
            <summary>
            Tiles all of the windows on the desktop vertically. This method has the same effect as right-clicking the taskbar and
            selecting <c>Show windows side by side</c>.
            </summary>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.TileVertically</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch.TileHorizontally">
            <summary>
            Tiles all of the windows on the desktop horizontally. This method has the same effect as right-clicking the taskbar and
            selecting <c>Show windows stacked</c>.
            </summary>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.TileHorizontally</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch.ShutdownWindows">
            <summary>
            Displays the <c>Shut Down Windows</c> dialog box. This is the same as clicking the <c>Start</c> menu and selecting <c>Shut Down</c>.
            </summary>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.ShutdownWindows</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch.Suspend">
            <summary>This method is not implemented.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch.EjectPC">
            <summary>
            Ejects the computer from its docking station. This is the same as clicking the <c>Start</c> menu and selecting <c>Eject
            PC</c>, if your computer supports this command.
            </summary>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.EjectPC</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch.SetTime">
            <summary>
            Displays the <c>Date and Time</c> dialog box. This method has the same effect as right-clicking the clock in the taskbar
            status area and selecting <c>Adjust date/time</c>.
            </summary>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.SetTime</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch.TrayProperties">
            <summary>
            Displays the <c>Taskbar and Start Menu Properties</c> dialog box. This method has the same effect as right-clicking the
            taskbar and selecting <c>Properties</c>.
            </summary>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.TrayProperties</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch.Help">
            <summary>
            Displays the Windows Help and Support window. This method has the same effect as clicking the <c>Start</c> menu and selecting
            <c>Help and Support</c>.
            </summary>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.Help</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch.FindFiles">
            <summary>
            Displays the <c>Find: All Files</c> dialog box. This is the same as clicking the <c>Start</c> menu and then selecting <c>Search</c>.
            </summary>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.FindFiles</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch.FindComputer">
            <summary>
            Displays the <c>Search Results: Computers</c> dialog box. The dialog box shows the result of the search for a specified computer.
            </summary>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.FindComputer</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch.RefreshMenu">
            <summary>Refreshes the contents of the <c>Start</c> menu. Used only with systems preceding Windows XP.</summary>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>
            <para>This method is implemented and accessed through the <c>Shell.TrayProperties</c> method.</para>
            <para>
            The functionality that <c>RefreshMenu</c> provides is handled automatically under Windows XP or later. Do not call this
            method on Windows XP or later.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch.ControlPanelItem(System.String)">
            <summary>
            Runs the specified Control Panel application. If the application is already open, it will activate the running instance.
            </summary>
            <param name="bstrDir">
            <para>Type: <c><c>BSTR</c></c></para>
            <para>The Control Panel application's file name.</para>
            </param>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.ControlPanelItem</c> method.</remarks>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IShellDispatch2">
            <summary>Extends the <c>IShellDispatch</c> object with a variety of new functionality.</summary>
            <remarks>For a discussion of Windows services, see the Services documentation.</remarks>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.IShellDispatch2.Application">
            <summary>
            <para>Contains an object that represents an application.</para>
            <para>This property is read-only.</para>
            </summary>
            <remarks>
            <para>This property is implemented and accessed through the <c>Shell.EjectPC</c> property.</para>
            <para>
            The <c>Application</c> property returns the automation object supported by the application that contains the WebBrowser
            control, if that object is accessible. Otherwise, this property returns the WebBrowser control's automation object.
            </para>
            <para>
            Use this property with the <c>Set</c> and <c>CreateObject</c> commands or with the <c>GetObject</c> command to create and
            manipulate an instance of the Windows Internet Explorer application.
            </para>
            </remarks>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.IShellDispatch2.Parent">
            <summary>
            <para>Retrieves an object that represents the parent of the current object.</para>
            <para>This property is read-only.</para>
            </summary>
            <remarks>This property is implemented and accessed through the <c>Shell.Parent</c> property.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch2.NameSpace(System.Object)">
            <summary>Creates and returns a <c>Folder</c> object for the specified folder.</summary>
            <param name="vDir">
            <para>Type: <c>Variant</c></para>
            <para>
            The folder for which to create the <c>Folder</c> object. This can be a string that specifies the path of the folder or one of
            the <c>ShellSpecialFolderConstants</c> values. Note that the constant names found in <c>ShellSpecialFolderConstants</c> are
            available in Visual Basic, but not in VBScript or JScript. In those cases, the numeric values must be used in their place.
            </para>
            </param>
            <returns>
            <para>JScript</para>
            <para>Type: <c><c>Folder</c>**</c></para>
            <para>
            Object reference to the <c>Folder</c> object for the specified folder. If the folder is not successfully created, this value
            returns <c>null</c>.
            </para>
            <para>VB</para>
            <para>Type: <c><c>Folder</c>**</c></para>
            <para>
            Object reference to the <c>Folder</c> object for the specified folder. If the folder is not successfully created, this value
            returns <c>null</c>.
            </para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.NameSpace</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch2.BrowseForFolder(System.Int32,System.String,System.Int32,System.Object)">
            <summary>
            Creates a dialog box that enables the user to select a folder and then returns the selected folder's <c>Folder</c> object.
            </summary>
            <param name="Hwnd">
            <para>Type: <c>Integer</c></para>
            <para>The handle to the parent window of the dialog box. This value can be zero.</para>
            </param>
            <param name="Title">
            <para>Type: <c><c>BSTR</c></c></para>
            <para>A <c>String</c> value that represents the title displayed inside the <c>Browse</c> dialog box.</para>
            </param>
            <param name="Options">
            <para>Type: <c>Integer</c></para>
            <para>
            An <c>Integer</c> value that contains the options for the method. This can be zero or a combination of the values listed
            under the <c>ulFlags</c> member of the <c>BROWSEINFO</c> structure.
            </para>
            </param>
            <param name="RootFolder">
            <para>Type: <c>Variant</c></para>
            <para>
            The root folder to use in the dialog box. The user cannot browse higher in the tree than this folder. If this value is not
            specified, the root folder used in the dialog box is the desktop. This value can be a string that specifies the path of the
            folder or one of the <c>ShellSpecialFolderConstants</c> values. Note that the constant names found in
            <c>ShellSpecialFolderConstants</c> are available in Visual Basic, but not in VBScript or JScript. In those cases, the numeric
            values must be used in their place.
            </para>
            </param>
            <returns>
            <para>JScript</para>
            <para>Type: <c>FOLDER**</c></para>
            <para>An object reference to the selected folder's <c>Folder</c> object.</para>
            <para>VB</para>
            <para>Type: <c>FOLDER**</c></para>
            <para>An object reference to the selected folder's <c>Folder</c> object.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.BrowseForFolder</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch2.Windows">
            <summary>
            Creates and returns a <c>ShellWindows</c> object. This object represents a collection of all of the open windows that belong
            to the Shell.
            </summary>
            <returns>
            <para>JScript</para>
            <para>Type: <c><c>IDispatch</c>**</c></para>
            <para>An object reference to the <c>ShellWindows</c> object.</para>
            <para>VB</para>
            <para>Type: <c><c>IDispatch</c>**</c></para>
            <para>An object reference to the <c>ShellWindows</c> object.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.Windows</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch2.Open(System.Object)">
            <summary>Opens the specified folder.</summary>
            <param name="vDir">
            <para>Type: <c>Variant</c></para>
            <para>
            A string that specifies the path of the folder or one of the <c>ShellSpecialFolderConstants</c> values. Note that the
            constant names found in <c>ShellSpecialFolderConstants</c> are available in Visual Basic, but not in VBScript or JScript. In
            those cases, the numeric values must be used in their place.
            </para>
            <para>
            If vDir is set to one of the <c>ShellSpecialFolderConstants</c> and the special folder does not exist, this function will
            create the folder.
            </para>
            </param>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.Open</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch2.Explore(System.Object)">
            <summary>Opens a specified folder in a Windows Explorer window.</summary>
            <param name="vDir">
            <para>Type: <c>Variant</c></para>
            <para>
            The folder to be displayed. This can be a string that specifies the path of the folder or one of the
            <c>ShellSpecialFolderConstants</c> values. Note that the constant names found in <c>ShellSpecialFolderConstants</c> are
            available in Visual Basic, but not in VBScript or JScript. In those cases, the numeric values must be used in their place.
            </para>
            </param>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.Explore</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch2.MinimizeAll">
            <summary>
            Minimizes all of the windows on the desktop. This method has the same effect as right-clicking the taskbar and selecting
            <c>Minimize All Windows</c> on older systems or clicking the <c>Show Desktop</c> icon on the taskbar.
            </summary>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.MinimizeAll</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch2.UndoMinimizeALL">
            <summary>
            Restores all desktop windows to the state they were in before the last <c>MinimizeAll</c> command. This method has the same
            effect as right-clicking the taskbar and selecting <c>Undo Minimize All Windows</c> (on older systems) or a second clicking
            of the <c>Show Desktop</c> icon in the taskbar.
            </summary>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.UndoMinimizeAll</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch2.FileRun">
            <summary>Displays the <c>Run</c> dialog to the user.</summary>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.FileRun</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch2.CascadeWindows">
            <summary>
            Cascades all of the windows on the desktop. This method has the same effect as right-clicking the taskbar and selecting
            <c>Cascade windows</c>.
            </summary>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.CascadeWindows</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch2.TileVertically">
            <summary>
            Tiles all of the windows on the desktop vertically. This method has the same effect as right-clicking the taskbar and
            selecting <c>Show windows side by side</c>.
            </summary>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.TileVertically</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch2.TileHorizontally">
            <summary>
            Tiles all of the windows on the desktop horizontally. This method has the same effect as right-clicking the taskbar and
            selecting <c>Show windows stacked</c>.
            </summary>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.TileHorizontally</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch2.ShutdownWindows">
            <summary>
            Displays the <c>Shut Down Windows</c> dialog box. This is the same as clicking the <c>Start</c> menu and selecting <c>Shut Down</c>.
            </summary>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.ShutdownWindows</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch2.Suspend">
            <summary>This method is not implemented.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch2.EjectPC">
            <summary>
            Ejects the computer from its docking station. This is the same as clicking the <c>Start</c> menu and selecting <c>Eject
            PC</c>, if your computer supports this command.
            </summary>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.EjectPC</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch2.SetTime">
            <summary>
            Displays the <c>Date and Time</c> dialog box. This method has the same effect as right-clicking the clock in the taskbar
            status area and selecting <c>Adjust date/time</c>.
            </summary>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.SetTime</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch2.TrayProperties">
            <summary>
            Displays the <c>Taskbar and Start Menu Properties</c> dialog box. This method has the same effect as right-clicking the
            taskbar and selecting <c>Properties</c>.
            </summary>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.TrayProperties</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch2.Help">
            <summary>
            Displays the Windows Help and Support window. This method has the same effect as clicking the <c>Start</c> menu and selecting
            <c>Help and Support</c>.
            </summary>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.Help</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch2.FindFiles">
            <summary>
            Displays the <c>Find: All Files</c> dialog box. This is the same as clicking the <c>Start</c> menu and then selecting <c>Search</c>.
            </summary>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.FindFiles</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch2.FindComputer">
            <summary>
            Displays the <c>Search Results: Computers</c> dialog box. The dialog box shows the result of the search for a specified computer.
            </summary>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.FindComputer</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch2.RefreshMenu">
            <summary>Refreshes the contents of the <c>Start</c> menu. Used only with systems preceding Windows XP.</summary>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>
            <para>This method is implemented and accessed through the <c>Shell.TrayProperties</c> method.</para>
            <para>
            The functionality that <c>RefreshMenu</c> provides is handled automatically under Windows XP or later. Do not call this
            method on Windows XP or later.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch2.ControlPanelItem(System.String)">
            <summary>
            Runs the specified Control Panel application. If the application is already open, it will activate the running instance.
            </summary>
            <param name="bstrDir">
            <para>Type: <c><c>BSTR</c></c></para>
            <para>The Control Panel application's file name.</para>
            </param>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.ControlPanelItem</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch2.IsRestricted(System.String,System.String)">
            <summary>Retrieves a group's restriction setting from the registry.</summary>
            <param name="sGroup">
            <para>Type: <c><c>BSTR</c></c></para>
            <para>
            A <c>String</c> that contains the group name. This value is the name of a registry subkey under which to check for the restriction.
            </para>
            </param>
            <param name="sRestriction">
            <para>Type: <c><c>BSTR</c></c></para>
            <para>A <c>String</c> that contains the restriction whose value is to be retrieved.</para>
            </param>
            <returns>
            <para>JScript</para>
            <para>Type: <c>Integer*</c></para>
            <para>The value of the restriction. If the specified restriction is not found, the return value is 0.</para>
            <para>VB</para>
            <para>Type: <c>Integer*</c></para>
            <para>The value of the restriction. If the specified restriction is not found, the return value is 0.</para>
            </returns>
            <remarks>
            <para>This method is implemented and accessed through the <c>Shell.IsRestricted</c> method.</para>
            <para><c>IsRestricted</c> first looks for a subkey name that matches sGroup under the following key.</para>
            <para>
            Restrictions are declared as values of the individual policy subkeys. If the restriction named in sRestriction is found in
            the subkey named in sGroup, <c>IsRestricted</c> returns the restriction's current value. If the restriction is not found
            under <c>HKEY_LOCAL_MACHINE</c>, the same subkey is checked under <c>HKEY_CURRENT_USER</c>.
            </para>
            <para>This method is not currently available in Microsoft Visual Basic.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch2.ShellExecute(System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>Performs a specified operation on a specified file.</summary>
            <param name="sFile">
            <para>Type: <c><c>BSTR</c></c></para>
            <para>
            A <c>String</c> that contains the name of the file on which <c>ShellExecute</c> will perform the action specified by vOperation.
            </para>
            </param>
            <param name="vArguments">
            <para>Type: <c>Variant</c></para>
            <para>A string that contains parameter values for the operation.</para>
            </param>
            <param name="vDirectory">
            <para>Type: <c>Variant</c></para>
            <para>
            The fully qualified path of the directory that contains the file specified by sFile. If this parameter is not specified, the
            current working directory is used.
            </para>
            </param>
            <param name="vOperation">
            <para>Type: <c>Variant</c></para>
            <para>
            The operation to be performed. This value is set to one of the verb strings that is supported by the file. For a discussion
            of verbs, see the Remarks section. If this parameter is not specified, the default operation is performed.
            </para>
            </param>
            <param name="vShow">
            <para>Type: <c>Variant</c></para>
            <para>
            A recommendation as to how the application window should be displayed initially. The application can ignore this
            recommendation. This parameter can be one of the following values. If this parameter is not specified, the application uses
            its default value.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>0</term>
            <term>Open the application with a hidden window.</term>
            </item>
            <item>
            <term>1</term>
            <term>
            Open the application with a normal window. If the window is minimized or maximized, the system restores it to its original
            size and position.
            </term>
            </item>
            <item>
            <term>2</term>
            <term>Open the application with a minimized window.</term>
            </item>
            <item>
            <term>3</term>
            <term>Open the application with a maximized window.</term>
            </item>
            <item>
            <term>4</term>
            <term>Open the application with its window at its most recent size and position. The active window remains active.</term>
            </item>
            <item>
            <term>5</term>
            <term>Open the application with its window at its current size and position.</term>
            </item>
            <item>
            <term>7</term>
            <term>Open the application with a minimized window. The active window remains active.</term>
            </item>
            <item>
            <term>10</term>
            <term>Open the application with its window in the default state specified by the application.</term>
            </item>
            </list>
            </param>
            <remarks>
            <para>This method is implemented and accessed through the <c>Shell.ShellExecute</c> method.</para>
            <para>
            This method is equivalent to launching one of the commands associated with a file's shortcut menu. Each command is
            represented by a verb string. The set of supported verbs varies from file to file. The most commonly supported verb is
            "open", which is also usually the default verb. Other verbs might be supported by only certain types of files. For further
            discussion of Shell verbs, see Launching Applications or Extending Shortcut Menus.
            </para>
            <para>This method is not currently available in Microsoft Visual Basic.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch2.FindPrinter(System.String,System.String,System.String)">
            <summary>Displays the <c>Find Printer</c> dialog box.</summary>
            <param name="Name">
            <para>Type: <c><c>BSTR</c></c></para>
            <para>A <c>String</c> that contains the printer name.</para>
            </param>
            <param name="location">
            <para>Type: <c><c>BSTR</c></c></para>
            <para>A <c>String</c> that contains the printer location.</para>
            </param>
            <param name="model">
            <para>Type: <c><c>BSTR</c></c></para>
            <para>A <c>String</c> that contains the printer model.</para>
            </param>
            <remarks>
            <para>This method is implemented and accessed through the <c>Shell.FindPrinter</c> method.</para>
            <para>
            If you assign strings to one or more of the optional parameters, they are displayed as default values in the associated edit
            control when the <c>Find Printer</c> dialog box is displayed. The user can either accept or override these values. If no
            value is assigned to a parameter, the associated edit box is empty and the user must enter a value.
            </para>
            <para>This method is not currently available in Microsoft Visual Basic.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch2.GetSystemInformation(System.String)">
            <summary>Retrieves system information.</summary>
            <param name="sName">
            <para>Type: <c><c>BSTR</c></c></para>
            <para>A <c>String</c> that specifies the system information that is being requested.</para>
            </param>
            <returns>
            <para>JScript</para>
            <para>Type: <c>Variant</c></para>
            <para>
            Returns the value of the requested system information. The return type depends on which system information is requested. See
            the Remarks section for details.
            </para>
            <para>VB</para>
            <para>Type: <c>Variant</c></para>
            <para>
            Returns the value of the requested system information. The return type depends on which system information is requested. See
            the Remarks section for details.
            </para>
            </returns>
            <remarks>
            <para>This method is implemented and accessed through the <c>Shell.GetSystemInformation</c> method.</para>
            <para>
            This method can be used to request many system information values. The following table gives the sName value that is used to
            request the information and the associated type of the returned value.
            </para>
            <para>sName</para>
            <para>Return type</para>
            <para>Description</para>
            <para>DirectoryServiceAvailable</para>
            <para><c>Boolean</c></para>
            <para>Set to <c>true</c> if the directory service is available; otherwise, <c>false</c>.</para>
            <para>DoubleClickTime</para>
            <para><c>Integer</c></para>
            <para>The double-click time, in milliseconds.</para>
            <para>ProcessorLevel</para>
            <para><c>Integer</c></para>
            <para>
            <c>Windows Vista and later</c>. The processor level. Returns 3, 4, or 5, for x386, x486, and Pentium-level processors, respectively.
            </para>
            <para>ProcessorSpeed</para>
            <para><c>Integer</c></para>
            <para>The processor speed, in megahertz (MHz).</para>
            <para>ProcessorArchitecture</para>
            <para><c>Integer</c></para>
            <para>
            The processor architecture. For details, see the discussion of the <c>wProcessorArchitecture</c> member of the
            <c>SYSTEM_INFO</c> structure.
            </para>
            <para>PhysicalMemoryInstalled</para>
            <para><c>Integer</c></para>
            <para>The amount of physical memory installed, in bytes.</para>
            <para>The following are valid only on Windows XP.</para>
            <para>IsOS_Professional</para>
            <para><c>Boolean</c></para>
            <para>Set to <c>true</c> if the operating system is Windows XP Professional Edition; otherwise, <c>false</c>.</para>
            <para>IsOS_Personal</para>
            <para><c>Boolean</c></para>
            <para>Set to <c>true</c> if the operating system is Windows XP Home Edition; otherwise, <c>false</c>.</para>
            <para>The following is valid only on Windows XP and later.</para>
            <para>IsOS_DomainMember</para>
            <para><c>Boolean</c></para>
            <para>Set to <c>true</c> if the computer is a member of a domain; otherwise, <c>false</c>.</para>
            <para>This method is not currently available in Microsoft Visual Basic.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch2.ServiceStart(System.String,System.Object)">
            <summary>Starts a named service.</summary>
            <param name="sServiceName">
            <para>Type: <c><c>BSTR</c></c></para>
            <para>A <c>String</c> that contains the name of the service.</para>
            </param>
            <param name="vPersistent">
            <para>Type: <c>Variant</c></para>
            <para>
            Set to <c>true</c> to have the service started automatically by the service control manager during system startup. Set to
            <c>false</c> to leave the service configuration unchanged.
            </para>
            </param>
            <returns>
            <para>JScript</para>
            <para>Type: <c>Variant*</c></para>
            <para>Returns <c>true</c> if successful; otherwise, <c>false</c>.</para>
            <para>VB</para>
            <para>Type: <c>Variant*</c></para>
            <para>Returns <c>true</c> if successful; otherwise, <c>false</c>.</para>
            </returns>
            <remarks>
            <para>This method is implemented and accessed through the <c>Shell.ServiceStart</c> method.</para>
            <para>
            The method returns <c>false</c> if the service has already been started. Before calling this method, you can call
            <c>Shell.IsServiceRunning</c> to ascertain the status of the service.
            </para>
            <para>This method is not currently available in Microsoft Visual Basic.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch2.ServiceStop(System.String,System.Object)">
            <summary>Stops a named service.</summary>
            <param name="sServiceName">
            <para>Type: <c><c>BSTR</c></c></para>
            <para>A <c>String</c> that contains the name of the service.</para>
            </param>
            <param name="vPersistent">
            <para>Type: <c>Variant</c></para>
            <para>
            Set to <c>true</c> to have the service started by the service control manager when <c>ServiceStart</c> is called. To leave
            the service configuration unchanged, set vPersistent to <c>false</c>.
            </para>
            </param>
            <returns>
            <para>JScript</para>
            <para>Type: <c>Variant*</c></para>
            <para>Returns <c>true</c> if successful; otherwise, <c>false</c>.</para>
            <para>VB</para>
            <para>Type: <c>Variant*</c></para>
            <para>Returns <c>true</c> if successful; otherwise, <c>false</c>.</para>
            </returns>
            <remarks>
            <para>This method is implemented and accessed through the <c>Shell.ServiceStop</c> method.</para>
            <para>
            The method returns <c>false</c> if the service has already been stopped. Before calling this method, you can call
            <c>Shell.IsServiceRunning</c> to ascertain the status of the service.
            </para>
            <para>This method is not currently available in Microsoft Visual Basic.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch2.IsServiceRunning(System.String)">
            <summary>Returns a value that indicates whether a particular service is running.</summary>
            <param name="sServiceName">
            <para>Type: <c><c>BSTR</c></c></para>
            <para>A <c>String</c> that contains the name of the service.</para>
            </param>
            <returns>
            <para>JScript</para>
            <para>Type: <c>Variant*</c></para>
            <para>Returns <c>true</c> if the service specified by sServiceName is running; otherwise, <c>false</c>.</para>
            <para>VB</para>
            <para>Type: <c>Variant*</c></para>
            <para>Returns <c>true</c> if the service specified by sServiceName is running; otherwise, <c>false</c>.</para>
            </returns>
            <remarks>
            <para>This method is implemented and accessed through the <c>Shell.IsServiceRunning</c> method.</para>
            <para>This method is not currently available in Microsoft Visual Basic.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch2.CanStartStopService(System.String)">
            <summary>Determines if the current user can start and stop the named service.</summary>
            <param name="sServiceName">
            <para>Type: <c>String</c></para>
            <para>A <c>String</c> that contains the name of the service.</para>
            </param>
            <returns>
            <para>JScript</para>
            <para>Type: <c>Variant*</c></para>
            <para>Returns <c>true</c> if the user can start and stop the service; otherwise, <c>false</c>.</para>
            <para>VB</para>
            <para>Type: <c>Variant*</c></para>
            <para>Returns <c>true</c> if the user can start and stop the service; otherwise, <c>false</c>.</para>
            </returns>
            <remarks>
            <para>This method is implemented and accessed through the <c>Shell.CanStartStopService</c> method.</para>
            <para>This method is not currently available in Microsoft Visual Basic.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch2.ShowBrowserBar(System.String,System.Object)">
            <summary>Displays a browser bar.</summary>
            <param name="sCLSID">
            <para>Type: <c><c>BSTR</c></c></para>
            <para>
            A <c>String</c> that contains the string form of the CLSID of the browser bar to be displayed. The object must be registered
            as an Explorer Bar object with a CATID_InfoBand component category. For further information, see Creating Custom Explorer
            Bars, Tool Bands, and Desk Bands.
            </para>
            </param>
            <param name="vShow">
            <para>Type: <c>Variant</c></para>
            <para>Set to <c>true</c> to show the browser bar or <c>false</c> to hide it.</para>
            </param>
            <returns>
            <para>JScript</para>
            <para>Type: <c>Variant*</c></para>
            <para>Returns <c>true</c> if successful; otherwise, <c>false</c>.</para>
            <para>VB</para>
            <para>Type: <c>Variant*</c></para>
            <para>Returns <c>true</c> if successful; otherwise, <c>false</c>.</para>
            </returns>
            <remarks>
            <para>This method is implemented and accessed through the <c>Shell.ShowBrowserBar</c> method.</para>
            <para>
            You can display one of the standard Explorer Bars by setting the sCLSID parameter to the CLSID of that Explorer Bar. The
            standard Explorer Bars and their CLSID strings are as follows:
            </para>
            <list type="table">
            <listheader>
            <term>Explorer Bar</term>
            <term>CLSID string</term>
            </listheader>
            <item>
            <term>Favorites</term>
            <term>{EFA24E61-B078-11d0-89E4-00C04FC9E26E}</term>
            </item>
            <item>
            <term>Folders</term>
            <term>{EFA24E64-B078-11d0-89E4-00C04FC9E26E}</term>
            </item>
            <item>
            <term>History</term>
            <term>{EFA24E62-B078-11d0-89E4-00C04FC9E26E}</term>
            </item>
            <item>
            <term>Search</term>
            <term>{30D02401-6A81-11d0-8274-00C04FD5AE38}</term>
            </item>
            </list>
            <para>This method is not currently available in Microsoft Visual Basic.</para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IShellDispatch3">
            <summary>
            Extends the <c>IShellDispatch2</c> object. <c>IShellDispatch3</c> supports one new method in addition to the properties and
            methods supported by <c>IShellDispatch2</c>.
            </summary>
            <remarks>For a discussion of Windows services, see the Services documentation.</remarks>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.IShellDispatch3.Application">
            <summary>
            <para>Contains an object that represents an application.</para>
            <para>This property is read-only.</para>
            </summary>
            <remarks>
            <para>This property is implemented and accessed through the <c>Shell.EjectPC</c> property.</para>
            <para>
            The <c>Application</c> property returns the automation object supported by the application that contains the WebBrowser
            control, if that object is accessible. Otherwise, this property returns the WebBrowser control's automation object.
            </para>
            <para>
            Use this property with the <c>Set</c> and <c>CreateObject</c> commands or with the <c>GetObject</c> command to create and
            manipulate an instance of the Windows Internet Explorer application.
            </para>
            </remarks>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.IShellDispatch3.Parent">
            <summary>
            <para>Retrieves an object that represents the parent of the current object.</para>
            <para>This property is read-only.</para>
            </summary>
            <remarks>This property is implemented and accessed through the <c>Shell.Parent</c> property.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch3.NameSpace(System.Object)">
            <summary>Creates and returns a <c>Folder</c> object for the specified folder.</summary>
            <param name="vDir">
            <para>Type: <c>Variant</c></para>
            <para>
            The folder for which to create the <c>Folder</c> object. This can be a string that specifies the path of the folder or one of
            the <c>ShellSpecialFolderConstants</c> values. Note that the constant names found in <c>ShellSpecialFolderConstants</c> are
            available in Visual Basic, but not in VBScript or JScript. In those cases, the numeric values must be used in their place.
            </para>
            </param>
            <returns>
            <para>JScript</para>
            <para>Type: <c><c>Folder</c>**</c></para>
            <para>
            Object reference to the <c>Folder</c> object for the specified folder. If the folder is not successfully created, this value
            returns <c>null</c>.
            </para>
            <para>VB</para>
            <para>Type: <c><c>Folder</c>**</c></para>
            <para>
            Object reference to the <c>Folder</c> object for the specified folder. If the folder is not successfully created, this value
            returns <c>null</c>.
            </para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.NameSpace</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch3.BrowseForFolder(System.Int32,System.String,System.Int32,System.Object)">
            <summary>
            Creates a dialog box that enables the user to select a folder and then returns the selected folder's <c>Folder</c> object.
            </summary>
            <param name="Hwnd">
            <para>Type: <c>Integer</c></para>
            <para>The handle to the parent window of the dialog box. This value can be zero.</para>
            </param>
            <param name="Title">
            <para>Type: <c><c>BSTR</c></c></para>
            <para>A <c>String</c> value that represents the title displayed inside the <c>Browse</c> dialog box.</para>
            </param>
            <param name="Options">
            <para>Type: <c>Integer</c></para>
            <para>
            An <c>Integer</c> value that contains the options for the method. This can be zero or a combination of the values listed
            under the <c>ulFlags</c> member of the <c>BROWSEINFO</c> structure.
            </para>
            </param>
            <param name="RootFolder">
            <para>Type: <c>Variant</c></para>
            <para>
            The root folder to use in the dialog box. The user cannot browse higher in the tree than this folder. If this value is not
            specified, the root folder used in the dialog box is the desktop. This value can be a string that specifies the path of the
            folder or one of the <c>ShellSpecialFolderConstants</c> values. Note that the constant names found in
            <c>ShellSpecialFolderConstants</c> are available in Visual Basic, but not in VBScript or JScript. In those cases, the numeric
            values must be used in their place.
            </para>
            </param>
            <returns>
            <para>JScript</para>
            <para>Type: <c>FOLDER**</c></para>
            <para>An object reference to the selected folder's <c>Folder</c> object.</para>
            <para>VB</para>
            <para>Type: <c>FOLDER**</c></para>
            <para>An object reference to the selected folder's <c>Folder</c> object.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.BrowseForFolder</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch3.Windows">
            <summary>
            Creates and returns a <c>ShellWindows</c> object. This object represents a collection of all of the open windows that belong
            to the Shell.
            </summary>
            <returns>
            <para>JScript</para>
            <para>Type: <c><c>IDispatch</c>**</c></para>
            <para>An object reference to the <c>ShellWindows</c> object.</para>
            <para>VB</para>
            <para>Type: <c><c>IDispatch</c>**</c></para>
            <para>An object reference to the <c>ShellWindows</c> object.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.Windows</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch3.Open(System.Object)">
            <summary>Opens the specified folder.</summary>
            <param name="vDir">
            <para>Type: <c>Variant</c></para>
            <para>
            A string that specifies the path of the folder or one of the <c>ShellSpecialFolderConstants</c> values. Note that the
            constant names found in <c>ShellSpecialFolderConstants</c> are available in Visual Basic, but not in VBScript or JScript. In
            those cases, the numeric values must be used in their place.
            </para>
            <para>
            If vDir is set to one of the <c>ShellSpecialFolderConstants</c> and the special folder does not exist, this function will
            create the folder.
            </para>
            </param>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.Open</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch3.Explore(System.Object)">
            <summary>Opens a specified folder in a Windows Explorer window.</summary>
            <param name="vDir">
            <para>Type: <c>Variant</c></para>
            <para>
            The folder to be displayed. This can be a string that specifies the path of the folder or one of the
            <c>ShellSpecialFolderConstants</c> values. Note that the constant names found in <c>ShellSpecialFolderConstants</c> are
            available in Visual Basic, but not in VBScript or JScript. In those cases, the numeric values must be used in their place.
            </para>
            </param>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.Explore</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch3.MinimizeAll">
            <summary>
            Minimizes all of the windows on the desktop. This method has the same effect as right-clicking the taskbar and selecting
            <c>Minimize All Windows</c> on older systems or clicking the <c>Show Desktop</c> icon on the taskbar.
            </summary>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.MinimizeAll</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch3.UndoMinimizeALL">
            <summary>
            Restores all desktop windows to the state they were in before the last <c>MinimizeAll</c> command. This method has the same
            effect as right-clicking the taskbar and selecting <c>Undo Minimize All Windows</c> (on older systems) or a second clicking
            of the <c>Show Desktop</c> icon in the taskbar.
            </summary>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.UndoMinimizeAll</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch3.FileRun">
            <summary>Displays the <c>Run</c> dialog to the user.</summary>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.FileRun</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch3.CascadeWindows">
            <summary>
            Cascades all of the windows on the desktop. This method has the same effect as right-clicking the taskbar and selecting
            <c>Cascade windows</c>.
            </summary>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.CascadeWindows</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch3.TileVertically">
            <summary>
            Tiles all of the windows on the desktop vertically. This method has the same effect as right-clicking the taskbar and
            selecting <c>Show windows side by side</c>.
            </summary>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.TileVertically</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch3.TileHorizontally">
            <summary>
            Tiles all of the windows on the desktop horizontally. This method has the same effect as right-clicking the taskbar and
            selecting <c>Show windows stacked</c>.
            </summary>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.TileHorizontally</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch3.ShutdownWindows">
            <summary>
            Displays the <c>Shut Down Windows</c> dialog box. This is the same as clicking the <c>Start</c> menu and selecting <c>Shut Down</c>.
            </summary>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.ShutdownWindows</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch3.Suspend">
            <summary>This method is not implemented.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch3.EjectPC">
            <summary>
            Ejects the computer from its docking station. This is the same as clicking the <c>Start</c> menu and selecting <c>Eject
            PC</c>, if your computer supports this command.
            </summary>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.EjectPC</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch3.SetTime">
            <summary>
            Displays the <c>Date and Time</c> dialog box. This method has the same effect as right-clicking the clock in the taskbar
            status area and selecting <c>Adjust date/time</c>.
            </summary>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.SetTime</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch3.TrayProperties">
            <summary>
            Displays the <c>Taskbar and Start Menu Properties</c> dialog box. This method has the same effect as right-clicking the
            taskbar and selecting <c>Properties</c>.
            </summary>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.TrayProperties</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch3.Help">
            <summary>
            Displays the Windows Help and Support window. This method has the same effect as clicking the <c>Start</c> menu and selecting
            <c>Help and Support</c>.
            </summary>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.Help</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch3.FindFiles">
            <summary>
            Displays the <c>Find: All Files</c> dialog box. This is the same as clicking the <c>Start</c> menu and then selecting <c>Search</c>.
            </summary>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.FindFiles</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch3.FindComputer">
            <summary>
            Displays the <c>Search Results: Computers</c> dialog box. The dialog box shows the result of the search for a specified computer.
            </summary>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.FindComputer</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch3.RefreshMenu">
            <summary>Refreshes the contents of the <c>Start</c> menu. Used only with systems preceding Windows XP.</summary>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>
            <para>This method is implemented and accessed through the <c>Shell.TrayProperties</c> method.</para>
            <para>
            The functionality that <c>RefreshMenu</c> provides is handled automatically under Windows XP or later. Do not call this
            method on Windows XP or later.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch3.ControlPanelItem(System.String)">
            <summary>
            Runs the specified Control Panel application. If the application is already open, it will activate the running instance.
            </summary>
            <param name="bstrDir">
            <para>Type: <c><c>BSTR</c></c></para>
            <para>The Control Panel application's file name.</para>
            </param>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.ControlPanelItem</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch3.IsRestricted(System.String,System.String)">
            <summary>Retrieves a group's restriction setting from the registry.</summary>
            <param name="sGroup">
            <para>Type: <c><c>BSTR</c></c></para>
            <para>
            A <c>String</c> that contains the group name. This value is the name of a registry subkey under which to check for the restriction.
            </para>
            </param>
            <param name="sRestriction">
            <para>Type: <c><c>BSTR</c></c></para>
            <para>A <c>String</c> that contains the restriction whose value is to be retrieved.</para>
            </param>
            <returns>
            <para>JScript</para>
            <para>Type: <c>Integer*</c></para>
            <para>The value of the restriction. If the specified restriction is not found, the return value is 0.</para>
            <para>VB</para>
            <para>Type: <c>Integer*</c></para>
            <para>The value of the restriction. If the specified restriction is not found, the return value is 0.</para>
            </returns>
            <remarks>
            <para>This method is implemented and accessed through the <c>Shell.IsRestricted</c> method.</para>
            <para><c>IsRestricted</c> first looks for a subkey name that matches sGroup under the following key.</para>
            <para>
            Restrictions are declared as values of the individual policy subkeys. If the restriction named in sRestriction is found in
            the subkey named in sGroup, <c>IsRestricted</c> returns the restriction's current value. If the restriction is not found
            under <c>HKEY_LOCAL_MACHINE</c>, the same subkey is checked under <c>HKEY_CURRENT_USER</c>.
            </para>
            <para>This method is not currently available in Microsoft Visual Basic.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch3.ShellExecute(System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>Performs a specified operation on a specified file.</summary>
            <param name="sFile">
            <para>Type: <c><c>BSTR</c></c></para>
            <para>
            A <c>String</c> that contains the name of the file on which <c>ShellExecute</c> will perform the action specified by vOperation.
            </para>
            </param>
            <param name="vArguments">
            <para>Type: <c>Variant</c></para>
            <para>A string that contains parameter values for the operation.</para>
            </param>
            <param name="vDirectory">
            <para>Type: <c>Variant</c></para>
            <para>
            The fully qualified path of the directory that contains the file specified by sFile. If this parameter is not specified, the
            current working directory is used.
            </para>
            </param>
            <param name="vOperation">
            <para>Type: <c>Variant</c></para>
            <para>
            The operation to be performed. This value is set to one of the verb strings that is supported by the file. For a discussion
            of verbs, see the Remarks section. If this parameter is not specified, the default operation is performed.
            </para>
            </param>
            <param name="vShow">
            <para>Type: <c>Variant</c></para>
            <para>
            A recommendation as to how the application window should be displayed initially. The application can ignore this
            recommendation. This parameter can be one of the following values. If this parameter is not specified, the application uses
            its default value.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>0</term>
            <term>Open the application with a hidden window.</term>
            </item>
            <item>
            <term>1</term>
            <term>
            Open the application with a normal window. If the window is minimized or maximized, the system restores it to its original
            size and position.
            </term>
            </item>
            <item>
            <term>2</term>
            <term>Open the application with a minimized window.</term>
            </item>
            <item>
            <term>3</term>
            <term>Open the application with a maximized window.</term>
            </item>
            <item>
            <term>4</term>
            <term>Open the application with its window at its most recent size and position. The active window remains active.</term>
            </item>
            <item>
            <term>5</term>
            <term>Open the application with its window at its current size and position.</term>
            </item>
            <item>
            <term>7</term>
            <term>Open the application with a minimized window. The active window remains active.</term>
            </item>
            <item>
            <term>10</term>
            <term>Open the application with its window in the default state specified by the application.</term>
            </item>
            </list>
            </param>
            <remarks>
            <para>This method is implemented and accessed through the <c>Shell.ShellExecute</c> method.</para>
            <para>
            This method is equivalent to launching one of the commands associated with a file's shortcut menu. Each command is
            represented by a verb string. The set of supported verbs varies from file to file. The most commonly supported verb is
            "open", which is also usually the default verb. Other verbs might be supported by only certain types of files. For further
            discussion of Shell verbs, see Launching Applications or Extending Shortcut Menus.
            </para>
            <para>This method is not currently available in Microsoft Visual Basic.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch3.FindPrinter(System.String,System.String,System.String)">
            <summary>Displays the <c>Find Printer</c> dialog box.</summary>
            <param name="Name">
            <para>Type: <c><c>BSTR</c></c></para>
            <para>A <c>String</c> that contains the printer name.</para>
            </param>
            <param name="location">
            <para>Type: <c><c>BSTR</c></c></para>
            <para>A <c>String</c> that contains the printer location.</para>
            </param>
            <param name="model">
            <para>Type: <c><c>BSTR</c></c></para>
            <para>A <c>String</c> that contains the printer model.</para>
            </param>
            <remarks>
            <para>This method is implemented and accessed through the <c>Shell.FindPrinter</c> method.</para>
            <para>
            If you assign strings to one or more of the optional parameters, they are displayed as default values in the associated edit
            control when the <c>Find Printer</c> dialog box is displayed. The user can either accept or override these values. If no
            value is assigned to a parameter, the associated edit box is empty and the user must enter a value.
            </para>
            <para>This method is not currently available in Microsoft Visual Basic.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch3.GetSystemInformation(System.String)">
            <summary>Retrieves system information.</summary>
            <param name="sName">
            <para>Type: <c><c>BSTR</c></c></para>
            <para>A <c>String</c> that specifies the system information that is being requested.</para>
            </param>
            <returns>
            <para>JScript</para>
            <para>Type: <c>Variant</c></para>
            <para>
            Returns the value of the requested system information. The return type depends on which system information is requested. See
            the Remarks section for details.
            </para>
            <para>VB</para>
            <para>Type: <c>Variant</c></para>
            <para>
            Returns the value of the requested system information. The return type depends on which system information is requested. See
            the Remarks section for details.
            </para>
            </returns>
            <remarks>
            <para>This method is implemented and accessed through the <c>Shell.GetSystemInformation</c> method.</para>
            <para>
            This method can be used to request many system information values. The following table gives the sName value that is used to
            request the information and the associated type of the returned value.
            </para>
            <para>sName</para>
            <para>Return type</para>
            <para>Description</para>
            <para>DirectoryServiceAvailable</para>
            <para><c>Boolean</c></para>
            <para>Set to <c>true</c> if the directory service is available; otherwise, <c>false</c>.</para>
            <para>DoubleClickTime</para>
            <para><c>Integer</c></para>
            <para>The double-click time, in milliseconds.</para>
            <para>ProcessorLevel</para>
            <para><c>Integer</c></para>
            <para>
            <c>Windows Vista and later</c>. The processor level. Returns 3, 4, or 5, for x386, x486, and Pentium-level processors, respectively.
            </para>
            <para>ProcessorSpeed</para>
            <para><c>Integer</c></para>
            <para>The processor speed, in megahertz (MHz).</para>
            <para>ProcessorArchitecture</para>
            <para><c>Integer</c></para>
            <para>
            The processor architecture. For details, see the discussion of the <c>wProcessorArchitecture</c> member of the
            <c>SYSTEM_INFO</c> structure.
            </para>
            <para>PhysicalMemoryInstalled</para>
            <para><c>Integer</c></para>
            <para>The amount of physical memory installed, in bytes.</para>
            <para>The following are valid only on Windows XP.</para>
            <para>IsOS_Professional</para>
            <para><c>Boolean</c></para>
            <para>Set to <c>true</c> if the operating system is Windows XP Professional Edition; otherwise, <c>false</c>.</para>
            <para>IsOS_Personal</para>
            <para><c>Boolean</c></para>
            <para>Set to <c>true</c> if the operating system is Windows XP Home Edition; otherwise, <c>false</c>.</para>
            <para>The following is valid only on Windows XP and later.</para>
            <para>IsOS_DomainMember</para>
            <para><c>Boolean</c></para>
            <para>Set to <c>true</c> if the computer is a member of a domain; otherwise, <c>false</c>.</para>
            <para>This method is not currently available in Microsoft Visual Basic.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch3.ServiceStart(System.String,System.Object)">
            <summary>Starts a named service.</summary>
            <param name="sServiceName">
            <para>Type: <c><c>BSTR</c></c></para>
            <para>A <c>String</c> that contains the name of the service.</para>
            </param>
            <param name="vPersistent">
            <para>Type: <c>Variant</c></para>
            <para>
            Set to <c>true</c> to have the service started automatically by the service control manager during system startup. Set to
            <c>false</c> to leave the service configuration unchanged.
            </para>
            </param>
            <returns>
            <para>JScript</para>
            <para>Type: <c>Variant*</c></para>
            <para>Returns <c>true</c> if successful; otherwise, <c>false</c>.</para>
            <para>VB</para>
            <para>Type: <c>Variant*</c></para>
            <para>Returns <c>true</c> if successful; otherwise, <c>false</c>.</para>
            </returns>
            <remarks>
            <para>This method is implemented and accessed through the <c>Shell.ServiceStart</c> method.</para>
            <para>
            The method returns <c>false</c> if the service has already been started. Before calling this method, you can call
            <c>Shell.IsServiceRunning</c> to ascertain the status of the service.
            </para>
            <para>This method is not currently available in Microsoft Visual Basic.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch3.ServiceStop(System.String,System.Object)">
            <summary>Stops a named service.</summary>
            <param name="sServiceName">
            <para>Type: <c><c>BSTR</c></c></para>
            <para>A <c>String</c> that contains the name of the service.</para>
            </param>
            <param name="vPersistent">
            <para>Type: <c>Variant</c></para>
            <para>
            Set to <c>true</c> to have the service started by the service control manager when <c>ServiceStart</c> is called. To leave
            the service configuration unchanged, set vPersistent to <c>false</c>.
            </para>
            </param>
            <returns>
            <para>JScript</para>
            <para>Type: <c>Variant*</c></para>
            <para>Returns <c>true</c> if successful; otherwise, <c>false</c>.</para>
            <para>VB</para>
            <para>Type: <c>Variant*</c></para>
            <para>Returns <c>true</c> if successful; otherwise, <c>false</c>.</para>
            </returns>
            <remarks>
            <para>This method is implemented and accessed through the <c>Shell.ServiceStop</c> method.</para>
            <para>
            The method returns <c>false</c> if the service has already been stopped. Before calling this method, you can call
            <c>Shell.IsServiceRunning</c> to ascertain the status of the service.
            </para>
            <para>This method is not currently available in Microsoft Visual Basic.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch3.IsServiceRunning(System.String)">
            <summary>Returns a value that indicates whether a particular service is running.</summary>
            <param name="sServiceName">
            <para>Type: <c><c>BSTR</c></c></para>
            <para>A <c>String</c> that contains the name of the service.</para>
            </param>
            <returns>
            <para>JScript</para>
            <para>Type: <c>Variant*</c></para>
            <para>Returns <c>true</c> if the service specified by sServiceName is running; otherwise, <c>false</c>.</para>
            <para>VB</para>
            <para>Type: <c>Variant*</c></para>
            <para>Returns <c>true</c> if the service specified by sServiceName is running; otherwise, <c>false</c>.</para>
            </returns>
            <remarks>
            <para>This method is implemented and accessed through the <c>Shell.IsServiceRunning</c> method.</para>
            <para>This method is not currently available in Microsoft Visual Basic.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch3.CanStartStopService(System.String)">
            <summary>Determines if the current user can start and stop the named service.</summary>
            <param name="sServiceName">
            <para>Type: <c>String</c></para>
            <para>A <c>String</c> that contains the name of the service.</para>
            </param>
            <returns>
            <para>JScript</para>
            <para>Type: <c>Variant*</c></para>
            <para>Returns <c>true</c> if the user can start and stop the service; otherwise, <c>false</c>.</para>
            <para>VB</para>
            <para>Type: <c>Variant*</c></para>
            <para>Returns <c>true</c> if the user can start and stop the service; otherwise, <c>false</c>.</para>
            </returns>
            <remarks>
            <para>This method is implemented and accessed through the <c>Shell.CanStartStopService</c> method.</para>
            <para>This method is not currently available in Microsoft Visual Basic.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch3.ShowBrowserBar(System.String,System.Object)">
            <summary>Displays a browser bar.</summary>
            <param name="sCLSID">
            <para>Type: <c><c>BSTR</c></c></para>
            <para>
            A <c>String</c> that contains the string form of the CLSID of the browser bar to be displayed. The object must be registered
            as an Explorer Bar object with a CATID_InfoBand component category. For further information, see Creating Custom Explorer
            Bars, Tool Bands, and Desk Bands.
            </para>
            </param>
            <param name="vShow">
            <para>Type: <c>Variant</c></para>
            <para>Set to <c>true</c> to show the browser bar or <c>false</c> to hide it.</para>
            </param>
            <returns>
            <para>JScript</para>
            <para>Type: <c>Variant*</c></para>
            <para>Returns <c>true</c> if successful; otherwise, <c>false</c>.</para>
            <para>VB</para>
            <para>Type: <c>Variant*</c></para>
            <para>Returns <c>true</c> if successful; otherwise, <c>false</c>.</para>
            </returns>
            <remarks>
            <para>This method is implemented and accessed through the <c>Shell.ShowBrowserBar</c> method.</para>
            <para>
            You can display one of the standard Explorer Bars by setting the sCLSID parameter to the CLSID of that Explorer Bar. The
            standard Explorer Bars and their CLSID strings are as follows:
            </para>
            <list type="table">
            <listheader>
            <term>Explorer Bar</term>
            <term>CLSID string</term>
            </listheader>
            <item>
            <term>Favorites</term>
            <term>{EFA24E61-B078-11d0-89E4-00C04FC9E26E}</term>
            </item>
            <item>
            <term>Folders</term>
            <term>{EFA24E64-B078-11d0-89E4-00C04FC9E26E}</term>
            </item>
            <item>
            <term>History</term>
            <term>{EFA24E62-B078-11d0-89E4-00C04FC9E26E}</term>
            </item>
            <item>
            <term>Search</term>
            <term>{30D02401-6A81-11d0-8274-00C04FD5AE38}</term>
            </item>
            </list>
            <para>This method is not currently available in Microsoft Visual Basic.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch3.AddToRecent(System.Object,System.String)">
            <summary>Adds a file to the most recently used (MRU) list.</summary>
            <param name="varFile">
            <para>Type: <c>Variant</c></para>
            <para>A <c>String</c> that contains the path of the file to add to the list of recently used documents.</para>
            <para><c>Windows Vista</c>: Set this parameter to <c>null</c> to clear the recent documents folder.</para>
            </param>
            <param name="bstrCategory">A <c>String</c> that contains the name of the category in which to place the file.</param>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IShellDispatch4">
            <summary>
            Extends the <c>IShellDispatch3</c> object. In addition to the properties and methods supported by <c>IShellDispatch3</c>,
            <c>IShellDispatch4</c> supports four additional methods.
            </summary>
            <remarks>For a discussion of Windows services, see the Services documentation.</remarks>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.IShellDispatch4.Application">
            <summary>
            <para>Contains an object that represents an application.</para>
            <para>This property is read-only.</para>
            </summary>
            <remarks>
            <para>This property is implemented and accessed through the <c>Shell.EjectPC</c> property.</para>
            <para>
            The <c>Application</c> property returns the automation object supported by the application that contains the WebBrowser
            control, if that object is accessible. Otherwise, this property returns the WebBrowser control's automation object.
            </para>
            <para>
            Use this property with the <c>Set</c> and <c>CreateObject</c> commands or with the <c>GetObject</c> command to create and
            manipulate an instance of the Windows Internet Explorer application.
            </para>
            </remarks>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.IShellDispatch4.Parent">
            <summary>
            <para>Retrieves an object that represents the parent of the current object.</para>
            <para>This property is read-only.</para>
            </summary>
            <remarks>This property is implemented and accessed through the <c>Shell.Parent</c> property.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch4.NameSpace(System.Object)">
            <summary>Creates and returns a <c>Folder</c> object for the specified folder.</summary>
            <param name="vDir">
            <para>Type: <c>Variant</c></para>
            <para>
            The folder for which to create the <c>Folder</c> object. This can be a string that specifies the path of the folder or one of
            the <c>ShellSpecialFolderConstants</c> values. Note that the constant names found in <c>ShellSpecialFolderConstants</c> are
            available in Visual Basic, but not in VBScript or JScript. In those cases, the numeric values must be used in their place.
            </para>
            </param>
            <returns>
            <para>JScript</para>
            <para>Type: <c><c>Folder</c>**</c></para>
            <para>
            Object reference to the <c>Folder</c> object for the specified folder. If the folder is not successfully created, this value
            returns <c>null</c>.
            </para>
            <para>VB</para>
            <para>Type: <c><c>Folder</c>**</c></para>
            <para>
            Object reference to the <c>Folder</c> object for the specified folder. If the folder is not successfully created, this value
            returns <c>null</c>.
            </para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.NameSpace</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch4.BrowseForFolder(System.Int32,System.String,System.Int32,System.Object)">
            <summary>
            Creates a dialog box that enables the user to select a folder and then returns the selected folder's <c>Folder</c> object.
            </summary>
            <param name="Hwnd">
            <para>Type: <c>Integer</c></para>
            <para>The handle to the parent window of the dialog box. This value can be zero.</para>
            </param>
            <param name="Title">
            <para>Type: <c><c>BSTR</c></c></para>
            <para>A <c>String</c> value that represents the title displayed inside the <c>Browse</c> dialog box.</para>
            </param>
            <param name="Options">
            <para>Type: <c>Integer</c></para>
            <para>
            An <c>Integer</c> value that contains the options for the method. This can be zero or a combination of the values listed
            under the <c>ulFlags</c> member of the <c>BROWSEINFO</c> structure.
            </para>
            </param>
            <param name="RootFolder">
            <para>Type: <c>Variant</c></para>
            <para>
            The root folder to use in the dialog box. The user cannot browse higher in the tree than this folder. If this value is not
            specified, the root folder used in the dialog box is the desktop. This value can be a string that specifies the path of the
            folder or one of the <c>ShellSpecialFolderConstants</c> values. Note that the constant names found in
            <c>ShellSpecialFolderConstants</c> are available in Visual Basic, but not in VBScript or JScript. In those cases, the numeric
            values must be used in their place.
            </para>
            </param>
            <returns>
            <para>JScript</para>
            <para>Type: <c>FOLDER**</c></para>
            <para>An object reference to the selected folder's <c>Folder</c> object.</para>
            <para>VB</para>
            <para>Type: <c>FOLDER**</c></para>
            <para>An object reference to the selected folder's <c>Folder</c> object.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.BrowseForFolder</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch4.Windows">
            <summary>
            Creates and returns a <c>ShellWindows</c> object. This object represents a collection of all of the open windows that belong
            to the Shell.
            </summary>
            <returns>
            <para>JScript</para>
            <para>Type: <c><c>IDispatch</c>**</c></para>
            <para>An object reference to the <c>ShellWindows</c> object.</para>
            <para>VB</para>
            <para>Type: <c><c>IDispatch</c>**</c></para>
            <para>An object reference to the <c>ShellWindows</c> object.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.Windows</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch4.Open(System.Object)">
            <summary>Opens the specified folder.</summary>
            <param name="vDir">
            <para>Type: <c>Variant</c></para>
            <para>
            A string that specifies the path of the folder or one of the <c>ShellSpecialFolderConstants</c> values. Note that the
            constant names found in <c>ShellSpecialFolderConstants</c> are available in Visual Basic, but not in VBScript or JScript. In
            those cases, the numeric values must be used in their place.
            </para>
            <para>
            If vDir is set to one of the <c>ShellSpecialFolderConstants</c> and the special folder does not exist, this function will
            create the folder.
            </para>
            </param>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.Open</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch4.Explore(System.Object)">
            <summary>Opens a specified folder in a Windows Explorer window.</summary>
            <param name="vDir">
            <para>Type: <c>Variant</c></para>
            <para>
            The folder to be displayed. This can be a string that specifies the path of the folder or one of the
            <c>ShellSpecialFolderConstants</c> values. Note that the constant names found in <c>ShellSpecialFolderConstants</c> are
            available in Visual Basic, but not in VBScript or JScript. In those cases, the numeric values must be used in their place.
            </para>
            </param>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.Explore</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch4.MinimizeAll">
            <summary>
            Minimizes all of the windows on the desktop. This method has the same effect as right-clicking the taskbar and selecting
            <c>Minimize All Windows</c> on older systems or clicking the <c>Show Desktop</c> icon on the taskbar.
            </summary>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.MinimizeAll</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch4.UndoMinimizeALL">
            <summary>
            Restores all desktop windows to the state they were in before the last <c>MinimizeAll</c> command. This method has the same
            effect as right-clicking the taskbar and selecting <c>Undo Minimize All Windows</c> (on older systems) or a second clicking
            of the <c>Show Desktop</c> icon in the taskbar.
            </summary>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.UndoMinimizeAll</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch4.FileRun">
            <summary>Displays the <c>Run</c> dialog to the user.</summary>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.FileRun</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch4.CascadeWindows">
            <summary>
            Cascades all of the windows on the desktop. This method has the same effect as right-clicking the taskbar and selecting
            <c>Cascade windows</c>.
            </summary>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.CascadeWindows</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch4.TileVertically">
            <summary>
            Tiles all of the windows on the desktop vertically. This method has the same effect as right-clicking the taskbar and
            selecting <c>Show windows side by side</c>.
            </summary>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.TileVertically</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch4.TileHorizontally">
            <summary>
            Tiles all of the windows on the desktop horizontally. This method has the same effect as right-clicking the taskbar and
            selecting <c>Show windows stacked</c>.
            </summary>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.TileHorizontally</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch4.ShutdownWindows">
            <summary>
            Displays the <c>Shut Down Windows</c> dialog box. This is the same as clicking the <c>Start</c> menu and selecting <c>Shut Down</c>.
            </summary>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.ShutdownWindows</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch4.Suspend">
            <summary>This method is not implemented.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch4.EjectPC">
            <summary>
            Ejects the computer from its docking station. This is the same as clicking the <c>Start</c> menu and selecting <c>Eject
            PC</c>, if your computer supports this command.
            </summary>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.EjectPC</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch4.SetTime">
            <summary>
            Displays the <c>Date and Time</c> dialog box. This method has the same effect as right-clicking the clock in the taskbar
            status area and selecting <c>Adjust date/time</c>.
            </summary>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.SetTime</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch4.TrayProperties">
            <summary>
            Displays the <c>Taskbar and Start Menu Properties</c> dialog box. This method has the same effect as right-clicking the
            taskbar and selecting <c>Properties</c>.
            </summary>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.TrayProperties</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch4.Help">
            <summary>
            Displays the Windows Help and Support window. This method has the same effect as clicking the <c>Start</c> menu and selecting
            <c>Help and Support</c>.
            </summary>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.Help</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch4.FindFiles">
            <summary>
            Displays the <c>Find: All Files</c> dialog box. This is the same as clicking the <c>Start</c> menu and then selecting <c>Search</c>.
            </summary>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.FindFiles</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch4.FindComputer">
            <summary>
            Displays the <c>Search Results: Computers</c> dialog box. The dialog box shows the result of the search for a specified computer.
            </summary>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.FindComputer</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch4.RefreshMenu">
            <summary>Refreshes the contents of the <c>Start</c> menu. Used only with systems preceding Windows XP.</summary>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>
            <para>This method is implemented and accessed through the <c>Shell.TrayProperties</c> method.</para>
            <para>
            The functionality that <c>RefreshMenu</c> provides is handled automatically under Windows XP or later. Do not call this
            method on Windows XP or later.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch4.ControlPanelItem(System.String)">
            <summary>
            Runs the specified Control Panel application. If the application is already open, it will activate the running instance.
            </summary>
            <param name="bstrDir">
            <para>Type: <c><c>BSTR</c></c></para>
            <para>The Control Panel application's file name.</para>
            </param>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.ControlPanelItem</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch4.IsRestricted(System.String,System.String)">
            <summary>Retrieves a group's restriction setting from the registry.</summary>
            <param name="sGroup">
            <para>Type: <c><c>BSTR</c></c></para>
            <para>
            A <c>String</c> that contains the group name. This value is the name of a registry subkey under which to check for the restriction.
            </para>
            </param>
            <param name="sRestriction">
            <para>Type: <c><c>BSTR</c></c></para>
            <para>A <c>String</c> that contains the restriction whose value is to be retrieved.</para>
            </param>
            <returns>
            <para>JScript</para>
            <para>Type: <c>Integer*</c></para>
            <para>The value of the restriction. If the specified restriction is not found, the return value is 0.</para>
            <para>VB</para>
            <para>Type: <c>Integer*</c></para>
            <para>The value of the restriction. If the specified restriction is not found, the return value is 0.</para>
            </returns>
            <remarks>
            <para>This method is implemented and accessed through the <c>Shell.IsRestricted</c> method.</para>
            <para><c>IsRestricted</c> first looks for a subkey name that matches sGroup under the following key.</para>
            <para>
            Restrictions are declared as values of the individual policy subkeys. If the restriction named in sRestriction is found in
            the subkey named in sGroup, <c>IsRestricted</c> returns the restriction's current value. If the restriction is not found
            under <c>HKEY_LOCAL_MACHINE</c>, the same subkey is checked under <c>HKEY_CURRENT_USER</c>.
            </para>
            <para>This method is not currently available in Microsoft Visual Basic.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch4.ShellExecute(System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>Performs a specified operation on a specified file.</summary>
            <param name="sFile">
            <para>Type: <c><c>BSTR</c></c></para>
            <para>
            A <c>String</c> that contains the name of the file on which <c>ShellExecute</c> will perform the action specified by vOperation.
            </para>
            </param>
            <param name="vArguments">
            <para>Type: <c>Variant</c></para>
            <para>A string that contains parameter values for the operation.</para>
            </param>
            <param name="vDirectory">
            <para>Type: <c>Variant</c></para>
            <para>
            The fully qualified path of the directory that contains the file specified by sFile. If this parameter is not specified, the
            current working directory is used.
            </para>
            </param>
            <param name="vOperation">
            <para>Type: <c>Variant</c></para>
            <para>
            The operation to be performed. This value is set to one of the verb strings that is supported by the file. For a discussion
            of verbs, see the Remarks section. If this parameter is not specified, the default operation is performed.
            </para>
            </param>
            <param name="vShow">
            <para>Type: <c>Variant</c></para>
            <para>
            A recommendation as to how the application window should be displayed initially. The application can ignore this
            recommendation. This parameter can be one of the following values. If this parameter is not specified, the application uses
            its default value.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>0</term>
            <term>Open the application with a hidden window.</term>
            </item>
            <item>
            <term>1</term>
            <term>
            Open the application with a normal window. If the window is minimized or maximized, the system restores it to its original
            size and position.
            </term>
            </item>
            <item>
            <term>2</term>
            <term>Open the application with a minimized window.</term>
            </item>
            <item>
            <term>3</term>
            <term>Open the application with a maximized window.</term>
            </item>
            <item>
            <term>4</term>
            <term>Open the application with its window at its most recent size and position. The active window remains active.</term>
            </item>
            <item>
            <term>5</term>
            <term>Open the application with its window at its current size and position.</term>
            </item>
            <item>
            <term>7</term>
            <term>Open the application with a minimized window. The active window remains active.</term>
            </item>
            <item>
            <term>10</term>
            <term>Open the application with its window in the default state specified by the application.</term>
            </item>
            </list>
            </param>
            <remarks>
            <para>This method is implemented and accessed through the <c>Shell.ShellExecute</c> method.</para>
            <para>
            This method is equivalent to launching one of the commands associated with a file's shortcut menu. Each command is
            represented by a verb string. The set of supported verbs varies from file to file. The most commonly supported verb is
            "open", which is also usually the default verb. Other verbs might be supported by only certain types of files. For further
            discussion of Shell verbs, see Launching Applications or Extending Shortcut Menus.
            </para>
            <para>This method is not currently available in Microsoft Visual Basic.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch4.FindPrinter(System.String,System.String,System.String)">
            <summary>Displays the <c>Find Printer</c> dialog box.</summary>
            <param name="Name">
            <para>Type: <c><c>BSTR</c></c></para>
            <para>A <c>String</c> that contains the printer name.</para>
            </param>
            <param name="location">
            <para>Type: <c><c>BSTR</c></c></para>
            <para>A <c>String</c> that contains the printer location.</para>
            </param>
            <param name="model">
            <para>Type: <c><c>BSTR</c></c></para>
            <para>A <c>String</c> that contains the printer model.</para>
            </param>
            <remarks>
            <para>This method is implemented and accessed through the <c>Shell.FindPrinter</c> method.</para>
            <para>
            If you assign strings to one or more of the optional parameters, they are displayed as default values in the associated edit
            control when the <c>Find Printer</c> dialog box is displayed. The user can either accept or override these values. If no
            value is assigned to a parameter, the associated edit box is empty and the user must enter a value.
            </para>
            <para>This method is not currently available in Microsoft Visual Basic.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch4.GetSystemInformation(System.String)">
            <summary>Retrieves system information.</summary>
            <param name="sName">
            <para>Type: <c><c>BSTR</c></c></para>
            <para>A <c>String</c> that specifies the system information that is being requested.</para>
            </param>
            <returns>
            <para>JScript</para>
            <para>Type: <c>Variant</c></para>
            <para>
            Returns the value of the requested system information. The return type depends on which system information is requested. See
            the Remarks section for details.
            </para>
            <para>VB</para>
            <para>Type: <c>Variant</c></para>
            <para>
            Returns the value of the requested system information. The return type depends on which system information is requested. See
            the Remarks section for details.
            </para>
            </returns>
            <remarks>
            <para>This method is implemented and accessed through the <c>Shell.GetSystemInformation</c> method.</para>
            <para>
            This method can be used to request many system information values. The following table gives the sName value that is used to
            request the information and the associated type of the returned value.
            </para>
            <para>sName</para>
            <para>Return type</para>
            <para>Description</para>
            <para>DirectoryServiceAvailable</para>
            <para><c>Boolean</c></para>
            <para>Set to <c>true</c> if the directory service is available; otherwise, <c>false</c>.</para>
            <para>DoubleClickTime</para>
            <para><c>Integer</c></para>
            <para>The double-click time, in milliseconds.</para>
            <para>ProcessorLevel</para>
            <para><c>Integer</c></para>
            <para>
            <c>Windows Vista and later</c>. The processor level. Returns 3, 4, or 5, for x386, x486, and Pentium-level processors, respectively.
            </para>
            <para>ProcessorSpeed</para>
            <para><c>Integer</c></para>
            <para>The processor speed, in megahertz (MHz).</para>
            <para>ProcessorArchitecture</para>
            <para><c>Integer</c></para>
            <para>
            The processor architecture. For details, see the discussion of the <c>wProcessorArchitecture</c> member of the
            <c>SYSTEM_INFO</c> structure.
            </para>
            <para>PhysicalMemoryInstalled</para>
            <para><c>Integer</c></para>
            <para>The amount of physical memory installed, in bytes.</para>
            <para>The following are valid only on Windows XP.</para>
            <para>IsOS_Professional</para>
            <para><c>Boolean</c></para>
            <para>Set to <c>true</c> if the operating system is Windows XP Professional Edition; otherwise, <c>false</c>.</para>
            <para>IsOS_Personal</para>
            <para><c>Boolean</c></para>
            <para>Set to <c>true</c> if the operating system is Windows XP Home Edition; otherwise, <c>false</c>.</para>
            <para>The following is valid only on Windows XP and later.</para>
            <para>IsOS_DomainMember</para>
            <para><c>Boolean</c></para>
            <para>Set to <c>true</c> if the computer is a member of a domain; otherwise, <c>false</c>.</para>
            <para>This method is not currently available in Microsoft Visual Basic.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch4.ServiceStart(System.String,System.Object)">
            <summary>Starts a named service.</summary>
            <param name="sServiceName">
            <para>Type: <c><c>BSTR</c></c></para>
            <para>A <c>String</c> that contains the name of the service.</para>
            </param>
            <param name="vPersistent">
            <para>Type: <c>Variant</c></para>
            <para>
            Set to <c>true</c> to have the service started automatically by the service control manager during system startup. Set to
            <c>false</c> to leave the service configuration unchanged.
            </para>
            </param>
            <returns>
            <para>JScript</para>
            <para>Type: <c>Variant*</c></para>
            <para>Returns <c>true</c> if successful; otherwise, <c>false</c>.</para>
            <para>VB</para>
            <para>Type: <c>Variant*</c></para>
            <para>Returns <c>true</c> if successful; otherwise, <c>false</c>.</para>
            </returns>
            <remarks>
            <para>This method is implemented and accessed through the <c>Shell.ServiceStart</c> method.</para>
            <para>
            The method returns <c>false</c> if the service has already been started. Before calling this method, you can call
            <c>Shell.IsServiceRunning</c> to ascertain the status of the service.
            </para>
            <para>This method is not currently available in Microsoft Visual Basic.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch4.ServiceStop(System.String,System.Object)">
            <summary>Stops a named service.</summary>
            <param name="sServiceName">
            <para>Type: <c><c>BSTR</c></c></para>
            <para>A <c>String</c> that contains the name of the service.</para>
            </param>
            <param name="vPersistent">
            <para>Type: <c>Variant</c></para>
            <para>
            Set to <c>true</c> to have the service started by the service control manager when <c>ServiceStart</c> is called. To leave
            the service configuration unchanged, set vPersistent to <c>false</c>.
            </para>
            </param>
            <returns>
            <para>JScript</para>
            <para>Type: <c>Variant*</c></para>
            <para>Returns <c>true</c> if successful; otherwise, <c>false</c>.</para>
            <para>VB</para>
            <para>Type: <c>Variant*</c></para>
            <para>Returns <c>true</c> if successful; otherwise, <c>false</c>.</para>
            </returns>
            <remarks>
            <para>This method is implemented and accessed through the <c>Shell.ServiceStop</c> method.</para>
            <para>
            The method returns <c>false</c> if the service has already been stopped. Before calling this method, you can call
            <c>Shell.IsServiceRunning</c> to ascertain the status of the service.
            </para>
            <para>This method is not currently available in Microsoft Visual Basic.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch4.IsServiceRunning(System.String)">
            <summary>Returns a value that indicates whether a particular service is running.</summary>
            <param name="sServiceName">
            <para>Type: <c><c>BSTR</c></c></para>
            <para>A <c>String</c> that contains the name of the service.</para>
            </param>
            <returns>
            <para>JScript</para>
            <para>Type: <c>Variant*</c></para>
            <para>Returns <c>true</c> if the service specified by sServiceName is running; otherwise, <c>false</c>.</para>
            <para>VB</para>
            <para>Type: <c>Variant*</c></para>
            <para>Returns <c>true</c> if the service specified by sServiceName is running; otherwise, <c>false</c>.</para>
            </returns>
            <remarks>
            <para>This method is implemented and accessed through the <c>Shell.IsServiceRunning</c> method.</para>
            <para>This method is not currently available in Microsoft Visual Basic.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch4.CanStartStopService(System.String)">
            <summary>Determines if the current user can start and stop the named service.</summary>
            <param name="sServiceName">
            <para>Type: <c>String</c></para>
            <para>A <c>String</c> that contains the name of the service.</para>
            </param>
            <returns>
            <para>JScript</para>
            <para>Type: <c>Variant*</c></para>
            <para>Returns <c>true</c> if the user can start and stop the service; otherwise, <c>false</c>.</para>
            <para>VB</para>
            <para>Type: <c>Variant*</c></para>
            <para>Returns <c>true</c> if the user can start and stop the service; otherwise, <c>false</c>.</para>
            </returns>
            <remarks>
            <para>This method is implemented and accessed through the <c>Shell.CanStartStopService</c> method.</para>
            <para>This method is not currently available in Microsoft Visual Basic.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch4.ShowBrowserBar(System.String,System.Object)">
            <summary>Displays a browser bar.</summary>
            <param name="sCLSID">
            <para>Type: <c><c>BSTR</c></c></para>
            <para>
            A <c>String</c> that contains the string form of the CLSID of the browser bar to be displayed. The object must be registered
            as an Explorer Bar object with a CATID_InfoBand component category. For further information, see Creating Custom Explorer
            Bars, Tool Bands, and Desk Bands.
            </para>
            </param>
            <param name="vShow">
            <para>Type: <c>Variant</c></para>
            <para>Set to <c>true</c> to show the browser bar or <c>false</c> to hide it.</para>
            </param>
            <returns>
            <para>JScript</para>
            <para>Type: <c>Variant*</c></para>
            <para>Returns <c>true</c> if successful; otherwise, <c>false</c>.</para>
            <para>VB</para>
            <para>Type: <c>Variant*</c></para>
            <para>Returns <c>true</c> if successful; otherwise, <c>false</c>.</para>
            </returns>
            <remarks>
            <para>This method is implemented and accessed through the <c>Shell.ShowBrowserBar</c> method.</para>
            <para>
            You can display one of the standard Explorer Bars by setting the sCLSID parameter to the CLSID of that Explorer Bar. The
            standard Explorer Bars and their CLSID strings are as follows:
            </para>
            <list type="table">
            <listheader>
            <term>Explorer Bar</term>
            <term>CLSID string</term>
            </listheader>
            <item>
            <term>Favorites</term>
            <term>{EFA24E61-B078-11d0-89E4-00C04FC9E26E}</term>
            </item>
            <item>
            <term>Folders</term>
            <term>{EFA24E64-B078-11d0-89E4-00C04FC9E26E}</term>
            </item>
            <item>
            <term>History</term>
            <term>{EFA24E62-B078-11d0-89E4-00C04FC9E26E}</term>
            </item>
            <item>
            <term>Search</term>
            <term>{30D02401-6A81-11d0-8274-00C04FD5AE38}</term>
            </item>
            </list>
            <para>This method is not currently available in Microsoft Visual Basic.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch4.AddToRecent(System.Object,System.String)">
            <summary>Adds a file to the most recently used (MRU) list.</summary>
            <param name="varFile">
            <para>Type: <c>Variant</c></para>
            <para>A <c>String</c> that contains the path of the file to add to the list of recently used documents.</para>
            <para><c>Windows Vista</c>: Set this parameter to <c>null</c> to clear the recent documents folder.</para>
            </param>
            <param name="bstrCategory">A <c>String</c> that contains the name of the category in which to place the file.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch4.WindowsSecurity">
            <summary>Displays the <c>Windows Security</c> dialog box.</summary>
            <remarks>
            This method displays the dialog box shown after pressing CTRL+ALT+DELETE or using the security option on the <c>Start</c> menu.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch4.ToggleDesktop">
            <summary>Displays or hides the desktop.</summary>
            <remarks>
            This method has the same effect as the <c>Show Desktop</c> button on the taskbar. It either hides all open windows to show
            the desktop or it hides the desktop by showing all open windows. The <c>ToggleDesktop</c> method does not display a user
            interface, it just invokes the toggle action.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch4.ExplorerPolicy(System.String)">
            <summary>Gets the value for a specified Windows Internet Explorer policy.</summary>
            <param name="bstrPolicyName">A <c>String</c> that specifies the name of the policy.</param>
            <returns>
            <para>JScript</para>
            <para>Type: <c>Variant*</c></para>
            <para>The value associated with the specified policy name.</para>
            <para>VB</para>
            <para>Type: <c>Variant*</c></para>
            <para>The value associated with the specified policy name.</para>
            </returns>
            <remarks>
            <para>Network Administrators can control and manage the computing environment of their users by setting policies.</para>
            <para>
            The specified value name must be within the <c>HKEY_CURRENT_USER</c>\ <c>Software</c>\ <c>Microsoft</c>\ <c>Windows</c>\
            <c>CurrentVersion</c>\ <c>Policies</c>\ <c>Explorer</c> subkey. If the value name does not exist then the method returns <c>null</c>.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch4.GetSetting(Vanara.PInvoke.Shell32.SSF)">
            <summary>Retrieves a global Shell setting.</summary>
            <param name="lSetting">
            A value that specifies the current Shell setting to retrieve. Only one setting can be retrieved in each call. The following
            values are recognized by this method.
            </param>
            <returns>Set to <c>true</c> if the setting exists; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IShellDispatch5">
            <summary>
            Extends the <c>IShellDispatch4</c> object. In addition to the properties and methods supported by <c>IShellDispatch4</c>,
            <c>IShellDispatch5</c> adds a method that displays open windows in a 3D stack.
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.IShellDispatch5.Application">
            <summary>
            <para>Contains an object that represents an application.</para>
            <para>This property is read-only.</para>
            </summary>
            <remarks>
            <para>This property is implemented and accessed through the <c>Shell.EjectPC</c> property.</para>
            <para>
            The <c>Application</c> property returns the automation object supported by the application that contains the WebBrowser
            control, if that object is accessible. Otherwise, this property returns the WebBrowser control's automation object.
            </para>
            <para>
            Use this property with the <c>Set</c> and <c>CreateObject</c> commands or with the <c>GetObject</c> command to create and
            manipulate an instance of the Windows Internet Explorer application.
            </para>
            </remarks>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.IShellDispatch5.Parent">
            <summary>
            <para>Retrieves an object that represents the parent of the current object.</para>
            <para>This property is read-only.</para>
            </summary>
            <remarks>This property is implemented and accessed through the <c>Shell.Parent</c> property.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch5.NameSpace(System.Object)">
            <summary>Creates and returns a <c>Folder</c> object for the specified folder.</summary>
            <param name="vDir">
            <para>Type: <c>Variant</c></para>
            <para>
            The folder for which to create the <c>Folder</c> object. This can be a string that specifies the path of the folder or one of
            the <c>ShellSpecialFolderConstants</c> values. Note that the constant names found in <c>ShellSpecialFolderConstants</c> are
            available in Visual Basic, but not in VBScript or JScript. In those cases, the numeric values must be used in their place.
            </para>
            </param>
            <returns>
            <para>JScript</para>
            <para>Type: <c><c>Folder</c>**</c></para>
            <para>
            Object reference to the <c>Folder</c> object for the specified folder. If the folder is not successfully created, this value
            returns <c>null</c>.
            </para>
            <para>VB</para>
            <para>Type: <c><c>Folder</c>**</c></para>
            <para>
            Object reference to the <c>Folder</c> object for the specified folder. If the folder is not successfully created, this value
            returns <c>null</c>.
            </para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.NameSpace</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch5.BrowseForFolder(System.Int32,System.String,System.Int32,System.Object)">
            <summary>
            Creates a dialog box that enables the user to select a folder and then returns the selected folder's <c>Folder</c> object.
            </summary>
            <param name="Hwnd">
            <para>Type: <c>Integer</c></para>
            <para>The handle to the parent window of the dialog box. This value can be zero.</para>
            </param>
            <param name="Title">
            <para>Type: <c><c>BSTR</c></c></para>
            <para>A <c>String</c> value that represents the title displayed inside the <c>Browse</c> dialog box.</para>
            </param>
            <param name="Options">
            <para>Type: <c>Integer</c></para>
            <para>
            An <c>Integer</c> value that contains the options for the method. This can be zero or a combination of the values listed
            under the <c>ulFlags</c> member of the <c>BROWSEINFO</c> structure.
            </para>
            </param>
            <param name="RootFolder">
            <para>Type: <c>Variant</c></para>
            <para>
            The root folder to use in the dialog box. The user cannot browse higher in the tree than this folder. If this value is not
            specified, the root folder used in the dialog box is the desktop. This value can be a string that specifies the path of the
            folder or one of the <c>ShellSpecialFolderConstants</c> values. Note that the constant names found in
            <c>ShellSpecialFolderConstants</c> are available in Visual Basic, but not in VBScript or JScript. In those cases, the numeric
            values must be used in their place.
            </para>
            </param>
            <returns>
            <para>JScript</para>
            <para>Type: <c>FOLDER**</c></para>
            <para>An object reference to the selected folder's <c>Folder</c> object.</para>
            <para>VB</para>
            <para>Type: <c>FOLDER**</c></para>
            <para>An object reference to the selected folder's <c>Folder</c> object.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.BrowseForFolder</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch5.Windows">
            <summary>
            Creates and returns a <c>ShellWindows</c> object. This object represents a collection of all of the open windows that belong
            to the Shell.
            </summary>
            <returns>
            <para>JScript</para>
            <para>Type: <c><c>IDispatch</c>**</c></para>
            <para>An object reference to the <c>ShellWindows</c> object.</para>
            <para>VB</para>
            <para>Type: <c><c>IDispatch</c>**</c></para>
            <para>An object reference to the <c>ShellWindows</c> object.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.Windows</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch5.Open(System.Object)">
            <summary>Opens the specified folder.</summary>
            <param name="vDir">
            <para>Type: <c>Variant</c></para>
            <para>
            A string that specifies the path of the folder or one of the <c>ShellSpecialFolderConstants</c> values. Note that the
            constant names found in <c>ShellSpecialFolderConstants</c> are available in Visual Basic, but not in VBScript or JScript. In
            those cases, the numeric values must be used in their place.
            </para>
            <para>
            If vDir is set to one of the <c>ShellSpecialFolderConstants</c> and the special folder does not exist, this function will
            create the folder.
            </para>
            </param>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.Open</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch5.Explore(System.Object)">
            <summary>Opens a specified folder in a Windows Explorer window.</summary>
            <param name="vDir">
            <para>Type: <c>Variant</c></para>
            <para>
            The folder to be displayed. This can be a string that specifies the path of the folder or one of the
            <c>ShellSpecialFolderConstants</c> values. Note that the constant names found in <c>ShellSpecialFolderConstants</c> are
            available in Visual Basic, but not in VBScript or JScript. In those cases, the numeric values must be used in their place.
            </para>
            </param>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.Explore</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch5.MinimizeAll">
            <summary>
            Minimizes all of the windows on the desktop. This method has the same effect as right-clicking the taskbar and selecting
            <c>Minimize All Windows</c> on older systems or clicking the <c>Show Desktop</c> icon on the taskbar.
            </summary>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.MinimizeAll</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch5.UndoMinimizeALL">
            <summary>
            Restores all desktop windows to the state they were in before the last <c>MinimizeAll</c> command. This method has the same
            effect as right-clicking the taskbar and selecting <c>Undo Minimize All Windows</c> (on older systems) or a second clicking
            of the <c>Show Desktop</c> icon in the taskbar.
            </summary>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.UndoMinimizeAll</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch5.FileRun">
            <summary>Displays the <c>Run</c> dialog to the user.</summary>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.FileRun</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch5.CascadeWindows">
            <summary>
            Cascades all of the windows on the desktop. This method has the same effect as right-clicking the taskbar and selecting
            <c>Cascade windows</c>.
            </summary>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.CascadeWindows</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch5.TileVertically">
            <summary>
            Tiles all of the windows on the desktop vertically. This method has the same effect as right-clicking the taskbar and
            selecting <c>Show windows side by side</c>.
            </summary>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.TileVertically</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch5.TileHorizontally">
            <summary>
            Tiles all of the windows on the desktop horizontally. This method has the same effect as right-clicking the taskbar and
            selecting <c>Show windows stacked</c>.
            </summary>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.TileHorizontally</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch5.ShutdownWindows">
            <summary>
            Displays the <c>Shut Down Windows</c> dialog box. This is the same as clicking the <c>Start</c> menu and selecting <c>Shut Down</c>.
            </summary>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.ShutdownWindows</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch5.Suspend">
            <summary>This method is not implemented.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch5.EjectPC">
            <summary>
            Ejects the computer from its docking station. This is the same as clicking the <c>Start</c> menu and selecting <c>Eject
            PC</c>, if your computer supports this command.
            </summary>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.EjectPC</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch5.SetTime">
            <summary>
            Displays the <c>Date and Time</c> dialog box. This method has the same effect as right-clicking the clock in the taskbar
            status area and selecting <c>Adjust date/time</c>.
            </summary>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.SetTime</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch5.TrayProperties">
            <summary>
            Displays the <c>Taskbar and Start Menu Properties</c> dialog box. This method has the same effect as right-clicking the
            taskbar and selecting <c>Properties</c>.
            </summary>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.TrayProperties</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch5.Help">
            <summary>
            Displays the Windows Help and Support window. This method has the same effect as clicking the <c>Start</c> menu and selecting
            <c>Help and Support</c>.
            </summary>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.Help</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch5.FindFiles">
            <summary>
            Displays the <c>Find: All Files</c> dialog box. This is the same as clicking the <c>Start</c> menu and then selecting <c>Search</c>.
            </summary>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.FindFiles</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch5.FindComputer">
            <summary>
            Displays the <c>Search Results: Computers</c> dialog box. The dialog box shows the result of the search for a specified computer.
            </summary>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.FindComputer</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch5.RefreshMenu">
            <summary>Refreshes the contents of the <c>Start</c> menu. Used only with systems preceding Windows XP.</summary>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>
            <para>This method is implemented and accessed through the <c>Shell.TrayProperties</c> method.</para>
            <para>
            The functionality that <c>RefreshMenu</c> provides is handled automatically under Windows XP or later. Do not call this
            method on Windows XP or later.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch5.ControlPanelItem(System.String)">
            <summary>
            Runs the specified Control Panel application. If the application is already open, it will activate the running instance.
            </summary>
            <param name="bstrDir">
            <para>Type: <c><c>BSTR</c></c></para>
            <para>The Control Panel application's file name.</para>
            </param>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.ControlPanelItem</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch5.IsRestricted(System.String,System.String)">
            <summary>Retrieves a group's restriction setting from the registry.</summary>
            <param name="sGroup">
            <para>Type: <c><c>BSTR</c></c></para>
            <para>
            A <c>String</c> that contains the group name. This value is the name of a registry subkey under which to check for the restriction.
            </para>
            </param>
            <param name="sRestriction">
            <para>Type: <c><c>BSTR</c></c></para>
            <para>A <c>String</c> that contains the restriction whose value is to be retrieved.</para>
            </param>
            <returns>
            <para>JScript</para>
            <para>Type: <c>Integer*</c></para>
            <para>The value of the restriction. If the specified restriction is not found, the return value is 0.</para>
            <para>VB</para>
            <para>Type: <c>Integer*</c></para>
            <para>The value of the restriction. If the specified restriction is not found, the return value is 0.</para>
            </returns>
            <remarks>
            <para>This method is implemented and accessed through the <c>Shell.IsRestricted</c> method.</para>
            <para><c>IsRestricted</c> first looks for a subkey name that matches sGroup under the following key.</para>
            <para>
            Restrictions are declared as values of the individual policy subkeys. If the restriction named in sRestriction is found in
            the subkey named in sGroup, <c>IsRestricted</c> returns the restriction's current value. If the restriction is not found
            under <c>HKEY_LOCAL_MACHINE</c>, the same subkey is checked under <c>HKEY_CURRENT_USER</c>.
            </para>
            <para>This method is not currently available in Microsoft Visual Basic.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch5.ShellExecute(System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>Performs a specified operation on a specified file.</summary>
            <param name="sFile">
            <para>Type: <c><c>BSTR</c></c></para>
            <para>
            A <c>String</c> that contains the name of the file on which <c>ShellExecute</c> will perform the action specified by vOperation.
            </para>
            </param>
            <param name="vArguments">
            <para>Type: <c>Variant</c></para>
            <para>A string that contains parameter values for the operation.</para>
            </param>
            <param name="vDirectory">
            <para>Type: <c>Variant</c></para>
            <para>
            The fully qualified path of the directory that contains the file specified by sFile. If this parameter is not specified, the
            current working directory is used.
            </para>
            </param>
            <param name="vOperation">
            <para>Type: <c>Variant</c></para>
            <para>
            The operation to be performed. This value is set to one of the verb strings that is supported by the file. For a discussion
            of verbs, see the Remarks section. If this parameter is not specified, the default operation is performed.
            </para>
            </param>
            <param name="vShow">
            <para>Type: <c>Variant</c></para>
            <para>
            A recommendation as to how the application window should be displayed initially. The application can ignore this
            recommendation. This parameter can be one of the following values. If this parameter is not specified, the application uses
            its default value.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>0</term>
            <term>Open the application with a hidden window.</term>
            </item>
            <item>
            <term>1</term>
            <term>
            Open the application with a normal window. If the window is minimized or maximized, the system restores it to its original
            size and position.
            </term>
            </item>
            <item>
            <term>2</term>
            <term>Open the application with a minimized window.</term>
            </item>
            <item>
            <term>3</term>
            <term>Open the application with a maximized window.</term>
            </item>
            <item>
            <term>4</term>
            <term>Open the application with its window at its most recent size and position. The active window remains active.</term>
            </item>
            <item>
            <term>5</term>
            <term>Open the application with its window at its current size and position.</term>
            </item>
            <item>
            <term>7</term>
            <term>Open the application with a minimized window. The active window remains active.</term>
            </item>
            <item>
            <term>10</term>
            <term>Open the application with its window in the default state specified by the application.</term>
            </item>
            </list>
            </param>
            <remarks>
            <para>This method is implemented and accessed through the <c>Shell.ShellExecute</c> method.</para>
            <para>
            This method is equivalent to launching one of the commands associated with a file's shortcut menu. Each command is
            represented by a verb string. The set of supported verbs varies from file to file. The most commonly supported verb is
            "open", which is also usually the default verb. Other verbs might be supported by only certain types of files. For further
            discussion of Shell verbs, see Launching Applications or Extending Shortcut Menus.
            </para>
            <para>This method is not currently available in Microsoft Visual Basic.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch5.FindPrinter(System.String,System.String,System.String)">
            <summary>Displays the <c>Find Printer</c> dialog box.</summary>
            <param name="Name">
            <para>Type: <c><c>BSTR</c></c></para>
            <para>A <c>String</c> that contains the printer name.</para>
            </param>
            <param name="location">
            <para>Type: <c><c>BSTR</c></c></para>
            <para>A <c>String</c> that contains the printer location.</para>
            </param>
            <param name="model">
            <para>Type: <c><c>BSTR</c></c></para>
            <para>A <c>String</c> that contains the printer model.</para>
            </param>
            <remarks>
            <para>This method is implemented and accessed through the <c>Shell.FindPrinter</c> method.</para>
            <para>
            If you assign strings to one or more of the optional parameters, they are displayed as default values in the associated edit
            control when the <c>Find Printer</c> dialog box is displayed. The user can either accept or override these values. If no
            value is assigned to a parameter, the associated edit box is empty and the user must enter a value.
            </para>
            <para>This method is not currently available in Microsoft Visual Basic.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch5.GetSystemInformation(System.String)">
            <summary>Retrieves system information.</summary>
            <param name="sName">
            <para>Type: <c><c>BSTR</c></c></para>
            <para>A <c>String</c> that specifies the system information that is being requested.</para>
            </param>
            <returns>
            <para>JScript</para>
            <para>Type: <c>Variant</c></para>
            <para>
            Returns the value of the requested system information. The return type depends on which system information is requested. See
            the Remarks section for details.
            </para>
            <para>VB</para>
            <para>Type: <c>Variant</c></para>
            <para>
            Returns the value of the requested system information. The return type depends on which system information is requested. See
            the Remarks section for details.
            </para>
            </returns>
            <remarks>
            <para>This method is implemented and accessed through the <c>Shell.GetSystemInformation</c> method.</para>
            <para>
            This method can be used to request many system information values. The following table gives the sName value that is used to
            request the information and the associated type of the returned value.
            </para>
            <para>sName</para>
            <para>Return type</para>
            <para>Description</para>
            <para>DirectoryServiceAvailable</para>
            <para><c>Boolean</c></para>
            <para>Set to <c>true</c> if the directory service is available; otherwise, <c>false</c>.</para>
            <para>DoubleClickTime</para>
            <para><c>Integer</c></para>
            <para>The double-click time, in milliseconds.</para>
            <para>ProcessorLevel</para>
            <para><c>Integer</c></para>
            <para>
            <c>Windows Vista and later</c>. The processor level. Returns 3, 4, or 5, for x386, x486, and Pentium-level processors, respectively.
            </para>
            <para>ProcessorSpeed</para>
            <para><c>Integer</c></para>
            <para>The processor speed, in megahertz (MHz).</para>
            <para>ProcessorArchitecture</para>
            <para><c>Integer</c></para>
            <para>
            The processor architecture. For details, see the discussion of the <c>wProcessorArchitecture</c> member of the
            <c>SYSTEM_INFO</c> structure.
            </para>
            <para>PhysicalMemoryInstalled</para>
            <para><c>Integer</c></para>
            <para>The amount of physical memory installed, in bytes.</para>
            <para>The following are valid only on Windows XP.</para>
            <para>IsOS_Professional</para>
            <para><c>Boolean</c></para>
            <para>Set to <c>true</c> if the operating system is Windows XP Professional Edition; otherwise, <c>false</c>.</para>
            <para>IsOS_Personal</para>
            <para><c>Boolean</c></para>
            <para>Set to <c>true</c> if the operating system is Windows XP Home Edition; otherwise, <c>false</c>.</para>
            <para>The following is valid only on Windows XP and later.</para>
            <para>IsOS_DomainMember</para>
            <para><c>Boolean</c></para>
            <para>Set to <c>true</c> if the computer is a member of a domain; otherwise, <c>false</c>.</para>
            <para>This method is not currently available in Microsoft Visual Basic.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch5.ServiceStart(System.String,System.Object)">
            <summary>Starts a named service.</summary>
            <param name="sServiceName">
            <para>Type: <c><c>BSTR</c></c></para>
            <para>A <c>String</c> that contains the name of the service.</para>
            </param>
            <param name="vPersistent">
            <para>Type: <c>Variant</c></para>
            <para>
            Set to <c>true</c> to have the service started automatically by the service control manager during system startup. Set to
            <c>false</c> to leave the service configuration unchanged.
            </para>
            </param>
            <returns>
            <para>JScript</para>
            <para>Type: <c>Variant*</c></para>
            <para>Returns <c>true</c> if successful; otherwise, <c>false</c>.</para>
            <para>VB</para>
            <para>Type: <c>Variant*</c></para>
            <para>Returns <c>true</c> if successful; otherwise, <c>false</c>.</para>
            </returns>
            <remarks>
            <para>This method is implemented and accessed through the <c>Shell.ServiceStart</c> method.</para>
            <para>
            The method returns <c>false</c> if the service has already been started. Before calling this method, you can call
            <c>Shell.IsServiceRunning</c> to ascertain the status of the service.
            </para>
            <para>This method is not currently available in Microsoft Visual Basic.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch5.ServiceStop(System.String,System.Object)">
            <summary>Stops a named service.</summary>
            <param name="sServiceName">
            <para>Type: <c><c>BSTR</c></c></para>
            <para>A <c>String</c> that contains the name of the service.</para>
            </param>
            <param name="vPersistent">
            <para>Type: <c>Variant</c></para>
            <para>
            Set to <c>true</c> to have the service started by the service control manager when <c>ServiceStart</c> is called. To leave
            the service configuration unchanged, set vPersistent to <c>false</c>.
            </para>
            </param>
            <returns>
            <para>JScript</para>
            <para>Type: <c>Variant*</c></para>
            <para>Returns <c>true</c> if successful; otherwise, <c>false</c>.</para>
            <para>VB</para>
            <para>Type: <c>Variant*</c></para>
            <para>Returns <c>true</c> if successful; otherwise, <c>false</c>.</para>
            </returns>
            <remarks>
            <para>This method is implemented and accessed through the <c>Shell.ServiceStop</c> method.</para>
            <para>
            The method returns <c>false</c> if the service has already been stopped. Before calling this method, you can call
            <c>Shell.IsServiceRunning</c> to ascertain the status of the service.
            </para>
            <para>This method is not currently available in Microsoft Visual Basic.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch5.IsServiceRunning(System.String)">
            <summary>Returns a value that indicates whether a particular service is running.</summary>
            <param name="sServiceName">
            <para>Type: <c><c>BSTR</c></c></para>
            <para>A <c>String</c> that contains the name of the service.</para>
            </param>
            <returns>
            <para>JScript</para>
            <para>Type: <c>Variant*</c></para>
            <para>Returns <c>true</c> if the service specified by sServiceName is running; otherwise, <c>false</c>.</para>
            <para>VB</para>
            <para>Type: <c>Variant*</c></para>
            <para>Returns <c>true</c> if the service specified by sServiceName is running; otherwise, <c>false</c>.</para>
            </returns>
            <remarks>
            <para>This method is implemented and accessed through the <c>Shell.IsServiceRunning</c> method.</para>
            <para>This method is not currently available in Microsoft Visual Basic.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch5.CanStartStopService(System.String)">
            <summary>Determines if the current user can start and stop the named service.</summary>
            <param name="sServiceName">
            <para>Type: <c>String</c></para>
            <para>A <c>String</c> that contains the name of the service.</para>
            </param>
            <returns>
            <para>JScript</para>
            <para>Type: <c>Variant*</c></para>
            <para>Returns <c>true</c> if the user can start and stop the service; otherwise, <c>false</c>.</para>
            <para>VB</para>
            <para>Type: <c>Variant*</c></para>
            <para>Returns <c>true</c> if the user can start and stop the service; otherwise, <c>false</c>.</para>
            </returns>
            <remarks>
            <para>This method is implemented and accessed through the <c>Shell.CanStartStopService</c> method.</para>
            <para>This method is not currently available in Microsoft Visual Basic.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch5.ShowBrowserBar(System.String,System.Object)">
            <summary>Displays a browser bar.</summary>
            <param name="sCLSID">
            <para>Type: <c><c>BSTR</c></c></para>
            <para>
            A <c>String</c> that contains the string form of the CLSID of the browser bar to be displayed. The object must be registered
            as an Explorer Bar object with a CATID_InfoBand component category. For further information, see Creating Custom Explorer
            Bars, Tool Bands, and Desk Bands.
            </para>
            </param>
            <param name="vShow">
            <para>Type: <c>Variant</c></para>
            <para>Set to <c>true</c> to show the browser bar or <c>false</c> to hide it.</para>
            </param>
            <returns>
            <para>JScript</para>
            <para>Type: <c>Variant*</c></para>
            <para>Returns <c>true</c> if successful; otherwise, <c>false</c>.</para>
            <para>VB</para>
            <para>Type: <c>Variant*</c></para>
            <para>Returns <c>true</c> if successful; otherwise, <c>false</c>.</para>
            </returns>
            <remarks>
            <para>This method is implemented and accessed through the <c>Shell.ShowBrowserBar</c> method.</para>
            <para>
            You can display one of the standard Explorer Bars by setting the sCLSID parameter to the CLSID of that Explorer Bar. The
            standard Explorer Bars and their CLSID strings are as follows:
            </para>
            <list type="table">
            <listheader>
            <term>Explorer Bar</term>
            <term>CLSID string</term>
            </listheader>
            <item>
            <term>Favorites</term>
            <term>{EFA24E61-B078-11d0-89E4-00C04FC9E26E}</term>
            </item>
            <item>
            <term>Folders</term>
            <term>{EFA24E64-B078-11d0-89E4-00C04FC9E26E}</term>
            </item>
            <item>
            <term>History</term>
            <term>{EFA24E62-B078-11d0-89E4-00C04FC9E26E}</term>
            </item>
            <item>
            <term>Search</term>
            <term>{30D02401-6A81-11d0-8274-00C04FD5AE38}</term>
            </item>
            </list>
            <para>This method is not currently available in Microsoft Visual Basic.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch5.AddToRecent(System.Object,System.String)">
            <summary>Adds a file to the most recently used (MRU) list.</summary>
            <param name="varFile">
            <para>Type: <c>Variant</c></para>
            <para>A <c>String</c> that contains the path of the file to add to the list of recently used documents.</para>
            <para><c>Windows Vista</c>: Set this parameter to <c>null</c> to clear the recent documents folder.</para>
            </param>
            <param name="bstrCategory">A <c>String</c> that contains the name of the category in which to place the file.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch5.WindowsSecurity">
            <summary>Displays the <c>Windows Security</c> dialog box.</summary>
            <remarks>
            This method displays the dialog box shown after pressing CTRL+ALT+DELETE or using the security option on the <c>Start</c> menu.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch5.ToggleDesktop">
            <summary>Displays or hides the desktop.</summary>
            <remarks>
            This method has the same effect as the <c>Show Desktop</c> button on the taskbar. It either hides all open windows to show
            the desktop or it hides the desktop by showing all open windows. The <c>ToggleDesktop</c> method does not display a user
            interface, it just invokes the toggle action.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch5.ExplorerPolicy(System.String)">
            <summary>Gets the value for a specified Windows Internet Explorer policy.</summary>
            <param name="bstrPolicyName">A <c>String</c> that specifies the name of the policy.</param>
            <returns>
            <para>JScript</para>
            <para>Type: <c>Variant*</c></para>
            <para>The value associated with the specified policy name.</para>
            <para>VB</para>
            <para>Type: <c>Variant*</c></para>
            <para>The value associated with the specified policy name.</para>
            </returns>
            <remarks>
            <para>Network Administrators can control and manage the computing environment of their users by setting policies.</para>
            <para>
            The specified value name must be within the <c>HKEY_CURRENT_USER</c>\ <c>Software</c>\ <c>Microsoft</c>\ <c>Windows</c>\
            <c>CurrentVersion</c>\ <c>Policies</c>\ <c>Explorer</c> subkey. If the value name does not exist then the method returns <c>null</c>.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch5.GetSetting(Vanara.PInvoke.Shell32.SSF)">
            <summary>Retrieves a global Shell setting.</summary>
            <param name="lSetting">
            A value that specifies the current Shell setting to retrieve. Only one setting can be retrieved in each call. The following
            values are recognized by this method.
            </param>
            <returns>Set to <c>true</c> if the setting exists; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch5.WindowSwitcher">
            <summary>Displays your open windows in a 3D stack that you can flip through.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IShellDispatch6">
            <summary>
            Extends the <c>IShellDispatch5</c> object. In addition to the properties and methods supported by <c>IShellDispatch5</c>,
            <c>IShellDispatch6</c> adds a method that displays the Apps Search pane.
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.IShellDispatch6.Application">
            <summary>
            <para>Contains an object that represents an application.</para>
            <para>This property is read-only.</para>
            </summary>
            <remarks>
            <para>This property is implemented and accessed through the <c>Shell.EjectPC</c> property.</para>
            <para>
            The <c>Application</c> property returns the automation object supported by the application that contains the WebBrowser
            control, if that object is accessible. Otherwise, this property returns the WebBrowser control's automation object.
            </para>
            <para>
            Use this property with the <c>Set</c> and <c>CreateObject</c> commands or with the <c>GetObject</c> command to create and
            manipulate an instance of the Windows Internet Explorer application.
            </para>
            </remarks>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.IShellDispatch6.Parent">
            <summary>
            <para>Retrieves an object that represents the parent of the current object.</para>
            <para>This property is read-only.</para>
            </summary>
            <remarks>This property is implemented and accessed through the <c>Shell.Parent</c> property.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch6.NameSpace(System.Object)">
            <summary>Creates and returns a <c>Folder</c> object for the specified folder.</summary>
            <param name="vDir">
            <para>Type: <c>Variant</c></para>
            <para>
            The folder for which to create the <c>Folder</c> object. This can be a string that specifies the path of the folder or one of
            the <c>ShellSpecialFolderConstants</c> values. Note that the constant names found in <c>ShellSpecialFolderConstants</c> are
            available in Visual Basic, but not in VBScript or JScript. In those cases, the numeric values must be used in their place.
            </para>
            </param>
            <returns>
            <para>JScript</para>
            <para>Type: <c><c>Folder</c>**</c></para>
            <para>
            Object reference to the <c>Folder</c> object for the specified folder. If the folder is not successfully created, this value
            returns <c>null</c>.
            </para>
            <para>VB</para>
            <para>Type: <c><c>Folder</c>**</c></para>
            <para>
            Object reference to the <c>Folder</c> object for the specified folder. If the folder is not successfully created, this value
            returns <c>null</c>.
            </para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.NameSpace</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch6.BrowseForFolder(System.Int32,System.String,System.Int32,System.Object)">
            <summary>
            Creates a dialog box that enables the user to select a folder and then returns the selected folder's <c>Folder</c> object.
            </summary>
            <param name="Hwnd">
            <para>Type: <c>Integer</c></para>
            <para>The handle to the parent window of the dialog box. This value can be zero.</para>
            </param>
            <param name="Title">
            <para>Type: <c><c>BSTR</c></c></para>
            <para>A <c>String</c> value that represents the title displayed inside the <c>Browse</c> dialog box.</para>
            </param>
            <param name="Options">
            <para>Type: <c>Integer</c></para>
            <para>
            An <c>Integer</c> value that contains the options for the method. This can be zero or a combination of the values listed
            under the <c>ulFlags</c> member of the <c>BROWSEINFO</c> structure.
            </para>
            </param>
            <param name="RootFolder">
            <para>Type: <c>Variant</c></para>
            <para>
            The root folder to use in the dialog box. The user cannot browse higher in the tree than this folder. If this value is not
            specified, the root folder used in the dialog box is the desktop. This value can be a string that specifies the path of the
            folder or one of the <c>ShellSpecialFolderConstants</c> values. Note that the constant names found in
            <c>ShellSpecialFolderConstants</c> are available in Visual Basic, but not in VBScript or JScript. In those cases, the numeric
            values must be used in their place.
            </para>
            </param>
            <returns>
            <para>JScript</para>
            <para>Type: <c>FOLDER**</c></para>
            <para>An object reference to the selected folder's <c>Folder</c> object.</para>
            <para>VB</para>
            <para>Type: <c>FOLDER**</c></para>
            <para>An object reference to the selected folder's <c>Folder</c> object.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.BrowseForFolder</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch6.Windows">
            <summary>
            Creates and returns a <c>ShellWindows</c> object. This object represents a collection of all of the open windows that belong
            to the Shell.
            </summary>
            <returns>
            <para>JScript</para>
            <para>Type: <c><c>IDispatch</c>**</c></para>
            <para>An object reference to the <c>ShellWindows</c> object.</para>
            <para>VB</para>
            <para>Type: <c><c>IDispatch</c>**</c></para>
            <para>An object reference to the <c>ShellWindows</c> object.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.Windows</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch6.Open(System.Object)">
            <summary>Opens the specified folder.</summary>
            <param name="vDir">
            <para>Type: <c>Variant</c></para>
            <para>
            A string that specifies the path of the folder or one of the <c>ShellSpecialFolderConstants</c> values. Note that the
            constant names found in <c>ShellSpecialFolderConstants</c> are available in Visual Basic, but not in VBScript or JScript. In
            those cases, the numeric values must be used in their place.
            </para>
            <para>
            If vDir is set to one of the <c>ShellSpecialFolderConstants</c> and the special folder does not exist, this function will
            create the folder.
            </para>
            </param>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.Open</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch6.Explore(System.Object)">
            <summary>Opens a specified folder in a Windows Explorer window.</summary>
            <param name="vDir">
            <para>Type: <c>Variant</c></para>
            <para>
            The folder to be displayed. This can be a string that specifies the path of the folder or one of the
            <c>ShellSpecialFolderConstants</c> values. Note that the constant names found in <c>ShellSpecialFolderConstants</c> are
            available in Visual Basic, but not in VBScript or JScript. In those cases, the numeric values must be used in their place.
            </para>
            </param>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.Explore</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch6.MinimizeAll">
            <summary>
            Minimizes all of the windows on the desktop. This method has the same effect as right-clicking the taskbar and selecting
            <c>Minimize All Windows</c> on older systems or clicking the <c>Show Desktop</c> icon on the taskbar.
            </summary>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.MinimizeAll</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch6.UndoMinimizeALL">
            <summary>
            Restores all desktop windows to the state they were in before the last <c>MinimizeAll</c> command. This method has the same
            effect as right-clicking the taskbar and selecting <c>Undo Minimize All Windows</c> (on older systems) or a second clicking
            of the <c>Show Desktop</c> icon in the taskbar.
            </summary>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.UndoMinimizeAll</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch6.FileRun">
            <summary>Displays the <c>Run</c> dialog to the user.</summary>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.FileRun</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch6.CascadeWindows">
            <summary>
            Cascades all of the windows on the desktop. This method has the same effect as right-clicking the taskbar and selecting
            <c>Cascade windows</c>.
            </summary>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.CascadeWindows</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch6.TileVertically">
            <summary>
            Tiles all of the windows on the desktop vertically. This method has the same effect as right-clicking the taskbar and
            selecting <c>Show windows side by side</c>.
            </summary>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.TileVertically</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch6.TileHorizontally">
            <summary>
            Tiles all of the windows on the desktop horizontally. This method has the same effect as right-clicking the taskbar and
            selecting <c>Show windows stacked</c>.
            </summary>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.TileHorizontally</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch6.ShutdownWindows">
            <summary>
            Displays the <c>Shut Down Windows</c> dialog box. This is the same as clicking the <c>Start</c> menu and selecting <c>Shut Down</c>.
            </summary>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.ShutdownWindows</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch6.Suspend">
            <summary>This method is not implemented.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch6.EjectPC">
            <summary>
            Ejects the computer from its docking station. This is the same as clicking the <c>Start</c> menu and selecting <c>Eject
            PC</c>, if your computer supports this command.
            </summary>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.EjectPC</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch6.SetTime">
            <summary>
            Displays the <c>Date and Time</c> dialog box. This method has the same effect as right-clicking the clock in the taskbar
            status area and selecting <c>Adjust date/time</c>.
            </summary>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.SetTime</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch6.TrayProperties">
            <summary>
            Displays the <c>Taskbar and Start Menu Properties</c> dialog box. This method has the same effect as right-clicking the
            taskbar and selecting <c>Properties</c>.
            </summary>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.TrayProperties</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch6.Help">
            <summary>
            Displays the Windows Help and Support window. This method has the same effect as clicking the <c>Start</c> menu and selecting
            <c>Help and Support</c>.
            </summary>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.Help</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch6.FindFiles">
            <summary>
            Displays the <c>Find: All Files</c> dialog box. This is the same as clicking the <c>Start</c> menu and then selecting <c>Search</c>.
            </summary>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.FindFiles</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch6.FindComputer">
            <summary>
            Displays the <c>Search Results: Computers</c> dialog box. The dialog box shows the result of the search for a specified computer.
            </summary>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.FindComputer</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch6.RefreshMenu">
            <summary>Refreshes the contents of the <c>Start</c> menu. Used only with systems preceding Windows XP.</summary>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>
            <para>This method is implemented and accessed through the <c>Shell.TrayProperties</c> method.</para>
            <para>
            The functionality that <c>RefreshMenu</c> provides is handled automatically under Windows XP or later. Do not call this
            method on Windows XP or later.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch6.ControlPanelItem(System.String)">
            <summary>
            Runs the specified Control Panel application. If the application is already open, it will activate the running instance.
            </summary>
            <param name="bstrDir">
            <para>Type: <c><c>BSTR</c></c></para>
            <para>The Control Panel application's file name.</para>
            </param>
            <returns>
            <para>JScript</para>
            <para>This method does not return a value.</para>
            <para>VB</para>
            <para>This method does not return a value.</para>
            </returns>
            <remarks>This method is implemented and accessed through the <c>Shell.ControlPanelItem</c> method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch6.IsRestricted(System.String,System.String)">
            <summary>Retrieves a group's restriction setting from the registry.</summary>
            <param name="sGroup">
            <para>Type: <c><c>BSTR</c></c></para>
            <para>
            A <c>String</c> that contains the group name. This value is the name of a registry subkey under which to check for the restriction.
            </para>
            </param>
            <param name="sRestriction">
            <para>Type: <c><c>BSTR</c></c></para>
            <para>A <c>String</c> that contains the restriction whose value is to be retrieved.</para>
            </param>
            <returns>
            <para>JScript</para>
            <para>Type: <c>Integer*</c></para>
            <para>The value of the restriction. If the specified restriction is not found, the return value is 0.</para>
            <para>VB</para>
            <para>Type: <c>Integer*</c></para>
            <para>The value of the restriction. If the specified restriction is not found, the return value is 0.</para>
            </returns>
            <remarks>
            <para>This method is implemented and accessed through the <c>Shell.IsRestricted</c> method.</para>
            <para><c>IsRestricted</c> first looks for a subkey name that matches sGroup under the following key.</para>
            <para>
            Restrictions are declared as values of the individual policy subkeys. If the restriction named in sRestriction is found in
            the subkey named in sGroup, <c>IsRestricted</c> returns the restriction's current value. If the restriction is not found
            under <c>HKEY_LOCAL_MACHINE</c>, the same subkey is checked under <c>HKEY_CURRENT_USER</c>.
            </para>
            <para>This method is not currently available in Microsoft Visual Basic.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch6.ShellExecute(System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>Performs a specified operation on a specified file.</summary>
            <param name="sFile">
            <para>Type: <c><c>BSTR</c></c></para>
            <para>
            A <c>String</c> that contains the name of the file on which <c>ShellExecute</c> will perform the action specified by vOperation.
            </para>
            </param>
            <param name="vArguments">
            <para>Type: <c>Variant</c></para>
            <para>A string that contains parameter values for the operation.</para>
            </param>
            <param name="vDirectory">
            <para>Type: <c>Variant</c></para>
            <para>
            The fully qualified path of the directory that contains the file specified by sFile. If this parameter is not specified, the
            current working directory is used.
            </para>
            </param>
            <param name="vOperation">
            <para>Type: <c>Variant</c></para>
            <para>
            The operation to be performed. This value is set to one of the verb strings that is supported by the file. For a discussion
            of verbs, see the Remarks section. If this parameter is not specified, the default operation is performed.
            </para>
            </param>
            <param name="vShow">
            <para>Type: <c>Variant</c></para>
            <para>
            A recommendation as to how the application window should be displayed initially. The application can ignore this
            recommendation. This parameter can be one of the following values. If this parameter is not specified, the application uses
            its default value.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>0</term>
            <term>Open the application with a hidden window.</term>
            </item>
            <item>
            <term>1</term>
            <term>
            Open the application with a normal window. If the window is minimized or maximized, the system restores it to its original
            size and position.
            </term>
            </item>
            <item>
            <term>2</term>
            <term>Open the application with a minimized window.</term>
            </item>
            <item>
            <term>3</term>
            <term>Open the application with a maximized window.</term>
            </item>
            <item>
            <term>4</term>
            <term>Open the application with its window at its most recent size and position. The active window remains active.</term>
            </item>
            <item>
            <term>5</term>
            <term>Open the application with its window at its current size and position.</term>
            </item>
            <item>
            <term>7</term>
            <term>Open the application with a minimized window. The active window remains active.</term>
            </item>
            <item>
            <term>10</term>
            <term>Open the application with its window in the default state specified by the application.</term>
            </item>
            </list>
            </param>
            <remarks>
            <para>This method is implemented and accessed through the <c>Shell.ShellExecute</c> method.</para>
            <para>
            This method is equivalent to launching one of the commands associated with a file's shortcut menu. Each command is
            represented by a verb string. The set of supported verbs varies from file to file. The most commonly supported verb is
            "open", which is also usually the default verb. Other verbs might be supported by only certain types of files. For further
            discussion of Shell verbs, see Launching Applications or Extending Shortcut Menus.
            </para>
            <para>This method is not currently available in Microsoft Visual Basic.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch6.FindPrinter(System.String,System.String,System.String)">
            <summary>Displays the <c>Find Printer</c> dialog box.</summary>
            <param name="Name">
            <para>Type: <c><c>BSTR</c></c></para>
            <para>A <c>String</c> that contains the printer name.</para>
            </param>
            <param name="location">
            <para>Type: <c><c>BSTR</c></c></para>
            <para>A <c>String</c> that contains the printer location.</para>
            </param>
            <param name="model">
            <para>Type: <c><c>BSTR</c></c></para>
            <para>A <c>String</c> that contains the printer model.</para>
            </param>
            <remarks>
            <para>This method is implemented and accessed through the <c>Shell.FindPrinter</c> method.</para>
            <para>
            If you assign strings to one or more of the optional parameters, they are displayed as default values in the associated edit
            control when the <c>Find Printer</c> dialog box is displayed. The user can either accept or override these values. If no
            value is assigned to a parameter, the associated edit box is empty and the user must enter a value.
            </para>
            <para>This method is not currently available in Microsoft Visual Basic.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch6.GetSystemInformation(System.String)">
            <summary>Retrieves system information.</summary>
            <param name="sName">
            <para>Type: <c><c>BSTR</c></c></para>
            <para>A <c>String</c> that specifies the system information that is being requested.</para>
            </param>
            <returns>
            <para>JScript</para>
            <para>Type: <c>Variant</c></para>
            <para>
            Returns the value of the requested system information. The return type depends on which system information is requested. See
            the Remarks section for details.
            </para>
            <para>VB</para>
            <para>Type: <c>Variant</c></para>
            <para>
            Returns the value of the requested system information. The return type depends on which system information is requested. See
            the Remarks section for details.
            </para>
            </returns>
            <remarks>
            <para>This method is implemented and accessed through the <c>Shell.GetSystemInformation</c> method.</para>
            <para>
            This method can be used to request many system information values. The following table gives the sName value that is used to
            request the information and the associated type of the returned value.
            </para>
            <para>sName</para>
            <para>Return type</para>
            <para>Description</para>
            <para>DirectoryServiceAvailable</para>
            <para><c>Boolean</c></para>
            <para>Set to <c>true</c> if the directory service is available; otherwise, <c>false</c>.</para>
            <para>DoubleClickTime</para>
            <para><c>Integer</c></para>
            <para>The double-click time, in milliseconds.</para>
            <para>ProcessorLevel</para>
            <para><c>Integer</c></para>
            <para>
            <c>Windows Vista and later</c>. The processor level. Returns 3, 4, or 5, for x386, x486, and Pentium-level processors, respectively.
            </para>
            <para>ProcessorSpeed</para>
            <para><c>Integer</c></para>
            <para>The processor speed, in megahertz (MHz).</para>
            <para>ProcessorArchitecture</para>
            <para><c>Integer</c></para>
            <para>
            The processor architecture. For details, see the discussion of the <c>wProcessorArchitecture</c> member of the
            <c>SYSTEM_INFO</c> structure.
            </para>
            <para>PhysicalMemoryInstalled</para>
            <para><c>Integer</c></para>
            <para>The amount of physical memory installed, in bytes.</para>
            <para>The following are valid only on Windows XP.</para>
            <para>IsOS_Professional</para>
            <para><c>Boolean</c></para>
            <para>Set to <c>true</c> if the operating system is Windows XP Professional Edition; otherwise, <c>false</c>.</para>
            <para>IsOS_Personal</para>
            <para><c>Boolean</c></para>
            <para>Set to <c>true</c> if the operating system is Windows XP Home Edition; otherwise, <c>false</c>.</para>
            <para>The following is valid only on Windows XP and later.</para>
            <para>IsOS_DomainMember</para>
            <para><c>Boolean</c></para>
            <para>Set to <c>true</c> if the computer is a member of a domain; otherwise, <c>false</c>.</para>
            <para>This method is not currently available in Microsoft Visual Basic.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch6.ServiceStart(System.String,System.Object)">
            <summary>Starts a named service.</summary>
            <param name="sServiceName">
            <para>Type: <c><c>BSTR</c></c></para>
            <para>A <c>String</c> that contains the name of the service.</para>
            </param>
            <param name="vPersistent">
            <para>Type: <c>Variant</c></para>
            <para>
            Set to <c>true</c> to have the service started automatically by the service control manager during system startup. Set to
            <c>false</c> to leave the service configuration unchanged.
            </para>
            </param>
            <returns>
            <para>JScript</para>
            <para>Type: <c>Variant*</c></para>
            <para>Returns <c>true</c> if successful; otherwise, <c>false</c>.</para>
            <para>VB</para>
            <para>Type: <c>Variant*</c></para>
            <para>Returns <c>true</c> if successful; otherwise, <c>false</c>.</para>
            </returns>
            <remarks>
            <para>This method is implemented and accessed through the <c>Shell.ServiceStart</c> method.</para>
            <para>
            The method returns <c>false</c> if the service has already been started. Before calling this method, you can call
            <c>Shell.IsServiceRunning</c> to ascertain the status of the service.
            </para>
            <para>This method is not currently available in Microsoft Visual Basic.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch6.ServiceStop(System.String,System.Object)">
            <summary>Stops a named service.</summary>
            <param name="sServiceName">
            <para>Type: <c><c>BSTR</c></c></para>
            <para>A <c>String</c> that contains the name of the service.</para>
            </param>
            <param name="vPersistent">
            <para>Type: <c>Variant</c></para>
            <para>
            Set to <c>true</c> to have the service started by the service control manager when <c>ServiceStart</c> is called. To leave
            the service configuration unchanged, set vPersistent to <c>false</c>.
            </para>
            </param>
            <returns>
            <para>JScript</para>
            <para>Type: <c>Variant*</c></para>
            <para>Returns <c>true</c> if successful; otherwise, <c>false</c>.</para>
            <para>VB</para>
            <para>Type: <c>Variant*</c></para>
            <para>Returns <c>true</c> if successful; otherwise, <c>false</c>.</para>
            </returns>
            <remarks>
            <para>This method is implemented and accessed through the <c>Shell.ServiceStop</c> method.</para>
            <para>
            The method returns <c>false</c> if the service has already been stopped. Before calling this method, you can call
            <c>Shell.IsServiceRunning</c> to ascertain the status of the service.
            </para>
            <para>This method is not currently available in Microsoft Visual Basic.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch6.IsServiceRunning(System.String)">
            <summary>Returns a value that indicates whether a particular service is running.</summary>
            <param name="sServiceName">
            <para>Type: <c><c>BSTR</c></c></para>
            <para>A <c>String</c> that contains the name of the service.</para>
            </param>
            <returns>
            <para>JScript</para>
            <para>Type: <c>Variant*</c></para>
            <para>Returns <c>true</c> if the service specified by sServiceName is running; otherwise, <c>false</c>.</para>
            <para>VB</para>
            <para>Type: <c>Variant*</c></para>
            <para>Returns <c>true</c> if the service specified by sServiceName is running; otherwise, <c>false</c>.</para>
            </returns>
            <remarks>
            <para>This method is implemented and accessed through the <c>Shell.IsServiceRunning</c> method.</para>
            <para>This method is not currently available in Microsoft Visual Basic.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch6.CanStartStopService(System.String)">
            <summary>Determines if the current user can start and stop the named service.</summary>
            <param name="sServiceName">
            <para>Type: <c>String</c></para>
            <para>A <c>String</c> that contains the name of the service.</para>
            </param>
            <returns>
            <para>JScript</para>
            <para>Type: <c>Variant*</c></para>
            <para>Returns <c>true</c> if the user can start and stop the service; otherwise, <c>false</c>.</para>
            <para>VB</para>
            <para>Type: <c>Variant*</c></para>
            <para>Returns <c>true</c> if the user can start and stop the service; otherwise, <c>false</c>.</para>
            </returns>
            <remarks>
            <para>This method is implemented and accessed through the <c>Shell.CanStartStopService</c> method.</para>
            <para>This method is not currently available in Microsoft Visual Basic.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch6.ShowBrowserBar(System.String,System.Object)">
            <summary>Displays a browser bar.</summary>
            <param name="sCLSID">
            <para>Type: <c><c>BSTR</c></c></para>
            <para>
            A <c>String</c> that contains the string form of the CLSID of the browser bar to be displayed. The object must be registered
            as an Explorer Bar object with a CATID_InfoBand component category. For further information, see Creating Custom Explorer
            Bars, Tool Bands, and Desk Bands.
            </para>
            </param>
            <param name="vShow">
            <para>Type: <c>Variant</c></para>
            <para>Set to <c>true</c> to show the browser bar or <c>false</c> to hide it.</para>
            </param>
            <returns>
            <para>JScript</para>
            <para>Type: <c>Variant*</c></para>
            <para>Returns <c>true</c> if successful; otherwise, <c>false</c>.</para>
            <para>VB</para>
            <para>Type: <c>Variant*</c></para>
            <para>Returns <c>true</c> if successful; otherwise, <c>false</c>.</para>
            </returns>
            <remarks>
            <para>This method is implemented and accessed through the <c>Shell.ShowBrowserBar</c> method.</para>
            <para>
            You can display one of the standard Explorer Bars by setting the sCLSID parameter to the CLSID of that Explorer Bar. The
            standard Explorer Bars and their CLSID strings are as follows:
            </para>
            <list type="table">
            <listheader>
            <term>Explorer Bar</term>
            <term>CLSID string</term>
            </listheader>
            <item>
            <term>Favorites</term>
            <term>{EFA24E61-B078-11d0-89E4-00C04FC9E26E}</term>
            </item>
            <item>
            <term>Folders</term>
            <term>{EFA24E64-B078-11d0-89E4-00C04FC9E26E}</term>
            </item>
            <item>
            <term>History</term>
            <term>{EFA24E62-B078-11d0-89E4-00C04FC9E26E}</term>
            </item>
            <item>
            <term>Search</term>
            <term>{30D02401-6A81-11d0-8274-00C04FD5AE38}</term>
            </item>
            </list>
            <para>This method is not currently available in Microsoft Visual Basic.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch6.AddToRecent(System.Object,System.String)">
            <summary>Adds a file to the most recently used (MRU) list.</summary>
            <param name="varFile">
            <para>Type: <c>Variant</c></para>
            <para>A <c>String</c> that contains the path of the file to add to the list of recently used documents.</para>
            <para><c>Windows Vista</c>: Set this parameter to <c>null</c> to clear the recent documents folder.</para>
            </param>
            <param name="bstrCategory">A <c>String</c> that contains the name of the category in which to place the file.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch6.WindowsSecurity">
            <summary>Displays the <c>Windows Security</c> dialog box.</summary>
            <remarks>
            This method displays the dialog box shown after pressing CTRL+ALT+DELETE or using the security option on the <c>Start</c> menu.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch6.ToggleDesktop">
            <summary>Displays or hides the desktop.</summary>
            <remarks>
            This method has the same effect as the <c>Show Desktop</c> button on the taskbar. It either hides all open windows to show
            the desktop or it hides the desktop by showing all open windows. The <c>ToggleDesktop</c> method does not display a user
            interface, it just invokes the toggle action.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch6.ExplorerPolicy(System.String)">
            <summary>Gets the value for a specified Windows Internet Explorer policy.</summary>
            <param name="bstrPolicyName">A <c>String</c> that specifies the name of the policy.</param>
            <returns>
            <para>JScript</para>
            <para>Type: <c>Variant*</c></para>
            <para>The value associated with the specified policy name.</para>
            <para>VB</para>
            <para>Type: <c>Variant*</c></para>
            <para>The value associated with the specified policy name.</para>
            </returns>
            <remarks>
            <para>Network Administrators can control and manage the computing environment of their users by setting policies.</para>
            <para>
            The specified value name must be within the <c>HKEY_CURRENT_USER</c>\ <c>Software</c>\ <c>Microsoft</c>\ <c>Windows</c>\
            <c>CurrentVersion</c>\ <c>Policies</c>\ <c>Explorer</c> subkey. If the value name does not exist then the method returns <c>null</c>.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch6.GetSetting(Vanara.PInvoke.Shell32.SSF)">
            <summary>Retrieves a global Shell setting.</summary>
            <param name="lSetting">
            A value that specifies the current Shell setting to retrieve. Only one setting can be retrieved in each call. The following
            values are recognized by this method.
            </param>
            <returns>Set to <c>true</c> if the setting exists; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch6.WindowSwitcher">
            <summary>Displays your open windows in a 3D stack that you can flip through.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellDispatch6.SearchCommand">
            <summary>Displays the Apps Search pane, which normally appears when you begin to type a search term from the Start screen.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IShellFolderViewDual">
            <summary>Exposes methods that modify the view and select items in the current folder.</summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.IShellFolderViewDual.Application">
            <summary>
            <para>Contains the object's Application object.</para>
            <para>This property is read-only.</para>
            </summary>
            <remarks>
            <para>
            The <c>Application</c> property returns the automation object supported by the application that contains the WebBrowser
            control, if that object is accessible. Otherwise, this property returns the WebBrowser control's automation object.
            </para>
            <para>
            Use this property with the <c>Set</c> and <c>CreateObject</c> commands or with the <c>GetObject</c> command to create and
            manipulate an instance of the Windows Internet Explorer application.
            </para>
            </remarks>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.IShellFolderViewDual.Parent">
            <summary>This property is not implemented.</summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.IShellFolderViewDual.Folder">
            <summary>
            <para>Gets a <c>Folder</c> object that represents the view.</para>
            <para>This property is read-only.</para>
            </summary>
            <remarks><c>Folder</c> can only be called on the local system. It will not work when run on a webpage over HTTP or UNC.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellFolderViewDual.SelectedItems">
            <summary>Gets a <c>FolderItems</c> object that represents all of the selected items in the view.</summary>
            <returns>
            <para>Type: <c><c>FolderItems</c>**</c></para>
            <para>An object reference to the <c>FolderItems</c> object.</para>
            </returns>
            <remarks>
            <c>SelectedItems</c> can only be called on the local system. It will not work when run on a webpage over HTTP or UNC.
            </remarks>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.IShellFolderViewDual.FocusedItem">
            <summary>
            <para>Gets a <c>FolderItem</c> object that represents the item that has the input focus.</para>
            <para>This property is read-only.</para>
            </summary>
            <remarks>
            <c>FocusedItem</c> can only be called on the local system. It will not work when run on a webpage over HTTP or UNC.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellFolderViewDual.SelectItem(System.Object@,System.Int32)">
            <summary>Sets the selection state of an item in the view.</summary>
            <param name="vItem">
            <para>Type: <c>Variant*</c></para>
            <para>The <c>FolderItem</c> object for which the selection state will be set.</para>
            </param>
            <param name="dwFlags">
            <para>Type: <c>Integer</c></para>
            <para>A set of flags that indicate the new selection state. This can be one or more of the following values.</para>
            <list type="bullet">
            <item>(0) Deselect the item.</item>
            <item>(1) Select the item.</item>
            <item>(3) Put the item in edit mode.</item>
            <item>(4) Deselect all but the specified item.</item>
            <item>(8) Ensure the item is displayed in the view.</item>
            <item>(16) Give the item the focus.</item>
            </list>
            </param>
            <returns>This method does not return a value.</returns>
            <remarks>
            <c>FocusedItem</c> can only be called on the local system. It will not work when run on a webpage over HTTP or UNC.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellFolderViewDual.PopupItemMenu(Vanara.PInvoke.Shell32.FolderItem,System.Object,System.Object)">
            <summary>Creates a shortcut menu for the specified item and returns the selected command string.</summary>
            <param name="vItem">
            <para>Type: <c>Variant</c></para>
            <para>The <c>FolderItem</c> object for which the shortcut menu will be created.</para>
            </param>
            <param name="vx">
            <para>Type: <c>Variant</c></para>
            <para>The horizontal position of the menu, in screen coordinates.</para>
            </param>
            <param name="vy">
            <para>Type: <c>Variant</c></para>
            <para>The vertical position of the menu, in screen coordinates.</para>
            </param>
            <returns>
            <para>Type: <c><c>BSTR</c>*</c></para>
            <para>The <c>String</c> that receives the command string.</para>
            </returns>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.IShellFolderViewDual.Script">
            <summary>
            <para>[This property is not supported in Windows XP or later.]</para>
            <para>Contains the scripting object for the view.</para>
            <para>This property is read-only.</para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.IShellFolderViewDual.ViewOptions">
            <summary>
            <para>Gets a set of flags that indicate the current options of the view.</para>
            <para>This property is read-only.</para>
            </summary>
            <remarks>
            <c>FocusedItem</c> can only be called on the local system. It will not work when run on a webpage over HTTP or UNC.
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IShellFolderViewDual2">
            <summary>Exposes methods that modify the view and select items in the current folder.</summary>
            <remarks>This interface also provides the methods of the IShellFolderViewDual interface, from which it inherits.</remarks>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.IShellFolderViewDual2.Application">
            <summary>
            <para>Contains the object's Application object.</para>
            <para>This property is read-only.</para>
            </summary>
            <remarks>
            <para>
            The <c>Application</c> property returns the automation object supported by the application that contains the WebBrowser
            control, if that object is accessible. Otherwise, this property returns the WebBrowser control's automation object.
            </para>
            <para>
            Use this property with the <c>Set</c> and <c>CreateObject</c> commands or with the <c>GetObject</c> command to create and
            manipulate an instance of the Windows Internet Explorer application.
            </para>
            </remarks>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.IShellFolderViewDual2.Parent">
            <summary>This property is not implemented.</summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.IShellFolderViewDual2.Folder">
            <summary>
            <para>Gets a <c>Folder</c> object that represents the view.</para>
            <para>This property is read-only.</para>
            </summary>
            <remarks><c>Folder</c> can only be called on the local system. It will not work when run on a webpage over HTTP or UNC.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellFolderViewDual2.SelectedItems">
            <summary>Gets a <c>FolderItems</c> object that represents all of the selected items in the view.</summary>
            <returns>
            <para>Type: <c><c>FolderItems</c>**</c></para>
            <para>An object reference to the <c>FolderItems</c> object.</para>
            </returns>
            <remarks>
            <c>SelectedItems</c> can only be called on the local system. It will not work when run on a webpage over HTTP or UNC.
            </remarks>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.IShellFolderViewDual2.FocusedItem">
            <summary>
            <para>Gets a <c>FolderItem</c> object that represents the item that has the input focus.</para>
            <para>This property is read-only.</para>
            </summary>
            <remarks>
            <c>FocusedItem</c> can only be called on the local system. It will not work when run on a webpage over HTTP or UNC.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellFolderViewDual2.SelectItem(System.Object@,System.Int32)">
            <summary>Sets the selection state of an item in the view.</summary>
            <param name="vItem">
            <para>Type: <c>Variant*</c></para>
            <para>The <c>FolderItem</c> object for which the selection state will be set.</para>
            </param>
            <param name="dwFlags">
            <para>Type: <c>Integer</c></para>
            <para>A set of flags that indicate the new selection state. This can be one or more of the following values.</para>
            <list type="bullet">
            <item>(0) Deselect the item.</item>
            <item>(1) Select the item.</item>
            <item>(3) Put the item in edit mode.</item>
            <item>(4) Deselect all but the specified item.</item>
            <item>(8) Ensure the item is displayed in the view.</item>
            <item>(16) Give the item the focus.</item>
            </list>
            </param>
            <returns>This method does not return a value.</returns>
            <remarks>
            <c>FocusedItem</c> can only be called on the local system. It will not work when run on a webpage over HTTP or UNC.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellFolderViewDual2.PopupItemMenu(Vanara.PInvoke.Shell32.FolderItem,System.Object,System.Object)">
            <summary>Creates a shortcut menu for the specified item and returns the selected command string.</summary>
            <param name="vItem">
            <para>Type: <c>Variant</c></para>
            <para>The <c>FolderItem</c> object for which the shortcut menu will be created.</para>
            </param>
            <param name="vx">
            <para>Type: <c>Variant</c></para>
            <para>The horizontal position of the menu, in screen coordinates.</para>
            </param>
            <param name="vy">
            <para>Type: <c>Variant</c></para>
            <para>The vertical position of the menu, in screen coordinates.</para>
            </param>
            <returns>
            <para>Type: <c><c>BSTR</c>*</c></para>
            <para>The <c>String</c> that receives the command string.</para>
            </returns>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.IShellFolderViewDual2.Script">
            <summary>
            <para>[This property is not supported in Windows XP or later.]</para>
            <para>Contains the scripting object for the view.</para>
            <para>This property is read-only.</para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.IShellFolderViewDual2.ViewOptions">
            <summary>
            <para>Gets a set of flags that indicate the current options of the view.</para>
            <para>This property is read-only.</para>
            </summary>
            <remarks>
            <c>FocusedItem</c> can only be called on the local system. It will not work when run on a webpage over HTTP or UNC.
            </remarks>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.IShellFolderViewDual2.CurrentViewMode">
            <summary>Gets the current view mode of the current folder.</summary>
            <returns>
            <para>Type: <c>uint*</c></para>
            <para>An unsigned integer that represents the current view mode. For a list of possible values see FOLDERVIEWMODE.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellFolderViewDual2.SelectItemRelative(System.Int32)">
            <summary>Selects an item relative to the current item.</summary>
            <param name="iRelative">
            <para>Type: <c>int</c></para>
            <para>The offset of the item to be selected in relation to the current item.</para>
            </param>
            <remarks>
            The current item is defined as the item in the view with the SVSI_SELECTIONMARK state. If there is no item with
            SVSI_SELECTIONMARK, the method returns S_FALSE and does nothing.
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IShellFolderViewDual3">
            <summary>Exposes methods that modify the current folder view.</summary>
            <remarks>
            This interface also provides the methods of the IShellFolderViewDual and IShellFolderViewDual2 interfaces, from which it inherits.
            </remarks>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.IShellFolderViewDual3.Application">
            <summary>
            <para>Contains the object's Application object.</para>
            <para>This property is read-only.</para>
            </summary>
            <remarks>
            <para>
            The <c>Application</c> property returns the automation object supported by the application that contains the WebBrowser
            control, if that object is accessible. Otherwise, this property returns the WebBrowser control's automation object.
            </para>
            <para>
            Use this property with the <c>Set</c> and <c>CreateObject</c> commands or with the <c>GetObject</c> command to create and
            manipulate an instance of the Windows Internet Explorer application.
            </para>
            </remarks>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.IShellFolderViewDual3.Parent">
            <summary>This property is not implemented.</summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.IShellFolderViewDual3.Folder">
            <summary>
            <para>Gets a <c>Folder</c> object that represents the view.</para>
            <para>This property is read-only.</para>
            </summary>
            <remarks><c>Folder</c> can only be called on the local system. It will not work when run on a webpage over HTTP or UNC.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellFolderViewDual3.SelectedItems">
            <summary>Gets a <c>FolderItems</c> object that represents all of the selected items in the view.</summary>
            <returns>
            <para>Type: <c><c>FolderItems</c>**</c></para>
            <para>An object reference to the <c>FolderItems</c> object.</para>
            </returns>
            <remarks>
            <c>SelectedItems</c> can only be called on the local system. It will not work when run on a webpage over HTTP or UNC.
            </remarks>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.IShellFolderViewDual3.FocusedItem">
            <summary>
            <para>Gets a <c>FolderItem</c> object that represents the item that has the input focus.</para>
            <para>This property is read-only.</para>
            </summary>
            <remarks>
            <c>FocusedItem</c> can only be called on the local system. It will not work when run on a webpage over HTTP or UNC.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellFolderViewDual3.SelectItem(System.Object@,System.Int32)">
            <summary>Sets the selection state of an item in the view.</summary>
            <param name="vItem">
            <para>Type: <c>Variant*</c></para>
            <para>The <c>FolderItem</c> object for which the selection state will be set.</para>
            </param>
            <param name="dwFlags">
            <para>Type: <c>Integer</c></para>
            <para>A set of flags that indicate the new selection state. This can be one or more of the following values.</para>
            <list type="bullet">
            <item>(0) Deselect the item.</item>
            <item>(1) Select the item.</item>
            <item>(3) Put the item in edit mode.</item>
            <item>(4) Deselect all but the specified item.</item>
            <item>(8) Ensure the item is displayed in the view.</item>
            <item>(16) Give the item the focus.</item>
            </list>
            </param>
            <returns>This method does not return a value.</returns>
            <remarks>
            <c>FocusedItem</c> can only be called on the local system. It will not work when run on a webpage over HTTP or UNC.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellFolderViewDual3.PopupItemMenu(Vanara.PInvoke.Shell32.FolderItem,System.Object,System.Object)">
            <summary>Creates a shortcut menu for the specified item and returns the selected command string.</summary>
            <param name="vItem">
            <para>Type: <c>Variant</c></para>
            <para>The <c>FolderItem</c> object for which the shortcut menu will be created.</para>
            </param>
            <param name="vx">
            <para>Type: <c>Variant</c></para>
            <para>The horizontal position of the menu, in screen coordinates.</para>
            </param>
            <param name="vy">
            <para>Type: <c>Variant</c></para>
            <para>The vertical position of the menu, in screen coordinates.</para>
            </param>
            <returns>
            <para>Type: <c><c>BSTR</c>*</c></para>
            <para>The <c>String</c> that receives the command string.</para>
            </returns>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.IShellFolderViewDual3.Script">
            <summary>
            <para>[This property is not supported in Windows XP or later.]</para>
            <para>Contains the scripting object for the view.</para>
            <para>This property is read-only.</para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.IShellFolderViewDual3.ViewOptions">
            <summary>
            <para>Gets a set of flags that indicate the current options of the view.</para>
            <para>This property is read-only.</para>
            </summary>
            <remarks>
            <c>FocusedItem</c> can only be called on the local system. It will not work when run on a webpage over HTTP or UNC.
            </remarks>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.IShellFolderViewDual3.CurrentViewMode">
            <summary>Gets the current view mode of the current folder.</summary>
            <returns>
            <para>Type: <c>uint*</c></para>
            <para>An unsigned integer that represents the current view mode. For a list of possible values see FOLDERVIEWMODE.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellFolderViewDual3.SelectItemRelative(System.Int32)">
            <summary>Selects an item relative to the current item.</summary>
            <param name="iRelative">
            <para>Type: <c>int</c></para>
            <para>The offset of the item to be selected in relation to the current item.</para>
            </param>
            <remarks>
            The current item is defined as the item in the view with the SVSI_SELECTIONMARK state. If there is no item with
            SVSI_SELECTIONMARK, the method returns S_FALSE and does nothing.
            </remarks>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.IShellFolderViewDual3.GroupBy">
            <summary>Gets or sets the column name used for grouping the folder view.</summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.IShellFolderViewDual3.FolderFlags">
            <summary>Gets or sets the settings for the current folder.</summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.IShellFolderViewDual3.SortColumns">
            <summary>Gets or sets the names of the columns used to sort the current folder.</summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.IShellFolderViewDual3.IconSize">
            <summary>Gets or sets the icon size setting for the current folder.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellFolderViewDual3.FilterView(System.String)">
            <summary>Sets the filter on the contents of the current view.</summary>
            <param name="bstrFilterText">The string that names the filter view for the current folder.</param>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IShellLinkDual">
            <summary>
            Manages Shell links. This object makes much of the functionality of the <c>IShellLink</c> interface available to scripting applications.
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.IShellLinkDual.Path">
            <summary>
            <para>Gets or sets the path to the link object.</para>
            <para>This property is read/write.</para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.IShellLinkDual.Description">
            <summary>
            <para>Gets or sets the description of the link.</para>
            <para>This property is read/write.</para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.IShellLinkDual.WorkingDirectory">
            <summary>
            <para>Gets or sets the working directory specified in the link.</para>
            <para>This property is read/write.</para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.IShellLinkDual.Arguments">
            <summary>
            <para>Contains a link's arguments.</para>
            <para>This property is read/write.</para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.IShellLinkDual.Hotkey">
            <summary>
            <para>Gets or sets the keyboard shortcut for the link.</para>
            <para>This property is read/write.</para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.IShellLinkDual.ShowCommand">
            <summary>
            <para>Gets or sets the initial display state (sized, minimized, or maximized) of the link's command.</para>
            <para>This property is read/write.</para>
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellLinkDual.Resolve(System.Int32)">
            <summary>Looks for the target of a Shell link, even if the target has been moved or renamed.</summary>
            <param name="fFlags">
            <para>Type: <c>Integer</c></para>
            <para>Flags that specify the action to be taken. This can be a combination of the following values:</para>
            <list type="bullet">
            <item>
            (1)Do not display a dialog box if the link cannot be resolved. When this flag is set, the high-order word of fFlags specifies
            a time-out duration, in milliseconds. The method returns if the link cannot be resolved within the time-out duration. If the
            high-order word is set to zero, the time-out duration defaults to 3000 milliseconds (3 seconds).
            </item>
            <item>(4)If the link has changed, update its path and list of identifiers.</item>
            <item>(8)Do not update the link information.</item>
            <item>(16)Do not execute the search heuristics.</item>
            <item>(32)Do not use distributed link tracking.</item>
            <item>
            (64)Disable distributed link tracking. By default, distributed link tracking tracks removable media across multiple devices
            based on the volume name. It also uses the UNC path to track remote file systems whose drive letter has changed. Setting this
            flag disables both types of tracking.
            </item>
            <item>(128)Call the Windows Installer.</item>
            </list>
            </param>
            <remarks>
            This method is essentially identical in functionality to <c>Resolve</c>. For further discussion of link resolution, see the
            Remarks section of that page.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellLinkDual.GetIconLocation(System.String@)">
            <summary>Gets the location of the icon assigned to the link.</summary>
            <param name="sPath">When this method returns, it holds the fully qualified path of the file that contains the icon.</param>
            <returns>Returns the icon's index in the file specified by sPath.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellLinkDual.SetIconLocation(System.String,System.Int32)">
            <summary>Sets the location of the icon assigned to the link.</summary>
            <param name="sPath">The fully qualified path of the file that contains the icon.</param>
            <param name="iIndex">The index of the icon in the file specified by sPath.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellLinkDual.Save(System.Object)">
            <summary>Saves all changes to the link.</summary>
            <param name="sFile">
            <para>Type: <c>Variant</c></para>
            <para>
            A string value that contains the fully qualified path of the file where the new link information is to be saved. If no file
            is specified, the current file is used.
            </para>
            </param>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IShellLinkDual2">
            <summary>Extends the <c>ShellLinkObject</c> object and supports one additional property.</summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.IShellLinkDual2.Path">
            <summary>
            <para>Gets or sets the path to the link object.</para>
            <para>This property is read/write.</para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.IShellLinkDual2.Description">
            <summary>
            <para>Gets or sets the description of the link.</para>
            <para>This property is read/write.</para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.IShellLinkDual2.WorkingDirectory">
            <summary>
            <para>Gets or sets the working directory specified in the link.</para>
            <para>This property is read/write.</para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.IShellLinkDual2.Arguments">
            <summary>
            <para>Contains a link's arguments.</para>
            <para>This property is read/write.</para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.IShellLinkDual2.Hotkey">
            <summary>
            <para>Gets or sets the keyboard shortcut for the link.</para>
            <para>This property is read/write.</para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.IShellLinkDual2.ShowCommand">
            <summary>
            <para>Gets or sets the initial display state (sized, minimized, or maximized) of the link's command.</para>
            <para>This property is read/write.</para>
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellLinkDual2.Resolve(System.Int32)">
            <summary>Looks for the target of a Shell link, even if the target has been moved or renamed.</summary>
            <param name="fFlags">
            <para>Type: <c>Integer</c></para>
            <para>Flags that specify the action to be taken. This can be a combination of the following values:</para>
            <list type="bullet">
            <item>
            (1)Do not display a dialog box if the link cannot be resolved. When this flag is set, the high-order word of fFlags specifies
            a time-out duration, in milliseconds. The method returns if the link cannot be resolved within the time-out duration. If the
            high-order word is set to zero, the time-out duration defaults to 3000 milliseconds (3 seconds).
            </item>
            <item>(4)If the link has changed, update its path and list of identifiers.</item>
            <item>(8)Do not update the link information.</item>
            <item>(16)Do not execute the search heuristics.</item>
            <item>(32)Do not use distributed link tracking.</item>
            <item>
            (64)Disable distributed link tracking. By default, distributed link tracking tracks removable media across multiple devices
            based on the volume name. It also uses the UNC path to track remote file systems whose drive letter has changed. Setting this
            flag disables both types of tracking.
            </item>
            <item>(128)Call the Windows Installer.</item>
            </list>
            </param>
            <remarks>
            This method is essentially identical in functionality to <c>Resolve</c>. For further discussion of link resolution, see the
            Remarks section of that page.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellLinkDual2.GetIconLocation(System.String@)">
            <summary>Gets the location of the icon assigned to the link.</summary>
            <param name="sPath">When this method returns, it holds the fully qualified path of the file that contains the icon.</param>
            <returns>Returns the icon's index in the file specified by sPath.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellLinkDual2.SetIconLocation(System.String,System.Int32)">
            <summary>Sets the location of the icon assigned to the link.</summary>
            <param name="sPath">The fully qualified path of the file that contains the icon.</param>
            <param name="iIndex">The index of the icon in the file specified by sPath.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellLinkDual2.Save(System.Object)">
            <summary>Saves all changes to the link.</summary>
            <param name="sFile">
            <para>Type: <c>Variant</c></para>
            <para>
            A string value that contains the fully qualified path of the file where the new link information is to be saved. If no file
            is specified, the current file is used.
            </para>
            </param>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.IShellLinkDual2.Target">
            <summary>Contains the link object's target.</summary>
            <value>An object expression that evaluates to the target's FolderItem object.</value>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IWebWizardHost">
            <summary>Exposes methods that enable HTML pages which are hosted in a wizard extension to communicate with the wizard.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IWebWizardHost.FinalBack">
            <summary>Navigates to the client-side page immediately preceding the page hosting the server-side HTML pages.</summary>
            <remarks>
            When the wizard displays the first server-side page and the user clicks the <c>Back</c> button, the server invokes
            <c>FinalBack</c> when notified of that event by the client's event handler.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IWebWizardHost.FinalNext">
            <summary>
            Navigates to the client-side wizard page that follows the page that hosts the server-side HTML pages, or finishes the wizard
            if there are no further client-side pages.
            </summary>
            <remarks>
            When the wizard is displaying the last server-side HTML page and the user clicks the <c>Next</c> or <c>Finish</c> button, the
            server invokes <c>FinalNext</c> in that button's event handler.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IWebWizardHost.Cancel">
            <summary>Simulates a <c>Cancel</c> button click.</summary>
            <remarks>The client is responsible for responding to this method with the expected behavior by closing the wizard.</remarks>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.IWebWizardHost.Caption">
            <summary>This property is not implemented.</summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.IWebWizardHost.Item(System.String)">
            <summary>Sets or retrieves a property's current value.</summary>
            <value>The property value.</value>
            <param name="bstrPropertyName">Name of the property.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IWebWizardHost.SetWizardButtons(System.Boolean,System.Boolean,System.Boolean)">
            <summary>Updates the <c>Back</c>, <c>Next</c>, and <c>Finish</c> buttons in the client's wizard frame.</summary>
            <param name="vfEnableBack">Enables the <c>Back</c> button.</param>
            <param name="vfEnableNext">Enables the <c>Next</c> button.</param>
            <param name="vfLastPage">Enables the <c>Finish</c> button. States that this is the last server-side page.</param>
            <remarks>
            Be sure to implement handler functions in each server-side page for OnBack() and OnNext(), corresponding to the wizard
            buttons <c>Back</c> and <c>Next</c>. The OnBack() and OnNext() functions respond to <c>SetWizardButtons</c>. At the
            appropriate time, the OnNext() function calls <c>SetWizardButtons</c> with vbLastPage= <c>true</c>, which can enable a
            <c>Finish</c> button. OnNext() also calls <c>FinalNext</c> when a user clicks the <c>Finish</c> button.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IWebWizardHost.SetHeaderText(System.String,System.String)">
            <summary>
            Sets the title and subtitle that appear in the wizard header. In general, the client will display the header above the HTML
            and below the title bar.
            </summary>
            <param name="bstrHeaderTitle">String containing the title.</param>
            <param name="bstrHeaderSubtitle">String containing the subtitle.</param>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IWebWizardHost2">
            <summary>Undocumented.</summary>
            <seealso cref="T:Vanara.PInvoke.Shell32.IWebWizardHost"/>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IWebWizardHost2.FinalBack">
            <summary>Navigates to the client-side page immediately preceding the page hosting the server-side HTML pages.</summary>
            <remarks>
            When the wizard displays the first server-side page and the user clicks the <c>Back</c> button, the server invokes
            <c>FinalBack</c> when notified of that event by the client's event handler.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IWebWizardHost2.FinalNext">
            <summary>
            Navigates to the client-side wizard page that follows the page that hosts the server-side HTML pages, or finishes the wizard
            if there are no further client-side pages.
            </summary>
            <remarks>
            When the wizard is displaying the last server-side HTML page and the user clicks the <c>Next</c> or <c>Finish</c> button, the
            server invokes <c>FinalNext</c> in that button's event handler.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IWebWizardHost2.Cancel">
            <summary>Simulates a <c>Cancel</c> button click.</summary>
            <remarks>The client is responsible for responding to this method with the expected behavior by closing the wizard.</remarks>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.IWebWizardHost2.Caption">
            <summary>This property is not implemented.</summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.IWebWizardHost2.Item(System.String)">
            <summary>Sets or retrieves a property's current value.</summary>
            <value>The property value.</value>
            <param name="bstrPropertyName">Name of the property.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IWebWizardHost2.SetWizardButtons(System.Boolean,System.Boolean,System.Boolean)">
            <summary>Updates the <c>Back</c>, <c>Next</c>, and <c>Finish</c> buttons in the client's wizard frame.</summary>
            <param name="vfEnableBack">Enables the <c>Back</c> button.</param>
            <param name="vfEnableNext">Enables the <c>Next</c> button.</param>
            <param name="vfLastPage">Enables the <c>Finish</c> button. States that this is the last server-side page.</param>
            <remarks>
            Be sure to implement handler functions in each server-side page for OnBack() and OnNext(), corresponding to the wizard
            buttons <c>Back</c> and <c>Next</c>. The OnBack() and OnNext() functions respond to <c>SetWizardButtons</c>. At the
            appropriate time, the OnNext() function calls <c>SetWizardButtons</c> with vbLastPage= <c>true</c>, which can enable a
            <c>Finish</c> button. OnNext() also calls <c>FinalNext</c> when a user clicks the <c>Finish</c> button.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IWebWizardHost2.SetHeaderText(System.String,System.String)">
            <summary>
            Sets the title and subtitle that appear in the wizard header. In general, the client will display the header above the HTML
            and below the title bar.
            </summary>
            <param name="bstrHeaderTitle">String containing the title.</param>
            <param name="bstrHeaderSubtitle">String containing the subtitle.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IWebWizardHost2.SignString(System.String)">
            <summary>Undocumented.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.CAutoComplete">
            <summary>An autocomplete object (CLSID_AutoComplete).</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.DISPID">
            <summary>Define the events for shell IDispatch interfaces.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DISPID.DISPID_SELECTIONCHANGED">
            <summary>The Selected Items Changed</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DISPID.DISPID_FILELISTENUMDONE">
            <summary>Done enumerating the shell folder</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DISPID.DISPID_VERBINVOKED">
            <summary>A verb (either from the main or context menu) was invoked in the folder view</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DISPID.DISPID_DEFAULTVERBINVOKED">
            <summary>default verb (either from the main or context menu) was invoked in the folder view</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DISPID.DISPID_BEGINDRAG">
            <summary>user clicked on an item</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DISPID.DISPID_VIEWMODECHANGED">
            <summary>The ListViewMode Changed</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DISPID.DISPID_NOITEMSTATE_CHANGED">
            <summary>We went from 0->some or some->0 items in the view</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DISPID.DISPID_CONTENTSCHANGED">
            <summary>contents of the view have changed somehow</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DISPID.DISPID_FOCUSCHANGED">
            <summary>The Focused Item Changed</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DISPID.DISPID_CHECKSTATECHANGED">
            <summary>Checkbox state changed.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DISPID.DISPID_ORDERCHANGED">
            <summary>The order of items changed</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DISPID.DISPID_VIEWPAINTDONE">
            <summary>The enumerated items have been inserted into the view and painted</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DISPID.DISPID_COLUMNSCHANGED">
            <summary>The set of visible details columns changed</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DISPID.DISPID_CTRLMOUSEWHEEL">
            <summary>The mousewheel has been moved while the CTRL key was down</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DISPID.DISPID_SORTDONE">
            <summary>Done sorting the shell folder</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DISPID.DISPID_ICONSIZECHANGED">
            <summary>The icon size changed in the view</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DISPID.DISPID_FOLDERCHANGED">
            <summary>The state of the folder has changed</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DISPID.DISPID_FILTERINVOKED">
            <summary>Some filter changed</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DISPID.DISPID_WORDWHEELEDITED">
            <summary>Text in WordWheel changed</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DISPID.DISPID_SELECTEDITEMCHANGED">
            <summary>One of the selected items has changed (not the same as a selection change)</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DISPID.DISPID_EXPLORERWINDOWREADY">
            <summary>Explorer window is open, been painted and is ready</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DISPID.DISPID_UPDATEIMAGE">
            <summary>A SHCNE_UPDATEIMAGE notification was received</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DISPID.DISPID_INITIALENUMERATIONDONE">
            <summary>Used internally by specialized views like the start menu. Not fired when the data source finishes enumeration. To detect when the data source is done enumerating, use DISPID_FILELISTENUMDONE.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DISPID.DISPID_ENTERPRISEIDCHANGED">
            <summary>Fired when enterprise id is changed in Common File Dialog during save as</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DISPID.DISPID_ENTERPRESSED">
            <summary>The user hit Enter or Return</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DISPID.DISPID_SEARCHCOMMAND_START">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DISPID.DISPID_SEARCHCOMMAND_COMPLETE">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DISPID.DISPID_SEARCHCOMMAND_ABORT">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DISPID.DISPID_SEARCHCOMMAND_UPDATE">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DISPID.DISPID_SEARCHCOMMAND_PROGRESSTEXT">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DISPID.DISPID_SEARCHCOMMAND_ERROR">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DISPID.DISPID_SEARCHCOMMAND_RESTORE">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DISPID.DISPID_IADCCTL_DIRTY">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DISPID.DISPID_IADCCTL_PUBCAT">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DISPID.DISPID_IADCCTL_SORT">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DISPID.DISPID_IADCCTL_FORCEX86">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DISPID.DISPID_IADCCTL_SHOWPOSTSETUP">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DISPID.DISPID_IADCCTL_ONDOMAIN">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DISPID.DISPID_IADCCTL_DEFAULTCAT">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.FileSearchBand">
            <summary>Undocumented.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.Shell">
            <summary>
            Represents the objects in the Shell. Methods are provided to control the Shell and to execute commands within the Shell. There
            are also methods to obtain other Shell-related objects.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.ShellDispatchInproc">
            <summary>
            Represents an object in the Shell. Methods are provided to control the Shell and to execute commands within the Shell. There are
            also methods to obtain other Shell-related objects.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.ShellFolderItem">
            <summary>
            Extends the <c>FolderItem</c> object. In addition to the properties and methods supported by <c>FolderItem</c>,
            <c>ShellFolderItem</c> has two additional methods.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.ShellFolderView">
            <summary>
            Represents the objects in a view and provides properties and methods used to obtain information about the contents of the view.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.ShellFolderViewOC">
            <summary>
            Represents the objects in a view and provides properties and methods used to obtain information about the contents of the view.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.ShellLinkObject">
            <summary>
            Manages Shell links. This object makes much of the functionality of the <c>IShellLink</c> interface available to scripting applications.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CLSID_ACLCustomMRU">
            <summary>CLSID_ACLCustomMRU</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CLSID_ACLHistory">
            <summary>CLSID_ACLHistory</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CLSID_ACListISF">
            <summary>CLSID_ACListISF</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CLSID_ACLMRU">
            <summary>CLSID_ACLMRU</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CLSID_ACLMulti">
            <summary>CLSID_ACLMulti</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CLSID_AutoComplete">
            <summary>CLSID_AutoComplete</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CLSID_CAnchorBrowsePropertyPage">
            <summary>CLSID_CAnchorBrowsePropertyPage</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CLSID_CDocBrowsePropertyPage">
            <summary>CLSID_CDocBrowsePropertyPage</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CLSID_CFSIconOverlayManager">
            <summary>CLSID_CFSIconOverlayManager</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CLSID_CImageBrowsePropertyPage">
            <summary>CLSID_CImageBrowsePropertyPage</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CLSID_ControlPanel">
            <summary>CLSID_ControlPanel</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CLSID_CUrlHistory">
            <summary>CLSID_CUrlHistory</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CLSID_CURLSearchHook">
            <summary>CLSID_CURLSearchHook</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CLSID_DarwinAppPublisher">
            <summary>CLSID_DarwinAppPublisher</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CLSID_DocHostUIHandler">
            <summary>CLSID_DocHostUIHandler</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CLSID_DragDropHelper">
            <summary>CLSID_DragDropHelper</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CLSID_FileTypes">
            <summary>CLSID_FileTypes</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CLSID_FolderItem">
            <summary>CLSID_FolderItem</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CLSID_FolderItemsMultiLevel">
            <summary>CLSID_FolderItemsMultiLevel</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CLSID_FolderShortcut">
            <summary>CLSID_FolderShortcut</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CLSID_HWShellExecute">
            <summary>CLSID_HWShellExecute</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CLSID_Internet">
            <summary>CLSID_Internet</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CLSID_InternetButtons">
            <summary>CLSID_InternetButtons</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CLSID_ISFBand">
            <summary>CLSID_ISFBand</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CLSID_LinkColumnProvider">
            <summary>CLSID_LinkColumnProvider</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CLSID_MenuBand">
            <summary>CLSID_MenuBand</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CLSID_MenuBandSite">
            <summary>CLSID_MenuBandSite</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CLSID_MenuToolbarBase">
            <summary>CLSID_MenuToolbarBase</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CLSID_MSOButtons">
            <summary>CLSID_MSOButtons</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CLSID_MyComputer">
            <summary>CLSID_MyComputer</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CLSID_MyDocuments">
            <summary>CLSID_MyDocuments</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CLSID_NetworkDomain">
            <summary>CLSID_NetworkDomain</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CLSID_NetworkServer">
            <summary>CLSID_NetworkServer</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CLSID_NetworkShare">
            <summary>CLSID_NetworkShare</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CLSID_NewMenu">
            <summary>CLSID_NewMenu</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CLSID_Printers">
            <summary>CLSID_Printers</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CLSID_ProgressDialog">
            <summary>CLSID_ProgressDialog</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CLSID_QueryAssociations">
            <summary>CLSID_QueryAssociations</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CLSID_QuickLinks">
            <summary>CLSID_QuickLinks</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CLSID_RecycleBin">
            <summary>CLSID_RecycleBin</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CLSID_ShellFldSetExt">
            <summary>CLSID_ShellFldSetExt</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CLSID_ShellThumbnailDiskCache">
            <summary>CLSID_ShellThumbnailDiskCache</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CLSID_ToolbarExtButtons">
            <summary>CLSID_ToolbarExtButtons</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SID_SCommDlgBrowser">
            <summary>Service ID to find common dialog browser.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SID_SGetViewFromViewDual">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SID_ShellFolderViewCB">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SID_ShellTaskScheduler">
            <summary>SID for IShellTaskScheduler.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SID_SInPlaceBrowser">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SID_SInternetExplorer">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SID_SMenuBandBKContextMenu">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SID_SMenuBandBottom">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SID_SMenuBandBottomSelected">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SID_SMenuBandChild">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SID_SMenuBandContextMenuModifier">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SID_SMenuBandParent">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SID_SMenuBandTop">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SID_SMenuPopup">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SID_SProgressUI">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SID_SSearchBoxInfo">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SID_SShellBrowser">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SID_SShellDesktop">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SID_STopLevelBrowser">
            <summary>Service ID to find top-level browser.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SID_STopWindow">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SID_SUrlHistory">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SID_SWebBrowserApp">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SID_SWebBrowserEventsService">
            <summary>Undocumented.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.BHID">
            <summary>Reference to a GUID that specifies which handler will be created.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.BHID.BHID_SFObject">
            <summary>Restricts usage to BindToObject.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.BHID.BHID_SFUIObject">
            <summary>Restricts usage to GetUIObjectOf.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.BHID.BHID_SFViewObject">
            <summary>Restricts usage to CreateViewObject.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.BHID.BHID_Storage">
            <summary>Attempts to retrieve the storage RIID, but defaults to Shell implementation on failure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.BHID.BHID_Stream">
            <summary>Restricts usage to IStream.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.BHID.BHID_RandomAccessStream">
            <summary>Introduced in Windows 8: Gets an IRandomAccessStream object for the item.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.BHID.BHID_LinkTargetItem">
            <summary>
            CLSID_ShellItem is initialized with the target of this item (can only be SFGAO_LINK). See GetAttributesOf for a description
            of SFGAO_LINK.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.BHID.BHID_StorageEnum">
            <summary>If the item is a folder, gets an IEnumShellItems object with which to enumerate the storage contents.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.BHID.BHID_Transfer">
            <summary>Introduced in Windows Vista: If the item is a folder, gets an ITransferSource or ITransferDestination object.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.BHID.BHID_PropertyStore">
            <summary>Introduced in Windows Vista: Restricts usage to IPropertyStore or IPropertyStoreFactory.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.BHID.BHID_ThumbnailHandler">
            <summary>Introduced in Windows Vista: Restricts usage to IExtractImage or IThumbnailProvider.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.BHID.BHID_EnumItems">
            <summary>
            Introduced in Windows Vista: If the item is a folder, gets an IEnumShellItems object that enumerates all items in the
            folder. This includes folders, nonfolders, and hidden items.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.BHID.BHID_DataObject">
            <summary>Introduced in Windows Vista: Gets an IDataObject object for use with an item or an array of items.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.BHID.BHID_AssociationArray">
            <summary>Introduced in Windows Vista: Gets an IQueryAssociations object for use with an item or an array of items.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.BHID.BHID_Filter">
            <summary>Introduced in Windows Vista: Restricts usage to IFilter.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.BHID.BHID_EnumAssocHandlers">
            <summary>
            Introduced in Windows 7: Gets an IEnumAssocHandlers object used to enumerate the recommended association handlers for the
            given item.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.BHID.BHID_FilePlaceholder">
            <summary>Introduced in Windows 8.1: Gets an object used to provide placeholder file functionality.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.FOLDERTYPEID">
            <summary>The FOLDERTYPEID values represent a view template applied to a folder, usually based on its intended use and contents.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERTYPEID.FOLDERTYPEID_AccountPictures">
            <summary>Introduced in Windows 8. The folder contains the image files used with the current user's account.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERTYPEID.FOLDERTYPEID_Communications">
            <summary>
            Introduced in Windows 7. A folder that contains communication-related files such as emails, calendar information, and
            contact information.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERTYPEID.FOLDERTYPEID_CompressedFolder">
            <summary>The folder is a compressed archive, such as a compressed file with a .zip file name extension.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERTYPEID.FOLDERTYPEID_Contacts">
            <summary>A folder that contains email contact information.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERTYPEID.FOLDERTYPEID_ControlPanelCategory">
            <summary>The Control Panel in category view. This is a virtual folder.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERTYPEID.FOLDERTYPEID_ControlPanelClassic">
            <summary>The Control Panel in classic view. This is a virtual folder.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERTYPEID.FOLDERTYPEID_Documents">
            <summary>The folder contains document files. These can be of mixed format—.doc, .txt, and others.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERTYPEID.FOLDERTYPEID_Games">
            <summary>The folder is the Games folder found in the Start menu.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERTYPEID.FOLDERTYPEID_Generic">
            <summary>Introduced in Windows 7. The folder does not fall under one of the other FOLDERTYPEID categories.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERTYPEID.FOLDERTYPEID_GenericLibrary">
            <summary>Introduced in Windows 7. The folder is a library, but of no specified type.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERTYPEID.FOLDERTYPEID_GenericSearchResults">
            <summary>Introduced in Windows 7. The folder contains search results, but they are of mixed or no specific type.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERTYPEID.FOLDERTYPEID_Invalid">
            <summary>
            The folder is invalid. There are several things that can cause this judgement: hard disk errors, file system errors, and
            compression errors among them.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERTYPEID.FOLDERTYPEID_Music">
            <summary>Introduced in Windows 7. The folder contains audio files, such as .mp3 and .wma files.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERTYPEID.FOLDERTYPEID_NetworkExplorer">
            <summary>The Network Explorer folder.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERTYPEID.FOLDERTYPEID_OpenSearch">
            <summary>Introduced in Windows 7. The folder contains federated search OpenSearch results.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERTYPEID.FOLDERTYPEID_OtherUsers">
            <summary>Introduced in Windows 7.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERTYPEID.FOLDERTYPEID_Pictures">
            <summary>Image files, such as .jpg, .tif, or .png files.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERTYPEID.FOLDERTYPEID_Printers">
            <summary>Printers that have been added to the system. This is a virtual folder.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERTYPEID.FOLDERTYPEID_PublishedItems">
            <summary>Introduced in Windows 7. A homegroup user's libraries.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERTYPEID.FOLDERTYPEID_RecordedTV">
            <summary>Introduced in Windows 7. The folder contains recorded television broadcasts.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERTYPEID.FOLDERTYPEID_RecycleBin">
            <summary>The Recycle Bin. This is a virtual folder.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERTYPEID.FOLDERTYPEID_SavedGames">
            <summary>Introduced in Windows 7. The folder contains saved game states.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERTYPEID.FOLDERTYPEID_SearchConnector">
            <summary>Introduced in Windows 7.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERTYPEID.FOLDERTYPEID_SearchHome">
            <summary>Introduced in Windows 7.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERTYPEID.FOLDERTYPEID_Searches">
            <summary>Introduced in Windows 7. A user's Searches folder, normally found at C:\Users\username\Searches.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERTYPEID.FOLDERTYPEID_SoftwareExplorer">
            <summary>The software explorer window used by the Add or Remove Programs control panel icon.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERTYPEID.FOLDERTYPEID_StartMenu">
            <summary>Introduced in Windows 7. A user's Start Menu folder, normally found at C:\Users\username\Start Menu.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERTYPEID.FOLDERTYPEID_StorageProviderDocuments">
            <summary>
            Introduced in Windows 8.1. The folder is a MSFT_StorageProvider folder and contains document files. These can be of mixed
            format—.doc, .txt, and others.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERTYPEID.FOLDERTYPEID_StorageProviderGeneric">
            <summary>
            Introduced in Windows 8.1. The folder is a MSFT_StorageProvider folder and does not fall under one of the other FOLDERTYPEID categories.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERTYPEID.FOLDERTYPEID_StorageProviderMusic">
            <summary>
            Introduced in Windows 8.1. The folder is a MSFT_StorageProvider folder and contains audio files, such as .mp3 and .wma files.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERTYPEID.FOLDERTYPEID_StorageProviderPictures">
            <summary>
            Introduced in Windows 8.1. The folder is a MSFT_StorageProvider folder and contains image files, such as .jpg, .tif, or .png files.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERTYPEID.FOLDERTYPEID_StorageProviderVideos">
            <summary>
            Introduced in Windows 8.1. The folder is a MSFT_StorageProvider folder and contains video files. These can be of mixed
            format—.wmv, .mov, and others.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERTYPEID.FOLDERTYPEID_UserFiles">
            <summary>The folder is the FOLDERID_UsersFiles folder.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERTYPEID.FOLDERTYPEID_UsersLibraries">
            <summary>Introduced in Windows 7. The view shown when the user clicks the Windows Explorer button on the taskbar.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERTYPEID.FOLDERTYPEID_Videos">
            <summary>Introduced in Windows 7. The folder contains video files. These can be of mixed format—.wmv, .mov, and others.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.WM_USER">
            <summary>
            The WM_USER constant is used by applications to help define private messages for use by private window classes, usually of the
            form WM_USER+X, where X is an integer value.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.BrowseCallbackProc">
            <summary>
            Specifies an application-defined callback function used to send messages to, and process messages from, a Browse dialog box
            displayed in response to a call to SHBrowseForFolder.
            </summary>
            <param name="hwnd">The window handle of the browse dialog box.</param>
            <param name="uMsg">The dialog box event that generated the message.</param>
            <param name="lParam">
            A value whose meaning depends on the event specified in uMsg as follows:
            <list type="table">
            <listheader>
            <term>uMsg</term>
            <definition>lParam</definition>
            </listheader>
            <item>
            <term>BFFM_INITIALIZED</term>
            <definition>Not used, value is NULL.</definition>
            </item>
            <item>
            <term>BFFM_IUNKNOWN</term>
            <definition>A pointer to an IUnknown interface.</definition>
            </item>
            <item>
            <term>BFFM_SELCHANGED</term>
            <definition>A PIDL that identifies the newly selected item.</definition>
            </item>
            <item>
            <term>BFFM_VALIDATEFAILED</term>
            <definition>A pointer to a string that contains the invalid name. An application can use this data in an error dialog informing
            the user that the name was not valid.</definition>
            </item>
            </list>
            </param>
            <param name="lpData">
            An application-defined value that was specified in the lParam member of the BROWSEINFO structure used in the call to SHBrowseForFolder.
            </param>
            <returns>
            Returns zero except in the case of BFFM_VALIDATEFAILED. For that flag, returns zero to dismiss the dialog or nonzero to keep the
            dialog displayed.
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.BrowseForFolderMessages">
            <summary>Enumeration with dialog messages used by the SHBrowseForFolder dialog box.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.BrowseForFolderMessages.BFFM_INITIALIZED">
            <summary>This message indicates that the Browse For Folder dialog box finished initializing.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.BrowseForFolderMessages.BFFM_SELCHANGED">
            <summary>This message indicates that the selection in the dialog box changed.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.BrowseForFolderMessages.BFFM_VALIDATEFAILEDA">
            <summary>
            This message indicates that the user typed an invalid name into the edit box of the Browse For Folder dialog box.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.BrowseForFolderMessages.BFFM_VALIDATEFAILEDW">
            <summary>
            This message indicates that the user typed an invalid name into the edit box of the Browse For Folder dialog box.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.BrowseForFolderMessages.BFFM_IUNKNOWN">
            <summary>An IUnknown interface is available to the dialog box.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.BrowseForFolderMessages.BFFM_SETSTATUSTEXTA">
            <summary>This message sets the status text in the Browse For Folder dialog box.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.BrowseForFolderMessages.BFFM_ENABLEOK">
            <summary>This message enables or disables the OK button for the Browse For Folder dialog box.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.BrowseForFolderMessages.BFFM_SETSELECTIONA">
            <summary>This message selects the specified folder in the Browse For Folder dialog box.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.BrowseForFolderMessages.BFFM_SETSELECTIONW">
            <summary>This message selects the specified folder in the Browse For Folder dialog box.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.BrowseForFolderMessages.BFFM_SETSTATUSTEXTW">
            <summary>This message sets the status text in the Browse For Folder dialog box.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.BrowseForFolderMessages.BFFM_SETOKTEXT">
            <summary>Version 6.0 or later. Sets the text that is displayed on the dialog box's OK button.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.BrowseForFolderMessages.BFFM_SETEXPANDED">
            <summary>
            Version 6.0 or later. Specifies the path of a folder to expand in the Browse dialog box. The path can be specified as a
            Unicode string or a PIDL.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.BrowseInfoFlag">
            <summary>Flags enumeration to specify the dialog style.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.BrowseInfoFlag.BIF_RETURNONLYFSDIRS">
            <summary>
            Only return file system directories. If the user selects folders that are not part of the file system, the OK button is
            grayed. <note>The OK button remains enabled for "\\server" items, as well as "\\server\share" and directory items. However,
            if the user selects a "\\server" item, passing the PIDL returned by SHBrowseForFolder to SHGetPathFromIDList fails.</note>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.BrowseInfoFlag.BIF_DONTGOBELOWDOMAIN">
            <summary>Do not include network folders below the domain level in the dialog box's tree view control.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.BrowseInfoFlag.BIF_STATUSTEXT">
            <summary>
            Include a status area in the dialog box. The callback function can set the status text by sending messages to the dialog box.
            This flag is not supported when BIF_NEWDIALOGSTYLE is specified.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.BrowseInfoFlag.BIF_RETURNFSANCESTORS">
            <summary>
            Only return file system ancestors. An ancestor is a subfolder that is beneath the root folder in the namespace hierarchy. If
            the user selects an ancestor of the root folder that is not part of the file system, the OK button is grayed.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.BrowseInfoFlag.BIF_EDITBOX">
            <summary>Version 4.71. Include an edit control in the browse dialog box that allows the user to type the name of an item.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.BrowseInfoFlag.BIF_VALIDATE">
            <summary>
            Version 4.71. If the user types an invalid name into the edit box, the browse dialog box calls the application's
            BrowseCallbackProc with the BFFM_VALIDATEFAILED message. This flag is ignored if BIF_EDITBOX is not specified.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.BrowseInfoFlag.BIF_NEWDIALOGSTYLE">
            <summary>
            Version 5.0. Use the new user interface. Setting this flag provides the user with a larger dialog box that can be resized.
            The dialog box has several new capabilities, including: drag-and-drop capability within the dialog box, reordering, shortcut
            menus, new folders, delete, and other shortcut menu commands. <note>If COM is initialized through CoInitializeEx with the
            COINIT_MULTITHREADED flag set, SHBrowseForFolder fails if BIF_NEWDIALOGSTYLE is passed.</note>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.BrowseInfoFlag.BIF_USENEWUI">
            <summary>
            Version 5.0. Use the new user interface, including an edit box. This flag is equivalent to BIF_EDITBOX | BIF_NEWDIALOGSTYLE.
            <note>If COM is initialized through CoInitializeEx with the COINIT_MULTITHREADED flag set, SHBrowseForFolder fails if
            BIF_USENEWUI is passed.</note>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.BrowseInfoFlag.BIF_BROWSEINCLUDEURLS">
            <summary>
            Version 5.0. The browse dialog box can display URLs. The BIF_USENEWUI and BIF_BROWSEINCLUDEFILES flags must also be set. If
            any of these three flags are not set, the browser dialog box rejects URLs. Even when these flags are set, the browse dialog
            box displays URLs only if the folder that contains the selected item supports URLs. When the folder's
            IShellFolder::GetAttributesOf method is called to request the selected item's attributes, the folder must set the
            SFGAO_FOLDER attribute flag. Otherwise, the browse dialog box will not display the URL.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.BrowseInfoFlag.BIF_UAHINT">
            <summary>
            Version 6.0. When combined with BIF_NEWDIALOGSTYLE, adds a usage hint to the dialog box, in place of the edit box.
            BIF_EDITBOX overrides this flag.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.BrowseInfoFlag.BIF_NONEWFOLDERBUTTON">
            <summary>Version 6.0. Do not include the New Folder button in the browse dialog box.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.BrowseInfoFlag.BIF_NOTRANSLATETARGETS">
            <summary>Version 6.0. When the selected item is a shortcut, return the PIDL of the shortcut itself rather than its target.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.BrowseInfoFlag.BIF_BROWSEFORCOMPUTER">
            <summary>Only return computers. If the user selects anything other than a computer, the OK button is grayed.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.BrowseInfoFlag.BIF_BROWSEFORPRINTER">
            <summary>
            Only allow the selection of printers. If the user selects anything other than a printer, the OK button is grayed.
            <para>
            In Windows XP and later systems, the best practice is to use a Windows XP-style dialog, setting the root of the dialog to the
            Printers and Faxes folder (CSIDL_PRINTERS).
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.BrowseInfoFlag.BIF_BROWSEINCLUDEFILES">
            <summary>Version 4.71. The browse dialog box displays files as well as folders.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.BrowseInfoFlag.BIF_SHAREABLE">
            <summary>
            Version 5.0. The browse dialog box can display sharable resources on remote systems. This is intended for applications that
            want to expose remote shares on a local system. The BIF_NEWDIALOGSTYLE flag must also be set.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.BrowseInfoFlag.BIF_BROWSEFILEJUNCTIONS">
            <summary>
            Windows 7 and later. Allow folder junctions such as a library or a compressed file with a .zip file name extension to be browsed.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.BROWSEINFO">
            <summary>
            Contains parameters for the <see cref="M:Vanara.PInvoke.Shell32.SHBrowseForFolder(Vanara.PInvoke.Shell32.BROWSEINFO@)"/> function and receives information about the folder selected by the user.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.BROWSEINFO.hwndOwner">
            <summary>A handle to the owner window for the dialog box.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.BROWSEINFO.pidlRoot">
            <summary>
            A PIDL that specifies the location of the root folder from which to start browsing. Only the specified folder and its
            subfolders in the namespace hierarchy appear in the dialog box. This member can be NULL; in that case, a default location is used.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.BROWSEINFO.pszDisplayName">
            <summary>
            Pointer to a buffer to receive the display name of the folder selected by the user. The size of this buffer is assumed to be
            MAX_PATH characters.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.BROWSEINFO.lpszTitle">
            <summary>
            Pointer to a null-terminated string that is displayed above the tree view control in the dialog box. This string can be used
            to specify instructions to the user.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.BROWSEINFO.ulFlags">
            <summary>
            Flags that specify the options for the dialog box. This member can be 0 or a combination of the following values. Version
            numbers refer to the minimum version of Shell32.dll required for SHBrowseForFolder to recognize flags added in later releases.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.BROWSEINFO.lpfn">
            <summary>
            Pointer to an application-defined function that the dialog box calls when an event occurs. For more information, see the
            BrowseCallbackProc function. This member can be NULL.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.BROWSEINFO.lParam">
            <summary>
            An application-defined value that the dialog box passes to the callback function, if one is specified in <see cref="F:Vanara.PInvoke.Shell32.BROWSEINFO.lpfn"/>.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.BROWSEINFO.iImage">
            <summary>
            An integer value that receives the index of the image associated with the selected folder, stored in the system image list.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.BROWSEINFO.#ctor(Vanara.PInvoke.HWND,System.IntPtr,System.String,Vanara.PInvoke.Shell32.BrowseInfoFlag,Vanara.PInvoke.Shell32.BrowseCallbackProc,Vanara.InteropServices.SafeCoTaskMemString)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Shell32.BROWSEINFO"/> struct.</summary>
            <param name="hWnd">A handle to the owner window for the dialog box.</param>
            <param name="rootPidl">A PIDL that specifies the location of the root folder from which to start browsing.</param>
            <param name="title">The string that is displayed above the tree view control in the dialog box.</param>
            <param name="flags">Flags that specify the options for the dialog box.</param>
            <param name="callback">The callback function that the dialog box calls when an event occurs..</param>
            <param name="displayNameBuffer">Buffer that receives the display name of the folder selected by the user.</param>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.BROWSEINFO.DisplayName">
            <summary>Gets the display name.</summary>
            <value>The display name.</value>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.IDO_SHGIOI_DEFAULT">
            <summary>
            <c>Windows 7 and later.</c> The overlay icon that indicates that the item is the default in a set. One example is the default printer.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.IDO_SHGIOI_LINK">
            <summary>The overlay icon that indicates a linked folder or file.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.IDO_SHGIOI_SHARE">
            <summary>The overlay icon that indicates a shared folder.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.IDO_SHGIOI_SLOWFILE">
            <summary>The overlay icon that indicates a slow file.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.LPFNDFMCALLBACK">
            <summary>
            <para>
            [ <c>LPFNDFMCALLBACK</c> is available for use in the operating systems specified in the Requirements section. It may be altered
            or unavailable in subsequent versions.]
            </para>
            <para>Defines the prototype for the callback function that receives messages from the Shell's default context menu implementation.</para>
            </summary>
            <param name="psf">
            <para>Type: <c><c>IShellFolder</c>*</c></para>
            <para>A pointer to the <c>IShellFolder</c> object the message applies to. This value can be <c>NULL</c>.</para>
            </param>
            <param name="hwnd">
            <para>Type: <c>HWND</c></para>
            <para>The handle of the window that contains the view. This value can be <c>NULL</c>.</para>
            </param>
            <param name="pdtobj">
            <para>Type: <c><c>IDataObject</c>*</c></para>
            <para><c>IDataObject</c> that represents the selection the context menu is based on. This value can be <c>NULL</c>.</para>
            </param>
            <param name="uMsg">
            <para>Type: <c>UINT</c></para>
            <para>One of the following notifications.</para>
            <para>
            <list type="table">
            <listheader>
            <term>Notification</term>
            <term>Usage</term>
            </listheader>
            <item>
            <term>DFM_MERGECONTEXTMENU</term>
            <term>Sent by the default context menu implementation to allow LPFNDFMCALLBACK to add items to the menu.</term>
            </item>
            <item>
            <term>DFM_INVOKECOMMAND</term>
            <term>Sent by the default context menu implementation to request LPFNDFMCALLBACK to invoke a menu command.</term>
            </item>
            <item>
            <term>DFM_GETDEFSTATICID</term>
            <term>
            Sent by the default context menu implementation when the default menu command is being created, allowing an alternate choice to
            be made.
            </term>
            </item>
            </list>
            </para>
            </param>
            <param name="wParam">
            <para>Type: <c>WPARAM</c></para>
            <para>Additional information. See the individual notification pages for specific requirements.</para>
            </param>
            <param name="lParam">
            <para>Type: <c>LPARAM</c></para>
            <para>Additional information. See the individual notification pages for specific requirements.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>Returns S_OK if the message was handled, or an error value otherwise, including the following:</para>
            <para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>E_NOTIMPL</term>
            <term>The message was not handled.</term>
            </item>
            </list>
            </para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.LPFNVIEWCALLBACK">
            <summary>
            <para>
            [This interface is supported through Windows XP Service Pack 2 (SP2) and Windows Server 2003. It might be unsupported in
            subsequent versions of Windows.]
            </para>
            <para>
            Defines the prototype for the callback function used by the system folder view object. This function essentially duplicates the
            functionality of <c>IShellFolderViewCB</c>.
            </para>
            </summary>
            <param name="psvOuter">
            <para>Type: <c><c>IShellView</c>*</c></para>
            <para>A pointer to the owning instance of <c>IShellView</c>, if applicable. This parameter can be <c>NULL</c>.</para>
            </param>
            <param name="psf">
            <para>Type: <c><c>IShellFolder</c>*</c></para>
            <para>A pointer to the instance of <c>IShellFolder</c> the message applies to.</para>
            </param>
            <param name="hwndMain">
            <para>Type: <c>HWND</c></para>
            <para>The handle of the window that contains the view that receives the message.</para>
            </param>
            <param name="uMsg">
            <para>Type: <c>UINT</c></para>
            <para>One of the following notifications.</para>
            </param>
            <param name="wParam">
            <para>Type: <c>WPARAM</c></para>
            <para>Additional information dependent on the value in uMsg. See the individual notification pages for specific requirements.</para>
            </param>
            <param name="lParam">
            <para>Type: <c>LPARAM</c></para>
            <para>Additional information dependent on the value in uMsg. See the individual notification pages for specific requirements.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this function pointer succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.CLOSEPROPS">
            <summary>A flag that controls how PifMgr_CloseProperties operates.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CLOSEPROPS.CLOSEPROPS_NONE">
            <summary>No options specified.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CLOSEPROPS.CLOSEPROPS_DISCARD">
            <summary>Abandon cached data.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.CSIDL">
            <summary>
            CSIDL (constant special item ID list) values provide a unique system-independent way to identify special folders used frequently
            by applications, but which may not have the same name or location on any given system. For example, the system folder may be
            "C:\Windows" on one system and "C:\Winnt" on another. These constants are defined in Shlobj.h.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CSIDL.CSIDL_DESKTOP">
            <summary>The virtual folder that represents the Windows desktop, the root of the namespace.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CSIDL.CSIDL_INTERNET">
            <summary>A virtual folder for Internet Explorer.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CSIDL.CSIDL_PROGRAMS">
            <summary>
            The file system directory that contains the user's program groups (which are themselves file system directories). A typical
            path is C:\Documents and Settings\username\Start Menu\Programs.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CSIDL.CSIDL_CONTROLS">
            <summary>The virtual folder that contains icons for the Control Panel applications.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CSIDL.CSIDL_PRINTERS">
            <summary>The virtual folder that contains installed printers.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CSIDL.CSIDL_PERSONAL">
            <summary>
            Version 6.0. The virtual folder that represents the My Documents desktop item. This is equivalent to CSIDL_MYDOCUMENTS.
            <para>
            Previous to Version 6.0. The file system directory used to physically store a user's common repository of documents. A
            typical path is C:\Documents and Settings\username\My Documents. This should be distinguished from the virtual My Documents
            folder in the namespace. To access that virtual folder, use SHGetFolderLocation, which returns the ITEMIDLIST for the virtual
            location, or refer to the technique described in Managing the File System.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CSIDL.CSIDL_FAVORITES">
            <summary>
            The file system directory that serves as a common repository for the user's favorite items. A typical path is C:\Documents
            and Settings\username\Favorites.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CSIDL.CSIDL_STARTUP">
            <summary>
            The file system directory that corresponds to the user's Startup program group. The system starts these programs whenever the
            associated user logs on. A typical path is C:\Documents and Settings\username\Start Menu\Programs\Startup.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CSIDL.CSIDL_RECENT">
            <summary>
            The file system directory that contains shortcuts to the user's most recently used documents. A typical path is C:\Documents
            and Settings\username\My Recent Documents. To create a shortcut in this folder, use SHAddToRecentDocs. In addition to
            creating the shortcut, this function updates the Shell's list of recent documents and adds the shortcut to the My Recent
            Documents submenu of the Start menu.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CSIDL.CSIDL_SENDTO">
            <summary>The file system directory that contains Send To menu items. A typical path is C:\Documents and Settings\username\SendTo.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CSIDL.CSIDL_BITBUCKET">
            <summary>The virtual folder that contains the objects in the user's Recycle Bin.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CSIDL.CSIDL_STARTMENU">
            <summary>
            The file system directory that contains Start menu items. A typical path is C:\Documents and Settings\username\Start Menu.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CSIDL.CSIDL_MYDOCUMENTS">
            <summary>Version 6.0. The virtual folder that represents the My Documents desktop item. This value is equivalent to CSIDL_PERSONAL.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CSIDL.CSIDL_MYMUSIC">
            <summary>
            The file system directory that serves as a common repository for music files. A typical path is C:\Documents and
            Settings\User\My Documents\My Music.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CSIDL.CSIDL_MYVIDEO">
            <summary>
            Version 6.0. The file system directory that serves as a common repository for video files. A typical path is C:\Documents and
            Settings\username\My Documents\My Videos.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CSIDL.CSIDL_DESKTOPDIRECTORY">
            <summary>
            The file system directory used to physically store file objects on the desktop (not to be confused with the desktop folder
            itself). A typical path is C:\Documents and Settings\username\Desktop.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CSIDL.CSIDL_DRIVES">
            <summary>
            The virtual folder that represents My Computer, containing everything on the local computer: storage devices, printers, and
            Control Panel. The folder can also contain mapped network drives.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CSIDL.CSIDL_NETWORK">
            <summary>A virtual folder that represents Network Neighborhood, the root of the network namespace hierarchy.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CSIDL.CSIDL_NETHOOD">
            <summary>
            A file system directory that contains the link objects that may exist in the My Network Places virtual folder. It is not the
            same as CSIDL_NETWORK, which represents the network namespace root. A typical path is C:\Documents and Settings\username\NetHood.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CSIDL.CSIDL_FONTS">
            <summary>A virtual folder that contains fonts. A typical path is C:\Windows\Fonts.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CSIDL.CSIDL_TEMPLATES">
            <summary>
            The file system directory that serves as a common repository for document templates. A typical path is C:\Documents and Settings\username\Templates.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CSIDL.CSIDL_COMMON_STARTMENU">
            <summary>
            The file system directory that contains the programs and folders that appear on the Start menu for all users. A typical path
            is C:\Documents and Settings\All Users\Start Menu.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CSIDL.CSIDL_COMMON_PROGRAMS">
            <summary>
            The file system directory that contains the directories for the common program groups that appear on the Start menu for all
            users. A typical path is C:\Documents and Settings\All Users\Start Menu\Programs.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CSIDL.CSIDL_COMMON_STARTUP">
            <summary>
            The file system directory that contains the programs that appear in the Startup folder for all users. A typical path is
            C:\Documents and Settings\All Users\Start Menu\Programs\Startup.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CSIDL.CSIDL_COMMON_DESKTOPDIRECTORY">
            <summary>
            The file system directory that contains files and folders that appear on the desktop for all users. A typical path is
            C:\Documents and Settings\All Users\Desktop.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CSIDL.CSIDL_APPDATA">
            <summary>
            Version 4.71. The file system directory that serves as a common repository for application-specific data. A typical path is
            C:\Documents and Settings\username\Application Data.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CSIDL.CSIDL_PRINTHOOD">
            <summary>
            The file system directory that contains the link objects that can exist in the Printers virtual folder. A typical path is
            C:\Documents and Settings\username\PrintHood.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CSIDL.CSIDL_LOCAL_APPDATA">
            <summary>
            Version 5.0. The file system directory that serves as a data repository for local (nonroaming) applications. A typical path
            is C:\Documents and Settings\username\Local Settings\Application Data.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CSIDL.CSIDL_ALTSTARTUP">
            <summary>
            The file system directory that corresponds to the user's nonlocalized Startup program group. This value is recognized in
            Windows Vista for backward compatibility, but the folder itself no longer exists.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CSIDL.CSIDL_COMMON_ALTSTARTUP">
            <summary>
            The file system directory that corresponds to the nonlocalized Startup program group for all users. This value is recognized
            in Windows Vista for backward compatibility, but the folder itself no longer exists.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CSIDL.CSIDL_COMMON_FAVORITES">
            <summary>The file system directory that serves as a common repository for favorite items common to all users.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CSIDL.CSIDL_INTERNET_CACHE">
            <summary>
            Version 4.72. The file system directory that serves as a common repository for temporary Internet files. A typical path is
            C:\Documents and Settings\username\Local Settings\Temporary Internet Files.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CSIDL.CSIDL_COOKIES">
            <summary>
            The file system directory that serves as a common repository for Internet cookies. A typical path is C:\Documents and Settings\username\Cookies.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CSIDL.CSIDL_HISTORY">
            <summary>The file system directory that serves as a common repository for Internet history items.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CSIDL.CSIDL_COMMON_APPDATA">
            <summary>
            Version 5.0. The file system directory that contains application data for all users. A typical path is C:\Documents and
            Settings\All Users\Application Data. This folder is used for application data that is not user specific. For example, an
            application can store a spell-check dictionary, a database of clip art, or a log file in the CSIDL_COMMON_APPDATA folder.
            This information will not roam and is available to anyone using the computer.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CSIDL.CSIDL_WINDOWS">
            <summary>
            Version 5.0. The Windows directory or SYSROOT. This corresponds to the %windir% or %SYSTEMROOT% environment variables. A
            typical path is C:\Windows.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CSIDL.CSIDL_SYSTEM">
            <summary>Version 5.0. The Windows System folder. A typical path is C:\Windows\System32.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CSIDL.CSIDL_PROGRAM_FILES">
            <summary>Version 5.0. The Program Files folder. A typical path is C:\Program Files.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CSIDL.CSIDL_MYPICTURES">
            <summary>
            Version 5.0. The file system directory that serves as a common repository for image files. A typical path is C:\Documents and
            Settings\username\My Documents\My Pictures.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CSIDL.CSIDL_PROFILE">
            <summary>
            Version 5.0. The user's profile folder. A typical path is C:\Users\username. Applications should not create files or folders
            at this level; they should put their data under the locations referred to by CSIDL_APPDATA or CSIDL_LOCAL_APPDATA. However,
            if you are creating a new Known Folder the profile root referred to by CSIDL_PROFILE is appropriate.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CSIDL.CSIDL_SYSTEMX86">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CSIDL.CSIDL_PROGRAM_FILESX86">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CSIDL.CSIDL_PROGRAM_FILES_COMMON">
            <summary>
            Version 5.0. A folder for components that are shared across applications. A typical path is C:\Program Files\Common. Valid
            only for Windows XP.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CSIDL.CSIDL_PROGRAM_FILES_COMMONX86">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CSIDL.CSIDL_COMMON_TEMPLATES">
            <summary>
            The file system directory that contains the templates that are available to all users. A typical path is C:\Documents and
            Settings\All Users\Templates.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CSIDL.CSIDL_COMMON_DOCUMENTS">
            <summary>
            The file system directory that contains documents that are common to all users. A typical path is C:\Documents and
            Settings\All Users\Documents.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CSIDL.CSIDL_COMMON_ADMINTOOLS">
            <summary>Version 5.0. The file system directory that contains administrative tools for all users of the computer.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CSIDL.CSIDL_ADMINTOOLS">
            <summary>
            Version 5.0. The file system directory that is used to store administrative tools for an individual user. The MMC will save
            customized consoles to this directory, and it will roam with the user.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CSIDL.CSIDL_CONNECTIONS">
            <summary>The virtual folder that represents Network Connections, that contains network and dial-up connections.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CSIDL.CSIDL_COMMON_MUSIC">
            <summary>
            Version 6.0. The file system directory that serves as a repository for music files common to all users. A typical path is
            C:\Documents and Settings\All Users\Documents\My Music.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CSIDL.CSIDL_COMMON_PICTURES">
            <summary>
            Version 6.0. The file system directory that serves as a repository for image files common to all users. A typical path is
            C:\Documents and Settings\All Users\Documents\My Pictures.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CSIDL.CSIDL_COMMON_VIDEO">
            <summary>
            Version 6.0. The file system directory that serves as a repository for video files common to all users. A typical path is
            C:\Documents and Settings\All Users\Documents\My Videos.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CSIDL.CSIDL_RESOURCES">
            <summary>Windows Vista. The file system directory that contains resource data. A typical path is C:\Windows\Resources.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CSIDL.CSIDL_RESOURCES_LOCALIZED">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CSIDL.CSIDL_COMMON_OEM_LINKS">
            <summary>This value is recognized in Windows Vista for backward compatibility, but the folder itself is no longer used.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CSIDL.CSIDL_CDBURN_AREA">
            <summary>
            Version 6.0. The file system directory that acts as a staging area for files waiting to be written to a CD. A typical path is
            C:\Documents and Settings\username\Local Settings\Application Data\Microsoft\CD Burning.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CSIDL.CSIDL_COMPUTERSNEARME">
            <summary>The folder that represents other computers in your workgroup.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.FCS">
            <summary>A flag that controls the action of SHGetSetFolderCustomSettings.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FCS.FCS_READ">
            <summary>Retrieve the custom folder settings in pfcs.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FCS.FCS_FORCEWRITE">
            <summary>Use pfcs to set the custom folder's settings regardless of whether the values are already present.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FCS.FCS_WRITE">
            <summary>Use pfcs to set the custom folder's settings if the values are not already present.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.FOLDERCUSTOMSETTINGSMASK">
            <summary>Flags used by SHFOLDERCUSTOMSETTINGS.dwMask.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERCUSTOMSETTINGSMASK.FCSM_VIEWID">
            <summary>Deprecated. pvid contains the folder's GUID.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERCUSTOMSETTINGSMASK.FCSM_WEBVIEWTEMPLATE">
            <summary>Deprecated. pszWebViewTemplate contains a pointer to a buffer containing the path to the folder's WebView template.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERCUSTOMSETTINGSMASK.FCSM_INFOTIP">
            <summary>pszInfoTip contains a pointer to a buffer containing the folder's info tip.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERCUSTOMSETTINGSMASK.FCSM_CLSID">
            <summary>pclsid contains the folder's CLSID.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERCUSTOMSETTINGSMASK.FCSM_ICONFILE">
            <summary>pszIconFile contains the path to the file containing the folder's icon.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERCUSTOMSETTINGSMASK.FCSM_LOGO">
            <summary>pszLogo contains the path to the file containing the folder's thumbnail icon.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERCUSTOMSETTINGSMASK.FCSM_FLAGS">
            <summary>Not used.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.GPFIDL_FLAGS">
            <summary>Flags used by SHGetPathFromIDListEx.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.GPFIDL_FLAGS.GPFIDL_DEFAULT">
            <summary>Win32 file names, servers, and root drives are included.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.GPFIDL_FLAGS.GPFIDL_ALTNAME">
            <summary>Uses short file names.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.GPFIDL_FLAGS.GPFIDL_UNCPRINTER">
            <summary>Include UNC printer names items.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.MM">
            <summary>Flags used by Shell_MergeMenus.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.MM.MM_ADDSEPARATOR">
            <summary>
            Add a separator between the items from the two menus if one does not exist already. If you are inserting the entries from
            hmSrc into the middle of hmDst, a separator is added above and below the hmSrc material.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.MM.MM_SUBMENUSHAVEIDS">
            <summary>Do not remove any existing separators in the two menus. Note that this could result in two separators in a row.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.MM.MM_DONTREMOVESEPS">
            <summary>Set this flag if the submenus have IDs which should be adjusted.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.OFASI">
            <summary>Used for options in SHOpenFolderAndSelectItems.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.OFASI.OFASI_NONE">
            <summary>No options.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.OFASI.OFASI_EDIT">
            <summary>
            Select an item and put its name in edit mode. This flag can only be used when a single item is being selected. For multiple
            item selections, it is ignored.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.OFASI.OFASI_OPENDESKTOP">
            <summary>
            Select the item or items on the desktop rather than in a Windows Explorer window. Note that if the desktop is obscured behind
            open windows, it will not be made visible.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.OPEN_AS_INFO_FLAGS">
            <summary>The characteristics of the SHOpenWithDialog dialog box.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.OPEN_AS_INFO_FLAGS.OAIF_ALLOW_REGISTRATION">
            <summary>Enable the "always use this program" checkbox. If not passed, it will be disabled.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.OPEN_AS_INFO_FLAGS.OAIF_REGISTER_EXT">
            <summary>Do the registration after the user hits the <c>OK</c> button.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.OPEN_AS_INFO_FLAGS.OAIF_EXEC">
            <summary>Execute file after registering.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.OPEN_AS_INFO_FLAGS.OAIF_FORCE_REGISTRATION">
            <summary>
            Force the <c>Always use this program</c> checkbox to be checked. Typically, you won't use the OAIF_ALLOW_REGISTRATION flag
            when you pass this value.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.OPEN_AS_INFO_FLAGS.OAIF_HIDE_REGISTRATION">
            <summary>
            <c>Introduced in Windows Vista</c>. Hide the <c>Always use this program</c> checkbox. If this flag is specified, the
            OAIF_ALLOW_REGISTRATION and OAIF_FORCE_REGISTRATION flags will be ignored.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.OPEN_AS_INFO_FLAGS.OAIF_URL_PROTOCOL">
            <summary>
            <c>Introduced in Windows Vista</c>. The value for the extension that is passed is actually a protocol, so the <c>Open
            With</c> dialog box should show applications that are registered as capable of handling that protocol.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.OPEN_AS_INFO_FLAGS.OAIF_FILE_IS_URI">
            <summary><c>Introduced in Windows 8</c>. The location pointed to by the parameter is given as a URI.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.OPENPROPS">
            <summary>A flag that controls how PifMgr_OpenProperties operates.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.OPENPROPS.OPENPROPS_NONE">
            <summary>No options specified.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.OPENPROPS.OPENPROPS_INHIBITPIF">
            <summary>
            Ignore any existing .pif files and get the properties from win.ini or _Default.pif. This flag is ignored on Windows NT,
            Windows 2000, and Windows XP.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.PCS">
            <summary>Return values for PathCleanupSpec.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.PCS.PCS_FATAL">
            <summary>The cleaned path is not a valid file name. This flag is always returned in conjunction with PCS_PATHTOOLONG.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.PCS.PCS_REPLACEDCHAR">
            <summary>Replaced one or more invalid characters.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.PCS.PCS_REMOVEDCHAR">
            <summary>Removed one or more invalid characters.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.PCS.PCS_TRUNCATED">
            <summary>The returned path is truncated.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.PCS.PCS_PATHTOOLONG">
            <summary>
            The function failed because the input path specified at is too long to allow the formation of a valid file name from . When
            this flag is returned, it is always accompanied by the PCS_FATAL flag.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.PRF">
            <summary>Flags for PathResolve.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.PRF.PRF_VERIFYEXISTS">
            <summary>Return TRUE if the file's existence is verified; otherwise FALSE.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.PRF.PRF_TRYPROGRAMEXTENSIONS">
            <summary>Look for the specified path with the following extensions appended: .pif, .com, .bat, .cmd, .lnk, and .exe.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.PRF.PRF_FIRSTDIRDEF">
            <summary>Look first in the directory or directories specified by dirs.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.PRF.PRF_DONTFINDLNK">
            <summary>Ignore .lnk files.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.PRF.PRF_REQUIREABSOLUTE">
            <summary>Require an absolute (full) path.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.QITIP">
            <summary>
            Flags that direct the handling of the item from which you're retrieving the info tip text. This value is commonly zero (QITIPF_DEFAULT).
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.QITIP.QITIPF_DEFAULT">
            <summary>No special handling.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.QITIP.QITIPF_USENAME">
            <summary>Provide the name of the item in ppwszTip rather than the info tip text.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.QITIP.QITIPF_LINKNOTARGET">
            <summary>If the item is a shortcut, retrieve the info tip text of the shortcut rather than its target.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.QITIP.QITIPF_LINKUSETARGET">
            <summary>If the item is a shortcut, retrieve the info tip text of the shortcut's target.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.QITIP.QITIPF_USESLOWTIP">
            <summary>Search the entire namespace for the information. This value can result in a delayed response time.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.QITIP.QITIPF_SINGLELINE">
            <summary><c>Windows Vista and later.</c> Put the info tip on a single line.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.RESTRICTIONS">
            <summary>
            <para>
            These flags are used with the SHRestricted function. <c>SHRestricted</c> is used to determine whether a specified administrator
            policy is in effect. In many cases, applications need to modify certain behaviors in order to comply with the policies enacted by
            system administrators.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NONE">
            <summary>Not used.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NORUN">
            <summary>
            If nonzero, the system administrator has forbidden access to the Run command on the Start menu. Applications should remove
            similar functionality. For example, a browser with an address bar should deny attempts by the user to type the path of a
            local file into the address bar.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOCLOSE">
            <summary>
            If nonzero, the system administrator has forbidden access to the Shut Down command on the Start menu. Applications should
            remove the ability to shut down or restart the computer.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOSAVESET">
            <summary>
            If nonzero, the system administrator has requested that applications do not save their state at exit for restoration the next
            time they are run. Applications should disable saving their window position and settings.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOFILEMENU">
            <summary>
            If nonzero, the system administrator has forbidden access to the Windows Explorer File menu. Applications should remove
            similar functionality.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOSETFOLDERS">
            <summary>
            If nonzero, the system administrator has forbidden access to Control Panel, Printers, and Network and Dial up Connections.
            Applications should prevent users from viewing those folders.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOSETTASKBAR">
            <summary>
            If nonzero, the system administrator has forbidden access to taskbar settings. Applications should prevent users from
            changing those settings.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NODESKTOP">
            <summary>
            If nonzero, the system administrator has specified that all icons on the desktop should be hidden. Applications do not need
            to perform any special actions.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOFIND">
            <summary>
            If nonzero, the system administrator has indicated that the user should not be enabled to search for files. Applications
            should remove similar functionality.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NODRIVES">
            <summary>
            A 32-bit value that specifies the drives that should not be displayed to the user. Bit 0 corresponds to drive A, up to bit 25
            which corresponds to drive Z. Applications that display a list of drives should remove drives that have their corresponding
            bits set.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NODRIVEAUTORUN">
            <summary>
            A 32-bit value that specifies the drives for which AutoRun should be disabled. Bit 0 corresponds to drive A, up to bit 25
            which corresponds to drive Z. Applications should not offer to AutoRun any drive that has its corresponding bit set.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NODRIVETYPEAUTORUN">
            <summary>
            A 32-bit value that specifies the drive types for which AutoRun should be disabled. The bits are numbered according to the
            return value of GetDriveType. For example, bit DRIVE_CDROM disables AutoRun on CD-ROM drives. Applications should not offer
            to AutoRun any drive whose type has its corresponding bit set.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NONETHOOD">
            <summary>
            If nonzero, the system administrator has removed Network Neighborhood (also known as My Network Places) from the Shell
            namespace. Applications should disable functionality that enables the user to browse the network.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_STARTBANNER">
            <summary>Not used.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_RESTRICTRUN">
            <summary>
            If nonzero, the system administrator has restricted the programs the user can run. Only programs listed under the registry
            key HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer can be run either from the Run dialog box,
            by double-clicking, or by selecting from the File menu. Applications should prevent users from running programs not listed
            under that key. Applications that use the ShellExecute or ShellExecuteEx functions to run programs do not need to take any
            special action because those functions check the policy.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOPRINTERTABS">
            <summary>Not used.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOPRINTERDELETE">
            <summary>
            If nonzero, the system administrator has disabled the user's ability to delete printers. Applications should remove the
            ability to delete printers.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOPRINTERADD">
            <summary>
            If nonzero, the system administrator has disabled the user's ability to add printers. Applications should remove the ability
            to add printers.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOSTARTMENUSUBFOLDERS">
            <summary>
            If nonzero, subfolders of the Start menu and Programs menu are not shown on the top of the classic Start menu, the Programs
            list on the classic Start menu, or the All Programs list on the Start menu. Applications that enumerate the contents of the
            Start menu should avoid subfolders. If nonzero, this flag does not restrict any menus other than those listed here; in
            particular, My Computer can still expand.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_MYDOCSONNET">
            <summary>Not used.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOEXITTODOS">
            <summary>Not used.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_ENFORCESHELLEXTSECURITY">
            <summary>
            If nonzero, the system administrator has forbidden the use of unapproved Shell extensions. Applications should not
            instantiate Shell extensions unless they are marked as approved by the system administrator. For more information, see
            Creating Shell Extension Handlers.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_LINKRESOLVEIGNORELINKINFO">
            <summary>
            If nonzero, the system does not attempt to reconnect mapped network drives when resolving a broken shortcut to a file or
            folder on a mapped network drive. Applications do not need to perform any special actions.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOCOMMONGROUPS">
            <summary>
            If nonzero, indicates the system administrator has forbidden access to the CSIDL_COMMON_STARTMENU or CSIDL_COMMON_PROGRAMS
            folders on the Start menu. Applications that enumerate the contents of the Start menu should avoid those folders.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_SEPARATEDESKTOPPROCESS">
            <summary>
            If nonzero, the administrator has required that folders be opened in a separate process. This overrides and disables the
            corresponding setting in the Folder Options dialog box. Applications do not need to perform any special actions.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOWEB">
            <summary>
            If nonzero, the system administrator has removed the Web tab from the desktop Properties dialog box. Applications do not need
            to perform any special actions. Windows XP and later: Not used.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOTRAYCONTEXTMENU">
            <summary>
            If nonzero, the system administrator has forbidden access to context menus for the taskbar. Applications do not need to
            perform any special actions.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOVIEWCONTEXTMENU">
            <summary>
            If nonzero, the system administrator has forbidden access to context menus for Shell objects. Applications should disable
            context menus for Shell objects.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NONETCONNECTDISCONNECT">
            <summary>
            If nonzero, the system administrator has denied users the ability to map or disconnect network drives. Applications should
            remove the ability to map or disconnect network drives.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_STARTMENULOGOFF">
            <summary>
            If 1, the system administrator has removed the Log Off option from the Start menu. If 2, the system administrator has forced
            the Log Off option to be shown. Applications do not need to perform any special actions.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOSETTINGSASSIST">
            <summary>Not used.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOINTERNETICON">
            <summary>
            If nonzero, the system administrator has removed the Internet Explorer icon from the desktop. Applications do not need to
            perform any special actions.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NORECENTDOCSHISTORY">
            <summary>
            If nonzero, the system administrator has disabled recent document history. Applications must disable all MRU lists, such as
            those that are often displayed on the File menu. Adherence to this setting is mandatory for Windows logo compliance.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NORECENTDOCSMENU">
            <summary>
            If nonzero, the system administrator has removed the Recent Documents menu from the Start menu. Applications do not need to
            perform any special actions.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOACTIVEDESKTOP">
            <summary>
            If nonzero, the system administrator has disabled the ability to create web content on the desktop. Applications do not need
            to perform any special actions. Windows Vista or later: Not used.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOACTIVEDESKTOPCHANGES">
            <summary>
            If nonzero, the system administrator has disabled the ability to change web content on the desktop. Applications do not need
            to perform any special actions. Windows Vista or later: Not used.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOFAVORITESMENU">
            <summary>
            If nonzero, the system administrator has removed the Favorites menu from the Start menu. Applications do not need to perform
            any special actions.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_CLEARRECENTDOCSONEXIT">
            <summary>
            If nonzero, the system administrator has required that recent document history and related history information be deleted
            when the user logs off. Applications should erase recent document history when they exit.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_CLASSICSHELL">
            <summary>Not used.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOCUSTOMIZEWEBVIEW">
            <summary>
            If nonzero, the system administrator has disabled the ability to customize the appearance of Windows Explorer folders.
            Applications do not need to perform any special actions.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOHTMLWALLPAPER">
            <summary>
            If nonzero, the system administrator has disabled the ability to set the wallpaper to any image that is not a bitmap (*.bmp)
            image. Applications that enable the user to change desktop wallpaper should disable web content. Windows Vista or later: Not used.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOCHANGINGWALLPAPER">
            <summary>
            If nonzero, the system administrator has disabled the ability to change the desktop wallpaper. Applications should disable
            corresponding functionality.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NODESKCOMP">
            <summary>
            If nonzero, the system administrator has disabled desktop components. Applications that create or modify desktop components
            should disable this functionality. Windows Vista or later: Not used.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOADDDESKCOMP">
            <summary>
            If nonzero, the system administrator has disabled the ability to create desktop components. Applications that create desktop
            components should disable this functionality.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NODELDESKCOMP">
            <summary>
            If nonzero, the system administrator has disabled the ability to delete desktop components. Applications that delete desktop
            components should disable this functionality. Windows Vista or later: Not used.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOCLOSEDESKCOMP">
            <summary>
            If nonzero, the system administrator has disabled the ability to close desktop components. Applications do not need to
            perform any special actions. Windows Vista or later: Not used.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOCLOSE_DRAGDROPBAND">
            <summary>
            If nonzero, the system administrator has disabled the ability to drag, drop, or close desktop bands. Applications do not need
            to perform any special actions.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOMOVINGBAND">
            <summary>
            If nonzero, the system administrator has disabled the ability to move a desktop band. Applications do not need to perform any
            special actions.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOEDITDESKCOMP">
            <summary>
            If nonzero, indicates the system administrator has disabled the ability to modify desktop components. Applications that
            modify desktop components should disable this functionality. Windows Vista or later: Not used.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NORESOLVESEARCH">
            <summary>
            If nonzero, the system administrator has disabled heuristic file searching when resolving broken shortcuts. Applications do
            not need to perform any special actions.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NORESOLVETRACK">
            <summary>
            If nonzero, the system administrator has disabled the use of the link tracking service when resolving broken shortcuts.
            Applications do not need to perform any special actions.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_FORCECOPYACLWITHFILE">
            <summary>
            If nonzero, the system administrator has forced Shell file copy operations to copy the ACL with the file rather than
            inheriting the ACL from the target folder. Applications that use the SHFileOperation function do not need to perform any
            special actions. Applications that copy files manually should ensure that the source ACL is copied.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOLOGO3CHANNELNOTIFY">
            <summary>
            If nonzero, the system administrator has disabled channel updates when resolving shortcuts. Applications do not need to
            perform any special actions. Windows Vista or later: Not supported.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOFORGETSOFTWAREUPDATE">
            <summary>
            If nonzero, the system administrator has disabled the ability to uncheck the Remind me until I update the current version
            checkbox in the SoftwareUpdateMessageBox function. Applications do not need to perform any special actions.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOSETACTIVEDESKTOP">
            <summary>
            If nonzero, the system administrator has disabled the ability to change settings for web content on the desktop. Applications
            do not need to perform any special actions. Windows Vista or later: Not used.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOUPDATEWINDOWS">
            <summary>
            If nonzero, the system administrator has hidden the Windows Update shortcut on the Start menu. Applications that enumerate
            the contents of the Start menu should not show the Windows Update shortcut to the user.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOCHANGESTARMENU">
            <summary>
            If nonzero, the system administrator has disabled the ability to make changes to the Start menu. Applications should disable
            any feature that enables the user to reorganize their Start menu.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOFOLDEROPTIONS">
            <summary>
            If nonzero, the system administrator has denied access to the Folder Options dialog box. Applications that display Folder
            Options in Control Panel should disable this functionality.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_HASFINDCOMPUTERS">
            <summary>
            If nonzero, the system administrator has disabled the ability to search for computers on the network. Applications should
            remove the ability to search for computers on the network.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_INTELLIMENUS">
            <summary>
            If nonzero, the system administrator has disabled personalized menus. Applications should not hide infrequently-used menu commands.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_RUNDLGMEMCHECKBOX">
            <summary>
            If nonzero, the system administrator has disabled the Run in separate memory space option in the Run dialog. Applications
            that provide similar functionality should remove the corresponding checkbox.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_ARP_ShowPostSetup">
            <summary>
            If nonzero, the system administrator has removed the list of incomplete setup operations from the "Add/Remove Windows
            Components" section of the Add/Remove Programs dialog box. Applications do not need to perform any special actions. Windows
            Vista or later: Not used.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOCSC">
            <summary>
            If nonzero, the system administrator has removed Synchronize All from the Start menu. Applications do not need to perform any
            special actions.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOCONTROLPANEL">
            <summary>
            If nonzero, the system administrator has denied access to Control Panel. Applications should disable any functionality that
            runs .
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_ENUMWORKGROUP">
            <summary>
            If nonzero, the system administrator has indicated that the Network Neighborhood should include the computer workgroup.
            Applications do not need to perform any special actions. Windows Vista or later: Not used.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_ARP_NOARP">
            <summary>
            If nonzero, the system administrator has denied access to the Add/Remove Programs dialog box. Applications should disable any
            functionality that runs the Add/Remove Programs dialog box. Windows Vista or later: Not used.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_ARP_NOREMOVEPAGE">
            <summary>
            If nonzero, the system administrator has denied access to the Change or Remove Programs section of the Add/Remove Programs
            dialog box. Applications do not need to perform any special actions. Windows Vista or later: Not used.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_ARP_NOADDPAGE">
            <summary>
            If nonzero, the system administrator has denied access to the Add Programs section of the Add/Remove Programs dialog box.
            Applications do not need to perform any special actions. Windows Vista or later: Not used.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_ARP_NOWINSETUPPAGE">
            <summary>
            If nonzero, the system administrator has denied access to the Add/Remove Windows Components section of the Add/Remove
            Programs dialog box. Applications do not need to perform any special actions. Windows Vista or later: Not used.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_GREYMSIADS">
            <summary>
            If nonzero, the system administrator has specified that Windows Installer shortcuts that refer to applications that are
            available but not yet installed should be displayed on the Start menu in gray. Applications do not need to perform any
            special actions.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOCHANGEMAPPEDDRIVELABEL">
            <summary>Not used.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOCHANGEMAPPEDDRIVECOMMENT">
            <summary>Not used.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_MaxRecentDocs">
            <summary>
            A 32-bit value that specifies the maximum number of documents to be retained in the Recent Documents menu. If this value is
            zero, then the system administrator has not specified any maximum, and applications can choose a default. If this value is
            nonzero, applications should restrict their Recent Documents list to the specified number of items.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NONETWORKCONNECTIONS">
            <summary>
            If nonzero, the system administrator has removed the Network Connections menu from the Start menu. Applications should hide
            lists of network and dial-up connections.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_FORCESTARTMENULOGOFF">
            <summary>
            If nonzero, the system administrator has forced the Log Off command onto the Start menu. Applications do not need to perform
            any special actions.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOWEBVIEW">
            <summary>
            If nonzero, the system administrator has disabled folder HTML templates (Windows 2000) or folder tasks (Windows XP) in
            Windows Explorer. Applications do not need to perform any special actions. Windows Vista or later: Not used.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOCUSTOMIZETHISFOLDER">
            <summary>
            If nonzero, the system administrator has disabled the ability to customize the appearance of Windows Explorer folders.
            Applications do not need to perform any special actions.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOENCRYPTION">
            <summary>
            If nonzero, the system administrator has disabled the ability to encrypt and decrypt files and folders. Applications should
            not call EncryptFile or DecryptFile.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_DONTSHOWSUPERHIDDEN">
            <summary>
            If nonzero, the system administrator has disabled the ability to view files marked System and Hidden ("super-hidden files"),
            overriding the fShowSuperHidden member of the SHELLSTATE structure. Applications should not show files that have both the
            FILE_ATTRIBUTE_SYSTEM and FILE_ATTRIBUTE_HIDDEN attributes to the user.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOSHELLSEARCHBUTTON">
            <summary>
            If nonzero, the system administrator has disabled the Search button in the Windows Explorer toolbar. Applications do not need
            to perform any special actions.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOHARDWARETAB">
            <summary>
            If nonzero, the system administrator has disabled the Hardware tab in the Drive, Mouse, Keyboard, and Multimedia property
            sheets. Applications do not need to perform any special actions.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NORUNASINSTALLPROMPT">
            <summary>
            If nonzero, the system administrator has disabled the automatic prompt for automatic credentials when installing an
            application. Applications do not need to perform any special actions. Windows Vista or later: Not used.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_PROMPTRUNASINSTALLNETPATH">
            <summary>
            If nonzero, the system administrator has disabled the automatic prompt for automatic credentials when installing an
            application from a network path. Applications do not need to perform any special actions. Windows Vista or later: Not used.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOMANAGEMYCOMPUTERVERB">
            <summary>
            If nonzero, the system administrator has removed the Manage command from the My Computer context menu. Applications do not
            need to perform any special actions.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_DISALLOWRUN">
            <summary>
            If nonzero, the system administrator has restricted the programs the user can run. Programs listed under the registry key
            HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\DisallowRun may not be run from the Run dialog
            box, by double-clicking, or by selecting from the File menu. Programs are listed by their full path (for example,
            "C:\Windows\system32\cmd.exe"). Applications should prevent users from running programs listed under that key. Applications
            that use the ShellExecute or ShellExecuteEx function to run programs do not need to take any special action because those
            functions will check the policy.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOWELCOMESCREEN">
            <summary>
            If nonzero, the system administrator has disabled the Welcome to Windows program that is run when a user logs on.
            Applications do not need to perform any special actions. Windows Vista or later: Not used.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_RESTRICTCPL">
            <summary>
            If nonzero, the system administrator has restricted the control panel applications the user can run. In order to be run, a
            control panel application must be listed under the registry key
            HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\RestrictCpl . The control panel application can
            be listed either under its display name (for example, "Mouse") or under its filename (for example, "main.cpl"). Applications
            that launch control panel applications should prevent users from running control panel applications not listed under that key.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_DISALLOWCPL">
            <summary>
            If nonzero, the system administrator has restricted the control panel applications the user can run. In order to be run, a
            control panel application must not be listed under the registry key
            HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\DisallowCpl . The control panel application can
            be listed either under its display name (for example, "Mouse") or under its filename (for example, "main.cpl"). Applications
            that launch control panel applications should prevent users from running control panel applications listed under that key.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOSMBALLOONTIP">
            <summary>
            If nonzero, the system administrator has disabled balloon tips that are displayed by the Start menu. Applications do not need
            to perform any special actions.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOSMHELP">
            <summary>
            If nonzero, the system administrator has removed the Help option from the Start menu. Applications do not need to perform any
            special actions.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOWINKEYS">
            <summary>
            If nonzero, the system administrator has disabled the keyboard shortcut associated with the Windows logo key. Applications do
            not need to perform any special actions.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOENCRYPTONMOVE">
            <summary>
            If nonzero, the system administrator has specified that unencrypted files and folders moved into an encrypted folder should
            remain unencrypted instead of inheriting the encryption attribute from the enclosing folder. Applications that move files and
            folders should unencrypt them if they were originally unencrypted and are moved into an encrypted folder. Applications that
            use the SHFileOperation function to move files do not need to perform any special actions because the SHFileOperation
            function respects this policy.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOLOCALMACHINERUN">
            <summary>
            If nonzero, the system administrator has disabled the execution of programs listed in the
            HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run registry key. Applications do not need to perform any
            special actions.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOCURRENTUSERRUN">
            <summary>
            If nonzero, the system administrator has disabled the execution of programs listed in the
            HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run registry key. Applications do not need to perform any special actions.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOLOCALMACHINERUNONCE">
            <summary>
            If nonzero, the system administrator has disabled the execution of programs listed in the
            HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunOnce registry key. Applications do not need to perform any
            special actions.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOCURRENTUSERRUNONCE">
            <summary>
            If nonzero, the system administrator has disabled the execution of programs listed in the
            HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunOnce registry key. Applications do not need to perform any
            special actions.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_FORCEACTIVEDESKTOPON">
            <summary>
            If nonzero, the system administrator has forced web content to be enabled on the desktop. Applications do not need to perform
            any special actions. Windows Vista or later: Not used.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOVIEWONDRIVE">
            <summary>
            A 32-bit value that specifies the drives the user cannot open or drop files into. Bit 0 corresponds to drive A, up to bit 25
            which corresponds to drive Z. Applications that enable the user to open folders or drop files should prevent the user from
            opening a folder on a restricted drive or dropping files onto a restricted drive.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NONETCRAWL">
            <summary>
            Windows XP, Windows2003, or IE_BACKCOMPAT_VERSION defined. If nonzero, the system administrator has disabled automatic
            searching for network folders and printers, overriding the member of the SHELLSTATE structure. Applications do not need to
            perform any special actions. Windows Vista or later: Not used.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOSHAREDDOCUMENTS">
            <summary>
            Windows XP, Windows2003 or IE_BACKCOMPAT_VERSION defined. If nonzero, the system administrator has hidden the Shared
            Documents icon in My Computer. Applications should hide access to CSIDL_COMMON_DOCUMENTS. Windows Vista or later: Not used.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOSMMYDOCS">
            <summary>
            If nonzero, the system administrator has hidden the My Documents icon on the Start menu. Applications do not need to perform
            any special actions.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOSMMYPICS">
            <summary>
            Windows XP or later. If nonzero, the system administrator has hidden the My Pictures icon on the Start menu. Applications do
            not need to perform any special actions.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_ALLOWBITBUCKDRIVES">
            <summary>
            Windows XP or later. A 32-bit value that specifies the drives for which the Recycle Bin should be forced to be enabled. The
            system typically disables the Recycle Bin on drives that are not local fixed drives. Bit 0 corresponds to drive A, up to bit
            25 which corresponds to drive Z. Applications do not need to perform any special actions.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NONLEGACYSHELLMODE">
            <summary>
            Windows XP or later. If nonzero, the system administrator has hidden the Back and Forward buttons in the Internet Explorer
            toolbar. Applications do not need to perform any special actions. Windows Vista or later: Not used.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOCONTROLPANELBARRICADE">
            <summary>Windows XP or later. Ignored.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOSTARTPAGE">
            <summary>Windows XP or later. Ignored.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOAUTOTRAYNOTIFY">
            <summary>
            Windows XP or later. If nonzero, the system administrator has forced all taskbar icons to be visible, even if they are
            inactive, overriding the user's decision to hide inactive taskbar icons. Applications do not need to perform any special actions.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOTASKGROUPING">
            <summary>
            Windows XP or later. If nonzero, the system administrator has disabled grouping of similar taskbar buttons, overriding the
            user's decision to enable taskbar button grouping. Applications do not need to perform any special actions.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOCDBURNING">
            <summary>
            Windows XP or later. If nonzero, the system administrator has disabled CD burning. Applications should disable any CD-burning capabilities.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_MYCOMPNOPROP">
            <summary>
            Windows 2000 SP3 or later. If nonzero, the system administrator has disabled the System Properties dialog box. Applications
            should not launch the System Properties dialog box.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_MYDOCSNOPROP">
            <summary>
            Windows 2000 SP3 or later. If nonzero, the system administrator has disabled the ability to view properties of the My
            Documents folder. Applications should not redirect the My Documents folder.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOSTARTPANEL">
            <summary>
            Windows XP or later. If nonzero, the system administrator has disabled the Windows XP Start menu. Applications do not need to
            perform any special actions.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NODISPLAYAPPEARANCEPAGE">
            <summary>
            Windows XP or later. If 1, the system administrator has disabled the Themes and Appearance pages from the Desktop Properties
            dialog box. Applications should not change system colors and appearance.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOTHEMESTAB">
            <summary>
            Windows XP or later. If nonzero, the system administrator has disabled the Themes page from the Desktop Properties dialog.
            Applications should not change visual styles.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOVISUALSTYLECHOICE">
            <summary>
            Windows XP or later. If nonzero, the system administrator has disabled the ability to change visual styles. Applications
            should not change visual styles.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOSIZECHOICE">
            <summary>
            Windows XP or later. If nonzero, the system administrator has disabled the ability to change font sizes from the Appearance
            page on the Desktop Properties dialog box. Applications should not change system metrics.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOCOLORCHOICE">
            <summary>
            Windows XP or later. If nonzero, the system administrator has disabled the ability to change system colors from the
            Appearance page on the Desktop Properties dialog box. Applications should not change system colors.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_SETVISUALSTYLE">
            <summary>
            Windows XP or later. If nonzero, the system administrator has forced a specific visual style. Applications should not change
            visual styles.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_STARTRUNNOHOMEPATH">
            <summary>
            Windows 2000 SP3 or later. If nonzero, the default working directory for programs run from the Run dialog is not forced to
            the user's home directory. Applications do not need to perform any special actions.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOUSERNAMEINSTARTPANEL">
            <summary>
            Windows XP, Windows 2003. If nonzero, the system administrator has hidden the user name on the Windows XP Start menu.
            Applications do not need to perform any special actions. Windows Vista or later: Not used.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOMYCOMPUTERICON">
            <summary>
            Windows XP or later. If nonzero, the system administrator has hidden the My Computer icon. Applications should not permit
            access to the My Computer icon.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOSMNETWORKPLACES">
            <summary>
            Windows XP or later. If nonzero, the system administrator has hidden the Network Places icon on the Start menu. Applications
            do not need to perform any special actions.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOSMPINNEDLIST">
            <summary>
            Windows XP or later. If nonzero, the system administrator has hidden the list of "pinned" items on the Start menu.
            Applications do not need to perform any special actions.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOSMMYMUSIC">
            <summary>
            Windows XP or later. If nonzero, the system administrator has hidden the My Music icon on the Start menu. Applications do not
            need to perform any special actions.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOSMEJECTPC">
            <summary>
            Windows XP or later. If nonzero, the system administrator has hidden the Eject command on the Start menu. Applications should
            not enable the user to eject the computer.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOSMMOREPROGRAMS">
            <summary>
            Windows XP or later. If nonzero, the system administrator has hidden the All Programs item on the Windows XP Start menu.
            Applications should not show the contents of the Start menu folder to the user.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOSMMFUPROGRAMS">
            <summary>
            Windows XP or later. If nonzero, the system administrator has hidden the list of most frequently used programs on the Windows
            XP Start menu. Applications do not need to perform any special actions.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOTRAYITEMSDISPLAY">
            <summary>
            Windows XP or later. If nonzero, the system administrator has hidden all taskbar notification icons, regardless of activity.
            Applications do not need to perform any special actions.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOTOOLBARSONTASKBAR">
            <summary>
            Windows XP or later. If nonzero, the system administrator has hidden all taskbar toolbars, such as Quick Launch. Applications
            do not need to perform any special actions.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOSMCONFIGUREPROGRAMS">
            <summary>
            Windows 2000 SP3 or later. If nonzero, the system administrator has hidden the Set Program Access and Defaults shortcut on
            the Start menu. Applications that enumerate the contents of the Start menu should not show the Set Program Access and
            Defaults shortcut to the user.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_HIDECLOCK">
            <summary>
            Windows XP or later. If nonzero, the system administrator has hidden the clock on the taskbar, overriding any user
            preference. Applications do not need to perform any special actions.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOLOWDISKSPACECHECKS">
            <summary>
            Windows XP or later. If nonzero, the system administrator has disabled taskbar warnings when disk space has become low.
            Applications do not need to perform any special actions.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOENTIRENETWORK">
            <summary>
            Windows 2000 Service Pack 4 (SP4) or later. If nonzero, the system administrator has disabled the Entire Network icon in
            Network Places. Applications should remove the ability to browse domain resources.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NODESKTOPCLEANUP">
            <summary>
            Windows XP, Windows2003. If nonzero, the system administrator has disabled the desktop cleaner. Applications do not need to
            perform any special actions. Windows Vista or later: Not used.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_BITBUCKNUKEONDELETE">
            <summary>
            Windows XP or later. If nonzero, the system administrator has required that deleted files be removed immediately instead of
            being placed in the Recycle Bin, overriding any user preference. Applications do not need to perform any special actions.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_BITBUCKCONFIRMDELETE">
            <summary>
            Windows XP or later. If nonzero, the system administrator has disabled the user's ability to specify whether confirmation
            dialogs should be displayed when files are moved to the Recycle Bin. Applications do not need to perform any special actions.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_BITBUCKNOPROP">
            <summary>
            Windows XP or later. If nonzero, the system administrator has disabled the user's ability to view or modify Recycle Bin
            properties. Applications do not need to perform any special actions.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NODISPBACKGROUND">
            <summary>
            Windows XP or later. If nonzero, the system administrator has disabled the user's ability to view or modify the desktop
            wallpaper. Applications should remove the ability to change the desktop wallpaper.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NODISPSCREENSAVEPG">
            <summary>
            Windows XP or later. If nonzero, the system administrator has disabled the user's ability to view or modify screensaver
            settings. Applications should remove the ability to change the screensaver or screensaver settings.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NODISPSETTINGSPG">
            <summary>
            Windows XP or later. If nonzero, the system administrator has disabled the user's ability to view or modify screen color
            depth and resolution settings. Applications should remove the ability to change display color depth and resolution.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NODISPSCREENSAVEPREVIEW">
            <summary>Windows XP or later. Ignored.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NODISPLAYCPL">
            <summary>
            Windows XP or later. If nonzero, the system administrator has disabled the Display Properties dialog box in Control Panel.
            Applications should remove the ability to change system colors, metrics, visual styles, font size, desktop wallpaper,
            screensaver, screensaver settings, screen color depth, or display resolution.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_HIDERUNASVERB">
            <summary>
            Windows XP or later. If nonzero, the system administrator has disabled the "Run As" command for Shell objects. Applications
            should remove corresponding functionality.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOTHUMBNAILCACHE">
            <summary>
            Windows XP or later. If nonzero, the system administrator has disabled caching of thumbnails. Applications do not need to
            perform any special actions.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOSTRCMPLOGICAL">
            <summary>
            Windows XP SP1 or later, or IE_BACKCOMPAT_VERSION defined. If nonzero, the system administrator has specified that filenames
            should be sorted with the StringCompare function instead of the StrCmpLogical function. Applications that sort filenames
            should sort accordingly. (This policy does not apply to Windows 2000.)
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOPUBLISHWIZARD">
            <summary>
            Windows XP SP1 or later service pack, Windows Server 2003 or IE_BACKCOMPAT_VERSION defined. Disables the Windows Publishing
            Wizard (WPW).Windows Vista or later: Not used.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOONLINEPRINTSWIZARD">
            <summary>
            Windows XP SP1 or later, or IE_BACKCOMPAT_VERSION defined. Disables the Online Prints Wizard (OPW). Windows Vista or later:
            Not used.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOWEBSERVICES">
            <summary>
            Windows XP SP1 or later, or IE_BACKCOMPAT_VERSION defined. Disables the web specified services for both the Online Prints
            Wizard (OPW) and the Windows Publishing Wizard (WPW).
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_ALLOWUNHASHEDWEBVIEW">
            <summary>
            Windows 2000 SP3 or later, Windows XP, or Windows Server 2003. If nonzero, the system administrator has granted permission
            for unregistered web view templates to be displayed. Applications do not need to perform any special actions. Windows Vista
            or later: Not used.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_ALLOWLEGACYWEBVIEW">
            <summary>
            If nonzero, the system administrator has granted permission for old web view templates (created prior to Windows XP) to be
            converted to Windows XP templates. Applications do not need to perform any special actions. Windows Vista or later: Not used.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_REVERTWEBVIEWSECURITY">
            <summary>
            Windows 2000 SP3 or later, Windows XP, or Windows Server 2003. If nonzero, the system administrator has reduced web view
            security to the level that existed in Windows 2000 SP2 or earlier. Applications do not need to perform any special actions.
            (This policy does not apply to Windows 2000 SP2 or earlier.) Windows Vista or later: Not used.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_INHERITCONSOLEHANDLES">
            <summary>
            Windows 2000 Service Pack 4 (SP4) or later. If nonzero, the ShellExec function checks if the current process and target
            process are console processes that can inherit handles.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_SORTMAXITEMCOUNT">
            <summary>
            Windows XP SP2 and SP3 only. Not supported under Windows Vista or later. Do not sort views with more items than this key.
            Useful for viewing large numbers of files in one folder.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOREMOTERECURSIVEEVENTS">
            <summary>Windows XP SP2 or later. Do not register network change events recursively. This helps to avoid network traffic.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOREMOTECHANGENOTIFY">
            <summary>Windows XP SP2 or later. Do not notify for remote change notifications.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOSIMPLENETIDLIST">
            <summary>Windows XP SP2 or SP3 only. Not supported under Windows Vista or later. No simple network IDLists.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOENUMENTIRENETWORK">
            <summary>Windows XP SP2 or later. Do not enumerate the entire network.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NODETAILSTHUMBNAILONNETWORK">
            <summary>Windows XP SP2 and SP3 only. Not supported under Windows Vista or later.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOINTERNETOPENWITH">
            <summary>
            Windows XP SP2 or later. If nonzero, the system administrator has removed the ability to resolve file associations using the
            Internet. The option Use the web service to find the appropriate program is unavailable in the dialog displayed when the user
            selects Open With or double-clicks an unassociated file type.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_DONTRETRYBADNETNAME">
            <summary>Windows XP SP2 or later. In Network Places, if the provider returns ERROR_BAD_NET_NAME, do not retry.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_ALLOWFILECLSIDJUNCTIONS">
            <summary>
            Windows XP SP2 or later, Windows Server 2003. Re-enable legacy support for file.{guid} junctions in file system folders.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOUPNPINSTALL">
            <summary>Windows XP SP2 or later. Disable the Install Universal Plug and Play (UPnP) task in My Network Places.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_ARP_DONTGROUPPATCHES">
            <summary>
            If nonzero, the system administrator has removed the option to list individual patches in Add/Remove Programs. Windows Vista
            or later: Not used.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_ARP_NOCHOOSEPROGRAMSPAGE">
            <summary>
            If nonzero, the system administrator has removed the option to choose the programs page. Windows Vista or later: Not used.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NODISCONNECT">
            <summary>
            Not supported under Windows Vista or later. If nonzero, the system administrator has removed the Disconnect option from the
            Start menu and Task Manager. Applications should remove the ability to disconnect users from a Terminal Server session.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOSECURITY">
            <summary>
            Not supported under Windows Vista and later. If nonzero, the system administrator has removed the Windows Security option
            from the Start menu and Task Manager. Applications do not need to perform any special actions.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_NOFILEASSOCIATE">
            <summary>
            Not supported under Windows Vista and later. If nonzero, the system administrator has removed the ability to change file
            associations. Applications should not enable users to change file associations arbitrarily.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_ALLOWCOMMENTTOGGLE">
            <summary>
            Windows XP SP2 only. Not supported under Windows Vista or later. Allows the user to toggle the position of the Comment and
            the Computer Name.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.RESTRICTIONS.REST_USEDESKTOPINICACHE">
            <summary>
            Windows XP SP2 and SP3 only. Not supported under Windows Vista or later. Cache desktop.ini entries from network folders.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.SCNRT_STATUS">
            <summary>
            <para>Indicates whether to enable or disable Async Register and Deregister for SHChangeNotifyRegisterThread.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SCNRT_STATUS.SCNRT_ENABLE">
            <summary>Enable Async Register and Deregister for SHChangeNotifyRegisterThread.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SCNRT_STATUS.SCNRT_DISABLE">
            <summary>Disable Async Register and Deregister for SHChangeNotifyRegisterThread.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.SHARD">
            <summary>
            Indicates the interpretation of the data passed by SHAddToRecentDocs in its pv parameter to identify the item whose usage
            statistics are being tracked.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHARD.SHARD_APPIDINFO">
            <summary>
            <c>Windows 7 and later.</c> The pv parameter points to a SHARDAPPIDINFO structure that pairs an IShellItem that identifies
            the item with an AppUserModelID that associates it with a particular process or application.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHARD.SHARD_APPIDINFOIDLIST">
            <summary>
            <c>Windows 7 and later.</c> The pv parameter points to a SHARDAPPIDINFOIDLIST structure that pairs an absolute PIDL that
            identifies the item with an AppUserModelID that associates it with a particular process or application.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHARD.SHARD_APPIDINFOLINK">
            <summary>
            <c>Windows 7 and later.</c> The pv parameter points to a SHARDAPPIDINFOLINK structure that pairs an IShellLink that
            identifies the item with an AppUserModelID that associates it with a particular process or application.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHARD.SHARD_LINK">
            <summary><c>Windows 7 and later.</c> The pv parameter is an interface pointer to an IShellLink object.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHARD.SHARD_PATHA">
            <summary>The pv parameter points to a null-terminated ANSI string with the path and file name of the object.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHARD.SHARD_PATHW">
            <summary>The pv parameter points to a null-terminated Unicode string with the path and file name of the object.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHARD.SHARD_PIDL">
            <summary>
            The pv parameter points to a PIDL that identifies the document's file object. PIDLs that identify non-file objects are not accepted.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHARD.SHARD_SHELLITEM">
            <summary><c>Windows 7 and later.</c> The pv parameter is an interface pointer to an IShellItem object.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.SHCNE">
            <summary>Events used in SHChangeNotify.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHCNE.SHCNE_RENAMEITEM">
            <summary>
            The name of a nonfolder item has changed. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. dwItem1 contains the
            previous PIDL or name of the item. dwItem2 contains the new PIDL or name of the item.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHCNE.SHCNE_CREATE">
            <summary>
            A nonfolder item has been created. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. dwItem1 contains the item that was
            created. dwItem2 is not used and should be NULL.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHCNE.SHCNE_DELETE">
            <summary>
            A nonfolder item has been deleted. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. dwItem1 contains the item that was
            deleted. dwItem2 is not used and should be NULL.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHCNE.SHCNE_MKDIR">
            <summary>
            A folder has been created. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. dwItem1 contains the folder that was
            created. dwItem2 is not used and should be NULL.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHCNE.SHCNE_RMDIR">
            <summary>
            A folder has been removed. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. dwItem1 contains the folder that was
            removed. dwItem2 is not used and should be NULL.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHCNE.SHCNE_MEDIAINSERTED">
            <summary>
            Storage media has been inserted into a drive. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. dwItem1 contains the
            root of the drive that contains the new media. dwItem2 is not used and should be NULL.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHCNE.SHCNE_MEDIAREMOVED">
            <summary>
            Storage media has been removed from a drive. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. dwItem1 contains the
            root of the drive from which the media was removed. dwItem2 is not used and should be NULL.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHCNE.SHCNE_DRIVEREMOVED">
            <summary>
            A drive has been removed. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. dwItem1 contains the root of the drive that
            was removed. dwItem2 is not used and should be NULL.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHCNE.SHCNE_DRIVEADD">
            <summary>
            A drive has been added. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. dwItem1 contains the root of the drive that
            was added. dwItem2 is not used and should be NULL.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHCNE.SHCNE_NETSHARE">
            <summary>
            A folder on the local computer is being shared via the network. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags.
            dwItem1 contains the folder that is being shared. dwItem2 is not used and should be NULL.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHCNE.SHCNE_NETUNSHARE">
            <summary>
            A folder on the local computer is no longer being shared via the network. SHCNF_IDLIST or SHCNF_PATH must be specified in
            uFlags. dwItem1 contains the folder that is no longer being shared. dwItem2 is not used and should be NULL.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHCNE.SHCNE_ATTRIBUTES">
            <summary>
            The attributes of an item or folder have changed. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. dwItem1 contains
            the item or folder that has changed. dwItem2 is not used and should be NULL.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHCNE.SHCNE_UPDATEDIR">
            <summary>
            The contents of an existing folder have changed, but the folder still exists and has not been renamed. SHCNF_IDLIST or
            SHCNF_PATH must be specified in uFlags. dwItem1 contains the folder that has changed. dwItem2 is not used and should be NULL.
            If a folder has been created, deleted, or renamed, use SHCNE_MKDIR, SHCNE_RMDIR, or SHCNE_RENAMEFOLDER, respectively.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHCNE.SHCNE_UPDATEITEM">
            <summary>
            An existing item (a folder or a nonfolder) has changed, but the item still exists and has not been renamed. SHCNF_IDLIST or
            SHCNF_PATH must be specified in uFlags. dwItem1 contains the item that has changed. dwItem2 is not used and should be NULL.
            If a nonfolder item has been created, deleted, or renamed, use SHCNE_CREATE, SHCNE_DELETE, or SHCNE_RENAMEITEM, respectively, instead.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHCNE.SHCNE_SERVERDISCONNECT">
            <summary>
            The computer has disconnected from a server. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. dwItem1 contains the
            server from which the computer was disconnected. dwItem2 is not used and should be NULL.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHCNE.SHCNE_UPDATEIMAGE">
            <summary>
            An image in the system image list has changed. SHCNF_DWORD must be specified in uFlags. dwItem2 contains the index in the
            system image list that has changed. dwItem1 is not used and should be NULL.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHCNE.SHCNE_DRIVEADDGUI">
            <summary>
            A drive has been added. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. dwItem1 contains the root of the drive that
            was added. dwItem2 is not used and should be NULL.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHCNE.SHCNE_RENAMEFOLDER">
            <summary>
            The name of a folder has changed. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. dwItem1 contains the previous PIDL
            or name of the folder. dwItem2 contains the new PIDL or name of the folder.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHCNE.SHCNE_FREESPACE">
            <summary>
            The amount of free space on a drive has changed. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. dwItem1 contains the
            root of the drive on which the free space changed. dwItem2 is not used and should be NULL.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHCNE.SHCNE_EXTENDED_EVENT">
            <summary>Not currently used.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHCNE.SHCNE_ASSOCCHANGED">
            <summary>
            A file type association has changed. SHCNF_IDLIST must be specified in the uFlags parameter. dwItem1 and dwItem2 are not used
            and must be NULL. This event should also be sent for registered protocols.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHCNE.SHCNE_DISKEVENTS">
            <summary>All disk related events.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHCNE.SHCNE_GLOBALEVENTS">
            <summary>All global events.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHCNE.SHCNE_ALLEVENTS">
            <summary>All events.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHCNE.SHCNE_INTERRUPT">
            <summary>
            The presence of this flag indicates that the event was generated by an interrupt. It is stripped out before the clients of
            SHCNNotify_ see it.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.SHCNF">
            <summary>Flags used in SHChangeNotify.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHCNF.SHCNF_IDLIST">
            <summary>
            dwItem1 and dwItem2 are the addresses of ITEMIDLIST structures that represent the item(s) affected by the change. Each
            ITEMIDLIST must be relative to the desktop folder.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHCNF.SHCNF_PATHA">
            <summary>
            dwItem1 and dwItem2 are the addresses of null-terminated strings of maximum length MAX_PATH that contain the full path names
            of the items affected by the change.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHCNF.SHCNF_PRINTERA">
            <summary>
            dwItem1 and dwItem2 are the addresses of null-terminated strings that represent the friendly names of the printer(s) affected
            by the change.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHCNF.SHCNF_DWORD">
            <summary>The dwItem1 and dwItem2 parameters are DWORD values.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHCNF.SHCNF_PATHW">
            <summary>
            dwItem1 and dwItem2 are the addresses of null-terminated strings of maximum length MAX_PATH that contain the full path names
            of the items affected by the change.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHCNF.SHCNF_PRINTERW">
            <summary>
            dwItem1 and dwItem2 are the addresses of null-terminated strings that represent the friendly names of the printer(s) affected
            by the change.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHCNF.SHCNF_TYPE">
            <summary>Indicates that a type is defined.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHCNF.SHCNF_FLUSH">
            <summary>
            The function should not return until the notification has been delivered to all affected components. As this flag modifies
            other data-type flags, it cannot be used by itself.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHCNF.SHCNF_FLUSHNOWAIT">
            <summary>
            The function should begin delivering notifications to all affected components but should return as soon as the notification
            process has begun. As this flag modifies other data-type flags, it cannot by used by itself. This flag includes SHCNF_FLUSH.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHCNF.SHCNF_NOTIFYRECURSIVE">
            <summary>Notify clients registered for all children.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.SHCNRF">
            <summary>Flags used by SHChangeNotifyRegister.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHCNRF.SHCNRF_InterruptLevel">
            <summary>Interrupt level notifications from the file system.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHCNRF.SHCNRF_ShellLevel">
            <summary>Shell-level notifications from the shell.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHCNRF.SHCNRF_RecursiveInterrupt">
            <summary>
            Interrupt events on the whole subtree. This flag must be combined with the SHCNRF_InterruptLevel flag. When using this flag,
            notifications must also be made recursive by setting the fRecursive member of the corresponding SHChangeNotifyEntry structure
            referenced by pshcne to TRUE. Use of SHCNRF_RecursiveInterrupt on a single level view—for example, a PIDL that is relative
            and contains only one SHITEMID—will block event notification at the highest level and thereby prevent a recursive, child
            update. Thus, an icon dragged into the lowest level of a folder hierarchy may fail to appear in the view as expected.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHCNRF.SHCNRF_NewDelivery">
            <summary>
            Messages received use shared memory. Call SHChangeNotification_Lock to access the actual data. Call
            SHChangeNotification_Unlock to release the memory when done. <note type="note">We recommend this flag because it provides a
            more robust delivery method. All clients should specify this flag.</note>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.SHDID">
            <summary>Receives a value that determines what type the item is in <see cref="T:Vanara.PInvoke.Shell32.SHDESCRIPTIONID"/>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHDID.SHDID_ROOT_REGITEM">
            <summary>The item is a registered item on the desktop.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHDID.SHDID_FS_FILE">
            <summary>The item is a file.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHDID.SHDID_FS_DIRECTORY">
            <summary>The item is a folder.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHDID.SHDID_FS_OTHER">
            <summary>The item is an unidentified item in the file system.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHDID.SHDID_COMPUTER_DRIVE35">
            <summary>The item is a 3.5-inch floppy drive.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHDID.SHDID_COMPUTER_DRIVE525">
            <summary>The item is a 5.25-inch floppy drive.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHDID.SHDID_COMPUTER_REMOVABLE">
            <summary>The item is a removable disk.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHDID.SHDID_COMPUTER_FIXED">
            <summary>The item is a fixed hard disk.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHDID.SHDID_COMPUTER_NETDRIVE">
            <summary>The item is a drive that is mapped to a network share.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHDID.SHDID_COMPUTER_CDROM">
            <summary>The item is a CD-ROM drive.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHDID.SHDID_COMPUTER_RAMDISK">
            <summary>The item is a RAM disk.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHDID.SHDID_COMPUTER_OTHER">
            <summary>The item is an unidentified system device.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHDID.SHDID_NET_DOMAIN">
            <summary>The item is a network domain.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHDID.SHDID_NET_SERVER">
            <summary>The item is a network server.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHDID.SHDID_NET_SHARE">
            <summary>The item is a network share.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHDID.SHDID_NET_RESTOFNET">
            <summary>Not currently used.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHDID.SHDID_NET_OTHER">
            <summary>The item is an unidentified network resource.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHDID.SHDID_COMPUTER_IMAGING">
            <summary>Windows XP and later. Not currently used.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHDID.SHDID_COMPUTER_AUDIO">
            <summary>Windows XP and later. Not currently used.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHDID.SHDID_COMPUTER_SHAREDDOCS">
            <summary>Windows XP and later. The item is the system shared documents folder.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHDID.SHDID_MOBILE_DEVICE">
            <summary>Windows Vista and later. The item is a mobile device, such as a personal digital assistant (PDA).</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.SHFMT_ID">
            <summary>Format ID for SHFormatDrive.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHFMT_ID.SHFMT_ID_DEFAULT">
            <summary>The default format ID.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.SHFMT_OPT">
            <summary>Format options for SHFormatDrive.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHFMT_OPT.SHFMT_OPT_FULL">
            <summary>If this flag is set, then the Quick Format option is selected.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHFMT_OPT.SHFMT_OPT_SYSONLY">
            <summary>Selects the Create an MS-DOS startup disk option, creating a system boot disk.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.SHGetDataFormat">
            <summary>The format in which the data is being requested.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHGetDataFormat.SHGDFIL_FINDDATA">
            <summary>Format used for file system objects. The pv parameter is the address of a WIN32_FIND_DATA structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHGetDataFormat.SHGDFIL_NETRESOURCE">
            <summary>
            Format used for network resources. The pv parameter is the address of a NETRESOURCE structure. The NETRESOURCE structure is
            defined in the <c>Vanara.PInvoke.Mpr</c> library.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHGetDataFormat.SHGDFIL_DESCRIPTIONID">
            <summary>Version 4.71. Format used for network resources. The pv parameter is the address of an SHDESCRIPTIONID structure.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.SHGFP">
            <summary>Flags used by <see cref="M:Vanara.PInvoke.Shell32.SHGetFolderPath(Vanara.PInvoke.HWND,Vanara.PInvoke.Shell32.CSIDL,Vanara.PInvoke.HTOKEN,Vanara.PInvoke.Shell32.SHGFP,System.Text.StringBuilder)"/>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHGFP.SHGFP_TYPE_CURRENT">
            <summary>Retrieve the folder's current path.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHGFP.SHGFP_TYPE_DEFAULT">
            <summary>Retrieve the folder's default path.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.SHIL">
            <summary>Used by SHGetImageList.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHIL.SHIL_LARGE">
            <summary>
            The image size is normally 32x32 pixels. However, if the Use large icons option is selected from the Effects section of the
            Appearance tab in Display Properties, the image is 48x48 pixels.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHIL.SHIL_SMALL">
            <summary>These images are the Shell standard small icon size of 16x16, but the size can be customized by the user.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHIL.SHIL_EXTRALARGE">
            <summary>
            These images are the Shell standard extra-large icon size. This is typically 48x48, but the size can be customized by the user.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHIL.SHIL_SYSSMALL">
            <summary>
            These images are the size specified by GetSystemMetrics called with SM_CXSMICON and GetSystemMetrics called with SM_CYSMICON.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHIL.SHIL_JUMBO">
            <summary>Windows Vista and later. The image is normally 256x256 pixels.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.SHOP">
            <summary>Object type options for SHObjectProperties.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHOP.SHOP_PRINTERNAME">
            <summary>Contains the friendly name of a printer.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHOP.SHOP_FILEPATH">
            <summary>Contains a fully qualified file name.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHOP.SHOP_VOLUMEGUID">
            <summary>
            Contains either (a) a volume name of the form \?\Volume{GUID}, where {GUID} is a globally unique identifier (for example,
            "\?\Volume{2eca078d-5cbc-43d3-aff8-7e8511f60d0e})", or (b) a drive path (for example, "C:").
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.SHPPFW">
            <summary>Flags that determine behavior options in SHPathPrepareForWrite.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHPPFW.SHPPFW_NONE">
            <summary>Do not create new directories.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHPPFW.SHPPFW_DEFAULT">
            <summary>
            Default. Do not prompt the user if a directory needs to be created. This is identical to <c>SHPPFW_DIRCREATE</c>. Do not pass
            with <c>SHPPFW_ASKDIRCREATE</c>.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHPPFW.SHPPFW_DIRCREATE">
            <summary>Create directories without prompting the user. Do not pass with <c>SHPPFW_ASKDIRCREATE</c>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHPPFW.SHPPFW_ASKDIRCREATE">
            <summary>Prompt the user before creating directories. Do not pass with <c>SHPPFW_DIRCREATE</c>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHPPFW.SHPPFW_IGNOREFILENAME">
            <summary>
            Last item in is a file name, so ignore. For example, if ="C:\MyDir\MyFile.doc", only use "C:\MyDir". If
            ="C:\MyFirDir\MySecDir", only use "C:\MyFirDir".
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHPPFW.SHPPFW_NOWRITECHECK">
            <summary>Not currently implemented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHPPFW.SHPPFW_MEDIACHECKONLY">
            <summary>
            <c>Windows XP or later.</c> Suppresses the "not accessible" error message box, which displays when a failure other than a
            user cancellation occurs, and is not <c>NULL</c>.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.SSF">
            <summary>
            Used by the <c>SHGetSetSettings</c> function to specify which members of its <c>SHELLSTATE</c> structure should be set or retrived.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SSF.SSF_SHOWALLOBJECTS">
            <summary>The fShowAllObjects member is being requested.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SSF.SSF_SHOWEXTENSIONS">
            <summary>The fShowExtensions member is being requested.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SSF.SSF_HIDDENFILEEXTS">
            <summary>Not used.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SSF.SSF_SERVERADMINUI">
            <summary>Not used.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SSF.SSF_SHOWCOMPCOLOR">
            <summary>The fShowCompColor member is being requested.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SSF.SSF_SORTCOLUMNS">
            <summary>The lParamSort and iSortDirection members are being requested.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SSF.SSF_SHOWSYSFILES">
            <summary>The fShowSysFiles member is being requested.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SSF.SSF_DOUBLECLICKINWEBVIEW">
            <summary>The fDoubleClickInWebView member is being requested.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SSF.SSF_SHOWATTRIBCOL">
            <summary>
            The fShowAttribCol member is being requested.
            <para>Windows Vista: Not used.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SSF.SSF_DESKTOPHTML">
            <summary>
            The fDesktopHTML member is being requested. Set is not available. Instead, for versions of Windows prior to Windows XP,
            enable desktop HTML by IActiveDesktop. The use of IActiveDesktop for this purpose, however, is not recommended for Windows XP
            and later versions of Windows, and is deprecated in Windows Vista.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SSF.SSF_WIN95CLASSIC">
            <summary>The fWin95Classic member is being requested.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SSF.SSF_DONTPRETTYPATH">
            <summary>The fDontPrettyPath member is being requested.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SSF.SSF_MAPNETDRVBUTTON">
            <summary>The fMapNetDrvBtn member is being requested.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SSF.SSF_SHOWINFOTIP">
            <summary>The fShowInfoTip member is being requested.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SSF.SSF_HIDEICONS">
            <summary>The fHideIcons member is being requested.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SSF.SSF_NOCONFIRMRECYCLE">
            <summary>The fNoConfirmRecycle member is being requested.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SSF.SSF_FILTER">
            <summary>
            The fFilter member is being requested.
            <para>Windows Vista: Not used.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SSF.SSF_WEBVIEW">
            <summary>The fWebView member is being requested.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SSF.SSF_SHOWSUPERHIDDEN">
            <summary>The fShowSuperHidden member is being requested.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SSF.SSF_SEPPROCESS">
            <summary>The fSepProcess member is being requested.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SSF.SSF_NONETCRAWLING">
            <summary>Windows XP and later. The fNoNetCrawling member is being requested.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SSF.SSF_STARTPANELON">
            <summary>Windows XP and later. The fStartPanelOn member is being requested.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SSF.SSF_SHOWSTARTPAGE">
            <summary>Not used.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SSF.SSF_AUTOCHECKSELECT">
            <summary>Windows Vista and later. The fAutoCheckSelect member is being requested.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SSF.SSF_ICONSONLY">
            <summary>Windows Vista and later. The fIconsOnly member is being requested.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SSF.SSF_SHOWTYPEOVERLAY">
            <summary>Windows Vista and later. The fShowTypeOverlay member is being requested.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SSF.SSF_SHOWSTATUSBAR">
            <summary>Windows 8 and later: The fShowStatusBar member is being requested.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.VALIDATEUNC">
            <summary>Flags for SHValidateUNC.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.VALIDATEUNC.VALIDATEUNC_CONNECT">
            <summary>
            Connect a drive letter. When this flag is set, the value in is changed to the local drive to which the UNC is mapped on the
            local machine.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.VALIDATEUNC.VALIDATEUNC_NOUI">
            <summary>On either failure or success, display no UI.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.VALIDATEUNC.VALIDATEUNC_PRINT">
            <summary>Validate as a print share rather than disk share.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.VALIDATEUNC.VALIDATEUNC_PERSIST">
            <summary><c>Windows Vista and later</c>. The connection should be made persistent.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.AssocGetDetailsOfPropKey(Vanara.PInvoke.Shell32.IShellFolder,Vanara.PInvoke.Shell32.PIDL,Vanara.PInvoke.Ole32.PROPERTYKEY@,System.Object@,System.Boolean@)">
            <summary>
            <para>Retrieves the value for a given property key using the file association information provided by the Namespace Extensions.</para>
            </summary>
            <param name="psf">
            <para>Type: <c>IShellFolder*</c></para>
            <para>A pointer to the shell folder for which the details of the property key of the file association are being retrieved.</para>
            </param>
            <param name="pidl">
            <para>Type: <c>PCUITEMID_CHILD</c></para>
            <para>The PIDL of the child item for which the file associations are being requested.</para>
            </param>
            <param name="pkey">
            <para>Type: <c>PROPERTYKEY*</c></para>
            <para>A pointer to the property key that is being retrieved.</para>
            </param>
            <param name="pv">
            <para>Type: <c>VARIANT*</c></para>
            <para>When this function returns, contains the details of the given property key.</para>
            </param>
            <param name="pfFoundPropKey">
            <para>Type: <c>BOOL*</c></para>
            <para>When this function returns, contains a flag that is <c>TRUE</c> if the property key was found, otherwise <c>FALSE</c>.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this function succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            <para>
            This function is to be used only by implementers of IShellFolder Namespace Extensions. Other calling applications should use
            IShellFolder2::GetDetailsEx to get a value for a PROPERTYKEY. This function is to be used by implementers of <c>IShellFolder</c>
            Namespace Extensions.
            </para>
            <para>The provided namespace extension must support the use of this API in one of the following three ways.</para>
            <list type="number">
            <item>
            If the provided Namespace Extensions supports retrieving an IQueryAssociations interface for the item by implementing
            IShellFolder::GetUIObjectOf(..., <c>IID_IQueryAssociations</c>, ...), then <c>AssocGetDetailsOfPropKey</c> will use the provided
            file associations API to retrieve the value for the property key.
            </item>
            <item>
            If the provided namespace extension returns <c>SFGAO_FILESYSTEM</c> for the item from IShellFolder::GetAttributesOf and provides
            a parsing name for the item, then <c>AssocGetDetailsOfPropKey</c> will use the standard file system associations to retrieve the
            value for the property key.
            </item>
            <item>
            If the provided namespace extension returns <c>SFGAO_FOLDER</c> | <c>SFGAO_BROWSABLE</c> for the item from
            IShellFolder::GetAttributesOf, then <c>AssocGetDetailsOfPropKey</c> will use the file association for folders (
            <c>ASSOCCLASS_FOLDER</c>) to retrieve the value for the property key.
            </item>
            </list>
            <para>
            If the ShellFolder being implemented contains items that are extensible through the file associations mechanism, then you can use
            this function to retrieve
            </para>
            <para>PropertyKeys</para>
            <para>
            that are declared for a given file association. For example, if a given Shell folder drives a details pane and you want the
            properties displayed in that pane to be governed by third party file name extensions, then you can use this function to return
            </para>
            <para>PKEY_PropList_PreviewDetails</para>
            <para>
            . This key has a value that is declared in the registry for that file name extension with a semicolon delimited list of
            properties. There is a list of file name extension defined properties in the registry. This list includes but is not limited to
            the following:
            </para>
            <list type="bullet">
            <item><c>PKEY_PropList_PreviewDetails</c></item>
            <item><c>PKEY_PropList_PreviewTitle</c></item>
            <item><c>PKEY_PropList_FullDetails</c></item>
            <item><c>PKEY_PropList_TileInfo</c></item>
            <item><c>PKEY_PropList_ExtendedTileInfo</c></item>
            <item><c>PKEY_PropList_InfoTip</c></item>
            <item><c>PKEY_PropList_QuickTip</c></item>
            <item><c>PKEY_PropList_FileOperationPrompt</c></item>
            <item><c>PKEY_PropList_ConflictPrompt</c></item>
            <item><c>PKEY_PropList_SetDefaultsFor</c></item>
            <item><c>PKEY_PropList_NonPersonal</c></item>
            <item><c>PKEY_NewMenuPreferredTypes</c></item>
            <item><c>PKEY_NewMenuAllowedTypes</c></item>
            </list>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.CDefFolderMenu_Create2(Vanara.PInvoke.Shell32.PIDL,Vanara.PInvoke.HWND,System.UInt32,System.IntPtr[],Vanara.PInvoke.Shell32.IShellFolder,Vanara.PInvoke.Shell32.LPFNDFMCALLBACK,System.UInt32,Vanara.PInvoke.HKEY[],Vanara.PInvoke.Shell32.IContextMenu@)">
            <summary>
            <para>Creates a context menu for a selected group of file folder objects.</para>
            </summary>
            <param name="pidlFolder">
            <para>Type: <c>PCIDLIST_ABSOLUTE</c></para>
            <para>An ITEMIDLIST structure for the parent folder. This value can be <c>NULL</c>.</para>
            </param>
            <param name="hwnd">
            <para>Type: <c>HWND</c></para>
            <para>A handle to the parent window. This value can be <c>NULL</c>.</para>
            </param>
            <param name="cidl">
            <para>Type: <c>UINT</c></para>
            <para>The number of ITEMIDLIST structures in the array pointed to by .</para>
            </param>
            <param name="apidl">
            <para>Type: <c>PCUITEMID_CHILD_ARRAY*</c></para>
            <para>A pointer to an array of ITEMIDLIST structures, one for each item that is selected.</para>
            </param>
            <param name="psf">
            <para>Type: <c>IShellFolder*</c></para>
            <para>
            A pointer to the parent folder's IShellFolder interface. This <c>IShellFolder</c> must support the IDataObject interface. If it
            does not, <c>CDefFolderMenu_Create2</c> fails and returns E_NOINTERFACE. This value can be <c>NULL</c>.
            </para>
            </param>
            <param name="pfn">
            <para>TBD</para>
            </param>
            <param name="nKeys">
            <para>Type: <c>UINT</c></para>
            <para>The number of registry keys in the array pointed to by .</para>
            <para>
            <c>Note</c> The maximum number of registry keys is 16. Callers must enforce this limit as the API does not. Failing to do so can
            result in memory corruption.
            </para>
            </param>
            <param name="ahkeys">
            <para>Type: <c>const HKEY*</c></para>
            <para>
            A pointer to an array of registry keys that specify the context menu handlers used with the menu's entries. For more information
            on context menu handlers, see Creating Context Menu Handlers. This array can contain a maximum of 16 registry keys.
            </para>
            </param>
            <param name="ppcm">
            <para>Type: <c>IContextMenu**</c></para>
            <para>
            The address of an IContextMenu interface pointer that, when this function returns successfully, points to the <c>IContextMenu</c>
            object that represents the context menu.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this function succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.GetFileNameFromBrowse(Vanara.PInvoke.HWND,System.String,System.UInt32,System.String,System.String,System.String,System.String)">
            <summary>
            <para>
            [This function is available through Windows XP Service Pack 2 (SP2) and Windows Server 2003. It might be altered or unavailable
            in subsequent versions of Windows.]
            </para>
            <para>Creates an <c>Open</c> dialog box so that the user can specify the drive, directory, and name of a file to open.</para>
            </summary>
            <param name="hwnd">
            <para>Type: <c>HWND</c></para>
            <para>
            A handle to the window that owns the dialog box. This member can be any valid window handle, or it can be <c>NULL</c> if the
            dialog box has no owner.
            </para>
            </param>
            <param name="pszFilePath">
            <para>Type: <c>PWSTR</c></para>
            <para>
            A null-terminated Unicode string that contains a file name used to initialize the File Name edit control. This string corresponds
            to the OPENFILENAME structure's <c>lpstrFile</c> member and is used in exactly the same way.
            </para>
            </param>
            <param name="cchFilePath">
            <para>Type: <c>UINT</c></para>
            <para>The number of characters in , including the terminating null character.</para>
            </param>
            <param name="pszWorkingDir">
            <para>Type: <c>PCWSTR</c></para>
            <para>
            The fully qualified file path of the initial directory. This string corresponds to the OPENFILENAME structure's
            <c>lpstrInitialDir</c> member and is used in exactly the same way.
            </para>
            </param>
            <param name="pszDefExt">
            <para>Type: <c>PCWSTR</c></para>
            <para>
            A null-terminated Unicode string that contains the default file name extension. This extension is added to if the user does not
            specify an extension. The string should not contain any '.' characters. If this string is <c>NULL</c> and the user fails to type
            an extension, no extension is appended.
            </para>
            </param>
            <param name="pszFilters">
            <para>Type: <c>PCWSTR</c></para>
            <para>
            A null-terminated Unicode string that defines the filter. This string corresponds to the OPENFILENAME structure's
            <c>lpstrFilter</c> member and is used in exactly the same way.
            </para>
            </param>
            <param name="pszTitle">
            <para>TBD</para>
            </param>
            <returns>
            <para>Type: <c>BOOL</c></para>
            <para>
            If the user specifies a file name and clicks <c>OK</c>, the return value is <c>TRUE</c>. The buffer that points to contains the
            full path and file name that the user specifies. If the user cancels or closes the <c>Open</c> dialog box or an error occurs, the
            return value is <c>FALSE</c>.
            </para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ILAppendID(Vanara.PInvoke.Shell32.PIDL,Vanara.PInvoke.Shell32.SHITEMID@,System.Boolean)">
            <summary>
            <para>Appends or prepends an SHITEMID structure to an ITEMIDLIST structure.</para>
            </summary>
            <param name="pidl">
            <para>Type: <c>PIDLIST_RELATIVE</c></para>
            <para>
            A pointer to an ITEMIDLIST structure. When the function returns, the SHITEMID structure specified by pmkid is appended or prepended.
            </para>
            </param>
            <param name="pmkid">
            <para>Type: <c>LPSHITEMID</c></para>
            <para>A pointer to a SHITEMID structure to be appended or prepended to pidl.</para>
            </param>
            <param name="fAppend">
            <para>Type: <c>BOOL</c></para>
            <para>Value that is set to <c>TRUE</c> to append pmkid to pidl. Set this value to <c>FALSE</c> to prepend pmkid to pidl.</para>
            </param>
            <returns>
            <para>Type: <c>PIDLIST_RELATIVE</c></para>
            <para>Returns the ITEMIDLIST structure specified by pidl, with pmkid appended or prepended. Returns <c>NULL</c> on failure.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ILFindChild(Vanara.PInvoke.Shell32.PIDL,Vanara.PInvoke.Shell32.PIDL)">
            <summary>
            <para>Determines whether a specified ITEMIDLIST structure is the child of another <c>ITEMIDLIST</c> structure.</para>
            </summary>
            <param name="pidlParent">
            <para>Type: <c>PCIDLIST_ABSOLUTE</c></para>
            <para>A pointer to the parent ITEMIDLIST structure.</para>
            </param>
            <param name="pidlChild">
            <para>Type: <c>PCIDLIST_ABSOLUTE</c></para>
            <para>A pointer to the child ITEMIDLIST structure.</para>
            </param>
            <returns>
            <para>Type: <c>PUIDLIST_RELATIVE</c></para>
            <para>
            Returns a pointer to the child's simple ITEMIDLIST structure if is a child of . The returned structure consists of , minus the
            SHITEMID structures that make up . Returns <c>NULL</c> if is not a child of .
            </para>
            <para>
            <c>Note</c> The returned pointer is a pointer into the existing parent structure. It is an alias for . No new memory is allocated
            in association with the returned pointer. It is not the caller's responsibility to free the returned value.
            </para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ILLoadFromStreamEx(System.Runtime.InteropServices.ComTypes.IStream,Vanara.PInvoke.Shell32.PIDL@)">
            <summary>
            <para>[</para>
            <para>ILLoadFromStreamEx(IStream*, PIDLIST_ABSOLUTE*)</para>
            <para>
            is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in
            subsequent versions.]
            </para>
            <para>Loads an absolute ITEMIDLIST from an IStream.</para>
            </summary>
            <param name="pstm">
            <para>Type: <c>IStream*</c></para>
            <para>A pointer to the IStream interface from which the absolute ITEMIDLIST loads.</para>
            </param>
            <param name="pidl">
            <para>TBD</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this function succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            <para>For use where STRICT_TYPED_ITEMIDS is defined.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ILSaveToStream(System.Runtime.InteropServices.ComTypes.IStream,Vanara.PInvoke.Shell32.PIDL)">
            <summary>
            <para>Saves an ITEMIDLIST structure to a stream.</para>
            </summary>
            <param name="pstm">
            <para>Type: <c>IStream *</c></para>
            <para>A pointer to the IStream interface where the ITEMIDLIST is saved.</para>
            </param>
            <param name="pidl">
            <para>Type: <c>PCUIDLIST_RELATIVE</c></para>
            <para>A pointer to the ITEMIDLIST structure to be saved.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>Returns S_OK if successful, or a COM error value otherwise.</para>
            </returns>
            <remarks>
            <para>The stream must be opened for writing, or <c>ILSaveToStream</c> returns an error.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IsNetDrive(System.Int32)">
            <summary>
            <para>
            [This function is available through Windows XP Service Pack 2 (SP2) and Windows Server 2003. It might be altered or unavailable
            in subsequent versions of Windows. Use
            </para>
            <para>GetDriveType</para>
            <para>or</para>
            <para>WNetGetConnection</para>
            <para>instead.]</para>
            <para>Tests whether a drive is a network drive.</para>
            </summary>
            <param name="iDrive">
            <para>Type: <c>int</c></para>
            <para>An integer that indicates which drive letter you want to test. Set it to 0 for A:, 1 for B:, and so on.</para>
            </param>
            <returns>
            <para>Type: <c>int</c></para>
            <para>This function returns one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Return value</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>0</term>
            <term>The specified drive is not a network drive.</term>
            </item>
            <item>
            <term>1</term>
            <term>The specified drive is a network drive that is properly connected.</term>
            </item>
            <item>
            <term>2</term>
            <term>The specified drive is a network drive that is disconnected or in an error state.</term>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IsUserAnAdmin">
            <summary>
            <para>
            [IsUserAnAdmin is available for use in the operating systems specified in the Requirements section. It may be altered or
            unavailable in subsequent versions.]
            </para>
            <para>Tests whether the current user is a member of the Administrator's group.</para>
            </summary>
            <returns>
            <para>Type: <c>BOOL</c></para>
            <para>Returns <c>TRUE</c> if the user is a member of the Administrator's group; otherwise, <c>FALSE</c>.</para>
            </returns>
            <remarks>
            <para>
            This function is a wrapper for CheckTokenMembership. It is recommended to call that function directly to determine Administrator
            group status rather than calling <c>IsUserAnAdmin</c>.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.OpenRegStream(Vanara.PInvoke.HKEY,System.String,System.String,Vanara.PInvoke.STGM)">
            <summary>
            <para>
            [OpenRegStream is available for use in the operating systems specified in the Requirements section. It may be altered or
            unavailable in subsequent versions. Instead, use SHOpenRegStream2 or SHOpenRegStream.]
            </para>
            <para>Opens a registry value and supplies an IStream interface that can be used to read from or write to the value.</para>
            </summary>
            <param name="hkey">
            <para>Type: <c>HKEY</c></para>
            <para>A handle to the key that is currently open.</para>
            </param>
            <param name="pszSubkey">
            <para>Type: <c>PCWSTR</c></para>
            <para>A null-terminated Unicode string that specifies the name of the subkey.</para>
            </param>
            <param name="pszValue">
            <para>Type: <c>PCWSTR</c></para>
            <para>A null-terminated Unicode string that specifies the value to be accessed.</para>
            </param>
            <param name="grfMode">
            <para>Type: <c>DWORD</c></para>
            <para>The type of access for the stream. This can be one of the following values.</para>
            <para>STGM_READ</para>
            <para>Open the stream for reading.</para>
            <para>STGM_WRITE</para>
            <para>Open the stream for writing.</para>
            <para>STGM_READWRITE</para>
            <para>Open the stream for reading and writing.</para>
            </param>
            <returns>
            <para>Type: <c>IStream*</c></para>
            <para>Returns the address of an IStream interface if successful, or <c>NULL</c> otherwise.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.PathCleanupSpec(System.String,System.Text.StringBuilder)">
            <summary>
            <para>
            [PathCleanupSpec is available for use in the operating systems specified in the Requirements section. It may be altered or
            unavailable in subsequent versions.]
            </para>
            <para>
            Removes illegal characters from a file or directory name. Enforces the 8.3 filename format on drives that do not support long
            file names.
            </para>
            </summary>
            <param name="pszDir">
            <para>Type: <c>PCWSTR</c></para>
            <para>
            A pointer to a null-terminated buffer that contains the fully qualified path of the directory that will contain the file or
            directory named at . The path must not exceed MAX_PATH characters in length, including the terminating null character. This path
            is not altered.
            </para>
            <para>This value can be <c>NULL</c>.</para>
            </param>
            <param name="pszSpec">
            <para>Type: <c>PWSTR</c></para>
            <para>
            A pointer to a null-terminated buffer that contains the file or directory name to be cleaned. In the case of a file, include the
            file's extension. Note that because '' is considered an invalid character and will be removed, this buffer cannot contain a path
            more than one directory deep.
            </para>
            <para>On exit, the buffer contains a null-terminated string that includes the cleaned name.</para>
            <para>This buffer should be at least MAX_PATH characters in length to avoid the possibility of a buffer overrun.</para>
            </param>
            <returns>
            <para>Type: <c>int</c></para>
            <para>Returns one or more of the following values.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>PCS_REPLACEDCHAR</term>
            <term>Replaced one or more invalid characters.</term>
            </item>
            <item>
            <term>PCS_REMOVEDCHAR</term>
            <term>Removed one or more invalid characters.</term>
            </item>
            <item>
            <term>PCS_TRUNCATED</term>
            <term>The returned path is truncated.</term>
            </item>
            <item>
            <term>PCS_PATHTOOLONG</term>
            <term>
            The function failed because the input path specified at is too long to allow the formation of a valid file name from . When this
            flag is returned, it is always accompanied by the PCS_FATAL flag.
            </term>
            </item>
            <item>
            <term>PCS_FATAL</term>
            <term>The cleaned path is not a valid file name. This flag is always returned in conjunction with PCS_PATHTOOLONG.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The following are considered invalid characters in all names.</para>
            <para>
            Control characters are also considered invalid. If long file names are not supported, the semi-colon (;) and comma (,) characters
            are also invalid.
            </para>
            <para>
            The drive named in is checked to determine whether its file system supports long file names. If it does not, the name at is
            truncated to the 8.3 format and the PCS_TRUNCATED value returned. If is <c>NULL</c>, the drive on which Windows is installed is
            used to determine long file name support.
            </para>
            <para>
            If the full path—the number of characters in the path at plus the number of characters in the cleaned name at —exceeds MAX_PATH –
            1 (to account for the terminating null character), the function returns PCS_PATHTOOLONG.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.PathGetShortPath(System.Text.StringBuilder)">
            <summary>
            <para>
            [PathGetShortPath is available for use in the operating systems specified in the Requirements section. It may be altered or
            unavailable in subsequent versions.]
            </para>
            <para>Retrieves the short path form of a specified input path.</para>
            </summary>
            <param name="pszLongPath">
            <para>Type: <c>PWSTR</c></para>
            <para>
            A pointer to a null-terminated, Unicode string that contains the long path. When the function returns, it contains the equivalent
            short path.
            </para>
            </param>
            <returns>
            <para>This function does not return a value.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.PathIsExe(System.String)">
            <summary>
            <para>
            [PathIsExe is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable
            in subsequent versions.]
            </para>
            <para>Determines whether a file is an executable by examining the file name extension.</para>
            </summary>
            <param name="pszPath">
            <para>TBD</para>
            </param>
            <returns>
            <para>Type: <c>BOOL</c></para>
            <para>Returns <c>TRUE</c> if the file name extension is .cmd, .bat, .pif, .scf, .exe, .com, or .scr; otherwise, <c>FALSE</c>.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.PathIsSlow(System.String,System.UInt32)">
            <summary>
            <para>
            [ <c>PathIsSlow</c> is available for use in the operating systems specified in the Requirements section. It may be altered or
            unavailable in subsequent versions.]
            </para>
            <para>Determines whether a file path is a high-latency network connection.</para>
            </summary>
            <param name="pszFile">
            <para>Type: <c>LPCTSTR</c></para>
            <para>A pointer to a null-terminated string that contains the fully qualified path of the file.</para>
            </param>
            <param name="dwAttr">
            <para>Type: <c>DWORD</c></para>
            <para>
            The file attributes, if known; otherwise, pass –1 and this function gets the attributes by calling GetFileAttributes. See
            <c>GetFileAttributes</c> for a list of file attributes.
            </para>
            </param>
            <returns>
            <para>Type: <c>BOOL</c></para>
            <para>Returns <c>TRUE</c> if the connection is high-latency; otherwise, <c>FALSE</c>.</para>
            </returns>
            <remarks>
            <para>
            A path is considered slow if the MultinetGetConnectionPerformance function returns a dwSpeed of 400 or less in its
            NETCONNECTINFOSTRUCT structure—this is the speed of the media to the network resource, in 100 bits-per-second (bps)—or if
            FILE_ATTRIBUTE_OFFLINE is set on the file.
            </para>
            <para>Note that network conditions can impact function performance time.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.PathMakeUniqueName(System.Text.StringBuilder,System.UInt32,System.String,System.String,System.String)">
            <summary>
            <para>Creates a unique path name from a template.</para>
            </summary>
            <param name="pszUniqueName">
            <para>Type: <c>PWSTR</c></para>
            <para>
            A buffer that receives a null-terminated Unicode string that contains the unique path name. It should be at least MAX_PATH
            characters in length.
            </para>
            </param>
            <param name="cchMax">
            <para>Type: <c>UINT</c></para>
            <para>The number of characters in the buffer pointed to by .</para>
            </param>
            <param name="pszTemplate">
            <para>Type: <c>PCWSTR</c></para>
            <para>
            A null-terminated Unicode string that contains a template that is used to construct the unique name. This template is used for
            drives that require file names with the 8.3 format. This string should be no more than MAX_PATH characters in length, including
            the terminating null character.
            </para>
            </param>
            <param name="pszLongPlate">
            <para>Type: <c>PCWSTR</c></para>
            <para>
            A null-terminated Unicode string that contains a template that is used to construct the unique name. This template is used for
            drives that support long file names. This string should be no more than MAX_PATH characters in length, including the terminating
            null character.
            </para>
            </param>
            <param name="pszDir">
            <para>Type: <c>PCWSTR</c></para>
            <para>
            A null-terminated string that contains the directory in which the new file resides. This string should be no more than MAX_PATH
            characters in length, including the terminating null character.
            </para>
            </param>
            <returns>
            <para>Type: <c>BOOL</c></para>
            <para>Returns <c>TRUE</c> if successful; otherwise, <c>FALSE</c>.</para>
            </returns>
            <remarks>
            <para>
            This function generates a new unique file name based on the templates specified by , for drives that require the 8.3 format, and
            for drives that support long file names. For example, if you specify "My New Filename" for , <c>PathMakeUniqueName</c> returns
            names such as "My New Filename (1)", "My New Filename (2)", and so on.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.PathResolve(System.Text.StringBuilder,System.String[],Vanara.PInvoke.Shell32.PRF)">
            <summary>
            <para>
            [PathResolve is available for use in the operating systems specified in the Requirements section. It may be altered or
            unavailable in subsequent versions.]
            </para>
            <para>Converts a relative or unqualified path name to a fully qualified path name.</para>
            </summary>
            <param name="pszPath">
            <para>Type: <c>PWSTR</c></para>
            <para>
            A null-terminated Unicode string that contains the path to resolve. When the function returns, the string contains the
            corresponding fully qualified path. This buffer should be at least MAX_PATH characters long.
            </para>
            </param>
            <param name="dirs">
            <para>Type: <c>PZPCWSTR</c></para>
            <para>
            A pointer to an optional null-terminated array of directories to be searched first in the case that the path cannot be resolved
            from . This value can be <c>NULL</c>.
            </para>
            </param>
            <param name="fFlags">
            <para>Type: <c>UINT</c></para>
            <para>Flags that specify how the function operates.</para>
            <para>PRF_VERIFYEXISTS</para>
            <para>Return <c>TRUE</c> if the file's existence is verified; otherwise <c>FALSE</c>.</para>
            <para>PRF_TRYPROGRAMEXTENSIONS</para>
            <para>Look for the specified path with the following extensions appended: .pif, .com, .bat, .cmd, .lnk, and .exe.</para>
            <para>PRF_FIRSTDIRDEF</para>
            <para>Look first in the directory or directories specified by .</para>
            <para>PRF_DONTFINDLNK</para>
            <para>Ignore .lnk files.</para>
            <para>PRF_REQUIREABSOLUTE</para>
            <para>Require an absolute (full) path.</para>
            </param>
            <returns>
            <para>Type: <c>int</c></para>
            <para>
            Returns <c>TRUE</c>, unless PRF_VERIFYEXISTS is set. If that flag is set, the function returns <c>TRUE</c> if the file is
            verified to exist and <c>FALSE</c> otherwise. It also sets an ERROR_FILE_NOT_FOUND error code that you can retrieve by calling GetLastError.
            </para>
            </returns>
            <remarks>
            <para>
            A <c>FALSE</c> return value does not necessarily mean that the file does not exist. It might mean that the function is simply
            unable to find the file from the supplied information.
            </para>
            <para>If <c>PathResolve</c> cannot resolve the path specified in , it calls PathFindOnPath using and as the parameters.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.PathYetAnotherMakeUniqueName(System.Text.StringBuilder,System.String,System.String,System.String)">
            <summary>
            <para>Creates a unique filename based on an existing filename.</para>
            </summary>
            <param name="pszUniqueName">
            <para>Type: <c>PWSTR</c></para>
            <para>
            A string buffer that receives a null-terminated Unicode string that contains the fully qualified path of the unique file name.
            This buffer should be at least MAX_PATH characters long to avoid causing a buffer overrun.
            </para>
            </param>
            <param name="pszPath">
            <para>Type: <c>PCWSTR</c></para>
            <para>
            A null-terminated Unicode string that contains the fully qualified path of folder that will contain the new file. If is set to
            <c>NULL</c>, this string must contain a full destination path, ending with the long file name that the new file name will be base on.
            </para>
            </param>
            <param name="pszShort">
            <para>Type: <c>PCWSTR</c></para>
            <para>
            A null-terminated Unicode string that contains the short file name that the unique name will be based on. Set this value to
            <c>NULL</c> to create a name based on the long file name.
            </para>
            </param>
            <param name="pszFileSpec">
            <para>Type: <c>PCWSTR</c></para>
            <para>A null-terminated Unicode string that contains the long file name that the unique name will be based on.</para>
            </param>
            <returns>
            <para>Type: <c>BOOL</c></para>
            <para>Returns <c>TRUE</c> if a unique name was successfully created; otherwise <c>FALSE</c>.</para>
            </returns>
            <remarks>
            <para>
            If the generated path exceeds MAX_PATH characters, this function may return a truncated string in
            <c>PathYetAnotherMakeUniqueName</c>. In that case, the function returns <c>FALSE</c>.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.PickIconDlg(Vanara.PInvoke.HWND,System.Text.StringBuilder,System.UInt32,System.Int32@)">
            <summary>
            <para>
            [ <c>PickIconDlg</c> is available for use in the operating systems specified in the Requirements section. It may be altered or
            unavailable in subsequent versions.]
            </para>
            <para>
            Displays a dialog box that allows the user to choose an icon from the selection available embedded in a resource such as an
            executable or DLL file.
            </para>
            </summary>
            <param name="hwnd">
            <para>Type: <c>HWND</c></para>
            <para>The handle of the parent window. This value can be <c>NULL</c>.</para>
            </param>
            <param name="pszIconPath">
            <para>Type: <c>PWSTR</c></para>
            <para>
            A pointer to a string that contains the null-terminated, fully qualified path of the default resource that contains the icons. If
            the user chooses a different resource in the dialog, this buffer contains the path of that file when the function returns. This
            buffer should be at least MAX_PATH characters in length, or the returned path may be truncated. You should verify that the path
            is valid before using it.
            </para>
            </param>
            <param name="cchIconPath">
            <para>Type: <c>UINT</c></para>
            <para>The number of characters in pszIconPath, including the terminating <c>NULL</c> character.</para>
            </param>
            <param name="piIconIndex">
            <para>Type: <c>int*</c></para>
            <para>
            A pointer to an integer that on entry specifies the index of the initial selection and, when this function returns successfully,
            receives the index of the icon that was selected.
            </para>
            </param>
            <returns>
            <para>Type: <c>BOOL</c></para>
            <para>Returns <see langword="true"/> if successful; otherwise, <see langword="false"/>.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.PifMgr_CloseProperties(Vanara.PInvoke.Shell32.HPIF,Vanara.PInvoke.Shell32.CLOSEPROPS)">
            <summary>
            [PifMgr_CloseProperties is available for use in the operating systems specified in the Requirements section.It may be altered or
            unavailable in subsequent versions.]
            <para>Closes application properties that were opened with PifMgr_OpenProperties.</para>
            </summary>
            <param name="hProps">
            A handle to the application's properties. This parameter should be set to the value that is returned by PifMgr_OpenProperties.
            </param>
            <param name="flOpt">A flag that specifies how the function operates.</param>
            <returns>
            Returns NULL if successful. If unsuccessful, the functions returns the handle to the application properties that was passed as hProps.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.PifMgr_GetProperties(Vanara.PInvoke.Shell32.HPIF,System.String,System.IntPtr,System.Int32,System.UInt32)">
            <summary>
            [PifMgr_GetProperties is available for use in the operating systems specified in the Requirements section.It may be altered or
            unavailable in subsequent versions.]
            <para>Returns a specified block of data from a .pif file.</para>
            </summary>
            <param name="hProps">
            A handle to an application's properties. This parameter should be set to the value that is returned by PifMgr_OpenProperties.
            </param>
            <param name="pszGroup">
            A null-terminated string that contains the property group name. It can be one of the following, or any other name that
            corresponds to a valid .pif extension.
            </param>
            <param name="lpProps">When this function returns, contains a pointer to a PROPPRG structure.</param>
            <param name="cbProps">The size of the buffer, in bytes, pointed to by lpProps.</param>
            <param name="flOpt">Set this parameter to GETPROPS_NONE.</param>
            <returns>
            Returns NULL if successful. If unsuccessful, the function returns the handle to the application properties that were passed as hProps.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.PifMgr_OpenProperties(System.String,System.String,System.UInt32,Vanara.PInvoke.Shell32.OPENPROPS)">
            <summary>
            <para>
            [PifMgr_OpenProperties is available for use in the operating systems specified in the Requirements section. It may be altered or
            unavailable in subsequent versions.]
            </para>
            <para>Opens the .pif file associated with a Microsoft MS-DOS application, and returns a handle to the application's properties.</para>
            </summary>
            <param name="pszApp">
            <para>Type: <c>PCWSTR</c></para>
            <para>A null-terminated Unicode string that contains the application's name.</para>
            </param>
            <param name="pszPIF">
            <para>TBD</para>
            </param>
            <param name="hInf">
            <para>Type: <c>UINT</c></para>
            <para>
            A handle to the application's .inf file. Set this value to zero if there is no .inf file. Set this value to -1 to prevent the
            .inf file from being processed.
            </para>
            </param>
            <param name="flOpt">
            <para>Type: <c>UINT</c></para>
            <para>A flag that controls how the function operates.</para>
            <para>OPENPROPS_INHIBITPIF</para>
            <para>
            Ignore any existing .pif files and get the properties from win.ini or _Default.pif. This flag is ignored on Windows NT, Windows
            2000, and Windows XP.
            </para>
            <para>OPENPROPS_NONE</para>
            <para>No options specified.</para>
            </param>
            <returns>
            <para>Type: <c>HANDLE</c></para>
            <para>Returns a handle to the application's properties. Use this handle when you call the related .pif functions.</para>
            </returns>
            <remarks>
            <para>
            You should not think of <c>PifMgr_OpenProperties</c> as a function that opens a file somewhere. The .pif file does not remain
            open after this call. It is more useful to think of the function as a property structure allocator that you can initialize using
            disk data. The primary reason why this function fails is because of low memory or inability to open the specified .pif file.
            </para>
            <para>
            If no .pif file exists, the function still allocates a data block in memory and initializes it with data from _Default.pif or its
            internal defaults. If the function looks for a .pif file name but does not find it, it constructs a name and saves it in its
            internal .pif data structure. This guarantees that if PifMgr_SetProperties is called, the data is saved to disk.
            </para>
            <para>If the function does not find the .pif file, it searches for it in the following order.</para>
            <list type="number">
            <item>Searches the current directory.</item>
            <item>Searches the specified directory.</item>
            <item>Searches in .pif directory.</item>
            <item>Searches the folders specified by the PATH environment variable.</item>
            </list>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.PifMgr_SetProperties(Vanara.PInvoke.Shell32.HPIF,System.String,System.IntPtr,System.Int32,System.UInt32)">
            <summary>
            [PifMgr_SetProperties is available for use in the operating systems specified in the Requirements section.It may be altered or
            unavailable in subsequent versions.]
            <para>Assigns values to a block of data from a .pif file.</para>
            </summary>
            <param name="hProps">
            A handle to the application's properties. This parameter should be set to the value that is returned by PifMgr_OpenProperties.
            </param>
            <param name="pszGroup">
            A null-terminated ANSI string containing the property group name. It can be one of the following, or any other name that
            corresponds to a valid .pif extension.
            </param>
            <param name="lpProps">A property group record buffer that holds the data.</param>
            <param name="cbProps">The size of the buffer, in bytes, pointed to by lpProps.</param>
            <param name="flOpt">Always SETPROPS_NONE.</param>
            <returns>Returns the amount of information transferred, in bytes. Returns zero if the group cannot be found or an error occurs.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ReadCabinetState(Vanara.PInvoke.Shell32.CABINETSTATE@,System.Int32)">
            <summary>
            <para>
            [ReadCabinetState is available for use in the operating systems specified in the Requirements section. It may be altered or
            unavailable in subsequent versions.]
            </para>
            <para>Fills a CABINETSTATE structure with information from the registry.</para>
            </summary>
            <param name="pcs">
            <para>Type: <c>CABINETSTATE*</c></para>
            <para>
            When this function returns, contains a pointer to a CABINETSTATE structure that contains either information pulled from the
            registry or default information.
            </para>
            </param>
            <param name="cLength">
            <para>Type: <c>int</c></para>
            <para>The size of the structure pointed to by , in bytes.</para>
            </param>
            <returns>
            <para>Type: <c>BOOL</c></para>
            <para>
            Returns <c>TRUE</c> if the returned structure contains information from the registry. Returns <c>FALSE</c> if the structure
            contains default information.
            </para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.RealDriveType(System.Int32,System.Boolean)">
            <summary>
            <para>
            [RealDriveType is available for use in the operating systems specified in the Requirements section. It may be altered or
            unavailable in subsequent versions.]
            </para>
            <para>Determines the drive type based on the drive number.</para>
            </summary>
            <param name="iDrive">
            <para>Type: <c>int</c></para>
            <para>The number of the drive that you want to test. "A:" corresponds to 0, "B:" to 1, and so on.</para>
            </param>
            <param name="fOKToHitNet">
            <para>Type: <c>BOOL</c></para>
            <para>Reserved. Must be set to 0.</para>
            </param>
            <returns>
            <para>Type: <c>int</c></para>
            <para>Returns one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>DRIVE_UNKNOWN</term>
            <term>The drive type cannot be determined.</term>
            </item>
            <item>
            <term>DRIVE_NO_ROOT_DIR</term>
            <term>The root path is invalid. For example, no volume is mounted at the path.</term>
            </item>
            <item>
            <term>DRIVE_REMOVABLE</term>
            <term>The disk can be removed from the drive.</term>
            </item>
            <item>
            <term>DRIVE_FIXED</term>
            <term>The disk cannot be removed from the drive.</term>
            </item>
            <item>
            <term>DRIVE_REMOTE</term>
            <term>The drive is a remote (network) drive.</term>
            </item>
            <item>
            <term>DRIVE_CDROM</term>
            <term>The drive is a CD-ROM drive.</term>
            </item>
            <item>
            <term>DRIVE_RAMDISK</term>
            <term>The drive is a RAM disk.</term>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.RestartDialog(Vanara.PInvoke.HWND,System.String,System.UInt32)">
            <summary>
            <para>
            [This function is available through Windows XP Service Pack 2 (SP2) and Windows Server 2003. It might be altered or unavailable
            in subsequent versions of Windows.]
            </para>
            <para>
            Displays a dialog box that prompts the user to restart Windows. When the user clicks the button, the function calls ExitWindowsEx
            to attempt to restart Windows.
            </para>
            </summary>
            <param name="hwnd">
            <para>Type: <c>HWND</c></para>
            <para>A handle to the parent window.</para>
            </param>
            <param name="pszPrompt">
            <para>Type: <c>PCWSTR</c></para>
            <para>A null-terminated Unicode string that contains the text that displays in the dialog box which prompts the user.</para>
            </param>
            <param name="dwReturn">
            <para>Type: <c>DWORD</c></para>
            <para>The flags that specify the type of shutdown.</para>
            <para>This parameter must include one of the following values.</para>
            <para>EWX_LOGOFF</para>
            <para>
            Shuts down all processes running in the security context of the process that called this function, then logs the user off.
            </para>
            <para>EWX_POWEROFF</para>
            <para>
            Shuts down the system and turns off the power. The system must support the power-off feature. The calling process must have the
            <c>SE_SHUTDOWN_NAME</c> privilege. For more information, see ExitWindowsEx.
            </para>
            <para>EWX_REBOOT</para>
            <para>
            Shuts down the system and then restarts the system. The calling process must have the <c>SE_SHUTDOWN_NAME</c> privilege. For more
            information, see ExitWindowsEx.
            </para>
            <para>EWX_SHUTDOWN</para>
            <para>
            Shuts down the system to a point at which it is safe to turn off the power. At this point, all file buffers have been flushed to
            disk, and all running processes have stopped. If the system supports the power-off feature, the power is also turned off. The
            calling process must have the <c>SE_SHUTDOWN_NAME</c> privilege. For more information, see ExitWindowsEx.
            </para>
            <para>This parameter can optionally include the following values.</para>
            <para>EWX_FORCE</para>
            <para>
            Forces processes to terminate. When this flag is set, the system does not send the WM_QUERYENDSESSION and WM_ENDSESSION messages.
            This can cause the applications to lose data. Therefore, you should only use this flag in an emergency.
            </para>
            <para>EWX_FORCEIFHUNG</para>
            <para>
            Forces processes to terminate if they do not respond to the WM_QUERYENDSESSION or WM_ENDSESSION message. This flag is ignored if
            <c>EWX_FORCE</c> is used.
            </para>
            </param>
            <returns>
            <para>Type: <c>int</c></para>
            <para>Returns the identifier of the button that was pressed to close the dialog box.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.RestartDialogEx(Vanara.PInvoke.HWND,System.String,System.UInt32,System.UInt32)">
            <summary>
            <para>
            [This function is available through Windows XP Service Pack 2 (SP2) and Windows Server 2003. It might be altered or unavailable
            in subsequent versions of Windows.]
            </para>
            <para>
            Displays a dialog box that asks the user to restart Windows. When the user clicks the button, the function calls ExitWindowsEx to
            attempt to restart Windows.
            </para>
            </summary>
            <param name="hwnd">
            <para>TBD</para>
            </param>
            <param name="pszPrompt">
            <para>Type: <c>PCWSTR</c></para>
            <para>A null-terminated string that contains the text that displays in the dialog box to prompt the user.</para>
            </param>
            <param name="dwReturn">
            <para>TBD</para>
            </param>
            <param name="dwReasonCode">
            <para>Type: <c>DWORD</c></para>
            <para>
            <c>Windows XP:</c> Specifies the reason for initiating the shutdown. For more information, see System Shutdown Reason Codes.
            </para>
            <para><c>Windows 2000:</c> This parameter is ignored.</para>
            </param>
            <returns>
            <para>Type: <c>int</c></para>
            <para>Returns the identifier of the button that was pressed to close the dialog box.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHAddToRecentDocs(Vanara.PInvoke.Shell32.SHARD,Vanara.PInvoke.Shell32.IShellItem)">
            <summary>
            Notifies the system that an item has been accessed, for the purposes of tracking those items used most recently and most
            frequently. This function can also be used to clear all usage data.
            </summary>
            <param name="uFlags">A value from the SHARD enumeration that indicates the form of the information pointed to by the pv parameter.</param>
            <param name="pv">
            A pointer to data that identifies the item that has been accessed. The item can be specified in this parameter in one of the
            following forms:
            <list type="bullet">
            <item><definition>A null-terminated string that contains the path and file name of the item.</definition></item>
            <item><definition>A PIDL that identifies the item's file object.</definition></item>
            <item>
            <definition>Windows 7 and later only. A SHARDAPPIDINFO, SHARDAPPIDINFOIDLIST, or SHARDAPPIDINFOLINK structure that identifies the
            item through an AppUserModelID. See Application User Model IDs (AppUserModelIDs) for more information.</definition>
            </item>
            <item><definition>Windows 7 and later only. An IShellLink object that identifies the item through a shortcut.</definition></item>
            </list>
            <para>Set this parameter to NULL to clear all usage data on all items.</para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHAddToRecentDocs(Vanara.PInvoke.Shell32.SHARD,Vanara.PInvoke.Shell32.IShellLinkW)">
            <summary>
            Notifies the system that an item has been accessed, for the purposes of tracking those items used most recently and most
            frequently. This function can also be used to clear all usage data.
            </summary>
            <param name="uFlags">A value from the SHARD enumeration that indicates the form of the information pointed to by the pv parameter.</param>
            <param name="pv">
            A pointer to data that identifies the item that has been accessed. The item can be specified in this parameter in one of the
            following forms:
            <list type="bullet">
            <item><definition>A null-terminated string that contains the path and file name of the item.</definition></item>
            <item><definition>A PIDL that identifies the item's file object.</definition></item>
            <item>
            <definition>Windows 7 and later only. A SHARDAPPIDINFO, SHARDAPPIDINFOIDLIST, or SHARDAPPIDINFOLINK structure that identifies the
            item through an AppUserModelID. See Application User Model IDs (AppUserModelIDs) for more information.</definition>
            </item>
            <item><definition>Windows 7 and later only. An IShellLink object that identifies the item through a shortcut.</definition></item>
            </list>
            <para>Set this parameter to NULL to clear all usage data on all items.</para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHAddToRecentDocs(Vanara.PInvoke.Shell32.SHARD,System.String)">
            <summary>
            Notifies the system that an item has been accessed, for the purposes of tracking those items used most recently and most
            frequently. This function can also be used to clear all usage data.
            </summary>
            <param name="uFlags">A value from the SHARD enumeration that indicates the form of the information pointed to by the pv parameter.</param>
            <param name="pv">
            A pointer to data that identifies the item that has been accessed. The item can be specified in this parameter in one of the
            following forms:
            <list type="bullet">
            <item><definition>A null-terminated string that contains the path and file name of the item.</definition></item>
            <item><definition>A PIDL that identifies the item's file object.</definition></item>
            <item>
            <definition>Windows 7 and later only. A SHARDAPPIDINFO, SHARDAPPIDINFOIDLIST, or SHARDAPPIDINFOLINK structure that identifies the
            item through an AppUserModelID. See Application User Model IDs (AppUserModelIDs) for more information.</definition>
            </item>
            <item><definition>Windows 7 and later only. An IShellLink object that identifies the item through a shortcut.</definition></item>
            </list>
            <para>Set this parameter to NULL to clear all usage data on all items.</para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHAddToRecentDocs(Vanara.PInvoke.Shell32.SHARD,Vanara.PInvoke.Shell32.PIDL)">
            <summary>
            Notifies the system that an item has been accessed, for the purposes of tracking those items used most recently and most
            frequently. This function can also be used to clear all usage data.
            </summary>
            <param name="uFlags">A value from the SHARD enumeration that indicates the form of the information pointed to by the pv parameter.</param>
            <param name="pv">
            A pointer to data that identifies the item that has been accessed. The item can be specified in this parameter in one of the
            following forms:
            <list type="bullet">
            <item><definition>A null-terminated string that contains the path and file name of the item.</definition></item>
            <item><definition>A PIDL that identifies the item's file object.</definition></item>
            <item>
            <definition>Windows 7 and later only. A SHARDAPPIDINFO, SHARDAPPIDINFOIDLIST, or SHARDAPPIDINFOLINK structure that identifies the
            item through an AppUserModelID. See Application User Model IDs (AppUserModelIDs) for more information.</definition>
            </item>
            <item><definition>Windows 7 and later only. An IShellLink object that identifies the item through a shortcut.</definition></item>
            </list>
            <para>Set this parameter to NULL to clear all usage data on all items.</para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHAddToRecentDocs(Vanara.PInvoke.Shell32.SHARD,System.IntPtr)">
            <summary>
            Notifies the system that an item has been accessed, for the purposes of tracking those items used most recently and most
            frequently. This function can also be used to clear all usage data.
            </summary>
            <param name="uFlags">A value from the SHARD enumeration that indicates the form of the information pointed to by the pv parameter.</param>
            <param name="pv">
            A pointer to data that identifies the item that has been accessed. The item can be specified in this parameter in one of the
            following forms:
            <list type="bullet">
            <item><definition>A null-terminated string that contains the path and file name of the item.</definition></item>
            <item><definition>A PIDL that identifies the item's file object.</definition></item>
            <item>
            <definition>Windows 7 and later only. A <see cref="T:Vanara.PInvoke.Shell32.SHARDAPPIDINFO"/>, <see cref="T:Vanara.PInvoke.Shell32.SHARDAPPIDINFOIDLIST"/>, or <see
            cref="T:Vanara.PInvoke.Shell32.SHARDAPPIDINFOLINK"/> structure that identifies the item through an AppUserModelID. See Application User Model IDs
            (AppUserModelIDs) for more information.</definition>
            </item>
            <item><definition>Windows 7 and later only. An IShellLink object that identifies the item through a shortcut.</definition></item>
            </list>
            <para>Set this parameter to NULL to clear all usage data on all items.</para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHBindToFolderIDListParent(Vanara.PInvoke.Shell32.IShellFolder,Vanara.PInvoke.Shell32.PIDL,System.Guid@,System.Object@,System.IntPtr@)">
            <summary>
            <para>
            Given a Shell namespace item specified in the form of a folder, and an item identifier list relative to that folder, this
            function binds to the parent of the namespace item and optionally returns a pointer to the final component of the item identifier list.
            </para>
            </summary>
            <param name="psfRoot">
            <para>Type: <c>IShellFolder*</c></para>
            <para>A pointer to a Shell folder object. If is <c>NULL</c>, indicates that the IDList passed is relative to the desktop.</para>
            </param>
            <param name="pidl">
            <para>Type: <c>PCUIDLIST_RELATIVE</c></para>
            <para>A PIDL to bind to, relative to . If is <c>NULL</c>, this is an absolute IDList relative to the desktop folder.</para>
            </param>
            <param name="riid">
            <para>Type: <c>REFIID</c></para>
            <para>
            Reference to the desired interface ID. This is typically IID_IShellFolder or IID_IShellFolder2, but can be anything supported by
            the target folder.
            </para>
            </param>
            <param name="ppv">
            <para>Type: <c>void**</c></para>
            <para>
            When this function returns, contains the interface pointer requested in . This is typically IShellFolder or IShellFolder2, but
            can be anything supported by the target folder.
            </para>
            </param>
            <param name="ppidlLast">
            <para>Type: <c>PCUITEMID_CHILD*</c></para>
            <para>
            A pointer to the last ID of the parameter, and is a child ID relative to the parent folder returned in . This value can be <c>NULL</c>.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this function succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            <para>
            <c>Note</c> Calling the <c>SHBindToFolderIDListParent</c> function is equivalent to calling the SHBindToFolderIDListParentEx
            function with <c>NULL</c> as the bind context.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHBindToFolderIDListParent``1(Vanara.PInvoke.Shell32.IShellFolder,Vanara.PInvoke.Shell32.PIDL)">
            <summary>
            Given a Shell namespace item specified in the form of a folder, and an item identifier list relative to that folder, this
            function binds to the parent of the namespace item and optionally returns a pointer to the final component of the item identifier list.
            </summary>
            <typeparam name="TIntf">
            The type of the requested interface. This is typically IShellFolder or IShellFolder2, but can be anything supported by the target folder.
            </typeparam>
            <param name="psfRoot">
            <para>Type: <c>IShellFolder*</c></para>
            <para>A pointer to a Shell folder object. If is <c>NULL</c>, indicates that the IDList passed is relative to the desktop.</para>
            </param>
            <param name="pidl">
            <para>Type: <c>PCUIDLIST_RELATIVE</c></para>
            <para>A PIDL to bind to, relative to . If is <c>NULL</c>, this is an absolute IDList relative to the desktop folder.</para>
            </param>
            <returns>
            When this function returns, contains the interface pointer requested. This is typically IShellFolder or IShellFolder2, but can be
            anything supported by the target folder.
            </returns>
            <remarks>
            <c>Note</c> Calling the <c>SHBindToFolderIDListParent</c> function is equivalent to calling the SHBindToFolderIDListParentEx
            function with <c>NULL</c> as the bind context.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHBindToFolderIDListParentEx(Vanara.PInvoke.Shell32.IShellFolder,Vanara.PInvoke.Shell32.PIDL,System.Runtime.InteropServices.ComTypes.IBindCtx,System.Guid@,System.Object@,System.IntPtr@)">
            <summary>
            <para>Extends the SHBindToFolderIDListParent function by allowing the caller to specify a bind context.</para>
            </summary>
            <param name="psfRoot">
            <para>Type: <c>IShellFolder*</c></para>
            <para>A pointer to a Shell folder object. If is <c>NULL</c>, indicates that the IDList passed is relative to the desktop.</para>
            </param>
            <param name="pidl">
            <para>Type: <c>PCUIDLIST_RELATIVE</c></para>
            <para>A PIDL to bind to, relative to . If is <c>NULL</c>, this is an absolute IDList relative to the desktop folder.</para>
            </param>
            <param name="ppbc">
            <para>Type: <c>IBindCtx*</c></para>
            <para>
            A pointer to IBindCtx interface on a bind context object to be used during this operation. If this parameter is not used, set it
            to <c>NULL</c>, which is equivalent to calling the SHBindToFolderIDListParent function. Because support for is optional for
            folder object implementations, some folders may not support the use of bind contexts.
            </para>
            </param>
            <param name="riid">
            <para>Type: <c>REFIID</c></para>
            <para>
            Reference to the desired interface ID. This is typically IID_IShellFolder or IID_IShellFolder2, but can be anything supported by
            the target folder.
            </para>
            </param>
            <param name="ppv">
            <para>Type: <c>void**</c></para>
            <para>
            When this function returns, contains the interface pointer requested in . This is typically IShellFolder or IShellFolder2, but
            can be anything supported by the target folder.
            </para>
            </param>
            <param name="ppidlLast">
            <para>Type: <c>PCUITEMID_CHILD*</c></para>
            <para>
            A pointer to the last ID of the parameter, and is a child ID relative to the parent folder returned in . This value can be <c>NULL</c>.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this function succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHBindToFolderIDListParentEx``1(Vanara.PInvoke.Shell32.IShellFolder,Vanara.PInvoke.Shell32.PIDL,System.Runtime.InteropServices.ComTypes.IBindCtx)">
            <summary>Extends the SHBindToFolderIDListParent function by allowing the caller to specify a bind context.</summary>
            <typeparam name="TIntf">
            The type of the requested interface. This is typically IShellFolder or IShellFolder2, but can be anything supported by the target folder.
            </typeparam>
            <param name="psfRoot">
            <para>Type: <c>IShellFolder*</c></para>
            <para>A pointer to a Shell folder object. If is <c>NULL</c>, indicates that the IDList passed is relative to the desktop.</para>
            </param>
            <param name="pidl">
            <para>Type: <c>PCUIDLIST_RELATIVE</c></para>
            <para>A PIDL to bind to, relative to . If is <c>NULL</c>, this is an absolute IDList relative to the desktop folder.</para>
            </param>
            <param name="ppbc">
            <para>Type: <c>IBindCtx*</c></para>
            <para>
            A pointer to IBindCtx interface on a bind context object to be used during this operation. If this parameter is not used, set it
            to <c>NULL</c>, which is equivalent to calling the SHBindToFolderIDListParent function. Because support for is optional for
            folder object implementations, some folders may not support the use of bind contexts.
            </para>
            </param>
            <returns>
            When this function returns, contains the interface pointer requested in . This is typically IShellFolder or IShellFolder2, but
            can be anything supported by the target folder.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHBindToObject(Vanara.PInvoke.Shell32.IShellFolder,Vanara.PInvoke.Shell32.PIDL,System.Runtime.InteropServices.ComTypes.IBindCtx,System.Guid@,System.Object@)">
            <summary>Retrieves and binds to a specified object by using the Shell namespace IShellFolder::BindToObject method.</summary>
            <param name="psf">
            <para>Type: <c>IShellFolder*</c></para>
            <para>
            A pointer to IShellFolder. This parameter can be <c>NULL</c>. If is <c>NULL</c>, this indicates parameter is relative to the
            desktop. In this case, must specify an absolute ITEMIDLIST.
            </para>
            </param>
            <param name="pidl">
            <para>Type: <c>PCUIDLIST_RELATIVE</c></para>
            <para>
            A pointer to a constant ITEMIDLIST to bind to that is relative to . If is <c>NULL</c>, this is an absolute <c>ITEMIDLIST</c>
            relative to the desktop folder.
            </para>
            </param>
            <param name="pbc">
            <para>Type: <c>IBindCtx*</c></para>
            <para>
            A pointer to IBindCtx interface on a bind context object to be used during this operation. If this parameter is not used, set it
            to <c>NULL</c>. Because support for is optional for folder object implementations, some folders may not support the use of bind contexts.
            </para>
            </param>
            <param name="riid">
            <para>Type: <c>REFIID</c></para>
            <para>Identifier of the interface to return.</para>
            </param>
            <param name="ppv">
            <para>Type: <c>void**</c></para>
            <para>
            When this method returns, contains the interface pointer as specified in to the bound object. If an error occurs, contains a
            <c>NULL</c> pointer.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this function succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks><c>Note</c> This is a helper function that gets the desktop object by calling SHGetDesktopFolder.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHBindToObject``1(Vanara.PInvoke.Shell32.IShellFolder,Vanara.PInvoke.Shell32.PIDL,System.Runtime.InteropServices.ComTypes.IBindCtx)">
            <summary>Retrieves and binds to a specified object by using the Shell namespace IShellFolder::BindToObject method.</summary>
            <typeparam name="TIntf">Type of the interface to return.</typeparam>
            <param name="psf">
            <para>Type: <c>IShellFolder*</c></para>
            <para>
            A pointer to IShellFolder. This parameter can be <c>NULL</c>. If is <c>NULL</c>, this indicates parameter is relative to the
            desktop. In this case, must specify an absolute ITEMIDLIST.
            </para>
            </param>
            <param name="pidl">
            <para>Type: <c>PCUIDLIST_RELATIVE</c></para>
            <para>
            A pointer to a constant ITEMIDLIST to bind to that is relative to . If is <c>NULL</c>, this is an absolute <c>ITEMIDLIST</c>
            relative to the desktop folder.
            </para>
            </param>
            <param name="pbc">
            <para>Type: <c>IBindCtx*</c></para>
            <para>
            A pointer to IBindCtx interface on a bind context object to be used during this operation. If this parameter is not used, set it
            to <c>NULL</c>. Because support for is optional for folder object implementations, some folders may not support the use of bind contexts.
            </para>
            </param>
            <returns>
            When this method returns, contains the interface pointer as specified in to the bound object. If an error occurs, contains a
            <c>NULL</c> pointer.
            </returns>
            <remarks><c>Note</c> This is a helper function that gets the desktop object by calling SHGetDesktopFolder.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHBindToParent(Vanara.PInvoke.Shell32.PIDL,System.Guid@,System.Object@,System.IntPtr@)">
            <summary>
            <para>
            Takes a pointer to a fully qualified item identifier list (PIDL), and returns a specified interface pointer on the parent object.
            </para>
            </summary>
            <param name="pidl">
            <para>Type: <c>PCIDLIST_ABSOLUTE</c></para>
            <para>The item's PIDL.</para>
            </param>
            <param name="riid">
            <para>Type: <c>REFIID</c></para>
            <para>The <c>REFIID</c> of one of the interfaces exposed by the item's parent object.</para>
            </param>
            <param name="ppv">
            <para>Type: <c>VOID**</c></para>
            <para>A pointer to the interface specified by riid. You must release the object when you are finished.</para>
            </param>
            <param name="ppidlLast">
            <para>Type: <c>PCUITEMID_CHILD*</c></para>
            <para>
            The item's PIDL relative to the parent folder. This PIDL can be used with many of the methods supported by the parent folder's
            interfaces. If you set to <c>NULL</c>, the PIDL is not returned.
            </para>
            <para>
            <c>Note</c><c>SHBindToParent</c> does not allocate a new PIDL; it simply receives a pointer through this parameter. Therefore,
            you are not responsible for freeing this resource.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this function succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHBindToParent``1(Vanara.PInvoke.Shell32.PIDL)">
            <summary>
            Takes a pointer to a fully qualified item identifier list (PIDL), and returns a specified interface pointer on the parent object.
            </summary>
            <typeparam name="TIntf">The Type of one of the interfaces exposed by the item's parent object.</typeparam>
            <param name="pidl">
            <para>Type: <c>PCIDLIST_ABSOLUTE</c></para>
            <para>The item's PIDL.</para>
            </param>
            <returns>A pointer to the interface specified. You must release the object when you are finished.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHBrowseForFolder(Vanara.PInvoke.Shell32.BROWSEINFO@)">
            <summary>Displays a dialog box that enables the user to select a Shell folder.</summary>
            <param name="lpbi">A pointer to a BROWSEINFO structure that contains information used to display the dialog box.</param>
            <returns>
            Returns a PIDL that specifies the location of the selected folder relative to the root of the namespace. If the user chooses the
            Cancel button in the dialog box, the return value is NULL.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHChangeNotification_Lock(Vanara.PInvoke.HWND,System.UInt32,System.IntPtr@,Vanara.PInvoke.Shell32.SHCNE@)">
            <summary>
            <para>Locks the shared memory associated with a Shell change notification event.</para>
            </summary>
            <param name="hChange">
            <para>Type: <c>HANDLE</c></para>
            <para>A handle to a window received as a in the specified Shell change notification message.</para>
            </param>
            <param name="dwProcId">
            <para>Type: <c>DWORD</c></para>
            <para>The process ID ( in the message callback).</para>
            </param>
            <param name="pppidl">
            <para>Type: <c>PIDLIST_ABSOLUTE**</c></para>
            <para>
            The address of a pointer to a PIDLIST_ABSOLUTE that, when this function returns successfully, receives the list of affected PIDLs.
            </para>
            </param>
            <param name="plEvent">
            <para>Type: <c>LONG*</c></para>
            <para>
            A pointer to a LONG value that, when this function returns successfully, receives the Shell change notification ID of the event
            that took place.
            </para>
            </param>
            <returns>
            <para>Type: <c>HANDLE</c></para>
            <para>Returns a handle (HLOCK) to the locked memory. Pass this value to SHChangeNotification_Unlock when finished.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHChangeNotification_Unlock(Vanara.PInvoke.Shell32.HLOCK)">
            <summary>
            <para>Unlocks shared memory for a change notification.</para>
            </summary>
            <param name="hLock">
            <para>Type: <c>HANDLE</c></para>
            <para>A handle to the memory lock. This is the handle returned by SHChangeNotification_Lock when it locked the memory.</para>
            </param>
            <returns>
            <para>Type: <c>BOOL</c></para>
            <para>Returns <c>TRUE</c> on success; otherwise, <c>FALSE</c>.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHChangeNotify(Vanara.PInvoke.Shell32.SHCNE,Vanara.PInvoke.Shell32.SHCNF,System.UIntPtr,System.UIntPtr)">
            <summary>
            Notifies the system of an event that an application has performed. An application should use this function if it performs an
            action that may affect the Shell.
            </summary>
            <param name="wEventId">
            Describes the event that has occurred. Typically, only one event is specified at a time. If more than one event is specified, the
            values contained in the dwItem1 and dwItem2 parameters must be the same, respectively, for all specified events.
            </param>
            <param name="uFlags">Flags that, when combined bitwise with SHCNF_TYPE, indicate the meaning of the dwItem1 and dwItem2 parameters.</param>
            <param name="dwItem1">Optional. First event-dependent value.</param>
            <param name="dwItem2">Optional. Second event-dependent value.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHChangeNotify(Vanara.PInvoke.Shell32.SHCNE,Vanara.PInvoke.Shell32.SHCNF,System.String,System.String)">
            <summary>
            Notifies the system of an event that an application has performed. An application should use this function if it performs an
            action that may affect the Shell.
            </summary>
            <param name="wEventId">
            Describes the event that has occurred. Typically, only one event is specified at a time. If more than one event is specified, the
            values contained in the dwItem1 and dwItem2 parameters must be the same, respectively, for all specified events.
            </param>
            <param name="uFlags">Flags that, when combined bitwise with SHCNF_TYPE, indicate the meaning of the dwItem1 and dwItem2 parameters.</param>
            <param name="dwItem1">Optional. First event-dependent value.</param>
            <param name="dwItem2">Optional. Second event-dependent value.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHChangeNotify(Vanara.PInvoke.Shell32.SHCNE,Vanara.PInvoke.Shell32.SHCNF,Vanara.PInvoke.Shell32.PIDL,Vanara.PInvoke.Shell32.PIDL)">
            <summary>
            Notifies the system of an event that an application has performed. An application should use this function if it performs an
            action that may affect the Shell.
            </summary>
            <param name="wEventId">
            Describes the event that has occurred. Typically, only one event is specified at a time. If more than one event is specified, the
            values contained in the dwItem1 and dwItem2 parameters must be the same, respectively, for all specified events.
            </param>
            <param name="uFlags">Flags that, when combined bitwise with SHCNF_TYPE, indicate the meaning of the dwItem1 and dwItem2 parameters.</param>
            <param name="dwItem1">Optional. First event-dependent value or <see cref="P:Vanara.PInvoke.Shell32.PIDL.Null"/>.</param>
            <param name="dwItem2">Optional. Second event-dependent value or <see cref="P:Vanara.PInvoke.Shell32.PIDL.Null"/>.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHChangeNotifyDeregister(System.UInt32)">
            <summary>
            <para>Unregisters the client's window process from receiving SHChangeNotify messages.</para>
            </summary>
            <param name="ulID">
            <para>Type: <c>ULONG</c></para>
            <para>A value of type <c>ULONG</c> that specifies the registration ID returned by SHChangeNotifyRegister.</para>
            </param>
            <returns>
            <para>Type: <c>BOOL</c></para>
            <para>Returns <c>TRUE</c> if the specified client was found and removed; otherwise <c>FALSE</c>.</para>
            </returns>
            <remarks>
            <para>
            See the Change Notify Watcher Sample in the Windows Software Development Kit (SDK) for a full example that demonstrates the use
            of this function.
            </para>
            <para>
            The <c>NTSHChangeNotifyDeregister</c> function, which is no longer available for use as of Windows Vista, was equivalent to <c>SHChangeNotifyDeregister</c>.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHChangeNotifyRegister(Vanara.PInvoke.HWND,Vanara.PInvoke.Shell32.SHCNRF,Vanara.PInvoke.Shell32.SHCNE,System.UInt32,System.Int32,Vanara.PInvoke.Shell32.SHChangeNotifyEntry[])">
            <summary>
            <para>Registers a window to receive notifications from the file system or Shell, if the file system supports notifications.</para>
            </summary>
            <param name="hwnd">
            <para>Type: <c>HWND</c></para>
            <para>A handle to the window that receives the change or notification messages.</para>
            </param>
            <param name="fSources">
            <para>Type: <c>int</c></para>
            <para>One or more of the following values that indicate the type of events for which to receive notifications.</para>
            <para>
            <c>Note</c> In earlier versions of the SDK, these flags are not defined in a header file and implementers must define these
            values themselves or use their numeric values directly. As of Windows Vista, these flags are defined in Shlobj.h.
            </para>
            <para>SHCNRF_InterruptLevel (0x0001)</para>
            <para>Interrupt level notifications from the file system.</para>
            <para>SHCNRF_ShellLevel (0x0002)</para>
            <para>Shell-level notifications from the shell.</para>
            <para>SHCNRF_RecursiveInterrupt (0x1000)</para>
            <para>
            Interrupt events on the whole subtree. This flag must be combined with the <c>SHCNRF_InterruptLevel</c> flag. When using this
            flag, notifications must also be made recursive by setting the <c>fRecursive</c> member of the corresponding SHChangeNotifyEntry
            structure referenced by to <c>TRUE</c>. Use of <c>SHCNRF_RecursiveInterrupt</c> on a single level view—for example, a PIDL that
            is relative and contains only one SHITEMID—will block event notification at the highest level and thereby prevent a recursive,
            child update. Thus, an icon dragged into the lowest level of a folder hierarchy may fail to appear in the view as expected.
            </para>
            <para>SHCNRF_NewDelivery (0x8000)</para>
            <para>
            Messages received use shared memory. Call SHChangeNotification_Lock to access the actual data. Call SHChangeNotification_Unlock
            to release the memory when done.
            </para>
            <para>
            <c>Note</c> We recommend this flag because it provides a more robust delivery method. All clients should specify this flag.
            </para>
            </param>
            <param name="fEvents">
            <para>Type: <c>LONG</c></para>
            <para>
            Change notification events for which to receive notification. See the SHCNE flags listed in SHChangeNotify for possible values.
            </para>
            </param>
            <param name="wMsg">
            <para>Type: <c>UINT</c></para>
            <para>Message to be posted to the window procedure.</para>
            </param>
            <param name="cEntries">
            <para>Type: <c>int</c></para>
            <para>Number of entries in the array.</para>
            </param>
            <param name="pshcne">
            <para>Type: <c>const SHChangeNotifyEntry*</c></para>
            <para>
            Array of SHChangeNotifyEntry structures that contain the notifications. This array should always be set to one when calling
            <c>SHChangeNotifyRegister</c> or SHChangeNotifyDeregister will not work properly.
            </para>
            </param>
            <returns>
            <para>Type: <c>ULONG</c></para>
            <para>Returns a positive integer registration ID. Returns 0 if out of memory or in response to invalid parameters.</para>
            </returns>
            <remarks>
            <para>
            See the Change Notify Watcher Sample in the Windows Software Development Kit (SDK) for a full example that demonstrates the use
            of this function.
            </para>
            <para>When a change notification event is raised, the message indicated by is delivered to the window specified by the parameter.</para>
            <list type="bullet">
            <item>
            If SHCNRF_NewDelivery is specified, the and values in the message should be passed to SHChangeNotification_Lock as the and
            parameters respectively.
            </item>
            <item>
            If SHCNRF_NewDelivery is not specified, is a pointer to two PIDLIST_ABSOLUTE pointers, and specifies the event. The two
            PIDLIST_ABSOLUTE pointers can be <c>NULL</c>, depending on the event being sent.
            </item>
            </list>
            <para>When a relevant file system event takes place and the</para>
            <para>hwnd</para>
            <para>parameter is not</para>
            <para>NULL</para>
            <para>, then the message indicated by</para>
            <para>wMsg</para>
            <para>is posted to the specified window. Otherwise, if the</para>
            <para>pshcne</para>
            <para>parameter is not</para>
            <para>NULL</para>
            <para>, then that notification entry is used.</para>
            <para>
            For performance reasons, multiple notifications can be combined into a single notification. For example, if a large number of
            SHCNE_UPDATEITEM notifications are generated for files in the same folder, they can be joined into a single SHCNE_UPDATEDIR notification.
            </para>
            <para>
            The <c>NTSHChangeNotifyRegister</c> function, which is no longer available as of Windows Vista, was equivalent to
            <c>SHChangeNotifyRegister</c> with the SHCNRF_NewDelivery flag.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHChangeNotifyRegisterThread(Vanara.PInvoke.Shell32.SCNRT_STATUS)">
            <summary>
            <para>Enables asynchronous register and deregister of a thread.</para>
            </summary>
            <param name="status">
            <para>Type: <c>SCNRT_STATUS</c></para>
            <para>Indicates whether the function is being used to register or deregister the thread. One of the values of SCNRT_STATUS.</para>
            </param>
            <returns>
            <para>This function does not return a value.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHCreateDataObject(Vanara.PInvoke.Shell32.PIDL,System.UInt32,System.IntPtr[],System.Runtime.InteropServices.ComTypes.IDataObject,System.Guid@,System.Runtime.InteropServices.ComTypes.IDataObject@)">
            <summary>Creates a data object in a parent folder.</summary>
            <param name="pidlFolder">
            <para>Type: <c>PCIDLIST_ABSOLUTE</c></para>
            <para>A pointer to an ITEMIDLIST (PIDL) of the parent folder that contains the data object.</para>
            </param>
            <param name="cidl">
            <para>Type: <c>UINT</c></para>
            <para>The number of file objects or subfolders specified in the <c>apidl</c> parameter.</para>
            </param>
            <param name="apidl">
            <para>Type: <c>PCUITEMID_CHILD_ARRAY</c></para>
            <para>
            An array of pointers to constant ITEMIDLIST structures, each of which uniquely identifies a file object or subfolder relative to
            the parent folder. Each item identifier list must contain exactly one SHITEMID structure followed by a terminating zero.
            </para>
            </param>
            <param name="pdtInner">
            <para>Type: <c>IDataObject*</c></para>
            <para>
            A pointer to interface IDataObject. This parameter can be <c>NULL</c>. Specify <c>pdtInner</c> only if the data object created
            needs to support additional FORMATETC clipboard formats beyond the default formats it is assigned at creation. Alternatively,
            provide support for populating the created data object using non-default clipboard formats by calling method IDataObject::SetData
            and specifying the format in the <c>FORMATETC</c> structure passed in parameter <c>pFormatetc</c>.
            </para>
            </param>
            <param name="riid">
            <para>Type: <c>REFIID</c></para>
            <para>A reference to the IID of the interface to retrieve through <c>ppv</c>. This must be IID_IDataObject.</para>
            </param>
            <param name="ppv">
            <para>Type: <c>void**</c></para>
            <para>When this method returns successfully, contains the IDataObject interface pointer requested in <c>riid</c>.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this function succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            <para>
            This function is typically called when implementing method IShellFolder::GetUIObjectOf. When an interface pointer of interface ID
            IID_IDataObject is requested (using parameter <c>riid</c>), the implementer can return the interface pointer on the object
            created with <c>SHCreateDataObject</c> in response.
            </para>
            <para>
            This function supports the CFSTR_SHELLIDLIST (also known as HIDA) clipboard format and also has generic support for arbitrary
            clipboard formats through IDataObject::SetData. For more information on clipboard formats, see Shell Clipboard Formats.
            </para>
            <para>
            The new data object is intended to be used in operations such as drag-and-drop, in which the data is stored in the clipboard with
            a given format.
            </para>
            <para>
            We recommend that you use the IID_PPV_ARGS macro, defined in Objbase.h, to package the <c>riid</c> and <c>ppv</c> parameters.
            This macro provides the correct IID based on the interface pointed to by the value in <c>ppv</c>, which eliminates the
            possibility of a coding error in <c>riid</c> that could lead to unexpected results.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHCreateDataObject(Vanara.PInvoke.Shell32.PIDL,System.Collections.Generic.IEnumerable{Vanara.PInvoke.Shell32.PIDL},System.Runtime.InteropServices.ComTypes.IDataObject,System.Runtime.InteropServices.ComTypes.IDataObject@)">
            <summary>Creates a data object in a parent folder.</summary>
            <param name="pidlFolder">
            <para>Type: <c>PCIDLIST_ABSOLUTE</c></para>
            <para>A pointer to an ITEMIDLIST (PIDL) of the parent folder that contains the data object.</para>
            </param>
            <param name="apidl">
            <para>Type: <c>PCUITEMID_CHILD_ARRAY</c></para>
            <para>
            An array of pointers to constant ITEMIDLIST structures, each of which uniquely identifies a file object or subfolder relative to
            the parent folder. Each item identifier list must contain exactly one SHITEMID structure followed by a terminating zero.
            </para>
            </param>
            <param name="pdtInner">
            <para>Type: <c>IDataObject*</c></para>
            <para>
            A pointer to interface IDataObject. This parameter can be <c>NULL</c>. Specify <c>pdtInner</c> only if the data object created
            needs to support additional FORMATETC clipboard formats beyond the default formats it is assigned at creation. Alternatively,
            provide support for populating the created data object using non-default clipboard formats by calling method IDataObject::SetData
            and specifying the format in the <c>FORMATETC</c> structure passed in parameter <c>pFormatetc</c>.
            </para>
            </param>
            <param name="ppv">
            <para>Type: <c>void**</c></para>
            <para>When this method returns successfully, contains the IDataObject interface pointer requested in <c>riid</c>.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this function succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            <para>
            This function is typically called when implementing method IShellFolder::GetUIObjectOf. When an interface pointer of interface ID
            IID_IDataObject is requested (using parameter <c>riid</c>), the implementer can return the interface pointer on the object
            created with <c>SHCreateDataObject</c> in response.
            </para>
            <para>
            This function supports the CFSTR_SHELLIDLIST (also known as HIDA) clipboard format and also has generic support for arbitrary
            clipboard formats through IDataObject::SetData. For more information on clipboard formats, see Shell Clipboard Formats.
            </para>
            <para>
            The new data object is intended to be used in operations such as drag-and-drop, in which the data is stored in the clipboard with
            a given format.
            </para>
            <para>
            We recommend that you use the IID_PPV_ARGS macro, defined in Objbase.h, to package the <c>riid</c> and <c>ppv</c> parameters.
            This macro provides the correct IID based on the interface pointed to by the value in <c>ppv</c>, which eliminates the
            possibility of a coding error in <c>riid</c> that could lead to unexpected results.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHCreateDefaultContextMenu(Vanara.PInvoke.Shell32.DEFCONTEXTMENU@,System.Guid@,System.Object@)">
            <summary>
            <para>Creates an object that represents the Shell's default context menu implementation.</para>
            </summary>
            <param name="pdcm">
            <para>Type: <c>const DEFCONTEXTMENU*</c></para>
            <para>A pointer to a constant DEFCONTEXTMENU structure.</para>
            </param>
            <param name="riid">
            <para>Type: <c>REFIID</c></para>
            <para>
            Reference to the interface ID of the interface on which to base the object. This is typically the IID of IContextMenu,
            IContextMenu2, or IContextMenu3.
            </para>
            </param>
            <param name="ppv">
            <para>Type: <c>void**</c></para>
            <para>When this method returns, contains the interface pointer requested in riid.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this function succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            <para>
            This function is typically used in the implementation of IShellFolder::GetUIObjectOf. <c>GetUIObjectOf</c> creates a context menu
            that merges IContextMenu handlers specified by the DEFCONTEXTMENU structure, and can optionally provide default context menu verb
            implementations such as open, explore, delete, and copy.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHCreateDirectory(Vanara.PInvoke.HWND,System.String)">
            <summary>
            <para>
            [SHCreateDirectory is available for use in the operating systems specified in the Requirements section. It may be altered or
            unavailable in subsequent versions.]
            </para>
            <para>Creates a new file system folder.</para>
            </summary>
            <param name="hwnd">
            <para>Type: <c>HWND</c></para>
            <para>A handle to a parent window. This parameter can be set to <c>NULL</c> if no user interface is displayed.</para>
            </param>
            <param name="pszPath">
            <para>Type: <c>PCWSTR</c></para>
            <para>
            A pointer to a null-terminated Unicode string that contains the fully qualified path of the directory. This string should have no
            more than MAX_PATH characters, including the terminating null character.
            </para>
            </param>
            <returns>
            <para>Type: <c>int</c></para>
            <para>
            Returns <c>ERROR_SUCCESS</c> if successful. If the operation fails, other error codes can be returned, including those listed
            here. For values not specifically listed, see System Error Codes.
            </para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_BAD_PATHNAME</term>
            <term>The parameter was set to a relative path.</term>
            </item>
            <item>
            <term>ERROR_FILENAME_EXCED_RANGE</term>
            <term>The path pointed to by is too long.</term>
            </item>
            <item>
            <term>ERROR_FILE_EXISTS</term>
            <term>The directory exists.</term>
            </item>
            <item>
            <term>ERROR_ALREADY_EXISTS</term>
            <term>The directory exists.</term>
            </item>
            <item>
            <term>ERROR_CANCELLED</term>
            <term>The user canceled the operation.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            This function creates a file system folder whose fully qualified path is given by . If one or more of the intermediate folders do
            not exist, it creates them.
            </para>
            <para>To set security attributes on a new folder, use SHCreateDirectoryEx.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHCreateDirectoryEx(Vanara.PInvoke.HWND,System.String,Vanara.PInvoke.SECURITY_ATTRIBUTES)">
            <summary>
            <para>
            [This function is available through Windows XP Service Pack 2 (SP2) and Windows Server 2003. It might be altered or unavailable
            in subsequent versions of Windows.]
            </para>
            <para>Creates a new file system folder, with optional security attributes.</para>
            </summary>
            <param name="hwnd">
            <para>Type: <c>HWND</c></para>
            <para>A handle to a parent window. This parameter can be set to <c>NULL</c> if no user interface will be displayed.</para>
            </param>
            <param name="pszPath">
            <para>Type: <c>LPCTSTR</c></para>
            <para>
            A pointer to a null-terminated string specifying the fully qualified path of the directory. This string is of maximum length of
            248 characters, including the terminating null character.
            </para>
            </param>
            <param name="psa">
            <para>Type: <c>const SECURITY_ATTRIBUTES*</c></para>
            <para>
            A pointer to a SECURITY_ATTRIBUTES structure with the directory's security attribute. Set this parameter to <c>NULL</c> if no
            security attributes need to be set.
            </para>
            </param>
            <returns>
            <para>Type: <c>int</c></para>
            <para>
            Returns <c>ERROR_SUCCESS</c> if successful. If the operation fails, other error codes can be returned, including those listed
            here. For values not specifically listed, see System Error Codes.
            </para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_BAD_PATHNAME</term>
            <term>The parameter was set to a relative path.</term>
            </item>
            <item>
            <term>ERROR_FILENAME_EXCED_RANGE</term>
            <term>The path pointed to by is too long.</term>
            </item>
            <item>
            <term>ERROR_PATH_NOT_FOUND</term>
            <term>The system cannot find the path pointed to by . The path may contain an invalid entry.</term>
            </item>
            <item>
            <term>ERROR_FILE_EXISTS</term>
            <term>The directory exists.</term>
            </item>
            <item>
            <term>ERROR_ALREADY_EXISTS</term>
            <term>The directory exists.</term>
            </item>
            <item>
            <term>ERROR_CANCELLED</term>
            <term>The user canceled the operation.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            This function creates a file system folder whose fully qualified path is given by . If one or more of the intermediate folders do
            not exist, they are created as well. <c>SHCreateDirectoryEx</c> also verifies that the files are visible. If they are not
            visible, expect one of the following:
            </para>
            <list type="bullet">
            <item>
            If is set to a valid window handle, a message box is displayed warning the user that he or she might not be able to access the
            files. If the user chooses not to proceed, the function returns <c>ERROR_CANCELLED</c>.
            </item>
            <item>If is set to <c>NULL</c>, no user interface is displayed and the function returns <c>ERROR_CANCELLED</c>.</item>
            </list>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHCreateFileExtractIconW(System.String,Vanara.PInvoke.FileFlagsAndAttributes,System.Guid@,System.Object@)">
            <summary>
            <para>[</para>
            <para>SHCreateFileExtractIcon</para>
            <para>
            is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in
            subsequent versions.]
            </para>
            <para>
            Creates a default IExtractIcon handler for a file system object. Namespace extensions that display file system objects typically
            use this function. The extension and file attributes derive all that is needed for a simple icon extractor.
            </para>
            </summary>
            <param name="pszFile">
            <para>Type: <c>LPCTSTR</c></para>
            <para>
            A pointer to a null-terminated string that specifies the file system object. The buffer must not exceed MAX_PATH characters in length.
            </para>
            </param>
            <param name="dwFileAttributes">
            <para>Type: <c>DWORD</c></para>
            <para>
            A combination of one or more file attribute flags (FILE_ATTRIBUTE_* values as defined in Winnt.h) that specify the type of object.
            </para>
            </param>
            <param name="riid">
            <para>Type: <c>REFIID</c></para>
            <para>
            Reference to the desired interface ID of the icon extractor interface to create. This must be either IID_IExtractIconA or IID_IExtractIconW.
            </para>
            </param>
            <param name="ppv">
            <para>Type: <c>void**</c></para>
            <para>When this function returns, contains the interface pointer requested in . This is typically IExtractIcon.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this function succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHCreatePropSheetExtArray(Vanara.PInvoke.HKEY,System.String,System.UInt32)">
            <summary>
            <para>
            [SHCreatePropSheetExtArray is available for use in the operating systems specified in the Requirements section. It may be altered
            or unavailable in subsequent versions.]
            </para>
            <para>Loads all the Shell property sheet extension handlers located under a specified registry key.</para>
            </summary>
            <param name="hKey">
            <para>TBD</para>
            </param>
            <param name="pszSubKey">
            <para>TBD</para>
            </param>
            <param name="max_iface">
            <para>Type: <c>UINT</c></para>
            <para>The maximum number of property sheet handlers to be returned.</para>
            </param>
            <returns>
            <para>Type: <c>HPSXA</c></para>
            <para>
            Returns a handle to an array of property sheet handlers. Pass this value to SHAddFromPropSheetExtArray. You do not access this
            value directly.
            </para>
            </returns>
            <remarks>
            <para>When you are finished with the returned HPSXA handle, destroy it by calling SHDestroyPropSheetExtArray.</para>
            <para>This function loads up to property sheet extensions into an array that is then passed to SHAddFromPropSheetExtArray.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHCreateShellFolderView(Vanara.PInvoke.Shell32.SFV_CREATE@,Vanara.PInvoke.Shell32.IShellView@)">
            <summary>
            <para>Creates a new instance of the default Shell folder view object (DefView).</para>
            </summary>
            <param name="pcsfv">
            <para>Type: <c>const SFV_CREATE*</c></para>
            <para>
            Pointer to a SFV_CREATE structure that describes the particulars used in creating this instance of the Shell folder view object.
            </para>
            </param>
            <param name="ppsv">
            <para>Type: <c>IShellView**</c></para>
            <para>
            When this function returns successfully, contains an interface pointer to the new IShellView object. On failure, this value is <c>NULL</c>.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this function succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            <para>
            <c>SHCreateShellFolderView</c> is recommended over SHCreateShellFolderViewEx because of the greater flexibility of its elements
            to participate in various scenarios, provide new functionality to the view, and interact with other objects.
            </para>
            <para>
            When dealing with several instances of IShellView, you might want to verify which is the default Shell folder view object. To do
            so, call QueryInterface on the object using the IID_CDefView IID. This call succeeds only when made on the default Shell folder
            view object.
            </para>
            <para>Data sources that use the default Shell folder view object must implement these interfaces:</para>
            <list type="bullet">
            <item>IShellFolder</item>
            <item>IShellFolder2</item>
            <item>IPersistFolder</item>
            <item>IPersistFolder2</item>
            </list>
            <para>Optionally, they can also implement</para>
            <para>IPersistFolder3</para>
            <para>.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHCreateShellFolderViewEx(Vanara.PInvoke.Shell32.CSFV@,Vanara.PInvoke.Shell32.IShellView@)">
            <summary>
            <para>
            Creates a new instance of the default Shell folder view object. It is recommended that you use SHCreateShellFolderView rather
            than this function.
            </para>
            </summary>
            <param name="pcsfv">
            <para>Type: <c>CSFV*</c></para>
            <para>Pointer to a structure that describes the details used in creating this instance of the Shell folder view object.</para>
            </param>
            <param name="ppsv">
            <para>Type: <c>IShellView**</c></para>
            <para>
            The address of an IShellView interface pointer that, when this function returns successfully, points to the new view object. On
            failure, this value is <c>NULL</c>.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this function succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            <para>
            SHCreateShellFolderView is recommended over <c>SHCreateShellFolderViewEx</c> because of the greater flexibility of its elements
            to participate in various scenarios, provide new functionality to the view, and interact with other objects.
            </para>
            <para>
            When dealing with several instances of IShellView, you might want to verify which is the default Shell folder view object. To do
            so, call QueryInterface on the object using IID_CDefView. This call succeeds only on the default Shell folder view object.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHCreateShellItem(Vanara.PInvoke.Shell32.PIDL,Vanara.PInvoke.Shell32.IShellFolder,Vanara.PInvoke.Shell32.PIDL,Vanara.PInvoke.Shell32.IShellItem@)">
            <summary>
            <para>Creates an IShellItem object.</para>
            <para><c>Note</c> It is recommended that you use SHCreateItemWithParent or SHCreateItemFromIDList instead of this function.</para>
            </summary>
            <param name="pidlParent">
            <para>Type: <c>PCIDLIST_ABSOLUTE</c></para>
            <para>A PIDL to the parent. This value can be <c>NULL</c>.</para>
            </param>
            <param name="psfParent">
            <para>Type: <c>IShellFolder*</c></para>
            <para>A pointer to the parent IShellFolder. This value can be <c>NULL</c>.</para>
            </param>
            <param name="pidl">
            <para>Type: <c>PCUITEMID_CHILD</c></para>
            <para>A PIDL to the requested item. If parent information is not included in or , this must be an absolute PIDL.</para>
            </param>
            <param name="ppsi">
            <para>Type: <c>IShellItem**</c></para>
            <para>When this method returns, contains the interface pointer to the new IShellItem.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this function succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            <para>
            <c>SHCreateShellItem</c> creates an object that represents a Shell namespace item. The caller must provide parent information in
            or ; alternatively, the caller can provide an absolute IDList in the parameter.
            </para>
            <para>There are three valid calling patterns for this function:</para>
            <list type="number">
            <item>
            The parent folder is identified by an absolute IDList . The parameter points to a child IDList that identifies the item within
            the folder identified by .
            </item>
            <item>
            The parent folder is identified by . The parameter points to a child IDList that identifies the item within the folder identified
            by .
            </item>
            <item>The item is identified by an absolute IDList passed to the parameter.</item>
            </list>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHCreateStdEnumFmtEtc(System.UInt32,System.Runtime.InteropServices.ComTypes.FORMATETC[],System.Runtime.InteropServices.ComTypes.IEnumFORMATETC@)">
            <summary>
            <para>
            [SHCreateStdEnumFmtEtc is available for use in the operating systems specified in the Requirements section. It may be altered or
            unavailable in subsequent versions.]
            </para>
            <para>Creates an IEnumFORMATETC object from an array of FORMATETC structures.</para>
            </summary>
            <param name="cfmt">
            <para>Type: <c>UINT</c></para>
            <para>The number of entries in the array.</para>
            </param>
            <param name="afmt">
            <para>Type: <c>const FORMATETC[]</c></para>
            <para>An array of FORMATETC structures that specifies the clipboard formats of interest.</para>
            </param>
            <param name="ppenumFormatEtc">
            <para>Type: <c>IEnumFORMATETC**</c></para>
            <para>When this function returns successfully, receives an IEnumFORMATETC interface pointer. Receives <c>NULL</c> on failure.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this function succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHDefExtractIcon(System.String,System.Int32,Vanara.PInvoke.Shell32.GetIconLocationResultFlags,Vanara.PInvoke.User32.SafeHICON@,Vanara.PInvoke.User32.SafeHICON@,System.UInt32)">
            <summary>Provides a default handler to extract an icon from a file.</summary>
            <param name="pszIconFile">
            <para>Type: <c>LPCTSTR</c></para>
            <para>A pointer to a null-terminated buffer that contains the path and name of the file from which the icon is extracted.</para>
            </param>
            <param name="iIndex">
            <para>Type: <c>int</c></para>
            <para>
            The location of the icon within the file named in pszIconFile. If this is a positive number, it refers to the zero-based position
            of the icon in the file. For instance, 0 refers to the 1st icon in the resource file and 2 refers to the 3rd. If this is a
            negative number, it refers to the icon's resource ID.
            </para>
            </param>
            <param name="uFlags">
            <para>Type: <c>UINT</c></para>
            <para>A flag that controls the icon extraction.</para>
            <para>GIL_SIMULATEDOC</para>
            <para>
            Overlays the extracted icon on the default document icon to create the final icon. This icon can be used when no more appropriate
            icon can be found or retrieved.
            </para>
            </param>
            <param name="phiconLarge">
            <para>Type: <c>HICON*</c></para>
            <para>
            A pointer to an HICON that, when this function returns successfully, receives the handle of the large version of the icon
            specified in the LOWORD of nIconSize. This value can be <c>NULL</c>.
            </para>
            </param>
            <param name="phiconSmall">
            <para>Type: <c>HICON*</c></para>
            <para>
            A pointer to an HICON that, when this function returns successfully, receives the handle of the small version of the icon
            specified in the HIWORD of nIconSize.
            </para>
            </param>
            <param name="nIconSize">
            <para>Type: <c>UINT</c></para>
            <para>
            A value that contains the large icon size in its LOWORD and the small icon size in its HIWORD. Size is measured in pixels. Pass 0
            to specify default large and small sizes.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>This function can return one of these values.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>S_OK</term>
            <term>Success.</term>
            </item>
            <item>
            <term>S_FALSE</term>
            <term>The requested icon is not present.</term>
            </item>
            <item>
            <term>E_FAIL</term>
            <term>The file cannot be accessed, or is being accessed through a slow link.</term>
            </item>
            </list>
            </returns>
            <remarks>
            It is the responsibility of the caller to free the icon resources created through this function when they are no longer needed.
            This can be done through the DestroyIcon function.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHDefExtractIcon(System.String,System.Int32,System.UInt32,System.IntPtr,Vanara.PInvoke.User32.SafeHICON@,System.UInt32)">
            <summary>Provides a default handler to extract an icon from a file.</summary>
            <param name="pszIconFile">
            A pointer to a null-terminated buffer that contains the path and name of the file from which the icon is extracted.
            </param>
            <param name="iIndex">
            The location of the icon within the file named in pszIconFile. If this is a positive number, it refers to the zero-based position
            of the icon in the file. For instance, 0 refers to the 1st icon in the resource file and 2 refers to the 3rd. If this is a
            negative number, it refers to the icon's resource ID.
            </param>
            <param name="uFlags">A flag that controls the icon extraction.</param>
            <param name="phiconLarge">
            A pointer to an HICON that, when this function returns successfully, receives the handle of the large version of the icon
            specified in the LOWORD of nIconSize. This value can be NULL.
            </param>
            <param name="phiconSmall">
            A pointer to an HICON that, when this function returns successfully, receives the handle of the small version of the icon
            specified in the HIWORD of nIconSize.
            </param>
            <param name="nIconSize">
            A value that contains the large icon size in its LOWORD and the small icon size in its HIWORD. Size is measured in pixels. Pass 0
            to specify default large and small sizes.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHDestroyPropSheetExtArray(Vanara.PInvoke.Shell32.HPSXA)">
            <summary>
            <para>
            [SHDestroyPropSheetExtArray is available for use in the operating systems specified in the Requirements section. It may be
            altered or unavailable in subsequent versions.]
            </para>
            <para>Frees property sheet handlers that are pointed to an array created by SHCreatePropSheetExtArray.</para>
            </summary>
            <param name="hpsxa">
            <para>Type: <c>HPSXA</c></para>
            <para>The handle of the array that contains pointers to the property sheet handlers to destroy.</para>
            </param>
            <returns>
            <para>This function does not return a value.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHDoDragDrop(Vanara.PInvoke.HWND,System.Runtime.InteropServices.ComTypes.IDataObject,Vanara.PInvoke.Ole32.IDropSource,Vanara.PInvoke.Ole32.DROPEFFECT,Vanara.PInvoke.Ole32.DROPEFFECT@)">
            <summary>
            <para>Executes a drag-and-drop operation. Supports drag source creation on demand, as well as drag images.</para>
            </summary>
            <param name="hwnd">
            <para>Type: <c>HWND</c></para>
            <para>The handle of the window used to obtain the drag image. This value can be <c>NULL</c>. See Remarks for more details.</para>
            </param>
            <param name="pdata">
            <para>TBD</para>
            </param>
            <param name="pdsrc">
            <para>Type: <c>IDropSource*</c></para>
            <para>
            A pointer to an implementation of the IDropSource interface, which is used to communicate with the source during the drag operation.
            </para>
            <para>As of Windows Vista, if this value is <c>NULL</c>, the Shell creates a drop source object for you.</para>
            </param>
            <param name="dwEffect">
            <para>Type: <c>DWORD</c></para>
            <para>
            The effects that the source allows in the drag-and-drop operation. The most significant effect is whether the drag-and-drop
            operation permits a move. For a list of possible values, see DROPEFFECT.
            </para>
            </param>
            <param name="pdwEffect">
            <para>Type: <c>DWORD*</c></para>
            <para>
            A pointer to a value that indicates how the drag-and-drop operation affected the source data. The parameter is set only if the
            operation is not canceled. For a list of possible values, see DROPEFFECT.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>This function supports the standard return value E_OUTOFMEMORY, as well as the following values:</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>DRAGDROP_S_DROP</term>
            <term>The drag-and-drop operation was successful.</term>
            </item>
            <item>
            <term>DRAGDROP_S_CANCEL</term>
            <term>The drag-and-drop operation was canceled.</term>
            </item>
            <item>
            <term>E_UNSPEC</term>
            <term>Unexpected error occurred.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            As of Windows Vista, if a drag image is not already stored in the data object and a drag image cannot be obtained from the window
            specified by , the Shell provides a generic drag image. A drag image can fail to be obtained from the specified window either
            because is <c>NULL</c> or the specified window does not support the DI_GETDRAGIMAGE message.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.Shell_GetCachedImageIndex(System.String,System.Int32,System.UInt32)">
            <summary>
            <para>
            [Shell_GetCachedImageIndex is available for use in the operating systems specified in the Requirements section. It may be
            altered or unavailable in subsequent versions. Instead, use
            </para>
            <para>Shell_GetCachedImageIndexA</para>
            <para>or</para>
            <para>Shell_GetCachedImageIndexW</para>
            <para>.]</para>
            <para>Retrieves the cache index of a cached icon.</para>
            </summary>
            <param name="pszIconPath">A pointer to a buffer that contains the path to the image file.</param>
            <param name="iIconIndex">
            <para>Type: <c>int</c></para>
            <para>The index of the image within the file named at .</para>
            </param>
            <param name="uIconFlags">
            <para>Type: <c>UINT</c></para>
            <para>Not used.</para>
            </param>
            <returns>
            <para>Type: <c>int</c></para>
            <para>Returns the index of the image, or –1 on failure.</para>
            </returns>
            <remarks>
            <para>
            The <c>Shell_GetCachedImageIndexA</c> and <c>Shell_GetCachedImageIndexW</c> versions of this function were added in Windows
            Vista. For Unicode strings, call either <c>Shell_GetCachedImageIndexW</c> or <c>Shell_GetCachedImageIndex</c>. For ANSI strings,
            you must call <c>Shell_GetCachedImageIndexA</c> explicitly.
            </para>
            <para>
            <c>Windows Server 2003 and Windows XP:</c> Only <c>Shell_GetCachedImageIndex</c> is supported. <c>Shell_GetCachedImageIndex</c>
            requires a Unicode string.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.Shell_GetImageLists(Vanara.PInvoke.HIMAGELIST@,Vanara.PInvoke.HIMAGELIST@)">
            <summary>
            <para>
            [This function is available through Windows XP Service Pack 2 (SP2) and Windows Server 2003. It might be altered or unavailable
            in subsequent versions of Windows.]
            </para>
            <para>Retrieves system image lists for large and small icons.</para>
            </summary>
            <param name="phiml">
            <para>Type: <c>HIMAGELIST*</c></para>
            <para>A pointer to the handle of an image list which, on success, receives the system image list for large (32 x 32) icons.</para>
            </param>
            <param name="phimlSmall">
            <para>Type: <c>HIMAGELIST*</c></para>
            <para>A pointer to the handle of an image list which, on success, receives the system image list for small (16 x 16) icons.</para>
            </param>
            <returns>
            <para>Type: <c>BOOL</c></para>
            <para>Returns <c>TRUE</c> on success. On failure, returns <c>FALSE</c> and the image lists pointed to by and are unchanged.</para>
            </returns>
            <remarks>
            <para>
            <c>Important</c> The image lists retrieved through this function are global system image lists; do not call ImageList_Destroy
            using them.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.Shell_MergeMenus(Vanara.PInvoke.HMENU,Vanara.PInvoke.HMENU,System.UInt32,System.UInt32,System.UInt32,Vanara.PInvoke.Shell32.MM)">
            <summary>
            <para>
            [Shell_MergeMenus is available for use in the operating systems specified in the Requirements section. It may be altered or
            unavailable in subsequent versions.]
            </para>
            <para>Merges two menus.</para>
            </summary>
            <param name="hmDst">
            <para>Type: <c>HMENU</c></para>
            <para>The destination menu to which is added.</para>
            </param>
            <param name="hmSrc">
            <para>Type: <c>HMENU</c></para>
            <para>The source menu which is added to .</para>
            </param>
            <param name="uInsert">
            <para>Type: <c>UINT</c></para>
            <para>The point in after which the entries in are inserted.</para>
            </param>
            <param name="uIDAdjust">
            <para>Type: <c>UINT</c></para>
            <para>
            This number is added to each menu's ID to give an adjusted ID. Set to for no adjustment. The value for would typically be the
            number of items in . This number can be obtained using the GetMenuItemCount.
            </para>
            </param>
            <param name="uIDAdjustMax">
            <para>Type: <c>UINT</c></para>
            <para>
            The maximum adjusted ID to add to the menu. Any adjusted ID greater than this value is not added. To allow all IDs, set this
            parameter to 0xFFFF.
            </para>
            </param>
            <param name="uFlags">
            <para>Type: <c>ULONG</c></para>
            <para>One or more of the following flags.</para>
            <para>MM_ADDSEPARATOR</para>
            <para>
            Add a separator between the items from the two menus if one does not exist already. If you are inserting the entries from into
            the middle of , a separator is added above and below the material.
            </para>
            <para>MM_DONTREMOVESEPS</para>
            <para>Do not remove any existing separators in the two menus. Note that this could result in two separators in a row.</para>
            <para>MM_SUBMENUSHAVEIDS</para>
            <para>Set this flag if the submenus have IDs which should be adjusted.</para>
            </param>
            <returns>
            <para>Type: <c>UINT</c></para>
            <para>Returns the next open ID at the end of the menu (the maximum adjusted ID + 1).</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHFind_InitMenuPopup(Vanara.PInvoke.HMENU,Vanara.PInvoke.HWND,System.UInt32,System.UInt32)">
            <summary>
            <para>
            [SHFind_InitMenuPopup is available for use in the operating systems specified in the Requirements section. It may be altered or
            unavailable in subsequent versions.]
            </para>
            <para>
            Retrieves the IContextMenu instance for the submenu of options displayed for the <c>Search</c> entry in the Classic style Start menu.
            </para>
            </summary>
            <param name="hmenu">
            <para>Type: <c>HMENU</c></para>
            <para>The handle of the popup menu.</para>
            </param>
            <param name="hwndOwner">
            <para>TBD</para>
            </param>
            <param name="idCmdFirst">
            <para>Type: <c>UINT</c></para>
            <para>The ID of the first menu item.</para>
            </param>
            <param name="idCmdLast">
            <para>Type: <c>UINT</c></para>
            <para>The ID of the last menu item.</para>
            </param>
            <returns>
            <para>Type: <c>IContextMenu*</c></para>
            <para>If successful, returns an IContextMenu pointer. On failure, returns <c>NULL</c>.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHFindFiles(Vanara.PInvoke.Shell32.PIDL,System.IntPtr)">
            <summary>
            <para>
            [SHFindFiles is available for use in the operating systems specified in the Requirements section. It may be altered or
            unavailable in subsequent versions.]
            </para>
            <para>Displays the <c>Search</c> window UI.</para>
            </summary>
            <param name="pidlFolder">
            <para>Type: <c>PCIDLIST_ABSOLUTE</c></para>
            <para>
            The folder from which to start the search. This folder appears in the <c>Look in:</c> box in the <c>Search</c> window. This
            folder and all of its subfolders are searched unless users choose other options in the <c>Search</c> window's <c>More Advanced
            Options</c>. This value can be <c>NULL</c>.
            </para>
            </param>
            <param name="pidlSaveFile">
            <para>Type: <c>PCIDLIST_ABSOLUTE</c></para>
            <para>This parameter is not used and must be set to <c>NULL</c>.</para>
            <para>
            <c>Windows Server 2003 and Windows XP:</c> A saved search file (.fnd) to load. You can save search parameters to a .fnd file
            after the search is begun. This value can be <c>NULL</c>.
            </para>
            </param>
            <returns>
            <para>Type: <c>BOOL</c></para>
            <para>Returns <c>TRUE</c> if successful in displaying the <c>Search</c> window; otherwise <c>FALSE</c>.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHFlushSFCache">
            <summary>
            <para>
            [SHFlushSFCache is available for use in the operating systems specified in the Requirements section. It may be altered or
            unavailable in subsequent versions.]
            </para>
            <para>Flushes the special folder cache.</para>
            </summary>
            <returns>
            <para>This function does not return a value.</para>
            </returns>
            <remarks>
            <para>
            <c>SHFlushSFCache</c> is called when the path to a special folder is changed. This ensures that the updated path stored in the
            registry is used rather than the cached value.
            </para>
            <para>For more information on special folders, see the section of Getting a Folder's ID.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHFormatDrive(Vanara.PInvoke.HWND,System.UInt32,Vanara.PInvoke.Shell32.SHFMT_ID,Vanara.PInvoke.Shell32.SHFMT_OPT)">
            <summary>
            <para>
            [SHFormatDrive is available for use in the operating systems specified in the Requirements section. It may be altered or
            unavailable in subsequent versions.]
            </para>
            <para>Opens the Shell's <c>Format</c> dialog box.</para>
            </summary>
            <param name="hwnd">
            <para>Type: <c>HWND</c></para>
            <para>
            The handle of the parent window of the dialog box. The <c>Format</c> dialog box must have a parent window; therefore, this
            parameter cannot be <c>NULL</c>.
            </para>
            </param>
            <param name="drive">
            <para>Type: <c>UINT</c></para>
            <para>
            The drive to format. The value of this parameter represents a letter drive starting at 0 for the A: drive. For example, a value
            of 2 stands for the C: drive.
            </para>
            </param>
            <param name="fmtID">
            <para>Type: <c>UINT</c></para>
            <para>The ID of the physical format. Only the following flag is currently defined.</para>
            <para>SHFMT_ID_DEFAULT (0xFFFF)</para>
            <para>The default format ID.</para>
            </param>
            <param name="options">
            <para>Type: <c>UINT</c></para>
            <para>
            This value must be 0 or one of the following values that alter the default format options in the dialog box. This value is
            regarded as a bitfield and should be treated accordingly.
            </para>
            <para>SHFMT_OPT_FULL (0x0001)</para>
            <para>0x001. If this flag is set, then the <c>Quick Format</c> option is selected.</para>
            <para>This function is included in Shlobj.h only in Windows XP with SP1 and later.</para>
            <para><c>Windows XP:</c> Prior to Windows XP with SP1, this function is accessible through Shell32.lib.</para>
            <para>SHFMT_OPT_SYSONLY (0x0002)</para>
            <para>0x002. Selects the <c>Create an MS-DOS startup disk</c> option, creating a system boot disk.</para>
            </param>
            <returns>
            <para>Type: <c>DWORD</c></para>
            <para>
            Returns the format ID of the last successful format or one of the following values. The LOWORD of this value can be passed on
            subsequent calls as the parameter to repeat the last format.
            </para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>SHFMT_ERROR</term>
            <term>An error occurred during the last format. This does not indicate that the drive is unformattable.</term>
            </item>
            <item>
            <term>SHFMT_CANCEL</term>
            <term>The last format was canceled.</term>
            </item>
            <item>
            <term>SHFMT_NOFORMAT</term>
            <term>The drive cannot be formatted.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            The format is controlled by the dialog box interface. That is, the user must click the <c>OK</c> button to actually begin the
            format—the format cannot be started programmatically.
            </para>
            <para>Examples</para>
            <para>
            This call to <c>SHFormatDrive</c> brings up the Shell's Format dialog box for a disk in drive A, with the default formatting
            options selected.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHFree(System.IntPtr)">
            <summary>
            <para>
            [This function is available through Windows XP Service Pack 2 (SP2) and Windows Server 2003. It might be altered or unavailable
            in subsequent versions of Windows. Use CoTaskMemFree instead.]
            </para>
            <para>Frees the memory allocated by SHAlloc.</para>
            </summary>
            <param name="pv">
            <para>Type: <c>void*</c></para>
            <para>A pointer to the memory allocated by SHAlloc.</para>
            </param>
            <returns>
            <para>This function does not return a value.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHGetAttributesFromDataObject(System.Runtime.InteropServices.ComTypes.IDataObject,Vanara.PInvoke.Shell32.SFGAO,Vanara.PInvoke.Shell32.SFGAO@,System.UInt32@)">
            <summary>
            <para>
            [SHGetAttributesFromDataObject is available for use in the operating systems specified in the Requirements section. It may be
            altered or unavailable in subsequent versions.]
            </para>
            <para>Retrieves specified pieces of information from a system data object.</para>
            </summary>
            <param name="pdo">
            <para>Type: <c>IDataObject*</c></para>
            <para>The data object from which to retrieve the information.</para>
            </param>
            <param name="dwAttributeMask">
            <para>Type: <c>DWORD</c></para>
            <para>One or more of the SFGAO flags that indicate which pieces of information the calling application wants to retrieve.</para>
            </param>
            <param name="pdwAttributes">
            <para>Type: <c>DWORD*</c></para>
            <para>
            A pointer to a <c>DWORD</c> value that, when this function returns successfully, receives one or more SFGAO flags that indicate
            the attributes, among those requested, that are common to all items in . This pointer can be <c>NULL</c> if this information is
            not needed.
            </para>
            </param>
            <param name="pcItems">
            <para>Type: <c>UINT*</c></para>
            <para>
            A pointer to a <c>UINT</c> that, when this function returns successfully, receives the number of PIDLs in the data object pointed
            to by . This pointer can be <c>NULL</c> if this information is not needed.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>This function can return one of these values.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>S_OK</term>
            <term>Success.</term>
            </item>
            <item>
            <term>S_FALSE</term>
            <term>The object is not a system data object. In this case, is set to 0.</term>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHGetDataFromIDList(Vanara.PInvoke.Shell32.IShellFolder,Vanara.PInvoke.Shell32.PIDL,Vanara.PInvoke.Shell32.SHGetDataFormat,System.IntPtr,System.Int32)">
            <summary>Retrieves extended property data from a relative identifier list.</summary>
            <param name="psf">
            The address of the parent IShellFolder interface. This must be the immediate parent of the ITEMIDLIST structure referenced by the
            pidl parameter.
            </param>
            <param name="pidl">A pointer to an ITEMIDLIST structure that identifies the object relative to the folder specified in psf.</param>
            <param name="nFormat">The format in which the data is being requested.</param>
            <param name="pv">
            A pointer to a buffer that, when this function returns successfully, receives the requested data. The format of this buffer is
            determined by nFormat.
            <para>
            If nFormat is SHGDFIL_NETRESOURCE, there are two possible cases. If the buffer is large enough, the net resource's string
            information (fields for the network name, local name, provider, and comments) will be placed into the buffer. If the buffer is
            not large enough, only the net resource structure will be placed into the buffer and the string information pointers will be NULL.
            </para>
            </param>
            <param name="cb">Size of the buffer at pv, in bytes.</param>
            <remarks>
            This function extracts only information that is present in the pointer to an item identifier list (PIDL). Since the content of a
            PIDL depends on the folder object that created the PIDL, there is no guarantee that all requested information will be available.
            In addition, the information that is returned reflects the state of the object at the time the PIDL was created. The current
            state of the object could be different. For example, if you set nFormat to SHGDFIL_FINDDATA, the function might assign meaningful
            values to only some of the members of the WIN32_FIND_DATA structure. The remaining members will be set to zero. To retrieve
            complete current information on a file system file or folder, use standard file system functions such as GetFileTime or FindFirstFile.
            <para>
            E_INVALIDARG is returned if the psf, pidl, pv, or cb parameter does not match the nFormat parameter, or if nFormat is not one of
            the specific SHGDFIL_ values shown above.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHGetDesktopFolder(Vanara.PInvoke.Shell32.IShellFolder@)">
            <summary>Retrieves the IShellFolder interface for the desktop folder, which is the root of the Shell's namespace.</summary>
            <param name="ppv">
            When this method returns, receives an IShellFolder interface pointer for the desktop folder. The calling application is
            responsible for eventually freeing the interface by calling its IUnknown::Release method.
            </param>
            <returns>If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHGetFolderLocation(Vanara.PInvoke.HWND,Vanara.PInvoke.Shell32.CSIDL,Vanara.PInvoke.HTOKEN,System.Int32,Vanara.PInvoke.Shell32.PIDL@)">
            <summary>Deprecated. Retrieves the path of a folder as an ITEMIDLIST structure.</summary>
            <param name="hwndOwner">Reserved.</param>
            <param name="nFolder">
            A CSIDL value that identifies the folder to be located. The folders associated with the CSIDLs might not exist on a particular system.
            </param>
            <param name="hToken">
            An access token that can be used to represent a particular user. It is usually set to NULL, but it may be needed when there are
            multiple users for those folders that are treated as belonging to a single user. The most commonly used folder of this type is My
            Documents. The calling application is responsible for correct impersonation when hToken is non-NULL. It must have appropriate
            security privileges for the particular user, and the user's registry hive must be currently mounted.
            <para>
            Assigning the hToken parameter a value of -1 indicates the Default User. This allows clients of SHGetFolderLocation to find
            folder locations (such as the Desktop folder) for the Default User. The Default User user profile is duplicated when any new user
            account is created, and includes special folders such as My Documents and Desktop. Any items added to the Default User folder
            also appear in any new user account.
            </para>
            </param>
            <param name="dwReserved">Reserved.</param>
            <param name="ppidl">
            The address of a pointer to an item identifier list structure that specifies the folder's location relative to the root of the
            namespace (the desktop). The ppidl parameter is set to NULL on failure. The calling application is responsible for freeing this
            resource by calling CoTaskMemFree.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHGetFolderPath(Vanara.PInvoke.HWND,Vanara.PInvoke.Shell32.CSIDL,Vanara.PInvoke.HTOKEN,Vanara.PInvoke.Shell32.SHGFP,System.Text.StringBuilder)">
            <summary>
            Deprecated. Gets the path of a folder identified by a CSIDL value. <note>As of Windows Vista, this function is merely a wrapper
            for SHGetKnownFolderPath. The CSIDL value is translated to its associated KNOWNFOLDERID and then SHGetKnownFolderPath is called.
            New applications should use the known folder system rather than the older CSIDL system, which is supported only for backward compatibility.</note>
            </summary>
            <param name="hwndOwner">Reserved.</param>
            <param name="nFolder">
            A CSIDL value that identifies the folder whose path is to be retrieved. Only real folders are valid. If a virtual folder is
            specified, this function fails. You can force creation of a folder by combining the folder's CSIDL with CSIDL_FLAG_CREATE.
            </param>
            <param name="hToken">
            An access token that represents a particular user. If this parameter is NULL, which is the most common usage, the function
            requests the known folder for the current user.
            <para>
            Request a specific user's folder by passing the hToken of that user. This is typically done in the context of a service that has
            sufficient privileges to retrieve the token of a given user. That token must be opened with TOKEN_QUERY and TOKEN_IMPERSONATE
            rights. In some cases, you also need to include TOKEN_DUPLICATE. In addition to passing the user's hToken, the registry hive of
            that specific user must be mounted. See Access Control for further discussion of access control issues.
            </para>
            <para>
            Assigning the hToken parameter a value of -1 indicates the Default User. This allows clients of SHGetKnownFolderPath to find
            folder locations (such as the Desktop folder) for the Default User. The Default User user profile is duplicated when any new user
            account is created, and includes special folders such as Documents and Desktop. Any items added to the Default User folder also
            appear in any new user account. Note that access to the Default User folders requires administrator privileges.
            </para>
            </param>
            <param name="dwFlags">
            Flags that specify the path to be returned. This value is used in cases where the folder associated with a KNOWNFOLDERID (or
            CSIDL) can be moved, renamed, redirected, or roamed across languages by a user or administrator.
            <para>
            The known folder system that underlies SHGetFolderPath allows users or administrators to redirect a known folder to a location
            that suits their needs. This is achieved by calling IKnownFolderManager::Redirect, which sets the "current" value of the folder
            associated with the SHGFP_TYPE_CURRENT flag.
            </para>
            <para>
            The default value of the folder, which is the location of the folder if a user or administrator had not redirected it elsewhere,
            is retrieved by specifying the SHGFP_TYPE_DEFAULT flag. This value can be used to implement a "restore defaults" feature for a
            known folder.
            </para>
            <para>
            For example, the default value (SHGFP_TYPE_DEFAULT) for FOLDERID_Music (CSIDL_MYMUSIC) is "C:\Users\user name\Music". If the
            folder was redirected, the current value (SHGFP_TYPE_CURRENT) might be "D:\Music". If the folder has not been redirected, then
            SHGFP_TYPE_DEFAULT and SHGFP_TYPE_CURRENT retrieve the same path.
            </para>
            </param>
            <param name="pszPath">
            A pointer to a null-terminated string of length MAX_PATH which will receive the path. If an error occurs or S_FALSE is returned,
            this string will be empty. The returned path does not include a trailing backslash. For example, "C:\Users" is returned rather
            than "C:\Users\".
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHGetFolderPathAndSubDir(Vanara.PInvoke.HWND,Vanara.PInvoke.Shell32.CSIDL,Vanara.PInvoke.HTOKEN,Vanara.PInvoke.Shell32.SHGFP,System.String,System.Text.StringBuilder)">
            <summary>
            <para>Gets the path of a folder and appends a user-provided subfolder path.</para>
            </summary>
            <param name="hwnd">
            <para>Type: <c>HWND</c></para>
            <para>Reserved.</para>
            </param>
            <param name="csidl">
            <para>Type: <c>int</c></para>
            <para>
            A CSIDL value that identifies the folder whose path is to be retrieved. Only real folders are valid. If a virtual folder is
            specified, this function fails. You can force creation of a folder with <c>SHGetFolderPathAndSubDir</c> by combining the folder's
            <c>CSIDL</c> with CSIDL_FLAG_CREATE.
            </para>
            </param>
            <param name="hToken">
            <para>Type: <c>HANDLE</c></para>
            <para>
            An access token that represents a particular user. For systems earlier than Windows 2000, set this value to <c>NULL</c>. For
            later systems, is usually, but not always, set to <c>NULL</c>. You might need to assign a value to for those folders that can
            have multiple users but are treated as belonging to a single user. The most commonly used folder of this type is My Documents.
            </para>
            </param>
            <param name="dwFlags">
            <para>Type: <c>DWORD</c></para>
            <para>
            Specifies whether the path to be returned is the actual path of the folder or the default path. This value is used in cases where
            the folder associated with a CSIDL value may be moved or renamed by the user.
            </para>
            <para>SHGFP_TYPE_CURRENT</para>
            <para>Return the folder's current path.</para>
            <para>SHGFP_TYPE_DEFAULT</para>
            <para>Return the folder's default path.</para>
            </param>
            <param name="pszSubDir">
            <para>Type: <c>LPCTSTR</c></para>
            <para>
            A pointer to the subpath to be appended to the folder's path. This is a <c>null</c>-terminated string of length MAX_PATH. If you
            are not creating a new directory, this must be an existing subdirectory or the function returns an error. This value can be
            <c>NULL</c> if no subpath is to be appended.
            </para>
            </param>
            <param name="pszPath">
            <para>Type: <c>LPTSTR</c></para>
            <para>
            When this function returns, this value points to the directory path and appended subpath. This is a <c>null</c>-terminated string
            of length MAX_PATH. This string is empty when the function returns an error code.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this function succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHGetFolderPathEx(System.Guid@,Vanara.PInvoke.Shell32.KNOWN_FOLDER_FLAG,Vanara.PInvoke.HTOKEN,System.Text.StringBuilder,System.UInt32)">
            <summary>
            Retrieves the full path of a known folder identified by the folder's KNOWNFOLDERID. This extends SHGetKnownFolderPath by allowing
            you to set the initial size of the string buffer.
            </summary>
            <param name="rfid">A reference to the KNOWNFOLDERID that identifies the folder.</param>
            <param name="dwFlags">
            Flags that specify special retrieval options. This value can be 0; otherwise, one or more of the KNOWN_FOLDER_FLAG values.
            </param>
            <param name="hToken">
            An access token that represents a particular user. If this parameter is NULL, which is the most common usage, the function
            requests the known folder for the current user.
            <para>
            Request a specific user's folder by passing the hToken of that user. This is typically done in the context of a service that has
            sufficient privileges to retrieve the token of a given user. That token must be opened with TOKEN_QUERY and TOKEN_IMPERSONATE
            rights. In some cases, you also need to include TOKEN_DUPLICATE. In addition to passing the user's hToken, the registry hive of
            that specific user must be mounted. See Access Control for further discussion of access control issues.
            </para>
            <para>
            Assigning the hToken parameter a value of -1 indicates the Default User. This allows clients of SHGetKnownFolderPath to find
            folder locations (such as the Desktop folder) for the Default User. The Default User user profile is duplicated when any new user
            account is created, and includes special folders such as Documents and Desktop. Any items added to the Default User folder also
            appear in any new user account. Note that access to the Default User folders requires administrator privileges.
            </para>
            </param>
            <param name="pszPath">
            A null-terminated, Unicode string. This buffer must be of size cchPath. When SHGetFolderPathEx returns successfully, this
            parameter contains the path for the known folder.
            </param>
            <param name="cchPath">The size of the ppszPath buffer, in characters.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHGetIconOverlayIndex(System.String,System.Int32)">
            <summary>
            <para>Returns the index of the overlay icon in the system image list.</para>
            </summary>
            <param name="pszIconPath">
            <para>Type: <c>LPCTSTR</c></para>
            <para>
            A pointer to a null-terminated string of maximum length <c>MAX_PATH</c> that contains the fully qualified path of the file that
            contains the icon.
            </para>
            </param>
            <param name="iIconIndex">
            <para>Type: <c>int</c></para>
            <para>
            The icon's index in the file pointed to by . To request a standard overlay icon, set to <c>NULL</c>, and to one of the following:
            </para>
            <para>IDO_SHGIOI_SHARE (0x0FFFFFFF)</para>
            <para>The overlay icon that indicates a shared folder.</para>
            <para>IDO_SHGIOI_LINK (0x0FFFFFFE)</para>
            <para>The overlay icon that indicates a linked folder or file.</para>
            <para>IDO_SHGIOI_SLOWFILE (0x0FFFFFFD)</para>
            <para>The overlay icon that indicates a slow file.</para>
            <para>IDO_SHGIOI_DEFAULT (0x0FFFFFFC)</para>
            <para>
            <c>Windows 7 and later</c>. The overlay icon that indicates that the item is the default in a set. One example is the default printer.
            </para>
            </param>
            <returns>
            <para>Type: <c>int</c></para>
            <para>Returns the index of the overlay icon in the system image list if successful, or -1 otherwise.</para>
            </returns>
            <remarks>
            <para>
            Icon overlays are part of the system image list. They have two identifiers. The first is a one-based overlay index that
            identifies the overlay relative to other overlays in the image list. The other is an image index that identifies the actual
            image. These two indexes are equivalent to the values that you assign to the and parameters, respectively, when you add an icon
            overlay to a private image list with ImageList_SetOverlayImage. <c>SHGetIconOverlayIndex</c> returns the overlay index. To
            convert an overlay index to its equivalent image index, call INDEXTOOVERLAYMASK.
            </para>
            <para>
            <c>Note</c> After the image has been loaded into the system image list during initialization, it cannot be changed. The file name
            and index specified by and are used only to identify the icon overlay. <c>SHGetIconOverlayIndex</c> cannot be used to modify the
            system image list.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHGetIDListFromObject(System.Object,Vanara.PInvoke.Shell32.PIDL@)">
            <summary>Retrieves the pointer to an item identifier list (PIDL) of an object.</summary>
            <param name="iUnknown">A pointer to the IUnknown of the object from which to get the PIDL.</param>
            <param name="ppidl">When this function returns, contains a pointer to the PIDL of the given object.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHGetImageList(Vanara.PInvoke.Shell32.SHIL,System.Guid@,System.Object@)">
            <summary>Retrieves an image list.</summary>
            <param name="iImageList">The image type contained in the list.</param>
            <param name="riid">Reference to the image list interface identifier, normally IID_IImageList.</param>
            <param name="ppv">When this method returns, contains the interface pointer requested in riid. This is typically IImageList.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHGetInstanceExplorer(System.Object@)">
            <summary>
            <para>
            Retrieves an interface that allows hosted Shell extensions and other components to prevent their host process from closing
            prematurely. The host process is typically Windows Explorer or Windows Internet Explorer, but this function can also be used by
            other applications.
            </para>
            </summary>
            <param name="ppunk">
            <para>Type: <c>IUnknown**</c></para>
            <para>
            When this function returns successfully, contains the address of the host process' IUnknown interface pointer. This is a
            free-threaded interface used to prevent the host process from terminating. If the function call fails, this value is set to <c>NULL</c>.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this function succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            <para>
            There are a number of components, such as Shell extension handlers, that are implemented as DLLs and run in a host process such
            as Windows Explorer (Explorer.exe) or Internet Explorer (Iexplore.exe). Typically, when the user closes the host process, the
            component is shut down immediately as well. Such an abrupt termination can create problems for some components. For example, if a
            component is using a background thread to download data or run user-interface functions, it might need additional time to safely
            shut itself down.
            </para>
            <para>
            <c>SHGetInstanceExplorer</c> allows components that run in a host process to hold a reference on the host process.
            <c>SHGetInstanceExplorer</c> increments the host's reference count and returns a pointer to the host's IUnknown interface. By
            holding that reference, a component can prevent the host process from closing prematurely. After the component has completed its
            necessary processing, it should call (*ppunk)-&gt;Release to release the host's reference and allow the process to terminate.
            </para>
            <para>
            <c>Note</c> If <c>SHGetInstanceExplorer</c> is successful, the component must release the host's reference when it is no longer
            needed. Otherwise, all resources associated with the process will remain in memory. The IUnknown interface pointed to by * can
            only be used to release this reference. Components cannot use (*ppunk)-&gt;QueryInterface to request other interface pointers.
            </para>
            <para>SHGetInstanceExplorer</para>
            <para>succeeds only if it is called from from an application which had previously called</para>
            <para>SHSetInstanceExplorer</para>
            <para>to set a process reference.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHGetKnownFolderIDList(System.Guid@,Vanara.PInvoke.Shell32.KNOWN_FOLDER_FLAG,Vanara.PInvoke.HTOKEN,Vanara.PInvoke.Shell32.PIDL@)">
            <summary>Retrieves the path of a known folder as an ITEMIDLIST structure.</summary>
            <param name="rfid">
            A reference to the KNOWNFOLDERID that identifies the folder. The folders associated with the known folder IDs might not exist on
            a particular system.
            </param>
            <param name="dwFlags">
            Flags that specify special retrieval options. This value can be 0; otherwise, it is one or more of the KNOWN_FOLDER_FLAG values.
            </param>
            <param name="hToken">
            An access token used to represent a particular user. This parameter is usually set to NULL, in which case the function tries to
            access the current user's instance of the folder. However, you may need to assign a value to hToken for those folders that can
            have multiple users but are treated as belonging to a single user. The most commonly used folder of this type is Documents.
            <para>
            The calling application is responsible for correct impersonation when hToken is non-null. It must have appropriate security
            privileges for the particular user, including TOKEN_QUERY and TOKEN_IMPERSONATE, and the user's registry hive must be currently
            mounted. See Access Control for further discussion of access control issues.
            </para>
            <para>
            Assigning the hToken parameter a value of -1 indicates the Default User. This allows clients of SHGetKnownFolderIDList to find
            folder locations (such as the Desktop folder) for the Default User. The Default User user profile is duplicated when any new user
            account is created, and includes special folders such as Documents and Desktop. Any items added to the Default User folder also
            appear in any new user account. Note that access to the Default User folders requires administrator privileges.
            </para>
            </param>
            <param name="ppidl">
            When this method returns, contains a pointer to the PIDL of the folder. This parameter is passed uninitialized. The caller is
            responsible for freeing the returned PIDL when it is no longer needed by calling ILFree.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHGetKnownFolderItem(System.Guid@,Vanara.PInvoke.Shell32.KNOWN_FOLDER_FLAG,Vanara.PInvoke.HTOKEN,System.Guid@,System.Object@)">
            <summary>Retrieves an IShellItem object that represents a known folder.</summary>
            <param name="rfid">A reference to the KNOWNFOLDERID, a GUID that identifies the folder that contains the item.</param>
            <param name="dwFlags">
            Flags that specify special options used in the retrieval of the known folder IShellItem. This value can be KF_FLAG_DEFAULT;
            otherwise, one or more of the KNOWN_FOLDER_FLAG values.
            </param>
            <param name="hToken">
            An access token used to represent a particular user. This parameter is usually set to NULL, in which case the function tries to
            access the current user's instance of the folder. However, you may need to assign a value to hToken for those folders that can
            have multiple users but are treated as belonging to a single user. The most commonly used folder of this type is Documents.
            <para>
            The calling application is responsible for correct impersonation when hToken is non-null. It must have appropriate security
            privileges for the particular user, including TOKEN_QUERY and TOKEN_IMPERSONATE, and the user's registry hive must be currently
            mounted. See Access Control for further discussion of access control issues.
            </para>
            <para>
            Assigning the hToken parameter a value of -1 indicates the Default User. This allows clients of SHGetKnownFolderIDList to find
            folder locations (such as the Desktop folder) for the Default User. The Default User user profile is duplicated when any new user
            account is created, and includes special folders such as Documents and Desktop. Any items added to the Default User folder also
            appear in any new user account. Note that access to the Default User folders requires administrator privileges.
            </para>
            </param>
            <param name="riid">A reference to the IID of the interface that represents the item, usually IID_IShellItem or IID_IShellItem2.</param>
            <param name="ppv">When this method returns, contains the interface pointer requested in riid.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHGetKnownFolderItem``1(Vanara.PInvoke.Shell32.KNOWNFOLDERID,Vanara.PInvoke.Shell32.KNOWN_FOLDER_FLAG,Vanara.PInvoke.HTOKEN)">
            <summary>Retrieves an IShellItem object that represents a known folder.</summary>
            <typeparam name="TIntf">The Type of the interface that represents the item, usually IShellItem or IShellItem2.</typeparam>
            <param name="rfid">The KNOWNFOLDERID that identifies the folder that contains the item.</param>
            <param name="dwFlags">
            Flags that specify special options used in the retrieval of the known folder IShellItem. This value can be KF_FLAG_DEFAULT;
            otherwise, one or more of the KNOWN_FOLDER_FLAG values.
            </param>
            <param name="hToken">
            An access token used to represent a particular user. This parameter is usually set to NULL, in which case the function tries to
            access the current user's instance of the folder. However, you may need to assign a value to hToken for those folders that can
            have multiple users but are treated as belonging to a single user. The most commonly used folder of this type is Documents.
            <para>
            The calling application is responsible for correct impersonation when hToken is non-null. It must have appropriate security
            privileges for the particular user, including TOKEN_QUERY and TOKEN_IMPERSONATE, and the user's registry hive must be currently
            mounted. See Access Control for further discussion of access control issues.
            </para>
            <para>
            Assigning the hToken parameter a value of -1 indicates the Default User. This allows clients of SHGetKnownFolderIDList to find
            folder locations (such as the Desktop folder) for the Default User. The Default User user profile is duplicated when any new user
            account is created, and includes special folders such as Documents and Desktop. Any items added to the Default User folder also
            appear in any new user account. Note that access to the Default User folders requires administrator privileges.
            </para>
            </param>
            <returns>When this method returns, contains the interface pointer requested.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHGetKnownFolderPath(System.Guid@,Vanara.PInvoke.Shell32.KNOWN_FOLDER_FLAG,Vanara.PInvoke.HTOKEN,System.String@)">
            <summary>Retrieves the full path of a known folder identified by the folder's KNOWNFOLDERID.</summary>
            <param name="rfid">A reference to the KNOWNFOLDERID that identifies the folder.</param>
            <param name="dwFlags">
            Flags that specify special retrieval options. This value can be 0; otherwise, one or more of the KNOWN_FOLDER_FLAG values.
            </param>
            <param name="hToken">
            An access token that represents a particular user. If this parameter is NULL, which is the most common usage, the function
            requests the known folder for the current user.
            <para>
            Request a specific user's folder by passing the hToken of that user. This is typically done in the context of a service that has
            sufficient privileges to retrieve the token of a given user. That token must be opened with TOKEN_QUERY and TOKEN_IMPERSONATE
            rights. In some cases, you also need to include TOKEN_DUPLICATE. In addition to passing the user's hToken, the registry hive of
            that specific user must be mounted. See Access Control for further discussion of access control issues.
            </para>
            <para>
            Assigning the hToken parameter a value of -1 indicates the Default User. This allows clients of SHGetKnownFolderPath to find
            folder locations (such as the Desktop folder) for the Default User. The Default User user profile is duplicated when any new user
            account is created, and includes special folders such as Documents and Desktop. Any items added to the Default User folder also
            appear in any new user account. Note that access to the Default User folders requires administrator privileges.
            </para>
            </param>
            <param name="pszPath">
            When this method returns, contains the address of a pointer to a null-terminated Unicode string that specifies the path of the
            known folder. The calling process is responsible for freeing this resource once it is no longer needed by calling CoTaskMemFree.
            The returned path does not include a trailing backslash. For example, "C:\Users" is returned rather than "C:\Users\".
            </param>
            <returns>Returns S_OK if successful, or an error value otherwise.</returns>
            <remarks>This function replaces SHGetFolderPath. That older function is now simply a wrapper for SHGetKnownFolderPath.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHGetNameFromIDList(Vanara.PInvoke.Shell32.PIDL,Vanara.PInvoke.Shell32.SIGDN,System.String@)">
            <summary>Retrieves the display name of an item identified by its IDList.</summary>
            <param name="pidl">A PIDL that identifies the item.</param>
            <param name="sigdnName">A value from the SIGDN enumeration that specifies the type of display name to retrieve.</param>
            <param name="ppszName">
            A value that, when this function returns successfully, receives the address of a pointer to the retrieved display name.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHGetPathFromIDList(Vanara.PInvoke.Shell32.PIDL,System.Text.StringBuilder)">
            <summary>Converts an item identifier list to a file system path.</summary>
            <param name="pidl">
            The address of an item identifier list that specifies a file or directory location relative to the root of the namespace (the desktop).
            </param>
            <param name="pszPath">
            The address of a buffer to receive the file system path. This buffer must be at least MAX_PATH characters in size.
            </param>
            <returns>Returns TRUE if successful; otherwise, FALSE.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHGetPathFromIDListEx(Vanara.PInvoke.Shell32.PIDL,System.Text.StringBuilder,System.UInt32,Vanara.PInvoke.Shell32.GPFIDL_FLAGS)">
            <summary>
            <para>
            Converts an item identifier list to a file system path. This function extends SHGetPathFromIDList by allowing you to set the
            initial size of the string buffer and declare the options below.
            </para>
            </summary>
            <param name="pidl">
            <para>Type: <c>PCIDLIST_ABSOLUTE</c></para>
            <para>
            A pointer to an item identifier list that specifies a file or directory location relative to the root of the namespace (the desktop).
            </para>
            </param>
            <param name="pszPath">
            <para>Type: <c>PWSTR</c></para>
            <para>
            When this function is called it is passed a null-terminated, Unicode buffer to receive the file system path. This buffer is of
            size .
            </para>
            <para>
            When this function returns, contains the address of a null-terminated, Unicode buffer that contains the file system path. This
            buffer is of size .
            </para>
            </param>
            <param name="cchPath">
            <para>Type: <c>DWORD</c></para>
            <para>The size of the buffer pointed to by , in characters.</para>
            </param>
            <param name="uOpts">
            <para>Type: <c>GPFIDL_FLAGS</c></para>
            <para>These flags determine the type of path returned.</para>
            <para>GPFIDL_DEFAULT (0x0000)</para>
            <para>Win32 file names, servers, and root drives are included.</para>
            <para>GPFIDL_ALTNAME (0x0001)</para>
            <para>Uses short file names.</para>
            <para>GPFIDL_UNCPRINTER (0x0002)</para>
            <para>Include UNC printer names items.</para>
            </param>
            <returns>
            <para>Type: <c>BOOL</c></para>
            <para>Returns <c>TRUE</c> if successful; otherwise, <c>FALSE</c>.</para>
            </returns>
            <remarks>
            <para>
            Except for UNC printer names, if the location specified by the parameter is not part of the file system, this function fails.
            </para>
            <para>If the parameter specifies a shortcut, the contains the path to the shortcut, not to the shortcut's target.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHGetRealIDL(Vanara.PInvoke.Shell32.IShellFolder,Vanara.PInvoke.Shell32.PIDL,Vanara.PInvoke.Shell32.PIDL@)">
            <summary>
            <para>
            [SHGetRealIDL is available for use in the operating systems specified in the Requirements section. It may be altered or
            unavailable in subsequent versions.]
            </para>
            <para>Converts a simple pointer to an item identifier list (PIDL) into a full PIDL.</para>
            </summary>
            <param name="psf">
            <para>Type: <c>IShellFolder*</c></para>
            <para>A pointer to an instance of IShellFolder whose simple PIDL is to be converted.</para>
            </param>
            <param name="pidlSimple">
            <para>Type: <c>PCUITEMID_CHILD</c></para>
            <para>The simple PIDL to be converted.</para>
            </param>
            <param name="ppidlReal">
            <para>Type: <c>PITEMID_CHILD*</c></para>
            <para>
            When this method returns, contains a pointer to the full converted PIDL. If the function fails, this parameter is set to <c>NULL</c>.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this function succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHGetSetFolderCustomSettings(Vanara.PInvoke.Shell32.SHFOLDERCUSTOMSETTINGS@,System.String,Vanara.PInvoke.Shell32.FCS)">
            <summary>
            <para>
            [SHGetSetFolderCustomSettings is available for use in the operating systems specified in the Requirements section. It may be
            altered or unavailable in subsequent versions.]
            </para>
            <para>Sets or retrieves custom folder settings. This function reads from and writes to Desktop.ini.</para>
            </summary>
            <param name="pfcs">
            <para>Type: <c>LPSHFOLDERCUSTOMSETTINGS</c></para>
            <para>A pointer to a SHFOLDERCUSTOMSETTINGS structure that provides or receives the custom folder settings.</para>
            </param>
            <param name="pszPath">
            <para>Type: <c>PCTSTR</c></para>
            <para>
            A pointer to a null-terminated Unicode string that contains the path to the folder. The length of <c>pszPath</c> must be MAX_PATH
            or less, including the terminating null character.
            </para>
            </param>
            <param name="dwReadWrite">
            <para>Type: <c>DWORD</c></para>
            <para>A flag that controls the action of the function. It may be one of the following values.</para>
            <para>FCS_READ (0x00000001)</para>
            <para>Retrieve the custom folder settings in .</para>
            <para>FCS_FORCEWRITE (0x00000002)</para>
            <para>Use to set the custom folder's settings regardless of whether the values are already present.</para>
            <para>FCS_WRITE (FCS_READ | FCS_FORCEWRITE)</para>
            <para>Use to set the custom folder's settings if the values are not already present.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this function succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            <para>Only Unicode strings are supported.</para>
            <para><c>Windows Server 2003 and Windows XP:</c><c>SHGetSetFolderCustomSettings</c> supports both ANSI and Unicode strings.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHGetSetSettings(Vanara.PInvoke.Shell32.SHELLSTATE@,Vanara.PInvoke.Shell32.SSF,System.Boolean)">
            <summary>
            <para>
            [SHGetSetSettings is available for use in the operating systems specified in the Requirements section. It may be altered or
            unavailable in subsequent versions.]
            </para>
            <para>Sets or retrieves Shell state settings.</para>
            </summary>
            <param name="lpss">
            <para>Type: <c>LPSHELLSTATE</c></para>
            <para>A pointer to a SHELLSTATE structure that provides or receives the Shell state settings.</para>
            </param>
            <param name="dwMask">
            <para>Type: <c>DWORD</c></para>
            <para>One or more of the SSF flags that indicate which settings should be set or retrieved.</para>
            </param>
            <param name="bSet">
            <para>Type: <c>BOOL</c></para>
            <para>
            <c>TRUE</c> to indicate that the contents of should be used to set the Shell settings, <c>FALSE</c> to indicate that the Shell
            settings should be retrieved to .
            </para>
            </param>
            <returns>
            <para>This function does not return a value.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHGetSettings(Vanara.PInvoke.Shell32.SHELLFLAGSTATE@,Vanara.PInvoke.Shell32.SSF)">
            <summary>
            <para>Retrieves the current Shell option settings.</para>
            </summary>
            <param name="psfs">
            <para>Type: <c>LPSHELLFLAGSTATE</c></para>
            <para>The address of a SHELLFLAGSTATE structure that receives the Shell option settings.</para>
            </param>
            <param name="dwMask">
            <para>Type: <c>DWORD</c></para>
            <para>A set of flags that determine which members of lpsfs are being requested. This can be one or more of the following values.</para>
            <para>SSF_DESKTOPHTML</para>
            <para>The <c>fDesktopHTML</c> member is being requested.</para>
            <para>SSF_DONTPRETTYPATH</para>
            <para>The <c>fDontPrettyPath</c> member is being requested.</para>
            <para>SSF_DOUBLECLICKINWEBVIEW</para>
            <para>The <c>fDoubleClickInWebView</c> member is being requested.</para>
            <para>SSF_HIDEICONS</para>
            <para>The <c>fHideIcons</c> member is being requested.</para>
            <para>SSF_MAPNETDRVBUTTON</para>
            <para>The <c>fMapNetDrvBtn</c> member is being requested.</para>
            <para>SSF_NOCONFIRMRECYCLE</para>
            <para>The <c>fNoConfirmRecycle</c> member is being requested.</para>
            <para>SSF_SHOWALLOBJECTS</para>
            <para>The <c>fShowAllObjects</c> member is being requested.</para>
            <para>SSF_SHOWATTRIBCOL</para>
            <para>The <c>fShowAttribCol</c> member is being requested.</para>
            <para><c>Windows Vista:</c> Not used.</para>
            <para>SSF_SHOWCOMPCOLOR</para>
            <para>The <c>fShowCompColor</c> member is being requested.</para>
            <para>SSF_SHOWEXTENSIONS</para>
            <para>The <c>fShowExtensions</c> member is being requested.</para>
            <para>SSF_SHOWINFOTIP</para>
            <para>The <c>fShowInfoTip</c> member is being requested.</para>
            <para>SSF_SHOWSYSFILES</para>
            <para>The <c>fShowSysFiles</c> member is being requested.</para>
            <para>SSF_WIN95CLASSIC</para>
            <para>The <c>fWin95Classic</c> member is being requested.</para>
            </param>
            <returns>
            <para>This function does not return a value.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHHandleUpdateImage(Vanara.PInvoke.Shell32.PIDL)">
            <summary>
            <para>
            [SHHandleUpdateImage is available for use in the operating systems specified in the Requirements section. It may be altered or
            unavailable in subsequent versions.]
            </para>
            <para>Handles the <c>SHCNE_UPDATEIMAGE</c> Shell change notification.</para>
            </summary>
            <param name="pidlExtra">
            <para>Type: <c>PCIDLIST_ABSOLUTE</c></para>
            <para>The index in the system image list that has changed, specified in the parameter of IShellChangeNotify::OnChange.</para>
            </param>
            <returns>
            <para>Type: <c>int</c></para>
            <para>Returns -1 on failure or the index of the changed image list entry on success.</para>
            </returns>
            <remarks>
            <para>Use <c>SHHandleUpdateImage</c> only when the parameter received by your change notification callback is non- <c>NULL</c>.</para>
            <para>Examples</para>
            <para>The following example demonstrates the use of <c>SHHandleUpdateImage</c> in the implementation of IShellChangeNotify::OnChange.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHLimitInputEdit(Vanara.PInvoke.HWND,Vanara.PInvoke.Shell32.IShellFolder)">
            <summary>
            <para>
            [This function is available through Windows XP Service Pack 2 (SP2) and Windows Server 2003. It might be altered or unavailable
            in subsequent versions of Windows.]
            </para>
            <para>Sets limits on valid characters for an edit control.</para>
            </summary>
            <param name="hwndEdit">
            <para>Type: <c>HWND</c></para>
            <para>The handle of the edit control.</para>
            </param>
            <param name="psf">
            <para>Type: <c>IShellFolder*</c></para>
            <para>
            An IShellFolder interface pointer. This object must also implement IItemNameLimits, which supplies a list of invalid characters
            and a maximum name length.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this function succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHLoadInProc(System.Guid@)">
            <summary>
            <para>Creates an instance of the specified object class from within the context of the Shell's process.</para>
            <para><c>Windows Vista</c> and later: This function has been disabled and returns E_NOTIMPL.</para>
            </summary>
            <param name="rclsid">
            <para>Type: <c>REFCLSID</c></para>
            <para>The CLSID of the object class to be created.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>Returns S_OK if successful, or an error value otherwise. In Windows Vista and later versions, always returns E_NOTIMPL.</para>
            </returns>
            <remarks>
            <para>
            <c>Note</c> This function is available through Windows XP Service Pack 2 (SP2) and Windows Server 2003. It is not available in
            later versions of Windows, including Windows Vista.
            </para>
            <para>
            This function creates the requested object instance by calling the CoCreateInstance function and immediately releasing the
            returned object. The associated DLL is unloaded according to standard Component Object Model (COM) rules when it returns S_OK
            from its DllCanUnloadNow function.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHMapPIDLToSystemImageListIndex(Vanara.PInvoke.Shell32.IShellFolder,Vanara.PInvoke.Shell32.PIDL,System.Int32@)">
            <summary>
            <para>
            [ <c>SHMapPIDLToSystemImageListIndex</c> is available for use in the operating systems specified in the Requirements section. It
            may be altered or unavailable in subsequent versions.]
            </para>
            <para>Retrieves the icon index from the system image list that is associated with a folder item.</para>
            </summary>
            <param name="psf">
            <para>Type: <c><c>IShellFolder</c>*</c></para>
            <para>An <c>IShellFolder</c> interface pointer for the folder that contains the item.</para>
            </param>
            <param name="pidl">
            <para>Type: <c>PCUITEMID_CHILD</c></para>
            <para>A pointer to the item's <c>ITEMIDLIST</c> structure.</para>
            </param>
            <param name="piIndex">
            <para>Type: <c>int*</c></para>
            <para>
            A pointer to an <c>int</c> that, when this function returns successfully, receives the index of the item's <c>open</c> icon in
            the system image list. If the item does not have a special <c>open</c> icon then the index of its normal icon is returned. If the
            <c>open</c> icon exists and cannot be obtained, then the value pointed to by piIndex is set to -1. This parameter can be
            <c>NULL</c> if the calling application is not interested in the <c>open</c> icon.
            </para>
            </param>
            <returns>
            <para>Type: <c>int</c></para>
            <para>Returns the index of the item's normal icon in the system image list if successful, or -1 otherwise.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHMapPIDLToSystemImageListIndex(Vanara.PInvoke.Shell32.IShellFolder,Vanara.PInvoke.Shell32.PIDL,System.IntPtr)">
            <summary>
            <para>
            [ <c>SHMapPIDLToSystemImageListIndex</c> is available for use in the operating systems specified in the Requirements section. It
            may be altered or unavailable in subsequent versions.]
            </para>
            <para>Retrieves the icon index from the system image list that is associated with a folder item.</para>
            </summary>
            <param name="psf">
            <para>Type: <c><c>IShellFolder</c>*</c></para>
            <para>An <c>IShellFolder</c> interface pointer for the folder that contains the item.</para>
            </param>
            <param name="pidl">
            <para>Type: <c>PCUITEMID_CHILD</c></para>
            <para>A pointer to the item's <c>ITEMIDLIST</c> structure.</para>
            </param>
            <param name="piIndex">
            <para>Type: <c>int*</c></para>
            <para>
            A pointer to an <c>int</c> that, when this function returns successfully, receives the index of the item's <c>open</c> icon in
            the system image list. If the item does not have a special <c>open</c> icon then the index of its normal icon is returned. If the
            <c>open</c> icon exists and cannot be obtained, then the value pointed to by piIndex is set to -1. This parameter can be
            <c>NULL</c> if the calling application is not interested in the <c>open</c> icon.
            </para>
            </param>
            <returns>
            <para>Type: <c>int</c></para>
            <para>Returns the index of the item's normal icon in the system image list if successful, or -1 otherwise.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHMultiFileProperties(System.Runtime.InteropServices.ComTypes.IDataObject,System.UInt32)">
            <summary>
            <para>
            Displays a merged property sheet for a set of files. Property values common to all the files are shown while those that differ
            display the string <c>(multiple values)</c>.
            </para>
            </summary>
            <param name="pdtobj">
            <para>Type: <c>IDataObject*</c></para>
            <para>
            A pointer to a data object that supplies the PIDLs of all of the files for which to display the merged property sheet. The data
            object must use the CFSTR_SHELLIDLIST clipboard format. The parent folder's implementation of IShellFolder::GetDisplayNameOf must
            return a fully qualified file system path for each item in response to the SHGDN_FORPARSING flag.
            </para>
            </param>
            <param name="dwFlags">
            <para>Type: <c>DWORD</c></para>
            <para>Reserved. Must be set to 0.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this function succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHObjectProperties(Vanara.PInvoke.HWND,Vanara.PInvoke.Shell32.SHOP,System.String,System.String)">
            <summary>
            <para>
            [SHObjectProperties is available for use in the operating systems specified in the Requirements section. It may be altered or
            unavailable in subsequent versions.]
            </para>
            <para>Invokes the <c>Properties</c> context menu command on a Shell object.</para>
            </summary>
            <param name="hwnd">
            <para>Type: <c>HWND</c></para>
            <para>The handle of the parent window of the dialog box. This value can be <c>NULL</c>.</para>
            </param>
            <param name="shopObjectType">
            <para>Type: <c>DWORD</c></para>
            <para>A flag value that specifies the type of object.</para>
            <para>SHOP_PRINTERNAME</para>
            <para>contains the friendly name of a printer.</para>
            <para>SHOP_FILEPATH</para>
            <para>contains a fully qualified file name.</para>
            <para>SHOP_VOLUMEGUID</para>
            <para>
            contains either (a) a volume name of the form \?\Volume{GUID}, where {GUID} is a globally unique identifier (for example,
            "\?\Volume{2eca078d-5cbc-43d3-aff8-7e8511f60d0e})", or (b) a drive path (for example, "C:").
            </para>
            </param>
            <param name="pszObjectName">
            <para>Type: <c>PCWSTR</c></para>
            <para>
            A null-terminated Unicode string that contains the object name. The contents of the string are determined by the flag set in .
            </para>
            </param>
            <param name="pszPropertyPage">
            <para>Type: <c>PCWSTR</c></para>
            <para>
            A null-terminated Unicode string that contains the name of the property sheet page to be opened initially. Set this parameter to
            <c>NULL</c> to specify the default page.
            </para>
            </param>
            <returns>
            <para>Type: <c>BOOL</c></para>
            <para><c>TRUE</c> if the command is successfully invoked; otherwise, <c>FALSE</c>.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHOpenFolderAndSelectItems(Vanara.PInvoke.Shell32.PIDL,System.UInt32,System.IntPtr[],Vanara.PInvoke.Shell32.OFASI)">
            <summary>Opens a Windows Explorer window with specified items in a particular folder selected.</summary>
            <param name="pidlFolder">A pointer to a fully qualified item ID list that specifies the folder.</param>
            <param name="cidl">
            A count of items in the selection array, apidl. If cidl is zero, then pidlFolder must point to a fully specified ITEMIDLIST
            describing a single item to select. This function opens the parent folder and selects that item.
            </param>
            <param name="apidl">
            A pointer to an array of PIDL structures, each of which is an item to select in the target folder referenced by pidlFolder.
            </param>
            <param name="dwFlags">
            The optional flags. Under Windows XP this parameter is ignored. In Windows Vista, the following flags are defined.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHOpenWithDialog(Vanara.PInvoke.HWND,Vanara.PInvoke.Shell32.OPENASINFO@)">
            <summary>
            <para>Displays the <c>Open With</c> dialog box.</para>
            </summary>
            <param name="hwndParent">
            <para>Type: <c>HWND</c></para>
            <para>The handle of the parent window. This value can be <c>NULL</c>.</para>
            </param>
            <param name="poainfo">
            <para>Type: <c>const OPENASINFO*</c></para>
            <para>A pointer to an OPENASINFO structure, which specifies the contents of the resulting dialog.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this function succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            <para>
            Starting in Windows 10, the <c>OAIF_ALLOW_REGISTRATION</c>, <c>OAIF_FORCE_REGISTRATION</c>, and <c>OAIF_HIDE_REGISTRATION</c>
            flags will be ignored by <c>SHOpenWithDialog</c>. The <c>Open With</c> dialog box can no longer be used to change the default
            program used to open a file extension. You can only use <c>SHOpenWithDialog</c> to open a single file.
            </para>
            <para>
            If <c>SHOpenWithDialog</c> is called without passing <c>OAIF_EXEC</c>, the user will receive a dialog that informs them that they
            can change the default programs used to open file extensions in their <c>Settings</c>.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHParseDisplayName(System.String,System.IntPtr,Vanara.PInvoke.Shell32.PIDL@,Vanara.PInvoke.Shell32.SFGAO,Vanara.PInvoke.Shell32.SFGAO@)">
            <summary>
            Translates a Shell namespace object's display name into an item identifier list and returns the attributes of the object. This
            function is the preferred method to convert a string to a pointer to an item identifier list (PIDL).
            </summary>
            <param name="pszName">A pointer to a zero-terminated wide string that contains the display name to parse.</param>
            <param name="pbc">A bind context that controls the parsing operation. This parameter is normally set to NULL.</param>
            <param name="ppidl">
            The address of a pointer to a variable of type ITEMIDLIST that receives the item identifier list for the object. If an error
            occurs, then this parameter is set to NULL.
            </param>
            <param name="sfgaoIn">
            A ULONG value that specifies the attributes to query. To query for one or more attributes, initialize this parameter with the
            flags that represent the attributes of interest. For a list of available SFGAO flags, see IShellFolder::GetAttributesOf.
            </param>
            <param name="psfgaoOut">
            A pointer to a ULONG. On return, those attributes that are true for the object and were requested in sfgaoIn are set. An object's
            attribute flags can be zero or a combination of SFGAO flags. For a list of available SFGAO flags, see IShellFolder::GetAttributesOf.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHPathPrepareForWrite(Vanara.PInvoke.HWND,System.Object,System.String,Vanara.PInvoke.Shell32.SHPPFW)">
            <summary>
            <para>
            Checks to see if the path exists. This includes remounting mapped network drives, prompting for ejectable media to be reinserted,
            creating the paths, prompting for the media to be formatted, and providing the appropriate user interfaces, if necessary.
            Read/write permissions for the medium are not checked.
            </para>
            </summary>
            <param name="hwnd">
            <para>Type: <c>HWND</c></para>
            <para>
            A handle to a window that specifies the parent window to be used for any user interface windows that must be created. If set to
            <c>NULL</c>, user interface windows are not created.
            </para>
            </param>
            <param name="punkEnableModless">
            <para>Type: <c>IUnknown*</c></para>
            <para>
            A pointer to an IUnknown interface that specifies the IOleInPlaceActiveObject object that implements the EnableModeless method.
            </para>
            </param>
            <param name="pszPath">
            <para>Type: <c>LPCTSTR</c></para>
            <para>
            A pointer to a null-terminated string of maximum length MAX_PATH that specifies the path to be verified as valid for writing.
            This can be a UNC or file drive path.
            </para>
            </param>
            <param name="dwFlags">
            <para>Type: <c>DWORD</c></para>
            <para>Flags that determine behavior options. This parameter can be a combination of the following values.</para>
            <para>SHPPFW_NONE</para>
            <para>Do not create new directories.</para>
            <para>SHPPFW_DEFAULT</para>
            <para>
            Default. Do not prompt the user if a directory needs to be created. This is identical to <c>SHPPFW_DIRCREATE</c>. Do not pass
            with <c>SHPPFW_ASKDIRCREATE</c>.
            </para>
            <para>SHPPFW_DIRCREATE</para>
            <para>Create directories without prompting the user. Do not pass with <c>SHPPFW_ASKDIRCREATE</c>.</para>
            <para>SHPPFW_ASKDIRCREATE</para>
            <para>Prompt the user before creating directories. Do not pass with <c>SHPPFW_DIRCREATE</c>.</para>
            <para>SHPPFW_IGNOREFILENAME</para>
            <para>
            Last item in is a file name, so ignore. For example, if ="C:\MyDir\MyFile.doc", only use "C:\MyDir". If ="C:\MyFirDir\MySecDir",
            only use "C:\MyFirDir".
            </para>
            <para>SHPPFW_NOWRITECHECK</para>
            <para>Not currently implemented.</para>
            <para>SHPPFW_MEDIACHECKONLY</para>
            <para>
            <c>Windows XP or later.</c> Suppresses the "not accessible" error message box, which displays when a failure other than a user
            cancellation occurs, and is not <c>NULL</c>.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>
            Returns S_OK if the path is available, or an error code otherwise. Note that a return value of S_OK does not mean that the medium
            is writable; it simply means that the path is available.
            </para>
            </returns>
            <remarks>
            <para>
            The primary use of this function is for a program to check a path before using it and display the necessary user interface to
            prompt the user. For example, if the disk in drive A: were missing, a window that prompts the user to insert the disk would appear.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHPropStgCreate(Vanara.PInvoke.Ole32.IPropertySetStorage,System.Guid@,System.Guid@,Vanara.PInvoke.Ole32.PROPSETFLAG,Vanara.PInvoke.STGM,System.UInt32,Vanara.PInvoke.Ole32.IPropertyStorage@,System.UInt32@)">
            <summary>
            <para>
            [This function is available through Windows XP Service Pack 2 (SP2) and Windows Server 2003. It might be altered or unavailable
            in subsequent versions of Windows.]
            </para>
            <para>Ensures proper handling of code page retrieval or assignment for the requested property set operation.</para>
            </summary>
            <param name="psstg">
            <para>Type: <c>IPropertySetStorage*</c></para>
            <para>A pointer to an IPropertySetStorage interface.</para>
            </param>
            <param name="fmtid">
            <para>Type: <c>REFFMTID</c></para>
            <para>
            A property set ID to open. The values for this parameter can be either one of those defined in Predefined Property Set Format
            Identifiers or any other FMTID that you register.
            </para>
            </param>
            <param name="pclsid">
            <para>Type: <c>const CLSID*</c></para>
            <para>A pointer to the CLSID associated with the set. This parameter can be <c>NULL</c>.</para>
            </param>
            <param name="grfFlags">
            <para>Type: <c>DWORD</c></para>
            <para>
            One or more members of the PROPSETFLAG enumeration that determine how the property set is created and opened. All sets containing
            ANSI bytes should be created with PROPSETFLAG_ANSI, otherwise PROPSETFLAG_DEFAULT.
            </para>
            </param>
            <param name="grfMode">
            <para>Type: <c>DWORD</c></para>
            <para>
            The flags from the STGM enumeration that indicate conditions for creating and deleting the object and access modes for the
            object. Must contain STGM_DIRECT | STGM_SHARE_EXCLUSIVE.
            </para>
            </param>
            <param name="dwDisposition">
            <para>Type: <c>DWORD</c></para>
            <para>One of the following values, defined in Fileapi.h.</para>
            <para>CREATE_NEW (1)</para>
            <para>Create a new set if one does not already exist.</para>
            <para>CREATE_ALWAYS (2)</para>
            <para>Always create a new set, overwriting any existing set.</para>
            <para>OPEN_EXISTING (3)</para>
            <para>Open the existing set.</para>
            <para>OPEN_ALWAYS (4)</para>
            </param>
            <param name="ppstg">
            <para>Type: <c>IPropertyStorage**</c></para>
            <para>When this method returns, contains an IPropertyStorage interface pointer.</para>
            </param>
            <param name="puCodePage">
            <para>Type: <c>UINT*</c></para>
            <para>When this method returns, contains the address of the code page ID for the set.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this function succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHPropStgReadMultiple(Vanara.PInvoke.Ole32.IPropertyStorage,System.UInt32,System.UInt32,Vanara.PInvoke.Ole32.PROPSPEC[],Vanara.PInvoke.Ole32.PROPVARIANT[])">
            <summary>
            <para>
            [This function is available through Windows XP Service Pack 2 (SP2) and Windows Server 2003. It might be altered or unavailable
            in subsequent versions of Windows.]
            </para>
            <para>
            Wraps the IPropertyStorage::ReadMultiple function to ensure that ANSI and Unicode translations are handled properly for
            deprecated property sets.
            </para>
            </summary>
            <param name="pps">
            <para>Type: <c>IPropertyStorage*</c></para>
            <para>An IPropertyStorage interface pointer that identifies the property store.</para>
            </param>
            <param name="uCodePage">
            <para>Type: <c>UINT</c></para>
            <para>A code page value for ANSI string properties.</para>
            </param>
            <param name="cpspec">
            <para>Type: <c>ULONG</c></para>
            <para>A count of properties being read.</para>
            </param>
            <param name="rgpspec">
            <para>Type: <c>PROPSPEC const[]</c></para>
            <para>An array of properties to be read.</para>
            </param>
            <param name="rgvar">
            <para>Type: <c>PROPVARIANT[]</c></para>
            <para>An array of PROPVARIANT types that, when this function returns successfully, receives the property values.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this function succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHPropStgWriteMultiple(Vanara.PInvoke.Ole32.IPropertyStorage,System.UInt32@,System.UInt32,Vanara.PInvoke.Ole32.PROPSPEC[],Vanara.PInvoke.Ole32.PROPVARIANT[],System.UInt32)">
            <summary>
            <para>
            [This function is available through Windows XP Service Pack 2 (SP2) and Windows Server 2003. It might be altered or unavailable
            in subsequent versions of Windows.]
            </para>
            <para>
            Wraps the IPropertyStorage::WriteMultiple function to ensure that ANSI and Unicode translations are handled properly for
            deprecated property sets.
            </para>
            </summary>
            <param name="pps">
            <para>Type: <c>IPropertyStorage*</c></para>
            <para>An IPropertyStorage interface pointer that identifies the property store.</para>
            </param>
            <param name="puCodePage">
            <para>TBD</para>
            </param>
            <param name="cpspec">
            <para>Type: <c>ULONG</c></para>
            <para>A count of properties being set.</para>
            </param>
            <param name="rgpspec">
            <para>Type: <c>PROPSPEC const[]</c></para>
            <para>An array of PROPSPEC structures that contain the property information to be set.</para>
            </param>
            <param name="rgvar">
            <para>Type: <c>PROPVARIANT[]</c></para>
            <para>An array of PROPVARIANT types to set the property values.</para>
            </param>
            <param name="propidNameFirst">
            <para>Type: <c>PROPID</c></para>
            <para>The minimum value for property identifiers when they must be allocated. The value should be greater than or equal to PID_FIRST_USABLE.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this function succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHReplaceFromPropSheetExtArray(Vanara.PInvoke.Shell32.HPSXA,System.UInt32,Vanara.PInvoke.ComCtl32.AddPropSheetPageProc,System.IntPtr)">
            <summary>
            <para>
            [This function is available through Windows XP Service Pack 2 (SP2) and Windows Server 2003. It might be altered or unavailable
            in subsequent versions of Windows.]
            </para>
            <para>Requests each property sheet in a property sheet extension array to replace pages. Each page is allowed up to one replacement.</para>
            </summary>
            <param name="hpsxa">
            <para>Type: <c>HPSXA</c></para>
            <para>A property sheet array handle (HPSXA) returned from a call to SHCreatePropSheetExtArray.</para>
            </param>
            <param name="uPageID">
            <para>Type: <c>UINT</c></para>
            <para>The ID of the page to replace.</para>
            </param>
            <param name="lpfnReplaceWith">
            <para>Type: <c>LPFNADDPROPSHEETPAGE</c></para>
            <para>A pointer to an AddPropSheetPageProc function used by the property sheet extension to add a page to a property sheet.</para>
            </param>
            <param name="lParam">
            <para>Type: <c>LPARAM</c></para>
            <para>An application-defined value.</para>
            </param>
            <returns>
            <para>Type: <c>UINT</c></para>
            <para>The number of replacements actually performed.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHRestricted(Vanara.PInvoke.Shell32.RESTRICTIONS)">
            <summary>
            <para>
            [SHRestricted is available for use in the operating systems specified in the Requirements section. It may be altered or
            unavailable in subsequent versions.]
            </para>
            <para>
            Determines whether a specified administrator policy is in effect. In many cases, applications need to modify certain behaviors to
            comply with the policies enacted by system administrators.
            </para>
            </summary>
            <param name="rest">
            <para>Type: <c>RESTRICTIONS</c></para>
            <para>Specifies one of the flags described in the RESTRICTIONS enumerated type.</para>
            </param>
            <returns>
            <para>Type: <c>DWORD</c></para>
            <para>Returns nonzero if the specified restriction is in effect, or zero otherwise.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHSetInstanceExplorer(System.Object)">
            <summary>
            <para>
            Provides an interface that allows hosted Shell extensions and other components to prevent their host process from closing
            prematurely. The host process is typically Windows Explorer or Windows Internet Explorer, but this function can also be used by
            other applications.
            </para>
            </summary>
            <param name="punk">
            <para>Type: <c>IUnknown*</c></para>
            <para>
            A pointer to a free-threaded IUnknown. Components can use this interface (through SHGetInstanceExplorer) to prevent the host
            process from terminating. This value can be <c>NULL</c>, in which case the process reference is no longer made available to components.
            </para>
            </param>
            <returns>
            <para>This function does not return a value.</para>
            </returns>
            <remarks>
            <para>
            Windows Explorer and Internet Explorer can use <c>SHSetInstanceExplorer</c> to allow components such as Shell extensions to
            extend the lifetime of the process. Other applications can also use <c>SHSetInstanceExplorer</c> to allow for the same
            capability. For instance, the browser message loop and the proxy desktop use <c>SHSetInstanceExplorer</c> to let other threads
            extend their lifetime.
            </para>
            <para>
            Applications other than Windows Explorer and Internet Explorer that call this function might encounter compatibility problems
            because some components use SHGetInstanceExplorer to detect whether they are being hosted from within Windows Explorer or
            Internet Explorer.
            </para>
            <para>The interface pointer passed to <c>SHSetInstanceExplorer</c> must reference a free-threaded object.</para>
            <para>
            Each time a component calls SHGetInstanceExplorer, the system calls the AddRef method before returning the interface pointer to
            the calling component. The component then calls the IUnknown::Release method when processing is complete. The process that calls
            <c>SHSetInstanceExplorer</c> must not terminate while the reference count of the provided interface pointer is nonzero.
            </para>
            <para>For further information on how components use the process references, see SHGetInstanceExplorer.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHSetKnownFolderPath(System.Guid@,Vanara.PInvoke.Shell32.KNOWN_FOLDER_FLAG,Vanara.PInvoke.HTOKEN,System.String)">
            <summary>
            <para>Redirects a known folder to a new location.</para>
            </summary>
            <param name="rfid">
            <para>Type: <c>REFKNOWNFOLDERID</c></para>
            <para>A <c>GUID</c> that identifies the known folder.</para>
            </param>
            <param name="dwFlags">
            <para>Type: <c>DWORD</c></para>
            <para>Either 0 or the following value.</para>
            <para>KF_FLAG_DONT_UNEXPAND</para>
            <para>If this flag is set, portions of the path referenced by may be represented by environment strings such as .</para>
            </param>
            <param name="hToken">
            <para>Type: <c>HANDLE</c></para>
            <para>
            An access token used to represent a particular user. This parameter is usually set to <c>NULL</c>, in which case the function
            tries to access the current user's instance of the folder. However, you may need to assign a value to for those folders that can
            have multiple users but are treated as belonging to a single user. The most commonly used folder of this type is <c>Documents</c>.
            </para>
            <para>
            The calling application is responsible for correct impersonation when is non-null. It must have appropriate security privileges
            for the particular user, including TOKEN_QUERY and TOKEN_IMPERSONATE, and the user's registry hive must be currently mounted. See
            Access Control for further discussion of access control issues.
            </para>
            <para>
            Assigning the parameter a value of -1 indicates the Default User. This allows clients of <c>SHSetKnownFolderPath</c> to set
            folder locations (such as the <c>Desktop</c> folder) for the Default User. The Default User user profile is duplicated when any
            new user account is created, and includes special folders such as <c>Documents</c> and <c>Desktop</c>. Any items added to the
            Default User folder also appear in any new user account. Note that access to the Default User folders requires administrator privileges.
            </para>
            </param>
            <param name="pszPath">
            <para>Type: <c>PCWSTR</c></para>
            <para>
            A pointer to the folder's new path. This is a null-terminated Unicode string of length MAX_PATH. This path cannot be of zero length.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>Returns S_OK if successful, or an error value otherwise, including the following:</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>E_INVALIDARG</term>
            <term>
            Among other things, this value can indicate that the parameter references a KNOWNFOLDERID that is not present on the system. Not
            all KNOWNFOLDERID values are present on all systems. Use IKnownFolderManager::GetFolderIds to retrieve the set of KNOWNFOLDERID
            values for the current system.
            </term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>This function replaces SHSetFolderPath. That older function is now simply a wrapper for <c>SHSetKnownFolderPath</c>.</para>
            <para>
            The caller of this function must have Administrator privileges. To call this function on public known folders, the caller must
            have Administrator privileges. For per-user known folders the caller only requires User privileges.
            </para>
            <para>
            Some of the known folders, for example, the <c>Documents</c> folder, are per-user. Every user has a different path for their
            <c>Documents</c> folder. If is <c>NULL</c>, the API tries to access the calling application's instance of the folder, which is
            that of the current user. If is a valid user token, the API tries to impersonate the user using this token and tries to access
            that user's instance.
            </para>
            <para>This function cannot be called on folders of type KF_CATEGORY_FIXED and KF_CATEGORY_VIRTUAL.</para>
            <para>To call this function on a folder of type KF_CATEGORY_COMMON, the calling application must be running with elevated privileges.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHShellFolderView_Message(Vanara.PInvoke.HWND,System.UInt32,System.IntPtr)">
            <summary>
            <para>
            [SHShellFolderView_Message is available for use in the operating systems specified in the Requirements section. It may be altered
            or unavailable in subsequent versions.]
            </para>
            <para>Sends a message to the shell's default IFolderView implementation (DefView).</para>
            </summary>
            <param name="hwndMain">
            <para>Type: <c>HWND</c></para>
            <para>A handle to the window that receives the message.</para>
            </param>
            <param name="uMsg">
            <para>Type: <c>UINT</c></para>
            <para>The message to send. The following is a list of possible messages.</para>
            <list type="table">
            <listheader>
            <term>Message</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>SFVM_ADDOBJECT</term>
            <term>Adds an object to the shell view.</term>
            </item>
            <item>
            <term>SFVM_GETSELECTEDOBJECTS</term>
            <term>Retrieves an array of PIDLs for all selected objects.</term>
            </item>
            <item>
            <term>SFVM_REARRANGE</term>
            <term>Notifies the IShellView to rearrange its items.</term>
            </item>
            <item>
            <term>SFVM_REMOVEOBJECT</term>
            <term>Removes an object from the shell view.</term>
            </item>
            <item>
            <term>SFVM_SETCLIPBOARD</term>
            <term>Notifies the IShellView when one of its objects is placed on the clipboard as a result of a menu command.</term>
            </item>
            <item>
            <term>SFVM_SETITEMPOS</term>
            <term>Sets the position of an item in the shell view.</term>
            </item>
            <item>
            <term>SFVM_SETPOINTS</term>
            <term>Sets the points of the currently selected objects to the data object on copy and cut commands.</term>
            </item>
            <item>
            <term>SFVM_UPDATEOBJECT</term>
            <term>Updates an object by passing a pointer to an array of two PIDLs.</term>
            </item>
            </list>
            </param>
            <param name="lParam">
            <para>Type: <c>LPARAM</c></para>
            <para>Contents of this value depend on the message passed in . See individual message topics for more information.</para>
            </param>
            <returns>
            <para>Type: <c>LRESULT</c></para>
            <para>The return value depends on the message passed in . See individual message topics for more information.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHUpdateImage(System.String,System.Int32,Vanara.PInvoke.Shell32.GetIconLocationFlags,System.Int32)">
            <summary>
            <para>Notifies the Shell that an image in the system image list has changed.</para>
            </summary>
            <param name="pszHashItem">
            <para>Type: <c>LPCTSTR</c></para>
            <para>
            A pointer to a string value that specifies the fully qualified path of the file that contains the icon. Use the path that is
            returned in the buffer pointed to by the parameter of IExtractIcon::GetIconLocation.
            </para>
            </param>
            <param name="iIndex">
            <para>Type: <c>int</c></para>
            <para>
            An integer that specifies the zero-based index of the icon in the file specified by . Use the value that is pointed to by the
            parameter of IExtractIcon::GetIconLocation.
            </para>
            </param>
            <param name="uFlags">
            <para>Type: <c>UINT</c></para>
            <para>
            An unsigned integer that specifies the flags that determine the icon attributes. Set to the value that is pointed to by the
            parameter of IExtractIcon::GetIconLocation. The flags that are relevant to <c>SHUpdateImage</c> are <c>GIL_NOTFILENAME</c> and <c>GIL_SIMULATEDOC</c>.
            </para>
            </param>
            <param name="iImageIndex">
            <para>Type: <c>int</c></para>
            <para>An integer that specifies the index in the system image list of the icon that is being updated.</para>
            </param>
            <returns>
            <para>No return value.</para>
            </returns>
            <remarks>
            <para>
            If you do not know the index in the system image list of the icon that you want to update, use SHGetFileInfo with the parameter
            set to <c>SHGFI_SYSICONINDEX</c>.
            </para>
            <para>
            You must use IExtractIcon::GetIconLocation with the parameters of the old icon that needs to be updated, not those of the new
            icon you want to replace it with.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHValidateUNC(Vanara.PInvoke.HWND,System.String,Vanara.PInvoke.Shell32.VALIDATEUNC)">
            <summary>
            <para>
            [SHValidateUNC is available for use in the operating systems specified in the Requirements section. It may be altered or
            unavailable in subsequent versions.]
            </para>
            <para>
            Validates a Universal Naming Convention (UNC) path by calling WNetAddConnection3. The function makes it possible for the user to
            type a remote network access (RNA) UNC application or document name from the <c>Run</c> dialog box on the <c>Start</c> menu.
            </para>
            </summary>
            <param name="hwndOwner">
            <para>Type: <c>HWND</c></para>
            <para>Handle of the parent window, used to display UI. If this is not needed, this value can be set to <c>NULL</c>.</para>
            </param>
            <param name="pszFile">
            <para>Type: <c>PWSTR</c></para>
            <para>
            A pointer to a null-terminated Unicode string that specifies the UNC path to validate. Note: This string must not be a constant string.
            </para>
            </param>
            <param name="fConnect">
            <para>Type: <c>UINT</c></para>
            <para>One or more of the following values.</para>
            <para>VALIDATEUNC_CONNECT (0x0001)</para>
            <para>
            Connect a drive letter. When this flag is set, the value in is changed to the local drive to which the UNC is mapped on the local machine.
            </para>
            <para>VALIDATEUNC_NOUI (0x0002)</para>
            <para>On either failure or success, display no UI.</para>
            <para>VALIDATEUNC_PRINT (0x0004)</para>
            <para>Validate as a print share rather than disk share.</para>
            <para>VALIDATEUNC_PERSIST (0x0008)</para>
            <para><c>Windows Vista and later</c>. The connection should be made persistent.</para>
            <para>VALIDATEUNC_VALID</para>
            <para>Mask value used to verify that the flags passed to <c>SHValidateUNC</c> are valid.</para>
            </param>
            <returns>
            <para>Type: <c>BOOL</c></para>
            <para>Returns <c>TRUE</c> if the UNC path exists; <c>FALSE</c> if the UNC path does not exist or if some other failure occurred.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SignalFileOpen(Vanara.PInvoke.Shell32.PIDL)">
            <summary>
            <para>
            [SignalFileOpen is available for use in the operating systems specified in the Requirements section. It may be altered or
            unavailable in subsequent versions.]
            </para>
            <para>Sends a notification to the Shell that the specified file has been opened.</para>
            </summary>
            <param name="pidl">
            <para>Type: <c>PCIDLIST_ABSOLUTE</c></para>
            <para>A PIDL that specifies the file.</para>
            </param>
            <returns>
            <para>Type: <c>BOOL</c></para>
            <para>Returns <c>TRUE</c> if successful; otherwise <c>FALSE</c>.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.StgMakeUniqueName(Vanara.PInvoke.Ole32.IStorage,System.String,Vanara.PInvoke.STGM,System.Guid@,System.Object@)">
            <summary>
            <para>Creates a unique name for a stream or storage object from a template.</para>
            </summary>
            <param name="pstgParent">
            <para>Type: <c>IStorage*</c></para>
            <para>A pointer to an IStorage object.</para>
            </param>
            <param name="pszFileSpec">
            <para>Type: <c>PCWSTR</c></para>
            <para>The format or template for the name of the stream or storage object.</para>
            </param>
            <param name="grfMode">
            <para>Type: <c>DWORD</c></para>
            <para>
            The access mode to use when opening the stream or storage object. For more information and descriptions of the possible values,
            see STGM Constants.
            </para>
            </param>
            <param name="riid">
            <para>Type: <c>REFIID</c></para>
            <para>A reference to the IID of the interface to retrieve through , typically IID_IStorage or IID_IStream.</para>
            </param>
            <param name="ppv">
            <para>Type: <c>void**</c></para>
            <para>When this method returns, contains the interface pointer requested in . This is typically IStorage or IStream.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this function succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            <para>
            It is recommended that you use the <c>IID_PPV_ARGS</c> macro, defined in Objbase.h, to package the and parameters. This macro
            provides the correct IID based on the interface pointed to by the value in , which eliminates the possibility of a coding error.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.StgMakeUniqueName``1(Vanara.PInvoke.Ole32.IStorage,System.String,Vanara.PInvoke.STGM)">
            <summary>Creates a unique name for a stream or storage object from a template.</summary>
            <typeparam name="TIntf">The type of the interface to retrieve through, typically IStorage or IStream.</typeparam>
            <param name="pstgParent">
            <para>Type: <c>IStorage*</c></para>
            <para>A pointer to an IStorage object.</para>
            </param>
            <param name="pszFileSpec">
            <para>Type: <c>PCWSTR</c></para>
            <para>The format or template for the name of the stream or storage object.</para>
            </param>
            <param name="grfMode">
            <para>Type: <c>DWORD</c></para>
            <para>
            The access mode to use when opening the stream or storage object. For more information and descriptions of the possible values,
            see STGM Constants.
            </para>
            </param>
            <returns>When this method returns, contains the interface pointer requested in . This is typically IStorage or IStream.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.Win32DeleteFile(System.String)">
            <summary>
            <para>
            [Win32DeleteFile is available for use in the operating systems specified in the Requirements section. It may be altered or
            unavailable in subsequent versions.]
            </para>
            <para>Deletes a file.</para>
            </summary>
            <param name="pszPath">
            <para>TBD</para>
            </param>
            <returns>
            <para>Type: <c>BOOL</c></para>
            <para><c>TRUE</c> if the file was successfully deleted; otherwise <c>FALSE</c>.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.WriteCabinetState(Vanara.PInvoke.Shell32.CABINETSTATE@)">
            <summary>
            <para>[</para>
            <para>WriteCabinetState</para>
            <para>
            is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in
            subsequent versions.]
            </para>
            <para>Writes the information contained in a CABINETSTATE structure into the registry.</para>
            </summary>
            <param name="pcs">
            <para>Type: <c>CABINETSTATE*</c></para>
            <para>A pointer to a CABINETSTATE structure that holds the values to be set.</para>
            </param>
            <returns>
            <para>Type: <c>BOOL</c></para>
            <para><c>TRUE</c> if successful; otherwise, <c>FALSE</c>.</para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.CABINETSTATE">
            <summary>
            <para>
            [CABINETSTATE is available for use in the operating systems specified in the Requirements section. It may be altered or
            unavailable in subsequent versions.]
            </para>
            <para>
            Holds the global configuration for Windows Explorer and Windows Internet Explorer. This structure is used in the ReadCabinetState
            and WriteCabinetState functions.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CABINETSTATE.cLength">
            <summary>
            <para>Type: <c>WORD</c></para>
            <para>The size of the structure, in bytes.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CABINETSTATE.nVersion">
            <summary>
            <para>Type: <c>WORD</c></para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CABINETSTATE.fMenuEnumFilter">
            <summary>
            <para>Type: <c>UINT</c></para>
            <para>One or both of the following flags.</para>
            <para>SHCONTF_FOLDERS</para>
            <para>Display folders.</para>
            <para>SHCONTF_NONFOLDERS</para>
            <para>Display non-folder items.</para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.CABINETSTATE.fFullPathTitle">
            <summary>
            <para>Type: <c>BOOL</c></para>
            <para>TRUE</para>
            <para>Display the full path in the title bar.</para>
            <para>FALSE</para>
            <para>Display only the file name in the title bar.</para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.CABINETSTATE.fSaveLocalView">
            <summary>
            <para>Type: <c>BOOL</c></para>
            <para>TRUE</para>
            <para>Remember each folder's view settings.</para>
            <para>FALSE</para>
            <para>Use global settings for all folders.</para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.CABINETSTATE.fNotShell">
            <summary>
            <para>Type: <c>BOOL</c></para>
            <para>Not used.</para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.CABINETSTATE.fSimpleDefault">
            <summary>
            <para>Type: <c>BOOL</c></para>
            <para>Not used.</para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.CABINETSTATE.fDontShowDescBar">
            <summary>
            <para>Type: <c>BOOL</c></para>
            <para>Not used.</para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.CABINETSTATE.fNewWindowMode">
            <summary>
            <para>Type: <c>BOOL</c></para>
            <para>TRUE</para>
            <para>Display in a new window.</para>
            <para>FALSE</para>
            <para>Display in the current window.</para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.CABINETSTATE.fShowCompColor">
            <summary>
            <para>Type: <c>BOOL</c></para>
            <para>TRUE</para>
            <para>Show encrypted or compressed NTFS files in color.</para>
            <para>FALSE</para>
            <para>Do not show encrypted or compressed NTFS files in color.</para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.CABINETSTATE.fDontPrettyNames">
            <summary>
            <para>Type: <c>BOOL</c></para>
            <para>Not used.</para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.CABINETSTATE.fAdminsCreateCommonGroups">
            <summary>
            <para>Type: <c>BOOL</c></para>
            <para>Used when an administrator installs an application that places an icon in the <c>Start</c> menu.</para>
            <para>TRUE</para>
            <para>Add the icon to the <c>Start</c> menu for all users (CSIDL_COMMON_STARTMENU). This is the default value.</para>
            <para>FALSE</para>
            <para>Add the icon to only the current user (CSIDL_STARTMENU).</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.COORD">
            <summary>
            Defines the coordinates of a character cell in a console screen buffer. The origin of the coordinate system (0,0) is at the top,
            left cell of the buffer.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.COORD.X">
            <summary>The horizontal coordinate or column value. The units depend on the function call.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.COORD.Y">
            <summary>The vertical coordinate or row value. The units depend on the function call.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.CSFV">
            <summary>
            <para>Used with the SHCreateShellFolderViewEx function.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CSFV.cbSize">
            <summary>
            <para>Type: <c>UINT</c></para>
            <para>The size of the <c>CSFV</c> structure, in bytes.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CSFV.pshf">
            <summary>
            <para>Type: <c>IShellFolder*</c></para>
            <para>A pointer to the IShellFolder object for which to create the view.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CSFV.psvOuter">
            <summary>
            <para>Type: <c>IShellView*</c></para>
            <para>A pointer to the parent IShellView interface. This parameter can be <c>NULL</c>.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CSFV.pidl">
            <summary>
            <para>Type: <c>PCIDLIST_ABSOLUTE</c></para>
            <para>Ignored.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CSFV.lEvents">
            <summary>
            <para>Type: <c>LONG</c></para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CSFV.pfnCallback">
            <summary>
            <para>Type: <c>LPFNVIEWCALLBACK</c></para>
            <para>
            A pointer to the LPFNVIEWCALLBACK function used by this folder view to handle callback messages. This parameter can be <c>NULL</c>.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CSFV.fvm">
            <summary>
            <para>Type: <c>FOLDERVIEWMODE</c></para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.DATABLOCKHEADER">
            <summary>Serves as the header for some of the extra data structures used by IShellLinkDataList.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DATABLOCKHEADER.cbSize">
            <summary>The size of the extra data block.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DATABLOCKHEADER.dwSignature">
            <summary>A signature that identifies the type of data block that follows the header.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.DEFCONTEXTMENU">
            <summary>Contains context menu information used by SHCreateDefaultContextMenu.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DEFCONTEXTMENU.hwnd">
            <summary>A handle to the context menu. Set this member to the handle returned from CreateMenu.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DEFCONTEXTMENU.pcmcb">
            <summary>
            A pointer to the IContextMenuCB interface supported by the callback object. This value is optional and can be NULL.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DEFCONTEXTMENU.pidlFolder">
            <summary>
            The PIDL of the folder that contains the selected file object(s) or the folder of the context menu if no file objects are
            selected. This value is optional and can be NULL, in which case the PIDL is computed from the psf member.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DEFCONTEXTMENU.psf">
            <summary>
            A pointer to the IShellFolder interface of the folder object that contains the selected file objects, or the folder that
            contains the context menu if no file objects are selected.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DEFCONTEXTMENU.cidl">
            <summary>The count of items in member apidl.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DEFCONTEXTMENU.apidl">
            <summary>
            A pointer to a constant array of ITEMIDLIST structures. Each entry in the array describes a child item to which the context
            menu applies, for instance, a selected file the user wants to Open.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DEFCONTEXTMENU.punkAssociationInfo">
            <summary>
            A pointer to the IQueryAssociations interface on the object from which to load extensions. This parameter is optional and
            thus can be NULL. If this value is NULL and members aKeys and cKeys are also NULL (see Remarks), punkAssociationInfo is
            computed from the apidl member and cidl via a request for IQueryAssociations through IShellFolder::GetUIObjectOf. If
            IShellFolder::GetUIObjectOf returns E_NOTIMPL, a default implementation is provided based on the SFGAO_FOLDER and
            SFGAO_FILESYSTEM attributes returned from IShellFolder::GetAttributesOf.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DEFCONTEXTMENU.cKeys">
            <summary>
            The count of items in member aKeys. This value can be zero. If the value is zero, the extensions are loaded based on the
            object that supports interface IQueryAssociations as specified by member punkAssociationInfo. If the value is non-NULL, the
            extensions are loaded based only on member aKeys and not member punkAssociationInfo. <note>Note The maximum number of keys is
            16. Callers must enforce this limit as the API does not. Failing to do so can result in memory corruption.</note>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DEFCONTEXTMENU.aKeys">
            <summary>
            A pointer to an HKEY that specifies the registry key from which to load extensions. This parameter is optional and can be
            NULL. If the value is NULL, the extensions are loaded based on the object that supports interface IQueryAssociations as
            specified in punkAssociationInfo.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.EXP_DARWIN_LINK">
            <summary>Holds an extra data block used by IShellLinkDataList. It holds the link's Windows Installer ID.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.EXP_DARWIN_LINK.dbh">
            <summary>
            DATABLOCK_HEADER structure stating the size and signature of the EXP_DARWIN_LINK structure. The following is the only
            recognized signature value: EXP_DARWIN_ID_SIG
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.EXP_DARWIN_LINK.szDarwinID">
            <summary>The link's ID in the form of an ANSI string.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.EXP_DARWIN_LINK.szwDarwinID">
            <summary>The link's ID in the form of an Unicode string.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.EXP_SPECIAL_FOLDER">
            <summary>Holds an extra data block used by IShellLinkDataList. It holds special folder information.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.EXP_SPECIAL_FOLDER.cbSize">
            <summary>The size of the EXP_SPECIAL_FOLDER structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.EXP_SPECIAL_FOLDER.dwSignature">
            <summary>The structure's signature. It should be set to EXP_SPECIAL_FOLDER_SIG.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.EXP_SPECIAL_FOLDER.idSpecialFolder">
            <summary>The ID of the special folder that the link points into.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.EXP_SPECIAL_FOLDER.cbOffset">
            <summary>The offset into the saved PIDL.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.EXP_SZ_LINK">
            <summary>Holds an extra data block used by IShellLinkDataList. It holds expandable environment strings for the icon or target.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.EXP_SZ_LINK.cbSize">
            <summary>The size of the EXP_SZ_LINK structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.EXP_SZ_LINK.dwSignature">
            <summary>
            The structure's signature. It can have one of the following values: EXP_SZ_LINK_SIG = Contains the link's target path;
            EXP_SZ_ICON_SIG = Contains the links icon path.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.EXP_SZ_LINK.szTarget">
            <summary>The null-terminated ANSI string with the path of the target or icon.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.EXP_SZ_LINK.swzTarget">
            <summary>The null-terminated Unicode string with the path of the target or icon.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.HLOCK">
            <summary>Provides a handle to a notification lock.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.HLOCK.#ctor(System.IntPtr)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Shell32.HLOCK"/> struct.</summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.HLOCK.NULL">
            <summary>Returns an invalid handle by instantiating a <see cref="T:Vanara.PInvoke.Shell32.HLOCK"/> object with <see cref="F:System.IntPtr.Zero"/>.</summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.HLOCK.IsNull">
            <summary>Gets a value indicating whether this instance is a null handle.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.HLOCK.op_Explicit(Vanara.PInvoke.Shell32.HLOCK)~System.IntPtr">
            <summary>Performs an explicit conversion from <see cref="T:Vanara.PInvoke.Shell32.HLOCK"/> to <see cref="T:System.IntPtr"/>.</summary>
            <param name="h">The handle.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.HLOCK.op_Implicit(System.IntPtr)~Vanara.PInvoke.Shell32.HLOCK">
            <summary>Performs an implicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:Vanara.PInvoke.Shell32.HLOCK"/>.</summary>
            <param name="h">The pointer to a handle.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.HLOCK.op_Inequality(Vanara.PInvoke.Shell32.HLOCK,Vanara.PInvoke.Shell32.HLOCK)">
            <summary>Implements the operator !=.</summary>
            <param name="h1">The first handle.</param>
            <param name="h2">The second handle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.HLOCK.op_Equality(Vanara.PInvoke.Shell32.HLOCK,Vanara.PInvoke.Shell32.HLOCK)">
            <summary>Implements the operator ==.</summary>
            <param name="h1">The first handle.</param>
            <param name="h2">The second handle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.HLOCK.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.HLOCK.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.HLOCK.DangerousGetHandle">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.HPIF">
            <summary>Provides a handle to a .pif file.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.HPIF.#ctor(System.IntPtr)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Shell32.HPIF"/> struct.</summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.HPIF.NULL">
            <summary>Returns an invalid handle by instantiating a <see cref="T:Vanara.PInvoke.Shell32.HPIF"/> object with <see cref="F:System.IntPtr.Zero"/>.</summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.HPIF.IsNull">
            <summary>Gets a value indicating whether this instance is a null handle.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.HPIF.op_Explicit(Vanara.PInvoke.Shell32.HPIF)~System.IntPtr">
            <summary>Performs an explicit conversion from <see cref="T:Vanara.PInvoke.Shell32.HPIF"/> to <see cref="T:System.IntPtr"/>.</summary>
            <param name="h">The handle.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.HPIF.op_Implicit(System.IntPtr)~Vanara.PInvoke.Shell32.HPIF">
            <summary>Performs an implicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:Vanara.PInvoke.Shell32.HPIF"/>.</summary>
            <param name="h">The pointer to a handle.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.HPIF.op_Inequality(Vanara.PInvoke.Shell32.HPIF,Vanara.PInvoke.Shell32.HPIF)">
            <summary>Implements the operator !=.</summary>
            <param name="h1">The first handle.</param>
            <param name="h2">The second handle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.HPIF.op_Equality(Vanara.PInvoke.Shell32.HPIF,Vanara.PInvoke.Shell32.HPIF)">
            <summary>Implements the operator ==.</summary>
            <param name="h1">The first handle.</param>
            <param name="h2">The second handle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.HPIF.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.HPIF.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.HPIF.DangerousGetHandle">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.HPSXA">
            <summary>Provides a handle to a property sheet array.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.HPSXA.#ctor(System.IntPtr)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Shell32.HPSXA"/> struct.</summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.HPSXA.NULL">
            <summary>Returns an invalid handle by instantiating a <see cref="T:Vanara.PInvoke.Shell32.HPSXA"/> object with <see cref="F:System.IntPtr.Zero"/>.</summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.HPSXA.IsNull">
            <summary>Gets a value indicating whether this instance is a null handle.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.HPSXA.op_Explicit(Vanara.PInvoke.Shell32.HPSXA)~System.IntPtr">
            <summary>Performs an explicit conversion from <see cref="T:Vanara.PInvoke.Shell32.HPSXA"/> to <see cref="T:System.IntPtr"/>.</summary>
            <param name="h">The handle.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.HPSXA.op_Implicit(System.IntPtr)~Vanara.PInvoke.Shell32.HPSXA">
            <summary>Performs an implicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:Vanara.PInvoke.Shell32.HPSXA"/>.</summary>
            <param name="h">The pointer to a handle.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.HPSXA.op_Inequality(Vanara.PInvoke.Shell32.HPSXA,Vanara.PInvoke.Shell32.HPSXA)">
            <summary>Implements the operator !=.</summary>
            <param name="h1">The first handle.</param>
            <param name="h2">The second handle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.HPSXA.op_Equality(Vanara.PInvoke.Shell32.HPSXA,Vanara.PInvoke.Shell32.HPSXA)">
            <summary>Implements the operator ==.</summary>
            <param name="h1">The first handle.</param>
            <param name="h2">The second handle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.HPSXA.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.HPSXA.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.HPSXA.DangerousGetHandle">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.NT_CONSOLE_PROPS">
            <summary>Holds an extra data block used by IShellLinkDataList. It holds console properties.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NT_CONSOLE_PROPS.dbh">
            <summary>
            The DATABLOCK_HEADER structure with the NT_CONSOLE_PROPS structure's size and signature. The signature for an
            NT_CONSOLE_PROPS structure is NT_CONSOLE_PROPS_SIG.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NT_CONSOLE_PROPS.wFillAttribute">
            <summary>Fill attribute for the console.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NT_CONSOLE_PROPS.wPopupFillAttribute">
            <summary>Fill attribute for console pop-ups.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NT_CONSOLE_PROPS.dwScreenBufferSize">
            <summary>A COORD structure with the console's screen buffer size.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NT_CONSOLE_PROPS.dwWindowSize">
            <summary>A COORD structure with the console's window size.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NT_CONSOLE_PROPS.dwWindowOrigin">
            <summary>A COORD structure with the console's window origin.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NT_CONSOLE_PROPS.nFont">
            <summary>The font.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NT_CONSOLE_PROPS.nInputBufferSize">
            <summary>The input buffer size.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NT_CONSOLE_PROPS.dwFontSize">
            <summary>A COORD structure with the font size.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NT_CONSOLE_PROPS.uFontFamily">
            <summary>The font family/</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NT_CONSOLE_PROPS.uFontWeight">
            <summary>The font weight.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NT_CONSOLE_PROPS.FaceName">
            <summary>A character array that contains the font's face name.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NT_CONSOLE_PROPS.uCursorSize">
            <summary>The cursor size.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NT_CONSOLE_PROPS.bFullScreen">
            <summary>A boolean value that is set to TRUE if the console is in full-screen mode, or FALSE otherwise.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NT_CONSOLE_PROPS.bQuickEdit">
            <summary>A boolean value that is set to TRUE if the console is in quick-edit mode, or FALSE otherwise.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NT_CONSOLE_PROPS.bInsertMode">
            <summary>A boolean value that is set to TRUE if the console is in insert mode, or FALSE otherwise.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NT_CONSOLE_PROPS.bAutoPosition">
            <summary>A boolean value that is set to TRUE if the console is in auto-position mode, or FALSE otherwise.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NT_CONSOLE_PROPS.uHistoryBufferSize">
            <summary>The size of the history buffer.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NT_CONSOLE_PROPS.uNumberOfHistoryBuffers">
            <summary>The number of history buffers.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NT_CONSOLE_PROPS.bHistoryNoDup">
            <summary>A boolean value that is set to TRUE if old duplicate history lists should be discarded, or FALSE otherwise.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NT_CONSOLE_PROPS.ColorTable">
            <summary>An array of COLORREF values with the console's color settings.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.NT_FE_CONSOLE_PROPS">
            <summary>Holds an extra data block used by IShellLinkDataList. It holds the console's code page.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NT_FE_CONSOLE_PROPS.dbh">
            <summary>
            The DATABLOCK_HEADER structure with the NT_FE_CONSOLE_PROPS structure's size and signature. The signature for an
            NT_FE_CONSOLE_PROPS structure is NT_FE_CONSOLE_PROPS_SIG.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NT_FE_CONSOLE_PROPS.uCodePage">
            <summary>The console's code page.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.OPENASINFO">
            <summary>
            <para>Stores information for the SHOpenWithDialog function.</para>
            </summary>
            <remarks>
            <para>
            Starting in Windows 10, the <c>OAIF_ALLOW_REGISTRATION</c>, <c>OAIF_FORCE_REGISTRATION</c>, and <c>OAIF_HIDE_REGISTRATION</c>
            flags will be ignored by SHOpenWithDialog. The <c>Open With</c> dialog box can no longer be used to change the default program
            used to open a file extension. You can only use <c>SHOpenWithDialog</c> to open a single file.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.OPENASINFO.pcszFile">
            <summary>
            <para>Type: <c>LPCWSTR</c></para>
            <para>A pointer to the file name.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.OPENASINFO.pcszClass">
            <summary>
            <para>Type: <c>LPCWSTR</c></para>
            <para>A pointer to the file type description. Set this parameter to <c>NULL</c> to use the file name extension of <c>pcszFile</c>.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.OPENASINFO.oaifInFlags">
            <summary>
            <para>Type: <c>OPEN_AS_INFO_FLAGS</c></para>
            <para>The characteristics of the SHOpenWithDialog dialog box. One or more of the following values.</para>
            <para>OAIF_ALLOW_REGISTRATION (0x00000001)</para>
            <para>Enable the "always use this program" checkbox. If not passed, it will be disabled.</para>
            <para>OAIF_REGISTER_EXT (0x00000002)</para>
            <para>Do the registration after the user hits the <c>OK</c> button.</para>
            <para>OAIF_EXEC (0x00000004)</para>
            <para>Execute file after registering.</para>
            <para>OAIF_FORCE_REGISTRATION (0x00000008)</para>
            <para>
            Force the <c>Always use this program</c> checkbox to be checked. Typically, you won't use the OAIF_ALLOW_REGISTRATION flag
            when you pass this value.
            </para>
            <para>OAIF_HIDE_REGISTRATION (0x00000020)</para>
            <para>
            <c>Introduced in Windows Vista</c>. Hide the <c>Always use this program</c> checkbox. If this flag is specified, the
            OAIF_ALLOW_REGISTRATION and OAIF_FORCE_REGISTRATION flags will be ignored.
            </para>
            <para>OAIF_URL_PROTOCOL (0x00000040)</para>
            <para>
            <c>Introduced in Windows Vista</c>. The value for the extension that is passed is actually a protocol, so the <c>Open
            With</c> dialog box should show applications that are registered as capable of handling that protocol.
            </para>
            <para>OAIF_FILE_IS_URI (0x00000080)</para>
            <para><c>Introduced in Windows 8</c>. The location pointed to by the parameter is given as a URI.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.PROPPRG">
            <summary>
            <para>This structure contains information from a .pif file. It is used by PifMgr_GetProperties.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.PROPPRG.flPrg">
            <summary>
            <para>Type: <c>WORD</c></para>
            <para>Flags that describe how the program will run.</para>
            <para>PRG_DEFAULT</para>
            <para>Use the default options.</para>
            <para>PRG_CLOSEONEXIT</para>
            <para>Close the application on exit.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.PROPPRG.flPrgInit">
            <summary>
            <para>Type: <c>WORD</c></para>
            <para>Flags that specify the initial conditions for the application.</para>
            <para>PRGINIT_DEFAULT</para>
            <para>Use the default options.</para>
            <para>PRGINIT_MINIMIZED</para>
            <para>The application should be minimized.</para>
            <para>PRGINIT_MAXIMIZED</para>
            <para>The application should be maximized.</para>
            <para>PRGINIT_REALMODE</para>
            <para>The application should run in real mode.</para>
            <para>PRGINIT_REALMODESILENT</para>
            <para>The application should run in real mode without being prompted.</para>
            <para>PRGINIT_AMBIGUOUSPIF</para>
            <para>The data is ambiguous.</para>
            <para>PRGINIT_NOPIF</para>
            <para>No .pif file was found.</para>
            <para>PRGINIT_DEFAULTPIF</para>
            <para>A default .pif was found.</para>
            <para>PRGINIT_INFSETTINGS</para>
            <para>A .inf file was found.</para>
            <para>PRGINIT_INHIBITPIF</para>
            <para>The .inf file indicates that a .pif file should not be created.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.PROPPRG.achTitle">
            <summary>
            <para>Type: <c>__wchar_t</c></para>
            <para>A null-terminated string that contains the title.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.PROPPRG.achCmdLine">
            <summary>
            <para>Type: <c>__wchar_t</c></para>
            <para>A null-terminated string that contains the command line, including arguments.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.PROPPRG.achWorkDir">
            <summary>
            <para>Type: <c>__wchar_t</c></para>
            <para>A null-terminated string that contains the working directory.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.PROPPRG.wHotKey">
            <summary>
            <para>Type: <c>WORD</c></para>
            <para>The key code of the .pif file's hotkey.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.PROPPRG.achIconFile">
            <summary>
            <para>Type: <c>__wchar_t</c></para>
            <para>A null-terminated string that contains the name of the file that contains the icon.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.PROPPRG.wIconIndex">
            <summary>
            <para>Type: <c>WORD</c></para>
            <para>The index of the icon in the file specified by <c>achIconFile</c>.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.PROPPRG.dwEnhModeFlags">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>Reserved.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.PROPPRG.dwRealModeFlags">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>Flags that specify the real mode options.</para>
            <para>RMOPT_MOUSE</para>
            <para>Requires a real-mode mouse.</para>
            <para>RMOPT_EMS</para>
            <para>Requires expanded memory.</para>
            <para>RMOPT_CDROM</para>
            <para>Requires CD-ROM support.</para>
            <para>RMOPT_NETWORK</para>
            <para>Requires network support.</para>
            <para>RMOPT_DISKLOCK</para>
            <para>Requires disk locking.</para>
            <para>RMOPT_PRIVATECFG</para>
            <para>Use a private config.sys or autoexec.bat file.</para>
            <para>RMOPT_VESA</para>
            <para>Requires a VESA driver.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.PROPPRG.achOtherFile">
            <summary>
            <para>Type: <c>__wchar_t</c></para>
            <para>A null-terminated string that contains the name of the "other" file in the directory.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.PROPPRG.achPIFFile">
            <summary>
            <para>Type: <c>__wchar_t</c></para>
            <para>A null-terminated string that contains the name of the .pif file in the directory.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.SFV_CREATE">
            <summary>This structure is used with the SHCreateShellFolderView function.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SFV_CREATE.cbSize">
            <summary>The size of the SFV_CREATE structure, in bytes.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SFV_CREATE.pshf">
            <summary>The IShellFolder interface of the folder for which to create the view.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SFV_CREATE.psvOuter">
            <summary>
            A pointer to the parent IShellView interface. This parameter may be NULL. This parameter is used only when the view created
            by SHCreateShellFolderView is hosted in a common dialog box.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SFV_CREATE.psfvcb">
            <summary>
            A pointer to the IShellFolderViewCB interface that handles the view's callbacks when various events occur. This parameter may
            be NULL.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.SHARDAPPIDINFO">
            <summary>
            Contains data used by SHAddToRecentDocs to identify both an itemâin this case as an IShellItemâand the process that it is
            associated with.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHARDAPPIDINFO.psi">
            <summary>
            <para>Type: <c>IShellItem*</c></para>
            <para>Pointer to an IShellItem object that represents the object in the Shell namespace.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHARDAPPIDINFO.pszAppID">
            <summary>
            <para>Type: <c>PCWSTR</c></para>
            <para>The application-defined AppUserModelID associated with the item.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.SHARDAPPIDINFOIDLIST">
            <summary>
            Contains data used by SHAddToRecentDocs to identify both an itemâin this case by an absolute pointer to an item identifier list
            (PIDL)âand the process that it is associated with.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHARDAPPIDINFOIDLIST.pszAppID">
            <summary>
            <para>Type: <c>PCWSTR</c></para>
            <para>The application-defined AppUserModelID associated with the item.</para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.SHARDAPPIDINFOIDLIST.pidl">
            <summary>
            <para>Type: <c>PCIDLIST_ABSOLUTE</c></para>
            <para>An absolute PIDL that gives the full path of the item in the Shell namespace.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.SHARDAPPIDINFOLINK">
            <summary>
            Contains data used by SHAddToRecentDocs to identify both an item, in this case through an IShellLink, and the process that it is
            associated with.
            </summary>
            <remarks>
            <para>The IShellLink instance pointed to by <c>psl</c> must provide the following:</para>
            <list type="bullet">
            <item>
            <description>
            Either a pointer to an item identifier list (PIDL) (IShellLink::SetIDList) or the target path (IShellLink::SetPath or IShellLink::SetRelativePath)
            </description>
            </item>
            <item>
            <description>Command-line arguments (IShellLink::SetArguments)</description>
            </item>
            <item>
            <description>Icon location (IShellLink::SetIconLocation)</description>
            </item>
            </list>
            <para>
            The display name must be set through the item's System.Title (PKEY_Title) property. The property can directly hold the display
            name or it can be an indirect string representation, such as "@shell32.dll,-1324", to use a stored string. An indirect string
            enables the item name to be displayed in the user's selected language.
            </para>
            <para>
            Optionally, the description field (IShellLink::SetDescription) can be set to provide a custom tooltip for the item in the Jump List.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHARDAPPIDINFOLINK.psl">
            <summary>
            <para>Type: <c>IShellLink*</c></para>
            <para>
            Pointer to an IShellLink instance that, when launched, opens the item. The shortcut is not added by SHAddToRecentDocs to the
            user's <c>Recent</c> folder (CSIDL_RECENT, FOLDERID_Recent), but it is added to the <c>Recent</c> category in the specified
            application's Jump List.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHARDAPPIDINFOLINK.pszAppID">
            <summary>
            <para>Type: <c>PCWSTR</c></para>
            <para>The application-defined AppUserModelID associated with the item.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.SHChangeNotifyEntry">
            <summary>
            Contains and receives information for change notifications. This structure is used with the SHChangeNotifyRegister function and
            the SFVM_QUERYFSNOTIFY notification.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHChangeNotifyEntry.pidl">
            <summary>
            <para>Type: <c>PCIDLIST_ABSOLUTE</c></para>
            <para>PIDL for which to receive notifications.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHChangeNotifyEntry.fRecursive">
            <summary>
            <para>Type: <c>BOOL</c></para>
            <para>
            A flag indicating whether to post notifications for children of this PIDL. For example, if the PIDL points to a folder, then
            file notifications would come from the folder's children if this flag was <c>TRUE</c>.
            </para>
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHChangeNotifyEntry.#ctor(System.IntPtr,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Shell32.SHChangeNotifyEntry"/> struct.</summary>
            <param name="pidl">PIDL for which to receive notifications.</param>
            <param name="recursive">A flag indicating whether to post notifications for children of this PIDL.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHChangeNotifyEntry.#ctor(Vanara.PInvoke.Shell32.PIDL,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Shell32.SHChangeNotifyEntry"/> struct.</summary>
            <param name="pidl">PIDL for which to receive notifications.</param>
            <param name="recursive">A flag indicating whether to post notifications for children of this PIDL.</param>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.SHDESCRIPTIONID">
            <summary>Receives item data in response to a call to SHGetDataFromIDList.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHDESCRIPTIONID.dwDescriptionId">
            <summary>Receives a value that determines what type the item is.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHDESCRIPTIONID.clsid">
            <summary>Receives the CLSID of the object to which the item belongs.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.SHELLFLAGSTATE">
            <summary>
            <para>Contains a set of flags that indicate the current Shell settings. This structure is used with the SHGetSettings function.</para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.SHELLFLAGSTATE.fShowAllObjects">
            <summary>
            <para>Type: <c>BOOL</c></para>
            <para><c>TRUE</c> to show all objects, including hidden files and folders. <c>FALSE</c> to hide hidden files and folders.</para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.SHELLFLAGSTATE.fShowExtensions">
            <summary>
            <para>Type: <c>BOOL</c></para>
            <para><c>TRUE</c> to show file name extensions, <c>FALSE</c> to hide them.</para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.SHELLFLAGSTATE.fNoConfirmRecycle">
            <summary>
            <para>Type: <c>BOOL</c></para>
            <para>
            <c>TRUE</c> to show no confirmation dialog box when deleting items to the Recycle Bin, <c>FALSE</c> to display the
            confirmation dialog box.
            </para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.SHELLFLAGSTATE.fShowSysFiles">
            <summary>
            <para>Type: <c>BOOL</c></para>
            <para><c>TRUE</c> to show system files, <c>FALSE</c> to hide them.</para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.SHELLFLAGSTATE.fShowCompColor">
            <summary>
            <para>Type: <c>BOOL</c></para>
            <para><c>TRUE</c> to show encrypted or compressed NTFS files in color.</para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.SHELLFLAGSTATE.fDoubleClickInWebView">
            <summary>
            <para>Type: <c>BOOL</c></para>
            <para><c>TRUE</c> to require a double-click to open an item when in web view.</para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.SHELLFLAGSTATE.fDesktopHTML">
            <summary>
            <para>Type: <c>BOOL</c></para>
            <para><c>TRUE</c> to use Active Desktop, <c>FALSE</c> otherwise.</para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.SHELLFLAGSTATE.fWin95Classic">
            <summary>
            <para>Type: <c>BOOL</c></para>
            <para><c>TRUE</c> to enforce Windows 95 Shell behavior and restrictions.</para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.SHELLFLAGSTATE.fDontPrettyPath">
            <summary>
            <para>Type: <c>BOOL</c></para>
            <para><c>TRUE</c> to prevent the conversion of the path to all lowercase characters.</para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.SHELLFLAGSTATE.fShowAttribCol">
            <summary>
            <para>Type: <c>BOOL</c></para>
            <para>Not used.</para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.SHELLFLAGSTATE.fMapNetDrvBtn">
            <summary>
            <para>Type: <c>BOOL</c></para>
            <para><c>TRUE</c> to display a <c>Map Network Drive</c> button.</para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.SHELLFLAGSTATE.fShowInfoTip">
            <summary>
            <para>Type: <c>BOOL</c></para>
            <para><c>TRUE</c> to show a pop-up description for folders and files.</para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.SHELLFLAGSTATE.fHideIcons">
            <summary>
            <para>Type: <c>BOOL</c></para>
            <para><c>TRUE</c> to hide desktop icons, <c>FALSE</c> to show them.</para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.SHELLFLAGSTATE.fAutoCheckSelect">
            <summary>
            <para>Type: <c>BOOL</c></para>
            <para>
            <c>Introduced in Windows Vista</c>. <c>TRUE</c> to use the Windows Vista-style checkbox folder views, <c>FALSE</c> to use the
            classic views.
            </para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.SHELLFLAGSTATE.fIconsOnly">
            <summary>
            <para>Type: <c>BOOL</c></para>
            <para>
            <c>Introduced in Windows Vista</c>. <c>TRUE</c> to show generic icons only, <c>FALSE</c> to show thumbnail-style icons in folders.
            </para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.SHELLSTATE">
            <summary>Contains settings for the Shell's state. This structure is used with the <c>SHGetSetSettings</c> function.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHELLSTATE.dwWin95Unused">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>Not used.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHELLSTATE.uWin95Unused">
            <summary>
            <para>Type: <c>UINT</c></para>
            <para>Not used.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHELLSTATE.lParamSort">
            <summary>
            <para>Type: <c>LONG</c></para>
            <para>The column to sort by.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHELLSTATE.iSortDirection">
            <summary>
            <para>Type: <c>int</c></para>
            <para>
            Alphabetical sort direction for the column specified by <c>lParamSort</c>. Use 1 for an ascending sort, -1 for a descending sort.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHELLSTATE.version">
            <summary>
            <para>Type: <c>UINT</c></para>
            <para>Not used.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHELLSTATE.uNotUsed">
            <summary>
            <para>Type: <c>UINT</c></para>
            <para>Not used.</para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.SHELLSTATE.fShowAllObjects">
            <summary>
            <para>Type: <c>BOOL</c></para>
            <para><c>TRUE</c> to show all objects, including hidden files and folders. <c>FALSE</c> to hide hidden files and folders.</para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.SHELLSTATE.fShowExtensions">
            <summary>
            <para>Type: <c>BOOL</c></para>
            <para><c>TRUE</c> to show file name extensions, <c>FALSE</c> to hide them.</para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.SHELLSTATE.fNoConfirmRecycle">
            <summary>
            <para>Type: <c>BOOL</c></para>
            <para>
            <c>TRUE</c> to show no confirmation dialog box when deleting items to the Recycle Bin, <c>FALSE</c> to display the
            confirmation dialog box.
            </para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.SHELLSTATE.fShowSysFiles">
            <summary>
            <para>Type: <c>BOOL</c></para>
            <para><c>TRUE</c> to show system files, <c>FALSE</c> to hide them.</para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.SHELLSTATE.fShowCompColor">
            <summary>
            <para>Type: <c>BOOL</c></para>
            <para><c>TRUE</c> to show encrypted or compressed NTFS files in color.</para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.SHELLSTATE.fDoubleClickInWebView">
            <summary>
            <para>Type: <c>BOOL</c></para>
            <para><c>TRUE</c> to require a double-click to open an item when in web view.</para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.SHELLSTATE.fDesktopHTML">
            <summary>
            <para>Type: <c>BOOL</c></para>
            <para><c>TRUE</c> to use Active Desktop, <c>FALSE</c> otherwise.</para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.SHELLSTATE.fWin95Classic">
            <summary>
            <para>Type: <c>BOOL</c></para>
            <para><c>TRUE</c> to enforce Windows 95 Shell behavior and restrictions.</para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.SHELLSTATE.fDontPrettyPath">
            <summary>
            <para>Type: <c>BOOL</c></para>
            <para><c>TRUE</c> to prevent the conversion of the path to all lowercase characters.</para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.SHELLSTATE.fShowAttribCol">
            <summary>
            <para>Type: <c>BOOL</c></para>
            <para>Not used.</para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.SHELLSTATE.fMapNetDrvBtn">
            <summary>
            <para>Type: <c>BOOL</c></para>
            <para><c>TRUE</c> to display a <c>Map Network Drive</c> button.</para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.SHELLSTATE.fShowInfoTip">
            <summary>
            <para>Type: <c>BOOL</c></para>
            <para><c>TRUE</c> to show a pop-up description for folders and files.</para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.SHELLSTATE.fHideIcons">
            <summary>
            <para>Type: <c>BOOL</c></para>
            <para><c>TRUE</c> to hide desktop icons, <c>FALSE</c> to show them.</para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.SHELLSTATE.fWebView">
            <summary>
            <para>Type: <c>BOOL</c></para>
            <para><c>TRUE</c> to display as a web view.</para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.SHELLSTATE.fFilter">
            <summary>
            <para>Type: <c>BOOL</c></para>
            <para>Not used.</para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.SHELLSTATE.fShowSuperHidden">
            <summary>
            <para>Type: <c>BOOL</c></para>
            <para><c>TRUE</c> to show operating system files.</para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.SHELLSTATE.fNoNetCrawling">
            <summary>
            <para>Type: <c>BOOL</c></para>
            <para><c>TRUE</c> to disable automatic searching for network folders and printers.</para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.SHELLSTATE.fSepProcess">
            <summary>
            <para>Type: <c>BOOL</c></para>
            <para><c>TRUE</c> to launch folder windows in separate processes, <c>FALSE</c> to launch in the same process.</para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.SHELLSTATE.fStartPanelOn">
            <summary>
            <para>Type: <c>BOOL</c></para>
            <para>
            <c>Windows XP only</c>. <c>TRUE</c> to use the Windows XP-style Start menu, <c>FALSE</c> to use the classic Start menu.
            </para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.SHELLSTATE.fShowStartPage">
            <summary>
            <para>Type: <c>BOOL</c></para>
            <para>Not used.</para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.SHELLSTATE.fAutoCheckSelect">
            <summary>
            <para>Type: <c>BOOL</c></para>
            <para>
            <c>Introduced in Windows Vista</c>. <c>TRUE</c> to use the Windows Vista-style checkbox folder views, <c>FALSE</c> to use the
            classic views.
            </para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.SHELLSTATE.fIconsOnly">
            <summary>
            <para>Type: <c>BOOL</c></para>
            <para>
            <c>Introduced in Windows Vista</c>. <c>TRUE</c> to show generic icons only, <c>FALSE</c> to show thumbnail-style icons in folders.
            </para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.SHELLSTATE.fShowTypeOverlay">
            <summary>
            <para>Type: <c>BOOL</c></para>
            <para>
            <c>Introduced in Windows Vista</c>. <c>TRUE</c> indicates a thumbnail should show the application that would be invoked when
            opening the item, <c>FALSE</c> indicates that no application will be shown.
            </para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.SHELLSTATE.fShowStatusBar">
            <summary>
            <para>Type: <c>BOOL</c></para>
            <para><c>Introduced in Windows 8</c>. <c>TRUE</c> to show the status bar; otherwise, <c>FALSE</c>.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.SHFOLDERCUSTOMSETTINGS">
            <summary>
            <para>Holds custom folder settings. This structure is used with the SHGetSetFolderCustomSettings function.</para>
            </summary>
            <remarks>
            <para>
            In Windows XP Service Pack 2 (SP2) and earlier versions, this structure supported both ANSI and Unicode strings. In Windows Vista
            and later versions, only Unicode strings are supported.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHFOLDERCUSTOMSETTINGS.dwSize">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The size of the structure, in bytes.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHFOLDERCUSTOMSETTINGS.dwMask">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>
            A <c>DWORD</c> value specifying which folder attributes to read or write from this structure. Use one or more of the
            following values to indicate which structure members are valid:
            </para>
            <para>FCSM_VIEWID</para>
            <para><c>Deprecated</c>. <c>pvid</c> contains the folder's GUID.</para>
            <para>FCSM_WEBVIEWTEMPLATE</para>
            <para>
            <c>Deprecated</c>. <c>pszWebViewTemplate</c> contains a pointer to a buffer containing the path to the folder's WebView template.
            </para>
            <para>FCSM_INFOTIP</para>
            <para><c>pszInfoTip</c> contains a pointer to a buffer containing the folder's info tip.</para>
            <para>FCSM_CLSID</para>
            <para><c>pclsid</c> contains the folder's CLSID.</para>
            <para>FCSM_ICONFILE</para>
            <para><c>pszIconFile</c> contains the path to the file containing the folder's icon.</para>
            <para>FCSM_LOGO</para>
            <para><c>pszLogo</c> contains the path to the file containing the folder's thumbnail icon.</para>
            <para>FCSM_FLAGS</para>
            <para>Not used.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHFOLDERCUSTOMSETTINGS.pvid">
            <summary>
            <para>Type: <c>SHELLVIEWID*</c></para>
            <para>The folder's GUID.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHFOLDERCUSTOMSETTINGS.pszWebViewTemplate">
            <summary>
            <para>Type: <c>LPTSTR</c></para>
            <para>A pointer to a null-terminated string containing the path to the folder's WebView template.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHFOLDERCUSTOMSETTINGS.cchWebViewTemplate">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>
            If the SHGetSetFolderCustomSettings parameter is <c>FCS_READ</c>, this is the size of the <c>pszWebViewTemplate</c> buffer,
            in characters. If not, this is the number of characters to write from that buffer. Set this parameter to 0 to write the
            entire string.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHFOLDERCUSTOMSETTINGS.pszWebViewTemplateVersion">
            <summary>
            <para>Type: <c>LPTSTR</c></para>
            <para>A pointer to a null-terminated buffer containing the WebView template version.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHFOLDERCUSTOMSETTINGS.pszInfoTip">
            <summary>
            <para>Type: <c>LPTSTR</c></para>
            <para>A pointer to a null-terminated buffer containing the text of the folder's infotip.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHFOLDERCUSTOMSETTINGS.cchInfoTip">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>
            If the SHGetSetFolderCustomSettings parameter is <c>FCS_READ</c>, this is the size of the <c>pszInfoTip</c> buffer, in
            characters. If not, this is the number of characters to write from that buffer. Set this parameter to 0 to write the entire string.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHFOLDERCUSTOMSETTINGS.pclsid">
            <summary>
            <para>Type: <c>CLSID*</c></para>
            <para>
            A pointer to a CLSID used to identify the folder in the Windows registry. Further folder information is stored in the
            registry under that CLSID entry.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHFOLDERCUSTOMSETTINGS.dwFlags">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>Not used.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHFOLDERCUSTOMSETTINGS.pszIconFile">
            <summary>
            <para>Type: <c>LPTSTR</c></para>
            <para>A pointer to a null-terminated buffer containing the path to file containing the folder's icon.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHFOLDERCUSTOMSETTINGS.cchIconFile">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>
            If the SHGetSetFolderCustomSettings parameter is <c>FCS_READ</c>, this is the size of the <c>pszIconFile</c> buffer, in
            characters. If not, this is the number of characters to write from that buffer. Set this parameter to 0 to write the entire string.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHFOLDERCUSTOMSETTINGS.iIconIndex">
            <summary>
            <para>Type: <c>int</c></para>
            <para>The index of the icon within the file named in <c>pszIconFile</c>.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHFOLDERCUSTOMSETTINGS.pszLogo">
            <summary>
            <para>Type: <c>LPTSTR</c></para>
            <para>
            A pointer to a null-terminated buffer containing the path to the file containing the folder's logo image. This is the image
            used in thumbnail views.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHFOLDERCUSTOMSETTINGS.cchLogo">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>
            If the SHGetSetFolderCustomSettings parameter is <c>FCS_READ</c>, this is the size of the <c>pszLogo</c> buffer, in
            characters. If not, this is the number of characters to write from that buffer. Set this parameter to 0 to write the entire string.
            </para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.SafeHPIF">
            <summary>Provides a <see cref="T:System.Runtime.InteropServices.SafeHandle"/> for <see cref="T:Vanara.PInvoke.Shell32.HPIF"/> that is disposed using <see cref="M:Vanara.PInvoke.Shell32.PifMgr_CloseProperties(Vanara.PInvoke.Shell32.HPIF,Vanara.PInvoke.Shell32.CLOSEPROPS)"/>.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SafeHPIF.#ctor(System.IntPtr,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Shell32.SafeHPIF"/> class and assigns an existing handle.</summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
            <param name="ownsHandle">
            <see langword="true"/> to reliably release the handle during the finalization phase; otherwise, <see langword="false"/> (not recommended).
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SafeHPIF.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Shell32.SafeHPIF"/> class.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SafeHPIF.op_Implicit(Vanara.PInvoke.Shell32.SafeHPIF)~Vanara.PInvoke.Shell32.HPIF">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.Shell32.SafeHPIF"/> to <see cref="T:Vanara.PInvoke.Shell32.HPIF"/>.</summary>
            <param name="h">The safe handle instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SafeHPIF.InternalReleaseHandle">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.SafeHPSXA">
            <summary>Provides a <see cref="T:System.Runtime.InteropServices.SafeHandle"/> for <see cref="T:Vanara.PInvoke.Shell32.HPSXA"/> that is disposed using <see cref="M:Vanara.PInvoke.Shell32.SHDestroyPropSheetExtArray(Vanara.PInvoke.Shell32.HPSXA)"/>.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SafeHPSXA.#ctor(System.IntPtr,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Shell32.SafeHPSXA"/> class and assigns an existing handle.</summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
            <param name="ownsHandle">
            <see langword="true"/> to reliably release the handle during the finalization phase; otherwise, <see langword="false"/> (not recommended).
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SafeHPSXA.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Shell32.SafeHPSXA"/> class.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SafeHPSXA.op_Implicit(Vanara.PInvoke.Shell32.SafeHPSXA)~Vanara.PInvoke.Shell32.HPSXA">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.Shell32.SafeHPSXA"/> to <see cref="T:Vanara.PInvoke.Shell32.HPSXA"/>.</summary>
            <param name="h">The safe handle instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SafeHPSXA.InternalReleaseHandle">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.GetIconLocationFlags">
            <summary>Flags used by <see cref="M:Vanara.PInvoke.Shell32.IExtractIconW.GetIconLocation(Vanara.PInvoke.Shell32.GetIconLocationFlags,System.Text.StringBuilder,System.Int32,System.Int32@,Vanara.PInvoke.Shell32.GetIconLocationResultFlags@)"/>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.GetIconLocationFlags.GIL_ASYNC">
            <summary>
            Set this flag to determine whether the icon should be extracted asynchronously. If the icon can be extracted rapidly, this
            flag is usually ignored. If extraction will take more time, GetIconLocation should return E_PENDING. See the Remarks for
            further discussion.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.GetIconLocationFlags.GIL_DEFAULTICON">
            <summary>
            Retrieve information about the fallback icon. Fallback icons are usually used while the desired icon is extracted and added
            to the cache.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.GetIconLocationFlags.GIL_FORSHELL">
            <summary>The icon is displayed in a Shell folder.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.GetIconLocationFlags.GIL_FORSHORTCUT">
            <summary>
            The icon indicates a shortcut. However, the icon extractor should not apply the shortcut overlay; that will be done later.
            Shortcut icons are state-independent.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.GetIconLocationFlags.GIL_OPENICON">
            <summary>
            The icon is in the open state if both open-state and closed-state images are available. If this flag is not specified, the
            icon is in the normal or closed state. This flag is typically used for folder objects.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.GetIconLocationFlags.GIL_CHECKSHIELD">
            <summary>Explicitly return either GIL_SHIELD or GIL_FORCENOSHIELD in pwFlags. Do not block if GIL_ASYNC is set.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.GetIconLocationResultFlags">
            <summary>
            Flags returned by <see cref="M:Vanara.PInvoke.Shell32.IExtractIconW.GetIconLocation(Vanara.PInvoke.Shell32.GetIconLocationFlags,System.Text.StringBuilder,System.Int32,System.Int32@,Vanara.PInvoke.Shell32.GetIconLocationResultFlags@)"/>.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.GetIconLocationResultFlags.GIL_SIMULATEDOC">
            <summary>The calling application should create a document icon using the specified icon.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.GetIconLocationResultFlags.GIL_PERINSTANCE">
            <summary>
            Each object of this class has its own icon. This flag is used internally by the Shell to handle cases like Setup.exe, where
            objects with identical names can have different icons. Typical implementations of IExtractIcon do not require this flag.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.GetIconLocationResultFlags.GIL_PERCLASS">
            <summary>
            All objects of this class have the same icon. This flag is used internally by the Shell. Typical implementations of
            IExtractIcon do not require this flag because the flag implies that an icon handler is not required to resolve the icon on a
            per-object basis. The recommended method for implementing per-class icons is to register a DefaultIcon for the class.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.GetIconLocationResultFlags.GIL_NOTFILENAME">
            <summary>
            The location is not a file name/index pair. The values in pszIconFile and piIndex cannot be passed to ExtractIcon or
            ExtractIconEx. When this flag is omitted, the value returned in pszIconFile is a fully-qualified path name to either a .ico
            file or to a file that can contain icons. Also, the value returned in piIndex is an index into that file that identifies
            which of its icons to use. Therefore, when the GIL_NOTFILENAME flag is omitted, these values can be passed to ExtractIcon or ExtractIconEx.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.GetIconLocationResultFlags.GIL_DONTCACHE">
            <summary>The physical image bits for this icon are not cached by the calling application.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.GetIconLocationResultFlags.GIL_HASTHUMBNAIL">
            <summary>Undocumented, but appears to indicate thumbnails are available.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.GetIconLocationResultFlags.GIL_SHIELD">
            <summary>Windows Vista only. The calling application must stamp the icon with the UAC shield.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.GetIconLocationResultFlags.GIL_FORCENOSHIELD">
            <summary>Windows Vista only. The calling application must not stamp the icon with the UAC shield.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.GetIconLocationResultFlags.GIL_ENCRYPTED">
            <summary>Undocumented, but appears to indicate the folder is encrypted.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.GetIconLocationResultFlags.GIL_COMPRESSED">
            <summary>Undocumented, but appears to indicate a compressed folder.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IExtractIconA">
            <summary>Exposes methods that allow a client to retrieve the icon that is associated with one of the objects in a folder.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IExtractIconA.GetIconLocation(Vanara.PInvoke.Shell32.GetIconLocationFlags,System.Text.StringBuilder,System.Int32,System.Int32@,Vanara.PInvoke.Shell32.GetIconLocationResultFlags@)">
            <summary>Gets the location and index of an icon.</summary>
            <param name="uFlags">One or more of the following values. This parameter can also be NULL.use GIL_ Consts</param>
            <param name="szIconFile">
            A pointer to a buffer that receives the icon location. The icon location is a null-terminated string that identifies the
            file that contains the icon.
            </param>
            <param name="cchMax">The size of the buffer, in characters, pointed to by pszIconFile.</param>
            <param name="piIndex">A pointer to an int that receives the index of the icon in the file pointed to by pszIconFile.</param>
            <param name="pwFlags">A pointer to a UINT value that receives zero or a combination of the following value</param>
            <returns>
            Returns S_OK if the function returned a valid location, or S_FALSE if the Shell should use a default icon. If the GIL_ASYNC
            flag is set in uFlags, the method can return E_PENDING to indicate that icon extraction will be time-consuming.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IExtractIconA.Extract(System.String,System.UInt32,Vanara.PInvoke.HICON*,Vanara.PInvoke.HICON*,System.UInt32)">
            <summary>Extracts an icon image from the specified location.</summary>
            <param name="pszFile">A pointer to a null-terminated string that specifies the icon location.</param>
            <param name="nIconIndex">The index of the icon in the file pointed to by pszFile.</param>
            <param name="phiconLarge">
            A pointer to an HICON value that receives the handle to the large icon. This parameter may be NULL.
            </param>
            <param name="phiconSmall">
            A pointer to an HICON value that receives the handle to the small icon. This parameter may be NULL.
            </param>
            <param name="nIconSize">
            The desired size of the icon, in pixels. The low word contains the size of the large icon, and the high word contains the
            size of the small icon. The size specified can be the width or height. The width of an icon always equals its height.
            </param>
            <returns>Returns S_OK if the function extracted the icon, or S_FALSE if the calling application should extract the icon.</returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IExtractIconW">
            <summary>Exposes methods that allow a client to retrieve the icon that is associated with one of the objects in a folder.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IExtractIconW.GetIconLocation(Vanara.PInvoke.Shell32.GetIconLocationFlags,System.Text.StringBuilder,System.Int32,System.Int32@,Vanara.PInvoke.Shell32.GetIconLocationResultFlags@)">
            <summary>Gets the location and index of an icon.</summary>
            <param name="uFlags">One or more of the following values. This parameter can also be NULL.use GIL_ Consts</param>
            <param name="szIconFile">
            A pointer to a buffer that receives the icon location. The icon location is a null-terminated string that identifies the
            file that contains the icon.
            </param>
            <param name="cchMax">The size of the buffer, in characters, pointed to by pszIconFile.</param>
            <param name="piIndex">A pointer to an int that receives the index of the icon in the file pointed to by pszIconFile.</param>
            <param name="pwFlags">A pointer to a UINT value that receives zero or a combination of the following value</param>
            <returns>
            Returns S_OK if the function returned a valid location, or S_FALSE if the Shell should use a default icon. If the GIL_ASYNC
            flag is set in uFlags, the method can return E_PENDING to indicate that icon extraction will be time-consuming.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IExtractIconW.Extract(System.String,System.UInt32,Vanara.PInvoke.HICON*,Vanara.PInvoke.HICON*,System.UInt32)">
            <summary>Extracts an icon image from the specified location.</summary>
            <param name="pszFile">A pointer to a null-terminated string that specifies the icon location.</param>
            <param name="nIconIndex">The index of the icon in the file pointed to by pszFile.</param>
            <param name="phiconLarge">
            A pointer to an HICON value that receives the handle to the large icon. This parameter may be NULL.
            </param>
            <param name="phiconSmall">
            A pointer to an HICON value that receives the handle to the small icon. This parameter may be NULL.
            </param>
            <param name="nIconSize">
            The desired size of the icon, in pixels. The low word contains the size of the large icon, and the high word contains the
            size of the small icon. The size specified can be the width or height. The width of an icon always equals its height.
            </param>
            <returns>Returns S_OK if the function extracted the icon, or S_FALSE if the calling application should extract the icon.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.Extract(Vanara.PInvoke.Shell32.IExtractIconA,System.String,System.UInt32,System.UInt16,Vanara.PInvoke.User32.SafeHICON@)">
            <summary>Extracts an icon image from the specified location.</summary>
            <param name="exIcon">The <see cref="T:Vanara.PInvoke.Shell32.IExtractIconA"/> instance.</param>
            <param name="pszFile">A pointer to a null-terminated string that specifies the icon location.</param>
            <param name="nIconIndex">The index of the icon in the file pointed to by pszFile.</param>
            <param name="nIconSize">
            The desired size of the icon, in pixels. The size specified can be the width or height. The width of an icon always equals
            its height.
            </param>
            <param name="phicon">A pointer to an HICON value that receives the handle to the icon. This parameter may be NULL.</param>
            <returns>Returns S_OK if the function extracted the icon, or S_FALSE if the calling application should extract the icon.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.Extract(Vanara.PInvoke.Shell32.IExtractIconA,System.String,System.UInt32,System.UInt16,Vanara.PInvoke.User32.SafeHICON@,System.UInt16,Vanara.PInvoke.User32.SafeHICON@)">
            <summary>Extracts an icon image from the specified location.</summary>
            <param name="exIcon">The <see cref="T:Vanara.PInvoke.Shell32.IExtractIconA"/> instance.</param>
            <param name="pszFile">A pointer to a null-terminated string that specifies the icon location.</param>
            <param name="nIconIndex">The index of the icon in the file pointed to by pszFile.</param>
            <param name="nIconSizeLarge">
            The desired size of the large icon, in pixels. The size specified can be the width or height. The width of an icon always equals
            its height.
            </param>
            <param name="phiconLarge">A pointer to an HICON value that receives the handle to the large icon. This parameter may be NULL.</param>
            <param name="nIconSizeSmall">
            The desired size of the small icon, in pixels. The size specified can be the width or height. The width of an icon always equals
            its height.
            </param>
            <param name="phiconSmall">A pointer to an HICON value that receives the handle to the small icon. This parameter may be NULL.</param>
            <returns>Returns S_OK if the function extracted the icon, or S_FALSE if the calling application should extract the icon.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.Extract(Vanara.PInvoke.Shell32.IExtractIconW,System.String,System.UInt32,System.UInt16,Vanara.PInvoke.User32.SafeHICON@)">
            <summary>Extracts an icon image from the specified location.</summary>
            <param name="exIcon">The <see cref="T:Vanara.PInvoke.Shell32.IExtractIconW"/> instance.</param>
            <param name="pszFile">A pointer to a null-terminated string that specifies the icon location.</param>
            <param name="nIconIndex">The index of the icon in the file pointed to by pszFile.</param>
            <param name="nIconSize">
            The desired size of the icon, in pixels. The size specified can be the width or height. The width of an icon always equals
            its height.
            </param>
            <param name="phicon">A pointer to an HICON value that receives the handle to the icon. This parameter may be NULL.</param>
            <returns>Returns S_OK if the function extracted the icon, or S_FALSE if the calling application should extract the icon.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.Extract(Vanara.PInvoke.Shell32.IExtractIconW,System.String,System.UInt32,System.UInt16,Vanara.PInvoke.User32.SafeHICON@,System.UInt16,Vanara.PInvoke.User32.SafeHICON@)">
            <summary>Extracts an icon image from the specified location.</summary>
            <param name="exIcon">The <see cref="T:Vanara.PInvoke.Shell32.IExtractIconW"/> instance.</param>
            <param name="pszFile">A pointer to a null-terminated string that specifies the icon location.</param>
            <param name="nIconIndex">The index of the icon in the file pointed to by pszFile.</param>
            <param name="nIconSizeLarge">
            The desired size of the large icon, in pixels. The size specified can be the width or height. The width of an icon always equals
            its height.
            </param>
            <param name="phiconLarge">A pointer to an HICON value that receives the handle to the large icon. This parameter may be NULL.</param>
            <param name="nIconSizeSmall">
            The desired size of the small icon, in pixels. The size specified can be the width or height. The width of an icon always equals
            its height.
            </param>
            <param name="phiconSmall">A pointer to an HICON value that receives the handle to the small icon. This parameter may be NULL.</param>
            <returns>Returns S_OK if the function extracted the icon, or S_FALSE if the calling application should extract the icon.</returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.PIDLUtil">
            <summary>Utilities to work with <see cref="T:Vanara.PInvoke.Shell32.PIDL"/> and raw ITEMIDLIST pointers.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.PIDLUtil.ILClone(System.IntPtr)">
            <summary>Clones an ITEMIDLIST structure</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.PIDLUtil.ILCloneFirst(System.IntPtr)">
            <summary>Clones the first SHITEMID structure in an ITEMIDLIST structure</summary>
            <param name="pidl">A pointer to the ITEMIDLIST structure that you want to clone.</param>
            <returns>
            A pointer to an ITEMIDLIST structure that contains the first SHITEMID structure from the ITEMIDLIST structure specified by
            pidl. Returns NULL on failure.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.PIDLUtil.ILCombine(System.IntPtr,System.IntPtr)">
            <summary>Combines two ITEMIDLIST structures.</summary>
            <param name="pidl1">A pointer to the first ITEMIDLIST structure.</param>
            <param name="pidl2">
            A pointer to the second ITEMIDLIST structure. This structure is appended to the structure pointed to by pidl1.
            </param>
            <returns>
            Returns an ITEMIDLIST containing the combined structures. If you set either pidl1 or pidl2 to NULL, the returned ITEMIDLIST
            structure is a clone of the non-NULL parameter. Returns NULL if pidl1 and pidl2 are both set to NULL.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.PIDLUtil.ILFindLastId(System.IntPtr)">
            <summary>Returns a pointer to the last SHITEMID structure in an ITEMIDLIST structure</summary>
            <param name="pidl">A pointer to an ITEMIDLIST structure.</param>
            <returns>A pointer to the last SHITEMID structure in pidl.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.PIDLUtil.ILGetNext(System.IntPtr)">
            <summary>Gets the next SHITEMID structure in an ITEMIDLIST structure</summary>
            <param name="pidl">A pointer to a particular SHITEMID structure in a larger ITEMIDLIST structure.</param>
            <returns>
            Returns a pointer to the SHITEMID structure that follows the one specified by pidl. Returns NULL if pidl points to the last
            SHITEMID structure.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.PIDLUtil.ILIsEmpty(System.IntPtr)">
            <summary>Determines whether the specified ITEMIDLIST has no children.</summary>
            <param name="pidl">A pointer to the ITEMIDLIST structure to be evaluated.</param>
            <returns><c>true</c> if the specified ITEMIDLIST is empty; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.PIDLUtil.ILRemoveLastId(System.IntPtr)">
            <summary>Removes the last SHITEMID structure from an ITEMIDLIST structure</summary>
            <param name="pidl">
            A pointer to the ITEMIDLIST structure to be shortened. When the function returns, this variable points to the shortened structure.
            </param>
            <returns>Returns TRUE if successful, FALSE otherwise.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.PIDLUtil.SplitPidl(System.IntPtr,System.IntPtr@,System.IntPtr@)">
            <summary>Separates an ITEMIDLIST into the parent SHITEMID and the children SHITEMIDs</summary>
            <param name="pidl">A pointer to the ITEMIDLIST structure to be evaluated.</param>
            <param name="parent">The parent.</param>
            <param name="child">The children.</param>
            <returns>Returns TRUE if successful, FALSE otherwise.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.PIDLUtil.IntILClone(System.IntPtr)">
            <summary>Clones an ITEMIDLIST structure</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.PIDLUtil.IntILCombine(System.IntPtr,System.IntPtr)">
            <summary>Combines two ITEMIDLIST structures</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.PDTIMER">
            <summary>Flags that indicate the action to be taken by the ProgressDialog.SetTime() method.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.PDTIMER.PDTIMER_RESET">
            <summary>Resets the timer to zero. Progress will be calculated from the time this method is called.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.PDTIMER.PDTIMER_PAUSE">
            <summary>Progress has been suspended.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.PDTIMER.PDTIMER_RESUME">
            <summary>Progress has been resumed.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.PROGDLG">
            <summary>Defines a mechanism for retrieving a service object; that is, an object that provides custom support to other objects.</summary>
            <summary>Flags that control the operation of the progress dialog box.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.PROGDLG.PROGDLG_NORMAL">
            <summary>Normal progress dialog box behavior.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.PROGDLG.PROGDLG_MODAL">
            <summary>
            The progress dialog box will be modal to the window specified by hwndParent. By default, a progress dialog box is modeless.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.PROGDLG.PROGDLG_AUTOTIME">
            <summary>Automatically estimate the remaining time and display the estimate on line 3.</summary>
            <remarks>If this flag is set, IProgressDialog::SetLine can be used only to display text on lines 1 and 2.</remarks>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.PROGDLG.PROGDLG_NOTIME">
            <summary>Do not show the "time remaining" text.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.PROGDLG.PROGDLG_NOMINIMIZE">
            <summary>Do not display a minimize button on the dialog box's caption bar.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.PROGDLG.PROGDLG_NOPROGRESSBAR">
            <summary>Do not display a progress bar.</summary>
            <remarks>
            Typically, an application can quantitatively determine how much of the operation remains and periodically pass that value to
            IProgressDialog::SetProgress. The progress dialog box uses this information to update its progress bar. This flag is
            typically set when the calling application must wait for an operation to finish, but does not have any quantitative
            information it can use to update the dialog box.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.PROGDLG.PROGDLG_MARQUEEPROGRESS">
            <summary>Sets the progress bar to marquee mode.</summary>
            <remarks>
            This causes the progress bar to scroll horizontally, similar to a marquee display. Use this when you wish to indicate that
            progress is being made, but the time required for the operation is unknown.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.PROGDLG.PROGDLG_NOCANCEL">
            <summary>Do not display a cancel button.</summary>
            <remarks>The operation cannot be canceled. Use this only when absolutely necessary.</remarks>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IProgressDialog">
            <summary>
            Exposes methods that provide options for an application to display a progress dialog box. This interface is exported by the
            progress dialog box object (CLSID_ProgressDialog). This object is a generic way to show a user how an operation is progressing.
            It is typically used when deleting, uploading, copying, moving, or downloading large numbers of files.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IProgressDialog.StartProgressDialog(Vanara.PInvoke.HWND,System.Object,Vanara.PInvoke.Shell32.PROGDLG,System.IntPtr)">
            <summary>Starts the progress dialog box.</summary>
            <param name="hwndParent">A handle to the dialog box's parent window.</param>
            <param name="punkEnableModless">Reserved. Set to null.</param>
            <param name="dwFlags">Flags that control the operation of the progress dialog box.</param>
            <param name="pvResevered">Reserved. Set to IntPtr.Zero</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IProgressDialog.StopProgressDialog">
            <summary>Stops the progress dialog box and removes it from the screen.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IProgressDialog.SetTitle(System.String)">
            <summary>Sets the title of the progress dialog box.</summary>
            <param name="pwzTitle">A pointer to a null-terminated Unicode string that contains the dialog box title.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IProgressDialog.SetAnimation(Vanara.PInvoke.HINSTANCE,System.UInt16)">
            <summary>
            Specifies an Audio-Video Interleaved (AVI) clip that runs in the dialog box. Note: Note This method is not supported in
            Windows Vista or later versions.
            </summary>
            <param name="hInstAnimation">An instance handle to the module from which the AVI resource should be loaded.</param>
            <param name="idAnimation">
            An AVI resource identifier. To create this value, use the MAKEINTRESOURCE macro. The control loads the AVI resource from the
            module specified by hInstAnimation.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IProgressDialog.HasUserCancelled">
            <summary>Checks whether the user has canceled the operation.</summary>
            <returns>TRUE if the user has canceled the operation; otherwise, FALSE.</returns>
            <remarks>
            The system does not send a message to the application when the user clicks the Cancel button. You must periodically use this
            function to poll the progress dialog box object to determine whether the operation has been canceled.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IProgressDialog.SetProgress(System.UInt32,System.UInt32)">
            <summary>Updates the progress dialog box with the current state of the operation.</summary>
            <param name="dwCompleted">
            An application-defined value that indicates what proportion of the operation has been completed at the time the method was called.
            </param>
            <param name="dwTotal">
            An application-defined value that specifies what value dwCompleted will have when the operation is complete.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IProgressDialog.SetProgress64(System.UInt64,System.UInt64)">
            <summary>Updates the progress dialog box with the current state of the operation.</summary>
            <param name="ullCompleted">
            An application-defined value that indicates what proportion of the operation has been completed at the time the method was called.
            </param>
            <param name="ullTotal">
            An application-defined value that specifies what value ullCompleted will have when the operation is complete.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IProgressDialog.SetLine(System.UInt32,System.String,System.Boolean,System.IntPtr)">
            <summary>Displays a message in the progress dialog.</summary>
            <param name="dwLineNum">
            The line number on which the text is to be displayed. Currently there are three lines—1, 2, and 3. If the PROGDLG_AUTOTIME
            flag was included in the dwFlags parameter when IProgressDialog::StartProgressDialog was called, only lines 1 and 2 can be
            used. The estimated time will be displayed on line 3.
            </param>
            <param name="pwzString">A null-terminated Unicode string that contains the text.</param>
            <param name="fCompactPath">
            TRUE to have path strings compacted if they are too large to fit on a line. The paths are compacted with PathCompactPath.
            </param>
            <param name="pvResevered">Reserved. Set to IntPtr.Zero.</param>
            <remarks>
            This function is typically used to display a message such as "Item XXX is now being processed." typically, messages are
            displayed on lines 1 and 2, with line 3 reserved for the estimated time.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IProgressDialog.SetCancelMsg(System.String,System.IntPtr)">
            <summary>Sets a message to be displayed if the user cancels the operation.</summary>
            <param name="pwzCancelMsg">A pointer to a null-terminated Unicode string that contains the message to be displayed.</param>
            <param name="pvResevered">Reserved. Set to NULL.</param>
            <remarks>
            Even though the user clicks Cancel, the application cannot immediately call IProgressDialog::StopProgressDialog to close the
            dialog box. The application must wait until the next time it calls IProgressDialog::HasUserCancelled to discover that the
            user has canceled the operation. Since this delay might be significant, the progress dialog box provides the user with
            immediate feedback by clearing text lines 1 and 2 and displaying the cancel message on line 3. The message is intended to let
            the user know that the delay is normal and that the progress dialog box will be closed shortly. It is typically is set to
            something like "Please wait while ...".
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IProgressDialog.Timer(Vanara.PInvoke.Shell32.PDTIMER,System.IntPtr)">
            <summary>Resets the progress dialog box timer to zero.</summary>
            <param name="dwTimerAction">Flags that indicate the action to be taken by the timer.</param>
            <param name="pvResevered">Reserved. Set to NULL.</param>
            <remarks>
            The timer is used to estimate the remaining time. It is started when your application calls
            IProgressDialog::StartProgressDialog. Unless your application will start immediately, it should call Timer just before
            starting the operation. This practice ensures that the time estimates will be as accurate as possible. This method should not
            be called after the first call to IProgressDialog::SetProgress.
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.ProgressDialog">
            <summary>Class object for IProgressDialog (CLSID_ProgressDialog).</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.ControlPanelItem">
            <summary>An enumeration of Control Panel items available in Windows 8.1.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ControlPanelItem.ActionCenter">
            <summary>Action Center</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ControlPanelItem.AdministrativeTools">
            <summary>Administrative Tools</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ControlPanelItem.AutoPlay">
            <summary>AutoPlay</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ControlPanelItem.BiometricDevices">
            <summary>Biometric Devices</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ControlPanelItem.BitLockerDriveEncryption">
            <summary>BitLocker Drive Encryption</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ControlPanelItem.ColorManagement">
            <summary>Color Management</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ControlPanelItem.CredentialManager">
            <summary>Credential Manager</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ControlPanelItem.DateAndTime">
            <summary>Date and Time</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ControlPanelItem.DefaultPrograms">
            <summary>Default Programs</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ControlPanelItem.DeviceManager">
            <summary>Device Manager</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ControlPanelItem.DevicesAndPrinters">
            <summary>Devices and Printers</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ControlPanelItem.Display">
            <summary>Display</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ControlPanelItem.EaseOfAccessCenter">
            <summary>Ease of Access Center</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ControlPanelItem.ParentalControls">
            <summary>Family Safety</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ControlPanelItem.FileHistory">
            <summary>File History</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ControlPanelItem.FolderOptions">
            <summary>Folder Options</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ControlPanelItem.Fonts">
            <summary>Fonts</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ControlPanelItem.HomeGroup">
            <summary>HomeGroup</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ControlPanelItem.IndexingOptions">
            <summary>Indexing Options</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ControlPanelItem.Infrared">
            <summary>Infrared</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ControlPanelItem.InternetOptions">
            <summary>Internet Options</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ControlPanelItem.iSCSIInitiator">
            <summary>iSCSI Initiator</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ControlPanelItem.iSNSServer">
            <summary>iSNS Server</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ControlPanelItem.Keyboard">
            <summary>Keyboard</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ControlPanelItem.Language">
            <summary>Language</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ControlPanelItem.LocationSettings">
            <summary>Location Settings</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ControlPanelItem.Mouse">
            <summary>Mouse</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ControlPanelItem.MPIOConfiguration">
            <summary>MPIOConfiguration</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ControlPanelItem.NetworkAndSharingCenter">
            <summary>Network and Sharing Center</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ControlPanelItem.NotificationAreaIcons">
            <summary>Notification Area Icons</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ControlPanelItem.PenAndTouch">
            <summary>Pen and Touch</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ControlPanelItem.Personalization">
            <summary>Personalization</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ControlPanelItem.PhoneAndModem">
            <summary>Phone and Modem</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ControlPanelItem.PowerOptions">
            <summary>Power Options</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ControlPanelItem.ProgramsAndFeatures">
            <summary>Programs and Features</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ControlPanelItem.Recovery">
            <summary>Recovery</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ControlPanelItem.RegionAndLanguage">
            <summary>Region</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ControlPanelItem.RemoteAppAndDesktopConnections">
            <summary>RemoteApp and Desktop Connections</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ControlPanelItem.Sound">
            <summary>Sound</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ControlPanelItem.SpeechRecognition">
            <summary>Speech Recognition</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ControlPanelItem.StorageSpaces">
            <summary>Storage Spaces</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ControlPanelItem.SyncCenter">
            <summary>Sync Center</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ControlPanelItem.System">
            <summary>System</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ControlPanelItem.TabletPCSettings">
            <summary>Tablet PC Settings</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ControlPanelItem.Taskbar">
            <summary>Taskbar and Navigation</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ControlPanelItem.Troubleshooting">
            <summary>Troubleshooting</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ControlPanelItem.TSAppInstall">
            <summary>TSAppInstall</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ControlPanelItem.UserAccounts">
            <summary>User Accounts</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ControlPanelItem.WindowsAnytimeUpgrade">
            <summary>Windows Anytime Upgrade</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ControlPanelItem.WindowsDefender">
            <summary>Windows Defender</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ControlPanelItem.WindowsFirewall">
            <summary>Windows Firewall</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ControlPanelItem.MobilityCenter">
            <summary>Windows Mobility Center</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ControlPanelItem.PortableWorkspaceCreator">
            <summary>Windows To Go</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ControlPanelItem.WindowsUpdate">
            <summary>Windows Update</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ControlPanelItem.WorkFolders">
            <summary>Work Folders</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.CPVIEW">
            <summary>The most recent view.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CPVIEW.CPVIEW_CLASSIC">
            <summary>Classic view.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CPVIEW.CPVIEW_ALLITEMS">
            <summary>Windows 7 and later.Equivalent to CPVIEW_CLASSIC.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CPVIEW.CPVIEW_CATEGORY">
            <summary>Category view.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CPVIEW.CPVIEW_HOME">
            <summary>Windows 7 and later. Equivalent to CPVIEW_CATEGORY.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IOpenControlPanel">
            <summary>
            Exposes methods that retrieve the view state of the Control Panel, the path of individual Control Panel items, and that open
            either the Control Panel itself or an individual Control Panel item.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IOpenControlPanel.Open(System.String,System.String,System.Object)">
            <summary>Opens the specified Control Panel item, optionally to a specific page.</summary>
            <param name="pszName">
            A pointer to the item's canonical name as a Unicode string. This parameter is optional and can be NULL. If the calling
            application passes NULL, then the Control Panel itself opens. For a complete list of Control Panel item canonical names, see
            Canonical Names of Control Panel Items.
            </param>
            <param name="page">
            A pointer to the name of the page within the item to display. This string is appended to the end of the path for Shell folder
            Control Panel items or appended as a command-line parameter for Control Panel (.cpl) file items. This parameter can be NULL,
            in which case the first page is shown.
            </param>
            <param name="punkSite">
            A pointer to the site for navigating in-frame for Shell folder Control Panel items. This parameter can be NULL.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IOpenControlPanel.GetPath(System.String,System.Text.StringBuilder,System.UInt32)">
            <summary>Gets the path of a specified Control Panel item.</summary>
            <param name="pszName">
            A pointer to the item's canonical name or its GUID. This value can be NULL. See Remarks for further details. For a complete
            list of Control Panel item canonical names, see Canonical Names of Control Panel Items.
            </param>
            <param name="pszPath">When this method returns, contains the path of the specified Control Panel item as a Unicode string.</param>
            <param name="cchPath">The size of the buffer pointed to by pszPath, in WCHARs.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IOpenControlPanel.GetCurrentView">
            <summary>Gets the most recent Control Panel view: Classic view or Category view.</summary>
            <returns>The most recent view.</returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.OpenControlPanel">
            <summary>Class interface for IOpenControlPanel.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.BIND_INTERRUPTABLE">
            <summary>The bind interruptible</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.STR_AVOID_DRIVE_RESTRICTION_POLICY">
            <summary>
            Introduced in Windows XP SP2. Specify this bind context to permit clients of the data source to override the hidden drive letter
            policy and enable access to the view objects for data sources on the drives that are blocked.
            <para>Used with IShellFolder::BindToObject or IShellItem::BindToHandler.</para>
            <para>
            The system supports administrator-controlled policies that hide specified drive letters to block users from accessing those
            drives through Windows Explorer.When this policy is active, the result is that view objects and other handlers created with the
            IShellFolder::CreateViewObject method will fail when called on drives that are blocked by policy.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.STR_BIND_DELEGATE_CREATE_OBJECT">
            <summary>
            Introduced in Windows Vista. Specify this bind context to cause the IShellFolder::BindToObject method to use the object
            specified by the pbc parameter to create the target object; in this case, the object specified by the punk parameter in the
            IBindCtx::RegisterObjectParam call must implement the ICreateObject interface.
            <para>Used with IShellFolder::BindToObject or IShellItem::BindToHandler.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.STR_BIND_FOLDER_ENUM_MODE">
            <summary>
            Introduced in Windows 7. Passed to IShellFolder::ParseDisplayName with an FOLDER_ENUM_MODE value to control the enumeration mode
            of the parsed item. The FOLDER_ENUM_MODE value is passed in the bind context through an object that implements IObjectWithFolderEnumMode.
            <para>
            Items with different enumeration modes compare canonically(SHCIDS_CANONICALONLY) different because they enumerate different sets
            of items.
            </para>
            <para>
            If an item doesn't support the enumeration mode (because it isn't a folder or it doesn't provide the enumeration mode) then it
            is created in the default enumeration mode.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.STR_BIND_FOLDERS_READ_ONLY">
            <summary>
            Introduced in Windows 7. Passed to IShellFolder::ParseDisplayName along with STR_FILE_SYS_BIND_DATA. This forces simple parsing
            while also probing for Desktop.ini files along the path from which to get a localized name string. This avoids probing for
            folders along the path, which, in a case of a folder that represents a server or a share, could take extensive time and
            resources. Desktop.ini files are cached in some locations, so it will be at least as efficient as probing for folders attributes
            and then probing for the Desktop.ini if that folder should turn ou tot be read-only.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.STR_BIND_FORCE_FOLDER_SHORTCUT_RESOLVE">
            <summary>
            Introduced in Windows XP SP2. Specify this bind context to force a folder shortcut to resolve the link that points to its target.
            <para>
            A folder shortcut is a folder item that points to another folder item in the same namespace, using a link(shortcut) to hold the
            IDList of the target.The link is resolved to track the target in case it is moved or renamed.For example, the Windows XP My
            Network Places folder and the Windows Vista Computer folder can contain folder shortcuts created with the Add Network Location
            wizard.To improve performance, the IShellFolder::BindToObject method does not resolve links to network folder by default.
            </para>
            <para>Used with IShellFolder::BindToObject or IShellItem::BindToHandler.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.STR_DONT_PARSE_RELATIVE">
            <summary>
            Introduced in Windows XP. Specify this bind context to prevent a call to the IShellFolder::ParseDisplayName method on the
            Desktop folder from treating relative paths as relative to the desktop; in such a case, parsing fails when this bind context is specified.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.STR_DONT_RESOLVE_LINK">
            <summary>
            Introduced in Windows Vista. Specify this bind context to instruct an IShellItem not to resolve the link target obtained when
            using the BHID_LinkTargetItem GUID in IShellItem::BindToHandler.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.STR_ENUM_ITEMS_FLAGS">
            <summary>
            Introduced in Windows 8. Specifies a SHCONTF value to be passed to IShellFolder::EnumObjects when you call
            IShellItem::BindToHandler with BHID_EnumItems.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.STR_FILE_SYS_BIND_DATA">
            <summary>
            Introduced in Windows XP. Specify this bind context to provide file metadata to the IShellFolder::ParseDisplayName method, which
            is used instead of attempting to retrieve the actual file metadata. The associated object must implement IFileSystemBindData and
            can optionally also implement IFileSystemBindData2. By default, the IShellFolder::ParseDisplayName method verifies that the file
            exists and uses the file's actual metadata to populate the ID list.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.STR_FILE_SYS_BIND_DATA_WIN7_FORMAT">
            <summary>
            Introduced in Windows 8.1. Specify this bind context to indicate that the data provided in the STR_FILE_SYS_FIND_DATA bind
            context should be used to create an ItemID list in the Windows 7 format.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.STR_GET_ASYNC_HANDLER">
            <summary>
            Introduced in Windows 7. Specify this bind context when the handler is being retrieved on the same thread as the UI. Any
            memory-intensive activities such as those that involve disk or network access should be avoided.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.STR_GPS_BESTEFFORT">
            <summary>
            Introduced in Windows Vista. Specify this bind context when requesting an IPropertySetStorage or IPropertyStore handler. This
            value is used with IShellFolder::BindToObject. See the GPS_BESTEFFORT flag for more information.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.STR_GPS_DELAYCREATION">
            <summary>
            Introduced in Windows Vista. Specify this bind context when requesting an IPropertySetStorage or IPropertyStore handler. This
            value is used with IShellFolder::BindToObject. See the GPS_DELAYCREATION flag for more information.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.STR_GPS_FASTPROPERTIESONLY">
            <summary>
            Introduced in Windows Vista. Specify this bind context when requesting an IPropertySetStorage or IPropertyStore handler. This
            value is used with IShellFolder::BindToObject. See the GPS_FASTPROPERTIESONLY flag for more information.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.STR_GPS_HANDLERPROPERTIESONLY">
            <summary>
            Introduced in Windows Vista. Specify this bind context when requesting an IPropertySetStorage or IPropertyStore handler. This
            value is used with IShellFolder::BindToObject. See the GPS_HANDLERPROPERTIESONLY flag for more information.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.STR_GPS_NO_OPLOCK">
            <summary>
            Introduced in Windows 7. Specify this bind context when requesting an IPropertySetStorage or IPropertyStore handler. This value
            is used with IShellFolder::BindToObject. See the GPS_NO_OPLOCK flag for more information.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.STR_GPS_OPENSLOWITEM">
            <summary>
            Introduced in Windows Vista. Specify this bind context when requesting an IPropertySetStorage or IPropertyStore handler. This
            value is used with IShellFolder::BindToObject. See the GPS_OPENSLOWITEM flag for more information.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.STR_IFILTER_FORCE_TEXT_FILTER_FALLBACK">
            <summary>
            Windows Vista only. Specify this bind context to cause a call to the IShellFolder::BindToObject method that requests the IFilter
            interface for a file system object to return a text filter if no other filter is available. This value is not defined as of
            Windows 7.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.STR_IFILTER_LOAD_DEFINED_FILTER">
            <summary>
            Windows Vista only. Specify this bind context to cause a call to the IShellFolder::BindToObject method that requests the IFilter
            interface for a file system object to not return a fallback filter if no registered filter could be found.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.STR_INTERNAL_NAVIGATE">
            <summary>
            Introduced in Windows Vista. Specify this bind context to enable loading of the history from a stream for an internal navigation
            when the IPersistHistory::LoadHistory method is called. An internal navigation is a navigation within the same view.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.STR_INTERNETFOLDER_PARSE_ONLY_URLMON_BINDABLE">
            <summary>
            Introduced in Windows 7. Specify this bind context with STR_PARSE_PREFER_FOLDER_BROWSING when the client wants the Internet
            Shell folder handlers to generate an IDList for any valid URL if a DAV-type folder cannot be created for that URL. The URL is
            not verified to exist; only its syntax is checked and that it has a registered protocol handler.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.STR_ITEM_CACHE_CONTEXT">
            <summary>
            Introduced in Windows 7. Specify this bind context to instruct implementations of IShellFolder::ParseDisplayName and
            IPersistFolder3::InitializeEx to cache memory-intensive helper objects that can exist across instantiations of Shell items
            instead of recreating these objects each time that a Shell item is created. The associated object is another bind context
            object, initially empty. This should result in a separate bind context object, which is accessed through
            IBindCtx::GetObjectParam or IBindCtx::Register.ObjectParam.
            <para>
            A caller must opt into this behavior by providing this bind context parameter when calling SHCreateItemFromParsingName. By doing
            so, you optimize the behavior of binding to multiple parsing names in succession.The lifetime of the bind context object should
            span multiple instances of Shell items and their individual bind contexts.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.STR_NO_VALIDATE_FILENAME_CHARS">
            <summary>
            Introduced in Windows Vista. Specify this bind context to allow invalid file name characters to appear in file names. By
            default, a call to the IShellFolder::ParseDisplayName method rejects characters that are illegal in file names. This bind
            context is meaningful only in conjunction with the STR_FILE_SYS_FIND_DATA bind context.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.STR_PARSE_ALLOW_INTERNET_SHELL_FOLDERS">
            <summary>
            Introduced in Windows Vista. Specify this bind context to enable a call to the IShellFolder::ParseDisplayName method on the
            Desktop folder to parse URLs. If this bind context is specified, it overrides STR_PARSE_PREFER_WEB_BROWSING.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.STR_PARSE_AND_CREATE_ITEM">
            <summary>
            Introduced in Windows 7. Specify this bind context to instruct a data source's implementation of IShellFolder::ParseDisplayName
            to optimize the behavior of SHCreateItemFromParsingName.
            <para>
            Normally, SHCreateItemFromParsingName performs two binding operations on the name to be parsed: one through and one to
            IShellFolder::ParseDisplayName and one to create the Shell item.When the STR_PARSE_AND_CREATE_ITEM bind context is supported,
            the second bind is avoided by creating the Shell item during the IShellFolder::ParseDisplayName bind and storing the Shell item
            through IParseAndCreateItem::SetItem.SHCreateItemFromParsingName then uses the stored Shell item rather than creating one.
            </para>
            <para>
            This parameter applies to the last element of the name that is parsed. For instance, in the name "C:\Folder1\File.txt, the data
            applies to File.txt.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.STR_PARSE_DONT_REQUIRE_VALIDATED_URLS">
            <summary>
            Windows Vista only. Specify that, when parsing a URL, this bind context should not require the URL to exist before generating an
            IDList for it. Specify this bind context along with STR_PARSE_PREFER_FOLDER_BROWSING when the client desires that the Internet
            Shell folder handlers generate an IDList for the URL if a DAV folder cannot be created for the given URL.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.STR_PARSE_EXPLICIT_ASSOCIATION_SUCCESSFUL">
            <summary>
            Introduced in Windows 7. The IShellFolder::ParseDisplayName method sets this property to tell the caller that the returned
            IDList was bound to the ProgID specified with STR_PARSE_WITH_EXPLICIT_PROGID or the application specified with
            STR_PARSE_WITH_EXPLICIT_ASSOCAPP. When STR_PARSE_EXPLICIT_ASSOCIATION_SUCCESSFUL is absent, the ProgID or application was not
            bound into the IDList.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.STR_PARSE_PARTIAL_IDLIST">
            <summary>
            Introduced in Windows Vista. Specify this bind context to pass the original item that is being re-parsed when that item is
            stored as a IShellItem object that also implements the IParentAndItem interface. Before Windows 7 this value was not defined in
            a header file. It could be defined by the caller or passed as its string value of L"ParseOriginalItem". As of Windows 7, the
            value is defined in Shlobj.h. Note that this is a different header than the other STR constants.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.STR_PARSE_PREFER_FOLDER_BROWSING">
            <summary>
            Introduced in Windows XP. Specify this bind context to enable a call to the IShellFolder::ParseDisplayName method on the Desktop
            folder to parse URLs as if they were folders. Use this bind context to bind to a WebDAV server.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.STR_PARSE_PREFER_WEB_BROWSING">
            <summary>
            Introduced in Windows Vista. Specify this bind context to prevent a call to the IShellFolder::ParseDisplayName method on the
            Desktop folder form parsing URLs. This bind context can be overridden by STR_PARSE_ALLOW_INTERNET_SHELL_FOLDERS.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.STR_PARSE_PROPERTYSTORE">
            <summary>
            Introduced in Windows Vista. Specify this bind context to override the default property store used by the
            IShellFolder::ParseDisplayName method, and use the property store specified as the bind parameter instead. Applies to delegate folders.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.STR_PARSE_SHELL_PROTOCOL_TO_FILE_OBJECTS">
            <summary>
            Introduced in Windows XP SP2. Specify this bind context to enable a call to the IShellFolder::ParseDisplayName method on the
            Desktop folder to use the "shell:" prefix notation to access files.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.STR_PARSE_SHOW_NET_DIAGNOSTICS_UI">
            <summary>
            Introduced in Windows Vista. Specify this bind context to cause a call to the IShellFolder::ParseDisplayName method to display
            the network diagnostics dialog if the parsing of a network path fails.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.STR_PARSE_SKIP_NET_CACHE">
            <summary>
            Introduced in Windows Vista. Specify this bind context to cause a call to the IShellFolder::ParseDisplayName method to skip
            checking the network shares cache and contact the network server directly. Information about network shares is cached to improve
            performance, and IShellFolder::ParseDisplayName checks this cache by default.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.STR_PARSE_TRANSLATE_ALIASES">
            <summary>
            Introduced in Windows XP. Specify this bind context to pass parsed properties to the IShellFolder::ParseDisplayName method for a
            delegate namespace. The namespace can use the passed properties instead of attempting to parse the name itself.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.STR_PARSE_WITH_EXPLICIT_ASSOCAPP">
            <summary>
            Introduced in Windows 7. Specify this property to cause a call to the IShellFolder::ParseDisplayName method to return an IDList
            bound to the file type association handler for the application.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.STR_PARSE_WITH_EXPLICIT_PROGID">
            <summary>
            Introduced in Windows 7. Specify this property to cause a call to the IShellFolder::ParseDisplayName method to return an IDList
            bound to the file association handler of the provided ProgID.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.STR_PARSE_WITH_PROPERTIES">
            <summary>
            Windows Vista only. A parsing bind context that is used to pass a set of properties and the item's name when calling
            IShellFolder::ParseDisplayName. The object in the bind context implements IPropertyStore and is retrieved by calling IBindCtx::GetObjectParam.
            <para>
            DBFolder is a Shell data source that represents items in search results and query-based views.DBFolder retrieves these items by
            querying the Windows Search system.Items in the search results are identified through a protocol scheme, for example "file:" or
            "mapi:". DBFolder provides the behavior for these items by delegating to Shell data sources that are created for these
            protocols. See Developing Protocol Handler Add-ins for more information.
            </para>
            <para>
            When DBFolder delegates its parsing operation to the Shell data sources that support Windows Search protocols, this bind context
            provides access to values that were returned in the query result for that item. This includes the following:
            </para>
            <list type="bullet">
            <item>
            <description>System.ItemType (PKEY_ItemType)</description>
            </item>
            <item>
            <description>System.ParsingPath (PKEY_ParsingPath)</description>
            </item>
            <item>
            <description>System.ItemPathDisplay (PKEY_ItemPathDisplay)</description>
            </item>
            <item>
            <description>System.ItemNameDisplay (PKEY_ItemNameDisplay)</description>
            </item>
            </list>
            <para>
            This bind context can also be used to parse a DBFolder item if a client has a set of properties that define the item.In this
            case an empty name should be passed to IShellFolder::ParseDisplayName.
            </para>
            <para>
            Before Windows 7, this value was not defined in a header file.It could be defined by the caller or passed as its string value:
            L"ParseWithProperties". As of Windows 7, the value is defined in Shlobj.h.Note that this is a different header than where the
            other STR constants are defined.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.STR_PROPERTYBAG_PARAM">
            <summary>
            Introduced in Windows 8. Specify this bind context to indicate that the bind context parameter is a property bag (IPropertyBag)
            used to pass VARIANT values in the bind context. See the Remarks section for further details.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.STR_REFERRER_IDENTIFIER">
            <summary>The string referrer identifier</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.STR_SKIP_BINDING_CLSID">
            <summary>
            Introduced in Windows XP. Specify this bind context to cause calls to the IShellFolder::ParseDisplayName or
            IShellFolder::BindToObject methods to ignore a particular Shell namespace extension when parsing or binding. The CLSID of the
            namespace to ignore is provided by the IPersist::GetClassID method of the bind parameter.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.STR_TAB_REUSE_IDENTIFIER">
            <summary>The string tab reuse identifier</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.STR_TRACK_CLSID">
            <summary>Not used.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.APPDOCLISTTYPE">
            <summary>Values that specify from which category the list of destinations should be retrieved.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.APPDOCLISTTYPE.RECENT">
            <summary>The Recent category, which lists those items most recently accessed.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.APPDOCLISTTYPE.FREQUENT">
            <summary>The Frequent category, which lists the items that have been accessed the greatest number of times.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.ARCONTENT">
            <summary>The type of media in a given drive.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ARCONTENT.ARCONTENT_AUTORUNINF">
            <summary>Use the Autorun.inf file. This is the traditional AutoRun behavior.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ARCONTENT.ARCONTENT_AUDIOCD">
            <summary>AutoRun audio CDs.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ARCONTENT.ARCONTENT_DVDMOVIE">
            <summary>AutoRun DVDs.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ARCONTENT.ARCONTENT_BLANKCD">
            <summary>AutoPlay blank CD-Rs and CD-RWs.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ARCONTENT.ARCONTENT_BLANKDVD">
            <summary>AutoPlay blank DVD-Rs and DVD-RAMs.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ARCONTENT.ARCONTENT_UNKNOWNCONTENT">
            <summary>AutoRun if the media is formatted and the content does not fall under a type covered by one of the other flags.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ARCONTENT.ARCONTENT_AUTOPLAYPIX">
            <summary>AutoPlay if the content consists of file types defined as pictures, such as .bmp and .jpg files.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ARCONTENT.ARCONTENT_AUTOPLAYMUSIC">
            <summary>AutoPlay if the content consists of file types defined as music, such as MP3 files.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ARCONTENT.ARCONTENT_AUTOPLAYVIDEO">
            <summary>AutoPlay if the content consists of file types defined as video files.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ARCONTENT.ARCONTENT_VCD">
            <summary>Introduced in Windows Vista. AutoPlay video CDs (VCDs).</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ARCONTENT.ARCONTENT_SVCD">
            <summary>Introduced in Windows Vista. AutoPlay Super Video CD (SVCD) media.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ARCONTENT.ARCONTENT_DVDAUDIO">
            <summary>Introduced in Windows Vista. AutoPlay DVD-Audio media.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ARCONTENT.ARCONTENT_BLANKBD">
            <summary>
            AutoPlay blank recordable high definition DVD media in the Blu-ray Disc™ format (BD-R or BD-RW). Note: Prior to Windows 7,
            this value was defined to specify non-recordable media in the HD DVD format.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ARCONTENT.ARCONTENT_BLURAY">
            <summary>Introduced in Windows Vista. AutoPlay high definition DVD media in the Blu-ray Disc™ format.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ARCONTENT.ARCONTENT_CAMERASTORAGE">
            <summary>Introduced in Windows 8.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ARCONTENT.ARCONTENT_CUSTOMEVENT">
            <summary>Introduced in Windows 8.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ARCONTENT.ARCONTENT_NONE">
            <summary>Introduced in Windows Vista. AutoPlay empty but formatted media.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ARCONTENT.ARCONTENT_MASK">
            <summary>
            Introduced in Windows Vista. A mask that denotes valid ARCONTENT flag values for media types. This mask does not include
            ARCONTENT_PHASE values.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ARCONTENT.ARCONTENT_PHASE_UNKNOWN">
            <summary>
            Introduced in Windows Vista. AutoPlay is searching the media. The phase of the search (presniff, sniffing, or final) is unknown.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ARCONTENT.ARCONTENT_PHASE_PRESNIFF">
            <summary>
            Introduced in Windows Vista. The contents of the media are known before the media is searched, due to the media type; for
            instance, audio CDs and DVD movies.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ARCONTENT.ARCONTENT_PHASE_SNIFFING">
            <summary>
            Introduced in Windows Vista. AutoPlay is currently searching the media. Any results reported during this phase should be
            considered a partial list as more content types might still be found.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ARCONTENT.ARCONTENT_PHASE_FINAL">
            <summary>Introduced in Windows Vista. AutoPlay has finished searching the media. Results reported are final.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ARCONTENT.ARCONTENT_PHASE_MASK">
            <summary>Introduced in Windows Vista. A mask that denotes valid ARCONTENT_PHASE values.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.ASSOC_FILTER">
            <summary>Specifies the enumeration handler filter applied to the full list of handlers in SHAssocEnumHandlers.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ASSOC_FILTER.ASSOC_FILTER_NONE">
            <summary>Return all handlers.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ASSOC_FILTER.ASSOC_FILTER_RECOMMENDED">
            <summary>
            Return only recommended handlers. A handler sets its recommended status in the registry when it is installed. An initial
            status of non-recommended can later be promoted to recommended as a result of user action.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.ASSOCIATIONLEVEL">
            <summary>
            <para>
            Specifies the source of the default association for a file name extension. Used by methods of the
            IApplicationAssociationRegistration interface.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ASSOCIATIONLEVEL.AL_MACHINE">
            <summary>The machine-level default application association.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ASSOCIATIONLEVEL.AL_EFFECTIVE">
            <summary>The effective default for the current user. This value should be used by most applications.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ASSOCIATIONLEVEL.AL_USER">
            <summary>
            The per-user default application association. If this value is used and no per-user default is declared, the calling method
            fails with a value of .
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.ASSOCIATIONTYPE">
            <summary>
            Specifies the type of association for an application. Used by methods of the IApplicationAssociationRegistration interface.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ASSOCIATIONTYPE.AT_FILEEXTENSION">
            <summary>Indicates a file name extension, such as .htm or .mp3.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ASSOCIATIONTYPE.AT_URLPROTOCOL">
            <summary>Indicates a protocol, such as http or mailto.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ASSOCIATIONTYPE.AT_STARTMENUCLIENT">
            <summary>
            Indicates the owner of the startmenu client for a mail or Internet hyperlink. As of Windows 7, this value is used only for
            the MAPI sendmail client.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ASSOCIATIONTYPE.AT_MIMETYPE">
            <summary>Indicates the MIME type, such as audio/mp3.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.DATAOBJ_GET_ITEM_FLAGS">
            <summary>
            <para>Values used by the SHGetItemFromDataObject function to specify options concerning the processing of the source object.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DATAOBJ_GET_ITEM_FLAGS.DOGIF_DEFAULT">
            <summary>No special options.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DATAOBJ_GET_ITEM_FLAGS.DOGIF_TRAVERSE_LINK">
            <summary>If the source object is a link, base the IShellItem on the link's target rather than the link file itself.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DATAOBJ_GET_ITEM_FLAGS.DOGIF_NO_HDROP">
            <summary>
            If the source data object does not contain data in the CFSTR_SHELLIDLIST format, which identifies the object through an
            IDList, do not revert to the CF_HDROP format, which uses a file path, as an alternative in the transfer.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DATAOBJ_GET_ITEM_FLAGS.DOGIF_NO_URL">
            <summary>
            If the source data object does not contain data in the CFSTR_SHELLIDLIST format, which identifies the object through an
            IDList, do not revert to the CFSTR_INETURL clipboard format, which uses a URL, as an alternative in the transfer.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DATAOBJ_GET_ITEM_FLAGS.DOGIF_ONLY_IF_ONE">
            <summary>If the source object is an array of items, use it only if the array contains just one item.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.FILE_USAGE_TYPE">
            <summary>Constants used by IFileIsInUse::GetUsage to indicate how a file in use is being used.</summary>
            <remarks>
            The interpretation of "playing" or "editing" is left to the application's implementation of IFileIsInUse. Generally, "playing"
            would refer to a media file while "editing" can refer to any file being altered in an application. However, the application
            itself best knows how to map these terms to its actions.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FILE_USAGE_TYPE.FUT_PLAYING">
            <summary>The file is being played by the process that has it open.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FILE_USAGE_TYPE.FUT_EDITING">
            <summary>The file is being edited by the process that has it open.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FILE_USAGE_TYPE.FUT_GENERIC">
            <summary>
            The file is open in the process for an unspecified action or an action that does not readily fit into the other two categories.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.KNOWNDESTCATEGORY">
            <summary>One of the following values that indicate which known category to add to the list</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNDESTCATEGORY.KDC_FREQUENT">
            <summary>Add the Frequent category.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNDESTCATEGORY.KDC_RECENT">
            <summary>Add the Recent category.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.OF_CAP">
            <summary>The capability flags used by <see cref="M:Vanara.PInvoke.Shell32.IFileIsInUse.GetCapabilities(Vanara.PInvoke.Shell32.OF_CAP@)"/>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.OF_CAP.OF_CAP_CANSWITCHTO">
            <summary>The UI can switch to the top-level window of the application that is using the file.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.OF_CAP.OF_CAP_CANCLOSE">
            <summary>The file can be closed.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.PLACEHOLDER_STATES">
            <summary>
            Specifies the states that a placeholder file can have. Retrieve this value through the System.FilePlaceholderStatus
            (PKEY_FilePlaceholderStatus) property.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.PLACEHOLDER_STATES.PS_NONE">
            <summary>None of the other states apply at this time.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.PLACEHOLDER_STATES.PS_MARKED_FOR_OFFLINE_AVAILABILITY">
            <summary>May already be or eventually will be available offline.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.PLACEHOLDER_STATES.PS_FULL_PRIMARY_STREAM_AVAILABLE">
            <summary>The primary stream has been made fully available.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.PLACEHOLDER_STATES.PS_CREATE_FILE_ACCESSIBLE">
            <summary>
            The file is accessible through a call to the CreateFile function, without requesting the opening of reparse points.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.PLACEHOLDER_STATES.PS_CLOUDFILE_PLACEHOLDER">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.PLACEHOLDER_STATES.PS_DEFAULT">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.PLACEHOLDER_STATES.PS_ALL">
            <summary>A bitmask value for all valid PLACEHOLDER_STATES flags.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.SLGP">
            <summary>
            Flags that specify the type of path information to retrieve. This parameter can be a combination of the following values.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SLGP.SLGP_SHORTPATH">
            <summary>Retrieves the standard short (8.3 format) file name.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SLGP.SLGP_UNCPRIORITY">
            <summary>Unsupported; do not use.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SLGP.SLGP_RAWPATH">
            <summary>
            Retrieves the raw path name. A raw path is something that might not exist and may include environment variables that need to
            be expanded.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SLGP.SLGP_RELATIVEPRIORITY">
            <summary>
            Windows Vista and later. Retrieves the path, if possible, of the shortcut's target relative to the path set by a previous
            call to IShellLink::SetRelativePath.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.SVGIO">
            <summary>
            Used with the IFolderView::Items, IFolderView::ItemCount, and IShellView::GetItemObject methods to restrict or control the items
            in their collections.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SVGIO.SVGIO_BACKGROUND">
            <summary>
            Refers to the background of the view. It is used with IID_IContextMenu to get a shortcut menu for the view background and
            with IID_IDispatch to get a dispatch interface that represents the ShellFolderView object for the view.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SVGIO.SVGIO_SELECTION">
            <summary>
            Refers to the currently selected items. Used with IID_IDataObject to retrieve a data object that represents the selected items.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SVGIO.SVGIO_ALLVIEW">
            <summary>Used in the same way as SVGIO_SELECTION but refers to all items in the view.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SVGIO.SVGIO_CHECKED">
            <summary>
            Used in the same way as SVGIO_SELECTION but refers to checked items in views where checked mode is supported. For more
            details on checked mode, see FOLDERFLAGS.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SVGIO.SVGIO_TYPE_MASK">
            <summary>Masks all bits but those corresponding to the _SVGIO flags.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SVGIO.SVGIO_FLAG_VIEWORDER">
            <summary>
            Returns the items in the order they appear in the view. If this flag is not set, the selected item will be listed first.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.SYNC_TRANSFER_STATUS">
            <summary>Specifies possible status values used in the System.SyncTransferStatus property.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SYNC_TRANSFER_STATUS.STS_NONE">
            <summary>There is no current sync activity.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SYNC_TRANSFER_STATUS.STS_NEEDSUPLOAD">
            <summary>The file is pending upload.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SYNC_TRANSFER_STATUS.STS_NEEDSDOWNLOAD">
            <summary>The file is pending download.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SYNC_TRANSFER_STATUS.STS_TRANSFERRING">
            <summary>The file is currently being uploaded or downloaded.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SYNC_TRANSFER_STATUS.STS_PAUSED">
            <summary>The current transfer is paused.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SYNC_TRANSFER_STATUS.STS_HASERROR">
            <summary>An error was encountered during the last sync operation.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SYNC_TRANSFER_STATUS.STS_FETCHING_METADATA">
            <summary>The sync engine is retrieving metadata from the cloud.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SYNC_TRANSFER_STATUS.STS_USER_REQUESTED_REFRESH">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SYNC_TRANSFER_STATUS.STS_HASWARNING">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SYNC_TRANSFER_STATUS.STS_EXCLUDED">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SYNC_TRANSFER_STATUS.STS_INCOMPLETE">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SYNC_TRANSFER_STATUS.STS_PLACEHOLDER_IFEMPTY">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IApplicationAssociationRegistration">
            <summary>
            <para>
            Exposes methods that query and set default applications for specific file Association Type, and protocols at a specific
            Association Level.
            </para>
            <para><c>Note</c> As of Windows 8, the only functionality of this interface that is supported is QueryCurrentDefault.</para>
            </summary>
            <remarks>
            <para>
            Because <c>IApplicationAssociationRegistration</c> is only supported for Windows Vista and Windows 7, applications that support
            earlier operating systems must use their preexisting code in relation to defaults when running under those operating systems.
            Those applications should include a check for the operating system version to account for this.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IApplicationAssociationRegistration.QueryCurrentDefault(System.String,Vanara.PInvoke.Shell32.ASSOCIATIONTYPE,Vanara.PInvoke.Shell32.ASSOCIATIONLEVEL,System.String@)">
            <summary>
            Determines the default application for a given association type. This is the default application launched by ShellExecute
            for that type. Not intended for use in Windows 8.
            </summary>
            <param name="pszQuery">
            <para>Type: <c>LPCWSTR</c></para>
            <para>
            A pointer to a null-terminated, Unicode string that contains the file name extension or protocol, such as .mp3 or http.
            </para>
            </param>
            <param name="atQueryType">
            <para>Type: <c>ASSOCIATIONTYPE</c></para>
            <para>One of the ASSOCIATIONTYPE enumeration values that specifies the type of association, such as extension or MIME type.</para>
            </param>
            <param name="alQueryLevel">
            <para>Type: <c>ASSOCIATIONLEVEL</c></para>
            <para>
            One of the ASSOCIATIONLEVEL enumeration values that specifies the level of association, such as per-user or machine. This is
            typically AL_EFFECTIVE.
            </para>
            </param>
            <param name="ppszAssociation">
            <para>Type: <c>LPWSTR*</c></para>
            <para>When this method returns, contains the address of a pointer to the ProgID that identifies the current default association.</para>
            <para><c>Note</c> It is the responsibility of the calling application to release the string through CoTaskMemFree.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            The string produced is typically a ProgID matching one of the ProgIDs associated with a registered application, but there
            are a few exceptions: If the string returned is a machine default protocol, it is a legacy string indicating a command line
            to a .exe handler instead of a ProgID. Similarly, if returning a machine default MIME type, it returns a legacy class
            identifier (CLSID) string instead of a ProgID.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IApplicationAssociationRegistration.QueryAppIsDefault(System.String,Vanara.PInvoke.Shell32.ASSOCIATIONTYPE,Vanara.PInvoke.Shell32.ASSOCIATIONLEVEL,System.String,System.Boolean@)">
            <summary>
            Determines whether an application owns the registered default association for a given application level and type. Not
            intended for use in Windows 8.
            </summary>
            <param name="pszQuery">
            <para>Type: <c>LPCWSTR</c></para>
            <para>
            A pointer to a <c>null</c>-terminated Unicode string that contains the file name extension or protocol of the application,
            such as .mp3 or http.
            </para>
            </param>
            <param name="atQueryType">
            <para>Type: <c>ASSOCIATIONTYPE</c></para>
            <para>
            One of the ASSOCIATIONTYPE enumeration values that specifies the type of the application named in pszQuery, such as file
            name extension or MIME type.
            </para>
            </param>
            <param name="alQueryLevel">
            <para>Type: <c>ASSOCIATIONLEVEL</c></para>
            <para>
            One of the ASSOCIATIONLEVEL enumeration values that specifies the level of association, such as per-user or machine. This is
            typically AL_EFFECTIVE.
            </para>
            </param>
            <param name="pszAppRegistryName">
            <para>Type: <c>LPCWSTR</c></para>
            <para>A pointer to a <c>null</c>-terminated Unicode string that specifies the registered name of the application.</para>
            </param>
            <param name="pfDefault">
            <para>Type: <c>BOOL*</c></para>
            <para>When this method returns, contains <c>TRUE</c> if the application is the default; or <c>FALSE</c> otherwise.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IApplicationAssociationRegistration.QueryAppIsDefaultAll(Vanara.PInvoke.Shell32.ASSOCIATIONLEVEL,System.String,System.Boolean@)">
            <summary>
            Determines whether an application owns all of the registered default associations for a given application level. Not
            intended for use in Windows 8.
            </summary>
            <param name="alQueryLevel">
            <para>Type: <c>ASSOCIATIONLEVEL</c></para>
            <para>
            One of the ASSOCIATIONLEVEL enumeration values that specifies the level of association, such as per-user or machine. This is
            typically AL_EFFECTIVE.
            </para>
            </param>
            <param name="pszAppRegistryName">
            <para>Type: <c>LPCWSTR</c></para>
            <para>A pointer to a <c>null</c>-terminated Unicode string that specifies the registered name of the application.</para>
            </param>
            <param name="pfDefault">
            <para>Type: <c>BOOL*</c></para>
            <para>
            When this method returns, contains <c>TRUE</c> if the application is the default for all association types at the specified
            ASSOCIATIONLEVEL; or <c>FALSE</c> otherwise.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IApplicationAssociationRegistration.SetAppAsDefault(System.String,System.String,Vanara.PInvoke.Shell32.ASSOCIATIONTYPE)">
            <summary>
            Sets an application as the default for a given extension or protocol, provided that the application's publisher matches the
            current default's. For more information, see Default Programs. Not intended for use in Windows 8.
            </summary>
            <param name="pszAppRegistryName"/>
            <param name="pszSet"/>
            <param name="atSetType">
            <para>Type: <c>ASSOCIATIONTYPE</c></para>
            <para>
            One of the ASSOCIATIONTYPE enumeration values that specifies the type of the application named in extOrUriScheme, such as
            file name extension or MIME type.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>
            If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code. In particular, if the
            application's publisher doesn't match the default's, this method returns <c>E_ACCESSDENIED</c>.
            </para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IApplicationAssociationRegistration.SetAppAsDefaultAll(System.String)">
            <summary>
            Sets an application as the default for all of the registered associations of any type for that application. Not intended for
            use in Windows 8.
            </summary>
            <param name="pszAppRegistryName">
            <para>Type: <c>LPCWSTR</c></para>
            <para>A pointer to a null-terminated Unicode string that specifies the registered name of the application.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IApplicationAssociationRegistration.ClearUserAssociations">
            <summary>
            Removes all per-user associations for the current user. This results in a reversion to machine defaults, if they exist. Not
            intended for use in Windows 8.
            </summary>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IApplicationDestinations">
            <summary>
            Exposes methods that allow an application to remove one or all destinations from the Recent or Frequent categories in a Jump List.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IApplicationDestinations.SetAppID(System.String)">
            <summary>
            Specifies a unique AppUserModelID for the application from whose taskbar button's Jump List the methods of this interface
            will remove destinations. This method is optional.
            </summary>
            <param name="pszAppID">
            Pointer to the AppUserModelID of the process whose taskbar button representation receives the Jump List.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IApplicationDestinations.RemoveDestination(System.Object)">
            <summary>Removes a single destination from the Recent and Frequent categories in a Jump List.</summary>
            <param name="punk">A pointer to the IShellItem or IShellLink that represents the destination to remove.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IApplicationDestinations.RemoveAllDestinations">
            <summary>Clears all destination entries from the Recent and Frequent categories in an application's Jump List.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IApplicationDocumentLists">
            <summary>Allows an application to retrieve the most recent and frequent documents opened in that app, as reported via SHAddToRecentDocs</summary>
            <securitynote>Critical: Suppresses unmanaged code security.</securitynote>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IApplicationDocumentLists.SetAppID(System.String)">
            <summary>
            Set the App User Model ID for the application retrieving this list. If an AppID is not provided via this method, the system
            will use a heuristically determined ID. This method must be called before GetList.
            </summary>
            <param name="pszAppID">App Id.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IApplicationDocumentLists.GetList(Vanara.PInvoke.Shell32.APPDOCLISTTYPE,System.UInt32,System.Guid@)">
            <summary>
            Retrieve an IEnumObjects or IObjectArray for IShellItems and/or IShellLinks. Items may appear in both the frequent and
            recent lists.
            </summary>
            <param name="listtype">Which of the known list types to retrieve</param>
            <param name="cItemsDesired">The number of items desired.</param>
            <param name="riid">The interface Id that the return value should be queried for.</param>
            <returns>A COM object based on the IID passed for the riid parameter.</returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IDefaultExtractIconInit">
            <summary>Exposes methods to set default icons associated with an object.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IDefaultExtractIconInit.SetFlags(Vanara.PInvoke.Shell32.GetIconLocationFlags)">
            <summary>Sets GIL_XXX flags. See GetIconLocation</summary>
            <param name="uFlags">Specifies return flags to get icon location.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IDefaultExtractIconInit.SetKey(Vanara.PInvoke.HKEY)">
            <summary>Sets the registry key from which to load the "DefaultIcon" value.</summary>
            <param name="hkey">A handle to the registry key.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IDefaultExtractIconInit.SetNormalIcon(System.String,System.Int32)">
            <summary>Sets the normal icon.</summary>
            <param name="pszFile">
            A pointer to a buffer that contains the full icon path, including the file name and extension, as a Unicode string. This
            pointer can be NULL.
            </param>
            <param name="iIcon">A Shell icon ID.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IDefaultExtractIconInit.SetOpenIcon(System.String,System.Int32)">
            <summary>Sets the icon that allows containers to specify an "open" look.</summary>
            <param name="pszFile">
            A pointer to a buffer that contains the full icon path, including the file name and extension, as a Unicode string. This
            pointer can be NULL.
            </param>
            <param name="iIcon">Shell icon ID.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IDefaultExtractIconInit.SetShortcutIcon(System.String,System.Int32)">
            <summary>Sets the icon for a shortcut to the object.</summary>
            <param name="pszFile">
            A pointer to a buffer that contains the full icon path, including the file name and extension, as a Unicode string. This
            pointer can be NULL.
            </param>
            <param name="iIcon">Shell icon ID.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IDefaultExtractIconInit.SetDefaultIcon(System.String,System.Int32)">
            <summary>Sets the default icon.</summary>
            <param name="pszFile">
            A pointer to a buffer that contains the full icon path, including the file name and extension, as a Unicode string. This
            pointer can be NULL.
            </param>
            <param name="iIcon">The Shell icon ID.</param>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IEnumIDList">
            <summary>
            Exposes a standard set of methods used to enumerate the pointers to item identifier lists (PIDLs) of the items in a Shell
            folder. When a folder's IShellFolder::EnumObjects method is called, it creates an enumeration object and passes a pointer to the
            object's IEnumIDList interface back to the calling application.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IEnumIDList.Next(System.UInt32,System.IntPtr[],System.UInt32@)">
            <summary>
            Retrieves the specified number of item identifiers in the enumeration sequence and advances the current position by the
            number of items retrieved.
            </summary>
            <param name="celt">The number of elements in the array referenced by the rgelt parameter.</param>
            <param name="rgelt">
            The address of a pointer to an array of ITEMIDLIST pointers that receive the item identifiers. The implementation must
            allocate these item identifiers using CoTaskMemAlloc. The calling application is responsible for freeing the item
            identifiers using CoTaskMemFree.
            </param>
            <param name="pceltFetched">
            A pointer to a value that receives a count of the item identifiers actually returned in rgelt. The count can be smaller than
            the value specified in the celt parameter. This parameter can be NULL on entry only if celt = 1, because in that case the
            method can only retrieve one (S_OK) or zero (S_FALSE) items.
            </param>
            <returns>
            Returns S_OK if the method successfully retrieved the requested celt elements. This method only returns S_OK if the full
            count of requested items are successfully retrieved. S_FALSE indicates that more items were requested than remained in the
            enumeration.The value pointed to by the pceltFetched parameter specifies the actual number of items retrieved. Note that the
            value will be 0 if there are no more items to retrieve.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IEnumIDList.Skip(System.UInt32)">
            <summary>Skips the specified number of elements in the enumeration sequence.</summary>
            <param name="celt">The number of item identifiers to skip.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IEnumIDList.Reset">
            <summary>Returns to the beginning of the enumeration sequence.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IEnumIDList.Clone">
            <summary>Creates a new item enumeration object with the same contents and state as the current one.</summary>
            <returns>
            The address of a pointer to the new enumeration object. The calling application must eventually free the new object by
            calling its Release member function.
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IEnumFullIDList">
            <summary>
            Exposes a standard set of methods that enumerate the pointers to item identifier lists (PIDLs) of the items in a Shell folder.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IEnumFullIDList.Next(System.UInt32,System.IntPtr[],System.UInt32@)">
            <summary>Retrieves a specified number of IDLIST_ABSOLUTE items.</summary>
            <param name="celt">
            <para>Type: <c>ULONG</c></para>
            <para>The number of items referenced in the array referenced by the rgelt parameter.</para>
            </param>
            <param name="rgelt">
            <para>Type: <c>PIDLIST_ABSOLUTE*</c></para>
            <para>
            On success, contains a PIDL array. The implementation must allocate these item identifiers using CoTaskMemAlloc. The calling
            application is responsible for freeing the item identifiers using CoTaskMemFree.
            </para>
            </param>
            <param name="pceltFetched">
            <para>Type: <c>ULONG*</c></para>
            <para>
            On success, contains a pointer to a value that receives a count of the absolute item identifiers actually returned in rgelt.
            The count can be smaller than the value specified in the celt parameter. This parameter can be <c>NULL</c> on entry only if
            celt is 1, because in that case the method can only retrieve one (S_OK) or zero (S_FALSE) items.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>
            Returns S_OK if the method successfully retrieved the requested celt elements. This method only returns S_OK if the full
            count of requested items are successfully retrieved.
            </para>
            <para>
            S_FALSE indicates that more items were requested than remained in the enumeration. The value pointed to by the pceltFetched
            parameter specifies the actual number of items retrieved. Note that the value will be 0 if there are no more items to retrieve.
            </para>
            <para>Returns a COM-defined error value otherwise.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IEnumFullIDList.Skip(System.UInt32)">
            <summary>Skips a specified number of IDLIST_ABSOLUTE items.</summary>
            <param name="celt">
            <para>Type: <c>ULONG</c></para>
            <para>The number of items to skip.</para>
            </param>
            <remarks>The enumeration index is advanced by the number of items skipped.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IEnumFullIDList.Reset">
            <summary>Returns the enumerator to the beginning of the enumeration sequence.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IEnumFullIDList.Clone">
            <summary>Creates a new item enumeration object with the same contents and state as the current one.</summary>
            <returns>
            <para>Type: <c>IEnumFullIDList**</c></para>
            <para>On success, contains the address of an IEnumFullIDList interface pointer.</para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IFileIsInUse">
            <summary>
            Exposes methods that can be called to get information on or close a file that is in use by another application. When an
            application attempts to access a file and finds that file already in use, it can use the methods of this interface to gather
            information to present to the user in a dialog box.
            </summary>
            <remarks>
            <para>
            In versions of Windows before Windows Vista, when a user attempted to access a file that was open in another application, the
            user would simply receive a dialog box with a message stating that the file was already open. The message instructed that the
            user close the other application, but did not identify it. Other than that suggestion, the dialog box provided no user action to
            address the situation. This interface provides methods that can lead to a more informative dialog box from which the user can
            take direct action.
            </para>
            <para>The Running Object Table</para>
            <para>
            When an application opens a file, that application registers the file by inserting the instantiated <c>IFileIsInUse</c> object
            into the running object table (ROT). The ROT is a globally accessible lookup table that keeps track of currently running
            objects. These objects can be identified by a moniker. When a client attempts to bind a moniker to an object, the moniker checks
            the ROT to determine whether the object is already running. This allows the moniker to bind to the current instance rather than
            loading a new instance.
            </para>
            <para>Perform these steps to add a file to the ROT:</para>
            <list type="number">
            <item>
            <term>Call the GetRunningObjectTable function to retrieve an instance of IRunningObjectTable.</term>
            </item>
            <item>
            <term>Create an <c>IFileIsInUse</c> object for the file that is currently in use.</term>
            </item>
            <item>
            <term>Create an IMoniker object for the file that is currently in use.</term>
            </item>
            <item>
            <term>Insert the <c>IFileIsInUse</c> and IMoniker objects into the ROT by calling IRunningObjectTable::Register.</term>
            </item>
            </list>
            <para>
            In the call to Register, specify the <c>ROTFLAGS_ALLOWANYCLIENT</c> flag. This allows the ROT entry to work across security
            boundaries. Use of this flag requires the calling application to have an explicit Application User Model ID (AppUserModelID)
            (System.AppUserModel.ID). An explicit AppUserModelID allows the Component Object Model (COM) to inspect the application's
            security settings. An attempt to call <c>Register</c> with ROTFLAGS_ALLOWANYCLIENT and no explicit AppUserModelID will fail. You
            can call <c>Register</c> without the ROTFLAGS_ALLOWANYCLIENT flag and the application will work correctly, but only within its
            own security level.
            </para>
            <para>
            The value retrieved in the Register method's [out] parameter is used to identify the entry in later calls to retrieve or remove
            it from the ROT.
            </para>
            <para>When to Implement</para>
            <para>
            Applications that open file types that can be opened by other applications should implement <c>IFileIsInUse</c>. An
            application's implementation of this interface enables Windows Explorer to discover the source of sharing errors, which enables
            users to address and retry operations that fail due to those errors.
            </para>
            <para>When to Use</para>
            <para>
            An application calls <c>IFileIsInUse</c> to communicate with other applications to resolve sharing errors. These errors occur in
            response to user action in the file system. For example, when a user attempts to rename a folder while a file in that folder is
            open in an application, the renaming operation fails. Windows Explorer can call that appplication's implementation of
            <c>IFileIsInUse</c> to help the user identify the conflict and resolve this issue.
            </para>
            <para>Sample</para>
            <para>
            See the File Is in Use sample, which demonstrates how to implement <c>IFileIsInUse</c> and register a file with the ROT. It then
            shows how to customize the <c>File In Use</c> dialog to display additional information and options for files currently opened in
            an application.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileIsInUse.GetAppName(System.String@)">
            <summary>Retrieves the name of the application that is using the file.</summary>
            <param name="ppszName">
            <para>Type: <c>LPWSTR*</c></para>
            <para>The address of a pointer to a buffer that, when this method returns successfully, receives the application name.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            This information can be passed to the user in a dialog box so that the user knows the source of the conflict and can act
            accordingly. For instance "File.txt is in use by Litware."
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileIsInUse.GetUsage(Vanara.PInvoke.Shell32.FILE_USAGE_TYPE@)">
            <summary>Gets a value that indicates how the file in use is being used.</summary>
            <param name="pfut">
            <para>Type: <c>FILE_USAGE_TYPE*</c></para>
            <para>Pointer to a value that, when this method returns successfully, receives one of the FILE_USAGE_TYPE values.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileIsInUse.GetCapabilities(Vanara.PInvoke.Shell32.OF_CAP@)">
            <summary>
            Determines whether the file can be closed and whether the UI is capable of switching to the window of the application that
            is using the file.
            </summary>
            <param name="pdwCapFlags">
            <para>Type: <c>DWORD*</c></para>
            <para>
            A pointer to a value that, when this method returns successfully, receives the capability flags. One or both of the
            following values:
            </para>
            <para>OF_CAP_CANSWITCHTO (0x0001)</para>
            <para>0x0001. The UI can switch to the top-level window of the application that is using the file.</para>
            <para>OF_CAP_CANCLOSE (0x0002)</para>
            <para>0x0002. The file can be closed.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            The capabilities returned by this method can be used in the composition of the dialog box presented to the user that informs
            them of the sharing conflict. For instance, if the OF_CAP_CANSWITCHTO flag is retrieved, a button can be added to the dialog
            box that will switch the user to the conflicting application window (based on the <c>HWND</c> information retrieved by
            IFileIsInUse::GetSwitchToHWND) so that the user can address the situation as they see fit. If the OF_CAP_CANCLOSE flag is
            retrieved, the dialog box can present a <c>Close</c> button that calls the CloseFile method.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileIsInUse.GetSwitchToHWND(Vanara.PInvoke.HWND@)">
            <summary>Retrieves the handle of the top-level window of the application that is using the file.</summary>
            <param name="phwnd">
            <para>Type: <c>HWND*</c></para>
            <para>A pointer to an <c>HWND</c> value that, when this method returns successfully, receives the window handle.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>Only files that return the capability flag OF_CAP_CANSWITCHTO can be switched to.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileIsInUse.CloseFile">
            <summary>Closes the file currently in use.</summary>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            Only files that return the capability flag OF_CAP_CANCLOSE can be closed by this method. If that flag is returned, the user
            can be presented with a dialog box that includes a <c>Close</c> option that calls this method.
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IFileSystemBindData">
            <summary>Exposes methods that store file system information for optimizing calls to IShellFolder::ParseDisplayName.</summary>
            <remarks>
            <para>
            <c>IFileSystemBindData</c> stores the file system information in a WIN32_FIND_DATA structure. The object that implements
            <c>IFileSystemBindData</c> is then stored in a bind context that is passed to IShellFolder::ParseDisplayName.
            </para>
            <para>
            Implement <c>IFileSystemBindData</c> when you want to optimize calls to IShellFolder::ParseDisplayName and you already have the
            WIN32_FIND_DATA structure's file information available to you.
            </para>
            <para>
            To store the WIN32_FIND_DATA information prior to calling IShellFolder::ParseDisplayName, the client uses the following procedure.
            </para>
            <list type="number">
            <item>
            <term>Create an instance of the object that exposes the <c>IFileSystemBindData</c> interface.</term>
            </item>
            <item>
            <term>Use IFileSystemBindData::SetFindData to store the data in the object.</term>
            </item>
            <item>
            <term>
            Store the object in a bind context through the IBindCtx::RegisterObjectParam method. Set the pszKey parameter to the string and
            the punk parameter to the address of the <c>IFileSystemBindData</c> interface.
            </term>
            </item>
            </list>
            <para>The bind context is then passed with the call to IShellFolder::ParseDisplayName.</para>
            <para><c>Note</c> Prior to Windows Vista this interface was declared in Shlobj.h.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileSystemBindData.SetFindData(Vanara.PInvoke.WIN32_FIND_DATA@)">
            <summary>Stores file system information in a WIN32_FIND_DATA structure. This information is used by ParseDisplayName.</summary>
            <param name="pfd">
            <para>Type: <c>const WIN32_FIND_DATA*</c></para>
            <para>A pointer to the WIN32_FIND_DATA structure that specifies the data you want to store.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>Always returns <c>S_OK</c>.</para>
            </returns>
            <remarks>
            After the client stores the file information, the instance of the object itself must be stored in a bind context by using
            the IBindCtx::RegisterObjectParam method with the pszKey parameter set to .
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileSystemBindData.GetFindData(Vanara.PInvoke.WIN32_FIND_DATA@)">
            <summary>Gets the file system information stored in the WIN32_FIND_DATA structure.</summary>
            <param name="pfd">
            <para>Type: <c>WIN32_FIND_DATA*</c></para>
            <para>A pointer to the WIN32_FIND_DATA structure that receives the data.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>Returns S_OK.</para>
            </returns>
            <remarks>
            This method provides bind context information to IShellFolder::ParseDisplayName. The client accesses the object by calling
            IBindCtx::GetObjectParam with the pszKey parameter set to the string "File System Bind Data".
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IFileSystemBindData2">
            <summary>
            Extends IFileSystemBindData, which stores file system information for optimizing calls to IShellFolder::ParseDisplayName. This
            interface adds the ability set or get file ID or junction class identifier (CLSID).
            </summary>
            <remarks>
            <para>This interface also provides the methods of the IFileSystemBindData interface, from which it inherits.</para>
            <para>
            To pass the information expressed in this interface to a data source IShellFolder::ParseDisplayName, an IBindCtx object is
            created (use CreateBindCtx) and populated with an object that implements IFileSystemBindData by calling the following:
            </para>
            <para>Where pfsbd is the object that implements <c>IFileSystemBindData</c>.</para>
            <para>Implementers of IShellFolder::ParseDisplayName first make the following call.</para>
            <para>Next the implementer calls one of the <c>Get</c> methods listed above to retrieve the parameters.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileSystemBindData2.SetFindData(Vanara.PInvoke.WIN32_FIND_DATA@)">
            <summary>Stores file system information in a WIN32_FIND_DATA structure. This information is used by ParseDisplayName.</summary>
            <param name="pfd">
            <para>Type: <c>const WIN32_FIND_DATA*</c></para>
            <para>A pointer to the WIN32_FIND_DATA structure that specifies the data you want to store.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>Always returns <c>S_OK</c>.</para>
            </returns>
            <remarks>
            After the client stores the file information, the instance of the object itself must be stored in a bind context by using
            the IBindCtx::RegisterObjectParam method with the pszKey parameter set to .
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileSystemBindData2.GetFindData(Vanara.PInvoke.WIN32_FIND_DATA@)">
            <summary>Gets the file system information stored in the WIN32_FIND_DATA structure.</summary>
            <param name="pfd">
            <para>Type: <c>WIN32_FIND_DATA*</c></para>
            <para>A pointer to the WIN32_FIND_DATA structure that receives the data.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>Returns S_OK.</para>
            </returns>
            <remarks>
            This method provides bind context information to IShellFolder::ParseDisplayName. The client accesses the object by calling
            IBindCtx::GetObjectParam with the pszKey parameter set to the string "File System Bind Data".
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileSystemBindData2.SetFileID(System.Int64)">
            <summary>Sets the unique file identifier for the current file.</summary>
            <param name="liFileID">
            <para>Type: <c>LARGE_INTEGER</c></para>
            <para>
            A unique file identifier for the current file. liFileID is a value that is a concatenation of the values nFileIndexHigh and
            nFileIndexlow, noted in structure _by_handle_file_information.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileSystemBindData2.GetFileID(System.Int64@)">
            <summary>Gets the unique file identifier for the current file.</summary>
            <param name="pliFileID">
            <para>Type: <c>LARGE_INTEGER*</c></para>
            <para>
            When this method returns successfully, receives a pointer to the unique file identifier for the current file. pliFileID is a
            pointer to a value that is a concatenation of the values nFileIndexHigh and nFileIndexlow, noted in structure _by_handle_file_information.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileSystemBindData2.SetJunctionCLSID(System.Guid@)">
            <summary>
            Sets the class identifier (CLSID) of the object that implements IShellFolder, if the current item is a junction point.
            </summary>
            <param name="clsid">
            <para>Type: <c>REFCLSID</c></para>
            <para>The CLSID for the object that implements IShellFolder with a junction point as its current item.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileSystemBindData2.GetJunctionCLSID(System.Guid@)">
            <summary>
            Gets the class identifier (CLSID) of the object that implements IShellFolder for the item, if the item is a junction point.
            </summary>
            <param name="pclsid">
            <para>Type: <c>CLSID*</c></para>
            <para>
            When this method returns successfully, receives a pointer to the CLSID of the object that implements IShellFolder for the
            current item, if the item is a junction point.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IPersistIDList">
            <summary>Exposes methods that are used to persist item identifier lists.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IPersistIDList.GetClassID">
            <summary>Retrieves the class identifier (CLSID) of the object.</summary>
            <returns>
            <para>
            A pointer to the location that receives the CLSID on return. The CLSID is a globally unique identifier (GUID) that uniquely
            represents an object class that defines the code that can manipulate the object's data.
            </para>
            <para>If the method succeeds, the return value is S_OK. Otherwise, it is E_FAIL.</para>
            </returns>
            <remarks>
            <para>
            The <c>GetClassID</c> method retrieves the class identifier (CLSID) for an object, used in later operations to load
            object-specific code into the caller's context.
            </para>
            <para>Notes to Callers</para>
            <para>
            A container application might call this method to retrieve the original CLSID of an object that it is treating as a
            different class. Such a call would be necessary if a user performed an editing operation that required the object to be
            saved. If the container were to save it using the treat-as CLSID, the original application would no longer be able to edit
            the object. Typically, in this case, the container calls the OleSave helper function, which performs all the necessary
            steps. For this reason, most container applications have no need to call this method directly.
            </para>
            <para>
            The exception would be a container that provides an object handler for certain objects. In particular, a container
            application should not get an object's CLSID and then use it to retrieve class specific information from the registry.
            Instead, the container should use IOleObject and IDataObject interfaces to retrieve such class-specific information directly
            from the object.
            </para>
            <para>Notes to Implementers</para>
            <para>
            Typically, implementations of this method simply supply a constant CLSID for an object. If, however, the object's
            <c>TreatAs</c> registry key has been set by an application that supports emulation (and so is treating the object as one of
            a different class), a call to <c>GetClassID</c> must supply the CLSID specified in the <c>TreatAs</c> key. For more
            information on emulation, see CoTreatAsClass.
            </para>
            <para>
            When an object is in the running state, the default handler calls an implementation of <c>GetClassID</c> that delegates the
            call to the implementation in the object. When the object is not running, the default handler instead calls the ReadClassStg
            function to read the CLSID that is saved in the object's storage.
            </para>
            <para>
            If you are writing a custom object handler for your object, you might want to simply delegate this method to the default
            handler implementation (see OleCreateDefaultHandler).
            </para>
            <para>URL Moniker Notes</para>
            <para>This method returns CLSID_StdURLMoniker.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IPersistIDList.SetIDList(Vanara.PInvoke.Shell32.PIDL)">
            <summary>Sets a persisted item identifier list.</summary>
            <param name="pidl">
            <para>Type: <c>LPCITEMIDLIST</c></para>
            <para>A pointer to the item identifier list to set.</para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IPersistIDList.GetIDList(Vanara.PInvoke.Shell32.PIDL@)">
            <summary>Gets an item identifier list.</summary>
            <param name="ppidl">
            <para>Type: <c>LPITEMIDLIST*</c></para>
            <para>The address of a pointer to the item identifier list to get.</para>
            </param>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IQueryInfo">
            <summary>
            Exposes methods that the Shell uses to retrieve flags and info tip information for an item that resides in an IShellFolder
            implementation. Info tips are usually displayed inside a tooltip control.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IQueryInfo.GetInfoTip(Vanara.PInvoke.Shell32.QITIP,System.String@)">
            <summary>Gets the information tip.</summary>
            <param name="dwFlags">
            Flags that direct the handling of the item from which you're retrieving the info tip text. This value is commonly zero (QITIPF_DEFAULT).
            </param>
            <param name="ppwszTip">
            The address of a Unicode string pointer that, when this method returns successfully, receives the tip string pointer.
            Applications that implement this method must allocate memory for ppwszTip by calling CoTaskMemAlloc. Calling applications
            must call CoTaskMemFree to free the memory when it is no longer needed.
            </param>
            &gt;
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IQueryInfo.GetInfoFlags">
            <summary>Gets the information flags for an item. This method is not currently used.</summary>
            <returns>
            A pointer to a value that receives the flags for the item. If no flags are to be returned, this value should be set to zero.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.Enumerate(Vanara.PInvoke.Shell32.IEnumIDList,System.Int32)">
            <summary>Enumerates the specified <see cref="T:Vanara.PInvoke.Shell32.IEnumIDList"/> instance with an optional fetch size.</summary>
            <param name="idList">The identifier list to enumerate. If this value is <see langword="null"/>, this will return an empty set.</param>
            <param name="fetchSize">Size of the block of PIDL instances to fetch with a single call.</param>
            <returns>A sequence of <see cref="T:Vanara.PInvoke.Shell32.PIDL"/> instances from <paramref name="idList"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">fetchSize - You must specify a number greater than or equal to 1.</exception>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.GetCurrentProcessExplicitAppUserModelID(System.String@)">
            <summary>Retrieves the User Model AppID that has been explicitly set for the current process via SetCurrentProcessExplicitAppUserModelID</summary>
            <param name="AppID">The application identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ILClone(System.IntPtr)">
            <summary>Clones an ITEMIDLIST structure.</summary>
            <param name="pidl">A pointer to the ITEMIDLIST structure to be cloned.</param>
            <returns>Returns a pointer to a copy of the ITEMIDLIST structure pointed to by pidl.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ILCloneFirst(System.IntPtr)">
            <summary>Clones the first SHITEMID structure in an ITEMIDLIST structure.</summary>
            <param name="pidl">A pointer to the ITEMIDLIST structure to be cloned.</param>
            <returns>
            A pointer to an ITEMIDLIST structure that contains the first SHITEMID structure from the ITEMIDLIST structure specified by pidl.
            Returns NULL on failure.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ILCombine(System.IntPtr,System.IntPtr)">
            <summary>Combines two ITEMIDLIST structures.</summary>
            <param name="pidl1">A pointer to the first ITEMIDLIST structure.</param>
            <param name="pidl2">
            A pointer to the second ITEMIDLIST structure. This structure is appended to the structure pointed to by pidl1.
            </param>
            <returns>
            Returns an ITEMIDLIST containing the combined structures. If you set either pidl1 or pidl2 to NULL, the returned ITEMIDLIST
            structure is a clone of the non-NULL parameter. Returns NULL if pidl1 and pidl2 are both set to NULL.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ILCreateFromPath(System.String)">
            <summary>Returns the ITEMIDLIST structure associated with a specified file path.</summary>
            <param name="pszPath">
            A pointer to a null-terminated Unicode string that contains the path. This string should be no more than MAX_PATH characters in
            length, including the terminating null character.
            </param>
            <returns>Returns a pointer to an ITEMIDLIST structure that corresponds to the path.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ILFindLastID(System.IntPtr)">
            <summary>Returns a pointer to the last SHITEMID structure in an ITEMIDLIST structure.</summary>
            <param name="pidl">A pointer to an ITEMIDLIST structure.</param>
            <returns>A pointer to the last SHITEMID structure in pidl.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ILFree(System.IntPtr)">
            <summary>Frees an ITEMIDLIST structure allocated by the Shell.</summary>
            <param name="pidl">A pointer to the ITEMIDLIST structure to be freed. This parameter can be NULL.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ILGetItemSize(System.IntPtr)">
            <summary>Returns the size, in bytes, of an SHITEMID structure.</summary>
            <param name="pidl">A pointer to an SHITEMID structure.</param>
            <returns>The size of the SHITEMID structure specified by pidl, in bytes.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ILGetNext(System.IntPtr)">
            <summary>Retrieves the next SHITEMID structure in an ITEMIDLIST structure.</summary>
            <param name="pidl">A pointer to a particular SHITEMID structure in a larger ITEMIDLIST structure.</param>
            <returns>
            Returns a pointer to the SHITEMID structure that follows the one specified by pidl. Returns NULL if pidl points to the last
            SHITEMID structure.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ILGetSize(System.IntPtr)">
            <summary>Returns the size, in bytes, of an ITEMIDLIST structure.</summary>
            <param name="pidl">A pointer to an ITEMIDLIST structure.</param>
            <returns>The size of the ITEMIDLIST structure specified by pidl, in bytes.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ILIsChild(System.IntPtr)">
            <summary>Verifies whether a pointer to an item identifier list (PIDL) is a child PIDL, which is a PIDL with exactly one SHITEMID.</summary>
            <param name="pidl">A constant, unaligned, relative PIDL that is being checked.</param>
            <returns>Returns TRUE if the given PIDL is a child PIDL; otherwise, FALSE.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ILIsEmpty(System.IntPtr)">
            <summary>Verifies whether an ITEMIDLIST structure is empty.</summary>
            <param name="pidl">A pointer to the ITEMIDLIST structure to be checked.</param>
            <returns>TRUE if the pidl parameter is NULL or the ITEMIDLIST structure pointed to by pidl is empty; otherwise FALSE.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ILIsEqual(System.IntPtr,System.IntPtr)">
            <summary>Tests whether two ITEMIDLIST structures are equal in a binary comparison.</summary>
            <param name="pidl1">The first ITEMIDLIST structure.</param>
            <param name="pidl2">The second ITEMIDLIST structure.</param>
            <returns>Returns TRUE if the two structures are equal, FALSE otherwise.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ILIsParent(System.IntPtr,System.IntPtr,System.Boolean)">
            <summary>Tests whether an ITEMIDLIST structure is the parent of another ITEMIDLIST structure.</summary>
            <param name="pidl1">A pointer to an ITEMIDLIST (PIDL) structure that specifies the parent. This must be an absolute PIDL.</param>
            <param name="pidl2">A pointer to an ITEMIDLIST (PIDL) structure that specifies the child. This must be an absolute PIDL.</param>
            <param name="fImmediate">
            A Boolean value that is set to TRUE to test for immediate parents of pidl2, or FALSE to test for any parents of pidl2.
            </param>
            <returns>
            Returns TRUE if pidl1 is a parent of pidl2. If fImmediate is set to TRUE, the function only returns TRUE if pidl1 is the
            immediate parent of pidl2. Otherwise, the function returns FALSE.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ILNext(System.IntPtr)">
            <summary>Retrieves the next SHITEMID structure in an ITEMIDLIST structure.</summary>
            <param name="pidl">A constant, unaligned, relative PIDL for which the next SHITEMID structure is being retrieved.</param>
            <returns>
            When this function returns, contains one of three results: If pidl is valid and not the last SHITEMID in the ITEMIDLIST, then it
            contains a pointer to the next ITEMIDLIST structure. If the last ITEMIDLIST structure is passed, it contains NULL, which signals
            the end of the PIDL. For other values of pidl, the return value is meaningless.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ILRemoveLastID(System.IntPtr)">
            <summary>Removes the last SHITEMID structure from an ITEMIDLIST structure.</summary>
            <param name="pidl">
            A pointer to the ITEMIDLIST structure to be shortened. When the function returns, this variable points to the shortened structure.
            </param>
            <returns>Returns TRUE if successful, FALSE otherwise.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IntILCreateFromPath(System.String)">
            <summary>Returns the ITEMIDLIST structure associated with a specified file path.</summary>
            <param name="pszPath">
            A pointer to a null-terminated Unicode string that contains the path. This string should be no more than MAX_PATH characters in
            length, including the terminating null character.
            </param>
            <returns>Returns a pointer to an ITEMIDLIST structure that corresponds to the path.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SetCurrentProcessExplicitAppUserModelID(System.String)">
            <summary>
            Specifies a unique application-defined Application User Model ID (AppUserModelID) that identifies the current process to the
            taskbar. This identifier allows an application to group its associated processes and windows under a single taskbar button.
            </summary>
            <param name="AppID">Pointer to the AppUserModelID to assign to the current process.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHAssocEnumHandlers(System.String,Vanara.PInvoke.Shell32.ASSOC_FILTER,Vanara.PInvoke.Shell32.IEnumAssocHandlers@)">
            <summary>
            <para>Returns an enumeration object for a specified set of file name extension handlers.</para>
            </summary>
            <param name="pszExtra">
            <para>Type: <c>PCWSTR</c></para>
            <para>
            A pointer to a null-terminated buffer that contains a single file type extension, for instance ".jpg". Only handlers associated
            with the given extension are enumerated. If this value is <c>NULL</c>, all handlers for all extensions are enumerated.
            </para>
            </param>
            <param name="afFilter">
            <para>Type: <c>ASSOC_FILTER</c></para>
            <para>
            Specifies the enumeration handler filter applied to the full list of handlers that results from the value given in . One of the
            following values.
            </para>
            <para>ASSOC_FILTER_NONE</para>
            <para>Return all handlers.</para>
            <para>ASSOC_FILTER_RECOMMENDED</para>
            <para>
            Return only recommended handlers. A handler sets its recommended status in the registry when it is installed. An initial status
            of non-recommended can later be promoted to recommended as a result of user action.
            </para>
            </param>
            <param name="ppEnumHandler">
            <para>Type: <c>IEnumAssocHandlers**</c></para>
            <para>When this method returns, contains the address of a pointer to an IEnumAssocHandlers object.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this function succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHAssocEnumHandlersForProtocolByApplication(System.String,System.Guid@,System.Object@)">
            <summary>
            <para>Gets an enumeration interface that provides access to handlers associated with a given protocol.</para>
            </summary>
            <param name="protocol">
            <para>Type: <c>PCWSTR</c></para>
            <para>Pointer to a string that specifies the protocol.</para>
            </param>
            <param name="riid">
            <para>Type: <c>REFIID</c></para>
            <para>A reference to the IID of the interface to retrieve through , typically IID_IEnumAssocHandlers.</para>
            </param>
            <param name="enumHandlers">
            <para>Type: <c>void**</c></para>
            <para>When this method returns, contains the interface pointer requested in . This is typically IEnumAssocHandlers.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this function succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            <para>
            It is recommended that you use the <c>IID_PPV_ARGS</c> macro, defined in Objbase.h, to package the and parameters. This macro
            provides the correct IID based on the interface pointed to by the value in , which eliminates the possibility of a coding error.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHAssocEnumHandlersForProtocolByApplication``1(System.String)">
            <summary>Gets an enumeration interface that provides access to handlers associated with a given protocol.</summary>
            <typeparam name="TIntf">The type of the interface to retrieve, typically IID_IEnumAssocHandlers.</typeparam>
            <param name="protocol">
            <para>Type: <c>PCWSTR</c></para>
            <para>Pointer to a string that specifies the protocol.</para>
            </param>
            <returns>
            When this method returns, contains the interface pointer requested in <typeparamref name="TIntf"/>. This is typically IEnumAssocHandlers.
            </returns>
            <remarks>
            It is recommended that you use the <c>IID_PPV_ARGS</c> macro, defined in Objbase.h, to package the and parameters. This macro
            provides the correct IID based on the interface pointed to by the value in , which eliminates the possibility of a coding error.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHCreateAssociationRegistration(System.Guid@,Vanara.PInvoke.Shell32.IApplicationAssociationRegistration@)">
            <summary>
            Creates an IApplicationAssociationRegistration object based on the stock implementation of the interface provided by Windows.
            </summary>
            <param name="riid">
            <para>Type: <c>REFIID</c></para>
            <para>A reference to the IID of the requested interface.</para>
            </param>
            <param name="ppv">
            <para>Type: <c>void**</c></para>
            <para>When this function returns, contains the address of a pointer to the IApplicationAssociationRegistration object.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this function succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHCreateAssociationRegistration">
            <summary>
            Creates an IApplicationAssociationRegistration object based on the stock implementation of the interface provided by Windows.
            </summary>
            <returns>When this function returns, contains the address of a pointer to the IApplicationAssociationRegistration object.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHCreateDefaultExtractIcon(System.Guid@,Vanara.PInvoke.Shell32.IDefaultExtractIconInit@)">
            <summary>
            <para>Creates a standard icon extractor, whose defaults can be further configured via the IDefaultExtractIconInit interface.</para>
            </summary>
            <param name="riid">
            <para>Type: <c>REFIID</c></para>
            <para>A reference to interface ID.</para>
            </param>
            <param name="ppv">
            <para>Type: <c>void**</c></para>
            <para>The address of IDefaultExtractIconInit interface pointer.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this function succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            <para>The intended usage for this function is as follows:</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHCreateDefaultPropertiesOp(Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.Shell32.IFileOperation@)">
            <summary>
            <para>Creates a file operation that sets the default properties on the Shell item that have not already been set.</para>
            </summary>
            <param name="psi">
            <para>Type: <c>IShellItem*</c></para>
            <para>A pointer to the source shell item. See IShellItem.</para>
            </param>
            <param name="ppFileOp">
            <para>Type: <c>IFileOperation**</c></para>
            <para>The address of the IFileOperation interface pointer.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this function succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            <para>
            The list of properties to set a default value comes from the <c>SetDefaultsFor</c> registry entry under the ProgID for the file
            association of the item. The list is prefixed by and contains the canonical names of the properties to set the default value,
            for example, . The possible properties for this list are System.Author, System.Document.DateCreated, and System.Photo.DateTaken.
            If the <c>SetDefaultsFor</c> entry does not exist on the ProgID, this function uses the default found on the
            <c>SetDefaultsFor</c> entry of <c>HKEY_CLASSES_ROOT</c>&lt;b&gt;*.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHCreateItemFromIDList(Vanara.PInvoke.Shell32.PIDL,System.Guid@,System.Object@)">
            <summary>
            Creates and initializes a Shell item object from a pointer to an item identifier list (PIDL). The resulting shell item object
            supports the IShellItem interface.
            </summary>
            <param name="pidl">The source PIDL.</param>
            <param name="riid">A reference to the IID of the requested interface.</param>
            <param name="ppv">
            When this function returns, contains the interface pointer requested in riid. This will typically be IShellItem or IShellItem2.
            </param>
            <returns>If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHCreateItemFromIDList``1(Vanara.PInvoke.Shell32.PIDL)">
            <summary>
            Creates and initializes a Shell item object from a pointer to an item identifier list (PIDL). The resulting shell item object
            supports the IShellItem interface.
            </summary>
            <typeparam name="TIntf">The type of the requested interface. This will typically be IShellItem or IShellItem2.</typeparam>
            <param name="pidl">The source PIDL.</param>
            <returns>When this function returns, contains the interface pointer requested.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHCreateItemFromParsingName(System.String,System.Runtime.InteropServices.ComTypes.IBindCtx,System.Guid@,System.Object@)">
            <summary>Creates and initializes a Shell item object from a parsing name.</summary>
            <param name="pszPath">A pointer to a display name.</param>
            <param name="pbc">
            Optional. A pointer to a bind context used to pass parameters as inputs and outputs to the parsing function. These passed
            parameters are often specific to the data source and are documented by the data source owners. For example, the file system data
            source accepts the name being parsed (as a WIN32_FIND_DATA structure), using the STR_FILE_SYS_BIND_DATA bind context parameter.
            <para>
            STR_PARSE_PREFER_FOLDER_BROWSING can be passed to indicate that URLs are parsed using the file system data source when
            possible.Construct a bind context object using CreateBindCtx and populate the values using IBindCtx::RegisterObjectParam. See
            Bind Context String Keys for a complete list of these.See the Parsing With Parameters Sample for an example of the use of this parameter.
            </para>
            <para>If no data is being passed to or received from the parsing function, this value can be NULL.</para>
            </param>
            <param name="riid">A reference to the IID of the interface to retrieve through ppv, typically IID_IShellItem or IID_IShellItem2.</param>
            <param name="ppv">
            When this method returns successfully, contains the interface pointer requested in riid. This is typically IShellItem or IShellItem2.
            </param>
            <returns>If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHCreateItemFromParsingName``1(System.String,System.Runtime.InteropServices.ComTypes.IBindCtx)">
            <summary>Creates and initializes a Shell item object from a parsing name.</summary>
            <typeparam name="T">The type of the interface to retrieve, typically IID_IShellItem or IID_IShellItem2.</typeparam>
            <param name="pszPath">A pointer to a display name.</param>
            <param name="pbc">
            Optional. A pointer to a bind context used to pass parameters as inputs and outputs to the parsing function. These passed
            parameters are often specific to the data source and are documented by the data source owners. For example, the file system data
            source accepts the name being parsed (as a WIN32_FIND_DATA structure), using the STR_FILE_SYS_BIND_DATA bind context parameter.
            <para>
            STR_PARSE_PREFER_FOLDER_BROWSING can be passed to indicate that URLs are parsed using the file system data source when
            possible.Construct a bind context object using CreateBindCtx and populate the values using IBindCtx::RegisterObjectParam. See
            Bind Context String Keys for a complete list of these.See the Parsing With Parameters Sample for an example of the use of this parameter.
            </para>
            <para>If no data is being passed to or received from the parsing function, this value can be NULL.</para>
            </param>
            <returns>
            When this method returns successfully, contains the interface pointer requested in <typeparamref name="T"/>. This is typically
            IShellItem or IShellItem2.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHCreateItemFromRelativeName(Vanara.PInvoke.Shell32.IShellItem,System.String,System.Runtime.InteropServices.ComTypes.IBindCtx,System.Guid@,System.Object@)">
            <summary>Creates and initializes a Shell item object from a relative parsing name.</summary>
            <param name="psiParent">A pointer to the parent Shell item.</param>
            <param name="pszName">
            A pointer to a null-terminated, Unicode string that specifies a display name that is relative to the psiParent.
            </param>
            <param name="pbc">A pointer to a bind context that controls the parsing operation. This parameter can be NULL.</param>
            <param name="riid">A reference to an interface ID.</param>
            <param name="ppv">
            When this function returns, contains the interface pointer requested in riid. This will usually be IShellItem or IShellItem2.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHCreateItemFromRelativeName``1(Vanara.PInvoke.Shell32.IShellItem,System.String,System.Runtime.InteropServices.ComTypes.IBindCtx)">
            <summary>Creates and initializes a Shell item object from a relative parsing name.</summary>
            <typeparam name="TIntf">The type of the requested interface. This will typically be IShellItem or IShellItem2.</typeparam>
            <param name="psiParent">A pointer to the parent Shell item.</param>
            <param name="pszName">
            A pointer to a null-terminated, Unicode string that specifies a display name that is relative to the psiParent.
            </param>
            <param name="pbc">A pointer to a bind context that controls the parsing operation. This parameter can be NULL.</param>
            <returns>
            When this function returns, contains the interface pointer requested in riid. This will usually be IShellItem or IShellItem2.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHCreateItemInKnownFolder(System.Guid@,Vanara.PInvoke.Shell32.KNOWN_FOLDER_FLAG,System.String,System.Guid@,System.Object@)">
            <summary>Creates a Shell item object for a single file that exists inside a known folder.</summary>
            <param name="kfid">A reference to the KNOWNFOLDERID, a GUID that identifies the folder that contains the item.</param>
            <param name="dwKFFlags">
            Flags that specify special options in the object retrieval. This value can be 0; otherwise, one or more of the KNOWN_FOLDER_FLAG values.
            </param>
            <param name="pszItem">
            A pointer to a null-terminated buffer that contains the file name of the new item as a Unicode string. This parameter can also
            be NULL. In this case, an IShellItem that represents the known folder itself is created.
            </param>
            <param name="riid">A reference to an interface ID.</param>
            <param name="ppv">
            When this function returns, contains the interface pointer requested in riid. This will usually be IShellItem or IShellItem2.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHCreateItemInKnownFolder``1(Vanara.PInvoke.Shell32.KNOWNFOLDERID,Vanara.PInvoke.Shell32.KNOWN_FOLDER_FLAG,System.String)">
            <summary>Creates a Shell item object for a single file that exists inside a known folder.</summary>
            <typeparam name="TIntf">The type of the requested interface. This will typically be IShellItem or IShellItem2.</typeparam>
            <param name="kfid">A reference to the KNOWNFOLDERID that identifies the folder that contains the item.</param>
            <param name="dwKFFlags">
            Flags that specify special options in the object retrieval. This value can be 0; otherwise, one or more of the KNOWN_FOLDER_FLAG values.
            </param>
            <param name="pszItem">
            A pointer to a null-terminated buffer that contains the file name of the new item as a Unicode string. This parameter can also
            be NULL. In this case, an IShellItem that represents the known folder itself is created.
            </param>
            <returns>
            When this function returns, contains the interface pointer requested in riid. This will usually be IShellItem or IShellItem2.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHCreateItemWithParent(Vanara.PInvoke.Shell32.PIDL,Vanara.PInvoke.Shell32.IShellFolder,Vanara.PInvoke.Shell32.PIDL,System.Guid@,System.Object@)">
            <summary>Create a Shell item, given a parent folder and a child item ID.</summary>
            <param name="pidlParent">
            The IDList of the parent folder of the item being created; the IDList of psfParent. This parameter can be NULL, if psfParent is specified.
            </param>
            <param name="psfParent">
            A pointer to IShellFolder interface that specifies the shell data source of the child item specified by the pidl.This parameter
            can be NULL, if pidlParent is specified.
            </param>
            <param name="pidl">A child item ID relative to its parent folder specified by psfParent or pidlParent.</param>
            <param name="riid">A reference to an interface ID.</param>
            <param name="ppvItem">
            When this function returns, contains the interface pointer requested in riid. This will usually be IShellItem or IShellItem2.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHCreateItemWithParent``1(Vanara.PInvoke.Shell32.PIDL,Vanara.PInvoke.Shell32.PIDL)">
            <summary>Create a Shell item, given a parent folder and a child item ID.</summary>
            <typeparam name="TIntf">The type of the requested interface. This will typically be IShellItem or IShellItem2.</typeparam>
            <param name="pidlParent">
            The IDList of the parent folder of the item being created; the IDList of psfParent. This parameter cannot be NULL.
            </param>
            <param name="pidl">A child item ID relative to its parent folder specified by psfParent or pidlParent.</param>
            <returns>
            When this function returns, contains the interface pointer requested in riid. This will usually be IShellItem or IShellItem2.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHCreateItemWithParent``1(Vanara.PInvoke.Shell32.IShellFolder,Vanara.PInvoke.Shell32.PIDL)">
            <summary>Create a Shell item, given a parent folder and a child item ID.</summary>
            <typeparam name="TIntf">The type of the requested interface. This will typically be IShellItem or IShellItem2.</typeparam>
            <param name="psfParent">
            A pointer to IShellFolder interface that specifies the shell data source of the child item specified by the pidl. This parameter
            cannot be NULL.
            </param>
            <param name="pidl">A child item ID relative to its parent folder specified by psfParent or pidlParent.</param>
            <returns>
            When this function returns, contains the interface pointer requested in riid. This will usually be IShellItem or IShellItem2.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHCreateShellItemArray(Vanara.PInvoke.Shell32.PIDL,Vanara.PInvoke.Shell32.IShellFolder,System.UInt32,System.IntPtr[],Vanara.PInvoke.Shell32.IShellItemArray@)">
            <summary>Creates a Shell item array object.</summary>
            <param name="pidlParent">
            <para>Type: <c>PCIDLIST_ABSOLUTE</c></para>
            <para>
            The ID list of the parent folder of the items specified in ppidl. If psf is specified, this parameter can be <c>NULL</c>. If
            this pidlParent is not specified, it is computed from the psf parameter using IPersistFolder2.
            </para>
            </param>
            <param name="psf">
            <para>Type: <c>IShellFolder*</c></para>
            <para>
            The Shell data source object that is the parent of the child items specified in ppidl. If pidlParent is specified, this
            parameter can be <c>NULL</c>.
            </para>
            </param>
            <param name="cidl">
            <para>Type: <c>UINT</c></para>
            <para>The number of elements in the array specified by ppidl.</para>
            </param>
            <param name="ppidl">
            <para>Type: <c>PCUITEMID_CHILD_ARRAY</c></para>
            <para>The list of child item IDs for which the array is being created. This value can be <c>NULL</c>.</para>
            </param>
            <param name="ppsiItemArray">
            <para>Type: <c>IShellItemArray**</c></para>
            <para>When this function returns, contains the address of an IShellItemArray interface pointer.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this function succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHCreateShellItemArrayFromDataObject(System.Runtime.InteropServices.ComTypes.IDataObject,System.Guid@,Vanara.PInvoke.Shell32.IShellItemArray@)">
            <summary>
            <para>Creates a Shell item array object from a data object.</para>
            </summary>
            <param name="pdo">
            <para>Type: <c>IDataObject*</c></para>
            <para>A pointer to IDataObject interface.</para>
            </param>
            <param name="riid">
            <para>Type: <c>REFIID</c></para>
            <para>A reference to the desired interface ID.</para>
            </param>
            <param name="ppv">
            <para>Type: <c>void**</c></para>
            <para>When this method returns, contains the interface pointer requested in . This is typically IShellItemArray.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this function succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            <para>
            This function is useful for Shell extensions that implement IShellExtInit and are passed a data object to the
            IShellExtInit::Initialize method; for example, context menu handlers.
            </para>
            <para>
            This API lets you convert the data object into a Shell item that the handler can consume. It is recommend that handlers use a
            Shell item array rather than clipboard formats like <c>CF_HDROP</c> and <c>CFSTR_SHELLIDLIST</c> (also known as HIDA) as it
            leads to simpler code and allows some performance improvements.
            </para>
            <para>
            The resulting shell item array holds a reference to the source data object. Therefore, that data object must remain valid for
            the lifetime of the shell item array. Notably, the data objects passed to IDropTarget methods are no longer valid after the drop
            operation completes.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHCreateShellItemArrayFromDataObject(System.Runtime.InteropServices.ComTypes.IDataObject)">
            <summary>Creates a Shell item array object from a data object.</summary>
            <param name="pdo">
            <para>Type: <c>IDataObject*</c></para>
            <para>A pointer to IDataObject interface.</para>
            </param>
            <returns>When this method returns, contains the interface pointer requested. This is typically IShellItemArray.</returns>
            <remarks>
            <para>
            This function is useful for Shell extensions that implement IShellExtInit and are passed a data object to the
            IShellExtInit::Initialize method; for example, context menu handlers.
            </para>
            <para>
            This API lets you convert the data object into a Shell item that the handler can consume. It is recommend that handlers use a
            Shell item array rather than clipboard formats like <c>CF_HDROP</c> and <c>CFSTR_SHELLIDLIST</c> (also known as HIDA) as it
            leads to simpler code and allows some performance improvements.
            </para>
            <para>
            The resulting shell item array holds a reference to the source data object. Therefore, that data object must remain valid for
            the lifetime of the shell item array. Notably, the data objects passed to IDropTarget methods are no longer valid after the drop
            operation completes.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHCreateShellItemArrayFromIDLists(System.UInt32,System.IntPtr[],Vanara.PInvoke.Shell32.IShellItemArray@)">
            <summary>Creates a Shell item array object from a list of ITEMIDLIST structures.</summary>
            <param name="cidl">The number of elements in the array.</param>
            <param name="rgpidl">A list of cidl constant pointers to ITEMIDLIST structures.</param>
            <param name="ppsiItemArray">When this function returns, contains an IShellItemArray interface pointer.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHCreateShellItemArrayFromShellItem(Vanara.PInvoke.Shell32.IShellItem,System.Guid@,Vanara.PInvoke.Shell32.IShellItemArray@)">
            <summary>
            <para>Creates an array of one element from a single Shell item.</para>
            </summary>
            <param name="psi">
            <para>Type: <c>IShellItem*</c></para>
            <para>Pointer to IShellItem object that represents the item.</para>
            </param>
            <param name="riid">
            <para>Type: <c>REFIID</c></para>
            <para>A reference to the IID of the interface to retrieve through , typically IID_IShellItemArray.</para>
            </param>
            <param name="ppv">
            <para>Type: <c>void**</c></para>
            <para>When this method returns, contains the interface pointer requested in . This is typically a pointer to an IShellItemArray.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this function succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            <para>This function creates a one-element array from a single item. To create an array from the contents of a folder, use SHCreateShellItemArray.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHGetItemFromDataObject(System.Runtime.InteropServices.ComTypes.IDataObject,Vanara.PInvoke.Shell32.DATAOBJ_GET_ITEM_FLAGS,System.Guid@,System.Object@)">
            <summary>
            <para>Creates an IShellItem or related object based on an item specified by an IDataObject.</para>
            </summary>
            <param name="pdtobj">
            <para>Type: <c>IDataObject*</c></para>
            <para>A pointer to the source IDataObject instance.</para>
            </param>
            <param name="dwFlags">
            <para>Type: <c>DATAOBJ_GET_ITEM_FLAGS</c></para>
            <para>
            One or more values from the DATAOBJ_GET_ITEM_FLAGS enumeration to specify options regarding the target object. This value can be 0.
            </para>
            </param>
            <param name="riid">
            <para>Type: <c>REFIID</c></para>
            <para>A reference to the IID of the interface to retrieve through , typically IID_IShellItem.</para>
            </param>
            <param name="ppv">
            <para>Type: <c>void**</c></para>
            <para>When this method returns, contains the interface pointer requested in . This is typically IShellItem.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this function succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            <para>
            It is recommended that you use the <c>IID_PPV_ARGS</c> macro, defined in Objbase.h, to package the and parameters. This macro
            provides the correct IID based on the interface pointed to by the value in , which eliminates the possibility of a coding error.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHGetItemFromDataObject``1(System.Runtime.InteropServices.ComTypes.IDataObject,Vanara.PInvoke.Shell32.DATAOBJ_GET_ITEM_FLAGS)">
            <summary>Creates an IShellItem or related object based on an item specified by an IDataObject.</summary>
            <typeparam name="TIntf">The type of the requested interface. This will typically be IShellItem or IShellItem2.</typeparam>
            <param name="pdtobj">
            <para>Type: <c>IDataObject*</c></para>
            <para>A pointer to the source IDataObject instance.</para>
            </param>
            <param name="dwFlags">
            <para>Type: <c>DATAOBJ_GET_ITEM_FLAGS</c></para>
            <para>
            One or more values from the DATAOBJ_GET_ITEM_FLAGS enumeration to specify options regarding the target object. This value can be 0.
            </para>
            </param>
            <returns>When this method returns, contains the interface pointer requested. This is typically IShellItem.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHGetItemFromObject(System.Object,System.Guid@,System.Object@)">
            <summary>
            <para>Retrieves an IShellItem for an object.</para>
            </summary>
            <param name="punk">
            <para>Type: <c>IUnknown*</c></para>
            <para>A pointer to the IUnknown of the object.</para>
            </param>
            <param name="riid">
            <para>Type: <c>REFIID</c></para>
            <para>Reference to the desired IID.</para>
            </param>
            <param name="ppv">
            <para>Type: <c>void**</c></para>
            <para>When this method returns, contains the interface pointer requested in . This is typically IShellItem or a related interface.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this function succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            <para>
            From the standpoint of performance, this method is preferred to SHGetIDListFromObject in those cases where the IDList is already
            bound to a folder.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHGetItemFromObject``1(System.Object)">
            <summary>Retrieves an IShellItem for an object.</summary>
            <typeparam name="TIntf">The type of the requested interface. This is typically IShellItem or a related interface.</typeparam>
            <param name="punk">
            <para>Type: <c>IUnknown*</c></para>
            <para>A pointer to the IUnknown of the object.</para>
            </param>
            <returns>When this method returns, contains the interface pointer requested. This is typically IShellItem or a related interface.</returns>
            <remarks>
            From the standpoint of performance, this method is preferred to SHGetIDListFromObject in those cases where the IDList is already
            bound to a folder.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHGetPropertyStoreFromIDList(Vanara.PInvoke.Shell32.PIDL,Vanara.PInvoke.PropSys.GETPROPERTYSTOREFLAGS,System.Guid@,System.Object@)">
            <summary>
            <para>Retrieves an object that supports IPropertyStore or related interfaces from a pointer to an item identifier list (PIDL).</para>
            </summary>
            <param name="pidl">
            <para>Type: <c>PCIDLIST_ABSOLUTE</c></para>
            <para>A pointer to an item ID list.</para>
            </param>
            <param name="flags">
            <para>Type: <c>GETPROPERTYSTOREFLAGS</c></para>
            <para>One or more values from the GETPROPERTYSTOREFLAGS constants. This parameter can also be <c>NULL</c>.</para>
            </param>
            <param name="riid">
            <para>Type: <c>REFIID</c></para>
            <para>A reference to the desired interface ID.</para>
            </param>
            <param name="ppv">
            <para>Type: <c>void**</c></para>
            <para>
            When this function returns, contains the interface pointer requested in . This is typically IPropertyStore or a related interface.
            </para>
            </param>
            <returns>
            <para>None</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHGetPropertyStoreFromIDList``1(Vanara.PInvoke.Shell32.PIDL,Vanara.PInvoke.PropSys.GETPROPERTYSTOREFLAGS)">
            <summary>
            Retrieves an object that supports IPropertyStore or related interfaces from a pointer to an item identifier list (PIDL).
            </summary>
            <typeparam name="TIntf">The type of the requested interface. This is typically IPropertyStore or a related interface.</typeparam>
            <param name="pidl">
            <para>Type: <c>PCIDLIST_ABSOLUTE</c></para>
            <para>A pointer to an item ID list.</para>
            </param>
            <param name="flags">
            <para>Type: <c>GETPROPERTYSTOREFLAGS</c></para>
            <para>One or more values from the GETPROPERTYSTOREFLAGS constants. This parameter can also be <c>NULL</c>.</para>
            </param>
            <returns>
            When this function returns, contains the interface pointer requested. This is typically IPropertyStore or a related interface.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHGetPropertyStoreFromParsingName(System.String,System.Runtime.InteropServices.ComTypes.IBindCtx,Vanara.PInvoke.PropSys.GETPROPERTYSTOREFLAGS,System.Guid@,Vanara.PInvoke.PropSys.IPropertyStore@)">
            <summary>Returns a property store for an item, given a path or parsing name.</summary>
            <param name="pszPath">A pointer to a null-terminated Unicode string that specifies the item path.</param>
            <param name="pbc">A pointer to a IBindCtx object, which provides access to a bind context. This value can be NULL.</param>
            <param name="flags">One or more values from the GETPROPERTYSTOREFLAGS constants. This parameter can also be NULL.</param>
            <param name="riid">A reference to the desired interface ID.</param>
            <param name="propertyStore">
            When this function returns, contains the interface pointer requested in riid. This is typically IPropertyStore or a related interface.
            </param>
            <returns>If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHGetTemporaryPropertyForItem(Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.Ole32.PROPERTYKEY@,Vanara.PInvoke.Ole32.PROPVARIANT)">
            <summary>
            <para>
            Retrieves the temporary property for the given item. A temporary property is a read/write store that holds properties only for
            the lifetime of the IShellItem object, rather than being persisted back into the item.
            </para>
            </summary>
            <param name="psi">
            <para>Type: <c>IShellItem*</c></para>
            <para>A pointer to the item for which the temporary property is to be retrieved.</para>
            </param>
            <param name="propkey">
            <para>Type: <c>REFPROPERTYKEY</c></para>
            <para>The property key.</para>
            </param>
            <param name="ppropvar">
            <para>Type: <c>PROPVARIANT*</c></para>
            <para>A pointer to the temporary property for the item.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this function succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHSetDefaultProperties(Vanara.PInvoke.HWND,Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.Shell32.FILEOP_FLAGS,Vanara.PInvoke.Shell32.IFileOperationProgressSink)">
            <summary>
            <para>Applies the default set of properties on a Shell item.</para>
            </summary>
            <param name="hwnd">
            <para>Type: <c>HWND</c></para>
            <para>A handle to the item's parent window, which receives error notifications. This value can be <c>NULL</c>.</para>
            </param>
            <param name="psi">
            <para>Type: <c>IShellItem*</c></para>
            <para>A pointer to the IShellItem object that represents the item.</para>
            </param>
            <param name="dwFileOpFlags">
            <para>Type: <c>DWORD</c></para>
            <para>Flags that customize the operation. See IFileOperation::SetOperationFlags for flag values.</para>
            </param>
            <param name="pfops">
            <para>Type: <c>IFileOperationProgressSink*</c></para>
            <para>
            A pointer to an IFileOperationProgressSink object used to follow the progress of the operation. See IFileOperation::Advise for
            details. This value can be <c>NULL</c>.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this function succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            <para>
            The list of properties to set a default value comes from the <c>SetDefaultsFor</c> registry entry under the ProgID for the file
            association of the item. The list is prefixed by "" and contains the canonical names of the properties to set the default value,
            for example, "". The possible properties for this list are System.Author, System.Document.DateCreated, and
            System.Photo.DateTaken. If the <c>SetDefaultsFor</c> entry does not exist on the ProgID, this function uses the default found on
            the <c>SetDefaultsFor</c> entry of <c>HKEY_CLASSES_ROOT</c>&lt;b&gt;*.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHSetTemporaryPropertyForItem(Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.Ole32.PROPERTYKEY@,Vanara.PInvoke.Ole32.PROPVARIANT)">
            <summary>
            <para>
            Sets a temporary property for the specified item. A temporary property is kept in a read/write store that holds properties only
            for the lifetime of the IShellItem object, instead of writing them back into the item.
            </para>
            </summary>
            <param name="psi">
            <para>Type: <c>IShellItem*</c></para>
            <para>A pointer to the item on which the temporary property is to be set.</para>
            </param>
            <param name="propkey">
            <para>Type: <c>REFPROPERTYKEY</c></para>
            <para>Reference to the PROPERTYKEY that identifies the temporary property that is being set.</para>
            </param>
            <param name="propvar">
            <para>Type: <c>REFPROPVARIANT</c></para>
            <para>Reference to a PROPVARIANT that contains the value of the temporary property.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this function succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            <para>A temporary value can only be read with SHGetTemporaryPropertyForItem or by passing GPS_TEMPORARY to IShellItem2::GetPropertyStore.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHSimpleIDListFromPath(System.String)">
            <summary>
            <para>Deprecated. Returns a pointer to an ITEMIDLIST structure when passed a path.</para>
            </summary>
            <param name="pszPath">
            <para>Type: <c>PCWSTR</c></para>
            <para>A pointer to a null-terminated string that contains the path to be converted to a PIDL.</para>
            </param>
            <returns>
            <para>Type: <c>PIDLIST_ABSOLUTE</c></para>
            <para>Returns a pointer to an ITEMIDLIST structure if successful, or <c>NULL</c> otherwise.</para>
            </returns>
            <remarks>
            <para>Prior to Windows 7, this function was declared in Shlobj.h. In Windows 7 and later versions, it is declared in Shobjidl.h.</para>
            <para>
            <c>Note</c> This function is available through Windows 7 and Windows Server 2003. It is possible that it will not be present in
            future versions of Windows.
            </para>
            <para>An alternative to this function is as follows:</para>
            <list type="number">
            <item>Call SHGetDesktopFolder to obtain IShellFolder for the desktop folder.</item>
            <item>Get the IShellFolder's bind context (IBindCtx).</item>
            <item>Call IShellFolder::ParseDisplayName with the IBindCtx and the path.</item>
            </list>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IntILClone(System.IntPtr)">
            <summary>Clones an ITEMIDLIST structure.</summary>
            <param name="pidl">A pointer to the ITEMIDLIST structure to be cloned.</param>
            <returns>Returns a pointer to a copy of the ITEMIDLIST structure pointed to by pidl.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IntILCombine(System.IntPtr,System.IntPtr)">
            <summary>Combines two ITEMIDLIST structures.</summary>
            <param name="pidl1">A pointer to the first ITEMIDLIST structure.</param>
            <param name="pidl2">
            A pointer to the second ITEMIDLIST structure. This structure is appended to the structure pointed to by pidl1.
            </param>
            <returns>
            Returns an ITEMIDLIST containing the combined structures. If you set either pidl1 or pidl2 to NULL, the returned ITEMIDLIST
            structure is a clone of the non-NULL parameter. Returns NULL if pidl1 and pidl2 are both set to NULL.
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.ApplicationAssociationRegistration">
            <summary>Implements CLSID_ApplicationAssociationRegistration to create IApplicationAssociationRegistration.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.ApplicationDestinations">
            <summary>Implements CLSID_ApplicationDestinations to create IApplicationDestinations.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.ApplicationDocumentLists">
            <summary>Implements CLSID_ApplicationDocumentLists to create IApplicationDocumentLists.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.CEnumerableObjectCollection">
            <summary>Class interface for IEnumerableObjectCollection.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.UNDOCK_REASON">
            <summary>Values that indicate the reason that a docked accessibility app window has been undocked. Used by IAccessibilityDockingServiceCallback::Undocked.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.UNDOCK_REASON.UR_RESOLUTION_CHANGE">
            <summary>The accessibility window was undocked because the screen resolution has changed.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.UNDOCK_REASON.UR_MONITOR_DISCONNECT">
            <summary>The monitor on which the accessibility window was docked has been disconnected.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IAccessibilityDockingService">
            <summary>
            Docks an application window to the bottom of a monitor when a Windows Store app is visible and not snapped, or when the launcher
            is visible.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IAccessibilityDockingService.GetAvailableSize(Vanara.PInvoke.HMONITOR,System.UInt32@,System.UInt32@)">
            <summary>Retrieves the dimensions available on a specific screen for displaying an accessibility window.</summary>
            <param name="hMonitor">
            <para>Type: <c>HMONITOR</c></para>
            <para>
            The handle of the monitor whose available docking size is to be retrieved. For information on how to retrieve an
            <c>HMONITOR</c>, see MonitorFromWindow.
            </para>
            </param>
            <param name="pcxFixed">
            <para>Type: <c>UINT*</c></para>
            <para>
            When this method returns successfully, this parameter receives the fixed width, in physical pixels, available for docking on
            the specified monitor. Any window docked to this monitor will be sized to this width.
            </para>
            <para>If the method fails, this value is set to 0.</para>
            <para>If this value is <c>NULL</c>, an access violation will occur.</para>
            </param>
            <param name="pcyMax">
            <para>Type: <c>UINT*</c></para>
            <para>
            When this method returns successfully, this parameter receives the maximum height, in physical pixels, available for a
            docked window on the specified monitor.
            </para>
            <para>If the method fails, this value is set to 0.</para>
            <para>If this value is <c>NULL</c>, an access violation will occur.</para>
            </param>
            <remarks>
            <para>When to use</para>
            <para>
            A docked accessibility window is limited in the amount of space that it can use on any screen. Therefore, before trying to
            dock an accessibility window, call this function to get the available dimensions. You cannot dock any window that would
            cause a Windows Store app to have access to less than 768 vertical screen pixels.
            </para>
            <para>Examples</para>
            <para>This example shows this method in use.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IAccessibilityDockingService.DockWindow(Vanara.PInvoke.HWND,Vanara.PInvoke.HMONITOR,System.UInt32,Vanara.PInvoke.Shell32.IAccessibilityDockingServiceCallback)">
            <summary>Docks the specified window handle to the specified monitor handle.</summary>
            <param name="hwnd">The accessibility application window that will be docked on the passed monitor handle.</param>
            <param name="hMonitor">The monitor on which the accessibility application window will be docked.</param>
            <param name="cyRequested">TBD</param>
            <param name="pCallback">The callback pointer on which the accessibility application will receive the Undock notification.</param>
            <returns>
            <para>This method can return one of these values.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>S_OK</term>
            <term>Success.</term>
            </item>
            <item>
            <term>E_INVALIDARG</term>
            <term>The window handle or monitor handle is not valid.</term>
            </item>
            <item>
            <term>E_ACCESSDENIED</term>
            <term>The calling process is not a UIAcess accessibility application or the calling process does not own the window.</term>
            </item>
            <item>
            <term>IMM_E_DOCKOCCUPIED</term>
            <term>There is already another window occupying the docking space. Only one window can be docked at a time.</term>
            </item>
            <item>
            <term>IMM_E_INSUFFICIENTHEIGHT</term>
            <term>
            The requested uHeight is larger than the maximum allowed docking height for the specified monitor. However, if this error
            code is being returned, it means that this monitor does support docking, though at a height indicated by a call to the
            GetAvailableSize method.
            </term>
            </item>
            <item>
            <term>HRESULT_FROM_WIN32(ERROR_INVALID_MONITOR_HANDLE)</term>
            <term>The monitor specified by the monitor handle does not support docking.</term>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IAccessibilityDockingService.UndockWindow(Vanara.PInvoke.HWND)">
            <summary>Undocks the specified window handle if it is currently docked.</summary>
            <param name="hwnd">TBD</param>
            <remarks>
            <para>This method can only be used to undock windows that belong to the calling process.</para>
            <para>Examples</para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IAccessibilityDockingServiceCallback">
            <summary>Receives Acessibility Window Docking events.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IAccessibilityDockingServiceCallback.Undocked(Vanara.PInvoke.Shell32.UNDOCK_REASON)">
            <summary>Undocks the accessibility window so that it will not be automatically moved to its previous location.</summary>
            <param name="undockReason">Specifies the reason why the accessibility application's window was undocked.</param>
            <returns>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.AccessibilityDockingService">
            <summary>CoClass for IAccessibilityDockingService</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IAccessibleObject">
            <summary>Exposes a method that can be used by an accessibility application.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IAccessibleObject.SetAccessibleName(System.String)">
            <summary>
            Sets text that is retrieved by IAccessible::get_accName which accessibility tools use to obtain the Name Property of an object.
            </summary>
            <param name="pszName">
            <para>Type: <c>LPCWSTR</c></para>
            <para>A pointer to a null-terminated, Unicode string containing the name.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.SPBEGINF">
            <summary>
            <para>Used by IActionProgress::Begin, these constants specify certain UI operations that are to be enabled or disabled.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SPBEGINF.SPBEGINF_NORMAL">
            <summary>Indicates default progress behavior.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SPBEGINF.SPBEGINF_AUTOTIME">
            <summary>
            Indicates that the progress UI should automatically update a text field with the amount of time remaining until the action completes.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SPBEGINF.SPBEGINF_NOPROGRESSBAR">
            <summary>Indicates that the UI should not display a progress bar.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SPBEGINF.SPBEGINF_MARQUEEPROGRESS">
            <summary>Indicates that the UI should use a marquee-style progress bar.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SPBEGINF.SPBEGINF_NOCANCELBUTTON">
            <summary>Indicates that the UI should not include a Cancel button.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.SPINITF">
            <summary>Flags used by IActionProgressDialog::Initialize</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SPINITF.SPINITF_NORMAL">
            <summary>Use the default progress dialog behavior.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SPINITF.SPINITF_MODAL">
            <summary>Use a modal window for the dialog.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SPINITF.SPINITF_NOMINIMIZE">
            <summary>Do not display a minimize button.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.SPTEXT">
            <summary>
            <para>Specifies the type of descriptive text being provided to an IActionProgress interface.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SPTEXT.SPTEXT_ACTIONDESCRIPTION">
            <summary>The text is a high level, short description.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SPTEXT.SPTEXT_ACTIONDETAIL">
            <summary>The text is a detailed description.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IActionProgress">
            <summary>
            <para>Represents the abstract base class from which progress-driven operations can inherit.</para>
            </summary>
            <remarks>
            <para>
            This class is an abstract class that may not be instantiated. It provides a framework that derived classes can use to implement a
            progress callback. This callback can be used by applications to report progress of actions to the UI. Here, "Actions" refers to
            operations that may take a significant amount of time, such as downloading or copying files, and during which a visible progress
            indication would be appropriate.
            </para>
            <para>
            Applications typically do not implement this interface. Much of the functionality that users interact with during actions is
            provided by the CProgressDialog class (CLSID_ProgressDialog) that implements <c>IActionProgress</c> and displays progress in a
            dialog box. If a solution requiring a mechanism other than a dialog box is required, <c>IActionProgress</c> can be used to
            provide basic progress indicator functionality.
            </para>
            <para>
            Once implemented, classes should call IActionProgress::Begin when an action is started. Periodically,
            IActionProgress::UpdateProgress should be called to update the UI with progress information, and detailed textual information
            should be conveyed to the UI by calling IActionProgress::UpdateText. IActionProgress::QueryCancel and
            IActionProgress::ResetCancel should be called to handle cancellation requests. Once the operation ends, IActionProgress::End
            should be called.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IActionProgress.Begin(Vanara.PInvoke.Shell32.SPACTION,Vanara.PInvoke.Shell32.SPBEGINF)">
            <summary>
            <para>Called when an action has begun that requires its progress be displayed to the user.</para>
            </summary>
            <param name="action">
            <para>Type: <c>SPACTION</c></para>
            <para>The action being performed. See SPACTION for a list of acceptable values.</para>
            </param>
            <param name="flags">
            <para>Type: <c>SPBEGINF</c></para>
            <para>Optional flags that request certain UI operations be enabled or disabled. See SPBEGINF for a list of acceptable values.</para>
            </param>
            <remarks>
            <para>
            This method should be called when an action is beginning. The values of and may be used to determine how to draw the UI that
            will be displayed to the user, or how to interpret or filter certain user actions associated with the action. When the action
            has completed, IActionProgress::End should be called.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IActionProgress.UpdateProgress(System.UInt64,System.UInt64)">
            <summary>
            <para>Updates the progress of an action to the UI.</para>
            </summary>
            <param name="ulCompleted">
            <para>Type: <c>ULONGLONG</c></para>
            <para>The amount of the action completed.</para>
            </param>
            <param name="ulTotal">
            <para>Type: <c>ULONGLONG</c></para>
            <para>The total amount of the action.</para>
            </param>
            <remarks>
            <para>
            This method should be called periodically to update the progress of the action. The implementing class may interpret these
            values in any way desired, although the values of and should be interpreted relative to one another to determine a meaningful
            progress amount. Often, a percentage is desired, in which case the value of should be divided by , and the result multiplied
            by a value of 100.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IActionProgress.UpdateText(Vanara.PInvoke.Shell32.SPTEXT,System.String,System.Boolean)">
            <summary>
            <para>Called if descriptive text associated with the action will be changed.</para>
            </summary>
            <param name="sptext">
            <para>Type: <c>SPTEXT</c></para>
            <para>A value that specifies the type of text displayed. See SPTEXT for acceptable values.</para>
            </param>
            <param name="pszText">
            <para>Type: <c>LPCWSTR</c></para>
            <para>A pointer to a wide character string to display.</para>
            </param>
            <param name="fMayCompact">
            <para>Type: <c>BOOL</c></para>
            <para>A value that specifies whether to allow a text string to be compacted to fit the available space on screen.</para>
            </param>
            <remarks>
            <para>
            The class implementing this method must interpret the value of and in the context of the action being performed and the UI
            that shows the progress to the user. The value of can be used to differentiate between lines of changeable text. Often, the
            value of refers to whether the text string can be truncated with an ellipsis (...) in order to conserve screen space.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IActionProgress.QueryCancel">
            <summary>
            <para>Provides information about whether the action is being canceled.</para>
            </summary>
            <returns>
            <para>A reference to a <c>BOOL</c> value that specifies whether the action is being canceled.</para>
            </returns>
            <remarks>
            <para>
            Call this method when a process must know whether an action has been canceled. Implementing this method requires the
            implementing class to query either an internal or external flag to provide this information, and store the result in the
            value of .
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IActionProgress.ResetCancel">
            <summary>
            <para>Resets progress dialog after a cancellation has been completed.</para>
            </summary>
            <remarks>
            <para>
            This method is called when a cancellation has been completed. User input should typically be limited for cancellations of
            actions that involve large calculations or file operations. This method may be used by calling applications to notify a
            progress UI that the cancellation has been completed and the UI should return control to the user.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IActionProgress.End">
            <summary>
            <para>Indicates that the action associated with this progress implementation has ended.</para>
            </summary>
            <remarks>
            <para>
            This method indicates that the action has finished, and the implementing class should perform cleanup and display results to
            the user, if applicable.
            </para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IActionProgressDialog">
            <summary>Exposes methods that initialize and stop a progress dialog.</summary>
            <remarks>
            To instantiate an object that implements this interface, call CoCreateInstance using the class identifier (CLSID) CLSID_ProgressDialog.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IActionProgressDialog.Initialize(Vanara.PInvoke.Shell32.SPINITF,System.String,System.String)">
            <summary>Provides details about the action progress dialog.</summary>
            <param name="flags">
            <para>Type: <c>SPINITF</c></para>
            <para>One of the following values.</para>
            <para>SPINITF_NORMAL (0x01)</para>
            <para>Use the default progress dialog behavior.</para>
            <para>SPINITF_MODAL (0x01)</para>
            <para>Use a modal window for the dialog.</para>
            <para>SPINITF_NOMINIMIZE (0x08)</para>
            <para>Do not display a minimize button.</para>
            </param>
            <param name="pszTitle">
            <para>Type: <c>LPCWSTR</c></para>
            <para>The title of the progress dialog.</para>
            </param>
            <param name="pszCancel">
            <para>Type: <c>LPCWSTR</c></para>
            <para>The string displayed when a user closes the dialog before completion.</para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IActionProgressDialog.Stop">
            <summary>Stops a progress dialog.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IAppActivationUIInfo">
            <summary>Undocumented.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IAppActivationUIInfo.GetMonitor(Vanara.PInvoke.HMONITOR@)">
            <summary/>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IAppActivationUIInfo.GetInvokePoint(Vanara.PInvoke.POINT@)">
            <summary/>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IAppActivationUIInfo.GetShowCommand(System.Int32@)">
            <summary/>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IAppActivationUIInfo.GetShowUI(System.Boolean@)">
            <summary/>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IAppActivationUIInfo.GetKeyState(System.UInt32@)">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.ACTIVATEOPTIONS">
            <summary>One or more of the following flags used to support design mode, debugging, and testing scenarios.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ACTIVATEOPTIONS.AO_NONE">
            <summary>No flags are set.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ACTIVATEOPTIONS.AO_DESIGNMODE">
            <summary>
            The app is being activated for design mode, so it can't create its normal window. The creation of the app's window must be
            done by design tools that load the necessary components by communicating with a designer-specified service on the site chain
            established through the activation manager. Note that this means that the splash screen seen during regular activations
            won't be seen.
            <para>Note that you must enable debug mode on the app's package to succesfully use design mode.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ACTIVATEOPTIONS.AO_NOERRORUI">
            <summary>Do not display an error dialog if the app fails to activate.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ACTIVATEOPTIONS.AO_NOSPLASHSCREEN">
            <summary>
            Do not display the app's splash screen when the app is activated. You must enable debug mode on the app's package when you
            use this flag; otherwise, the PLM will terminate the app after a few seconds.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ACTIVATEOPTIONS.AO_PRELAUNCH">
            <summary>The application is being activated in prelaunch mode. This value is supported starting in Windows 10.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IApplicationActivationManager">
            <summary>
            Provides methods which activate Windows Store apps for the Launch, File, and Protocol extensions. You will normally use this
            interface in debuggers and design tools.
            </summary>
            <remarks>
            <para>When to Implement</para>
            <para>
            Do not implement this interface yourself. Windows provides an implementation as part of the CApplicationActivationManager class.
            To get an instance of this class, call CoCreateInstance with the CLSID_ApplicationActivationManager class ID.
            </para>
            <para>Usage notes</para>
            <para>
            An <c>IApplicationActivationManager</c> object creates a thread in its host process to serve any activated event arguments
            objects (LaunchActivatedEventArgs, FileActivatedEventArgs, and ProtocolActivatedEventArgs) that are passed to the app. If the
            calling process is long-lived, you can create this object in-proc, based on the assumption that the event arguments will exist
            long enough for the target app to use them. However, if the calling process is spawned only to launch the target app, it should
            create the <c>IApplicationActivationManager</c> object out-of-process, by using CLSCTX_LOCAL_SERVER. This causes the object to
            be created in a Dllhost.exe instance that automatically manages the object's lifetime based on outstanding references to the
            activated event argument objects.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IApplicationActivationManager.ActivateApplication(System.String,System.String,Vanara.PInvoke.Shell32.ACTIVATEOPTIONS,System.UInt32@)">
            <summary>Activates the specified Windows Store app for the generic launch contract (Windows.Launch) in the current session.</summary>
            <param name="appUserModelId">The application user model ID of the Windows Store app.</param>
            <param name="arguments">A pointer to an optional, app-specific, argument string.</param>
            <param name="options">
            <para>One or more of the following flags used to support design mode, debugging, and testing scenarios.</para>
            <para>AO_NONE (0x00000000)</para>
            <para>No flags are set.</para>
            <para>AO_DESIGNMODE (0x00000001)</para>
            <para>
            The app is being activated for design mode, so it can't create its normal window. The creation of the app's window must be
            done by design tools that load the necessary components by communicating with a designer-specified service on the site chain
            established through the activation manager. Note that this means that the splash screen seen during regular activations
            won't be seen.
            </para>
            <para>Note that you must enable debug mode on the app's package to succesfully use design mode.</para>
            <para>AO_NOERRORUI (0x00000002)</para>
            <para>Do not display an error dialog if the app fails to activate.</para>
            <para>AO_NOSPLASHSCREEN (0x00000004)</para>
            <para>
            Do not display the app's splash screen when the app is activated. You must enable debug mode on the app's package when you
            use this flag; otherwise, the PLM will terminate the app after a few seconds.
            </para>
            <para>AO_PRELAUNCH (0x2000000)</para>
            <para>The application is being activated in prelaunch mode. This value is supported starting in Windows 10.</para>
            </param>
            <param name="processId">
            A pointer to a value that, when this method returns successfully, receives the process ID of the app instance that fulfils
            this contract.
            </param>
            <returns>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IApplicationActivationManager.ActivateForFile(System.String,Vanara.PInvoke.Shell32.IShellItemArray,System.String,System.UInt32@)">
            <summary>Activates the specified Windows Store app for the file contract (Windows.File).</summary>
            <param name="appUserModelId">The application user model ID of the Windows Store app.</param>
            <param name="itemArray">
            A pointer to an array of Shell items, each representing a file. This value is converted to a VectorView of StorageItem
            objects that is passed to the app through FileActivatedEventArgs.
            </param>
            <param name="verb">The verb being applied to the file or files specified by itemArray.</param>
            <param name="processId">
            A pointer to a value that, when this method returns successfully, receives the process ID of the app instance that fulfils
            this contract.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IApplicationActivationManager.ActivateForProtocol(System.String,Vanara.PInvoke.Shell32.IShellItemArray,System.UInt32@)">
            <summary>Activates the specified Windows Store app for the protocol contract (Windows.Protocol).</summary>
            <param name="appUserModelId">The application user model ID of the Windows Store app.</param>
            <param name="itemArray">
            A pointer to an array of a single Shell item. The first item in the array is converted into a Uri object that is passed to
            the app through ProtocolActivatedEventArgs. Any items in the array except for the first element are ignored.
            </param>
            <param name="processId">
            A pointer to a value that, when this method returns successfully, receives the process ID of the app instance that fulfils
            this contract.
            </param>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.ApplicationActivationManager">
            <summary>CLSID_ApplicationActivationManager</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.ADJACENT_DISPLAY_EDGES">
            <summary>The edge which should be adjacent.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ADJACENT_DISPLAY_EDGES.ADE_NONE">
            <summary>The widow will not be adjacent to either edge.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ADJACENT_DISPLAY_EDGES.ADE_LEFT">
            <summary>the left edge of the window will be adjacent.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ADJACENT_DISPLAY_EDGES.ADE_RIGHT">
            <summary>The right edge of the window will be adjacent.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.APPLICATION_VIEW_MIN_WIDTH">
            <summary>The desired minimum width of the application design mode window.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.APPLICATION_VIEW_MIN_WIDTH.AVMW_DEFAULT">
            <summary>Uses the default minimum width.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.APPLICATION_VIEW_MIN_WIDTH.AVMW_320">
            <summary>Sets the minimum width at 320 pixels.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.APPLICATION_VIEW_MIN_WIDTH.AVMW_500">
            <summary>Sets the minimum width at 500 pixels.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.APPLICATION_VIEW_ORIENTATION">
            <summary>
            Defines the set of display orientation modes for a window (app view). Used by
            IApplicationDesignModeSettings2::GetApplicationViewOrientation and IApplicationDesignModeSettings2::SetApplicationViewOrientation.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.APPLICATION_VIEW_ORIENTATION.AVO_LANDSCAPE">
            <summary>The window is in landscape orientation, with the display width greater than the height.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.APPLICATION_VIEW_ORIENTATION.AVO_PORTRAIT">
            <summary>The window is in portrait orientation, with the display height greater than the width.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.APPLICATION_VIEW_STATE">
            <summary>
            Indicates the current view state of a Windows Store app. Used by IApplicationDesignModeSettings::SetApplicationViewState and IApplicationDesignModeSettings::IsApplicationViewStateSupported.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.APPLICATION_VIEW_STATE.AVS_FULLSCREEN_LANDSCAPE">
            <summary>The current app's view is full-screen (has no snapped app adjacent to it), and is in landscape orientation.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.APPLICATION_VIEW_STATE.AVS_FILLED">
            <summary>
            The current app's view has been reduced to a partial screen view as the result of another app snapping (being docked at one
            side of the screen in a narrow view).
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.APPLICATION_VIEW_STATE.AVS_SNAPPED">
            <summary>The current app's view has been snapped (docked at one side of the screen in a narrow view).</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.APPLICATION_VIEW_STATE.AVS_FULLSCREEN_PORTRAIT">
            <summary>The current app's view is full-screen (has no snapped app adjacent to it), and is in portrait orientation.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.EDGE_GESTURE_KIND">
            <summary>Indicates the input type that generated the spoofed edge gesture.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.EDGE_GESTURE_KIND.EGK_TOUCH">
            <summary>The edge gesture event was generated by a swipe on a touch-enabled screen.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.EDGE_GESTURE_KIND.EGK_KEYBOARD">
            <summary>The edge gesture event was generated by the Win+Z key sequence on the keyboard.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.EDGE_GESTURE_KIND.EGK_MOUSE">
            <summary>The edge gesture event was generated by a right mouse click.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.NATIVE_DISPLAY_ORIENTATION">
            <summary>The native orientation of the display to emulate.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NATIVE_DISPLAY_ORIENTATION.NDO_LANDSCAPE">
            <summary>Landscape orientation, with the display width greater than the height.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NATIVE_DISPLAY_ORIENTATION.NDO_PORTRAIT">
            <summary>Portrait orientation, with the display height greater than the width.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IApplicationDesignModeSettings">
            <summary>
            Enables development tool applications to dynamically spoof system and user states, such as native display resolution, device
            scale factor, and application view state, for the purpose of testing Windows Store apps running in design mode for a wide range
            of form factors without the need for the actual hardware. Also enables testing of changes in normally user-controlled state to
            test Windows Store apps under a variety of scenarios.
            </summary>
            <remarks>
            <para>This interface is acquired by cocreating CLSID_ApplicationDesignModeSettings.</para>
            <para>Users will normally follow a usage pattern similar to the following:</para>
            <list type="number">
            <item>
            <term>
            Call CoCreateInstance with CLSID_ApplicationDesignModeSettings to create the application design mode settings object on a thread
            in the Windows Store app process.
            </term>
            </item>
            <item>
            <term>Call QueryInterface on the application design mode settings object to obtain an IInitializeWithWindow object.</term>
            </item>
            <item>
            <term>
            Call the Initialize method of the IInitializeWithWindow object, passing in the HWND for the proxy core window. This must be done
            before any "set" methods are called and will only succeed once per process.
            </term>
            </item>
            <item>
            <term>
            Call QueryInterface for <c>IApplicationDesignModeSettings</c> and spoof the necessary test state by calling its appropriate
            methods (SetNativeDisplaySize, SetScaleFactor, etc.). These methods will trigger the appropriate Windows Runtime events to fire
            for the Windows Store app.
            </term>
            </item>
            <item>
            <term>
            Call the ComputeApplicationSize method to determine the proper size for the app, based on the currently spoofed state. All
            layout "set" methods must have already been called or this call will fail. The developer tool application is responsible for
            positioning and sizing the app windows, when appropriate.
            </term>
            </item>
            </list>
            <para>When to implement</para>
            <para>Do not implement this interface; the implementation is supplied with Windows.</para>
            <para>When to use</para>
            <para>Use the methods of this interface to test your Windows Store app under various spoofed configurations and scenarios.</para>
            <para>Examples</para>
            <para>This example shows the methods of this interface in use.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IApplicationDesignModeSettings.SetNativeDisplaySize(Vanara.PInvoke.SIZE)">
            <summary>
            <para>Sets a spoofed native display size to be used for a Windows Store app running in design mode.</para>
            <para>You must call IInitializeWithWindow::Initialize to set a proxy core window before calling this method.</para>
            <para><c>SetNativeDisplaySize</c> must be called before calling ComputeApplicationSize.</para>
            </summary>
            <param name="nativeDisplaySizePixels">
            The native size of the display to spoof, as a SIZE structure. The specified size will be normalized to a landscape
            orientation. To spoof orientation, see SetApplicationViewState.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IApplicationDesignModeSettings.SetScaleFactor(Vanara.PInvoke.DEVICE_SCALE_FACTOR)">
            <summary>
            <para>Sets a spoofed device scale factor to be used for a Windows Store app running in design mode.</para>
            <para>You must call IInitializeWithWindow::Initialize to set a proxy core window before calling this method.</para>
            <para><c>SetScaleFactor</c> must be called before calling ComputeApplicationSize.</para>
            </summary>
            <param name="scaleFactor">One of the DEVICE_SCALE_FACTOR enumeration values that indicates the device scale factor to spoof.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IApplicationDesignModeSettings.SetApplicationViewState(Vanara.PInvoke.Shell32.APPLICATION_VIEW_STATE)">
            <summary>
            <para>
            Sets a spoofed application view state (full-screen landscape, full-screen portrait, filled, or snapped) to be used for a
            Windows Store app running in design mode.
            </para>
            <para>You must call IInitializeWithWindow::Initialize to set a proxy core window before calling this method.</para>
            <para><c>SetApplicationViewState</c> must be called before calling ComputeApplicationSize.</para>
            </summary>
            <param name="viewState">
            One of the APPLICATION_VIEW_STATE enumeration values that indicates the application view state to spoof.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IApplicationDesignModeSettings.ComputeApplicationSize">
            <summary>
            <para>Gets the size of the Windows Store app, based on the current set of spoofed settings.</para>
            <para>You must call IInitializeWithWindow::Initialize to set a proxy core window before calling this method.</para>
            <para>In addition, each of these methods must be called before calling <c>ComputeApplicationSize</c>, or the call will fail.</para>
            <para>SetApplicationViewState</para>
            <para>SetNativeDisplaySize</para>
            <para>SetScaleFactor</para>
            </summary>
            <returns>
            When this method returns successfully, receives a pointer to the size that the Windows Store app should occupy, based on the
            current set of spoofed settings.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IApplicationDesignModeSettings.IsApplicationViewStateSupported(Vanara.PInvoke.Shell32.APPLICATION_VIEW_STATE,Vanara.PInvoke.SIZE,Vanara.PInvoke.DEVICE_SCALE_FACTOR)">
            <summary>
            <para>
            Determines whether a particular application view state is supported for specific spoofed display size and scale factor settings.
            </para>
            <para>You must call IInitializeWithWindow::Initialize to set a proxy core window before calling this method.</para>
            </summary>
            <param name="viewState">
            One of the enumeration values that indicates the application view state for which support is being determined.
            </param>
            <param name="nativeDisplaySizePixels">The native size of the display to spoof.</param>
            <param name="scaleFactor">One of the enumeration values that indicates the device scale factor to spoof.</param>
            <returns>
            When this method returns successfully, receives a pointer to a Boolean value which is set to <c>TRUE</c> if the application
            view state is supported for the given display size and scale factor, and <c>FALSE</c> if it is not.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IApplicationDesignModeSettings.TriggerEdgeGesture(Vanara.PInvoke.Shell32.EDGE_GESTURE_KIND)">
            <summary>
            <para>
            Sends a spoofed edge gesture event to the proxy core window on the caller's thread. This gesture toggles the app's app bar,
            if the app supports one. The caller can specify the type of input that triggered the edge gesture.
            </para>
            <para>You must call IInitializeWithWindow::Initialize to set a proxy core window before calling this method.</para>
            </summary>
            <param name="edgeGestureKind">
            <para>
            Indicates the <c>EDGE_GESTURE_KIND</c> input type that generated the spoofed edge gesture. If touch ( <c>EGK_TOUCH</c>) is
            specified, both the <c>Starting</c> and <c>Completed</c> edge gesture events are sent. Otherwise, only the <c>Completed</c>
            event is sent. One of the following values:
            </para>
            <para>EGK_TOUCH (0)</para>
            <para>The edge gesture event was generated by a swipe on a touch-enabled screen.</para>
            <para>EGK_KEYBOARD (1)</para>
            <para>The edge gesture event was generated by the Win+Z key sequence on the keyboard.</para>
            <para>EGK_MOUSE (2)</para>
            <para>The edge gesture event was generated by a right mouse click.</para>
            </param>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IApplicationDesignModeSettings2">
            <summary>
            Enables development tool applications to dynamically control system and user states, such as native display resolution, device
            scale factor, and application view layout, reported to Windows Store apps for the purpose of testing Windows Store apps running
            in design mode for a wide range of form factors without the need for the actual hardware. Also enables testing of changes in
            normally user-controlled state to test Windows Store apps under a variety of scenarios.
            </summary>
            <remarks>
            <para>
            This interface is acquired by cocreating CLSID_ApplicationDesignModeSettings. It is an extension of the original
            IApplicationDesignModeSettings interface.
            </para>
            <para>Examples</para>
            <para>
            In this example, Visual Studio is launching an application in design mode that has overridden the minimum width on a display of
            size 1366x768. It is then enabling a slider control that allows the user to dynamically change the applications width. To do
            this, it needs to use the new SetApplicationViewMinWidth and GetApplicationSizeBoundsAPIs to compute the minimum and maximum
            sizes allowed for this type of application.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IApplicationDesignModeSettings2.SetNativeDisplaySize(Vanara.PInvoke.SIZE)">
            <summary>
            <para>Sets a spoofed native display size to be used for a Windows Store app running in design mode.</para>
            <para>You must call IInitializeWithWindow::Initialize to set a proxy core window before calling this method.</para>
            <para><c>SetNativeDisplaySize</c> must be called before calling ComputeApplicationSize.</para>
            </summary>
            <param name="nativeDisplaySizePixels">
            The native size of the display to spoof, as a SIZE structure. The specified size will be normalized to a landscape
            orientation. To spoof orientation, see SetApplicationViewState.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IApplicationDesignModeSettings2.SetScaleFactor(Vanara.PInvoke.DEVICE_SCALE_FACTOR)">
            <summary>
            <para>Sets a spoofed device scale factor to be used for a Windows Store app running in design mode.</para>
            <para>You must call IInitializeWithWindow::Initialize to set a proxy core window before calling this method.</para>
            <para><c>SetScaleFactor</c> must be called before calling ComputeApplicationSize.</para>
            </summary>
            <param name="scaleFactor">One of the DEVICE_SCALE_FACTOR enumeration values that indicates the device scale factor to spoof.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IApplicationDesignModeSettings2.SetApplicationViewState(Vanara.PInvoke.Shell32.APPLICATION_VIEW_STATE)">
            <summary>
            <para>
            Sets a spoofed application view state (full-screen landscape, full-screen portrait, filled, or snapped) to be used for a
            Windows Store app running in design mode.
            </para>
            <para>You must call IInitializeWithWindow::Initialize to set a proxy core window before calling this method.</para>
            <para><c>SetApplicationViewState</c> must be called before calling ComputeApplicationSize.</para>
            </summary>
            <param name="viewState">
            One of the APPLICATION_VIEW_STATE enumeration values that indicates the application view state to spoof.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IApplicationDesignModeSettings2.ComputeApplicationSize">
            <summary>
            <para>Gets the size of the Windows Store app, based on the current set of spoofed settings.</para>
            <para>You must call IInitializeWithWindow::Initialize to set a proxy core window before calling this method.</para>
            <para>In addition, each of these methods must be called before calling <c>ComputeApplicationSize</c>, or the call will fail.</para>
            <para>SetApplicationViewState</para>
            <para>SetNativeDisplaySize</para>
            <para>SetScaleFactor</para>
            </summary>
            <returns>
            When this method returns successfully, receives a pointer to the size that the Windows Store app should occupy, based on the
            current set of spoofed settings.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IApplicationDesignModeSettings2.IsApplicationViewStateSupported(Vanara.PInvoke.Shell32.APPLICATION_VIEW_STATE,Vanara.PInvoke.SIZE,Vanara.PInvoke.DEVICE_SCALE_FACTOR)">
            <summary>
            <para>
            Determines whether a particular application view state is supported for specific spoofed display size and scale factor settings.
            </para>
            <para>You must call IInitializeWithWindow::Initialize to set a proxy core window before calling this method.</para>
            </summary>
            <param name="viewState">
            One of the enumeration values that indicates the application view state for which support is being determined.
            </param>
            <param name="nativeDisplaySizePixels">The native size of the display to spoof.</param>
            <param name="scaleFactor">One of the enumeration values that indicates the device scale factor to spoof.</param>
            <returns>
            When this method returns successfully, receives a pointer to a Boolean value which is set to <c>TRUE</c> if the application
            view state is supported for the given display size and scale factor, and <c>FALSE</c> if it is not.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IApplicationDesignModeSettings2.TriggerEdgeGesture(Vanara.PInvoke.Shell32.EDGE_GESTURE_KIND)">
            <summary>
            <para>
            Sends a spoofed edge gesture event to the proxy core window on the caller's thread. This gesture toggles the app's app bar,
            if the app supports one. The caller can specify the type of input that triggered the edge gesture.
            </para>
            <para>You must call IInitializeWithWindow::Initialize to set a proxy core window before calling this method.</para>
            </summary>
            <param name="edgeGestureKind">
            <para>
            Indicates the <c>EDGE_GESTURE_KIND</c> input type that generated the spoofed edge gesture. If touch ( <c>EGK_TOUCH</c>) is
            specified, both the <c>Starting</c> and <c>Completed</c> edge gesture events are sent. Otherwise, only the <c>Completed</c>
            event is sent. One of the following values:
            </para>
            <para>EGK_TOUCH (0)</para>
            <para>The edge gesture event was generated by a swipe on a touch-enabled screen.</para>
            <para>EGK_KEYBOARD (1)</para>
            <para>The edge gesture event was generated by the Win+Z key sequence on the keyboard.</para>
            <para>EGK_MOUSE (2)</para>
            <para>The edge gesture event was generated by a right mouse click.</para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IApplicationDesignModeSettings2.SetNativeDisplayOrientation(Vanara.PInvoke.Shell32.NATIVE_DISPLAY_ORIENTATION)">
            <summary>Sets the orientation of the emulated display for the design mode window.</summary>
            <param name="nativeDisplayOrientation">
            <para>Type: <c>NATIVE_DISPLAY_ORIENTATION</c></para>
            <para>The native orientation of the display to emulate.</para>
            <para>NDO_LANDSCAPE (0)</para>
            <para>Landscape orientation, with the display width greater than the height.</para>
            <para>NDO_PORTRAIT (1)</para>
            <para>Portrait orientation, with the display height greater than the width.</para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IApplicationDesignModeSettings2.SetApplicationViewOrientation(Vanara.PInvoke.Shell32.APPLICATION_VIEW_ORIENTATION)">
            <summary>Sets the window orientation used for the design mode window.</summary>
            <param name="viewOrientation">
            <para>Type: <c>APPLICATION_VIEW_ORIENTATION</c></para>
            <para>The orientation of the design mode window to use. Either <c>AVO_LANDSCAPE</c> or <c>AVO_PORTRAIT</c>.</para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IApplicationDesignModeSettings2.SetAdjacentDisplayEdges(Vanara.PInvoke.Shell32.ADJACENT_DISPLAY_EDGES)">
            <summary>Sets whether the application window will be adjacent to the edge of the emulated display.</summary>
            <param name="adjacentDisplayEdges">
            <para>Type: <c>ADJACENT_DISPLAY_EDGES</c></para>
            <para>The edge which should be adjacent.</para>
            <para>ADE_NONE (0x0)</para>
            <para>The widow will not be adjacent to either edge.</para>
            <para>ADE_LEFT (0x1)</para>
            <para>the left edge of the window will be adjacent.</para>
            <para>ADE_RIGHT (0x2)</para>
            <para>The right edge of the window will be adjacent.</para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IApplicationDesignModeSettings2.SetIsOnLockScreen(System.Boolean)">
            <summary>
            This method determines whether or not the application, in design mode, can display information on the Windows 8 lock screen.
            </summary>
            <param name="isOnLockScreen">
            <para>Type: <c>BOOL</c></para>
            <para>
            When set to <c>TRUE</c>, the application will display information on the lock screen. When set to <c>FALSE</c>, information
            will not be displayed.
            </para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IApplicationDesignModeSettings2.SetApplicationViewMinWidth(Vanara.PInvoke.Shell32.APPLICATION_VIEW_MIN_WIDTH)">
            <summary>Sets the desired minimum width of the application design mode window.</summary>
            <param name="viewMinWidth">
            <para>Type: <c>APPLICATION_VIEW_MIN_WIDTH</c></para>
            <para>The minimum width value.</para>
            <para>AVMW_DEFAULT (0)</para>
            <para>Uses the default minimum width.</para>
            <para>AVMW_320 (1)</para>
            <para>Sets the minimum width at 320 pixels.</para>
            <para>AVMW_500 (2)</para>
            <para>Sets the minimum width at 500 pixels.</para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IApplicationDesignModeSettings2.GetApplicationSizeBounds(Vanara.PInvoke.SIZE@,Vanara.PInvoke.SIZE@)">
            <summary>This methods retrieves the size bounds supported by the application.</summary>
            <param name="minApplicationSizePixels">
            <para>Type: <c>SIZE*</c></para>
            <para>
            When this method returns successfully, receives a pointer to a SIZE structure that defines the minimum possible window size.
            </para>
            </param>
            <param name="maxApplicationSizePixels">
            <para>Type: <c>SIZE*</c></para>
            <para>
            When this method returns successfully, receives a pointer to a SIZE structure that defines the maximum possible window size.
            </para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IApplicationDesignModeSettings2.GetApplicationViewOrientation(Vanara.PInvoke.SIZE)">
            <summary>Gets the orientation of the application design mode window.</summary>
            <param name="applicationSizePixels">
            <para>Type: <c>SIZE</c></para>
            <para>The application window size.</para>
            </param>
            <returns>
            <para>Type: <c>APPLICATION_VIEW_ORIENTATION*</c></para>
            <para>When this method returns successfully, receives a pointer to an APPLICATION_VIEW_ORIENTATION structure.</para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.ApplicationDesignModeSettings">
            <summary>CLSID_ApplicationDesignModeSettings</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.MONITOR_APP_VISIBILITY">
            <summary>Specifies whether a display is showing desktop windows instead of Windows Store apps.</summary>
            <remarks>The <c>MONITOR_APP_VISIBILITY</c> enum is used by the GetAppVisibilityOnMonitor method.</remarks>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.MONITOR_APP_VISIBILITY.MAV_UNKNOWN">
            <summary>The display state is not known.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.MONITOR_APP_VISIBILITY.MAV_NO_APP_VISIBLE">
            <summary>The display is showing desktop windows.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.MONITOR_APP_VISIBILITY.MAV_APP_VISIBLE">
            <summary>The display is not showing desktop windows.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IAppVisibility">
            <summary>Provides functionality to determine whether the display is showing Windows Store apps.</summary>
            <remarks>
            <para>
            Use the <c>IAppVisibility</c> interface to determine when a display is showing Windows Store apps. This is useful for
            accessibility tools and other applications.
            </para>
            <para>Use the IsLauncherVisible method to determine when the Start screen is visible.</para>
            <para>Don't implement the <c>IAppVisibility</c> interface. Instead, call the CoCreateInstance function with <c>CLSID_AppVisibility</c>.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IAppVisibility.GetAppVisibilityOnMonitor(Vanara.PInvoke.HMONITOR)">
            <summary>Queries the current mode of the specified monitor.</summary>
            <param name="hMonitor">The monitor to query.</param>
            <returns>The current mode of hMonitor.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IAppVisibility.IsLauncherVisible">
            <summary>Gets a value that indicates whether the Start screen is displayed.</summary>
            <returns><c>TRUE</c> if the Start screen is displayed; otherwise, <c>FALSE.</c></returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IAppVisibility.Advise(Vanara.PInvoke.Shell32.IAppVisibilityEvents,System.UInt32@)">
            <summary>Registers an advise sink object to receive notification of changes to the display.</summary>
            <param name="pCallback">The client's advise sink that receives outgoing calls from the connection point.</param>
            <param name="pdwCookie">
            A token that uniquely identifies this connection. Use this token to delete the connection by passing it to the Unadvise method.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IAppVisibility.Unadvise(System.UInt32)">
            <summary>Cancels a connection that was previously established by using Advise.</summary>
            <param name="dwCookie">
            A token that uniquely identifies the connection to cancel, which is provided by a previous call to to the Advise method.
            </param>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IAppVisibilityEvents">
            <summary>Enables applications to receive notifications of state changes in a display and of changes in Start screen visibility.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IAppVisibilityEvents.AppVisibilityOnMonitorChanged(Vanara.PInvoke.HMONITOR,Vanara.PInvoke.Shell32.MONITOR_APP_VISIBILITY,Vanara.PInvoke.Shell32.MONITOR_APP_VISIBILITY)">
            <summary>Notifies a client that the mode of a display has changed.</summary>
            <param name="hMonitor">The display that has a changing mode.</param>
            <param name="previousMode">
            The previous mode of hMonitor, which may be <c>MAV_UNKNOWN</c> if the client was unaware of the display previously.
            </param>
            <param name="currentMode">The current mode of hMonitor, which will not be <c>MAV_UNKNOWN</c>.</param>
            <returns>The return value is ignored.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IAppVisibilityEvents.LauncherVisibilityChange(System.Boolean)">
            <summary>Notifies a client that visibility of the Start screen has changed.</summary>
            <param name="currentVisibleState"><c>TRUE</c> if the Start screen is displayed; otherwise, <c>FALSE.</c></param>
            <returns>The return value is ignored.</returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.AppVisibility">
            <summary>CoClass for AppVisibility</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IAssocHandler">
            <summary>Exposes methods for operations with a file association dialog box or menu.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IAssocHandler.GetName(System.String@)">
            <summary>Retrieves the full path and file name of the executable file associated with the file type.</summary>
            <param name="ppsz">
            <para>Type: <c>LPWSTR*</c></para>
            <para>
            When this method returns, contains the address of a pointer to a null-terminated, Unicode string that contains the full path
            of the file, including the file name.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IAssocHandler.GetUIName(System.String@)">
            <summary>Retrieves the display name of an application.</summary>
            <param name="ppsz">
            <para>Type: <c>LPWSTR*</c></para>
            <para>
            When this method returns, contains the address of a pointer to a null-terminated, Unicode string that contains the display
            name of the application.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IAssocHandler.GetIconLocation(System.String@,System.Int32@)">
            <summary>Retrieves the location of the icon associated with the application.</summary>
            <param name="ppszPath">
            <para>Type: <c>LPWSTR*</c></para>
            <para>
            When this method returns, contains the address of a pointer to a null-terminated, Unicode string that contains the path to
            the application's icon.
            </para>
            </param>
            <param name="pIndex">
            <para>Type: <c>int*</c></para>
            <para>When this method returns, contains a pointer to the index of the icon within the resource named in ppszPath.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            <para>If the icon cannot be found, the function will return the path to the executable, and an icon index of zero.</para>
            <para>
            For performance reasons, an application may use the Shell image cache to retrieve the icon, rather than loading the icon
            directly from the path returned. The path and icon index can be passed directly to Shell_GetCachedImageIndex. One benefit of
            this is that the Shell cache can provide a default icon in the event that no icon was available for the application.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IAssocHandler.IsRecommended">
            <summary>Indicates whether the application is registered as a recommended handler for the queried file type.</summary>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>Returns S_OK if the program is recommended; otherwise, S_FALSE.</para>
            </returns>
            <remarks>
            <para>
            Applications that register themselves as handlers for particular file types can specify whether they are recommended
            handlers. This has no effect on the actual behavior of the applications when launched. It is simply provided as a hint to
            the user and a value that the UI can utilize programmatically, if desired. For example, the Shell's <c>Open With</c> dialog
            separates entries into <c>Recommended Programs</c> and <c>Other Programs</c>.
            </para>
            <para>
            Note that program recommendations may change over time. One example is provided when the user chooses an application from
            the <c>Other Programs</c> of the <c>Open With</c> dialog to open a particular file type. That may cause the Shell to
            "promote" that application to recommended status for that file type. Because the recommended status may change over time,
            applications should not cache this value, but query it each time it is needed.
            </para>
            <para>
            If SHAssocEnumHandlers was called with the ASSOC_FILTER_RECOMMENDED flag, then only recommended handlers are returned. If
            the ASSOC_FILTER_NONE flag was used, then you must call <c>IAssocHandler::IsRecommended</c> on each IAssocHandler object to
            determine whether it is recommended or not.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IAssocHandler.MakeDefault(System.String)">
            <summary>Sets an application as the default application for this file type.</summary>
            <param name="pszDescription">
            <para>Type: <c>LPCWSTR</c></para>
            <para>A pointer to a null-terminated, Unicode string that contains the display name of the application.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IAssocHandler.Invoke(System.Runtime.InteropServices.ComTypes.IDataObject)">
            <summary>Directly invokes the associated handler.</summary>
            <param name="pdo">
            <para>Type: <c>IDataObject*</c></para>
            <para>
            A pointer to an IDataObject that represents the selected item on which to invoke the handler. Note that you should not call
            <c>IAssocHandler::Invoke</c> with a selection of multiple items. If you have multiple items, call
            IAssocHandler::CreateInvoker instead. See Remarks for more details.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            <para>
            IAssocHandler objects are typically used to populate an <c>Open With</c> menu. When one of those menu items is selected,
            this method is called to launch the chosen application.
            </para>
            <para>Invoke and CreateInvoker</para>
            <para>
            The IDataObject used by these methods can represent either a single file or a selection of multiple files. Not all
            applications support the multiple file option. The applications that do support that scenario might impose other
            restrictions, such as the number of files that can be opened simultaneously, or the acceptable combination of file types.
            </para>
            <para>
            Therefore, an application often must determine whether the handler supports the selection before trying to invoke the
            handler. For example, an application might enable a menu item only if it has verified that the selection in question was
            supported by that handler.
            </para>
            <para>
            It is generally safe to assume that an application will support invocation on a single item, and in those cases the
            application typically calls <c>IAssocHandler::Invoke</c> based on that assumption.
            </para>
            <para>
            For multiple selection scenarios, however, the application should call IAssocHandler::CreateInvoker. That method retrieves
            an IAssocHandlerInvoker object that allows the calling application to first check whether the selection is supported
            (SupportsSelection), then to invoke the handler (Invoke).
            </para>
            <para>
            <c>IAssocHandler::Invoke</c> can be called on a selection of multiple files, but it is not recommended because of the large
            processing load involved and no guarantee that it will succeed.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IAssocHandler.CreateInvoker(System.Runtime.InteropServices.ComTypes.IDataObject,Vanara.PInvoke.Shell32.IAssocHandlerInvoker@)">
            <summary>
            Retrieves an object that enables the invocation of the associated handler on the current selection. The invoker includes the
            ability to verify whether the current selection is supported.
            </summary>
            <param name="pdo">
            <para>Type: <c>IDataObject*</c></para>
            <para>
            A pointer to an IDataObject that represents the selected item or items on which to invoke the handler. Note that if you have
            only a single item, IAssocHandler::Invoke could be the better choice. See Remarks for more details.
            </para>
            </param>
            <param name="ppInvoker">
            <para>Type: <c>IAssocHandlerInvoker**</c></para>
            <para>
            When this method returns, contains the address of a pointer to an IAssocHandlerInvoker object. This object is used to invoke
            the menu item after ensuring that the selected items are supported by the associated handler.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            <para>
            IAssocHandler objects are typically used to populate an <c>Open With</c> menu. When one of those menu items is selected,
            this method is called to launch the chosen application.
            </para>
            <para>Invoke and CreateInvoker</para>
            <para>
            The IDataObject used by these methods can represent either a single file or it may represent a selection of multiple files.
            Not all applications support the multiple files option. Those applications that do support that scenario might impose other
            restrictions such as the number of files that can be opened at once, or acceptable combinations of file types.
            </para>
            <para>
            Therefore, an application often must determine whether the handler supports the selection before trying to invoke the
            handler. For example, an application might enable a menu item only if it knew that the selection in question was supported
            by that handler.
            </para>
            <para>
            It is generally safe to assume that an application will support invocation on a single item; in those cases the application
            typically calls IAssocHandler::Invoke.
            </para>
            <para>
            For multiple selection scenarios, the application should call <c>IAssocHandler::CreateInvoker</c>. That method retrieves an
            IAssocHandlerInvoker object that allows the calling application to first check whether the selection is supported
            (SupportsSelection), then to invoke the handler (Invoke).
            </para>
            <para>
            IAssocHandler::Invoke can be called on a selection of multiple files, but it is not recommended due to the large processing
            load involved and no guarantee of success.
            </para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IAssocHandlerInvoker">
            <summary>Exposes methods that invoke an associated application handler.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IAssocHandlerInvoker.SupportsSelection">
            <summary>Determines whether an invoker supports its selection.</summary>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>Returns <c>S_OK</c> if this instance supports its selection, or <c>S_FALSE</c> otherwise.</para>
            </returns>
            <remarks>
            For example, this method should return whether an application (as selected from an "Open With" context menu) can <c>Open</c>
            a file.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IAssocHandlerInvoker.Invoke">
            <summary>Invokes an associated application handler.</summary>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            There is no guarantee that a given association handler will support a particular selection, especially if multiple items are
            selected. Before attempting to invoke the selection via this method, it is recommended to call IAssocHandlerInvoker::SupportsSelection.
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IEnumAssocHandlers">
            <summary>Exposes a method that allows enumeration of a collection of handlers associated with particular file name extensions.</summary>
            <remarks>SHAssocEnumHandlers is the usual method of creating an IEnumAssocHandlers pointer.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IEnumAssocHandlers.Next(System.UInt32,Vanara.PInvoke.Shell32.IAssocHandler[],System.UInt32@)">
            <summary>Retrieves a specified number of elements.</summary>
            <param name="celt">
            <para>Type: <c>ULONG</c></para>
            <para>The number of elements to retrieve.</para>
            </param>
            <param name="rgelt">
            <para>Type: <c>IAssocHandler**</c></para>
            <para>
            When this method returns, contains the address of an array of IAssocHandler pointers. Each <c>IAssocHandler</c> represents a
            single handler.
            </para>
            </param>
            <param name="pceltFetched">
            <para>Type: <c>ULONG*</c></para>
            <para>When this method returns, contains a pointer to the number of elements retrieved.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.ATTACHMENT_ACTION">
            <summary>
            Provides a set of flags to be used with IAttachmentExecute::Prompt to indicate the action to be performed upon user confirmation.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ATTACHMENT_ACTION.ATTACHMENT_ACTION_CANCEL">
            <summary>Cancel</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ATTACHMENT_ACTION.ATTACHMENT_ACTION_SAVE">
            <summary>Save</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ATTACHMENT_ACTION.ATTACHMENT_ACTION_EXEC">
            <summary>Execute</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.ATTACHMENT_PROMPT">
            <summary>Provides a set of flags to be used with IAttachmentExecute::Prompt to indicate the type of prompt UI to display.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ATTACHMENT_PROMPT.ATTACHMENT_PROMPT_NONE">
            <summary>Do not use.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ATTACHMENT_PROMPT.ATTACHMENT_PROMPT_SAVE">
            <summary>Displays a prompt asking whether the user would like to save the attachment.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ATTACHMENT_PROMPT.ATTACHMENT_PROMPT_EXEC">
            <summary>Displays a prompt asking whether the user would like to execute the attachment.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ATTACHMENT_PROMPT.ATTACHMENT_PROMPT_EXEC_OR_SAVE">
            <summary>Displays a prompt giving the user a choice of executing or saving the attachment.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IAttachmentExecute">
            <summary>
            Exposes methods that work with client applications to present a user environment that provides safe download and exchange of
            files through email and messaging attachments.
            </summary>
            <remarks>
            <para>This interface assumes the following:</para>
            <list type="bullet">
            <item>
            <term>The client has policies or settings for attachment support and behavior.</term>
            </item>
            <item>
            <term>The client interacts with the user.</term>
            </item>
            </list>
            <para>The IID for this interface is <c>IID_IAttachmentExecute</c>.</para>
            <para>Here is an example of how an email client might use <c>IAttachmentExecute</c>.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IAttachmentExecute.SetClientTitle(System.String)">
            <summary>Specifies and stores the title of the prompt window.</summary>
            <param name="pszTitle">
            <para>Type: <c>LPCWSTR</c></para>
            <para>A pointer to a string that contains the title text.</para>
            </param>
            <remarks>
            If <c>IAttachmentExecute::SetClientTitle</c> is not called, a default title of <c>File Download</c> is used in the prompt's
            title bar.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IAttachmentExecute.SetClientGuid(System.Guid@)">
            <summary>Specifies and stores the GUID for the client.</summary>
            <param name="guid">
            <para>Type: <c>REFGUID</c></para>
            <para>The GUID that represents the client.</para>
            </param>
            <remarks>
            A user can choose not to display certain prompts. That information is stored in the registry on a per-client basis, indexed
            by guid.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IAttachmentExecute.SetLocalPath(System.String)">
            <summary>Sets and stores the path to the file.</summary>
            <param name="pszLocalPath">
            <para>Type: <c>LPCWSTR</c></para>
            <para>A pointer to a string that contains the local path where the attachment file is to be stored.</para>
            </param>
            <remarks>
            <para>Calling <c>IAttachmentExecute::SetLocalPath</c> is required.</para>
            <para>
            When the attachment is approved for execution by the user (either through policy or prompt), the path specified by this
            method is used. If only IAttachmentExecute::SetFileName was called before calling IAttachmentExecute::CheckPolicy and
            IAttachmentExecute::Prompt, that trust could be revoked if the assumed local path was different from that set by
            <c>IAttachmentExecute::SetLocalPath</c>. Trust can be granted by various Zone APIs, antivirus services, file type
            information, policies as well as other system trust providers.
            </para>
            <para><c>IAttachmentExecute::SetLocalPath</c> must be called before calling IAttachmentExecute::Execute.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IAttachmentExecute.SetFileName(System.String)">
            <summary>Specifies and stores the proposed name of the file.</summary>
            <param name="pszFileName">
            <para>Type: <c>LPCWSTR</c></para>
            <para>A pointer to a string that contains the file name.</para>
            </param>
            <remarks>
            <para>No path information should be included at pszFileName, just the file's name.</para>
            <para>
            <c>IAttachmentExecute::SetFileName</c> can be used by the calling application to check the validity of the file name before
            copying the file locally. The file name is checked for name collisions against other files stored at the local path location.
            </para>
            <para><c>IAttachmentExecute::SetFileName</c> is optional.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IAttachmentExecute.SetSource(System.String)">
            <summary>Sets an alternate path or URL for the source of a file transfer.</summary>
            <param name="pszSource">
            <para>Type: <c>LPCWSTR</c></para>
            <para>A pointer to a string containing the path or URL to use as the source.</para>
            </param>
            <remarks>
            <para>
            The path or URL declared here is used as the primary zone determinant. The policy under which the attachment is handled is
            based partially on the perceived zone. If pszSource is <c>NULL</c>, the default is Restricted Zone.
            </para>
            <para>Calling <c>IAttachmentExecute::SetSource</c> is optional.</para>
            <para>The path or URL declared here can also be used in the prompt UI as the <c>From</c> field.</para>
            <para>The path or URL declared here can also be sent to handlers that can process URLs.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IAttachmentExecute.SetReferrer(System.String)">
            <summary>Sets the security zone associated with the attachment file based on the referring file.</summary>
            <param name="pszReferrer">
            <para>Type: <c>LPCWSTR</c></para>
            <para>A pointer to a string containing the path of the referring file.</para>
            </param>
            <remarks>
            <para>
            <c>IAttachmentExecute::SetReferrer</c> and IAttachmentExecute::SetSource have similar functionality. If both are set, the
            least-trusted zone of the two is used.
            </para>
            <para>
            <c>IAttachmentExecute::SetReferrer</c> is used by container files to indicate indirect inheritance and avoid zone elevation.
            It can also be used with shortcut files to limit elevation based on parameters.
            </para>
            <para>Calling <c>IAttachmentExecute::SetReferrer</c> is optional.</para>
            <para><c>IAttachmentExecute::SetReferrer</c> is only used to determine the security zone and its associated policies.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IAttachmentExecute.CheckPolicy">
            <summary>Provides a Boolean test that can be used to make decisions based on the attachment's execution policy.</summary>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>Returns one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>S_OK</term>
            <term>Enable</term>
            </item>
            <item>
            <term>S_FALSE</term>
            <term>Prompt</term>
            </item>
            <item>
            <term>Any other failure code</term>
            <term>Disable</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            <c>IAttachmentExecute::CheckPolicy</c> examines a set of properties known collectively as evidence. Anything used to
            determine trust level is considered evidence. These properties are set using the following methods.
            </para>
            <list type="bullet">
            <item>
            <term>IAttachmentExecute::SetFileName</term>
            </item>
            <item>
            <term>IAttachmentExecute::SetLocalPath</term>
            </item>
            <item>
            <term>IAttachmentExecute::SetReferrer</term>
            </item>
            <item>
            <term>IAttachmentExecute::SetSource</term>
            </item>
            </list>
            <para>
            The information returned by <c>IAttachmentExecute::CheckPolicy</c> enables an application to modify its UI appropriately for
            the situation.
            </para>
            <para>
            <c>IAttachmentExecute::CheckPolicy</c> requires the application first to call either IAttachmentExecute::SetFileName or IAttachmentExecute::SetLocalPath.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IAttachmentExecute.Prompt(Vanara.PInvoke.HWND,Vanara.PInvoke.Shell32.ATTACHMENT_PROMPT,Vanara.PInvoke.Shell32.ATTACHMENT_ACTION@)">
            <summary>Presents a prompt UI to the user.</summary>
            <param name="hwnd">
            <para>Type: <c>HWND</c></para>
            <para>A handle to the parent window.</para>
            </param>
            <param name="prompt">
            <para>Type: <c>ATTACHMENT_PROMPT</c></para>
            <para>A member of the ATTACHMENT_PROMPT enumeration that indicates what type of prompt UI to display to the user.</para>
            </param>
            <param name="paction">
            <para>Type: <c>ATTACHMENT_ACTION*</c></para>
            <para>A member of the ATTACHMENT_ACTION enumeration that indicates the action to be performed upon user confirmation.</para>
            </param>
            <remarks>
            <para>You must call IAttachmentExecute::SetFileName or IAttachmentExecute::SetLocalPath before calling <c>IAttachmentExecute::Prompt</c>.</para>
            <para>
            <c>IAttachmentExecute::Prompt</c> can be called by the application to force UI presentation before the file has been copied
            to disk.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IAttachmentExecute.Save">
            <summary>Saves the attachment.</summary>
            <remarks>
            <para>
            Before calling <c>IAttachmentExecute::Save</c>, you must call IAttachmentExecute::SetLocalPath with a valid path. The file
            should be copied to that local path before <c>IAttachmentExecute::Save</c> is called.
            </para>
            <para>
            <c>IAttachmentExecute::Save</c> should always be called if the local path declared in IAttachmentExecute::SetLocalPath is
            not the path of a temporary directory.
            </para>
            <para>
            <c>IAttachmentExecute::Save</c> may run virus scanners or other trust services to validate the file before saving it. Note
            that these services can delete or alter the file.
            </para>
            <para><c>IAttachmentExecute::Save</c> may attach evidence to the local path in its NTFS alternate data stream (ADS).</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IAttachmentExecute.Execute(Vanara.PInvoke.HWND,System.String,Vanara.PInvoke.HPROCESS@)">
            <summary>Executes an action on an attachment.</summary>
            <param name="hwnd">
            <para>Type: <c>HWND</c></para>
            <para>The handle of the parent window.</para>
            </param>
            <param name="pszVerb">
            <para>Type: <c>LPCWSTR</c></para>
            <para>
            A pointer to a null-terminated string that contains a verb specifying the action to be performed on the file. See the
            lpOperation parameter in ShellExecute for valid strings. This value can be <c>NULL</c>.
            </para>
            </param>
            <param name="phProcess">
            <para>Type: <c>HANDLE*</c></para>
            <para>A pointer to a handle to the source process, used for synchronous operation. This value can be <c>NULL</c>.</para>
            </param>
            <remarks>
            <para>
            Before calling <c>IAttachmentExecute::Execute</c>, IAttachmentExecute::SetLocalPath must be called with a valid local path
            and the file must be copied to that location.
            </para>
            <para>
            If a prompt is indicated, <c>IAttachmentExecute::Execute</c> calls IAttachmentExecute::Prompt using the
            ATTACHMENT_ACTION_EXEC value.
            </para>
            <para>
            <c>IAttachmentExecute::Execute</c> may run virus scanners or other trust services to validate the file before executing it.
            Note that these services can delete or alter the file.
            </para>
            <para><c>IAttachmentExecute::Execute</c> may attach evidence to the local path in its NTFS alternate data stream (ADS).</para>
            <para>
            If phProcess is not <c>NULL</c>, <c>IAttachmentExecute::Execute</c> operates as a synchronous process and returns an
            <c>HPROCESS</c>, if available. If phProcess is <c>NULL</c>, <c>IAttachmentExecute::Execute</c> operates as an asynchronous
            process. This implies that the calling application has a message pump and a long-lived window.
            </para>
            <para>
            If the handle pointed to by phProcess is non- <c>NULL</c> when the method returns, the calling application is responsible
            for calling CloseHandle to free the handle when it is no longer needed.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IAttachmentExecute.SaveWithUI(Vanara.PInvoke.HWND)">
            <summary>Presents the user with explanatory error UI if the save action fails.</summary>
            <param name="hwnd">
            <para>Type: <c>HWND</c></para>
            <para>The handle of the parent window.</para>
            </param>
            <remarks>
            <para><c>IAttachmentExecute::SaveWithUI</c> does not call IAttachmentExecute::Prompt.</para>
            <para>
            Before calling <c>IAttachmentExecute::SaveWithUI</c>, you must call IAttachmentExecute::SetLocalPath with a valid path. The
            file is copied to that local path before <c>IAttachmentExecute::SaveWithUI</c> is called.
            </para>
            <para>
            <c>IAttachmentExecute::SaveWithUI</c> may run virus scanners or other trust services to validate the file before saving it.
            Note that these services can delete or alter the file.
            </para>
            <para><c>IAttachmentExecute::SaveWithUI</c> may attach evidence to the local path in its NTFS alternate data stream (ADS).</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IAttachmentExecute.ClearClientState">
            <summary>
            Removes any stored state that is based on the client's GUID. An example might be a setting based on a checked box that
            indicates a prompt should not be displayed again for a particular file type.
            </summary>
            <remarks>IAttachmentExecute::SetClientGuid must be called before using <c>IAttachmentExecute::ClearClientState</c>.</remarks>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.AttachmentServices">
            <summary>CLSID_AttachmentServices</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IAutoCompleteDropDown">
            <summary>
            Exposes methods that allow clients to reset or query the display state of the autocomplete drop-down list, which contains
            possible completions to a string entered by the user in an edit control.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IAutoCompleteDropDown.GetDropDownStatus(System.UInt32@,System.String@)">
            <summary>Gets the current display status of the autocomplete drop-down list.</summary>
            <param name="pdwFlags">
            <para>Type: <c>DWORD*</c></para>
            <para>
            A pointer to a value indicating whether the autocomplete drop-down list is currently displayed. This parameter can be
            <c>NULL</c> on entry if this information is not needed. The following values are recognized as the target of this pointer.
            </para>
            <para>(0x0000)</para>
            <para>The list is not visible.</para>
            <para>ACDD_VISIBLE (0x0001)</para>
            <para>The list is visible.</para>
            </param>
            <param name="ppwszString">
            <para>Type: <c>LPWSTR*</c></para>
            <para>
            A pointer to a buffer containing the first select item in the drop-down list, if the value pointed to by pdwFlags is
            <c>ACDD_VISIBLE</c>. This value can be <c>NULL</c> on entry if this information is not needed.
            </para>
            <para>If pdwFlags is zero on exit, then this value will be <c>NULL</c>.</para>
            <para>
            If this value is not <c>NULL</c> on exit, the buffer it points to must be freed using CoTaskMemFree when it is no longer needed.
            </para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IAutoCompleteDropDown.ResetEnumerator">
            <summary>Forces the autocomplete object to refresh its list of suggestions when the list is visible.</summary>
            <remarks>
            The drop-down list is always rebuilt before it is displayed, so there is no reason to use this method unless the drop-down
            list is currently visible.
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.CDBE_ACTIONS">
            <summary>One of the following values indicating the supported type.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CDBE_ACTIONS.CDBE_TYPE_MUSIC">
            <summary>
            0x00000001. Music files are supported. The CD writing extension is invoked for the <c>Copy to audio CD</c> task in the My
            Music folder.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CDBE_ACTIONS.CDBE_TYPE_DATA">
            <summary>0x00000002. Data files are supported. The CD writing extension is excluded from <c>Copy to audio CD</c>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CDBE_ACTIONS.CDBE_TYPE_ALL">
            <summary>
            (int)0xFFFFFFFF. All files are supported. The CD writing extension is invoked for the <c>Copy to audio CD</c> task in the My
            Music folder.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.ICDBurn">
            <summary>
            Exposes methods that determine whether a system has hardware for writing to CD, the drive letter of a CD writer device, and
            programmatically initiate a CD writing session.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ICDBurn.GetRecorderDriveLetter(System.Text.StringBuilder,System.UInt32)">
            <summary>Gets the drive letter of a CD drive that has been marked as write-enabled.</summary>
            <param name="pszDrive">
            <para>Type: <c>LPWSTR</c></para>
            <para>A pointer to a string containing the drive letter, for example "F:".</para>
            </param>
            <param name="cch">
            <para>Type: <c>UINT</c></para>
            <para>
            The size of the string, in characters, pointed to by pszDrive. This value will normally be 4. Values larger than 4 are
            allowed, but the extra characters will be ignored by this method. Values less than 4 will generate an E_INVALIDARG error.
            </para>
            </param>
            <remarks>
            <para>
            The drive whose letter designation is returned by this method is the drive that has the <c>Enable cd writing on this
            drive</c> option selected. This option is found on the drive's property sheet. Only one drive on a system can have this
            option selected.
            </para>
            <para>If a recordable CD drive is present but that option has been deselected, the method will return an error code.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ICDBurn.Burn(Vanara.PInvoke.HWND)">
            <summary>Instructs data to be copied from the staging area to a writable CD.</summary>
            <param name="hwnd">
            <para>Type: <c>HWND</c></para>
            <para>The handle of the parent window of the UI.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            The staging area has a default location of %userprofile%\Local Settings\Application Data\Microsoft\CD Burning. Its actual
            path can be retrieved through SHGetFolderPath, SHGetSpecialFolderPath, SHGetFolderLocation, SHGetSpecialFolderLocation, or
            SHGetFolderPathAndSubDir by using the CSIDL_CDBURN_AREA value.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ICDBurn.HasRecordableDrive">
            <summary>Scans the system for a CD drive with write-capability, returning <c>TRUE</c> if one is found.</summary>
            <returns>
            <para>Type: <c>BOOL*</c></para>
            <para>A pointer to a Boolean value containing <c>TRUE</c> if a suitable device is located, <c>FALSE</c> otherwise.</para>
            </returns>
            <remarks>
            This search does not rely on the state of the <c>Enable cd writing on this drive</c> option found on the drive's property
            sheet. Instead, the determination is based on IMAPI.
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.ICDBurnExt">
            <summary>
            <para>
            [ <c>ICDBurnExt</c> is available for use in the operating systems specified in the Requirements section. It may be altered or
            unavailable in subsequent versions.]
            </para>
            <para>Exposes a single method that determines content types supported by a CD writing extension.</para>
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ICDBurnExt.GetSupportedActionTypes">
            <summary>Determines the supported data type for a CD writing extension.</summary>
            <returns>
            <para>Type: <c>CDBE_ACTIONS*</c></para>
            <para>One of the following values indicating the supported type.</para>
            <para>CDBE_TYPE_MUSIC (0x00000001)</para>
            <para>
            0x00000001. Music files are supported. The CD writing extension is invoked for the <c>Copy to audio CD</c> task in the My
            Music folder.
            </para>
            <para>CDBE_TYPE_DATA (0x00000002)</para>
            <para>0x00000002. Data files are supported. The CD writing extension is excluded from <c>Copy to audio CD</c>.</para>
            <para>CDBE_TYPE_ALL ((int)0xFFFFFFFF)</para>
            <para>
            (int)0xFFFFFFFF. All files are supported. The CD writing extension is invoked for the <c>Copy to audio CD</c> task in the My
            Music folder.
            </para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.CDBurn">
            <summary>CoClass for ICDBurn</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.CDB2GVF">
            <summary>A value that controls the behavior of the view when in common dialog mode.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CDB2GVF.CDB2GVF_SHOWALLFILES">
            <summary>All files, including hidden and system files, should be shown. In Windows XP, this is the only recognized flag.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CDB2GVF.CDB2GVF_ISFILESAVE">
            <summary>This browser is designated to choose a file to save.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CDB2GVF.CDB2GVF_ALLOWPREVIEWPANE">
            <summary>Not used.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CDB2GVF.CDB2GVF_NOSELECTVERB">
            <summary>Do not show a "select" verb on an item's context menu.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CDB2GVF.CDB2GVF_NOINCLUDEITEM">
            <summary>IncludeObject should not be called.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CDB2GVF.CDB2GVF_ISFOLDERPICKER">
            <summary>This browser is designated to pick folders.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CDB2GVF.CDB2GVF_ADDSHIELD">
            <summary>Windows 7 and later. Displays a UAC shield on the selected item when CDB2GVF_NOSELECTVERB is not specified.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.CDB2N">
            <summary>Values for ICommDlgBrowser2::Notify method.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CDB2N.CDB2N_CONTEXTMENU_DONE">
            <summary>Indicates that the shortcut menu is no longer displayed.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CDB2N.CDB2N_CONTEXTMENU_START">
            <summary>Indicates that the shortcut menu is about to be displayed.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.CDBOSC">
            <summary>Indicates a change in the selection state in ICommDlgBrowser::OnStateChange.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CDBOSC.CDBOSC_SETFOCUS">
            <summary>The focus has been set to the view.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CDBOSC.CDBOSC_KILLFOCUS">
            <summary>The view has lost the focus.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CDBOSC.CDBOSC_SELCHANGE">
            <summary>The selection has changed.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CDBOSC.CDBOSC_RENAME">
            <summary>An item has been renamed.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CDBOSC.CDBOSC_STATECHANGE">
            <summary>An item has been checked or unchecked.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.ICommDlgBrowser">
            <summary>
            Exposed by the common file dialog boxes to be used when they host a Shell browser. If supported, ICommDlgBrowser exposes methods
            that allow a Shell view to handle several cases that require different behavior in a dialog box than in a normal Shell view. You
            obtain an ICommDlgBrowser interface pointer by calling QueryInterface on the IShellBrowser object.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ICommDlgBrowser.OnDefaultCommand(Vanara.PInvoke.Shell32.IShellView)">
            <summary>Called when a user double-clicks in the view or presses the ENTER key.</summary>
            <param name="ppshv">A pointer to the view's IShellView interface.</param>
            <returns>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ICommDlgBrowser.OnStateChange(Vanara.PInvoke.Shell32.IShellView,Vanara.PInvoke.Shell32.CDBOSC)">
            <summary>Called after a state, identified by the uChange parameter, has changed in the IShellView interface.</summary>
            <param name="ppshv">A pointer to the view's IShellView interface.</param>
            <param name="uChange">Change in the selection state. This parameter can be one of the following values.</param>
            <returns>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ICommDlgBrowser.IncludeObject(Vanara.PInvoke.Shell32.IShellView,System.IntPtr)">
            <summary>Allows the common dialog box to filter objects that the view displays.</summary>
            <param name="ppshv">A pointer to the view's IShellView interface.</param>
            <param name="pidl">A PIDL, relative to the folder, that identifies the object.</param>
            <returns>The browser should return S_OK to include the object in the view, or S_FALSE to hide it.</returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.ICommDlgBrowser3">
            <summary>Extends the capabilities of ICommDlgBrowser2, and used by the common file dialog boxes when they host a Shell browser.</summary>
            <seealso cref="T:Vanara.PInvoke.Shell32.ICommDlgBrowser"/>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ICommDlgBrowser3.OnDefaultCommand(Vanara.PInvoke.Shell32.IShellView)">
            <summary>Called when a user double-clicks in the view or presses the ENTER key.</summary>
            <param name="ppshv">A pointer to the view's IShellView interface.</param>
            <returns>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ICommDlgBrowser3.OnStateChange(Vanara.PInvoke.Shell32.IShellView,Vanara.PInvoke.Shell32.CDBOSC)">
            <summary>Called after a state, identified by the uChange parameter, has changed in the IShellView interface.</summary>
            <param name="ppshv">A pointer to the view's IShellView interface.</param>
            <param name="uChange">Change in the selection state. This parameter can be one of the following values.</param>
            <returns>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ICommDlgBrowser3.IncludeObject(Vanara.PInvoke.Shell32.IShellView,System.IntPtr)">
            <summary>Allows the common dialog box to filter objects that the view displays.</summary>
            <param name="ppshv">A pointer to the view's IShellView interface.</param>
            <param name="pidl">A PIDL, relative to the folder, that identifies the object.</param>
            <returns>The browser should return S_OK to include the object in the view, or S_FALSE to hide it.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ICommDlgBrowser3.GetDefaultMenuText(Vanara.PInvoke.Shell32.IShellView,System.Text.StringBuilder,System.Int32)">
            <summary>Called by the Shell view to get the default shortcut menu text.</summary>
            <param name="ppshv">A pointer to the view's IShellView interface.</param>
            <param name="pszText">A pointer to a buffer that is used by the Shell browser to return the default shortcut menu text.</param>
            <param name="cchMax">
            The size of the pszText buffer, in characters. It should be at least the maximum allowable path length (MAX_PATH) in size.
            </param>
            <returns>
            Returns S_OK if a new default shortcut menu text was returned in pshv. If S_FALSE is returned, use the normal default text.
            Otherwise, returns a standard COM error value.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ICommDlgBrowser3.GetViewFlags(Vanara.PInvoke.Shell32.CDB2GVF@)">
            <summary>Called when the view must determine if special customization needs to be made for the common dialog browser.</summary>
            <param name="pdwFlags">A DWORD value that controls the behavior of the view when in common dialog mode.</param>
            <returns>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ICommDlgBrowser3.Notify(Vanara.PInvoke.Shell32.IShellView,Vanara.PInvoke.Shell32.CDB2N)">
            <summary>Called by a Shell view to notify the common dialog box hosting it that an event has occurred.</summary>
            <param name="ppshv">A pointer to the view's IShellView interface.</param>
            <param name="dwNotifyType">A flag that can can take one of the following two values.</param>
            <returns>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ICommDlgBrowser3.GetCurrentFilter(System.Text.StringBuilder,System.Int32)">
            <summary>Gets the current filter as a Unicode string.</summary>
            <param name="pszFileSpec">Contains a pointer to the current filter path/file as a Unicode string.</param>
            <param name="cchFileSpec">Specifies the path/file length, in characters.</param>
            <returns>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ICommDlgBrowser3.OnColumnClicked(Vanara.PInvoke.Shell32.IShellView,System.Int32)">
            <summary>Called after a specified column is clicked in the IShellView interface.</summary>
            <param name="ppshv">A pointer to the IShellView interface of the hosted view.</param>
            <param name="iColumn">The index of the column clicked.</param>
            <returns>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ICommDlgBrowser3.OnPreViewCreated(Vanara.PInvoke.Shell32.IShellView)">
            <summary>Called after a specified preview is created in the IShellView interface.</summary>
            <param name="ppshv">A pointer to the IShellView interface of the hosted view.</param>
            <returns>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IFolderFilter">
            <summary>Exposed by a client to specify how to filter the enumeration of a Shell folder by a server application.</summary>
            <remarks>
            <para>
            This interface is most often used with SHBrowseForFolder to filter the contents of the tree view displayed in a folder selection
            dialog box. To use <c>IFolderFilter</c> with <c>SHBrowseForFolder</c>, the BIF_NEWDIALOGSTYLE flag must be set.
            </para>
            <para>
            When your application calls SHBrowseForFolder, you become a client of the folder browser object. The folder browser object
            communicates with you by sending messages to a callback function, BrowseCallbackProc. The <c>BFFM_IUNKNOWN</c> message handled
            by that callback function contains a pointer to the folder browser's IUnknown interface. To filter the display of a folder's
            contents, do the following:
            </para>
            <list type="number">
            <item>
            <term>Use the folder browser's QueryInterface method to request a pointer to the IFolderFilterSite interface.</term>
            </item>
            <item>
            <term>Call IFolderFilterSite::SetFilter, passing it a pointer to your <c>IFolderFilter</c> interface.</term>
            </item>
            <item>
            <term>
            The folder browser then queries IFolderFilter::GetEnumFlags and IFolderFilter::ShouldShowto determine how to filter the enumeration.
            </term>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFolderFilter.ShouldShow(Vanara.PInvoke.Shell32.IShellFolder,Vanara.PInvoke.Shell32.PIDL,Vanara.PInvoke.Shell32.PIDL)">
            <summary>
            Specifies whether an individual item should be allowed through the filter and which should be blocked. When used with
            SHBrowseForFolder, specifies which items should be shown in the dialog box tree view and which should not. The determination
            to show or not show an item is up to the application.
            </summary>
            <param name="psf">
            <para>Type: <c>IShellFolder*</c></para>
            <para>A pointer to the folder's IShellFolder interface.</para>
            </param>
            <param name="pidlFolder">
            <para>Type: <c>PCIDLIST_ABSOLUTE</c></para>
            <para>The PIDL of the folder.</para>
            </param>
            <param name="pidlItem">
            <para>Type: <c>PCUITEMID_CHILD</c></para>
            <para>The relative PIDL of the child item of pidlFolder in question.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>
            Returns S_OK if the item should be shown, S_FALSE if it should not be shown, or a standard error code if an error is
            encountered. If an error is encountered, the item is not shown.
            </para>
            </returns>
            <remarks>
            <para>The host calls this method for each item in the folder referred to by psf or pidlFolder.</para>
            <para>
            It is recommended that your implementation convert the psf and pidlItem information into an IShellItem, which is easier to
            consume. The following example shows this:
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFolderFilter.GetEnumFlags(Vanara.PInvoke.Shell32.IShellFolder,Vanara.PInvoke.Shell32.PIDL,Vanara.PInvoke.HWND@,Vanara.PInvoke.Shell32.SHCONTF@)">
            <summary>
            Allows a client to specify which classes of objects in a Shell folder should be enumerated. When used with
            SHBrowseForFolder, specifies the class or classes of items that should be shown in the dialog box tree view and which class
            or classes should not.
            </summary>
            <param name="psf">
            <para>Type: <c>IShellFolder*</c></para>
            <para>A pointer to the folder's IShellFolder interface.</para>
            </param>
            <param name="pidlFolder">
            <para>Type: <c>PCIDLIST_ABSOLUTE</c></para>
            <para>The PIDL of the folder.</para>
            </param>
            <param name="phwnd">
            <para>Type: <c>HWND*</c></para>
            <para>A pointer to the host's window handle.</para>
            </param>
            <param name="pgrfFlags">
            <para>Type: <c>DWORD*</c></para>
            <para>One or more SHCONTF values that specify the classes of object to enumerate.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IFolderFilterSite">
            <summary>Exported by a host to allow clients to specify how to filter a Shell folder enumeration.</summary>
            <remarks>
            <para>
            The most common use of this interface is when your application calls SHBrowseForFolder. When you call this function, you become
            a client of the folder browser object. That object communicates with you by sending messages to a callback function,
            BrowseCallbackProc. The BFFM_IUNKNOWN message contains a pointer to the folder browser's IUnknown interface. To filter folder enumeration:
            </para>
            <list type="number">
            <item>
            <term>
            Use the IUnknown pointer to call the folder browser's QueryInterface method, and request a pointer to the
            <c>IFolderFilterSite</c> interface.
            </term>
            </item>
            <item>
            <term>
            Call IFolderFilterSite::SetFilter, and pass the folder browser a pointer to your IFolderFilter (IUnknown or IFilterFolder?) interface.
            </term>
            </item>
            <item>
            <term>
            The folder browser will then query the two methods of the <c>IFolderFilterSite</c> interface to determine how to filter the enumeration.
            </term>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFolderFilterSite.SetFilter(System.Object)">
            <summary>Exposed by a host to allow clients to pass the host their IUnknown interface pointers.</summary>
            <param name="punk">
            <para>Type: <c>IUnknown*</c></para>
            <para>
            A pointer to the client's IUnknown interface. To notify the host to terminate filtering and stop calling your IFolderFilter
            interface, set this parameter to <c>NULL</c>.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            After you get a pointer to the host's IFolderFilterSite interface, call this method to pass the host a pointer to your
            IUnknown interface. The host will then use this pointer to call your QueryInterface method to request a pointer to your
            IFolderFilter interface. If this call fails, <c>IFolderFilterSite::SetFilter</c> returns <c>E_NOINTERFACEAVAILABLE</c>. If
            the call is successful, the host will then call the <c>IFolderFilter</c> interface's two methods to determine how to
            enumerate the contents of the folder.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CMDSTR_NEWFOLDER">
            <summary>Common Invoke command string for creating a new folder.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CMDSTR_OPEN">
            <summary>Common Invoke command string for opening a file.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CMDSTR_PREVIEW">
            <summary>Common Invoke command string for previewing a file.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CMDSTR_PRINT">
            <summary>Common Invoke command string for printing.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CMDSTR_RUNAS">
            <summary>Common Invoke command string for running an elevated command.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CMDSTR_VIEWDETAILS">
            <summary>Common Invoke command string for viewing details.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CMDSTR_VIEWLIST">
            <summary>Common Invoke command string for viewing a list.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.CMF">
            <summary>Flag options for the IContextMenu interface.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CMF.CMF_NORMAL">
            <summary>
            Indicates normal operation. A shortcut menu extension, namespace extension, or drag-and-drop handler can add all menu items.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CMF.CMF_DEFAULTONLY">
            <summary>
            The user is activating the default action, typically by double-clicking. This flag provides a hint for the shortcut menu
            extension to add nothing if it does not modify the default item in the menu. A shortcut menu extension or drag-and-drop
            handler should not add any menu items if this value is specified. A namespace extension should at most add only the default item.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CMF.CMF_VERBSONLY">
            <summary>
            The shortcut menu is that of a shortcut file (normally, a .lnk file). Shortcut menu handlers should ignore this value.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CMF.CMF_EXPLORE">
            <summary>The Windows Explorer tree window is present.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CMF.CMF_NOVERBS">
            <summary>This flag is set for items displayed in the Send To menu. Shortcut menu handlers should ignore this value.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CMF.CMF_CANRENAME">
            <summary>
            The calling application supports renaming of items. A shortcut menu or drag-and-drop handler should ignore this flag. A
            namespace extension should add a Rename item to the menu if applicable.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CMF.CMF_NODEFAULT">
            <summary>
            No item in the menu has been set as the default. A drag-and-drop handler should ignore this flag. A namespace extension
            should not set any of the menu items as the default.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CMF.CMF_EXTENDEDVERBS">
            <summary>0x00000100. The calling application wants extended verbs. Normal verbs are displayed when the user right-clicks an object. To display extended verbs, the user must right-click while pressing the Shift key.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CMF.CMF_INCLUDESTATIC">
            <summary>
            This value is not available.
            <para>
            Windows Server 2003 and Windows XP: 0x00000040. A static menu is being constructed. Only the browser should use this flag;
            all other shortcut menu extensions should ignore it.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CMF.CMF_ITEMMENU">
            <summary>
            0x00000080. The calling application is invoking a shortcut menu on an item in the view (as opposed to the background of the view).
            <para>Windows Server 2003 and Windows XP: This value is not available.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CMF.CMF_DISABLEDVERBS">
            <summary>
            0x00000200. The calling application intends to invoke verbs that are disabled, such as legacy menus.
            <para>Windows Server 2003 and Windows XP: This value is not available.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CMF.CMF_ASYNCVERBSTATE">
            <summary>
            0x00000400. The verb state can be evaluated asynchronously.
            <para>Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP: This value is not available.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CMF.CMF_OPTIMIZEFORINVOKE">
            <summary>
            0x00000800. Informs context menu handlers that do not support the invocation of a verb through a canonical verb name to
            bypass IContextMenu::QueryContextMenu in their implementation.
            <para>Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP: This value is not available.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CMF.CMF_SYNCCASCADEMENU">
            <summary>
            0x00001000. Populate submenus synchronously.
            <para>Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP: This value is not available.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CMF.CMF_DONOTPICKDEFAULT">
            <summary>
            0x00001000. When no verb is explicitly specified, do not use a default verb in its place.
            <para>Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP: This value is not available.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CMF.CMF_RESERVED">
            <summary>
            0xffff0000. This flag is a bitmask that specifies all bits that should not be used. This is to be used only as a mask. Do not
            pass this as a parameter value.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.CMIC">
            <summary>Indicate desired behavior and indicate that other fields in the structure are to be used for <see cref="T:Vanara.PInvoke.Shell32.CMINVOKECOMMANDINFOEX"/>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CMIC.CMIC_MASK_ICON">
            <summary>The hIcon member is valid. As of Windows Vista this flag is not used.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CMIC.CMIC_MASK_HOTKEY">
            <summary>The dwHotKey member is valid.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CMIC.CMIC_MASK_NOASYNC">
            <summary>
            Windows Vista and later. The implementation of IContextMenu::InvokeCommand should be synchronous, not returning before it is
            complete. Since this is recommended, calling applications that specify this flag cannot guarantee that this request will be
            honored if they are not familiar with the implementation of the verb that they are invoking.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CMIC.CMIC_MASK_FLAG_NO_UI">
            <summary>
            The system is prevented from displaying user interface elements (for example, error messages) while carrying out a command.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CMIC.CMIC_MASK_UNICODE">
            <summary>
            The shortcut menu handler should use lpVerbW, lpParametersW, lpDirectoryW, and lpTitleW members instead of their ANSI
            equivalents. Because some shortcut menu handlers may not support Unicode, you should also pass valid ANSI strings in the
            lpVerb, lpParameters, lpDirectory, and lpTitle members.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CMIC.CMIC_MASK_NO_CONSOLE">
            <summary>
            If a shortcut menu handler needs to create a new process, it will normally create a new console. Setting the
            CMIC_MASK_NO_CONSOLE flag suppresses the creation of a new console.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CMIC.CMIC_MASK_ASYNCOK">
            <summary>Wait for the DDE conversation to terminate before returning.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CMIC.CMIC_MASK_NOZONECHECKS">
            <summary>Do not perform a zone check. This flag allows ShellExecuteEx to bypass zone checking put into place by IAttachmentExecute.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CMIC.CMIC_MASK_FLAG_LOG_USAGE">
            <summary>
            Indicates that the implementation of IContextMenu::InvokeCommand might want to keep track of the item being invoked for
            features like the "Recent documents" menu.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CMIC.CMIC_MASK_SHIFT_DOWN">
            <summary>
            The SHIFT key is pressed. Use this instead of polling the current state of the keyboard that may have changed since the verb
            was invoked.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CMIC.CMIC_MASK_PTINVOKE">
            <summary>The ptInvoke member is valid.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CMIC.CMIC_MASK_CONTROL_DOWN">
            <summary>
            The CTRL key is pressed. Use this instead of polling the current state of the keyboard that may have changed since the verb
            was invoked.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.GCS">
            <summary>Flags specifying the information to return.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.GCS.GCS_VERBA">
            <summary>Sets pszName to an ANSI string containing the language-independent command name for the menu item.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.GCS.GCS_HELPTEXTA">
            <summary>Sets pszName to an ANSI string containing the help text for the command.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.GCS.GCS_VALIDATEA">
            <summary>Returns S_OK if the menu item exists, or S_FALSE otherwise.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.GCS.GCS_VERBW">
            <summary>Sets pszName to a Unicode string containing the language-independent command name for the menu item.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.GCS.GCS_HELPTEXTW">
            <summary>Sets pszName to a Unicode string containing the help text for the command.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.GCS.GCS_VALIDATEW">
            <summary>Returns S_OK if the menu item exists, or S_FALSE otherwise.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.GCS.GCS_VERBICONW">
            <summary>Sets pszName to a Unicode string containing the icon string for the command.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.GCS.GCS_UNICODE">
            <summary>For Unicode bit testing.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IContextMenu">
            <summary>Exposes methods that either create or merge a shortcut menu associated with a Shell object.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IContextMenu.QueryContextMenu(Vanara.PInvoke.HMENU,System.UInt32,System.UInt32,System.UInt32,Vanara.PInvoke.Shell32.CMF)">
            <summary>Adds commands to a shortcut menu.</summary>
            <param name="hmenu">A handle to the shortcut menu. The handler should specify this handle when adding menu items.</param>
            <param name="indexMenu">The zero-based position at which to insert the first new menu item.</param>
            <param name="idCmdFirst">The minimum value that the handler can specify for a menu item identifier.</param>
            <param name="idCmdLast">The maximum value that the handler can specify for a menu item identifier.</param>
            <param name="uFlags">Optional flags that specify how the shortcut menu can be changed.</param>
            <returns>
            If successful, returns an HRESULT value that has its severity value set to SEVERITY_SUCCESS and its code value set to the
            offset of the largest command identifier that was assigned, plus one. For example, if idCmdFirst is set to 5 and you add
            three items to the menu with command identifiers of 5, 7, and 8, the return value should be MAKE_HRESULT(SEVERITY_SUCCESS, 0,
            8 - 5 + 1). Otherwise, it returns a COM error value.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IContextMenu.InvokeCommand(Vanara.PInvoke.Shell32.CMINVOKECOMMANDINFOEX@)">
            <summary>Carries out the command associated with a shortcut menu item.</summary>
            <param name="pici">
            A pointer to a CMINVOKECOMMANDINFO or CMINVOKECOMMANDINFOEX structure that contains specifics about the command.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IContextMenu.GetCommandString(System.IntPtr,Vanara.PInvoke.Shell32.GCS,System.IntPtr,System.IntPtr,System.UInt32)">
            <summary>
            Gets information about a shortcut menu command, including the help string and the language-independent, or canonical, name
            for the command.
            </summary>
            <param name="idCmd">Menu command identifier offset.</param>
            <param name="uType">Flags specifying the information to return.</param>
            <param name="pReserved">
            Reserved. Applications must specify NULL when calling this method and handlers must ignore this parameter when called.
            </param>
            <param name="pszName">The reference of the buffer to receive the null-terminated string being retrieved.</param>
            <param name="cchMax">Size of the buffer, in characters, to receive the null-terminated string.</param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IContextMenu2">
            <summary>
            Exposes methods that either create or merge a shortcut (context) menu associated with a Shell object. Extends IContextMenu by
            adding a method that allows client objects to handle messages associated with owner-drawn menu items.
            </summary>
            <remarks>
            <para>This interface also provides the methods of the IContextMenu interface, from which it inherits.</para>
            <para><c>Note</c><c>Windows Vista and later.</c> Prior to Windows Vista this interface was declared in Shlobj.h.</para>
            <para>When to Implement</para>
            <para>
            Implement IContextMenu2 if your namespace extension or shortcut menu handler needs to process one or more of the following messages.
            </para>
            <list type="bullet">
            <item>
            <term>MENUPOPUP</term>
            </item>
            <item>
            <term>ITEM</term>
            </item>
            <item>
            <term>WM_MEASUREITEM</term>
            </item>
            </list>
            <para>
            These messages are forwarded to IContextMenu2—through the HandleMenuMsg method—only if a QueryInterface call for an IContextMenu2
            interface pointer is successful, indicating that the object supports this interface.
            </para>
            <para>When to Use</para>
            <para>Applications do not normally call this interface directly.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IContextMenu2.QueryContextMenu(Vanara.PInvoke.HMENU,System.UInt32,System.UInt32,System.UInt32,Vanara.PInvoke.Shell32.CMF)">
            <summary>Adds commands to a shortcut menu.</summary>
            <param name="hmenu">A handle to the shortcut menu. The handler should specify this handle when adding menu items.</param>
            <param name="indexMenu">The zero-based position at which to insert the first new menu item.</param>
            <param name="idCmdFirst">The minimum value that the handler can specify for a menu item identifier.</param>
            <param name="idCmdLast">The maximum value that the handler can specify for a menu item identifier.</param>
            <param name="uFlags">Optional flags that specify how the shortcut menu can be changed.</param>
            <returns>
            If successful, returns an HRESULT value that has its severity value set to SEVERITY_SUCCESS and its code value set to the
            offset of the largest command identifier that was assigned, plus one. For example, if idCmdFirst is set to 5 and you add
            three items to the menu with command identifiers of 5, 7, and 8, the return value should be MAKE_HRESULT(SEVERITY_SUCCESS, 0,
            8 - 5 + 1). Otherwise, it returns a COM error value.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IContextMenu2.InvokeCommand(Vanara.PInvoke.Shell32.CMINVOKECOMMANDINFOEX@)">
            <summary>Carries out the command associated with a shortcut menu item.</summary>
            <param name="pici">
            A pointer to a CMINVOKECOMMANDINFO or CMINVOKECOMMANDINFOEX structure that contains specifics about the command.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IContextMenu2.GetCommandString(System.IntPtr,Vanara.PInvoke.Shell32.GCS,System.IntPtr,System.IntPtr,System.UInt32)">
            <summary>
            Gets information about a shortcut menu command, including the help string and the language-independent, or canonical, name
            for the command.
            </summary>
            <param name="idCmd">Menu command identifier offset.</param>
            <param name="uType">Flags specifying the information to return.</param>
            <param name="pReserved">
            Reserved. Applications must specify NULL when calling this method and handlers must ignore this parameter when called.
            </param>
            <param name="pszName">The reference of the buffer to receive the null-terminated string being retrieved.</param>
            <param name="cchMax">Size of the buffer, in characters, to receive the null-terminated string.</param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IContextMenu2.HandleMenuMsg(System.UInt32,System.IntPtr,System.IntPtr)">
            <summary>Enables client objects of the IContextMenu interface to handle messages associated with owner-drawn menu items.</summary>
            <param name="uMsg">
            The message to be processed. In the case of some messages, such as WM_INITMENUPOPUP, WM_DRAWITEM, WM_MENUCHAR, or
            WM_MEASUREITEM, the client object being called may provide owner-drawn menu items.
            </param>
            <param name="wParam">Additional message information. The value of this parameter depends on the value of the uMsg parameter.</param>
            <param name="lParam">Additional message information. The value of this parameter depends on the value of the uMsg parameter.</param>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IContextMenu3">
            <summary>
            <para>
            Exposes methods that either create or merge a shortcut menu associated with a Shell object. Allows client objects to handle
            messages associated with owner-drawn menu items and extends IContextMenu2 by accepting a return value from that message handling.
            </para>
            </summary>
            <remarks>
            <para>This interface also provides the methods of the IContextMenu and IContextMenu2 interfaces, from which it inherits.</para>
            <para>When to Implement</para>
            <para>Implement IContextMenu3 if your shortcut menu extension needs to process the WM_MENUCHAR message.</para>
            <para>
            This message is forwarded to IContextMenu3::HandleMenuMsg2 only if a QueryInterface call for an <c>IContextMenu3</c> interface
            pointer is successful, which indicates that the object supports this interface.
            </para>
            <para>When to Use</para>
            <para>
            You do not call this interface directly. IContextMenu3 is used by the operating system only when it has confirmed that your
            application is aware of this interface.
            </para>
            <para><c>Note</c><c>Windows Vista and later.</c> Prior to Windows Vista this interface was declared in Shlobj.h.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IContextMenu3.QueryContextMenu(Vanara.PInvoke.HMENU,System.UInt32,System.UInt32,System.UInt32,Vanara.PInvoke.Shell32.CMF)">
            <summary>Adds commands to a shortcut menu.</summary>
            <param name="hmenu">A handle to the shortcut menu. The handler should specify this handle when adding menu items.</param>
            <param name="indexMenu">The zero-based position at which to insert the first new menu item.</param>
            <param name="idCmdFirst">The minimum value that the handler can specify for a menu item identifier.</param>
            <param name="idCmdLast">The maximum value that the handler can specify for a menu item identifier.</param>
            <param name="uFlags">Optional flags that specify how the shortcut menu can be changed.</param>
            <returns>
            If successful, returns an HRESULT value that has its severity value set to SEVERITY_SUCCESS and its code value set to the
            offset of the largest command identifier that was assigned, plus one. For example, if idCmdFirst is set to 5 and you add
            three items to the menu with command identifiers of 5, 7, and 8, the return value should be MAKE_HRESULT(SEVERITY_SUCCESS, 0,
            8 - 5 + 1). Otherwise, it returns a COM error value.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IContextMenu3.InvokeCommand(Vanara.PInvoke.Shell32.CMINVOKECOMMANDINFOEX@)">
            <summary>Carries out the command associated with a shortcut menu item.</summary>
            <param name="pici">
            A pointer to a CMINVOKECOMMANDINFO or CMINVOKECOMMANDINFOEX structure that contains specifics about the command.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IContextMenu3.GetCommandString(System.IntPtr,Vanara.PInvoke.Shell32.GCS,System.IntPtr,System.IntPtr,System.UInt32)">
            <summary>
            Gets information about a shortcut menu command, including the help string and the language-independent, or canonical, name
            for the command.
            </summary>
            <param name="idCmd">Menu command identifier offset.</param>
            <param name="uType">Flags specifying the information to return.</param>
            <param name="pReserved">
            Reserved. Applications must specify NULL when calling this method and handlers must ignore this parameter when called.
            </param>
            <param name="pszName">The reference of the buffer to receive the null-terminated string being retrieved.</param>
            <param name="cchMax">Size of the buffer, in characters, to receive the null-terminated string.</param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IContextMenu3.HandleMenuMsg(System.UInt32,System.IntPtr,System.IntPtr)">
            <summary>Enables client objects of the IContextMenu interface to handle messages associated with owner-drawn menu items.</summary>
            <param name="uMsg">
            The message to be processed. In the case of some messages, such as WM_INITMENUPOPUP, WM_DRAWITEM, WM_MENUCHAR, or
            WM_MEASUREITEM, the client object being called may provide owner-drawn menu items.
            </param>
            <param name="wParam">Additional message information. The value of this parameter depends on the value of the uMsg parameter.</param>
            <param name="lParam">Additional message information. The value of this parameter depends on the value of the uMsg parameter.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IContextMenu3.HandleMenuMsg2(System.UInt32,System.IntPtr,System.IntPtr,System.IntPtr@)">
            <summary>Allows client objects of the IContextMenu3 interface to handle messages associated with owner-drawn menu items.</summary>
            <param name="uMsg">
            The message to be processed. In the case of some messages, such as WM_INITMENUPOPUP, WM_DRAWITEM, WM_MENUCHAR, or
            WM_MEASUREITEM, the client object being called may provide owner-drawn menu items.
            </param>
            <param name="wParam">Additional message information. The value of this parameter depends on the value of the uMsg parameter.</param>
            <param name="lParam">Additional message information. The value of this parameter depends on the value of the uMsg parameter.</param>
            <param name="result">
            The address of an LRESULT value that the owner of the menu will return from the message. This parameter can be NULL.
            </param>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IContextMenuCB">
            <summary>
            Exposes a method that enables the callback of a context menu. For example, to add a shield icon to a <c>menuItem</c> that
            requires elevation.
            </summary>
            <remarks>
            <para>This is the callback interface specified in the DEFCONTEXTMENU structure passed with the function SHCreateDefaultContextMenu.</para>
            <para>
            This interface enables IShellFolder implementations to manage context menu messages before, after, and during the context menu
            handling of these messages.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IContextMenuCB.CallBack(Vanara.PInvoke.Shell32.IShellFolder,Vanara.PInvoke.HWND,System.Runtime.InteropServices.ComTypes.IDataObject,System.UInt32,System.IntPtr,System.IntPtr)">
            <summary>Enables the callback function for a context menu.</summary>
            <param name="psf">
            A pointer to the IShellFolder interface of the object that supports the IContextMenuCB::CallBack interface. The context menu
            interface is returned on a call to GetUIObjectOf.
            </param>
            <param name="hwndOwner">A handle to the owner of the context menu. This value can be NULL.</param>
            <param name="pdtobj">
            A pointer to an IDataObject that contains information about a menu selection. Implement interface IDataObject, or call
            SHCreateDataObject for the default implementation.
            </param>
            <param name="uMsg">
            A notification from the Shell's default menu implementation. For example, the default menu implementation calls
            DFM_MERGECONTEXTMENU to allow the implementer of IContextMenuCB::CallBack to remove, add, or disable context menu items in
            this callback.
            </param>
            <param name="wParam">
            Data specific to the notification specified in uMsg. See the individual notification page for specific requirements.
            </param>
            <param name="lParam">
            Data specific to the notification specified in uMsg. See the individual notification page for specific requirements.
            </param>
            <returns>If this method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.CMINVOKECOMMANDINFOEX">
            <summary>
            Contains extended information about a shortcut menu command. This structure is an extended version of CMINVOKECOMMANDINFO that
            allows the use of Unicode values.
            </summary>
            <remarks>
            <para>
            Although the IContextMenu::InvokeCommand declaration specifies a CMINVOKECOMMANDINFO structure for the parameter, it can also
            accept a <c>CMINVOKECOMMANDINFOEX</c> structure. If you are implementing this method, you must inspect <c>cbSize</c> to determine
            which structure has been passed.
            </para>
            <para>
            By default, all 16-bit Windows-based applications run as threads in a single, shared VDM. The advantage of running separately is
            that a crash only terminates the single VDM; any other programs running in distinct VDMs continue to function normally. Also,
            16-bit Windows-based applications that are run in separate VDMs have separate input queues. That means that if one application
            stops responding momentarily, applications in separate VDMs continue to receive input. The disadvantage of running separately is
            that it takes significantly more memory to do so.
            </para>
            <para>
            <c>CMINVOKECOMMANDINFOEX</c> itself is defined in Shobjidl.h, but you must also include Shellapi.h to have full access to all flags.
            </para>
            <para><c>Note</c> Prior to Windows Vista, this structure was declared in Shlobj.h.</para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CMINVOKECOMMANDINFOEX.cbSize">
            <summary>
            The size of this structure, in bytes. This member should be filled in by callers of IContextMenu::InvokeCommand and tested by
            the implementations to know that the structure is a CMINVOKECOMMANDINFOEX structure rather than CMINVOKECOMMANDINFO.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CMINVOKECOMMANDINFOEX.fMask">
            <summary>
            Zero, or one or more of the following flags are set to indicate desired behavior and indicate that other fields in the
            structure are to be used.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CMINVOKECOMMANDINFOEX.hwnd">
            <summary>
            A handle to the window that is the owner of the shortcut menu. An extension can also use this handle as the owner of any
            message boxes or dialog boxes it displays. Callers must specify a legitimate HWND that can be used as the owner window for
            any UI that may be displayed. Failing to specify an HWND when calling from a UI thread (one with windows already created)
            will result in reentrancy and possible bugs in the implementation of a IContextMenu::InvokeCommand call.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CMINVOKECOMMANDINFOEX.lpVerb">
            <summary>
            The address of a null-terminated string that specifies the language-independent name of the command to carry out. This member
            is typically a string when a command is being activated by an application.
            <list type="table">
            <listheader>
            <term>Constant</term>
            <term>Command string</term>
            </listheader>
            <item>
            <description>CMDSTR_RUNAS</description>
            <description>"RunAs"</description>
            </item>
            <item>
            <description>CMDSTR_PRINT</description>
            <description>"Print"</description>
            </item>
            <item>
            <description>CMDSTR_PREVIEW</description>
            <description>"Preview"</description>
            </item>
            <item>
            <description>CMDSTR_OPEN</description>
            <description>"Open"</description>
            </item>
            </list>
            <para>
            This is not a fixed set; new canonical verbs can be invented by context menu handlers and applications can invoke them.
            </para>
            <para>
            If a canonical verb exists and a menu handler does not implement the canonical verb, it must return a failure code to enable
            the next handler to be able to handle this verb. Failing to do this will break functionality in the system including ShellExecute.
            </para>
            <para>
            Alternatively, rather than a pointer, this parameter can be MAKEINTRESOURCE(offset) where offset is the menu-identifier
            offset of the command to carry out. Implementations can use the IS_INTRESOURCE macro to detect that this alternative is being
            employed. The Shell uses this alternative when the user chooses a menu command.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CMINVOKECOMMANDINFOEX.lpParameters">
            <summary>Optional parameters. This member is always NULL for menu items inserted by a Shell extension.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CMINVOKECOMMANDINFOEX.lpDirectory">
            <summary>An optional working directory name. This member is always NULL for menu items inserted by a Shell extension.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CMINVOKECOMMANDINFOEX.nShow">
            <summary>A set of SW_ values to pass to the ShowWindow function if the command displays a window or starts an application.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CMINVOKECOMMANDINFOEX.dwHotKey">
            <summary>
            An optional keyboard shortcut to assign to any application activated by the command. If the fMask member does not specify
            CMIC_MASK_HOTKEY, this member is ignored.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CMINVOKECOMMANDINFOEX.hIcon">
            <summary>
            An icon to use for any application activated by the command. If the fMask member does not specify CMIC_MASK_ICON, this member
            is ignored.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CMINVOKECOMMANDINFOEX.lpTitle">
            <summary>An ASCII title.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CMINVOKECOMMANDINFOEX.lpVerbW">
            <summary>A Unicode verb, for those commands that can use it.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CMINVOKECOMMANDINFOEX.lpParametersW">
            <summary>A Unicode parameters, for those commands that can use it.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CMINVOKECOMMANDINFOEX.lpDirectoryW">
            <summary>A Unicode directory, for those commands that can use it.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CMINVOKECOMMANDINFOEX.lpTitleW">
            <summary>A Unicode title.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CMINVOKECOMMANDINFOEX.ptInvoke">
            <summary>
            The point where the command is invoked. If the fMask member does not specify CMIC_MASK_PTINVOKE, this member is ignored. This
            member is not valid prior to Internet Explorer 4.0.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.CMINVOKECOMMANDINFOEX.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vanara.PInvoke.Shell32.CMINVOKECOMMANDINFOEX"/> struct with a menu-identifier offset of the command to
            carry out.
            </summary>
            <param name="commandId">The menu-identifier offset of the command to carry out.</param>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.ICopyHookA">
            <summary>Exposes a method that creates a copy hook handler. A copy hook handler is a Shell extension that determines if a Shell folder or printer object can be moved, copied, renamed, or deleted. The Shell calls the ICopyHook::CopyCallback method prior to performing one of these operations.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ICopyHookA.CopyCallback(Vanara.PInvoke.HWND,Vanara.PInvoke.Shell32.ShellFileOperation,Vanara.PInvoke.Shell32.FILEOP_FLAGS,System.String,Vanara.PInvoke.FileFlagsAndAttributes,System.String,Vanara.PInvoke.FileFlagsAndAttributes)">
            <summary>
            Determines whether the Shell will be allowed to move, copy, delete, or rename a folder or printer object.
            </summary>
            <param name="hwnd">The HWND.A handle to the window that the copy hook handler should use as the parent for any user interface elements the handler may need to display. If FOF_SILENT is specified in wFunc, the method should ignore this parameter.</param>
            <param name="wFunc">The operation to perform. This parameter can be one of the values listed under the wFunc member of the SHFILEOPSTRUCT structure.</param>
            <param name="wFlags">The flags that control the operation. This parameter can be one or more of the values listed under the fFlags member of the SHFILEOPSTRUCT structure.</param>
            <param name="pszSrcFile">A pointer to a string that contains the name of the source folder.</param>
            <param name="dwSrcAttribs">The attributes of the source folder. This parameter can be a combination of any of the file attribute flags (FILE_ATTRIBUTE_*) defined in the Windows header files. See File Attribute Constants.</param>
            <param name="pszDestFile">A pointer to a string that contains the name of the destination folder.</param>
            <param name="dwDestAttribs">The attributes of the destination folder. This parameter can be a combination of any of the file attribute flags (FILE_ATTRIBUTE_*) defined in the Windows header files. See File Attribute Constants.</param>
            <returns>Returns an integer value that indicates whether the Shell should perform the operation. One of the following:
            <list type="table">
            <listheader><term>Return code</term><term>Description</term></listheader>
            <item><term>IDYES (0x06)</term><description>Allows the operation.</description></item>
            <item><term>IDNO (0x07)</term><description>Prevents the operation on this folder but continues with any other operations that have been approved (for example, a batch copy operation).</description></item>
            <item><term>IDCANCEL (0x02)</term><description>Prevents the current operation and cancels any pending operations.</description></item>
            </list>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.ICopyHookW">
            <summary>Exposes a method that creates a copy hook handler. A copy hook handler is a Shell extension that determines if a Shell folder or printer object can be moved, copied, renamed, or deleted. The Shell calls the ICopyHook::CopyCallback method prior to performing one of these operations.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ICopyHookW.CopyCallback(Vanara.PInvoke.HWND,Vanara.PInvoke.Shell32.ShellFileOperation,Vanara.PInvoke.Shell32.FILEOP_FLAGS,System.String,Vanara.PInvoke.FileFlagsAndAttributes,System.String,Vanara.PInvoke.FileFlagsAndAttributes)">
            <summary>
            Determines whether the Shell will be allowed to move, copy, delete, or rename a folder or printer object.
            </summary>
            <param name="hwnd">The HWND.A handle to the window that the copy hook handler should use as the parent for any user interface elements the handler may need to display. If FOF_SILENT is specified in wFunc, the method should ignore this parameter.</param>
            <param name="wFunc">The operation to perform. This parameter can be one of the values listed under the wFunc member of the SHFILEOPSTRUCT structure.</param>
            <param name="wFlags">The flags that control the operation. This parameter can be one or more of the values listed under the fFlags member of the SHFILEOPSTRUCT structure.</param>
            <param name="pszSrcFile">A pointer to a string that contains the name of the source folder.</param>
            <param name="dwSrcAttribs">The attributes of the source folder. This parameter can be a combination of any of the file attribute flags (FILE_ATTRIBUTE_*) defined in the Windows header files. See File Attribute Constants.</param>
            <param name="pszDestFile">A pointer to a string that contains the name of the destination folder.</param>
            <param name="dwDestAttribs">The attributes of the destination folder. This parameter can be a combination of any of the file attribute flags (FILE_ATTRIBUTE_*) defined in the Windows header files. See File Attribute Constants.</param>
            <returns>Returns an integer value that indicates whether the Shell should perform the operation. One of the following:
            <list type="table">
            <listheader><term>Return code</term><term>Description</term></listheader>
            <item><term>IDYES (0x06)</term><description>Allows the operation.</description></item>
            <item><term>IDNO (0x07)</term><description>Prevents the operation on this folder but continues with any other operations that have been approved (for example, a batch copy operation).</description></item>
            <item><term>IDCANCEL (0x02)</term><description>Prevents the current operation and cancels any pending operations.</description></item>
            </list>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.ICreateProcessInputs">
            <summary>Used by the ICreatingProcess interface to alter some parameters of the process that is being created.</summary>
            <remarks>
            <para>Applications do not implement this interface.</para>
            <para>A pointer to this interface is passed to ICreatingProcess::OnCreating.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ICreateProcessInputs.GetCreateFlags">
            <summary>Gets the additional flags that will be passed to CreateProcess.</summary>
            <returns>
            A pointer to a <c>DWORD</c> which receives the flags that will be passed as the dwCreationFlags parameter to CreateProcess.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ICreateProcessInputs.SetCreateFlags(Vanara.PInvoke.Kernel32.CREATE_PROCESS)">
            <summary>Set the flags that will be included in the call to CreateProcess.</summary>
            <param name="dwCreationFlags">The flags that will be passed to the dwCreationFlags parameter to CreateProcess.</param>
            <remarks>
            Any flags set by a previous call to AddCreateFlags or <c>SetCreateFlags</c> will be replaced by the values specified by
            dwCreationFlags. Use <c>AddCreateFlags</c> to set flags without clearing flags that are already set.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ICreateProcessInputs.AddCreateFlags(Vanara.PInvoke.Kernel32.CREATE_PROCESS)">
            <summary>Set additional flags that will be included in the call to CreateProcess.</summary>
            <param name="dwCreationFlags">The flags that will be included in the dwCreationFlags parameter passed to CreateProcess.</param>
            <remarks>Any creation flags that were previously set will remain set. This method does not clear any creation flags.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ICreateProcessInputs.SetHotKey(System.UInt16)">
            <summary>Sets the hot key for the application.</summary>
            <param name="wHotKey">
            The hotkey to assign to the application. See the documentation of the <c>hStdIn</c> member of the <see cref="T:Vanara.PInvoke.Kernel32.STARTUPINFO"/>
            structure for more information.
            </param>
            <remarks>
            This method also sets the <c>STARTF_USEHOTKEY</c> flag in the <c>dwFlags</c> member of the STARTUPINFO structure passed to CreateProcess.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ICreateProcessInputs.AddStartupFlags(Vanara.PInvoke.Kernel32.STARTF)">
            <summary>Additional flags that will be included in the <see cref="T:Vanara.PInvoke.Kernel32.STARTUPINFO"/> structure passed to CreateProcess.</summary>
            <param name="dwStartupInfoFlags">
            The flags that will be included in the <see cref="F:Vanara.PInvoke.Kernel32.STARTUPINFO.dwFlags"/> member passed to CreateProcess.
            </param>
            <remarks>Any creation flags that were previously set will remain set. This method does not clear any creation flags.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ICreateProcessInputs.SetTitle(System.String)">
            <summary>Sets the title that will be passed CreateProcess.</summary>
            <param name="pszTitle">
            A null-terminated string specifying the title that will be passed in the <c>lpTitle</c> member of the STARTUPINFO structure
            passed to CreateProcess. This parameter may not be <c>NULL</c>.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ICreateProcessInputs.SetEnvironmentVariable(System.String,System.String)">
            <summary>Sets a variable in the environment of the created process.</summary>
            <param name="pszName">
            A null-terminated string specifying the name of a variable to be set in the environment of the process to be created. This
            parameter may not be <c>NULL</c>.
            </param>
            <param name="pszValue">
            A null-terminated string specifying the value of the variable to be set in the environment of the process to be created. his
            parameter may not be <c>NULL</c>.
            </param>
            <remarks>If a variable with the same name already exists in the environment of the created process, it is replaced.</remarks>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.ICreatingProcess">
            <summary>Used by ShellExecuteEx and IContextMenu to allow the caller to alter some parameters of the process being created.</summary>
            <remarks>
            <para>
            The caller should install an object into the site chain which implements IServiceProvider::QueryService and responds to the
            <c>SID_ExecuteCreatingProcess</c> service ID with an object that implements the <c>ICreatingProcess</c> interface.
            </para>
            <para>
            After performing the desired operations, the object should forward the ICreatingProcess::OnCreating call up the site chain to
            allow other members of the site chain to participate.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ICreatingProcess.OnCreating(Vanara.PInvoke.Shell32.ICreateProcessInputs)">
            <summary>Allows you to modify the parameters of the process being created.</summary>
            <param name="pcpi">
            A pointer to an ICreateProcessInputs interface which allows you to set some parameters for the process that is being created.
            </param>
            <returns><c>S_OK</c> if the method succeeds. Otherwise, an <c>HRESULT</c> error code, and the process is not created.</returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IDataObjectProvider">
            <summary>
            Provides methods that enable you to set or retrieve a DataPackage object's IDataObject interface, which the DataPackage uses to
            support interoperability. The DataPackage object is used by an app to provide data to another app.
            </summary>
            <remarks>
            <para>When to implement</para>
            <para>Do not implement this interface. An implementation is provided as part of the DataPackage object.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IDataObjectProvider.GetDataObject">
            <summary>Gets an IDataObject representation of the current DataPackage object.</summary>
            <returns>
            <para>Type: <c>IDataObject**</c></para>
            <para>
            The address of an IDataObject interface pointer that, when this method returns successfully, points to the
            <c>IDataObject</c> representation of the DataPackage object.
            </para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IDataObjectProvider.SetDataObject(System.Runtime.InteropServices.ComTypes.IDataObject)">
            <summary>Wraps an IDataObject instance as a Windows Runtime DataPackage.</summary>
            <param name="dataObject">An IDataObject interface pointer to the data object from which to build the DataPackage object.</param>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.IID_DataTransferManager">
            <summary>IID of <c>Windows.ApplicationModel.DataTransfer.DataTransferManager</c> to be used by <see cref="M:Vanara.PInvoke.Shell32.IDataTransferManagerInterop.GetForWindow(Vanara.PInvoke.HWND,System.Guid@,System.IntPtr@)"/>.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IDataTransferManagerInterop">
            <summary>Enables access to DataTransferManager methods in a Windows Store app that manages multiple windows.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IDataTransferManagerInterop.GetForWindow(Vanara.PInvoke.HWND,System.Guid@,System.IntPtr@)">
            <summary>Gets the DataTransferManager instance for the specified window.</summary>
            <param name="appWindow">The window whose DataTransferManager instance is to be retrieved.</param>
            <param name="riid">The requested interface ID of the DataTransferManager instance.</param>
            <param name="dataTransferManager">Receives the DataTransferManager instance.</param>
            <returns>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</returns>
            <remarks>
            This method is equivalent to the DataTransferManager.GetForCurrentView method, except that you specify a window from a
            multi-window Windows Store app.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IDataTransferManagerInterop.ShowShareUIForWindow(Vanara.PInvoke.HWND)">
            <summary>Displays the UI for sharing content for the specified window.</summary>
            <param name="appWindow">The window to show the share UI for.</param>
            <returns>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</returns>
            <remarks>
            This method is equivalent to the DataTransferManager.ShowShareUI method, except that you specify a window from a
            multi-window Windows Store app.
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.DEFAULT_FOLDER_MENU_RESTRICTIONS">
            <summary>Defines shortcut menu restrictions used by IDefaultFolderMenuInitialize::GetMenuRestrictions and IDefaultFolderMenuInitialize::SetMenuRestrictions.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DEFAULT_FOLDER_MENU_RESTRICTIONS.DFMR_DEFAULT">
            <summary>No restrictions.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DEFAULT_FOLDER_MENU_RESTRICTIONS.DFMR_NO_STATIC_VERBS">
            <summary>Don't use the handler for static verbs.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DEFAULT_FOLDER_MENU_RESTRICTIONS.DFMR_STATIC_VERBS_ONLY">
            <summary>Static verbs only. No dynamic IContextMenu verbs allowed.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DEFAULT_FOLDER_MENU_RESTRICTIONS.DFMR_NO_RESOURCE_VERBS">
            <summary>Don't add verbs for cut, copy, paste, link, delete, rename, or properties.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DEFAULT_FOLDER_MENU_RESTRICTIONS.DFMR_OPTIN_HANDLERS_ONLY">
            <summary>Only load opt-in handlers that have the registry value "ContextMenuOptIn" under HKCR\CLSID&lt;handler clsid&gt;</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DEFAULT_FOLDER_MENU_RESTRICTIONS.DFMR_RESOURCE_AND_FOLDER_VERBS_ONLY">
            <summary>
            Only load resource verbs (cut, copy, paste, link, delete, rename, and properties) and folder verbs added by IContextMenuCB.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DEFAULT_FOLDER_MENU_RESTRICTIONS.DFMR_USE_SPECIFIED_HANDLERS">
            <summary>Use handlers with CLSID values that were added through IDefaultFolderMenuInitialize::SetHandlerClsid</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DEFAULT_FOLDER_MENU_RESTRICTIONS.DFMR_USE_SPECIFIED_VERBS">
            <summary>Only load handlers that support the specified verbs.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DEFAULT_FOLDER_MENU_RESTRICTIONS.DFMR_NO_ASYNC_VERBS">
            <summary>Ignore async verbs.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DEFAULT_FOLDER_MENU_RESTRICTIONS.DFMR_NO_NATIVECPU_VERBS">
            <summary>Ignore verbs that are registered for the native CPU architecture.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IDefaultFolderMenuInitialize">
            <summary>
            <para>
            Provides methods used to get and set shortcut menu information. This information is the same as that provided to <see
            cref="M:Vanara.PInvoke.Shell32.SHCreateDefaultContextMenu(Vanara.PInvoke.Shell32.DEFCONTEXTMENU@,System.Guid@,System.Object@)"/> through the <see cref="T:Vanara.PInvoke.Shell32.DEFCONTEXTMENU"/> structure.
            </para>
            <para><c>Note</c> Do not use this method to reinitialize a shortcut menu; use IShellExtInit::Initialize instead.</para>
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IDefaultFolderMenuInitialize.Initialize(Vanara.PInvoke.HWND,Vanara.PInvoke.Shell32.IContextMenuCB,Vanara.PInvoke.Shell32.PIDL,Vanara.PInvoke.Shell32.IShellFolder,System.UInt32,System.IntPtr[],Vanara.PInvoke.ShlwApi.IQueryAssociations,System.UInt32,Vanara.PInvoke.HKEY[])">
            <summary>Sets context menu info for the IDefaultFolderMenuInitialize object.</summary>
            <param name="hwnd">A handle to the shortcut menu.</param>
            <param name="pcmcb">
            <para>Type: <c>IContextMenuCB*</c></para>
            <para>The address of the object that defines the callback for the shortcut menu.</para>
            </param>
            <param name="pidlFolder">
            <para>Type: <c>PCIDLIST_ABSOLUTE</c></para>
            <para>
            The address of an item identifier list that specifies the folder of the items. If NULL, this is computed from the psf parameter.
            </para>
            </param>
            <param name="psf">
            <para>Type: <c>IShellFolder*</c></para>
            <para>The folder of the items.</para>
            </param>
            <param name="cidl">
            <para>Type: <c>UINT</c></para>
            <para>The count of items in the apidl parameter.</para>
            </param>
            <param name="apidl">
            <para>Type: <c>PCUITEMID_CHILD_ARRAY</c></para>
            <para>A pointer to an array of PIDL structures, each of which is an item to be operated on.</para>
            </param>
            <param name="punkAssociation">
            <para>Type: <c>IUnknown*</c></para>
            <para>The address of an IQueryAssociations object that specifies where to load extensions from.</para>
            </param>
            <param name="cKeys">
            <para>Type: <c>UINT</c></para>
            <para>The count of items in the aKeys parameter. May be zero.</para>
            </param>
            <param name="aKeys">
            <para>Type: <c>const HKEY*</c></para>
            <para>Specifies where to load extensions from.</para>
            </param>
            <returns>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IDefaultFolderMenuInitialize.SetMenuRestrictions(Vanara.PInvoke.Shell32.DEFAULT_FOLDER_MENU_RESTRICTIONS)">
            <summary>Sets shortcut menu restrictions for the IDefaultFolderMenuInitialize object.</summary>
            <param name="dfmrValues">
            A bitwise combination of the DEFAULT_FOLDER_MENU_RESTRICTIONS values that specify the restrictions to set.
            </param>
            <returns>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IDefaultFolderMenuInitialize.GetMenuRestrictions(Vanara.PInvoke.Shell32.DEFAULT_FOLDER_MENU_RESTRICTIONS,Vanara.PInvoke.Shell32.DEFAULT_FOLDER_MENU_RESTRICTIONS@)">
            <summary>Gets shortcut menu restrictions that are currently set for the IDefaultFolderMenuInitialize object.</summary>
            <param name="dfmrMask">
            A bitwise combination of the DEFAULT_FOLDER_MENU_RESTRICTIONS values that specify the mask of the restrictions to get.
            </param>
            <param name="pdfmrValues">A bitwise combination of the DEFAULT_FOLDER_MENU_RESTRICTIONS values that specify the restrictions.</param>
            <returns>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IDefaultFolderMenuInitialize.SetHandlerClsid(System.Guid@)">
            <summary>Sets the shortcut menu handler for the IDefaultFolderMenuInitialize object.</summary>
            <param name="rclsid">
            <para>Type: <c>REFCLSID</c></para>
            <para>The CLSID for the object defines the shortcut menu handler.</para>
            </param>
            <returns>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IDelegateFolder">
            <summary>Exposes a method through which a delegate folder is given the IMalloc interface required to allocate and free item IDs.</summary>
            <remarks>The IDs allocated by the delegate folder are in the form of DELEGATEITEMID structures. It is the delegate's job to pack its data into the pointer to an item identifier list (PIDL) in the <c>DELEGATEITEMID</c> format.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IDelegateFolder.SetItemAlloc(Vanara.PInvoke.Ole32.IMalloc)">
            <summary>Provides the delegate folder an IMalloc interface used to allocate and free item IDs.</summary>
            <param name="pmalloc">
            <para>Type: <c>IMalloc*</c></para>
            <para>A pointer to an IMalloc interface.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.DBIF">
            <summary>The view mode of the band object. This is one of the following values.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DBIF.DBIF_VIEWMODE_NORMAL">
            <summary>Band object is displayed in a horizontal band.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DBIF.DBIF_VIEWMODE_VERTICAL">
            <summary>Band object is displayed in a vertical band.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DBIF.DBIF_VIEWMODE_FLOATING">
            <summary>Band object is displayed in a floating band.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DBIF.DBIF_VIEWMODE_TRANSPARENT">
            <summary>Band object is displayed in a transparent band.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.DBIM">
            <summary>
            The set of flags that determine which members of this structure are being requested by the caller. One or more of the following values:
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DBIM.DBIM_MINSIZE">
            <summary>ptMinSize is requested.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DBIM.DBIM_MAXSIZE">
            <summary>ptMaxSize is requested.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DBIM.DBIM_INTEGRAL">
            <summary>ptIntegral is requested.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DBIM.DBIM_ACTUAL">
            <summary>ptActual is requested.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DBIM.DBIM_TITLE">
            <summary>wszTitle is requested.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DBIM.DBIM_MODEFLAGS">
            <summary>dwModeFlags is requested.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DBIM.DBIM_BKCOLOR">
            <summary>crBkgnd is requested.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.DBIMF">
            <summary>
            A value that receives a set of flags that specify the mode of operation for the band object. One or more of the following values:
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DBIMF.DBIMF_NORMAL">
            <summary>The band uses default properties. The other mode flags modify this flag.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DBIMF.DBIMF_FIXED">
            <summary>
            Windows XP and later: The band object is of a fixed sized and position. With this flag, a sizing grip is not displayed on the
            band object.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DBIMF.DBIMF_FIXEDBMP">
            <summary>
            DBIMF_FIXEDBMP Windows XP and later: The band object uses a fixed bitmap (.bmp) file as its background. Note that backgrounds
            are not supported in all cases, so the bitmap may not be seen even when this flag is set.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DBIMF.DBIMF_VARIABLEHEIGHT">
            <summary>
            The height of the band object can be changed. The ptIntegral member defines the step value by which the band object can be resized.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DBIMF.DBIMF_UNDELETEABLE">
            <summary>Windows XP and later: The band object cannot be removed from the band container.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DBIMF.DBIMF_DEBOSSED">
            <summary>The band object is displayed with a sunken appearance.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DBIMF.DBIMF_BKCOLOR">
            <summary>The band is displayed with the background color specified in crBkgnd.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DBIMF.DBIMF_USECHEVRON">
            <summary>
            Windows XP and later: If the full band object cannot be displayed (that is, the band object is smaller than ptActual, a chevron
            is shown to indicate that there are more options available. These options are displayed when the chevron is clicked.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DBIMF.DBIMF_BREAK">
            <summary>Windows XP and later: The band object is displayed in a new row in the band container.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DBIMF.DBIMF_ADDTOFRONT">
            <summary>Windows XP and later: The band object is the first object in the band container.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DBIMF.DBIMF_TOPALIGN">
            <summary>Windows XP and later: The band object is displayed in the top row of the band container.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DBIMF.DBIMF_NOGRIPPER">
            <summary>Windows Vista and later: No sizing grip is ever displayed to allow the user to move or resize the band object.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DBIMF.DBIMF_ALWAYSGRIPPER">
            <summary>
            Windows Vista and later: A sizing grip that allows the user to move or resize the band object is always shown, even if that band
            object is the only one in the container.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DBIMF.DBIMF_NOMARGINS">
            <summary>Windows Vista and later: The band object should not display margins.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IDeskBand">
            <summary>
            <para>Used to obtain information about a band object.</para>
            <para>
            <c>Important</c> You should use thumbnail toolbars in new development in place of desk bands, which are not supported as of Windows 7.
            </para>
            </summary>
            <remarks>
            <para>This interface also provides the methods of the IOleWindow and IDockingWindow interfaces, from which it inherits.</para>
            <para>When to Implement</para>
            <para>Implement <c>IDeskBand</c> if you are implementing a band object.</para>
            <para>When to Use</para>
            <para>
            You do not call this interface directly. <c>IDeskBand</c> is used by the Shell or the browser to obtain display information for a
            band object.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IDeskBand.GetWindow(Vanara.PInvoke.HWND@)">
            <summary>
            Retrieves a handle to one of the windows participating in in-place activation (frame, document, parent, or in-place object window).
            </summary>
            <param name="phwnd">A pointer to a variable that receives the window handle.</param>
            <returns>
            This method returns S_OK on success. Other possible return values include the following.
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <description>E_FAIL</description>
            <description>The object is windowless.</description>
            </item>
            <item>
            <description>E_OUTOFMEMORY</description>
            <description>There is insufficient memory available for this operation.</description>
            </item>
            <item>
            <description>E_UNEXPECTED</description>
            <description>An unexpected error has occurred.</description>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            Five types of windows comprise the windows hierarchy. When a object is active in place, it has access to some or all of these windows.
            </para>
            <list type="table">
            <listheader>
            <term>Window</term>
            <term>Description</term>
            </listheader>
            <item>
            <description>Frame</description>
            <description>The outermost main window where the container application's main menu resides.</description>
            </item>
            <item>
            <description>Document</description>
            <description>The window that displays the compound document containing the embedded object to the user.</description>
            </item>
            <item>
            <description>Pane</description>
            <description>
            The subwindow of the document window that contains the object's view. Applicable only for applications with split-pane windows.
            </description>
            </item>
            <item>
            <description>Parent</description>
            <description>
            The container window that contains that object's view. The object application installs its window as a child of this window.
            </description>
            </item>
            <item>
            <description>In-place</description>
            <description>
            The window containing the active in-place object. The object application creates this window and installs it as a child of its
            hatch window, which is a child of the container's parent window.
            </description>
            </item>
            </list>
            <para>
            Each type of window has a different role in the in-place activation architecture. However, it is not necessary to employ a
            separate physical window for each type. Many container applications use the same window for their frame, document, pane, and
            parent windows.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IDeskBand.ContextSensitiveHelp(System.Boolean)">
            <summary>Determines whether context-sensitive help mode should be entered during an in-place activation session.</summary>
            <param name="fEnterMode"><see langword="true"/> if help mode should be entered; <see langword="false"/> if it should be exited.</param>
            <returns>
            <para>
            This method returns S_OK if the help mode was entered or exited successfully, depending on the value passed in <paramref
            name="fEnterMode"/>. Other possible return values include the following. <br/>
            </para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <description>E_INVALIDARG</description>
            <description>The specified <paramref name="fEnterMode"/> value is not valid.</description>
            </item>
            <item>
            <description>E_OUTOFMEMORY</description>
            <description>There is insufficient memory available for this operation.</description>
            </item>
            <item>
            <description>E_UNEXPECTED</description>
            <description>An unexpected error has occurred.</description>
            </item>
            </list>
            </returns>
            <remarks>
            <para>Applications can invoke context-sensitive help when the user:</para>
            <list type="bullet">
            <item>presses SHIFT+F1, then clicks a topic</item>
            <item>presses F1 when a menu item is selected</item>
            </list>
            <para>
            When SHIFT+F1 is pressed, either the frame or active object can receive the keystrokes. If the container's frame receives the
            keystrokes, it calls its containing document's IOleWindow::ContextSensitiveHelp method with <paramref name="fEnterMode"/> set to
            <see langword="true"/>. This propagates the help state to all of its in-place objects so they can correctly handle the mouse
            click or WM_COMMAND.
            </para>
            <para>
            If an active object receives the SHIFT+F1 keystrokes, it calls the container's IOleWindow::ContextSensitiveHelp method with
            <paramref name="fEnterMode"/> set to <see langword="true"/>, which then recursively calls each of its in-place sites until there
            are no more to be notified. The container then calls its document's or frame's IOleWindow::ContextSensitiveHelp method with
            <paramref name="fEnterMode"/> set to <see langword="true"/>.
            </para>
            <para>When in context-sensitive help mode, an object that receives the mouse click can either:</para>
            <list type="bullet">
            <item>Ignore the click if it does not support context-sensitive help.</item>
            <item>
            Tell all the other objects to exit context-sensitive help mode with ContextSensitiveHelp set to FALSE and then provide help for
            that context.
            </item>
            </list>
            <para>
            An object in context-sensitive help mode that receives a WM_COMMAND should tell all the other in-place objects to exit
            context-sensitive help mode and then provide help for the command.
            </para>
            <para>
            If a container application is to support context-sensitive help on menu items, it must either provide its own message filter so
            that it can intercept the F1 key or ask the OLE library to add a message filter by calling OleSetMenuDescriptor, passing valid,
            non-NULL values for the lpFrame and lpActiveObj parameters.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IDeskBand.ShowDW(System.Boolean)">
            <summary>Instructs the docking window object to show or hide itself.</summary>
            <param name="fShow">
            <para>Type: <c>BOOL</c></para>
            <para>
            <c>TRUE</c> if the docking window object should show its window. <c>FALSE</c> if the docking window object should hide its
            window and return its border space by calling SetBorderSpaceDW with zero values.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IDeskBand.CloseDW(System.UInt32)">
            <summary>
            Notifies the docking window object that it is about to be removed from the frame. The docking window object should save any
            persistent information at this time.
            </summary>
            <param name="dwReserved">
            <para>Type: <c>DWORD</c></para>
            <para>Reserved. This parameter should always be zero.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IDeskBand.ResizeBorderDW(Vanara.PInvoke.PRECT,System.Object,System.Boolean)">
            <summary>
            Notifies the docking window object that the frame's border space has changed. In response to this method, the IDockingWindow
            implementation must call SetBorderSpaceDW, even if no border space is required or a change is not necessary.
            </summary>
            <param name="prcBorder">
            <para>Type: <c>LPCRECT</c></para>
            <para>Pointer to a RECT structure that contains the frame's available border space.</para>
            </param>
            <param name="punkToolbarSite">
            <para>Type: <c>IUnknown*</c></para>
            <para>
            Pointer to the site's IUnknown interface. The docking window object should call the QueryInterface method for this interface,
            requesting IID_IDockingWindowSite. The docking window object then uses that interface to negotiate its border space. It is the
            docking window object's responsibility to release this interface when it is no longer needed.
            </para>
            </param>
            <param name="fReserved">
            <para>Type: <c>BOOL</c></para>
            <para>Reserved. This parameter should always be zero.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            <para>
            The prcBorder parameter contains the frame's entire available border space. The docking window object should negotiate its
            border space and then use this information to position itself.
            </para>
            <para>
            For example, if the docking window object requires 25 pixels at the top of the border space, it should negotiate for this
            through the following steps:
            </para>
            <list type="number">
            <item>
            <term>Allocate a BORDERWIDTHS structure and set its <c>top</c> member to 25.</term>
            </item>
            <item>
            <term>Call RequestBorderSpaceDW to request the space.</term>
            </item>
            <item>
            <term>If the request is approved by RequestBorderSpaceDW, call SetBorderSpaceDW to allocate the space.</term>
            </item>
            </list>
            <para>
            The docking window object can then position its window at prcBorder-&gt;left and prcBorder-&gt;top. The width of the docking
            window object's window is determined by subtracting prcBorder-&gt;left from prcBorder-&gt;right. Its height is contained in the
            <c>top</c> member of the BORDERWIDTHS structure.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IDeskBand.GetBandInfo(System.UInt32,Vanara.PInvoke.Shell32.DBIF,Vanara.PInvoke.Shell32.DESKBANDINFO@)">
            <summary>
            <para>Gets state information for a band object.</para>
            <para>
            <c>Important</c> You should use thumbnail toolbars in new development in place of desk bands, which are not supported as of
            Windows 7.
            </para>
            </summary>
            <param name="dwBandID">
            <para>Type: <c>DWORD</c></para>
            <para>The identifier of the band, assigned by the container. The band object can retain this value if it is required.</para>
            </param>
            <param name="dwViewMode">
            <para>Type: <c>DWORD</c></para>
            <para>The view mode of the band object. One of the following values:</para>
            <para>DBIF_VIEWMODE_NORMAL</para>
            <para>The band object is being displayed in a horizontal band.</para>
            <para>DBIF_VIEWMODE_VERTICAL</para>
            <para>The band object is being displayed in a vertical band.</para>
            <para>DBIF_VIEWMODE_FLOATING</para>
            <para>The band object is being displayed in a floating band.</para>
            <para>DBIF_VIEWMODE_TRANSPARENT</para>
            <para>The band object is being displayed in a transparent band.</para>
            </param>
            <param name="pdbi">
            <para>Type: <c>DESKBANDINFO*</c></para>
            <para>
            Pointer to a DESKBANDINFO structure that receives the band information for the object. The <c>dwMask</c> member of this
            structure indicates the specific information that is being requested.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IDeskBand2">
            <summary>
            <para>Exposes methods to enable and query translucency effects in a deskband object.</para>
            <para>
            <c>Important</c> You should use thumbnail toolbars in new development in place of desk bands, which are not supported as of Windows 7.
            </para>
            </summary>
            <remarks>
            <para>This interface also provides the methods of the IOleWindow, IDockingWindow, and IDeskBand interfaces, from which it inherits.</para>
            <para>
            If implemented in all active deskbands, this interface allows the taskbar to be displayed using translucent effects. If an active
            deskband does not implement <c>IDeskBand2</c>, then translucency is disabled for the entire taskbar.
            </para>
            <para>A deskband can implement <c>IDeskBand2</c> as a communication conduit between itself and the taskbar as follows:</para>
            <list type="bullet">
            <item>
            <term>
            Taskbar calls IDeskBand2::CanRenderComposited to learn if a deskband supports translucency. If one or more do not, the entire
            taskbar is rendered opaque.
            </term>
            </item>
            <item>
            <term>
            Taskbar calls IDeskBand2::SetCompositionState as appropriate in response to a user turning translucent effects on or off. The
            taskbar should attempt to render itself translucent or opaque in response to this call.
            </term>
            </item>
            <item>
            <term>IDeskBand2::GetCompositionState is the counterpart of IDeskBand2::SetCompositionState.</term>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IDeskBand2.GetWindow(Vanara.PInvoke.HWND@)">
            <summary>
            Retrieves a handle to one of the windows participating in in-place activation (frame, document, parent, or in-place object window).
            </summary>
            <param name="phwnd">A pointer to a variable that receives the window handle.</param>
            <returns>
            This method returns S_OK on success. Other possible return values include the following.
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <description>E_FAIL</description>
            <description>The object is windowless.</description>
            </item>
            <item>
            <description>E_OUTOFMEMORY</description>
            <description>There is insufficient memory available for this operation.</description>
            </item>
            <item>
            <description>E_UNEXPECTED</description>
            <description>An unexpected error has occurred.</description>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            Five types of windows comprise the windows hierarchy. When a object is active in place, it has access to some or all of these windows.
            </para>
            <list type="table">
            <listheader>
            <term>Window</term>
            <term>Description</term>
            </listheader>
            <item>
            <description>Frame</description>
            <description>The outermost main window where the container application's main menu resides.</description>
            </item>
            <item>
            <description>Document</description>
            <description>The window that displays the compound document containing the embedded object to the user.</description>
            </item>
            <item>
            <description>Pane</description>
            <description>
            The subwindow of the document window that contains the object's view. Applicable only for applications with split-pane windows.
            </description>
            </item>
            <item>
            <description>Parent</description>
            <description>
            The container window that contains that object's view. The object application installs its window as a child of this window.
            </description>
            </item>
            <item>
            <description>In-place</description>
            <description>
            The window containing the active in-place object. The object application creates this window and installs it as a child of its
            hatch window, which is a child of the container's parent window.
            </description>
            </item>
            </list>
            <para>
            Each type of window has a different role in the in-place activation architecture. However, it is not necessary to employ a
            separate physical window for each type. Many container applications use the same window for their frame, document, pane, and
            parent windows.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IDeskBand2.ContextSensitiveHelp(System.Boolean)">
            <summary>Determines whether context-sensitive help mode should be entered during an in-place activation session.</summary>
            <param name="fEnterMode"><see langword="true"/> if help mode should be entered; <see langword="false"/> if it should be exited.</param>
            <returns>
            <para>
            This method returns S_OK if the help mode was entered or exited successfully, depending on the value passed in <paramref
            name="fEnterMode"/>. Other possible return values include the following. <br/>
            </para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <description>E_INVALIDARG</description>
            <description>The specified <paramref name="fEnterMode"/> value is not valid.</description>
            </item>
            <item>
            <description>E_OUTOFMEMORY</description>
            <description>There is insufficient memory available for this operation.</description>
            </item>
            <item>
            <description>E_UNEXPECTED</description>
            <description>An unexpected error has occurred.</description>
            </item>
            </list>
            </returns>
            <remarks>
            <para>Applications can invoke context-sensitive help when the user:</para>
            <list type="bullet">
            <item>presses SHIFT+F1, then clicks a topic</item>
            <item>presses F1 when a menu item is selected</item>
            </list>
            <para>
            When SHIFT+F1 is pressed, either the frame or active object can receive the keystrokes. If the container's frame receives the
            keystrokes, it calls its containing document's IOleWindow::ContextSensitiveHelp method with <paramref name="fEnterMode"/> set to
            <see langword="true"/>. This propagates the help state to all of its in-place objects so they can correctly handle the mouse
            click or WM_COMMAND.
            </para>
            <para>
            If an active object receives the SHIFT+F1 keystrokes, it calls the container's IOleWindow::ContextSensitiveHelp method with
            <paramref name="fEnterMode"/> set to <see langword="true"/>, which then recursively calls each of its in-place sites until there
            are no more to be notified. The container then calls its document's or frame's IOleWindow::ContextSensitiveHelp method with
            <paramref name="fEnterMode"/> set to <see langword="true"/>.
            </para>
            <para>When in context-sensitive help mode, an object that receives the mouse click can either:</para>
            <list type="bullet">
            <item>Ignore the click if it does not support context-sensitive help.</item>
            <item>
            Tell all the other objects to exit context-sensitive help mode with ContextSensitiveHelp set to FALSE and then provide help for
            that context.
            </item>
            </list>
            <para>
            An object in context-sensitive help mode that receives a WM_COMMAND should tell all the other in-place objects to exit
            context-sensitive help mode and then provide help for the command.
            </para>
            <para>
            If a container application is to support context-sensitive help on menu items, it must either provide its own message filter so
            that it can intercept the F1 key or ask the OLE library to add a message filter by calling OleSetMenuDescriptor, passing valid,
            non-NULL values for the lpFrame and lpActiveObj parameters.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IDeskBand2.ShowDW(System.Boolean)">
            <summary>Instructs the docking window object to show or hide itself.</summary>
            <param name="fShow">
            <para>Type: <c>BOOL</c></para>
            <para>
            <c>TRUE</c> if the docking window object should show its window. <c>FALSE</c> if the docking window object should hide its
            window and return its border space by calling SetBorderSpaceDW with zero values.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IDeskBand2.CloseDW(System.UInt32)">
            <summary>
            Notifies the docking window object that it is about to be removed from the frame. The docking window object should save any
            persistent information at this time.
            </summary>
            <param name="dwReserved">
            <para>Type: <c>DWORD</c></para>
            <para>Reserved. This parameter should always be zero.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IDeskBand2.ResizeBorderDW(Vanara.PInvoke.PRECT,System.Object,System.Boolean)">
            <summary>
            Notifies the docking window object that the frame's border space has changed. In response to this method, the IDockingWindow
            implementation must call SetBorderSpaceDW, even if no border space is required or a change is not necessary.
            </summary>
            <param name="prcBorder">
            <para>Type: <c>LPCRECT</c></para>
            <para>Pointer to a RECT structure that contains the frame's available border space.</para>
            </param>
            <param name="punkToolbarSite">
            <para>Type: <c>IUnknown*</c></para>
            <para>
            Pointer to the site's IUnknown interface. The docking window object should call the QueryInterface method for this interface,
            requesting IID_IDockingWindowSite. The docking window object then uses that interface to negotiate its border space. It is the
            docking window object's responsibility to release this interface when it is no longer needed.
            </para>
            </param>
            <param name="fReserved">
            <para>Type: <c>BOOL</c></para>
            <para>Reserved. This parameter should always be zero.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            <para>
            The prcBorder parameter contains the frame's entire available border space. The docking window object should negotiate its
            border space and then use this information to position itself.
            </para>
            <para>
            For example, if the docking window object requires 25 pixels at the top of the border space, it should negotiate for this
            through the following steps:
            </para>
            <list type="number">
            <item>
            <term>Allocate a BORDERWIDTHS structure and set its <c>top</c> member to 25.</term>
            </item>
            <item>
            <term>Call RequestBorderSpaceDW to request the space.</term>
            </item>
            <item>
            <term>If the request is approved by RequestBorderSpaceDW, call SetBorderSpaceDW to allocate the space.</term>
            </item>
            </list>
            <para>
            The docking window object can then position its window at prcBorder-&gt;left and prcBorder-&gt;top. The width of the docking
            window object's window is determined by subtracting prcBorder-&gt;left from prcBorder-&gt;right. Its height is contained in the
            <c>top</c> member of the BORDERWIDTHS structure.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IDeskBand2.GetBandInfo(System.UInt32,Vanara.PInvoke.Shell32.DBIF,Vanara.PInvoke.Shell32.DESKBANDINFO@)">
            <summary>
            <para>Gets state information for a band object.</para>
            <para>
            <c>Important</c> You should use thumbnail toolbars in new development in place of desk bands, which are not supported as of
            Windows 7.
            </para>
            </summary>
            <param name="dwBandID">
            <para>Type: <c>DWORD</c></para>
            <para>The identifier of the band, assigned by the container. The band object can retain this value if it is required.</para>
            </param>
            <param name="dwViewMode">
            <para>Type: <c>DWORD</c></para>
            <para>The view mode of the band object. One of the following values:</para>
            <para>DBIF_VIEWMODE_NORMAL</para>
            <para>The band object is being displayed in a horizontal band.</para>
            <para>DBIF_VIEWMODE_VERTICAL</para>
            <para>The band object is being displayed in a vertical band.</para>
            <para>DBIF_VIEWMODE_FLOATING</para>
            <para>The band object is being displayed in a floating band.</para>
            <para>DBIF_VIEWMODE_TRANSPARENT</para>
            <para>The band object is being displayed in a transparent band.</para>
            </param>
            <param name="pdbi">
            <para>Type: <c>DESKBANDINFO*</c></para>
            <para>
            Pointer to a DESKBANDINFO structure that receives the band information for the object. The <c>dwMask</c> member of this
            structure indicates the specific information that is being requested.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IDeskBand2.CanRenderComposited(System.Boolean@)">
            <summary>
            <para>Indicates the deskband's ability to be displayed as translucent.</para>
            <para>
            <c>Important</c> You should use thumbnail toolbars in new development in place of desk bands, which are not supported as of
            Windows 7.
            </para>
            </summary>
            <param name="pfCanRenderComposited">
            <para>Type: <c>BOOL*</c></para>
            <para>When this method returns, contains a <c>BOOL</c> indicating ability.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IDeskBand2.SetCompositionState(System.Boolean)">
            <summary>
            <para>Sets the composition state.</para>
            <para>
            <c>Important</c> You should use thumbnail toolbars in new development in place of desk bands, which are not supported as of
            Windows 7.
            </para>
            </summary>
            <param name="fCompositionEnabled">
            <para>Type: <c>BOOL</c></para>
            <para><c>TRUE</c> to enable the composition state; otherwise, <c>FALSE</c>.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IDeskBand2.GetCompositionState(System.Boolean@)">
            <summary>
            <para>Gets the composition state.</para>
            <para>
            <c>Important</c> You should use thumbnail toolbars in new development in place of desk bands, which are not supported as of
            Windows 7.
            </para>
            </summary>
            <param name="pfCompositionEnabled">
            <para>Type: <c>BOOL*</c></para>
            <para>When this method returns, contains a <c>BOOL</c> that indicates state.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.DESKBANDINFO">
            <summary>Receives information about a band object. This structure is used with the deprecated IDeskBand::GetBandInfo method.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DESKBANDINFO.dwMask">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>
            The set of flags that determine which members of this structure are being requested by the caller. One or more of the following values:
            </para>
            <para>DBIM_MINSIZE</para>
            <para><c>ptMinSize</c> is requested.</para>
            <para>DBIM_MAXSIZE</para>
            <para><c>ptMaxSize</c> is requested.</para>
            <para>DBIM_INTEGRAL</para>
            <para><c>ptIntegral</c> is requested.</para>
            <para>DBIM_ACTUAL</para>
            <para><c>ptActual</c> is requested.</para>
            <para>DBIM_TITLE</para>
            <para><c>wszTitle</c> is requested.</para>
            <para>DBIM_MODEFLAGS</para>
            <para><c>dwModeFlags</c> is requested.</para>
            <para>DBIM_BKCOLOR</para>
            <para><c>crBkgnd</c> is requested.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DESKBANDINFO.ptMinSize">
            <summary>
            <para>Type: <c>POINTL</c></para>
            <para>
            A POINTL structure that receives the minimum size of the band object. The minimum width is given in the <c>POINTL</c>
            structure's <c>x</c> member and the minimum height is given in the <c>y</c> member.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DESKBANDINFO.ptMaxSize">
            <summary>
            <para>Type: <c>POINTL</c></para>
            <para>
            A POINTL structure that receives the maximum size of the band object. The maximum height is given in the <c>POINTL</c>
            structure's <c>y</c> member and the <c>x</c> member is ignored. If the band object has no limit for its maximum height, (LONG)-1
            should be used.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DESKBANDINFO.ptIntegral">
            <summary>
            <para>Type: <c>POINTL</c></para>
            <para>
            A POINTL structure that receives the sizing step value (increment) in which the band object is resized. The vertical step value
            is given in the <c>POINTL</c> structure's <c>y</c> member and the <c>x</c> member is ignored.
            </para>
            <para>The <c>dwModeFlags</c> member must contain the DBIMF_VARIABLEHEIGHT flag; otherwise, <c>ptIntegral</c> is ignored.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DESKBANDINFO.ptActual">
            <summary>
            <para>Type: <c>POINTL</c></para>
            <para>
            A POINTL structure that receives the ideal size of the band object. The ideal width is given in the <c>POINTL</c> structure's
            <c>x</c> member and the ideal height is given in the <c>y</c> member. The band container attempts to use these values, but the
            band is not guaranteed to be this size.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DESKBANDINFO.wszTitle">
            <summary>
            <para>Type: <c>WCHAR[256]</c></para>
            <para>A <c>WCHAR</c> buffer that receives the title of the band.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DESKBANDINFO.dwModeFlags">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>
            A value that receives a set of flags that specify the mode of operation for the band object. One or more of the following values:
            </para>
            <para>DBIMF_NORMAL</para>
            <para>The band uses default properties. The other mode flags modify this flag.</para>
            <para>DBIMF_FIXED</para>
            <para>
            <c>Windows XP and later:</c> The band object is of a fixed sized and position. With this flag, a sizing grip is not displayed on
            the band object.
            </para>
            <para>DBIMF_FIXEDBMP</para>
            <para>
            <c>Windows XP and later:</c> The band object uses a fixed bitmap (.bmp) file as its background. Note that backgrounds are not
            supported in all cases, so the bitmap may not be seen even when this flag is set.
            </para>
            <para>DBIMF_VARIABLEHEIGHT</para>
            <para>
            The height of the band object can be changed. The <c>ptIntegral</c> member defines the step value by which the band object can
            be resized.
            </para>
            <para>DBIMF_UNDELETEABLE</para>
            <para><c>Windows XP and later:</c> The band object cannot be removed from the band container.</para>
            <para>DBIMF_DEBOSSED</para>
            <para>The band object is displayed with a sunken appearance.</para>
            <para>DBIMF_BKCOLOR</para>
            <para>The band is displayed with the background color specified in <c>crBkgnd</c>.</para>
            <para>DBIMF_USECHEVRON</para>
            <para>
            <c>Windows XP and later:</c> If the full band object cannot be displayed (that is, the band object is smaller than
            <c>ptActual</c>, a chevron is shown to indicate that there are more options available. These options are displayed when the
            chevron is clicked.
            </para>
            <para>DBIMF_BREAK</para>
            <para><c>Windows XP and later:</c> The band object is displayed in a new row in the band container.</para>
            <para>DBIMF_ADDTOFRONT</para>
            <para><c>Windows XP and later:</c> The band object is the first object in the band container.</para>
            <para>DBIMF_TOPALIGN</para>
            <para><c>Windows XP and later:</c> The band object is displayed in the top row of the band container.</para>
            <para>DBIMF_NOGRIPPER</para>
            <para><c>Windows Vista and later:</c> No sizing grip is ever displayed to allow the user to move or resize the band object.</para>
            <para>DBIMF_ALWAYSGRIPPER</para>
            <para>
            <c>Windows Vista and later:</c> A sizing grip that allows the user to move or resize the band object is always shown, even if
            that band object is the only one in the container.
            </para>
            <para>DBIMF_NOMARGINS</para>
            <para><c>Windows Vista and later:</c> The band object should not display margins.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DESKBANDINFO.crBkgnd">
            <summary>
            <para>Type: <c>COLORREF</c></para>
            <para>
            A COLORREF structure that receives the background color of the band. The <c>dwModeFlags</c> member must contain the
            <c>DBIMF_BKCOLOR</c> flag; otherwise, <c>crBkgnd</c> is ignored.
            </para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.DESKTOP_SLIDESHOW_DIRECTION">
            <summary>The direction that the slideshow should advance.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DESKTOP_SLIDESHOW_DIRECTION.DSD_FORWARD">
            <summary>Advance the slideshow forward.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DESKTOP_SLIDESHOW_DIRECTION.DSD_BACKWARD">
            <summary>Advance the slideshow backward.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.DESKTOP_SLIDESHOW_OPTIONS">
            <summary>Options for <see cref="T:Vanara.PInvoke.Shell32.IDesktopWallpaper"/>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DESKTOP_SLIDESHOW_OPTIONS.DSO_SHUFFLEIMAGES">
            <summary>Enable shuffle; advance through the slideshow in a random order.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.DESKTOP_SLIDESHOW_STATE">
            <summary>The status of the slideshow.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DESKTOP_SLIDESHOW_STATE.DSS_ENABLED">
            <summary>Slideshows are enabled.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DESKTOP_SLIDESHOW_STATE.DSS_SLIDESHOW">
            <summary>A slideshow is currently configured.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DESKTOP_SLIDESHOW_STATE.DSS_DISABLED_BY_REMOTE_SESSION">
            <summary>A remote session has temporarily disabled the slideshow.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.DESKTOP_WALLPAPER_POSITION">
            <summary>Specifies how the desktop wallpaper should be displayed.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DESKTOP_WALLPAPER_POSITION.DWPOS_CENTER">
            <summary>Center the image; do not stretch. This is equivalent to the WPSTYLE_CENTER style in IActiveDesktop.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DESKTOP_WALLPAPER_POSITION.DWPOS_TILE">
            <summary>Tile the image across all monitors. This is equivalent to the WPSTYLE_TILE style in IActiveDesktop.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DESKTOP_WALLPAPER_POSITION.DWPOS_STRETCH">
            <summary>Stretch the image to exactly fit on the monitor. This is equivalent to the WPSTYLE_STRETCH style in IActiveDesktop.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DESKTOP_WALLPAPER_POSITION.DWPOS_FIT">
            <summary>
            Stretch the image to exactly the height or width of the monitor without changing its aspect ratio or cropping the image.
            This can result in colored letterbox bars on either side or on above and below of the image. This is equivalent to the
            WPSTYLE_KEEPASPECT style in IActiveDesktop.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DESKTOP_WALLPAPER_POSITION.DWPOS_FILL">
            <summary>
            Stretch the image to fill the screen, cropping the image as necessary to avoid letterbox bars. This is equivalent to the
            WPSTYLE_CROPTOFIT style in IActiveDesktop.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DESKTOP_WALLPAPER_POSITION.DWPOS_SPAN">
            <summary>Spans a single image across all monitors attached to the system. This flag has no IActiveDesktop equivalent.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IDesktopWallpaper">
            <summary>Provides methods for managing the desktop wallpaper.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IDesktopWallpaper.SetWallpaper(System.String,System.String)">
            <summary>Sets the desktop wallpaper.</summary>
            <param name="monitorID">
            The ID of the monitor. This value can be obtained through GetMonitorDevicePathAt. Set this value to NULL to set the
            wallpaper image on all monitors.
            </param>
            <param name="wallpaper">The full path of the wallpaper image file.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IDesktopWallpaper.GetWallpaper(System.String,System.String@)">
            <summary>Gets the current desktop wallpaper.</summary>
            <param name="monitorID">
            <para>The ID of the monitor. This value can be obtained through GetMonitorDevicePathAt.</para>
            <para>
            This value can be set to <c>NULL</c>. In that case, if a single wallpaper image is displayed on all of the system's
            monitors, the method returns successfully. If this value is set to <c>NULL</c> and different monitors are displaying
            different wallpapers or a slideshow is running, the method returns S_FALSE and an empty string in the wallpaper parameter.
            </para>
            </param>
            <param name="wallpaper">
            <para>
            The address of a pointer to a buffer that, when this method returns successfully, receives the path to the wallpaper image
            file. Note that this image could be currently displayed on all of the system's monitors, not just the monitor specified in
            the monitorID parameter.
            </para>
            <para>
            This string will be empty if no wallpaper image is being displayed or if a monitor is displaying a solid color. The string
            will also be empty if the method fails.
            </para>
            </param>
            <returns>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IDesktopWallpaper.GetMonitorDevicePathAt(System.UInt32,System.String@)">
            <summary>Retrieves the unique ID of one of the system's monitors.</summary>
            <param name="monitorIndex">The number of the monitor. Call GetMonitorDevicePathCount to determine the total number of monitors.</param>
            <param name="monitorID">
            A pointer to the address of a buffer that, when this method returns successfully, receives the monitor's ID.
            </param>
            <returns>
            <para>
            If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code, including the following.
            </para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>E_POINTER</term>
            <term>A NULL pointer was provided in monitorID.</term>
            </item>
            </list>
            </returns>
            <remarks>
            This method can be called on monitors that are currently detached but that have an image assigned to them. Call
            GetMonitorRECT to distinguish between attached and detached monitors.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IDesktopWallpaper.GetMonitorDevicePathCount">
            <summary>Retrieves the number of monitors that are associated with the system.</summary>
            <returns>A pointer to a value that, when this method returns successfully, receives the number of monitors.</returns>
            <remarks>
            The count retrieved through this method includes monitors that are currently detached but that have an image assigned to
            them. Call GetMonitorRECT to distinguish between attached and detached monitors.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IDesktopWallpaper.GetMonitorRECT(System.String,Vanara.PInvoke.RECT@)">
            <summary>Retrieves the display rectangle of the specified monitor.</summary>
            <param name="monitorID">The ID of the monitor to query. You can get this value through GetMonitorDevicePathAt.</param>
            <param name="displayRect">
            A pointer to a RECT structure that, when this method returns successfully, receives the display rectangle of the monitor
            specified by monitorID, in screen coordinates.
            </param>
            <returns>
            <para>
            If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code, including the following.
            </para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>S_FALSE</term>
            <term>The monitor specified by monitorID is not currently attached to the system.</term>
            </item>
            <item>
            <term>E_POINTER</term>
            <term>A NULL pointer was provided in displayRect.</term>
            </item>
            <item>
            <term>E_INVALIDARG</term>
            <term>The ID supplied in monitorID cannot be found.</term>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IDesktopWallpaper.SetBackgroundColor(Vanara.PInvoke.COLORREF)">
            <summary>
            Sets the color that is visible on the desktop when no image is displayed or when the desktop background has been disabled.
            This color is also used as a border when the desktop wallpaper does not fill the entire screen.
            </summary>
            <param name="color">A COLORREF value that specifies the background RGB color value.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IDesktopWallpaper.GetBackgroundColor">
            <summary>
            Retrieves the color that is visible on the desktop when no image is displayed or when the desktop background has been
            disabled. This color is also used as a border when the desktop wallpaper does not fill the entire screen.
            </summary>
            <returns>
            A pointer to a COLORREF value that, when this method returns successfully, receives the RGB color value. If this method
            fails, this value is set to 0.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IDesktopWallpaper.SetPosition(Vanara.PInvoke.Shell32.DESKTOP_WALLPAPER_POSITION)">
            <summary>
            Sets the display option for the desktop wallpaper image, determining whether the image should be centered, tiled, or stretched.
            </summary>
            <param name="position">
            One of the DESKTOP_WALLPAPER_POSITION enumeration values that specify how the image will be displayed on the system's monitors.
            </param>
            <returns>
            <para>
            If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code, including the following.
            </para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>S_FALSE</term>
            <term>The desktop wallpaper is already displayed as asked for in position.</term>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IDesktopWallpaper.GetPosition">
            <summary>Retrieves the current display value for the desktop background image.</summary>
            <returns>
            A pointer to a value that, when this method returns successfully, receives one of the DESKTOP_WALLPAPER_POSITION enumeration
            values that specify how the image is being displayed on the system's monitors.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IDesktopWallpaper.SetSlideshow(Vanara.PInvoke.Shell32.IShellItemArray)">
            <summary>Specifies the images to use for the desktop wallpaper slideshow.</summary>
            <param name="items">
            A pointer to an IShellItemArray that contains the slideshow images. This array can contain individual items stored in the
            same container (files stored in a folder), or it can contain a single item which is the container itself (a folder that
            contains images). Any other configuration of the array will cause this method to fail.
            </param>
            <returns>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IDesktopWallpaper.GetSlideshow">
            <summary>Gets the images that are being displayed in the desktop wallpaper slideshow.</summary>
            <returns>
            The address of a pointer to an IShellItemArray object that, when this method returns successfully, receives the items that
            make up the slideshow. This array can contain individual items stored in the same container, or it can contain a single item
            which is the container itself.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IDesktopWallpaper.SetSlideshowOptions(Vanara.PInvoke.Shell32.DESKTOP_SLIDESHOW_OPTIONS,System.UInt32)">
            <summary>Sets the desktop wallpaper slideshow settings for shuffle and timing.</summary>
            <param name="options">
            <para>Set to either 0 to disable shuffle or the following value.</para>
            <para>DSO_SHUFFLEIMAGES (0x01)</para>
            <para>Enable shuffle; advance through the slideshow in a random order.</para>
            </param>
            <param name="slideshowTick">The amount of time, in milliseconds, between image transitions.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IDesktopWallpaper.GetSlideshowOptions(Vanara.PInvoke.Shell32.DESKTOP_SLIDESHOW_OPTIONS@,System.UInt32@)">
            <summary>Gets the current desktop wallpaper slideshow settings for shuffle and timing.</summary>
            <param name="options">
            <para>Type: <c>DESKTOP_SLIDESHOW_OPTIONS*</c></para>
            <para>
            A pointer to a value that, when this method returns successfully, receives either 0 to indicate that shuffle is disabled or
            the following value.
            </para>
            <para>DSO_SHUFFLEIMAGES (0x01)</para>
            <para>Shuffle is enabled; the images are shown in a random order.</para>
            </param>
            <param name="slideshowTick">
            <para>Type: <c>UINT*</c></para>
            <para>
            A pointer to a value that, when this method returns successfully, receives the interval between image transitions, in milliseconds.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>
            If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code, including the following.
            </para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>E_POINTER</term>
            <term>A NULL pointer was provided in one of the parameters.</term>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IDesktopWallpaper.AdvanceSlideshow(System.String,Vanara.PInvoke.Shell32.DESKTOP_SLIDESHOW_DIRECTION)">
            <summary>Switches the wallpaper on a specified monitor to the next image in the slideshow.</summary>
            <param name="monitorID">
            The ID of the monitor on which to change the wallpaper image. This ID can be obtained through the GetMonitorDevicePathAt
            method. If this parameter is set to <c>NULL</c>, the monitor scheduled to change next is used.
            </param>
            <param name="direction">
            <para>The direction that the slideshow should advance. One of the following DESKTOP_SLIDESHOW_DIRECTION values:</para>
            <para>DSD_FORWARD (0)</para>
            <para>Advance the slideshow forward.</para>
            <para>DSD_BACKWARD (1)</para>
            <para>Advance the slideshow backward.</para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IDesktopWallpaper.GetStatus">
            <summary>Gets the current status of the slideshow.</summary>
            <returns>
            <para>
            A pointer to a DESKTOP_SLIDESHOW_STATE value that, when this method returns successfully, receives one or more of the
            following flags.
            </para>
            <para>DSS_ENABLED (0x01)</para>
            <para>Slideshows are enabled.</para>
            <para>DSS_SLIDESHOW (0x02)</para>
            <para>A slideshow is currently configured.</para>
            <para>DSS_DISABLED_BY_REMOTE_SESSION (0x04)</para>
            <para>A remote session has temporarily disabled the slideshow.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IDesktopWallpaper.Enable(System.Boolean)">
            <summary>Enables or disables the desktop background.</summary>
            <param name="enable"><c>TRUE</c> to enable the desktop background, <c>FALSE</c> to disable it.</param>
            <returns>
            <para>
            If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code, including the following.
            </para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>S_FALSE</term>
            <term>The desktop wallpaper is already in the state you're asking for through this call.</term>
            </item>
            <item>
            <term>E_FILE_NOT_FOUND</term>
            <term>
            The desktop wallpaper that would be used when the background is enabled is missing from its expected location. Call
            SetWallpaper to specify a new wallpaper.
            </term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>This method would normally be called to disable the desktop background for performance reasons.</para>
            <para>
            When the desktop background is disabled, a solid color is shown in its place. To get or set the specific color, use the
            GetBackgroundColor and SetBackgroundColor methods.
            </para>
            <para>
            <c>Note</c> A call to the IDesktopWallpaper_SetWallpaper or IDesktopWallpaper_SetSlideshow methods will enable the desktop
            background even if it is currently disabled through this method.
            </para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.DesktopWallpaper">
            <summary>CLSID_DesktopWallpaper</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IDockingWindow">
            <summary>
            Exposes methods that notify the docking window object of changes, including showing, hiding, and impending removal. This
            interface is implemented by window objects that can be docked within the border space of a Windows Explorer window.
            </summary>
            <remarks>
            <para>
            <c>IDockingWindow</c> is derived from IOleWindow. See the following topics for details on these methods also available to
            <c>IDockingWindow</c> through that inheritance.
            </para>
            <list type="table">
            <listheader>
            <term>Additional IDockingWindow Methods</term>
            </listheader>
            <item>
            <term>IDockingWindow::GetWindow</term>
            </item>
            <item>
            <term>IDockingWindow::ContextSensitiveHelp</term>
            </item>
            </list>
            <para>When to Implement</para>
            <para>
            Implement <c>IDockingWindow</c> when you want to display a window inside a browser frame. This is typically used for user
            interface windows, such as toolbars.
            </para>
            <para>When to Use</para>
            <para>
            You do not usually use the <c>IDockingWindow</c> interface directly. The Shell browser uses this interface to support docked
            windows inside the browser frame.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IDockingWindow.GetWindow(Vanara.PInvoke.HWND@)">
            <summary>
            Retrieves a handle to one of the windows participating in in-place activation (frame, document, parent, or in-place object window).
            </summary>
            <param name="phwnd">A pointer to a variable that receives the window handle.</param>
            <returns>
            This method returns S_OK on success. Other possible return values include the following.
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <description>E_FAIL</description>
            <description>The object is windowless.</description>
            </item>
            <item>
            <description>E_OUTOFMEMORY</description>
            <description>There is insufficient memory available for this operation.</description>
            </item>
            <item>
            <description>E_UNEXPECTED</description>
            <description>An unexpected error has occurred.</description>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            Five types of windows comprise the windows hierarchy. When a object is active in place, it has access to some or all of
            these windows.
            </para>
            <list type="table">
            <listheader>
            <term>Window</term>
            <term>Description</term>
            </listheader>
            <item>
            <description>Frame</description>
            <description>The outermost main window where the container application's main menu resides.</description>
            </item>
            <item>
            <description>Document</description>
            <description>The window that displays the compound document containing the embedded object to the user.</description>
            </item>
            <item>
            <description>Pane</description>
            <description>
            The subwindow of the document window that contains the object's view. Applicable only for applications with split-pane windows.
            </description>
            </item>
            <item>
            <description>Parent</description>
            <description>
            The container window that contains that object's view. The object application installs its window as a child of this window.
            </description>
            </item>
            <item>
            <description>In-place</description>
            <description>
            The window containing the active in-place object. The object application creates this window and installs it as a child of
            its hatch window, which is a child of the container's parent window.
            </description>
            </item>
            </list>
            <para>
            Each type of window has a different role in the in-place activation architecture. However, it is not necessary to employ a
            separate physical window for each type. Many container applications use the same window for their frame, document, pane, and
            parent windows.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IDockingWindow.ContextSensitiveHelp(System.Boolean)">
            <summary>Determines whether context-sensitive help mode should be entered during an in-place activation session.</summary>
            <param name="fEnterMode">
            <see langword="true"/> if help mode should be entered; <see langword="false"/> if it should be exited.
            </param>
            <returns>
            <para>
            This method returns S_OK if the help mode was entered or exited successfully, depending on the value passed in <paramref
            name="fEnterMode"/>. Other possible return values include the following. <br/>
            </para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <description>E_INVALIDARG</description>
            <description>The specified <paramref name="fEnterMode"/> value is not valid.</description>
            </item>
            <item>
            <description>E_OUTOFMEMORY</description>
            <description>There is insufficient memory available for this operation.</description>
            </item>
            <item>
            <description>E_UNEXPECTED</description>
            <description>An unexpected error has occurred.</description>
            </item>
            </list>
            </returns>
            <remarks>
            <para>Applications can invoke context-sensitive help when the user:</para>
            <list type="bullet">
            <item>presses SHIFT+F1, then clicks a topic</item>
            <item>presses F1 when a menu item is selected</item>
            </list>
            <para>
            When SHIFT+F1 is pressed, either the frame or active object can receive the keystrokes. If the container's frame receives
            the keystrokes, it calls its containing document's IOleWindow::ContextSensitiveHelp method with <paramref
            name="fEnterMode"/> set to <see langword="true"/>. This propagates the help state to all of its in-place objects so they can
            correctly handle the mouse click or WM_COMMAND.
            </para>
            <para>
            If an active object receives the SHIFT+F1 keystrokes, it calls the container's IOleWindow::ContextSensitiveHelp method with
            <paramref name="fEnterMode"/> set to <see langword="true"/>, which then recursively calls each of its in-place sites until
            there are no more to be notified. The container then calls its document's or frame's IOleWindow::ContextSensitiveHelp method
            with <paramref name="fEnterMode"/> set to <see langword="true"/>.
            </para>
            <para>When in context-sensitive help mode, an object that receives the mouse click can either:</para>
            <list type="bullet">
            <item>Ignore the click if it does not support context-sensitive help.</item>
            <item>
            Tell all the other objects to exit context-sensitive help mode with ContextSensitiveHelp set to FALSE and then provide help
            for that context.
            </item>
            </list>
            <para>
            An object in context-sensitive help mode that receives a WM_COMMAND should tell all the other in-place objects to exit
            context-sensitive help mode and then provide help for the command.
            </para>
            <para>
            If a container application is to support context-sensitive help on menu items, it must either provide its own message filter
            so that it can intercept the F1 key or ask the OLE library to add a message filter by calling OleSetMenuDescriptor, passing
            valid, non-NULL values for the lpFrame and lpActiveObj parameters.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IDockingWindow.ShowDW(System.Boolean)">
            <summary>Instructs the docking window object to show or hide itself.</summary>
            <param name="fShow">
            <para>Type: <c>BOOL</c></para>
            <para>
            <c>TRUE</c> if the docking window object should show its window. <c>FALSE</c> if the docking window object should hide its
            window and return its border space by calling SetBorderSpaceDW with zero values.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IDockingWindow.CloseDW(System.UInt32)">
            <summary>
            Notifies the docking window object that it is about to be removed from the frame. The docking window object should save any
            persistent information at this time.
            </summary>
            <param name="dwReserved">
            <para>Type: <c>DWORD</c></para>
            <para>Reserved. This parameter should always be zero.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IDockingWindow.ResizeBorderDW(Vanara.PInvoke.PRECT,System.Object,System.Boolean)">
            <summary>
            Notifies the docking window object that the frame's border space has changed. In response to this method, the IDockingWindow
            implementation must call SetBorderSpaceDW, even if no border space is required or a change is not necessary.
            </summary>
            <param name="prcBorder">
            <para>Type: <c>LPCRECT</c></para>
            <para>Pointer to a RECT structure that contains the frame's available border space.</para>
            </param>
            <param name="punkToolbarSite">
            <para>Type: <c>IUnknown*</c></para>
            <para>
            Pointer to the site's IUnknown interface. The docking window object should call the QueryInterface method for this
            interface, requesting IID_IDockingWindowSite. The docking window object then uses that interface to negotiate its border
            space. It is the docking window object's responsibility to release this interface when it is no longer needed.
            </para>
            </param>
            <param name="fReserved">
            <para>Type: <c>BOOL</c></para>
            <para>Reserved. This parameter should always be zero.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            <para>
            The prcBorder parameter contains the frame's entire available border space. The docking window object should negotiate its
            border space and then use this information to position itself.
            </para>
            <para>
            For example, if the docking window object requires 25 pixels at the top of the border space, it should negotiate for this
            through the following steps:
            </para>
            <list type="number">
            <item>
            <term>Allocate a BORDERWIDTHS structure and set its <c>top</c> member to 25.</term>
            </item>
            <item>
            <term>Call RequestBorderSpaceDW to request the space.</term>
            </item>
            <item>
            <term>If the request is approved by RequestBorderSpaceDW, call SetBorderSpaceDW to allocate the space.</term>
            </item>
            </list>
            <para>
            The docking window object can then position its window at prcBorder-&gt;left and prcBorder-&gt;top. The width of the docking
            window object's window is determined by subtracting prcBorder-&gt;left from prcBorder-&gt;right. Its height is contained in
            the <c>top</c> member of the BORDERWIDTHS structure.
            </para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.DSH_FLAGS">
            <summary>The flags that determine the characteristics of a drag-and-drop operation over an IDragSourceHelper object.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DSH_FLAGS.DSH_ALLOWDROPDESCRIPTIONTEXT">
            <summary>
            Allow text specified in DROPDESCRIPTION to be displayed on the drag image. If you pass this flag into the dwFlags parameter
            of <c>IDragSourceHelper2::SetFlags</c>, then the text description is rendered on top of the supplied drag image. If you pass
            a drag image into an IDragSourceHelper object, then by default, the extra text description of the drag-and-drop operation is
            not displayed.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IDragSourceHelper">
            <summary>
            Exposed by the Shell to allow an application to specify the image that will be displayed during a Shell drag-and-drop operation.
            </summary>
            <remarks>
            <para>This interface is exposed by the Shell's drag-image manager. It is not implemented by applications.</para>
            <para>
            Use this interface to specify the image displayed during a Shell drag-and-drop operation. The <c>IDragSourceHelper</c>,
            IDropTargetHelper, and IInitializeWithWindow interfaces are exposed by the drag-image manager object to allow the IDropTarget
            interface to use custom drag images. To use either of these interfaces, you must create an in-process server drag-image manager
            object by calling CoCreateInstance with a class identifier (CLSID) of CLSID_DragDropHelper. Get interface pointers using
            standard Component Object Model (COM) procedures.
            </para>
            <para>The <c>IDragSourceHelper</c> interface provides the following two ways to specify the bitmap to be used as a drag image.</para>
            <list type="bullet">
            <item>
            <term>
            Controls that have a window can register a DI_GETDRAGIMAGE window message for it and initialize the drag-image manager with
            IDragSourceHelper::InitializeFromWindow. When the DI_GETDRAGIMAGE message is received, the handler puts the drag image bitmap
            information in the SHDRAGIMAGE structure that is passed as the message's lParam value.
            </term>
            </item>
            <item>
            <term>
            Windowless controls can initialize the drag-image manager with IDragSourceHelper::InitializeFromBitmap. This method allows an
            application to simply specify the bitmap.
            </term>
            </item>
            </list>
            <para>
            <c>Note</c> The drag-and-drop helper object calls IDataObject::SetData to load private formats—used for cross-process
            support—into the data object. It later retrieves these formats by calling IDataObject::GetData. To support the drag-and-drop
            helper object, the data object's <c>SetData</c> and <c>GetData</c> implementations must be able to accept and return arbitrary
            private formats.
            </para>
            <para>For further discussion of Shell drag-and-drop operations, see Transferring Shell Data Using Drag-and-Drop or the Clipboard.</para>
            <para><c>Note</c> Prior to Windows Vista this interface was declared in Shlobj.h.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IDragSourceHelper.InitializeFromBitmap(Vanara.PInvoke.Shell32.SHDRAGIMAGE@,System.Runtime.InteropServices.ComTypes.IDataObject)">
            <summary>Initializes the drag-image manager for a windowless control.</summary>
            <param name="pshdi">
            <para>Type: <c>LPSHDRAGIMAGE</c></para>
            <para>The SHDRAGIMAGE structure that contains information about the bitmap.</para>
            </param>
            <param name="pDataObject">
            <para>Type: <c>IDataObject*</c></para>
            <para>A pointer to the data object's IDataObject interface.</para>
            </param>
            <remarks>
            Because <c>InitializeFromBitmap</c> always performs the RGB multiplication step in calculating the alpha value, you should
            always pass a bitmap without premultiplied alpha blending. Note that no error will result from passing the method a bitmap
            with premultiplied alpha blending, but this method will multiply it again, doubling the resulting alpha value.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IDragSourceHelper.InitializeFromWindow(Vanara.PInvoke.HWND,System.IntPtr,System.Runtime.InteropServices.ComTypes.IDataObject)">
            <summary>Initializes the drag-image manager for a control with a window.</summary>
            <param name="hwnd">
            <para>Type: <c>HWND</c></para>
            <para>A handle to the window that receives the <c>DI_GETDRAGIMAGE</c> message. This value can be <c>NULL</c>.</para>
            </param>
            <param name="ppt">
            <para>Type: <c>POINT*</c></para>
            <para>
            A pointer to a POINT structure that specifies the location of the cursor within the drag image. The structure should contain
            the offset from the upper-left corner of the drag image to the location of the cursor. This value can be <c>NULL</c>.
            </para>
            </param>
            <param name="pDataObject">
            <para>Type: <c>IDataObject*</c></para>
            <para>A pointer to the data object's IDataObject interface.</para>
            </param>
            <remarks>
            The <c>DI_GETDRAGIMAGE</c> message allows you to source a drag image from a custom control. It is defined in Shlobj.h and
            must be registered with RegisterWindowMessage. When the window specified by hwnd receives the <c>DI_GETDRAGIMAGE</c>
            message, the lParam value holds a pointer to an SHDRAGIMAGE structure. The handler should fill the structure with the drag
            image bitmap information.
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IDragSourceHelper2">
            <summary>
            Exposes a method that adds functionality to IDragSourceHelper. This method sets the characteristics of a drag-and-drop operation
            over an <c>IDragSourceHelper</c> object.
            </summary>
            <remarks>
            <para>This interface also provides the methods of the IDragSourceHelper interface, from which it inherits.</para>
            <para>
            If you want to adjust the behavior of the drag image by calling IDragSourceHelper2::SetFlags, that call should be made before
            you call InitializeFromWindow or InitializeFromBitmap.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IDragSourceHelper2.InitializeFromBitmap(Vanara.PInvoke.Shell32.SHDRAGIMAGE@,System.Runtime.InteropServices.ComTypes.IDataObject)">
            <summary>Initializes the drag-image manager for a windowless control.</summary>
            <param name="pshdi">
            <para>Type: <c>LPSHDRAGIMAGE</c></para>
            <para>The SHDRAGIMAGE structure that contains information about the bitmap.</para>
            </param>
            <param name="pDataObject">
            <para>Type: <c>IDataObject*</c></para>
            <para>A pointer to the data object's IDataObject interface.</para>
            </param>
            <remarks>
            Because <c>InitializeFromBitmap</c> always performs the RGB multiplication step in calculating the alpha value, you should
            always pass a bitmap without premultiplied alpha blending. Note that no error will result from passing the method a bitmap
            with premultiplied alpha blending, but this method will multiply it again, doubling the resulting alpha value.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IDragSourceHelper2.InitializeFromWindow(Vanara.PInvoke.HWND,System.IntPtr,System.Runtime.InteropServices.ComTypes.IDataObject)">
            <summary>Initializes the drag-image manager for a control with a window.</summary>
            <param name="hwnd">
            <para>Type: <c>HWND</c></para>
            <para>A handle to the window that receives the <c>DI_GETDRAGIMAGE</c> message. This value can be <c>NULL</c>.</para>
            </param>
            <param name="ppt">
            <para>Type: <c>POINT*</c></para>
            <para>
            A pointer to a POINT structure that specifies the location of the cursor within the drag image. The structure should contain
            the offset from the upper-left corner of the drag image to the location of the cursor. This value can be <c>NULL</c>.
            </para>
            </param>
            <param name="pDataObject">
            <para>Type: <c>IDataObject*</c></para>
            <para>A pointer to the data object's IDataObject interface.</para>
            </param>
            <remarks>
            The <c>DI_GETDRAGIMAGE</c> message allows you to source a drag image from a custom control. It is defined in Shlobj.h and
            must be registered with RegisterWindowMessage. When the window specified by hwnd receives the <c>DI_GETDRAGIMAGE</c>
            message, the lParam value holds a pointer to an SHDRAGIMAGE structure. The handler should fill the structure with the drag
            image bitmap information.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IDragSourceHelper2.SetFlags(Vanara.PInvoke.Shell32.DSH_FLAGS)">
            <summary>Sets the characteristics of a drag-and-drop operation over an IDragSourceHelper object.</summary>
            <param name="dwFlags">
            <para>Type: <c>DWORD</c></para>
            <para>The flags that determine the characteristics of a drag-and-drop operation over an IDragSourceHelper object.</para>
            <para>DSH_ALLOWDROPDESCRIPTIONTEXT (0x0001)</para>
            <para>
            Allow text specified in DROPDESCRIPTION to be displayed on the drag image. If you pass this flag into the dwFlags parameter
            of <c>IDragSourceHelper2::SetFlags</c>, then the text description is rendered on top of the supplied drag image. If you pass
            a drag image into an IDragSourceHelper object, then by default, the extra text description of the drag-and-drop operation is
            not displayed.
            </para>
            </param>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IDropTargetHelper">
            <summary>Exposes methods that allow drop targets to display a drag image while the image is over the target window.</summary>
            <remarks>
            <para>This interface is exposed by the Shell's drag-image manager. It is not implemented by applications.</para>
            <para>
            This interface is used by drop targets to enable the drag-image manager to display the drag image while the image is over the
            target window. The IDragSourceHelper and <c>IDropTargetHelper</c> interfaces are exposed by the drag-image manager object to
            allow the IDropTarget interface to use custom drag images. To use either of these interfaces, you must create an in-process
            server drag-image manager object by calling CoCreateInstance with a class identifier (CLSID) of CLSID_DragDropHelper. Get
            interface pointers using standard Component Object Model (COM) procedures.
            </para>
            <para>
            Four of the <c>IDropTargetHelper</c> methods correspond to the four IDropTarget methods. When you implement <c>IDropTarget</c>,
            each of its methods should call the corresponding <c>IDropTargetHelper</c> method to pass the information to the drag-image
            manager. The fifth <c>IDropTargetHelper</c> method notifies the drag-image manager to show or hide the drag image. This method
            is used when dragging over a target window in a low color-depth video mode. It allows the target to hide the drag image while it
            is painting the window.
            </para>
            <para>
            <c>Note</c> The drag-and-drop helper object calls IDataObject::SetData to load private formats—used for cross-process
            support—into the data object. It later retrieves these formats by calling IDataObject::GetData. To support the drag-and-drop
            helper object, the data object's <c>SetData</c> and <c>GetData</c> implementations must be able to accept and return arbitrary
            private formats.
            </para>
            <para>For further discussion of Shell drag-and-drop operations, see Transferring Shell Data Using Drag-and-Drop or the Clipboard.</para>
            <para><c>Note</c> Prior to Windows Vista this interface was declared in Shlobj.h.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IDropTargetHelper.DragEnter(Vanara.PInvoke.HWND,System.Runtime.InteropServices.ComTypes.IDataObject,Vanara.PInvoke.POINT@,Vanara.PInvoke.Ole32.DROPEFFECT)">
            <summary>Notifies the drag-image manager that the drop target's IDropTarget::DragEnter method has been called.</summary>
            <param name="hwndTarget">
            <para>Type: <c>HWND</c></para>
            <para>The target's window handle.</para>
            </param>
            <param name="pDataObject">
            <para>Type: <c>IDataObject*</c></para>
            <para>A pointer to the data object's IDataObject interface.</para>
            </param>
            <param name="ppt">
            <para>Type: <c>POINT*</c></para>
            <para>The POINT structure pointer that was received in the IDropTarget::DragEnter method's pt parameter.</para>
            </param>
            <param name="dwEffect">
            <para>Type: <c>DWORD</c></para>
            <para>The value pointed to by the IDropTarget::DragEnter method's pdwEffect parameter.</para>
            </param>
            <remarks>
            This method is called by a drop target when its IDropTarget::DragEnter method is called. It notifies the drag-image manager
            that the drop target has been entered, and provides it with the information needed to display the drag image.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IDropTargetHelper.DragLeave">
            <summary>Notifies the drag-image manager that the drop target's IDropTarget::DragLeave method has been called.</summary>
            <remarks>
            This method is called by a drop target when its IDropTarget::DragLeave method is called. It notifies the drag-image manager
            that the cursor has left the drop target.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IDropTargetHelper.DragOver(Vanara.PInvoke.POINT@,Vanara.PInvoke.Ole32.DROPEFFECT)">
            <summary>Notifies the drag-image manager that the drop target's IDropTarget::DragOver method has been called.</summary>
            <param name="ppt">
            <para>Type: <c>POINT*</c></para>
            <para>The POINT structure pointer that was received in the IDropTarget::DragOver method's pt parameter.</para>
            </param>
            <param name="dwEffect">
            <para>Type: <c>DWORD</c></para>
            <para>The value pointed to by the IDropTarget::DragOver method's pdwEffect parameter.</para>
            </param>
            <remarks>
            This method is called by a drop target when its IDropTarget::DragOver method is called. It notifies the drag-image manager
            that the cursor position has changed and provides it with the information needed to display the drag image.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IDropTargetHelper.Drop(System.Runtime.InteropServices.ComTypes.IDataObject,Vanara.PInvoke.POINT@,Vanara.PInvoke.Ole32.DROPEFFECT)">
            <summary>Notifies the drag-image manager that the drop target's IDropTarget::Drop method has been called.</summary>
            <param name="pDataObject">
            <para>Type: <c>IDataObject*</c></para>
            <para>A pointer to the data object's IDataObject interface.</para>
            </param>
            <param name="ppt">
            <para>Type: <c>POINT*</c></para>
            <para>A POINT structure pointer that was received in the IDropTarget::Drop method's pt parameter.</para>
            </param>
            <param name="dwEffect">
            <para>Type: <c>DWORD</c></para>
            <para>The value pointed to by the IDropTarget::Drop method's pdwEffect parameter.</para>
            </param>
            <remarks>
            This method is called by a drop target when its IDropTarget::Drop method is called. It notifies the drag-image manager that
            the object has been dropped, and provides it with the information needed to display the drag image.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IDropTargetHelper.Show(System.Boolean)">
            <summary>Notifies the drag-image manager to show or hide the drag image.</summary>
            <param name="fShow">
            <para>Type: <c>BOOL</c></para>
            <para>A boolean value that is set to <c>TRUE</c> to show the drag image, and <c>FALSE</c> to hide it.</para>
            </param>
            <remarks>
            This method is used when dragging over a target window in a low color-depth video mode. It allows the target to notify the
            drag-image manager to hide the drag image while it is painting the window. While you are painting a window that is currently
            being dragged over, hide the drag image by calling <c>Show</c> with fShow set to <c>FALSE</c>. Once the window has been
            painted, display the drag image again by calling <c>Show</c> with fShow set to <c>TRUE</c>.
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IEnumerableView">
            <summary>
            Exposes methods that enumerate the contents of a view and receive notification from callback upon enumeration completion. This
            interface enables clients of a view to attempt to share the view's list of folder contents.
            </summary>
            <remarks>
            <para>
            IFolderView (a folder view) supports presentation of the contents of a folder, and exposes the <c>IEnumerableView</c> through
            QueryService on service request SID_EnumerableView. <c>IEnumerableView</c> offers enhanced performance compared to obtaining the
            contents of the folder directly from the folder using IEnumIDList (call IShellFolder::EnumObjects to return this interface).
            Since the view asked for the contents of the folder in order to display those contents, using <c>IEnumerableView</c> enables a
            client to get a copy of the work already done by <c>IFolderView</c>.
            </para>
            <para>
            Typicallly, this enumeration service is compatible with most folders, and is only provided if it is safe to enumerate the
            contents of the view. For example, using this service with a folder containing search results is not supported.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IEnumerableView.SetEnumReadyCallback(Vanara.PInvoke.Shell32.IEnumReadyCallback)">
            <summary>Sets a callback on the view that is notified when the initial view enumeration is complete.</summary>
            <param name="percb">
            <para>Type: <c>IEnumReadyCallback*</c></para>
            <para>A pointer to the IEnumReadyCallback interface.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>Returns a success value if successful, or an error value otherwise.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IEnumerableView.CreateEnumIDListFromContents(Vanara.PInvoke.Shell32.PIDL,Vanara.PInvoke.Shell32.SHCONTF,Vanara.PInvoke.Shell32.IEnumIDList@)">
            <summary>Creates an enumerator of ID lists from the contents of the view.</summary>
            <param name="pidlFolder">
            <para>Type: <c>PCIDLIST_ABSOLUTE</c></para>
            <para>A PIDL that is relative to the Desktop.</para>
            </param>
            <param name="dwEnumFlags">
            <para>Type: <c>DWORD</c></para>
            <para>Specifies enumeration flags. See the SHCONTF enumerated type.</para>
            </param>
            <param name="ppEnumIDList">
            <para>Type: <c>IEnumIDList**</c></para>
            <para>When this method returns, contains an IEnumIDList interface pointer.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>Returns a success value if successful, or an error value otherwise.</para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IEnumReadyCallback">
            <summary>
            Exposes methods that enable the view to notify the implementer when the enumeration has completed. The view calls this method to
            tell the implementer that the enumeration can be retrieved via IEnumerableView::CreateEnumIDListFromContents. The callback
            allows the implementer to share the views enumeration.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IEnumReadyCallback.EnumReady">
            <summary>
            Notifies the implementer that the view's item enumeration has completed. This callback interface is provided to the view via SetEnumReadyCallback
            </summary>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IEnumObjects">
            <summary>Exposes methods to enumerate unknown objects.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IEnumObjects.Next(System.UInt32,System.Guid@,System.Object[],System.UInt32@)">
            <summary>Gets the next specified number and type of objects.</summary>
            <param name="celt">
            <para>Type: <c>ULONG</c></para>
            <para>The number of objects to retrieve.</para>
            </param>
            <param name="riid">
            <para>Type: <c>REFIID</c></para>
            <para>Reference to the desired interface ID.</para>
            </param>
            <param name="rgelt">
            <para>Type: <c>void**</c></para>
            <para>When this method returns, contains the interface pointer requested in riid.</para>
            </param>
            <param name="pceltFetched">
            <para>Type: <c>ULONG*</c></para>
            <para>
            Pointer to a <c>ULONG</c> value that, when this method returns, states the actual number of objects retrieved. This value
            can be <c>NULL</c>.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>
            Returns S_OK if the method successfully retrieved the requested objects. This method only returns S_OK if the full count of
            requested items are successfully retrieved.
            </para>
            <para>S_FALSE indicates that more items were requested than remained in the enumeration.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IEnumObjects.Skip(System.UInt32)">
            <summary>Skips a specified number of objects.</summary>
            <param name="celt">
            <para>Type: <c>ULONG</c></para>
            <para>The number of objects to skip.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>Enumeration index is advanced by the number of items skipped.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IEnumObjects.Reset">
            <summary>Resets the enumeration index to 0.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IEnumObjects.Clone">
            <summary>
            <para>Not implemented.</para>
            <para>Not implemented.</para>
            </summary>
            <returns>
            <para>Type: <c>IEnumObjects**</c></para>
            <para>Not used.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.Enumerate``1(Vanara.PInvoke.Shell32.IEnumObjects)">
            <summary>Enumerates the objects exposed by a <see cref="T:Vanara.PInvoke.Shell32.IEnumObjects"/> instance.</summary>
            <typeparam name="TInterface">The type of the interface to enumerate.</typeparam>
            <param name="obj">The <see cref="T:Vanara.PInvoke.Shell32.IEnumObjects"/> instance.</param>
            <returns>A sequence of <typeparamref name="TInterface"/> instances.</returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.AHE_TYPE">
            <summary>Indicates the current host environment.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.AHE_TYPE.AHE_DESKTOP">
            <summary>Desktop.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.AHE_TYPE.AHE_IMMERSIVE">
            <summary>Immersive mode.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.EC_HOST_UI_MODE">
            <summary>The UI mode of the host component from which the application was invoked.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.EC_HOST_UI_MODE.ECHUIM_DESKTOP">
            <summary>The application is running in the desktop environment.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.EC_HOST_UI_MODE.ECHUIM_IMMERSIVE">
            <summary>The application is running in the immersive environment.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.EC_HOST_UI_MODE.ECHUIM_SYSTEM_LAUNCHER">
            <summary>The application is running in the system launcher environment.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IExecuteCommand">
            <summary>
            Exposes methods that set a given state or parameter related to the command verb, as well as a method to invoke that verb.
            </summary>
            <remarks>
            <para>When to Implement</para>
            <para>
            Implement this interface when you choose it as your method to invoke the verb to perform an action on selected items. The items
            are passed as a Shell item array through IObjectWithSelection::SetSelection, so the object must also implement IObjectWithSelection.
            </para>
            <para>When to Use</para>
            <para>
            Do not call the methods of <c>IExecuteCommand</c> directly. Windows Explorer calls your <c>IExecuteCommand</c> methods when the
            user wants to perform an action on the items.
            </para>
            <para>
            Note that, apart from Execute, the methods of this interface pass system information to the handler. The system itself calls
            these methods, setting the parameters appropriately based on system settings and conditions.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IExecuteCommand.SetKeyState(Vanara.PInvoke.MouseButtonState)">
            <summary>Sets a value based on the current state of the keys CTRL and SHIFT.</summary>
            <param name="grfKeyState">
            <para>Type: <c>DWORD</c></para>
            <para>One or both of the following flags to indicate whether the key is pressed.</para>
            <para>MK_CONTROL</para>
            <para>The CTRL key is pressed.</para>
            <para>MK_SHIFT</para>
            <para>The SHIFT key is pressed.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IExecuteCommand.SetParameters(System.String)">
            <summary>Provides parameter values for the verb.</summary>
            <param name="pszParameters">
            <para>Type: <c>LPCWSTR</c></para>
            <para>
            Pointer to a string that contains parameter values. The format and contents of this string is determined by the verb that is
            to be invoked.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IExecuteCommand.SetPosition(Vanara.PInvoke.POINT)">
            <summary>Sets the coordinates of a point used for display.</summary>
            <param name="pt">
            <para>Type: <c>POINT</c></para>
            <para>
            The screen coordinates at which the user right-clicked to invoke the shortcut menu from which a command was chosen.
            Applications can use this information to present any UI. This is particularly useful in a multi-monitor situation. The
            default position is the center of the default monitor.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IExecuteCommand.SetShowWindow(Vanara.PInvoke.ShowWindowCommand)">
            <summary>Sets the specified window's visual state.</summary>
            <param name="nShow">
            <para>Type: <c>int</c></para>
            <para>One of the following flags to indicate how the window is to be shown.</para>
            <para>SW_HIDE</para>
            <para>Hides the window and activates another window.</para>
            <para>SW_MAXIMIZE</para>
            <para>Maximizes the specified window.</para>
            <para>SW_MINIMIZE</para>
            <para>Minimizes the specified window and activates the next top-level window in the z-order.</para>
            <para>SW_RESTORE</para>
            <para>
            Activates and displays the window. If the window is minimized or maximized, Windows restores it to its original size and
            position. An application should specify this flag when restoring a minimized window.
            </para>
            <para>SW_SHOW</para>
            <para>Activates the window and displays it in its current size and position.</para>
            <para>SW_SHOWDEFAULT</para>
            <para>
            Sets the show state based on the information specified in the STARTUPINFO structure passed to the CreateProcess function
            that started the application. An application should call ShowWindow with this flag to set the initial visual state of its
            main window.
            </para>
            <para>SW_SHOWMAXIMIZED</para>
            <para>Activates the window and displays it as a maximized window.</para>
            <para>SW_SHOWMINIMIZED</para>
            <para>Activates the window and displays it as a minimized window.</para>
            <para>SW_SHOWMINNOACTIVE</para>
            <para>Displays the window as a minimized window. The active window remains active.</para>
            <para>SW_SHOWNA</para>
            <para>Displays the window in its current state. The active window remains active.</para>
            <para>SW_SHOWNOACTIVATE</para>
            <para>Displays a window in its most recent size and position. The active window remains active.</para>
            <para>SW_SHOWNORMAL</para>
            <para>
            Default state. Activates and displays a window. If the window is minimized or maximized, Windows restores it to its original
            size and position. An application should specify this flag when it displays the window for the first time.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IExecuteCommand.SetNoShowUI(System.Boolean)">
            <summary>Indicates whether any UI associated with the selected Shell item should be displayed.</summary>
            <param name="fNoShowUI">
            <para>Type: <c>BOOL</c></para>
            <para><c>TRUE</c> to block display of any associated UI; <c>FALSE</c> to display the UI. <c>FALSE</c> is the default value.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IExecuteCommand.SetDirectory(System.String)">
            <summary>Sets a new working directory.</summary>
            <param name="pszDirectory">
            <para>Type: <c>LPCWSTR</c></para>
            <para>
            Pointer to a null-terminated string with the fully qualified path of the new working directory. If this value is
            <c>NULL</c>, the current working directory is used.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IExecuteCommand.Execute">
            <summary>Invoke the verb on the selected items. Call this method after you have called the other methods of this interface.</summary>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IExecuteCommandHost">
            <summary>
            Provides a method that enables an IExplorerCommand-based Shell verb handler to query the UI mode of the host component from
            which the application was invoked.
            </summary>
            <remarks>
            <para>When to implement</para>
            <para>
            A software component (either an OS component or an application) taat can launch a dual-mode application such as a browser should
            implement this interface. The interface should be implemented on an object that can be reached through the site chain provided
            to ShellExecuteEx or the context menu and retrieved through the IServiceProvider::QueryService method.
            </para>
            <para>When to use</para>
            <para>
            Typically, an application that is capable of launching as both a desktop application and a Windows Store app app will use this
            interface to query which mode the host is currently in. The application can then launch in the UI mode that is compatible with
            the host.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IExecuteCommandHost.GetUIMode(Vanara.PInvoke.Shell32.EC_HOST_UI_MODE@)">
            <summary>
            Enables an IExplorerCommand-based Shell verb handler to query the UI mode of the host component from which the application
            was invoked.
            </summary>
            <param name="pUIMode">
            <para>Type: <c>EC_HOST_UI_MODE*</c></para>
            <para>ECHUIM_DESKTOP (0)</para>
            <para>The application is running in the desktop environment.</para>
            <para>ECHUIM_IMMERSIVE (1)</para>
            <para>The application is running in the immersive environment.</para>
            <para>ECHUIM_SYSTEM_LAUNCHER (2)</para>
            <para>The application is running in the system launcher environment.</para>
            </param>
            <returns>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IExecuteCommandApplicationHostEnvironment">
            <summary>Provides a single method that enables an application to determine whether its host is in desktop or immersive mode.</summary>
            <remarks>
            <para>When to implement</para>
            <para>An application must implement this interface together with the DelegateExecute handler (IExecuteCommand).</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IExecuteCommandApplicationHostEnvironment.GetValue(Vanara.PInvoke.Shell32.AHE_TYPE@)">
            <summary>Determines whether the current application host environment is in the desktop or immersive mode.</summary>
            <param name="pahe">
            <para>
            A pointer to a <c>AHE_TYPE</c> value that, when this method returns successfully, receives one of the following values to
            indicate the current host environment.
            </para>
            <para>AHE_DESKTOP (0)</para>
            <para>Desktop.</para>
            <para>AHE_IMMERSIVE (1)</para>
            <para>Immersive mode.</para>
            </param>
            <returns>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IInitializeCommand">
            <summary>
            Exposes a single method used to initialize objects that implement IExplorerCommandState, IExecuteCommand or IDropTarget with the
            application-specified command name and its registered properties.
            </summary>
            <remarks>
            <para>When to Implement</para>
            <para>Implement <c>IInitializeCommand</c> in the following situations.</para>
            <list type="bullet">
            <item>
            <term>
            Implement this interface to differentiate between related commands that share implementations of IExplorerCommandState,
            IDropTarget or IExecuteCommand. Differentiation is made through the command name passed in IInitializeCommand::Initialize.
            Commands can also use <c>Initialize</c> to pass a specific property bag for the command, using properties the command has placed
            in the registry.
            </term>
            </item>
            </list>
            <para>When to Use</para>
            <para>
            Do not call the method of <c>IInitializeCommand</c> directly. Windows Explorer calls this method when a verb object that
            implements this interface is invoked.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IInitializeCommand.Initialize(System.String,Vanara.PInvoke.OleAut32.IPropertyBag)">
            <summary>
            Initialize objects that share an implementation of IExplorerCommandState, IExecuteCommand or IDropTarget with the
            application-specified command name and its registered properties.
            </summary>
            <param name="pszCommandName">
            <para>Type: <c>LPCWSTR</c></para>
            <para>
            Pointer to a string that contains the command name (the name of the command key as found in the registry). For instance, if
            the command is registered under <c>...</c>&lt;b&gt;shell&lt;b&gt;MyCommand, pszCommandName points to "MyCommand".
            </para>
            </param>
            <param name="ppb">
            <para>Type: <c>IPropertyBag*</c></para>
            <para>
            Pointer to an IPropertyBag instance that can be used to read the properties related to the command in the registry. For
            example, a command may registry a string property under its <c>...</c>&lt;b&gt;shell&lt;b&gt;MyCommand subkey.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.AppShellVerbHandler">
            <summary>CLSID_AppShellVerbHandler</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.ExecuteFolder">
            <summary>CoClass for IExecuteCommand</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.ExecuteUnknown">
            <summary>CLSID_ExecuteUnknown</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.EXPLORER_BROWSER_FILL_FLAGS">
            <summary>These flags are used with IExplorerBrowser::FillFromObject.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.EXPLORER_BROWSER_FILL_FLAGS.EBF_NONE">
            <summary>No flags.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.EXPLORER_BROWSER_FILL_FLAGS.EBF_SELECTFROMDATAOBJECT">
            <summary>
            Causes IExplorerBrowser::FillFromObject to first populate the results folder with the contents of the parent folders of the
            items in the data object, and then select only the items that are in the data object.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.EXPLORER_BROWSER_FILL_FLAGS.EBF_NODROPTARGET">
            <summary>
            Do not allow dropping on the folder. In other words, do not register a drop target for the view. Applications can then
            register their own drop targets.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.EXPLORER_BROWSER_OPTIONS">
            <summary>These flags are used with IExplorerBrowser::GetOptions and IExplorerBrowser::SetOptions.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.EXPLORER_BROWSER_OPTIONS.EBO_NONE">
            <summary>No options.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.EXPLORER_BROWSER_OPTIONS.EBO_NAVIGATEONCE">
            <summary>Do not navigate further than the initial navigation.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.EXPLORER_BROWSER_OPTIONS.EBO_SHOWFRAMES">
            <summary>
            Use the following standard panes: Commands Module pane, Navigation pane, Details pane, and Preview pane. An implementer of
            IExplorerPaneVisibility can modify the components of the Commands Module that are shown. For more information see,
            IExplorerPaneVisibility::GetPaneState. If EBO_SHOWFRAMES is not set, Explorer browser uses a single view object.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.EXPLORER_BROWSER_OPTIONS.EBO_ALWAYSNAVIGATE">
            <summary>Always navigate, even if you are attempting to navigate to the current folder.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.EXPLORER_BROWSER_OPTIONS.EBO_NOTRAVELLOG">
            <summary>Do not update the travel log.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.EXPLORER_BROWSER_OPTIONS.EBO_NOWRAPPERWINDOW">
            <summary>
            Do not use a wrapper window. This flag is used with legacy clients that need the browser parented directly on themselves.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.EXPLORER_BROWSER_OPTIONS.EBO_HTMLSHAREPOINTVIEW">
            <summary>Show WebView for SharePoint sites.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.EXPLORER_BROWSER_OPTIONS.EBO_NOBORDER">
            <summary>Introduced in Windows Vista. Do not draw a border around the browser window.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.EXPLORER_BROWSER_OPTIONS.EBO_NOPERSISTVIEWSTATE">
            <summary>Introduced in Windows Vista. Do not persist the view state.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IExplorerBrowser">
            <summary>
            <para>
            <c>IExplorerBrowser</c> is a browser object that can be either navigated or that can host a view of a data object. As a
            full-featured browser object, it also supports an automatic travel log.
            </para>
            <para>
            The Shell provides a default implementation of <c>IExplorerBrowser</c> as CLSID_ExplorerBrowser. Typically, a developer does not
            need to provide a custom implementation of this interface.
            </para>
            <para>
            The Windows Software Development Kit (SDK) provides full samples that demonstrate the use of and interaction with
            <c>IExplorerBrowser</c>. Download the Explorer Browser Search Sample and the Explorer Browser Custom Contents Sample.
            </para>
            </summary>
            <remarks>
            <para>
            For example code that shows typical use of <c>IExplorerBrowser</c> and its methods, see the Explorer Browser Custom Contents and
            Explorer Browser Custom Contents samples.
            </para>
            <para>
            After calling this object's Initialize method, its Destroy method must be called to free any windowed resources that were
            generated in the call to <c>Initialize</c>.
            </para>
            <para>
            The object that hosts the ExplorerBrowser object should derive from IServiceProvider and implement QueryService to respond to any
            queries for service. For example, the number of panes shown by the browser can be controlled by implementing
            IExplorerPaneVisibility and responding to any SID_ExplorerPaneVisibility service requests.
            </para>
            <para>
            Frames are disabled by default. To enable frames and get the default set of panes, set the EBO_SHOWFRAMES flag using the
            IExplorerBrowser::SetOptions method. The default panes, listed as IExplorerPaneVisibility constants, are these:
            </para>
            <list type="bullet">
            <item>EP_NavPane</item>
            <item>EP_Commands</item>
            <item>EP_Commands_Organize</item>
            <item>EP_Commands_View</item>
            <item>EP_DetailsPane</item>
            <item>EP_PreviewPane</item>
            <item>EP_QueryPane</item>
            <item>EP_AdvQueryPane</item>
            <item>EP_StatusBar</item>
            <item>EP_Ribbon</item>
            </list>
            <para>See IExplorerPaneVisibility::GetPaneState for more information.</para>
            <para>
            Clients of the ExplorerBrowser object can implement the ICommDlgBrowser, ICommDlgBrowser2, or ICommDlgBrowser3 interfaces and
            respond to an SID_SExplorerBrowserFrame service request in their QueryService implementations that are called when any
            <c>ICommDlgBrowser</c> interfaces are called on the browser (usually called from the view as a result of user actions). Note that
            the client does not receive a call to ICommDlgBrowser::IncludeObject if a folder filter has been set on the browser by a call to IFolderFilterSite::SetFilter.
            </para>
            <para>
            To remain compatible with some older applications, the default Shell view (DefView) performs filtering operations (for example,
            searching operations executed by a search folder) on the UI thread. For new applications, this is typically not desired; the
            search should execute on a background thread. To stop the UI thread from filtering and instead run filtering on a background
            thread, provide ICommDlgBrowser2 through the SID_SExplorerBrowserFrame service request. When ICommDlgBrowser2::GetViewFlags is
            called, it should return CDB2GVF_NOINCLUDEITEM. For example, if you navigate to a search folder in ExplorerBrowser and you do not
            return CDB2GVF_NOINCLUDEITEM, the view can stop responding until the entire search is complete.
            </para>
            <para>
            The Shell architecture has three main components: the browser, the views, and the data sources (for example, IShellFolder). The
            ExplorerBrowser object maintains the current location and navigation to other locations throughout the Shell namespace. It also
            keeps a travel log (forward and back history). The browser is notified when things happen in the view; for example, when the user
            double-clicks a folder. In response, the browser navigates to that location. The data sources are the objects that supply the
            items and folders in the namespace. They also have information about the location, such as the properties of the items and what
            to add to the context menu when the view requests it. Additionally, the data sources know what view should be created to
            represent their items at a location. In almost all instances, the folders create the Shell's default view (DefView). Therefore,
            as the browser navigates, it receives an IShellFolder object for the new location and asks it what view to create. The browser
            then creates that view and makes it visible, while hiding and then destroying the view that was showing the previous location.
            The view is responsible for communicating with <c>IShellFolder</c> for the current location and requesting it to enumerate the
            items, which allows the view to show these items to the user. As the user interacts with the items, the view communicates with
            the <c>IShellFolder</c> to get any additional information it needs, such as specific properties of the items or the context menu
            entries for the item.
            </para>
            <para>
            If an application uses the default implementation provided by CLSID_ExplorerBrowser, inserting it into the window of an
            application and then browsing to a location, ExplorerBrowser creates the proper IShellView as specified by the location that it
            is browsing to. The application can then ask ExplorerBrowser to give it an interface on the current view, allowing the
            application to manipulate the view directly if required. The default implementation of the Windows Explorer view object, created
            by SHCreateShellFolderViewEx, supports the interface <c>IShellView</c>. You may verify that you have the default Shell folder
            view object by calling IExplorerBrowser::GetCurrentView and then calling QueryInterface on the object returned using the
            interface ID IID_CDefView.
            </para>
            <para>
            <c>Windows 7 and later</c>. CExplorerBrowser can support in-place navigation by using IServiceProvider::QueryService with the
            Service ID SID_SlnPlaceBrowser. When using SID_SInPlaceBrowser, the CExplorerBrowser state cannot be set to EBO_NAVIGATEONCE.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IExplorerBrowser.Initialize(System.IntPtr,Vanara.PInvoke.RECT@,Vanara.PInvoke.Shell32.PFOLDERSETTINGS)">
            <summary>Prepares the browser to be navigated.</summary>
            <param name="hwndParent">A handle to the owner window or control.</param>
            <param name="prc">
            A pointer to a RECT that contains the coordinates of the bounding rectangle that the browser will occupy. The coordinates are
            relative to hwndParent.
            </param>
            <param name="pfs">A pointer to a FOLDERSETTINGS structure that determines how the folder will be displayed in the view.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IExplorerBrowser.Destroy">
            <summary>Destroys the browser.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IExplorerBrowser.SetRect(Vanara.PInvoke.HDWP@,Vanara.PInvoke.RECT)">
            <summary>Sets the size and position of the view windows created by the browser.</summary>
            <param name="phdwp">A pointer to a DeferWindowPos handle. This parameter can be NULL.</param>
            <param name="rcBrowser">The coordinates that the browser will occupy.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IExplorerBrowser.SetPropertyBag(System.String)">
            <summary>Sets the name of the property bag.</summary>
            <param name="pszPropertyBag">
            A pointer to a constant, null-terminated, Unicode string that contains the name of the property bag. View state information
            that is specific to the application of the client is stored (persisted) using this name.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IExplorerBrowser.SetEmptyText(System.String)">
            <summary>Sets the default empty text.</summary>
            <param name="pszEmptyText">A pointer to a constant, null-terminated, Unicode string that contains the empty text.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IExplorerBrowser.SetFolderSettings(Vanara.PInvoke.Shell32.FOLDERSETTINGS@)">
            <summary>Sets the folder settings for the current view.</summary>
            <param name="pfs">A pointer to a FOLDERSETTINGS structure that contains the folder settings to be applied.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IExplorerBrowser.Advise(Vanara.PInvoke.Shell32.IExplorerBrowserEvents,System.UInt32@)">
            <summary>Initiates a connection with IExplorerBrowser for event callbacks.</summary>
            <param name="psbe">A pointer to the IExplorerBrowserEvents interface of the object to be advised of IExplorerBrowser events.</param>
            <param name="pdwCookie">
            When this method returns, contains a token that uniquely identifies the event listener. This allows several event listeners
            to be subscribed at a time.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IExplorerBrowser.Unadvise(System.UInt32)">
            <summary>Terminates an advisory connection.</summary>
            <param name="dwCookie">
            A connection token previously returned from IExplorerBrowser::Advise. Identifies the connection to be terminated.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IExplorerBrowser.SetOptions(Vanara.PInvoke.Shell32.EXPLORER_BROWSER_OPTIONS)">
            <summary>Sets the current browser options.</summary>
            <param name="dwFlag">One or more EXPLORER_BROWSER_OPTIONS flags to be set.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IExplorerBrowser.GetOptions(Vanara.PInvoke.Shell32.EXPLORER_BROWSER_OPTIONS@)">
            <summary>Gets the current browser options.</summary>
            <param name="pdwFlag">When this method returns, contains the current EXPLORER_BROWSER_OPTIONS for the browser.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IExplorerBrowser.BrowseToIDList(Vanara.PInvoke.Shell32.PIDL,Vanara.PInvoke.Shell32.SBSP)">
            <summary>Browses to a pointer to an item identifier list (PIDL)</summary>
            <param name="pidl">
            A pointer to a const ITEMIDLIST (item identifier list) that specifies an object's location as the destination to navigate to.
            This parameter can be NULL. For more information, see Remarks.
            </param>
            <param name="uFlags">A flag that specifies the category of the pidl. This affects how navigation is accomplished.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IExplorerBrowser.BrowseToObject(System.Object,Vanara.PInvoke.Shell32.SBSP)">
            <summary>Browses to an object.</summary>
            <param name="punk">A pointer to an object to browse to. If the object cannot be browsed, an error value is returned.</param>
            <param name="uFlags">A flag that specifies the category of the pidl. This affects how navigation is accomplished.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IExplorerBrowser.FillFromObject(System.Object,Vanara.PInvoke.Shell32.EXPLORER_BROWSER_FILL_FLAGS)">
            <summary>Creates a results folder and fills it with items.</summary>
            <param name="punk">
            An interface pointer on the source object that will fill the IResultsFolder. This can be an IDataObject or any object that
            can be used with INamespaceWalk.
            </param>
            <param name="dwFlags">One of the EXPLORER_BROWSER_FILL_FLAGS values.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IExplorerBrowser.RemoveAll">
            <summary>Removes all items from the results folder.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IExplorerBrowser.GetCurrentView(System.Guid@)">
            <summary>Gets an interface for the current view of the browser.</summary>
            <param name="riid">A reference to the desired interface ID.</param>
            <returns>
            When this method returns, contains the interface pointer requested in <paramref name="riid"/>. This will typically be
            IShellView, IShellView2, IFolderView, or a related interface.
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IExplorerBrowserEvents">
            <summary>Exposes methods for notification of Explorer browser navigation and view creation events.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IExplorerBrowserEvents.OnNavigationPending(System.IntPtr)">
            <summary>Notifies clients of a pending Explorer browser navigation to a Shell folder.</summary>
            <param name="pidlFolder">
            <para>Type: <c>PCIDLIST_ABSOLUTE</c></para>
            <para>A PIDL that specifies the folder.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            <para>
            Explorer browser calls this method before it navigates to a folder, that is, before calling
            IExplorerBrowserEvents::OnNavigationFailed or IExplorerBrowserEvents::OnNavigationComplete.
            </para>
            <para>Returning any failure code from this method, including E_NOTIMPL, will cancel the navigation.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IExplorerBrowserEvents.OnViewCreated(Vanara.PInvoke.Shell32.IShellView)">
            <summary>Notifies clients that the view of the Explorer browser has been created and can be modified.</summary>
            <param name="psv">
            <para>Type: <c>IShellView*</c></para>
            <para>A pointer to an IShellView.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            An Explorer browser calls this method to enable the client to perform any modifications to the Explorer browser view before
            it is shown; for example, to set view modes or folder flags.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IExplorerBrowserEvents.OnNavigationComplete(System.IntPtr)">
            <summary>Notifies clients that the Explorer browser has successfully navigated to a Shell folder.</summary>
            <param name="pidlFolder">
            <para>Type: <c>PCIDLIST_ABSOLUTE</c></para>
            <para>A PIDL that specifies the folder.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            <para>This method is called after method IExplorerBrowserEvents::OnViewCreated, assuming a successful view creation.</para>
            <para>
            After a navigation and view creation, either <c>IExplorerBrowserEvents::OnNavigationComplete</c> or
            IExplorerBrowserEvents::OnNavigationFailed is called depending on whether the destination could be navigated to. For example,
            a failure to navigate includes a destination that is not reached either because there is no route to the path or the user has canceled.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IExplorerBrowserEvents.OnNavigationFailed(System.IntPtr)">
            <summary>Notifies clients that the Explorer browser has failed to navigate to a Shell folder.</summary>
            <param name="pidlFolder">
            <para>Type: <c>PCIDLIST_ABSOLUTE</c></para>
            <para>A PIDL that specifies the folder.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            <para>This method is called after method IExplorerBrowserEvents::OnViewCreated, assuming a successful view creation.</para>
            <para>
            After a navigation and view creation, either IExplorerBrowserEvents::OnNavigationComplete or
            <c>IExplorerBrowserEvents::OnNavigationFailed</c> is called, depending on whether the destination could be navigated to. For
            example, a failure to navigate includes a destination that is not reached either because there is no route to the path or the
            user has canceled.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.GetCurrentView``1(Vanara.PInvoke.Shell32.IExplorerBrowser)">
            <summary>Extension method to simplify using the <see cref="M:Vanara.PInvoke.Shell32.IExplorerBrowser.GetCurrentView(System.Guid@)"/> method.</summary>
            <typeparam name="T">Type of the interface to get.</typeparam>
            <param name="eb">An <see cref="T:Vanara.PInvoke.Shell32.IExplorerBrowser"/> instance.</param>
            <returns>Receives the interface pointer requested in <typeparamref name="T"/>.</returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.ExplorerBrowser">
            <summary>The ExplorerBrowser class is the base CoClass for all I ExplorerBrowser interfaces.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.EXPCMDFLAGS">
            <summary>Windows Explorer command states.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.EXPCMDFLAGS.ECF_DEFAULT">
            <summary>Windows 7 and later. No command flags are set.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.EXPCMDFLAGS.ECF_HASSUBCOMMANDS">
            <summary>The command has subcommands.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.EXPCMDFLAGS.ECF_HASSPLITBUTTON">
            <summary>A split button is displayed.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.EXPCMDFLAGS.ECF_HIDELABEL">
            <summary>The label is hidden.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.EXPCMDFLAGS.ECF_ISSEPARATOR">
            <summary>The command is a separator.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.EXPCMDFLAGS.ECF_HASLUASHIELD">
            <summary>A UAC shield is displayed.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.EXPCMDFLAGS.ECF_SEPARATORBEFORE">
            <summary>Introduced in Windows 7. The command is located in the menu immediately below a separator.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.EXPCMDFLAGS.ECF_SEPARATORAFTER">
            <summary>Introduced in Windows 7. The command is located in the menu immediately above a separator.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.EXPCMDFLAGS.ECF_ISDROPDOWN">
            <summary>Introduced in Windows 7. Selecting the command opens a drop-down submenu (for example, Include in library).</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.EXPCMDFLAGS.ECF_TOGGLEABLE">
            <summary>Introduced in Windows 8.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.EXPCMDFLAGS.ECF_AUTOMENUICONS">
            <summary>Introduced in Windows 8.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.EXPCMDSTATE">
            <summary><c>EXPCMDSTATE</c> values represent the command state of a Shell item.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.EXPCMDSTATE.ECS_ENABLED">
            <summary>The item is enabled.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.EXPCMDSTATE.ECS_DISABLED">
            <summary>The item is unavailable. It might be displayed to the user as a dimmed, inaccessible item.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.EXPCMDSTATE.ECS_HIDDEN">
            <summary>The item is hidden.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.EXPCMDSTATE.ECS_CHECKBOX">
            <summary>The item is displayed with a check box and that check box is not checked.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.EXPCMDSTATE.ECS_CHECKED">
            <summary>The item is displayed with a check box and that check box is checked. ECS_CHECKED is always returned with ECS_CHECKBOX.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.EXPCMDSTATE.ECS_RADIOCHECK">
            <summary>
            Windows 7 and later. The item is one of a group of mutually exclusive options selected through a radio button.
            ECS_RADIOCHECK does not imply that the item is the selected option, though it might be.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IEnumExplorerCommand">
            <summary>
            Provided by an IExplorerCommandProvider. This interface contains the enumeration of commands to be put into the command bar.
            </summary>
            <remarks>
            None of the methods of this interface should talk to network resources. They are called on the UI thread; communicating with
            network resources would cause the UI to stop responding.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IEnumExplorerCommand.Next(System.UInt32,Vanara.PInvoke.Shell32.IExplorerCommand[],System.UInt32@)">
            <summary>Retrieves a specified number of elements that directly follow the current element.</summary>
            <param name="celt">
            <para>Type: <c>ULONG</c></para>
            <para>Specifies the number of elements to fetch.</para>
            </param>
            <param name="pUICommand">
            <para>Type: <c>IExplorerCommand**</c></para>
            <para>
            Address of an IExplorerCommand interface pointer array of celt elements that, when this method returns, is an array of
            pointers to the retrieved elements.
            </para>
            </param>
            <param name="pceltFetched">
            <para>Type: <c>ULONG*</c></para>
            <para>
            When this method returns, contains a pointer to the number of elements actually retrieved. This pointer can be <c>NULL</c>
            if this information is not needed.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IEnumExplorerCommand.Skip(System.UInt32)">
            <summary>Not currently implemented.</summary>
            <param name="celt">
            <para>Type: <c>ULONG</c></para>
            <para>Currently unused.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IEnumExplorerCommand.Reset">
            <summary>Resets the enumeration to 0.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IEnumExplorerCommand.Clone">
            <summary>Not currently implemented.</summary>
            <returns>
            <para>Type: <c>IEnumExplorerCommand*</c></para>
            <para>Currently unused.</para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IExplorerCommand">
            <summary>Exposes methods that get the command appearance, enumerate subcommands, or invoke the command.</summary>
            <remarks>
            None of the methods of this interface should communicate with network resources. These methods are called on the UI thread, so
            communication with network resources could cause the UI to stop responding.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IExplorerCommand.GetTitle(Vanara.PInvoke.Shell32.IShellItemArray,System.String@)">
            <summary>Gets the title text of the button or menu item that launches a specified Windows Explorer command item.</summary>
            <param name="psiItemArray">
            <para>Type: <c>IShellItemArray*</c></para>
            <para>A pointer to an IShellItemArray.</para>
            </param>
            <param name="ppszName">
            <para>Type: <c>LPWSTR*</c></para>
            <para>Pointer to a buffer that, when this method returns successfully, receives the title string.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IExplorerCommand.GetIcon(Vanara.PInvoke.Shell32.IShellItemArray,System.String@)">
            <summary>Gets an icon resource string of the icon associated with the specified Windows Explorer command item.</summary>
            <param name="psiItemArray">
            <para>Type: <c>IShellItemArray*</c></para>
            <para>A pointer to an IShellItemArray.</para>
            </param>
            <param name="ppszIcon">
            <para>Type: <c>LPWSTR*</c></para>
            <para>
            Pointer to a buffer that, when this method returns successfully, receives the resource string that identifies the icon source.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>The retrieved icon resource string is in the standard format, for instance "shell32.dll,-249".</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IExplorerCommand.GetToolTip(Vanara.PInvoke.Shell32.IShellItemArray,System.String@)">
            <summary>Gets the tooltip string associated with a specified Windows Explorer command item.</summary>
            <param name="psiItemArray">
            <para>Type: <c>IShellItemArray*</c></para>
            <para>A pointer to an IShellItemArray.</para>
            </param>
            <param name="ppszInfotip">
            <para>Type: <c>LPWSTR*</c></para>
            <para>Pointer to a buffer that, when this method returns successfully, receives the tooltip string.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IExplorerCommand.GetCanonicalName(System.Guid@)">
            <summary>Gets the GUID of an Windows Explorer command.</summary>
            <param name="pguidCommandName">
            <para>Type: <c>GUID*</c></para>
            <para>
            A pointer to a value that, when this method returns successfully, receives the command's GUID, under which it is declared in
            the registry.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            This method is somewhat misnamed, given that it retrieves a GUID. To retrieve the command's canonical name, you must take
            the additional step to pull it from the command's subkey. The GUID is the name of the subkey. where that information is stored.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IExplorerCommand.GetState(Vanara.PInvoke.Shell32.IShellItemArray,System.Boolean,Vanara.PInvoke.Shell32.EXPCMDSTATE@)">
            <summary>Gets state information associated with a specified Windows Explorer command item.</summary>
            <param name="psiItemArray">
            <para>Type: <c>IShellItemArray*</c></para>
            <para>A pointer to an IShellItemArray.</para>
            </param>
            <param name="fOkToBeSlow">
            <para>Type: <c>BOOL</c></para>
            <para>
            <c>FALSE</c> if a verb object should not perform any memory intensive computations that could cause the UI thread to stop
            responding. The verb object should return E_PENDING in that case. If <c>TRUE</c>, those computations can be completed.
            </para>
            </param>
            <param name="pCmdState">
            <para>Type: <c>EXPCMDSTATE*</c></para>
            <para>
            A pointer to a value that, when this method returns successfully, receives one or more Windows Explorer command states
            indicated by the EXPCMDSTATE constants.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IExplorerCommand.Invoke(Vanara.PInvoke.Shell32.IShellItemArray,System.Runtime.InteropServices.ComTypes.IBindCtx)">
            <summary>Invokes a Windows Explorer command.</summary>
            <param name="psiItemArray">
            <para>Type: <c>IShellItemArray*</c></para>
            <para>A pointer to an IShellItemArray.</para>
            </param>
            <param name="pbc">
            <para>Type: <c>IBindCtx*</c></para>
            <para>
            A pointer to an IBindCtx interface, which provides access to a bind context. This value can be <c>NULL</c> if no bind
            context is needed.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IExplorerCommand.GetFlags(Vanara.PInvoke.Shell32.EXPCMDFLAGS@)">
            <summary>Gets the flags associated with a Windows Explorer command.</summary>
            <param name="pFlags">
            <para>Type: <c>EXPCMDFLAGS*</c></para>
            <para>When this method returns, this value points to the current command flags. One of more of the following values:</para>
            <para>ECF_DEFAULT (0x000)</para>
            <para><c>Windows 7 and later</c>. No command flags are set.</para>
            <para>ECF_HASSUBCOMMANDS (0x001)</para>
            <para>The command has subcommands.</para>
            <para>ECF_HASSPLITBUTTON (0x002)</para>
            <para>A split button is displayed.</para>
            <para>ECF_HIDELABEL (0x004)</para>
            <para>The label is hidden.</para>
            <para>ECF_ISSEPARATOR (0x008)</para>
            <para>The command is a separator.</para>
            <para>ECF_HASLUASHIELD (0x010)</para>
            <para>A UAC shield is displayed.</para>
            <para>ECF_SEPARATORBEFORE (0x020)</para>
            <para><c>Introduced in Windows 7</c>. The command is located in the menu immediately below a separator.</para>
            <para>ECF_SEPARATORAFTER (0x040)</para>
            <para><c>Introduced in Windows 7</c>. The command is located in the menu immediately above a separator.</para>
            <para>ECF_ISDROPDOWN (0x080)</para>
            <para><c>Introduced in Windows 7</c>. Selecting the command opens a drop-down submenu (for example, <c>Include in library</c>).</para>
            <para>ECF_TOGGLEABLE (0x100)</para>
            <para><c>Introduced in Windows 8</c>.</para>
            <para>ECF_AUTOMENUICONS (0x200)</para>
            <para><c>Introduced in Windows 8</c>.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IExplorerCommand.EnumSubCommands(Vanara.PInvoke.Shell32.IEnumExplorerCommand@)">
            <summary>Retrieves an enemerator for a command's subcommands.</summary>
            <param name="ppEnum">
            <para>Type: <c>IEnumExplorerCommand**</c></para>
            <para>
            When this method returns successfully, contains an IEnumExplorerCommand interface pointer that can be used to walk the set
            of subcommands.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            <para>
            Subcommands are displayed as menu drop-down items through the use of a Split button when commands are exposed at the top of
            a Windows Explorer window. In that position, only the default command button is given an icon. In a normal menu, the icons
            for all commands are shown.
            </para>
            <para>
            Subcommands which themselves have subcommands are not supported by Windows Explorer. When a command has its own subcommands,
            it must designate this status by specifying ECF_HASSUBCOMMANDS in the IExplorerCommand::GetFlags call.
            </para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IExplorerCommandProvider">
            <summary>Exposes methods to create Explorer commands and command enumerators.</summary>
            <remarks>
            <para>
            None of the methods of this interface should communicate with network resources; they are called on the UI thread and doing so
            would cause the UI to stop responding.
            </para>
            <para>
            Each command should have its own unique GUID; the command provider is expected to create a command instance on a per-GUID basis.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IExplorerCommandProvider.GetCommands(System.Object,System.Guid@,System.Object@)">
            <summary>Gets a specified Explorer command enumerator instance.</summary>
            <param name="punkSite">
            <para>Type: <c>IUnknown*</c></para>
            <para>A pointer to an interface used to set a site.</para>
            </param>
            <param name="riid">
            <para>Type: <c>REFIID</c></para>
            <para>A reference to the IID of the requested interface.</para>
            </param>
            <param name="ppv">
            <para>Type: <c>void**</c></para>
            <para>When this function returns, contains the interface pointer requested in riid. This will typically be IEnumExplorerCommand.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IExplorerCommandProvider.GetCommand(System.Guid@,System.Guid@,System.Object@)">
            <summary>Gets a specified Explorer command instance.</summary>
            <param name="rguidCommandId">
            <para>Type: <c>REFGUID</c></para>
            <para>A reference to a command ID as a <c>GUID</c>. Used to obtain a command definition.</para>
            </param>
            <param name="riid">
            <para>Type: <c>REFIID</c></para>
            <para>A reference to the IID of the requested interface.</para>
            </param>
            <param name="ppv">
            <para>Type: <c>void**</c></para>
            <para>When this function returns, contains the interface pointer requested in riid. This will typically be IExplorerCommand.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IExplorerCommandState">
            <summary>Exposes a single method that allows retrieval of the command state.</summary>
            <remarks>
            <para>When to Implement</para>
            <para>
            Implement this interface when you need to determine the command state dynamically (for instance, based on an item's properties).
            This interface provides the same functionality as IExplorerCommand::GetState, without the overhead of that interface's
            additional methods. Implement <c>IExplorerCommandState</c> when you only need to compute the command state.
            </para>
            <para>When to Use</para>
            <para>
            Do not call the method of <c>IExplorerCommandState</c> directly. Windows Explorer calls your IExplorerCommandState::GetState
            implementation when the user wants to perform an action on the item.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IExplorerCommandState.GetState(Vanara.PInvoke.Shell32.IShellItemArray,System.Boolean,Vanara.PInvoke.Shell32.EXPCMDSTATE@)">
            <summary>Gets the command state associated with a specified Shell item.</summary>
            <param name="psiItemArray">
            <para>Type: <c>IShellItemArray*</c></para>
            <para>A pointer to an IShellItemArray with a single element that represents the Shell item.</para>
            </param>
            <param name="fOkToBeSlow">
            <para>Type: <c>BOOL</c></para>
            <para>
            <c>FALSE</c> if a verb object should not perform any memory intensive computations that could cause the UI thread to stop
            responding. The verb object should return E_PENDING in that case. If <c>TRUE</c>, those computations can be completed.
            </para>
            </param>
            <param name="pCmdState">
            <para>Type: <c>EXPCMDSTATE*</c></para>
            <para>
            A pointer to a value that, when this method returns successfully, receives one or more Windows Explorer command states
            indicated by the EXPCMDSTATE constants.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            This method provides the same functionality as GetState. Use IExplorerCommandState when you only need to know the command state.
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.EXPLORERPANESTATE">
            <summary>
            Indicate flags used by IExplorerPaneVisibility::GetPaneState to get the current state of the given Windows Explorer pane.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.EXPLORERPANESTATE.EPS_DONTCARE">
            <summary>Do not make any modifications to the pane.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.EXPLORERPANESTATE.EPS_DEFAULT_ON">
            <summary>Set the default state of the pane to "on", but respect any user-modified persisted state.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.EXPLORERPANESTATE.EPS_DEFAULT_OFF">
            <summary>Set the default state of the pane to "off".</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.EXPLORERPANESTATE.EPS_STATEMASK">
            <summary>Unused.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.EXPLORERPANESTATE.EPS_INITIALSTATE">
            <summary>Ignore any persisted state from the user, but the user can still modify the state.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.EXPLORERPANESTATE.EPS_FORCE">
            <summary>
            Users cannot modify the state, that is, they do not have the ability to show or hide the given pane. This option implies EPS_INITIALSTATE.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IExplorerPaneVisibility">
            <summary>
            Used in Windows Explorer by an IShellFolder implementation to give suggestions to the view about what panes are visible.
            Additionally, an IExplorerBrowser host can use this interface to provide information about pane visibility. The host should
            implement QueryService with SID_ExplorerPaneVisibility as the service ID. The host must be in the site chain.
            <para>
            The IExplorerPaneVisibility implementation is retrieved from the Shell folder.The Shell folder, in turn, is retrieved from the
            view.A namespace extension can elect to provide a custom view(IShellView) rather than using the system folder view object
            (DefView). In that case, the IShellView implementation must include an implementation of IFolderView::GetFolder to return the
            IExplorerPaneVisibility object.
            </para>
            <para>
            A namespace extension can provide a custom view by implementing IShellView itself rather than using the system folder view object
            (DefView). In that case, the IShellView implementation must include an implementation of IFolderView::GetFolder to make use of IExplorerPaneVisibility.
            </para>
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IExplorerPaneVisibility.GetPaneState(System.Guid@,Vanara.PInvoke.Shell32.EXPLORERPANESTATE@)">
            <summary>
            <para>Gets the visibility state of the given Windows Explorer pane.</para>
            </summary>
            <param name="ep">
            <para>Type: <c>REFEXPLORERPANE</c></para>
            <para>
            A reference to a GUID that uniquely identifies a Windows Explorer pane. One of the following constants as defined in Shlguid.h.
            </para>
            <para>EP_NavPane (cb316b22-25f7-42b8-8a09-540d23a43c2f)</para>
            <para>The pane on the left side of the Windows Explorer window that hosts the folders tree and <c>Favorites</c>.</para>
            <para>EP_Commands (d9745868-ca5f-4a76-91cd-f5a129fbb076)</para>
            <para><c>Commands</c> module along the top of the Windows Explorer window.</para>
            <para>EP_Commands_Organize (72e81700-e3ec-4660-bf24-3c3b7b648806)</para>
            <para><c>Organize</c> menu within the commands module.</para>
            <para>EP_Commands_View (21f7c32d-eeaa-439b-bb51-37b96fd6a943)</para>
            <para><c>View</c> menu within the commands module.</para>
            <para>EP_DetailsPane (43abf98b-89b8-472d-b9ce-e69b8229f019)</para>
            <para>Pane showing metadata along the bottom of the Windows Explorer window.</para>
            <para>EP_PreviewPane (893c63d1-45c8-4d17-be19-223be71be365)</para>
            <para>Pane on the right of the Windows Explorer window that shows a large reading preview of the file.</para>
            <para>EP_QueryPane (65bcde4f-4f07-4f27-83a7-1afca4df7ddd)</para>
            <para>Quick filter buttons to aid in a search.</para>
            <para>EP_AdvQueryPane (b4e9db8b-34ba-4c39-b5cc-16a1bd2c411c)</para>
            <para>Additional fields and options to aid in a search.</para>
            <para>EP_StatusBar (65fe56ce-5cfe-4bc4-ad8a-7ae3fe7e8f7c)</para>
            <para><c>Introduced in Windows 8</c>: A status bar that indicates the progress of some process, such as copying or downloading.</para>
            <para>EP_Ribbon (d27524a8-c9f2-4834-a106-df8889fd4f37)</para>
            <para>
            <c>Introduced in Windows 8</c>: The ribbon, which is the control that replaced menus and toolbars at the top of many
            Microsoft applications.
            </para>
            </param>
            <param name="peps">
            <para>Type: <c>EXPLORERPANESTATE*</c></para>
            <para>
            When this method returns, contains the visibility state of the given Windows Explorer pane as one of the EXPLORERPANESTATE constants.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            If the implementer does not care about the state of a given pane and therefore does not want to change it, then the
            implementer should return a success code for the method and EPS_DONTCARE for the parameter. If the method fails, it is
            treated as if EPS_DONTCARE was returned for the parameter.
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IExplorerPaneVisibilityConstants">
            <summary>Constant GUIDs used by IExplorerPaneVisibility::GetPaneState.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.IExplorerPaneVisibilityConstants.EP_AdvQueryPane">
            <summary>Additional fields and options to aid in a search.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.IExplorerPaneVisibilityConstants.EP_Commands">
            <summary>Commands module along the top of the Windows Explorer window.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.IExplorerPaneVisibilityConstants.EP_Commands_Organize">
            <summary>Organize menu within the commands module.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.IExplorerPaneVisibilityConstants.EP_Commands_View">
            <summary>View menu within the commands module.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.IExplorerPaneVisibilityConstants.EP_DetailsPane">
            <summary>Pane showing metadata along the bottom of the Windows Explorer window.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.IExplorerPaneVisibilityConstants.EP_NavPane">
            <summary>The pane on the left side of the Windows Explorer window that hosts the folders tree and Favorites.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.IExplorerPaneVisibilityConstants.EP_PreviewPane">
            <summary>Pane on the right of the Windows Explorer window that shows a large reading preview of the file.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.IExplorerPaneVisibilityConstants.EP_QueryPane">
            <summary>Quick filter buttons to aid in a search.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.IExplorerPaneVisibilityConstants.EP_Ribbon">
            <summary>
            Introduced in Windows 8: The ribbon, which is the control that replaced menus and toolbars at the top of many Microsoft applications.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.IExplorerPaneVisibilityConstants.EP_StatusBar">
            <summary>Introduced in Windows 8: A status bar that indicates the progress of some process, such as copying or downloading.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IEIFLAG">
            <summary>Flags that specifiy how to handle the image.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.IEIFLAG.IEIFLAG_ASPECT">
            <summary>
            Used to ask the object to use the supplied aspect ratio. If this flag is set, a rectangle with the desired aspect ratio will
            be passed in prgSize. This flag cannot be used with IEIFLAG_SCREEN.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.IEIFLAG.IEIFLAG_ASYNC">
            <summary>
            Not used. The thumbnail is always extracted on a background thread. Microsoft Windows XP and earlier. Used to ask if this
            instance supports asynchronous (free-threaded) extraction. If this flag is set by the calling applications,
            IExtractImage::GetLocation may return E_PENDING, indicating to the calling application to extract the image on another
            thread. If E_PENDING is returned, the priority of the item is returned in pdwPriority.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.IEIFLAG.IEIFLAG_CACHE">
            <summary>
            Not supported. Windows XP and earlier: Set by the object to indicate that it will not cache the image. If this flag is
            returned, the Shell will cache a copy of the image.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.IEIFLAG.IEIFLAG_GLEAM">
            <summary>Not supported.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.IEIFLAG.IEIFLAG_NOBORDER">
            <summary>Not supported.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.IEIFLAG.IEIFLAG_NOSTAMP">
            <summary>Not supported.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.IEIFLAG.IEIFLAG_OFFLINE">
            <summary>Used to tell the object to use only local content for rendering.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.IEIFLAG.IEIFLAG_ORIGSIZE">
            <summary>
            Version 5.0. Used to tell the object to render the image to the approximate size passed in prgSize, but crop it if necessary.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.IEIFLAG.IEIFLAG_QUALITY">
            <summary>
            Passed to the IExtractImage::Extract method to indicate that a higher quality image is requested. If this flag is not set,
            IExtractImage retrieves an embedded thumbnail if the file has one, no matter what size the user requests. For example, if
            the file is 2000x2000 pixels but the embedded thumbnail is only 100x100 pixels and the user does not set this flag, yet
            requests a 1000x1000 pixel thumbnail, IExtractImage always returns the 100x100 pixel thumbnail. This is by design, since
            IExtractImage does not scale up. If a larger thumbnail is desired (usually embedded thumbnails are 160x160), this flag must
            be set.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.IEIFLAG.IEIFLAG_REFRESH">
            <summary>Returned by the object to indicate that Refresh Thumbnail should be displayed on the item's shortcut menu.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.IEIFLAG.IEIFLAG_SCREEN">
            <summary>Used to tell the object to render as if for the screen. This flag cannot be used with IEIFLAG_ASPECT.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IExtractImage">
            <summary>Exposes methods that request a thumbnail image from a Shell folder.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IExtractImage.GetLocation(System.Text.StringBuilder,System.UInt32,System.IntPtr,Vanara.PInvoke.SIZE@,System.UInt32,Vanara.PInvoke.Shell32.IEIFLAG@)">
            <summary>Gets a path to the image that is to be extracted.</summary>
            <param name="pszPathBuffer">
            The buffer used to return the path description. This value identifies the image so you can avoid loading the same one more
            than once.
            </param>
            <param name="cchMax">The size of pszPathBuffer in characters.</param>
            <param name="pdwPriority">Not used.</param>
            <param name="prgSize">A pointer to a SIZE structure with the desired width and height of the image. Must not be NULL.</param>
            <param name="dwRecClrDepth">The recommended color depth in units of bits per pixel. Must not be NULL.</param>
            <param name="pdwFlags">Flags that specify how the image is to be handled.</param>
            <returns>
            This method may return a COM-defined error code or one of the following:
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>S_OK</term>
            <definition>Success</definition>
            </item>
            <item>
            <term>E_PENDING</term>
            <definition>Windows XP and earlier: If the IEIFLAG_ASYNC flag is set, this return value is used to indicate to the Shell
            that the object is free-threaded.</definition>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IExtractImage.Extract(Vanara.PInvoke.Gdi32.SafeHBITMAP@)">
            <summary>Requests an image from an object, such as an item in a Shell folder.</summary>
            <param name="phBmpThumbnail">
            <para>Type: <c>HBITMAP*</c></para>
            <para>The buffer to hold the bitmapped image.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>Returns S_OK if successful, or a COM-defined error code otherwise.</para>
            </returns>
            <remarks>You must call IExtractImage::GetLocation prior to calling <c>Extract</c>.</remarks>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IExtractImage2">
            <summary>Extends the capabilities of IExtractImage.</summary>
            <remarks>
            <para>Implement <c>IExtractImage2</c> to provide date stamps for your thumbnail images.</para>
            <para>
            You do not call this interface directly. <c>IExtractImage2</c> is used by the operating system only when it has confirmed that
            your application is aware of this interface.
            </para>
            <para>
            <c>IExtractImage2</c> implements all the IExtractImage methods as well as <c>IUnknown</c>. The listed method is specific to <c>IExtractImage2</c>.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IExtractImage2.GetLocation(System.Text.StringBuilder,System.UInt32,System.IntPtr,Vanara.PInvoke.SIZE@,System.UInt32,Vanara.PInvoke.Shell32.IEIFLAG@)">
            <summary>Gets a path to the image that is to be extracted.</summary>
            <param name="pszPathBuffer">
            The buffer used to return the path description. This value identifies the image so you can avoid loading the same one more
            than once.
            </param>
            <param name="cchMax">The size of pszPathBuffer in characters.</param>
            <param name="pdwPriority">Not used.</param>
            <param name="prgSize">A pointer to a SIZE structure with the desired width and height of the image. Must not be NULL.</param>
            <param name="dwRecClrDepth">The recommended color depth in units of bits per pixel. Must not be NULL.</param>
            <param name="pdwFlags">Flags that specify how the image is to be handled.</param>
            <returns>
            This method may return a COM-defined error code or one of the following:
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>S_OK</term>
            <definition>Success</definition>
            </item>
            <item>
            <term>E_PENDING</term>
            <definition>Windows XP and earlier: If the IEIFLAG_ASYNC flag is set, this return value is used to indicate to the Shell
            that the object is free-threaded.</definition>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IExtractImage2.Extract(Vanara.PInvoke.Gdi32.SafeHBITMAP@)">
            <summary>Requests an image from an object, such as an item in a Shell folder.</summary>
            <param name="phBmpThumbnail">
            <para>Type: <c>HBITMAP*</c></para>
            <para>The buffer to hold the bitmapped image.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>Returns S_OK if successful, or a COM-defined error code otherwise.</para>
            </returns>
            <remarks>You must call IExtractImage::GetLocation prior to calling <c>Extract</c>.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IExtractImage2.GetDateStamp(System.Runtime.InteropServices.ComTypes.FILETIME@)">
            <summary>Requests the date the image was last modified. This method allows the Shell to determine whether cached images are out-of-date.</summary>
            <param name="pDateStamp">
            <para>Type: <c>FILETIME*</c></para>
            <para>A pointer to a FILETIME structure used to return the last time the image was modified.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>Return S_OK if successful, or a COM-defined error code otherwise.</para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.CDCONTROLSTATEF">
            <summary>
            Specifies the values that indicate whether a control is visible and enabled. Used by members of the IFileDialogCustomize interface.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CDCONTROLSTATEF.CDCS_INACTIVE">
            <summary>The control is inactive and cannot be accessed by the user.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CDCONTROLSTATEF.CDCS_ENABLED">
            <summary>The control is active.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CDCONTROLSTATEF.CDCS_VISIBLE">
            <summary>The control is visible. The absence of this value indicates that the control is hidden.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CDCONTROLSTATEF.CDCS_ENABLEDVISIBLE">
            <summary>Windows 7 and later. The control is visible and enabled.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.FDAP">
            <summary>Specifies list placement.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FDAP.FDAP_BOTTOM">
            <summary>The place is added to the bottom of the default list.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FDAP.FDAP_TOP">
            <summary>The place is added to the top of the default list.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.FDE_SHAREVIOLATION_RESPONSE">
            <summary>
            Specifies the values used by the IFileDialogEvents::OnShareViolation method to indicate an application's response to a sharing
            violation that occurs when a file is opened or saved.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FDE_SHAREVIOLATION_RESPONSE.FDESVR_DEFAULT">
            <summary>
            The application has not handled the event. The dialog displays a UI that indicates that the file is in use and a different
            file must be chosen.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FDE_SHAREVIOLATION_RESPONSE.FDESVR_ACCEPT">
            <summary>The application has determined that the file should be returned from the dialog.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FDE_SHAREVIOLATION_RESPONSE.FDESVR_REFUSE">
            <summary>The application has determined that the file should not be returned from the dialog.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.FILEOPENDIALOGOPTIONS">
            <summary>Defines the set of options available to an Open or Save dialog.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FILEOPENDIALOGOPTIONS.FOS_OVERWRITEPROMPT">
            <summary>
            When saving a file, prompt before overwriting an existing file of the same name. This is a default value for the Save dialog.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FILEOPENDIALOGOPTIONS.FOS_STRICTFILETYPES">
            <summary>
            In the Save dialog, only allow the user to choose a file that has one of the file name extensions specified through IFileDialog::SetFileTypes.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FILEOPENDIALOGOPTIONS.FOS_NOCHANGEDIR">
            <summary>Don't change the current working directory.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FILEOPENDIALOGOPTIONS.FOS_PICKFOLDERS">
            <summary>Present an Open dialog that offers a choice of folders rather than files.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FILEOPENDIALOGOPTIONS.FOS_FORCEFILESYSTEM">
            <summary>
            Ensures that returned items are file system items (SFGAO_FILESYSTEM). Note that this does not apply to items returned by IFileDialog::GetCurrentSelection.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FILEOPENDIALOGOPTIONS.FOS_ALLNONSTORAGEITEMS">
            <summary>
            Enables the user to choose any item in the Shell namespace, not just those with SFGAO_STREAM or SFAGO_FILESYSTEM attributes.
            This flag cannot be combined with FOS_FORCEFILESYSTEM.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FILEOPENDIALOGOPTIONS.FOS_NOVALIDATE">
            <summary>
            Do not check for situations that would prevent an application from opening the selected file, such as sharing violations or
            access denied errors.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FILEOPENDIALOGOPTIONS.FOS_ALLOWMULTISELECT">
            <summary>
            Enables the user to select multiple items in the open dialog. Note that when this flag is set, the IFileOpenDialog interface
            must be used to retrieve those items.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FILEOPENDIALOGOPTIONS.FOS_PATHMUSTEXIST">
            <summary>The item returned must be in an existing folder. This is a default value.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FILEOPENDIALOGOPTIONS.FOS_FILEMUSTEXIST">
            <summary>The item returned must exist. This is a default value for the Open dialog.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FILEOPENDIALOGOPTIONS.FOS_CREATEPROMPT">
            <summary>
            Prompt for creation if the item returned in the save dialog does not exist. Note that this does not actually create the item.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FILEOPENDIALOGOPTIONS.FOS_SHAREAWARE">
            <summary>
            In the case of a sharing violation when an application is opening a file, call the application back through OnShareViolation
            for guidance. This flag is overridden by FOS_NOVALIDATE.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FILEOPENDIALOGOPTIONS.FOS_NOREADONLYRETURN">
            <summary>Do not return read-only items. This is a default value for the Save dialog.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FILEOPENDIALOGOPTIONS.FOS_NOTESTFILECREATE">
            <summary>
            Do not test whether creation of the item as specified in the Save dialog will be successful. If this flag is not set, the
            calling application must handle errors, such as denial of access, discovered when the item is created.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FILEOPENDIALOGOPTIONS.FOS_HIDEMRUPLACES">
            <summary>
            Hide the list of places from which the user has recently opened or saved items. This value is not supported as of Windows 7.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FILEOPENDIALOGOPTIONS.FOS_HIDEPINNEDPLACES">
            <summary>
            Hide items shown by default in the view's navigation pane. This flag is often used in conjunction with the
            IFileDialog::AddPlace method, to hide standard locations and replace them with custom locations.
            <para>
            <c>Windows 7</c> and later. Hide all of the standard namespace locations (such as Favorites, Libraries, Computer, and
            Network) shown in the navigation pane.
            </para>
            <para>
            <c>Windows Vista.</c> Hide the contents of the Favorite Links tree in the navigation pane. Note that the category itself is
            still displayed, but shown as empty.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FILEOPENDIALOGOPTIONS.FOS_NODEREFERENCELINKS">
            <summary>
            Shortcuts should not be treated as their target items. This allows an application to open a .lnk file rather than what that
            file is a shortcut to.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FILEOPENDIALOGOPTIONS.FOS_DONTADDTORECENT">
            <summary>Do not add the item being opened or saved to the recent documents list (SHAddToRecentDocs).</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FILEOPENDIALOGOPTIONS.FOS_FORCESHOWHIDDEN">
            <summary>Include hidden and system items.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FILEOPENDIALOGOPTIONS.FOS_DEFAULTNOMINIMODE">
            <summary>
            Indicates to the Save As dialog box that it should open in expanded mode. Expanded mode is the mode that is set and unset by
            clicking the button in the lower-left corner of the Save As dialog box that switches between Browse Folders and Hide Folders
            when clicked. This value is not supported as of Windows 7.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FILEOPENDIALOGOPTIONS.FOS_FORCEPREVIEWPANEON">
            <summary>Indicates to the Open dialog box that the preview pane should always be displayed.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FILEOPENDIALOGOPTIONS.FOS_SUPPORTSTREAMABLEITEMS">
            <summary>
            Indicates that the caller is opening a file as a stream (BHID_Stream), so there is no need to download that file.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.MERGE_UPDATE_STATUS">
            <summary>Indicates status of the merge process.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.MERGE_UPDATE_STATUS.MUS_COMPLETE">
            <summary>Indicates that the process has completed successfully.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.MERGE_UPDATE_STATUS.MUS_USERINPUTNEEDED">
            <summary>Indicates that additional input is required by the user for the process to complete.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.MERGE_UPDATE_STATUS.MUS_FAILED">
            <summary>Indicates that the process has failed.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.TRANSFER_SOURCE_FLAGS">
            <summary>Used by methods of the ITransferSource and ITransferDestination interfaces to control their file operations.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.TRANSFER_SOURCE_FLAGS.TSF_NORMAL">
            <summary>Fail if the destination already exists, unless TSF_OVERWRITE_EXIST is specified. This is a default behavior.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.TRANSFER_SOURCE_FLAGS.TSF_FAIL_EXIST">
            <summary>Fail if the destination already exists, unless TSF_OVERWRITE_EXIST is specified. This is a default behavior</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.TRANSFER_SOURCE_FLAGS.TSF_RENAME_EXIST">
            <summary>Rename with auto-name generation if the destination already exists.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.TRANSFER_SOURCE_FLAGS.TSF_OVERWRITE_EXIST">
            <summary>Overwrite or merge with the destination.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.TRANSFER_SOURCE_FLAGS.TSF_ALLOW_DECRYPTION">
            <summary>Allow creation of a decrypted destination.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.TRANSFER_SOURCE_FLAGS.TSF_NO_SECURITY">
            <summary>No discretionary access control list (DACL), system access control list (SACL), or owner.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.TRANSFER_SOURCE_FLAGS.TSF_COPY_CREATION_TIME">
            <summary>
            Copy the creation time as part of the copy. This can be useful for a move operation that is being used as a copy and delete
            operation (TSF_MOVE_AS_COPY_DELETE).
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.TRANSFER_SOURCE_FLAGS.TSF_COPY_WRITE_TIME">
            <summary>Copy the last write time as part of the copy.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.TRANSFER_SOURCE_FLAGS.TSF_USE_FULL_ACCESS">
            <summary>Assign write, read, and delete permissions as share mode.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.TRANSFER_SOURCE_FLAGS.TSF_DELETE_RECYCLE_IF_POSSIBLE">
            <summary>Recycle on file delete, if possible.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.TRANSFER_SOURCE_FLAGS.TSF_COPY_HARD_LINK">
            <summary>Hard link to the desired source (not required). This avoids a normal copy operation.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.TRANSFER_SOURCE_FLAGS.TSF_COPY_LOCALIZED_NAME">
            <summary>Copy the localized name.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.TRANSFER_SOURCE_FLAGS.TSF_MOVE_AS_COPY_DELETE">
            <summary>Move as a copy and delete operation.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.TRANSFER_SOURCE_FLAGS.TSF_SUSPEND_SHELLEVENTS">
            <summary>Suspend Shell events.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IFileDialog">
            <summary>Exposes methods that initialize, show, and get results from the common file dialog.</summary>
            <seealso cref="T:Vanara.PInvoke.Shell32.IModalWindow"/>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileDialog.Show(Vanara.PInvoke.HWND)">
            <summary>Launches the modal window.</summary>
            <param name="parent">The handle of the owner window. This value can be NULL.</param>
            <returns>
            If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code, including the following:
            HRESULT_FROM_WIN32(ERROR_CANCELLED) = The user closed the window by canceling the operation.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileDialog.SetFileTypes(System.UInt32,Vanara.PInvoke.Shell32.COMDLG_FILTERSPEC[])">
            <summary>Sets the file types that the dialog can open or save.</summary>
            <param name="cFileTypes">The number of elements in the array specified by rgFilterSpec.</param>
            <param name="rgFilterSpec">A pointer to an array of COMDLG_FILTERSPEC structures, each representing a file type.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileDialog.SetFileTypeIndex(System.UInt32)">
            <summary>Sets the file type that appears as selected in the dialog.</summary>
            <param name="iFileType">
            The index of the file type in the file type array passed to IFileDialog::SetFileTypes in its cFileTypes parameter. Note that
            this is a one-based index, not zero-based.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileDialog.GetFileTypeIndex">
            <summary>Gets the currently selected file type.</summary>
            <returns>
            A UINT value that receives the index of the selected file type in the file type array passed to IFileDialog::SetFileTypes in
            its cFileTypes parameter.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileDialog.Advise(Vanara.PInvoke.Shell32.IFileDialogEvents)">
            <summary>Assigns an event handler that listens for events coming from the dialog.</summary>
            <param name="pfde">A pointer to an IFileDialogEvents implementation that will receive events from the dialog.</param>
            <returns>
            A DWORD value identifying this event handler. When the client is finished with the dialog, that client must call the
            IFileDialog::Unadvise method with this value.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileDialog.Unadvise(System.UInt32)">
            <summary>Removes an event handler that was attached through the IFileDialog::Advise method.</summary>
            <param name="dwCookie">
            The DWORD value that represents the event handler. This value is obtained through the pdwCookie parameter of the
            IFileDialog::Advise method.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileDialog.SetOptions(Vanara.PInvoke.Shell32.FILEOPENDIALOGOPTIONS)">
            <summary>Sets flags to control the behavior of the dialog.</summary>
            <param name="fos">One or more of the FILEOPENDIALOGOPTIONS values.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileDialog.GetOptions">
            <summary>Gets the current flags that are set to control dialog behavior.</summary>
            <returns>
            When this method returns successfully, points to a value made up of one or more of the FILEOPENDIALOGOPTIONS values.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileDialog.SetDefaultFolder(Vanara.PInvoke.Shell32.IShellItem)">
            <summary>Sets the folder used as a default if there is not a recently used folder value available.</summary>
            <param name="psi">A pointer to the interface that represents the folder.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileDialog.SetFolder(Vanara.PInvoke.Shell32.IShellItem)">
            <summary>Sets a folder that is always selected when the dialog is opened, regardless of previous user action.</summary>
            <param name="psi">A pointer to the interface that represents the folder.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileDialog.GetFolder">
            <summary>
            Gets either the folder currently selected in the dialog, or, if the dialog is not currently displayed, the folder that is to
            be selected when the dialog is opened.
            </summary>
            <returns>The address of a pointer to the interface that represents the folder.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileDialog.GetCurrentSelection">
            <summary>Gets the user's current selection in the dialog.</summary>
            <returns>
            The address of a pointer to the interface that represents the item currently selected in the dialog. This item can be a file
            or folder selected in the view window, or something that the user has entered into the dialog's edit box. The latter case
            may require a parsing operation (cancelable by the user) that blocks the current thread.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileDialog.SetFileName(System.String)">
            <summary>Sets the file name that appears in the File name edit box when that dialog box is opened.</summary>
            <param name="pszName">A pointer to the name of the file.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileDialog.GetFileName">
            <summary>Retrieves the text currently entered in the dialog's File name edit box.</summary>
            <returns>The address of a pointer to a buffer that, when this method returns successfully, receives the text.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileDialog.SetTitle(System.String)">
            <summary>Sets the title of the dialog.</summary>
            <param name="pszTitle">A pointer to a buffer that contains the title text.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileDialog.SetOkButtonLabel(System.String)">
            <summary>Sets the text of the Open or Save button.</summary>
            <param name="pszText">A pointer to a buffer that contains the button text.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileDialog.SetFileNameLabel(System.String)">
            <summary>Sets the text of the label next to the file name edit box.</summary>
            <param name="pszLabel">A pointer to a buffer that contains the label text.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileDialog.GetResult">
            <summary>Gets the choice that the user made in the dialog.</summary>
            <returns>The address of a pointer to an IShellItem that represents the user's choice.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileDialog.AddPlace(Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.Shell32.FDAP)">
            <summary>Adds a folder to the list of places available for the user to open or save items.</summary>
            <param name="psi">
            A pointer to an IShellItem that represents the folder to be made available to the user. This can only be a folder.
            </param>
            <param name="fdap">Specifies where the folder is placed within the list.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileDialog.SetDefaultExtension(System.String)">
            <summary>Sets the default extension to be added to file names.</summary>
            <param name="pszDefaultExtension">
            A pointer to a buffer that contains the extension text. This string should not include a leading period. For example, "jpg"
            is correct, while ".jpg" is not.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileDialog.Close(Vanara.PInvoke.HRESULT)">
            <summary>Closes the dialog.</summary>
            <param name="hr">The code that will be returned by Show to indicate that the dialog was closed before a selection was made.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileDialog.SetClientGuid(System.Guid@)">
            <summary>Enables a calling application to associate a GUID with a dialog's persisted state.</summary>
            <param name="guid">The GUID to associate with this dialog state.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileDialog.ClearClientData">
            <summary>Instructs the dialog to clear all persisted state information.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileDialog.SetFilter(System.Object)">
            <summary>Sets the filter. <note>Deprecated. SetFilter is no longer available for use as of Windows 7.</note></summary>
            <param name="pFilter">A pointer to the IShellItemFilter that is to be set.</param>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IFileDialog2">
            <summary>
            Extends the IFileDialog interface by providing methods that allow the caller to name a specific, restricted location that can be
            browsed in the common file dialog as well as to specify alternate text to display as a label on the Cancel button.
            </summary>
            <seealso cref="T:Vanara.PInvoke.Shell32.IFileDialog"/>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileDialog2.Show(Vanara.PInvoke.HWND)">
            <summary>Launches the modal window.</summary>
            <param name="parent">The handle of the owner window. This value can be NULL.</param>
            <returns>
            If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code, including the following:
            HRESULT_FROM_WIN32(ERROR_CANCELLED) = The user closed the window by canceling the operation.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileDialog2.SetFileTypes(System.UInt32,Vanara.PInvoke.Shell32.COMDLG_FILTERSPEC[])">
            <summary>Sets the file types that the dialog can open or save.</summary>
            <param name="cFileTypes">The number of elements in the array specified by rgFilterSpec.</param>
            <param name="rgFilterSpec">A pointer to an array of COMDLG_FILTERSPEC structures, each representing a file type.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileDialog2.SetFileTypeIndex(System.UInt32)">
            <summary>Sets the file type that appears as selected in the dialog.</summary>
            <param name="iFileType">
            The index of the file type in the file type array passed to IFileDialog::SetFileTypes in its cFileTypes parameter. Note that
            this is a one-based index, not zero-based.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileDialog2.GetFileTypeIndex">
            <summary>Gets the currently selected file type.</summary>
            <returns>
            A UINT value that receives the index of the selected file type in the file type array passed to IFileDialog::SetFileTypes in
            its cFileTypes parameter.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileDialog2.Advise(Vanara.PInvoke.Shell32.IFileDialogEvents)">
            <summary>Assigns an event handler that listens for events coming from the dialog.</summary>
            <param name="pfde">A pointer to an IFileDialogEvents implementation that will receive events from the dialog.</param>
            <returns>
            A DWORD value identifying this event handler. When the client is finished with the dialog, that client must call the
            IFileDialog::Unadvise method with this value.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileDialog2.Unadvise(System.UInt32)">
            <summary>Removes an event handler that was attached through the IFileDialog::Advise method.</summary>
            <param name="dwCookie">
            The DWORD value that represents the event handler. This value is obtained through the pdwCookie parameter of the
            IFileDialog::Advise method.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileDialog2.SetOptions(Vanara.PInvoke.Shell32.FILEOPENDIALOGOPTIONS)">
            <summary>Sets flags to control the behavior of the dialog.</summary>
            <param name="fos">One or more of the FILEOPENDIALOGOPTIONS values.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileDialog2.GetOptions">
            <summary>Gets the current flags that are set to control dialog behavior.</summary>
            <returns>
            When this method returns successfully, points to a value made up of one or more of the FILEOPENDIALOGOPTIONS values.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileDialog2.SetDefaultFolder(Vanara.PInvoke.Shell32.IShellItem)">
            <summary>Sets the folder used as a default if there is not a recently used folder value available.</summary>
            <param name="psi">A pointer to the interface that represents the folder.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileDialog2.SetFolder(Vanara.PInvoke.Shell32.IShellItem)">
            <summary>Sets a folder that is always selected when the dialog is opened, regardless of previous user action.</summary>
            <param name="psi">A pointer to the interface that represents the folder.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileDialog2.GetFolder">
            <summary>
            Gets either the folder currently selected in the dialog, or, if the dialog is not currently displayed, the folder that is to
            be selected when the dialog is opened.
            </summary>
            <returns>The address of a pointer to the interface that represents the folder.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileDialog2.GetCurrentSelection">
            <summary>Gets the user's current selection in the dialog.</summary>
            <returns>
            The address of a pointer to the interface that represents the item currently selected in the dialog. This item can be a file
            or folder selected in the view window, or something that the user has entered into the dialog's edit box. The latter case
            may require a parsing operation (cancelable by the user) that blocks the current thread.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileDialog2.SetFileName(System.String)">
            <summary>Sets the file name that appears in the File name edit box when that dialog box is opened.</summary>
            <param name="pszName">A pointer to the name of the file.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileDialog2.GetFileName">
            <summary>Retrieves the text currently entered in the dialog's File name edit box.</summary>
            <returns>The address of a pointer to a buffer that, when this method returns successfully, receives the text.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileDialog2.SetTitle(System.String)">
            <summary>Sets the title of the dialog.</summary>
            <param name="pszTitle">A pointer to a buffer that contains the title text.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileDialog2.SetOkButtonLabel(System.String)">
            <summary>Sets the text of the Open or Save button.</summary>
            <param name="pszText">A pointer to a buffer that contains the button text.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileDialog2.SetFileNameLabel(System.String)">
            <summary>Sets the text of the label next to the file name edit box.</summary>
            <param name="pszLabel">A pointer to a buffer that contains the label text.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileDialog2.GetResult">
            <summary>Gets the choice that the user made in the dialog.</summary>
            <returns>The address of a pointer to an IShellItem that represents the user's choice.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileDialog2.AddPlace(Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.Shell32.FDAP)">
            <summary>Adds a folder to the list of places available for the user to open or save items.</summary>
            <param name="psi">
            A pointer to an IShellItem that represents the folder to be made available to the user. This can only be a folder.
            </param>
            <param name="fdap">Specifies where the folder is placed within the list.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileDialog2.SetDefaultExtension(System.String)">
            <summary>Sets the default extension to be added to file names.</summary>
            <param name="pszDefaultExtension">
            A pointer to a buffer that contains the extension text. This string should not include a leading period. For example, "jpg"
            is correct, while ".jpg" is not.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileDialog2.Close(Vanara.PInvoke.HRESULT)">
            <summary>Closes the dialog.</summary>
            <param name="hr">The code that will be returned by Show to indicate that the dialog was closed before a selection was made.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileDialog2.SetClientGuid(System.Guid@)">
            <summary>Enables a calling application to associate a GUID with a dialog's persisted state.</summary>
            <param name="guid">The GUID to associate with this dialog state.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileDialog2.ClearClientData">
            <summary>Instructs the dialog to clear all persisted state information.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileDialog2.SetFilter(System.Object)">
            <summary>Sets the filter. <note>Deprecated. SetFilter is no longer available for use as of Windows 7.</note></summary>
            <param name="pFilter">A pointer to the IShellItemFilter that is to be set.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileDialog2.SetCancelButtonLabel(System.String)">
            <summary>Replaces the default text "Cancel" on the common file dialog's Cancel button.</summary>
            <param name="pszLabel">Pointer to a string that contains the new text to display on the button.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileDialog2.SetNavigationRoot(Vanara.PInvoke.Shell32.IShellItem)">
            <summary>
            Specifies a top-level location from which to begin browsing a namespace, for instance in the Save dialog's Browse folder
            option. Users cannot navigate above this location.
            </summary>
            <param name="psi">Pointer to an IShellItem object that represents the navigation root.</param>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IFileDialogControlEvents">
            <summary>
            Exposes methods that allow an application to be notified of events that are related to controls that the application has added
            to a common file dialog.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileDialogControlEvents.OnItemSelected(Vanara.PInvoke.Shell32.IFileDialogCustomize,System.UInt32,System.UInt32)">
            <summary>Called when [item selected].</summary>
            <param name="pfdc">The PFDC.</param>
            <param name="dwIDCtl">The dw identifier control.</param>
            <param name="dwIDItem">The dw identifier item.</param>
            <returns></returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileDialogControlEvents.OnButtonClicked(Vanara.PInvoke.Shell32.IFileDialogCustomize,System.UInt32)">
            <summary>Called when [button clicked].</summary>
            <param name="pfdc">The PFDC.</param>
            <param name="dwIDCtl">The dw identifier control.</param>
            <returns></returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileDialogControlEvents.OnCheckButtonToggled(Vanara.PInvoke.Shell32.IFileDialogCustomize,System.UInt32,System.Boolean)">
            <summary>Called when [check button toggled].</summary>
            <param name="pfdc">The PFDC.</param>
            <param name="dwIDCtl">The dw identifier control.</param>
            <param name="bChecked">if set to <c>true</c> [b checked].</param>
            <returns></returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileDialogControlEvents.OnControlActivating(Vanara.PInvoke.Shell32.IFileDialogCustomize,System.UInt32)">
            <summary>Called when [control activating].</summary>
            <param name="pfdc">The PFDC.</param>
            <param name="dwIDCtl">The dw identifier control.</param>
            <returns></returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IFileDialogCustomize">
            <summary>Exposes methods that allow an application to add controls to a common file dialog.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileDialogCustomize.EnableOpenDropDown(System.UInt32)">
            <summary>Enables a drop-down list on the Open or Save button in the dialog.</summary>
            <param name="dwIDCtl">The ID of the drop-down list.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileDialogCustomize.AddMenu(System.UInt32,System.String)">
            <summary>Adds a menu to the dialog.</summary>
            <param name="dwIDCtl">The ID of the menu to add.</param>
            <param name="pszLabel">A pointer to a buffer that contains the menu name as a null-terminated Unicode string.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileDialogCustomize.AddPushButton(System.UInt32,System.String)">
            <summary>Adds a button to the dialog.</summary>
            <param name="dwIDCtl">The ID of the button to add.</param>
            <param name="pszLabel">A pointer to a buffer that contains the button text as a null-terminated Unicode string.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileDialogCustomize.AddComboBox(System.UInt32)">
            <summary>Adds a combo box to the dialog.</summary>
            <param name="dwIDCtl">The ID of the combo box to add.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileDialogCustomize.AddRadioButtonList(System.UInt32)">
            <summary>Adds an option button (also known as radio button) group to the dialog.</summary>
            <param name="dwIDCtl">The ID of the option button group to add.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileDialogCustomize.AddCheckButton(System.UInt32,System.String,System.Boolean)">
            <summary>Adds a check button (check box) to the dialog.</summary>
            <param name="dwIDCtl">The ID of the check button to add.</param>
            <param name="pszLabel">A pointer to a buffer that contains the button text as a null-terminated Unicode string.</param>
            <param name="bChecked">A BOOL indicating the current state of the check button. TRUE if checked; FALSE otherwise.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileDialogCustomize.AddEditBox(System.UInt32,System.String)">
            <summary>Adds an edit box control to the dialog.</summary>
            <param name="dwIDCtl">The ID of the edit box to add.</param>
            <param name="pszText">
            A pointer to a null-terminated Unicode string that provides the default text displayed in the edit box.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileDialogCustomize.AddSeparator(System.UInt32)">
            <summary>Adds a separator to the dialog, allowing a visual separation of controls.</summary>
            <param name="dwIDCtl">The control ID of the separator.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileDialogCustomize.AddText(System.UInt32,System.String)">
            <summary>Adds text content to the dialog.</summary>
            <param name="dwIDCtl">The ID of the text to add.</param>
            <param name="pszText">A pointer to a buffer that contains the text as a null-terminated Unicode string.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileDialogCustomize.SetControlLabel(System.UInt32,System.String)">
            <summary>Sets the text associated with a control, such as button text or an edit box label.</summary>
            <param name="dwIDCtl">The ID of the control whose text is to be changed.</param>
            <param name="pszLabel">A pointer to a buffer that contains the text as a null-terminated Unicode string.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileDialogCustomize.GetControlState(System.UInt32)">
            <summary>Gets the current visibility and enabled states of a given control.</summary>
            <param name="dwIDCtl">The ID of the control in question.</param>
            <returns>
            A variable that receives one or more values from the CDCONTROLSTATE enumeration that indicate the current state of the control.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileDialogCustomize.SetControlState(System.UInt32,Vanara.PInvoke.Shell32.CDCONTROLSTATEF)">
            <summary>Sets the current visibility and enabled states of a given control.</summary>
            <param name="dwIDCtl">The ID of the control in question.</param>
            <param name="dwState">One or more values from the CDCONTROLSTATE enumeration that indicate the current state of the control.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileDialogCustomize.GetEditBoxText(System.UInt32,System.String@)">
            <summary>Gets the current text in an edit box control.</summary>
            <param name="dwIDCtl">The ID of the edit box.</param>
            <param name="ppszText">The address of a pointer to a buffer that receives the text as a null-terminated Unicode string.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileDialogCustomize.SetEditBoxText(System.UInt32,System.String)">
            <summary>Sets the text in an edit box control found in the dialog.</summary>
            <param name="dwIDCtl">The ID of the edit box.</param>
            <param name="pszText">A pointer to a buffer that contains the text as a null-terminated Unicode string.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileDialogCustomize.GetCheckButtonState(System.UInt32)">
            <summary>Gets the current state of a check button (check box) in the dialog.</summary>
            <param name="dwIDCtl">The ID of the check box.</param>
            <returns>A BOOL value that indicates whether the box is checked. TRUE means checked; FALSE, unchecked.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileDialogCustomize.SetCheckButtonState(System.UInt32,System.Boolean)">
            <summary>Sets the state of a check button (check box) in the dialog.</summary>
            <param name="dwIDCtl">The ID of the check box.</param>
            <param name="bChecked">A BOOL value that indicates whether the box is checked. TRUE means checked; FALSE, unchecked.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileDialogCustomize.AddControlItem(System.UInt32,System.Int32,System.String)">
            <summary>Adds an item to a container control in the dialog.</summary>
            <param name="dwIDCtl">The ID of the container control to which the item is to be added.</param>
            <param name="dwIDItem">The ID of the item.</param>
            <param name="pszLabel">
            A pointer to a buffer that contains the item's text, which can be either a label or, in the case of a drop-down list, the
            item itself. This text is a null-terminated Unicode string.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileDialogCustomize.RemoveControlItem(System.UInt32,System.Int32)">
            <summary>Removes an item from a container control in the dialog.</summary>
            <param name="dwIDCtl">The ID of the container control from which the item is to be removed.</param>
            <param name="dwIDItem">The ID of the item.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileDialogCustomize.RemoveAllControlItems(System.UInt32)">
            <summary>Not implemented.</summary>
            <param name="dwIDCtl"></param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileDialogCustomize.GetControlItemState(System.UInt32,System.Int32)">
            <summary>Gets the current state of an item in a container control found in the dialog.</summary>
            <param name="dwIDCtl">The ID of the container control.</param>
            <param name="dwIDItem">The ID of the item.</param>
            <returns>
            A pointer to a variable that receives one of more values from the CDCONTROLSTATE enumeration that indicate the current state
            of the control.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileDialogCustomize.SetControlItemState(System.UInt32,System.Int32,Vanara.PInvoke.Shell32.CDCONTROLSTATEF)">
            <summary>Sets the current state of an item in a container control found in the dialog.</summary>
            <param name="dwIDCtl">The ID of the container control.</param>
            <param name="dwIDItem">The ID of the item.</param>
            <param name="dwState">One or more values from the CDCONTROLSTATE enumeration that indicate the new state of the control.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileDialogCustomize.GetSelectedControlItem(System.UInt32)">
            <summary>Gets a particular item from specified container controls in the dialog.</summary>
            <param name="dwIDCtl">The ID of the container control.</param>
            <returns>The ID of the item that the user selected in the control.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileDialogCustomize.SetSelectedControlItem(System.UInt32,System.Int32)">
            <summary>Sets the selected state of a particular item in an option button group or a combo box found in the dialog.</summary>
            <param name="dwIDCtl">The ID of the container control.</param>
            <param name="dwIDItem">The ID of the item to display as selected in the control.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileDialogCustomize.StartVisualGroup(System.UInt32,System.String)">
            <summary>Declares a visual group in the dialog. Subsequent calls to any "add" method add those elements to this group.</summary>
            <param name="dwIDCtl">The ID of the visual group.</param>
            <param name="pszLabel">
            A pointer to a buffer that contains text, as a null-terminated Unicode string, that appears next to the visual group.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileDialogCustomize.EndVisualGroup">
            <summary>Stops the addition of elements to a visual group in the dialog.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileDialogCustomize.MakeProminent(System.UInt32)">
            <summary>Places a control in the dialog so that it stands out compared to other added controls.</summary>
            <param name="dwIDCtl">The ID of the control.</param>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IFileDialogEvents">
            <summary>Exposes methods that allow notification of events within a common file dialog.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileDialogEvents.OnFileOk(Vanara.PInvoke.Shell32.IFileDialog)">
            <summary>Called just before the dialog is about to return with a result.</summary>
            <param name="pfd">A pointer to the interface that represents the dialog.</param>
            <returns>
            Implementations should return S_OK to accept the current result in the dialog or S_FALSE to refuse it. In the case of
            S_FALSE, the dialog should remain open.
            </returns>
            <remarks>
            When this method is called, the IFileDialog::GetResult and GetResults methods can be called.
            <para>
            The application can use this callback method to perform additional validation before the dialog closes, or to prevent the
            dialog from closing. If the application prevents the dialog from closing, it should display a UI to indicate a cause. To
            obtain a parent HWND for the UI, obtain the IOleWindow interface through IFileDialog::QueryInterface and call IOleWindow::GetWindow.
            </para>
            <para>An application can also use this method to perform all of its work surrounding the opening or saving of files.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileDialogEvents.OnFolderChanging(Vanara.PInvoke.Shell32.IFileDialog,Vanara.PInvoke.Shell32.IShellItem)">
            <summary>
            Called before IFileDialogEvents::OnFolderChange. This allows the implementer to stop navigation to a particular location.
            </summary>
            <param name="pfd">A pointer to the interface that represents the dialog.</param>
            <param name="psiFolder">A pointer to an interface that represents the folder to which the dialog is about to navigate.</param>
            <returns>
            Returns S_OK if successful, or an error value otherwise. A return value of S_OK or E_NOTIMPL indicates that the folder
            change can proceed.
            </returns>
            <remarks>
            The calling application can call IFileDialog::SetFolder during this callback to redirect navigation to an alternate folder.
            The actual navigation does not occur until IFileDialogEvents::OnFolderChanging has returned.
            <para>
            If the calling application simply prevents navigation to a particular folder, UI should be displayed with an explanation of
            the restriction. To obtain a parent HWND for the UI, obtain the IOleWindow interface through IFileDialog and call IOleWindow::GetWindow.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileDialogEvents.OnFolderChange(Vanara.PInvoke.Shell32.IFileDialog)">
            <summary>Called when the user navigates to a new folder.</summary>
            <param name="pfd">A pointer to the interface that represents the dialog.</param>
            <returns>If this method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileDialogEvents.OnSelectionChange(Vanara.PInvoke.Shell32.IFileDialog)">
            <summary>Called when the user changes the selection in the dialog's view.</summary>
            <param name="pfd">A pointer to the interface that represents the dialog.</param>
            <returns>If this method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileDialogEvents.OnShareViolation(Vanara.PInvoke.Shell32.IFileDialog,Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.Shell32.FDE_SHAREVIOLATION_RESPONSE@)">
            <summary>Enables an application to respond to sharing violations that arise from Open or Save operations.</summary>
            <param name="pfd">A pointer to the interface that represents the dialog.</param>
            <param name="psi">A pointer to the interface that represents the item that has the sharing violation.</param>
            <param name="pResponse">
            A pointer to a value from the FDE_SHAREVIOLATION_RESPONSE enumeration indicating the response to the sharing violation.
            </param>
            <returns>
            The implementer should return E_NOTIMPL if this method is not implemented; S_OK or an appropriate error code otherwise.
            </returns>
            <remarks>
            The FOS_SHAREAWARE flag must be set through IFileDialog::SetOptions before this method is called.
            <para>
            A sharing violation could possibly arise when the application attempts to open a file, because the file could have been
            locked between the time that the dialog tested it and the application opened it.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileDialogEvents.OnTypeChange(Vanara.PInvoke.Shell32.IFileDialog)">
            <summary>Called when the dialog is opened to notify the application of the initial chosen filetype.</summary>
            <param name="pfd">A pointer to the interface that represents the dialog.</param>
            <returns>If this method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <remarks>
            This method is called when the dialog is opened to notify the application of the initially chosen filetype. If the
            application has code in IFileDialogEvents that responds to type changes, it can respond to the type. For example, it could
            hide certain controls. The application controls the initial file type and could do its own checks, so this method is
            provided as a convenience.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileDialogEvents.OnOverwrite(Vanara.PInvoke.Shell32.IFileDialog,Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.Shell32.FDE_SHAREVIOLATION_RESPONSE@)">
            <summary>Called from the save dialog when the user chooses to overwrite a file.</summary>
            <param name="pfd">A pointer to the interface that represents the dialog.</param>
            <param name="psi">A pointer to the interface that represents the item that will be overwritten.</param>
            <param name="pResponse">
            A pointer to a value from the FDE_OVERWRITE_RESPONSE enumeration indicating the response to the potential overwrite action.
            </param>
            <returns>
            The implementer should return E_NOTIMPL if this method is not implemented; S_OK or an appropriate error code otherwise.
            </returns>
            <remarks>The FOS_OVERWRITEPROMPT flag must be set through IFileDialog::SetOptions before this method is called.</remarks>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IFileOpenDialog">
            <summary>Extends the IFileDialog interface by adding methods specific to the open dialog.</summary>
            <seealso cref="T:Vanara.PInvoke.Shell32.IFileDialog"/>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileOpenDialog.Show(Vanara.PInvoke.HWND)">
            <summary>Launches the modal window.</summary>
            <param name="parent">The handle of the owner window. This value can be NULL.</param>
            <returns>
            If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code, including the following:
            HRESULT_FROM_WIN32(ERROR_CANCELLED) = The user closed the window by canceling the operation.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileOpenDialog.SetFileTypes(System.UInt32,Vanara.PInvoke.Shell32.COMDLG_FILTERSPEC[])">
            <summary>Sets the file types that the dialog can open or save.</summary>
            <param name="cFileTypes">The number of elements in the array specified by rgFilterSpec.</param>
            <param name="rgFilterSpec">A pointer to an array of COMDLG_FILTERSPEC structures, each representing a file type.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileOpenDialog.SetFileTypeIndex(System.UInt32)">
            <summary>Sets the file type that appears as selected in the dialog.</summary>
            <param name="iFileType">
            The index of the file type in the file type array passed to IFileDialog::SetFileTypes in its cFileTypes parameter. Note that
            this is a one-based index, not zero-based.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileOpenDialog.GetFileTypeIndex">
            <summary>Gets the currently selected file type.</summary>
            <returns>
            A UINT value that receives the index of the selected file type in the file type array passed to IFileDialog::SetFileTypes in
            its cFileTypes parameter.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileOpenDialog.Advise(Vanara.PInvoke.Shell32.IFileDialogEvents)">
            <summary>Assigns an event handler that listens for events coming from the dialog.</summary>
            <param name="pfde">A pointer to an IFileDialogEvents implementation that will receive events from the dialog.</param>
            <returns>
            A DWORD value identifying this event handler. When the client is finished with the dialog, that client must call the
            IFileDialog::Unadvise method with this value.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileOpenDialog.Unadvise(System.UInt32)">
            <summary>Removes an event handler that was attached through the IFileDialog::Advise method.</summary>
            <param name="dwCookie">
            The DWORD value that represents the event handler. This value is obtained through the pdwCookie parameter of the
            IFileDialog::Advise method.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileOpenDialog.SetOptions(Vanara.PInvoke.Shell32.FILEOPENDIALOGOPTIONS)">
            <summary>Sets flags to control the behavior of the dialog.</summary>
            <param name="fos">One or more of the FILEOPENDIALOGOPTIONS values.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileOpenDialog.GetOptions">
            <summary>Gets the current flags that are set to control dialog behavior.</summary>
            <returns>
            When this method returns successfully, points to a value made up of one or more of the FILEOPENDIALOGOPTIONS values.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileOpenDialog.SetDefaultFolder(Vanara.PInvoke.Shell32.IShellItem)">
            <summary>Sets the folder used as a default if there is not a recently used folder value available.</summary>
            <param name="psi">A pointer to the interface that represents the folder.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileOpenDialog.SetFolder(Vanara.PInvoke.Shell32.IShellItem)">
            <summary>Sets a folder that is always selected when the dialog is opened, regardless of previous user action.</summary>
            <param name="psi">A pointer to the interface that represents the folder.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileOpenDialog.GetFolder">
            <summary>
            Gets either the folder currently selected in the dialog, or, if the dialog is not currently displayed, the folder that is to
            be selected when the dialog is opened.
            </summary>
            <returns>The address of a pointer to the interface that represents the folder.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileOpenDialog.GetCurrentSelection">
            <summary>Gets the user's current selection in the dialog.</summary>
            <returns>
            The address of a pointer to the interface that represents the item currently selected in the dialog. This item can be a file
            or folder selected in the view window, or something that the user has entered into the dialog's edit box. The latter case
            may require a parsing operation (cancelable by the user) that blocks the current thread.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileOpenDialog.SetFileName(System.String)">
            <summary>Sets the file name that appears in the File name edit box when that dialog box is opened.</summary>
            <param name="pszName">A pointer to the name of the file.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileOpenDialog.GetFileName">
            <summary>Retrieves the text currently entered in the dialog's File name edit box.</summary>
            <returns>The address of a pointer to a buffer that, when this method returns successfully, receives the text.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileOpenDialog.SetTitle(System.String)">
            <summary>Sets the title of the dialog.</summary>
            <param name="pszTitle">A pointer to a buffer that contains the title text.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileOpenDialog.SetOkButtonLabel(System.String)">
            <summary>Sets the text of the Open or Save button.</summary>
            <param name="pszText">A pointer to a buffer that contains the button text.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileOpenDialog.SetFileNameLabel(System.String)">
            <summary>Sets the text of the label next to the file name edit box.</summary>
            <param name="pszLabel">A pointer to a buffer that contains the label text.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileOpenDialog.GetResult">
            <summary>Gets the choice that the user made in the dialog.</summary>
            <returns>The address of a pointer to an IShellItem that represents the user's choice.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileOpenDialog.AddPlace(Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.Shell32.FDAP)">
            <summary>Adds a folder to the list of places available for the user to open or save items.</summary>
            <param name="psi">
            A pointer to an IShellItem that represents the folder to be made available to the user. This can only be a folder.
            </param>
            <param name="fdap">Specifies where the folder is placed within the list.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileOpenDialog.SetDefaultExtension(System.String)">
            <summary>Sets the default extension to be added to file names.</summary>
            <param name="pszDefaultExtension">
            A pointer to a buffer that contains the extension text. This string should not include a leading period. For example, "jpg"
            is correct, while ".jpg" is not.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileOpenDialog.Close(Vanara.PInvoke.HRESULT)">
            <summary>Closes the dialog.</summary>
            <param name="hr">The code that will be returned by Show to indicate that the dialog was closed before a selection was made.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileOpenDialog.SetClientGuid(System.Guid@)">
            <summary>Enables a calling application to associate a GUID with a dialog's persisted state.</summary>
            <param name="guid">The GUID to associate with this dialog state.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileOpenDialog.ClearClientData">
            <summary>Instructs the dialog to clear all persisted state information.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileOpenDialog.SetFilter(System.Object)">
            <summary>Sets the filter. <note>Deprecated. SetFilter is no longer available for use as of Windows 7.</note></summary>
            <param name="pFilter">A pointer to the IShellItemFilter that is to be set.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileOpenDialog.GetResults">
            <summary>Gets the user's choices in a dialog that allows multiple selection.</summary>
            <returns>The address of a pointer to an IShellItemArray through which the items selected in the dialog can be accessed.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileOpenDialog.GetSelectedItems">
            <summary>
            Gets the currently selected items in the dialog. These items may be items selected in the view, or text selected in the file
            name edit box.
            </summary>
            <returns>The address of a pointer to an IShellItemArray through which the selected items can be accessed.</returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IFileOperationProgressSink">
            <summary>
            Exposes methods that provide a rich notification system used by callers of IFileOperation to monitor the details of the
            operations they are performing through that interface.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.StartOperations">
            <summary>Performs caller-implemented actions before any specific file operations are performed.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.FinishOperations(Vanara.PInvoke.HRESULT)">
            <summary>Performs caller-implemented actions after the last operation performed by the call to IFileOperation is complete.</summary>
            <param name="hrResult">
            The return value of the final operation. Note that this is not the HRESULT returned by one of the IFileOperation methods,
            which simply queue the operations. Instead, this is the result of the actual operation, such as copy, delete, or move.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.PreRenameItem(Vanara.PInvoke.Shell32.TRANSFER_SOURCE_FLAGS,Vanara.PInvoke.Shell32.IShellItem,System.String)">
            <summary>Performs caller-implemented actions before the rename process for each item begins.</summary>
            <param name="dwFlags">
            bitwise value that contains flags that control the operation. See TRANSFER_SOURCE_FLAGS for flag descriptions.
            </param>
            <param name="psiItem">Pointer to an IShellItem that specifies the item to be renamed.</param>
            <param name="pszNewName">Pointer to the new display name of the item. This is a null-terminated, Unicode string.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.PostRenameItem(Vanara.PInvoke.Shell32.TRANSFER_SOURCE_FLAGS,Vanara.PInvoke.Shell32.IShellItem,System.String,Vanara.PInvoke.HRESULT,Vanara.PInvoke.Shell32.IShellItem)">
            <summary>Performs caller-implemented actions after the rename process for each item is complete.</summary>
            <param name="dwFlags">
            bitwise value that contains flags that were used during the rename operation. Some values can be set or changed during the
            rename operation. See TRANSFER_SOURCE_FLAGS for flag descriptions.
            </param>
            <param name="psiItem">Pointer to an IShellItem that specifies the item before it was renamed.</param>
            <param name="pszNewName">
            Pointer to the new display name of the item. This is a null-terminated, Unicode string. Note that this might not be the name
            that you asked for, given collisions and other naming rules.
            </param>
            <param name="hrRename">
            The return value of the rename operation. Note that this is not the HRESULT returned by RenameItem, which simply queues the
            rename operation. Instead, this is the result of the actual rename operation.
            </param>
            <param name="psiNewlyCreated">Pointer to an IShellItem that represents the item with its new name.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.PreMoveItem(Vanara.PInvoke.Shell32.TRANSFER_SOURCE_FLAGS,Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.Shell32.IShellItem,System.String)">
            <summary>Performs caller-implemented actions before the move process for each item begins.</summary>
            <param name="dwFlags">
            bitwise value that contains flags that control the operation. See TRANSFER_SOURCE_FLAGS for flag descriptions.
            </param>
            <param name="psiItem">Pointer to an IShellItem that specifies the item to be moved.</param>
            <param name="psiDestinationFolder">
            Pointer to an IShellItem that specifies the destination folder to contain the moved item.
            </param>
            <param name="pszNewName">
            Pointer to a new name for the item in its new location. This is a null-terminated Unicode string and can be NULL. If NULL,
            the name of the destination item is the same as the source.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.PostMoveItem(Vanara.PInvoke.Shell32.TRANSFER_SOURCE_FLAGS,Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.Shell32.IShellItem,System.String,Vanara.PInvoke.HRESULT,Vanara.PInvoke.Shell32.IShellItem)">
            <summary>Performs caller-implemented actions after the move process for each item is complete.</summary>
            <param name="dwFlags">
            bitwise value that contains flags that were used during the move operation. Some values can be set or changed during the
            move operation. See TRANSFER_SOURCE_FLAGS for flag descriptions.
            </param>
            <param name="psiItem">Pointer to an IShellItem that specifies the source item.</param>
            <param name="psiDestinationFolder">
            Pointer to an IShellItem that specifies the destination folder that contains the moved item.
            </param>
            <param name="pszNewName">
            Pointer to the name that was given to the item after it was moved. This is a null-terminated Unicode string. Note that this
            might not be the name that you asked for, given collisions and other naming rules.
            </param>
            <param name="hrMove">
            The return value of the move operation. Note that this is not the HRESULT returned by MoveItem, which simply queues the move
            operation. Instead, this is the result of the actual move.
            </param>
            <param name="psiNewlyCreated">Pointer to an IShellItem that represents the moved item in its new location.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.PreCopyItem(Vanara.PInvoke.Shell32.TRANSFER_SOURCE_FLAGS,Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.Shell32.IShellItem,System.String)">
            <summary>Performs caller-implemented actions before the copy process for each item begins.</summary>
            <param name="dwFlags">
            bitwise value that contains flags that control the operation. See TRANSFER_SOURCE_FLAGS for flag descriptions.
            </param>
            <param name="psiItem">Pointer to an IShellItem that specifies the source item.</param>
            <param name="psiDestinationFolder">
            Pointer to an IShellItem that specifies the destination folder to contain the copy of the item.
            </param>
            <param name="pszNewName">
            Pointer to a new name for the item after it has been copied. This is a null-terminated Unicode string and can be NULL. If
            NULL, the name of the destination item is the same as the source.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.PostCopyItem(Vanara.PInvoke.Shell32.TRANSFER_SOURCE_FLAGS,Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.Shell32.IShellItem,System.String,Vanara.PInvoke.HRESULT,Vanara.PInvoke.Shell32.IShellItem)">
            <summary>Performs caller-implemented actions after the copy process for each item is complete.</summary>
            <param name="dwFlags">
            bitwise value that contains flags that were used during the copy operation. Some values can be set or changed during the
            copy operation. See TRANSFER_SOURCE_FLAGS for flag descriptions.
            </param>
            <param name="psiItem">Pointer to an IShellItem that specifies the source item.</param>
            <param name="psiDestinationFolder">
            Pointer to an IShellItem that specifies the destination folder to which the item was copied.
            </param>
            <param name="pszNewName">
            Pointer to the new name that was given to the item after it was copied. This is a null-terminated Unicode string. Note that
            this might not be the name that you asked for, given collisions and other naming rules.
            </param>
            <param name="hrCopy">
            The return value of the copy operation. Note that this is not the HRESULT returned by CopyItem, which simply queues the copy
            operation. Instead, this is the result of the actual copy.
            </param>
            <param name="psiNewlyCreated">Pointer to an IShellItem that represents the new copy of the item.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.PreDeleteItem(Vanara.PInvoke.Shell32.TRANSFER_SOURCE_FLAGS,Vanara.PInvoke.Shell32.IShellItem)">
            <summary>Performs caller-implemented actions before the delete process for each item begins.</summary>
            <param name="dwFlags">
            bitwise value that contains flags that control the operation. See TRANSFER_SOURCE_FLAGS for flag descriptions.
            </param>
            <param name="psiItem">Pointer to an IShellItem that specifies the item to be deleted.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.PostDeleteItem(Vanara.PInvoke.Shell32.TRANSFER_SOURCE_FLAGS,Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.HRESULT,Vanara.PInvoke.Shell32.IShellItem)">
            <summary>Performs caller-implemented actions after the delete process for each item is complete.</summary>
            <param name="dwFlags">
            bitwise value that contains flags that were used during the delete operation. Some values can be set or changed during the
            delete operation. See TRANSFER_SOURCE_FLAGS for flag descriptions.
            </param>
            <param name="psiItem">Pointer to an IShellItem that specifies the item that was deleted.</param>
            <param name="hrDelete">
            The return value of the delete operation. Note that this is not the HRESULT returned by DeleteItem, which simply queues the
            delete operation. Instead, this is the result of the actual deletion.
            </param>
            <param name="psiNewlyCreated">
            A pointer to an IShellItem that specifies the deleted item, now in the Recycle Bin. If the item was fully deleted, this
            value is NULL.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.PreNewItem(Vanara.PInvoke.Shell32.TRANSFER_SOURCE_FLAGS,Vanara.PInvoke.Shell32.IShellItem,System.String)">
            <summary>Performs caller-implemented actions before the process to create a new item begins.</summary>
            <param name="dwFlags">
            bitwise value that contains flags that control the operation. See TRANSFER_SOURCE_FLAGS for flag descriptions.
            </param>
            <param name="psiDestinationFolder">
            Pointer to an IShellItem that specifies the destination folder that will contain the new item.
            </param>
            <param name="pszNewName">
            Pointer to the file name of the new item, for instance Newfile.txt. This is a null-terminated, Unicode string.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.PostNewItem(Vanara.PInvoke.Shell32.TRANSFER_SOURCE_FLAGS,Vanara.PInvoke.Shell32.IShellItem,System.String,System.String,System.UInt32,Vanara.PInvoke.HRESULT,Vanara.PInvoke.Shell32.IShellItem)">
            <summary>Performs caller-implemented actions after the new item is created.</summary>
            <param name="dwFlags">
            bitwise value that contains flags that were used during the creation operation. Some values can be set or changed during the
            creation operation. See TRANSFER_SOURCE_FLAGS for flag descriptions.
            </param>
            <param name="psiDestinationFolder">
            Pointer to an IShellItem that specifies the destination folder to which the new item was added.
            </param>
            <param name="pszNewName">
            Pointer to the file name of the new item, for instance Newfile.txt. This is a null-terminated, Unicode string.
            </param>
            <param name="pszTemplateName">
            Pointer to the name of the template file (for example Excel9.xls) that the new item is based on, stored in one of the
            following locations:
            <list type="bullet">
            <item>
            <description>CSIDL_COMMON_TEMPLATES. The default path for this folder is %ALLUSERSPROFILE%\Templates.</description>
            </item>
            <item>
            <description>CSIDL_TEMPLATES. The default path for this folder is %USERPROFILE%\Templates.</description>
            </item>
            <item>
            <description>%SystemRoot%\shellnew</description>
            </item>
            </list>
            <para>
            This is a null-terminated, Unicode string used to specify an existing file of the same type as the new file, containing the
            minimal content that an application wants to include in any new file.
            </para>
            <para>This parameter is normally NULL to specify a new, blank file.</para>
            </param>
            <param name="dwFileAttributes">The file attributes applied to the new item. One or more of the values found at GetFileAttributes.</param>
            <param name="hrNew">
            The return value of the creation operation. Note that this is not the HRESULT returned by NewItem, which simply queues the
            creation operation. Instead, this is the result of the actual creation.
            </param>
            <param name="psiNewItem">Pointer to an IShellItem that represents the new item.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.UpdateProgress(System.UInt32,System.UInt32)">
            <summary>Updates the progress.</summary>
            <param name="iWorkTotal">The i work total.</param>
            <param name="iWorkSoFar">The i work so far.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.ResetTimer">
            <summary>Resets the timer.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.PauseTimer">
            <summary>Pauses the timer.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.ResumeTimer">
            <summary>Resumes the timer.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IFileSaveDialog">
            <summary>
            Extends the IFileDialog interface by adding methods specific to the save dialog, which include those that provide support for
            the collection of metadata to be persisted with the file.
            </summary>
            <seealso cref="T:Vanara.PInvoke.Shell32.IFileDialog"/>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileSaveDialog.Show(Vanara.PInvoke.HWND)">
            <summary>Launches the modal window.</summary>
            <param name="parent">The handle of the owner window. This value can be NULL.</param>
            <returns>
            If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code, including the following:
            HRESULT_FROM_WIN32(ERROR_CANCELLED) = The user closed the window by canceling the operation.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileSaveDialog.SetFileTypes(System.UInt32,Vanara.PInvoke.Shell32.COMDLG_FILTERSPEC[])">
            <summary>Sets the file types that the dialog can open or save.</summary>
            <param name="cFileTypes">The number of elements in the array specified by rgFilterSpec.</param>
            <param name="rgFilterSpec">A pointer to an array of COMDLG_FILTERSPEC structures, each representing a file type.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileSaveDialog.SetFileTypeIndex(System.UInt32)">
            <summary>Sets the file type that appears as selected in the dialog.</summary>
            <param name="iFileType">
            The index of the file type in the file type array passed to IFileDialog::SetFileTypes in its cFileTypes parameter. Note that
            this is a one-based index, not zero-based.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileSaveDialog.GetFileTypeIndex">
            <summary>Gets the currently selected file type.</summary>
            <returns>
            A UINT value that receives the index of the selected file type in the file type array passed to IFileDialog::SetFileTypes in
            its cFileTypes parameter.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileSaveDialog.Advise(Vanara.PInvoke.Shell32.IFileDialogEvents)">
            <summary>Assigns an event handler that listens for events coming from the dialog.</summary>
            <param name="pfde">A pointer to an IFileDialogEvents implementation that will receive events from the dialog.</param>
            <returns>
            A DWORD value identiying this event handler. When the client is finished with the dialog, that client must call the
            IFileDialog::Unadvise method with this value.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileSaveDialog.Unadvise(System.UInt32)">
            <summary>Removes an event handler that was attached through the IFileDialog::Advise method.</summary>
            <param name="dwCookie">
            The DWORD value that represents the event handler. This value is obtained through the pdwCookie parameter of the
            IFileDialog::Advise method.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileSaveDialog.SetOptions(Vanara.PInvoke.Shell32.FILEOPENDIALOGOPTIONS)">
            <summary>Sets flags to control the behavior of the dialog.</summary>
            <param name="fos">One or more of the FILEOPENDIALOGOPTIONS values.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileSaveDialog.GetOptions">
            <summary>Gets the current flags that are set to control dialog behavior.</summary>
            <returns>
            When this method returns successfully, points to a value made up of one or more of the FILEOPENDIALOGOPTIONS values.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileSaveDialog.SetDefaultFolder(Vanara.PInvoke.Shell32.IShellItem)">
            <summary>Sets the folder used as a default if there is not a recently used folder value available.</summary>
            <param name="psi">A pointer to the interface that represents the folder.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileSaveDialog.SetFolder(Vanara.PInvoke.Shell32.IShellItem)">
            <summary>Sets a folder that is always selected when the dialog is opened, regardless of previous user action.</summary>
            <param name="psi">A pointer to the interface that represents the folder.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileSaveDialog.GetFolder">
            <summary>
            Gets either the folder currently selected in the dialog, or, if the dialog is not currently displayed, the folder that is to
            be selected when the dialog is opened.
            </summary>
            <returns>The address of a pointer to the interface that represents the folder.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileSaveDialog.GetCurrentSelection">
            <summary>Gets the user's current selection in the dialog.</summary>
            <returns>
            The address of a pointer to the interface that represents the item currently selected in the dialog. This item can be a file
            or folder selected in the view window, or something that the user has entered into the dialog's edit box. The latter case
            may require a parsing operation (cancelable by the user) that blocks the current thread.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileSaveDialog.SetFileName(System.String)">
            <summary>Sets the file name that appears in the File name edit box when that dialog box is opened.</summary>
            <param name="pszName">A pointer to the name of the file.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileSaveDialog.GetFileName">
            <summary>Retrieves the text currently entered in the dialog's File name edit box.</summary>
            <returns>The address of a pointer to a buffer that, when this method returns successfully, receives the text.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileSaveDialog.SetTitle(System.String)">
            <summary>Sets the title of the dialog.</summary>
            <param name="pszTitle">A pointer to a buffer that contains the title text.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileSaveDialog.SetOkButtonLabel(System.String)">
            <summary>Sets the text of the Open or Save button.</summary>
            <param name="pszText">A pointer to a buffer that contains the button text.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileSaveDialog.SetFileNameLabel(System.String)">
            <summary>Sets the text of the label next to the file name edit box.</summary>
            <param name="pszLabel">A pointer to a buffer that contains the label text.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileSaveDialog.GetResult">
            <summary>Gets the choice that the user made in the dialog.</summary>
            <returns>The address of a pointer to an IShellItem that represents the user's choice.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileSaveDialog.AddPlace(Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.Shell32.FDAP)">
            <summary>Adds a folder to the list of places available for the user to open or save items.</summary>
            <param name="psi">
            A pointer to an IShellItem that represents the folder to be made available to the user. This can only be a folder.
            </param>
            <param name="fdap">Specifies where the folder is placed within the list.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileSaveDialog.SetDefaultExtension(System.String)">
            <summary>Sets the default extension to be added to file names.</summary>
            <param name="pszDefaultExtension">
            A pointer to a buffer that contains the extension text. This string should not include a leading period. For example, "jpg"
            is correct, while ".jpg" is not.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileSaveDialog.Close(Vanara.PInvoke.HRESULT)">
            <summary>Closes the dialog.</summary>
            <param name="hr">The code that will be returned by Show to indicate that the dialog was closed before a selection was made.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileSaveDialog.SetClientGuid(System.Guid@)">
            <summary>Enables a calling application to associate a GUID with a dialog's persisted state.</summary>
            <param name="guid">The GUID to associate with this dialog state.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileSaveDialog.ClearClientData">
            <summary>Instructs the dialog to clear all persisted state information.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileSaveDialog.SetFilter(System.Object)">
            <summary>Sets the filter. <note>Deprecated. SetFilter is no longer available for use as of Windows 7.</note></summary>
            <param name="pFilter">A pointer to the IShellItemFilter that is to be set.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileSaveDialog.SetSaveAsItem(Vanara.PInvoke.Shell32.IShellItem)">
            <summary>Sets an item to be used as the initial entry in a Save As dialog.</summary>
            <param name="psi">Pointer to an IShellItem that represents the item.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileSaveDialog.SetProperties(Vanara.PInvoke.PropSys.IPropertyStore)">
            <summary>Provides a property store that defines the default values to be used for the item being saved.</summary>
            <param name="pStore">Pointer to the interface that represents the property store that contains the associated metadata.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileSaveDialog.SetCollectedProperties(Vanara.PInvoke.PropSys.IPropertyDescriptionList,System.Boolean)">
            <summary>Specifies which properties will be collected in the save dialog.</summary>
            <param name="pList">Pointer to the interface that represents the list of properties to collect. This parameter can be NULL.</param>
            <param name="fAppendDefault">
            TRUE to show default properties for the currently selected filetype in addition to the properties specified by pList. FALSE
            to show only properties specified by pList.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileSaveDialog.GetProperties">
            <summary>Retrieves the set of property values for a saved item or an item in the process of being saved.</summary>
            <returns>Address of a pointer to an IPropertyStore that receives the property values.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileSaveDialog.ApplyProperties(Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.PropSys.IPropertyStore,Vanara.PInvoke.HWND,Vanara.PInvoke.Shell32.IFileOperationProgressSink)">
            <summary>Applies a set of properties to an item using the Shell's copy engine.</summary>
            <param name="psi">
            Pointer to the IShellItem that represents the file being saved. This is usually the item retrieved by GetResult.
            </param>
            <param name="pStore">
            Pointer to the IPropertyStore that represents the property values to be applied to the file. This can be the property store
            returned by IFileSaveDialog::GetProperties.
            </param>
            <param name="hwnd">The handle of the application window.</param>
            <param name="pSink">
            Pointer to an optional IFileOperationProgressSink that the calling application can use if they want to be notified of the
            progress of the property stamping. This value may be NULL.
            </param>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IFileSyncMergeHandler">
            <summary>Exposed methods to handle file sync operations between a local copy and a server copy of a file.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileSyncMergeHandler.Merge(System.String,System.String,Vanara.PInvoke.Shell32.MERGE_UPDATE_STATUS@)">
            <summary>Merges changes between the local copy and server copy of a file.</summary>
            <param name="localFilePath">
            <para>Type: <c>LPCWSTR</c></para>
            <para>A pointer to a string containing the path to the local copy of the file.</para>
            </param>
            <param name="serverFilePath">
            <para>Type: <c>LPCWSTR</c></para>
            <para>A pointer to a string containing the network path to the server copy of the file.</para>
            </param>
            <param name="updateStatus">
            <para>Type: <c>MERGE_UPDATE_STATUS*</c></para>
            <para>When this method returns, contains a pointer to one of the following values indicating status of the merge process.</para>
            <para>MUS_COMPLETE</para>
            <para>Indicates that the process has completed successfully.</para>
            <para>MUS_USERINPUTNEEDED</para>
            <para>Indicates that additional input is required by the user for the process to complete.</para>
            <para>MUS_FAILED</para>
            <para>Indicates that the process has failed.</para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileSyncMergeHandler.ShowResolveConflictUIAsync(System.String,Vanara.PInvoke.HMONITOR)">
            <summary>Displays a UI to resolve conflicts between the local copy and server copy of a file.</summary>
            <param name="localFilePath">
            <para>Type: <c>LPCWSTR</c></para>
            <para>The path of the file with the merge conflict.</para>
            </param>
            <param name="monitorToDisplayOn">
            <para>Type: <c>HMONITOR</c></para>
            <para>Indicates the monitor on which to display the UI.</para>
            </param>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IModalWindow">
            <summary>Exposes a method that represents a modal window. This interface is used in the Windows XP Passport Wizard.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IModalWindow.Show(Vanara.PInvoke.HWND)">
            <summary>Launches the modal window.</summary>
            <param name="parent">The handle of the owner window. This value can be NULL.</param>
            <returns>
            If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code, including the following:
            HRESULT_FROM_WIN32(ERROR_CANCELLED) = The user closed the window by cancelling the operation.
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.COMDLG_FILTERSPEC">
            <summary>Used generically to filter elements.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.COMDLG_FILTERSPEC.pszName">
            <summary>A pointer to a buffer that contains the friendly name of the filter.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.COMDLG_FILTERSPEC.pszSpec">
            <summary>A pointer to a buffer that contains the filter pattern.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.CFileOpenDialog">
            <summary>Class interface for ITaskbarList and derivatives.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.CFileSaveDialog">
            <summary>Class interface for ITaskbarList and derivatives.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.FILEOP_FLAGS">
            <summary>Flags that control the file operation.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FILEOP_FLAGS.FOF_MULTIDESTFILES">
            <summary>
            The pTo member specifies multiple destination files (one for each source file in pFrom) rather than one directory where all
            source files are to be deposited.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FILEOP_FLAGS.FOF_CONFIRMMOUSE">
            <summary>Not implemented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FILEOP_FLAGS.FOF_SILENT">
            <summary>Do not display a progress dialog box.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FILEOP_FLAGS.FOF_RENAMEONCOLLISION">
            <summary>
            Give the item being operated on a new name in a move, copy, or rename operation if an item with the target name already exists.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FILEOP_FLAGS.FOF_NOCONFIRMATION">
            <summary>Respond with Yes to All for any dialog box that is displayed.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FILEOP_FLAGS.FOF_WANTMAPPINGHANDLE">
            <summary>
            If FOF_RENAMEONCOLLISION is specified and any files were renamed, assign a name mapping object that contains their old and
            new names to the hNameMappings member. This object must be freed using SHFreeNameMappings when it is no longer needed.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FILEOP_FLAGS.FOF_ALLOWUNDO">
            <summary>
            Preserve undo information, if possible.
            <para>Prior to Windows Vista, operations could be undone only from the same process that performed the original operation.</para>
            <para>
            In Windows Vista and later systems, the scope of the undo is a user session. Any process running in the user session can undo
            another operation. The undo state is held in the Explorer.exe process, and as long as that process is running, it can
            coordinate the undo functions.
            </para>
            <para>If the source file parameter does not contain fully qualified path and file names, this flag is ignored.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FILEOP_FLAGS.FOF_FILESONLY">
            <summary>Perform the operation only on files (not on folders) if a wildcard file name (*.*) is specified.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FILEOP_FLAGS.FOF_SIMPLEPROGRESS">
            <summary>Display a progress dialog box but do not show individual file names as they are operated on.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FILEOP_FLAGS.FOF_NOCONFIRMMKDIR">
            <summary>Do not confirm the creation of a new folder if the operation requires one to be created.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FILEOP_FLAGS.FOF_NOERRORUI">
            <summary>
            Do not display a message to the user if an error occurs. If this flag is set without FOFX_EARLYFAILURE, any error is treated
            as if the user had chosen Ignore or Continue in a dialog box. It halts the current action, sets a flag to indicate that an
            action was aborted, and proceeds with the rest of the operation.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FILEOP_FLAGS.FOF_NOCOPYSECURITYATTRIBS">
            <summary>Do not copy the security attributes of the item.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FILEOP_FLAGS.FOF_NORECURSION">
            <summary>Only operate in the local folder. Do not operate recursively into subdirectories.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FILEOP_FLAGS.FOF_NO_CONNECTED_ELEMENTS">
            <summary>Do not move connected items as a group. Only move the specified files.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FILEOP_FLAGS.FOF_WANTNUKEWARNING">
            <summary>
            Send a warning if a file or folder is being destroyed during a delete operation rather than recycled. This flag partially
            overrides FOF_NOCONFIRMATION.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FILEOP_FLAGS.FOF_NORECURSEREPARSE">
            <summary>Deprecated.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FILEOP_FLAGS.FOF_NO_UI">
            <summary>Don't display any UI at all.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FILEOP_FLAGS.FOFX_NOSKIPJUNCTIONS">
            <summary>
            Walk into Shell namespace junctions. By default, junctions are not entered. For more information on junctions, see Specifying
            a Namespace Extension's Location.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FILEOP_FLAGS.FOFX_PREFERHARDLINK">
            <summary>If possible, create a hard link rather than a new instance of the file in the destination.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FILEOP_FLAGS.FOFX_SHOWELEVATIONPROMPT">
            <summary>
            If an operation requires elevated rights and the FOF_NOERRORUI flag is set to disable error UI, display a UAC UI prompt nonetheless.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FILEOP_FLAGS.FOFX_RECYCLEONDELETE">
            <summary>
            Introduced in Windows 8. When a file is deleted, send it to the Recycle Bin rather than permanently deleting it.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FILEOP_FLAGS.FOFX_EARLYFAILURE">
            <summary>
            If FOFX_EARLYFAILURE is set together with FOF_NOERRORUI, the entire set of operations is stopped upon encountering any error
            in any operation. This flag is valid only when FOF_NOERRORUI is set.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FILEOP_FLAGS.FOFX_PRESERVEFILEEXTENSIONS">
            <summary>
            Rename collisions in such a way as to preserve file name extensions. This flag is valid only when FOF_RENAMEONCOLLISION is
            also set.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FILEOP_FLAGS.FOFX_KEEPNEWERFILE">
            <summary>
            Keep the newer file or folder, based on the Date Modified property, if a collision occurs. This is done automatically with no
            prompt UI presented to the user.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FILEOP_FLAGS.FOFX_NOCOPYHOOKS">
            <summary>Do not use copy hooks.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FILEOP_FLAGS.FOFX_NOMINIMIZEBOX">
            <summary>Do not allow the progress dialog to be minimized.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FILEOP_FLAGS.FOFX_MOVEACLSACROSSVOLUMES">
            <summary>
            Copy the security attributes of the source item to the destination item when performing a cross-volume move operation.
            Without this flag, the destination item receives the security attributes of its new folder.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FILEOP_FLAGS.FOFX_DONTDISPLAYSOURCEPATH">
            <summary>Do not display the path of the source item in the progress dialog.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FILEOP_FLAGS.FOFX_DONTDISPLAYDESTPATH">
            <summary>Do not display the path of the destination item in the progress dialog.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FILEOP_FLAGS.FOFX_REQUIREELEVATION">
            <summary>
            Introduced in Windows Vista SP1. The user expects a requirement for rights elevation, so do not display a dialog box asking
            for a confirmation of the elevation.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FILEOP_FLAGS.FOFX_ADDUNDORECORD">
            <summary>
            Introduced in Windows 8. The file operation was user-invoked and should be placed on the undo stack. This flag is preferred
            to FOF_ALLOWUNDO.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FILEOP_FLAGS.FOFX_COPYASDOWNLOAD">
            <summary>Introduced in Windows 7. Display a Downloading instead of Copying message in the progress dialog.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FILEOP_FLAGS.FOFX_DONTDISPLAYLOCATIONS">
            <summary>Introduced in Windows 7. Do not display the location line in the progress dialog.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IFileOperation">
            <summary>
            Exposes methods to copy, move, rename, create, and delete Shell items as well as methods to provide progress and error dialogs.
            This interface replaces the SHFileOperation function.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileOperation.Advise(Vanara.PInvoke.Shell32.IFileOperationProgressSink)">
            <summary>Enables a handler to provide status and error information for all operations.</summary>
            <param name="pfops">Pointer to an IFileOperationProgressSink object to be used for progress status and error notifications.</param>
            <returns>
            When this method returns, this parameter points to a returned token that uniquely identifies this connection. The calling
            application uses this token later to delete the connection by passing it to IFileOperation::Unadvise. If the call to Advise
            fails, this value is meaningless.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileOperation.Unadvise(System.UInt32)">
            <summary>Terminates an advisory connection previously established through IFileOperation::Advise.</summary>
            <param name="dwCookie">
            The connection token that identifies the connection to delete. This value was originally retrieved by Advise when the
            connection was made.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileOperation.SetOperationFlags(Vanara.PInvoke.Shell32.FILEOP_FLAGS)">
            <summary>Sets parameters for the current operation.</summary>
            <param name="dwOperationFlags">
            Flags that control the file operation. This member can be a combination of the following flags. FOF flags are defined in
            Shellapi.h and FOFX flags are defined in Shobjidl.h.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileOperation.SetProgressMessage(System.String)">
            <summary>This method is not implemented.</summary>
            <param name="pszMessage">The message.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileOperation.SetProgressDialog(Vanara.PInvoke.Shell32.IOperationsProgressDialog)">
            <summary>Specifies a dialog box used to display the progress of the operation.</summary>
            <param name="popd">Pointer to an IOperationsProgressDialog object that represents the dialog box.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileOperation.SetProperties(Vanara.PInvoke.PropSys.IPropertyChangeArray)">
            <summary>Declares a set of properties and values to be set on an item or items.</summary>
            <param name="pproparray">
            Pointer to an IPropertyChangeArray, which accesses a collection of IPropertyChange objects that specify the properties to be
            set and their new values.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileOperation.SetOwnerWindow(Vanara.PInvoke.HWND)">
            <summary>Sets the parent or owner window for progress and dialog windows.</summary>
            <param name="hwndParent">A handle to the owner window of the operation. This window will receive error messages.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileOperation.ApplyPropertiesToItem(Vanara.PInvoke.Shell32.IShellItem)">
            <summary>Declares a single item whose property values are to be set.</summary>
            <param name="psiItem">Pointer to the item to receive the new property values.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileOperation.ApplyPropertiesToItems(System.Object)">
            <summary>Declares a set of items for which to apply a common set of property values.</summary>
            <param name="punkItems">
            Pointer to the IUnknown of the IShellItemArray, IDataObject, or IEnumShellItems object which represents the group of items.
            You can also point to an IPersistIDList object to represent a single item, effectively accomplishing the same function as IFileOperation::ApplyPropertiesToItem.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileOperation.RenameItem(Vanara.PInvoke.Shell32.IShellItem,System.String,Vanara.PInvoke.Shell32.IFileOperationProgressSink)">
            <summary>Declares a single item that is to be given a new display name.</summary>
            <param name="psiItem">Pointer to an IShellItem that specifies the source item.</param>
            <param name="pszNewName">Pointer to the new display name of the item. This is a null-terminated, Unicode string.</param>
            <param name="pfopsItem">
            Pointer to an IFileOperationProgressSink object to be used for status and failure notifications. If you call
            IFileOperation::Advise for the overall operation, progress status and error notifications for the rename operation are
            included there, so set this parameter to NULL.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileOperation.RenameItems(System.Object,System.String)">
            <summary>Declares a set of items that are to be given a new display name. All items are given the same name.</summary>
            <param name="pUnkItems">
            Pointer to the IUnknown of the IShellItemArray, IDataObject, or IEnumShellItems object which represents the group of items to
            be renamed. You can also point to an IPersistIDList object to represent a single item, effectively accomplishing the same
            function as IFileOperation::RenameItem.
            </param>
            <param name="pszNewName">Pointer to the new display name of the items. This is a null-terminated, Unicode string.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileOperation.MoveItem(Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.Shell32.IShellItem,System.String,Vanara.PInvoke.Shell32.IFileOperationProgressSink)">
            <summary>Declares a single item that is to be moved to a specified destination.</summary>
            <param name="psiItem">Pointer to an IShellItem that specifies the source item.</param>
            <param name="psiDestinationFolder">
            Pointer to an IShellItem that specifies the destination folder to contain the moved item.
            </param>
            <param name="pszNewName">
            Pointer to a new name for the item in its new location. This is a null-terminated Unicode string and can be NULL. If NULL,
            the name of the destination item is the same as the source.
            </param>
            <param name="pfopsItem">
            Pointer to an IFileOperationProgressSink object to be used for progress status and error notifications for this specific move
            operation. If you call IFileOperation::Advise for the overall operation, progress status and error notifications for the move
            operation are included there, so set this parameter to NULL.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileOperation.MoveItems(System.Object,Vanara.PInvoke.Shell32.IShellItem)">
            <summary>Declares a set of items that are to be moved to a specified destination.</summary>
            <param name="punkItems">
            Pointer to the IUnknown of the IShellItemArray, IDataObject, or IEnumShellItems object which represents the group of items to
            be moved. You can also point to an IPersistIDList object to represent a single item, effectively accomplishing the same
            function as IFileOperation::MoveItem.
            </param>
            <param name="psiDestinationFolder">
            Pointer to an IShellItem that specifies the destination folder to contain the moved items.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileOperation.CopyItem(Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.Shell32.IShellItem,System.String,Vanara.PInvoke.Shell32.IFileOperationProgressSink)">
            <summary>Declares a single item that is to be copied to a specified destination.</summary>
            <param name="psiItem">Pointer to an IShellItem that specifies the source item.</param>
            <param name="psiDestinationFolder">
            Pointer to an IShellItem that specifies the destination folder to contain the copy of the item.
            </param>
            <param name="pszCopyName">
            Pointer to a new name for the item after it has been copied. This is a null-terminated Unicode string and can be NULL. If
            NULL, the name of the destination item is the same as the source.
            </param>
            <param name="pfopsItem">
            Pointer to an IFileOperationProgressSink object to be used for progress status and error notifications for this specific copy
            operation. If you call IFileOperation::Advise for the overall operation, progress status and error notifications for the copy
            operation are included there, so set this parameter to NULL.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileOperation.CopyItems(System.Object,Vanara.PInvoke.Shell32.IShellItem)">
            <summary>Declares a set of items that are to be copied to a specified destination.</summary>
            <param name="punkItems">
            Pointer to the IUnknown of the IShellItemArray, IDataObject, or IEnumShellItems object which represents the group of items to
            be copied. You can also point to an IPersistIDList object to represent a single item, effectively accomplishing the same
            function as IFileOperation::CopyItem.
            </param>
            <param name="psiDestinationFolder">
            Pointer to an IShellItem that specifies the destination folder to contain the copy of the items.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileOperation.DeleteItem(Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.Shell32.IFileOperationProgressSink)">
            <summary>Declares a single item that is to be deleted.</summary>
            <param name="psiItem">Pointer to an IShellItem that specifies the item to be deleted.</param>
            <param name="pfopsItem">
            Pointer to an IFileOperationProgressSink object to be used for progress status and error notifications for this specific
            delete operation. If you call IFileOperation::Advise for the overall operation, progress status and error notifications for
            the delete operation are included there, so set this parameter to NULL.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileOperation.DeleteItems(System.Object)">
            <summary>Declares a set of items that are to be deleted.</summary>
            <param name="punkItems">
            Pointer to the IUnknown of the IShellItemArray, IDataObject, or IEnumShellItems object which represents the group of items to
            be deleted. You can also point to an IPersistIDList object to represent a single item, effectively accomplishing the same
            function as IFileOperation::DeleteItem.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileOperation.NewItem(Vanara.PInvoke.Shell32.IShellItem,System.IO.FileAttributes,System.String,System.String,Vanara.PInvoke.Shell32.IFileOperationProgressSink)">
            <summary>Declares a new item that is to be created in a specified location.</summary>
            <param name="psiDestinationFolder">
            Pointer to an IShellItem that specifies the destination folder that will contain the new item.
            </param>
            <param name="dwFileAttributes">
            A bitwise value that specifies the file system attributes for the file or folder. See GetFileAttributes for possible values.
            </param>
            <param name="pszName">
            Pointer to the file name of the new item, for instance Newfile.txt. This is a null-terminated, Unicode string.
            </param>
            <param name="pszTemplateName">
            Pointer to the name of the template file (for example Excel9.xls) that the new item is based on, stored in one of the
            following locations:
            <list type="bullet">
            <item>
            <description>CSIDL_COMMON_TEMPLATES. The default path for this folder is %ALLUSERSPROFILE%\Templates.</description>
            </item>
            <item>
            <description>CSIDL_TEMPLATES. The default path for this folder is %USERPROFILE%\Templates.</description>
            </item>
            <item>
            <description>%SystemRoot%\shellnew</description>
            </item>
            </list>
            <para>
            This is a null-terminated, Unicode string used to specify an existing file of the same type as the new file, containing the
            minimal content that an application wants to include in any new file.
            </para>
            <para>This parameter is normally NULL to specify a new, blank file.</para>
            </param>
            <param name="pfopsItem">
            Pointer to an IFileOperationProgressSink object to be used for status and failure notifications. If you call
            IFileOperation::Advise for the overall operation, progress status and error notifications for the creation operation are
            included there, so set this parameter to NULL.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileOperation.PerformOperations">
            <summary>Executes all selected operations.</summary>
            <remarks>
            This method is called last to execute those actions that have been specified earlier by calling their individual methods. For
            instance, RenameItem does not rename the item, it simply sets the parameters. The actual renaming is done when you call PerformOperations.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFileOperation.GetAnyOperationsAborted">
            <summary>
            Gets a value that states whether any file operations initiated by a call to IFileOperation::PerformOperations were stopped
            before they were complete. The operations could be stopped either by user action or silently by the system.
            </summary>
            <returns>
            When this method returns, points to TRUE if any file operations were aborted before they were complete; otherwise, FALSE.
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.CFileOperations">
            <summary>CLSID_FileOperations</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.MAX_COLUMN_NAME_LEN">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.CM_ENUM_FLAGS">
            <summary>
            <para>
            Used by members of the IColumnManager interface to specify which set of columns are being requested, either all or only those
            currently visible.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CM_ENUM_FLAGS.CM_ENUM_ALL">
            <summary>Enumerate all.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CM_ENUM_FLAGS.CM_ENUM_VISIBLE">
            <summary>Enumerate visible.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.CM_MASK">
            <summary>
            <para>Indicates which values in the CM_COLUMNINFO structure should be set during calls to IColumnManager::SetColumnInfo.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CM_MASK.CM_MASK_WIDTH">
            <summary>The uWidth member is specified.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CM_MASK.CM_MASK_DEFAULTWIDTH">
            <summary>The uDefaultWidth member is specified.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CM_MASK.CM_MASK_IDEALWIDTH">
            <summary>The uIdealWidth member is specified.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CM_MASK.CM_MASK_NAME">
            <summary>The wszName member is specified.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CM_MASK.CM_MASK_STATE">
            <summary>The dwState member is specified.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.CM_SET_WIDTH_VALUE">
            <summary>
            <para>
            Specifies width values in pixels and includes special support for default and autosize. Used by members of the IColumnManager
            interface through the CM_COLUMNINFO structure.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CM_SET_WIDTH_VALUE.CM_WIDTH_USEDEFAULT">
            <summary>Use the default width.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CM_SET_WIDTH_VALUE.CM_WIDTH_AUTOSIZE">
            <summary>Use the auto-size width.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.CM_STATE">
            <summary>
            <para>Specifies column state values. Used by members of the IColumnManager interface through the CM_COLUMNINFO structure.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CM_STATE.CM_STATE_NONE">
            <summary>The column is not currently displayed.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CM_STATE.CM_STATE_VISIBLE">
            <summary>The column is currently displayed.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CM_STATE.CM_STATE_FIXEDWIDTH">
            <summary>The column cannot be resized.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CM_STATE.CM_STATE_NOSORTBYFOLDERNESS">
            <summary>Do not sort folders separately.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CM_STATE.CM_STATE_ALWAYSVISIBLE">
            <summary>The column cannot be hidden.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.FOLDERLOGICALVIEWMODE">
            <summary>
            <para>Used by IFolderViewSettings::GetViewMode and ISearchFolderItemFactory::SetFolderLogicalViewMode to describe the view mode.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERLOGICALVIEWMODE.FLVM_UNSPECIFIED">
            <summary>The view is not specified.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERLOGICALVIEWMODE.FLVM_FIRST">
            <summary>The minimum valid enumeration value. Used for validation purposes only.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERLOGICALVIEWMODE.FLVM_DETAILS">
            <summary>Details view.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERLOGICALVIEWMODE.FLVM_TILES">
            <summary>Tiles view.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERLOGICALVIEWMODE.FLVM_ICONS">
            <summary>Icons view.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERLOGICALVIEWMODE.FLVM_LIST">
            <summary>Windows 7 and later. List view.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERLOGICALVIEWMODE.FLVM_CONTENT">
            <summary>Windows 7 and later. Content view.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERLOGICALVIEWMODE.FLVM_LAST">
            <summary>The maximum valid enumeration value. Used for validation purposes only.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.FVTEXTTYPE">
            <summary>Flags for <see cref="M:Vanara.PInvoke.Shell32.IFolderView2.SetText(Vanara.PInvoke.Shell32.FVTEXTTYPE,System.String)"/>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FVTEXTTYPE.FVST_EMPTYTEXT">
            <summary>Set the text to display when there are no items in the view.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.SORTDIRECTION">
            <summary>The direction in which the items are sorted.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SORTDIRECTION.SORT_DESCENDING">
            <summary>
            The items are sorted in ascending order. Whether the sort is alphabetical, numerical, and so on, is determined by the data
            type of the column indicated in <see cref="F:Vanara.PInvoke.Shell32.SORTCOLUMN.propkey"/>.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SORTDIRECTION.SORT_ASCENDING">
            <summary>
            The items are sorted in descending order. Whether the sort is alphabetical, numerical, and so on, is determined by the data
            type of the column indicated in <see cref="F:Vanara.PInvoke.Shell32.SORTCOLUMN.propkey"/>.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IColumnManager">
            <summary>
            Exposes methods that enable inspection and manipulation of columns in the Windows Explorer Details view. Each column is
            referenced by a PROPERTYKEY structure, which names a property.
            </summary>
            <remarks>
            <para>
            This interface can be accessed even when the Windows Explorer window is in a non-column view mode such as icons, thumbnails, or
            tiles. It affects those views, as well as views in which the column header control displays the set of columns to which
            <c>IColumnManager</c> provides access.
            </para>
            <para>
            The default implementation of the Windows Explorer view object, created by SHCreateShellFolderViewEx, supports this interface
            retrieved through QueryInterface. Code that runs in the Windows Explorer (such as view callbacks, context menus or drop targets)
            can access the view object using IServiceProvider::QueryService, querying for <c>SID_SFolderView</c>.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IColumnManager.SetColumnInfo(Vanara.PInvoke.Ole32.PROPERTYKEY@,Vanara.PInvoke.Shell32.CM_COLUMNINFO@)">
            <summary>Sets the state for a specified column.</summary>
            <param name="propkey">
            <para>Type: <c>REFPROPERTYKEY</c></para>
            <para>A reference to a PROPERTYKEY structure that identifies the column.</para>
            </param>
            <param name="pcmci">
            <para>Type: <c>const CM_COLUMNINFO*</c></para>
            <para>A pointer to a CM_COLUMNINFO structure that contains the state to set for this column.</para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IColumnManager.GetColumnInfo(Vanara.PInvoke.Ole32.PROPERTYKEY@,Vanara.PInvoke.Shell32.CM_COLUMNINFO@)">
            <summary>Gets information about each column: width, visibility, display name, and state.</summary>
            <param name="propkey">
            <para>Type: <c>REFPROPERTYKEY</c></para>
            <para>A reference to a PROPERTYKEY structure.</para>
            </param>
            <param name="pcmci">
            <para>Type: <c>CM_COLUMNINFO*</c></para>
            <para>
            A pointer to a CM_COLUMNINFO structure. On entry, set this structure's <c>dwMask</c> member to specify the information to
            retrieve. Also set its <c>cbSize</c> member. When this method returns successfully, the structure contains the requested information.
            </para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IColumnManager.GetColumnCount(Vanara.PInvoke.Shell32.CM_ENUM_FLAGS)">
            <summary>Gets the column count for either the visible columns or the complete set of columns.</summary>
            <param name="dwFlags">
            <para>Type: <c>CM_ENUM_FLAGS</c></para>
            <para>
            A value from the CM_ENUM_FLAGS enumeration that specifies whether to show only visible columns or all columns regardless of visibility.
            </para>
            </param>
            <returns>
            <para>Type: <c>UINT*</c></para>
            <para>Contains a pointer to the column count.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IColumnManager.GetColumns(Vanara.PInvoke.Shell32.CM_ENUM_FLAGS,Vanara.PInvoke.Ole32.PROPERTYKEY[],System.UInt32)">
            <summary>
            Gets an array of PROPERTYKEY structures that represent the columns that the view supports. Includes either all columns or
            only those currently visible.
            </summary>
            <param name="dwFlags">
            <para>Type: <c>CM_ENUM_FLAGS</c></para>
            <para>
            A value from the CM_ENUM_FLAGS enumeration that specifies whether to show only visible columns or all columns regardless of visibility.
            </para>
            </param>
            <param name="rgkeyOrder">
            <para>Type: <c>PROPERTYKEY*</c></para>
            <para>On success, contains a pointer to an array of PROPERTYKEY structures that represent the columns.</para>
            </param>
            <param name="cColumns">
            <para>Type: <c>UINT</c></para>
            <para>The length of the rgkeyOrder array.</para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IColumnManager.SetColumns(Vanara.PInvoke.Ole32.PROPERTYKEY[],System.UInt32)">
            <summary>Sets the collection of columns for the view to display.</summary>
            <param name="rgkeyOrder">
            <para>Type: <c>const PROPERTYKEY*</c></para>
            <para>A pointer to an array of PROPERTYKEY structures that specify the columns to display.</para>
            </param>
            <param name="cVisible">
            <para>Type: <c>UINT</c></para>
            <para>The size of the rgkeyOrder array.</para>
            </param>
            <remarks>
            <c>Note</c><c>IColumnManager::SetColumns</c> clears the state of all columns, so IColumnManager::SetColumnInfo must be
            called afterward to set the state of individual columns.
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IFolderView">
            <summary>
            Exposes methods that retrieve information about a folder's display options, select specified items in that folder, and set the
            folder's view mode.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFolderView.GetCurrentViewMode">
            <summary>Gets an address containing a value representing the folder's current view mode.</summary>
            <returns>The folder's current view mode.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFolderView.SetCurrentViewMode(Vanara.PInvoke.Shell32.FOLDERVIEWMODE)">
            <summary>Sets the selected folder's view mode.</summary>
            <param name="ViewMode">One of the following values from the FOLDERVIEWMODE enumeration.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFolderView.GetFolder(System.Guid@)">
            <summary>Gets the folder object.</summary>
            <param name="riid">Reference to the desired IID to represent the folder.</param>
            <returns>
            When this method returns, contains the interface pointer requested in <paramref name="riid"/>. This is typically
            IShellFolder or a related interface. This can also be an IShellItemArray with a single element.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFolderView.Item(System.Int32)">
            <summary>Gets the identifier of a specific item in the folder view, by index.</summary>
            <param name="iItemIndex">The index of the item in the view.</param>
            <returns>The address of a pointer to a PIDL containing the item's identifier information.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFolderView.ItemCount(Vanara.PInvoke.Shell32.SVGIO)">
            <summary>
            Gets the number of items in the folder. This can be the number of all items, or a subset such as the number of selected items.
            </summary>
            <param name="uFlags">Flags from the _SVGIO enumeration that limit the count to certain types of items.</param>
            <returns>The number of items (files and folders) displayed in the folder view.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFolderView.Items(Vanara.PInvoke.Shell32.SVGIO,System.Guid@)">
            <summary>Gets the address of an enumeration object based on the collection of items in the folder view.</summary>
            <param name="uFlags">_SVGIO values that limit the enumeration to certain types of items.</param>
            <param name="riid">Reference to the desired IID to represent the folder.</param>
            <returns>
            When this method returns, contains the interface pointer requested in <paramref name="riid"/>. This is typically an
            IEnumIDList, IDataObject, or IShellItemArray. If an error occurs, this value is NULL.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFolderView.GetSelectionMarkedItem">
            <summary>Gets the index of an item in the folder's view which has been marked by using the SVSI_SELECTIONMARK in IFolderView::SelectItem.</summary>
            <returns>The index of the marked item.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFolderView.GetFocusedItem">
            <summary>Gets the index of the item that currently has focus in the folder's view.</summary>
            <returns>The index of the item.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFolderView.GetItemPosition(Vanara.PInvoke.Shell32.PIDL)">
            <summary>Gets the position of an item in the folder's view.</summary>
            <param name="pidl">A pointer to an ITEMIDLIST interface.</param>
            <returns>The position of the item's upper-left corner.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFolderView.GetSpacing">
            <summary>
            Gets a POINT structure containing the width (x) and height (y) dimensions, including the surrounding white space, of an item.
            </summary>
            <returns>The current sizing dimensions of the items in the folder's view.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFolderView.GetDefaultSpacing">
            <summary>
            Gets a pointer to a POINT structure containing the default width (x) and height (y) measurements of an item, including the
            surrounding white space.
            </summary>
            <returns>The default sizing dimensions of the items in the folder's view.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFolderView.GetAutoArrange">
            <summary>Gets the current state of the folder's Auto Arrange mode.</summary>
            <returns>Returns S_OK if the folder is in Auto Arrange mode; S_FALSE if it is not.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFolderView.SelectItem(System.Int32,Vanara.PInvoke.Shell32.SVSIF)">
            <summary>Selects an item in the folder's view.</summary>
            <param name="iItem">The index of the item to select in the folder's view.</param>
            <param name="dwFlags">One of the _SVSIF constants that specify the type of selection to apply.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFolderView.SelectAndPositionItems(System.UInt32,System.IntPtr[],Vanara.PInvoke.POINT[],Vanara.PInvoke.Shell32.SVSIF)">
            <summary>Allows the selection and positioning of items visible in the folder's view.</summary>
            <param name="cidl">The number of items to select.</param>
            <param name="apidl">A pointer to an array of size <paramref name="cidl"/> that contains the PIDLs of the items.</param>
            <param name="apt">
            A pointer to an array of <paramref name="cidl"/> structures containing the locations each corresponding element in <paramref
            name="apidl"/> should be positioned.
            </param>
            <param name="dwFlags">One of the _SVSIF constants that specifies the type of selection to apply.</param>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IFolderView2">
            <summary>
            Exposes methods that retrieve information about a folder's display options, select specified items in that folder, and set the
            folder's view mode.
            </summary>
            <seealso cref="T:Vanara.PInvoke.Shell32.IFolderView"/>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFolderView2.GetCurrentViewMode">
            <summary>Gets an address containing a value representing the folder's current view mode.</summary>
            <returns>The folder's current view mode.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFolderView2.SetCurrentViewMode(Vanara.PInvoke.Shell32.FOLDERVIEWMODE)">
            <summary>Sets the selected folder's view mode.</summary>
            <param name="ViewMode">One of the following values from the FOLDERVIEWMODE enumeration.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFolderView2.GetFolder(System.Guid@)">
            <summary>Gets the folder object.</summary>
            <param name="riid">Reference to the desired IID to represent the folder.</param>
            <returns>
            When this method returns, contains the interface pointer requested in <paramref name="riid"/>. This is typically
            IShellFolder or a related interface. This can also be an IShellItemArray with a single element.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFolderView2.Item(System.Int32)">
            <summary>Gets the identifier of a specific item in the folder view, by index.</summary>
            <param name="iItemIndex">The index of the item in the view.</param>
            <returns>The address of a pointer to a PIDL containing the item's identifier information.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFolderView2.ItemCount(Vanara.PInvoke.Shell32.SVGIO)">
            <summary>
            Gets the number of items in the folder. This can be the number of all items, or a subset such as the number of selected items.
            </summary>
            <param name="uFlags">Flags from the _SVGIO enumeration that limit the count to certain types of items.</param>
            <returns>The number of items (files and folders) displayed in the folder view.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFolderView2.Items(Vanara.PInvoke.Shell32.SVGIO,System.Guid@)">
            <summary>Gets the address of an enumeration object based on the collection of items in the folder view.</summary>
            <param name="uFlags">_SVGIO values that limit the enumeration to certain types of items.</param>
            <param name="riid">Reference to the desired IID to represent the folder.</param>
            <returns>
            When this method returns, contains the interface pointer requested in <paramref name="riid"/>. This is typically an
            IEnumIDList, IDataObject, or IShellItemArray. If an error occurs, this value is NULL.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFolderView2.GetSelectionMarkedItem">
            <summary>Gets the index of an item in the folder's view which has been marked by using the SVSI_SELECTIONMARK in IFolderView::SelectItem.</summary>
            <returns>The index of the marked item.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFolderView2.GetFocusedItem">
            <summary>Gets the index of the item that currently has focus in the folder's view.</summary>
            <returns>The index of the item.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFolderView2.GetItemPosition(Vanara.PInvoke.Shell32.PIDL)">
            <summary>Gets the position of an item in the folder's view.</summary>
            <param name="pidl">A pointer to an ITEMIDLIST interface.</param>
            <returns>The position of the item's upper-left corner.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFolderView2.GetSpacing">
            <summary>
            Gets a POINT structure containing the width (x) and height (y) dimensions, including the surrounding white space, of an item.
            </summary>
            <returns>The current sizing dimensions of the items in the folder's view.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFolderView2.GetDefaultSpacing">
            <summary>
            Gets a pointer to a POINT structure containing the default width (x) and height (y) measurements of an item, including the
            surrounding white space.
            </summary>
            <returns>The default sizing dimensions of the items in the folder's view.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFolderView2.GetAutoArrange">
            <summary>Gets the current state of the folder's Auto Arrange mode.</summary>
            <returns>Returns S_OK if the folder is in Auto Arrange mode; S_FALSE if it is not.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFolderView2.SelectItem(System.Int32,Vanara.PInvoke.Shell32.SVSIF)">
            <summary>Selects an item in the folder's view.</summary>
            <param name="iItem">The index of the item to select in the folder's view.</param>
            <param name="dwFlags">One of the _SVSIF constants that specify the type of selection to apply.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFolderView2.SelectAndPositionItems(System.UInt32,System.IntPtr[],Vanara.PInvoke.POINT[],Vanara.PInvoke.Shell32.SVSIF)">
            <summary>Allows the selection and positioning of items visible in the folder's view.</summary>
            <param name="cidl">The number of items to select.</param>
            <param name="apidl">A pointer to an array of size <paramref name="cidl"/> that contains the PIDLs of the items.</param>
            <param name="apt">
            A pointer to an array of <paramref name="cidl"/> structures containing the locations each corresponding element in <paramref
            name="apidl"/> should be positioned.
            </param>
            <param name="dwFlags">One of the _SVSIF constants that specifies the type of selection to apply.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFolderView2.SetGroupBy(Vanara.PInvoke.Ole32.PROPERTYKEY@,System.Boolean)">
            <summary>Groups the view by the given property key and direction.</summary>
            <param name="key">
            <para>Type: <c>REFPROPERTYKEY</c></para>
            <para>A PROPERTYKEY by which the view should be grouped.</para>
            </param>
            <param name="fAscending">
            <para>Type: <c>BOOL</c></para>
            <para>A value of type <c>BOOL</c> to indicate sort order of the groups.</para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFolderView2.GetGroupBy(Vanara.PInvoke.Ole32.PROPERTYKEY@,System.Boolean@)">
            <summary>Retrieves the property and sort order used for grouping items in the folder display.</summary>
            <param name="pkey">
            <para>Type: <c>PROPERTYKEY*</c></para>
            <para>A pointer to the PROPERTYKEY by which the view is grouped.</para>
            </param>
            <param name="pfAscending">
            <para>Type: <c>BOOL*</c></para>
            <para>A pointer to a value of type <c>BOOL</c> that indicates sort order of the groups.</para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFolderView2.SetViewProperty(Vanara.PInvoke.Shell32.PIDL,Vanara.PInvoke.Ole32.PROPERTYKEY@,Vanara.PInvoke.Ole32.PROPVARIANT)">
            <summary>
            <para>
            [This method is still implemented, but should be considered deprecated as of Windows 7. It might not be implemented in
            future versions of Windows. It cannot be used with items in search results or library views, so consider using the item's
            existing properties or, if applicable, emitting properties from your namespace or property handler. See Developing Property
            Handlers for Windows Search for more information.]
            </para>
            <para>Caches a property for an item in the view's property cache.</para>
            </summary>
            <param name="pidl">
            <para>Type: <c>PCUITEMID_CHILD</c></para>
            <para>A PIDL that identifies the item.</para>
            </param>
            <param name="propkey">
            <para>Type: <c>REFPROPERTYKEY</c></para>
            <para>The PROPERTYKEY which is to be stored.</para>
            </param>
            <param name="propvar">
            <para>Type: <c>const PROPVARIANT*</c></para>
            <para>A pointer to a PROPVARIANT structure in which the PROPERTYKEY is stored.</para>
            </param>
            <remarks>The property is displayed in the view, but not written to the underlying item.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFolderView2.GetViewProperty(Vanara.PInvoke.Shell32.PIDL,Vanara.PInvoke.Ole32.PROPERTYKEY@,Vanara.PInvoke.Ole32.PROPVARIANT)">
            <summary>
            <para>
            [This method is still implemented, but should be considered deprecated as of Windows 7. It might not be implemented in
            future versions of Windows. It cannot be used with items in search results or library views, so consider using the item's
            existing properties or, if applicable, emitting properties from your namespace or property handler. See Developing Property
            Handlers for Windows Search for more information.]
            </para>
            <para>Gets a property value for a given property key from the view's cache.</para>
            </summary>
            <param name="pidl">
            <para>Type: <c>PCUITEMID_CHILD</c></para>
            <para>A pointer to an item identifier list (PIDL).</para>
            </param>
            <param name="propkey">
            <para>Type: <c>REFPROPERTYKEY</c></para>
            <para>The PROPERTYKEY to be retrieved.</para>
            </param>
            <param name="ppropvar">
            <para>Type: <c>PROPVARIANT*</c></para>
            <para>A pointer to a PROPVARIANT structure in which the PROPERTYKEY is stored.</para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFolderView2.SetTileViewProperties(Vanara.PInvoke.Shell32.PIDL,System.String)">
            <summary>
            <para>
            [This method is still implemented, but should be considered deprecated as of Windows 7. It might not be implemented in
            future versions of Windows. It cannot be used with items in search results or library views, so consider using the item's
            existing properties or, if applicable, emitting properties from your namespace or property handler. See Developing Property
            Handlers for Windows Search for more information.]
            </para>
            <para>Set the list of tile properties for an item.</para>
            </summary>
            <param name="pidl">
            <para>Type: <c>PCUITEMID_CHILD</c></para>
            <para>A pointer to an item identifier list (PIDL).</para>
            </param>
            <param name="pszPropList">
            <para>Type: <c>LPCWSTR</c></para>
            <para>A pointer to a Unicode string containing a list of properties.</para>
            </param>
            <remarks>
            The pszPropList parameter must be of the form "prop:&lt;canonical-property-name&gt;;&lt;canonical-property-name&gt;" where
            "&lt;canonical-property-name&gt;" is replaced by an actual canonical property name. The parameter can contain one or more
            properties delimited by semicolons.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFolderView2.SetExtendedTileViewProperties(Vanara.PInvoke.Shell32.PIDL,System.String)">
            <summary>
            <para>
            [This method is still implemented, but should be considered deprecated as of Windows 7. It might not be implemented in
            future versions of Windows. It cannot be used with items in search results or library views, so consider using the item's
            existing properties or, if applicable, emitting properties from your namespace or property handler. See Developing Property
            Handlers for Windows Search for more information.]
            </para>
            <para>Sets the list of extended tile properties for an item.</para>
            </summary>
            <param name="pidl">
            <para>Type: <c>PCUITEMID_CHILD</c></para>
            <para>A pointer to an item identifier list (PIDL).</para>
            </param>
            <param name="pszPropList">
            <para>Type: <c>LPCWSTR</c></para>
            <para>A pointer to a Unicode string containing a list of properties.</para>
            </param>
            <remarks>
            The pszPropList parameter must be of the form "prop:&lt;canonical-property-name&gt;;&lt;canonical-property-name&gt;" where
            "&lt;canonical-property-name&gt;" is an actual canonical property name. It can contain one or more properties delimited by semicolons.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFolderView2.SetText(Vanara.PInvoke.Shell32.FVTEXTTYPE,System.String)">
            <summary>Sets the default text to be used when there are no items in the view.</summary>
            <param name="iType">
            <para>Type: <c>FVTEXTTYPE</c></para>
            <para>This value should be set to the following flag.</para>
            <para>FVST_EMPTYTEXT</para>
            <para>Set the text to display when there are no items in the view.</para>
            </param>
            <param name="pwszText">
            <para>Type: <c>LPCWSTR</c></para>
            <para>A pointer to a Unicode string that contains the text to be used.</para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFolderView2.SetCurrentFolderFlags(Vanara.PInvoke.Shell32.FOLDERFLAGS,Vanara.PInvoke.Shell32.FOLDERFLAGS)">
            <summary>Sets and applies specified folder flags.</summary>
            <param name="dwMask">
            <para>Type: <c>DWORD</c></para>
            <para>The value of type <c>DWORD</c> that specifies the bitmask indicating which items in the structure are desired or valid.</para>
            </param>
            <param name="dwFlags">
            <para>Type: <c>DWORD</c></para>
            <para>The value of type <c>DWORD</c> that contains one or more FOLDERFLAGS.</para>
            </param>
            <remarks>
            <c>For Windows 7 or later:</c> This method must be used in combination with the FVO_CUSTOMPOSITION flag from the
            FOLDERVIEWOPTIONS enumeration.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFolderView2.GetCurrentFolderFlags">
            <summary>Gets the currently applied folder flags.</summary>
            <returns>
            <para>Type: <c>DWORD*</c></para>
            <para>A pointer to a <c>DWORD</c> with any FOLDERFLAGS that have been applied to the folder.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFolderView2.GetSortColumnCount">
            <summary>Gets the count of sort columns currently applied to the view.</summary>
            <returns>
            <para>Type: <c>int*</c></para>
            <para>A pointer to an <c>int</c>.</para>
            </returns>
            <remarks>Returns E_INVALIDARG if the column count provided does not equal the count of sort columns in the view.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFolderView2.SetSortColumns(Vanara.PInvoke.Shell32.SORTCOLUMN[],System.Int32)">
            <summary>Sets and sorts the view by the given sort columns.</summary>
            <param name="rgSortColumns">
            <para>Type: <c>const SORTCOLUMN*</c></para>
            <para>A pointer to a SORTCOLUMN structure. The size of this structure is determined by cColumns.</para>
            </param>
            <param name="cColumns">
            <para>Type: <c>int</c></para>
            <para>The count of columns to sort by.</para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFolderView2.GetSortColumns(Vanara.PInvoke.Shell32.SORTCOLUMN[],System.Int32)">
            <summary>Gets the sort columns currently applied to the view.</summary>
            <param name="rgSortColumns">
            <para>Type: <c>const SORTCOLUMN*</c></para>
            <para>A pointer to a SORTCOLUMN structure. The size of this structure is determined by cColumns.</para>
            </param>
            <param name="cColumns">
            <para>Type: <c>int</c></para>
            <para>The count of columns to sort by.</para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFolderView2.GetItem(System.Int32,System.Guid@)">
            <summary>Retrieves an object that represents a specified item.</summary>
            <param name="iItem">
            <para>Type: <c>int</c></para>
            <para>The zero-based index of the item to retrieve.</para>
            </param>
            <param name="riid">
            <para>Type: <c>REFIID</c></para>
            <para>Reference to the desired IID to represent the item, such as IID_IShellItem.</para>
            </param>
            <returns>
            <para>Type: <c>void**</c></para>
            <para>When this method returns, contains the interface pointer requested in <paramref name="riid"/>. This is typically IShellItem.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFolderView2.GetVisibleItem(System.Int32,System.Boolean,System.Int32@)">
            <summary>Gets the next visible item in relation to a given index in the view.</summary>
            <param name="iStart">
            <para>Type: <c>int</c></para>
            <para>The zero-based position at which to start searching for a visible item.</para>
            </param>
            <param name="fPrevious">
            <para>Type: <c>BOOL</c></para>
            <para><c>TRUE</c> to find the first visible item before iStart. <c>FALSE</c> to find the first visible item after iStart.</para>
            </param>
            <param name="piItem">
            <para>Type: <c>int*</c></para>
            <para>When this method returns, contains a pointer to a value that receives the index of the visible item in the view.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>This method can return one of these values.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>S_OK</term>
            <term>Item retrieved.</term>
            </item>
            <item>
            <term>S_FALSE</term>
            <term>Item not found. Note that this is a success code.</term>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFolderView2.GetSelectedItem(System.Int32,System.Int32@)">
            <summary>Locates the currently selected item at or after a given index.</summary>
            <param name="iStart">The index position from which to start searching for the currently selected item.</param>
            <param name="piItem">A pointer to a value that receives the index of the item in the view.</param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>Returns S_OK if a selected item was found, or an error value otherwise, including the following:</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>S_FALSE</term>
            <term>
            Item not found. Note that this is a success code. The operation was successful in searching the view, it simply did not find
            a currently selected item after the given index (iStart). It is possible that no item was selected, or that the selected
            item had an index less than iStart.
            </term>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFolderView2.GetSelection(System.Boolean,Vanara.PInvoke.Shell32.IShellItemArray@)">
            <summary>
            <para>Gets the current selection as an IShellItemArray.</para>
            </summary>
            <param name="fNoneImpliesFolder">
            <para>Type: <c>BOOL</c></para>
            <para>If <c>TRUE</c>, this method returns an IShellItemArray containing the parent folder when there is no current selection.</para>
            </param>
            <param name="ppsia">
            <para>Type: <c>IShellItemArray**</c></para>
            <para>The address of a pointer to an IShellItemArray.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>Returns one of the following values, or an error otherwise.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>S_OK</term>
            <term>The operation completed successfully.</term>
            </item>
            <item>
            <term>S_FALSE</term>
            <term>The IShellItemArray returned has zero items.</term>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFolderView2.GetSelectionState(Vanara.PInvoke.Shell32.PIDL)">
            <summary>Gets the selection state including check state.</summary>
            <param name="pidl">
            <para>Type: <c>PCUITEMID_CHILD</c></para>
            <para>A PIDL of the item.</para>
            </param>
            <returns>
            <para>Type: <c>DWORD*</c></para>
            <para>
            Zero or one of the following _SVSIF constants that specify the current type of selection: <c>SVSI_FOCUSED</c>,
            <c>SVSI_SELECT</c>, <c>SVSI_CHECK</c>, or <c>SVSI_CHECK2</c>. Other <c>_SVSIF</c> constants are not returned by this API.
            </para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFolderView2.InvokeVerbOnSelection(System.String)">
            <summary>Invokes the given verb on the current selection.</summary>
            <param name="pszVerb">
            <para>Type: <c>LPCSTR</c></para>
            <para>A pointer to a Unicode string containing a verb.</para>
            </param>
            <remarks>If pszVerb is <c>NULL</c>, then the default verb is invoked on the selection.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFolderView2.SetViewModeAndIconSize(Vanara.PInvoke.Shell32.FOLDERVIEWMODE,System.Int32)">
            <summary>Sets and applies the view mode and image size.</summary>
            <param name="uViewMode">
            <para>Type: <c>FOLDERVIEWMODE</c></para>
            <para>The FOLDERVIEWMODE to be applied.</para>
            </param>
            <param name="iImageSize">
            <para>Type: <c>int</c></para>
            <para>The size of the image in pixels.</para>
            </param>
            <remarks>If iImageSize is -1 then the current default icon size for the view mode is used.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFolderView2.GetViewModeAndIconSize(Vanara.PInvoke.Shell32.FOLDERVIEWMODE@,System.Int32@)">
            <summary>Gets the current view mode and icon size applied to the view.</summary>
            <param name="puViewMode">
            <para>Type: <c>FOLDERVIEWMODE*</c></para>
            <para>A pointer to the current FOLDERVIEWMODE.</para>
            </param>
            <param name="piImageSize">
            <para>Type: <c>int*</c></para>
            <para>A pointer to the size of the icon in pixels.</para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFolderView2.SetGroupSubsetCount(System.UInt32)">
            <summary>Turns on group subsetting and sets the number of visible rows of items in each group.</summary>
            <param name="cVisibleRows">
            <para>Type: <c>UINT</c></para>
            <para>The number of rows to be visible.</para>
            </param>
            <remarks>If cVisibleRows is zero, subsetting is turned off.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFolderView2.GetGroupSubsetCount">
            <summary>Gets the count of visible rows displayed for a group's subset.</summary>
            <returns>
            <para>Type: <c>UINT*</c></para>
            <para>The number of rows currently visible.</para>
            </returns>
            <remarks>If group subsetting is disabled the number of rows is zero.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFolderView2.SetRedraw(System.Boolean)">
            <summary>Sets redraw on and off.</summary>
            <param name="fRedrawOn">
            <para>Type: <c>BOOL</c></para>
            <para>a <c>BOOL</c> value.</para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFolderView2.IsMoveInSameFolder">
            <summary>
            Checks to see if this view sourced the current drag-and-drop or cut-and-paste operation (used by drop target objects).
            </summary>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFolderView2.DoRename">
            <summary>Starts a rename operation on the current selection.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IFolderViewHost">
            <summary>Exposes a method that hosts an IFolderView object in a window.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFolderViewHost.Initialize(Vanara.PInvoke.HWND,System.Runtime.InteropServices.ComTypes.IDataObject,Vanara.PInvoke.RECT@)">
            <summary>Initializes the object that hosts an IFolderView object.</summary>
            <param name="hwndParent">
            <para>Type: <c>HWND</c></para>
            <para>The handle of the window that contains the IFolderViewHost object.</para>
            </param>
            <param name="pdo">
            <para>Type: <c>IDataObject*</c></para>
            <para>The address of a pointer to a data object.</para>
            </param>
            <param name="prc">
            <para>Type: <c>RECT*</c></para>
            <para>The address of a pointer to a <c>RECT</c> structure that specifies the dimensions of the folder view.</para>
            </param>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IFolderViewSettings">
            <summary>Exposes methods to obtain folder view settings.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFolderViewSettings.GetColumnPropertyList(System.Guid@)">
            <summary>Gets an ordered list of columns that corresponds to the column enumerated.</summary>
            <param name="riid">A reference to the interface identifier (IID) of the IPropertyDescriptionList.</param>
            <returns>
            <para>Type: <c>IPropertyDescriptionList**</c></para>
            <para>The address of an IPropertyDescriptionList interface pointer.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFolderViewSettings.GetGroupByProperty(Vanara.PInvoke.Ole32.PROPERTYKEY@,System.Boolean@)">
            <summary>Gets a grouping property.</summary>
            <param name="pkey">
            <para>Type: <c>PROPERTYKEY*</c></para>
            <para>A pointer to a PROPERTYKEY structure indicating the key by which content is grouped.</para>
            </param>
            <param name="pfGroupAscending">
            <para>Type: <c>BOOL*</c></para>
            <para>A pointer to a value indicating whether grouping order is ascending.</para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFolderViewSettings.GetViewMode">
            <summary>Gets a folder's logical view mode.</summary>
            <returns>
            <para>Type: <c>FOLDERLOGICALVIEWMODE*</c></para>
            <para>A pointer to a FOLDERLOGICALVIEWMODE value.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFolderViewSettings.GetIconSize">
            <summary>Gets the folder icon size.</summary>
            <returns>
            <para>Type: <c>UINT*</c></para>
            <para>A pointer to the icon size.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFolderViewSettings.GetFolderFlags(Vanara.PInvoke.Shell32.FOLDERFLAGS@,Vanara.PInvoke.Shell32.FOLDERFLAGS@)">
            <summary>Gets folder view options flags.</summary>
            <param name="pfolderMask">
            <para>Type: <c>FOLDERFLAGS*</c></para>
            <para>A pointer to a mask for folder view options.</para>
            </param>
            <param name="pfolderFlags">
            <para>Type: <c>FOLDERFLAGS*</c></para>
            <para>A pointer to a flag for folder view options.</para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFolderViewSettings.GetSortColumns(Vanara.PInvoke.Shell32.SORTCOLUMN[],System.UInt32,System.UInt32@)">
            <summary>Gets sort column information.</summary>
            <param name="rgSortColumns">
            <para>Type: <c>SORTCOLUMN*</c></para>
            <para>A pointer to an array of SORTCOLUMN structures.</para>
            </param>
            <param name="cColumnsIn">
            <para>Type: <c>UINT</c></para>
            <para>The source column count.</para>
            </param>
            <param name="pcColumnsOut">
            <para>Type: <c>UINT*</c></para>
            <para>A pointer to the rgSortColumns array length.</para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFolderViewSettings.GetGroupSubsetCount">
            <summary>Gets group count for visible rows.</summary>
            <returns>
            <para>Type: <c>UINT*</c></para>
            <para>A pointer to group count.</para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IResultsFolder">
            <summary>
            <para>Exposes methods that hold items from a data object.</para>
            <para>
            An <c>IResultsFolder</c> is a folder that can hold items from all over the namespace and represent them to the user in a single folder.
            </para>
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IResultsFolder.AddItem(Vanara.PInvoke.Shell32.IShellItem)">
            <summary>Adds an item to a results folder.</summary>
            <param name="psi">
            <para>Type: <c>IShellItem*</c></para>
            <para>A pointer to an IShellItem.</para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IResultsFolder.AddIDList(Vanara.PInvoke.Shell32.PIDL,Vanara.PInvoke.Shell32.PIDL@)">
            <summary>Inserts a pointer to an item identifier list (PIDL) into a results folder.</summary>
            <param name="pidl">
            <para>Type: <c>PCIDLIST_ABSOLUTE</c></para>
            <para>A pointer to the IDList of the given object relative to the Desktop.</para>
            </param>
            <param name="ppidlAdded">
            <para>Type: <c>PITEMID_CHILD*</c></para>
            <para>A PIDL consisting of 0 or 1 SHITEMID structures, relative to a parent folder. This parameter maybe <c>NULL</c>.</para>
            </param>
            <remarks>
            The PIDL received represents the item that was just added and is a unique representation of this item generated by this
            results folder. It is only valid when used in reference to this results folder and should not be combined with a PIDL to
            another folder, including the folder this item originally came from.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IResultsFolder.RemoveItem(Vanara.PInvoke.Shell32.IShellItem)">
            <summary>Removes an item from a results folder.</summary>
            <param name="psi">
            <para>Type: <c>IShellItem*</c></para>
            <para>A pointer to an IShellItem.</para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IResultsFolder.RemoveIDList(Vanara.PInvoke.Shell32.PIDL)">
            <summary>Removes a pointer to an item identifier list (PIDL) from a results folder.</summary>
            <param name="pidl">
            <para>Type: <c>PCIDLIST_ABSOLUTE</c></para>
            <para>A PIDL relative to the Desktop.</para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IResultsFolder.RemoveAll">
            <summary>Removes all items from a results folder.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.GetFolder``1(Vanara.PInvoke.Shell32.IFolderView)">
            <summary>Extension method to simplify using the <see cref="M:Vanara.PInvoke.Shell32.IFolderView.GetFolder(System.Guid@)"/> method.</summary>
            <typeparam name="T">Type of the interface to get.</typeparam>
            <param name="fv">An <see cref="T:Vanara.PInvoke.Shell32.IFolderView"/> instance.</param>
            <returns>Receives the interface pointer requested in <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.GetItem``1(Vanara.PInvoke.Shell32.IFolderView2,System.Int32)">
            <summary>Extension method to simplify using the <see cref="M:Vanara.PInvoke.Shell32.IFolderView2.GetItem(System.Int32,System.Guid@)"/> method.</summary>
            <typeparam name="T">Type of the interface to get.</typeparam>
            <param name="fv">An <see cref="T:Vanara.PInvoke.Shell32.IFolderView2"/> instance.</param>
            <param name="iItem">
            <para>Type: <c>int</c></para>
            <para>The zero-based index of the item to retrieve.</para>
            </param>
            <returns>Receives the interface pointer requested in <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.Items``1(Vanara.PInvoke.Shell32.IFolderView,Vanara.PInvoke.Shell32.SVGIO)">
            <summary>Extension method to simplify using the <see cref="M:Vanara.PInvoke.Shell32.IFolderView.Items(Vanara.PInvoke.Shell32.SVGIO,System.Guid@)"/> method.</summary>
            <typeparam name="T">Type of the interface to get.</typeparam>
            <param name="fv">An <see cref="T:Vanara.PInvoke.Shell32.IFolderView"/> instance.</param>
            <param name="uFlags">_SVGIO values that limit the enumeration to certain types of items.</param>
            <returns>Receives the interface pointer requested in <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.TryGetItem``1(Vanara.PInvoke.Shell32.IFolderView2,System.Int32,``0@)">
            <summary>Extension method to simplify using the <see cref="M:Vanara.PInvoke.Shell32.IFolderView2.GetItem(System.Int32,System.Guid@)"/> method.</summary>
            <typeparam name="T">Type of the interface to get.</typeparam>
            <param name="fv">An <see cref="T:Vanara.PInvoke.Shell32.IFolderView2"/> instance.</param>
            <param name="iItem">
            <para>Type: <c>int</c></para>
            <para>The zero-based index of the item to retrieve.</para>
            </param>
            <param name="item">The interface pointer requested in <typeparamref name="T"/>.</param>
            <returns><see langword="true"/> if the item is found; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.CM_COLUMNINFO">
            <summary>
            <para>Defines column information. Used by members of the IColumnManager interface.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CM_COLUMNINFO.cbSize">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The size of the structure, in bytes.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CM_COLUMNINFO.dwMask">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>One or more values from the CM_MASK enumeration that specify which members of this structure are valid.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CM_COLUMNINFO.dwState">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>One or more values from the CM_STATE enumeration that specify the state of the column.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CM_COLUMNINFO.uWidth">
            <summary>
            <para>Type: <c>UINT</c></para>
            <para>One of the members of the CM_SET_WIDTH_VALUE enumeration that specifies the column width.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CM_COLUMNINFO.uDefaultWidth">
            <summary>
            <para>Type: <c>UINT</c></para>
            <para>The default width of the column.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CM_COLUMNINFO.uIdealWidth">
            <summary>
            <para>Type: <c>UINT</c></para>
            <para>The ideal width of the column.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CM_COLUMNINFO.wszName">
            <summary>
            <para>Type: <c>WCHAR[MAX_COLUMN_NAME_LEN]</c></para>
            <para>A buffer of size MAX_COLUMN_NAME_LEN that contains the name of the column as a null-terminated Unicode string.</para>
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.CM_COLUMNINFO.#ctor(Vanara.PInvoke.Shell32.CM_MASK)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Shell32.CM_COLUMNINFO"/> struct for retrieval of specified items.</summary>
            <param name="mask">The mask of items to retrieve.</param>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.SORTCOLUMN">
            <summary>Stores information about how to sort a column that is displayed in the folder view.</summary>
            <remarks>
            Each column displayed in the folder view (for example, "details" view mode), is associated with a property that has a
            PROPERTYKEY ID. When you want to sort the view by a particular property, you specify the property key for that property.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SORTCOLUMN.propkey">
            <summary>
            <para>Type: <c>PROPERTYKEY</c></para>
            <para>
            The ID of the column by which the user will sort. A PROPERTYKEY structure. For example, for the "Name" column, the property
            key is PKEY_ItemNameDisplay.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SORTCOLUMN.direction">
            <summary>
            <para>Type: <c>SORTDIRECTION</c></para>
            <para>The direction in which the items are sorted. One of the following values.</para>
            <para>SORT_DESCENDING</para>
            <para>
            The items are sorted in ascending order. Whether the sort is alphabetical, numerical, and so on, is determined by the data
            type of the column indicated in <c>propkey</c>.
            </para>
            <para>SORT_ASCENDING</para>
            <para>
            The items are sorted in descending order. Whether the sort is alphabetical, numerical, and so on, is determined by the data
            type of the column indicated in <c>propkey</c>.
            </para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.FolderViewHost">
            <summary>CoClass for IFolderViewHost</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IFrameworkInputPane">
            <summary>
            Provides methods that enable apps to be informed of state changes and location for the input pane. The input pane is a UI
            element, an on-screen keyboard or handwriting panel, that appears when the user performs an action that requires them to enter
            information, such as selecting a search box or an entry field in a form. Apps can then adjust their UI so that the input pane
            does not obscure items that the user might need to access while the input pane is shown.
            </summary>
            <remarks>
            <para>When to implement</para>
            <para>Do not implement this interface; the implementation is supplied with Windows as CLSID_FrameworkInputPane.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFrameworkInputPane.Advise(System.Object,Vanara.PInvoke.Shell32.IFrameworkInputPaneHandler,System.UInt32@)">
            <summary>
            Registers the app's input pane handler object to receive notifications on behalf of a window when an event triggers the
            input pane. This method differs from AdviseWithHWND in that it references its window through an object that implements ICoreWindow.
            </summary>
            <param name="pWindow">
            <para>Type: <c>IUnknown*</c></para>
            <para>
            A pointer to the window (an object that implements ICoreWindow) for which the handler should listen for input pane events.
            </para>
            </param>
            <param name="pHandler">
            <para>Type: <c>IFrameworkInputPaneHandler*</c></para>
            <para>An IFrameworkInputPaneHandler interface pointer to the handler instance for this app.</para>
            </param>
            <param name="pdwCookie">
            <para>Type: <c>DWORD*</c></para>
            <para>
            A pointer to a value that, when this method returns successfully, receives a cookie for that can be used later to unregister
            the handler through the Unadvise method.
            </para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFrameworkInputPane.AdviseWithHWND(Vanara.PInvoke.HWND,Vanara.PInvoke.Shell32.IFrameworkInputPaneHandler,System.UInt32@)">
            <summary>
            Registers the app's input pane handler object to receive notifications on behalf of a window when an event triggers the
            input pane. This method differs from Advise in that it references its window through an <c>HWND</c>.
            </summary>
            <param name="hwnd">
            <para>Type: <c>HWND</c></para>
            <para>The handle of the window for which the handler should listen for input pane events.</para>
            </param>
            <param name="pHandler">
            <para>Type: <c>IFrameworkInputPaneHandler*</c></para>
            <para>An IFrameworkInputPaneHandler interface pointer to the handler instance for this app.</para>
            </param>
            <param name="pdwCookie">
            <para>Type: <c>DWORD*</c></para>
            <para>
            A pointer to a value that, when this method returns successfully, receives a cookie for that can be used later to unregister
            the handler through the Unadvise method.
            </para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFrameworkInputPane.Unadvise(System.UInt32)">
            <summary>Unregisters an app's input pane handler object so that it no longer receives notifications.</summary>
            <param name="dwCookie">
            <para>Type: <c>DWORD</c></para>
            <para>A cookie that identifies the handler. This value was obtained when you registered the handler through the Advise method.</para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFrameworkInputPane.Location">
            <summary>Gets the current location of the input pane.</summary>
            <returns>
            <para>Type: <c>RECT*</c></para>
            <para>
            A pointer to a RECT structure that, when this method returns successfully, receives the location of the input pane, in
            screen coordinates. If the input pane is not visible, this structure receives an empty rectangle.
            </para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IFrameworkInputPaneHandler">
            <summary>
            Enables an app to be notified when the input pane (the on-screen keyboard or handwriting panel) is being shown or hidden. This
            allows the app window to adjust its display so that no input areas (such as a text box) are obscured by the input pane.
            </summary>
            <remarks>
            <para>When to implement</para>
            <para>Implement this interface if your app needs to be informed when the input pane is shown or hidden, or its screen coordinates.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFrameworkInputPaneHandler.Showing(Vanara.PInvoke.RECT@,System.Boolean)">
            <summary>
            Called before the input pane is shown, to allow the app window to make any necessary adjustments to its UI in response to
            the reduced screen space available to it. This is particularly important for input elements, such as text boxes, that are
            used in conjunction with the input pane.
            </summary>
            <param name="prcInputPaneScreenLocation">
            <para>Type: <c>RECT*</c></para>
            <para>A pointer to a RECT structure that supplies the screen coordinates that the input pane will occupy.</para>
            </param>
            <param name="fEnsureFocusedElementInView">
            <para>Type: <c>BOOL*</c></para>
            <para>
            A pointer to a value that is set to <c>true</c> if the app should attempt to keep its currently focused element (such as a
            text box) in view, which could require the app to move the element or rearrange its UI.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFrameworkInputPaneHandler.Hiding(System.Boolean)">
            <summary>Called when the input pane is about to leave the display.</summary>
            <param name="fEnsureFocusedElementInView">
            <para>Type: <c>BOOL*</c></para>
            <para>
            A pointer to a value that is set to <c>true</c> if the app should attempt to keep its currently focused element (such as a
            text box) in view, which could require the app to rearrange its UI or move the element, usually back to its layout before
            the input pane was shown.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.FrameworkInputPane">
            <summary>CoClass for FrameworkInputPane</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IHandlerActivationHost">
            <summary>
            Enables a client of Shell item activation (including callers of ShellExecuteEx and IContextMenu::InvokeCommand) to be given a
            chance to veto or perform some action before the activation of verb handlers.
            </summary>
            <remarks>
            This interface is implemented by an object reachable through the site chain provided to ShellExecuteEx or the context menu
            handler. Applications will return this object in their <c>IServiceProvider::QueryService</c> implementation when asked for the
            service ID <c>SID_SHandlerActivationHost</c>.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IHandlerActivationHost.BeforeCoCreateInstance(System.Guid@,Vanara.PInvoke.Shell32.IShellItemArray,Vanara.PInvoke.Shell32.IHandlerInfo)">
            <summary>
            Notifies a client of ShellExecuteEx that a handler is about to be created, giving that client the opportunity to display UI
            confirming the use of that handler or reject it by returning a specific error code.
            </summary>
            <param name="clsidHandler">Identifies the handler.</param>
            <param name="itemsBeingActivated">
            The Shell item objects that will be passed to the handler. Typically there is only one, but in some cases there can be more
            than one.
            </param>
            <param name="handlerInfo">
            Provides access to information about the handler that will be invoked. This object also supports <c>IHandlerInfo2</c> on
            versions of Windows that support that interface.
            </param>
            <returns>
            If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code,
            <c>HRESULT_FROM_WIN32(ERROR_CANCELLED)</c> inciates that the ShellExecute call should be canceled,
            <c>EXECUTE_E_LAUNCH_APPLICATION</c> indicates that this handler should not be used, but if there is another it should be used.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IHandlerActivationHost.BeforeCreateProcess(System.String,System.String,Vanara.PInvoke.Shell32.IHandlerInfo)">
            <summary>
            Notifies a client of ShellExecuteEx that a process is about to created, giving that client the opportunity to display UI
            confirming that or reject it by returning a specific error code.
            </summary>
            <param name="applicationPath">The fully qualified path to the process executable, or in some cases a DLL path.</param>
            <param name="commandLine">
            The full command line that will be passed to <c>CreateProcess</c> including the arguments that the handler requested via its registration.
            </param>
            <param name="handlerInfo">
            Provides access to information about the handler that will be invoked. This object also supports <c>IHandlerInfo2</c> on
            versions of windows that support that interface. This object also implements IObjectWithSelection. This can be used to get
            the Shell item, or items in some cases, that are being launched.
            </param>
            <returns>
            If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code,
            <c>HRESULT_FROM_WIN32(ERROR_CANCELLED)</c> inciates that the ShellExecute call should be canceled.
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IHandlerInfo">
            <summary>Supplies methods that provide information about the handler to methods of the IHandlerActivationHost interface.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IHandlerInfo.GetApplicationDisplayName(System.String@)">
            <summary>Retrieves the display name of the application that implemented the handler.</summary>
            <param name="value">
            <para>Type: <c>LPWSTR*</c></para>
            <para>
            A pointer to a string that, when this method returns successfully, receives the display name. If no display name could be
            found, the name of the application's .exe file is used.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IHandlerInfo.GetApplicationPublisher(System.String@)">
            <summary>Retrieves the name of the publisher of the application that implemented the handler.</summary>
            <param name="value">
            <para>Type: <c>LPWSTR*</c></para>
            <para>A pointer to a string that, when this method returns successfully, receives the publisher's name.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IHandlerInfo.GetApplicationIconReference(System.String@)">
            <summary>Retrieves the icon of the application that implemented the handler.</summary>
            <param name="value">
            <para>Type: <c>LPWSTR*</c></para>
            <para>A pointer to a string that, when this method returns successfully, receives the path of the icon.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IHandlerInfo2">
            <summary>Undocumented.</summary>
            <seealso cref="T:Vanara.PInvoke.Shell32.IHandlerInfo"/>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IHandlerInfo2.GetApplicationId(System.String@)">
            <summary>Undocumented.</summary>
            <param name="value">
            <para>Type: <c>LPWSTR*</c></para>
            <para>A pointer to a string that, when this method returns successfully, receives the application identifier.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IDynamicHWHandler">
            <summary>
            Called by AutoPlay. Exposes methods that get dynamic information regarding a registered handler prior to displaying it to the user.
            </summary>
            <remarks>
            <para>
            Prior to this interface, when an application registered a handler and was displayed in the autoplay prompt, the handler was
            always shown as long as the content type (for example, mp3 or avi) associated with that handler was found on the media device.
            The same icon and action string were always displayed.
            </para>
            <para>
            If a handler implements this interface prior to showing the handler, AutoPlay will first call IDynamicHWHandler::GetDynamicInfo
            to determine if this handler is to be presented to the user. If you want to show the handler, you may specify a different action
            string than the one supplied by the static handler registration under <c>HKLM</c>.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IDynamicHWHandler.GetDynamicInfo(System.String,System.UInt32,Vanara.InteropServices.StrPtrUni@)">
            <summary>Called by the system to determine whether a particular handler will be shown before the AutoPlay dialog is displayed.</summary>
            <param name="pszDeviceID">
            <para>Type: <c>LPCWSTR</c></para>
            <para>A pointer to a string that indicates the device path or drive root.</para>
            </param>
            <param name="dwContentType">
            <para>Type: <c>DWORD</c></para>
            <para>The content type.</para>
            </param>
            <param name="ppszAction">
            <para>Type: <c>LPWSTR*</c></para>
            <para>A pointer to the new action string, or <c>NULL</c> if the default action string is to be used.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>Returns S_OK if this handler is to be displayed, S_FALSE if it is to be hidden, or an error value otherwise.</para>
            </returns>
            <remarks>
            <para>
            To register a dynamic handler, add a REG_SZ named "DynamicHWHandlerCLSID" and assign it the CLSID of your IDynamicHWHandler implementation.
            </para>
            <para>Example:</para>
            <para>
            <c>HKLM</c><c>Software</c><c>Microsoft</c><c>Windows</c><c>CurrentVersion</c><c>Explorer</c><c>AutoplayHandlers</c><c>Handlers</c><c>YourHandler</c><c>DynamicHWHandlerCLSID</c>
            = [REG_SZ] {xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}
            </para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IHWEventHandler">
            <summary>Called by AutoPlay to implement the handling of registered media types.</summary>
            <remarks>
            <para>Developers supporting this interface must expose it in a Component Object Model (COM) server.</para>
            <para>
            All applications registered as AutoPlay media handlers must implement this interface. Handlers that implement this interface
            should return quickly from calls to IHWEventHandler::HandleEvent and IHWEventHandler2::HandleEventWithHWND so they won't block
            the AutoPlay dialog from closing. Additionally, if a local server must be launched for the creation of this handler, it should
            not block the CreateInstance call; it should return as soon as possible.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IHWEventHandler.Initialize(System.String)">
            <summary>Initializes an object that contains an implementation of the IHWEventHandler interface.</summary>
            <param name="pszParams">
            <para>Type: <c>LPCWSTR</c></para>
            <para>A pointer to a string buffer that contains the string from the following registry value.</para>
            <para>
            <c>HKEY_LOCAL_MACHINE</c><c>Software</c><c>Microsoft</c><c>Windows</c><c>CurrentVersion</c><c>Explorer</c><c>AutoPlayHandlers</c><c>Handlers</c>
            HandlerName <c>InitCmdLine</c> = string
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>This method receives the registry string stored in the InitCmdLine value under the</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IHWEventHandler.HandleEvent(System.String,System.String,System.String)">
            <summary>Handles AutoPlay device events for which there is no content of the type the application is registered to handle.</summary>
            <param name="pszDeviceID">
            <para>Type: <c>LPCWSTR</c></para>
            <para>A pointer to a string buffer that contains the device ID.</para>
            </param>
            <param name="pszAltDeviceID">
            <para>Type: <c>LPCWSTR</c></para>
            <para>
            A pointer to a string buffer that contains the alternate device ID. The alternate device ID is more human-readable than the
            primary device ID.
            </para>
            </param>
            <param name="pszEventType">
            <para>Type: <c>LPCWSTR</c></para>
            <para>
            A pointer to a string buffer that contains the event type. The event types include DeviceArrival, DeviceRemoval,
            MediaArrival, and MediaRemoval.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>The event types are not C/C++ language constants; they are literal text strings.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IHWEventHandler.HandleEventWithContent(System.String,System.String,System.String,System.String,System.Runtime.InteropServices.ComTypes.IDataObject)">
            <summary>Not implemented.</summary>
            <param name="pszDeviceID">This parameter is unused.</param>
            <param name="pszAltDeviceID">This parameter is unused.</param>
            <param name="pszEventType">This parameter is unused.</param>
            <param name="pszContentTypeHandler">This parameter is unused.</param>
            <param name="pdataobject">This parameter is unused.</param>
            <returns>This method does not return a value.</returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IHWEventHandler2">
            <summary>Extends the IHWEventHandler interface to address User Account Control (UAC) elevation for device handlers.</summary>
            <remarks>
            <para>This interface also provides the methods of the IHWEventHandler interface, from which it inherits.</para>
            <para>
            Handlers that implement this interface should return quickly from calls to IHWEventHandler::HandleEvent and
            IHWEventHandler2::HandleEventWithHWND so they do not block the AutoPlay dialog from closing. Also, if a local server must be
            launched for the creation of this handler, it should not block the CreateInstance call; it should return as soon as possible.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IHWEventHandler2.Initialize(System.String)">
            <summary>Initializes an object that contains an implementation of the IHWEventHandler interface.</summary>
            <param name="pszParams">
            <para>Type: <c>LPCWSTR</c></para>
            <para>A pointer to a string buffer that contains the string from the following registry value.</para>
            <para>
            <c>HKEY_LOCAL_MACHINE</c><c>Software</c><c>Microsoft</c><c>Windows</c><c>CurrentVersion</c><c>Explorer</c><c>AutoPlayHandlers</c><c>Handlers</c>
            HandlerName <c>InitCmdLine</c> = string
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>This method receives the registry string stored in the InitCmdLine value under the</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IHWEventHandler2.HandleEvent(System.String,System.String,System.String)">
            <summary>Handles AutoPlay device events for which there is no content of the type the application is registered to handle.</summary>
            <param name="pszDeviceID">
            <para>Type: <c>LPCWSTR</c></para>
            <para>A pointer to a string buffer that contains the device ID.</para>
            </param>
            <param name="pszAltDeviceID">
            <para>Type: <c>LPCWSTR</c></para>
            <para>
            A pointer to a string buffer that contains the alternate device ID. The alternate device ID is more human-readable than the
            primary device ID.
            </para>
            </param>
            <param name="pszEventType">
            <para>Type: <c>LPCWSTR</c></para>
            <para>
            A pointer to a string buffer that contains the event type. The event types include DeviceArrival, DeviceRemoval,
            MediaArrival, and MediaRemoval.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>The event types are not C/C++ language constants; they are literal text strings.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IHWEventHandler2.HandleEventWithContent(System.String,System.String,System.String,System.String,System.Runtime.InteropServices.ComTypes.IDataObject)">
            <summary>Not implemented.</summary>
            <param name="pszDeviceID">This parameter is unused.</param>
            <param name="pszAltDeviceID">This parameter is unused.</param>
            <param name="pszEventType">This parameter is unused.</param>
            <param name="pszContentTypeHandler">This parameter is unused.</param>
            <param name="pdataobject">This parameter is unused.</param>
            <returns>This method does not return a value.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IHWEventHandler2.HandleEventWithHWND(System.String,System.String,System.String,Vanara.PInvoke.HWND)">
            <summary>
            Handles AutoPlay device events that contain content types that the application is not registered to handle. This method
            provides a handle to the owner window so that UI can be displayed if the process requires elevated privileges.
            </summary>
            <param name="pszDeviceID">
            <para>Type: <c>LPCWSTR</c></para>
            <para>A pointer to a string buffer that contains the device ID.</para>
            </param>
            <param name="pszAltDeviceID">
            <para>Type: <c>LPCWSTR</c></para>
            <para>
            A pointer to a string buffer that contains the alternate device ID. The alternate device ID is more human-readable than the
            primary device ID.
            </para>
            </param>
            <param name="pszEventType">
            <para>Type: <c>LPCWSTR</c></para>
            <para>
            A pointer to a string buffer that contains the event type. The event types include DeviceArrival, DeviceRemoval,
            MediaArrival, and MediaRemoval.
            </para>
            </param>
            <param name="hwndOwner">
            <para>Type: <c>HWND</c></para>
            <para>A handle to the AutoPlay dialog that was displayed.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            <para>
            When a handler is invoked and requires immediate privilege elevation in a new process, it requires an active parent window
            handle to display its consent UI. IHWEventHandler::HandleEvent cannot give a handle, so only a blinking taskbar appears.
            <c>IHWEventHandler2::HandleEventWithHWND</c> provides the HWND and enables the UI to be displayed.
            </para>
            <para>
            Note that if the handler was launched by default instead of by direct user action, the HWND is not active and the dialog is
            not shown in the foreground.
            </para>
            <para>The event types are not C/C++ language constants; they are literal text strings.</para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IQueryCancelAutoPlay">
            <summary>
            Exposes a method that programmatically overrides AutoPlay or AutoRun. This allows you to customize the location and type of
            content that is launched when media is inserted.
            </summary>
            <remarks>
            <para>
            <c>Note</c><c>IQueryCancelAutoPlay</c> is intended only for use by user-launched applications that are currently running. It
            should not be handled by invisible or background service applications to prevent the normal AutoPlay/AutoRun feature from being
            invoked. Giving the user a choice of what happens when media and devices are inserted into the system is a key feature of the
            platform. This feature is designed specifically to improve and personalize the user experience and should not be inhibited by
            background services.
            </para>
            <para>
            A valid use of <c>IQueryCancelAutoPlay</c> is illustrated in the following scenario: Assume that you have, through AutoPlay,
            previously designated application A to handle video camera events. For video editing, however, you prefer application B. You
            open application B, begin editing some previously filmed video, and then decide to add some new content to the video being
            edited. Application B's import function prompts you to turn on the video camera so that the new content can be accessed.
            Normally, this video device activation would trigger the launch of the device-associated application A. Fortunately, using
            <c>IQueryCancelAutoPlay</c>, application B has canceled AutoPlay processing of video camera events while you are editing video
            content. In this case, the cancellation of Autoplay by application B has created a better user experience.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IQueryCancelAutoPlay.AllowAutoPlay(System.String,Vanara.PInvoke.Shell32.ARCONTENT,System.String,System.UInt32)">
            <summary>Determines whether to play media inserted by a user and if so using what restrictions.</summary>
            <param name="pszPath">
            <para>Type: <c>LPCWSTR</c></para>
            <para>The drive letter in the form <c>D:\</c></para>
            </param>
            <param name="dwContentType">
            <para>Type: <c>DWORD</c></para>
            <para>The type of content as specified by the following flags.</para>
            <para>ARCONTENT_AUTORUNINF (0x00000002)</para>
            <para>Use the Autorun.inf file. This is the traditional AutoRun behavior.</para>
            <para>ARCONTENT_AUDIOCD (0x00000004)</para>
            <para>AutoRun audio CDs.</para>
            <para>ARCONTENT_DVDMOVIE (0x00000008)</para>
            <para>AutoRun DVDs.</para>
            <para>ARCONTENT_BLANKCD (0x00000010)</para>
            <para>AutoPlay blank CD-Rs and CD-RWs.</para>
            <para>ARCONTENT_BLANKDVD (0x00000020)</para>
            <para>AutoPlay blank DVD-Rs and DVD-RAMs.</para>
            <para>ARCONTENT_UNKNOWNCONTENT (0x00000040)</para>
            <para>AutoRun if the media is formatted and the content does not fall under a type covered by one of the other flags.</para>
            <para>ARCONTENT_AUTOPLAYPIX (0x00000080)</para>
            <para>AutoPlay if the content consists of file types defined as pictures, such as .bmp and .jpg files.</para>
            <para>ARCONTENT_AUTOPLAYMUSIC (0x00000100)</para>
            <para>AutoPlay if the content consists of file types defined as music, such as MP3 files.</para>
            <para>ARCONTENT_AUTOPLAYVIDEO (0x00000200)</para>
            <para>AutoPlay if the content consists of file types defined as video files.</para>
            <para>ARCONTENT_VCD (0x00000400)</para>
            <para><c>Introduced in Windows Vista</c>. AutoPlay video CDs (VCDs).</para>
            <para>ARCONTENT_SVCD (0x00000800)</para>
            <para><c>Introduced in Windows Vista</c>. AutoPlay Super Video CD (SVCD) media.</para>
            <para>ARCONTENT_DVDAUDIO (0x00001000)</para>
            <para><c>Introduced in Windows Vista</c>. AutoPlay DVD-Audio media.</para>
            <para>ARCONTENT_BLANKBD (0x00002000)</para>
            <para>AutoPlay blank recordable high definition DVD media in the Blu-ray Disc™ format (BD-R or BD-RW). Note: Prior to Windows 7, this value was defined to specify non-recordable media in the HD DVD format.</para>
            <para>ARCONTENT_BLURAY (0x00004000)</para>
            <para><c>Introduced in Windows Vista</c>. AutoPlay high definition DVD media in the Blu-ray Disc™ format.</para>
            <para>ARCONTENT_CAMERASTORAGE (0x00008000)</para>
            <para><c>Introduced in Windows 8</c>.</para>
            <para>ARCONTENT_CUSTOMEVENT (0x00010000)</para>
            <para><c>Introduced in Windows 8</c>.</para>
            <para>ARCONTENT_NONE (0x00000000)</para>
            <para><c>Introduced in Windows Vista</c>. AutoPlay empty but formatted media.</para>
            <para>ARCONTENT_MASK (0x0001FFFE)</para>
            <para><c>Introduced in Windows Vista</c>. A mask that denotes valid ARCONTENT flag values for media types. This mask does not include ARCONTENT_PHASE values.</para>
            <para>ARCONTENT_PHASE_UNKNOWN (0x00000000)</para>
            <para><c>Introduced in Windows Vista</c>. AutoPlay is searching the media. The phase of the search (presniff, sniffing, or final) is unknown.</para>
            <para>ARCONTENT_PHASE_PRESNIFF (0x10000000)</para>
            <para><c>Introduced in Windows Vista</c>. The contents of the media are known before the media is searched, due to the media type; for instance, audio CDs and DVD movies.</para>
            <para>ARCONTENT_PHASE_SNIFFING (0x20000000)</para>
            <para><c>Introduced in Windows Vista</c>. AutoPlay is currently searching the media. Any results reported during this phase should be considered a partial list as more content types might still be found.</para>
            <para>ARCONTENT_PHASE_FINAL (0x40000000)</para>
            <para><c>Introduced in Windows Vista</c>. AutoPlay has finished searching the media. Results reported are final.</para>
            <para>ARCONTENT_PHASE_MASK (0x70000000)</para>
            <para><c>Introduced in Windows Vista</c>. A mask that denotes valid ARCONTENT_PHASE values.</para>
            </param>
            <param name="pszLabel">
            <para>Type: <c>LPCWSTR</c></para>
            <para>The media label.</para>
            </param>
            <param name="dwSerialNumber">
            <para>Type: <c>DWORD</c></para>
            <para>The media serial number.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>Returns S_OK to allow AutoRun or S_FALSE to cancel AutoRun.</para>
            </returns>
            <remarks>
            <para>Applications register an instance of the IQueryCancelAutoPlay interface in the running object table (ROT). Before the Shell starts AutoRun or AutoPlay, when the user inserts new media, it checks the ROT for a component implementing <c>IQueryCancelAutoPlay</c>. If it finds one, the Shell calls that implementation's <c>IQueryCancelAutoPlay::AllowAutoPlay</c> method to determine whether it should proceed, and using what restrictions.</para>
            <para>Upon presentation of media, the Shell searches the ROT for a component implementing IQueryCancelAutoPlay. If one is found, the class identifier (CLSID) of that component's moniker is extracted. The presence of a ROT registration informs the Shell that the component might want to cancel AutoRun or AutoPlay. For confirmation, the Shell must also find a registry key for that same CLSID at the following location:</para>
            <para><code> &lt;pre xml:space="preserve"&gt;&lt;b&gt;HKEY_LOCAL_MACHINE&lt;/b&gt; </code></para>
            <para><c>SOFTWARE</c> <c>Microsoft</c> <c>Windows</c> <c>Current Version</c> <c>Explorer</c> <c>AutoplayHandlers</c> <c>CancelAutoplay</c> <c>CLSID</c> The component's CLSIDThis value is added by the application or hardware, usually at installation time. It isn't assigned a data value.</para>
            <para><c>Note</c> The CLSID entered as a value under this key should not be encased in curly brackets.</para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IQueryContinue">
            <summary>
            Exposes a method that provides a simple, standard mechanism for objects to query a client for permission to continue an
            operation. Clients of IUserNotification, for example, must pass an implementation of <c>IQueryContinue</c> to the
            IUserNotification::Show method.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IQueryContinue.QueryContinue">
            <summary>Returns <c>S_OK</c> if the operation associated with the current instance of this interface should continue.</summary>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>Returns <c>S_OK</c> if the calling application should continue, <c>S_FALSE</c> if not.</para>
            </returns>
            <remarks>
            In typical usage, a pointer to an IQueryContinue interface is passed to a method of another object. That object, in turn,
            runs this method periodically to determine whether to continue its actions. For example, if a user clicks a cancel button,
            this method will start returning <c>S_FALSE</c>.
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IUserNotification2">
            <summary>
            <para>
            Exposes methods that set notification information and then display that notification to the user in a balloon that appears in
            conjunction with the notification area of the taskbar.
            </para>
            <para>
            <c>Note</c><c>IUserNotification2</c> does not inherit from IUserNotification. <c>IUserNotification2</c> differs from
            <c>IUserNotification</c> only in its Show method, which adds an additional parameter for a callback interface to communicate
            with the notification. Otherwise the two interfaces are identical in form and function. CLSID_UserNotification implements both
            versions of <c>Show</c> as an overload.
            </para>
            </summary>
            <remarks>
            <para>When to Implement</para>
            <para>An implementation of this interface is provided in Windows as CLSID_UserNotification.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IUserNotification2.SetBalloonInfo(System.String,System.String,Vanara.PInvoke.Shell32.NIIF)">
            <summary>Sets the information to be displayed in a balloon notification.</summary>
            <param name="pszTitle">
            <para>Type: <c>LPCWSTR</c></para>
            <para>A pointer to a Unicode string that specifies the title of the notification.</para>
            </param>
            <param name="pszText">
            <para>Type: <c>LPCWSTR</c></para>
            <para>A pointer to a Unicode string that specifies the text to be displayed in the body of the balloon.</para>
            </param>
            <param name="dwInfoFlags">
            <para>Type: <c>DWORD</c></para>
            <para>One or more of the following values that indicate an icon to display in the notification balloon.</para>
            <para>NIIF_NONE (0x00000000)</para>
            <para>0x00000000. Do not display an icon.</para>
            <para>NIIF_INFO (0x00000001)</para>
            <para>0x00000001. Display an information icon.</para>
            <para>NIIF_WARNING (0x00000002)</para>
            <para>0x00000002. Display a warning icon.</para>
            <para>NIIF_ERROR (0x00000003)</para>
            <para>0x00000003. Display an error icon.</para>
            <para>NIIF_USER (0x00000004)</para>
            <para>0x00000004. <c>Windows XP SP2 and later</c>. Use the icon identified in <c>hIcon</c> in the notification balloon.</para>
            <para>NIIF_NOSOUND (0x00000010)</para>
            <para>
            0x00000010. <c>Windows XP and later</c>. Do not play the associated sound. This value applies only to balloon notifications
            and not to standard user notifications.
            </para>
            <para>NIIF_LARGE_ICON (0x00000010)</para>
            <para>
            0x00000010. <c>Windows Vista and later</c>. The large version of the icon should be used as the icon in the notification
            balloon. This corresponds to the icon with dimensions SM_CXICON x SM_CYICON. If this flag is not set, the icon with
            dimensions XM_CXSMICON x SM_CYSMICON is used.
            </para>
            <list type="bullet">
            <item>
            <term>This flag can be used with all stock icons.</term>
            </item>
            <item>
            <term>
            Applications that use older customized icons (NIIF_USER with <c>hIcon</c>) must provide a new SM_CXICON x SM_CYICON version
            in the tray icon specified in the <c>hIcon</c> member of the NOTIFYICONDATA structure. These icons are scaled down when they
            are displayed in the notification area.
            </term>
            </item>
            <item>
            <term>
            New customized icons (NIIF_USER with <c>hBalloonIcon</c>) must supply an SM_CXICON x SM_CYICON version in the supplied icon
            ( <c>hBalloonIcon</c>).
            </term>
            </item>
            </list>
            <para>NIIF_RESPECT_QUIET_TIME (0x00000080)</para>
            <para>
            0x00000080. <c>Windows 7 and later</c>. Do not display the notification balloon if the current user is in "quiet time",
            which is the first hour after a new user logs into his or her account for the first time. During this time, most
            notifications should not be sent or shown. This lets a user become accustomed to a new computer system without those
            distractions. Quiet time also occurs for each user after an operating system upgrade or clean installation. A notification
            sent with this flag during quiet time is not queued; it is simply dismissed unshown. The application can resend the
            notification later if it is still valid at that time.
            </para>
            <para>
            Because an application cannot predict when it might encounter quiet time, we recommended that this flag always be set on all
            appropriate notifications by any application that means to honor quiet time.
            </para>
            <para>If the current user is not in quiet time, this flag has no effect.</para>
            <para>NIIF_ICON_MASK (0x0000000F)</para>
            <para>0x0000000F. <c>Windows XP</c> (Shell32.dll version 6.0 <c>) and later</c>. Reserved.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IUserNotification2.SetBalloonRetry(System.UInt32,System.UInt32,System.UInt32)">
            <summary>Specifies the conditions for trying to display user information when the first attempt fails.</summary>
            <param name="dwShowTime">
            <para>Type: <c>DWORD</c></para>
            <para>The amount of time, in milliseconds, to display the user information.</para>
            </param>
            <param name="dwInterval">
            <para>Type: <c>DWORD</c></para>
            <para>The interval of time, in milliseconds, between attempts to display the user information.</para>
            </param>
            <param name="cRetryCount">
            <para>Type: <c>UINT</c></para>
            <para>The number of times the system should try to display the user information.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IUserNotification2.SetIconInfo(Vanara.PInvoke.HICON,System.String)">
            <summary>Sets the notification area icon associated with specific user information.</summary>
            <param name="hIcon">
            <para>Type: <c>HICON</c></para>
            <para>A handle to the icon.</para>
            </param>
            <param name="pszToolTip">
            <para>Type: <c>LPCWSTR</c></para>
            <para>
            A pointer to a string that contains the tooltip text to display for the specified icon. This value can be <c>NULL</c>,
            although it is not recommended.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IUserNotification2.Show(Vanara.PInvoke.Shell32.IQueryContinue,System.UInt32,Vanara.PInvoke.Shell32.IUserNotificationCallback)">
            <summary>Displays the user information in a balloon-style tooltip.</summary>
            <param name="pqc">
            <para>Type: <c>IQueryContinue*</c></para>
            <para>
            An IQueryContinue interface pointer, used to determine whether the notification display can continue or should stop (for
            example, if the user closes the notification). This value can be <c>NULL</c>.
            </para>
            </param>
            <param name="dwContinuePollInterval">
            <para>Type: <c>DWORD</c></para>
            <para>The length of time, in milliseconds, to display user information.</para>
            </param>
            <param name="pSink">
            <para>Type: <c>IUserNotificationCallback*</c></para>
            <para>
            A pointer to an IUserNotificationCallback interface, used to handle mouse click and hover actions on the notification area
            icon and within the notification itself. This value can be <c>NULL</c>.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IUserNotification2.PlaySound(System.String)">
            <summary>Plays a sound in conjunction with the notification.</summary>
            <param name="pszSoundName">
            <para>Type: <c>LPCWSTR</c></para>
            <para>A pointer to a null-terminated Unicode string that specifies the alias of the sound file to play.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            <para>
            The string pointed to by pszSoundName contains an alias for a system event found in the registry or the Win.ini file; for
            instance, "SystemExit".
            </para>
            <para>
            The specified sound is played asynchronously and the method returns immediately after beginning the sound. To stop an
            asynchronous waveform sound, call <c>IUserNotification2::PlaySound</c> with pszSoundName set to <c>NULL</c>.
            </para>
            <para>
            The specified sound event will yield to another sound event that is already playing. If a sound cannot be played because the
            resource needed to play that sound is busy, the method immediately returns S_FALSE without playing the requested sound.
            </para>
            <para>If the specified sound cannot be found, <c>IUserNotification2::PlaySound</c> uses the system default sound.</para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IUserNotificationCallback">
            <summary>
            Exposes a method for the handling of a mouse click or shortcut menu access in a notification balloon. Used with IUserNotification2::Show.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IUserNotificationCallback.OnBalloonUserClick(Vanara.PInvoke.POINT@)">
            <summary>
            Called when the user clicks the balloon. The application may respond with an action that is suitable for the balloon being clicked.
            </summary>
            <param name="pt">
            <para>Type: <c>POINT*</c></para>
            <para>
            Takes a pointer to the POINT structure which, upon method return, points to the position of the mouse in screen space where
            the mouse click occurred.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IUserNotificationCallback.OnLeftClick(Vanara.PInvoke.POINT@)">
            <summary>
            Called when the user clicks the icon in the notification area. The applications may launch some customary UI in response.
            </summary>
            <param name="pt">
            <para>Type: <c>POINT*</c></para>
            <para>
            Takes a pointer to the POINT structure which, when the method returns, points to the position of the mouse in the screen
            space where the mouse click occurred.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IUserNotificationCallback.OnContextMenu(Vanara.PInvoke.POINT@)">
            <summary>
            Called when the user right-clicks (or presses SHIFT+F10) the icon in the notification area. The application should show its
            context menu in response.
            </summary>
            <param name="pt">
            <para>Type: <c>POINT*</c></para>
            <para>
            When returned by the method, takes a pointer to the POINT structure at the position of the mouse in the screen space where
            the click occurred.
            </para>
            <para>In the case where user presses SHIFT+F10, the pointer points to the center of the icon in the screen space.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IImageRecompress">
            <summary>Exposes a method that recompress images.</summary>
            <remarks>
            Implement <c>IImageRecompress</c> if you are implementing an image object that may need recompressing. The
            <c>IImageRecompress</c> interface is implemented in the ImageRecompress object.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IImageRecompress.RecompressImage(Vanara.PInvoke.Shell32.IShellItem,System.Int32,System.Int32,System.Int32,Vanara.PInvoke.Ole32.IStorage,System.Runtime.InteropServices.ComTypes.IStream@)">
            <summary>
            Recompresses an image. Implemented in an ImageRecompress object, this method accepts x and y dimensions with a designation
            of quality. The method creates a stream containing the new image that has been recompressed to the specified size.
            </summary>
            <param name="psi">
            <para>Type: <c>IShellItem*</c></para>
            <para>A pointer to the object containing the stream of the image to read.</para>
            </param>
            <param name="cx">
            <para>Type: <c>int</c></para>
            <para>The x dimension of the image to return.</para>
            </param>
            <param name="cy">
            <para>Type: <c>int</c></para>
            <para>The y dimension of the image to return.</para>
            </param>
            <param name="iQuality">
            <para>Type: <c>int</c></para>
            <para>An indication of recompression quality that can range from 0 to 100.</para>
            </param>
            <param name="pstg">
            <para>Type: <c>IStorage*</c></para>
            <para>A pointer to an IStorage interface on the object that contains the stream to be written to.</para>
            </param>
            <param name="ppstrmOut">
            <para>Type: <c>IStream**</c></para>
            <para>The address of an IStream interface pointer variable that receives the output stream written to.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>
            Returns S_OK if successful, or a COM-defined error code otherwise. If the image in the input stream is less than the size
            specified by cx and cy, then S_FALSE is returned.
            </para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.ImageRecompress">
            <summary>CoClass for IImageRecompress</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IInitializeWithBindCtx">
            <summary>
            Exposes a method that initializes a handler, such as a property handler, thumbnail handler, or preview handler, with a bind context.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IInitializeWithBindCtx.Initialize(System.Runtime.InteropServices.ComTypes.IBindCtx)">
            <summary>Initializes a handler with a bind context.</summary>
            <param name="pbc">
            <para>Type: <c>IBindCtx*</c></para>
            <para>Pointer to the IBindCtx object.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IInitializeWithFile">
            <summary>
            Exposes a method to initialize a handler, such as a property handler, thumbnail handler, or preview handler, with a file path.
            </summary>
            <remarks>
            Whenever possible, it is recommended that initialization be done through a stream using IInitializeWithStream. Benefits of this
            include increased security and stability.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IInitializeWithFile.Initialize(System.String,Vanara.PInvoke.STGM)">
            <summary>
            <para>Initializes a handler with a file path.</para>
            </summary>
            <param name="pszFilePath">
            <para>Type: <c>LPCWSTR</c></para>
            <para>A pointer to a buffer that contains the file path as a null-terminated Unicode string.</para>
            </param>
            <param name="grfMode">
            <para>Type: <c>DWORD</c></para>
            <para>One of the following STGM values that indicates the access mode for .</para>
            <para>STGM_READ</para>
            <para>The file indicated by <c>IInitializeWithFile::Initialize</c> is read-only.</para>
            <para>STGM_READWRITE</para>
            <para>The file indicated by <c>IInitializeWithFile::Initialize</c> can be read from and written to.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            <para>
            Initialize is preferred to this method because of its ability to use files that are not accessible through a Win32 path, such
            as the contents of a compressed file with a .zip file name extension. Use <c>IInitializeWithFile::Initialize</c> only when
            the API used by the handler to access the file accepts file paths only.
            </para>
            <para>The file pointed to by must remain open for the lifetime of the handler or until IPropertyStore::Commit is called.</para>
            <para>If the file cannot be opened according to the method's parameter values, this method returns a suitable error code.</para>
            <para>
            A handler instance should be initialized only once in its lifetime. Attempts by the calling application to reinitialize the
            handler should result in the error .
            </para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IInitializeWithItem">
            <summary>
            Exposes a method used to initialize a handler, such as a property handler, thumbnail handler, or preview handler, with an <c>IShellItem</c>.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IInitializeWithItem.Initialize(Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.STGM)">
            <summary>Initializes a handler with an <c>IShellItem</c>.</summary>
            <param name="psi">
            <para>Type: <c><c>IShellItem</c>*</c></para>
            <para>A pointer to an <c>IShellItem</c>.</para>
            </param>
            <param name="grfMode">
            <para>Type: <c>DWORD</c></para>
            <para>One of the following <c>STGM</c> values that indicate the access mode for psi.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IInitializeWithPropertyStore">
            <summary>
            Exposes a method that initializes a handler, such as a property handler, thumbnail handler, or preview handler, with a property store.
            </summary>
            <remarks>
            <para>When to Implement</para>
            <para>Use this interface when initializing a handler for OpenSearch result sets, which are returned as RSS or Atom feeds.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IInitializeWithPropertyStore.Initialize(Vanara.PInvoke.PropSys.IPropertyStore)">
            <summary>Initializes a handler with an IPropertyStore.</summary>
            <param name="pps">
            <para>Type: <c>IPropertyStore*</c></para>
            <para>A pointer to an IPropertyStore.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            This method supports initializing handlers for use with OpenSearch result sets, which are returned from web services as RSS
            or Atom feeds.
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IInitializeWithStream">
            <summary>
            Exposes a method that initializes a handler, such as a property handler, thumbnail handler, or preview handler, with a stream.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IInitializeWithStream.Initialize(System.Runtime.InteropServices.ComTypes.IStream,Vanara.PInvoke.STGM)">
            <summary>
            <para>Initializes a handler with a stream.</para>
            </summary>
            <param name="pstream">
            <para>Type: <c>IStream*</c></para>
            <para>A pointer to an IStream interface that represents the stream source.</para>
            </param>
            <param name="grfMode">
            <para>Type: <c>DWORD</c></para>
            <para>One of the following STGM values that indicates the access mode for .</para>
            <para>STGM_READ</para>
            <para>The stream indicated by is read-only.</para>
            <para>STGM_READWRITE</para>
            <para>The stream indicated by is read/write accessible.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            <para>
            This method is preferred to Initialize due to its ability to use streams that are not accessible through a Win32 path, such
            as the contents of a compressed file with a .zip file name extension.
            </para>
            <para>The stream pointed to by must remain open for the lifetime of the handler or until IPropertyStore::Commit is called.</para>
            <para>
            When first opened, the source stream reference points to the beginning of the stream. The handler can seek and read from the
            stream at any time. A handler can be implemented to read all properties from the stream during <c>Initialize</c> or it can
            wait until the calling process attempts to enumerate or read properties before fetching them from the stream.
            </para>
            <para>
            A handler instance should be initialized only once in its lifetime. Attempts by the caller to reinitialize the handler should
            result in the error .
            </para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IInitializeWithWindow">
            <summary>
            Exposes a method through which a client can provide an owner window to a Windows Runtime object used in a desktop application.
            </summary>
            <remarks>
            <para>When to implement</para>
            <para>
            Implement this interface if your object needs to be provided with an owner window, generally to display UI. Most third-party
            applications will not need to implement this interface.
            </para>
            <para>When to use</para>
            <para>
            Use this interface if you will provide a window to an object. A common scenario in which this interface is used is a Windows
            Store desktop browser.
            </para>
            <para>
            This interface is implemented by the following objects. Note that this is necessarily an incomplete list; refer to an individual
            object's documentation to determine whether that object implements this interface.
            </para>
            <list type="bullet">
            <item>
            <term>Windows.UI.Popups.PopupMenu</term>
            </item>
            <item>
            <term>Windows.UI.Popups.MessageDialog</term>
            </item>
            <item>
            <term>Windows.Storage.Pickers.FileOpenPicker</term>
            </item>
            <item>
            <term>Windows.Storage.Pickers.FileSavePicker</term>
            </item>
            <item>
            <term>Windows.Storage.Pickers.FolderPicker</term>
            </item>
            <item>
            <term>CLSID_DragDropHelper</term>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IInitializeWithWindow.Initialize(Vanara.PInvoke.HWND)">
            <summary>Specifies an owner window to be used by a Windows Runtime object that is used in a desktop app.</summary>
            <param name="hwnd">The handle of the window to be used as the owner window.</param>
            <returns>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IInputObject">
            <summary>Exposes methods that change UI activation and process accelerators for a user input object contained in the Shell.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IInputObject.UIActivateIO(System.Boolean,Vanara.PInvoke.MSG@)">
            <summary>UI-activates or deactivates the object.</summary>
            <param name="fActivate">
            Indicates if the object is being activated or deactivated. If this value is nonzero, the object is being activated. If this
            value is zero, the object is being deactivated.
            </param>
            <param name="pMsg">
            A pointer to an MSG structure that contains the message that caused the activation change. This value may be NULL.
            </param>
            <returns>If this method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IInputObject.HasFocusIO">
            <summary>Determines if one of the object's windows has the keyboard focus.</summary>
            <returns>Returns S_OK if one of the object's windows has the keyboard focus, or S_FALSE otherwise.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IInputObject.TranslateAcceleratorIO(Vanara.PInvoke.MSG@)">
            <summary>Enables the object to process keyboard accelerators.</summary>
            <param name="pMsg">The address of an MSG structure that contains the keyboard message that is being translated.</param>
            <returns>Returns S_OK if the accelerator was translated, or S_FALSE otherwise.</returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IInputObject2">
            <summary>Exposes a method that extends IInputObject by handling global accelerators.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IInputObject2.UIActivateIO(System.Boolean,Vanara.PInvoke.MSG@)">
            <summary>UI-activates or deactivates the object.</summary>
            <param name="fActivate">
            Indicates if the object is being activated or deactivated. If this value is nonzero, the object is being activated. If this
            value is zero, the object is being deactivated.
            </param>
            <param name="pMsg">
            A pointer to an MSG structure that contains the message that caused the activation change. This value may be NULL.
            </param>
            <returns>If this method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IInputObject2.HasFocusIO">
            <summary>Determines if one of the object's windows has the keyboard focus.</summary>
            <returns>Returns S_OK if one of the object's windows has the keyboard focus, or S_FALSE otherwise.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IInputObject2.TranslateAcceleratorIO(Vanara.PInvoke.MSG@)">
            <summary>Enables the object to process keyboard accelerators.</summary>
            <param name="pMsg">The address of an MSG structure that contains the keyboard message that is being translated.</param>
            <returns>Returns S_OK if the accelerator was translated, or S_FALSE otherwise.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IInputObject2.TranslateAcceleratorGlobal(Vanara.PInvoke.MSG@)">
            <summary>
            Handles global accelerators so that input objects can respond to the keyboard even when they are not active in the UI.
            </summary>
            <param name="pMsg">A pointer to an MSG structure that contains a keyboard message.</param>
            <returns>If this method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IInputObjectSite">
            <summary>Exposes a method that is used to communicate focus changes for a user input object contained in the Shell.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IInputObjectSite.OnFocusChangeIS(System.Object,System.Boolean)">
            <summary>Informs the browser that the focus has changed.</summary>
            <param name="punkObj">The address of the IUnknown interface of the object gaining or losing the focus.</param>
            <param name="fSetFocus">
            Indicates if the object has gained or lost the focus. If this value is nonzero, the object has gained the focus. If this
            value is zero, the object has lost the focus.
            </param>
            <returns>If this method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IInsertItem">
            <summary>
            <para>
            [ <c>IInsertItem</c> is available for use in the operating systems specified in the Requirements section. It may be altered or
            unavailable in subsequent versions.]
            </para>
            <para>Exposes a method that inserts an ITEMIDLIST structure into a list of such structures.</para>
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IInsertItem.InsertItem(Vanara.PInvoke.Shell32.PIDL)">
            <summary>Adds an ITEMIDLIST structure to a list of such structures.</summary>
            <param name="pidl">
            <para>Type: <c>LPCITEMIDLIST</c></para>
            <para>A pointer to an ITEMIDLIST structure that corresponds to an item in a Shell folder.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IItemNameLimits">
            <summary>
            Retrieves a list of valid and invalid characters or the maximum length of a name in the namespace. Use this interface for
            validation parsing and translation.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IItemNameLimits.GetValidCharacters(System.String@,System.String@)">
            <summary>
            Loads a string that contains each of the characters that are valid or invalid in the namespace under which it is called.
            </summary>
            <param name="ppwszValidChars">
            <para>Type: <c>LPWSTR*</c></para>
            <para>
            A pointer to a string that contains all valid characters in the namespace. If the namespace provides any invalid characters
            in ppwszInvalidChars, then this value returns <c>NULL</c>. See Remarks for more details.
            </para>
            </param>
            <param name="ppwszInvalidChars">
            <para>Type: <c>LPWSTR*</c></para>
            <para>A pointer to a string that contains all invalid characters in the namespace.</para>
            </param>
            <remarks>
            <para>
            As an example, the standard file system returns the string "/:*?"&lt;&gt;|" in ppwszInvalidChars and <c>NULL</c> in ppwszValidChars.
            </para>
            <para>
            Both parameters cannot return non- <c>NULL</c> values, so ppwszValidChars is assigned a value of <c>NULL</c> because of the
            non- <c>NULL</c> value
            </para>
            <para>
            in ppwszInvalidChars. It is assumed that when there are specified invalid characters, everything else is valid. Only when
            ppwszInvalidChars is <c>NULL</c> does ppwszValidChars contain a list of all valid characters.
            </para>
            <para>If the method returns a success code, the allocated string must be freed using CoTaskMemFree.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IItemNameLimits.GetMaxLength(System.String)">
            <summary>Returns the maximum number of characters allowed for a particular name in the namespace under which it is called.</summary>
            <param name="pszName">
            <para>Type: <c>LPCWSTR</c></para>
            <para>A pointer to a string containing a name.</para>
            </param>
            <returns>
            <para>Type: <c>int*</c></para>
            <para>A pointer to the maximum number of characters which can be used in the name.</para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.FFFP_MODE">
            <summary>Describes match criteria. Used by methods of the IKnownFolderManager interface.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FFFP_MODE.FFFP_EXACTMATCH">
            <summary>Exact match.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FFFP_MODE.FFFP_NEARESTPARENTMATCH">
            <summary>Nearest parent match.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.KF_CATEGORY">
            <summary>Value that represent a category by which a folder registered with the Known Folder system can be classified.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KF_CATEGORY.KF_CATEGORY_VIRTUAL">
            <summary>
            Virtual folders are not part of the file system, which is to say that they have no path. For example, Control Panel and
            Printers are virtual folders. A number of features such as folder path and redirection do not apply to this category.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KF_CATEGORY.KF_CATEGORY_FIXED">
            <summary>
            Fixed file system folders are not managed by the Shell and are usually given a permanent path when the system is installed.
            For example, the Windows and Program Files folders are fixed folders. A number of features such as redirection do not apply
            to this category.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KF_CATEGORY.KF_CATEGORY_COMMON">
            <summary>
            Common folders are those file system folders used for sharing data and settings, accessible by all users of a system. For
            example, all users share a common Documents folder as well as their per-user Documents folder.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KF_CATEGORY.KF_CATEGORY_PERUSER">
            <summary>
            Per-user folders are those stored under each user's profile and accessible only by that user. For example,
            %USERPROFILE%\Pictures. This category of folder usually supports many features including aliasing, redirection and customization.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.KF_DEFINITION_FLAGS">
            <summary>Flags that specify certain known folder behaviors. Used with the KNOWNFOLDER_DEFINITION structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KF_DEFINITION_FLAGS.KFDF_LOCAL_REDIRECT_ONLY">
            <summary>
            Prevent a per-user known folder from being redirected to a network location. Note that if the known folder has been flagged
            with KFDF_LOCAL_REDIRECT_ONLY but it is a subfolder of a known folder that is redirected to a network location, this
            subfolder is redirected also.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KF_DEFINITION_FLAGS.KFDF_ROAMABLE">
            <summary>Can be roamed through a PC-to-PC synchronization.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KF_DEFINITION_FLAGS.KFDF_PRECREATE">
            <summary>
            Create the folder when the user first logs on. Normally a known folder is not created until it is first called. At that
            time, an API such as SHCreateItemInKnownFolder or IKnownFolder::GetShellItem is called with the KF_FLAG_CREATE flag.
            However, some known folders need to exist immediately. An example is those known folders under %USERPROFILE%, which must
            exist to provide a proper view. In those cases, KFDF_PRECREATE is set and Windows Explorer calls the creation API during its
            user initialization.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KF_DEFINITION_FLAGS.KFDF_STREAM">
            <summary>Introduced in Windows 7. The known folder is a file rather than a folder.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KF_DEFINITION_FLAGS.KFDF_PUBLISHEXPANDEDPATH">
            <summary>
            Introduced in Windows 7. The full path of the known folder, with any environment variables fully expanded, is stored in the
            registry under HKEY_CURRENT_USER.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KF_DEFINITION_FLAGS.KFDF_NO_REDIRECT_UI">
            <summary>Introduced in Windows 8.1. Prevent showing the Locations tab in the property dialog of the known folder.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.KF_REDIRECT_FLAGS">
            <summary>
            Flags used by IKnownFolderManager::Redirect to specify details of a known folder redirection such as permissions and ownership
            for the redirected folder.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KF_REDIRECT_FLAGS.KF_REDIRECT_USER_EXCLUSIVE">
            <summary>Ensure that only the user has permission to access the redirected folder.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KF_REDIRECT_FLAGS.KF_REDIRECT_COPY_SOURCE_DACL">
            <summary>Copy the DACL of the source folder to the target to maintain current access permissions.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KF_REDIRECT_FLAGS.KF_REDIRECT_OWNER_USER">
            <summary>
            Sets the user as the owner of a newly created target folder unless the user is a member of the Administrator group, in which
            case Administrator is set as the owner. Must be called with KF_REDIRECT_SET_OWNER_EXPLICIT.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KF_REDIRECT_FLAGS.KF_REDIRECT_SET_OWNER_EXPLICIT">
            <summary>
            Set the owner of a newly created target folder. If the user belongs to the Administrators group, Administrators is assigned
            as the owner. Must be called with KF_REDIRECT_OWNER_USER.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KF_REDIRECT_FLAGS.KF_REDIRECT_CHECK_ONLY">
            <summary>
            Do not perform a redirection, simply check whether redirection has occurred. If so, IKnownFolderManager::Redirect returns
            S_OK; if not, or if some actions remain to be completed, it returns S_FALSE.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KF_REDIRECT_FLAGS.KF_REDIRECT_WITH_UI">
            <summary>Display UI during the redirection.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KF_REDIRECT_FLAGS.KF_REDIRECT_UNPIN">
            <summary>Unpin the source folder.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KF_REDIRECT_FLAGS.KF_REDIRECT_PIN">
            <summary>Pin the target folder.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KF_REDIRECT_FLAGS.KF_REDIRECT_COPY_CONTENTS">
            <summary>Copy the existing contents—both files and subfolders—of the known folder to the redirected folder.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KF_REDIRECT_FLAGS.KF_REDIRECT_DEL_SOURCE_CONTENTS">
            <summary>
            Delete the contents of the source folder after they have been copied to the redirected folder. This flag is valid only if
            KF_REDIRECT_COPY_CONTENTS is set.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KF_REDIRECT_FLAGS.KF_REDIRECT_EXCLUDE_ALL_KNOWN_SUBFOLDERS">
            <summary>Reserved. Do not use.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.KF_REDIRECTION_CAPABILITIES">
            <summary>Flags that specify the current redirection capabilities of a known folder. Used by IKnownFolder::GetRedirectionCapabilities.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KF_REDIRECTION_CAPABILITIES.KF_REDIRECTION_CAPABILITIES_ALLOW_ALL">
            <summary>
            The folder can be redirected if any of the bits in the lower byte of the value are set but no DENY flag is set. DENY flags
            are found in the upper byte of the value.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KF_REDIRECTION_CAPABILITIES.KF_REDIRECTION_CAPABILITIES_REDIRECTABLE">
            <summary>
            The folder can be redirected. Currently, redirection exists for only common and user folders; fixed and virtual folders
            cannot be redirected.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KF_REDIRECTION_CAPABILITIES.KF_REDIRECTION_CAPABILITIES_DENY_ALL">
            <summary>Redirection is not allowed.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KF_REDIRECTION_CAPABILITIES.KF_REDIRECTION_CAPABILITIES_DENY_POLICY_REDIRECTED">
            <summary>The folder cannot be redirected because it is already redirected by group policy.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KF_REDIRECTION_CAPABILITIES.KF_REDIRECTION_CAPABILITIES_DENY_POLICY">
            <summary>The folder cannot be redirected because the policy prohibits redirecting this folder.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KF_REDIRECTION_CAPABILITIES.KF_REDIRECTION_CAPABILITIES_DENY_PERMISSIONS">
            <summary>The folder cannot be redirected because the calling application does not have sufficient permissions.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.KNOWN_FOLDER_FLAG">
            <summary>Specify special retrieval options for known folders. These values supersede CSIDL values, which have parallel meanings.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWN_FOLDER_FLAG.KF_FLAG_DEFAULT">
            <summary>No flags.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWN_FOLDER_FLAG.KF_FLAG_SIMPLE_IDLIST">
            <summary>
            Build a simple IDList (PIDL) This value can be used when you want to retrieve the file system path but do not specify this
            value if you are retrieving the localized display name of the folder because it might not resolve correctly.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWN_FOLDER_FLAG.KF_FLAG_NOT_PARENT_RELATIVE">
            <summary>
            Gets the folder's default path independent of the current location of its parent. KF_FLAG_DEFAULT_PATH must also be set.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWN_FOLDER_FLAG.KF_FLAG_DEFAULT_PATH">
            <summary>
            Gets the default path for a known folder. If this flag is not set, the function retrieves the current—and possibly
            redirected—path of the folder. The execution of this flag includes a verification of the folder's existence unless
            KF_FLAG_DONT_VERIFY is set.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWN_FOLDER_FLAG.KF_FLAG_INIT">
            <summary>
            Initializes the folder using its Desktop.ini settings. If the folder cannot be initialized, the function returns a failure
            code and no path is returned. This flag should always be combined with KF_FLAG_CREATE. If the folder is located on a
            network, the function might take a longer time to execute.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWN_FOLDER_FLAG.KF_FLAG_NO_ALIAS">
            <summary>
            Gets the true system path for the folder, free of any aliased placeholders such as %USERPROFILE%, returned by
            SHGetKnownFolderIDList and IKnownFolder::GetIDList. This flag has no effect on paths returned by SHGetKnownFolderPath and
            IKnownFolder::GetPath. By default, known folder retrieval functions and methods return the aliased path if an alias exists.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWN_FOLDER_FLAG.KF_FLAG_DONT_UNEXPAND">
            <summary>
            Stores the full path in the registry without using environment strings. If this flag is not set, portions of the path may be
            represented by environment strings such as %USERPROFILE%. This flag can only be used with SHSetKnownFolderPath and IKnownFolder::SetPath.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWN_FOLDER_FLAG.KF_FLAG_DONT_VERIFY">
            <summary>
            Do not verify the folder's existence before attempting to retrieve the path or IDList. If this flag is not set, an attempt
            is made to verify that the folder is truly present at the path. If that verification fails due to the folder being absent or
            inaccessible, the function returns a failure code and no path is returned. If the folder is located on a network, the
            function might take a longer time to execute. Setting this flag can reduce that lag time.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWN_FOLDER_FLAG.KF_FLAG_CREATE">
            <summary>
            Forces the creation of the specified folder if that folder does not already exist. The security provisions predefined for
            that folder are applied. If the folder does not exist and cannot be created, the function returns a failure code and no path
            is returned. This value can be used only with the following functions and methods: SHGetKnownFolderPath,
            SHGetKnownFolderIDList, IKnownFolder::GetIDList, IKnownFolder::GetPath, and IKnownFolder::GetShellItem.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWN_FOLDER_FLAG.KF_FLAG_NO_APPCONTAINER_REDIRECTION">
            <summary>
            Introduced in Windows 7: When running inside an app container, or when providing an app container token, this flag prevents
            redirection to app container folders. Instead, it retrieves the path that would be returned where it not running inside an
            app container.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWN_FOLDER_FLAG.KF_FLAG_ALIAS_ONLY">
            <summary>Introduced in Windows 7. Return only aliased PIDLs. Do not use the file system path.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.KNOWNFOLDERID">
            <summary>
            The KNOWNFOLDERID constants represent GUIDs that identify standard folders registered with the system as Known Folders. These
            folders are installed with Windows Vista and later operating systems, and a computer will have only folders appropriate to it
            installed. For descriptions of these folders, see CSIDL.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_AccountPictures">
            <summary>Account Pictures
            <para>Category:       KF_CATEGORY_PERUSER</para>
            <para>Path:           %APPDATA%\Microsoft\Windows\AccountPictures</para>
            <para>Localized Name: Account Pictures</para>
            <para>Attributes:     FILE_ATTRIBUTE_READONLY</para>
            <para>Flags:          KFDF_ROAMABLE, KFDF_PRECREATE</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_AddNewPrograms">
            <summary>AddNewProgramsFolder
            <para>Category:       KF_CATEGORY_VIRTUAL</para>
            <para>Parsing Name:   shell:::{26EE0668-A00A-44D7-9371-BEB064C98683}\0\::{15eae92e-f17a-4431-9f28-805e482dafd4}</para>
            <para>Attributes:     SECURITY_ANONYMOUS</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_AdminTools">
            <summary>Windows Administrative Tools
            <para>Category:       KF_CATEGORY_PERUSER</para>
            <para>Path:           %APPDATA%\Microsoft\Windows\Start Menu\Programs\Administrative Tools</para>
            <para>Localized Name: Windows Administrative Tools</para>
            <para>Attributes:     FILE_ATTRIBUTE_READONLY</para>
            <para>Flags:          KFDF_PRECREATE</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_ApplicationShortcuts">
            <summary>Application Shortcuts
            <para>Category:       KF_CATEGORY_PERUSER</para>
            <para>Path:           %LOCALAPPDATA%\Microsoft\Windows\Application Shortcuts</para>
            <para>Localized Name: Application Shortcuts</para>
            <para>Attributes:     FILE_ATTRIBUTE_READONLY</para>
            <para>Flags:          KFDF_PRECREATE</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_AppsFolder">
            <summary>AppsFolder
            <para>Category:       KF_CATEGORY_VIRTUAL</para>
            <para>Parsing Name:   shell:::{4234d49b-0245-4df3-b780-3893943456e1}</para>
            <para>Attributes:     SECURITY_ANONYMOUS</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_AppUpdates">
            <summary>AppUpdatesFolder
            <para>Category:       KF_CATEGORY_VIRTUAL</para>
            <para>Parsing Name:   ::{26EE0668-A00A-44D7-9371-BEB064C98683}\0\::{7b81be6a-ce2b-4676-a29e-eb907a5126c5}\::{d450a8a1-9568-45c7-9c0e-b4f9fb4537bd}</para>
            <para>Attributes:     SECURITY_ANONYMOUS</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_CameraRoll">
            <summary>Camera Roll
            <para>Category:       KF_CATEGORY_PERUSER</para>
            <para>Path:           %USERPROFILE%\Pictures\Camera Roll</para>
            <para>Localized Name: Camera Roll</para>
            <para>Attributes:     SECURITY_ANONYMOUS</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_CDBurning">
            <summary>Temporary Burn Folder
            <para>Category:       KF_CATEGORY_PERUSER</para>
            <para>Path:           %LOCALAPPDATA%\Microsoft\Windows\Burn\Burn</para>
            <para>Localized Name: Temporary Burn Folder</para>
            <para>Attributes:     FILE_ATTRIBUTE_READONLY</para>
            <para>Flags:          KFDF_LOCAL_REDIRECT_ONLY</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_ChangeRemovePrograms">
            <summary>ChangeRemoveProgramsFolder
            <para>Category:       KF_CATEGORY_VIRTUAL</para>
            <para>Parsing Name:   ::{26EE0668-A00A-44D7-9371-BEB064C98683}\0\::{7b81be6a-ce2b-4676-a29e-eb907a5126c5}</para>
            <para>Attributes:     SECURITY_ANONYMOUS</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_CommonAdminTools">
            <summary>Windows Administrative Tools
            <para>Category:       KF_CATEGORY_COMMON</para>
            <para>Path:           %ALLUSERSPROFILE%\Microsoft\Windows\Start Menu\Programs\Administrative Tools</para>
            <para>Localized Name: Windows Administrative Tools</para>
            <para>Attributes:     FILE_ATTRIBUTE_READONLY</para>
            <para>Flags:          KFDF_PRECREATE</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_CommonOEMLinks">
            <summary>OEM Links
            <para>Category:       KF_CATEGORY_COMMON</para>
            <para>Path:           %ALLUSERSPROFILE%\OEM Links</para>
            <para>Attributes:     SECURITY_ANONYMOUS</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_CommonPrograms">
            <summary>Programs
            <para>Category:       KF_CATEGORY_COMMON</para>
            <para>Path:           %ALLUSERSPROFILE%\Microsoft\Windows\Start Menu\Programs</para>
            <para>Localized Name: Programs</para>
            <para>Attributes:     FILE_ATTRIBUTE_READONLY</para>
            <para>Flags:          KFDF_PRECREATE</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_CommonStartMenu">
            <summary>Start Menu
            <para>Category:       KF_CATEGORY_COMMON</para>
            <para>Path:           %ALLUSERSPROFILE%\Microsoft\Windows\Start Menu</para>
            <para>Localized Name: Start Menu</para>
            <para>Attributes:     FILE_ATTRIBUTE_READONLY</para>
            <para>Flags:          KFDF_PRECREATE</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_CommonStartup">
            <summary>Startup
            <para>Category:       KF_CATEGORY_COMMON</para>
            <para>Path:           %ALLUSERSPROFILE%\Microsoft\Windows\Start Menu\Programs\Startup</para>
            <para>Localized Name: Startup</para>
            <para>Attributes:     FILE_ATTRIBUTE_READONLY</para>
            <para>Flags:          KFDF_PRECREATE</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_CommonTemplates">
            <summary>Common Templates
            <para>Category:       KF_CATEGORY_COMMON</para>
            <para>Path:           %ALLUSERSPROFILE%\Microsoft\Windows\Templates</para>
            <para>Attributes:     SECURITY_ANONYMOUS</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_ComputerFolder">
            <summary>MyComputerFolder
            <para>Category:       KF_CATEGORY_VIRTUAL</para>
            <para>Parsing Name:   ::{20D04FE0-3AEA-1069-A2D8-08002B30309D}</para>
            <para>Attributes:     SECURITY_ANONYMOUS</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_ConflictFolder">
            <summary>ConflictFolder
            <para>Category:       KF_CATEGORY_VIRTUAL</para>
            <para>Parsing Name:   ::{26EE0668-A00A-44D7-9371-BEB064C98683}\0\::{9C73F5E5-7AE7-4E32-A8E8-8D23B85255BF}\::{E413D040-6788-4C22-957E-175D1C513A34},</para>
            <para>Attributes:     SECURITY_ANONYMOUS</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_ConnectionsFolder">
            <summary>ConnectionsFolder
            <para>Category:       KF_CATEGORY_VIRTUAL</para>
            <para>Parsing Name:   ::{26EE0668-A00A-44D7-9371-BEB064C98683}\0\::{7007ACC7-3202-11D1-AAD2-00805FC1270E}</para>
            <para>Attributes:     SECURITY_ANONYMOUS</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_Contacts">
            <summary>Contacts
            <para>Category:       KF_CATEGORY_PERUSER</para>
            <para>Path:           %USERPROFILE%\Contacts</para>
            <para>Parsing Name:   ::{59031a47-3f72-44a7-89c5-5595fe6b30ee}\{56784854-C6CB-462B-8169-88E350ACB882}</para>
            <para>Tooltip:        Contains Contact files.</para>
            <para>Localized Name: Contacts</para>
            <para>Attributes:     FILE_ATTRIBUTE_READONLY</para>
            <para>Flags:          KFDF_ROAMABLE, KFDF_PRECREATE, KFDF_PUBLISHEXPANDEDPATH</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_ControlPanelFolder">
            <summary>ControlPanelFolder
            <para>Category:       KF_CATEGORY_VIRTUAL</para>
            <para>Parsing Name:   ::{26EE0668-A00A-44D7-9371-BEB064C98683}\0</para>
            <para>Attributes:     SECURITY_ANONYMOUS</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_Cookies">
            <summary>Cookies
            <para>Category:       KF_CATEGORY_PERUSER</para>
            <para>Path:           %LOCALAPPDATA%\Microsoft\Windows\INetCookies</para>
            <para>Attributes:     SECURITY_ANONYMOUS</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_Desktop">
            <summary>Desktop
            <para>Category:       KF_CATEGORY_PERUSER</para>
            <para>Path:           %USERPROFILE%\Desktop</para>
            <para>Localized Name: Desktop</para>
            <para>Attributes:     FILE_ATTRIBUTE_READONLY</para>
            <para>Flags:          KFDF_ROAMABLE, KFDF_PRECREATE, KFDF_PUBLISHEXPANDEDPATH</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_DeviceMetadataStore">
            <summary>Device Metadata Store
            <para>Category:       KF_CATEGORY_COMMON</para>
            <para>Path:           %ALLUSERSPROFILE%\Microsoft\Windows\DeviceMetadataStore</para>
            <para>Attributes:     SECURITY_ANONYMOUS</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_Documents">
            <summary>Documents
            <para>Category:       KF_CATEGORY_PERUSER</para>
            <para>Path:           %USERPROFILE%\Documents</para>
            <para>Parsing Name:   shell:::{20D04FE0-3AEA-1069-A2D8-08002B30309D}\::{A8CDFF1C-4878-43be-B5FD-F8091C1C60D0}</para>
            <para>Localized Name: Documents</para>
            <para>Attributes:     FILE_ATTRIBUTE_READONLY</para>
            <para>Flags:          KFDF_ROAMABLE, KFDF_PRECREATE</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_DocumentsLibrary">
            <summary>Documents
            <para>Category:       KF_CATEGORY_PERUSER</para>
            <para>Path:           %APPDATA%\Microsoft\Windows\Libraries\Documents.library-ms</para>
            <para>Parsing Name:   ::{031E4825-7B94-4dc3-B131-E946B44C8DD5}\{7b0db17d-9cd2-4a93-9733-46cc89022e7c}</para>
            <para>Localized Name: Documents</para>
            <para>Attributes:     SECURITY_ANONYMOUS</para>
            <para>Flags:          KFDF_PRECREATE, KFDF_STREAM</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_Downloads">
            <summary>Downloads
            <para>Category:       KF_CATEGORY_PERUSER</para>
            <para>Path:           %USERPROFILE%\Downloads</para>
            <para>Parsing Name:   shell:::{20D04FE0-3AEA-1069-A2D8-08002B30309D}\::{374DE290-123F-4565-9164-39C4925E467B}</para>
            <para>Localized Name: Downloads</para>
            <para>SDDL:           S:AI(RA;IOOICI;;;;WD;("IMAGELOAD",TU,0x0,0x01))</para>
            <para>Attributes:     FILE_ATTRIBUTE_READONLY</para>
            <para>Flags:          KFDF_ROAMABLE, KFDF_PRECREATE, KFDF_PUBLISHEXPANDEDPATH</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_Favorites">
            <summary>Favorites
            <para>Category:       KF_CATEGORY_PERUSER</para>
            <para>Path:           %USERPROFILE%\Favorites</para>
            <para>Localized Name: Favorites</para>
            <para>Attributes:     FILE_ATTRIBUTE_READONLY</para>
            <para>Flags:          KFDF_ROAMABLE, KFDF_PRECREATE, KFDF_PUBLISHEXPANDEDPATH</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_Fonts">
            <summary>Fonts
            <para>Category:       KF_CATEGORY_FIXED</para>
            <para>Path:           %SystemRoot%\Fonts</para>
            <para>Attributes:     SECURITY_ANONYMOUS</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_Games">
            <summary>Games</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_GameTasks">
            <summary>GameTasks
            <para>Category:       KF_CATEGORY_PERUSER</para>
            <para>Path:           %LOCALAPPDATA%\Microsoft\Windows\GameExplorer</para>
            <para>Attributes:     SECURITY_ANONYMOUS</para>
            <para>Flags:          KFDF_LOCAL_REDIRECT_ONLY</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_History">
            <summary>History
            <para>Category:       KF_CATEGORY_PERUSER</para>
            <para>Path:           %LOCALAPPDATA%\Microsoft\Windows\History</para>
            <para>Attributes:     SECURITY_ANONYMOUS</para>
            <para>Flags:          KFDF_LOCAL_REDIRECT_ONLY</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_HomeGroup">
            <summary>HomeGroupFolder
            <para>Category:       KF_CATEGORY_VIRTUAL</para>
            <para>Parsing Name:   ::{B4FB3F98-C1EA-428d-A78A-D1F5659CBA93}</para>
            <para>Attributes:     SECURITY_ANONYMOUS</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_HomeGroupCurrentUser">
            <summary>HomeGroupCurrentUserFolder
            <para>Category:       KF_CATEGORY_VIRTUAL</para>
            <para>Parsing Name:   ::{B4FB3F98-C1EA-428d-A78A-D1F5659CBA93}\$CurrentUser$</para>
            <para>Attributes:     SECURITY_ANONYMOUS</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_ImplicitAppShortcuts">
            <summary>ImplicitAppShortcuts
            <para>Category:       KF_CATEGORY_PERUSER</para>
            <para>Path:           %APPDATA%\Microsoft\Internet Explorer\Quick Launch\User Pinned\ImplicitAppShortcuts</para>
            <para>Attributes:     SECURITY_ANONYMOUS</para>
            <para>Flags:          KFDF_PRECREATE</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_InternetCache">
            <summary>Cache
            <para>Category:       KF_CATEGORY_PERUSER</para>
            <para>Path:           %LOCALAPPDATA%\Microsoft\Windows\INetCache</para>
            <para>Attributes:     SECURITY_ANONYMOUS</para>
            <para>Flags:          KFDF_LOCAL_REDIRECT_ONLY</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_InternetFolder">
            <summary>InternetFolder
            <para>Category:       KF_CATEGORY_VIRTUAL</para>
            <para>Parsing Name:   ::{871C5380-42A0-1069-A2EA-08002B30309D}</para>
            <para>Attributes:     SECURITY_ANONYMOUS</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_Libraries">
            <summary>Libraries
            <para>Category:       KF_CATEGORY_PERUSER</para>
            <para>Path:           %APPDATA%\Microsoft\Windows\Libraries</para>
            <para>Attributes:     SECURITY_ANONYMOUS</para>
            <para>Flags:          KFDF_PRECREATE, KFDF_PUBLISHEXPANDEDPATH</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_Links">
            <summary>Links
            <para>Category:       KF_CATEGORY_PERUSER</para>
            <para>Path:           %USERPROFILE%\Links</para>
            <para>Parsing Name:   ::{59031a47-3f72-44a7-89c5-5595fe6b30ee}\{bfb9d5e0-c6a9-404c-b2b2-ae6db6af4968}</para>
            <para>Localized Name: Links</para>
            <para>Attributes:     FILE_ATTRIBUTE_READONLY</para>
            <para>Flags:          KFDF_ROAMABLE, KFDF_PRECREATE, KFDF_PUBLISHEXPANDEDPATH</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_LocalAppData">
            <summary>Local AppData
            <para>Category:       KF_CATEGORY_PERUSER</para>
            <para>Path:           %LOCALAPPDATA%</para>
            <para>Attributes:     SECURITY_ANONYMOUS</para>
            <para>Flags:          KFDF_LOCAL_REDIRECT_ONLY, KFDF_PUBLISHEXPANDEDPATH</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_LocalAppDataLow">
            <summary>LocalAppDataLow
            <para>Category:       KF_CATEGORY_PERUSER</para>
            <para>Path:           %LOCALAPPDATA%Low</para>
            <para>SDDL:           S:(ML;OICI;NW;;;LW)</para>
            <para>Attributes:     FILE_ATTRIBUTE_NOT_CONTENT_INDEXED</para>
            <para>Flags:          KFDF_LOCAL_REDIRECT_ONLY, KFDF_PRECREATE, KFDF_PUBLISHEXPANDEDPATH</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_LocalizedResourcesDir">
            <summary>LocalizedResourcesDir
            <para>Category:       KF_CATEGORY_FIXED</para>
            <para>Path:           %SystemRoot%\resources\0409</para>
            <para>Attributes:     SECURITY_ANONYMOUS</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_Music">
            <summary>Music
            <para>Category:       KF_CATEGORY_PERUSER</para>
            <para>Path:           %USERPROFILE%\Music</para>
            <para>Parsing Name:   shell:::{20D04FE0-3AEA-1069-A2D8-08002B30309D}\::{1CF1260C-4DD0-4EBB-811F-33C572699FDE}</para>
            <para>Tooltip:        Contains music and other audio files.</para>
            <para>Localized Name: Music</para>
            <para>Attributes:     FILE_ATTRIBUTE_READONLY</para>
            <para>Flags:          KFDF_ROAMABLE, KFDF_PRECREATE</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_MusicLibrary">
            <summary>Music
            <para>Category:       KF_CATEGORY_PERUSER</para>
            <para>Path:           %APPDATA%\Microsoft\Windows\Libraries\Music.library-ms</para>
            <para>Parsing Name:   ::{031E4825-7B94-4dc3-B131-E946B44C8DD5}\{2112AB0A-C86A-4ffe-A368-0DE96E47012E}</para>
            <para>Tooltip:        Contains music and other audio files.</para>
            <para>Localized Name: Music</para>
            <para>Attributes:     SECURITY_ANONYMOUS</para>
            <para>Flags:          KFDF_PRECREATE, KFDF_STREAM</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_NetHood">
            <summary>NetHood
            <para>Category:       KF_CATEGORY_PERUSER</para>
            <para>Path:           %APPDATA%\Microsoft\Windows\Network Shortcuts</para>
            <para>Attributes:     SECURITY_ANONYMOUS</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_NetworkFolder">
            <summary>NetworkPlacesFolder
            <para>Category:       KF_CATEGORY_VIRTUAL</para>
            <para>Parsing Name:   ::{F02C1A0D-BE21-4350-88B0-7367FC96EF3C}</para>
            <para>Attributes:     SECURITY_ANONYMOUS</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_Objects3D">
            <summary>3D Objects
            <para>Category:       KF_CATEGORY_PERUSER</para>
            <para>Path:           %USERPROFILE%\3D Objects</para>
            <para>Localized Name: 3D Objects</para>
            <para>Attributes:     SECURITY_ANONYMOUS</para>
            <para>Flags:          KFDF_PRECREATE</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_OriginalImages">
            <summary>Original Images
            <para>Category:       KF_CATEGORY_PERUSER</para>
            <para>Path:           %LOCALAPPDATA%\Microsoft\Windows Photo Gallery\Original Images</para>
            <para>Attributes:     SECURITY_ANONYMOUS</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_PhotoAlbums">
            <summary>Slide Shows
            <para>Category:       KF_CATEGORY_PERUSER</para>
            <para>Path:           %USERPROFILE%\Pictures\Slide Shows</para>
            <para>Localized Name: Slide Shows</para>
            <para>Attributes:     FILE_ATTRIBUTE_READONLY</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_PicturesLibrary">
            <summary>Pictures
            <para>Category:       KF_CATEGORY_PERUSER</para>
            <para>Path:           %APPDATA%\Microsoft\Windows\Libraries\Pictures.library-ms</para>
            <para>Parsing Name:   ::{031E4825-7B94-4dc3-B131-E946B44C8DD5}\{A990AE9F-A03B-4e80-94BC-9912D7504104}</para>
            <para>Tooltip:        Contains digital photos, images, and graphic files.</para>
            <para>Localized Name: Pictures</para>
            <para>Attributes:     SECURITY_ANONYMOUS</para>
            <para>Flags:          KFDF_PRECREATE, KFDF_STREAM</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_Pictures">
            <summary>Pictures
            <para>Category:       KF_CATEGORY_PERUSER</para>
            <para>Path:           %USERPROFILE%\Pictures</para>
            <para>Parsing Name:   shell:::{20D04FE0-3AEA-1069-A2D8-08002B30309D}\::{3ADD1653-EB32-4CB0-BBD7-DFA0ABB5ACCA}</para>
            <para>Tooltip:        Contains digital photos, images, and graphic files.</para>
            <para>Localized Name: Pictures</para>
            <para>Attributes:     FILE_ATTRIBUTE_READONLY</para>
            <para>Flags:          KFDF_ROAMABLE, KFDF_PRECREATE</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_Playlists">
            <summary>Playlists
            <para>Category:       KF_CATEGORY_PERUSER</para>
            <para>Path:           %USERPROFILE%\Music\Playlists</para>
            <para>Localized Name: Playlists</para>
            <para>Attributes:     FILE_ATTRIBUTE_READONLY</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_PrintersFolder">
            <summary>PrintersFolder
            <para>Category:       KF_CATEGORY_VIRTUAL</para>
            <para>Parsing Name:   ::{21EC2020-3AEA-1069-A2DD-08002B30309D}\::{2227A280-3AEA-1069-A2DE-08002B30309D}</para>
            <para>Attributes:     SECURITY_ANONYMOUS</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_PrintHood">
            <summary>PrintHood
            <para>Category:       KF_CATEGORY_PERUSER</para>
            <para>Path:           %APPDATA%\Microsoft\Windows\Printer Shortcuts</para>
            <para>Attributes:     SECURITY_ANONYMOUS</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_Profile">
            <summary>Profile
            <para>Category:       KF_CATEGORY_FIXED</para>
            <para>Path:           %USERPROFILE%</para>
            <para>Attributes:     SECURITY_ANONYMOUS</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_ProgramData">
            <summary>Common AppData
            <para>Category:       KF_CATEGORY_FIXED</para>
            <para>Path:           %ALLUSERSPROFILE%</para>
            <para>Attributes:     SECURITY_ANONYMOUS</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_ProgramFiles">
            <summary>Program Files
            <para>Category:       KF_CATEGORY_FIXED</para>
            <para>Path:           %ProgramFiles% (x86)</para>
            <para>Localized Name: Program Files</para>
            <para>Attributes:     FILE_ATTRIBUTE_READONLY</para>
            <para>Flags:          KFDF_PRECREATE</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_ProgramFilesX64">
            <summary>Program Files</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_ProgramFilesX86">
            <summary>Program Files (x86)
            <para>Category:       KF_CATEGORY_FIXED</para>
            <para>Path:           %ProgramFiles% (x86)</para>
            <para>Localized Name: Program Files (x86)</para>
            <para>Attributes:     FILE_ATTRIBUTE_READONLY</para>
            <para>Flags:          KFDF_PRECREATE</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_ProgramFilesCommon">
            <summary>ProgramFilesCommon
            <para>Category:       KF_CATEGORY_FIXED</para>
            <para>Path:           %ProgramFiles% (x86)\Common Files</para>
            <para>Attributes:     SECURITY_ANONYMOUS</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_ProgramFilesCommonX64">
            <summary>Common Files</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_ProgramFilesCommonX86">
            <summary>ProgramFilesCommonX86
            <para>Category:       KF_CATEGORY_FIXED</para>
            <para>Path:           %ProgramFiles% (x86)\Common Files</para>
            <para>Attributes:     SECURITY_ANONYMOUS</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_Programs">
            <summary>Programs
            <para>Category:       KF_CATEGORY_PERUSER</para>
            <para>Path:           %APPDATA%\Microsoft\Windows\Start Menu\Programs</para>
            <para>Localized Name: Programs</para>
            <para>Attributes:     FILE_ATTRIBUTE_READONLY</para>
            <para>Flags:          KFDF_PRECREATE</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_Public">
            <summary>Public
            <para>Category:       KF_CATEGORY_FIXED</para>
            <para>Path:           %PUBLIC%</para>
            <para>Localized Name: Public</para>
            <para>SDDL:           D:PAI(A;OICI;FA;;;BA)(A;OICIIO;FA;;;CO)(A;OICI;FA;;;SY)(A;OICIIO;0x1301ff;;;IU)(A;;0x1200af;;;IU)(A;OICIIO;0x1301ff;;;SU)(A;;0x1200af;;;SU)(A;OICIIO;0x1301ff;;;S-1-5-3)(A;;0x1200af;;;S-1-5-3)</para>
            <para>Attributes:     FILE_ATTRIBUTE_READONLY</para>
            <para>Flags:          KFDF_PRECREATE</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_PublicDesktop">
            <summary>Public Desktop
            <para>Category:       KF_CATEGORY_COMMON</para>
            <para>Path:           %PUBLIC%\Desktop</para>
            <para>Localized Name: Public Desktop</para>
            <para>SDDL:           D:P(A;OICI;FA;;;BA)(A;OICI;0x1200a9;;;IU)(A;OICI;FA;;;SY)</para>
            <para>Attributes:     FILE_ATTRIBUTE_READONLY, FILE_ATTRIBUTE_HIDDEN</para>
            <para>Flags:          KFDF_PRECREATE</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_PublicDocuments">
            <summary>Public Documents
            <para>Category:       KF_CATEGORY_COMMON</para>
            <para>Path:           %PUBLIC%\Documents</para>
            <para>Localized Name: Public Documents</para>
            <para>Attributes:     FILE_ATTRIBUTE_READONLY</para>
            <para>Flags:          KFDF_PRECREATE</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_PublicDownloads">
            <summary>Public Downloads
            <para>Category:       KF_CATEGORY_COMMON</para>
            <para>Path:           %PUBLIC%\Downloads</para>
            <para>Localized Name: Public Downloads</para>
            <para>Attributes:     FILE_ATTRIBUTE_READONLY</para>
            <para>Flags:          KFDF_PRECREATE</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_PublicGameTasks">
            <summary>PublicGameTasks
            <para>Category:       KF_CATEGORY_COMMON</para>
            <para>Path:           %ALLUSERSPROFILE%\Microsoft\Windows\GameExplorer</para>
            <para>Attributes:     SECURITY_ANONYMOUS</para>
            <para>Flags:          KFDF_LOCAL_REDIRECT_ONLY</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_PublicLibraries">
            <summary>PublicLibraries
            <para>Category:       KF_CATEGORY_COMMON</para>
            <para>Path:           %PUBLIC%\Libraries</para>
            <para>Attributes:     FILE_ATTRIBUTE_READONLY, FILE_ATTRIBUTE_HIDDEN</para>
            <para>Flags:          KFDF_PRECREATE</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_PublicMusic">
            <summary>Public Music
            <para>Category:       KF_CATEGORY_COMMON</para>
            <para>Path:           %PUBLIC%\Music</para>
            <para>Tooltip:        Contains music and other audio files.</para>
            <para>Localized Name: Public Music</para>
            <para>Attributes:     FILE_ATTRIBUTE_READONLY</para>
            <para>Flags:          KFDF_PRECREATE</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_PublicPictures">
            <summary>Public Pictures
            <para>Category:       KF_CATEGORY_COMMON</para>
            <para>Path:           %PUBLIC%\Pictures</para>
            <para>Tooltip:        Contains digital photos, images, and graphic files.</para>
            <para>Localized Name: Public Pictures</para>
            <para>Attributes:     FILE_ATTRIBUTE_READONLY</para>
            <para>Flags:          KFDF_PRECREATE</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_PublicRingtones">
            <summary>CommonRingtones
            <para>Category:       KF_CATEGORY_COMMON</para>
            <para>Path:           %ALLUSERSPROFILE%\Microsoft\Windows\Ringtones</para>
            <para>Attributes:     SECURITY_ANONYMOUS</para>
            <para>Flags:          KFDF_PRECREATE</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_PublicUserTiles">
            <summary>Public Account Pictures
            <para>Category:       KF_CATEGORY_PERUSER</para>
            <para>Path:           %PUBLIC%\AccountPictures</para>
            <para>Localized Name: Public Account Pictures</para>
            <para>Attributes:     FILE_ATTRIBUTE_READONLY, FILE_ATTRIBUTE_HIDDEN</para>
            <para>Flags:          KFDF_PRECREATE</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_PublicVideos">
            <summary>Public Videos
            <para>Category:       KF_CATEGORY_COMMON</para>
            <para>Path:           %PUBLIC%\Videos</para>
            <para>Tooltip:        Contains movies and other video files.</para>
            <para>Localized Name: Public Videos</para>
            <para>Attributes:     FILE_ATTRIBUTE_READONLY</para>
            <para>Flags:          KFDF_PRECREATE</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_QuickLaunch">
            <summary>Quick Launch
            <para>Category:       KF_CATEGORY_PERUSER</para>
            <para>Path:           %APPDATA%\Microsoft\Internet Explorer\Quick Launch</para>
            <para>Attributes:     SECURITY_ANONYMOUS</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_Recent">
            <summary>Recent Items
            <para>Category:       KF_CATEGORY_PERUSER</para>
            <para>Path:           %APPDATA%\Microsoft\Windows\Recent</para>
            <para>Localized Name: Recent Items</para>
            <para>Attributes:     FILE_ATTRIBUTE_READONLY</para>
            <para>Flags:          KFDF_PRECREATE</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_RecordedTVLibrary">
            <summary>Recorded TV
            <para>Category:       KF_CATEGORY_COMMON</para>
            <para>Path:           %PUBLIC%\Libraries\RecordedTV.library-ms</para>
            <para>Localized Name: Recorded TV</para>
            <para>Attributes:     SECURITY_ANONYMOUS</para>
            <para>Flags:          KFDF_PRECREATE, KFDF_STREAM</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_RecycleBinFolder">
            <summary>RecycleBinFolder
            <para>Category:       KF_CATEGORY_VIRTUAL</para>
            <para>Parsing Name:   ::{645FF040-5081-101B-9F08-00AA002F954E}</para>
            <para>Attributes:     SECURITY_ANONYMOUS</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_ResourceDir">
            <summary>ResourceDir
            <para>Category:       KF_CATEGORY_FIXED</para>
            <para>Path:           %SystemRoot%\resources</para>
            <para>Attributes:     SECURITY_ANONYMOUS</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_Ringtones">
            <summary>Ringtones
            <para>Category:       KF_CATEGORY_PERUSER</para>
            <para>Path:           %LOCALAPPDATA%\Microsoft\Windows\Ringtones</para>
            <para>Attributes:     SECURITY_ANONYMOUS</para>
            <para>Flags:          KFDF_PRECREATE</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_RoamingAppData">
            <summary>AppData
            <para>Category:       KF_CATEGORY_PERUSER</para>
            <para>Path:           %APPDATA%</para>
            <para>Attributes:     SECURITY_ANONYMOUS</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_RoamedTileImages">
            <summary>Roamed Tile Images
            <para>Category:       KF_CATEGORY_PERUSER</para>
            <para>Path:           %LOCALAPPDATA%\Microsoft\Windows\RoamedTileImages</para>
            <para>Attributes:     SECURITY_ANONYMOUS</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_RoamingTiles">
            <summary>Roaming Tiles
            <para>Category:       KF_CATEGORY_PERUSER</para>
            <para>Path:           %LOCALAPPDATA%\Microsoft\Windows\RoamingTiles</para>
            <para>Attributes:     SECURITY_ANONYMOUS</para>
            <para>Flags:          KFDF_PRECREATE, KFDF_PUBLISHEXPANDEDPATH</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_SampleMusic">
            <summary>SampleMusic
            <para>Category:       KF_CATEGORY_COMMON</para>
            <para>Path:           %PUBLIC%\Music\Sample Music</para>
            <para>Attributes:     SECURITY_ANONYMOUS</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_SamplePictures">
            <summary>SamplePictures
            <para>Category:       KF_CATEGORY_COMMON</para>
            <para>Path:           %PUBLIC%\Pictures\Sample Pictures</para>
            <para>Attributes:     SECURITY_ANONYMOUS</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_SamplePlaylists">
            <summary>Sample Playlists</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_SampleVideos">
            <summary>SampleVideos
            <para>Category:       KF_CATEGORY_COMMON</para>
            <para>Path:           %PUBLIC%\Videos\Sample Videos</para>
            <para>Attributes:     SECURITY_ANONYMOUS</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_SavedGames">
            <summary>Saved Games
            <para>Category:       KF_CATEGORY_PERUSER</para>
            <para>Path:           %USERPROFILE%\Saved Games</para>
            <para>Parsing Name:   ::{59031a47-3f72-44a7-89c5-5595fe6b30ee}\{4C5C32FF-BB9D-43b0-B5B4-2D72E54EAAA4}</para>
            <para>Localized Name: Saved Games</para>
            <para>Attributes:     FILE_ATTRIBUTE_READONLY</para>
            <para>Flags:          KFDF_ROAMABLE, KFDF_PRECREATE, KFDF_PUBLISHEXPANDEDPATH</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_SavedPictures">
            <summary>Saved Pictures
            <para>Category:       KF_CATEGORY_PERUSER</para>
            <para>Path:           %USERPROFILE%\Pictures\Saved Pictures</para>
            <para>Localized Name: Saved Pictures</para>
            <para>Attributes:     SECURITY_ANONYMOUS</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_SavedPicturesLibrary">
            <summary>Saved Pictures
            <para>Category:       KF_CATEGORY_PERUSER</para>
            <para>Path:           %APPDATA%\Microsoft\Windows\Libraries\SavedPictures.library-ms</para>
            <para>Parsing Name:   ::{031E4825-7B94-4dc3-B131-E946B44C8DD5}\{E25B5812-BE88-4bd9-94B0-29233477B6C3}</para>
            <para>Localized Name: Saved Pictures</para>
            <para>Attributes:     SECURITY_ANONYMOUS</para>
            <para>Flags:          KFDF_STREAM</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_SavedSearches">
            <summary>Searches
            <para>Category:       KF_CATEGORY_PERUSER</para>
            <para>Path:           %USERPROFILE%\Searches</para>
            <para>Parsing Name:   ::{59031a47-3f72-44a7-89c5-5595fe6b30ee}\{7d1d3a04-debb-4115-95cf-2f29da2920da}</para>
            <para>Localized Name: Searches</para>
            <para>Attributes:     FILE_ATTRIBUTE_READONLY</para>
            <para>Flags:          KFDF_PRECREATE, KFDF_PUBLISHEXPANDEDPATH</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_Screenshots">
            <summary>Screenshots
            <para>Category:       KF_CATEGORY_PERUSER</para>
            <para>Path:           %USERPROFILE%\Pictures\Screenshots</para>
            <para>Localized Name: Screenshots</para>
            <para>Attributes:     SECURITY_ANONYMOUS</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_SEARCH_CSC">
            <summary>CSCFolder
            <para>Category:       KF_CATEGORY_VIRTUAL</para>
            <para>Parsing Name:   shell:::{BD7A2E7B-21CB-41b2-A086-B309680C6B7E}\*</para>
            <para>Attributes:     SECURITY_ANONYMOUS</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_SearchHistory">
            <summary>SearchHistoryFolder
            <para>Category:       KF_CATEGORY_PERUSER</para>
            <para>Path:           %LOCALAPPDATA%\Microsoft\Windows\ConnectedSearch\History</para>
            <para>Attributes:     SECURITY_ANONYMOUS</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_SearchHome">
            <summary>SearchHomeFolder
            <para>Category:       KF_CATEGORY_VIRTUAL</para>
            <para>Parsing Name:   ::{9343812e-1c37-4a49-a12e-4b2d810d956b}</para>
            <para>Attributes:     SECURITY_ANONYMOUS</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_SEARCH_MAPI">
            <summary>MAPIFolder
            <para>Category:       KF_CATEGORY_VIRTUAL</para>
            <para>Parsing Name:   shell:::{89D83576-6BD1-4C86-9454-BEB04E94C819}\*</para>
            <para>Attributes:     SECURITY_ANONYMOUS</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_SearchTemplates">
            <summary>SearchTemplatesFolder
            <para>Category:       KF_CATEGORY_PERUSER</para>
            <para>Path:           %LOCALAPPDATA%\Microsoft\Windows\ConnectedSearch\Templates</para>
            <para>Attributes:     SECURITY_ANONYMOUS</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_SendTo">
            <summary>SendTo
            <para>Category:       KF_CATEGORY_PERUSER</para>
            <para>Path:           %APPDATA%\Microsoft\Windows\SendTo</para>
            <para>Attributes:     SECURITY_ANONYMOUS</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_SidebarDefaultParts">
            <summary>Gadgets</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_SidebarParts">
            <summary>Gadgets</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_SkyDrive">
            <summary>OneDrive
            <para>Category:       KF_CATEGORY_PERUSER</para>
            <para>Path:           %USERPROFILE%\OneDrive</para>
            <para>Parsing Name:   shell:::{018D5C66-4533-4307-9B53-224DE2ED1FE6}</para>
            <para>Localized Name: OneDrive</para>
            <para>Attributes:     FILE_ATTRIBUTE_READONLY</para>
            <para>Flags:          KFDF_LOCAL_REDIRECT_ONLY, KFDF_NO_REDIRECT_UI</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_SkyDriveCameraRoll">
            <summary>OneDriveCameraRoll
            <para>Category:       KF_CATEGORY_PERUSER</para>
            <para>Path:           %USERPROFILE%\OneDrive\Pictures\Camera Roll</para>
            <para>Attributes:     FILE_ATTRIBUTE_READONLY</para>
            <para>Flags:          KFDF_NO_REDIRECT_UI</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_SkyDriveDocuments">
            <summary>OneDriveDocuments
            <para>Category:       KF_CATEGORY_PERUSER</para>
            <para>Path:           %USERPROFILE%\OneDrive\Documents</para>
            <para>Attributes:     FILE_ATTRIBUTE_READONLY</para>
            <para>Flags:          KFDF_NO_REDIRECT_UI</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_SkyDrivePictures">
            <summary>OneDrivePictures
            <para>Category:       KF_CATEGORY_PERUSER</para>
            <para>Path:           %USERPROFILE%\OneDrive\Pictures</para>
            <para>Attributes:     FILE_ATTRIBUTE_READONLY</para>
            <para>Flags:          KFDF_NO_REDIRECT_UI</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_StartMenu">
            <summary>Start Menu
            <para>Category:       KF_CATEGORY_PERUSER</para>
            <para>Path:           %APPDATA%\Microsoft\Windows\Start Menu</para>
            <para>Localized Name: Start Menu</para>
            <para>Attributes:     FILE_ATTRIBUTE_READONLY</para>
            <para>Flags:          KFDF_PRECREATE</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_Startup">
            <summary>Startup
            <para>Category:       KF_CATEGORY_PERUSER</para>
            <para>Path:           %APPDATA%\Microsoft\Windows\Start Menu\Programs\Startup</para>
            <para>Localized Name: Startup</para>
            <para>Attributes:     FILE_ATTRIBUTE_READONLY</para>
            <para>Flags:          KFDF_PRECREATE</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_SyncManagerFolder">
            <summary>SyncCenterFolder
            <para>Category:       KF_CATEGORY_VIRTUAL</para>
            <para>Parsing Name:   ::{26EE0668-A00A-44D7-9371-BEB064C98683}\0\::{9C73F5E5-7AE7-4E32-A8E8-8D23B85255BF}</para>
            <para>Attributes:     SECURITY_ANONYMOUS</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_SyncResultsFolder">
            <summary>SyncResultsFolder
            <para>Category:       KF_CATEGORY_VIRTUAL</para>
            <para>Parsing Name:   ::{26EE0668-A00A-44D7-9371-BEB064C98683}\0\::{9C73F5E5-7AE7-4E32-A8E8-8D23B85255BF}\::{BC48B32F-5910-47F5-8570-5074A8A5636A},</para>
            <para>Attributes:     SECURITY_ANONYMOUS</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_SyncSetupFolder">
            <summary>SyncSetupFolder
            <para>Category:       KF_CATEGORY_VIRTUAL</para>
            <para>Parsing Name:   ::{26EE0668-A00A-44D7-9371-BEB064C98683}\0\::{9C73F5E5-7AE7-4E32-A8E8-8D23B85255BF}\::{F1390A9A-A3F4-4E5D-9C5F-98F3BD8D935C},</para>
            <para>Attributes:     SECURITY_ANONYMOUS</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_System">
            <summary>System
            <para>Category:       KF_CATEGORY_FIXED</para>
            <para>Path:           %SystemRoot%\system32</para>
            <para>Attributes:     SECURITY_ANONYMOUS</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_SystemX86">
            <summary>SystemX86
            <para>Category:       KF_CATEGORY_FIXED</para>
            <para>Path:           %SystemRoot%\SysWOW64</para>
            <para>Attributes:     SECURITY_ANONYMOUS</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_Templates">
            <summary>Templates
            <para>Category:       KF_CATEGORY_PERUSER</para>
            <para>Path:           %APPDATA%\Microsoft\Windows\Templates</para>
            <para>Attributes:     SECURITY_ANONYMOUS</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_UserPinned">
            <summary>User Pinned
            <para>Category:       KF_CATEGORY_PERUSER</para>
            <para>Path:           %APPDATA%\Microsoft\Internet Explorer\Quick Launch\User Pinned</para>
            <para>Attributes:     FILE_ATTRIBUTE_HIDDEN</para>
            <para>Flags:          KFDF_PRECREATE</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_UserProfiles">
            <summary>Users
            <para>Category:       KF_CATEGORY_FIXED</para>
            <para>Path:           %HOMEDRIVE%\Users</para>
            <para>Localized Name: Users</para>
            <para>SDDL:           D:P(A;OICI;FA;;;SY)(A;OICI;FA;;;BA)(A;OICI;GXGR;;;BU)(A;OICI;GXGR;;;WD)</para>
            <para>Attributes:     FILE_ATTRIBUTE_READONLY</para>
            <para>Flags:          KFDF_PRECREATE</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_UserProgramFiles">
            <summary>UserProgramFiles
            <para>Category:       KF_CATEGORY_PERUSER</para>
            <para>Path:           %LOCALAPPDATA%\Programs</para>
            <para>Attributes:     SECURITY_ANONYMOUS</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_UserProgramFilesCommon">
            <summary>UserProgramFilesCommon
            <para>Category:       KF_CATEGORY_PERUSER</para>
            <para>Path:           %LOCALAPPDATA%\Programs\Common</para>
            <para>Attributes:     SECURITY_ANONYMOUS</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_UsersFiles">
            <summary>UsersFilesFolder
            <para>Category:       KF_CATEGORY_VIRTUAL</para>
            <para>Parsing Name:   ::{59031a47-3f72-44a7-89c5-5595fe6b30ee}</para>
            <para>Attributes:     SECURITY_ANONYMOUS</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_UsersLibraries">
            <summary>UsersLibrariesFolder
            <para>Category:       KF_CATEGORY_VIRTUAL</para>
            <para>Parsing Name:   ::{031E4825-7B94-4dc3-B131-E946B44C8DD5}</para>
            <para>Attributes:     SECURITY_ANONYMOUS</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_Videos">
            <summary>Videos
            <para>Category:       KF_CATEGORY_PERUSER</para>
            <para>Path:           %USERPROFILE%\Videos</para>
            <para>Parsing Name:   shell:::{20D04FE0-3AEA-1069-A2D8-08002B30309D}\::{A0953C92-50DC-43BF-BE83-3742FED03C9C}</para>
            <para>Tooltip:        Contains movies and other video files.</para>
            <para>Localized Name: Videos</para>
            <para>Attributes:     FILE_ATTRIBUTE_READONLY</para>
            <para>Flags:          KFDF_ROAMABLE, KFDF_PRECREATE</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_VideosLibrary">
            <summary>Videos
            <para>Category:       KF_CATEGORY_PERUSER</para>
            <para>Path:           %APPDATA%\Microsoft\Windows\Libraries\Videos.library-ms</para>
            <para>Parsing Name:   ::{031E4825-7B94-4dc3-B131-E946B44C8DD5}\{491E922F-5643-4af4-A7EB-4E7A138D8174}</para>
            <para>Tooltip:        Contains movies and other video files.</para>
            <para>Localized Name: Videos</para>
            <para>Attributes:     SECURITY_ANONYMOUS</para>
            <para>Flags:          KFDF_PRECREATE, KFDF_STREAM</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_Windows">
            <summary>Windows
            <para>Category:       KF_CATEGORY_FIXED</para>
            <para>Path:           %SystemRoot%</para>
            <para>Attributes:     SECURITY_ANONYMOUS</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_AllAppMods">
            <summary>Application Mods
            <para>Category:       KF_CATEGORY_PERUSER</para>
            <para>Path:           %USERPROFILE%\AppMods</para>
            <para>Localized Name: Application Mods</para>
            <para>Attributes:     SECURITY_ANONYMOUS</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_AppCaptures">
            <summary>Captures
            <para>Category:       KF_CATEGORY_PERUSER</para>
            <para>Path:           %USERPROFILE%\Videos\Captures</para>
            <para>Localized Name: Captures</para>
            <para>Attributes:     SECURITY_ANONYMOUS</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_AppDataDesktop">
            <summary>AppDataDesktop
            <para>Category:       KF_CATEGORY_PERUSER</para>
            <para>Path:           %LOCALAPPDATA%\Desktop</para>
            <para>Attributes:     SECURITY_ANONYMOUS</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_AppDataDocuments">
            <summary>AppDataDocuments
            <para>Category:       KF_CATEGORY_PERUSER</para>
            <para>Path:           %LOCALAPPDATA%\Documents</para>
            <para>Attributes:     SECURITY_ANONYMOUS</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_AppDataFavorites">
            <summary>AppDataFavorites
            <para>Category:       KF_CATEGORY_PERUSER</para>
            <para>Path:           %LOCALAPPDATA%\Favorites</para>
            <para>Attributes:     SECURITY_ANONYMOUS</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_AppDataProgramData">
            <summary>AppDataProgramData
            <para>Category:       KF_CATEGORY_PERUSER</para>
            <para>Path:           %LOCALAPPDATA%\ProgramData</para>
            <para>Attributes:     SECURITY_ANONYMOUS</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_CameraRollLibrary">
            <summary>Camera Roll
            <para>Category:       KF_CATEGORY_PERUSER</para>
            <para>Path:           %APPDATA%\Microsoft\Windows\Libraries\CameraRoll.library-ms</para>
            <para>Parsing Name:   ::{031E4825-7B94-4dc3-B131-E946B44C8DD5}\{2B20DF75-1EDA-4039-8097-38798227D5B7}</para>
            <para>Localized Name: Camera Roll</para>
            <para>Attributes:     SECURITY_ANONYMOUS</para>
            <para>Flags:          KFDF_STREAM</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_CommonStartMenuPlaces">
            <summary>Start Menu
            <para>Category:       KF_CATEGORY_COMMON</para>
            <para>Path:           %ALLUSERSPROFILE%\Microsoft\Windows\Start Menu Places</para>
            <para>Localized Name: Start Menu</para>
            <para>Attributes:     FILE_ATTRIBUTE_READONLY</para>
            <para>Flags:          KFDF_PRECREATE</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_CredentialManager">
            <summary>CredentialManager
            <para>Category:       KF_CATEGORY_FIXED</para>
            <para>Path:           %APPDATA%\Microsoft\Credentials</para>
            <para>Attributes:     SECURITY_ANONYMOUS</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_CurrentAppMods">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_CryptoKeys">
            <summary>CryptoKeys
            <para>Category:       KF_CATEGORY_FIXED</para>
            <para>Path:           %APPDATA%\Microsoft\Crypto</para>
            <para>Attributes:     SECURITY_ANONYMOUS</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_DevelopmentFiles">
            <summary>Development Files
            <para>Category:       KF_CATEGORY_PERUSER</para>
            <para>Path:           %LOCALAPPDATA%\DevelopmentFiles</para>
            <para>Attributes:     SECURITY_ANONYMOUS</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_Device">
            <summary>ThisDeviceFolder
            <para>Category:       KF_CATEGORY_VIRTUAL</para>
            <para>Parsing Name:   ::{f8278c54-a712-415b-b593-b77a2be0dda9}</para>
            <para>Attributes:     SECURITY_ANONYMOUS</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_DpapiKeys">
            <summary>DpapiKeys
            <para>Category:       KF_CATEGORY_FIXED</para>
            <para>Path:           %APPDATA%\Microsoft\Protect</para>
            <para>Attributes:     SECURITY_ANONYMOUS</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_LocalDocuments">
            <summary>Documents
            <para>Category:       KF_CATEGORY_PERUSER</para>
            <para>Path:           %USERPROFILE%\Documents</para>
            <para>Parsing Name:   shell:::{20D04FE0-3AEA-1069-A2D8-08002B30309D}\::{d3162b92-9365-467a-956b-92703aca08af}</para>
            <para>Localized Name: Documents</para>
            <para>Attributes:     FILE_ATTRIBUTE_READONLY</para>
            <para>Flags:          KFDF_PRECREATE</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_LocalDownloads">
            <summary>Downloads
            <para>Category:       KF_CATEGORY_PERUSER</para>
            <para>Path:           %USERPROFILE%\Downloads</para>
            <para>Parsing Name:   shell:::{20D04FE0-3AEA-1069-A2D8-08002B30309D}\::{088e3905-0323-4b02-9826-5d99428e115f}</para>
            <para>Localized Name: Downloads</para>
            <para>Attributes:     FILE_ATTRIBUTE_READONLY</para>
            <para>Flags:          KFDF_PRECREATE</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_LocalMusic">
            <summary>Music
            <para>Category:       KF_CATEGORY_PERUSER</para>
            <para>Path:           %USERPROFILE%\Music</para>
            <para>Parsing Name:   shell:::{20D04FE0-3AEA-1069-A2D8-08002B30309D}\::{3dfdf296-dbec-4fb4-81d1-6a3438bcf4de}</para>
            <para>Tooltip:        Contains music and other audio files.</para>
            <para>Localized Name: Music</para>
            <para>Attributes:     FILE_ATTRIBUTE_READONLY</para>
            <para>Flags:          KFDF_PRECREATE</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_LocalPictures">
            <summary>Pictures
            <para>Category:       KF_CATEGORY_PERUSER</para>
            <para>Path:           %USERPROFILE%\Pictures</para>
            <para>Parsing Name:   shell:::{20D04FE0-3AEA-1069-A2D8-08002B30309D}\::{24ad3ad4-a569-4530-98e1-ab02f9417aa8}</para>
            <para>Tooltip:        Contains digital photos, images, and graphic files.</para>
            <para>Localized Name: Pictures</para>
            <para>Attributes:     FILE_ATTRIBUTE_READONLY</para>
            <para>Flags:          KFDF_PRECREATE</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_LocalVideos">
            <summary>Videos
            <para>Category:       KF_CATEGORY_PERUSER</para>
            <para>Path:           %USERPROFILE%\Videos</para>
            <para>Parsing Name:   shell:::{20D04FE0-3AEA-1069-A2D8-08002B30309D}\::{f86fa3ab-70d2-4fc7-9c99-fcbf05467f3a}</para>
            <para>Tooltip:        Contains movies and other video files.</para>
            <para>Localized Name: Videos</para>
            <para>Attributes:     FILE_ATTRIBUTE_READONLY</para>
            <para>Flags:          KFDF_PRECREATE</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_OneDrive">
            <summary>OneDrive root</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_RecordedCalls">
            <summary>Recorded Calls
            <para>Category:       KF_CATEGORY_PERUSER</para>
            <para>Path:           %USERPROFILE%\Recorded Calls</para>
            <para>Localized Name: Recorded Calls</para>
            <para>Attributes:     SECURITY_ANONYMOUS</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_RetailDemo">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_SkyDriveMusic">
            <summary>OneDriveMusic
            <para>Category:       KF_CATEGORY_PERUSER</para>
            <para>Path:           %USERPROFILE%\OneDrive\Music</para>
            <para>Attributes:     FILE_ATTRIBUTE_READONLY</para>
            <para>Flags:          KFDF_NO_REDIRECT_UI</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_StartMenuAllPrograms">
            <summary>Common Start menu item.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_SystemCertificates">
            <summary>SystemCertificates
            <para>Category:       KF_CATEGORY_FIXED</para>
            <para>Path:           %APPDATA%\Microsoft\SystemCertificates</para>
            <para>Attributes:     SECURITY_ANONYMOUS</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_ThisPCDesktop">
            <summary>Desktop
            <para>Category:       KF_CATEGORY_PERUSER</para>
            <para>Path:           %USERPROFILE%\Desktop</para>
            <para>Parsing Name:   shell:::{20D04FE0-3AEA-1069-A2D8-08002B30309D}\::{B4BFCC3A-DB2C-424C-B029-7FE99A87C641}</para>
            <para>Localized Name: Desktop</para>
            <para>Attributes:     FILE_ATTRIBUTE_READONLY</para>
            <para>Flags:          KFDF_ROAMABLE</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IKnownFolder">
            <summary>
            Exposes methods that allow an application to retrieve information about a known folder's category, type, GUID, pointer to an
            item identifier list (PIDL) value, redirection capabilities, and definition. It provides a method for the retrieval of a known
            folder's IShellItem object. It also provides methods to get or set the path of the known folder.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IKnownFolder.GetId">
            <summary>Gets the ID of the selected folder.</summary>
            <returns>
            When this method returns, returns the KNOWNFOLDERID value of the known folder. Note, KNOWNFOLDERID values are GUIDs.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IKnownFolder.GetCategory">
            <summary>Retrieves the category—virtual, fixed, common, or per-user—of the selected folder.</summary>
            <returns>When this method returns, contains a pointer to the KF_CATEGORY of the selected folder.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IKnownFolder.GetShellItem(Vanara.PInvoke.Shell32.KNOWN_FOLDER_FLAG,System.Guid@)">
            <summary>
            Retrieves the location of a known folder in the Shell namespace in the form of a Shell item (IShellItem or derived interface).
            </summary>
            <param name="dwFlags">
            Flags that specify special retrieval options. This value can be 0; otherwise, one or more of the KNOWN_FOLDER_FLAG values.
            </param>
            <param name="riid">A reference to the IID of the requested interface.</param>
            <returns>
            When this method returns, contains the interface pointer requested in <paramref name="riid"/>. This is typically IShellItem
            or IShellItem2.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IKnownFolder.GetPath(Vanara.PInvoke.Shell32.KNOWN_FOLDER_FLAG)">
            <summary>Retrieves the path of a known folder as a string.</summary>
            <param name="dwFlags">
            Flags that specify special retrieval options. This value can be 0; otherwise, one or more of the KNOWN_FOLDER_FLAG values.
            </param>
            <returns>
            When this method returns, contains the address of a pointer to a null-terminated buffer that contains the path. The calling
            application is responsible for calling CoTaskMemFree to free this resource when it is no longer needed.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IKnownFolder.SetPath(Vanara.PInvoke.Shell32.KNOWN_FOLDER_FLAG,System.String)">
            <summary>Assigns a new path to a known folder.</summary>
            <param name="dwFlags">Either zero or the following value: KF_FLAG_DONT_UNEXPAND</param>
            <param name="pszPath">The PSZ path.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IKnownFolder.GetIDList(Vanara.PInvoke.Shell32.KNOWN_FOLDER_FLAG)">
            <summary>Gets the location of the Shell namespace folder in the IDList (ITEMIDLIST) form.</summary>
            <param name="dwFlags">
            Flags that specify special retrieval options. This value can be 0; otherwise, one or more of the KNOWN_FOLDER_FLAG values.
            </param>
            <returns>
            When this method returns, contains the address of an absolute PIDL. This parameter is passed uninitialized. The calling
            application is responsible for freeing this resource when it is no longer needed.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IKnownFolder.GetFolderType">
            <summary>Retrieves the folder type.</summary>
            <returns>When this returns, contains a pointer to a FOLDERTYPEID (a GUID) that identifies the known folder type.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IKnownFolder.GetRedirectionCapabilities">
            <summary>
            Gets a value that states whether the known folder can have its path set to a new value or what specific restrictions or
            prohibitions are placed on that redirection.
            </summary>
            <returns>
            When this method returns, contains a pointer to a KF_REDIRECTION_CAPABILITIES value that indicates the redirection
            capabilities for this folder.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IKnownFolder.GetFolderDefinition">
            <summary>
            Retrieves a structure that contains the defining elements of a known folder, which includes the folder's category, name,
            path, description, tooltip, icon, and other properties.
            </summary>
            <returns>
            When this method returns, contains a pointer to the KNOWNFOLDER_DEFINITION structure. When no longer needed, the calling
            application is responsible for calling FreeKnownFolderDefinitionFields to free this resource.
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IKnownFolderManager">
            <summary>Exposes methods that create, enumerate or manage existing known folders.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IKnownFolderManager.FolderIdFromCsidl(System.Int32)">
            <summary>Gets the KNOWNFOLDERID that is the equivalent of a legacy CSIDL value.</summary>
            <param name="nCsidl">The CSIDL value.</param>
            <returns>When this method returns, contains a pointer to the KNOWNFOLDERID. This pointer is passed uninitialized.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IKnownFolderManager.FolderIdToCsidl(System.Guid@)">
            <summary>Gets the legacy CSIDL value that is the equivalent of a given KNOWNFOLDERID.</summary>
            <param name="rfid">Reference to the KNOWNFOLDERID.</param>
            <returns>When this method returns, contains a pointer to the CSIDL value. This pointer is passed uninitialized.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IKnownFolderManager.GetFolderIds(Vanara.InteropServices.SafeCoTaskMemHandle@,System.UInt32@)">
            <summary>
            <para>Gets an array of all registered known folder IDs. This can be used in enumerating all known folders.</para>
            </summary>
            <param name="ppKFId">
            <para>Type: <c>KNOWNFOLDERID**</c></para>
            <para>
            When this method returns, contains a pointer to an array of all KNOWNFOLDERID values registered with the system. Use
            CoTaskMemFree to free these resources when they are no longer needed.
            </para>
            </param>
            <param name="pCount">
            <para>Type: <c>UINT*</c></para>
            <para>
            When this method returns, contains a pointer to the number of KNOWNFOLDERID values in the array at ppKFId. The [in]
            functionality of this parameter is not used.
            </para>
            </param>
            <remarks>
            <para>The caller of this method must have User privileges.</para>
            <para>You can use StringFromCLSID or StringFromGUID2 to convert the retrieved KNOWNFOLDERID values to strings.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IKnownFolderManager.GetFolder(System.Guid@)">
            <summary>
            Gets an object that represents a known folder identified by its KNOWNFOLDERID. The object allows you to query certain folder
            properties, get the current path of the folder, redirect the folder to another location, and get the path of the folder as
            an ITEMIDLIST.
            </summary>
            <param name="rfid">Reference to the KNOWNFOLDERID.</param>
            <returns>When this method returns, contains an interface pointer to the IKnownFolder object that represents the folder.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IKnownFolderManager.GetFolderByName(System.String)">
            <summary>
            Gets an object that represents a known folder identified by its canonical name. The object allows you to query certain
            folder properties, get the current path of the folder, redirect the folder to another location, and get the path of the
            folder as an ITEMIDLIST.
            </summary>
            <param name="pszCanonicalName">
            A pointer to the non-localized, canonical name for the known folder, stored as a null-terminated Unicode string. If this
            folder is a common or per-user folder, this value is also used as the value name of the "User Shell Folders" registry
            settings. This value is retrieved through the pszName member of the folder's KNOWNFOLDER_DEFINITION structure.
            </param>
            <returns>
            When this method returns, contains the address of a pointer to the IKnownFolder object that represents the known folder.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IKnownFolderManager.RegisterFolder(System.Guid@,Vanara.PInvoke.Shell32.KNOWNFOLDER_DEFINITION@)">
            <summary>
            Adds a new known folder to the registry. Used particularly by independent software vendors (ISVs) that are adding one of
            their own folders to the known folder system.
            </summary>
            <param name="rfid">A GUID that represents the known folder.</param>
            <param name="pKFD">A pointer to a valid KNOWNFOLDER_DEFINITION structure that provides the details of the new folder.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IKnownFolderManager.UnregisterFolder(System.Guid@)">
            <summary>
            Remove a known folder from the registry, which makes it unknown to the known folder system. This method does not remove the
            folder itself.
            </summary>
            <param name="rfid">GUID or KNOWNFOLDERID that represents the known folder.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IKnownFolderManager.FindFolderFromPath(System.String,Vanara.PInvoke.Shell32.FFFP_MODE)">
            <summary>
            Gets an object that represents a known folder based on a file system path. The object allows you to query certain folder
            properties, get the current path of the folder, redirect the folder to another location, and get the path of the folder as
            an ITEMIDLIST.
            </summary>
            <param name="pszPath">Pointer to a null-terminated Unicode string of length MAX_PATH that contains a path to a known folder.</param>
            <param name="mode">
            One of the following values that specify the precision of the match of path and known folder: FFFP_EXACTMATCH = Retrieve
            only the specific known folder for the given file path; FFFP_NEARESTPARENTMATCH = If an exact match is not found for the
            given file path, retrieve the first known folder that matches one of its parent folders walking up the parent tree.
            </param>
            <returns>
            When this method returns, contains the address of a pointer to the IKnownFolder object that represents the known folder.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IKnownFolderManager.FindFolderFromIDList(Vanara.PInvoke.Shell32.PIDL)">
            <summary>
            Gets an object that represents a known folder based on an IDList. The object allows you to query certain folder properties,
            get the current path of the folder, redirect the folder to another location, and get the path of the folder as an ITEMIDLIST.
            </summary>
            <param name="pidl">A pointer to the IDList.</param>
            <returns>
            When this method returns, contains the address of a pointer to the IKnownFolder object that represents the known folder.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IKnownFolderManager.Redirect(System.Guid@,Vanara.PInvoke.HWND,Vanara.PInvoke.Shell32.KF_REDIRECT_FLAGS,System.String,System.UInt32,System.Guid[])">
            <summary>Redirects folder requests for common and per-user folders.</summary>
            <param name="rfid">A reference to the KNOWNFOLDERID of the folder to be redirected.</param>
            <param name="hwnd">
            The handle of the parent window used to display copy engine progress UI dialogs when KF_REDIRECT_WITH_UI i passed in the
            flags parameter. If no progress dialog is needed, this value can be NULL.
            </param>
            <param name="flags">The KF_REDIRECT_FLAGS options for redirection.</param>
            <param name="pszTargetPath">
            A pointer to the new path for the folder. This is a null-terminated Unicode string. This value can be NULL.
            </param>
            <param name="cFolders">The number of KNOWNFOLDERID values in the array at pExclusion.</param>
            <param name="pExclusion">
            Pointer to an array of KNOWNFOLDERID values that refer to subfolders of <paramref name="rfid"/> that should be excluded from
            the redirection. If no subfolders are excluded, this value can be NULL.
            </param>
            <returns>
            When this method returns, contains the address of a pointer to a null-terminated Unicode string that contains an error
            message if one was generated. This value can be NULL.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.FreeKnownFolderDefinitionFields(Vanara.PInvoke.Shell32.KNOWNFOLDER_DEFINITION@)">
            <summary>Frees the allocated fields in the result from IKnownFolder::GetFolderDefinition.</summary>
            <param name="pKFD">
            <para>Type: <c>KNOWNFOLDER_DEFINITION*</c></para>
            <para>A pointer to a KNOWNFOLDER_DEFINITION structure that contains information about the given known folder.</para>
            </param>
            <returns>This function does not return a value.</returns>
            <remarks>
            This is an inline helper function that calls CoTaskMemFree on the fields in the structure that need to be freed. Its
            implementation can be seen in the header file.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.GetFolderIds(Vanara.PInvoke.Shell32.IKnownFolderManager)">
            <summary>Gets an array of all registered known folder IDs. This can be used in enumerating all known folders.</summary>
            <param name="mgr">The <see cref="T:Vanara.PInvoke.Shell32.IKnownFolderManager"/> instance.</param>
            <returns>An enumeration of all known folder Guid values registered with the system.</returns>
            <remarks>
            <para>The caller of this method must have User privileges.</para>
            <para>You can use StringFromCLSID or StringFromGUID2 to convert the retrieved KNOWNFOLDERID values to strings.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.GetKnownFolderIds(Vanara.PInvoke.Shell32.IKnownFolderManager)">
            <summary>Gets an array of all registered known folder IDs. This can be used in enumerating all known folders.</summary>
            <param name="mgr">The <see cref="T:Vanara.PInvoke.Shell32.IKnownFolderManager"/> instance.</param>
            <returns>An enumeration of all KNOWNFOLDERID values registered with the system.</returns>
            <remarks>The caller of this method must have User privileges.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.GetShellItem``1(Vanara.PInvoke.Shell32.IKnownFolder,Vanara.PInvoke.Shell32.KNOWN_FOLDER_FLAG)">
            <summary>Extension method to simplify using the <see cref="M:Vanara.PInvoke.Shell32.IKnownFolder.GetShellItem(Vanara.PInvoke.Shell32.KNOWN_FOLDER_FLAG,System.Guid@)"/> method.</summary>
            <typeparam name="T">Type of the interface to get.</typeparam>
            <param name="fv">An <see cref="T:Vanara.PInvoke.Shell32.IKnownFolder"/> instance.</param>
            <param name="dwFlags">
            Flags that specify special retrieval options. This value can be 0; otherwise, one or more of the KNOWN_FOLDER_FLAG values.
            </param>
            <returns>Receives the interface pointer requested in <typeparamref name="T"/>.</returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.KNOWNFOLDER_DEFINITION">
            <summary>Defines the specifics of a known folder.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDER_DEFINITION.category">
            <summary>A single value from the KF_CATEGORY constants that classifies the folder as virtual, fixed, common, or per-user.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDER_DEFINITION.pszName">
            <summary>
            A pointer to the non-localized, canonical name for the known folder, stored as a null-terminated Unicode string. If this
            folder is a common or per-user folder, this value is also used as the value name of the "User Shell Folders" registry
            settings. This name is meant to be a unique, human-readable name. Third parties are recommended to follow the format
            Company.Application.Name. The name given here should not be confused with the display name.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDER_DEFINITION.pszDescription">
            <summary>
            A pointer to a short description of the known folder, stored as a null-terminated Unicode string. This description should
            include the folder's purpose and usage.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDER_DEFINITION.fidParent">
            <summary>
            A KNOWNFOLDERID value that names another known folder to serve as the parent folder. Applies to common and per-user folders
            only. This value is used in conjunction with pszRelativePath. See Remarks for more details. This value is optional if no
            value is provided for pszRelativePath.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDER_DEFINITION.pszRelativePath">
            <summary>
            Optional. A pointer to a path relative to the parent folder specified in fidParent. This is a null-terminated Unicode
            string, refers to the physical file system path, and is not localized. Applies to common and per-user folders only. See
            Remarks for more details.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDER_DEFINITION.pszParsingName">
            <summary>
            A pointer to the Shell namespace folder path of the folder, stored as a null-terminated Unicode string. Applies to virtual
            folders only. For example, Control Panel has a parsing name of ::%CLSID_MyComputer%\::%CLSID_ControlPanel%.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDER_DEFINITION.pszTooltip">
            <summary>
            Optional. A pointer to the default tooltip resource used for this known folder when it is created. This is a null-terminated
            Unicode string in this form:
            <para><c>Module name, Resource ID</c></para>
            <para>
            For example, @%_SYS_MOD_PATH%,-12688 is the tooltip for Common Pictures.When the folder is created, this string is stored in
            that folder's copy of Desktop.ini. It can be changed later by other Shell APIs. This resource might be localized.
            </para>
            <para>This information is not required for virtual folders.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDER_DEFINITION.pszLocalizedName">
            <summary>
            Optional. A pointer to the default localized name resource used when the folder is created. This is a null-terminated
            Unicode string in this form:
            <para><c>Module name, Resource ID</c></para>
            <para>
            When the folder is created, this string is stored in that folder's copy of Desktop.ini. It can be changed later by other
            Shell APIs.
            </para>
            <para>This information is not required for virtual folders.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDER_DEFINITION.pszIcon">
            <summary>
            Optional. A pointer to the default icon resource used when the folder is created. This is a null-terminated Unicode string
            in this form:
            <para><c>Module name, Resource ID</c></para>
            <para>
            When the folder is created, this string is stored in that folder's copy of Desktop.ini. It can be changed later by other
            Shell APIs.
            </para>
            <para>This information is not required for virtual folders.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDER_DEFINITION.pszSecurity">
            <summary>
            Optional. A pointer to a Security Descriptor Definition Language format string. This is a null-terminated Unicode string
            that describes the default security descriptor that the folder receives when it is created. If this parameter is NULL, the
            new folder inherits the security descriptor of its parent. This is particularly useful for common folders that are accessed
            by all users.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDER_DEFINITION.dwAttributes">
            <summary>
            Optional. Default file system attributes given to the folder when it is created. For example, the file could be hidden and
            read-only (FILE_ATTRIBUTE_HIDDEN and FILE_ATTRIBUTE_READONLY). For a complete list of possible values, see the
            dwFlagsAndAttributes parameter of the CreateFile function. Set to -1 if not needed.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDER_DEFINITION.kfdFlags">
            <summary>
            Optional. One of more values from the KF_DEFINITION_FLAGS enumeration that allow you to restrict redirection, allow PC-to-PC
            roaming, and control the time at which the known folder is created. Set to 0 if not needed.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDER_DEFINITION.ftidType">
            <summary>
            One of the FOLDERTYPEID values that identifies the known folder type based on its contents (such as documents, music, or
            photographs). This value is a GUID.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.KNOWNFOLDER_DEFINITION.FreeKnownFolderDefinitionFields">
            <summary>Frees the allocated fields in the result from IKnownFolder::GetFolderDefinition.</summary>
            <remarks>
            This is an inline helper function that calls CoTaskMemFree on the fields in the structure that need to be freed. Its
            implementation can be seen in the header file.
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.CKnownFolderManager">
            <summary>Class interface for IKnownFolderManager.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.KnownFolderDetailAttribute">
            <summary>Provides information about a <see cref="T:Vanara.PInvoke.Shell32.KNOWNFOLDERID"/>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.KnownFolderDetailAttribute.Equivalent">
            <summary>The equivalent SpecialFolder.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.KnownFolderDetailAttribute.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Shell32.KnownFolderDetailAttribute"/> class with a GUID for the <see cref="T:Vanara.PInvoke.Shell32.KNOWNFOLDERID"/>.</summary>
            <param name="knownFolderGuid">The GUID for the <see cref="T:Vanara.PInvoke.Shell32.KNOWNFOLDERID"/>.</param>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.APPLICATION_VIEW_SIZE_PREFERENCE">
            <summary>
            Defines the set of possible general window (app view) size preferences. Used by
            ILaunchSourceViewSizePreference::GetSourceViewSizePreference and ILaunchTargetViewSizePreference::GetTargetViewSizePreference.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.APPLICATION_VIEW_SIZE_PREFERENCE.AVSP_DEFAULT">
            <summary>
            The app does not specify a window size preference. Windows, rather than the app, sets the size preference, which defaults to AVSP_USE_HALF.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.APPLICATION_VIEW_SIZE_PREFERENCE.AVSP_USE_LESS">
            <summary>Prefers to use less than 50% of the available horizontal screen pixels.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.APPLICATION_VIEW_SIZE_PREFERENCE.AVSP_USE_HALF">
            <summary>Prefers to use 50% (half) of the available horizontal screen pixels.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.APPLICATION_VIEW_SIZE_PREFERENCE.AVSP_USE_MORE">
            <summary>Prefers to use more than 50% of the available horizontal screen pixels.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.APPLICATION_VIEW_SIZE_PREFERENCE.AVSP_USE_MINIMUM">
            <summary>Prefers to use the minimum horizontal pixel width (either 320 or 500 pixels) specified in the app's manifest.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.APPLICATION_VIEW_SIZE_PREFERENCE.AVSP_USE_NONE">
            <summary>The window has no visible component.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.APPLICATION_VIEW_SIZE_PREFERENCE.AVSP_CUSTOM">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.ILaunchSourceAppUserModelId">
            <summary>Provides a method for retrieving an AppUserModelId.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ILaunchSourceAppUserModelId.GetAppUserModelId(System.String@)">
            <summary>Retrieves an AppUserModelId from the source application.</summary>
            <param name="launchingApp">
            <para>Type: <c>LPWSTR*</c></para>
            <para>Contains a pointer to a string that contains the AppUserModelId.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.ILaunchSourceViewSizePreference">
            <summary>Provides methods for retrieving information about the source application.</summary>
            <remarks>
            <para>When to implement</para>
            <para>--&gt;</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ILaunchSourceViewSizePreference.GetSourceViewToPosition(Vanara.PInvoke.HWND@)">
            <summary>Retrieves the position of the source application window.</summary>
            <param name="hwnd">
            <para>Type: <c>HWND*</c></para>
            <para>Contains the address of a pointer to a window handle.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ILaunchSourceViewSizePreference.GetSourceViewSizePreference(Vanara.PInvoke.Shell32.APPLICATION_VIEW_SIZE_PREFERENCE@)">
            <summary>Retrieves the view size preference of the application after the application has launched.</summary>
            <param name="sourceSizeAfterLaunch">
            <para>Type: <c>APPLICATION_VIEW_SIZE_PREFERENCE*</c></para>
            <para>Contains the address of a pointer to an APPLICATION_VIEW_SIZE_PREFERENCE.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.ILaunchTargetViewSizePreference">
            <summary>Provides a method for retrieving the preferred view size for a new application window.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ILaunchTargetViewSizePreference.GetTargetViewSizePreference(Vanara.PInvoke.Shell32.APPLICATION_VIEW_SIZE_PREFERENCE@)">
            <summary>Retrieves the preferred view size of the application being launched.</summary>
            <param name="targetSizeOnLaunch">
            <para>Type: <c>APPLICATION_VIEW_SIZE_PREFERENCE*</c></para>
            <para>Contains the address of a pointer to an APPLICATION_VIEW_SIZE_PREFERENCE for the target application.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.ILaunchTargetMonitor">
            <summary>Provides a method for retrieving the target monitor for the application being launched.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ILaunchTargetMonitor.GetMonitor(Vanara.PInvoke.HMONITOR@)">
            <summary>Retrieves the target monitor for the application being launched.</summary>
            <param name="monitor">
            <para>Type: <c>HMONITOR*</c></para>
            <para>Contains the address of a pointer to the target monitor's handle.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.NSTCECLICKTYPE">
            <summary>Indicates which button was clicked and the kind of click.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NSTCECLICKTYPE.NSTCECT_LBUTTON">
            <summary>The left button was clicked.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NSTCECLICKTYPE.NSTCECT_MBUTTON">
            <summary>The middle button was clicked.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NSTCECLICKTYPE.NSTCECT_RBUTTON">
            <summary>The right button was clicked.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NSTCECLICKTYPE.NSTCECT_BUTTON">
            <summary>A button was clicked.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NSTCECLICKTYPE.NSTCECT_DBLCLICK">
            <summary>The click was a double click. If this value is present, it is added to one of the other values.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.NSTCEHITTEST">
            <summary>The location on the IShellItem that was clicked.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NSTCEHITTEST.NSTCEHT_NOWHERE">
            <summary>The click missed the IShellItem.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NSTCEHITTEST.NSTCEHT_ONITEMICON">
            <summary>The click was on the icon of the IShellItem.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NSTCEHITTEST.NSTCEHT_ONITEMLABEL">
            <summary>The click was on the label text of the IShellItem.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NSTCEHITTEST.NSTCEHT_ONITEMINDENT">
            <summary>The click was on the indented space on the leftmost side of the IShellItem.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NSTCEHITTEST.NSTCEHT_ONITEMBUTTON">
            <summary>The click was on the expando button of the IShellItem.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NSTCEHITTEST.NSTCEHT_ONITEMRIGHT">
            <summary>The click was on the rightmost side of the text of the IShellItem.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NSTCEHITTEST.NSTCEHT_ONITEMSTATEICON">
            <summary>The click was on the state icon of the IShellItem.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NSTCEHITTEST.NSTCEHT_ONITEM">
            <summary>The click was on the item icon or the item label or the state icon of the IShellItem.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NSTCEHITTEST.NSTCEHT_ONITEMTABBUTTON">
            <summary>The click was on the tab button of the IShellItem.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.NSTCFOLDERCAPABILITIES">
            <summary>
            Specifies the state of a tree item. These values are used by methods of the INameSpaceTreeControlFolderCapabilities interface.
            </summary>
            <remarks>The <c>NSTCFOLDERCAPABILITIES</c> type is defined in Shobjidl.h beginning in Windows 7.</remarks>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NSTCFOLDERCAPABILITIES.NSTCFC_NONE">
            <summary>The property does not exist. Filtering is not supported.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NSTCFOLDERCAPABILITIES.NSTCFC_PINNEDITEMFILTERING">
            <summary>Property exists. Supports filtering based on the value specified in System.IsPinnedToNameSpaceTree.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NSTCFOLDERCAPABILITIES.NSTCFC_DELAY_REGISTER_NOTIFY">
            <summary>Delays registration for change notifications until the tree is expanded in the navigation pane.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.NSTCGNI">
            <summary>The type of the next item.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NSTCGNI.NSTCGNI_NEXT">
            <summary>The next sibling of the given item.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NSTCGNI.NSTCGNI_NEXTVISIBLE">
            <summary>
            The next visible item in the tree that has any relationship to the given item. This includes a child (if there is one), the
            next sibling, or even one of the ancestor's siblings.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NSTCGNI.NSTCGNI_PREV">
            <summary>The previous sibling item of the given item.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NSTCGNI.NSTCGNI_PREVVISIBLE">
            <summary>The previous visible item that is a sibling item, sibling descendent item or a parent item.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NSTCGNI.NSTCGNI_PARENT">
            <summary>The parent item of the given item.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NSTCGNI.NSTCGNI_CHILD">
            <summary>The first child item of the given item.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NSTCGNI.NSTCGNI_FIRSTVISIBLE">
            <summary>The absolute first visible item in the tree (not relative to the given item).</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NSTCGNI.NSTCGNI_LASTVISIBLE">
            <summary>The absolute last visible item in the tree (not relative to the given item).</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.NSTCITEMSTATE">
            <summary>Specifies the state of a tree item. These values are used by methods of the INameSpaceTreeControl interface.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NSTCITEMSTATE.NSTCIS_NONE">
            <summary>The item has default state; it is not selected, expanded, bolded or disabled.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NSTCITEMSTATE.NSTCIS_SELECTED">
            <summary>The item is selected.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NSTCITEMSTATE.NSTCIS_EXPANDED">
            <summary>The item is expanded.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NSTCITEMSTATE.NSTCIS_BOLD">
            <summary>The item is bold.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NSTCITEMSTATE.NSTCIS_DISABLED">
            <summary>The item is disabled.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NSTCITEMSTATE.NSTCIS_SELECTEDNOEXPAND">
            <summary>Windows 7 and later. The item is selected, but not expanded.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.NSTCROOTSTYLE">
            <summary>Specifies the style of the root that is being appended.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NSTCROOTSTYLE.NSTCRS_VISIBLE">
            <summary>The root is visible as well as the items. Mutually exclusive with NSTCRS_HIDDEN.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NSTCROOTSTYLE.NSTCRS_HIDDEN">
            <summary>The root is hidden so that the children only are visible. Mutually exclusive with NSTCRS_VISIBLE.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NSTCROOTSTYLE.NSTCRS_EXPANDED">
            <summary>The root is expanded upon initialization.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.NSTCSTYLE">
            <summary>Describes the characteristics of a given namespace tree control.</summary>
            <remarks>
            <para>
            Three values have effect only in conjunction with NSTCS_CHECKBOXES: NSTCS_PARTIALCHECKBOXES, NSTCS_EXCLUSIONCHECKBOXES, and
            NSTCS_DIMMEDCHECKBOXES. The icons associated with these states are inserted into the state image list as follows:
            </para>
            <list type="table">
            <listheader>
            <term>Image Slot</term>
            <term>Image</term>
            <term>Associated Flags</term>
            </listheader>
            <item>
            <term>0</term>
            <term>Blank</term>
            <term>NSTCS_CHECKBOXES</term>
            </item>
            <item>
            <term>1</term>
            <term>Unchecked</term>
            <term>NSTCS_CHECKBOXES</term>
            </item>
            <item>
            <term>2</term>
            <term>Checked</term>
            <term>NSTCS_CHECKBOXES</term>
            </item>
            <item>
            <term>3</term>
            <term>Partial</term>
            <term>NSTCS_CHECKBOXES | NSTCS_PARTIALCHECKBOXES</term>
            </item>
            <item>
            <term>4</term>
            <term>Exclusion (red X)</term>
            <term>NSTCS_CHECKBOXES | NSTCS_EXCLUSIONCHECKBOXES</term>
            </item>
            </list>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NSTCSTYLE.NSTCS_HASEXPANDOS">
            <summary>
            The control displays a triangle—known as an expando—on the leftmost edge of those items that have child items. Clicking on
            the expando expands the item to reveal the children of the item. Has no effect when combined with NSTCS_SHOWTABSBUTTON,
            NSTCS_SHOWDELETEBUTTON, or NSTCS_SHOWREFRESHBUTTON. Maps to the TVS_HASBUTTONS tree view control style.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NSTCSTYLE.NSTCS_HASLINES">
            <summary>
            The control draws lines to the left of the tree items that lead to their individual parent items. Has no effect when
            combined with NSTCS_SHOWTABSBUTTON, NSTCS_SHOWDELETEBUTTON, or NSTCS_SHOWREFRESHBUTTON. Maps to the TVS_HASLINES tree view
            control style.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NSTCSTYLE.NSTCS_SINGLECLICKEXPAND">
            <summary>
            An item expands to show its child items in response to a single mouse click. Maps to the TVS_SINGLEEXPAND tree view control style.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NSTCSTYLE.NSTCS_FULLROWSELECT">
            <summary>
            The selection of an item fills the row with inverse text to the end of the window area, regardless of the length of the
            text. When this option is not declared, only the area behind text is inverted. This value cannot be combined with
            NSTCS_HASLINES. Maps to the TVS_FULLROWSELECT tree view control style.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NSTCSTYLE.NSTCS_SPRINGEXPAND">
            <summary>
            When one item is selected and expanded and you select a second item, the first selection automatically collapses. This is
            the opposite of the TVS_EX_NOSINGLECOLLAPSE tree view control style.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NSTCSTYLE.NSTCS_HORIZONTALSCROLL">
            <summary>
            The area of the window that contains the tree of namespace items has a horizontal scroll bar. Maps to the WS_HSCROLL Windows style.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NSTCSTYLE.NSTCS_ROOTHASEXPANDO">
            <summary>
            The root item is preceded by an expando that allows expansion of the root item. Maps to the TVS_LINESATROOT tree view
            control style.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NSTCSTYLE.NSTCS_SHOWSELECTIONALWAYS">
            <summary>
            The node of an item is outlined when the control does not have the focus. Maps to the TVS_SHOWSELALWAYS tree view control style.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NSTCSTYLE.NSTCS_NOINFOTIP">
            <summary>
            Do not display infotips when the mouse cursor is over an item. This is the opposite of the TVS_INFOTIP tree view control style.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NSTCSTYLE.NSTCS_EVENHEIGHT">
            <summary>
            Sets the height of the items to an even height. By default, the height of items can be even or odd. This is the opposite of
            the TVS_NONEVENHEIGHT tree view control style.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NSTCSTYLE.NSTCS_NOREPLACEOPEN">
            <summary>Do not replace the Open command in the shortcut menu with a user-defined function.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NSTCSTYLE.NSTCS_DISABLEDRAGDROP">
            <summary>
            Do not allow drag-and-drop operations within the control. Note that you can still drag an item from outside of the control
            and drop it onto the control. Maps to the TVS_DISABLEDRAGDROP tree view control style.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NSTCSTYLE.NSTCS_NOORDERSTREAM">
            <summary>
            Do not persist reordering changes. Used with NSTCS_FAVORITESMODE. If favorites mode is not specified, this flag has no effect.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NSTCSTYLE.NSTCS_RICHTOOLTIP">
            <summary>
            Use a rich tooltip. Rich tooltips display the item's icon in addition to the item's text. A standard tooltip displays only
            the item's text. The tree view displays tooltips only for items in the tree that are partially visible. Maps to the
            TVS_EX_RICHTOOLTIP tree view control style.NSTCS_RICHTOOLTIP has no effect unless it is combined with NSTCS_NOINFOTIP and/or
            NSTCS_FAVORITESMODE. If NSTCS_NOINFOTIP is not specified, the tree view displays an infotip instead of a tooltip. If
            NSTCS_FAVORITESMODE is not specified, the namespace tree control always sets the TVS_EX_RICHTOOLTIP style.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NSTCSTYLE.NSTCS_BORDER">
            <summary>Draw a thin border around the control. Corresponds to WS_BORDER.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NSTCSTYLE.NSTCS_NOEDITLABELS">
            <summary>
            Do not allow creation of an in-place edit box, which would allow the user to rename the given item. This is the opposite of
            the TVS_EDITLABELS tree view control style.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NSTCSTYLE.NSTCS_TABSTOP">
            <summary>If the control is hosted, you can tabstop into the control. Corresponds to WS_EX_CONTROLPARENT.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NSTCSTYLE.NSTCS_FAVORITESMODE">
            <summary>The control has the appearance of the favorites band in Windows XP.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NSTCSTYLE.NSTCS_AUTOHSCROLL">
            <summary>
            When you hover the mouse pointer over an item that extends past the end of the control window, the control automatically
            scrolls horizontally so that the item appears more fully in the window area. Maps to the TVS_EX_AUTOHSCROLL tree view
            control style.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NSTCSTYLE.NSTCS_FADEINOUTEXPANDOS">
            <summary>
            If the control does not have the focus and there are items that are preceded by expandos, then these expandos are visible
            only when the mouse pointer is near to the control. Maps to the TVS_EX_FADEINOUTEXPANDOS tree view control style.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NSTCSTYLE.NSTCS_EMPTYTEXT">
            <summary>
            If an item has no children and is not expanded, then that item contains a line of text at the child level that says "empty".
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NSTCSTYLE.NSTCS_CHECKBOXES">
            <summary>
            Items have check boxes on their leftmost side. These check boxes can be of types partial, exclusion or dimmed, which
            correspond to the flags NSTCS_PARTIALCHECKBOXES, NSTCS_EXCLUSIONCHECKBOXES, and NSTCS_DIMMEDCHECKBOXES. Maps to the
            TVS_CHECKBOXES tree view control style.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NSTCSTYLE.NSTCS_PARTIALCHECKBOXES">
            <summary>
            Adds a checkbox icon on the leftmost side of a given item with a square in the center, that indicates that the node is
            partially selected. Must be combined with NSTCS_CHECKBOXES. Maps to the TVS_EX_PARTIALCHECKBOXES tree view control style.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NSTCSTYLE.NSTCS_EXCLUSIONCHECKBOXES">
            <summary>
            Adds a checkbox icon on the leftmost side of a given item that contains a red X, which indicates that the item is excluded
            from the current selection. Without this exclusion icon, selection of a parent item includes selection of its child items.
            Must be combined with NSTCS_CHECKBOXES. Maps to the TVS_EX_EXCLUSIONCHECKBOXES tree view control style.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NSTCSTYLE.NSTCS_DIMMEDCHECKBOXES">
            <summary>
            Adds a checkbox on the leftmost side of a given item that contains an icon of a dimmed check mark, that indicates that a
            node is selected because its parent is selected. Must be combined with NSTCS_CHECKBOXES. Maps to the TVS_EX_DIMMEDCHECKBOXES
            tree view control style.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NSTCSTYLE.NSTCS_NOINDENTCHECKS">
            <summary>
            Check boxes are located at the far left edge of the window area instead of being indented. Maps to the TVS_EX_NOINDENTSTATE
            tree view control style.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NSTCSTYLE.NSTCS_ALLOWJUNCTIONS">
            <summary>
            Allow junctions. A junction point, or just junction, is a root of a namespace extension that is normally displayed by
            Windows Explorer as a folder in both tree and folder views. For Windows Explorer to display your extension's files and
            subfolders, you must specify where the root folder is located in the Shell namespace hierarchy. Junctions exist in the file
            system as files, but are not treated as files. An example is a compressed file with a .zip file name extension, which to the
            file system is just a file. However, if this file is treated as a junction, it can represent an entire namespace. This
            allows the namespace tree control to treat compressed files and similar junctions as folders rather than as files.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NSTCSTYLE.NSTCS_SHOWTABSBUTTON">
            <summary>
            Displays an arrow on the right side of an item if the item is a folder. The action associated with the arrow is
            implementation specific. Cannot be combined with NSTCS_SHOWDELETEBUTTON or NSTCS_SHOWREFRESHBUTTON.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NSTCSTYLE.NSTCS_SHOWDELETEBUTTON">
            <summary>
            Displays a red X on the right side of an item. The action associated with the X is implementation specific. Cannot be
            combined with NSTCS_SHOWTABSBUTTON or NSTCS_SHOWREFRESHBUTTON.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NSTCSTYLE.NSTCS_SHOWREFRESHBUTTON">
            <summary>
            Displays a refresh button on the right side of an item. The action associated with the button is implementation specific.
            Cannot be combined with NSTCS_SHOWTABSBUTTON or NSTCS_SHOWDELETEBUTTON.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.NSTCSTYLE2">
            <summary>Used by methods of the INameSpaceTreeControl2 to specify extended display styles in a Shell namespace treeview.</summary>
            <remarks>
            The value NSTCS2_ALLMASK can be used to mask for the NSTCS2_INTERRUPTNOTIFICATIONS, NSTCS2_SHOWNULLSPACEMENU, and
            NSTCS2_DISPLAYPADDING values.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NSTCSTYLE2.NSTCS2_DEFAULT">
            <summary>Displays the tree nodes in default mode, which includes none of the following values.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NSTCSTYLE2.NSTCS2_INTERRUPTNOTIFICATIONS">
            <summary>Displays interrupt notifications.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NSTCSTYLE2.NSTCS2_SHOWNULLSPACEMENU">
            <summary>Displays the context menu in the padding space.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NSTCSTYLE2.NSTCS2_DISPLAYPADDING">
            <summary>Inserts spacing (padding) between top-level nodes.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NSTCSTYLE2.NSTCS2_DISPLAYPINNEDONLY">
            <summary>
            Filters items based on the System.IsPinnedToNameSpaceTree value when INameSpaceTreeControlFolderCapabilities is implemented.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NSTCSTYLE2.NTSCS2_NOSINGLETONAUTOEXPAND">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NSTCSTYLE2.NTSCS2_NEVERINSERTNONENUMERATED">
            <summary>Do not insert nonenumerated (SFGAO_NONENUMERATED) items in the tree.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.INameSpaceTreeAccessible">
            <summary>Exposes methods that perform accessibility actions on a Shell item from a namespace tree control.</summary>
            <remarks>This interface is used only by INameSpaceTreeControl (CLSID_NameSpaceTreeControl).</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INameSpaceTreeAccessible.OnGetDefaultAccessibilityAction(Vanara.PInvoke.Shell32.IShellItem,System.String@)">
            <summary>Gets the default accessibility action for a Shell item.</summary>
            <param name="psi">
            <para>Type: <c>IShellItem*</c></para>
            <para>Pointer to the IShellItem.</para>
            </param>
            <param name="pbstrDefaultAction">
            <para>Type: <c>BSTR*</c></para>
            <para>When this method returns, contains a BSTR that specifies the default, accessibility action.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>Returns S_OK if successful, or E_OUTOFMEMORY otherwise.</para>
            </returns>
            <remarks>This method is called when the default accessibililty action for a Shell item is retrieved.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INameSpaceTreeAccessible.OnDoDefaultAccessibilityAction(Vanara.PInvoke.Shell32.IShellItem)">
            <summary>Invokes the default accessibility action on a Shell item.</summary>
            <param name="psi">
            <para>Type: <c>IShellItem*</c></para>
            <para>Pointer to the IShellItem.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INameSpaceTreeAccessible.OnGetAccessibilityRole(Vanara.PInvoke.Shell32.IShellItem,System.Object@)">
            <summary>Gets the accessibility role for a Shell item.</summary>
            <param name="psi">
            <para>Type: <c>IShellItem*</c></para>
            <para>Pointer to the IShellItem.</para>
            </param>
            <param name="pvarRole">
            <para>Type: <c>VARIANT*</c></para>
            <para>When this method returns, contains a VARIANT that specifies the role.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>This method is called when the accessibility role for a Shell item is retrieved.</remarks>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.INameSpaceTreeControl">
            <summary>Exposes methods used to view and manipulate nodes in a tree of Shell items.</summary>
            <remarks>To implement this interface use class ID CLSID_NameSpaceTreeControl.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INameSpaceTreeControl.Initialize(Vanara.PInvoke.HWND,Vanara.PInvoke.RECT@,Vanara.PInvoke.Shell32.NSTCSTYLE)">
            <summary>Initializes an INameSpaceTreeControl object.</summary>
            <param name="hwndParent">
            <para>Type: <c>HWND</c></para>
            <para>The handle of the parent window.</para>
            </param>
            <param name="prc">
            <para>Type: <c>RECT*</c></para>
            <para>A pointer to a RECT structure that describes the size and position of the control in the client window.</para>
            </param>
            <param name="nsctsFlags">
            <para>Type: <c>NSTCSTYLE</c></para>
            <para>The characteristics of the given namespace tree control. One or more of the following values from the NSTCSTYLE enumeration.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INameSpaceTreeControl.TreeAdvise(System.Object,System.UInt32@)">
            <summary>Enables a client to register with the control.</summary>
            <param name="punk">
            <para>Type: <c>IUnknown*</c></para>
            <para>A pointer to the client IUnknown that registers with the control.</para>
            </param>
            <param name="pdwCookie">
            <para>Type: <c>DWORD*</c></para>
            <para>A pointer to the cookie that is passed back for registration.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>The pointer to the cookie that is passed back is used to unregister the control later with INameSpaceTreeControl::TreeUnadvise.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INameSpaceTreeControl.TreeUnadvise(System.UInt32)">
            <summary>Enables a client to unregister with the control.</summary>
            <param name="dwCookie">
            <para>Type: <c>DWORD*</c></para>
            <para>A pointer to the cookie that is to be unregistered.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>The pointer to the cookie that is passed in is the one that was passed back in INameSpaceTreeControl::TreeAdvise.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INameSpaceTreeControl.AppendRoot(Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.Shell32.SHCONTF,Vanara.PInvoke.Shell32.NSTCROOTSTYLE,Vanara.PInvoke.Shell32.IShellItemFilter)">
            <summary>Appends a Shell item to the list of roots in a tree.</summary>
            <param name="psiRoot">
            <para>Type: <c>IShellItem*</c></para>
            <para>Pointer to the Shell item that is being appended.</para>
            </param>
            <param name="grfEnumFlags">
            <para>Type: <c>SHCONTF</c></para>
            <para>
            Enumerates the qualities of the root and all of its children. One or more of the values of type SHCONTF. These flags can be
            combined using a bitwise OR.
            </para>
            </param>
            <param name="grfRootStyle">
            <para>Type: <c>NSTCROOTSTYLE</c></para>
            <para>Specifies the style of the root that is being appended. One or more of the following values:</para>
            <para>NSTCRS_VISIBLE (0x0000)</para>
            <para>The root is visible as well as the items. Mutually exclusive with NSTCRS_HIDDEN.</para>
            <para>NSTCRS_HIDDEN (0x0001)</para>
            <para>The root is hidden so that the children only are visible. Mutually exclusive with NSTCRS_VISIBLE.</para>
            <para>NSTCRS_EXPANDED (0x0002)</para>
            <para>The root is expanded upon initialization.</para>
            </param>
            <param name="pif">
            <para>Type: <c>IShellItemFilter*</c></para>
            <para>
            Pointer to the IShellItemFilter that enables you to filter which items in the tree are displayed. If supplied, every item is
            customizable with a SHCONTF flag. This value can be <c>NULL</c> if no filter is required.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INameSpaceTreeControl.InsertRoot(System.Int32,Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.Shell32.SHCONTF,Vanara.PInvoke.Shell32.NSTCROOTSTYLE,Vanara.PInvoke.Shell32.IShellItemFilter)">
            <summary>Inserts a Shell item on a root item in a tree.</summary>
            <param name="iIndex">
            <para>Type: <c>int</c></para>
            <para>The index at which to insert the root.</para>
            </param>
            <param name="psiRoot">
            <para>Type: <c>IShellItem*</c></para>
            <para>A pointer to the Shell item that is being inserted.</para>
            </param>
            <param name="grfEnumFlags">
            <para>Type: <c>SHCONTF</c></para>
            <para>Enumerates the qualities of the root and all of its children. One of the values of type SHCONTF.</para>
            </param>
            <param name="grfRootStyle">
            <para>Type: <c>NSTCROOTSTYLE</c></para>
            <para>
            The style of the root that is being inserted. One or more of the following values (flags can be combined using a bitwise OR).
            </para>
            <para>NSTCRS_VISIBLE (0x0000)</para>
            <para>The root is visible as well as the items. Mutually exclusive with NSTCRS_HIDDEN.</para>
            <para>NSTCRS_HIDDEN (0x0001)</para>
            <para>The root is hidden so that only the children are visible. Mutually exclusive with NSTCRS_VISIBLE.</para>
            <para>NSTCRS_EXPANDED (0x0002)</para>
            <para>The root is expanded upon initialization.</para>
            </param>
            <param name="pif">
            <para>Type: <c>IShellItemFilter*</c></para>
            <para>
            A pointer to the IShellItemFilter that enables you to filter which items in the tree are displayed. If supplied, every item
            is customizable with a SHCONTF flag. This value can be <c>NULL</c> if no filter is required.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INameSpaceTreeControl.RemoveRoot(Vanara.PInvoke.Shell32.IShellItem)">
            <summary>Removes a root and its children from a tree.</summary>
            <param name="psiRoot">
            <para>Type: <c>IShellItem*</c></para>
            <para>A pointer to the root that is to be removed.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INameSpaceTreeControl.RemoveAllRoots">
            <summary>Removes all roots and their children from a tree.</summary>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INameSpaceTreeControl.GetRootItems(Vanara.PInvoke.Shell32.IShellItemArray@)">
            <summary>Gets an array of the root items.</summary>
            <param name="ppsiaRootItems">
            <para>Type: <c>IShellItemArray**</c></para>
            <para>A pointer to an array of root items.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INameSpaceTreeControl.SetItemState(Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.Shell32.NSTCITEMSTATE,Vanara.PInvoke.Shell32.NSTCITEMSTATE)">
            <summary>Sets state information for a Shell item.</summary>
            <param name="psi">
            <para>Type: <c>IShellItem*</c></para>
            <para>A pointer to the Shell item for which to set the state.</para>
            </param>
            <param name="nstcisMask">
            <para>Type: <c>NSTCITEMSTATE</c></para>
            <para>Specifies which information is being set, in the form of a bitmap. One or more of the NSTCITEMSTATE constants.</para>
            </param>
            <param name="nstcisFlags">
            <para>Type: <c>NSTCITEMSTATE</c></para>
            <para>A bitmap that contains the values to set for the flags specified in nstcisMask.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            The nstcisMask value specifies which bits in the value pointed to by pnstcisFlags are to be set. Other bits are ignored. As
            a simple example, if nstcisMask=NSTCIS_SELECTED, then the first bit in the nstcisFlags value determines whether that flag is
            set (1) or removed (0).
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INameSpaceTreeControl.GetItemState(Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.Shell32.NSTCITEMSTATE,Vanara.PInvoke.Shell32.NSTCITEMSTATE@)">
            <summary>Gets state information about a Shell item.</summary>
            <param name="psi">
            <para>Type: <c>IShellItem*</c></para>
            <para>A pointer to the Shell item from which to retrieve the state.</para>
            </param>
            <param name="nstcisMask">
            <para>Type: <c>NSTCITEMSTATE</c></para>
            <para>Specifies which information is being requested, in the form of a bitmap. One or more of the NSTCITEMSTATE constants.</para>
            </param>
            <param name="pnstcisFlags">
            <para>Type: <c>NSTCITEMSTATE*</c></para>
            <para>When this method returns, points to a bitmap that contains the values requested in nstcisMask.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            The nstcisMask value specifies which bits in the value pointed to by pnstcisFlags are requested. As a simple example, if
            nstcisMask=NSTCIS_SELECTED, then only the first bit in the value pointed to by pnstcisFlags is valid when this method
            returns. If the first bit in the value pointed to by pnstcisFlags is 1, then the NSTCIS_SELECTED flag is set. If the first
            bit in the value pointed to by pnstcisFlags is 0, then the NSTCIS_SELECTED flag is not set.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INameSpaceTreeControl.GetSelectedItems(Vanara.PInvoke.Shell32.IShellItemArray@)">
            <summary>Gets an array of selected Shell items.</summary>
            <param name="psiaItems">
            <para>Type: <c>IShellItemArray**</c></para>
            <para>A pointer to an array of selected Shell items.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INameSpaceTreeControl.GetItemCustomState(Vanara.PInvoke.Shell32.IShellItem,System.Int32@)">
            <summary>Gets the state of the checkbox associated with a given Shell item.</summary>
            <param name="psi">
            <para>Type: <c>IShellItem*</c></para>
            <para>A pointer to the Shell item for which checkbox state is being retrieved.</para>
            </param>
            <param name="piStateNumber">
            <para>Type: <c>int*</c></para>
            <para>A pointer to the state of the checkbox for the Shell item.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INameSpaceTreeControl.SetItemCustomState(Vanara.PInvoke.Shell32.IShellItem,System.Int32)">
            <summary>Sets the state of the checkbox associated with the Shell item.</summary>
            <param name="psi">
            <para>Type: <c>IShellItem*</c></para>
            <para>A pointer to the Shell item for which checkbox state is being set.</para>
            </param>
            <param name="iStateNumber">
            <para>Type: <c>int</c></para>
            <para>The desired state of the checkbox for the Shell item.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INameSpaceTreeControl.EnsureItemVisible(Vanara.PInvoke.Shell32.IShellItem)">
            <summary>Ensures that the given item is visible.</summary>
            <param name="psi">
            <para>Type: <c>IShellItem*</c></para>
            <para>A pointer to the Shell item for which the visibility is being ensured.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INameSpaceTreeControl.SetTheme(System.String)">
            <summary>Sets the desktop theme for the current window only.</summary>
            <param name="pszTheme">
            <para>Type: <c>LPCWSTR</c></para>
            <para>The name of the desktop theme to which the current window is being set.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INameSpaceTreeControl.GetNextItem(Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.Shell32.NSTCGNI,Vanara.PInvoke.Shell32.IShellItem@)">
            <summary>Retrieves the next item in the tree according to which method is requested.</summary>
            <param name="psi">
            <para>Type: <c>IShellItem*</c></para>
            <para>The Shell item for which the next item is being retrieved. This value can be <c>NULL</c>.</para>
            </param>
            <param name="nstcgi">
            <para>Type: <c>NSTCGNI</c></para>
            <para>The type of the next item. This value can be one of the following flags:</para>
            <para>NSTCGNI_NEXT (0)</para>
            <para>The next sibling of the given item.</para>
            <para>NSTCGNI_NEXTVISIBLE (1)</para>
            <para>
            The next visible item in the tree that has any relationship to the given item. This includes a child (if there is one), the
            next sibling, or even one of the ancestor's siblings.
            </para>
            <para>NSTCGNI_PREV (2)</para>
            <para>The previous sibling item of the given item.</para>
            <para>NSTCGNI_PREVVISIBLE (3)</para>
            <para>The previous visible item that is a sibling item, sibling descendent item or a parent item.</para>
            <para>NSTCGNI_PARENT (4)</para>
            <para>The parent item of the given item.</para>
            <para>NSTCGNI_CHILD (5)</para>
            <para>The first child item of the given item.</para>
            <para>NSTCGNI_FIRSTVISIBLE (6)</para>
            <para>The absolute first visible item in the tree (not relative to the given item).</para>
            <para>NSTCGNI_LASTVISIBLE (7)</para>
            <para>The absolute last visible item in the tree (not relative to the given item).</para>
            </param>
            <param name="ppsiNext">
            <para>Type: <c>IShellItem**</c></para>
            <para>The address of a pointer to the IShellItem that fits the criteria for the next item that was requested.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            If there is no next item for the type selected, this function returns E_FAIL with <c>NULL</c> for the returned item, ppsiNext.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INameSpaceTreeControl.HitTest(Vanara.PInvoke.POINT@,Vanara.PInvoke.Shell32.IShellItem@)">
            <summary>Retrieves the item that a given point is in, if any.</summary>
            <param name="ppt">
            <para>Type: <c>POINT*</c></para>
            <para>A pointer to the point to be tested.</para>
            </param>
            <param name="ppsiOut">
            <para>Type: <c>IShellItem**</c></para>
            <para>The address of a pointer to the item in which the point exists, or <c>NULL</c> if the point does not exist in an item.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>This function returns <c>S_FALSE</c> with a <c>NULL</c> item if the point does not exist in an item.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INameSpaceTreeControl.GetItemRect(Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.RECT@)">
            <summary>Gets the RECT structure that describes the size and position of a given item.</summary>
            <param name="psi">
            <para>Type: <c>IShellItem*</c></para>
            <para>A pointer to the item for which the RECT structure is being retrieved.</para>
            </param>
            <param name="prect">
            <para>Type: <c>RECT*</c></para>
            <para>A pointer to the RECT structure that describes the size and position of the item.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INameSpaceTreeControl.CollapseAll">
            <summary>Collapses all of the items in the given tree.</summary>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.INameSpaceTreeControl2">
            <summary>
            Extends the INameSpaceTreeControl interface by providing methods that get and set the display styles of treeview controls for
            use with Shell namespace items.
            </summary>
            <remarks>
            <para>This interface also provides the methods of the INameSpaceTreeControl interface, from which it inherits.</para>
            <para>Use class identifier (CLSID) CLSID_NameSpaceTreeControl to instantiate an instance of this interface.</para>
            <para>When to Implement</para>
            <para>An implementation of this interface is provided with Windows. Third parties should not implement their own versions.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INameSpaceTreeControl2.Initialize(Vanara.PInvoke.HWND,Vanara.PInvoke.RECT@,Vanara.PInvoke.Shell32.NSTCSTYLE)">
            <summary>Initializes an INameSpaceTreeControl object.</summary>
            <param name="hwndParent">
            <para>Type: <c>HWND</c></para>
            <para>The handle of the parent window.</para>
            </param>
            <param name="prc">
            <para>Type: <c>RECT*</c></para>
            <para>A pointer to a RECT structure that describes the size and position of the control in the client window.</para>
            </param>
            <param name="nsctsFlags">
            <para>Type: <c>NSTCSTYLE</c></para>
            <para>The characteristics of the given namespace tree control. One or more of the following values from the NSTCSTYLE enumeration.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INameSpaceTreeControl2.TreeAdvise(System.Object,System.UInt32@)">
            <summary>Enables a client to register with the control.</summary>
            <param name="punk">
            <para>Type: <c>IUnknown*</c></para>
            <para>A pointer to the client IUnknown that registers with the control.</para>
            </param>
            <param name="pdwCookie">
            <para>Type: <c>DWORD*</c></para>
            <para>A pointer to the cookie that is passed back for registration.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>The pointer to the cookie that is passed back is used to unregister the control later with INameSpaceTreeControl::TreeUnadvise.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INameSpaceTreeControl2.TreeUnadvise(System.UInt32)">
            <summary>Enables a client to unregister with the control.</summary>
            <param name="dwCookie">
            <para>Type: <c>DWORD*</c></para>
            <para>A pointer to the cookie that is to be unregistered.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>The pointer to the cookie that is passed in is the one that was passed back in INameSpaceTreeControl::TreeAdvise.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INameSpaceTreeControl2.AppendRoot(Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.Shell32.SHCONTF,Vanara.PInvoke.Shell32.NSTCROOTSTYLE,Vanara.PInvoke.Shell32.IShellItemFilter)">
            <summary>Appends a Shell item to the list of roots in a tree.</summary>
            <param name="psiRoot">
            <para>Type: <c>IShellItem*</c></para>
            <para>Pointer to the Shell item that is being appended.</para>
            </param>
            <param name="grfEnumFlags">
            <para>Type: <c>SHCONTF</c></para>
            <para>
            Enumerates the qualities of the root and all of its children. One or more of the values of type SHCONTF. These flags can be
            combined using a bitwise OR.
            </para>
            </param>
            <param name="grfRootStyle">
            <para>Type: <c>NSTCROOTSTYLE</c></para>
            <para>Specifies the style of the root that is being appended. One or more of the following values:</para>
            <para>NSTCRS_VISIBLE (0x0000)</para>
            <para>The root is visible as well as the items. Mutually exclusive with NSTCRS_HIDDEN.</para>
            <para>NSTCRS_HIDDEN (0x0001)</para>
            <para>The root is hidden so that the children only are visible. Mutually exclusive with NSTCRS_VISIBLE.</para>
            <para>NSTCRS_EXPANDED (0x0002)</para>
            <para>The root is expanded upon initialization.</para>
            </param>
            <param name="pif">
            <para>Type: <c>IShellItemFilter*</c></para>
            <para>
            Pointer to the IShellItemFilter that enables you to filter which items in the tree are displayed. If supplied, every item is
            customizable with a SHCONTF flag. This value can be <c>NULL</c> if no filter is required.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INameSpaceTreeControl2.InsertRoot(System.Int32,Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.Shell32.SHCONTF,Vanara.PInvoke.Shell32.NSTCROOTSTYLE,Vanara.PInvoke.Shell32.IShellItemFilter)">
            <summary>Inserts a Shell item on a root item in a tree.</summary>
            <param name="iIndex">
            <para>Type: <c>int</c></para>
            <para>The index at which to insert the root.</para>
            </param>
            <param name="psiRoot">
            <para>Type: <c>IShellItem*</c></para>
            <para>A pointer to the Shell item that is being inserted.</para>
            </param>
            <param name="grfEnumFlags">
            <para>Type: <c>SHCONTF</c></para>
            <para>Enumerates the qualities of the root and all of its children. One of the values of type SHCONTF.</para>
            </param>
            <param name="grfRootStyle">
            <para>Type: <c>NSTCROOTSTYLE</c></para>
            <para>
            The style of the root that is being inserted. One or more of the following values (flags can be combined using a bitwise OR).
            </para>
            <para>NSTCRS_VISIBLE (0x0000)</para>
            <para>The root is visible as well as the items. Mutually exclusive with NSTCRS_HIDDEN.</para>
            <para>NSTCRS_HIDDEN (0x0001)</para>
            <para>The root is hidden so that only the children are visible. Mutually exclusive with NSTCRS_VISIBLE.</para>
            <para>NSTCRS_EXPANDED (0x0002)</para>
            <para>The root is expanded upon initialization.</para>
            </param>
            <param name="pif">
            <para>Type: <c>IShellItemFilter*</c></para>
            <para>
            A pointer to the IShellItemFilter that enables you to filter which items in the tree are displayed. If supplied, every item
            is customizable with a SHCONTF flag. This value can be <c>NULL</c> if no filter is required.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INameSpaceTreeControl2.RemoveRoot(Vanara.PInvoke.Shell32.IShellItem)">
            <summary>Removes a root and its children from a tree.</summary>
            <param name="psiRoot">
            <para>Type: <c>IShellItem*</c></para>
            <para>A pointer to the root that is to be removed.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INameSpaceTreeControl2.RemoveAllRoots">
            <summary>Removes all roots and their children from a tree.</summary>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INameSpaceTreeControl2.GetRootItems(Vanara.PInvoke.Shell32.IShellItemArray@)">
            <summary>Gets an array of the root items.</summary>
            <param name="ppsiaRootItems">
            <para>Type: <c>IShellItemArray**</c></para>
            <para>A pointer to an array of root items.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INameSpaceTreeControl2.SetItemState(Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.Shell32.NSTCITEMSTATE,Vanara.PInvoke.Shell32.NSTCITEMSTATE)">
            <summary>Sets state information for a Shell item.</summary>
            <param name="psi">
            <para>Type: <c>IShellItem*</c></para>
            <para>A pointer to the Shell item for which to set the state.</para>
            </param>
            <param name="nstcisMask">
            <para>Type: <c>NSTCITEMSTATE</c></para>
            <para>Specifies which information is being set, in the form of a bitmap. One or more of the NSTCITEMSTATE constants.</para>
            </param>
            <param name="nstcisFlags">
            <para>Type: <c>NSTCITEMSTATE</c></para>
            <para>A bitmap that contains the values to set for the flags specified in nstcisMask.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            The nstcisMask value specifies which bits in the value pointed to by pnstcisFlags are to be set. Other bits are ignored. As
            a simple example, if nstcisMask=NSTCIS_SELECTED, then the first bit in the nstcisFlags value determines whether that flag is
            set (1) or removed (0).
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INameSpaceTreeControl2.GetItemState(Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.Shell32.NSTCITEMSTATE,Vanara.PInvoke.Shell32.NSTCITEMSTATE@)">
            <summary>Gets state information about a Shell item.</summary>
            <param name="psi">
            <para>Type: <c>IShellItem*</c></para>
            <para>A pointer to the Shell item from which to retrieve the state.</para>
            </param>
            <param name="nstcisMask">
            <para>Type: <c>NSTCITEMSTATE</c></para>
            <para>Specifies which information is being requested, in the form of a bitmap. One or more of the NSTCITEMSTATE constants.</para>
            </param>
            <param name="pnstcisFlags">
            <para>Type: <c>NSTCITEMSTATE*</c></para>
            <para>When this method returns, points to a bitmap that contains the values requested in nstcisMask.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            The nstcisMask value specifies which bits in the value pointed to by pnstcisFlags are requested. As a simple example, if
            nstcisMask=NSTCIS_SELECTED, then only the first bit in the value pointed to by pnstcisFlags is valid when this method
            returns. If the first bit in the value pointed to by pnstcisFlags is 1, then the NSTCIS_SELECTED flag is set. If the first
            bit in the value pointed to by pnstcisFlags is 0, then the NSTCIS_SELECTED flag is not set.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INameSpaceTreeControl2.GetSelectedItems(Vanara.PInvoke.Shell32.IShellItemArray@)">
            <summary>Gets an array of selected Shell items.</summary>
            <param name="psiaItems">
            <para>Type: <c>IShellItemArray**</c></para>
            <para>A pointer to an array of selected Shell items.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INameSpaceTreeControl2.GetItemCustomState(Vanara.PInvoke.Shell32.IShellItem,System.Int32@)">
            <summary>Gets the state of the checkbox associated with a given Shell item.</summary>
            <param name="psi">
            <para>Type: <c>IShellItem*</c></para>
            <para>A pointer to the Shell item for which checkbox state is being retrieved.</para>
            </param>
            <param name="piStateNumber">
            <para>Type: <c>int*</c></para>
            <para>A pointer to the state of the checkbox for the Shell item.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INameSpaceTreeControl2.SetItemCustomState(Vanara.PInvoke.Shell32.IShellItem,System.Int32)">
            <summary>Sets the state of the checkbox associated with the Shell item.</summary>
            <param name="psi">
            <para>Type: <c>IShellItem*</c></para>
            <para>A pointer to the Shell item for which checkbox state is being set.</para>
            </param>
            <param name="iStateNumber">
            <para>Type: <c>int</c></para>
            <para>The desired state of the checkbox for the Shell item.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INameSpaceTreeControl2.EnsureItemVisible(Vanara.PInvoke.Shell32.IShellItem)">
            <summary>Ensures that the given item is visible.</summary>
            <param name="psi">
            <para>Type: <c>IShellItem*</c></para>
            <para>A pointer to the Shell item for which the visibility is being ensured.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INameSpaceTreeControl2.SetTheme(System.String)">
            <summary>Sets the desktop theme for the current window only.</summary>
            <param name="pszTheme">
            <para>Type: <c>LPCWSTR</c></para>
            <para>The name of the desktop theme to which the current window is being set.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INameSpaceTreeControl2.GetNextItem(Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.Shell32.NSTCGNI,Vanara.PInvoke.Shell32.IShellItem@)">
            <summary>Retrieves the next item in the tree according to which method is requested.</summary>
            <param name="psi">
            <para>Type: <c>IShellItem*</c></para>
            <para>The Shell item for which the next item is being retrieved. This value can be <c>NULL</c>.</para>
            </param>
            <param name="nstcgi">
            <para>Type: <c>NSTCGNI</c></para>
            <para>The type of the next item. This value can be one of the following flags:</para>
            <para>NSTCGNI_NEXT (0)</para>
            <para>The next sibling of the given item.</para>
            <para>NSTCGNI_NEXTVISIBLE (1)</para>
            <para>
            The next visible item in the tree that has any relationship to the given item. This includes a child (if there is one), the
            next sibling, or even one of the ancestor's siblings.
            </para>
            <para>NSTCGNI_PREV (2)</para>
            <para>The previous sibling item of the given item.</para>
            <para>NSTCGNI_PREVVISIBLE (3)</para>
            <para>The previous visible item that is a sibling item, sibling descendent item or a parent item.</para>
            <para>NSTCGNI_PARENT (4)</para>
            <para>The parent item of the given item.</para>
            <para>NSTCGNI_CHILD (5)</para>
            <para>The first child item of the given item.</para>
            <para>NSTCGNI_FIRSTVISIBLE (6)</para>
            <para>The absolute first visible item in the tree (not relative to the given item).</para>
            <para>NSTCGNI_LASTVISIBLE (7)</para>
            <para>The absolute last visible item in the tree (not relative to the given item).</para>
            </param>
            <param name="ppsiNext">
            <para>Type: <c>IShellItem**</c></para>
            <para>The address of a pointer to the IShellItem that fits the criteria for the next item that was requested.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            If there is no next item for the type selected, this function returns E_FAIL with <c>NULL</c> for the returned item, ppsiNext.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INameSpaceTreeControl2.HitTest(Vanara.PInvoke.POINT@,Vanara.PInvoke.Shell32.IShellItem@)">
            <summary>Retrieves the item that a given point is in, if any.</summary>
            <param name="ppt">
            <para>Type: <c>POINT*</c></para>
            <para>A pointer to the point to be tested.</para>
            </param>
            <param name="ppsiOut">
            <para>Type: <c>IShellItem**</c></para>
            <para>The address of a pointer to the item in which the point exists, or <c>NULL</c> if the point does not exist in an item.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>This function returns <c>S_FALSE</c> with a <c>NULL</c> item if the point does not exist in an item.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INameSpaceTreeControl2.GetItemRect(Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.RECT@)">
            <summary>Gets the RECT structure that describes the size and position of a given item.</summary>
            <param name="psi">
            <para>Type: <c>IShellItem*</c></para>
            <para>A pointer to the item for which the RECT structure is being retrieved.</para>
            </param>
            <param name="prect">
            <para>Type: <c>RECT*</c></para>
            <para>A pointer to the RECT structure that describes the size and position of the item.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INameSpaceTreeControl2.CollapseAll">
            <summary>Collapses all of the items in the given tree.</summary>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INameSpaceTreeControl2.SetControlStyle(Vanara.PInvoke.Shell32.NSTCSTYLE,Vanara.PInvoke.Shell32.NSTCSTYLE)">
            <summary>Sets the display styles for the namespace object's treeview controls.</summary>
            <param name="nstcsMask">
            <para>Type: <c>NSTCSTYLE</c></para>
            <para>One or more of the NSTCSTYLE constants that specify the styles for which the method should set new values.</para>
            </param>
            <param name="nstcsStyle">
            <para>Type: <c>NSTCSTYLE</c></para>
            <para>
            A bitmap that contains the new values for the styles specified in nstcsMask. If the bit that represents the individual
            NSTCSTYLE value is 0, that style is not used. If the value is 1, the style is applied to the treeview. Styles in positions
            not specified in nstcsMask are left at their current setting regardless of their bit's value in this bitmap.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INameSpaceTreeControl2.GetControlStyle(Vanara.PInvoke.Shell32.NSTCSTYLE,Vanara.PInvoke.Shell32.NSTCSTYLE@)">
            <summary>Gets the display styles set for the namespace object's treeview controls.</summary>
            <param name="nstcsMask">
            <para>Type: <c>NSTCSTYLE</c></para>
            <para>One or more of the NSTCSTYLE constants that specify the values for which the method should retrieve the current settings.</para>
            </param>
            <param name="pnstcsStyle">
            <para>Type: <c>NSTCSTYLE*</c></para>
            <para>
            Pointer to a value that, when this method returns successfully, receives the values requested in nstcsMask. If the bit that
            represents the individual NSTCSTYLE value is 0, that value is not set. If the value is 1, it is the current setting. Bit
            values in positions not specifically requested in nstcsMask do not necessarily reflect the current settings and should not
            be used.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INameSpaceTreeControl2.SetControlStyle2(Vanara.PInvoke.Shell32.NSTCSTYLE2,Vanara.PInvoke.Shell32.NSTCSTYLE2)">
            <summary>Sets the extended display styles for the namespace object's treeview controls.</summary>
            <param name="nstcsMask">
            <para>Type: <c>NSTCSTYLE2</c></para>
            <para>One or more of the NSTCSTYLE2 constants that specify the styles for which the method should set new values.</para>
            </param>
            <param name="nstcsStyle">
            <para>Type: <c>NSTCSTYLE2</c></para>
            <para>
            A bitmap that contains the new values for the styles specified in nstcsMask. If the bit that represents the individual
            NSTCSTYLE2 value is 0, that style is not used. If the value is 1, the style is applied to the treeview. Styles in positions
            not specified in nstcsMask are left at their current setting regardless of their bit's value in this bitmap.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INameSpaceTreeControl2.GetControlStyle2(Vanara.PInvoke.Shell32.NSTCSTYLE2,Vanara.PInvoke.Shell32.NSTCSTYLE2@)">
            <summary>Gets the extended display styles set for the namespace object's treeview controls.</summary>
            <param name="nstcsMask">
            <para>Type: <c>NSTCSTYLE2</c></para>
            <para>One or more of the NSTCSTYLE2 constants that specify the values for which the method should retrieve the current settings.</para>
            </param>
            <param name="pnstcsStyle">
            <para>Type: <c>NSTCSTYLE2*</c></para>
            <para>
            Pointer to a value that, when this method returns successfully, receives the values requested in nstcsMask. If the bit that
            represents the individual NSTCSTYLE2 value is 0, that value is not set. If the value is 1, it is the current setting. Bit
            values in positions not specifically requested in nstcsMask do not necessarily reflect the current settings and should not
            be used.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.INameSpaceTreeControlDropHandler">
            <summary>
            Exposes handler methods for drag-and-drop. Used by the namespace tree control to notify the client of any drag-and-drop
            operation happening within the control. Provides a way for a client to intercept a drop operation and perform its own action, or
            to return the desired drop effect.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INameSpaceTreeControlDropHandler.OnDragEnter(Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.Shell32.IShellItemArray,System.Boolean,System.UInt32,System.UInt32@)">
            <summary>Called on drag enter to set drag effect, as specified.</summary>
            <param name="psiOver">
            <para>Type: <c>IShellItem*</c></para>
            <para>A pointer to an IShellItem interface representing the item underneath the mouse cursor. Optional.</para>
            </param>
            <param name="psiaData">
            <para>Type: <c>IShellItemArray*</c></para>
            <para>A pointer to an IShellItem array containing the items being dragged.</para>
            </param>
            <param name="fOutsideSource">
            <para>Type: <c>BOOL</c></para>
            <para>Specifies whether drag started outside target area.</para>
            </param>
            <param name="grfKeyState">
            <para>Type: <c>DWORD</c></para>
            <para>The current state of keyboard modifier keys.</para>
            </param>
            <param name="pdwEffect">
            <para>Type: <c>DWORD*</c></para>
            <para>On success, contains a pointer to the drag effect value.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>Failing this method blocks the drag operation in the namespace tree control (NSTC).</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INameSpaceTreeControlDropHandler.OnDragOver(Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.Shell32.IShellItemArray,System.UInt32,System.UInt32@)">
            <summary>Called on drag over to set drag effect, as specified.</summary>
            <param name="psiOver">
            <para>Type: <c>IShellItem*</c></para>
            <para>A pointer to an IShellItem interface representing the item underneath the mouse cursor. Optional.</para>
            </param>
            <param name="psiaData">
            <para>Type: <c>IShellItemArray*</c></para>
            <para>A pointer to an IShellItem array containing the items being dragged.</para>
            </param>
            <param name="grfKeyState">
            <para>Type: <c>DWORD</c></para>
            <para>The current state of keyboard modifier keys.</para>
            </param>
            <param name="pdwEffect">
            <para>Type: <c>DWORD*</c></para>
            <para>On success, contains a pointer to the drag effect value.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>Failing this method blocks the drag operation in the namespace tree control (NSTC).</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INameSpaceTreeControlDropHandler.OnDragPosition(Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.Shell32.IShellItemArray,System.Int32,System.Int32)">
            <summary>Called when the item is being dragged within the same level (within the same parent folder) in the tree.</summary>
            <param name="psiOver">
            <para>Type: <c>IShellItem*</c></para>
            <para>A pointer to an IShellItem interface representing the item underneath the mouse cursor. Optional.</para>
            </param>
            <param name="psiaData">
            <para>Type: <c>IShellItemArray*</c></para>
            <para>A pointer to an IShellItem array containing the items being dragged.</para>
            </param>
            <param name="iNewPosition">
            <para>Type: <c>int</c></para>
            <para>The index if the item being dragged is between items; otherwise, NSTCDHPOS_ONTOP (-1).</para>
            </param>
            <param name="iOldPosition">
            <para>Type: <c>int</c></para>
            <para>The old position.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>Failing this method prevents the item rearrangment.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INameSpaceTreeControlDropHandler.OnDrop(Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.Shell32.IShellItemArray,System.Int32,System.UInt32,System.UInt32@)">
            <summary>Called on drop to set drop effect, as specified.</summary>
            <param name="psiOver">
            <para>Type: <c>IShellItem*</c></para>
            <para>A pointer to an IShellItem interface representing the item underneath the mouse cursor. Optional.</para>
            </param>
            <param name="psiaData">
            <para>Type: <c>IShellItemArray*</c></para>
            <para>A pointer to an IShellItem array representing a data object.</para>
            </param>
            <param name="iPosition">
            <para>Type: <c>int</c></para>
            <para>Specifies drop position.</para>
            </param>
            <param name="grfKeyState">
            <para>Type: <c>DWORD</c></para>
            <para>The current state of keyboard modifier keys.</para>
            </param>
            <param name="pdwEffect">
            <para>Type: <c>DWORD*</c></para>
            <para>A pointer to the drop effect value.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            <c>Note</c> To overwrite the default drop behavior, a client should fail this method; success proceeds with the default drop operation.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INameSpaceTreeControlDropHandler.OnDropPosition(Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.Shell32.IShellItemArray,System.Int32,System.Int32)">
            <summary>Called when the item is being dropped within the same level (within the same parent folder) in the tree.</summary>
            <param name="psiOver">
            <para>Type: <c>IShellItem*</c></para>
            <para>A pointer to an IShellItem interface representing the item underneath the mouse cursor. Optional.</para>
            </param>
            <param name="psiaData">
            <para>Type: <c>IShellItemArray*</c></para>
            <para>A pointer to an IShellItem array representing a data object.</para>
            </param>
            <param name="iNewPosition">
            <para>Type: <c>int</c></para>
            <para>The index if the item being dropped is between items; otherwise, NSTCDHPOS_ONTOP (-1).</para>
            </param>
            <param name="iOldPosition">
            <para>Type: <c>int</c></para>
            <para>Specifies old position.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>Failing this method prevents the item rearrangment from happening.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INameSpaceTreeControlDropHandler.OnDragLeave(Vanara.PInvoke.Shell32.IShellItem)">
            <summary>Called on drag leave for a specified item.</summary>
            <param name="psiOver">
            <para>Type: <c>IShellItem*</c></para>
            <para>A pointer to an IShellItem interface representing the item underneath the mouse cursor. Optional.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.INameSpaceTreeControlEvents">
            <summary>Exposes methods for handling INameSpaceTreeControl events.</summary>
            <remarks>
            This interface is implemented by a client of namespace control (CLSID_NameSpaceTreeControl) to be advised of namespace control
            events so that the client may process these events and if not, allow the namespace control to process them.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INameSpaceTreeControlEvents.OnItemClick(Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.Shell32.NSTCEHITTEST,Vanara.PInvoke.Shell32.NSTCECLICKTYPE)">
            <summary>Called when the user clicks a button on the mouse.</summary>
            <param name="psi">
            <para>Type: <c>IShellItem*</c></para>
            <para>The IShellItem that was clicked.</para>
            </param>
            <param name="nstceHitTest">
            <para>Type: <c>NSTCEHITTEST</c></para>
            <para>The location on the IShellItem that was clicked. One of the following values:</para>
            <para>NSTCEHT_NOWHERE (0x0001)</para>
            <para>The click missed the IShellItem.</para>
            <para>NSTCEHT_ONITEMICON (0x0002)</para>
            <para>The click was on the icon of the IShellItem.</para>
            <para>NSTCEHT_ONITEMLABEL (0x0004)</para>
            <para>The click was on the label text of the IShellItem.</para>
            <para>NSTCEHT_ONITEMINDENT (0x0008)</para>
            <para>The click was on the indented space on the leftmost side of the IShellItem.</para>
            <para>NSTCEHT_ONITEMBUTTON (0x0010)</para>
            <para>The click was on the expando button of the IShellItem.</para>
            <para>NSTCEHT_ONITEMRIGHT (0x0020)</para>
            <para>The click was on the rightmost side of the text of the IShellItem.</para>
            <para>NSTCEHT_ONITEMSTATEICON (0x0040)</para>
            <para>The click was on the state icon of the IShellItem.</para>
            <para>NSTCEHT_ONITEM (0x0046)</para>
            <para>The click was on the item icon or the item label or the state icon of the IShellItem.</para>
            <para>NSTCEHT_ONITEMTABBUTTON (0x1000)</para>
            <para>The click was on the tab button of the IShellItem.</para>
            </param>
            <param name="nstceClickType">
            <para>Type: <c>NSTCSTYLE</c></para>
            <para>Indicates which button was clicked and the kind of click. One of the following values:</para>
            <para>NSTCECT_LBUTTON (0x0001)</para>
            <para>The left button was clicked.</para>
            <para>NSTCECT_MBUTTON (0x0002)</para>
            <para>The middle button was clicked.</para>
            <para>NSTCECT_RBUTTON (0x0003)</para>
            <para>The right button was clicked.</para>
            <para>NSTCECT_BUTTON (0x0003)</para>
            <para>A button was clicked.</para>
            <para>NSTCECT_DBLCLICK (0x0004)</para>
            <para>The click was a double click. If this value is present, it is added to one of the other values.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            If this method fails, the event is processed by both INameSpaceTreeControl and TreeView. If it returns S_OK, then only
            <c>INameSpaceTreeControl</c> will process the event.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INameSpaceTreeControlEvents.OnPropertyItemCommit(Vanara.PInvoke.Shell32.IShellItem)">
            <summary>Not implemented.</summary>
            <param name="psi">
            <para>Type: <c>IShellItem*</c></para>
            <para>Not used.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>Returns E_NOTIMPL.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INameSpaceTreeControlEvents.OnItemStateChanging(Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.Shell32.NSTCITEMSTATE,Vanara.PInvoke.Shell32.NSTCITEMSTATE)">
            <summary>Called before the state of an item changes.</summary>
            <param name="psi">
            <para>Type: <c>IShellItem*</c></para>
            <para>A pointer to the Shell item for which the state is going to change.</para>
            </param>
            <param name="nstcisMask">
            <para>Type: <c>NSTCITEMSTATE</c></para>
            <para>
            One or more values from the NSTCITEMSTATE enumeration that indicate which pieces of information the calling application
            wants to set.
            </para>
            </param>
            <param name="nstcisState">
            <para>Type: <c>NSTCITEMSTATE</c></para>
            <para>One or more values from the NSTCITEMSTATE enumeration that indicate the values that are to be set.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INameSpaceTreeControlEvents.OnItemStateChanged(Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.Shell32.NSTCITEMSTATE,Vanara.PInvoke.Shell32.NSTCITEMSTATE)">
            <summary>Not implemented.</summary>
            <param name="psi">
            <para>Type: <c>IShellItem*</c></para>
            <para>A pointer to the shell item for which the state has changed.</para>
            </param>
            <param name="nstcisMask">
            <para>Type: <c>NSTCITEMSTATE</c></para>
            <para>
            One or more values from the NSTCITEMSTATE enumeration that indicates what pieces of information the caller wants to set.
            </para>
            </param>
            <param name="nstcisState">
            <para>Type: <c>NSTCITEMSTATE</c></para>
            <para>One or more values from the NSTCITEMSTATE enumeration that indicates the values that are to be set.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INameSpaceTreeControlEvents.OnSelectionChanged(Vanara.PInvoke.Shell32.IShellItemArray)">
            <summary>Called when the selection changes.</summary>
            <param name="psiaSelection">
            <para>Type: <c>IShellItemArray*</c></para>
            <para>An array of IShellItem objects that contains the new selection.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INameSpaceTreeControlEvents.OnKeyboardInput(System.UInt32,System.IntPtr,System.IntPtr)">
            <summary>Called when the user presses a key on the keyboard.</summary>
            <param name="uMsg">
            <para>Type: <c>UINT</c></para>
            <para>The message value.</para>
            </param>
            <param name="wParam">
            <para>Type: <c>WPARAM</c></para>
            <para>Specifies the WParam parameters of the message.</para>
            </param>
            <param name="lParam">
            <para>Type: <c>LPARAM</c></para>
            <para>Specifies the LParam parameters of the message.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            This method receives its message directly from WndProc. When this returns S_OK, the message was not consumed and the
            namespace tree control is allowed to process the message. Otherwise this message was handled, with no further action required.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INameSpaceTreeControlEvents.OnBeforeExpand(Vanara.PInvoke.Shell32.IShellItem)">
            <summary>Called before an IShellItem is expanded.</summary>
            <param name="psi">
            <para>Type: <c>IShellItem*</c></para>
            <para>A pointer to the IShellItem that is to be expanded.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INameSpaceTreeControlEvents.OnAfterExpand(Vanara.PInvoke.Shell32.IShellItem)">
            <summary>Called after an IShellItem is expanded.</summary>
            <param name="psi">
            <para>Type: <c>IShellItem*</c></para>
            <para>A pointer to the IShellItem that was expanded.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INameSpaceTreeControlEvents.OnBeginLabelEdit(Vanara.PInvoke.Shell32.IShellItem)">
            <summary>Called before the IShellItem goes into edit mode.</summary>
            <param name="psi">
            <para>Type: <c>IShellItem*</c></para>
            <para>Pointer to the IShellItem for which the text is to be edited.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>If this method fails, the transition to edit mode is not canceled.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INameSpaceTreeControlEvents.OnEndLabelEdit(Vanara.PInvoke.Shell32.IShellItem)">
            <summary>Called after the IShellItem leaves edit mode.</summary>
            <param name="psi">
            <para>Type: <c>IShellItem*</c></para>
            <para>A pointer to the IShellItem for which the text was edited.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INameSpaceTreeControlEvents.OnGetToolTip(Vanara.PInvoke.Shell32.IShellItem,System.Text.StringBuilder,System.Int32)">
            <summary>Enables you to provide a tooltip.</summary>
            <param name="psi">
            <para>Type: <c>IShellItem*</c></para>
            <para>Pointer to the IShellItem that contains the tooltip.</para>
            </param>
            <param name="pszTip">
            <para>Type: <c>LPWSTR</c></para>
            <para>When this method returns, contains the text of the tooltip.</para>
            </param>
            <param name="cchTip">
            <para>Type: <c>int</c></para>
            <para>The size of the tooltip in characters.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            If this method returns S_OK, the client provides its own tooltip. Otherwise the INameSpaceTreeControl will extract one.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INameSpaceTreeControlEvents.OnBeforeItemDelete(Vanara.PInvoke.Shell32.IShellItem)">
            <summary>Called before an IShellItem and all of its children are deleted.</summary>
            <param name="psi">
            <para>Type: <c>IShellItem*</c></para>
            <para>A pointer to the IShellItem that is to be deleted.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>If this method fails, the given IShellItem and its children are still deleted.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INameSpaceTreeControlEvents.OnItemAdded(Vanara.PInvoke.Shell32.IShellItem,System.Boolean)">
            <summary>Called after an IShellItem has been added.</summary>
            <param name="psi">
            <para>Type: <c>IShellItem*</c></para>
            <para>A pointer to the IShellItem that was added.</para>
            </param>
            <param name="fIsRoot">
            <para>Type: <c>BOOL</c></para>
            <para>Specifies whether the IShellItem that was added is a root.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INameSpaceTreeControlEvents.OnItemDeleted(Vanara.PInvoke.Shell32.IShellItem,System.Boolean)">
            <summary>Called after an IShellItem has been deleted.</summary>
            <param name="psi">
            <para>Type: <c>IShellItem*</c></para>
            <para>A pointer to the IShellItem that was deleted.</para>
            </param>
            <param name="fIsRoot">
            <para>Type: <c>BOOL</c></para>
            <para>Specifies whether the IShellItem that was deleted is a root.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INameSpaceTreeControlEvents.OnBeforeContextMenu(Vanara.PInvoke.Shell32.IShellItem,System.Guid@,System.Object@)">
            <summary>Called before a context menu is displayed; allows client to add additional menu entries.</summary>
            <param name="psi">
            <para>Type: <c>IShellItem*</c></para>
            <para>A pointer to the IShellItem from which the context menu is generated. This value can be <c>NULL</c>.</para>
            </param>
            <param name="riid">
            <para>Type: <c>REFIID</c></para>
            <para>Reference to the IID of the context menu.</para>
            </param>
            <param name="ppv">
            <para>Type: <c>void**</c></para>
            <para>When this methods returns, contains the address of a pointer to the interface specified by riid.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INameSpaceTreeControlEvents.OnAfterContextMenu(Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.Shell32.IContextMenu,System.Guid@,System.Object@)">
            <summary>Called after a context menu is displayed.</summary>
            <param name="psi">
            <para>Type: <c>IShellItem*</c></para>
            <para>
            A pointer to the IShellItem from which the context menu is generated. This value can be <c>NULL</c> only if the
            NSTCS2_SHOWNULLSPACEMENU flag is set.
            </para>
            </param>
            <param name="pcmIn">
            <para>Type: <c>IContextMenu*</c></para>
            <para>A pointer to the context menu.</para>
            </param>
            <param name="riid">
            <para>Type: <c>REFIID</c></para>
            <para>Reference to the IID of the context menu.</para>
            </param>
            <param name="ppv">
            <para>Type: <c>void**</c></para>
            <para>When this method returns, contains the address of a pointer to the interface specified in riid.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            This method allows client to completely replace the context menu. This method will allow the client to use the context menu
            returned by ppv and not necessarily the one specified in pcmIn.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INameSpaceTreeControlEvents.OnBeforeStateImageChange(Vanara.PInvoke.Shell32.IShellItem)">
            <summary>Called before the state icon of the given IShellItem is changed.</summary>
            <param name="psi">
            <para>Type: <c>IShellItem*</c></para>
            <para>Pointer to the IShellItem in which the state image is changing.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            If this method returns S_OK, the client has processed the event and no further action is required of the namespace control.
            Otherwise the event will need to be processed, in this case the default action is to go to the next image in the list.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INameSpaceTreeControlEvents.OnGetDefaultIconIndex(Vanara.PInvoke.Shell32.IShellItem,System.Int32@,System.Int32@)">
            <summary>Undocumented.</summary>
            <param name="psi">Undocumented.</param>
            <param name="piDefaultIcon">Undocumented.</param>
            <param name="piOpenIcon">Undocumented.</param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.INameSpaceTreeControlFolderCapabilities">
            <summary>Exposes a single method that retrieves the status of a folder's System.IsPinnedToNameSpaceTree filtering support.</summary>
            <remarks>
            <para>
            The namespace tree control checks all the nodes it enumerates to see if they support filtering. This is done by retrieving the
            System.IsPinnedToNameSpaceTree property for the shell folders that support this interface. Nodes that do not support this
            interface do not have filtering support and are shown by default.
            </para>
            <para>Use this interface to retrieve the filtering support status of a shell folder.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INameSpaceTreeControlFolderCapabilities.GetFolderCapabilities(Vanara.PInvoke.Shell32.NSTCFOLDERCAPABILITIES,Vanara.PInvoke.Shell32.NSTCFOLDERCAPABILITIES@)">
            <summary>
            Gets a folder's capability to be filtered through the System.IsPinnedToNameSpaceTree property key value and change
            notification registration status.
            </summary>
            <param name="nfcMask">
            <para>Type: <c>NSTCFOLDERCAPABILITIES</c></para>
            <para>The capabilities for which this method should retrieve values. Specify one or both of the following:</para>
            <para>NSTCFC_PINNEDITEMFILTERING (0x00000001)</para>
            <para>
            0x00000001. The System.IsPinnedToNameSpaceTree property exists on this folder and filtering based on that property value is supported.
            </para>
            <para>NSTCFC_DELAY_REGISTER_NOTIFY (0x00000002)</para>
            <para>0x00000002. Registration for change notifications is delayed until the folder is expanded in the navigation pane.</para>
            </param>
            <param name="pnfcValue">
            <para>Type: <c>NSTCFOLDERCAPABILITIES*</c></para>
            <para>
            Pointer to a value that, when this method returns successfully, receives the capabilities requested in nfcMask. Except in
            the case of NSTCFC_NONE, bit values in positions not specifically requested in nfcMask do not necessarily reflect the
            capabilities and should not be used.
            </para>
            <para>NSTCFC_NONE (0x00000000)</para>
            <para>0x00000000. The System.IsPinnedToNameSpaceTree property does not exist on this folder. Filtering is not supported.</para>
            <para>NSTCFC_PINNEDITEMFILTERING (0x00000001)</para>
            <para>
            0x00000001. The System.IsPinnedToNameSpaceTree property exists on this folder and filtering based on that property value is supported.
            </para>
            <para>NSTCFC_DELAY_REGISTER_NOTIFY (0x00000002)</para>
            <para>0x00000002. Registration for change notifications is delayed until the folder is expanded in the navigation pane.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.INameSpaceTreeControlCustomDraw">
            <summary>Exposes methods that enable the user to draw a custom namespace tree control and its items.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INameSpaceTreeControlCustomDraw.PrePaint(Vanara.PInvoke.HDC,Vanara.PInvoke.RECT@,System.IntPtr@)">
            <summary>Called before the namespace tree control is drawn.</summary>
            <param name="hdc">
            <para>Type: <c>HDC</c></para>
            <para>A handle to the control's device context. Use this HDC to perform any GDI functions.</para>
            </param>
            <param name="prc">
            <para>Type: <c>RECT*</c></para>
            <para>A pointer to the RECT structure that describes the bounding rectangle of the area being drawn.</para>
            </param>
            <param name="plres">
            <para>Type: <c>LRESULT*</c></para>
            <para>
            When this method returns, contains a pointer to an <c>LRESULT</c>, which contains one or more of the values from the CDRF
            Constants enumeration.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INameSpaceTreeControlCustomDraw.PostPaint(Vanara.PInvoke.HDC,Vanara.PInvoke.RECT@)">
            <summary>Called after the namespace tree control is drawn.</summary>
            <param name="hdc">
            <para>Type: <c>HDC</c></para>
            <para>A handle to the control's device context. Use this HDC to perform any GDI functions.</para>
            </param>
            <param name="prc">
            <para>Type: <c>RECT*</c></para>
            <para>A pointer to the RECT structure that describes the bounding rectangle of the area being drawn.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INameSpaceTreeControlCustomDraw.ItemPrePaint(Vanara.PInvoke.HDC,Vanara.PInvoke.RECT@,Vanara.PInvoke.Shell32.NSTCCUSTOMDRAW@,Vanara.PInvoke.COLORREF@,Vanara.PInvoke.COLORREF@,System.IntPtr@)">
            <summary>Called before an item in the namespace tree control is drawn.</summary>
            <param name="hdc">
            <para>Type: <c>HDC</c></para>
            <para>A handle to the control's device context. Use this HDC to perform any GDI functions.</para>
            </param>
            <param name="prc">
            <para>Type: <c>RECT*</c></para>
            <para>A pointer to the RECT structure that describes the bounding rectangle of the area being drawn.</para>
            </param>
            <param name="pnstccdItem">
            <para>Type: <c>NSTCCUSTOMDRAW*</c></para>
            <para>A pointer to the NSTCCUSTOMDRAW structure that determines the details of the drawing.</para>
            </param>
            <param name="pclrText">
            <para>Type: <c>COLORREF*</c></para>
            <para>
            On entry, a pointer to a COLORREF structure that declares the default color of the text. When this method returns, contains
            a pointer to a <c>COLORREF</c> structure that declares the color that should be used in its place, if any. This allows the
            client to provide their own color if they do not want to use the default.
            </para>
            </param>
            <param name="pclrTextBk">
            <para>Type: <c>COLORREF*</c></para>
            <para>
            On entry, a pointer to a COLORREF structure that declares the default color of the background. When this method returns,
            contains a pointer to a <c>COLORREF</c> structure that declares the color that should be used in its place, if any. This
            allows the client to provide their own color if they do not want to use the default.
            </para>
            </param>
            <param name="plres">
            <para>Type: <c>LRESULT*</c></para>
            <para>
            When this method returns, contains a pointer to an <c>LRESULT</c>, which points to one or more of the values from the CDRF
            Constants enumeration.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INameSpaceTreeControlCustomDraw.ItemPostPaint(Vanara.PInvoke.HDC,Vanara.PInvoke.RECT@,Vanara.PInvoke.Shell32.NSTCCUSTOMDRAW@)">
            <summary>Called after an item in the namespace tree control is drawn.</summary>
            <param name="hdc">
            <para>Type: <c>HDC</c></para>
            <para>A handle to the control's device context. Use this HDC to perform any GDI functions.</para>
            </param>
            <param name="prc">
            <para>Type: <c>RECT*</c></para>
            <para>A pointer to the RECT structure that describes the bounding rectangle of the area being drawn.</para>
            </param>
            <param name="pnstccdItem">
            <para>Type: <c>NSTCCUSTOMDRAW*</c></para>
            <para>A pointer to the NSTCCUSTOMDRAW struct that determines the details of the drawing.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.NSTCCUSTOMDRAW">
            <summary>Custom draw structure used by INameSpaceTreeControlCustomDraw methods.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NSTCCUSTOMDRAW.psi">
            <summary>
            <para>Type: <c>IShellItem*</c></para>
            <para>A pointer to a Shell item.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NSTCCUSTOMDRAW.uItemState">
            <summary>
            <para>Type: <c>UINT</c></para>
            <para>The current item state. See NMCUSTOMDRAW for more detail.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NSTCCUSTOMDRAW.nstcis">
            <summary>
            <para>Type: <c>NSTCITEMSTATE</c></para>
            <para>The state of a tree item. See NSTCITEMSTATE.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NSTCCUSTOMDRAW.pszText">
            <summary>
            <para>Type: <c>LPCWSTR</c></para>
            <para>A pointer to a null-terminated Unicode string that contains the item text, if the structure specifies item attributes.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NSTCCUSTOMDRAW.iImage">
            <summary>
            <para>Type: <c>int</c></para>
            <para>The index in the tree-view control's image list.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NSTCCUSTOMDRAW.himl">
            <summary>
            <para>Type: <c>HIMAGELIST</c></para>
            <para>A handle to an image list.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NSTCCUSTOMDRAW.iLevel">
            <summary>
            <para>Type: <c>int</c></para>
            <para>The zero-based level of the item being drawn.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NSTCCUSTOMDRAW.iIndent">
            <summary>
            <para>Type: <c>int</c></para>
            <para>A tree-level indent.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.NameSpaceTreeControl">
            <summary>CLSID_NameSpaceTreeControl</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.NAMESPACEWALKFLAG">
            <summary>Flags that control the walk operation.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NAMESPACEWALKFLAG.NSWF_DEFAULT">
            <summary>Use this value when you do not want to set any of the other flags.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NAMESPACEWALKFLAG.NSWF_NONE_IMPLIES_ALL">
            <summary>
            Collect all of the items in the folder if both of these criteria are met:
            <list type="bullet">
            <item>
            <term>punkToWalk is a folder (IShellFolder or IShellView).</term>
            </item>
            <item>
            <term>None of the items in the folder are currently selected.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NAMESPACEWALKFLAG.NSWF_ONE_IMPLIES_ALL">
            <summary>
            Collect all of the items in the folder if both of these criteria are met:
            <list type="bullet">
            <item>
            <term>punkToWalk is a folder (IShellFolder or IShellView).</term>
            </item>
            <item>
            <term>One of the items in the folder is currently selected.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NAMESPACEWALKFLAG.NSWF_DONT_TRAVERSE_LINKS">
            <summary>Do not follow links (.lnk, .url, and folder shortcuts) in the recursion; instead, return them as regular items.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NAMESPACEWALKFLAG.NSWF_DONT_ACCUMULATE_RESULT">
            <summary>Do not collect the PIDLs of the nodes during the namespace walk.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NAMESPACEWALKFLAG.NSWF_TRAVERSE_STREAM_JUNCTIONS">
            <summary>Include the contents of stream junction points in the walk. For instance, walk into the contents of a .cab file.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NAMESPACEWALKFLAG.NSWF_FILESYSTEM_ONLY">
            <summary>Walk only file system nodes.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NAMESPACEWALKFLAG.NSWF_SHOW_PROGRESS">
            <summary>Display a dialog box with a progress bar while walking the namespace.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NAMESPACEWALKFLAG.NSWF_FLAG_VIEWORDER">
            <summary>Return items in view order. This applies only when punkToWalk is an IShellView object.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NAMESPACEWALKFLAG.NSWF_IGNORE_AUTOPLAY_HIDA">
            <summary>Do not use the AutoPlay HIDA in the data object. This applies only when punkToWalk is an IDataObject object.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NAMESPACEWALKFLAG.NSWF_ASYNC">
            <summary>Perform the walk asynchronously by running it on a background thread.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NAMESPACEWALKFLAG.NSWF_DONT_RESOLVE_LINKS">
            <summary>
            Traverse links to return their targets (for .lnk, .url and folder shortcuts) but do not verify that those targets exist
            (Resolve). This is an optimization and does not affect the results except in the case where a missing or moved target could
            be found and returned.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NAMESPACEWALKFLAG.NSWF_ACCUMULATE_FOLDERS">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NAMESPACEWALKFLAG.NSWF_DONT_SORT">
            <summary>Do not maintain the sort order of the items being walked.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NAMESPACEWALKFLAG.NSWF_USE_TRANSFER_MEDIUM">
            <summary>Use SHCONTF_STORAGE in enumerations</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NAMESPACEWALKFLAG.NSWF_DONT_TRAVERSE_STREAM_JUNCTIONS">
            <summary>
            For items with both SFGAO_FOLDER and SFGAO_STREAM passed to the walk (as opposed to those discovered by walking), for example
            .zip, .search-ms and .library-ms files do not traverse them, instead treat them as items. this will result in FoundItem()
            callbacks instead of EnterFolder()/LeaveFolder()
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NAMESPACEWALKFLAG.NSWF_ANY_IMPLIES_ALL">
            <summary><c>Introduced in Windows 8</c>.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.INamespaceWalk">
            <summary>
            Exposes methods that walk a namespace from a given root node. The depth of the walk is specified and an optional array is
            returned containing the IDs of all nodes walked.
            </summary>
            <remarks>
            <para>
            Use this interface to display or perform an operation on the contents of the namespace. <c>INamespaceWalk</c> allows retrieval of
            all reachable nodes of your namespace as pointers to item identifier lists (PIDLs), which can in turn be used to retrieve the
            IShellFolder object for each.
            </para>
            <para>
            The class identifier (CLSID) for the default implementation of <c>INamespaceWalk</c> is CLSID_NamespaceWalker. You can obtain an
            <c>INamespaceWalk</c> object by creating a single uninitialized object of the class associated with CLSID_NamespaceWalker using
            CoCreateInstance. This interface's IID is IID_INamespaceWalk.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INamespaceWalk.Walk(System.Object,Vanara.PInvoke.Shell32.NAMESPACEWALKFLAG,System.Int32,Vanara.PInvoke.Shell32.INamespaceWalkCB)">
            <summary>Initiates a recursive walk of the namespace from the specified root to the given depth.</summary>
            <param name="punkToWalk">
            <para>Type: <c>IUnknown*</c></para>
            <para>The root node from which to begin the walk. This can be represented by one of the following objects.</para>
            <list type="bullet">
            <item>
            <term>IShellFolder</term>
            </item>
            <item>
            <term>IDataObject</term>
            </item>
            <item>
            <term>IParentAndItem</term>
            </item>
            <item>
            <term>IEnumFullIDList</term>
            </item>
            <item>
            <term>IShellItem</term>
            </item>
            <item>
            <term>IShellItemArray</term>
            </item>
            <item>
            <term>IShellView</term>
            </item>
            </list>
            <para>Specifying the desktop's</para>
            <para>IShellFolder</para>
            <para>as the root allows the possibility of walking the entire Windows namespace if</para>
            <para>cDepth</para>
            <para>is sufficiently large.</para>
            </param>
            <param name="dwFlags">
            <para>Type: <c>DWORD</c></para>
            <para>One or more of the following flags that control the walk operation.</para>
            <para>NSWF_DEFAULT (0x00000000)</para>
            <para>Use this value when you do not want to set any of the other flags.</para>
            <para>NSWF_NONE_IMPLIES_ALL (0x00000001)</para>
            <para>Collect all of the items in the folder if both of these criteria are met:</para>
            <list type="bullet">
            <item>
            <term>punkToWalk is a folder (IShellFolder or IShellView).</term>
            </item>
            <item>
            <term>None of the items in the folder are currently selected.</term>
            </item>
            </list>
            <para>NSWF_ONE_IMPLIES_ALL (0x00000002)</para>
            <para>Collect all of the items in the folder if both of these criteria are met:</para>
            <list type="bullet">
            <item>
            <term>punkToWalk is a folder (IShellFolder or IShellView).</term>
            </item>
            <item>
            <term>One of the items in the folder is currently selected.</term>
            </item>
            </list>
            <para>NSWF_DONT_TRAVERSE_LINKS (0x00000004)</para>
            <para>Do not follow links (.lnk, .url, and folder shortcuts) in the recursion; instead, return them as regular items.</para>
            <para>NSWF_DONT_ACCUMULATE_RESULT (0x00000008)</para>
            <para>Do not collect the PIDLs of the nodes during the namespace walk.</para>
            <para>NSWF_TRAVERSE_STREAM_JUNCTIONS (0x00000010)</para>
            <para>Include the contents of stream junction points in the walk. For instance, walk into the contents of a .cab file.</para>
            <para>NSWF_FILESYSTEM_ONLY (0x00000020)</para>
            <para>Walk only file system nodes.</para>
            <para>NSWF_SHOW_PROGRESS (0x00000040)</para>
            <para>Display a dialog box with a progress bar while walking the namespace.</para>
            <para>NSWF_FLAG_VIEWORDER (0x00000080)</para>
            <para>Return items in view order. This applies only when punkToWalk is an IShellView object.</para>
            <para>NSWF_IGNORE_AUTOPLAY_HIDA (0x00000100)</para>
            <para>Do not use the AutoPlay HIDA in the data object. This applies only when punkToWalk is an IDataObject object.</para>
            <para>NSWF_ASYNC (0x00000200)</para>
            <para>Perform the walk asynchronously by running it on a background thread.</para>
            <para>NSWF_DONT_RESOLVE_LINKS (0x00000400)</para>
            <para>
            Traverse links to return their targets (for .lnk, .url and folder shortcuts) but do not verify that those targets exist
            (Resolve). This is an optimization and does not affect the results except in the case where a missing or moved target could
            be found and returned.
            </para>
            <para>NSWF_ACCUMULATE_FOLDERS (0x00000800)</para>
            <para>NSWF_DONT_SORT (0x00001000)</para>
            <para>Do not maintain the sort order of the items being walked.</para>
            <para>NSWF_USE_TRANSFER_MEDIUM (0x00002000)</para>
            <para>NSWF_DONT_TRAVERSE_STREAM_JUNCTIONS (0x00004000)</para>
            <para>NSWF_ANY_IMPLIES_ALL (0x00008000)</para>
            <para><c>Introduced in Windows 8</c>.</para>
            </param>
            <param name="cDepth">
            <para>Type: <c>int</c></para>
            <para>
            The maximum depth to descend through the namespace hierarchy. This depth is zero-based. Set to 0 to walk only the folder
            identified by punkToWalk but none of its subfolders.
            </para>
            </param>
            <param name="pnswcb">
            <para>Type: <c>INamespaceWalkCB*</c></para>
            <para>INamespaceWalkCB callback function used by INamespaceWalk. This parameter can be <c>NULL</c>.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INamespaceWalk.GetIDArrayResult(System.UInt32@,Vanara.InteropServices.SafeCoTaskMemHandle@)">
            <summary>Gets a list of objects found during a namespace walk initiated by INamespaceWalk::Walk.</summary>
            <param name="pcItems">
            <para>Type: <c>UINT*</c></para>
            <para>The number of items stored in pppidl</para>
            </param>
            <param name="prgpidl">
            <para>Type: <c>LPITEMIDLIST**</c></para>
            <para>The address of a pointer to an array of PIDLs representing the items found during the namespace walk.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            <para>
            To use <c>INamespaceWalk::GetIDArrayResult</c>, <c>NSWF_DONT_ACCUMULATE_RESULT</c> cannot be specified in the call to INamespaceWalk::Walk.
            </para>
            <para>
            It is the responsibility of the calling application to free this array. Call CoTaskMemFree for each PIDL as well as once for
            the array itself.
            </para>
            <para>Examples</para>
            <para>
            The following example creates the INamespaceWalk instance, begins the walk at the desktop, walks only the desktop folder and
            its immediate children, retrieves the PIDLs retrived in the walk, and frees their array.
            </para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.INamespaceWalkCB">
            <summary>
            A callback interface exposing methods used with INamespaceWalk. After performing a walk with <c>INamespaceWalk</c>, an
            IShellFolder object representing the walked nodes is passed to the <c>INamespaceWalkCB</c> methods. What those methods do with
            the information depends on the object that is implementing them.
            </summary>
            <remarks>The IID for this interface is IID_INamespaceWalkCB.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INamespaceWalkCB.FoundItem(Vanara.PInvoke.Shell32.IShellFolder,System.IntPtr)">
            <summary>
            Called when an object is found in the namespace during a namespace walk. Use this method as the main action function for the
            class implementing it. Perform your actions as needed inside this method.
            </summary>
            <param name="psf">
            <para>Type: <c>IShellFolder*</c></para>
            <para>A pointer to an IShellFolder object representing the folder containing the item.</para>
            </param>
            <param name="pidl">
            <para>Type: <c>PCUITEMID_CHILD</c></para>
            <para>The item's PIDL, relative to psf.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INamespaceWalkCB.EnterFolder(Vanara.PInvoke.Shell32.IShellFolder,System.IntPtr)">
            <summary>
            Called when a folder is about to be entered during a namespace walk. Use this method for any initialization of the retrieved item.
            </summary>
            <param name="psf">
            <para>Type: <c>IShellFolder*</c></para>
            <para>A pointer to an IShellFolder object representing the parent of the folder designated by pidl.</para>
            </param>
            <param name="pidl">
            <para>Type: <c>PCUITEMID_CHILD</c></para>
            <para>The PIDL, relative to psf, of the folder being entered.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INamespaceWalkCB.LeaveFolder(Vanara.PInvoke.Shell32.IShellFolder,System.IntPtr)">
            <summary>
            Called after a namespace walk through a folder. Use this method to perform any necessary cleanup following the actions
            performed by INamespaceWalkCB::EnterFolder or INamespaceWalkCB::FoundItem.
            </summary>
            <param name="psf">
            <para>Type: <c>IShellFolder*</c></para>
            <para>A pointer to an IShellFolder object representing the parent of the folder designated by pidl.</para>
            </param>
            <param name="pidl">
            <para>Type: <c>PCUITEMID_CHILD</c></para>
            <para>A PIDL, relative to psf, of the folder being exited.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INamespaceWalkCB.InitializeProgressDialog(System.String@,System.String@)">
            <summary>
            Initializes the window title and cancel button text of the progress dialog box displayed during the namespace walk.
            </summary>
            <param name="ppszTitle">
            <para>Type: <c>LPWSTR*</c></para>
            <para>
            When this method returns, contains a pointer to a null-terminated string that contains the title to be used for the dialog box.
            </para>
            </param>
            <param name="ppszCancel">
            <para>Type: <c>LPWSTR*</c></para>
            <para>
            When this method returns, contains a pointer to a null-terminated string that contains the text displayed on the button that
            cancels the namespace walk.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.INamespaceWalkCB2">
            <summary>
            Extends INamespaceWalkCB with a method that is required in order to complete a namespace walk. This method removes data collected
            during the walk.
            </summary>
            <seealso cref="T:Vanara.PInvoke.Shell32.INamespaceWalkCB"/>
            <remarks>This interface also provides the methods of the INamespaceWalkCB interface, from which it inherits.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INamespaceWalkCB2.FoundItem(Vanara.PInvoke.Shell32.IShellFolder,System.IntPtr)">
            <summary>
            Called when an object is found in the namespace during a namespace walk. Use this method as the main action function for the
            class implementing it. Perform your actions as needed inside this method.
            </summary>
            <param name="psf">
            <para>Type: <c>IShellFolder*</c></para>
            <para>A pointer to an IShellFolder object representing the folder containing the item.</para>
            </param>
            <param name="pidl">
            <para>Type: <c>PCUITEMID_CHILD</c></para>
            <para>The item's PIDL, relative to psf.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INamespaceWalkCB2.EnterFolder(Vanara.PInvoke.Shell32.IShellFolder,System.IntPtr)">
            <summary>
            Called when a folder is about to be entered during a namespace walk. Use this method for any initialization of the retrieved item.
            </summary>
            <param name="psf">
            <para>Type: <c>IShellFolder*</c></para>
            <para>A pointer to an IShellFolder object representing the parent of the folder designated by pidl.</para>
            </param>
            <param name="pidl">
            <para>Type: <c>PCUITEMID_CHILD</c></para>
            <para>The PIDL, relative to psf, of the folder being entered.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INamespaceWalkCB2.LeaveFolder(Vanara.PInvoke.Shell32.IShellFolder,System.IntPtr)">
            <summary>
            Called after a namespace walk through a folder. Use this method to perform any necessary cleanup following the actions
            performed by INamespaceWalkCB::EnterFolder or INamespaceWalkCB::FoundItem.
            </summary>
            <param name="psf">
            <para>Type: <c>IShellFolder*</c></para>
            <para>A pointer to an IShellFolder object representing the parent of the folder designated by pidl.</para>
            </param>
            <param name="pidl">
            <para>Type: <c>PCUITEMID_CHILD</c></para>
            <para>A PIDL, relative to psf, of the folder being exited.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INamespaceWalkCB2.InitializeProgressDialog(System.String@,System.String@)">
            <summary>
            Initializes the window title and cancel button text of the progress dialog box displayed during the namespace walk.
            </summary>
            <param name="ppszTitle">
            <para>Type: <c>LPWSTR*</c></para>
            <para>
            When this method returns, contains a pointer to a null-terminated string that contains the title to be used for the dialog box.
            </para>
            </param>
            <param name="ppszCancel">
            <para>Type: <c>LPWSTR*</c></para>
            <para>
            When this method returns, contains a pointer to a null-terminated string that contains the text displayed on the button that
            cancels the namespace walk.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INamespaceWalkCB2.WalkComplete(Vanara.PInvoke.HRESULT)">
            <summary>Removes data collected during a namespace walk.</summary>
            <param name="hr">
            <para>Type: <c>HRESULT</c></para>
            <para>The results of Walk.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>Always returns S_OK.</para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.NamespaceWalker">
            <summary>CLSID_NamespaceWalker</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.NMCII_FLAGS">
            <summary>Flags for <see cref="M:Vanara.PInvoke.Shell32.INewMenuClient.IncludeItems(Vanara.PInvoke.Shell32.NMCII_FLAGS@)"/></summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NMCII_FLAGS.NMCII_NONE">
            <summary>None.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NMCII_FLAGS.NMCII_ITEMS">
            <summary>Non-folder items.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NMCII_FLAGS.NMCII_FOLDERS">
            <summary>Folder items.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.NMCSAEI_FLAGS">
            <summary>Flags for <see cref="M:Vanara.PInvoke.Shell32.INewMenuClient.SelectAndEditItem(Vanara.PInvoke.Shell32.PIDL,Vanara.PInvoke.Shell32.NMCSAEI_FLAGS)"/></summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NMCSAEI_FLAGS.NMCSAEI_SELECT">
            <summary>Select the item.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NMCSAEI_FLAGS.NMCSAEI_EDIT">
            <summary>Edit the item.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.INewMenuClient">
            <summary>Exposes methods that allow manipulation of items in a Windows 7 menu.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INewMenuClient.IncludeItems(Vanara.PInvoke.Shell32.NMCII_FLAGS@)">
            <summary>Allows the view to filter the items shown in the menu.</summary>
            <param name="pflags">
            <para>Type: <c>NMCII_FLAGS*</c></para>
            <para>Pointer to a value that, when this method returns successfully, contains one of the following values:</para>
            <para>NMCII_NONE (0x0000)</para>
            <para>0x0000.</para>
            <para>NMCII_ITEMS (0x0001)</para>
            <para>0x0001. Non-folder items.</para>
            <para>NMCII_FOLDERS (0x0002)</para>
            <para>0x0002. Folder items.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INewMenuClient.SelectAndEditItem(Vanara.PInvoke.Shell32.PIDL,Vanara.PInvoke.Shell32.NMCSAEI_FLAGS)">
            <summary>Selects or edits the specified item in the menu.</summary>
            <param name="pidlItem">Type: <c>PCIDLIST_ABSOLUTE</c></param>
            <param name="flags">
            <para>Type: <c>NMCSAEI_FLAGS</c></para>
            <para>NMCSAEI_SELECT (0x0000)</para>
            <para>0x0000. Select the item.</para>
            <para>NMCSAEI_EDIT (0x0001)</para>
            <para>0x0001. Edit the item.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.NWMF">
            <summary>
            Flags used by INewWindowManager::EvaluateNewWindow. These values are factors in the decision of whether to display a pop-up window.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NWMF.NWMF_UNLOADING">
            <summary>
            The page is unloading. This flag is set in response to the onbeforeunload and onunload events. Some pages load pop-up
            windows when you leave them, not when you enter. This flag is used to identify those situations.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NWMF.NWMF_USERINITED">
            <summary>
            The call to INewWindowManager::EvaluateNewWindow is the result of a user-initiated action (a mouse click or key press). Use
            this flag in conjunction with the NWMF_FIRST_USERINITED flag to determine whether the call is a direct or indirect result of
            the user-initiated action.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NWMF.NWMF_FIRST">
            <summary>
            When NWMF_USERINITED is present, this flag indicates that the call to INewWindowManager::EvaluateNewWindow is the first
            query that results from this user-initiated action. Always use this flag in conjunction with NWMF_USERINITED.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NWMF.NWMF_OVERRIDEKEY">
            <summary>
            The override key (ALT) was pressed. The override key is used to bypass the pop-up manager—allowing all pop-up windows to
            display—and must be held down at the time that INewWindowManager::EvaluateNewWindow is called.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NWMF.NWMF_SHOWHELP">
            <summary>
            The new window attempting to load is the result of a call to the showHelp method. Help is sometimes displayed in a separate
            window, and this flag is valuable in those cases.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NWMF.NWMF_HTMLDIALOG">
            <summary>The new window is a dialog box that displays HTML content.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NWMF.NWMF_FROMDIALOGCHILD">
            <summary>
            The EvaluateNewWindow method is being called from an HTML dialog. The new window should not show the UI in the parent window.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NWMF.NWMF_USERREQUESTED">
            <summary>
            The new windows was definitely requested by the user, either by selecting Open in New Window from a context menu or pressing
            Shift and clicking a link.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NWMF.NWMF_USERALLOWED">
            <summary>The call to the EvaluateNewWindow method is the result of the user requesting a replay that resulted in a refresh.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NWMF.NWMF_FORCEWINDOW">
            <summary>The new window should be forced to open in a new window rather than a tab.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NWMF.NWMF_FORCETAB">
            <summary>The new window should be forced to open in a new tab.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NWMF.NWMF_SUGGESTWINDOW">
            <summary>
            The new window should open in a new tab unless NWMF_FORCEtab is also present, indicating that user wants the window to open
            as a window.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NWMF.NWMF_SUGGESTTAB">
            <summary>
            The new window should open in a new tab unless NWMF_FORCEWINDOW is also present, indicating that user wants the window to
            open as a window.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.NWMF.NWMF_INACTIVETAB">
            <summary>The EvaluateNewWindow method is being called from an inactive tab.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.INewWindowManager">
            <summary>
            Exposes a method that determines whether a window that is launched by another window should be displayed or blocked, allowing
            control of pop-up windows.
            </summary>
            <remarks>
            <para>When to Implement</para>
            <para>
            Implement <c>INewWindowManager</c> when your application hosts a WebBrowser control and you want to include pop-up management functionality.
            </para>
            <para>
            When you implement <c>INewWindowManager</c>, you can override some or all of the Windows Internet Explorer pop-up blocking
            logic. To use the default Internet Explorer pop-up blocking logic, implement INewWindowManager::EvaluateNewWindow to return
            E_FAIL. This instructs the WebBrowser control to use the default Internet Explorer implementation. Alternately, the application
            hosting the WebBrowser control can call CoInternetSetFeatureEnabled with the <c>FEATURE_WEBOC_POPUPMANAGEMENT</c> flag for the
            same result.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.INewWindowManager.EvaluateNewWindow(System.String,System.String,System.String,System.String,System.Boolean,Vanara.PInvoke.Shell32.NWMF,System.UInt32)">
            <summary>
            Accepts data about a new window that is attempting to display and determines whether that window should be allowed to open
            based on the user's preferences.
            </summary>
            <param name="pszUrl">
            <para>Type: <c>LPCWSTR</c></para>
            <para>A pointer to a buffer that contains the URL of the content that will be displayed in the new window.</para>
            </param>
            <param name="pszName">
            <para>Type: <c>LPCWSTR</c></para>
            <para>A pointer to a buffer that contains the name of the new window. This parameter can be <c>NULL</c>.</para>
            </param>
            <param name="pszUrlContext">
            <para>Type: <c>LPCWSTR</c></para>
            <para>A pointer to a buffer that contains the URL that has issued the command to open the new window.</para>
            </param>
            <param name="pszFeatures">
            <para>Type: <c>LPCWSTR</c></para>
            <para>A pointer to a buffer that contains the feature string for the new window. This value can be <c>NULL</c>.</para>
            </param>
            <param name="fReplace">
            <para>Type: <c>BOOL</c></para>
            <para>
            A boolean value used when the new content specified in pszUrl is loaded into the existing window instead of creating a new
            one. <c>TRUE</c> if the new document should replace the current document in the history list; <c>FALSE</c> if the new
            document should be given a new entry.
            </para>
            </param>
            <param name="dwFlags">
            <para>Type: <c>DWORD</c></para>
            <para>
            A flag or flags from the NWMF enumeration that provide situational information about the call to open the new window. This
            value can be 0 if no flags are needed.
            </para>
            </param>
            <param name="dwUserActionTime">
            <para>Type: <c>DWORD</c></para>
            <para>
            The tick count when the last user action occurred. To find out how long ago the action occurred, call GetTickCount and
            compare the result with the value in this parameter.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>Returns standard error codes, including the following:</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>S_OK</term>
            <term>Allow display of the window.</term>
            </item>
            <item>
            <term>S_FALSE</term>
            <term>Block display of the window.</term>
            </item>
            <item>
            <term>E_FAIL</term>
            <term>
            When you implement INewWindowManager for a hosted WebBrowser control, this value instructs the WebBrowser control to use the
            default implementation.
            </term>
            </item>
            </list>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IObjectProvider">
            <summary>
            Exposes a method to discover objects that are named with a <c>GUID</c> from another object. Unlike QueryService this interface
            will not delegate its functionality on to other objects.
            </summary>
            <remarks>
            Similar to IServiceProvider, except that this method does not imply that unhandled or unknown requests should be forwarded.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IObjectProvider.QueryObject(System.Guid@,System.Guid@,System.Object@)">
            <summary>Queries for a specified object.</summary>
            <param name="guidObject">
            <para>Type: <c>REFGUID</c></para>
            <para>A reference to the <c>GUID</c> used to identify the object.</para>
            </param>
            <param name="riid">
            <para>Type: <c>REFIID</c></para>
            <para>Specifies the desired interface ID.</para>
            </param>
            <param name="ppvOut">
            <para>Type: <c>void**</c></para>
            <para>On success, contains the address of a pointer to the object specified by riid.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            Object implementers that want to enable the discovery of other objects that they can produce or that they hold should
            implement <c>IObjectProvider::QueryObject</c> and publish the <c>GUID</c> values that name those objects for clients of that
            object. Note that objects should not pass on the request for an object to other objects like QueryService.
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IObjectWithAppUserModelId">
            <summary>
            <para>
            Exposes methods that allow implementers of a custom IAssocHandler object to provide access to its explicit Application User
            Model ID (AppUserModelID). This information is used to determine whether a particular file type can be added to an application's
            Jump List.
            </para>
            </summary>
            <remarks>
            <para>
            Only file types for which an application is a registered handler appear in that application's Jump List. When an application
            uses an explicit AppUserModelID to identify itself and the windows and processes that belong to it, that AppUserModelID must
            also be set in a handler's implementation so that the handler is recognized as being associated with that application. When the
            application accesses a file such that SHAddToRecentDocs is called as a result, an attempt is made to add the file to the
            <c>Recent</c> or <c>Frequent</c> category, or possibly a custom category, in that application's Jump List. If the application is
            a registered handler for that file type, identified as such by the handler's AppUserModelID matching the application's
            AppUserModelID, that file is added to the Jump List. If not, it is filtered and does not appear.
            </para>
            <para>When to Implement</para>
            <para>
            An implementation of this interface is provided in Windows. Applications that create custom Shell folders that expose an
            association handler enumeration needed by the system to determine the files allowed in the application's Jump List should
            implement their own versions.
            </para>
            <para>When to Use</para>
            <para>
            This object is needed only if your application is using explicit AppUserModelIDs. Without an explicit AppUserModelID to expose,
            there is no need for this object.
            </para>
            <para>
            <c>IObjectWithAppUserModelID</c> is always used as part of a larger object that uses explicit AppUserModelIDs and wants to
            expose that information to the system.
            </para>
            <para>
            The system calls the IObjectWithAppUserModelID::GetAppID method implemented on a handler to determine whether the application is
            a registered handler for a file type.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IObjectWithAppUserModelId.SetAppID(System.String)">
            <summary>
            Specifies a unique application-defined Application User Model ID (AppUserModelID) that identifies the object as a handler
            for a specific file type. This method is used by applications that require dynamic AppUserModelIDs.
            </summary>
            <param name="pszAppID">
            <para>Type: <c>LPCWSTR</c></para>
            <para>A pointer to the AppUserModelID string to assign to an application.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>
            Custom implementations that do not require dynamic AppUserModelIDs can return E_NOTIMPL. Custom implementations that require
            dynamic AppUserModelIDs should return S_OK if successful, or an error value otherwise.
            </para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IObjectWithAppUserModelId.GetAppID(System.String@)">
            <summary>
            <para>Retrieves a file type handler's explicit Application User Model ID (AppUserModelID), if one has been declared.</para>
            </summary>
            <param name="ppszAppID">
            <para>Type: <c>LPWSTR*</c></para>
            <para>When this method returns, contains the address of the AppUserModelID string assigned to the object.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            <para>
            This method can only retrieve an AppUserModelID explicitly set for the handler. If the handler did not register an explicit
            AppUserModelID and is relying on a system-assigned AppUserModelID, this method will not retrieve the AppUserModelID. For
            more information, see Application User Model IDs (AppUserModelIDs).
            </para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IObjectWithBackReferences">
            <summary>Provides a method for interacting with back references held by an object.</summary>
            <remarks>
            <para>When to Use</para>
            <para>
            When an object contains forward references to child objects that have back references to the parent object, circular references
            can occur. To break this circle, the parent object needs to keep track of back references from child objects.
            </para>
            <para>When to Implement</para>
            <para>
            This interface should be implemented by Shell data source objects (objects that implement IShellFolder) that hold references to
            other objects in a way that might result in reference cycles. For example, an object that maintains references to other data
            source objects that are cached as the result of binding operations should implement this interface.
            </para>
            <para>
            This interface was available in Windows Vista with Service Pack 1 (SP1), but it was not declared in a public header until
            Windows 7. For use in Windows Vista with SP1, the following Interface Definition Language (IDL) fragment describes this
            interface, including its IID.
            </para>
            <para>The following C++ fragment can be used to enable access to this interface.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IObjectWithBackReferences.RemoveBackReferences">
            <summary>Removes all back references held by an object.</summary>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            This method is used for all tasks associated with freeing/releasing back references held by an object, and may prepare an
            object for reuse.
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IObjectWithCancelEvent">
            <summary>
            <para>Not supported.</para>
            <para>Supplies a caller with an event that will be signaled by the called object to denote cancellation of a task.</para>
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IObjectWithCancelEvent.GetCancelEvent(Vanara.PInvoke.HANDLE@)">
            <summary>Retrieves an event that will be sent when an operation is canceled.</summary>
            <param name="phEvent">
            <para>Type: <c>HANDLE*</c></para>
            <para>
            Pointer to a handle that, when this method successfully returns, is the handle to the cancel event. The caller is
            responsible for closing this handle when it is no longer needed.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            Call this function to retrieve an event that will be signaled when the called object cancels the operation it is performing.
            The caller is responsible for closing the returned handle.
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IObjectWithProgId">
            <summary>Exposes methods that provide access to the ProgID associated with an object.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IObjectWithProgId.SetProgID(System.String)">
            <summary>
            <para>Sets the ProgID of an object.</para>
            </summary>
            <param name="pszProgID">
            <para>Type: <c>LPCWSTR</c></para>
            <para>A pointer to a string that contains the new ProgID.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IObjectWithProgId.GetProgID(System.String@)">
            <summary>
            <para>Retrieves the ProgID associated with an object.</para>
            </summary>
            <param name="ppszProgID">
            <para>Type: <c>LPWSTR*</c></para>
            <para>A pointer to a string that, when this method returns successfully, contains the ProgID.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IObjectWithSelection">
            <summary>Exposes methods that get or set selected items represented by a Shell item array.</summary>
            <remarks>
            <para>When to Implement</para>
            <para>
            This interface is implemented by verbs that implement IExecuteCommand. This allows objects to invoke the verb on the selection
            through IExecuteCommand::Execute.
            </para>
            <para>When to Use</para>
            <para>
            <c>IObjectWithSelection</c> is used by Windows Explorer to invoke a verb on the selected items. Do not call this interface directly.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IObjectWithSelection.SetSelection(Vanara.PInvoke.Shell32.IShellItemArray)">
            <summary>Provides the Shell item array that specifies the items included in the selection.</summary>
            <param name="psia">
            <para>Type: <c>IShellItemArray*</c></para>
            <para>A pointer to an IShellItemArray that represents the selected items.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IObjectWithSelection.GetSelection(System.Guid@,System.Object@)">
            <summary>Gets the Shell item array that contains the selected items.</summary>
            <param name="riid">
            <para>Type: <c>REFIID</c></para>
            <para>A reference to the IID of the interface to retrieve through ppv, typically IID_IShellItemArray.</para>
            </param>
            <param name="ppv">
            <para>Type: <c>void**</c></para>
            <para>When this method returns successfully, contains the interface pointer requested in riid. This is typically an IShellItemArray.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            We recommend that you use the <c>IID_PPV_ARGS</c> macro, defined in Objbase.h, to package the riid and ppv parameters. This
            macro provides the correct IID based on the interface pointed to by the value in ppv, which eliminates the possibility of a
            coding error in riid that could lead to unexpected results.
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.OPPROGDLGF">
            <summary>Flags used in IOperationsProgressDialog::StartProgressDialog</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.OPPROGDLGF.OPPROGDLG_DEFAULT">
            <summary>Default operation.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.OPPROGDLGF.OPPROGDLG_ENABLEPAUSE">
            <summary>Add a pause button (operation can be paused)</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.OPPROGDLGF.OPPROGDLG_ALLOWUNDO">
            <summary>The operation can be undone in the dialog. (The Stop button becomes Undo)</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.OPPROGDLGF.OPPROGDLG_DONTDISPLAYSOURCEPATH">
            <summary>Don't display the path of source file in progress dialog</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.OPPROGDLGF.OPPROGDLG_DONTDISPLAYDESTPATH">
            <summary>Don't display the path of destination file in progress dialog</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.OPPROGDLGF.OPPROGDLG_NOMULTIDAYESTIMATES">
            <summary>deprecated - progress dialog no longer displays &gt; 1 day estimates</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.OPPROGDLGF.OPPROGDLG_DONTDISPLAYLOCATIONS">
            <summary>Don't display the location line in the progress dialog</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.PDMODE">
            <summary>Flags used in IOperationsProgressDialog::SetMode</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.PDMODE.PDM_DEFAULT">
            <summary>0x00000000. Use the default progress dialog operations mode.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.PDMODE.PDM_RUN">
            <summary>0x00000001. The operation is running.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.PDMODE.PDM_PREFLIGHT">
            <summary>0x00000002. The operation is gathering data before it begins, such as calculating the predicted operation time.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.PDMODE.PDM_UNDOING">
            <summary>0x00000004. The operation is rolling back due to an Undo command from the user.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.PDMODE.PDM_ERRORSBLOCKING">
            <summary>0x00000008. Error dialogs are blocking progress from continuing.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.PDMODE.PDM_INDETERMINATE">
            <summary>
            0x00000010. The length of the operation is indeterminate. Do not show a timer and display the progress bar in marquee mode.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.PDOPSTATUS">
            <summary>Provides operation status flags for IOperationsProgressDialog::GetOperationStatus</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.PDOPSTATUS.PDOPS_RUNNING">
            <summary>Operation is running, no user intervention.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.PDOPSTATUS.PDOPS_PAUSED">
            <summary>Operation has been paused by the user.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.PDOPSTATUS.PDOPS_CANCELLED">
            <summary>Operation has been canceled by the user - now go undo.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.PDOPSTATUS.PDOPS_STOPPED">
            <summary>Operation has been stopped by the user - terminate completely.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.PDOPSTATUS.PDOPS_ERRORS">
            <summary>Operation has gone as far as it can go without throwing error dialogs.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.SPACTION">
            <summary>
            <para>Describes an action being performed that requires progress to be shown to the user using an IActionProgress interface.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SPACTION.SPACTION_NONE">
            <summary>No action is being performed.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SPACTION.SPACTION_MOVING">
            <summary>Files are being moved.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SPACTION.SPACTION_COPYING">
            <summary>Files are being copied.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SPACTION.SPACTION_RECYCLING">
            <summary>Files are being deleted.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SPACTION.SPACTION_APPLYINGATTRIBS">
            <summary>A set of attributes are being applied to files.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SPACTION.SPACTION_DOWNLOADING">
            <summary>A file is being downloaded from a remote source.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SPACTION.SPACTION_SEARCHING_INTERNET">
            <summary>An Internet search is being performed.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SPACTION.SPACTION_CALCULATING">
            <summary>A calculation is being performed.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SPACTION.SPACTION_UPLOADING">
            <summary>A file is being uploaded to a remote source.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SPACTION.SPACTION_SEARCHING_FILES">
            <summary>A local search is being performed.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SPACTION.SPACTION_DELETING">
            <summary>Windows Vista and later. A deletion is being performed.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SPACTION.SPACTION_RENAMING">
            <summary>Windows Vista and later. A renaming action is being performed.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SPACTION.SPACTION_FORMATTING">
            <summary>Windows Vista and later. A formatting action is being performed.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SPACTION.SPACTION_COPY_MOVING">
            <summary>Windows 7 and later. A copy or move action is being performed.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IIOCancelInformation">
            <summary>
            <para>Exposes methods for posting a cancel window message to the process thread from the Progress Dialog.</para>
            <para>
            This interface enables the progress dialog to post a thread message through PostThreadMessage to the worker thread to cancel its
            operations. The worker thread must periodically check the message queue through GetMessage, PeekMessage or MsgWaitForMultipleObjectsEx.
            </para>
            <para>
            The IIOCancelInformation::SetCancelInformation method tells the progress dialog which thread ID and what message to
            PostThreadMessage when the user clicks <c>Cancel</c>. A thread ID of "zero" disables the sending operation for the cancel message.
            </para>
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IIOCancelInformation.SetCancelInformation(System.UInt32,System.UInt32)">
            <summary>
            Sets information that is posted when a user selects <c>Cancel</c> from the progress UI. Allows the main object to tell the
            progress dialog thread about the process thread so that the progress dialog can send the process thread the message id when
            the user clicks <c>Cancel</c>.
            </summary>
            <param name="dwThreadID">
            <para>Type: <c>DWORD</c></para>
            <para>The ID of the process thread to be canceled.</para>
            </param>
            <param name="uMsgCancel">
            <para>Type: <c>UINT</c></para>
            <para>The cancel message to be posted to the thread.</para>
            </param>
            <remarks>
            When the user selects <c>Cancel</c> from the progress UI, the dwThreadID will cancel any pending or future input/output
            (I/O) requests. Also the uMsgCancel message, received from the progress dialog, will be posted to the thread to tell it to
            exit a wait state, if asynchronous I/O is pending.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IIOCancelInformation.GetCancelInformation(System.UInt32@,System.UInt32@)">
            <summary>
            Returns information that is posted when a user selects <c>Cancel</c> from the progress UI. The process thread uses this
            method to find out which message the progress dialog will send to the process thread when the user hits cancel. The process
            thread then listens for this message and does its own cleanup upon receipt.
            </summary>
            <param name="pdwThreadID">
            <para>Type: <c>DWORD*</c></para>
            <para>When this method returns, contains a pointer to the ID of the process thread.</para>
            </param>
            <param name="puMsgCancel">
            <para>Type: <c>UINT*</c></para>
            <para>
            When this method returns, contains a pointer to uMsgCancel that the process thread should post if the operation is canceled.
            </para>
            </param>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IOperationsProgressDialog">
            <summary>Exposes methods to get, set, and query a progress dialog.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IOperationsProgressDialog.StartProgressDialog(Vanara.PInvoke.HWND,Vanara.PInvoke.Shell32.OPPROGDLGF)">
            <summary>
            <para>Starts the specified progress dialog.</para>
            </summary>
            <param name="hwndOwner">
            <para>Type: <c>HWND</c></para>
            <para>A handle to the parent window.</para>
            </param>
            <param name="flags"/>
            <remarks>
            <para>
            The progress dialog should be created on a separate thread than the file operation on which the dialog is reporting. If the
            dialog is running in the same thread as the file operation, progress messages are, at best, only sent as resources allow.
            Progress messages on the same thread as the file operation might not be sent at all.
            </para>
            <para>
            Once <c>IOperationsProgressDialog::StartProgressDialog</c> is called, that instance of the <c>CLSID_ProgressDialog</c>
            object cannot be accessed by <see cref="T:Vanara.PInvoke.Shell32.IProgressDialog"/>, <see cref="T:Vanara.PInvoke.Shell32.IActionProgressDialog"/>, or
            <see cref="T:Vanara.PInvoke.Shell32.IActionProgress"/>. Although QueryInterface can be used to access these interfaces, most of their methods cannot be
            invoked. IOperationsProgressDialog is the interface used to display the new progress dialog for the Windows Vista and later
            operations engine.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IOperationsProgressDialog.StopProgressDialog">
            <summary>Stops current progress dialog.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IOperationsProgressDialog.SetOperation(Vanara.PInvoke.Shell32.SPACTION)">
            <summary>
            <para>Sets which progress dialog operation is occurring, and whether we are in pre-flight or undo mode.</para>
            </summary>
            <param name="action">
            <para>Type: <c>SPACTION</c></para>
            <para>Specifies operation. See SPACTION.</para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IOperationsProgressDialog.SetMode(Vanara.PInvoke.Shell32.PDMODE)">
            <summary>
            <para>Sets progress dialog operations mode.</para>
            </summary>
            <param name="mode">
            <para>Type: <c>PDMODE</c></para>
            <para>Specifies the operation mode. The following are valid values.</para>
            <para>PDM_DEFAULT</para>
            <para>0x00000000. Use the default progress dialog operations mode.</para>
            <para>PDM_RUN</para>
            <para>0x00000001. The operation is running.</para>
            <para>PDM_PREFLIGHT</para>
            <para>0x00000002. The operation is gathering data before it begins, such as calculating the predicted operation time.</para>
            <para>PDM_UNDOING</para>
            <para>0x00000004. The operation is rolling back due to an Undo command from the user.</para>
            <para>PDM_ERRORSBLOCKING</para>
            <para>0x00000008. Error dialogs are blocking progress from continuing.</para>
            <para>PDM_INDETERMINATE</para>
            <para>
            0x00000010. The length of the operation is indeterminate. Do not show a timer and display the progress bar in marquee mode.
            </para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IOperationsProgressDialog.UpdateProgress(System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            <para>Updates the current progress dialog, as specified.</para>
            </summary>
            <param name="ullPointsCurrent">
            <para>Type: <c>ULONGLONG</c></para>
            <para>Current points, used for showing progress in points.</para>
            </param>
            <param name="ullPointsTotal">
            <para>Type: <c>ULONGLONG</c></para>
            <para>Total points, used for showing progress in points.</para>
            </param>
            <param name="ullSizeCurrent">
            <para>Type: <c>ULONGLONG</c></para>
            <para>Current size in bytes, used for showing progress in bytes.</para>
            </param>
            <param name="ullSizeTotal">
            <para>Type: <c>ULONGLONG</c></para>
            <para>Total size in bytes, used for showing progress in bytes.</para>
            </param>
            <param name="ullItemsCurrent">
            <para>Type: <c>ULONGLONG</c></para>
            <para>Current items, used for showing progress in items.</para>
            </param>
            <param name="ullItemsTotal">
            <para>Type: <c>ULONGLONG</c></para>
            <para>Specifies total items, used for showing progress in items.</para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IOperationsProgressDialog.UpdateLocations(Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.Shell32.IShellItem)">
            <summary>
            <para>Called to specify the text elements stating the source and target in the current progress dialog.</para>
            </summary>
            <param name="psiSource">
            <para>Type: <c>IShellItem*</c></para>
            <para>A pointer to an IShellItem that represents the source Shell item.</para>
            </param>
            <param name="psiTarget">
            <para>Type: <c>IShellItem*</c></para>
            <para>A pointer to an IShellItem that represents the target Shell item.</para>
            </param>
            <param name="psiItem">
            <para>Type: <c>IShellItem*</c></para>
            <para>
            A pointer to an IShellItem that represents the item currently being operated on by the operation engine. This parameter is
            only used in Windows 7 and later. In earlier versions, this parameter should be <c>NULL</c>.
            </para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IOperationsProgressDialog.ResetTimer">
            <summary>
            <para>Resets progress dialog timer to 0.</para>
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IOperationsProgressDialog.PauseTimer">
            <summary>
            <para>Pauses progress dialog timer.</para>
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IOperationsProgressDialog.ResumeTimer">
            <summary>
            <para>Resumes progress dialog timer.</para>
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IOperationsProgressDialog.GetMilliseconds(System.UInt64@,System.UInt64@)">
            <summary>Gets elapsed and remaining time for progress dialog.</summary>
            <param name="pullElapsed">
            <para>Type: <c>ULONGLONG*</c></para>
            <para>A pointer to the elapsed time in milliseconds.</para>
            </param>
            <param name="pullRemaining">
            <para>Type: <c>ULONGLONG*</c></para>
            <para>A pointer to the remaining time in milliseconds.</para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IOperationsProgressDialog.GetOperationStatus">
            <summary>
            <para>Gets operation status for progress dialog.</para>
            </summary>
            <returns>
            <para>Type: <c>PDOPSTATUS*</c></para>
            <para>Contains pointer to the operation status. See PDOPSTATUS.</para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.PACKAGE_EXECUTION_STATE">
            <summary>Represents the state of a Windows app package.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.PACKAGE_EXECUTION_STATE.PES_UNKNOWN">
            <summary>The package is in an unknown state.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.PACKAGE_EXECUTION_STATE.PES_RUNNING">
            <summary>The package is running.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.PACKAGE_EXECUTION_STATE.PES_SUSPENDING">
            <summary>The package is being suspended.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.PACKAGE_EXECUTION_STATE.PES_SUSPENDED">
            <summary>The package is suspended.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.PACKAGE_EXECUTION_STATE.PES_TERMINATED">
            <summary>The package was terminated.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IPackageDebugSettings">
            <summary>Enables debugger developers to control the life cycle of a Windows Store app, such as suspending or resuming.</summary>
            <remarks>
            <para>Any debug options set remain in effect until they are cleared or this interface is released.</para>
            <para>
            For debug settings to take effect on Internet Explorer in the new Windows UI, use "DefaultBrowser_NOPUBLISHERID" as the
            packageFullName parameter for IPackageDebugSettings methods.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IPackageDebugSettings.EnableDebugging(System.String,System.String,System.IntPtr)">
            <summary>Enables debug mode for the processes of the specified package.</summary>
            <param name="packageFullName">The package full name.</param>
            <param name="debuggerCommandLine">The command line to use to launch processes from this package. This parameter is optional.</param>
            <param name="environment">Any environment strings to pass to processes. This parameter is optional.</param>
            <remarks>
            <para>Enabling debug mode has the following effects:</para>
            <list type="bullet">
            <item>
            <term>Optionally enables debugger attach on activation.</term>
            </item>
            <item>
            <term>Disables activation timeouts.</term>
            </item>
            <item>
            <term>Disables automatic process suspension.</term>
            </item>
            <item>
            <term>Disables automatic process termination.</term>
            </item>
            <item>
            <term>Disables automatic process resumption.</term>
            </item>
            </list>
            <para>To restore normal operation, call the DisableDebugging method.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IPackageDebugSettings.DisableDebugging(System.String)">
            <summary>Disables debug mode for the processes of the specified package.</summary>
            <param name="packageFullName">The package full name.</param>
            <remarks>This method has no effect if the EnableDebugging method was not previously called for this package.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IPackageDebugSettings.Suspend(System.String)">
            <summary>Suspends the processes of the package if they are currently running.</summary>
            <param name="packageFullName">
            <para>Type: <c>LPCWSTR</c></para>
            <para>The package full name.</para>
            </param>
            <remarks>
            Each process receives the <c>Suspending</c> event. It can be useful for developers to step through how their apps respond to
            this event.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IPackageDebugSettings.Resume(System.String)">
            <summary>Resumes the processes of the package if they are currently suspended.</summary>
            <param name="packageFullName">The package full name.</param>
            <remarks>
            Each process receives the Resuming event, which is useful for stepping through your apps as they respond to this event.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IPackageDebugSettings.TerminateAllProcesses(System.String)">
            <summary>Terminates all processes for the specified package.</summary>
            <param name="packageFullName">The package full name.</param>
            <remarks>
            This method does not suspend the processes first. To test suspension followed by termination, call the Suspend method before
            calling TerminateAllProcesses.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IPackageDebugSettings.SetTargetSessionId(System.UInt32)">
            <summary>Sets the session identifier.</summary>
            <param name="sessionId">The session identifier.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IPackageDebugSettings.EnumerateBackgroundTasks(System.String,System.UInt32@,System.Guid[]@,System.String[]@)">
            <summary>Gets the background tasks that are provided by the specified package.</summary>
            <param name="packageFullName">The package full name to query for background tasks.</param>
            <param name="taskCount">The count of taskIds and taskNames entries.</param>
            <param name="taskIds">
            An array of background task identifiers. You can use these identifiers in the ActivateBackgroundTask method to activate
            specified tasks.
            </param>
            <param name="taskNames">An array of task names that corresponds with background taskIds.</param>
            <remarks>
            Both parameters taskIds and taskNames have the same ordering of tasks. If you need to know the user-readable task name
            associated with taskId[0], refer to taskNames[0].
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IPackageDebugSettings.ActivateBackgroundTask(System.Guid@)">
            <summary>Activates the specified background task.</summary>
            <param name="taskId">The identifier of the background task to activate.</param>
            <remarks>Use the <c>ActivateBackgroundTask</c> method to test the code that handles your background tasks.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IPackageDebugSettings.StartServicing(System.String)">
            <summary>
            Suspends and terminates the non-background portion of the apps associated with the specified package and cancels the
            background tasks associated with the package.
            </summary>
            <param name="packageFullName">The package full name.</param>
            <remarks>
            Use the <c>StartServicing</c> method to simulate what happens when a package is updated to a newer version. New background
            task activations are buffered (delayed) until you call the StopServicing method.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IPackageDebugSettings.StopServicing(System.String)">
            <summary>Completes the previous servicing operation that was started by a call to the StartServicing method.</summary>
            <param name="packageFullName">The package full name.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IPackageDebugSettings.StartSessionRedirection(System.String,System.UInt32)">
            <summary>Causes background tasks for the specified package to activate in the specified user session.</summary>
            <param name="packageFullName">The package full name.</param>
            <param name="sessionId">The identifier of the session which background tasks are redirected to.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IPackageDebugSettings.StopSessionRedirection(System.String)">
            <summary>Stops redirection of background tasks for the specified package.</summary>
            <param name="packageFullName">The package full name.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IPackageDebugSettings.GetPackageExecutionState(System.String)">
            <summary>Gets the state of the package execution.</summary>
            <param name="packageFullName">Full name of the package.</param>
            <returns>State of the package execution.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IPackageDebugSettings.RegisterForPackageStateChanges(System.String,Vanara.PInvoke.Shell32.IPackageExecutionStateChangeNotification,System.UInt32@)">
            <summary>Register for package state-change notifications.</summary>
            <param name="packageFullName">The package full name.</param>
            <param name="pPackageExecutionStateChangeNotification">
            Package state-change notifications are delivered by the OnStateChanged function on pPackageExecutionStateChangeNotification.
            </param>
            <param name="pdwCookie">
            A unique registration identifier for the current listener. Use this identifier to unregister for package state-change
            notifications by using the UnregisterForPackageStateChanges method.
            </param>
            <remarks>Notifications are raised when the package enters the running, suspending, and suspended states.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IPackageDebugSettings.UnregisterForPackageStateChanges(System.UInt32)">
            <summary>Stops receiving package state-change notifications associated with a previous call to RegisterForPackageStateChanges.</summary>
            <param name="dwCookie">
            The notification to cancel. This identifier is returned by a previous call to the RegisterForPackageStateChanges method.
            </param>
            <remarks>
            Call the <c>UnregisterForPackageStateChanges</c> to stop receiving package state-change notifications associated with a
            previous call to the RegisterForPackageStateChanges method.
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IPackageDebugSettings2">
            <summary>Undocumented.</summary>
            <seealso cref="T:Vanara.PInvoke.Shell32.IPackageDebugSettings"/>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IPackageDebugSettings2.EnableDebugging(System.String,System.String,System.IntPtr)">
            <summary>Enables debug mode for the processes of the specified package.</summary>
            <param name="packageFullName">The package full name.</param>
            <param name="debuggerCommandLine">The command line to use to launch processes from this package. This parameter is optional.</param>
            <param name="environment">Any environment strings to pass to processes. This parameter is optional.</param>
            <remarks>
            <para>Enabling debug mode has the following effects:</para>
            <list type="bullet">
            <item>
            <term>Optionally enables debugger attach on activation.</term>
            </item>
            <item>
            <term>Disables activation timeouts.</term>
            </item>
            <item>
            <term>Disables automatic process suspension.</term>
            </item>
            <item>
            <term>Disables automatic process termination.</term>
            </item>
            <item>
            <term>Disables automatic process resumption.</term>
            </item>
            </list>
            <para>To restore normal operation, call the DisableDebugging method.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IPackageDebugSettings2.DisableDebugging(System.String)">
            <summary>Disables debug mode for the processes of the specified package.</summary>
            <param name="packageFullName">The package full name.</param>
            <remarks>This method has no effect if the EnableDebugging method was not previously called for this package.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IPackageDebugSettings2.Suspend(System.String)">
            <summary>Suspends the processes of the package if they are currently running.</summary>
            <param name="packageFullName">
            <para>Type: <c>LPCWSTR</c></para>
            <para>The package full name.</para>
            </param>
            <remarks>
            Each process receives the <c>Suspending</c> event. It can be useful for developers to step through how their apps respond to
            this event.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IPackageDebugSettings2.Resume(System.String)">
            <summary>Resumes the processes of the package if they are currently suspended.</summary>
            <param name="packageFullName">The package full name.</param>
            <remarks>
            Each process receives the Resuming event, which is useful for stepping through your apps as they respond to this event.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IPackageDebugSettings2.TerminateAllProcesses(System.String)">
            <summary>Terminates all processes for the specified package.</summary>
            <param name="packageFullName">The package full name.</param>
            <remarks>
            This method does not suspend the processes first. To test suspension followed by termination, call the Suspend method before
            calling TerminateAllProcesses.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IPackageDebugSettings2.SetTargetSessionId(System.UInt32)">
            <summary>Sets the session identifier.</summary>
            <param name="sessionId">The session identifier.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IPackageDebugSettings2.EnumerateBackgroundTasks(System.String,System.UInt32@,System.Guid[]@,System.String[]@)">
            <summary>Gets the background tasks that are provided by the specified package.</summary>
            <param name="packageFullName">The package full name to query for background tasks.</param>
            <param name="taskCount">The count of taskIds and taskNames entries.</param>
            <param name="taskIds">
            An array of background task identifiers. You can use these identifiers in the ActivateBackgroundTask method to activate
            specified tasks.
            </param>
            <param name="taskNames">An array of task names that corresponds with background taskIds.</param>
            <remarks>
            Both parameters taskIds and taskNames have the same ordering of tasks. If you need to know the user-readable task name
            associated with taskId[0], refer to taskNames[0].
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IPackageDebugSettings2.ActivateBackgroundTask(System.Guid@)">
            <summary>Activates the specified background task.</summary>
            <param name="taskId">The identifier of the background task to activate.</param>
            <remarks>Use the <c>ActivateBackgroundTask</c> method to test the code that handles your background tasks.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IPackageDebugSettings2.StartServicing(System.String)">
            <summary>
            Suspends and terminates the non-background portion of the apps associated with the specified package and cancels the
            background tasks associated with the package.
            </summary>
            <param name="packageFullName">The package full name.</param>
            <remarks>
            Use the <c>StartServicing</c> method to simulate what happens when a package is updated to a newer version. New background
            task activations are buffered (delayed) until you call the StopServicing method.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IPackageDebugSettings2.StopServicing(System.String)">
            <summary>Completes the previous servicing operation that was started by a call to the StartServicing method.</summary>
            <param name="packageFullName">The package full name.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IPackageDebugSettings2.StartSessionRedirection(System.String,System.UInt32)">
            <summary>Causes background tasks for the specified package to activate in the specified user session.</summary>
            <param name="packageFullName">The package full name.</param>
            <param name="sessionId">The identifier of the session which background tasks are redirected to.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IPackageDebugSettings2.StopSessionRedirection(System.String)">
            <summary>Stops redirection of background tasks for the specified package.</summary>
            <param name="packageFullName">The package full name.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IPackageDebugSettings2.GetPackageExecutionState(System.String)">
            <summary>Gets the state of the package execution.</summary>
            <param name="packageFullName">Full name of the package.</param>
            <returns>State of the package execution.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IPackageDebugSettings2.RegisterForPackageStateChanges(System.String,Vanara.PInvoke.Shell32.IPackageExecutionStateChangeNotification,System.UInt32@)">
            <summary>Register for package state-change notifications.</summary>
            <param name="packageFullName">The package full name.</param>
            <param name="pPackageExecutionStateChangeNotification">
            Package state-change notifications are delivered by the OnStateChanged function on pPackageExecutionStateChangeNotification.
            </param>
            <param name="pdwCookie">
            A unique registration identifier for the current listener. Use this identifier to unregister for package state-change
            notifications by using the UnregisterForPackageStateChanges method.
            </param>
            <remarks>Notifications are raised when the package enters the running, suspending, and suspended states.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IPackageDebugSettings2.UnregisterForPackageStateChanges(System.UInt32)">
            <summary>Stops receiving package state-change notifications associated with a previous call to RegisterForPackageStateChanges.</summary>
            <param name="dwCookie">
            The notification to cancel. This identifier is returned by a previous call to the RegisterForPackageStateChanges method.
            </param>
            <remarks>
            Call the <c>UnregisterForPackageStateChanges</c> to stop receiving package state-change notifications associated with a
            previous call to the RegisterForPackageStateChanges method.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IPackageDebugSettings2.EnumerateApps(System.String,System.UInt32@,System.String[]@,System.String[]@)">
            <summary>Enumerates the apps.</summary>
            <param name="packageFullName">The package full name to query for apps.</param>
            <param name="appCount">The count of <paramref name="appUserModelIds"/> and <paramref name="appDisplayNames"/> entries.</param>
            <param name="appUserModelIds">The application user model ids.</param>
            <param name="appDisplayNames">The application display names.</param>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IPackageExecutionStateChangeNotification">
            <summary>Enables receiving package state-change notifications during Windows Store app debugging.</summary>
            <remarks>
            <para>
            Implement the <c>IPackageExecutionStateChangeNotification</c> interface when you need to receive package state-change
            notifications during Windows Store app debugging.
            </para>
            <para>Call the <see cref="M:Vanara.PInvoke.Shell32.IPackageDebugSettings.RegisterForPackageStateChanges(System.String,Vanara.PInvoke.Shell32.IPackageExecutionStateChangeNotification,System.UInt32@)"/> method to register for package state-change notifications.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IPackageExecutionStateChangeNotification.OnStateChanged(System.String,Vanara.PInvoke.Shell32.PACKAGE_EXECUTION_STATE)">
            <summary>Called when package state changes during Windows Store app debugging.</summary>
            <param name="pszPackageFullName">The package full name.</param>
            <param name="pesNewState">The new state that the package changed to.</param>
            <returns>Return <c>S_OK</c> when you implement the <c>OnStateChanged</c> method.</returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.PackageDebugSettings">
            <summary>CoClass for IPackageDebugSettings</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IParentAndItem">
            <summary>
            Exposes methods that get and set the parent and the parent's child ID. While <c>IParentAndItem</c> is typically implemented on
            IShellItems, it is not specific to IShellItem.
            </summary>
            <remarks>
            The performance improvement using this interface can be noted in comparison with IPersistIDList, an interface that uses absolute
            item identifier lists. Subsequent operations on objects that implement <c>IPersistIDList</c> may require
            IShellFolder::BindToObject calls, and these calls may impact performance. In the case of IShellItems and participating
            IShellFolders that implement <c>IParentAndItem</c>, the parent IShellFolder may already be cached. By implementing
            <c>IParentAndItem</c> and then getting/setting the parent <c>IShellFolder</c> directly, the call to
            <c>IShellFolder::BindToObject</c> on the item identifier list to retrieve the <c>IShellFolder</c> interface is eliminated.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IParentAndItem.SetParentAndItem(Vanara.PInvoke.Shell32.PIDL,Vanara.PInvoke.Shell32.IShellFolder,Vanara.PInvoke.Shell32.PIDL)">
            <summary>Sets the parent of an item and the parent's child ID.</summary>
            <param name="pidlParent">
            <para>Type: <c>PCIDLIST_ABSOLUTE</c></para>
            <para>A pointer of the parent.</para>
            </param>
            <param name="psf">
            <para>Type: <c>IShellFolder*</c></para>
            <para>A pointer to the IShellFolder that is the parent.</para>
            </param>
            <param name="pidlChild">
            <para>Type: <c>PCUITEMID_CHILD</c></para>
            <para>A PIDL that is a child relative to psf.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>While IParentAndItem is typically implemented on IShellItems, it is not specific to IShellItem.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IParentAndItem.GetParentAndItem(Vanara.PInvoke.Shell32.PIDL@,Vanara.PInvoke.Shell32.IShellFolder@,Vanara.PInvoke.Shell32.PIDL@)">
            <summary>Gets the parent of an item and the parent's child ID.</summary>
            <param name="ppidlParent">
            <para>Type: <c>PIDLIST_ABSOLUTE*</c></para>
            <para>When this method returns, contains the address of a PIDL that specifies the parent.</para>
            </param>
            <param name="ppsf">
            <para>Type: <c>IShellFolder**</c></para>
            <para>When this method returns, contains the address of a pointer to the IShellFolder that is the parent.</para>
            </param>
            <param name="ppidlChild">
            <para>Type: <c>PITEMID_CHILD*</c></para>
            <para>
            When this method returns, contains the address of a child PIDL that identifies the IParentAndItem object relative to that
            specified by ppsf.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>While IParentAndItem is typically implemented on IShellItems, it is not specific to IShellItem.</remarks>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IPersistFolder">
            <summary>Exposes a method that initializes Shell folder objects.</summary>
            <remarks>
            <para>
            When you implement a Shell namespace extension, specifically the IShellFolder interface, you must implement this interface so
            the folder object can be initialized. Implementation of this interface is how the folder is told where it is in the Shell namespace.
            </para>
            <para>
            You do not use this interface directly. It is used by the file system implementation of the IShellFolder::BindToObject interface
            when it is initializing a Shell folder object.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IPersistFolder.GetClassID">
            <summary>Retrieves the class identifier (CLSID) of the object.</summary>
            <returns>
            <para>
            A pointer to the location that receives the CLSID on return. The CLSID is a globally unique identifier (GUID) that uniquely
            represents an object class that defines the code that can manipulate the object's data.
            </para>
            <para>If the method succeeds, the return value is S_OK. Otherwise, it is E_FAIL.</para>
            </returns>
            <remarks>
            <para>
            The <c>GetClassID</c> method retrieves the class identifier (CLSID) for an object, used in later operations to load
            object-specific code into the caller's context.
            </para>
            <para>Notes to Callers</para>
            <para>
            A container application might call this method to retrieve the original CLSID of an object that it is treating as a
            different class. Such a call would be necessary if a user performed an editing operation that required the object to be
            saved. If the container were to save it using the treat-as CLSID, the original application would no longer be able to edit
            the object. Typically, in this case, the container calls the OleSave helper function, which performs all the necessary
            steps. For this reason, most container applications have no need to call this method directly.
            </para>
            <para>
            The exception would be a container that provides an object handler for certain objects. In particular, a container
            application should not get an object's CLSID and then use it to retrieve class specific information from the registry.
            Instead, the container should use IOleObject and IDataObject interfaces to retrieve such class-specific information directly
            from the object.
            </para>
            <para>Notes to Implementers</para>
            <para>
            Typically, implementations of this method simply supply a constant CLSID for an object. If, however, the object's
            <c>TreatAs</c> registry key has been set by an application that supports emulation (and so is treating the object as one of
            a different class), a call to <c>GetClassID</c> must supply the CLSID specified in the <c>TreatAs</c> key. For more
            information on emulation, see CoTreatAsClass.
            </para>
            <para>
            When an object is in the running state, the default handler calls an implementation of <c>GetClassID</c> that delegates the
            call to the implementation in the object. When the object is not running, the default handler instead calls the ReadClassStg
            function to read the CLSID that is saved in the object's storage.
            </para>
            <para>
            If you are writing a custom object handler for your object, you might want to simply delegate this method to the default
            handler implementation (see OleCreateDefaultHandler).
            </para>
            <para>URL Moniker Notes</para>
            <para>This method returns CLSID_StdURLMoniker.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IPersistFolder.Initialize(Vanara.PInvoke.Shell32.PIDL)">
            <summary>Instructs a Shell folder object to initialize itself based on the information passed.</summary>
            <param name="pidl">
            <para>Type: <c>LPCITEMIDLIST</c></para>
            <para>The address of the ITEMIDLIST (item identifier list) structure that specifies the absolute location of the folder.</para>
            </param>
            <remarks>
            <para>
            All objects that implement the IShellFolder interface for use in the Shell's namespace must implement this method. When a
            folder's location in the namespace is not a relevant consideration, this method can simply return S_OK. When the location is
            relevant to the folder, you should store the fully qualified IDLIST passed in for later reference.
            </para>
            <para>
            For example, if the folder implementation needs to construct a fully qualified pointer to an item identifier list (PIDL) to
            elements that it contains, the PIDL passed to this method should be used to construct the fully qualified PIDLs.
            </para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IPersistFolder2">
            <summary>Exposes methods that obtain information from Shell folder objects.</summary>
            <remarks>
            <para>This interface also provides the methods of the IPersist, IPersistFolder interfaces, from which it inherits.</para>
            <para>When to Implement</para>
            <para>
            When implementing a Shell namespace extension, specifically the IShellFolder interface, you need to implement this interface so
            that the Shell folder object's ITEMIDLIST can be retrieved.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IPersistFolder2.GetClassID">
            <summary>Retrieves the class identifier (CLSID) of the object.</summary>
            <returns>
            <para>
            A pointer to the location that receives the CLSID on return. The CLSID is a globally unique identifier (GUID) that uniquely
            represents an object class that defines the code that can manipulate the object's data.
            </para>
            <para>If the method succeeds, the return value is S_OK. Otherwise, it is E_FAIL.</para>
            </returns>
            <remarks>
            <para>
            The <c>GetClassID</c> method retrieves the class identifier (CLSID) for an object, used in later operations to load
            object-specific code into the caller's context.
            </para>
            <para>Notes to Callers</para>
            <para>
            A container application might call this method to retrieve the original CLSID of an object that it is treating as a
            different class. Such a call would be necessary if a user performed an editing operation that required the object to be
            saved. If the container were to save it using the treat-as CLSID, the original application would no longer be able to edit
            the object. Typically, in this case, the container calls the OleSave helper function, which performs all the necessary
            steps. For this reason, most container applications have no need to call this method directly.
            </para>
            <para>
            The exception would be a container that provides an object handler for certain objects. In particular, a container
            application should not get an object's CLSID and then use it to retrieve class specific information from the registry.
            Instead, the container should use IOleObject and IDataObject interfaces to retrieve such class-specific information directly
            from the object.
            </para>
            <para>Notes to Implementers</para>
            <para>
            Typically, implementations of this method simply supply a constant CLSID for an object. If, however, the object's
            <c>TreatAs</c> registry key has been set by an application that supports emulation (and so is treating the object as one of
            a different class), a call to <c>GetClassID</c> must supply the CLSID specified in the <c>TreatAs</c> key. For more
            information on emulation, see CoTreatAsClass.
            </para>
            <para>
            When an object is in the running state, the default handler calls an implementation of <c>GetClassID</c> that delegates the
            call to the implementation in the object. When the object is not running, the default handler instead calls the ReadClassStg
            function to read the CLSID that is saved in the object's storage.
            </para>
            <para>
            If you are writing a custom object handler for your object, you might want to simply delegate this method to the default
            handler implementation (see OleCreateDefaultHandler).
            </para>
            <para>URL Moniker Notes</para>
            <para>This method returns CLSID_StdURLMoniker.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IPersistFolder2.Initialize(Vanara.PInvoke.Shell32.PIDL)">
            <summary>Instructs a Shell folder object to initialize itself based on the information passed.</summary>
            <param name="pidl">
            <para>Type: <c>LPCITEMIDLIST</c></para>
            <para>The address of the ITEMIDLIST (item identifier list) structure that specifies the absolute location of the folder.</para>
            </param>
            <remarks>
            <para>
            All objects that implement the IShellFolder interface for use in the Shell's namespace must implement this method. When a
            folder's location in the namespace is not a relevant consideration, this method can simply return S_OK. When the location is
            relevant to the folder, you should store the fully qualified IDLIST passed in for later reference.
            </para>
            <para>
            For example, if the folder implementation needs to construct a fully qualified pointer to an item identifier list (PIDL) to
            elements that it contains, the PIDL passed to this method should be used to construct the fully qualified PIDLs.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IPersistFolder2.GetCurFolder(Vanara.PInvoke.Shell32.PIDL@)">
            <summary>Gets the ITEMIDLIST for the folder object.</summary>
            <param name="ppidl">
            <para>Type: <c>LPITEMIDLIST*</c></para>
            <para>
            The address of an ITEMIDLIST pointer. This PIDL represents the absolute location of the folder and must be relative to the
            desktop. This is typically a copy of the PIDL passed to Initialize.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>If the folder object has not been initialized, this method returns S_FALSE and ppidl is set to <c>NULL</c>.</remarks>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IPersistFolder3">
            <summary>
            Extends the IPersistFolder and IPersistFolder2 interfaces by allowing a folder object to implement nondefault handling of folder shortcuts.
            </summary>
            <remarks>
            <para>
            This interface also provides the methods of the IPersist, IPersistFolder, and IPersistFolder2 interfaces, from which it inherits.
            </para>
            <para>In Windows versions earlier than Windows Vista, this interface was declared in Shlobj.h.</para>
            <para>When to Implement</para>
            <para>Namespace extensions implement this interface if they need to perform nondefault handling of folder shortcuts.</para>
            <para>When to Use</para>
            <para>Applications do not normally use this interface directly.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IPersistFolder3.GetClassID">
            <summary>Retrieves the class identifier (CLSID) of the object.</summary>
            <returns>
            <para>
            A pointer to the location that receives the CLSID on return. The CLSID is a globally unique identifier (GUID) that uniquely
            represents an object class that defines the code that can manipulate the object's data.
            </para>
            <para>If the method succeeds, the return value is S_OK. Otherwise, it is E_FAIL.</para>
            </returns>
            <remarks>
            <para>
            The <c>GetClassID</c> method retrieves the class identifier (CLSID) for an object, used in later operations to load
            object-specific code into the caller's context.
            </para>
            <para>Notes to Callers</para>
            <para>
            A container application might call this method to retrieve the original CLSID of an object that it is treating as a
            different class. Such a call would be necessary if a user performed an editing operation that required the object to be
            saved. If the container were to save it using the treat-as CLSID, the original application would no longer be able to edit
            the object. Typically, in this case, the container calls the OleSave helper function, which performs all the necessary
            steps. For this reason, most container applications have no need to call this method directly.
            </para>
            <para>
            The exception would be a container that provides an object handler for certain objects. In particular, a container
            application should not get an object's CLSID and then use it to retrieve class specific information from the registry.
            Instead, the container should use IOleObject and IDataObject interfaces to retrieve such class-specific information directly
            from the object.
            </para>
            <para>Notes to Implementers</para>
            <para>
            Typically, implementations of this method simply supply a constant CLSID for an object. If, however, the object's
            <c>TreatAs</c> registry key has been set by an application that supports emulation (and so is treating the object as one of
            a different class), a call to <c>GetClassID</c> must supply the CLSID specified in the <c>TreatAs</c> key. For more
            information on emulation, see CoTreatAsClass.
            </para>
            <para>
            When an object is in the running state, the default handler calls an implementation of <c>GetClassID</c> that delegates the
            call to the implementation in the object. When the object is not running, the default handler instead calls the ReadClassStg
            function to read the CLSID that is saved in the object's storage.
            </para>
            <para>
            If you are writing a custom object handler for your object, you might want to simply delegate this method to the default
            handler implementation (see OleCreateDefaultHandler).
            </para>
            <para>URL Moniker Notes</para>
            <para>This method returns CLSID_StdURLMoniker.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IPersistFolder3.Initialize(Vanara.PInvoke.Shell32.PIDL)">
            <summary>Instructs a Shell folder object to initialize itself based on the information passed.</summary>
            <param name="pidl">
            <para>Type: <c>LPCITEMIDLIST</c></para>
            <para>The address of the ITEMIDLIST (item identifier list) structure that specifies the absolute location of the folder.</para>
            </param>
            <remarks>
            <para>
            All objects that implement the IShellFolder interface for use in the Shell's namespace must implement this method. When a
            folder's location in the namespace is not a relevant consideration, this method can simply return S_OK. When the location is
            relevant to the folder, you should store the fully qualified IDLIST passed in for later reference.
            </para>
            <para>
            For example, if the folder implementation needs to construct a fully qualified pointer to an item identifier list (PIDL) to
            elements that it contains, the PIDL passed to this method should be used to construct the fully qualified PIDLs.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IPersistFolder3.GetCurFolder(Vanara.PInvoke.Shell32.PIDL@)">
            <summary>Gets the ITEMIDLIST for the folder object.</summary>
            <param name="ppidl">
            <para>Type: <c>LPITEMIDLIST*</c></para>
            <para>
            The address of an ITEMIDLIST pointer. This PIDL represents the absolute location of the folder and must be relative to the
            desktop. This is typically a copy of the PIDL passed to Initialize.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>If the folder object has not been initialized, this method returns S_FALSE and ppidl is set to <c>NULL</c>.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IPersistFolder3.InitializeEx(System.Runtime.InteropServices.ComTypes.IBindCtx,Vanara.PInvoke.Shell32.PIDL,System.IntPtr)">
            <summary>
            Initializes a folder and specifies its location in the namespace. If the folder is a shortcut, this method also specifies the
            location of the target folder.
            </summary>
            <param name="pbc">
            <para>Type: <c>IBindCtx*</c></para>
            <para>A pointer to an IBindCtx object that provides the bind context. This parameter can be <c>NULL</c>.</para>
            </param>
            <param name="pidlRoot">
            <para>Type: <c>LPCITEMIDLIST</c></para>
            <para>
            A pointer to a fully qualified PIDL that specifies the absolute location of a folder or folder shortcut. The calling
            application is responsible for allocating and freeing this PIDL.
            </para>
            </param>
            <param name="ppfti">
            <para>Type: <c>const <see cref="T:Vanara.PInvoke.Shell32.PERSIST_FOLDER_TARGET_INFO"/>*</c></para>
            <para>
            A pointer to a <see cref="T:Vanara.PInvoke.Shell32.PERSIST_FOLDER_TARGET_INFO"/> structure that specifies the location of the target folder and its attributes.
            </para>
            <para>If ppfti points to a valid structure, pidlRoot represents a folder shortcut.</para>
            <para>
            If ppfti is set to <c>NULL</c>, pidlRoot represents a normal folder. In that case, <c>InitializeEx</c> should behave as if
            Initialize had been called.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            This function is an extended version of IPersistFolder::Initialize. It allows the Shell to initialize folder shortcuts as
            well as normal folders.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IPersistFolder3.GetFolderTargetInfo">
            <summary>Provides the location and attributes of a folder shortcut's target folder.</summary>
            <returns>
            <para>Type: <c>PERSIST_FOLDER_TARGET_INFO*</c></para>
            <para>A pointer to a PERSIST_FOLDER_TARGET_INFO structure used to return the target folder's location and attributes.</para>
            </returns>
            <remarks>
            The PERSIST_FOLDER_TARGET_INFO structure might not be initialized by the caller. <c>GetFolderTargetInfo</c> must assign
            values to all members of the structure before returning it to the caller.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.InitializeEx(Vanara.PInvoke.Shell32.IPersistFolder3,System.Runtime.InteropServices.ComTypes.IBindCtx,Vanara.PInvoke.Shell32.PIDL,Vanara.PInvoke.Shell32.PERSIST_FOLDER_TARGET_INFO@)">
            <summary>
            Initializes a folder and specifies its location in the namespace. If the folder is a shortcut, this method also specifies the
            location of the target folder.
            </summary>
            <param name="pf3">The IPersistFolder3 instance.</param>
            <param name="pbc">
            <para>Type: <c>IBindCtx*</c></para>
            <para>A pointer to an IBindCtx object that provides the bind context. This parameter can be <c>NULL</c>.</para>
            </param>
            <param name="pidlRoot">
            <para>Type: <c>LPCITEMIDLIST</c></para>
            <para>
            A pointer to a fully qualified PIDL that specifies the absolute location of a folder or folder shortcut. The calling application
            is responsible for allocating and freeing this PIDL.
            </para>
            </param>
            <param name="pfti">
            <para>A <see cref="T:Vanara.PInvoke.Shell32.PERSIST_FOLDER_TARGET_INFO"/> structure that specifies the location of the target folder and its attributes.</para>
            <para>If ppfti points to a valid structure, pidlRoot represents a folder shortcut.</para>
            </param>
            <remarks>
            This function is an extended version of IPersistFolder::Initialize. It allows the Shell to initialize folder shortcuts as well as
            normal folders.
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.PERSIST_FOLDER_TARGET_INFO">
            <summary>
            Specifies a folder shortcut's target folder and its attributes. This structure is used by IPersistFolder3::GetFolderTargetInfo
            and IPersistFolder3::InitializeEx.
            </summary>
            <remarks>
            Any or all of the <c>pidlTargetFolder</c>, <c>szTargetParsingName</c>, and <c>csidl</c> members can be used to specify the
            target folder's location.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.PERSIST_FOLDER_TARGET_INFO.pidlTargetFolder">
            <summary>
            <para>Type: <c>PIDLIST_ABSOLUTE</c></para>
            <para>A fully qualified PIDL of the target folder. Set <c>pidlTargetFolder</c> to <c>NULL</c> if not specified.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.PERSIST_FOLDER_TARGET_INFO.szTargetParsingName">
            <summary>
            <para>Type: <c>WCHAR[MAX_PATH]</c></para>
            <para>
            A null-terminated Unicode string with the target folder's parsing name. Set <c>szTargetParsingName</c> to an empty string if
            not specified.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.PERSIST_FOLDER_TARGET_INFO.szNetworkProvider">
            <summary>
            <para>Type: <c>WCHAR[MAX_PATH]</c></para>
            <para>
            A null-terminated Unicode string that specifies the type of network provider that will be used when binding to the target
            folder. The format is the same as that used by the WNet API. Set <c>szNetworkProvider</c> to an empty string if not specified.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.PERSIST_FOLDER_TARGET_INFO.dwAttributes">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>
            A <c>DWORD</c> value that contains FILE_ATTRIBUTE_* flags as defined in Winnt.h. Set <c>dwAttributes</c> to -1 if not specified.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.PERSIST_FOLDER_TARGET_INFO.csidl">
            <summary>
            <para>Type: <c>int</c></para>
            <para>
            The target folder's CSIDL value, if it has one. Set <c>csidl</c> to -1 if the target folder does not have a CSIDL. In
            addition to the CSIDL value, you can also set the following two flags.
            </para>
            <para>CSIDL_FLAG_PFTI_TRACKTARGET</para>
            <para>Indicates that the target folder should change if the user changes the target folder's underlying CSIDL value.</para>
            <para>CSIDL_FLAG_CREATE</para>
            <para>Indicates that the target folder should be created if it does not already exist.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IPreviewHandler">
            <summary>Exposes methods for the display of rich previews.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IPreviewHandler.SetWindow(Vanara.PInvoke.HWND,Vanara.PInvoke.RECT@)">
            <summary>
            Sets the parent window of the previewer window, as well as the area within the parent to be used for the previewer window.
            </summary>
            <param name="hwnd">A handle to the parent window.</param>
            <param name="prc">A pointer to a RECT defining the area for the previewer.</param>
            <returns>If this method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IPreviewHandler.SetRect(Vanara.PInvoke.RECT@)">
            <summary>Directs the preview handler to change the area within the parent hwnd that it draws into.</summary>
            <param name="prc">A pointer to a RECT to be used for the preview.</param>
            <returns>If this method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IPreviewHandler.DoPreview">
            <summary>
            Directs the preview handler to load data from the source specified in an earlier Initialize method call, and to begin
            rendering to the previewer window.
            </summary>
            <returns>If this method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IPreviewHandler.Unload">
            <summary>
            Directs the preview handler to cease rendering a preview and to release all resources that have been allocated based on the
            item passed in during the initialization.
            </summary>
            <returns>If this method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IPreviewHandler.SetFocus">
            <summary>Directs the preview handler to set focus to itself.</summary>
            <returns>If this method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IPreviewHandler.QueryFocus(Vanara.PInvoke.HWND@)">
            <summary>
            Directs the preview handler to return the HWND from calling the GetFocus Function.
            </summary>
            <param name="phwnd">When this method returns, contains a pointer to the HWND returned from calling the GetFocus Function from the preview
            handler's foreground thread.</param>
            <returns>If this method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IPreviewHandler.TranslateAccelerator(Vanara.PInvoke.MSG@)">
            <summary>
            Directs the preview handler to handle a keystroke passed up from the message pump of the process in which the preview handler
            is running.
            </summary>
            <param name="pmsg">A pointer to a window message.</param>
            <returns>
            If the keyboard shortcut is one that the host intends to handle, the host will process it and return S_OK; otherwise, it
            returns S_FALSE.
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IPreviewHandlerFrame">
            <summary>
            Enables preview handlers to pass keyboard shortcuts to the host. This interface retrieves a list of keyboard shortcuts and
            directs the host to handle a keyboard shortcut.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IPreviewHandlerFrame.GetWindowContext(Vanara.PInvoke.Shell32.PREVIEWHANDLERFRAMEINFO@)">
            <summary>Gets a list of the keyboard shortcuts for the preview host.</summary>
            <param name="pinfo">A pointer to a PREVIEWHANDLERFRAMEINFO structure that receives accelerator table information.</param>
            <returns>If this method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IPreviewHandlerFrame.TranslateAccelerator(Vanara.PInvoke.MSG@)">
            <summary>Directs the host to handle an keyboard shortcut passed from the preview handler.</summary>
            <param name="pmsg">A pointer to a WM_COMMAND or WM_SYSCOMMAND window message that corresponds to a keyboard shortcut.</param>
            <returns>
            If the keyboard shortcut is one that the host intends to handle, the host will process it and return S_OK; otherwise, it
            returns S_FALSE.
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IPreviewHandlerVisuals">
            <summary>Exposes methods for applying color and font information to preview handlers.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IPreviewHandlerVisuals.SetBackgroundColor(Vanara.PInvoke.COLORREF)">
            <summary>Sets the background color of the preview handler.</summary>
            <param name="color">A value of type COLORREF to use for the preview handler background.</param>
            <returns>If this method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IPreviewHandlerVisuals.SetFont(Vanara.PInvoke.LOGFONT@)">
            <summary>Sets the font attributes to be used for text within the preview handler.</summary>
            <param name="plf">A pointer to a LOGFONTW Structure containing the necessary attributes for the font to use.</param>
            <returns>If this method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IPreviewHandlerVisuals.SetTextColor(Vanara.PInvoke.COLORREF)">
            <summary>Sets the color of the text within the preview handler.</summary>
            <param name="color">A value of type COLORREF to use for the preview handler text color.</param>
            <returns>If this method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.PREVIEWHANDLERFRAMEINFO">
            <summary><para>Accelerator table structure. Used by IPreviewHandlerFrame::GetWindowContext.</para></summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.PREVIEWHANDLERFRAMEINFO.haccel">
            <summary>A handle to the accelerator table.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.PREVIEWHANDLERFRAMEINFO.cAccelEntries">
            <summary>The number of entries in the accelerator table.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IPreviousVersionsInfo">
            <summary>
            Exposes a method that checks for previous versions of server files or folders, stored for the purpose of reversion by the shadow
            copies technology provided with Windows Server 2003.
            </summary>
            <remarks>
            <para>The CLSID, IID, and definition for this interface are shown in the following example.</para>
            <para>
            Note that the shadow copies technology does not store entire copies of older versions unless they are deleted; only the changed
            bits are stored.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IPreviousVersionsInfo.AreSnapshotsAvailable(System.String,System.Boolean)">
            <summary>Queries for the availablilty of a Windows Server 2003 volume image recorded by the system at an earlier time.</summary>
            <param name="pszPath">
            <para>Type: <c>LPCWSTR</c></para>
            <para>A null-terminated Unicode string containing the fully qualified path to a file or folder on the volume in question.</para>
            <para><c>Note</c> Only paths to files and folders stored on a Windows Server 2003 volume are currently supported.</para>
            </param>
            <param name="fOkToBeSlow">
            <para>Type: <c>BOOL</c></para>
            <para>
            A boolean value specifying whether a server should be contacted to determine the availability of stored volume images. For
            more details, see the Remarks section.
            </para>
            <para>TRUE</para>
            <para>Contact the server if the results are not already cached.</para>
            <para>FALSE</para>
            <para>Do not contact the server. Use cached results instead.</para>
            </param>
            <returns>
            <para>Type: <c>BOOL*</c></para>
            <para>
            A pointer to a boolean variable containing the result. This value is valid only if the method call succeeds; otherwise, it
            is undefined.
            </para>
            <para>TRUE</para>
            <para>At least one stored image of the volume where the file or folder named in pszPath resides is available.</para>
            <para>FALSE</para>
            <para>No volume images are stored.</para>
            </returns>
            <remarks>
            <para>
            If <c>IPreviousVersionsInfo::AreSnapshotsAvailable</c> is called on a file or folder, the result does not indicate that
            rollback information is available for that specific file or folder, merely that a snapshot of the entire volume is
            available. This result is cached and subsequent calls inquiring about anything stored on that same volume access the cached
            results—with little performance overhead—instead of recontacting the server.
            </para>
            <para>
            Once the server's response is cached in memory, subsequent calls do not contact the server even if fOkToBeSlow is
            <c>TRUE</c>. If fOkToBeSlow is <c>FALSE</c> and the server's response is not already cached from a previous call, the method
            returns E_PENDING. In that case, set fOkToBeSlow to <c>TRUE</c> and call <c>IPreviousVersionsInfo::AreSnapshotsAvailable</c>
            again to contact the server.
            </para>
            <para>
            For better performance, a UI thread calling this method should always set fOkToBeSlow to <c>FALSE</c>. If the method returns
            E_PENDING, follow these steps.
            </para>
            <list type="bullet">
            <item>
            <term>Create another instance of IPreviousVersionsInfo on a background thread.</term>
            </item>
            <item>
            <term>Call <c>IPreviousVersionsInfo::AreSnapshotsAvailable</c> with fOkToBeSlow set to <c>TRUE</c>.</term>
            </item>
            <item>
            <term>
            Signal the original UI thread to call <c>IPreviousVersionsInfo::AreSnapshotsAvailable</c> again. The results are then pulled
            from the cache.
            </term>
            </item>
            </list>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.PreviousVersionsInfo">
            <summary>CoClass for IPreviousVersionsInfo</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.ICurrentItem">
            <summary>
            Obtained by calling IShellFolder::BindToObject for an item. If the item represents a snapshot of an item at a previous time,
            this interface will obtain the current version of the item.
            </summary>
            <remarks>This interface provides only the methods of the IRelatedItem interface, from which it inherits.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ICurrentItem.GetItemIDList">
            <summary>Gets the pointer to an item identifier list (PIDL) for the item that is related.</summary>
            <returns>
            <para>Type: <c>PIDLIST_ABSOLUTE*</c></para>
            <para>When this method returns, contains the PIDL.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ICurrentItem.GetItem">
            <summary>Gets the IShellItem that is related to this item.</summary>
            <returns>
            <para>Type: <c>IShellItem**</c></para>
            <para>
            When this method returns, contains the address of a pointer to the IShellItem interface for the item that is related to this item.
            </para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IDelegateItem">
            <summary>Used to obtain the immediately underlying representation of an item's path.</summary>
            <remarks>
            <para>This interface provides only the methods of the IRelatedItem interface, from which it inherits.</para>
            <para>When to Implement</para>
            <para>
            An implementation of this interface for system-provided data objects is provided with Windows. Custom data sources that want to
            expose this information must implement the interface as part of their data object.
            </para>
            <para>When to Use</para>
            <para>
            Use this interface to uncovers a single level of aliasing. For instance, if you have the path of an item in the Documents
            library, this interface reveals the path of the item in the location that was added to the library. Whether this is the file
            system path depends on the nature of that original location. For a full recursion to the source item, use IIdentityName.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IDelegateItem.GetItemIDList">
            <summary>Gets the pointer to an item identifier list (PIDL) for the item that is related.</summary>
            <returns>
            <para>Type: <c>PIDLIST_ABSOLUTE*</c></para>
            <para>When this method returns, contains the PIDL.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IDelegateItem.GetItem">
            <summary>Gets the IShellItem that is related to this item.</summary>
            <returns>
            <para>Type: <c>IShellItem**</c></para>
            <para>
            When this method returns, contains the address of a pointer to the IShellItem interface for the item that is related to this item.
            </para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IDisplayItem">
            <summary>
            Exposes methods that find a version of the current item to be used to get display properties, such as the item name, that will
            be displayed in the UI. Used by the copy engine dialogs to provide the UI with an appropriate item to display. If no other
            version can be found, the current item is used.
            </summary>
            <remarks>This interface provides only the methods of the IRelatedItem interface, from which it inherits.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IDisplayItem.GetItemIDList">
            <summary>Gets the pointer to an item identifier list (PIDL) for the item that is related.</summary>
            <returns>
            <para>Type: <c>PIDLIST_ABSOLUTE*</c></para>
            <para>When this method returns, contains the PIDL.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IDisplayItem.GetItem">
            <summary>Gets the IShellItem that is related to this item.</summary>
            <returns>
            <para>Type: <c>IShellItem**</c></para>
            <para>
            When this method returns, contains the address of a pointer to the IShellItem interface for the item that is related to this item.
            </para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IIdentityName">
            <summary>Exposes methods to compare two items to see if they are the same.</summary>
            <remarks>
            <para>This interface provides only the methods of the IRelatedItem interface, from which it inherits.</para>
            <para>
            Shell data sources that present items in virtual locations, such as search results, typically implement this interface as a
            handler to discover the actual location of an item—to find a folder that contains a file. For example, this interface is used to
            implement the <c>Open File Location</c> command in Windows Explorer. When the user right-clicks on a file in a set of search
            results, for example, and then selects <c>Open File Location</c>, the command uses <c>IIdentityName</c> to get the true item and
            opens a browser on its parent (the file folder) instead of opening the parent of the item (which is where the user already is).
            </para>
            <para>
            Several controls (the <c>Start</c> button on the taskbar, and the namespace control) use <c>IIdentityName</c> to get the
            original item and thus avoid duplicate items.
            </para>
            <para>This interface is helpful with aliased ID lists (type ITEMIDLIST), as can be demonstrated using the following two lists.</para>
            <list type="number">
            <item>
            <term>
            [computer][c:][users][pat][desktop][myfile.txt]. This is a file in the user's desktop and is handled by the IShellFolder
            implementation in Windows Vista that handles file systems.
            </term>
            </item>
            <item>
            <term>
            [desktop][myfile.txt]. The IShellFolder implementation behind the desktop shows files from the user's desktop, all of the user's
            desktop, and some special items like the <c>Recycle Bin</c>. When asked to bind through IShellFolder::BindToObject using IID
            IID_IIdentityName, this <c>IShellFolder</c> returns the underlying item, which is the file folder item just above.
            </term>
            </item>
            </list>
            <note>To get an instance of this handler use IShellFolder::BindToObject with IID_IIdentityItem or use IShellItem::BindToHandler
            with BHID_SFObject.</note>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IIdentityName.GetItemIDList">
            <summary>Gets the pointer to an item identifier list (PIDL) for the item that is related.</summary>
            <returns>
            <para>Type: <c>PIDLIST_ABSOLUTE*</c></para>
            <para>When this method returns, contains the PIDL.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IIdentityName.GetItem">
            <summary>Gets the IShellItem that is related to this item.</summary>
            <returns>
            <para>Type: <c>IShellItem**</c></para>
            <para>
            When this method returns, contains the address of a pointer to the IShellItem interface for the item that is related to this item.
            </para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IPreviewItem">
            <summary>Identifies an item that will be shown in the preview pane.</summary>
            <remarks>
            <para>This interface provides only the methods of the IRelatedItem interface, from which it inherits.</para>
            <para>When to Implement</para>
            <para>
            An implementation of this interface for system-provided data objects is provided with Windows. Custom data sources that want to
            expose this information must implement the interface as part of their data object.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IPreviewItem.GetItemIDList">
            <summary>Gets the pointer to an item identifier list (PIDL) for the item that is related.</summary>
            <returns>
            <para>Type: <c>PIDLIST_ABSOLUTE*</c></para>
            <para>When this method returns, contains the PIDL.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IPreviewItem.GetItem">
            <summary>Gets the IShellItem that is related to this item.</summary>
            <returns>
            <para>Type: <c>IShellItem**</c></para>
            <para>
            When this method returns, contains the address of a pointer to the IShellItem interface for the item that is related to this item.
            </para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IRelatedItem">
            <summary>Exposes methods that derive related items with specific relationships.</summary>
            <remarks>
            <para>
            Do not implement this interface directly. This is a base interface (other interfaces derive from it) for a set of interfaces
            that describes the relationship between two items, (For example IDisplayItem). Do not query for this interface directly, for
            example, using QueryInterface or IShellFolder::BindToObject. Instead, use the derived interfaces.
            </para>
            <para>
            An example derivation is the creation of an identity name handler. For more information, see IIdentityName. Other interfaces
            that may derive from this interface include ICurrentItem, and ITransferMediumItem.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IRelatedItem.GetItemIDList">
            <summary>Gets the pointer to an item identifier list (PIDL) for the item that is related.</summary>
            <returns>
            <para>Type: <c>PIDLIST_ABSOLUTE*</c></para>
            <para>When this method returns, contains the PIDL.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IRelatedItem.GetItem">
            <summary>Gets the IShellItem that is related to this item.</summary>
            <returns>
            <para>Type: <c>IShellItem**</c></para>
            <para>
            When this method returns, contains the address of a pointer to the IShellItem interface for the item that is related to this item.
            </para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.ITransferMediumItem">
            <summary>
            Used by a copy engine to get the item on which to call QueryInterface to return a pointer to interface ITransferDestination or
            interface ITransferSource. These interfaces can be queried and enumerated for copy, move, or delete operations.
            </summary>
            <remarks>This interface provides only the methods of the IRelatedItem interface, from which it inherits.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ITransferMediumItem.GetItemIDList">
            <summary>Gets the pointer to an item identifier list (PIDL) for the item that is related.</summary>
            <returns>
            <para>Type: <c>PIDLIST_ABSOLUTE*</c></para>
            <para>When this method returns, contains the PIDL.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ITransferMediumItem.GetItem">
            <summary>Gets the IShellItem that is related to this item.</summary>
            <returns>
            <para>Type: <c>IShellItem**</c></para>
            <para>
            When this method returns, contains the address of a pointer to the IShellItem interface for the item that is related to this item.
            </para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IViewStateIdentityItem">
            <summary>Provides a canonical persistence item, an item for which view customizations will be remembered.</summary>
            <remarks>This interface provides only the methods of the IRelatedItem interface, from which it inherits.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IViewStateIdentityItem.GetItemIDList">
            <summary>Gets the pointer to an item identifier list (PIDL) for the item that is related.</summary>
            <returns>
            <para>Type: <c>PIDLIST_ABSOLUTE*</c></para>
            <para>When this method returns, contains the PIDL.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IViewStateIdentityItem.GetItem">
            <summary>Gets the IShellItem that is related to this item.</summary>
            <returns>
            <para>Type: <c>IShellItem**</c></para>
            <para>
            When this method returns, contains the address of a pointer to the IShellItem interface for the item that is related to this item.
            </para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IRemoteComputer">
            <summary>
            Exposes a method that enumerates or initializes a namespace extension when it is invoked on a remote object. This interface is
            used, for example, to initialize the remote printers virtual folder.
            </summary>
            <remarks>
            <para>Implement <c>IRemoteComputer</c> when your namespace extension may be invoked on a remote computer.</para>
            <para>
            You do not call this interface directly. <c>IRemoteComputer</c> is used by the operating system only when it has confirmed that
            your application is aware of this interface.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IRemoteComputer.Initialize(System.String,System.Boolean)">
            <summary>
            Used by Windows Explorer or Windows Internet Explorer when it is initializing or enumerating a namespace extension invoked
            on a remote computer.
            </summary>
            <param name="pszMachine">
            <para>Type: <c>LPCWSTR</c></para>
            <para>A pointer to a buffer containing the machine name of the remote computer.</para>
            </param>
            <param name="bEnumerating">
            <para>Type: <c>BOOL</c></para>
            <para>
            A value that is set to <c>TRUE</c> if Windows Explorer is enumerating the namespace extension, or <c>FALSE</c> if it is
            initializing it.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>Returns S_OK if successful, or standard OLE error values otherwise.</para>
            </returns>
            <remarks>
            If failure is returned, the extension won't appear for the specified computer. Otherwise, the extension will appear and
            target the remote computer.
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.ISearchBoxInfo">
            <summary>Exposes methods that allow the caller to retrieve information entered into a search box.</summary>
            <remarks>
            <para>The search box is shown here in an Windows Explorer window frame.</para>
            <para>The frame that contains the search box might also be hosted in another window or in the common file dialog box.</para>
            <para>To access the search dialog, use QueryService using SID_SSearchBoxInfo on a site pointer within the Windows Explorer window.</para>
            <para>When to Implement</para>
            <para>An implementation of this interface is provided with Windows. Third parties do not need to implement their own version.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ISearchBoxInfo.GetCondition(System.Guid@,System.Object@)">
            <summary>Retrieves the contents of the search box as an ICondition object.</summary>
            <param name="riid">
            <para>Type: <c>REFIID</c></para>
            <para>A reference to the IID of the interface to retrieve through ppv, typically IID_ICondition.</para>
            </param>
            <param name="ppv">
            <para>Type: <c>void**</c></para>
            <para>When this method returns successfully, contains the interface pointer requested in riid. This is typically ICondition.</para>
            </param>
            <remarks>
            <para>
            As opposed to the text string retrieved by ISearchBoxInfo::GetText, <c>GetCondition</c> retrieves the same information as a
            structured object, the methods of which can be used to parse and manipulate the search string.
            </para>
            <para>
            We recommend that you use the <c>IID_PPV_ARGS</c> macro, defined in Objbase.h, to package the riid and ppv parameters. This
            macro provides the correct IID based on the interface pointed to by the value in ppv, which eliminates the possibility of a
            coding error in riid that could lead to unexpected results.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ISearchBoxInfo.GetText(Vanara.InteropServices.StrPtrUni@)">
            <summary>Retrieves the contents of the search box as plain text.</summary>
            <param name="ppsz">
            <para>Type: <c>LPWSTR*</c></para>
            <para>Pointer to a buffer that, when this method returns successfully, receives the full text entered in the search box.</para>
            </param>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IProfferService">
            <summary>Exposes a general mechanism for objects to offer services to other objects on the same host.</summary>
            <remarks>Objects that expose a service first call QueryInterface on their host for this interface, then execute IProfferService::ProfferService.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IProfferService.ProfferService(System.Guid@,Vanara.PInvoke.Shell32.IServiceProvider,System.UInt32@)">
            <summary>Makes a service available to other objects on the same host.</summary>
            <param name="guidService">
            <para>Type: <c>REFGUID</c></para>
            <para>A value of type <c>GUID</c> that specifies the service being offered.</para>
            </param>
            <param name="psp">
            <para>Type: <c>IServiceProvider*</c></para>
            <para>A pointer to an IServiceProvider interface.</para>
            </param>
            <param name="pdwCookie">
            <para>Type: <c>DWORD*</c></para>
            <para>
            A pointer to a <c>DWORD</c> that receives an implementation-defined value used for identification purposes. The calling
            application must keep track of this value for possible use in IProfferService::RevokeService.
            </para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IProfferService.RevokeService(System.UInt32)">
            <summary>Makes a service unavailable that had previously been available to other objects through IProfferService::ProfferService.</summary>
            <param name="dwCookie">
            <para>Type: <c>DWORD</c></para>
            <para>
            A value of type <c>DWORD</c> that specifies an implementation-defined value used for identification purposes. The calling
            application receives this value from IProfferService::ProfferService.
            </para>
            </param>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IServiceProvider">
            <summary>Defines a mechanism for retrieving a service object; that is, an object that provides custom support to other objects.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IServiceProvider.QueryService(System.Guid@,System.Guid@,System.IntPtr@)">
            <summary>Performs as a factory for services that are exposed through an implementation of IServiceProvider.</summary>
            <param name="guidService">A unique identifier of the requested service.</param>
            <param name="riid">A unique identifier of the interface which the caller wishes to receive for the service.</param>
            <param name="ppvObject">The interface specified by the <paramref name="riid"/> parameter.</param>
            <returns>If this method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.DEF_SHARE_ID">
            <summary>Values that specify the folder being acted on by methods of the ISharingConfigurationManager interface.</summary>
            <remarks>
            <para>
            In Windows Vista, an Server Message Block (SMB) share is created for both the <c>Users</c> and <c>Public</c> folders. As of
            Windows 7, the Public share is accessed through the Users share, so only <c>Users</c> is given an SMB share.
            </para>
            <para>
            When methods are called with the <c>DEFSHAREID_PUBLIC</c> value, the restrictions specified by the SHARE_ROLE value in that call
            apply to the Everyone access control entry (ACE).
            </para>
            <para>
            When methods are called with the <c>DEFSHAREID_USERS</c> value, the restrictions specified by the SHARE_ROLE value in that call
            apply to the Authenticated Users ACE.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DEF_SHARE_ID.DEFSHAREID_USERS">
            <summary>The Users folder (FOLDERID_UserProfiles). This folder is usually found at C:\Users.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DEF_SHARE_ID.DEFSHAREID_PUBLIC">
            <summary>The Public folder (FOLDERID_Public). This folder is usually found at C:\Users\Public.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.SHARE_ROLE">
            <summary>Specifies the access permissions assigned to the <c>Users</c> or <c>Public</c> folder. Used in CreateShare and GetSharePermissions.</summary>
            <remarks>
            ISharingConfigurationManager::CreateShare accepts only <c>SHARE_ROLE_READER</c> and <c>SHARE_ROLE_CO_OWNER</c>. All other values
            are seen only in the results of ISharingConfigurationManager::GetSharePermissions.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHARE_ROLE.SHARE_ROLE_INVALID">
            <summary>The folder is not shared.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHARE_ROLE.SHARE_ROLE_READER">
            <summary>The contents of the folder can be read, but not altered or added to.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHARE_ROLE.SHARE_ROLE_CONTRIBUTOR">
            <summary>
            The contents of the folder can be read and altered. New items can be added, however items can be deleted only by the user
            that contributed them.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHARE_ROLE.SHARE_ROLE_CO_OWNER">
            <summary>The contents of the folder can be read, changed, or added to.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHARE_ROLE.SHARE_ROLE_OWNER">
            <summary>Not normally used in the context of this interface.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHARE_ROLE.SHARE_ROLE_CUSTOM">
            <summary>The folder is shared, but the share role is neither SHARE_ROLE_READER, SHARE_ROLE_CONTRIBUTOR, or SHARE_ROLE_CO_OWNER.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHARE_ROLE.SHARE_ROLE_MIXED">
            <summary>Not used in the context of this interface.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.ISharingConfigurationManager">
            <summary>
            Exposes methods that set and retrieve information about a computer's default sharing settings for the <c>Users</c> () or
            <c>Public</c> () folder. Also exposes a set of methods that allow control of printer sharing.
            </summary>
            <remarks>
            <para>When to Implement</para>
            <para>
            An implementation of this interface is included in the <c>CSharingConfiguration</c> class. Third parties do not provide their
            own implementation.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ISharingConfigurationManager.CreateShare(Vanara.PInvoke.Shell32.DEF_SHARE_ID,Vanara.PInvoke.Shell32.SHARE_ROLE)">
            <summary>
            Shares the <c>Users</c> or <c>Public</c> folder. If the folder is already shared, this method updates its sharing status.
            </summary>
            <param name="dsid">
            <para>Type: <c>DEF_SHARE_ID</c></para>
            <para>One of the DEF_SHARE_ID values that indicates the folder to share or update.</para>
            </param>
            <param name="role">
            <para>Type: <c>SHARE_ROLE</c></para>
            <para>
            One of the following SHARE_ROLE values that sets the access permissions of the share for the Everyone ACE.
            <c>CreateShare</c> accepts only these values.
            </para>
            <para>SHARE_ROLE_READER (0)</para>
            <para>Read-only. The contents of the folder can be read, but not altered or added to.</para>
            <para>SHARE_ROLE_CO_OWNER (2)</para>
            <para>Read/Write. The contents of the folder can be read, changed, or added to.</para>
            </param>
            <remarks>
            <para>Running this method requires an Administrator privilege level.</para>
            <para>
            If the folder named in dsid is not shared, this method shares the folder using the permission level provided in the role parameter.
            </para>
            <para>
            If the folder named in dsid is already shared, this method updates the permissions on the share with the value provided in
            the role parameter.
            </para>
            <para>
            Because as of Windows 7 the <c>Public</c> folder is shared through <c>Users</c> rather than directly, creating a share on
            <c>Public</c> causes an Server Message Block (SMB) share to be created on <c>Users</c>.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ISharingConfigurationManager.DeleteShare(Vanara.PInvoke.Shell32.DEF_SHARE_ID)">
            <summary>Removes sharing from either the <c>Users</c> or <c>Public</c> folder.</summary>
            <param name="dsid">
            <para>Type: <c>DEF_SHARE_ID</c></para>
            <para>One of the DEF_SHARE_ID values that specifies the folder to no longer share.</para>
            </param>
            <remarks>Running this method requires an Administrator privilege level.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ISharingConfigurationManager.ShareExists(Vanara.PInvoke.Shell32.DEF_SHARE_ID)">
            <summary>Queries whether the <c>Users</c> or <c>Public</c> folder is shared.</summary>
            <param name="dsid">
            <para>Type: <c>DEF_SHARE_ID</c></para>
            <para>One of the DEF_SHARE_ID values that indicates the folder whose sharing state is being checked.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>S_OK if the folder is shared; otherwise, S_FALSE.</para>
            </returns>
            <remarks>
            Because as of Windows 7 <c>Public</c> is shared in-place through <c>Users</c>, callers should always check for the Users
            share first. If a share is found to exist on <c>Users</c>, then it follows that a share exists on <c>Public</c> as well.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ISharingConfigurationManager.GetSharePermissions(Vanara.PInvoke.Shell32.DEF_SHARE_ID)">
            <summary>
            Gets the access permissions currently associated with the <c>User</c> or <c>Public</c> folder for the Everyone access
            control entry (ACE).
            </summary>
            <param name="dsid">
            <para>Type: <c>DEF_SHARE_ID</c></para>
            <para>One of the DEF_SHARE_ID values that specifies the folder.</para>
            </param>
            <returns>
            <para>Type: <c>SHARE_ROLE*</c></para>
            <para>
            A pointer to a value that, when this method returns successfully, receives one of the SHARE_ROLE values that indicate the
            sharing permissions set for the folder specified in the dsid parameter.
            </para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ISharingConfigurationManager.SharePrinters">
            <summary>
            Shares all local printers connected to a computer, enabling them to be discovered by other computers on the network.
            </summary>
            <remarks>Running this method requires an Administrator privilege level.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ISharingConfigurationManager.StopSharingPrinters">
            <summary>Stops sharing all local, shared printers connected to a computer.</summary>
            <remarks>Running this method requires an Administrator privilege level.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ISharingConfigurationManager.ArePrintersShared">
            <summary>Determines whether any printers connected to this computer are shared.</summary>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>Returns standard HRESULT values, including the following:</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>S_OK</term>
            <term>Shared printers were detected.</term>
            </item>
            <item>
            <term>S_FALSE</term>
            <term>No shared printers were found.</term>
            </item>
            <item>
            <term>ERROR_FILE_NOT_FOUND</term>
            <term>No printers capable of being shared were found.</term>
            </item>
            </list>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.SharingConfigurationManager">
            <summary>CLSID_SharingConfigurationManager</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IShellExtInit">
            <summary>
            Exposes a method that initializes Shell extensions for property sheets, shortcut menus, and drag-and-drop handlers (extensions
            that add items to shortcut menus during nondefault drag-and-drop operations).
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellExtInit.Initialize(Vanara.PInvoke.Shell32.PIDL,System.Runtime.InteropServices.ComTypes.IDataObject,Vanara.PInvoke.HKEY)">
            <summary>Initializes a property sheet extension, shortcut menu extension, or drag-and-drop handler.</summary>
            <param name="pidlFolder">
            A pointer to an ITEMIDLIST structure that uniquely identifies a folder. For property sheet extensions, this parameter is
            NULL. For shortcut menu extensions, it is the item identifier list for the folder that contains the item whose shortcut menu
            is being displayed. For nondefault drag-and-drop menu extensions, this parameter specifies the target folder.
            </param>
            <param name="pdtobj">
            A pointer to an IDataObject interface object that can be used to retrieve the objects being acted upon.
            </param>
            <param name="hkeyProgId">The registry key for the file object or folder type.</param>
            <returns>If this method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHCIDS_COLUMNMASK">
            <summary> To extract the sorting rule, use a bitwise AND operator (&amp;) to combine lParam with SHCIDS_COLUMNMASK (0X0000FFFF).
            This operation masks off the upper sixteen bits of lParam. </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.CATEGORYINFO_FLAGS">
            <summary>Provides a set of flags for use with the CATEGORY_INFO structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CATEGORYINFO_FLAGS.CATINFO_NORMAL">
            <summary>0x00000000. Applies default properties for the category.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CATEGORYINFO_FLAGS.CATINFO_COLLAPSED">
            <summary>0x00000001. The category should appear as collapsed</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CATEGORYINFO_FLAGS.CATINFO_HIDDEN">
            <summary>0x00000002. The category should appear as hidden.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CATEGORYINFO_FLAGS.CATINFO_EXPANDED">
            <summary>0x00000004. The category should appear as expanded.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CATEGORYINFO_FLAGS.CATINFO_NOHEADER">
            <summary>0x00000008. The category has no header.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CATEGORYINFO_FLAGS.CATINFO_NOTCOLLAPSIBLE">
            <summary>0x00000010. The category cannot be collapsed.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CATEGORYINFO_FLAGS.CATINFO_NOHEADERCOUNT">
            <summary>0x00000020. The count of items in the category should not be displayed in the header.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CATEGORYINFO_FLAGS.CATINFO_SUBSETTED">
            <summary>0x00000040. Windows 7 and later. The category should appear subsetted.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CATEGORYINFO_FLAGS.CATINFO_SEPARATE_IMAGES">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CATEGORYINFO_FLAGS.CATINFO_SHOWEMPTY">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.CATSORT_FLAGS">
            <summary>Specifies methods for sorting category data.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CATSORT_FLAGS.CATSORT_DEFAULT">
            <summary>Use the default sort order.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CATSORT_FLAGS.CATSORT_NAME">
            <summary>Use a method that sorts on category names.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.FOLDER_ENUM_MODE">
            <summary>
            Used by IObjectWithFolderEnumMode::GetMode and IObjectWithFolderEnumMode::SetMode methods to get and set the display modes for
            the folders.
            </summary>
            <remarks>
            If an item does not support the enumeration mode value (because it is not a folder or it does not provide the enumeration mode)
            then it is created in the default enumeration mode.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDER_ENUM_MODE.FEM_VIEWRESULT">
            <summary>Display mode to view the contents of a folder.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDER_ENUM_MODE.FEM_NAVIGATION">
            <summary>Display mode to view the contents of the folders in the navigation pane.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.SHCIDS">
            <summary>Flags that modify the sorting rule.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHCIDS.SHCIDS_CANONICALONLY">
            <summary>
            Version 5.0. When comparing by name, compare the system names but not the display names. When this flag is passed, the two
            items are compared by whatever criteria the Shell folder determines are most efficient, as long as it implements a
            consistent sort function. This flag is useful when comparing for equality or when the results of the sort are not displayed
            to the user. This flag cannot be combined with other flags.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHCIDS.SHCIDS_ALLFIELDS">
            <summary>
            Version 5.0. Compare all the information contained in the ITEMIDLIST structure, not just the display names. This flag is
            valid only for folder objects that support the IShellFolder2 interface. For instance, if the two items are files, the folder
            should compare their names, sizes, file times, attributes, and any other information in the structures. If this flag is set,
            the lower sixteen bits of lParam must be zero.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.SHCONTF">
            <summary>
            Determines the types of items included in an enumeration. These values are used with the IShellFolder::EnumObjects method.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHCONTF.SHCONTF_CHECKING_FOR_CHILDREN">
            <summary>Windows 7 and later. The calling application is checking for the existence of child items in the folder.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHCONTF.SHCONTF_FOLDERS">
            <summary>Include items that are folders in the enumeration.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHCONTF.SHCONTF_NONFOLDERS">
            <summary>Include items that are not folders in the enumeration.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHCONTF.SHCONTF_INCLUDEHIDDEN">
            <summary>
            Include hidden items in the enumeration. This does not include hidden system items. (To include hidden system items, use SHCONTF_INCLUDESUPERHIDDEN.)
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHCONTF.SHCONTF_INIT_ON_FIRST_NEXT">
            <summary>
            No longer used; always assumed. IShellFolder::EnumObjects can return without validating the enumeration object. Validation
            can be postponed until the first call to IEnumIDList::Next. Use this flag when a user interface might be displayed prior to
            the first IEnumIDList::Next call. For a user interface to be presented, hwnd must be set to a valid window handle.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHCONTF.SHCONTF_NETPRINTERSRCH">
            <summary>The calling application is looking for printer objects.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHCONTF.SHCONTF_SHAREABLE">
            <summary>The calling application is looking for resources that can be shared.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHCONTF.SHCONTF_STORAGE">
            <summary>Include items with accessible storage and their ancestors, including hidden items.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHCONTF.SHCONTF_NAVIGATION_ENUM">
            <summary>Windows 7 and later. Child folders should provide a navigation enumeration.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHCONTF.SHCONTF_FASTITEMS">
            <summary>Windows Vista and later. The calling application is looking for resources that can be enumerated quickly.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHCONTF.SHCONTF_FLATLIST">
            <summary>
            Windows Vista and later. Enumerate items as a simple list even if the folder itself is not structured in that way.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHCONTF.SHCONTF_ENABLE_ASYNC">
            <summary>
            Windows Vista and later. The calling application is monitoring for change notifications. This means that the enumerator does
            not have to return all results. Items can be reported through change notifications.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHCONTF.SHCONTF_INCLUDESUPERHIDDEN">
            <summary>
            Windows 7 and later. Include hidden system items in the enumeration. This value does not include hidden non-system items.
            (To include hidden non-system items, use SHCONTF_INCLUDEHIDDEN.)
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.SHGDNF">
            <summary>
            Defines the values used with the IShellFolder::GetDisplayNameOf and IShellFolder::SetNameOf methods to specify the type of file
            or folder names used by those methods.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHGDNF.SHGDN_FORADDRESSBAR">
            <summary>The name is displayed in an address bar combo box.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHGDNF.SHGDN_FOREDITING">
            <summary>The name is used for in-place editing when the user renames the item.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHGDNF.SHGDN_FORPARSING">
            <summary>
            The name is used for parsing. That is, it can be passed to IShellFolder::ParseDisplayName to recover the object's PIDL. The
            form this name takes depends on the particular object. When SHGDN_FORPARSING is used alone, the name is relative to the
            desktop. When combined with SHGDN_INFOLDER, the name is relative to the folder from which the request was made.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHGDNF.SHGDN_INFOLDER">
            <summary>
            The name is relative to the folder from which the request was made. This is the name display to the user when used in the
            context of the folder. For example, it is used in the view and in the address bar path segment for the folder. This name
            should not include disambiguation information—for instance "username" instead of "username (on Machine)" for a particular
            user's folder. Use this flag in combinations with SHGDN_FORPARSING and SHGDN_FOREDITING.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHGDNF.SHGDN_NORMAL">
            <summary>
            When not combined with another flag, return the parent-relative name that identifies the item, suitable for displaying to
            the user. This name often does not include extra information such as the file name extension and does not need to be unique.
            This name might include information that identifies the folder that contains the item. For instance, this flag could cause
            IShellFolder::GetDisplayNameOf to return the string "username (on Machine)" for a particular user's folder.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.ICategorizer">
            <summary>Exposes methods that are used to obtain information about item identifier lists.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ICategorizer.GetDescription(System.Text.StringBuilder,System.UInt32)">
            <summary>Gets the name of a categorizer, such as Group By Device Type, that can be displayed in the UI.</summary>
            <param name="pszDesc">
            <para>Type: <c>LPWSTR</c></para>
            <para>When this method returns, contains a pointer to a string of length cch that contains the categorizer name.</para>
            </param>
            <param name="cch">
            <para>Type: <c>UINT</c></para>
            <para>The number of characters in the pszDesc buffer.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            In the case of the system folder view object, if the description at pszDesc matches one of the category names listed in the
            folder's <c>Arrange Icons By</c> menu, a dot is placed by that name when the menu is displayed, either through the
            <c>View</c> menu or through the context menu.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ICategorizer.GetCategory(System.UInt32,System.IntPtr[],System.UInt32[])">
            <summary>Gets a list of categories associated with a list of identifiers.</summary>
            <param name="cidl">
            <para>Type: <c>UINT</c></para>
            <para>The number of items in an item identifier list array.</para>
            </param>
            <param name="apidl">
            <para>Type: <c>PCUITEMID_CHILD_ARRAY*</c></para>
            <para>A pointer to an array of cidl item identifier list pointers.</para>
            </param>
            <param name="rgCategoryIds">
            <para>Type: <c>DWORD*</c></para>
            <para>When this method returns, contains a pointer to an array of cidl category identifiers.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            <para>
            The <c>ICategorizer::GetCategory</c> method accepts an array of pointers to item identifier lists (PIDLs) and fills an array
            of category identifiers.
            </para>
            <para><c>Important</c> The value -1 is an invalid category identifier.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ICategorizer.GetCategoryInfo(System.UInt32,Vanara.PInvoke.Shell32.CATEGORY_INFO@)">
            <summary>Gets information about a category, such as the default display and the text to display in the UI.</summary>
            <param name="dwCategoryId">
            <para>Type: <c>DWORD</c></para>
            <para>A <c>DWORD</c> that specifies a category identifier.</para>
            </param>
            <param name="pci">
            <para>Type: <c>CATEGORY_INFO*</c></para>
            <para>When this method returns, contains a pointer to a CATEGORY_INFO structure that contains the category information.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ICategorizer.CompareCategory(Vanara.PInvoke.Shell32.CATSORT_FLAGS,System.UInt32,System.UInt32)">
            <summary>Determines the relative order of two items in their item identifier lists, and hence in the UI.</summary>
            <param name="csfFlags">
            <para>Type: <c>CATSORT_FLAGS</c></para>
            <para>A flag that specifies how the comparison should be performed. The parameter should be one of the values in CATSORT_FLAGS.</para>
            </param>
            <param name="dwCategoryId1">
            <para>Type: <c>DWORD</c></para>
            <para>A <c>DWORD</c> that specifies the first category identifier to use in the comparison.</para>
            </param>
            <param name="dwCategoryId2">
            <para>Type: <c>DWORD</c></para>
            <para>A <c>DWORD</c> that specifies the second category identifier to use in the comparison.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>
            If this method is successful, the CODE field of the HRESULT contains a value that specifies the outcome of the comparison,
            otherwise it returns a COM error code.
            </para>
            </returns>
            <remarks>
            <para>The following table shows the values returned in the CODE field of the HRESULT.</para>
            <list type="table">
            <listheader>
            <term>Less than zero</term>
            <term>The first item should precede the second (dwCategoryId1 &lt; dwCategoryId2).</term>
            </listheader>
            <item>
            <term>Greater than zero</term>
            <term>The first item should follow the second (dwCategoryId1 &gt; dwCategoryId2).</term>
            </item>
            <item>
            <term>Zero</term>
            <term>The two items are the same (dwCategoryId1 = dwCategoryId2).</term>
            </item>
            </list>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.ICategoryProvider">
            <summary>Exposes a list of categorizers registered on an IShellFolder.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ICategoryProvider.CanCategorizeOnSCID(Vanara.PInvoke.Ole32.PROPERTYKEY@)">
            <summary>Determines whether a column can be used as a category.</summary>
            <param name="pscid">
            <para>Type: <c>const SHCOLUMNID*</c></para>
            <para>
            A pointer to a SHCOLUMNID structure that identifies the column. Valid only when S_OK is returned. The GUID contained in this
            structure is then passed to ICategoryProvider::CreateCategory.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>Returns S_OK if the column can be used as a category or S_FALSE if not.</para>
            </returns>
            <remarks>
            When using the System Folder View Object in Category view ( <c>Show in Groups</c>), the titles of columns for which this
            method returns S_OK appear in the upper portion of the <c>Arrange Icons By</c> submenu.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ICategoryProvider.GetDefaultCategory(System.Guid@,Vanara.PInvoke.Ole32.PROPERTYKEY@)">
            <summary>Enables the folder to override the default grouping.</summary>
            <param name="pguid">
            <para>Type: <c>GUID*</c></para>
            <para>Not used.</para>
            </param>
            <param name="pscid">
            <para>Type: <c>SHCOLUMNID*</c></para>
            <para>When this method returns, contains a pointer to a SHCOLUMNID structure.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>Returns S_OK if successful, or an error value otherwise, including the following:</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>S_FALSE</term>
            <term>There is no default group.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            <c>ICategoryProvider::GetDefaultCategory</c> returns an SHCOLUMNID structure that is used by the default categorizer. The
            method returns S_FALSE if a default group is not supported.
            </para>
            <para>
            <c>ICategoryProvider::GetDefaultCategory</c> is called only when a folder is first opened. After that, the user's grouping
            choice is cached in the property bag storing the state of the view. To force a call to
            <c>ICategoryProvider::GetDefaultCategory</c> after the folder is first opened, the <c>Shell</c> and <c>ShellNoRoam</c>
            registry keys must be deleted. They are found in the following location.
            </para>
            <para><c>Software</c><c>Microsoft</c><c>Windows</c><c>Shell</c><c>ShellNoRoam</c></para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ICategoryProvider.GetCategoryForSCID(Vanara.PInvoke.Ole32.PROPERTYKEY@,System.Guid@)">
            <summary>Gets a GUID that represents the categorizer to use for the specified Shell column.</summary>
            <param name="pscid">
            <para>Type: <c>const SHCOLUMNID*</c></para>
            <para>A pointer to a SHCOLUMNID structure.</para>
            </param>
            <param name="pguid">
            <para>Type: <c>GUID*</c></para>
            <para>
            When this method returns, contains a pointer to a GUID that represents the categorizer to use for the SHCOLUMNID pointed to
            by pscid.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>Returns either S_OK on success or S_FALSE on failure.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ICategoryProvider.EnumCategories(Vanara.PInvoke.Ole32.IEnumGUID@)">
            <summary>Gets the enumerator for the list of GUIDs that represent categories.</summary>
            <param name="penum">
            <para>Type: <c>IEnumGUID**</c></para>
            <para>
            When this method returns, contains the address of a pointer to an <c>IEnumGUID</c> interface that specifies a list of GUIDs
            that represent categories.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            In the case of the system folder view object, <c>ICategoryProvider::EnumCategories</c> is used to obtain additional
            categories that are not associated with a column. When the list of category GUIDs is returned through penum, the UI attempts
            to retrieve the name of each category. That name is then displayed as a category choice. In the case of Windows XP, that
            choice appears in the folder's <c>Arrange Icons By</c> menu.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ICategoryProvider.GetCategoryName(System.Guid@,System.Text.StringBuilder,System.UInt32)">
            <summary>Gets the name of the specified category.</summary>
            <param name="pguid">
            <para>Type: <c>const GUID*</c></para>
            <para>A pointer to a GUID.</para>
            </param>
            <param name="pszName">
            <para>Type: <c>LPWSTR</c></para>
            <para>When this method returns, contains a pointer to a string that receives the name of the category.</para>
            </param>
            <param name="cch">
            <para>Type: <c>UINT</c></para>
            <para>An integer that receives the number of characters in the string.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ICategoryProvider.CreateCategory(System.Guid@,System.Guid@,System.Object@)">
            <summary>Creates a category object.</summary>
            <param name="pguid">
            <para>Type: <c>const GUID*</c></para>
            <para>A pointer to the <c>GUID</c> for the category object.</para>
            </param>
            <param name="riid">
            <para>Type: <c>REFIID</c></para>
            <para>The identifier of the object to return. Currently, the only value supported by the system folder view object is IID_ICategorizer.</para>
            </param>
            <param name="ppv">
            <para>Type: <c>void**</c></para>
            <para>When this method returns, contains the address of a pointer to the category object.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.CreateCategory(Vanara.PInvoke.Shell32.ICategoryProvider,System.Guid@)">
            <summary>Creates a category object.</summary>
            <param name="prov">The <see cref="T:Vanara.PInvoke.Shell32.ICategoryProvider"/> instance.</param>
            <param name="pguid">The <c>GUID</c> for the category object.</param>
            <returns>The category object.</returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IEnumExtraSearch">
            <summary>A standard OLE enumerator used by a client to determine the available search objects for a folder.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IEnumExtraSearch.Next(System.UInt32,Vanara.PInvoke.Shell32.EXTRASEARCH[],System.UInt32@)">
            <summary>Used to request information on one or more search objects.</summary>
            <param name="celt">
            The number of search objects to be enumerated, starting from the current object. If celt is too large, the method should
            stop and return the actual number of search objects in pceltFetched.
            </param>
            <param name="rgelt">
            A pointer to an array of pceltFetched EXTRASEARCH structures containing information on the enumerated objects.
            </param>
            <param name="pceltFetched">The number of objects actually enumerated. This may be less than celt.</param>
            <returns>Returns S_OK if successful, or a COM-defined error code otherwise.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IEnumExtraSearch.Skip(System.UInt32)">
            <summary>Skip a specified number of objects.</summary>
            <param name="celt">The number of objects to skip.</param>
            <returns>Returns S_OK if successful, or a COM-defined error code otherwise.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IEnumExtraSearch.Reset">
            <summary>Used to reset the enumeration index to zero.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IEnumExtraSearch.Clone">
            <summary>Used to request a duplicate of the enumerator object to preserve its current state.</summary>
            <returns>A pointer to the IEnumExtraSearch interface of a new enumerator object.</returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IObjectWithFolderEnumMode">
            <summary>Exposes methods that get and set enumeration modes of a parsed item.</summary>
            <remarks>
            <para>When to Implement</para>
            <para>This interface is implemented as part of a Shell namespace extension, specifically the IShellFolder interface.</para>
            <para>When to Use</para>
            <para>
            This interface is used by the IShellFolder::ParseDisplayName method to retrieve the FOLDER_ENUM_MODE value which controls the
            enumeration mode of the parsed item.
            </para>
            <para>
            Items with different enumeration modes compare canonically different (SHCIDS_CANONICALONLY) because they enumerate different
            sets of items.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IObjectWithFolderEnumMode.SetMode(Vanara.PInvoke.Shell32.FOLDER_ENUM_MODE)">
            <summary>Sets the enumeration mode of the parsed item.</summary>
            <param name="feMode">
            <para>Type: <c>FOLDER_ENUM_MODE</c></para>
            <para>One of the FOLDER_ENUM_MODE values that specify the enumeration mode.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IObjectWithFolderEnumMode.GetMode(Vanara.PInvoke.Shell32.FOLDER_ENUM_MODE@)">
            <summary>Retrieves the enumeration mode of the parsed item.</summary>
            <param name="pfeMode">
            <para>Type: <c>FOLDER_ENUM_MODE*</c></para>
            <para>Pointer to a value that, when this method returns successfully, receives one of the FOLDER_ENUM_MODE values specifying the enumeration mode.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IShellFolder">
            <summary>Exposed by all Shell namespace folder objects, its methods are used to manage folders.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellFolder.ParseDisplayName(Vanara.PInvoke.HWND,System.Runtime.InteropServices.ComTypes.IBindCtx,System.String,System.UInt32@,Vanara.PInvoke.Shell32.PIDL@,Vanara.PInvoke.Shell32.SFGAO@)">
            <summary>Translates the display name of a file object or a folder into an item identifier list.</summary>
            <param name="hwnd">
            <para>Type: <c>HWND</c></para>
            <para>
            A window handle. The client should provide a window handle if it displays a dialog or message box. Otherwise set hwnd to <c>NULL</c>.
            </para>
            </param>
            <param name="pbc">
            <para>Type: <c>IBindCtx*</c></para>
            <para>
            Optional. A pointer to a bind context used to pass parameters as inputs and outputs to the parsing function. These passed
            parameters are often specific to the data source and are documented by the data source owners. For example, the file system
            data source accepts the name being parsed (as a WIN32_FIND_DATA structure), using the STR_FILE_SYS_BIND_DATA bind context
            parameter. STR_PARSE_PREFER_FOLDER_BROWSING can be passed to indicate that URLs are parsed using the file system data source
            when possible. Construct a bind context object using CreateBindCtx and populate the values using
            IBindCtx::RegisterObjectParam. See <c>Bind Context String Keys</c> for a complete list of these.
            </para>
            <para>If no data is being passed to or received from the parsing function, this value can be <c>NULL</c>.</para>
            </param>
            <param name="pszDisplayName">
            <para>Type: <c>LPWSTR</c></para>
            <para>
            A null-terminated Unicode string with the display name. Because each Shell folder defines its own parsing syntax, the form
            this string can take may vary. The desktop folder, for instance, accepts paths such as "C:\My Docs\My File.txt". It also
            will accept references to items in the namespace that have a GUID associated with them using the "::{GUID}" syntax. For
            example, to retrieve a fully qualified identifier list for the control panel from the desktop folder, you can use the following:
            </para>
            <para><c>::{CLSID for Control Panel}\::{CLSID for printers folder}</c></para>
            </param>
            <param name="pchEaten">
            <para>Type: <c>ULONG*</c></para>
            <para>
            A pointer to a <c>ULONG</c> value that receives the number of characters of the display name that was parsed. If your
            application does not need this information, set pchEaten to <c>NULL</c>, and no value will be returned.
            </para>
            </param>
            <param name="ppidl">
            <para>Type: <c>PIDLIST_RELATIVE*</c></para>
            <para>
            When this method returns, contains a pointer to the PIDL for the object. The returned item identifier list specifies the
            item relative to the parsing folder. If the object associated with pszDisplayName is within the parsing folder, the returned
            item identifier list will contain only one SHITEMID structure. If the object is in a subfolder of the parsing folder, the
            returned item identifier list will contain multiple <c>SHITEMID</c> structures. If an error occurs, <c>NULL</c> is returned
            in this address.
            </para>
            <para>When it is no longer needed, it is the responsibility of the caller to free this resource by calling CoTaskMemFree.</para>
            </param>
            <param name="pdwAttributes">
            <para>Type: <c>ULONG*</c></para>
            <para>
            The value used to query for file attributes. If not used, it should be set to <c>NULL</c>. To query for one or more
            attributes, initialize this parameter with the SFGAO flags that represent the attributes of interest. On return, those
            attributes that are true and were requested will be set.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            <para>
            Some Shell folders may not implement <c>IShellFolder::ParseDisplayName</c>. Each folder that does will define its own
            parsing syntax.
            </para>
            <para>
            <c>ParseDisplayName</c> is not expected to handle the relative path or parent folder indicators ("." or ".."). It is up to
            the caller to remove these appropriately.
            </para>
            <para>
            Do not use the SFGAO_VALIDATE flag in pdwAttributes to verify the existence of the item whose name is being parsed.
            <c>IShellFolder::ParseDisplayName</c> implicitly validates the existence of the item unless that behavior is overridden by a
            special bind context parameter.
            </para>
            <para>
            Querying for some attributes may be relatively slow and use significant amounts of memory. For example, to determine if a
            file is shared, the Shell will load network components. This procedure may require the loading of several DLLs. The purpose
            of pdwAttributes is to allow you to restrict the query to only that information that is needed. The following code fragment
            illustrates how to find out if a file is compressed.
            </para>
            <para>
            <code>LPITEMIDLIST pidl; ULONG cbEaten; DWORD dwAttribs = SFGAO_COMPRESSED; hres = psf-&gt;ParseDisplayName(NULL, NULL, lpwszDisplayName, &amp;cbEaten, // This can be NULL &amp;pidl, &amp;dwAttribs); if(dwAttribs &amp; SFGAO_COMPRESSED) { // Do something with the compressed file }</code>
            </para>
            <para>
            Since pdwAttributes is an in/out parameter, it should always be initialized. If you pass in an uninitialized value, some of
            the bits may be inadvertantly set. <c>IShellFolder::ParseDisplayName</c> will then query for the corresponding attributes,
            which may lead to undesirable delays or memory demands. If you do not wish to query for attributes, set pdwAttributes to
            <c>NULL</c> to avoid unpredictable behavior.
            </para>
            <para>This method is similar to the IParseDisplayName::ParseDisplayName method.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellFolder.EnumObjects(Vanara.PInvoke.HWND,Vanara.PInvoke.Shell32.SHCONTF,Vanara.PInvoke.Shell32.IEnumIDList@)">
            <summary>
            Enables a client to determine the contents of a folder by creating an item identifier enumeration object and returning its
            IEnumIDList interface. The methods supported by that interface can then be used to enumerate the folder's contents.
            </summary>
            <param name="hwnd">
            <para>Type: <c>HWND</c></para>
            <para>
            If user input is required to perform the enumeration, this window handle should be used by the enumeration object as the
            parent window to take user input. An example would be a dialog box to ask for a password or prompt the user to insert a CD
            or floppy disk. If hwndOwner is set to <c>NULL</c>, the enumerator should not post any messages, and if user input is
            required, it should silently fail.
            </para>
            </param>
            <param name="grfFlags">
            <para>Type: <c>SHCONTF</c></para>
            <para>
            Flags indicating which items to include in the enumeration. For a list of possible values, see the SHCONTF enumerated type.
            </para>
            </param>
            <param name="ppenumIDList">
            <para>Type: <c>IEnumIDList**</c></para>
            <para>
            The address that receives a pointer to the IEnumIDList interface of the enumeration object created by this method. If an
            error occurs or no suitable subobjects are found, ppenumIDList is set to <c>NULL</c>.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>Returns
            <code>S_OK</code>
            if successful, or an error value otherwise. Some implementations may also return
            <code>S_FALSE</code>
            , indicating that there are no children matching the grfFlags that were passed in. If
            <code>S_FALSE</code>
            is returned, ppenumIDList is set to
            <code>NULL</code>
            .
            </para>
            </returns>
            <remarks>
            <para>
            If the method returns S_OK, then ppenumIDList receives a pointer to an enumerator. In this case, the calling application
            must free the returned IEnumIDList object by calling its <c>Release</c> method.
            </para>
            <para>
            If the method returns S_FALSE, then the folder contains no suitable subobjects and the pointer specified in ppenumIDList is
            set to <c>NULL</c>.
            </para>
            <para>If the method fails, an error value is returned and the pointer specified in ppenumIDList is set to <c>NULL</c>.</para>
            <para>
            If the folder contains no suitable subobjects, then the <c>IShellFolder::EnumObjects</c> method is permitted either to set
            *ppenumIDList to <c>NULL</c> and return S_FALSE, or to set *ppenumIDList to an enumerator that produces no objects and
            return S_OK. Calling applications must be prepared for both success cases.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellFolder.BindToObject(Vanara.PInvoke.Shell32.PIDL,System.Runtime.InteropServices.ComTypes.IBindCtx,System.Guid@,System.Object@)">
            <summary>
            Retrieves a handler, typically the Shell folder object that implements IShellFolder for a particular item. Optional
            parameters that control the construction of the handler are passed in the bind context.
            </summary>
            <param name="pidl">
            <para>Type: <c>PCUIDLIST_RELATIVE</c></para>
            <para>
            The address of an ITEMIDLIST structure (PIDL) that identifies the subfolder. This value can refer to an item at any level
            below the parent folder in the namespace hierarchy. The structure contains one or more SHITEMID structures, followed by a
            terminating <c>NULL</c>.
            </para>
            </param>
            <param name="pbc">
            <para>Type: <c>IBindCtx*</c></para>
            <para>
            A pointer to an IBindCtx interface on a bind context object that can be used to pass parameters to the construction of the
            handler. If this parameter is not used, set it to <c>NULL</c>. Because support for this parameter is optional for folder
            object implementations, some folders may not support the use of bind contexts.
            </para>
            <para>
            Information that can be provided in the bind context includes a BIND_OPTS structure that includes a <c>grfMode</c> member
            that indicates the access mode when binding to a stream handler. Other parameters can be set and discovered using
            IBindCtx::RegisterObjectParam and IBindCtx::GetObjectParam.
            </para>
            </param>
            <param name="riid">
            <para>Type: <c>REFIID</c></para>
            <para>
            The identifier of the interface to return. This may be <c>IID_IShellFolder</c>, <c>IID_IStream</c>, or any other interface
            that identifies a particular handler.
            </para>
            </param>
            <param name="ppv">
            <para>Type: <c>void**</c></para>
            <para>
            When this method returns, contains the address of a pointer to the requested interface. If an error occurs, a <c>NULL</c>
            pointer is returned at this address.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            <para>
            Applications use <c>IShellFolder::BindToObject</c><c>(..., IID_IShellFolder, ...)</c> to obtain the Shell folder object for
            a subitem. Clients should pass the canonical interface IID that is used to identify a specific handler. For example,
            <c>IID_IShellFolder</c> identifies the folder handler and <c>IID_IStream</c> identifies the stream handler. Implementations
            can support binding to handlers using derived interfaces as well, such as <c>IID_IShellFolder2</c>. A Shell namespace
            extension can implement this function by creating the Shell folder object for the specified subitem and then calling
            QueryInterface to communicate with the object through its interface pointer.
            </para>
            <para>
            Implementations of <c>BindToObject</c> can optimize any call to it by quickly failing for IID values that it does not
            support. For example, if the Shell folder object of the subitem does not support IRemoteComputer, the implementation should
            return <c>E_NOINTERFACE</c> immediately instead of needlessly creating the Shell folder object for the subitem and then
            finding that <c>IRemoteComputer</c> was not supported after all.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellFolder.BindToStorage(Vanara.PInvoke.Shell32.PIDL,System.Runtime.InteropServices.ComTypes.IBindCtx,System.Guid@,System.Object@)">
            <summary>Requests a pointer to an object's storage interface.</summary>
            <param name="pidl">
            <para>Type: <c>PCUIDLIST_RELATIVE</c></para>
            <para>
            The address of an ITEMIDLIST structure that identifies the subfolder relative to its parent folder. The structure must
            contain exactly one SHITEMID structure followed by a terminating zero.
            </para>
            </param>
            <param name="pbc">
            <para>Type: <c>IBindCtx*</c></para>
            <para>
            The optional address of an IBindCtx interface on a bind context object to be used during this operation. If this parameter
            is not used, set it to <c>NULL</c>. Because support for pbc is optional for folder object implementations, some folders may
            not support the use of bind contexts.
            </para>
            </param>
            <param name="riid">
            <para>Type: <c>REFIID</c></para>
            <para>
            The IID of the requested storage interface. To retrieve an IStream, IStorage, or IPropertySetStorage interface pointer, set
            riid to <c>IID_IStream</c>, <c>IID_IStorage</c>, or <c>IID_IPropertySetStorage</c>, respectively.
            </para>
            </param>
            <param name="ppv">
            <para>Type: <c>void**</c></para>
            <para>
            The address that receives the interface pointer specified by riid. If an error occurs, a <c>NULL</c> pointer is returned in
            this address.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            Namespace extensions have the option of allowing applications to bind to an object that represents an item's storage. If
            this option is supported, <c>IShellFolder::BindToStorage</c> returns a specified interface pointer that can then be used to
            access the contents of object. See the IMoniker::BindToStorage reference for further discussion.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellFolder.CompareIDs(System.IntPtr,Vanara.PInvoke.Shell32.PIDL,Vanara.PInvoke.Shell32.PIDL)">
            <summary>Determines the relative order of two file objects or folders, given their item identifier lists.</summary>
            <param name="lParam">
            A value that specifies how the comparison should be performed.
            <para>
            The lower sixteen bits of lParam define the sorting rule. Most applications set the sorting rule to the default value of
            zero, indicating that the two items should be compared by name. The system does not define any other sorting rules. Some
            folder objects might allow calling applications to use the lower sixteen bits of lParam to specify folder-specific sorting
            rules. The rules and their associated lParam values are defined by the folder.
            </para>
            <para>
            When the system folder view object calls IShellFolder::CompareIDs, the lower sixteen bits of lParam are used to specify the
            column to be used for the comparison.
            </para>
            <para>
            The upper sixteen bits of lParam are used for flags that modify the sorting rule. The system currently defines these
            modifier flags.
            </para>
            <list>
            <item>
            <term>SHCIDS_ALLFIELDS</term>
            <description>
            Version 5.0. Compare all the information contained in the ITEMIDLIST structure, not just the display names. This flag is
            valid only for folder objects that support the IShellFolder2 interface. For instance, if the two items are files, the folder
            should compare their names, sizes, file times, attributes, and any other information in the structures. If this flag is set,
            the lower sixteen bits of lParam must be zero.
            </description>
            </item>
            <item>
            <term>SHCIDS_CANONICALONLY</term>
            <description>
            Version 5.0. When comparing by name, compare the system names but not the display names. When this flag is passed, the two
            items are compared by whatever criteria the Shell folder determines are most efficient, as long as it implements a
            consistent sort function. This flag is useful when comparing for equality or when the results of the sort are not displayed
            to the user. This flag cannot be combined with other flags.
            </description>
            </item>
            </list>
            </param>
            <param name="pidl1">
            A pointer to the first item's ITEMIDLIST structure. It will be relative to the folder. This ITEMIDLIST structure can contain
            more than one element; therefore, the entire structure must be compared, not just the first element.
            </param>
            <param name="pidl2">
            A pointer to the second item's ITEMIDLIST structure. It will be relative to the folder. This ITEMIDLIST structure can
            contain more than one element; therefore, the entire structure must be compared, not just the first element.
            </param>
            <returns>
            If this method is successful, the CODE field of the HRESULT contains one of the following values. For information regarding
            the extraction of the CODE field from the returned HRESULT, see Remarks. If this method is unsuccessful, it returns a COM
            error code.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellFolder.CreateViewObject(Vanara.PInvoke.HWND,System.Guid@,System.Object@)">
            <summary>Requests an object that can be used to obtain information from or interact with a folder object.</summary>
            <param name="hwndOwner">
            <para>Type: <c>HWND</c></para>
            <para>
            A handle to the owner window. If you have implemented a custom folder view object, your folder view window should be created
            as a child of hwndOwner.
            </para>
            </param>
            <param name="riid">
            <para>Type: <c>REFIID</c></para>
            <para>A reference to the IID of the interface to retrieve through ppv, typically IID_IShellView.</para>
            </param>
            <param name="ppv">
            <para>Type: <c>void**</c></para>
            <para>
            When this method returns successfully, contains the interface pointer requested in riid. This is typically IShellView. See
            the Remarks section for more details.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            <para>
            To support this request, create an object that exposes the interface indicated by riid and return a pointer to that interface.
            </para>
            <para>
            The primary purpose of this method is to provide Windows Explorer with the folder object's folder view object. Windows
            Explorer requests a folder view object by setting riid to IID_IShellView. The folder view object displays the contents of
            the folder in the Windows Explorer folder view. The folder view object must be independent of the Shell folder object,
            because Windows Explorer may call this method more than once to create multiple folder view objects. A new view object must
            be created each time this method is called. Your folder object can respond in one of two ways to this request. It can:
            </para>
            <list type="bullet">
            <item>
            <term>Create a custom folder view object and return a pointer to its IShellView interface.</term>
            </item>
            <item>
            <term>Create a system folder view object and return a pointer to its IShellView interface.</term>
            </item>
            </list>
            <para>
            This method is also used to request objects that expose one of several optional interfaces, including IContextMenu or
            IExtractIcon. In this context, <c>CreateViewObject</c> is similar in usage to IShellFolder::GetUIObjectOf. However, you call
            <c>IShellFolder::GetUIObjectOf</c> to request an object for one of the items contained by a folder. Call
            <c>IShellFolder::CreateViewObject</c> to request an object for the folder itself. The most commonly requested interfaces are:
            </para>
            <list type="bullet">
            <item>
            <term>IQueryInfo</term>
            </item>
            <item>
            <term>IShellDetails</term>
            </item>
            <item>
            <term>IDropTarget</term>
            </item>
            </list>
            <para>
            We recommend that you use the <c>IID_PPV_ARGS</c> macro, defined in Objbase.h, to package the riid and ppv parameters. This
            macro provides the correct IID based on the interface pointed to by the value in ppv, which eliminates the possibility of a
            coding error in riid that could lead to unexpected results.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellFolder.GetAttributesOf(System.UInt32,System.IntPtr[],Vanara.PInvoke.Shell32.SFGAO@)">
            <summary>Gets the attributes of one or more file or folder objects contained in the object represented by IShellFolder.</summary>
            <param name="cidl">
            <para>Type: <c>UINT</c></para>
            <para>The number of items from which to retrieve attributes.</para>
            </param>
            <param name="apidl">
            <para>Type: <c>PCUITEMID_CHILD_ARRAY*</c></para>
            <para>
            The address of an array of pointers to ITEMIDLIST structures, each of which uniquely identifies an item relative to the
            parent folder. Each <c>ITEMIDLIST</c> structure must contain exactly one SHITEMID structure followed by a terminating zero.
            </para>
            </param>
            <param name="rgfInOut">
            <para>Type: <c>SFGAOF*</c></para>
            <para>
            Pointer to a single <c>ULONG</c> value that, on entry, contains the bitwise SFGAO attributes that the calling application is
            requesting. On exit, this value contains the requested attributes that are common to all of the specified items.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            <para>To optimize this operation, do not return unspecified flags.</para>
            <para>
            For a folder object, the SFGAO_BROWSABLE attribute implies that the client can bind to this object as shown in a general
            form here.
            </para>
            <para>
            <code>IShellFolder::BindToObject(..., pidl, IID_IShellFolder, &amp;psfItem);</code>
            </para>
            <para>The client can then create an IShellView on that item through this statement.</para>
            <para>
            <code>psfItem-&gt;CreateViewObject(..., IID_IShellView,...);</code>
            </para>
            <para>
            The SFGAO_DROPTARGET attribute implies that the client can bind to an instance of IDropTarget for this folder by calling
            IShellFolder::GetUIObjectOf as shown here.
            </para>
            <para>
            <code>IShellFolder::GetUIObjectOf(hwnd, 1, &amp;pidl, IID_IDropTarget, NULL, &amp;pv)</code>
            </para>
            <para>
            The SFGAO_NONENUMERATED attribute indicates an item that is not returned by the enumerator created by the
            IShellFolder::EnumObjects method.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellFolder.GetUIObjectOf(Vanara.PInvoke.HWND,System.UInt32,System.IntPtr[],System.Guid@,System.IntPtr,System.Object@)">
            <summary>Gets an object that can be used to carry out actions on the specified file objects or folders.</summary>
            <param name="hwndOwner">
            <para>Type: <c>HWND</c></para>
            <para>A handle to the owner window that the client should specify if it displays a dialog box or message box.</para>
            </param>
            <param name="cidl">
            <para>Type: <c>UINT</c></para>
            <para>The number of file objects or subfolders specified in the apidl parameter.</para>
            </param>
            <param name="apidl">
            <para>Type: <c>PCUITEMID_CHILD_ARRAY</c></para>
            <para>
            The address of an array of pointers to ITEMIDLIST structures, each of which uniquely identifies a file object or subfolder
            relative to the parent folder. Each item identifier list must contain exactly one SHITEMID structure followed by a
            terminating zero.
            </para>
            </param>
            <param name="riid">
            <para>Type: <c>REFIID</c></para>
            <para>
            A reference to the IID of the interface to retrieve through ppv. This can be any valid interface identifier that can be
            created for an item. The most common identifiers used by the Shell are listed in the comments at the end of this reference.
            </para>
            </param>
            <param name="rgfReserved">
            <para>Type: <c>UINT*</c></para>
            <para>Reserved.</para>
            </param>
            <param name="ppv">
            <para>Type: <c>void**</c></para>
            <para>When this method returns successfully, contains the interface pointer requested in riid.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            <para>
            If cidl is greater than one, the <c>IShellFolder::GetUIObjectOf</c> implementation should only succeed if it can create one
            object for all items specified in apidl. If the implementation cannot create one object for all items, this method will fail.
            </para>
            <para>
            The following are the most common interface identifiers the Shell uses when requesting an interface from this method. The
            list also indicates if cidl can be greater than one for the requested interface.
            </para>
            <list type="table">
            <listheader>
            <term>Interface Identifier</term>
            <term>Allowed cidl Value</term>
            </listheader>
            <item>
            <term>IContextMenu</term>
            <term>The cidl parameter can be greater than or equal to one.</term>
            </item>
            <item>
            <term>IContextMenu2</term>
            <term>The cidl parameter can be greater than or equal to one.</term>
            </item>
            <item>
            <term>IDataObject</term>
            <term>The cidl parameter can be greater than or equal to one.</term>
            </item>
            <item>
            <term>IDropTarget</term>
            <term>The cidl parameter can only be one.</term>
            </item>
            <item>
            <term>IExtractIcon</term>
            <term>The cidl parameter can only be one.</term>
            </item>
            <item>
            <term>IQueryInfo</term>
            <term>The cidl parameter can only be one.</term>
            </item>
            </list>
            <para>
            We recommend that you use the <c>IID_PPV_ARGS</c> macro, defined in Objbase.h, to package the riid and ppv parameters. This
            macro provides the correct IID based on the interface pointed to by the value in ppv, which eliminates the possibility of a
            coding error in riid that could lead to unexpected results.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellFolder.GetDisplayNameOf(Vanara.PInvoke.Shell32.PIDL,Vanara.PInvoke.Shell32.SHGDNF,Vanara.PInvoke.Shell32.STRRET@)">
            <summary>Retrieves the display name for the specified file object or subfolder.</summary>
            <param name="pidl">
            <para>Type: <c>PCUITEMID_CHILD</c></para>
            <para>PIDL that uniquely identifies the file object or subfolder relative to the parent folder.</para>
            </param>
            <param name="uFlags">
            <para>Type: <c>SHGDNF</c></para>
            <para>
            Flags used to request the type of display name to return. For a list of possible values, see the SHGDNF enumerated type.
            </para>
            </param>
            <param name="pName">
            <para>Type: <c>STRRET*</c></para>
            <para>
            When this method returns, contains a pointer to a STRRET structure in which to return the display name. The type of name
            returned in this structure can be the requested type, but the Shell folder might return a different type.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            <para>It is the caller's responsibility to free resources allocated by this function.</para>
            <para>
            Normally, pidl can refer only to items contained by the parent folder. The PIDL must be single-level and contain exactly one
            SHITEMID structure followed by a terminating zero. If you want to retrieve the display name of an item that is deeper than
            one level away from the parent folder, use SHBindToParent to bind with the item's immediate parent folder and then pass the
            item's single-level PIDL to <c>IShellFolder::GetDisplayNameOf</c>.
            </para>
            <para>
            Also, if the SHGDN_FORPARSING flag is set in uFlags and the SHGDN_INFOLDER flag is not set, pidl can refer to an object at
            any level below the parent folder in the namespace hierarchy. At one time, pidl could be a multilevel PIDL, relative to the
            parent folder, and could contain multiple SHITEMID structures. However, this is no longer supported and pidl should now
            refer only to a single child item.
            </para>
            <para>
            The simplest way to retrieve the display name from the structure pointed to by pName is to pass it to either StrRetToBuf or
            StrRetToStr. These functions take a STRRET structure and return the name. You can also examine the structure's <c>uType</c>
            member, and retrieve the name from the appropriate member.
            </para>
            <para>
            The flags specified in uFlags are hints about the intended use of the name. They do not guarantee that IShellFolder will
            return the requested form of the name. If that form is not available, a different one might be returned. In particular,
            there is no guarantee that the name returned by the SHGDN_FORPARSING flag will be successfully parsed by
            IShellFolder::ParseDisplayName. There are also some combinations of flags that might cause the <c>GetDisplayNameOf</c>/
            <c>ParseDisplayName</c> round trip to not return the original identifier list. This occurrence is exceptional, but you
            should check to be sure.
            </para>
            <para>
            <c>Note</c> The parsing name that is returned when uFlags has the SHGDN_FORPARSING flag set is not necessarily a normal text
            string. Virtual folders such as My Computer might return a string containing the folder object's GUID in the form
            "::{GUID}". Developers who implement <c>IShellFolder::GetDisplayNameOf</c> are encouraged to return parse names that are as
            close to the display names as possible, because the end user often needs to type or edit these names.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellFolder.SetNameOf(Vanara.PInvoke.HWND,Vanara.PInvoke.Shell32.PIDL,System.String,Vanara.PInvoke.Shell32.SHGDNF,Vanara.PInvoke.Shell32.PIDL@)">
            <summary>Sets the display name of a file object or subfolder, changing the item identifier in the process.</summary>
            <param name="hwnd">
            <para>Type: <c>HWND</c></para>
            <para>A handle to the owner window of any dialog or message box that the client displays.</para>
            </param>
            <param name="pidl">
            <para>Type: <c>PCUITEMID_CHILD</c></para>
            <para>
            A pointer to an ITEMIDLIST structure that uniquely identifies the file object or subfolder relative to the parent folder.
            The structure must contain exactly one SHITEMID structure followed by a terminating zero.
            </para>
            </param>
            <param name="pszName">
            <para>Type: <c>LPCWSTR</c></para>
            <para>A pointer to a null-terminated string that specifies the new display name.</para>
            </param>
            <param name="uFlags">
            <para>Type: <c>SHGDNF</c></para>
            <para>
            Flags that indicate the type of name specified by the pszName parameter. For a list of possible values and combinations of
            values, see SHGDNF.
            </para>
            </param>
            <param name="ppidlOut">
            <para>Type: <c>PITEMID_CHILD*</c></para>
            <para>
            Optional. If specified, the address of a pointer to an ITEMIDLIST structure that receives the <c>ITEMIDLIST</c> of the
            renamed item. The caller requests this value by passing a non-null ppidlOut. Implementations of
            <c>IShellFolder::SetNameOf</c> must return a pointer to the new <c>ITEMIDLIST</c> in the ppidlOut parameter.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            <para>Changing the display name of a file system object, or a folder within it, renames the file or directory.</para>
            <para>
            Before calling this method, applications should call IShellFolder::GetAttributesOf and check that the SFGAO_CANRENAME flag
            is set. Note that this flag is essentially a hint to namespace clients. It does not necessarily imply that
            <c>IShellFolder::SetNameOf</c> will succeed or fail.
            </para>
            <para>
            Implementers of <c>IShellFolder::SetNameOf</c> must call SHChangeNotify with both the old and new absolute PIDLs once the
            renaming of an object is complete. This following example shows the call to <c>SHChangeNotify</c> following the renaming of
            a folder object.
            </para>
            <para>
            <code>SHChangeNotify(SHCNE_RENAMEFOLDER, SHCNF_IDLIST, pidlFullOld, pidlFullNew);</code>
            </para>
            <para>This call prevents both the old and new names being displayed in the view.</para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IShellFolder2">
            <summary>
            Extends the capabilities of IShellFolder. Its methods provide a variety of information about the contents of a Shell folder.
            </summary>
            <seealso cref="T:Vanara.PInvoke.Shell32.IShellFolder"/>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellFolder2.ParseDisplayName(Vanara.PInvoke.HWND,System.Runtime.InteropServices.ComTypes.IBindCtx,System.String,System.UInt32@,Vanara.PInvoke.Shell32.PIDL@,Vanara.PInvoke.Shell32.SFGAO@)">
            <summary>Translates the display name of a file object or a folder into an item identifier list.</summary>
            <param name="hwnd">
            <para>Type: <c>HWND</c></para>
            <para>
            A window handle. The client should provide a window handle if it displays a dialog or message box. Otherwise set hwnd to <c>NULL</c>.
            </para>
            </param>
            <param name="pbc">
            <para>Type: <c>IBindCtx*</c></para>
            <para>
            Optional. A pointer to a bind context used to pass parameters as inputs and outputs to the parsing function. These passed
            parameters are often specific to the data source and are documented by the data source owners. For example, the file system
            data source accepts the name being parsed (as a WIN32_FIND_DATA structure), using the STR_FILE_SYS_BIND_DATA bind context
            parameter. STR_PARSE_PREFER_FOLDER_BROWSING can be passed to indicate that URLs are parsed using the file system data source
            when possible. Construct a bind context object using CreateBindCtx and populate the values using
            IBindCtx::RegisterObjectParam. See <c>Bind Context String Keys</c> for a complete list of these.
            </para>
            <para>If no data is being passed to or received from the parsing function, this value can be <c>NULL</c>.</para>
            </param>
            <param name="pszDisplayName">
            <para>Type: <c>LPWSTR</c></para>
            <para>
            A null-terminated Unicode string with the display name. Because each Shell folder defines its own parsing syntax, the form
            this string can take may vary. The desktop folder, for instance, accepts paths such as "C:\My Docs\My File.txt". It also
            will accept references to items in the namespace that have a GUID associated with them using the "::{GUID}" syntax. For
            example, to retrieve a fully qualified identifier list for the control panel from the desktop folder, you can use the following:
            </para>
            <para><c>::{CLSID for Control Panel}\::{CLSID for printers folder}</c></para>
            </param>
            <param name="pchEaten">
            <para>Type: <c>ULONG*</c></para>
            <para>
            A pointer to a <c>ULONG</c> value that receives the number of characters of the display name that was parsed. If your
            application does not need this information, set pchEaten to <c>NULL</c>, and no value will be returned.
            </para>
            </param>
            <param name="ppidl">
            <para>Type: <c>PIDLIST_RELATIVE*</c></para>
            <para>
            When this method returns, contains a pointer to the PIDL for the object. The returned item identifier list specifies the
            item relative to the parsing folder. If the object associated with pszDisplayName is within the parsing folder, the returned
            item identifier list will contain only one SHITEMID structure. If the object is in a subfolder of the parsing folder, the
            returned item identifier list will contain multiple <c>SHITEMID</c> structures. If an error occurs, <c>NULL</c> is returned
            in this address.
            </para>
            <para>When it is no longer needed, it is the responsibility of the caller to free this resource by calling CoTaskMemFree.</para>
            </param>
            <param name="pdwAttributes">
            <para>Type: <c>ULONG*</c></para>
            <para>
            The value used to query for file attributes. If not used, it should be set to <c>NULL</c>. To query for one or more
            attributes, initialize this parameter with the SFGAO flags that represent the attributes of interest. On return, those
            attributes that are true and were requested will be set.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            <para>
            Some Shell folders may not implement <c>IShellFolder::ParseDisplayName</c>. Each folder that does will define its own
            parsing syntax.
            </para>
            <para>
            <c>ParseDisplayName</c> is not expected to handle the relative path or parent folder indicators ("." or ".."). It is up to
            the caller to remove these appropriately.
            </para>
            <para>
            Do not use the SFGAO_VALIDATE flag in pdwAttributes to verify the existence of the item whose name is being parsed.
            <c>IShellFolder::ParseDisplayName</c> implicitly validates the existence of the item unless that behavior is overridden by a
            special bind context parameter.
            </para>
            <para>
            Querying for some attributes may be relatively slow and use significant amounts of memory. For example, to determine if a
            file is shared, the Shell will load network components. This procedure may require the loading of several DLLs. The purpose
            of pdwAttributes is to allow you to restrict the query to only that information that is needed. The following code fragment
            illustrates how to find out if a file is compressed.
            </para>
            <para>
            <code>LPITEMIDLIST pidl; ULONG cbEaten; DWORD dwAttribs = SFGAO_COMPRESSED; hres = psf-&gt;ParseDisplayName(NULL, NULL, lpwszDisplayName, &amp;cbEaten, // This can be NULL &amp;pidl, &amp;dwAttribs); if(dwAttribs &amp; SFGAO_COMPRESSED) { // Do something with the compressed file }</code>
            </para>
            <para>
            Since pdwAttributes is an in/out parameter, it should always be initialized. If you pass in an uninitialized value, some of
            the bits may be inadvertantly set. <c>IShellFolder::ParseDisplayName</c> will then query for the corresponding attributes,
            which may lead to undesirable delays or memory demands. If you do not wish to query for attributes, set pdwAttributes to
            <c>NULL</c> to avoid unpredictable behavior.
            </para>
            <para>This method is similar to the IParseDisplayName::ParseDisplayName method.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellFolder2.EnumObjects(Vanara.PInvoke.HWND,Vanara.PInvoke.Shell32.SHCONTF,Vanara.PInvoke.Shell32.IEnumIDList@)">
            <summary>
            Enables a client to determine the contents of a folder by creating an item identifier enumeration object and returning its
            IEnumIDList interface. The methods supported by that interface can then be used to enumerate the folder's contents.
            </summary>
            <param name="hwnd">
            <para>Type: <c>HWND</c></para>
            <para>
            If user input is required to perform the enumeration, this window handle should be used by the enumeration object as the
            parent window to take user input. An example would be a dialog box to ask for a password or prompt the user to insert a CD
            or floppy disk. If hwndOwner is set to <c>NULL</c>, the enumerator should not post any messages, and if user input is
            required, it should silently fail.
            </para>
            </param>
            <param name="grfFlags">
            <para>Type: <c>SHCONTF</c></para>
            <para>
            Flags indicating which items to include in the enumeration. For a list of possible values, see the SHCONTF enumerated type.
            </para>
            </param>
            <param name="ppenumIDList">
            <para>Type: <c>IEnumIDList**</c></para>
            <para>
            The address that receives a pointer to the IEnumIDList interface of the enumeration object created by this method. If an
            error occurs or no suitable subobjects are found, ppenumIDList is set to <c>NULL</c>.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>Returns
            <code>S_OK</code>
            if successful, or an error value otherwise. Some implementations may also return
            <code>S_FALSE</code>
            , indicating that there are no children matching the grfFlags that were passed in. If
            <code>S_FALSE</code>
            is returned, ppenumIDList is set to
            <code>NULL</code>
            .
            </para>
            </returns>
            <remarks>
            <para>
            If the method returns S_OK, then ppenumIDList receives a pointer to an enumerator. In this case, the calling application
            must free the returned IEnumIDList object by calling its <c>Release</c> method.
            </para>
            <para>
            If the method returns S_FALSE, then the folder contains no suitable subobjects and the pointer specified in ppenumIDList is
            set to <c>NULL</c>.
            </para>
            <para>If the method fails, an error value is returned and the pointer specified in ppenumIDList is set to <c>NULL</c>.</para>
            <para>
            If the folder contains no suitable subobjects, then the <c>IShellFolder::EnumObjects</c> method is permitted either to set
            *ppenumIDList to <c>NULL</c> and return S_FALSE, or to set *ppenumIDList to an enumerator that produces no objects and
            return S_OK. Calling applications must be prepared for both success cases.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellFolder2.BindToObject(Vanara.PInvoke.Shell32.PIDL,System.Runtime.InteropServices.ComTypes.IBindCtx,System.Guid@,System.Object@)">
            <summary>
            Retrieves a handler, typically the Shell folder object that implements IShellFolder for a particular item. Optional
            parameters that control the construction of the handler are passed in the bind context.
            </summary>
            <param name="pidl">
            <para>Type: <c>PCUIDLIST_RELATIVE</c></para>
            <para>
            The address of an ITEMIDLIST structure (PIDL) that identifies the subfolder. This value can refer to an item at any level
            below the parent folder in the namespace hierarchy. The structure contains one or more SHITEMID structures, followed by a
            terminating <c>NULL</c>.
            </para>
            </param>
            <param name="pbc">
            <para>Type: <c>IBindCtx*</c></para>
            <para>
            A pointer to an IBindCtx interface on a bind context object that can be used to pass parameters to the construction of the
            handler. If this parameter is not used, set it to <c>NULL</c>. Because support for this parameter is optional for folder
            object implementations, some folders may not support the use of bind contexts.
            </para>
            <para>
            Information that can be provided in the bind context includes a BIND_OPTS structure that includes a <c>grfMode</c> member
            that indicates the access mode when binding to a stream handler. Other parameters can be set and discovered using
            IBindCtx::RegisterObjectParam and IBindCtx::GetObjectParam.
            </para>
            </param>
            <param name="riid">
            <para>Type: <c>REFIID</c></para>
            <para>
            The identifier of the interface to return. This may be <c>IID_IShellFolder</c>, <c>IID_IStream</c>, or any other interface
            that identifies a particular handler.
            </para>
            </param>
            <param name="ppv">
            <para>Type: <c>void**</c></para>
            <para>
            When this method returns, contains the address of a pointer to the requested interface. If an error occurs, a <c>NULL</c>
            pointer is returned at this address.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            <para>
            Applications use <c>IShellFolder::BindToObject</c><c>(..., IID_IShellFolder, ...)</c> to obtain the Shell folder object for
            a subitem. Clients should pass the canonical interface IID that is used to identify a specific handler. For example,
            <c>IID_IShellFolder</c> identifies the folder handler and <c>IID_IStream</c> identifies the stream handler. Implementations
            can support binding to handlers using derived interfaces as well, such as <c>IID_IShellFolder2</c>. A Shell namespace
            extension can implement this function by creating the Shell folder object for the specified subitem and then calling
            QueryInterface to communicate with the object through its interface pointer.
            </para>
            <para>
            Implementations of <c>BindToObject</c> can optimize any call to it by quickly failing for IID values that it does not
            support. For example, if the Shell folder object of the subitem does not support IRemoteComputer, the implementation should
            return <c>E_NOINTERFACE</c> immediately instead of needlessly creating the Shell folder object for the subitem and then
            finding that <c>IRemoteComputer</c> was not supported after all.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellFolder2.BindToStorage(Vanara.PInvoke.Shell32.PIDL,System.Runtime.InteropServices.ComTypes.IBindCtx,System.Guid@,System.Object@)">
            <summary>Requests a pointer to an object's storage interface.</summary>
            <param name="pidl">
            <para>Type: <c>PCUIDLIST_RELATIVE</c></para>
            <para>
            The address of an ITEMIDLIST structure that identifies the subfolder relative to its parent folder. The structure must
            contain exactly one SHITEMID structure followed by a terminating zero.
            </para>
            </param>
            <param name="pbc">
            <para>Type: <c>IBindCtx*</c></para>
            <para>
            The optional address of an IBindCtx interface on a bind context object to be used during this operation. If this parameter
            is not used, set it to <c>NULL</c>. Because support for pbc is optional for folder object implementations, some folders may
            not support the use of bind contexts.
            </para>
            </param>
            <param name="riid">
            <para>Type: <c>REFIID</c></para>
            <para>
            The IID of the requested storage interface. To retrieve an IStream, IStorage, or IPropertySetStorage interface pointer, set
            riid to <c>IID_IStream</c>, <c>IID_IStorage</c>, or <c>IID_IPropertySetStorage</c>, respectively.
            </para>
            </param>
            <param name="ppv">
            <para>Type: <c>void**</c></para>
            <para>
            The address that receives the interface pointer specified by riid. If an error occurs, a <c>NULL</c> pointer is returned in
            this address.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            Namespace extensions have the option of allowing applications to bind to an object that represents an item's storage. If
            this option is supported, <c>IShellFolder::BindToStorage</c> returns a specified interface pointer that can then be used to
            access the contents of object. See the IMoniker::BindToStorage reference for further discussion.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellFolder2.CompareIDs(System.IntPtr,Vanara.PInvoke.Shell32.PIDL,Vanara.PInvoke.Shell32.PIDL)">
            <summary>Determines the relative order of two file objects or folders, given their item identifier lists.</summary>
            <param name="lParam">
            A value that specifies how the comparison should be performed.
            <para>
            The lower sixteen bits of lParam define the sorting rule. Most applications set the sorting rule to the default value of
            zero, indicating that the two items should be compared by name. The system does not define any other sorting rules. Some
            folder objects might allow calling applications to use the lower sixteen bits of lParam to specify folder-specific sorting
            rules. The rules and their associated lParam values are defined by the folder.
            </para>
            <para>
            When the system folder view object calls IShellFolder::CompareIDs, the lower sixteen bits of lParam are used to specify the
            column to be used for the comparison.
            </para>
            <para>
            The upper sixteen bits of lParam are used for flags that modify the sorting rule. The system currently defines these
            modifier flags.
            </para>
            <list>
            <item>
            <term>SHCIDS_ALLFIELDS</term>
            <description>
            Version 5.0. Compare all the information contained in the ITEMIDLIST structure, not just the display names. This flag is
            valid only for folder objects that support the IShellFolder2 interface. For instance, if the two items are files, the folder
            should compare their names, sizes, file times, attributes, and any other information in the structures. If this flag is set,
            the lower sixteen bits of lParam must be zero.
            </description>
            </item>
            <item>
            <term>SHCIDS_CANONICALONLY</term>
            <description>
            Version 5.0. When comparing by name, compare the system names but not the display names. When this flag is passed, the two
            items are compared by whatever criteria the Shell folder determines are most efficient, as long as it implements a
            consistent sort function. This flag is useful when comparing for equality or when the results of the sort are not displayed
            to the user. This flag cannot be combined with other flags.
            </description>
            </item>
            </list>
            </param>
            <param name="pidl1">
            A pointer to the first item's ITEMIDLIST structure. It will be relative to the folder. This ITEMIDLIST structure can contain
            more than one element; therefore, the entire structure must be compared, not just the first element.
            </param>
            <param name="pidl2">
            A pointer to the second item's ITEMIDLIST structure. It will be relative to the folder. This ITEMIDLIST structure can
            contain more than one element; therefore, the entire structure must be compared, not just the first element.
            </param>
            <returns>
            If this method is successful, the CODE field of the HRESULT contains one of the following values. For information regarding
            the extraction of the CODE field from the returned HRESULT, see Remarks. If this method is unsuccessful, it returns a COM
            error code.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellFolder2.CreateViewObject(Vanara.PInvoke.HWND,System.Guid@,System.Object@)">
            <summary>Requests an object that can be used to obtain information from or interact with a folder object.</summary>
            <param name="hwndOwner">
            <para>Type: <c>HWND</c></para>
            <para>
            A handle to the owner window. If you have implemented a custom folder view object, your folder view window should be created
            as a child of hwndOwner.
            </para>
            </param>
            <param name="riid">
            <para>Type: <c>REFIID</c></para>
            <para>A reference to the IID of the interface to retrieve through ppv, typically IID_IShellView.</para>
            </param>
            <param name="ppv">
            <para>Type: <c>void**</c></para>
            <para>
            When this method returns successfully, contains the interface pointer requested in riid. This is typically IShellView. See
            the Remarks section for more details.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            <para>
            To support this request, create an object that exposes the interface indicated by riid and return a pointer to that interface.
            </para>
            <para>
            The primary purpose of this method is to provide Windows Explorer with the folder object's folder view object. Windows
            Explorer requests a folder view object by setting riid to IID_IShellView. The folder view object displays the contents of
            the folder in the Windows Explorer folder view. The folder view object must be independent of the Shell folder object,
            because Windows Explorer may call this method more than once to create multiple folder view objects. A new view object must
            be created each time this method is called. Your folder object can respond in one of two ways to this request. It can:
            </para>
            <list type="bullet">
            <item>
            <term>Create a custom folder view object and return a pointer to its IShellView interface.</term>
            </item>
            <item>
            <term>Create a system folder view object and return a pointer to its IShellView interface.</term>
            </item>
            </list>
            <para>
            This method is also used to request objects that expose one of several optional interfaces, including IContextMenu or
            IExtractIcon. In this context, <c>CreateViewObject</c> is similar in usage to IShellFolder::GetUIObjectOf. However, you call
            <c>IShellFolder::GetUIObjectOf</c> to request an object for one of the items contained by a folder. Call
            <c>IShellFolder::CreateViewObject</c> to request an object for the folder itself. The most commonly requested interfaces are:
            </para>
            <list type="bullet">
            <item>
            <term>IQueryInfo</term>
            </item>
            <item>
            <term>IShellDetails</term>
            </item>
            <item>
            <term>IDropTarget</term>
            </item>
            </list>
            <para>
            We recommend that you use the <c>IID_PPV_ARGS</c> macro, defined in Objbase.h, to package the riid and ppv parameters. This
            macro provides the correct IID based on the interface pointed to by the value in ppv, which eliminates the possibility of a
            coding error in riid that could lead to unexpected results.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellFolder2.GetAttributesOf(System.UInt32,System.IntPtr[],Vanara.PInvoke.Shell32.SFGAO@)">
            <summary>Gets the attributes of one or more file or folder objects contained in the object represented by IShellFolder.</summary>
            <param name="cidl">
            <para>Type: <c>UINT</c></para>
            <para>The number of items from which to retrieve attributes.</para>
            </param>
            <param name="apidl">
            <para>Type: <c>PCUITEMID_CHILD_ARRAY*</c></para>
            <para>
            The address of an array of pointers to ITEMIDLIST structures, each of which uniquely identifies an item relative to the
            parent folder. Each <c>ITEMIDLIST</c> structure must contain exactly one SHITEMID structure followed by a terminating zero.
            </para>
            </param>
            <param name="rgfInOut">
            <para>Type: <c>SFGAOF*</c></para>
            <para>
            Pointer to a single <c>ULONG</c> value that, on entry, contains the bitwise SFGAO attributes that the calling application is
            requesting. On exit, this value contains the requested attributes that are common to all of the specified items.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            <para>To optimize this operation, do not return unspecified flags.</para>
            <para>
            For a folder object, the SFGAO_BROWSABLE attribute implies that the client can bind to this object as shown in a general
            form here.
            </para>
            <para>
            <code>IShellFolder::BindToObject(..., pidl, IID_IShellFolder, &amp;psfItem);</code>
            </para>
            <para>The client can then create an IShellView on that item through this statement.</para>
            <para>
            <code>psfItem-&gt;CreateViewObject(..., IID_IShellView,...);</code>
            </para>
            <para>
            The SFGAO_DROPTARGET attribute implies that the client can bind to an instance of IDropTarget for this folder by calling
            IShellFolder::GetUIObjectOf as shown here.
            </para>
            <para>
            <code>IShellFolder::GetUIObjectOf(hwnd, 1, &amp;pidl, IID_IDropTarget, NULL, &amp;pv)</code>
            </para>
            <para>
            The SFGAO_NONENUMERATED attribute indicates an item that is not returned by the enumerator created by the
            IShellFolder::EnumObjects method.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellFolder2.GetUIObjectOf(Vanara.PInvoke.HWND,System.UInt32,System.IntPtr[],System.Guid@,System.IntPtr,System.Object@)">
            <summary>Gets an object that can be used to carry out actions on the specified file objects or folders.</summary>
            <param name="hwndOwner">
            <para>Type: <c>HWND</c></para>
            <para>A handle to the owner window that the client should specify if it displays a dialog box or message box.</para>
            </param>
            <param name="cidl">
            <para>Type: <c>UINT</c></para>
            <para>The number of file objects or subfolders specified in the apidl parameter.</para>
            </param>
            <param name="apidl">
            <para>Type: <c>PCUITEMID_CHILD_ARRAY</c></para>
            <para>
            The address of an array of pointers to ITEMIDLIST structures, each of which uniquely identifies a file object or subfolder
            relative to the parent folder. Each item identifier list must contain exactly one SHITEMID structure followed by a
            terminating zero.
            </para>
            </param>
            <param name="riid">
            <para>Type: <c>REFIID</c></para>
            <para>
            A reference to the IID of the interface to retrieve through ppv. This can be any valid interface identifier that can be
            created for an item. The most common identifiers used by the Shell are listed in the comments at the end of this reference.
            </para>
            </param>
            <param name="rgfReserved">
            <para>Type: <c>UINT*</c></para>
            <para>Reserved.</para>
            </param>
            <param name="ppv">
            <para>Type: <c>void**</c></para>
            <para>When this method returns successfully, contains the interface pointer requested in riid.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            <para>
            If cidl is greater than one, the <c>IShellFolder::GetUIObjectOf</c> implementation should only succeed if it can create one
            object for all items specified in apidl. If the implementation cannot create one object for all items, this method will fail.
            </para>
            <para>
            The following are the most common interface identifiers the Shell uses when requesting an interface from this method. The
            list also indicates if cidl can be greater than one for the requested interface.
            </para>
            <list type="table">
            <listheader>
            <term>Interface Identifier</term>
            <term>Allowed cidl Value</term>
            </listheader>
            <item>
            <term>IContextMenu</term>
            <term>The cidl parameter can be greater than or equal to one.</term>
            </item>
            <item>
            <term>IContextMenu2</term>
            <term>The cidl parameter can be greater than or equal to one.</term>
            </item>
            <item>
            <term>IDataObject</term>
            <term>The cidl parameter can be greater than or equal to one.</term>
            </item>
            <item>
            <term>IDropTarget</term>
            <term>The cidl parameter can only be one.</term>
            </item>
            <item>
            <term>IExtractIcon</term>
            <term>The cidl parameter can only be one.</term>
            </item>
            <item>
            <term>IQueryInfo</term>
            <term>The cidl parameter can only be one.</term>
            </item>
            </list>
            <para>
            We recommend that you use the <c>IID_PPV_ARGS</c> macro, defined in Objbase.h, to package the riid and ppv parameters. This
            macro provides the correct IID based on the interface pointed to by the value in ppv, which eliminates the possibility of a
            coding error in riid that could lead to unexpected results.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellFolder2.GetDisplayNameOf(Vanara.PInvoke.Shell32.PIDL,Vanara.PInvoke.Shell32.SHGDNF,Vanara.PInvoke.Shell32.STRRET@)">
            <summary>Retrieves the display name for the specified file object or subfolder.</summary>
            <param name="pidl">
            <para>Type: <c>PCUITEMID_CHILD</c></para>
            <para>PIDL that uniquely identifies the file object or subfolder relative to the parent folder.</para>
            </param>
            <param name="uFlags">
            <para>Type: <c>SHGDNF</c></para>
            <para>
            Flags used to request the type of display name to return. For a list of possible values, see the SHGDNF enumerated type.
            </para>
            </param>
            <param name="pName">
            <para>Type: <c>STRRET*</c></para>
            <para>
            When this method returns, contains a pointer to a STRRET structure in which to return the display name. The type of name
            returned in this structure can be the requested type, but the Shell folder might return a different type.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            <para>It is the caller's responsibility to free resources allocated by this function.</para>
            <para>
            Normally, pidl can refer only to items contained by the parent folder. The PIDL must be single-level and contain exactly one
            SHITEMID structure followed by a terminating zero. If you want to retrieve the display name of an item that is deeper than
            one level away from the parent folder, use SHBindToParent to bind with the item's immediate parent folder and then pass the
            item's single-level PIDL to <c>IShellFolder::GetDisplayNameOf</c>.
            </para>
            <para>
            Also, if the SHGDN_FORPARSING flag is set in uFlags and the SHGDN_INFOLDER flag is not set, pidl can refer to an object at
            any level below the parent folder in the namespace hierarchy. At one time, pidl could be a multilevel PIDL, relative to the
            parent folder, and could contain multiple SHITEMID structures. However, this is no longer supported and pidl should now
            refer only to a single child item.
            </para>
            <para>
            The simplest way to retrieve the display name from the structure pointed to by pName is to pass it to either StrRetToBuf or
            StrRetToStr. These functions take a STRRET structure and return the name. You can also examine the structure's <c>uType</c>
            member, and retrieve the name from the appropriate member.
            </para>
            <para>
            The flags specified in uFlags are hints about the intended use of the name. They do not guarantee that IShellFolder will
            return the requested form of the name. If that form is not available, a different one might be returned. In particular,
            there is no guarantee that the name returned by the SHGDN_FORPARSING flag will be successfully parsed by
            IShellFolder::ParseDisplayName. There are also some combinations of flags that might cause the <c>GetDisplayNameOf</c>/
            <c>ParseDisplayName</c> round trip to not return the original identifier list. This occurrence is exceptional, but you
            should check to be sure.
            </para>
            <para>
            <c>Note</c> The parsing name that is returned when uFlags has the SHGDN_FORPARSING flag set is not necessarily a normal text
            string. Virtual folders such as My Computer might return a string containing the folder object's GUID in the form
            "::{GUID}". Developers who implement <c>IShellFolder::GetDisplayNameOf</c> are encouraged to return parse names that are as
            close to the display names as possible, because the end user often needs to type or edit these names.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellFolder2.SetNameOf(Vanara.PInvoke.HWND,Vanara.PInvoke.Shell32.PIDL,System.String,Vanara.PInvoke.Shell32.SHGDNF,Vanara.PInvoke.Shell32.PIDL@)">
            <summary>Sets the display name of a file object or subfolder, changing the item identifier in the process.</summary>
            <param name="hwnd">
            <para>Type: <c>HWND</c></para>
            <para>A handle to the owner window of any dialog or message box that the client displays.</para>
            </param>
            <param name="pidl">
            <para>Type: <c>PCUITEMID_CHILD</c></para>
            <para>
            A pointer to an ITEMIDLIST structure that uniquely identifies the file object or subfolder relative to the parent folder.
            The structure must contain exactly one SHITEMID structure followed by a terminating zero.
            </para>
            </param>
            <param name="pszName">
            <para>Type: <c>LPCWSTR</c></para>
            <para>A pointer to a null-terminated string that specifies the new display name.</para>
            </param>
            <param name="uFlags">
            <para>Type: <c>SHGDNF</c></para>
            <para>
            Flags that indicate the type of name specified by the pszName parameter. For a list of possible values and combinations of
            values, see SHGDNF.
            </para>
            </param>
            <param name="ppidlOut">
            <para>Type: <c>PITEMID_CHILD*</c></para>
            <para>
            Optional. If specified, the address of a pointer to an ITEMIDLIST structure that receives the <c>ITEMIDLIST</c> of the
            renamed item. The caller requests this value by passing a non-null ppidlOut. Implementations of
            <c>IShellFolder::SetNameOf</c> must return a pointer to the new <c>ITEMIDLIST</c> in the ppidlOut parameter.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            <para>Changing the display name of a file system object, or a folder within it, renames the file or directory.</para>
            <para>
            Before calling this method, applications should call IShellFolder::GetAttributesOf and check that the SFGAO_CANRENAME flag
            is set. Note that this flag is essentially a hint to namespace clients. It does not necessarily imply that
            <c>IShellFolder::SetNameOf</c> will succeed or fail.
            </para>
            <para>
            Implementers of <c>IShellFolder::SetNameOf</c> must call SHChangeNotify with both the old and new absolute PIDLs once the
            renaming of an object is complete. This following example shows the call to <c>SHChangeNotify</c> following the renaming of
            a folder object.
            </para>
            <para>
            <code>SHChangeNotify(SHCNE_RENAMEFOLDER, SHCNF_IDLIST, pidlFullOld, pidlFullNew);</code>
            </para>
            <para>This call prevents both the old and new names being displayed in the view.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellFolder2.GetDefaultSearchGUID(System.Guid@)">
            <summary>Returns the globally unique identifier (GUID) of the default search object for the folder.</summary>
            <param name="pguid">
            <para>Type: <c>GUID*</c></para>
            <para>The GUID of the default search object.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>Returns S_OK if successful, or a COM error value otherwise.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellFolder2.EnumSearches(Vanara.PInvoke.Shell32.IEnumExtraSearch@)">
            <summary>Requests a pointer to an interface that allows a client to enumerate the available search objects.</summary>
            <param name="ppenum">
            <para>Type: <c>IEnumExtraSearch**</c></para>
            <para>The address of a pointer to an enumerator object's IEnumExtraSearch interface.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>Returns S_OK if successful, or a COM error value otherwise.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellFolder2.GetDefaultColumn(System.UInt32,System.UInt32@,System.UInt32@)">
            <summary>Gets the default sorting and display columns.</summary>
            <param name="dwRes">
            <para>Type: <c>DWORD</c></para>
            <para>Reserved. Set to zero.</para>
            </param>
            <param name="pSort">
            <para>Type: <c>ULONG*</c></para>
            <para>A pointer to a value that receives the index of the default sorted column.</para>
            </param>
            <param name="pDisplay">
            <para>Type: <c>ULONG*</c></para>
            <para>A pointer to a value that receives the index of the default display column.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>Returns S_OK if successful, or a COM error value otherwise.</para>
            </returns>
            <remarks>
            <para>Notes to Users</para>
            <para>
            Both column indexes returned by this method are intended for use by an application that is presenting a folder view of this folder.
            </para>
            <para>
            The column specified by pSort is the one that should be used for sorting the items in the folder. To determine the sorting
            order of any pair of items, pass their PIDLs to CompareIDs. Specify the column by setting the lParam parameter of
            <c>CompareIDs</c> to the value pointed to by pSort.
            </para>
            <para>
            If a view will display only one string to represent an item, it should be taken from the column specified by pDisplay. Pass
            the column index and the item's PIDL to IShellFolder2::GetDetailsOf to retrieve the string.
            </para>
            <para>Notes to Implementers</para>
            <para>
            This method is part of a namespace extension's folder object implementation. It is typically called by a folder view object
            to ask the folder object which column in Microsoft Windows Explorer Details view should be used to sort the items in the
            folder. For example, a folder object that represents a transaction log might set pSort to the column that displays the
            transaction time. The items will then be sorted by the time the transaction took place, rather than by name.
            </para>
            <para>
            Some clients might call this method to request the index of the column with the names that should be displayed in tree view.
            Set pDisplay to the appropriate column index. The client will then obtain the display names by calling IShellFolder2::GetDetailsOf.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellFolder2.GetDefaultColumnState(System.UInt32,Vanara.PInvoke.Shell32.SHCOLSTATE@)">
            <summary>Gets the default state for a specified column.</summary>
            <param name="iColumn">
            <para>Type: <c>UINT</c></para>
            <para>An integer that specifies the column number.</para>
            </param>
            <param name="pcsFlags">
            <para>Type: <c>SHCOLSTATEF*</c></para>
            <para>
            A pointer to a value that contains flags that indicate the default column state. This parameter can include a combination of
            the following flags.
            </para>
            <para>SHCOLSTATE_TYPE_STR</para>
            <para>A string.</para>
            <para>SHCOLSTATE_TYPE_INT</para>
            <para>An integer.</para>
            <para>SHCOLSTATE_TYPE_DATE</para>
            <para>A date.</para>
            <para>SHCOLSTATE_ONBYDEFAULT</para>
            <para>Should be shown by default in the Windows Explorer Details view.</para>
            <para>SHCOLSTATE_SLOW</para>
            <para>
            Recommends that the folder view extract column information asynchronously, on a background thread, because extracting this
            information can be time consuming.
            </para>
            <para>SHCOLSTATE_EXTENDED</para>
            <para>Provided by a handler, not the folder object.</para>
            <para>SHCOLSTATE_SECONDARYUI</para>
            <para>Not displayed in the shortcut menu, but listed in the More dialog box.</para>
            <para>SHCOLSTATE_HIDDEN</para>
            <para>Not displayed in the user interface.</para>
            <para>SHCOLSTATE_PREFER_VARCMP</para>
            <para>Uses default sorting rather than CompareIDs to get the sort order.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellFolder2.GetDetailsEx(Vanara.PInvoke.Shell32.PIDL,Vanara.PInvoke.Ole32.PROPERTYKEY@,System.Object@)">
            <summary>
            Gets detailed information, identified by a property set identifier (FMTID) and a property identifier (PID), on an item in a
            Shell folder.
            </summary>
            <param name="pidl">
            <para>Type: <c>PCUITEMID_CHILD</c></para>
            <para>
            A PIDL of the item, relative to the parent folder. This method accepts only single-level PIDLs. The structure must contain
            exactly one SHITEMID structure followed by a terminating zero. This value cannot be <c>NULL</c>.
            </para>
            </param>
            <param name="pscid">
            <para>Type: <c>const SHCOLUMNID*</c></para>
            <para>A pointer to an SHCOLUMNID structure that identifies the column.</para>
            </param>
            <param name="pv">
            <para>Type: <c>VARIANT*</c></para>
            <para>
            A pointer to a <c>VARIANT</c> with the requested information. The value is fully typed. The value returned for properties
            from the property system must conform to the type specified in that property definition's typeInfo as the legacyType attribute.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            This function is a more robust version of IShellFolder2::GetDetailsOf. It provides access to the information that is
            displayed in the Windows Explorer Details view of a Shell folder. The primary difference is that <c>GetDetailsEx</c> allows
            you to identify the column with an FMTID and PID structure instead of having to first determine the column index.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellFolder2.GetDetailsOf(Vanara.PInvoke.Shell32.PIDL,System.UInt32,Vanara.PInvoke.Shell32.SHELLDETAILS@)">
            <summary>Gets detailed information, identified by a column index, on an item in a Shell folder.</summary>
            <param name="pidl">
            <para>Type: <c>PCUITEMID_CHILD</c></para>
            <para>
            PIDL of the item for which you are requesting information. This method accepts only single-level PIDLs. The structure must
            contain exactly one SHITEMID structure followed by a terminating zero. If this parameter is set to <c>NULL</c>, the title of
            the information field specified by iColumn is returned.
            </para>
            </param>
            <param name="iColumn">
            <para>Type: <c>UINT</c></para>
            <para>
            The zero-based index of the desired information field. It is identical to the column number of the information as it is
            displayed in a Windows Explorer Details view.
            </para>
            </param>
            <param name="psd">
            <para>Type: <c>SHELLDETAILS*</c></para>
            <para>A pointer to a SHELLDETAILS structure that contains the information.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            <para>
            The <c>IShellFolder2::GetDetailsOf</c> method is identical to GetDetailsOf. For a more robust way to retrieve item
            information that does not require you to know the column index, use IShellFolder2::GetDetailsEx.
            </para>
            <para>
            The <c>IShellFolder2::GetDetailsOf</c> method provides access to the information that is displayed in the Windows Explorer
            Details view of a Shell folder. The column numbers, headings, and information that you see in the Details view are identical
            to those of <c>IShellFolder2::GetDetailsOf</c>. Note that the available information fields and their column numbers vary
            depending on the particular folder. You can enumerate the available fields by calling this method with pidl set to
            <c>NULL</c>, and examining the title associated with each column index. Bear in mind that these titles can be localized and
            might not be the same for all locales.
            </para>
            <para>
            File system folders have a large, standard set of information fields. The first four fields are standard for all file system folders.
            </para>
            <list type="table">
            <listheader>
            <term>Column index</term>
            <term>Column title</term>
            </listheader>
            <item>
            <term>0</term>
            <term>Name</term>
            </item>
            <item>
            <term>1</term>
            <term>Size</term>
            </item>
            <item>
            <term>2</term>
            <term>Type</term>
            </item>
            <item>
            <term>3</term>
            <term>Date Modified</term>
            </item>
            </list>
            <para>
            File system folders can support a number of additional fields. However, they are not required to do so, and the column
            indexes assigned to these fields might vary.
            </para>
            <para>
            Each virtual folder has its own unique set of information fields. Normally, the item's display name is in column zero, but
            the order and content of the remaining fields depend on the implementation of the particular folder object.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellFolder2.MapColumnToSCID(System.UInt32,Vanara.PInvoke.Ole32.PROPERTYKEY@)">
            <summary>Converts a column to the appropriate property set ID (FMTID) and property ID (PID).</summary>
            <param name="iColumn">
            <para>Type: <c>UINT</c></para>
            <para>The column ID.</para>
            </param>
            <param name="pscid">
            <para>Type: <c>SHCOLUMNID*</c></para>
            <para>A pointer to an SHCOLUMNID structure containing the FMTID and PID.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IShellIcon">
            <summary>Exposes a method that obtains an icon index for an IShellFolder object.</summary>
            <remarks>
            <para>
            Implement <c>IShellIcon</c> when creating an IShellFolder implementation to provide a quick way to obtain the icon for an object
            in the folder.
            </para>
            <para>
            If <c>IShellIcon</c> is not implemented by an IShellFolder object, IShellFolder::GetUIObjectOf is used to retrieve an icon for
            all objects.
            </para>
            <para>Use <c>IShellIcon</c> when retrieving the icon index for an item in a Shell folder.</para>
            <para>
            <c>IShellIcon</c> allows an application to obtain the icon for any object within a folder by using only one instance of the
            interface. IExtractIcon, on the other hand, requires that a separate instance of the interface be created for each object.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellIcon.GetIconOf(Vanara.PInvoke.Shell32.PIDL,Vanara.PInvoke.Shell32.GetIconLocationFlags,System.Int32@)">
            <summary>Gets an icon for an object inside a specific folder.</summary>
            <param name="pidl">
            <para>Type: <c>LPCITEMIDLIST</c></para>
            <para>The address of the ITEMIDLIST structure that specifies the relative location of the folder.</para>
            </param>
            <param name="flags">
            <para>Type: <c>UINT</c></para>
            <para>Flags specifying how the icon is to display. This parameter can be zero or one of the following values.</para>
            <para>GIL_FORSHELL</para>
            <para>The icon is to be displayed in a Shell folder.</para>
            <para>GIL_OPENICON</para>
            <para>The icon should be in the open state if both open-state and closed-state images are available. If this flag is not specified, the icon should be in the closed state. This flag is typically used for folder objects.</para>
            </param>
            <param name="pIconIndex">
            <para>Type: <c>LPINT</c></para>
            <para>The address of the index of the icon in the system image list. The following standard image list indexes can be returned.</para>
            <para>0</para>
            <para>Document (blank page, not associated)</para>
            <para>1</para>
            <para>Document (with data on the page)</para>
            <para>2</para>
            <para>Application (file name extension must be .exe, .com, or .bat)</para>
            <para>3</para>
            <para>Folder (plain)</para>
            <para>4</para>
            <para>Folder (open)</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>Returns S_OK if lpIconIndex contains the correct system image list index, or S_FALSE if an icon can't be obtained for this object.</para>
            </returns>
            <remarks>
            <para>If you are unable to retrieve an icon for this object using <c>GetIconOf</c>, use the GetUIObjectOf method to retrieve an object that supports the Extract method.</para>
            <para><c>IShellIcon::GetIconOf</c> fails if CoInitialize is not called first.</para>
            <para>Note to Calling Applications</para>
            <para>The index returned is from the system image list.</para>
            <para>Note to Implementers</para>
            <para>If the icon index used is not one of the standard images listed, it is the implementer's responsibility to add the image to the system image list and then place the index into the lpIconIndex parameter. To prevent the system image list from growing too large, each image should only be added once.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.BindToObject``1(Vanara.PInvoke.Shell32.IShellFolder,Vanara.PInvoke.Shell32.PIDL,System.Runtime.InteropServices.ComTypes.IBindCtx)">
            <summary>Extension method to simplify using the <see cref="M:Vanara.PInvoke.Shell32.IShellFolder.BindToObject(Vanara.PInvoke.Shell32.PIDL,System.Runtime.InteropServices.ComTypes.IBindCtx,System.Guid@,System.Object@)"/> method.</summary>
            <typeparam name="T">Type of the interface to get.</typeparam>
            <param name="sf">An <see cref="T:Vanara.PInvoke.Shell32.IShellFolder"/> instance.</param>
            <param name="pidl">
            The address of an ITEMIDLIST structure (PIDL) that identifies the subfolder. This value can refer to an item at any level below
            the parent folder in the namespace hierarchy. The structure contains one or more SHITEMID structures, followed by a terminating NULL.
            </param>
            <param name="pbc">
            A pointer to an IBindCtx interface on a bind context object that can be used to pass parameters to the construction of the
            handler. If this parameter is not used, set it to NULL. Because support for this parameter is optional for folder object
            implementations, some folders may not support the use of bind contexts.
            <para>
            Information that can be provided in the bind context includes a BIND_OPTS structure that includes a grfMode member that
            indicates the access mode when binding to a stream handler. Other parameters can be set and discovered using
            IBindCtx::RegisterObjectParam and IBindCtx::GetObjectParam.
            </para>
            </param>
            <returns>Receives the interface pointer requested in <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.BindToStorage``1(Vanara.PInvoke.Shell32.IShellFolder,Vanara.PInvoke.Shell32.PIDL,System.Runtime.InteropServices.ComTypes.IBindCtx)">
            <summary>Extension method to simplify using the <see cref="M:Vanara.PInvoke.Shell32.IShellFolder.BindToStorage(Vanara.PInvoke.Shell32.PIDL,System.Runtime.InteropServices.ComTypes.IBindCtx,System.Guid@,System.Object@)"/> method.</summary>
            <typeparam name="T">Type of the interface to get.</typeparam>
            <param name="sf">An <see cref="T:Vanara.PInvoke.Shell32.IShellFolder"/> instance.</param>
            <param name="pidl">
            The address of an ITEMIDLIST structure that identifies the subfolder relative to its parent folder. The structure must contain
            exactly one SHITEMID structure followed by a terminating zero.
            </param>
            <param name="pbc">
            The optional address of an IBindCtx interface on a bind context object to be used during this operation. If this parameter is
            not used, set it to NULL. Because support for pbc is optional for folder object implementations, some folders may not support
            the use of bind contexts.
            </param>
            <returns>Receives the interface pointer requested in <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.CreateViewObject``1(Vanara.PInvoke.Shell32.IShellFolder,Vanara.PInvoke.HWND)">
            <summary>Extension method to simplify using the <see cref="M:Vanara.PInvoke.Shell32.IShellFolder.CreateViewObject(Vanara.PInvoke.HWND,System.Guid@,System.Object@)"/> method.</summary>
            <typeparam name="T">
            <para>This is typically IShellView.</para>
            <para>
            This method is also used to request objects that expose one of several optional interfaces, including IContextMenu or
            IExtractIcon. In this context, <c>CreateViewObject</c> is similar in usage to IShellFolder::GetUIObjectOf. However, you call
            <c>IShellFolder::GetUIObjectOf</c> to request an object for one of the items contained by a folder. Call
            <c>IShellFolder::CreateViewObject</c> to request an object for the folder itself. The most commonly requested interfaces are:
            </para>
            <list type="bullet">
            <item>
            <term>IQueryInfo</term>
            </item>
            <item>
            <term>IShellDetails</term>
            </item>
            <item>
            <term>IDropTarget</term>
            </item>
            </list>
            </typeparam>
            <param name="sf">An <see cref="T:Vanara.PInvoke.Shell32.IShellFolder"/> instance.</param>
            <param name="hwndOwner">
            A handle to the owner window. If you have implemented a custom folder view object, your folder view window should be created as
            a child of hwndOwner.
            </param>
            <remarks>
            <para>To support this request, create an object that exposes the interface indicated by riid and return a pointer to that interface.</para>
            <para>
            The primary purpose of this method is to provide Windows Explorer with the folder object's folder view object. Windows Explorer
            requests a folder view object by setting riid to IID_IShellView. The folder view object displays the contents of the folder in
            the Windows Explorer folder view. The folder view object must be independent of the Shell folder object, because Windows
            Explorer may call this method more than once to create multiple folder view objects. A new view object must be created each time
            this method is called. Your folder object can respond in one of two ways to this request. It can:
            </para>
            <list type="bullet">
            <item>
            <term>Create a custom folder view object and return a pointer to its IShellView interface.</term>
            </item>
            <item>
            <term>Create a system folder view object and return a pointer to its IShellView interface.</term>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.EnumObjects(Vanara.PInvoke.Shell32.IShellFolder,Vanara.PInvoke.Shell32.SHCONTF,Vanara.PInvoke.HWND)">
            <summary>
            Enables a client to determine the contents of a folder by creating an item identifier enumeration object and returning its
            IEnumIDList interface. The methods supported by that interface can then be used to enumerate the folder's contents.
            </summary>
            <param name="sf">An <see cref="T:Vanara.PInvoke.Shell32.IShellFolder"/> instance.</param>
            <param name="grfFlags">
            Flags indicating which items to include in the enumeration. For a list of possible values, see the SHCONTF enumerated type.
            </param>
            <param name="hwnd">
            If user input is required to perform the enumeration, this window handle should be used by the enumeration object as the parent
            window to take user input. An example would be a dialog box to ask for a password or prompt the user to insert a CD or floppy
            disk. If hwndOwner is set to NULL, the enumerator should not post any messages, and if user input is required, it should
            silently fail.
            </param>
            <returns>An enumeration of the PIDL for the folder content items.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.GetDisplayNameOf(Vanara.PInvoke.Shell32.IShellFolder,Vanara.PInvoke.Shell32.SHGDNF,Vanara.PInvoke.Shell32.PIDL)">
            <summary>Retrieves the display name for the specified file object or subfolder.</summary>
            <param name="sf">An <see cref="T:Vanara.PInvoke.Shell32.IShellFolder"/> instance.</param>
            <param name="uFlags">
            <para>Type: <c>SHGDNF</c></para>
            <para>Flags used to request the type of display name to return. For a list of possible values, see the SHGDNF enumerated type.</para>
            </param>
            <param name="pidl">
            <para>Type: <c>PCUITEMID_CHILD</c></para>
            <para>PIDL that uniquely identifies the file object or subfolder relative to the parent folder.</para>
            </param>
            <returns>
            When this method returns, contains the display name. The type of name returned can be the requested type, but the Shell folder
            might return a different type.
            </returns>
            <remarks>
            <para>
            Normally, pidl can refer only to items contained by the parent folder. The PIDL must be single-level and contain exactly one
            SHITEMID structure followed by a terminating zero. If you want to retrieve the display name of an item that is deeper than one
            level away from the parent folder, use SHBindToParent to bind with the item's immediate parent folder and then pass the item's
            single-level PIDL to <c>IShellFolder::GetDisplayNameOf</c>.
            </para>
            <para>
            Also, if the SHGDN_FORPARSING flag is set in uFlags and the SHGDN_INFOLDER flag is not set, pidl can refer to an object at any
            level below the parent folder in the namespace hierarchy. At one time, pidl could be a multilevel PIDL, relative to the parent
            folder, and could contain multiple SHITEMID structures. However, this is no longer supported and pidl should now refer only to a
            single child item.
            </para>
            <para>
            The flags specified in uFlags are hints about the intended use of the name. They do not guarantee that IShellFolder will return
            the requested form of the name. If that form is not available, a different one might be returned. In particular, there is no
            guarantee that the name returned by the SHGDN_FORPARSING flag will be successfully parsed by IShellFolder::ParseDisplayName.
            There are also some combinations of flags that might cause the <c>GetDisplayNameOf</c>/ <c>ParseDisplayName</c> round trip to
            not return the original identifier list. This occurrence is exceptional, but you should check to be sure.
            </para>
            <para>
            <c>Note</c> The parsing name that is returned when uFlags has the SHGDN_FORPARSING flag set is not necessarily a normal text
            string. Virtual folders such as My Computer might return a string containing the folder object's GUID in the form "::{GUID}".
            Developers who implement <c>IShellFolder::GetDisplayNameOf</c> are encouraged to return parse names that are as close to the
            display names as possible, because the end user often needs to type or edit these names.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.GetUIObjectOf``1(Vanara.PInvoke.Shell32.IShellFolder,Vanara.PInvoke.HWND,Vanara.PInvoke.Shell32.PIDL[])">
            <summary>Extension method to simplify using the <see cref="M:Vanara.PInvoke.Shell32.IShellFolder.GetUIObjectOf(Vanara.PInvoke.HWND,System.UInt32,System.IntPtr[],System.Guid@,System.IntPtr,System.Object@)"/> method.</summary>
            <typeparam name="T">Type of the interface to get.</typeparam>
            <param name="sf">An <see cref="T:Vanara.PInvoke.Shell32.IShellFolder"/> instance.</param>
            <param name="hwndOwner">
            A handle to the owner window that the client should specify if it displays a dialog box or message box.
            </param>
            <param name="apidl">
            An array of pointers to ITEMIDLIST structures, each of which uniquely identifies a file object or subfolder relative to the
            parent folder. Each item identifier list must contain exactly one SHITEMID structure followed by a terminating zero.
            </param>
            <returns>Receives the interface pointer requested in <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.GetUIObjectOf``1(Vanara.PInvoke.Shell32.IShellFolder,Vanara.PInvoke.HWND,System.IntPtr[])">
            <summary>Extension method to simplify using the <see cref="M:Vanara.PInvoke.Shell32.IShellFolder.GetUIObjectOf(Vanara.PInvoke.HWND,System.UInt32,System.IntPtr[],System.Guid@,System.IntPtr,System.Object@)"/> method.</summary>
            <typeparam name="T">Type of the interface to get.</typeparam>
            <param name="sf">An <see cref="T:Vanara.PInvoke.Shell32.IShellFolder"/> instance.</param>
            <param name="hwndOwner">
            A handle to the owner window that the client should specify if it displays a dialog box or message box.
            </param>
            <param name="apidl">
            An array of pointers to ITEMIDLIST structures, each of which uniquely identifies a file object or subfolder relative to the
            parent folder. Each item identifier list must contain exactly one SHITEMID structure followed by a terminating zero.
            </param>
            <returns>Receives the interface pointer requested in <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.GetUIObjectOf``1(Vanara.PInvoke.Shell32.IShellFolder,System.IntPtr[],``0@,Vanara.PInvoke.HWND)">
            <summary>Extension method to simplify using the <see cref="M:Vanara.PInvoke.Shell32.IShellFolder.GetUIObjectOf(Vanara.PInvoke.HWND,System.UInt32,System.IntPtr[],System.Guid@,System.IntPtr,System.Object@)"/> method.</summary>
            <typeparam name="T">Type of the interface to get.</typeparam>
            <param name="sf">An <see cref="T:Vanara.PInvoke.Shell32.IShellFolder"/> instance.</param>
            <param name="apidl">
            An array of pointers to ITEMIDLIST structures, each of which uniquely identifies a file object or subfolder relative to the
            parent folder. Each item identifier list must contain exactly one SHITEMID structure followed by a terminating zero.
            </param>
            <param name="ppv">When this method returns successfully, contains the interface pointer requested in <typeparamref name="T"/>.</param>
            <param name="hwndOwner">
            A handle to the owner window that the client should specify if it displays a dialog box or message box.
            </param>
            <returns>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.GetUIObjectOf``1(Vanara.PInvoke.Shell32.IShellFolder,System.IntPtr,``0@,Vanara.PInvoke.HWND)">
            <summary>Extension method to simplify using the <see cref="M:Vanara.PInvoke.Shell32.IShellFolder.GetUIObjectOf(Vanara.PInvoke.HWND,System.UInt32,System.IntPtr[],System.Guid@,System.IntPtr,System.Object@)"/> method.</summary>
            <typeparam name="T">Type of the interface to get.</typeparam>
            <param name="sf">An <see cref="T:Vanara.PInvoke.Shell32.IShellFolder"/> instance.</param>
            <param name="pidl">
            A pointer to ITEMIDLIST structures, which uniquely identifies a file object or subfolder relative to the parent folder. Each
            item identifier list must contain exactly one SHITEMID structure followed by a terminating zero.
            </param>
            <param name="ppv">When this method returns successfully, contains the interface pointer requested in <typeparamref name="T"/>.</param>
            <param name="hwndOwner">
            A handle to the owner window that the client should specify if it displays a dialog box or message box.
            </param>
            <returns>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.CATEGORY_INFO">
            <summary>Specifies methods for sorting category data.</summary>
            <summary>
            Contains category information. A component category is a group of logically-related Component Object Model (COM) classes that
            share a common category identifier (CATID).
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CATEGORY_INFO.cif">
            <summary>
            <para>Type: <c>CATEGORYINFO_FLAGS</c></para>
            <para>A flag from CATEGORYINFO_FLAGS that specifies the type of information to retrieve.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.CATEGORY_INFO.wszName">
            <summary>
            <para>Type: <c>WCHAR[260]</c></para>
            <para>A character array that specifies the name of the category.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.EXTRASEARCH">
            <summary>
            Used by an IEnumExtraSearch enumerator object to return information on the search objects supported by a Shell Folder object.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.EXTRASEARCH.guidSearch">
            <summary>A search object's GUID.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.EXTRASEARCH.wszFriendlyName">
            <summary>
            A Unicode string containing the search object's friendly name. It will be used to identify the search engine on the Search
            Assistant menu.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.EXTRASEARCH.wszUrl">
            <summary>The URL that will be displayed in the search pane.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.ControlPanel">
            <summary>CLSID_ControlPanel</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.Internet">
            <summary>CLSID_Internet</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.MyComputer">
            <summary>CLSID_MyComputer</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.MyDocuments">
            <summary>CLSID_MyDocuments</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.NetworkConnections">
            <summary>CLSID_NetworkConnections</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.NetworkDomain">
            <summary>CLSID_NetworkDomain</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.NetworkExplorerFolder">
            <summary>CLSID_NetworkExplorerFolder</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.NetworkPlaces">
            <summary>CLSID_NetworkPlaces</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.NetworkServer">
            <summary>CLSID_NetworkServer</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.NetworkShare">
            <summary>CLSID_NetworkShare</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.Printers">
            <summary>CLSID_Printers</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.RecycleBin">
            <summary>CLSID_RecycleBin</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.ScheduledTasks">
            <summary>CLSID_ScheduledTasks</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.ShellDesktop">
            <summary>CLSID_ShellDesktop</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.ShellFSFolder">
            <summary>CLSID_ShellFSFolder</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.ISIOI">
            <summary>Specifies the information that is being returned by <see cref="M:Vanara.PInvoke.Shell32.IShellIconOverlayIdentifier.GetOverlayInfo(System.Text.StringBuilder,System.Int32,System.Int32@,Vanara.PInvoke.Shell32.ISIOI@)"/>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ISIOI.ISIOI_ICONFILE">
            <summary>The path of the icon file is returned through pwszIconFile.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ISIOI.ISIOI_ICONINDEX">
            <summary>There is more than one icon in pwszIconFile. The icon's index is returned through pIndex.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IShellIconOverlayIdentifier">
            <summary>Exposes methods that handle all communication between icon overlay handlers and the Shell.</summary>
            <remarks>
            <para>
            Icon overlays are small images placed at the lower-left corner of the icon that represents a Shell object in Windows Explorer or
            on the desktop. They are used to add some extra information to the object's normal icon. A commonly used icon overlay is the
            small arrow that indicates that a file or folder is actually a link. You can specify custom icon overlays for Shell objects by
            implementing and registering an icon overlay handler.
            </para>
            <para>
            Icon overlay handlers are Component Object Model (COM) objects that are associated with a particular icon overlay. For a general
            discussion of icon overlay handlers, see How to Implement Icon Overlay Handlers.
            </para>
            <para>This interface must be implemented by all icon overlay handlers.</para>
            <para>This interface is not typically called by applications.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellIconOverlayIdentifier.IsMemberOf(System.String,Vanara.PInvoke.Shell32.SFGAO)">
            <summary>Specifies whether an icon overlay should be added to a Shell object's icon.</summary>
            <param name="pwszPath">
            <para>Type: <c>PCWSTR</c></para>
            <para>A Unicode string that contains the fully qualified path of the Shell object.</para>
            </param>
            <param name="dwAttrib">
            <para>Type: <c>DWORD</c></para>
            <para>The object's attributes. For a complete list of file attributes and their associated flags, see <see cref="M:Vanara.PInvoke.Shell32.IShellFolder.GetAttributesOf(System.UInt32,System.IntPtr[],Vanara.PInvoke.Shell32.SFGAO@)"/>.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>This method returns one of the following:</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>S_OK</term>
            <term>The icon overlay should be displayed.</term>
            </item>
            <item>
            <term>S_FALSE</term>
            <term>The icon overlay should not be displayed.</term>
            </item>
            <item>
            <term>E_FAIL</term>
            <term>The operation failed.</term>
            </item>
            </list>
            </returns>
            <remarks>
            The Shell calls this method to determine whether it should display a handler's icon overlay for a particular object. Icon
            overlay handlers are usually intended to work with a particular group of files. A typical example is a file type, identified
            by a specific file name extension. An icon overlay handler might request an icon overlay for all members of the file type.
            Some handlers request an icon overlay only if a member of the file type is in a particular state. However, icon overlay
            handlers are free to request their icon overlay for any object that they want.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellIconOverlayIdentifier.GetOverlayInfo(System.Text.StringBuilder,System.Int32,System.Int32@,Vanara.PInvoke.Shell32.ISIOI@)">
            <summary>Provides the location of the icon overlay's bitmap.</summary>
            <param name="pwszIconFile">
            <para>Type: <c>PWSTR</c></para>
            <para>
            A null-terminated Unicode string that contains the fully qualified path of the file containing the icon. The .dll, .exe, and
            .ico file types are all acceptable. You must set the <c>ISIOI_ICONFILE</c> flag in pdwFlags if you return a file name.
            </para>
            </param>
            <param name="cchMax">
            <para>Type: <c>int</c></para>
            <para>The size of the pwszIconFile buffer, in Unicode characters.</para>
            </param>
            <param name="pIndex">
            <para>Type: <c>int*</c></para>
            <para>
            Pointer to an index value used to identify the icon in a file that contains multiple icons. You must set the
            <c>ISIOI_ICONINDEX</c> flag in pdwFlags if you return an index.
            </para>
            </param>
            <param name="pdwFlags">
            <para>Type: <c>DWORD*</c></para>
            <para>
            Pointer to a bitmap that specifies the information that is being returned by the method. This parameter can be one or both
            of the following values.
            </para>
            <para>ISIOI_ICONFILE (0x00000001)</para>
            <para>The path of the icon file is returned through pwszIconFile.</para>
            <para>ISIOI_ICONINDEX (0x00000002)</para>
            <para>There is more than one icon in pwszIconFile. The icon's index is returned through pIndex.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            <para>
            This method is called by the Shell at startup so that the handler's icon overlay can be added to the system image list.
            After initialization is complete, the Shell calls <c>GetOverlayInfo</c> when it needs to display the handler's icon overlay.
            </para>
            <para>
            <c>Note</c> Once the image has been loaded into the system image list during initialization, it cannot be changed. After
            initialization, the file name and index are used only to identify the icon overlay. The system will not load a new icon
            overlay. When <c>GetOverlayInfo</c> is called, your handler must return the same file name and index that were specified
            when the function was first called.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellIconOverlayIdentifier.GetPriority(System.Int32@)">
            <summary>Specifies the priority of an icon overlay.</summary>
            <param name="pPriority">
            <para>Type: <c>int*</c></para>
            <para>
            The address of a value that indicates the priority of the overlay identifier. Possible values range from zero to 100, with
            zero the highest priority.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>Returns S_OK if successful, or a COM error code otherwise.</para>
            </returns>
            <remarks>
            If more than one icon overlay is available for an object, the one with highest priority is chosen. The Shell has a set of
            internal rules that determine priority for many cases. The value returned by <c>GetPriority</c> is used for those cases in
            which the Shell's internal rules do not apply. Typically, you should set the value to zero. However, the priority value is
            useful when you have implemented two or more icon overlay handlers that can request icon overlay icons for the same object.
            By setting the priority values appropriately, you can specify which of the requested icon overlays will be displayed.
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.SFGAO">
            <summary>Attributes that can be retrieved on an item (file or folder) or set of items.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SFGAO.SFGAO_BROWSABLE">
            <summary>The specified items can be hosted inside a web browser or Windows Explorer frame.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SFGAO.SFGAO_CANCOPY">
            <summary>The specified items can be copied.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SFGAO.SFGAO_CANDELETE">
            <summary>The specified items can be deleted.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SFGAO.SFGAO_CANLINK">
            <summary>
            Shortcuts can be created for the specified items. This attribute has the same value as DROPEFFECT_LINK.
            <para>
            If a namespace extension returns this attribute, a Create Shortcut entry with a default handler is added to the shortcut menu
            that is displayed during drag-and-drop operations. The extension can also implement its own handler for the link verb in
            place of the default. If the extension does so, it is responsible for creating the shortcut.
            </para>
            <para>A Create Shortcut item is also added to the Windows Explorer File menu and to normal shortcut menus.</para>
            <para>
            If the item is selected, your application's IContextMenu::InvokeCommand method is invoked with the lpVerb member of the
            CMINVOKECOMMANDINFO structure set to link. Your application is responsible for creating the link.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SFGAO.SFGAO_CANMONIKER">
            <summary>Not supported.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SFGAO.SFGAO_CANMOVE">
            <summary>The specified items can be moved.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SFGAO.SFGAO_CANRENAME">
            <summary>
            The specified items can be renamed. Note that this value is essentially a suggestion; not all namespace clients allow items
            to be renamed. However, those that do must have this attribute set.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SFGAO.SFGAO_CAPABILITYMASK">
            <summary>
            This flag is a mask for the capability attributes: SFGAO_CANCOPY, SFGAO_CANMOVE, SFGAO_CANLINK, SFGAO_CANRENAME,
            SFGAO_CANDELETE, SFGAO_HASPROPSHEET, and SFGAO_DROPTARGET. Callers normally do not use this value.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SFGAO.SFGAO_COMPRESSED">
            <summary>The specified items are compressed.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SFGAO.SFGAO_CONTENTSMASK">
            <summary>
            This flag is a mask for content attributes, at present only SFGAO_HASSUBFOLDER. Callers normally do not use this value.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SFGAO.SFGAO_DISPLAYATTRMASK">
            <summary>Do not use.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SFGAO.SFGAO_DROPTARGET">
            <summary>The specified items are drop targets.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SFGAO.SFGAO_ENCRYPTED">
            <summary>The specified items are encrypted and might require special presentation.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SFGAO.SFGAO_FILESYSANCESTOR">
            <summary>
            The specified folders are either file system folders or contain at least one descendant (child, grandchild, or later) that is
            a file system (SFGAO_FILESYSTEM) folder.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SFGAO.SFGAO_FILESYSTEM">
            <summary>
            The specified folders or files are part of the file system (that is, they are files, directories, or root directories). The
            parsed names of the items can be assumed to be valid Win32 file system paths. These paths can be either UNC or drive-letter based.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SFGAO.SFGAO_FOLDER">
            <summary>
            The specified items are folders. Some items can be flagged with both SFGAO_STREAM and SFGAO_FOLDER, such as a compressed file
            with a .zip file name extension. Some applications might include this flag when testing for items that are both files and containers.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SFGAO.SFGAO_GHOSTED">
            <summary>The specified items are shown as dimmed and unavailable to the user.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SFGAO.SFGAO_HASPROPSHEET">
            <summary>The specified items have property sheets.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SFGAO.SFGAO_HASSTORAGE">
            <summary>Not supported.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SFGAO.SFGAO_HASSUBFOLDER">
            <summary>
            The specified folders have subfolders. The SFGAO_HASSUBFOLDER attribute is only advisory and might be returned by Shell
            folder implementations even if they do not contain subfolders. Note, however, that the converse—failing to return
            SFGAO_HASSUBFOLDER—definitively states that the folder objects do not have subfolders.
            <para>
            Returning SFGAO_HASSUBFOLDER is recommended whenever a significant amount of time is required to determine whether any
            subfolders exist. For example, the Shell always returns SFGAO_HASSUBFOLDER when a folder is located on a network drive.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SFGAO.SFGAO_HIDDEN">
            <summary>
            The item is hidden and should not be displayed unless the Show hidden files and folders option is enabled in Folder Settings.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SFGAO.SFGAO_ISSLOW">
            <summary>
            Accessing the item (through IStream or other storage interfaces) is expected to be a slow operation. Applications should
            avoid accessing items flagged with SFGAO_ISSLOW. <note>Opening a stream for an item is generally a slow operation at all
            times. SFGAO_ISSLOW indicates that it is expected to be especially slow, for example in the case of slow network connections
            or offline (FILE_ATTRIBUTE_OFFLINE) files. However, querying SFGAO_ISSLOW is itself a slow operation. Applications should
            query SFGAO_ISSLOW only on a background thread. An alternate method, such as retrieving the PKEY_FileAttributes property and
            testing for FILE_ATTRIBUTE_OFFLINE, could be used in place of a method call that involves SFGAO_ISSLOW.</note>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SFGAO.SFGAO_LINK">
            <summary>The specified items are shortcuts.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SFGAO.SFGAO_NEWCONTENT">
            <summary>The items contain new content, as defined by the particular application.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SFGAO.SFGAO_NONENUMERATED">
            <summary>
            The items are nonenumerated items and should be hidden. They are not returned through an enumerator such as that created by
            the IShellFolder::EnumObjects method.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SFGAO.SFGAO_PKEYSFGAOMASK">
            <summary>
            Mask used by the PKEY_SFGAOFlags property to determine attributes that are considered to cause slow calculations or lack
            context: SFGAO_ISSLOW, SFGAO_READONLY, SFGAO_HASSUBFOLDER, and SFGAO_VALIDATE. Callers normally do not use this value.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SFGAO.SFGAO_READONLY">
            <summary>
            The specified items are read-only. In the case of folders, this means that new items cannot be created in those folders. This
            should not be confused with the behavior specified by the FILE_ATTRIBUTE_READONLY flag retrieved by
            IColumnProvider::GetItemData in a SHCOLUMNDATA structure. FILE_ATTRIBUTE_READONLY has no meaning for Win32 file system folders.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SFGAO.SFGAO_REMOVABLE">
            <summary>The specified items are on removable media or are themselves removable devices.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SFGAO.SFGAO_SHARE">
            <summary>The specified objects are shared.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SFGAO.SFGAO_STORAGE">
            <summary>
            The specified items can be bound to an IStorage object through IShellFolder::BindToObject. For more information about
            namespace manipulation capabilities, see IStorage.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SFGAO.SFGAO_STORAGEANCESTOR">
            <summary>
            Children of this item are accessible through IStream or IStorage. Those children are flagged with SFGAO_STORAGE or SFGAO_STREAM.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SFGAO.SFGAO_STORAGECAPMASK">
            <summary>
            This flag is a mask for the storage capability attributes: SFGAO_STORAGE, SFGAO_LINK, SFGAO_READONLY, SFGAO_STREAM,
            SFGAO_STORAGEANCESTOR, SFGAO_FILESYSANCESTOR, SFGAO_FOLDER, and SFGAO_FILESYSTEM. Callers normally do not use this value.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SFGAO.SFGAO_STREAM">
            <summary>
            Indicates that the item has a stream associated with it. That stream can be accessed through a call to
            IShellFolder::BindToObject or IShellItem::BindToHandler with IID_IStream in the riid parameter.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SFGAO.SFGAO_SYSTEM">
            <summary>Windows 7 and later. The specified items are system items.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SFGAO.SFGAO_VALIDATE">
            <summary>
            When specified as input, SFGAO_VALIDATE instructs the folder to validate that the items contained in a folder or Shell item
            array exist. If one or more of those items do not exist, IShellFolder::GetAttributesOf and IShellItemArray::GetAttributes
            return a failure code. This flag is never returned as an [out] value.
            <para>
            When used with the file system folder, SFGAO_VALIDATE instructs the folder to discard cached properties retrieved by clients
            of IShellFolder2::GetDetailsEx that might have accumulated for the specified items.
            </para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.SIATTRIBFLAGS">
            <summary>
            If the array contains a single item, this method provides the same results as GetAttributes. However, if the array contains
            multiple items, the attribute sets of all the items are combined into a single attribute set and returned in the value pointed to
            by psfgaoAttribs. This parameter takes one of the following values to define how that final attribute set is determined:
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SIATTRIBFLAGS.SIATTRIBFLAGS_AND">
            <summary>
            If there are multiple items in the array, use a bitwise AND to combine the attributes across items. For instance, if the
            array contains two items where one item can be moved (SFGAO_CANMOVE) and a second item cannot, the method returns (1 &amp; 0)
            or 0 for that attribute bit.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SIATTRIBFLAGS.SIATTRIBFLAGS_APPCOMPAT">
            <summary>
            Retrieve the attributes directly from the Shell data source. To use this value, the Shell item array must have been
            initialized as an IShellFolder with its contents specified as an array of child PIDLs.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SIATTRIBFLAGS.SIATTRIBFLAGS_OR">
            <summary>
            If there are multiple items in the array, use a bitwise OR to combine the attributes across items. For instance, if the array
            contains two items where one item can be moved (SFGAO_CANMOVE) and a second item cannot, the method returns (1 | 0) or 1 for
            that attribute bit.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SIATTRIBFLAGS.SIATTRIBFLAGS_ALLITEMS">
            <summary>
            Windows 7 and later. Examine all items in the array to compute the attributes. Note that this can result in poor performance
            over large arrays and therefore it should be used only when needed. Cases in which you pass this flag should be extremely
            rare. See Remarks for more details.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.SICHINTF">
            <summary>Used to determine how to compare two Shell items. IShellItem::Compare uses this enumerated type.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SICHINTF.SICHINT_ALLFIELDS">
            <summary>Exact comparison of two instances of a Shell item.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SICHINTF.SICHINT_CANONICAL">
            <summary>
            This relates to the iOrder parameter of the IShellItem::Compare interface and indicates that the comparison is based on a
            canonical name.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SICHINTF.SICHINT_DISPLAY">
            <summary>
            This relates to the iOrder parameter of the IShellItem::Compare interface and indicates that the comparison is based on the
            display in a folder view.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SICHINTF.SICHINT_TEST_FILESYSPATH_IF_NOT_EQUAL">
            <summary>Windows 7 and later. If the Shell items are not the same, test the file system paths.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.SIGDN">
            <summary>Requests the form of an item's display name to retrieve through IShellItem::GetDisplayName and SHGetNameFromIDList.</summary>
            <remarks>
            Different forms of an item's name can be retrieved through the item's properties, including those listed here. Note that not all
            properties are present on all items, so only those appropriate to the item will appear.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SIGDN.SIGDN_DESKTOPABSOLUTEEDITING">
            <summary>Returns the editing name relative to the desktop. In UI this name is suitable for display to the user.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SIGDN.SIGDN_DESKTOPABSOLUTEPARSING">
            <summary>Returns the parsing name relative to the desktop. This name is not suitable for use in UI.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SIGDN.SIGDN_FILESYSPATH">
            <summary>
            Returns the item's file system path, if it has one. Only items that report SFGAO_FILESYSTEM have a file system path. When an
            item does not have a file system path, a call to IShellItem::GetDisplayName on that item will fail. In UI this name is
            suitable for display to the user in some cases, but note that it might not be specified for all items.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SIGDN.SIGDN_NORMALDISPLAY">
            <summary>
            Returns the display name relative to the parent folder. In UI this name is generally ideal for display to the user.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SIGDN.SIGDN_PARENTRELATIVE">
            <summary>Returns the path relative to the parent folder.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SIGDN.SIGDN_PARENTRELATIVEEDITING">
            <summary>Returns the editing name relative to the parent folder. In UI this name is suitable for display to the user.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SIGDN.SIGDN_PARENTRELATIVEFORADDRESSBAR">
            <summary>
            Returns the path relative to the parent folder in a friendly format as displayed in an address bar. This name is suitable for
            display to the user.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SIGDN.SIGDN_PARENTRELATIVEFORUI">
            <summary>Introduced in Windows 8.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SIGDN.SIGDN_PARENTRELATIVEPARSING">
            <summary>Returns the parsing name relative to the parent folder. This name is not suitable for use in UI.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SIGDN.SIGDN_URL">
            <summary>
            Returns the item's URL, if it has one. Some items do not have a URL, and in those cases a call to IShellItem::GetDisplayName
            will fail. This name is suitable for display to the user in some cases, but note that it might not be specified for all items.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.SIIGBF">
            <summary>Flags for <see cref="M:Vanara.PInvoke.Shell32.IShellItemImageFactory.GetImage(Vanara.PInvoke.SIZE,Vanara.PInvoke.Shell32.SIIGBF,Vanara.PInvoke.Gdi32.SafeHBITMAP@)"/>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SIIGBF.SIIGBF_RESIZETOFIT">
            <summary>Shrink the bitmap as necessary to fit, preserving its aspect ratio.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SIIGBF.SIIGBF_BIGGERSIZEOK">
            <summary>
            Passed by callers if they want to stretch the returned image themselves. For example, if the caller passes an icon size of
            80x80, a 96x96 thumbnail could be returned. This action can be used as a performance optimization if the caller expects that
            they will need to stretch the image. Note that the Shell implementation of IShellItemImageFactory performs a GDI stretch
            blit. If the caller wants a higher quality image stretch than provided through that mechanism, they should pass this flag and
            perform the stretch themselves.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SIIGBF.SIIGBF_MEMORYONLY">
            <summary>
            Return the item only if it is already in memory. Do not access the disk even if the item is cached. Note that this only
            returns an already-cached icon and can fall back to a per-class icon if an item has a per-instance icon that has not been
            cached. Retrieving a thumbnail, even if it is cached, always requires the disk to be accessed, so GetImage should not be
            called from the UI thread without passing SIIGBF_MEMORYONLY.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SIIGBF.SIIGBF_ICONONLY">
            <summary>Return only the icon, never the thumbnail.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SIIGBF.SIIGBF_THUMBNAILONLY">
            <summary>
            Return only the thumbnail, never the icon. Note that not all items have thumbnails, so SIIGBF_THUMBNAILONLY will cause the
            method to fail in these cases.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SIIGBF.SIIGBF_INCACHEONLY">
            <summary>
            Allows access to the disk, but only to retrieve a cached item. This returns a cached thumbnail if it is available. If no
            cached thumbnail is available, it returns a cached per-instance icon but does not extract a thumbnail or icon.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SIIGBF.SIIGBF_CROPTOSQUARE">
            <summary>Introduced in Windows 8. If necessary, crop the bitmap to a square.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SIIGBF.SIIGBF_WIDETHUMBNAILS">
            <summary>Introduced in Windows 8. Stretch and crop the bitmap to a 0.7 aspect ratio.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SIIGBF.SIIGBF_ICONBACKGROUND">
            <summary>
            Introduced in Windows 8. If returning an icon, paint a background using the associated app's registered background color.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SIIGBF.SIIGBF_SCALEUP">
            <summary>Introduced in Windows 8. If necessary, stretch the bitmap so that the height and width fit the given size.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IEnumShellItems">
            <summary>
            Exposes enumeration of IShellItem interfaces. This interface is typically obtained by calling the IEnumShellItems method.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IEnumShellItems.Next(System.UInt32,Vanara.PInvoke.Shell32.IShellItem[],System.UInt32@)">
            <summary>Gets an array of one or more IShellItem interfaces from the enumeration.</summary>
            <param name="celt">The number of elements in the array referenced by the rgelt parameter.</param>
            <param name="rgelt">
            The address of an array of pointers to IShellItem interfaces that receive the enumerated item or items. The calling
            application is responsible for freeing the IShellItem interfaces by calling the IUnknown::Release method.
            </param>
            <param name="pceltFetched">
            A pointer to a value that receives the number of IShellItem interfaces successfully retrieved. The count can be smaller than
            the value specified in the celt parameter. This parameter can be NULL on entry only if celt is one, because in that case the
            method can only retrieve one item and return S_OK, or zero items and return S_FALSE.
            </param>
            <returns>
            Returns S_OK if the method successfully retrieved the requested celt elements. This method only returns S_OK if the full
            count of requested items are successfully retrieved. S_FALSE indicates that more items were requested than remained in the
            enumeration. The value pointed to by the pceltFetched parameter specifies the actual number of items retrieved. Note that the
            value will be 0 if there are no more items to retrieve.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IEnumShellItems.Skip(System.UInt32)">
            <summary>Skips the specified number of elements in the enumeration sequence.</summary>
            <param name="celt">The number of IShellItem interfaces to skip.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IEnumShellItems.Reset">
            <summary>Returns to the beginning of the enumeration sequence.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IEnumShellItems.Clone">
            <summary>Gets a copy of the current enumeration.</summary>
            <returns>The address of a pointer that receives a copy of this enumeration.</returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IParseAndCreateItem">
            <summary>When the <c>STR_PARSE_AND_CREATE_ITEM</c> binding context is specified, this interface gets or sets the stored Shell items that SHCreateItemFromParsingName creates from a parsing name.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IParseAndCreateItem.SetItem(Vanara.PInvoke.Shell32.IShellItem)">
            <summary>Sets a Shell item that SHCreateItemFromParsingName created from a parsing name.</summary>
            <param name="psi">
            <para>Type: <c>IShellItem*</c></para>
            <para>Pointer to an IShellItem object.</para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IParseAndCreateItem.GetItem(System.Guid@,System.Object@)">
            <summary>Gets a stored Shell item that SHCreateItemFromParsingName created from a parsing name.</summary>
            <param name="riid">
            <para>Type: <c>REFIID</c></para>
            <para>A reference to the IID of the interface to retrieve through ppv, typically IID_IShellItem.</para>
            </param>
            <param name="ppv">
            <para>Type: <c>void**</c></para>
            <para>When this method returns successfully, contains the interface pointer requested in riid. This is typically IShellItem.</para>
            </param>
            <remarks>
            We recommend that you use the <c>IID_PPV_ARGS</c> macro, defined in Objbase.h, to package the riid and ppv parameters. This
            macro provides the correct IID based on the interface pointed to by the value in ppv, which eliminates the possibility of a
            coding error in riid that could lead to unexpected results.
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IShellItem">
            <summary>
            Exposes methods that retrieve information about a Shell item. IShellItem and IShellItem2 are the preferred representations of
            items in any new code.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellItem.BindToHandler(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Guid@,System.Guid@)">
            <summary>Binds to a handler for an item as specified by the handler ID value (BHID).</summary>
            <param name="pbc">
            A pointer to an IBindCtx interface on a bind context object. Used to pass optional parameters to the handler. The contents of
            the bind context are handler-specific. For example, when binding to BHID_Stream, the STGM flags in the bind context indicate
            the mode of access desired (read or read/write).
            </param>
            <param name="bhid">Reference to a GUID that specifies which handler will be created.</param>
            <param name="riid">IID of the object type to retrieve.</param>
            <returns>When this method returns, contains a pointer of type riid that is returned by the handler specified by rbhid.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellItem.GetParent">
            <summary>Gets the parent of an IShellItem object.</summary>
            <returns>The address of a pointer to the parent of an IShellItem interface.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellItem.GetDisplayName(Vanara.PInvoke.Shell32.SIGDN)">
            <summary>Gets the display name of the IShellItem object.</summary>
            <param name="sigdnName">One of the SIGDN values that indicates how the name should look.</param>
            <returns>
            A value that, when this function returns successfully, receives the address of a pointer to the retrieved display name.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellItem.GetAttributes(Vanara.PInvoke.Shell32.SFGAO)">
            <summary>Gets a requested set of attributes of the IShellItem object.</summary>
            <param name="sfgaoMask">
            Specifies the attributes to retrieve. One or more of the SFGAO values. Use a bitwise OR operator to determine the attributes
            to retrieve.
            </param>
            <returns>
            A pointer to a value that, when this method returns successfully, contains the requested attributes. One or more of the SFGAO
            values. Only those attributes specified by sfgaoMask are returned; other attribute values are undefined.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellItem.Compare(Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.Shell32.SICHINTF)">
            <summary>Compares two IShellItem objects.</summary>
            <param name="psi">A pointer to an IShellItem object to compare with the existing IShellItem object.</param>
            <param name="hint">
            One of the SICHINTF values that determines how to perform the comparison. See SICHINTF for the list of possible values for
            this parameter.
            </param>
            <returns>
            This parameter receives the result of the comparison. If the two items are the same this parameter equals zero; if they are
            different the parameter is nonzero.
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IShellItem2">
            <summary>
            Extends IShellItem with methods that retrieve various property values of the item. IShellItem and IShellItem2 are the preferred
            representations of items in any new code.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellItem2.BindToHandler(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Guid@,System.Guid@)">
            <summary>Binds to a handler for an item as specified by the handler ID value (BHID).</summary>
            <param name="pbc">
            A pointer to an IBindCtx interface on a bind context object. Used to pass optional parameters to the handler. The contents of
            the bind context are handler-specific. For example, when binding to BHID_Stream, the STGM flags in the bind context indicate
            the mode of access desired (read or read/write).
            </param>
            <param name="bhid">Reference to a GUID that specifies which handler will be created.</param>
            <param name="riid">IID of the object type to retrieve.</param>
            <returns>When this method returns, contains a pointer of type riid that is returned by the handler specified by rbhid.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellItem2.GetParent">
            <summary>Gets the parent of an IShellItem object.</summary>
            <returns>The address of a pointer to the parent of an IShellItem interface.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellItem2.GetDisplayName(Vanara.PInvoke.Shell32.SIGDN)">
            <summary>Gets the display name of the IShellItem object.</summary>
            <param name="sigdnName">One of the SIGDN values that indicates how the name should look.</param>
            <returns>
            A value that, when this function returns successfully, receives the address of a pointer to the retrieved display name.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellItem2.GetAttributes(Vanara.PInvoke.Shell32.SFGAO)">
            <summary>Gets a requested set of attributes of the IShellItem object.</summary>
            <param name="sfgaoMask">
            Specifies the attributes to retrieve. One or more of the SFGAO values. Use a bitwise OR operator to determine the attributes
            to retrieve.
            </param>
            <returns>
            A pointer to a value that, when this method returns successfully, contains the requested attributes. One or more of the SFGAO
            values. Only those attributes specified by sfgaoMask are returned; other attribute values are undefined.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellItem2.Compare(Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.Shell32.SICHINTF)">
            <summary>Compares two IShellItem objects.</summary>
            <param name="psi">A pointer to an IShellItem object to compare with the existing IShellItem object.</param>
            <param name="hint">
            One of the SICHINTF values that determines how to perform the comparison. See SICHINTF for the list of possible values for
            this parameter.
            </param>
            <returns>
            This parameter receives the result of the comparison. If the two items are the same this parameter equals zero; if they are
            different the parameter is nonzero.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellItem2.GetPropertyStore(Vanara.PInvoke.PropSys.GETPROPERTYSTOREFLAGS,System.Guid@)">
            <summary>Gets a property store object for specified property store flags.</summary>
            <param name="flags">The GETPROPERTYSTOREFLAGS constants that modify the property store object.</param>
            <param name="riid">A reference to the IID of the object to be retrieved.</param>
            <returns>When this method returns, contains the address of an IPropertyStore interface pointer.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellItem2.GetPropertyStoreWithCreateObject(Vanara.PInvoke.PropSys.GETPROPERTYSTOREFLAGS,System.Object,System.Guid@)">
            <summary>
            Uses the specified ICreateObject instead of CoCreateInstance to create an instance of the property handler associated with
            the Shell item on which this method is called. Most calling applications do not need to call this method, and can call
            IShellItem2::GetPropertyStore instead.
            </summary>
            <param name="flags">The GETPROPERTYSTOREFLAGS constants that modify the property store object.</param>
            <param name="punkCreateObject">
            A pointer to a factory for low-rights creation of type ICreateObject.
            <para>
            The method CreateObject creates an instance of a COM object. The implementation of
            IShellItem2::GetPropertyStoreWithCreateObject uses CreateObject instead of CoCreateInstance to create the property handler,
            which is a Shell extension, for a given file type. The property handler provides many of the important properties in the
            property store that this method returns.
            </para>
            <para>
            This method is useful only if the ICreateObject object is created in a separate process (as a LOCALSERVER instead of an
            INPROCSERVER), and also if this other process has lower rights than the process calling IShellItem2::GetPropertyStoreWithCreateObject.
            </para>
            </param>
            <param name="riid">A reference to the IID of the object to be retrieved.</param>
            <returns>When this method returns, contains the address of the requested IPropertyStore interface pointer.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellItem2.GetPropertyStoreForKeys(Vanara.PInvoke.Ole32.PROPERTYKEY[],System.UInt32,Vanara.PInvoke.PropSys.GETPROPERTYSTOREFLAGS,System.Guid@)">
            <summary>Gets property store object for specified property keys.</summary>
            <param name="rgKeys">
            A pointer to an array of PROPERTYKEY structures. Each structure contains a unique identifier for each property used in
            creating the property store.
            </param>
            <param name="cKeys">The number of PROPERTYKEY structures in the array pointed to by rgKeys.</param>
            <param name="flags">The GETPROPERTYSTOREFLAGS constants that modify the property store object.</param>
            <param name="riid">A reference to the IID of the object to be retrieved.</param>
            <returns></returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellItem2.GetPropertyDescriptionList(Vanara.PInvoke.Ole32.PROPERTYKEY@,System.Guid@)">
            <summary>Gets a property description list object given a reference to a property key.</summary>
            <param name="keyType">A reference to a PROPERTYKEY structure.</param>
            <param name="riid">A reference to a desired IID.</param>
            <returns>Contains the address of an IPropertyDescriptionList interface pointer.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellItem2.Update(System.Runtime.InteropServices.ComTypes.IBindCtx)">
            <summary>Ensures that any cached information in this item is updated.</summary>
            <param name="pbc">A pointer to an IBindCtx interface on a bind context object.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellItem2.GetProperty(Vanara.PInvoke.Ole32.PROPERTYKEY@)">
            <summary>Gets a PROPVARIANT structure from a specified property key.</summary>
            <param name="key">A reference to a PROPERTYKEY structure.</param>
            <returns>Contains a pointer to a PROPVARIANT structure.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellItem2.GetCLSID(Vanara.PInvoke.Ole32.PROPERTYKEY@)">
            <summary>Gets the class identifier (CLSID) value of specified property key.</summary>
            <param name="key">A reference to a PROPERTYKEY structure.</param>
            <returns>A pointer to a CLSID value.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellItem2.GetFileTime(Vanara.PInvoke.Ole32.PROPERTYKEY@)">
            <summary>Gets the date and time value of a specified property key.</summary>
            <param name="key">A reference to a PROPERTYKEY structure.</param>
            <returns>A pointer to a date and time value.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellItem2.GetInt32(Vanara.PInvoke.Ole32.PROPERTYKEY@)">
            <summary>Gets the Int32 value of specified property key.</summary>
            <param name="key">A reference to a PROPERTYKEY structure.</param>
            <returns>A pointer to an Int32 value.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellItem2.GetString(Vanara.PInvoke.Ole32.PROPERTYKEY@)">
            <summary>Gets the string value of a specified property key.</summary>
            <param name="key">A reference to a PROPERTYKEY structure.</param>
            <returns>A pointer to a Unicode string value.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellItem2.GetUInt32(Vanara.PInvoke.Ole32.PROPERTYKEY@)">
            <summary>Gets the UInt32 value of specified property key.</summary>
            <param name="key">A reference to a PROPERTYKEY structure.</param>
            <returns>A pointer to an UInt32 value.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellItem2.GetUInt64(Vanara.PInvoke.Ole32.PROPERTYKEY@)">
            <summary>Gets the UInt64 value of specified property key.</summary>
            <param name="key">A reference to a PROPERTYKEY structure.</param>
            <returns>A pointer to an UInt64 value.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellItem2.GetBool(Vanara.PInvoke.Ole32.PROPERTYKEY@)">
            <summary>Gets the boolean value of a specified property key.</summary>
            <param name="key">A reference to a PROPERTYKEY structure.</param>
            <returns>A pointer to a boolean value.</returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IShellItemArray">
            <summary>Exposes methods that create and manipulate Shell item arrays.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellItemArray.BindToHandler(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Guid@,System.Guid@)">
            <summary>Binds to an object by means of the specified handler.</summary>
            <param name="pbc">A pointer to an IBindCtx interface on a bind context object.</param>
            <param name="rbhid">
            One of the following values, defined in Shlguid.h, that determine the handler.
            <list>
            <item>
            <term>BHID_SFUIObject</term>
            <description>
            Restricts usage to GetUIObjectOf. Use this handler type only for a flat item array, where all items are in the same folder.
            </description>
            </item>
            <item>
            <term>BHID_DataObject</term>
            <description>
            Introduced in Windows Vista: Gets an IDataObject object for use with an item or an array of items. Use this handler type only
            for flat data objects or item arrays created by SHCreateShellItemArrayFromDataObject.
            </description>
            </item>
            <item>
            <term>BHID_AssociationArray</term>
            <description>
            Introduced in Windows Vista: Gets an IQueryAssociations object for use with an item or an array of items. This only retrieves
            the association array object for the first item in the IShellItemArray
            </description>
            </item>
            </list>
            </param>
            <param name="riid">The IID of the object type to retrieve.</param>
            <returns>
            When this /// methods returns, contains the object specified in riid that is returned by the handler specified by rbhid.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellItemArray.GetPropertyStore(Vanara.PInvoke.PropSys.GETPROPERTYSTOREFLAGS,System.Guid@)">
            <summary>Gets a property store.</summary>
            <param name="flags">One of the GETPROPERTYSTOREFLAGS constants.</param>
            <param name="riid">The IID of the object type to retrieve.</param>
            <returns>
            When this method returns, contains interface pointer requested in riid. This is typically IPropertyStore or IPropertyStoreCapabilities.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellItemArray.GetPropertyDescriptionList(Vanara.PInvoke.Ole32.PROPERTYKEY@,System.Guid@)">
            <summary>Gets a property description list for the items in the shell item array.</summary>
            <param name="keyType">A reference to the PROPERTYKEY structure specifying which property list to retrieve.</param>
            <param name="riid">The IID of the object type to retrieve.</param>
            <returns>When this method returns, contains the interface requested in riid. This will typically be IPropertyDescriptionList.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellItemArray.GetAttributes(Vanara.PInvoke.Shell32.SIATTRIBFLAGS,Vanara.PInvoke.Shell32.SFGAO)">
            <summary>
            Gets the attributes of the set of items contained in an IShellItemArray. If the array contains more than one item, the
            attributes retrieved by this method are not the attributes of single items, but a logical combination of all of the requested
            attributes of all of the items.
            </summary>
            <param name="dwAttribFlags">
            If the array contains a single item, this method provides the same results as GetAttributes. However, if the array contains
            multiple items, the attribute sets of all the items are combined into a single attribute set and returned in the value
            pointed to by psfgaoAttribs. This parameter takes one of the following values to define how that final attribute set is determined:
            </param>
            <param name="sfgaoMask">
            A mask that specifies what particular attributes are being requested. A bitwise OR of one or more of the SFGAO values.
            </param>
            <returns>A bitmap that, when this method returns successfully, contains the values of the requested attributes.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellItemArray.GetCount">
            <summary>Gets the number of items in the given IShellItem array.</summary>
            <returns>When this method returns, contains the number of items in the IShellItemArray.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellItemArray.GetItemAt(System.UInt32)">
            <summary>Gets the item at the given index in the IShellItemArray.</summary>
            <param name="dwIndex">The index of the IShellItem requested in the IShellItemArray</param>
            <returns>When this method returns, contains the requested IShellItem pointer.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellItemArray.EnumItems">
            <summary>Gets an enumerator of the items in the array.</summary>
            <returns>
            When this method returns, contains an IEnumShellItems pointer that enumerates the shell items that are in the array.
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IShellItemImageFactory">
            <summary>
            <para>
            Exposes a method to return either icons or thumbnails for Shell items. If no thumbnail or icon is available for the requested
            item, a per-class icon may be provided from the Shell.
            </para>
            </summary>
            <remarks>
            <para>A pointer to this interface is commonly obtained through one of the following functions:</para>
            <list type="bullet">
            <item>
            <term>SHCreateItemFromIDList</term>
            </item>
            <item>
            <term>SHCreateItemFromParsingName</term>
            </item>
            <item>
            <term>SHCreateItemFromRelativeName</term>
            </item>
            <item>
            <term>SHCreateItemInKnownFolder</term>
            </item>
            <item>
            <term>SHCreateItemWithParent</term>
            </item>
            </list>
            <para>See the Using Image Factory sample for a full example of how to use this interface.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellItemImageFactory.GetImage(Vanara.PInvoke.SIZE,Vanara.PInvoke.Shell32.SIIGBF,Vanara.PInvoke.Gdi32.SafeHBITMAP@)">
            <summary>
            Gets an HBITMAP that represents an IShellItem. The default behavior is to load a thumbnail. If there is no thumbnail for the
            current IShellItem, it retrieves an HBITMAP for the icon of the item. The thumbnail or icon is extracted if it is not
            currently cached.
            </summary>
            <param name="size">A structure that specifies the size of the image to be received.</param>
            <param name="flags">One or more of the SIIGBF flags.</param>
            <param name="phbm">
            Pointer to a value that, when this method returns successfully, receives the handle of the retrieved bitmap. It is the
            responsibility of the caller to free this retrieved resource through DeleteObject when it is no longer needed.
            </param>
            <returns>If this method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.BindToHandler``1(Vanara.PInvoke.Shell32.IShellItem,System.Runtime.InteropServices.ComTypes.IBindCtx,System.Guid@)">
            <summary>Extension method to simplify using the <see cref="M:Vanara.PInvoke.Shell32.IShellItem.BindToHandler(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Guid@,System.Guid@)"/> method.</summary>
            <typeparam name="T">Type of the interface to get.</typeparam>
            <param name="si">An <see cref="T:Vanara.PInvoke.Shell32.IShellItem"/> instance.</param>
            <param name="pbc">
            A pointer to an IBindCtx interface on a bind context object. Used to pass optional parameters to the handler. The contents of
            the bind context are handler-specific. For example, when binding to BHID_Stream, the STGM flags in the bind context indicate
            the mode of access desired (read or read/write).
            </param>
            <param name="bhid">Reference to a GUID that specifies which handler will be created.</param>
            <returns>Receives the interface pointer requested in <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.BindToHandler``1(Vanara.PInvoke.Shell32.IShellItem,System.Runtime.InteropServices.ComTypes.IBindCtx,Vanara.PInvoke.Shell32.BHID)">
            <summary>Extension method to simplify using the <see cref="M:Vanara.PInvoke.Shell32.IShellItem.BindToHandler(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Guid@,System.Guid@)"/> method.</summary>
            <typeparam name="T">Type of the interface to get.</typeparam>
            <param name="si">An <see cref="T:Vanara.PInvoke.Shell32.IShellItem"/> instance.</param>
            <param name="pbc">
            A pointer to an IBindCtx interface on a bind context object. Used to pass optional parameters to the handler. The contents of
            the bind context are handler-specific. For example, when binding to BHID_Stream, the STGM flags in the bind context indicate
            the mode of access desired (read or read/write).
            </param>
            <param name="bhid">A BHID enumeration value that specifies which handler will be created.</param>
            <returns>Receives the interface pointer requested in <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.BindToHandler``1(Vanara.PInvoke.Shell32.IShellItemArray,System.Runtime.InteropServices.ComTypes.IBindCtx,System.Guid@)">
            <summary>Extension method to simplify using the <see cref="M:Vanara.PInvoke.Shell32.IShellItemArray.BindToHandler(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Guid@,System.Guid@)"/> method.</summary>
            <typeparam name="T">Type of the interface to get.</typeparam>
            <param name="sia">An <see cref="T:Vanara.PInvoke.Shell32.IShellItemArray"/> instance.</param>
            <param name="pbc">
            A pointer to an IBindCtx interface on a bind context object. Used to pass optional parameters to the handler. The contents of
            the bind context are handler-specific. For example, when binding to BHID_Stream, the STGM flags in the bind context indicate
            the mode of access desired (read or read/write).
            </param>
            <param name="rbhid">Reference to a GUID that specifies which handler will be created.</param>
            <returns>Receives the interface pointer requested in <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.BindToHandler``1(Vanara.PInvoke.Shell32.IShellItemArray,System.Runtime.InteropServices.ComTypes.IBindCtx,Vanara.PInvoke.Shell32.BHID)">
            <summary>Extension method to simplify using the <see cref="M:Vanara.PInvoke.Shell32.IShellItemArray.BindToHandler(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Guid@,System.Guid@)"/> method.</summary>
            <typeparam name="T">Type of the interface to get.</typeparam>
            <param name="sia">An <see cref="T:Vanara.PInvoke.Shell32.IShellItemArray"/> instance.</param>
            <param name="pbc">
            A pointer to an IBindCtx interface on a bind context object. Used to pass optional parameters to the handler. The contents of
            the bind context are handler-specific. For example, when binding to BHID_Stream, the STGM flags in the bind context indicate
            the mode of access desired (read or read/write).
            </param>
            <param name="bhid">A BHID enumeration value that specifies which handler will be created.</param>
            <returns>Receives the interface pointer requested in <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.GetPropertyStore``1(Vanara.PInvoke.Shell32.IShellItemArray,Vanara.PInvoke.PropSys.GETPROPERTYSTOREFLAGS)">
            <summary>Extension method to simplify using the <see cref="M:Vanara.PInvoke.Shell32.IShellItemArray.GetPropertyStore(Vanara.PInvoke.PropSys.GETPROPERTYSTOREFLAGS,System.Guid@)"/> method.</summary>
            <typeparam name="T">Type of the interface to get.</typeparam>
            <param name="sia">An <see cref="T:Vanara.PInvoke.Shell32.IShellItemArray"/> instance.</param>
            <param name="flags">One of the GETPROPERTYSTOREFLAGS constants.</param>
            <returns>Receives the interface pointer requested in <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.GetPropertyDescriptionList``1(Vanara.PInvoke.Shell32.IShellItemArray,Vanara.PInvoke.Ole32.PROPERTYKEY@)">
            <summary>Extension method to simplify using the <see cref="M:Vanara.PInvoke.Shell32.IShellItemArray.GetPropertyDescriptionList(Vanara.PInvoke.Ole32.PROPERTYKEY@,System.Guid@)"/> method.</summary>
            <typeparam name="T">Type of the interface to get.</typeparam>
            <param name="sia">An <see cref="T:Vanara.PInvoke.Shell32.IShellItemArray"/> instance.</param>
            <param name="keyType">A reference to the PROPERTYKEY structure specifying which property list to retrieve.</param>
            <returns>Receives the interface pointer requested in <typeparamref name="T"/>.</returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IShellItemFilter">
            <summary>Exposed by a client to specify how to filter the enumeration of a Shell item by a server application.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellItemFilter.IncludeItem(Vanara.PInvoke.Shell32.IShellItem)">
            <summary>Sets a given Shell item status to inclusion in the view.</summary>
            <param name="psi">
            <para>Type: <c>IShellItem*</c></para>
            <para>A pointer to the Shell item that is to be included in the view.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            The host calls this method for each item in the folder. Returns S_OK to have the item enumerated for inclusion in the view.
            Returns S_FALSE to prevent the item from being enumerated for inclusion in the view.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellItemFilter.GetEnumFlagsForItem(Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.Shell32.SHCONTF@)">
            <summary>
            Allows a client to specify which classes of objects in a Shell item should be enumerated for inclusion in the view.
            </summary>
            <param name="psi">
            <para>Type: <c>IShellItem*</c></para>
            <para>A pointer to the Shell item for which the SHCONTF enum flags are to be retrieved.</para>
            </param>
            <param name="pgrfFlags">
            <para>Type: <c>SHCONTF*</c></para>
            <para>
            A pointer to the SHCONTF enum flags for the given Shell item that specifies which classes of objects to enumerate for
            inclusion in the view.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IEnumResources">
            <summary>Exposes resource enumeration methods.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IEnumResources.Next(System.UInt32,Vanara.PInvoke.Shell32.SHELL_ITEM_RESOURCE[],System.UInt32@)">
            <summary>Gets the next SHELL_ITEM_RESOURCE structure.</summary>
            <param name="celt">
            <para>Type: <c>ULONG</c></para>
            <para>The number of resources requested. Currently, must be 1.</para>
            </param>
            <param name="psir">
            <para>Type: <c>SHELL_ITEM_RESOURCE*</c></para>
            <para>Receives a pointer to a SHELL_ITEM_RESOURCE structure.</para>
            </param>
            <param name="pceltFetched">
            <para>Type: <c>ULONG*</c></para>
            <para>A pointer to the number of resources retrieved. Currently, not used.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IEnumResources.Skip(System.UInt32)">
            <summary>Skips a specified number of resources.</summary>
            <param name="celt">
            <para>Type: <c>ULONG</c></para>
            <para>The number of resources to skip.</para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IEnumResources.Reset">
            <summary>Resets the enumeration index to 0.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IEnumResources.Clone">
            <summary>Clones a resource enumerator.</summary>
            <returns>
            <para>Type: <c>IEnumResources**</c></para>
            <para>Contains the address of an IEnumResources interface pointer.</para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IShellItemResources">
            <summary>Exposes methods to manipulate and query Shell item resources.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellItemResources.GetAttributes">
            <summary>Gets resource attributes.</summary>
            <returns>
            <para>Type: <c>DWORD*</c></para>
            <para>A pointer to resource attributes. The following are attribute values.</para>
            <para>FILE_ATTRIBUTE_READONLY</para>
            <para>Value is 0x00000001.</para>
            <para>FILE_ATTRIBUTE_HIDDEN</para>
            <para>Value is 0x00000002.</para>
            <para>FILE_ATTRIBUTE_SYSTEM</para>
            <para>Value is 0x00000004.</para>
            <para>FILE_ATTRIBUTE_DIRECTORY</para>
            <para>Value is 0x00000010.</para>
            <para>FILE_ATTRIBUTE_ARCHIVE</para>
            <para>Value is 0x00000020.</para>
            <para>FILE_ATTRIBUTE_ENCRYPTED</para>
            <para>Value is 0x00000040.</para>
            <para>FILE_ATTRIBUTE_NORMAL</para>
            <para>Value is 0x00000080.</para>
            <para>FILE_ATTRIBUTE_TEMPORARY</para>
            <para>Value is 0x00000100.</para>
            <para>FILE_ATTRIBUTE_SPARSE_FILE</para>
            <para>Value is 0x00000200.</para>
            <para>FILE_ATTRIBUTE_REPARSE_POINT</para>
            <para>Value is 0x00000400.</para>
            <para>FILE_ATTRIBUTE_COMPRESSED</para>
            <para>Value is 0x00000800.</para>
            <para>FILE_ATTRIBUTE_OFFLINE</para>
            <para>Value is 0x00001000.</para>
            <para>FILE_ATTRIBUTE_CONTENT_INDEXED</para>
            <para>Value is 0x00002000.</para>
            <para>FILE_ATTRIBUTE_VALID_FLAGS</para>
            <para>Value is 0x00001ff7.</para>
            <para>FILE_ATTRIBUTE_VALID_SET_FLAGS</para>
            <para>Value is 0x000011a7.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellItemResources.GetSize">
            <summary>Gets the source size.</summary>
            <returns>
            <para>Type: <c>ULONGLONG*</c></para>
            <para>A pointer to the source size.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellItemResources.GetTimes(System.Runtime.InteropServices.ComTypes.FILETIME@,System.Runtime.InteropServices.ComTypes.FILETIME@,System.Runtime.InteropServices.ComTypes.FILETIME@)">
            <summary>Gets file times.</summary>
            <param name="pftCreation">The filetime.</param>
            <param name="pftWrite">The filetime.</param>
            <param name="pftAccess">The filetime.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellItemResources.SetTimes(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>Sets file times.</summary>
            <param name="pftCreation">
            <para>Type: <c>const FILETIME*</c></para>
            <para>A pointer to a creation date and time as a FILETIME structure.</para>
            </param>
            <param name="pftWrite">
            <para>Type: <c>const FILETIME*</c></para>
            <para>A pointer to a write date and time as a FILETIME structure.</para>
            </param>
            <param name="pftAccess">
            <para>Type: <c>const FILETIME*</c></para>
            <para>A pointer to an access date and time as a FILETIME structure.</para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellItemResources.GetResourceDescription(Vanara.PInvoke.Shell32.SHELL_ITEM_RESOURCE@)">
            <summary>Gets a resource description.</summary>
            <param name="pcsir">
            <para>Type: <c>const SHELL_ITEM_RESOURCE*</c></para>
            <para>A pointer to a SHELL_ITEM_RESOURCE resource.</para>
            </param>
            <returns>
            <para>Type: <c>LPWSTR*</c></para>
            <para>A pointer to a resource description as a Unicode string.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellItemResources.EnumResources">
            <summary>Gets a resource enumerator object.</summary>
            <returns>
            <para>Type: <c>IEnumResources**</c></para>
            <para>The address of an IEnumResources interface pointer.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellItemResources.SupportsResource(Vanara.PInvoke.Shell32.SHELL_ITEM_RESOURCE@)">
            <summary>Retrieves whether an item supports a specified resource.</summary>
            <param name="pcsir">The shell item resource.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellItemResources.OpenResource(Vanara.PInvoke.Shell32.SHELL_ITEM_RESOURCE@,System.Guid@,System.Object@)">
            <summary>Opens a specified resource.</summary>
            <param name="pcsir">
            <para>Type: <c>const SHELL_ITEM_RESOURCE*</c></para>
            <para>A pointer to a SHELL_ITEM_RESOURCE resource.</para>
            </param>
            <param name="riid">
            <para>Type: <c>REFIID</c></para>
            <para>A reference to a desired IID.</para>
            </param>
            <param name="ppv">
            <para>Type: <c>void**</c></para>
            <para>The address of a pointer to a resource.</para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellItemResources.CreateResource(Vanara.PInvoke.Shell32.SHELL_ITEM_RESOURCE@,System.Guid@,System.Object@)">
            <summary>Creates a specified resource.</summary>
            <param name="pcsir">
            <para>Type: <c>const SHELL_ITEM_RESOURCE*</c></para>
            <para>A pointer to an SHELL_ITEM_RESOURCE resource.</para>
            </param>
            <param name="riid">
            <para>Type: <c>REFIID</c></para>
            <para>A reference to a desired IID.</para>
            </param>
            <param name="ppv">
            <para>Type: <c>void**</c></para>
            <para>The address of a pointer to the resource.</para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellItemResources.MarkForDelete">
            <summary>Marks for delete.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SetTimes(Vanara.PInvoke.Shell32.IShellItemResources,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>Sets file times.</summary>
            <param name="psir">The IShellItemResources instance.</param>
            <param name="ftCreation">An optional creation date and time.</param>
            <param name="ftWrite">An optional write date and time.</param>
            <param name="ftAccess">An optional access date and time.</param>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.SHELL_ITEM_RESOURCE">
            <summary>Defines Shell item resource.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHELL_ITEM_RESOURCE.guidType">
            <summary>
            <para>Type: <c>GUID</c></para>
            <para>The <c>GUID</c> that identifies the item.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHELL_ITEM_RESOURCE.szName">
            <summary>
            <para>Type: <c>WCHAR[MAX_PATH]</c></para>
            <para>The item name. A null-terminated Unicode buffer of size MAX_LENGTH characters.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.DEFAULTSAVEFOLDERTYPE">
            <summary>Specifies the default save location.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DEFAULTSAVEFOLDERTYPE.DSFT_DETECT">
            <summary>
            The current user determines the save folder. If the current user is the library's owner, use the private save location
            (DSFT_PRIVATE). If the current user is not the library's owner, use the public save location (DSFT_PUBLIC).
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DEFAULTSAVEFOLDERTYPE.DSFT_PRIVATE">
            <summary>The library's private save location, which can only be accessed by the library's owner.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DEFAULTSAVEFOLDERTYPE.DSFT_PUBLIC">
            <summary>The library's public save location, which can be accessed by all users.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.LIBRARYFOLDERFILTER">
            <summary>Defines options for filtering folder items.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.LIBRARYFOLDERFILTER.LFF_FORCEFILESYSTEM">
            <summary>Return only file system items.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.LIBRARYFOLDERFILTER.LFF_STORAGEITEMS">
            <summary>Return items that can be bound to an IStorage object.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.LIBRARYFOLDERFILTER.LFF_ALLITEMS">
            <summary>Return all items.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.LIBRARYMANAGEDIALOGOPTIONS">
            <summary>Used by SHShowManageLibraryUI to define options for handling a name collision when saving a library.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.LIBRARYMANAGEDIALOGOPTIONS.LMD_DEFAULT">
            <summary>Show default warning UI to the user.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.LIBRARYMANAGEDIALOGOPTIONS.LMD_ALLOWUNINDEXABLENETWORKLOCATIONS">
            <summary>Do not display a warning dialog to the user in collisions that concern network locations that cannot be indexed.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.LIBRARYOPTIONFLAGS">
            <summary>Specifies the library options.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.LIBRARYOPTIONFLAGS.LOF_DEFAULT">
            <summary>No library options are set.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.LIBRARYOPTIONFLAGS.LOF_PINNEDTONAVPANE">
            <summary>Pin the library to the navigation pane.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.LIBRARYOPTIONFLAGS.LOF_MASK_ALL">
            <summary>All valid library options flags.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.LIBRARYSAVEFLAGS">
            <summary>Specifies the options for handling a name collision when saving a library.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.LIBRARYSAVEFLAGS.LSF_FAILIFTHERE">
            <summary>If a library with the same name already exists, the save operation fails.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.LIBRARYSAVEFLAGS.LSF_OVERRIDEEXISTING">
            <summary>If a library with the same name already exists, the save operation overwrites the existing library.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.LIBRARYSAVEFLAGS.LSF_MAKEUNIQUENAME">
            <summary>If a library with the same name already exists, the save operation generates a new, unique name for the library.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IShellLibrary">
            <summary>Exposes methods for creating and managing libraries.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellLibrary.LoadLibraryFromItem(Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.STGM)">
            <summary>Loads the library from a specified library definition file.</summary>
            <param name="library">
            An IShellItem object for the library definition file to load. An error is returned if this object is not a library.
            </param>
            <param name="grfMode">One or more STGM storage medium flags that specify access and sharing modes for the library object.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellLibrary.LoadLibraryFromKnownFolder(System.Guid@,Vanara.PInvoke.STGM)">
            <summary>Loads the library that is referenced by a KNOWNFOLDERID.</summary>
            <param name="knownfidLibrary">The KNOWNFOLDERID value that identifies the library to load.</param>
            <param name="grfMode">One or more STGM storage medium flags that specify access and sharing modes for the library object.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellLibrary.AddFolder(Vanara.PInvoke.Shell32.IShellItem)">
            <summary>Adds a folder to the library.</summary>
            <param name="location">An IShellItem object that represents the folder to be added to the library.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellLibrary.RemoveFolder(Vanara.PInvoke.Shell32.IShellItem)">
            <summary>Removes a folder from the library.</summary>
            <param name="location">An IShellItem object that represents the folder to remove.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellLibrary.GetFolders(Vanara.PInvoke.Shell32.LIBRARYFOLDERFILTER,System.Guid@)">
            <summary>Gets the set of child folders that are contained in the library.</summary>
            <param name="lff">One of the following LIBRARYFOLDERFILTER values that determines the folders to get.</param>
            <param name="riid">
            A reference to the IID of the interface to get in ppv. This value is typically IID_IShellItemArray, but it can also be
            IID_IObjectCollection, IID_IObjectArray, or the IID of any other interface that is implemented by CShellItemArray.
            </param>
            <returns>A pointer to the interface requested in riid. If this call fails, this value is NULL.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellLibrary.ResolveFolder(Vanara.PInvoke.Shell32.IShellItem,System.UInt32,System.Guid@)">
            <summary>Resolves the target location of a library folder, even if the folder has been moved or renamed.</summary>
            <param name="folderToResolve">An IShellItem object that represents the library folder to locate.</param>
            <param name="timeout">
            The maximum time, in milliseconds, the method will attempt to locate the folder before returning. If the folder could not be
            located before the specified time elapses, an error is returned.
            </param>
            <param name="riid">
            A reference to the IID of the interface to get in ppv that will represent the resolved target location. This value is
            typically IID_IShellItem, but it can also be IID_IShellItem2 or the IID of any other interface that is implemented by CShellItem.
            </param>
            <returns>A pointer to the interface requested in riid.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellLibrary.GetDefaultSaveFolder(Vanara.PInvoke.Shell32.DEFAULTSAVEFOLDERTYPE,System.Guid@)">
            <summary>Retrieves the default target folder that the library uses for save operations.</summary>
            <param name="dsft">The DEFAULTSAVEFOLDERTYPE value that specifies the save folder to get.</param>
            <param name="riid">
            A reference to the IID of the interface to get in ppv that will represent the save location. This value is typically
            IID_IShellItem, but it can also be IID_IShellItem2 or the IID of any other interface that is implemented by CShellItem.
            </param>
            <returns>A pointer to the interface requested in riid.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellLibrary.SetDefaultSaveFolder(Vanara.PInvoke.Shell32.DEFAULTSAVEFOLDERTYPE,Vanara.PInvoke.Shell32.IShellItem)">
            <summary>Sets the default target folder that the library will use for save operations.</summary>
            <param name="dsft">The DEFAULTSAVEFOLDERTYPE value that specifies the default save location to set.</param>
            <param name="si">
            An IShellItem object that represents the folder that to use as the default save location. The folder that this object
            represents must be a folder that is already in the library.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellLibrary.GetOptions">
            <summary>Gets the library's options.</summary>
            <returns>
            The library options for this library. LIBRARYOPTIONFLAGS is a bitwise enumerator, which means that more than one flag could
            be set.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellLibrary.SetOptions(Vanara.PInvoke.Shell32.LIBRARYOPTIONFLAGS,Vanara.PInvoke.Shell32.LIBRARYOPTIONFLAGS)">
            <summary>Sets the library options.</summary>
            <param name="lofMask">A bitmask that specifies the LIBRARYOPTIONFLAGS values to change in this call.</param>
            <param name="lofOptions">
            A bitmask that specifies the new value of each LIBRARYOPTIONFLAGS value to change. LIBRARYOPTIONFLAGS values that are not set
            in lofMask are not changed by this call.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellLibrary.GetFolderType">
            <summary>Gets the library's folder type.</summary>
            <returns>The view template that is applied to a folder, usually based on its intended use and contents.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellLibrary.SetFolderType(System.Guid@)">
            <summary>Sets the library's folder type.</summary>
            <param name="ftid">
            The GUID or FOLDERTYPEID that represents the view template that is applied to a folder, usually based on its intended use and contents.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellLibrary.GetIcon">
            <summary>Gets the default icon for the library.</summary>
            <returns>
            A null-terminated Unicode string that describes the location of the default icon. The string is returned as
            ModuleFileName,ResourceIndex or ModuleFileName,-ResourceID.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellLibrary.SetIcon(System.String)">
            <summary>Sets the default icon for the library.</summary>
            <param name="icon">
            A null-terminated Unicode string that describes the location of the default icon. The string must be formatted as
            ModuleFileName,ResourceIndex or ModuleFileName,-ResourceID.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellLibrary.Commit">
            <summary>Commits library updates to an existing Library Description file.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellLibrary.Save(Vanara.PInvoke.Shell32.IShellItem,System.String,Vanara.PInvoke.Shell32.LIBRARYSAVEFLAGS)">
            <summary>Saves the library to a new Library Description (*.library-ms) file.</summary>
            <param name="folderToSaveIn">
            The IShellItem object that specifies the folder in which to save the library, or NULL to save the library with the user's
            default libraries in the FOLDERID_Libraries known folder.
            </param>
            <param name="libraryName">
            The file name under which to save the library. The file name must not include the file name extension; the file name
            extension is added automatically.
            </param>
            <param name="lsf">The LIBRARYSAVEFLAGS value that specifies how to handle a library name collision.</param>
            <returns>The IShellItem object that represents the library description file into which the library was saved.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellLibrary.SaveInKnownFolder(System.Guid@,System.String,Vanara.PInvoke.Shell32.LIBRARYSAVEFLAGS)">
            <summary>Saves the library to a new file in a specified known folder.</summary>
            <param name="kfidToSaveIn">
            The ID of the known folder in which to save the IShellLibrary object. For more information, see KNOWNFOLDERID.
            </param>
            <param name="libraryName">
            The file name under which to save the library. The file name must not include the file name extension; the file name
            extension is added automatically.
            </param>
            <param name="lsf">The LIBRARYSAVEFLAGS value that specifies how to handle a library name collision.</param>
            <returns>The IShellItem object that represents the library description file into which the library was saved.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.GetDefaultSaveFolder``1(Vanara.PInvoke.Shell32.IShellLibrary,Vanara.PInvoke.Shell32.DEFAULTSAVEFOLDERTYPE)">
            <summary>Retrieves the default target folder that the library uses for save operations.</summary>
            <typeparam name="T">The type of the interface to get.</typeparam>
            <param name="sl">The <see cref="T:Vanara.PInvoke.Shell32.IShellLibrary"/> instance.</param>
            <param name="dsft">The DEFAULTSAVEFOLDERTYPE value that specifies the save folder to get.</param>
            <returns>A pointer to the interface requested.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.GetFolders``1(Vanara.PInvoke.Shell32.IShellLibrary,Vanara.PInvoke.Shell32.LIBRARYFOLDERFILTER)">
            <summary>Gets the set of child folders that are contained in the library.</summary>
            <typeparam name="T">The type of the interface to get.</typeparam>
            <param name="sl">The <see cref="T:Vanara.PInvoke.Shell32.IShellLibrary"/> instance.</param>
            <param name="lff">One of the following LIBRARYFOLDERFILTER values that determines the folders to get.</param>
            <returns>A pointer to the interface requested. If this call fails, this value is NULL.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ResolveFolder``1(Vanara.PInvoke.Shell32.IShellLibrary,Vanara.PInvoke.Shell32.IShellItem,System.UInt32)">
            <summary>Resolves the target location of a library folder, even if the folder has been moved or renamed.</summary>
            <typeparam name="T">The type of the interface to get.</typeparam>
            <param name="sl">The <see cref="T:Vanara.PInvoke.Shell32.IShellLibrary"/> instance.</param>
            <param name="folderToResolve">An IShellItem object that represents the library folder to locate.</param>
            <param name="timeout">
            The maximum time, in milliseconds, the method will attempt to locate the folder before returning. If the folder could not be
            located before the specified time elapses, an error is returned.
            </param>
            <returns>A pointer to the interface requested.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHResolveLibrary(Vanara.PInvoke.Shell32.IShellItem)">
            <summary>Resolves all locations in a library, even those locations that have been moved or renamed.</summary>
            <param name="psiLibrary">A pointer to an IShellItem object that represents the library.</param>
            <returns>If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <remarks>
            This function can block the calling thread for as long as it takes to resolve all the locations in the specified library. Because
            it blocks the thread from which it is called, it should not be called from a thread that also handles user interface interactions.
            <para>
            This function resolves all locations in the specified library in a single call. To resolve an individual location in a library,
            see the IShellLibrary::ResolveFolder method or the SHResolveFolderPathInLibrary function.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SHShowManageLibraryUI(Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.HWND,System.String,System.String,Vanara.PInvoke.Shell32.LIBRARYMANAGEDIALOGOPTIONS)">
            <summary>Shows the library management dialog box, which enables users to manage the library folders and default save location.</summary>
            <param name="psiLibrary">A pointer to an IShellItem object that represents the library that is to be managed.</param>
            <param name="hwndOwner">
            The handle for the window that owns the library management dialog box. The value of this parameter can be NULL.
            </param>
            <param name="pszTitle">
            A pointer to the title for the library management dialog. To display the generic title string, set the value of this parameter to NULL.
            </param>
            <param name="pszInstruction">
            A pointer to a help string to display below the title string in the library management dialog box. To display the generic help
            string, set the value of this parameter to NULL.
            </param>
            <param name="lmdOptions">
            A value from the LIBRARYMANAGEDIALOGOPTIONS enumeration that specifies the behavior of the management dialog box.
            </param>
            <returns>If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.CShellLibrary">
            <summary>Class interface for IShellLibrary</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.SHELL_LINK_DATA_FLAGS">
            <summary>Specifies option settings. Used with IShellLinkDataList::GetFlags and IShellLinkDataList::SetFlags.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHELL_LINK_DATA_FLAGS.SLDF_DEFAULT">
            <summary>Default value used when no other flag is explicitly set.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHELL_LINK_DATA_FLAGS.SLDF_HAS_ID_LIST">
            <summary>The Shell link was saved with an ID list.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHELL_LINK_DATA_FLAGS.SLDF_HAS_LINK_INFO">
            <summary>
            The Shell link was saved with link information to enable distributed tracking. This information is used by .lnk files to
            locate the target if the targets's path has changed. It includes information such as volume label and serial number, although
            the specific stored information can change from release to release.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHELL_LINK_DATA_FLAGS.SLDF_HAS_NAME">
            <summary>The link has a name.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHELL_LINK_DATA_FLAGS.SLDF_HAS_RELPATH">
            <summary>The link has a relative path.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHELL_LINK_DATA_FLAGS.SLDF_HAS_WORKINGDIR">
            <summary>The link has a working directory.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHELL_LINK_DATA_FLAGS.SLDF_HAS_ARGS">
            <summary>The link has arguments.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHELL_LINK_DATA_FLAGS.SLDF_HAS_ICONLOCATION">
            <summary>The link has an icon location.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHELL_LINK_DATA_FLAGS.SLDF_UNICODE">
            <summary>Stored strings are Unicode.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHELL_LINK_DATA_FLAGS.SLDF_FORCE_NO_LINKINFO">
            <summary>
            Prevents the storage of link tracking information. If this flag is set, it is less likely, though not impossible, that a
            target can be found by the link if that target is moved.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHELL_LINK_DATA_FLAGS.SLDF_HAS_EXP_SZ">
            <summary>The link contains expandable environment strings such as %windir%.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHELL_LINK_DATA_FLAGS.SLDF_RUN_IN_SEPARATE">
            <summary>Causes a 16-bit target application to run in a separate Virtual DOS Machine (VDM)/Windows on Windows (WOW).</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHELL_LINK_DATA_FLAGS.SLDF_HAS_LOGO3ID">
            <summary>Not supported. Note that as of Windows Vista, this value is no longer defined.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHELL_LINK_DATA_FLAGS.SLDF_HAS_DARWINID">
            <summary>The link is a special Windows Installer link.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHELL_LINK_DATA_FLAGS.SLDF_RUNAS_USER">
            <summary>Causes the target application to run as a different user.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHELL_LINK_DATA_FLAGS.SLDF_HAS_EXP_ICON_SZ">
            <summary>The icon path in the link contains an expandable environment string such as such as %windir%.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHELL_LINK_DATA_FLAGS.SLDF_NO_PIDL_ALIAS">
            <summary>Prevents the use of ID list alias mapping when parsing the ID list from the path.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHELL_LINK_DATA_FLAGS.SLDF_FORCE_UNCNAME">
            <summary>Forces the use of the UNC name (a full network resource name), rather than the local name.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHELL_LINK_DATA_FLAGS.SLDF_RUN_WITH_SHIMLAYER">
            <summary>
            Causes the target of this link to launch with a shim layer active. A shim is an intermediate DLL that facilitates
            compatibility between otherwise incompatible software services. Shims are typically used to provide version compatibility.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHELL_LINK_DATA_FLAGS.SLDF_FORCE_NO_LINKTRACK">
            <summary>Introduced in Windows Vista. Disable object ID distributed tracking information.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHELL_LINK_DATA_FLAGS.SLDF_ENABLE_TARGET_METADATA">
            <summary>Introduced in Windows Vista. Enable the caching of target metadata into the link file.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHELL_LINK_DATA_FLAGS.SLDF_DISABLE_LINK_PATH_TRACKING">
            <summary>Introduced in Windows 7. Disable shell link tracking.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHELL_LINK_DATA_FLAGS.SLDF_DISABLE_KNOWNFOLDER_RELATIVE_TRACKING">
            <summary>Introduced in Windows Vista. Disable known folder tracking information.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHELL_LINK_DATA_FLAGS.SLDF_NO_KF_ALIAS">
            <summary>Introduced in Windows 7. Disable known folder alias mapping when loading the IDList during deserialization.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHELL_LINK_DATA_FLAGS.SLDF_ALLOW_LINK_TO_LINK">
            <summary>Introduced in Windows 7. Allow link to point to another shell link as long as this does not create cycles.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHELL_LINK_DATA_FLAGS.SLDF_UNALIAS_ON_SAVE">
            <summary>Introduced in Windows 7. Remove alias when saving the IDList.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHELL_LINK_DATA_FLAGS.SLDF_PREFER_ENVIRONMENT_PATH">
            <summary>
            Introduced in Windows 7. Recalculate the IDList from the path with the environmental variables at load time, rather than
            persisting the IDList.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHELL_LINK_DATA_FLAGS.SLDF_KEEP_LOCAL_IDLIST_FOR_UNC_TARGET">
            <summary>
            Introduced in Windows 7. If the target is a UNC location on a local machine, keep the local IDList target in addition to the
            remote target.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHELL_LINK_DATA_FLAGS.SLDF_PERSIST_VOLUME_ID_RELATIVE">
            <summary>
            Introduced in Windows 8. Persist the target IDlist in its volume-ID-relative form to avoid a dependency on drive letters.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.ShellDataBlockSignature">
            <summary>Defines which data block is supported.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellDataBlockSignature.EXP_SZ_LINK_SIG">
            <summary>The target name.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellDataBlockSignature.NT_CONSOLE_PROPS_SIG">
            <summary>Console properties</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellDataBlockSignature.NT_FE_CONSOLE_PROPS_SIG">
            <summary>The console's code page.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellDataBlockSignature.EXP_SPECIAL_FOLDER_SIG">
            <summary>Special folder information.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellDataBlockSignature.EXP_DARWIN_ID_SIG">
            <summary>The link's Windows Installer ID.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellDataBlockSignature.EXP_SZ_ICON_SIG">
            <summary>The icon path.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ShellDataBlockSignature.EXP_PROPERTYSTORAGE_SIG">
            <summary>Stores information about the Shell link state.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.SLR_FLAGS">
            <summary>Action flags.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SLR_FLAGS.SLR_NONE">
            <summary>No action.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SLR_FLAGS.SLR_NO_UI">
            <summary>
            Do not display a dialog box if the link cannot be resolved. When SLR_NO_UI is set, the high-order word of fFlags can be set
            to a time-out value that specifies the maximum amount of time to be spent resolving the link. The function returns if the
            link cannot be resolved within the time-out duration. If the high-order word is set to zero, the time-out duration will be
            set to the default value of 3,000 milliseconds (3 seconds). To specify a value, set the high word of fFlags to the desired
            time-out duration, in milliseconds.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SLR_FLAGS.SLR_ANY_MATCH">
            <summary>Not used.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SLR_FLAGS.SLR_UPDATE">
            <summary>
            If the link object has changed, update its path and list of identifiers. If SLR_UPDATE is set, you do not need to call
            IPersistFile::IsDirty to determine whether the link object has changed.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SLR_FLAGS.SLR_NOUPDATE">
            <summary>Do not update the link information.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SLR_FLAGS.SLR_NOSEARCH">
            <summary>Do not execute the search heuristics.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SLR_FLAGS.SLR_NOTRACK">
            <summary>Do not use distributed link tracking.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SLR_FLAGS.SLR_NOLINKINFO">
            <summary>
            Disable distributed link tracking. By default, distributed link tracking tracks removable media across multiple devices based
            on the volume name. It also uses the UNC path to track remote file systems whose drive letter has changed. Setting
            SLR_NOLINKINFO disables both types of tracking.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SLR_FLAGS.SLR_INVOKE_MSI">
            <summary>Call the Windows Installer.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SLR_FLAGS.SLR_NO_UI_WITH_MSG_PUMP">
            <summary>Windows XP and later.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SLR_FLAGS.SLR_OFFER_DELETE_WITHOUT_FILE">
            <summary>
            Windows 7 and later. Offer the option to delete the shortcut when this method is unable to resolve it, even if the shortcut
            is not a shortcut to a file.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SLR_FLAGS.SLR_KNOWNFOLDER">
            <summary>
            Windows 7 and later. Report as dirty if the target is a known folder and the known folder was redirected. This only works if
            the original target path was a file system path or ID list and not an aliased known folder ID list.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SLR_FLAGS.SLR_MACHINE_IN_LOCAL_TARGET">
            <summary>
            Windows 7 and later. Resolve the computer name in UNC targets that point to a local computer. This value is used with SLDF_KEEP_LOCAL_IDLIST_FOR_UNC_TARGET.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SLR_FLAGS.SLR_UPDATE_MACHINE_AND_SID">
            <summary>Windows 7 and later. Update the computer GUID and user SID if necessary.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SLR_FLAGS.SLR_NO_OBJECT_ID">
            <summary></summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IResolveShellLink">
            <summary>
            Exposes a method that enables an application to request that a Shell folder object resolve a link for one of its items.
            </summary>
            <remarks>
            <para>Namespace extensions implement this object to support link resolution.</para>
            <para>This interface is not typically used by applications.</para>
            <para>
            With namespace extensions, shortcut objects (.lnk files) implement the essential functionality of IShellLink::Resolve by calling
            IResolveShellLink::ResolveShellLink. <c>IResolveShellLink</c> is exported by a link resolution object that is created on request
            by the Shell folder.
            </para>
            <para>To retrieve a pointer to a link resolution object's <c>IResolveShellLink</c> interface:</para>
            <list type="bullet">
            <item>
            <term>
            For an object that is contained by a folder, call the folder's IShellFolder::GetUIObjectOf method and request an
            <c>IResolveShellLink</c> pointer (IID_IResolveShellLink).
            </term>
            </item>
            <item>
            <term>
            For the folder object itself, call the folder's IShellFolder::CreateViewObject method and request an <c>IResolveShellLink</c>
            pointer (IID_IResolveShellLink).
            </term>
            </item>
            </list>
            <para><c>Note</c> Prior to Windows Vista this interface was declared in Shlobj.h.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IResolveShellLink.ResolveShellLink(Vanara.PInvoke.Shell32.IShellLinkW,Vanara.PInvoke.HWND,Vanara.PInvoke.Shell32.SLR_FLAGS)">
            <summary>Requests that a folder object resolve a Shell link.</summary>
            <param name="punkLink">
            <para>Type: <c>IUnknown*</c></para>
            <para>
            Pointer to the object's IShellLink interface. This interface can then be queried to determine the contents of the link.
            </para>
            </param>
            <param name="hwnd">
            <para>Type: <c>HWND</c></para>
            <para>
            Handle to the window that the Shell uses as the parent for a dialog box. The Shell displays the dialog box if it needs to
            prompt the user for more information while resolving the link.
            </para>
            </param>
            <param name="fFlags">
            <para>Type: <c>DWORD</c></para>
            <para>Action flags. This parameter can be a combination of the following values.</para>
            <para>SLR_INVOKE_MSI</para>
            <para>Call the Windows Installer.</para>
            <para>SLR_NOLINKINFO</para>
            <para>
            Disable distributed link tracking. By default, distributed link tracking tracks removable media across multiple devices
            based on the volume name. It also uses the UNC path to track remote file systems whose drive letter has changed. Setting
            <c>SLR_NOLINKINFO</c> disables both types of tracking.
            </para>
            <para>SLR_NO_UI</para>
            <para>
            Do not display a dialog box if the link cannot be resolved. When <c>SLR_NO_UI</c> is set, the high-order word of fFlags
            specifies a time-out duration, in milliseconds. The function returns if the link cannot be resolved within the time-out
            duration. If the high-order word is set to zero, the time-out duration defaults to 3000 milliseconds (3 seconds).
            </para>
            <para>SLR_NOUPDATE</para>
            <para>Do not update the link information.</para>
            <para>SLR_NOSEARCH</para>
            <para>Do not execute the search heuristics.</para>
            <para>SLR_NOTRACK</para>
            <para>Do not use distributed link tracking.</para>
            <para>SLR_UPDATE</para>
            <para>
            If the link object has changed, update its path and list of identifiers. If <c>SLR_UPDATE</c> is set, you do not need to
            call IPersistFile::IsDirty to determine whether the link object has changed.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>This method should attempt to find the target of a Shell link, even if the target has been moved or renamed.</remarks>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IShellLinkDataList">
            <summary>
            Exposes methods that allow an application to attach extra data blocks to a Shell link. These methods add, copy, or remove data blocks.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellLinkDataList.AddDataBlock(System.IntPtr)">
            <summary>Adds a data block to a link.</summary>
            <param name="pDataBlock">The data block structure. For a list of supported structures, see IShellLinkDataList.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellLinkDataList.CopyDataBlock(Vanara.PInvoke.Shell32.ShellDataBlockSignature)">
            <summary>Retrieves a copy of a link's data block.</summary>
            <param name="dwSig">
            The data block's signature. The signature value for a particular type of data block can be found in its structure reference.
            For a list of supported data block types and their associated structures, see IShellLinkDataList.
            </param>
            <returns>
            The address of a pointer to a copy of the data block structure. If IShellLinkDataList::CopyDataBlock returns a successful
            result, the calling application must free the memory when it is no longer needed by calling LocalFree.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellLinkDataList.RemoveDataBlock(Vanara.PInvoke.Shell32.ShellDataBlockSignature)">
            <summary>Removes a data block from a link.</summary>
            <param name="dwSig">
            The data block's signature. The signature value for a particular type of data block can be found in its structure reference.
            For a list of supported data block types and their associated structures, see IShellLinkDataList.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellLinkDataList.GetFlags">
            <summary>Gets the current option settings.</summary>
            <returns>Pointer to one or more of the SHELL_LINK_DATA_FLAGS that indicate the current option settings.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellLinkDataList.SetFlags(Vanara.PInvoke.Shell32.SHELL_LINK_DATA_FLAGS)">
            <summary>Sets the current option settings.</summary>
            <param name="dwFlags">One or more of the SHELL_LINK_DATA_FLAGS that indicate the option settings.</param>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IShellLinkW">
            <summary>Exposes methods that create, modify, and resolve Shell links.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellLinkW.GetPath(System.Text.StringBuilder,System.Int32,Vanara.PInvoke.WIN32_FIND_DATA@,Vanara.PInvoke.Shell32.SLGP)">
            <summary>Gets the path and file name of the target of a Shell link object.</summary>
            <param name="pszFile">The address of a buffer that receives the path and file name of the target of the Shell link object.</param>
            <param name="cchMaxPath">
            The size, in characters, of the buffer pointed to by the pszFile parameter, including the terminating null character. The
            maximum path size that can be returned is MAX_PATH. This parameter is commonly set by calling ARRAYSIZE(pszFile). The
            ARRAYSIZE macro is defined in Winnt.h.
            </param>
            <param name="pfd">
            A pointer to a WIN32_FIND_DATA structure that receives information about the target of the Shell link object. If this
            parameter is NULL, then no additional information is returned.
            </param>
            <param name="fFlags">Flags that specify the type of path information to retrieve.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellLinkW.GetIDList">
            <summary>Gets the list of item identifiers for the target of a Shell link object.</summary>
            <returns>When this method returns, contains the address of a PIDL.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellLinkW.SetIDList(Vanara.PInvoke.Shell32.PIDL)">
            <summary>Sets the pointer to an item identifier list (PIDL) for a Shell link object.</summary>
            <param name="pidl">The object's fully qualified PIDL.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellLinkW.GetDescription(System.Text.StringBuilder,System.Int32)">
            <summary>Gets the description string for a Shell link object.</summary>
            <param name="pszFile">A pointer to the buffer that receives the description string.</param>
            <param name="cchMaxName">The maximum number of characters to copy to the buffer pointed to by the pszName parameter.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellLinkW.SetDescription(System.String)">
            <summary>Sets the description for a Shell link object. The description can be any application-defined string.</summary>
            <param name="pszName">A pointer to a buffer containing the new description string.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellLinkW.GetWorkingDirectory(System.Text.StringBuilder,System.Int32)">
            <summary>Gets the name of the working directory for a Shell link object.</summary>
            <param name="pszDir">The address of a buffer that receives the name of the working directory.</param>
            <param name="cchMaxPath">
            The maximum number of characters to copy to the buffer pointed to by the pszDir parameter. The name of the working directory
            is truncated if it is longer than the maximum specified by this parameter.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellLinkW.SetWorkingDirectory(System.String)">
            <summary>Sets the name of the working directory for a Shell link object.</summary>
            <param name="pszDir">The address of a buffer that contains the name of the new working directory.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellLinkW.GetArguments(System.Text.StringBuilder,System.Int32)">
            <summary>Gets the command-line arguments associated with a Shell link object.</summary>
            <param name="pszArgs">A pointer to the buffer that, when this method returns successfully, receives the command-line arguments.</param>
            <param name="cchMaxPath">
            The maximum number of characters that can be copied to the buffer supplied by the pszArgs parameter. In the case of a Unicode
            string, there is no limitation on maximum string length. In the case of an ANSI string, the maximum length of the returned
            string varies depending on the version of Windows—MAX_PATH prior to Windows 2000 and INFOTIPSIZE (defined in Commctrl.h) in
            Windows 2000 and later.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellLinkW.SetArguments(System.String)">
            <summary>Sets the command-line arguments for a Shell link object.</summary>
            <param name="pszArgs">
            A pointer to a buffer that contains the new command-line arguments. In the case of a Unicode string, there is no limitation
            on maximum string length. In the case of an ANSI string, the maximum length of the returned string varies depending on the
            version of Windows—MAX_PATH prior to Windows 2000 and INFOTIPSIZE (defined in Commctrl.h) in Windows 2000 and later.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellLinkW.GetHotKey">
            <summary>Gets the keyboard shortcut (hot key) for a Shell link object.</summary>
            <returns>
            <para>
            The address of the keyboard shortcut. The virtual key code is in the low-order byte, and the modifier flags are in the
            high-order byte. The modifier flags can be a combination of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term><c>HOTKEYF_ALT</c> 0x04</term>
            <term>ALT key</term>
            </item>
            <item>
            <term><c>HOTKEYF_CONTROL</c> 0x02</term>
            <term>CTRL key</term>
            </item>
            <item>
            <term><c>HOTKEYF_EXT</c> 0x08</term>
            <term>Extended key</term>
            </item>
            <item>
            <term><c>HOTKEYF_SHIFT</c> 0x01</term>
            <term>SHIFT key</term>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellLinkW.SetHotKey(System.UInt16)">
            <summary>Sets a keyboard shortcut (hot key) for a Shell link object.</summary>
            <param name="wHotKey">
            The new keyboard shortcut. The virtual key code is in the low-order byte, and the modifier flags are in the high-order byte.
            The modifier flags can be a combination of the values specified in the description of the IShellLink::GetHotkey method.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellLinkW.GetShowCmd">
            <summary>Gets the show command for a Shell link object.</summary>
            <returns>
            A pointer to the command. The following commands are supported.
            <list>
            <item>
            <term>SW_SHOWNORMAL</term>
            <description>
            Activates and displays a window. If the window is minimized or maximized, the system restores it to its original size and
            position. An application should specify this flag when displaying the window for the first time.
            </description>
            </item>
            <item>
            <term>SW_SHOWMAXIMIZED</term>
            <description>Activates the window and displays it as a maximized window.</description>
            </item>
            <item>
            <term>SW_SHOWMINIMIZED</term>
            <description>Activates the window and displays it as a minimized window.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellLinkW.SetShowCmd(Vanara.PInvoke.ShowWindowCommand)">
            <summary>Sets the show command for a Shell link object. The show command sets the initial show state of the window.</summary>
            <param name="iShowCmd">
            SetShowCmd accepts one of the following ShowWindow commands.
            <list>
            <item>
            <term>SW_SHOWNORMAL</term>
            <description>
            Activates and displays a window. If the window is minimized or maximized, the system restores it to its original size and
            position. An application should specify this flag when displaying the window for the first time.
            </description>
            </item>
            <item>
            <term>SW_SHOWMAXIMIZED</term>
            <description>Activates the window and displays it as a maximized window.</description>
            </item>
            <item>
            <term>SW_SHOWMINIMIZED</term>
            <description>Activates the window and displays it as a minimized window.</description>
            </item>
            </list>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellLinkW.GetIconLocation(System.Text.StringBuilder,System.Int32,System.Int32@)">
            <summary>Gets the location (path and index) of the icon for a Shell link object.</summary>
            <param name="pszIconPath">The address of a buffer that receives the path of the file containing the icon.</param>
            <param name="cchIconPath">The maximum number of characters to copy to the buffer pointed to by the pszIconPath parameter.</param>
            <param name="piIcon">The address of a value that receives the index of the icon.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellLinkW.SetIconLocation(System.String,System.Int32)">
            <summary>Sets the location (path and index) of the icon for a Shell link object.</summary>
            <param name="pszIconPath">The address of a buffer to contain the path of the file containing the icon.</param>
            <param name="iIcon">The index of the icon.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellLinkW.SetRelativePath(System.String,System.UInt32)">
            <summary>Sets the relative path to the Shell link object.</summary>
            <param name="pszPathRel">
            The address of a buffer that contains the fully-qualified path of the shortcut file, relative to which the shortcut
            resolution should be performed. It should be a file name, not a folder name.
            </param>
            <param name="dwReserved">Reserved. Set this parameter to zero.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellLinkW.Resolve(Vanara.PInvoke.HWND,Vanara.PInvoke.Shell32.SLR_FLAGS)">
            <summary>Attempts to find the target of a Shell link, even if it has been moved or renamed.</summary>
            <param name="hwnd">
            A handle to the window that the Shell will use as the parent for a dialog box. The Shell displays the dialog box if it needs
            to prompt the user for more information while resolving a Shell link.
            </param>
            <param name="fFlags">Action flags.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellLinkW.SetPath(System.String)">
            <summary>Sets the path and file name for the target of a Shell link object.</summary>
            <param name="pszFile">The address of a buffer that contains the new path.</param>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.CShellLinkW">
            <summary>Class interface for IShellLinkW.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.SMC">
            <summary>A message id for <see cref="M:Vanara.PInvoke.Shell32.IShellMenuCallback.CallbackSM(Vanara.PInvoke.Shell32.SMDATA@,Vanara.PInvoke.Shell32.SMC,System.IntPtr,System.IntPtr)"/>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SMC.SMC_INITMENU">
            <summary>The callback is called to init a menuband.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SMC.SMC_CREATE">
            <summary>The callback is called to init a menuband.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SMC.SMC_EXITMENU">
            <summary>The callback is called when menu is collapsing.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SMC.SMC_GETINFO">
            <summary>The callback is called to return uint values.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SMC.SMC_GETSFINFO">
            <summary>The callback is called to return uint values.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SMC.SMC_GETOBJECT">
            <summary>The callback is called to get some object.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SMC.SMC_GETSFOBJECT">
            <summary>The callback is called to get some object.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SMC.SMC_SFEXEC">
            <summary>The callback is called to execute an shell folder item.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SMC.SMC_SFSELECTITEM">
            <summary>The callback is called when an item is selected.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SMC.SMC_REFRESH">
            <summary>Menus have completely refreshed. Reset your state..</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SMC.SMC_DEMOTE">
            <summary>Demote an item.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SMC.SMC_PROMOTE">
            <summary>Promote an item, wParam = SMINV_* flag.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SMC.SMC_DEFAULTICON">
            <summary>Returns Default icon location in wParam, index in lParam.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SMC.SMC_NEWITEM">
            <summary>Notifies item is not in the order stream..</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SMC.SMC_CHEVRONEXPAND">
            <summary>Notifies of a expansion via the chevron.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SMC.SMC_DISPLAYCHEVRONTIP">
            <summary>S_OK display, S_FALSE not..</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SMC.SMC_SETSFOBJECT">
            <summary>Called to save the passed object.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SMC.SMC_SHCHANGENOTIFY">
            <summary>Called when a Change notify is received. lParam points to SMCSHCHANGENOTIFYSTRUCT.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SMC.SMC_CHEVRONGETTIP">
            <summary>Called to get the chevron tip text. wParam = Tip title, Lparam = TipText Both MAX_PATH.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SMC.SMC_SFDDRESTRICTED">
            <summary>Called requesting if it's ok to drop. wParam = IDropTarget..</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SMC.SMC_SFEXEC_MIDDLE">
            <summary>Same as SFEXEC, but the middle mouse button caused the exec..</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SMC.SMC_GETAUTOEXPANDSTATE">
            <summary>callback returns the default autoexpand state lParam = ref uint to recieve flags.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SMC.SMC_AUTOEXPANDCHANGE">
            <summary>Notify that the menu is expanding/contracting.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SMC.SMC_GETCONTEXTMENUMODIFIER">
            <summary>Used to add items to a context menu.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SMC.SMC_GETBKCONTEXTMENU">
            <summary>used to get a context menu to display when user right clicks on the background.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SMC.SMC_OPEN">
            <summary>allows client to overwrite open/explore verb action on an item.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.SMDM">
            <summary>Flags for <see cref="F:Vanara.PInvoke.Shell32.SMDATA.dwMask"/></summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SMDM.SMDM_SHELLFOLDER">
            <summary>Using the <see cref="F:Vanara.PInvoke.Shell32.SMDATA.pidlFolder"/> value.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SMDM.SMDM_HMENU">
            <summary>Using the <see cref="F:Vanara.PInvoke.Shell32.SMDATA.hmenu"/> value.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SMDM.SMDM_TOOLBAR">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.SMINFOFLAGS">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SMINFOFLAGS.SMIF_ICON">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SMINFOFLAGS.SMIF_ACCELERATOR">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SMINFOFLAGS.SMIF_DROPTARGET">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SMINFOFLAGS.SMIF_SUBMENU">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SMINFOFLAGS.SMIF_CHECKED">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SMINFOFLAGS.SMIF_DROPCASCADE">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SMINFOFLAGS.SMIF_HIDDEN">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SMINFOFLAGS.SMIF_DISABLED">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SMINFOFLAGS.SMIF_TRACKPOPUP">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SMINFOFLAGS.SMIF_DEMOTED">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SMINFOFLAGS.SMIF_ALTSTATE">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SMINFOFLAGS.SMIF_DRAGNDROP">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SMINFOFLAGS.SMIF_NEW">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.SMINFOMASK">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SMINFOMASK.SMIM_TYPE">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SMINFOMASK.SMIM_FLAGS">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SMINFOMASK.SMIM_ICON">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.SMINFOTYPE">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SMINFOTYPE.SMIT_SEPARATOR">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SMINFOTYPE.SMIT_STRING">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.SMINIT">
            <summary>Flags that control how the menu operates.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SMINIT.SMINIT_DEFAULT">
            <summary>No options.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SMINIT.SMINIT_RESTRICT_DRAGDROP">
            <summary>Do not allow drag-and-drop.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SMINIT.SMINIT_TOPLEVEL">
            <summary>This is the top band.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SMINIT.SMINIT_CACHED">
            <summary>Do not destroy the band when the window is closed.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SMINIT.SMINIT_AUTOEXPAND">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SMINIT.SMINIT_AUTOTOOLTIP">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SMINIT.SMINIT_DROPONCONTAINER">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SMINIT.SMINIT_VERTICAL">
            <summary>Specifies a vertical band.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SMINIT.SMINIT_HORIZONTAL">
            <summary>Specifies a horizontal band.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.SMINV">
            <summary>Flags that control how the menu is redrawn.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SMINV.SMINV_REFRESH">
            <summary>Use to redraw entire menu. Set psmd to <see langword="null"/>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SMINV.SMINV_ID">
            <summary>Use when supplying a value to psmd.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.SMSET">
            <summary>Flags that specify how the menu operates.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SMSET.SMSET_TOP">
            <summary>Attach the menu to the top of the parent menu.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SMSET.SMSET_BOTTOM">
            <summary>Attach the menu to the bottom of the parent menu.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SMSET.SMSET_DONTOWN">
            <summary>
            The menu band does not own the menu named in hwnd, so should that menu eventually be replaced, it should not be destroyed.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IShellMenu">
            <summary>Exposes methods that interact with Shell menus such as the <c>Start</c> menu, and the <c>Favorites</c> menu.</summary>
            <remarks>
            To get a pointer to this interface, call CoCreateInstance with the rclsid parameter set to CLSID_MenuBand and the riid parameter
            set to IID_IShellMenu. You must first initialize the interface by calling IShellMenu::Initialize, and then initialize the menu
            band by calling IShellMenu::SetShellFolder.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellMenu.Initialize(Vanara.PInvoke.Shell32.IShellMenuCallback,System.UInt32,System.UInt32,Vanara.PInvoke.Shell32.SMINIT)">
            <summary>Initializes a menu band.</summary>
            <param name="psmc">
            <para>Type: <c>IShellMenuCallback*</c></para>
            <para>
            A pointer to an IShellMenuCallback interface. This interface receives notifications from the menu. This value can be <c>NULL</c>.
            </para>
            </param>
            <param name="uId">
            <para>Type: <c>UINT</c></para>
            <para>The identifier of the selected menu item. Set this parameter to -1 for the menu itself.</para>
            </param>
            <param name="uIdAncestor">Type: <c>UINT</c></param>
            <param name="dwFlags">
            <para>Type: <c>DWORD</c></para>
            <para>Flags that control how the menu operates.</para>
            <para>A combination of the following option values:</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>SMINIT_DEFAULT</term>
            <term>No options.</term>
            </item>
            <item>
            <term>SMINIT_RESTRICT_DRAGDROP</term>
            <term>Do not allow drag-and-drop.</term>
            </item>
            <item>
            <term>SMINIT_TOPLEVEL</term>
            <term>This is the top band.</term>
            </item>
            <item>
            <term>SMINIT_CACHED</term>
            <term>Do not destroy the band when the window is closed.</term>
            </item>
            </list>
            <para>In addition to the values above, one of the following layout options:</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>SMINIT_VERTICAL</term>
            <term>Specifies a vertical band.</term>
            </item>
            <item>
            <term>SMINIT_HORIZONTAL</term>
            <term>Specifies a horizontal band.</term>
            </item>
            </list>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellMenu.GetMenuInfo(Vanara.PInvoke.Shell32.IShellMenuCallback@,System.UInt32@,System.UInt32@,Vanara.PInvoke.Shell32.SMINIT@)">
            <summary>Gets information from the IShellMenu::Initialize method.</summary>
            <param name="ppsmc">
            <para>Type: <c>IShellMenuCallback**</c></para>
            <para>
            When this method returns, contains the address of a pointer to the IShellMenuCallback interface that you specified when you
            called IShellMenu::Initialize. This pointer can be <c>NULL</c>.
            </para>
            </param>
            <param name="puId">
            <para>Type: <c>UINT*</c></para>
            <para>
            When this method returns, contains a pointer to a <c>UINT</c> value that receives the uID value that you specified when you
            called IShellMenu::Initialize. This pointer can be <c>NULL</c>.
            </para>
            </param>
            <param name="puIdAncestor">
            <para>Type: <c>UINT*</c></para>
            <para>
            When this method returns, contains a pointer to a <c>UINT</c> value that receives the uIdAncestor value that you specified
            when you called IShellMenu::Initialize. This pointer can be <c>NULL</c>.
            </para>
            </param>
            <param name="pdwFlags">
            <para>Type: <c>DWORD*</c></para>
            <para>
            When this method returns, contains a pointer to a <c>DWORD</c> value that receives the dwFlags value that you specified when
            you called IShellMenu::Initialize. This pointer can be <c>NULL</c>.
            </para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellMenu.SetShellFolder(Vanara.PInvoke.Shell32.IShellFolder,Vanara.PInvoke.Shell32.PIDL,Vanara.PInvoke.HKEY,Vanara.PInvoke.Shell32.SMSET)">
            <summary>Specifies the folder for the menu band to browse.</summary>
            <param name="psf">
            <para>Type: <c>IShellFolder*</c></para>
            <para>A pointer to the folder's IShellFolder interface. This pointer can be <c>NULL</c>.</para>
            </param>
            <param name="pidlFolder">
            <para>Type: <c>PCIDLIST_ABSOLUTE</c></para>
            <para>The folder's fully qualified ITEMIDLIST. This value can be <c>NULL</c>.</para>
            </param>
            <param name="hKey">
            <para>Type: <c>HKEY</c></para>
            <para>An HKEY with an "Order" value that is used to store the order of the menu. This value can be <c>NULL</c>.</para>
            </param>
            <param name="dwFlags">
            <para>Type: <c>DWORD</c></para>
            <para>Flags that specify how the menu band operates.</para>
            <para>SMSET_BOTTOM</para>
            <para>Put this folder at the bottom of the menu.</para>
            <para>SMSET_USEBKICONEXTRACTION</para>
            <para>Use the background icon extractor.</para>
            <para>SMSET_HASEXPANDABLEFOLDERS</para>
            <para>This folder contains expandable folders.</para>
            <para>SMSET_COLLAPSEONEMPTY</para>
            <para>Collapse the menu if empty.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>Call this method after you call IShellMenu::Initialize.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellMenu.GetShellFolder(Vanara.PInvoke.Shell32.SMINIT@,Vanara.PInvoke.Shell32.PIDL@,System.Guid@,System.Object@)">
            <summary>Gets the folder that the menu band is set to browse.</summary>
            <param name="pdwFlags">
            <para>Type: <c>DWORD*</c></para>
            <para>When this method returns successfully, contains a pointer to a set of flag values that specify how the menu band operates.</para>
            <para>Can return any of the following flags.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>SMINIT_DEFAULT</term>
            <term>No options.</term>
            </item>
            <item>
            <term>SMINIT_RESTRICT_DRAGDROP</term>
            <term>Do not allow drag-and-drop.</term>
            </item>
            <item>
            <term>SMINIT_TOPLEVEL</term>
            <term>This is the top band.</term>
            </item>
            <item>
            <term>SMINIT_CACHED</term>
            <term>Do not destroy the band when the window is closed.</term>
            </item>
            </list>
            <para>Always returns one of the following flags.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>SMINIT_VERTICAL</term>
            <term>Specifies a vertical band.</term>
            </item>
            <item>
            <term>SMINIT_HORIZONTAL</term>
            <term>Specifies a horizontal band.</term>
            </item>
            </list>
            </param>
            <param name="ppidl">
            <para>Type: <c>PCIDLIST_ABSOLUTE*</c></para>
            <para>When this method returns, contains the address of the folder's fully qualified ITEMIDLIST.</para>
            </param>
            <param name="riid">
            <para>Type: <c>REFIID</c></para>
            <para>The REFIID for the target folder.</para>
            </param>
            <param name="ppv">
            <para>Type: <c>void**</c></para>
            <para>
            When this method returns successfully, contains the address of a pointer to the Shell folder object referenced by the riid.
            </para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellMenu.SetMenu(Vanara.PInvoke.HMENU,Vanara.PInvoke.HWND,Vanara.PInvoke.Shell32.SMSET)">
            <summary>Appends a static menu to the menu band.</summary>
            <param name="hmenu">
            <para>Type: <c>HMENU</c></para>
            <para>The handle of the static menu that is to be appended. This value can be <c>NULL</c>.</para>
            </param>
            <param name="hwnd">
            <para>Type: <c>HWND</c></para>
            <para>The <c>HWND</c> of the owner window. This value can be <c>NULL</c>.</para>
            </param>
            <param name="dwFlags">
            <para>Type: <c>DWORD</c></para>
            <para>Flags that specify how the menu operates.</para>
            <para>SMSET_BOTTOM</para>
            <para>Attach the menu to the bottom of the parent menu.</para>
            <para>SMSET_TOP</para>
            <para>Attach the menu to the top of the parent menu.</para>
            <para>SMSET_DONTOWN</para>
            <para>The menu band does not own the menu named in hwnd, so should that menu eventually be replaced, it should not be destroyed.</para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellMenu.GetMenu(Vanara.PInvoke.HMENU@,Vanara.PInvoke.HWND@,Vanara.PInvoke.Shell32.SMSET@)">
            <summary>Gets the menu information set by calling IShellMenu::SetMenu.</summary>
            <param name="phmenu">
            <para>Type: <c>HMENU*</c></para>
            <para>
            When this method returns, contains a pointer to an <c>HMENU</c> value that receives the hmenu value that you specified when
            you called IShellMenu::SetMenu. This value can be <c>NULL</c>.
            </para>
            </param>
            <param name="phwnd">
            <para>Type: <c>HWND*</c></para>
            <para>
            When this method returns, contains a pointer to an <c>HWND</c> value that receives the hwnd value that you specified when
            you called IShellMenu::SetMenu. This value can be <c>NULL</c>.
            </para>
            </param>
            <param name="pdwFlags">
            <para>Type: <c>DWORD*</c></para>
            <para>
            When this method returns, contains a pointer to a <c>DWORD</c> value that receives the dwFlags value that you specified when
            you called IShellMenu::SetMenu. This value can be <c>NULL</c>.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellMenu.InvalidateItem(System.IntPtr,Vanara.PInvoke.Shell32.SMINV)">
            <summary>Redraws an item in a menu band.</summary>
            <param name="psmd">
            <para>Type: <c>LPSMDATA</c></para>
            <para>
            A pointer to an SMDATA structure that identifies the item to be redrawn. Set this value to <c>NULL</c> to redraw the entire menu.
            </para>
            </param>
            <param name="dwFlags">
            <para>Type: <c>DWORD</c></para>
            <para>
            Flags that control how the menu is redrawn. If psmd is <c>NULL</c>, set dwFlags to SMINV_REFRESH. If psmd is set to a valid
            SMDATA structure, set dwFlags to SMINV_ID | SMINV_REFRESH.
            </para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellMenu.GetState">
            <summary>Gets a filled SMDATA structure.</summary>
            <returns>
            <para>Type: <c>LPSMDATA</c></para>
            <para>When this method returns, contains a pointer to an SMDATA structure that contains information about the menu band.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellMenu.SetMenuToolbar(System.Object,Vanara.PInvoke.Shell32.SMSET)">
            <summary>Adds a menu to the menuband.</summary>
            <param name="punk">
            <para>Type: <c>IUnknown*</c></para>
            <para>A pointer to an object that supports <c>CLSID_MenuToolbarBase</c> in its QueryInterface method.</para>
            </param>
            <param name="dwFlags">
            <para>Type: <c>DWORD</c></para>
            <para>Flags that control how the menu operates.</para>
            <para>SMSET_TOP</para>
            <para>Bias this namespace to the top of the menu.</para>
            <para>SMSET_BOTTOM</para>
            <para>Bias this namespace to the bottom of the menu.</para>
            <para>SMSET_DONTOWN</para>
            <para>The Menuband does not own the non-ref counted object.</para>
            </param>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IShellMenuCallback">
            <summary>A callback interface that exposes a method that receives messages from a menu band.</summary>
            <remarks>
            Once you have created the menu band object, pass a pointer to this interface to the menu band object by calling
            IShellMenu::Initialize. You receive messages from the menu band through the IShellMenuCallback::CallbackSM method.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellMenuCallback.CallbackSM(Vanara.PInvoke.Shell32.SMDATA@,Vanara.PInvoke.Shell32.SMC,System.IntPtr,System.IntPtr)">
            <summary>Receives messages from a menu band object.</summary>
            <param name="psmd">
            <para>Type: <c>LPSMDATA</c></para>
            <para>A pointer to a SMDATA structure that contains information about the menu.</para>
            </param>
            <param name="uMsg">
            <para>Type: <c>UINT</c></para>
            <para>A message ID. This will be one of the SMC_XXX values. See Shell Messages and Notifications for a complete list.</para>
            </param>
            <param name="wParam">
            <para>Type: <c>WPARAM</c></para>
            <para>A WPARAM value that contains additional information. See the specific SMC_XXX message reference for details.</para>
            </param>
            <param name="lParam">
            <para>Type: <c>LPARAM</c></para>
            <para>An LPARAM value that contains additional information. See the specific SMC_XXX message reference for details.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.SMDATA">
            <summary>Contains information from a menu band.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SMDATA.dwMask">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>A mask that is always set to SMDM_HMENU.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SMDATA.dwFlags">
            <summary>Type: <c>DWORD</c></summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SMDATA.hmenu">
            <summary>
            <para>Type: <c>HMENU</c></para>
            <para>The static menu portion of the menu band.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SMDATA.hwnd">
            <summary>
            <para>Type: <c>HWND</c></para>
            <para>The HWND value of the owner window.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SMDATA.uId">
            <summary>
            <para>Type: <c>UINT</c></para>
            <para>The identifier of the menu item. This value is -1 for the menu itself.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SMDATA.uIdParent">
            <summary>
            <para>Type: <c>UINT</c></para>
            <para>The identifier of the parent menu.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SMDATA.uIdAncestor">
            <summary>Type: <c>UINT</c></summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SMDATA.punk">
            <summary>
            <para>Type: <c>IUknown*</c></para>
            <para>A pointer to the IUnknown interface of the MenuBand object.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SMDATA.pidlFolder">
            <summary>
            <para>Type: <c>PIDLIST_ABSOLUTE</c></para>
            <para>The ITEMIDLIST of the shell folder portion of the menu.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SMDATA.pidlItem">
            <summary>
            <para>Type: <c>PUITEMID_CHILD</c></para>
            <para>The ITEMIDLIST of the selected item in the shell folder portion of the menu.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SMDATA.psf">
            <summary>
            <para>Type: <c>IShellFolder*</c></para>
            <para>A pointer to the IShellFolder interface for the folder associated with the shell folder portion of the menu.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SMDATA.pvUserData">
            <summary>
            <para>Type: <c>void*</c></para>
            <para>A pointer to a user-defined data structure.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.MenuBand">
            <summary>CLSID_MenuBand</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.LPFNSVADDPROPSHEETPAGE">
            <summary>
            A function that the property sheet handler calls to add a page to the property sheet. The function takes a property sheet handle
            returned by the CreatePropertySheetPage function and the lParam parameter passed to that method.
            </summary>
            <param name="hPropSheetPage">A property sheet handle returned by the CreatePropertySheetPage function.</param>
            <param name="lParam">The lParam parameter passed to the CreatePropertySheetPage function.</param>
            <returns></returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.EXPPS">
            <summary>Used by IShellPropSheetExt::ReplacePage.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.EXPPS.EXPPS_FILETYPES">
            <summary>Undocumented.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IShellPropSheetExt">
            <summary>
            Exposes methods that allow a property sheet handler to add or replace pages in the property sheet displayed for a file object.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellPropSheetExt.AddPages(Vanara.PInvoke.Shell32.LPFNSVADDPROPSHEETPAGE,System.IntPtr)">
            <summary>
            Adds one or more pages to a property sheet that the Shell displays for a file object. The Shell calls this method for each
            property sheet handler registered to the file type.
            </summary>
            <param name="pfnAddPage">
            A pointer to a function that the property sheet handler calls to add a page to the property sheet. The function takes a
            property sheet handle returned by the CreatePropertySheetPage function and the lParam parameter passed to this method.
            </param>
            <param name="lParam">Handler-specific data to pass to the function pointed to by pfnAddPage.</param>
            <returns>
            If successful, returns a one-based index to specify the page that should be initially displayed. See Remarks for more information.
            </returns>
            <remarks>
            For each page that the property sheet handler needs to add to a property sheet, the handler fills a PROPSHEETPAGE structure,
            calls the CreatePropertySheetPage function, and then calls the function pointed to by pfnAddPage.
            <para>
            You can request through your implementation that a particular property sheet page be displayed first, instead of the default
            page. To do so, return the one-based index of the desired page relative to the pages you added. For example, if you added
            three property sheet pages, A, B, and C, and you want B to be the selected page, then the return value should be 2. Note that
            this return value is only a request. The property sheet might still display the default page.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellPropSheetExt.ReplacePage(Vanara.PInvoke.Shell32.EXPPS,Vanara.PInvoke.Shell32.LPFNSVADDPROPSHEETPAGE,System.IntPtr)">
            <summary>Replaces a page in a property sheet for a Control Panel object.</summary>
            <param name="uPageID">
            Not used.
            <para><c>Microsoft Windows XP and earlier:</c> A type EXPPS identifier of the page to replace.</para>
            </param>
            <param name="pfnReplaceWith">
            A pointer to a function that the property sheet handler calls to replace a page to the property sheet. The function takes a
            property sheet handle returned by the CreatePropertySheetPage function and the lParam parameter passed to this method.
            </param>
            <param name="lParam">The parameter to pass to the function specified by the pfnReplacePage parameter.</param>
            <returns>If this method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <remarks>
            To replace a page, a property sheet handler fills a PROPSHEETPAGE structure, calls CreatePropertySheetPage, and then calls
            the function specified by pfnReplacePage.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ITSAT_DEFAULT_PRIORITY">
            <summary>Accept the default priority assigned to the task by the scheduler.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ITSAT_MAX_PRIORITY">
            <summary>High priority.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ITSAT_MIN_PRIORITY">
            <summary>Low priority.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ITSS_THREAD_DESTROY_DEFAULT_TIMEOUT">
            <summary>Default milliseconds until a sleeping worker thread is released</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ITSS_THREAD_TERMINATE_TIMEOUT">
            <summary>Set sleeping worker threads to never be released.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ITSS_THREAD_TIMEOUT_NO_CHANGE">
            <summary>No change to the thread timeout</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ITSAT_DEFAULT_LPARAM">
            <summary>Default value for <see cref="M:Vanara.PInvoke.Shell32.IShellTaskScheduler.AddTask(Vanara.PInvoke.Shell32.IRunnableTask,System.Guid@,System.IntPtr,System.UInt32)"/><c>lParam</c> parameter.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IRTIR_TASK">
            <summary>Indicates the current execution state.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.IRTIR_TASK.IRTIR_TASK_NOT_RUNNING">
            <summary>Extraction has not yet started.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.IRTIR_TASK.IRTIR_TASK_RUNNING">
            <summary>The task is running.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.IRTIR_TASK.IRTIR_TASK_SUSPENDED">
            <summary>The task is suspended.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.IRTIR_TASK.IRTIR_TASK_PENDING">
            <summary>IRunnableTask::Kill has been called on the thread, but the thread has not yet completely shut down.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.IRTIR_TASK.IRTIR_TASK_FINISHED">
            <summary>The task is finished.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.ITSSFLAG">
            <summary>The release status for <see cref="M:Vanara.PInvoke.Shell32.IShellTaskScheduler.Status(System.UInt32,System.UInt32)"/>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ITSSFLAG.ITSSFLAG_COMPLETE_ON_DESTROY">
            <summary>Wait for the current task to complete before deleting the scheduler.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ITSSFLAG.ITSSFLAG_KILL_ON_DESTROY">
            <summary>Immediately cease execution of the current task when the IShellTaskScheduler instance is released.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IRunnableTask">
            <summary>
            A free-threaded interface that can be exposed by an object to allow operations to be performed on a background thread. For
            example, if the IExtractImage::GetLocation method returns E_PENDING, the calling application is permitted to extract the image
            on a background thread.
            </summary>
            <remarks>
            <para>
            Implement <c>IRunnableTask</c> if your namespace extension is free-threaded, and you want to allow a task such as icon
            extraction to be managed by a scheduler. Only the Run and IsRunning methods must be implemented. If you do not want to implement
            Kill, Resume, and Suspend, simply have them return E_NOTIMPL.
            </para>
            <para>
            If you are using <c>IRunnableTask</c> to extract an image on a background thread, that is, if the object exposes IExtractImage,
            then Run is not necessary, as the system will use IExtractImage::Extract to manage the task. The other methods (Kill, Resume,
            and Suspend) are optional in this case, but will be used by the system if they are implemented.
            </para>
            <para>
            You do not call this interface directly. <c>IRunnableTask</c> is used by the operating system only when it has confirmed that
            your application is aware of this interface.
            </para>
            <para><c>IRunnableTask</c> implements IUnknown as well as the five listed methods.</para>
            <para><c>Note</c><c>Windows Vista and later.</c> Prior to Windows Vista this interface was declared in Shlobj.h.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IRunnableTask.Run">
            <summary>Requests that a task begin.</summary>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>Returns one of the following two codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>S_OK</term>
            <term>Execution is complete.</term>
            </item>
            <item>
            <term>E_PENDING</term>
            <term>Execution is suspended.</term>
            </item>
            </list>
            </returns>
            <remarks>
            The return value of this method only tells you whether the execution of the task completed or is suspended. Any other errors
            that the implementer needs to communicate to the caller must be provided through other channels, such as a callback function.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IRunnableTask.Kill(System.Boolean)">
            <summary>Requests that a task be stopped.</summary>
            <param name="bWait">
            <para>Type: <c>BOOL</c></para>
            <para>Not currently used.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            Implementation of this method is optional. If you do not wish to support this functionality, create a token implementation
            that simply returns E_NOTIMPL.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IRunnableTask.Suspend">
            <summary>Requests that a task be suspended.</summary>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>Return S_OK if successful, or standard COM-defined error codes otherwise.</para>
            </returns>
            <remarks>
            Implementation of this method is optional. If you do not wish to support this functionality, create a token implementation
            that simply returns E_NOTIMPL.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IRunnableTask.Resume">
            <summary>Requests that a task resume.</summary>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>Returns S_OK if successful, or standard COM-defined error codes otherwise.</para>
            </returns>
            <remarks>
            Implementation of this method is optional. If you do not wish to support this functionality, create a token implementation
            that simply returns E_NOTIMPL.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IRunnableTask.IsRunning">
            <summary>Requests information on the state of a task, such as thumbnail extraction.</summary>
            <returns>
            <para>Type: <c>LONG</c></para>
            <para>Returns one of the following values to indicate the current execution state.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>IRTIR_TASK_NOT_RUNNING</term>
            <term>Extraction has not yet started.</term>
            </item>
            <item>
            <term>IRTIR_TASK_RUNNING</term>
            <term>The task is running.</term>
            </item>
            <item>
            <term>IRTIR_TASK_SUSPENDED</term>
            <term>The task is suspended.</term>
            </item>
            <item>
            <term>IRTIR_TASK_PENDING</term>
            <term>IRunnableTask::Kill has been called on the thread, but the thread has not yet completely shut down.</term>
            </item>
            <item>
            <term>IRTIR_TASK_FINISHED</term>
            <term>The task is finished.</term>
            </item>
            </list>
            </returns>
            <remarks>This method must be implemented.</remarks>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IShellTaskScheduler">
            <summary>
            <para>
            [ <c>IShellTaskScheduler</c> is available for use in the operating systems specified in the Requirements section. It may be
            altered or unavailable in subsequent versions.]
            </para>
            <para>Exposes methods that enable interaction with, and control of, a task scheduler.</para>
            </summary>
            <remarks>
            <para>
            This interface does not need to be free-threaded unless the items in the queue interact with the scheduler as well as the main
            execution thread on which the task scheduler was created.
            </para>
            <para>This interface's class identifier (CLSID) is CLSID_ShellTaskScheduler, and its IID is IID_IShellTaskScheduler.</para>
            <para><c>Windows Server 2003 and Windows XP:</c><c>IShellTaskScheduler</c> was declared in Shlobj.h.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellTaskScheduler.AddTask(Vanara.PInvoke.Shell32.IRunnableTask,System.Guid@,System.IntPtr,System.UInt32)">
            <summary>Adds a task to the scheduler's background queue.</summary>
            <param name="prt">
            <para>Type: <c>IRunnableTask*</c></para>
            <para>A pointer to an instance of an IRunnableTask interface representing the task to add to the queue.</para>
            </param>
            <param name="rtoid">
            <para>Type: <c>REFTASKOWNERID</c></para>
            <para>
            A GUID identifying the owner of the task. This information can be used to group tasks for later counting or removal by owner.
            </para>
            </param>
            <param name="lParam">
            <para>Type: <c>DWORD_PTR</c></para>
            <para>
            A pointer to a user-defined <c>DWORD</c> value allowing the task to be identified within the tasks owned by rtoid. This is
            used to identify single tasks or to subgroup them, for instance associating the task with a particular item such as an item
            in a ListView. This parameter can be zero.
            </para>
            </param>
            <param name="dwPriority">
            <para>Type: <c>DWORD</c></para>
            <para>
            One of the following values assigning the task's priority. Response to this priority depends on the cooperation of the other
            tasks being executed. New tasks are inserted in the queue in priority order. If a task of a low priority is currently under
            execution when a higher priority task is added, the scheduler attempts to suspend the task under execution. That lower
            priority task is resumed when the higher priority task(s) are completed.
            </para>
            <para>ITSAT_DEFAULT_PRIORITY</para>
            <para>Accept the default priority assigned to the task by the scheduler.</para>
            <para>ITSAT_MAX_PRIORITY</para>
            <para>High priority.</para>
            <para>ITSAT_MIN_PRIORITY</para>
            <para>Low priority.</para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellTaskScheduler.RemoveTasks(System.Guid@,System.IntPtr,System.Boolean)">
            <summary>Removes tasks from the scheduler's background queue.</summary>
            <param name="rtoid">
            <para>Type: <c>REFTASKOWNERID</c></para>
            <para>A GUID identifying the owner of the tasks to remove.</para>
            </param>
            <param name="lParam">
            <para>Type: <c>DWORD_PTR</c></para>
            <para>
            A pointer to a user-defined <c>DWORD</c> value that allows the task to be identified within the tasks owned by rtoid. Set
            this value to 0 to remove all tasks for the owner specified by rtoid.
            </para>
            </param>
            <param name="bWaitIfRunning">
            <para>Type: <c>BOOL</c></para>
            <para><c>TRUE</c> if you want a currently running task to complete before removing it, <c>FALSE</c> otherwise.</para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellTaskScheduler.CountTasks(System.Guid@)">
            <summary>Counts tasks with the same owner ID in the scheduler's queue.</summary>
            <param name="rtoid">
            <para>Type: <c>REFTASKOWNERID</c></para>
            <para>
            A GUID identifying the owner of the tasks. Supplying a specific ID will count only those tasks tagged with that owner ID. To
            count all items in the queue, pass TOID_NULL.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellTaskScheduler.Status(System.UInt32,System.UInt32)">
            <summary>Sets the release status and background thread timeout for the current task.</summary>
            <param name="dwReleaseStatus">
            <para>Type: <c>DWORD</c></para>
            <para>The following flag or 0.</para>
            <para>ITSSFLAG_KILL_ON_DESTROY</para>
            <para>Immediately cease execution of the current task when the IShellTaskScheduler instance is released.</para>
            </param>
            <param name="dwThreadTimeout">
            <para>Type: <c>DWORD</c></para>
            <para>Not used.</para>
            </param>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.BROWSERFRAMEOPTIONS">
            <summary>Used with method IBrowserFrameOptions::GetFrameOptions.</summary>
            <remarks>These constants are defined in the Shobjidl.h file beginning in Windows Vista.</remarks>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.BROWSERFRAMEOPTIONS.BFO_NONE">
            <summary>Do nothing.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.BROWSERFRAMEOPTIONS.BFO_BROWSER_PERSIST_SETTINGS">
            <summary>Use the browser stream for this item. (Same window position as IE browser windows.)</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.BROWSERFRAMEOPTIONS.BFO_RENAME_FOLDER_OPTIONS_TOINTERNET">
            <summary>Rename Folder Options to Internet Options in the Tools or View menu.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.BROWSERFRAMEOPTIONS.BFO_BOTH_OPTIONS">
            <summary>Keep both Folder Options and Internet Options in the Tools or View menu.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.BROWSERFRAMEOPTIONS.BIF_PREFER_INTERNET_SHORTCUT">
            <summary>This namespace extension prefers a .url shortcut over a .lnk shortcut.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.BROWSERFRAMEOPTIONS.BFO_BROWSE_NO_IN_NEW_PROCESS">
            <summary>Do not use "Browse in New Process" by invoking a shortcut.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.BROWSERFRAMEOPTIONS.BFO_ENABLE_HYPERLINK_TRACKING">
            <summary>Track display name to determine when hyperlinks should be tagged as previously used.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.BROWSERFRAMEOPTIONS.BFO_USE_IE_OFFLINE_SUPPORT">
            <summary>Use Internet Explorer's offline support.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.BROWSERFRAMEOPTIONS.BFO_SUBSTITUE_INTERNET_START_PAGE">
            <summary>Use Start Page support for this namespace extension.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.BROWSERFRAMEOPTIONS.BFO_USE_IE_LOGOBANDING">
            <summary>Use the Brand block in the Toolbar.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.BROWSERFRAMEOPTIONS.BFO_ADD_IE_TOCAPTIONBAR">
            <summary>Append to display name in the caption bar.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.BROWSERFRAMEOPTIONS.BFO_USE_DIALUP_REF">
            <summary>
            Reference the DialUp reference count while the browser is navigated to this location. This will also enable the ICW and
            Software update.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.BROWSERFRAMEOPTIONS.BFO_USE_IE_TOOLBAR">
            <summary>Use the Internet Explorer toolbar.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.BROWSERFRAMEOPTIONS.BFO_NO_PARENT_FOLDER_SUPPORT">
            <summary>
            Disable navigation to parent folders. Used for the button that navigates to parent folder or the View.GoTo.ParentFolder feature.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.BROWSERFRAMEOPTIONS.BFO_NO_REOPEN_NEXT_RESTART">
            <summary>
            Browser windows are not reopened after a reboot of the system, regardless of whether they were open before the reboot. Use
            the same behavior for the namespace extension.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.BROWSERFRAMEOPTIONS.BFO_GO_HOME_PAGE">
            <summary>Add Home Page to menu (Go).</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.BROWSERFRAMEOPTIONS.BFO_PREFER_IEPROCESS">
            <summary>Prefer use of Iexplore.exe over Explorer.exe.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.BROWSERFRAMEOPTIONS.BFO_SHOW_NAVIGATION_CANCELLED">
            <summary>If navigation is terminated, show the Action Canceled HTML page.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.BROWSERFRAMEOPTIONS.BFO_USE_IE_STATUSBAR">
            <summary>Use the persisted Internet Explorer status bar settings.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.BROWSERFRAMEOPTIONS.BFO_QUERY_ALL">
            <summary>Return all values.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.FCT">
            <summary>Flags specifying where the toolbar buttons should go.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FCT.FCT_MERGE">
            <summary>
            Merge the toolbar items instead of replacing all of the buttons with those provided by the view. This is the recommended choice.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FCT.FCT_CONFIGABLE">
            <summary>Not implemented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FCT.FCT_ADDTOEND">
            <summary>Add at the right side of the toolbar.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.FCW">
            <summary>
            A value that indicates the frame control to show or hide. One of the following values as defined in Shobjidl.h or -1 for
            fullscreen/kiosk mode.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FCW.FCW_INTERNETBAR">
            <summary>The browser's media bar.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FCW.FCW_PROGRESS">
            <summary>The browser's progress bar.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FCW.FCW_STATUS">
            <summary>The browser's status bar.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FCW.FCW_TOOLBAR">
            <summary>The browser's toolbar.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FCW.FCW_TREE">
            <summary>The browser's tree view.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.FOLDERFLAGS">
            <summary>Folder view flags.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERFLAGS.FWF_NONE">
            <summary>Windows 7 and later. No special view options.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERFLAGS.FWF_AUTOARRANGE">
            <summary>
            Automatically arrange the elements in the view. This implies LVS_AUTOARRANGE if the list-view control is used to implement
            the view.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERFLAGS.FWF_ABBREVIATEDNAMES">
            <summary>Not supported.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERFLAGS.FWF_SNAPTOGRID">
            <summary>Not supported.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERFLAGS.FWF_OWNERDATA">
            <summary>Not supported.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERFLAGS.FWF_BESTFITWINDOW">
            <summary>Not supported.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERFLAGS.FWF_DESKTOP">
            <summary>
            Make the folder behave like the desktop. This value applies only to the desktop and is not used for typical Shell folders.
            This flag implies FWF_NOCLIENTEDGE and FWF_NOSCROLL.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERFLAGS.FWF_SINGLESEL">
            <summary>Do not allow more than a single item to be selected. This is used in the common dialog boxes.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERFLAGS.FWF_NOSUBFOLDERS">
            <summary>Do not show subfolders.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERFLAGS.FWF_TRANSPARENT">
            <summary>Draw transparently. This is used only for the desktop.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERFLAGS.FWF_NOCLIENTEDGE">
            <summary>Not supported.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERFLAGS.FWF_NOSCROLL">
            <summary>Do not add scroll bars. This is used only for the desktop.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERFLAGS.FWF_ALIGNLEFT">
            <summary>
            The view should be left-aligned. This implies LVS_ALIGNLEFT if the list-view control is used to implement the view.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERFLAGS.FWF_NOICONS">
            <summary>The view should not display icons.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERFLAGS.FWF_SHOWSELALWAYS">
            <summary>This flag is deprecated as of Windows XP and has no effect. Always show the selection.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERFLAGS.FWF_NOVISIBLE">
            <summary>Not supported.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERFLAGS.FWF_SINGLECLICKACTIVATE">
            <summary>Not supported.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERFLAGS.FWF_NOWEBVIEW">
            <summary>The view should not be shown as a web view.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERFLAGS.FWF_HIDEFILENAMES">
            <summary>The view should not display file names.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERFLAGS.FWF_CHECKSELECT">
            <summary>Turns on the check mode for the view.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERFLAGS.FWF_NOENUMREFRESH">
            <summary>
            Windows Vista and later. Do not re-enumerate the view (or drop the current contents of the view) when the view is refreshed.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERFLAGS.FWF_NOGROUPING">
            <summary>Windows Vista and later. Do not allow grouping in the view</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERFLAGS.FWF_FULLROWSELECT">
            <summary>Windows Vista and later. When an item is selected, the item and all its sub-items are highlighted.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERFLAGS.FWF_NOFILTERS">
            <summary>Windows Vista and later. Do not display filters in the view.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERFLAGS.FWF_NOCOLUMNHEADER">
            <summary>Windows Vista and later. Do not display a column header in the view in any view mode.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERFLAGS.FWF_NOHEADERINALLVIEWS">
            <summary>Windows Vista and later. Only show the column header in details view mode.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERFLAGS.FWF_EXTENDEDTILES">
            <summary>
            Windows Vista and later. When the view is in "tile view mode" the layout of a single item should be extended to the width of
            the view.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERFLAGS.FWF_TRICHECKSELECT">
            <summary>Windows Vista and later. Not supported.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERFLAGS.FWF_AUTOCHECKSELECT">
            <summary>Windows Vista and later. Items can be selected using checkboxes.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERFLAGS.FWF_NOBROWSERVIEWSTATE">
            <summary>Windows Vista and later. The view should not save view state in the browser.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERFLAGS.FWF_SUBSETGROUPS">
            <summary>Windows Vista and later. The view should list the number of items displayed in each group. To be used with IFolderView2::SetGroupSubsetCount.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERFLAGS.FWF_USESEARCHFOLDER">
            <summary>Windows Vista and later. Use the search folder for stacking and searching.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERFLAGS.FWF_ALLOWRTLREADING">
            <summary>
            Windows Vista and later. Ensure right-to-left reading layout in a right-to-left system. Without this flag, the view displays
            strings from left-to-right both on systems set to left-to-right and right-to-left reading layout, which ensures that file
            names display correctly.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.FOLDERVIEWMODE">
            <summary>The view mode of a folder.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERVIEWMODE.FVM_AUTO">
            <summary>The view should determine the best option.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERVIEWMODE.FVM_CONTENT">
            <summary>Windows 7 and later. The view should display content mode.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERVIEWMODE.FVM_DETAILS">
            <summary>Object names and other selected information, such as the size or date last updated, are shown.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERVIEWMODE.FVM_ICON">
            <summary>The view should display medium-size icons.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERVIEWMODE.FVM_LIST">
            <summary>Object names are displayed in a list view.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERVIEWMODE.FVM_SMALLICON">
            <summary>The view should display small icons.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERVIEWMODE.FVM_THUMBNAIL">
            <summary>The view should display thumbnail icons.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERVIEWMODE.FVM_THUMBSTRIP">
            <summary>The view should display icons in a filmstrip format.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERVIEWMODE.FVM_TILE">
            <summary>The view should display large icons.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.FOLDERVIEWOPTIONS">
            <summary>
            Used by methods of the IFolderViewOptions interface to activate Windows Vista options not supported by default in Windows 7 and
            later systems as well as deactivating new Windows 7 options.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERVIEWOPTIONS.FVO_DEFAULT">
            <summary>Do not use any special options.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERVIEWOPTIONS.FVO_VISTALAYOUT">
            <summary>
            Use the Windows Vista list view. This can be used to maintain continuity between systems so that users are presented with an
            expected view. At this time, setting this flag has the effective, though not literal, result of the application of the
            FVO_CUSTOMPOSITION and FVO_CUSTOMORDERING flags. However, this could change. Applications should be specific about the
            behaviors that they require. For instance, if an application requires custom positioning of its items, it should not rely on
            FVO_VISTALAYOUT to provide it, but instead explicitly apply the FVO_CUSTOMPOSITION flag.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERVIEWOPTIONS.FVO_CUSTOMPOSITION">
            <summary>
            Items require custom positioning within the space of the view. Those items are positioned to specific coordinates. This
            option is not active by default in the Windows 7 view.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERVIEWOPTIONS.FVO_CUSTOMORDERING">
            <summary>
            Items require custom ordering within the view. This option is not active by default in the Windows 7 view. When it is
            active, the user can reorder the view by dragging items to their desired locations.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERVIEWOPTIONS.FVO_SUPPORTHYPERLINKS">
            <summary>
            Tiles and Details displays can contain hyperlinks. This option is not active by default in the Windows 7 view. When
            hyperlinks are displayed, they are updated to the Windows 7 view.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERVIEWOPTIONS.FVO_NOANIMATIONS">
            <summary>
            Do not display animations in the view. This option was introduced in Windows 7 and is active by default in the Windows 7 view.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERVIEWOPTIONS.FVO_NOSCROLLTIPS">
            <summary>Do not show scroll tips. This option was introduced in Windows 7 and is active by default in the Windows 7 view.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.SBSP">
            <summary>Flags specifying the folder to be browsed.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SBSP.SBSP_ABSOLUTE">
            <summary>An absolute PIDL, relative to the desktop.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SBSP.SBSP_ACTIVATE_NOFOCUS">
            <summary>Windows Vista and later. Navigate without the default behavior of setting focus into the new view.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SBSP.SBSP_ALLOW_AUTONAVIGATE">
            <summary>Enable auto-navigation.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SBSP.SBSP_CALLERUNTRUSTED">
            <summary>
            Microsoft Internet Explorer 6 Service Pack 2 (SP2) and later. The navigation was possibly initiated by a webpage with
            scripting code already present on the local system.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SBSP.SBSP_CREATENOHISTORY">
            <summary>
            Windows 7 and later. Do not add a new entry to the travel log. When the user enters a search term in the search box and
            subsequently refines the query, the browser navigates forward but does not add an additional travel log entry.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SBSP.SBSP_DEFBROWSER">
            <summary>
            Use default behavior, which respects the view option (the user setting to create new windows or to browse in place). In most
            cases, calling applications should use this flag.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SBSP.SBSP_DEFMODE">
            <summary>Use the current window.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SBSP.SBSP_EXPLOREMODE">
            <summary>
            Specifies a folder tree for the new browse window. If the current browser does not match the SBSP_EXPLOREMODE of the browse
            object call, a new window is opened.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SBSP.SBSP_FEEDNAVIGATION">
            <summary>
            Windows Internet Explorer 7 and later. If allowed by current registry settings, give the browser a destination to navigate to.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SBSP.SBSP_HELPMODE">
            <summary>Not supported. Do not use.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SBSP.SBSP_INITIATEDBYHLINKFRAME">
            <summary>Undocumented</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SBSP.SBSP_KEEPSAMETEMPLATE">
            <summary>Windows Vista and later. Not supported. Do not use.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SBSP.SBSP_KEEPWORDWHEELTEXT">
            <summary>Windows Vista and later. Navigate without clearing the search entry field.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SBSP.SBSP_NAVIGATEBACK">
            <summary>Navigate back, ignore the PIDL.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SBSP.SBSP_NAVIGATEFORWARD">
            <summary>Navigate forward, ignore the PIDL.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SBSP.SBSP_NEWBROWSER">
            <summary>Creates another window for the specified folder.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SBSP.SBSP_NOAUTOSELECT">
            <summary>Suppress selection in the history pane.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SBSP.SBSP_NOTRANSFERHIST">
            <summary>Do not transfer the browsing history to the new window.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SBSP.SBSP_OPENMODE">
            <summary>
            Specifies no folder tree for the new browse window. If the current browser does not match the SBSP_OPENMODE of the browse
            object call, a new window is opened.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SBSP.SBSP_PARENT">
            <summary>Browse the parent folder, ignore the PIDL.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SBSP.SBSP_PLAYNOSOUND">
            <summary>Windows 7 and later. Do not make the navigation complete sound for each keystroke in the search box.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SBSP.SBSP_REDIRECT">
            <summary>Enables redirection to another URL.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SBSP.SBSP_RELATIVE">
            <summary>A relative PIDL, relative to the current folder.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SBSP.SBSP_SAMEBROWSER">
            <summary>Browse to another folder with the same Windows Explorer window.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SBSP.SBSP_TRUSTEDFORACTIVEX">
            <summary>Microsoft Internet Explorer 6 Service Pack 2 (SP2) and later. The navigate should allow ActiveX prompts.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SBSP.SBSP_TRUSTFIRSTDOWNLOAD">
            <summary>
            Microsoft Internet Explorer 6 Service Pack 2 (SP2) and later. The new window is the result of a user initiated action. Trust
            the new window if it immediately attempts to download content.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SBSP.SBSP_UNTRUSTEDFORDOWNLOAD">
            <summary>
            Microsoft Internet Explorer 6 Service Pack 2 (SP2) and later. The window is navigating to an untrusted, non-HTML file. If
            the user attempts to download the file, do not allow the download.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SBSP.SBSP_WRITENOHISTORY">
            <summary>Write no history of this navigation in the history Shell folder.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.SFVM">
            <summary>Flags used by IShellFolderViewCB::MessageSFVCB.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SFVM.SFVM_ADDPROPERTYPAGES">
            <summary>Allows the callback object to provide a page to add to the Properties property sheet of the selected object.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SFVM.SFVM_BACKGROUNDENUM">
            <summary>Allows the callback object to request that enumeration be done on a background thread.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SFVM.SFVM_BACKGROUNDENUMDONE">
            <summary>Notifies the callback object that background enumeration is complete.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SFVM.SFVM_COLUMNCLICK">
            <summary>
            Notifies the callback object that the user has clicked a column header to sort the list of objects in the folder view.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SFVM.SFVM_DEFITEMCOUNT">
            <summary>Allows the callback object to specify the number of items in the folder view.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SFVM.SFVM_DEFVIEWMODE">
            <summary>Allows the callback object to specify the view mode.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SFVM.SFVM_DIDDRAGDROP">
            <summary>Notifies the callback function that a drag-and-drop operation has begun.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SFVM.SFVM_FSNOTIFY">
            <summary>Notifies the callback object that an event has taken place that affects one of its items.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SFVM.SFVM_GETANIMATION">
            <summary>
            Allows the callback object to specify that an animation be displayed while items are enumerated on a background thread.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SFVM.SFVM_GETBUTTONINFO">
            <summary>Allows the callback object to add buttons to the toolbar.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SFVM.SFVM_GETBUTTONS">
            <summary>Allows the callback object to specify the buttons to be added to the toolbar.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SFVM.SFVM_GETDETAILSOF">
            <summary>
            Allows the callback object to provide the details for an item in a Shell folder. Use only if a call to GetDetailsOf fails
            and there is no GetDetailsOf method available to call.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SFVM.SFVM_GETHELPTEXT">
            <summary>Allows the callback object to specify a help text string for menu items or toolbar buttons.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SFVM.SFVM_GETHELPTOPIC">
            <summary>Allows the callback object to specify a Help file and topic.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SFVM.SFVM_GETNOTIFY">
            <summary>Specifies which events will generate an SFVM_FSNOTIFY message for a given item.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SFVM.SFVM_GETPANE">
            <summary>Allows the callback object to provide the status bar pane in which to display the Internet zone information.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SFVM.SFVM_GETSORTDEFAULTS">
            <summary>Allows the callback object to specify default sorting parameters.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SFVM.SFVM_GETTOOLTIPTEXT">
            <summary>Allows the callback object to specify a tooltip text string for menu items or toolbar buttons.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SFVM.SFVM_GETZONE">
            <summary>Allows the callback object to provide Internet zone information.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SFVM.SFVM_INITMENUPOPUP">
            <summary>Allows the callback object to modify an item's context menu.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SFVM.SFVM_INVOKECOMMAND">
            <summary>Notifies the callback object that one of its toolbar or menu commands has been invoked.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SFVM.SFVM_MERGEMENU">
            <summary>Allows the callback object to merge menu items into the Windows Explorer menus.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SFVM.SFVM_QUERYFSNOTIFY">
            <summary>Allows the callback object to register a folder so that changes to that folder's view will generate notifications.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SFVM.SFVM_SETISFV">
            <summary>
            Notifies the callback object of the container site. This is used only when IObjectWithSite::SetSite is not supported and
            SHCreateShellFolderViewEx is used.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SFVM.SFVM_SIZE">
            <summary>Notifies the callback object that the folder view has been resized.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SFVM.SFVM_THISIDLIST">
            <summary>
            Allows the callback object to specify the view's PIDL. This is used only when SetIDList and IPersistFolder2::GetCurFolder
            have failed.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SFVM.SFVM_UNMERGEMENU">
            <summary>Notifies the callback object that a menu is being removed.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SFVM.SFVM_UPDATESTATUSBAR">
            <summary>Allows the callback object to request that the status bar be updated.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SFVM.SFVM_WINDOWCREATED">
            <summary>Notifies the callback object that the folder view window is being created.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.SV2GV">
            <summary>The type of view requested.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SV2GV.SV2GV_CURRENTVIEW">
            <summary>Current Shell view.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SV2GV.SV2GV_DEFAULTVIEW">
            <summary>Default Shell view.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.SV3CVW3_FLAGS">
            <summary>Flags that specify details of the view being created.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SV3CVW3_FLAGS.SV3CVW3_DEFAULT">
            <summary>The default view.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SV3CVW3_FLAGS.SV3CVW3_NONINTERACTIVE">
            <summary>In the case of an error, the view should fail silently rather than displaying a UI.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SV3CVW3_FLAGS.SV3CVW3_FORCEVIEWMODE">
            <summary>The view mode set by IShellView3::CreateViewWindow3 overrides the saved view state.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SV3CVW3_FLAGS.SV3CVW3_FORCEFOLDERFLAGS">
            <summary>Folder flags set by IShellView3::CreateViewWindow3 override the saved view state.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.SVSIF">
            <summary>Selection flags for IShellView objects.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SVSIF.SVSI_DESELECT">
            <summary>Deselect the item.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SVSIF.SVSI_SELECT">
            <summary>Select the item.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SVSIF.SVSI_EDIT">
            <summary>Put the name of the item into rename mode. This value includes SVSI_SELECT.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SVSIF.SVSI_DESELECTOTHERS">
            <summary>Deselect all but the selected item. If the item parameter is NULL, deselect all items.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SVSIF.SVSI_ENSUREVISIBLE">
            <summary>
            In the case of a folder that cannot display all of its contents on one screen, display the portion that contains the
            selected item.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SVSIF.SVSI_FOCUSED">
            <summary>
            Give the selected item the focus when multiple items are selected, placing the item first in any list of the collection
            returned by a method.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SVSIF.SVSI_TRANSLATEPT">
            <summary>Convert the input point from screen coordinates to the list-view client coordinates.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SVSIF.SVSI_SELECTIONMARK">
            <summary>Mark the item so that it can be queried using IFolderView::GetSelectionMarkedItem.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SVSIF.SVSI_POSITIONITEM">
            <summary>
            Allows the window's default view to position the item. In most cases, this will place the item in the first available
            position. However, if the call comes during the processing of a mouse-positioned context menu, the position of the context
            menu is used to position the item.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SVSIF.SVSI_CHECK">
            <summary>The item should be checked. This flag is used with items in views where the checked mode is supported.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SVSIF.SVSI_CHECK2">
            <summary>
            The second check state when the view is in tri-check mode, in which there are three values for the checked state. You can
            indicate tri-check mode by specifying FWF_TRICHECKSELECT in IFolderView2::SetCurrentFolderFlags. The 3 states for
            FWF_TRICHECKSELECT are unchecked, SVSI_CHECK and SVSI_CHECK2.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SVSIF.SVSI_KEYBOARDSELECT">
            <summary>Selects the item and marks it as selected by the keyboard. This value includes SVSI_SELECT.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SVSIF.SVSI_NOTAKEFOCUS">
            <summary>An operation to select or focus an item should not also set focus on the view itself.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.SVUIA">
            <summary>Flag specifying the activation state of the window.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SVUIA.SVUIA_DEACTIVATE">
            <summary>
            Windows Explorer is about to destroy the Shell view window. The Shell view should remove all extended user interfaces. These
            are typically merged menus and merged modeless pop-up windows.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SVUIA.SVUIA_ACTIVATE_NOFOCUS">
            <summary>
            The Shell view is losing the input focus, or it has just been created without the input focus. The Shell view should be able
            to set menu items appropriate for the nonfocused state. This means no selection-specific items should be added.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SVUIA.SVUIA_ACTIVATE_FOCUS">
            <summary>
            Windows Explorer has just created the view window with the input focus. This means the Shell view should be able to set menu
            items appropriate for the focused state.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SVUIA.SVUIA_INPLACEACTIVATE">
            <summary>
            The Shell view is active without focus. This flag is only used when UIActivate is exposed through the IShellView2 interface.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IBrowserFrameOptions">
            <summary>Allows a browser or host to ask IShellView what kind of view behavior is supported.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IBrowserFrameOptions.GetFrameOptions(Vanara.PInvoke.Shell32.BROWSERFRAMEOPTIONS,Vanara.PInvoke.Shell32.BROWSERFRAMEOPTIONS@)">
            <summary>Retrieves the available browser frame view options.</summary>
            <param name="dwMask">
            <para>Type: <c>BROWSERFRAMEOPTIONS</c></para>
            <para>Specifies the options requested as a bitwise combination of one or more of the constants of enumeration type BROWSERFRAMEOPTIONS.</para>
            </param>
            <param name="pdwOptions">
            <para>Type: <c>BROWSERFRAMEOPTIONS*</c></para>
            <para>
            When this method returns, contains the options that the view can enable (for example, IShellView ). This value is not
            optional and is always equal to, or a subset of, the options specified by dwMask.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            If the method succeeds, the return value is S_OK and pdwOptions contains the subset of available view options. If the method
            fails, pdwOptions is set to BFO_NONE.
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IFolderViewOptions">
            <summary>
            <para>Exposes methods that allow control of folder view options specific to the Windows 7 and later views.</para>
            </summary>
            <remarks>
            <para>When to Implement</para>
            <para>
            An implementation of this interface is provided with Windows as part of CLSID_ExplorerBrowser and CLSID_ShellBrowser. Third
            parties do not implement this interface.
            </para>
            <para>When to Use</para>
            <para>
            By default, the Windows 7 item view does not support custom positioning, custom ordering, or hyperlinks, which were supported in
            the Windows Vista list view. Use this interface when you require those features of the older view. If, at some later time, the
            item view adds support for those features, these options will automatically use the newer view rather than continuing to revert
            to the older view as they currently do.
            </para>
            <para>Use this interface to turn off animation and scroll tip view options new to Windows 7.</para>
            <para>Use this interface to retrieve the current view settings for all of those options.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFolderViewOptions.SetFolderViewOptions(Vanara.PInvoke.Shell32.FOLDERVIEWOPTIONS,Vanara.PInvoke.Shell32.FOLDERVIEWOPTIONS)">
            <summary>Sets specified options for the view.</summary>
            <param name="fvoMask">
            A bitmask made up of one or more of the FOLDERVIEWOPTIONS flags to indicate which options' are being changed. Values in
            fvoFlags not included in this mask are ignored.
            </param>
            <param name="fvoFlags">
            A bitmask that contains the new values for the options specified in fvoMask. To enable an option, the bitmask should include
            the FOLDERVIEWOPTIONS flag for that option. To disable an option, the bit used for that FOLDERVIEWOPTIONS flag should be 0.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IFolderViewOptions.GetFolderViewOptions">
            <summary>Retrieves the current set of options for the view.</summary>
            <returns>
            A bitmask that, when this method returns successfully, receives the FOLDERVIEWOPTIONS values that are currently set.
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IShellBrowser">
            <summary>
            Implemented by hosts of Shell views (objects that implement <c>IShellView</c>). Exposes methods that provide services for the
            view it is hosting and other objects that run in the context of the Explorer window.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellBrowser.GetWindow(Vanara.PInvoke.HWND@)">
            <summary>
            Retrieves a handle to one of the windows participating in in-place activation (frame, document, parent, or in-place object window).
            </summary>
            <param name="phwnd">A pointer to a variable that receives the window handle.</param>
            <returns>
            This method returns S_OK on success. Other possible return values include the following.
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <description>E_FAIL</description>
            <description>The object is windowless.</description>
            </item>
            <item>
            <description>E_OUTOFMEMORY</description>
            <description>There is insufficient memory available for this operation.</description>
            </item>
            <item>
            <description>E_UNEXPECTED</description>
            <description>An unexpected error has occurred.</description>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            Five types of windows comprise the windows hierarchy. When a object is active in place, it has access to some or all of
            these windows.
            </para>
            <list type="table">
            <listheader>
            <term>Window</term>
            <term>Description</term>
            </listheader>
            <item>
            <description>Frame</description>
            <description>The outermost main window where the container application's main menu resides.</description>
            </item>
            <item>
            <description>Document</description>
            <description>The window that displays the compound document containing the embedded object to the user.</description>
            </item>
            <item>
            <description>Pane</description>
            <description>
            The subwindow of the document window that contains the object's view. Applicable only for applications with split-pane windows.
            </description>
            </item>
            <item>
            <description>Parent</description>
            <description>
            The container window that contains that object's view. The object application installs its window as a child of this window.
            </description>
            </item>
            <item>
            <description>In-place</description>
            <description>
            The window containing the active in-place object. The object application creates this window and installs it as a child of
            its hatch window, which is a child of the container's parent window.
            </description>
            </item>
            </list>
            <para>
            Each type of window has a different role in the in-place activation architecture. However, it is not necessary to employ a
            separate physical window for each type. Many container applications use the same window for their frame, document, pane, and
            parent windows.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellBrowser.ContextSensitiveHelp(System.Boolean)">
            <summary>Determines whether context-sensitive help mode should be entered during an in-place activation session.</summary>
            <param name="fEnterMode">
            <see langword="true"/> if help mode should be entered; <see langword="false"/> if it should be exited.
            </param>
            <returns>
            <para>
            This method returns S_OK if the help mode was entered or exited successfully, depending on the value passed in <paramref
            name="fEnterMode"/>. Other possible return values include the following. <br/>
            </para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <description>E_INVALIDARG</description>
            <description>The specified <paramref name="fEnterMode"/> value is not valid.</description>
            </item>
            <item>
            <description>E_OUTOFMEMORY</description>
            <description>There is insufficient memory available for this operation.</description>
            </item>
            <item>
            <description>E_UNEXPECTED</description>
            <description>An unexpected error has occurred.</description>
            </item>
            </list>
            </returns>
            <remarks>
            <para>Applications can invoke context-sensitive help when the user:</para>
            <list type="bullet">
            <item>presses SHIFT+F1, then clicks a topic</item>
            <item>presses F1 when a menu item is selected</item>
            </list>
            <para>
            When SHIFT+F1 is pressed, either the frame or active object can receive the keystrokes. If the container's frame receives
            the keystrokes, it calls its containing document's IOleWindow::ContextSensitiveHelp method with <paramref
            name="fEnterMode"/> set to <see langword="true"/>. This propagates the help state to all of its in-place objects so they can
            correctly handle the mouse click or WM_COMMAND.
            </para>
            <para>
            If an active object receives the SHIFT+F1 keystrokes, it calls the container's IOleWindow::ContextSensitiveHelp method with
            <paramref name="fEnterMode"/> set to <see langword="true"/>, which then recursively calls each of its in-place sites until
            there are no more to be notified. The container then calls its document's or frame's IOleWindow::ContextSensitiveHelp method
            with <paramref name="fEnterMode"/> set to <see langword="true"/>.
            </para>
            <para>When in context-sensitive help mode, an object that receives the mouse click can either:</para>
            <list type="bullet">
            <item>Ignore the click if it does not support context-sensitive help.</item>
            <item>
            Tell all the other objects to exit context-sensitive help mode with ContextSensitiveHelp set to FALSE and then provide help
            for that context.
            </item>
            </list>
            <para>
            An object in context-sensitive help mode that receives a WM_COMMAND should tell all the other in-place objects to exit
            context-sensitive help mode and then provide help for the command.
            </para>
            <para>
            If a container application is to support context-sensitive help on menu items, it must either provide its own message filter
            so that it can intercept the F1 key or ask the OLE library to add a message filter by calling OleSetMenuDescriptor, passing
            valid, non-NULL values for the lpFrame and lpActiveObj parameters.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellBrowser.InsertMenusSB(Vanara.PInvoke.HMENU,Vanara.PInvoke.Ole32.OLEMENUGROUPWIDTHS@)">
            <summary>
            Allows the container to insert its menu groups into the composite menu that is displayed when an extended namespace is being
            viewed or used.
            </summary>
            <param name="hmenuShared">A handle to an empty menu.</param>
            <param name="lpMenuWidths">
            The address of an OLEMENUGROUPWIDTHS array of six LONG values. The container fills in elements 0, 2, and 4 to reflect the
            number of menu elements it provided in the File, View, and Window menu groups.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellBrowser.SetMenuSB(Vanara.PInvoke.HMENU,System.IntPtr,Vanara.PInvoke.HWND)">
            <summary>Installs the composite menu in the view window.</summary>
            <param name="hmenuShared">
            A handle to the composite menu constructed by calls to IShellBrowser::InsertMenusSB and the InsertMenu function.
            </param>
            <param name="holemenuRes"></param>
            <param name="hwndActiveObject">The view's window handle.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellBrowser.RemoveMenusSB(Vanara.PInvoke.HMENU)">
            <summary>
            Permits the container to remove any of its menu elements from the in-place composite menu and to free all associated resources.
            </summary>
            <param name="hmenuShared">
            A handle to the in-place composite menu that was constructed by calls to IShellBrowser::InsertMenusSB and the InsertMenu function.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellBrowser.SetStatusTextSB(System.String)">
            <summary>Sets and displays status text about the in-place object in the container's frame-window status bar.</summary>
            <param name="pszStatusText">A pointer to a null-terminated character string that contains the message to display.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellBrowser.EnableModelessSB(System.Boolean)">
            <summary>Tells Windows Explorer to enable or disable its modeless dialog boxes.</summary>
            <param name="fEnable">
            Specifies whether the modeless dialog boxes are to be enabled or disabled. If this parameter is nonzero, modeless dialog
            boxes are enabled. If this parameter is zero, modeless dialog boxes are disabled.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellBrowser.TranslateAcceleratorSB(Vanara.PInvoke.MSG@,System.UInt16)">
            <summary>Translates accelerator keystrokes intended for the browser's frame while the view is active.</summary>
            <param name="pmsg">The address of an MSG structure containing the keystroke message.</param>
            <param name="wID">
            The command identifier value corresponding to the keystroke in the container-provided accelerator table. Containers should
            use this value instead of translating again.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellBrowser.BrowseObject(System.IntPtr,Vanara.PInvoke.Shell32.SBSP)">
            <summary>Informs Windows Explorer to browse to another folder.</summary>
            <param name="pidl">
            The address of an ITEMIDLIST (item identifier list) structure that specifies an object's location. This value is dependent
            on the flag or flags set in the wFlags parameter.
            </param>
            <param name="wFlags">Flags specifying the folder to be browsed.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellBrowser.GetViewStateStream(Vanara.PInvoke.STGM,System.Runtime.InteropServices.ComTypes.IStream@)">
            <summary>Gets an IStream interface that can be used for storage of view-specific state information.</summary>
            <param name="grfMode">Read/write access of the IStream interface.</param>
            <param name="ppStrm">The address that receives the IStream interface pointer.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellBrowser.GetControlWindow(Vanara.PInvoke.Shell32.FCW,Vanara.PInvoke.HWND@)">
            <summary>Gets the window handle to a browser control.</summary>
            <param name="id">
            <para>Type: <c>UINT</c></para>
            <para>The control handle that is being requested. This parameter can be one of the following values:</para>
            <para>FCW_TOOLBAR</para>
            <para>Retrieves the window handle to the browser's toolbar.</para>
            <para>FCW_STATUS</para>
            <para>Retrieves the window handle to the browser's status bar.</para>
            <para>FCW_TREE</para>
            <para>Retrieves the window handle to the browser's tree view.</para>
            <para>FCW_PROGRESS</para>
            <para>Retrieves the window handle to the browser's progress bar.</para>
            </param>
            <param name="phwnd">
            <para>Type: <c>HWND*</c></para>
            <para>The address of the window handle to the Windows Explorer control.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>Returns S_OK if successful, or a COM-defined error value otherwise.</para>
            </returns>
            <remarks>
            <para><c>GetControlWindow</c> is used so views can directly manipulate the browser's controls. <c>FCW_TREE</c> should be used only to determine if the tree is present.</para>
            <para>Notes to Calling Applications</para>
            <para><c>GetControlWindow</c> is used to manipulate and test the state of the control windows. Do not send messages directly to these controls; instead, use IShellBrowser::SendControlMsg. Be prepared for this method to return <c>NULL</c>. Later versions of Windows Explorer may not include a toolbar, status bar, or tree window.</para>
            <para>Notes to Implementers</para>
            <para><c>GetControlWindow</c> returns the window handle to these controls if they exist in your implementation.</para>
            <para>See also IShellBrowser</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellBrowser.SendControlMsg(Vanara.PInvoke.Shell32.FCW,System.UInt32,System.IntPtr,System.IntPtr,System.IntPtr@)">
            <summary>Sends control messages to either the toolbar or the status bar in a Windows Explorer window.</summary>
            <param name="id">
            <para>Type: <c>UINT</c></para>
            <para>An identifier for either a toolbar (<c>FCW_TOOLBAR</c>) or for a status bar window (<c>FCW_STATUS</c>).</para>
            </param>
            <param name="uMsg">
            <para>Type: <c>UINT</c></para>
            <para>The message to be sent to the control.</para>
            </param>
            <param name="wParam">
            <para>Type: <c>WPARAM</c></para>
            <para>The value depends on the message specified in the uMsg parameter.</para>
            </param>
            <param name="lParam">
            <para>Type: <c>LPARAM</c></para>
            <para>The value depends on the message specified in the uMsg parameter.</para>
            </param>
            <param name="pret">
            <para>Type: <c>LRESULT*</c></para>
            <para>The address of the return value of the SendMessage function.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>Returns <c>S_OK</c> if successful, or a COM-defined error value otherwise.</para>
            </returns>
            <remarks>
            <para>Refer to the Common Controls documentation for more information on the messages that can be sent to the toolbar or status bar control.</para>
            <para>Notes to Calling Applications</para>
            <para>Use of this call requires diligent attention, because leaving either the status bar or toolbar in an inappropriate state will affect the performance of Windows Explorer.</para>
            <para>Notes to Implementers</para>
            <para>If your Windows Explorer does not have these controls, you can return <c>E_NOTIMPL</c>.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellBrowser.QueryActiveShellView(Vanara.PInvoke.Shell32.IShellView@)">
            <summary>Retrieves the currently active (displayed) Shell view object.</summary>
            <param name="ppshv">
            <para>Type: <c>IShellView**</c></para>
            <para>The address of the pointer to the currently active Shell view object.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>Returns S_OK if successful, or a COM-defined error value otherwise.</para>
            </returns>
            <remarks>
            <para>Notes to Calling Applications</para>
            <para>Because the IShellBrowser interface can host several Shell views simultaneously, this method provides an easy way to determine the active Shell view object.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellBrowser.OnViewWindowActive(Vanara.PInvoke.Shell32.IShellView)">
            <summary>Called by the Shell view when the view window or one of its child windows gets the focus or becomes active.</summary>
            <param name="ppshv">Address of the view object's IShellView pointer.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellBrowser.SetToolbarItems(Vanara.PInvoke.ComCtl32.TBBUTTON[],System.UInt32,Vanara.PInvoke.Shell32.FCT)">
            <summary>
            <note type="note">This method has no effect on Windows Vista or later operating systems.</note> Adds toolbar items to
            Windows Explorer's toolbar.
            </summary>
            <param name="lpButtons">The address of an array of TBBUTTON structures.</param>
            <param name="nButtons">The number of TBBUTTON structures in the lpButtons array.</param>
            <param name="uFlags">Flags specifying where the toolbar buttons should go.</param>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IShellFolderViewCB">
            <summary>
            Exposes a method that allows communication between Windows Explorer and a folder view implemented using the system folder view
            object (the <c>IShellView</c> object returned through <c>SHCreateShellFolderView</c>) so that the folder view can be notified of
            events and modify its view accordingly.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellFolderViewCB.MessageSFVCB(Vanara.PInvoke.Shell32.SFVM,System.IntPtr,System.IntPtr,System.IntPtr@)">
            <summary>Allows communication between the system folder view object and a system folder view callback object.</summary>
            <param name="uMsg">One of the following notifications.</param>
            <param name="wParam">Additional information.</param>
            <param name="lParam">Additional information.</param>
            <param name="plResult">Additional information.</param>
            <returns>S_OK if the message was handled, E_NOTIMPL if the shell should perform default processing.</returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IShellView">
            <summary>
            <para>Exposes methods that present a view in the Windows Explorer or folder windows.</para>
            </summary>
            <remarks>
            <para>
            The object that exposes <c>IShellView</c> is typically created by a call to the IShellFolder::CreateViewObject method. This
            provides the channel of communication between a view object and Windows Explorer's outermost frame window. The communication
            involves the translation of messages, the state of the frame window (activated or deactivated), the state of the document window
            (activated or deactivated), and the merging of menus and toolbar items.
            </para>
            <para>
            This interface is implemented by namespace extensions that display themselves in Windows Explorer's namespace. This object is
            created by the IShellFolder object that hosts the view.
            </para>
            <para>These methods are used by the Shell view's Windows Explorer window to manipulate objects while they are active.</para>
            <para><c>IShellView</c> is derived from IOleWindow. The listed methods are specific to <c>IShellView</c>.</para>
            <para>
            A special instance of <c>IShellView</c> known as the default Shell folder view object can be created by calling
            SHCreateShellFolderView or SHCreateShellFolderViewEx. This instance can be differentiated from standard implementations by
            calling QueryInterface on an <c>IShellView</c> object using the IID_CDefView IID. This call succeeds only when made on the
            default Shell folder view object.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellView.GetWindow(Vanara.PInvoke.HWND@)">
            <summary>
            Retrieves a handle to one of the windows participating in in-place activation (frame, document, parent, or in-place object window).
            </summary>
            <param name="phwnd">A pointer to a variable that receives the window handle.</param>
            <returns>
            This method returns S_OK on success. Other possible return values include the following.
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <description>E_FAIL</description>
            <description>The object is windowless.</description>
            </item>
            <item>
            <description>E_OUTOFMEMORY</description>
            <description>There is insufficient memory available for this operation.</description>
            </item>
            <item>
            <description>E_UNEXPECTED</description>
            <description>An unexpected error has occurred.</description>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            Five types of windows comprise the windows hierarchy. When a object is active in place, it has access to some or all of
            these windows.
            </para>
            <list type="table">
            <listheader>
            <term>Window</term>
            <term>Description</term>
            </listheader>
            <item>
            <description>Frame</description>
            <description>The outermost main window where the container application's main menu resides.</description>
            </item>
            <item>
            <description>Document</description>
            <description>The window that displays the compound document containing the embedded object to the user.</description>
            </item>
            <item>
            <description>Pane</description>
            <description>
            The subwindow of the document window that contains the object's view. Applicable only for applications with split-pane windows.
            </description>
            </item>
            <item>
            <description>Parent</description>
            <description>
            The container window that contains that object's view. The object application installs its window as a child of this window.
            </description>
            </item>
            <item>
            <description>In-place</description>
            <description>
            The window containing the active in-place object. The object application creates this window and installs it as a child of
            its hatch window, which is a child of the container's parent window.
            </description>
            </item>
            </list>
            <para>
            Each type of window has a different role in the in-place activation architecture. However, it is not necessary to employ a
            separate physical window for each type. Many container applications use the same window for their frame, document, pane, and
            parent windows.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellView.ContextSensitiveHelp(System.Boolean)">
            <summary>Determines whether context-sensitive help mode should be entered during an in-place activation session.</summary>
            <param name="fEnterMode">
            <see langword="true"/> if help mode should be entered; <see langword="false"/> if it should be exited.
            </param>
            <returns>
            <para>
            This method returns S_OK if the help mode was entered or exited successfully, depending on the value passed in <paramref
            name="fEnterMode"/>. Other possible return values include the following. <br/>
            </para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <description>E_INVALIDARG</description>
            <description>The specified <paramref name="fEnterMode"/> value is not valid.</description>
            </item>
            <item>
            <description>E_OUTOFMEMORY</description>
            <description>There is insufficient memory available for this operation.</description>
            </item>
            <item>
            <description>E_UNEXPECTED</description>
            <description>An unexpected error has occurred.</description>
            </item>
            </list>
            </returns>
            <remarks>
            <para>Applications can invoke context-sensitive help when the user:</para>
            <list type="bullet">
            <item>presses SHIFT+F1, then clicks a topic</item>
            <item>presses F1 when a menu item is selected</item>
            </list>
            <para>
            When SHIFT+F1 is pressed, either the frame or active object can receive the keystrokes. If the container's frame receives
            the keystrokes, it calls its containing document's IOleWindow::ContextSensitiveHelp method with <paramref
            name="fEnterMode"/> set to <see langword="true"/>. This propagates the help state to all of its in-place objects so they can
            correctly handle the mouse click or WM_COMMAND.
            </para>
            <para>
            If an active object receives the SHIFT+F1 keystrokes, it calls the container's IOleWindow::ContextSensitiveHelp method with
            <paramref name="fEnterMode"/> set to <see langword="true"/>, which then recursively calls each of its in-place sites until
            there are no more to be notified. The container then calls its document's or frame's IOleWindow::ContextSensitiveHelp method
            with <paramref name="fEnterMode"/> set to <see langword="true"/>.
            </para>
            <para>When in context-sensitive help mode, an object that receives the mouse click can either:</para>
            <list type="bullet">
            <item>Ignore the click if it does not support context-sensitive help.</item>
            <item>
            Tell all the other objects to exit context-sensitive help mode with ContextSensitiveHelp set to FALSE and then provide help
            for that context.
            </item>
            </list>
            <para>
            An object in context-sensitive help mode that receives a WM_COMMAND should tell all the other in-place objects to exit
            context-sensitive help mode and then provide help for the command.
            </para>
            <para>
            If a container application is to support context-sensitive help on menu items, it must either provide its own message filter
            so that it can intercept the F1 key or ask the OLE library to add a message filter by calling OleSetMenuDescriptor, passing
            valid, non-NULL values for the lpFrame and lpActiveObj parameters.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellView.TranslateAccelerator(Vanara.PInvoke.MSG@)">
            <summary>Translates keyboard shortcut (accelerator) key strokes when a namespace extension's view has the focus.</summary>
            <param name="lpmsg">The address of the message to be translated.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellView.EnableModeless(System.Boolean)">
            <summary>Enables or disables modeless dialog boxes. This method is not currently implemented.</summary>
            <param name="enable"><c>true</c> to enable modeless dialog box windows or <c>false</c> to disable them.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellView.UIActivate(Vanara.PInvoke.Shell32.SVUIA)">
            <summary>
            Called when the activation state of the view window is changed by an event that is not caused by the Shell view itself. For
            example, if the TAB key is pressed when the tree has the focus, the view should be given the focus.
            </summary>
            <param name="uState">Flag specifying the activation state of the window.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellView.Refresh">
            <summary>Refreshes the view's contents in response to user input.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellView.CreateViewWindow(Vanara.PInvoke.Shell32.IShellView,Vanara.PInvoke.Shell32.FOLDERSETTINGS@,Vanara.PInvoke.Shell32.IShellBrowser,Vanara.PInvoke.RECT@)">
            <summary>
            Creates a view window. This can be either the right pane of Windows Explorer or the client window of a folder window.
            </summary>
            <param name="psvPrevious">
            The address of the IShellView interface of the view window being exited. Views can use this parameter to communicate with a
            previous view of the same implementation. This interface can be used to optimize browsing between like views. This pointer
            may be NULL.
            </param>
            <param name="pfs">The address of a FOLDERSETTINGS structure. The view should use this when creating its view.</param>
            <param name="psb">
            The address of the current instance of the IShellBrowser interface. The view should call this interface's AddRef method and
            keep the interface pointer to allow communication with the Windows Explorer window.
            </param>
            <param name="prcView">The dimensions of the new view, in client coordinates.</param>
            <returns>The address of the window handle being created.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellView.DestroyViewWindow">
            <summary>Destroys the view window.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellView.GetCurrentInfo">
            <summary>Gets the current information.</summary>
            <returns>A FOLDERSETTINGS structure to receive the settings.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellView.AddPropertySheetPages(System.UInt32,Vanara.PInvoke.ComCtl32.AddPropSheetPageProc,System.IntPtr)">
            <summary>Allows the view to add pages to the Options property sheet from the View menu.</summary>
            <param name="dwReserved">Reserved.</param>
            <param name="lpfn">The address of the callback function used to add the pages.</param>
            <param name="lparam">A value that must be passed as the callback function's lparam parameter.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellView.SaveViewState">
            <summary>Saves the Shell's view settings so the current state can be restored during a subsequent browsing session.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellView.SelectItem(System.IntPtr,Vanara.PInvoke.Shell32.SVSIF)">
            <summary>Changes the selection state of one or more items within the Shell view window.</summary>
            <param name="pidlItem">The address of the ITEMIDLIST structure.</param>
            <param name="uFlags">One of the _SVSIF constants that specify the type of selection to apply.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellView.GetItemObject(Vanara.PInvoke.Shell32.SVGIO,System.Guid@)">
            <summary>Gets an interface that refers to data presented in the view.</summary>
            <param name="uItem">The constants that refer to an aspect of the view.</param>
            <param name="riid">The identifier of the COM interface being requested.</param>
            <returns>The address that receives the interface pointer. If an error occurs, the pointer returned must be NULL.</returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IShellView2">
            <summary>
            <para>Extends the capabilities of IShellView.</para>
            </summary>
            <remarks>
            <para>This interface also provides the methods of the IShellView interface, from which it inherits.</para>
            <para>When to Implement</para>
            <para>Implement IShellView2 if your namespace extension provides services to clients beyond those in IShellView .</para>
            <para>When to Use</para>
            <para>
            You do not call this interface directly. IShellView2 is used by the operating system only when it has confirmed that your
            application is aware of this interface. Objects that expose IShellView and IShellView2 are usually created by other Shell folder objects.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellView2.GetWindow(Vanara.PInvoke.HWND@)">
            <summary>
            Retrieves a handle to one of the windows participating in in-place activation (frame, document, parent, or in-place object window).
            </summary>
            <param name="phwnd">A pointer to a variable that receives the window handle.</param>
            <returns>
            This method returns S_OK on success. Other possible return values include the following.
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <description>E_FAIL</description>
            <description>The object is windowless.</description>
            </item>
            <item>
            <description>E_OUTOFMEMORY</description>
            <description>There is insufficient memory available for this operation.</description>
            </item>
            <item>
            <description>E_UNEXPECTED</description>
            <description>An unexpected error has occurred.</description>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            Five types of windows comprise the windows hierarchy. When a object is active in place, it has access to some or all of
            these windows.
            </para>
            <list type="table">
            <listheader>
            <term>Window</term>
            <term>Description</term>
            </listheader>
            <item>
            <description>Frame</description>
            <description>The outermost main window where the container application's main menu resides.</description>
            </item>
            <item>
            <description>Document</description>
            <description>The window that displays the compound document containing the embedded object to the user.</description>
            </item>
            <item>
            <description>Pane</description>
            <description>
            The subwindow of the document window that contains the object's view. Applicable only for applications with split-pane windows.
            </description>
            </item>
            <item>
            <description>Parent</description>
            <description>
            The container window that contains that object's view. The object application installs its window as a child of this window.
            </description>
            </item>
            <item>
            <description>In-place</description>
            <description>
            The window containing the active in-place object. The object application creates this window and installs it as a child of
            its hatch window, which is a child of the container's parent window.
            </description>
            </item>
            </list>
            <para>
            Each type of window has a different role in the in-place activation architecture. However, it is not necessary to employ a
            separate physical window for each type. Many container applications use the same window for their frame, document, pane, and
            parent windows.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellView2.ContextSensitiveHelp(System.Boolean)">
            <summary>Determines whether context-sensitive help mode should be entered during an in-place activation session.</summary>
            <param name="fEnterMode">
            <see langword="true"/> if help mode should be entered; <see langword="false"/> if it should be exited.
            </param>
            <returns>
            <para>
            This method returns S_OK if the help mode was entered or exited successfully, depending on the value passed in <paramref
            name="fEnterMode"/>. Other possible return values include the following. <br/>
            </para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <description>E_INVALIDARG</description>
            <description>The specified <paramref name="fEnterMode"/> value is not valid.</description>
            </item>
            <item>
            <description>E_OUTOFMEMORY</description>
            <description>There is insufficient memory available for this operation.</description>
            </item>
            <item>
            <description>E_UNEXPECTED</description>
            <description>An unexpected error has occurred.</description>
            </item>
            </list>
            </returns>
            <remarks>
            <para>Applications can invoke context-sensitive help when the user:</para>
            <list type="bullet">
            <item>presses SHIFT+F1, then clicks a topic</item>
            <item>presses F1 when a menu item is selected</item>
            </list>
            <para>
            When SHIFT+F1 is pressed, either the frame or active object can receive the keystrokes. If the container's frame receives
            the keystrokes, it calls its containing document's IOleWindow::ContextSensitiveHelp method with <paramref
            name="fEnterMode"/> set to <see langword="true"/>. This propagates the help state to all of its in-place objects so they can
            correctly handle the mouse click or WM_COMMAND.
            </para>
            <para>
            If an active object receives the SHIFT+F1 keystrokes, it calls the container's IOleWindow::ContextSensitiveHelp method with
            <paramref name="fEnterMode"/> set to <see langword="true"/>, which then recursively calls each of its in-place sites until
            there are no more to be notified. The container then calls its document's or frame's IOleWindow::ContextSensitiveHelp method
            with <paramref name="fEnterMode"/> set to <see langword="true"/>.
            </para>
            <para>When in context-sensitive help mode, an object that receives the mouse click can either:</para>
            <list type="bullet">
            <item>Ignore the click if it does not support context-sensitive help.</item>
            <item>
            Tell all the other objects to exit context-sensitive help mode with ContextSensitiveHelp set to FALSE and then provide help
            for that context.
            </item>
            </list>
            <para>
            An object in context-sensitive help mode that receives a WM_COMMAND should tell all the other in-place objects to exit
            context-sensitive help mode and then provide help for the command.
            </para>
            <para>
            If a container application is to support context-sensitive help on menu items, it must either provide its own message filter
            so that it can intercept the F1 key or ask the OLE library to add a message filter by calling OleSetMenuDescriptor, passing
            valid, non-NULL values for the lpFrame and lpActiveObj parameters.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellView2.TranslateAccelerator(Vanara.PInvoke.MSG@)">
            <summary>Translates keyboard shortcut (accelerator) key strokes when a namespace extension's view has the focus.</summary>
            <param name="lpmsg">The address of the message to be translated.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellView2.EnableModeless(System.Boolean)">
            <summary>Enables or disables modeless dialog boxes. This method is not currently implemented.</summary>
            <param name="enable"><c>true</c> to enable modeless dialog box windows or <c>false</c> to disable them.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellView2.UIActivate(Vanara.PInvoke.Shell32.SVUIA)">
            <summary>
            Called when the activation state of the view window is changed by an event that is not caused by the Shell view itself. For
            example, if the TAB key is pressed when the tree has the focus, the view should be given the focus.
            </summary>
            <param name="uState">Flag specifying the activation state of the window.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellView2.Refresh">
            <summary>Refreshes the view's contents in response to user input.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellView2.CreateViewWindow(Vanara.PInvoke.Shell32.IShellView,Vanara.PInvoke.Shell32.FOLDERSETTINGS@,Vanara.PInvoke.Shell32.IShellBrowser,Vanara.PInvoke.RECT@)">
            <summary>
            Creates a view window. This can be either the right pane of Windows Explorer or the client window of a folder window.
            </summary>
            <param name="psvPrevious">
            The address of the IShellView interface of the view window being exited. Views can use this parameter to communicate with a
            previous view of the same implementation. This interface can be used to optimize browsing between like views. This pointer
            may be NULL.
            </param>
            <param name="pfs">The address of a FOLDERSETTINGS structure. The view should use this when creating its view.</param>
            <param name="psb">
            The address of the current instance of the IShellBrowser interface. The view should call this interface's AddRef method and
            keep the interface pointer to allow communication with the Windows Explorer window.
            </param>
            <param name="prcView">The dimensions of the new view, in client coordinates.</param>
            <returns>The address of the window handle being created.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellView2.DestroyViewWindow">
            <summary>Destroys the view window.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellView2.GetCurrentInfo">
            <summary>Gets the current information.</summary>
            <returns>A FOLDERSETTINGS structure to receive the settings.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellView2.AddPropertySheetPages(System.UInt32,Vanara.PInvoke.ComCtl32.AddPropSheetPageProc,System.IntPtr)">
            <summary>Allows the view to add pages to the Options property sheet from the View menu.</summary>
            <param name="dwReserved">Reserved.</param>
            <param name="lpfn">The address of the callback function used to add the pages.</param>
            <param name="lparam">A value that must be passed as the callback function's lparam parameter.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellView2.SaveViewState">
            <summary>Saves the Shell's view settings so the current state can be restored during a subsequent browsing session.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellView2.SelectItem(System.IntPtr,Vanara.PInvoke.Shell32.SVSIF)">
            <summary>Changes the selection state of one or more items within the Shell view window.</summary>
            <param name="pidlItem">The address of the ITEMIDLIST structure.</param>
            <param name="uFlags">One of the _SVSIF constants that specify the type of selection to apply.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellView2.GetItemObject(Vanara.PInvoke.Shell32.SVGIO,System.Guid@)">
            <summary>Gets an interface that refers to data presented in the view.</summary>
            <param name="uItem">The constants that refer to an aspect of the view.</param>
            <param name="riid">The identifier of the COM interface being requested.</param>
            <returns>The address that receives the interface pointer. If an error occurs, the pointer returned must be NULL.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellView2.GetView(System.Guid@,Vanara.PInvoke.Shell32.SV2GV)">
            <summary>
            Requests the current or default Shell view, together with all other valid view identifiers (VIDs) supported by this
            implementation of IShellView2.
            </summary>
            <param name="pvid">A pointer to the GUID of the requested view.</param>
            <param name="uView">The type of view requested.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellView2.CreateViewWindow2(Vanara.PInvoke.Shell32.SV2CVW2_PARAMS)">
            <summary>
            Used to request the creation of a new Shell view window. It can be either the right pane of Windows Explorer or the client
            window of a folder window.
            </summary>
            <param name="lpParams">A pointer to an SV2CVW2_PARAMS structure that defines the new view window.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellView2.HandleRename(System.IntPtr)">
            <summary>Used to change an item's identifier.</summary>
            <param name="pidlNew">
            A pointer to an ITEMIDLIST structure. The current identifier is passed in and is replaced by the new one.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellView2.SelectAndPositionItem(System.IntPtr,Vanara.PInvoke.Shell32.SVSIF,Vanara.PInvoke.POINT@)">
            <summary>Selects and positions an item in a Shell View.</summary>
            <param name="pidlItem">A pointer to an ITEMIDLIST structure that uniquely identifies the item of interest.</param>
            <param name="flags">One of the _SVSIF constants that specify the type of selection to apply.</param>
            <param name="point">A pointer to a POINT structure containing the new position.</param>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IShellView3">
            <summary>
            <para>Extends the capabilities of IShellView2 by providing a method to replace IShellView2::CreateViewWindow2.</para>
            </summary>
            <remarks>
            <para>This interface also provides the methods of the IShellView and IShellView2 interfaces, from which it inherits.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellView3.GetWindow(Vanara.PInvoke.HWND@)">
            <summary>
            Retrieves a handle to one of the windows participating in in-place activation (frame, document, parent, or in-place object window).
            </summary>
            <param name="phwnd">A pointer to a variable that receives the window handle.</param>
            <returns>
            This method returns S_OK on success. Other possible return values include the following.
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <description>E_FAIL</description>
            <description>The object is windowless.</description>
            </item>
            <item>
            <description>E_OUTOFMEMORY</description>
            <description>There is insufficient memory available for this operation.</description>
            </item>
            <item>
            <description>E_UNEXPECTED</description>
            <description>An unexpected error has occurred.</description>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            Five types of windows comprise the windows hierarchy. When a object is active in place, it has access to some or all of
            these windows.
            </para>
            <list type="table">
            <listheader>
            <term>Window</term>
            <term>Description</term>
            </listheader>
            <item>
            <description>Frame</description>
            <description>The outermost main window where the container application's main menu resides.</description>
            </item>
            <item>
            <description>Document</description>
            <description>The window that displays the compound document containing the embedded object to the user.</description>
            </item>
            <item>
            <description>Pane</description>
            <description>
            The subwindow of the document window that contains the object's view. Applicable only for applications with split-pane windows.
            </description>
            </item>
            <item>
            <description>Parent</description>
            <description>
            The container window that contains that object's view. The object application installs its window as a child of this window.
            </description>
            </item>
            <item>
            <description>In-place</description>
            <description>
            The window containing the active in-place object. The object application creates this window and installs it as a child of
            its hatch window, which is a child of the container's parent window.
            </description>
            </item>
            </list>
            <para>
            Each type of window has a different role in the in-place activation architecture. However, it is not necessary to employ a
            separate physical window for each type. Many container applications use the same window for their frame, document, pane, and
            parent windows.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellView3.ContextSensitiveHelp(System.Boolean)">
            <summary>Determines whether context-sensitive help mode should be entered during an in-place activation session.</summary>
            <param name="fEnterMode">
            <see langword="true"/> if help mode should be entered; <see langword="false"/> if it should be exited.
            </param>
            <returns>
            <para>
            This method returns S_OK if the help mode was entered or exited successfully, depending on the value passed in <paramref
            name="fEnterMode"/>. Other possible return values include the following. <br/>
            </para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <description>E_INVALIDARG</description>
            <description>The specified <paramref name="fEnterMode"/> value is not valid.</description>
            </item>
            <item>
            <description>E_OUTOFMEMORY</description>
            <description>There is insufficient memory available for this operation.</description>
            </item>
            <item>
            <description>E_UNEXPECTED</description>
            <description>An unexpected error has occurred.</description>
            </item>
            </list>
            </returns>
            <remarks>
            <para>Applications can invoke context-sensitive help when the user:</para>
            <list type="bullet">
            <item>presses SHIFT+F1, then clicks a topic</item>
            <item>presses F1 when a menu item is selected</item>
            </list>
            <para>
            When SHIFT+F1 is pressed, either the frame or active object can receive the keystrokes. If the container's frame receives
            the keystrokes, it calls its containing document's IOleWindow::ContextSensitiveHelp method with <paramref
            name="fEnterMode"/> set to <see langword="true"/>. This propagates the help state to all of its in-place objects so they can
            correctly handle the mouse click or WM_COMMAND.
            </para>
            <para>
            If an active object receives the SHIFT+F1 keystrokes, it calls the container's IOleWindow::ContextSensitiveHelp method with
            <paramref name="fEnterMode"/> set to <see langword="true"/>, which then recursively calls each of its in-place sites until
            there are no more to be notified. The container then calls its document's or frame's IOleWindow::ContextSensitiveHelp method
            with <paramref name="fEnterMode"/> set to <see langword="true"/>.
            </para>
            <para>When in context-sensitive help mode, an object that receives the mouse click can either:</para>
            <list type="bullet">
            <item>Ignore the click if it does not support context-sensitive help.</item>
            <item>
            Tell all the other objects to exit context-sensitive help mode with ContextSensitiveHelp set to FALSE and then provide help
            for that context.
            </item>
            </list>
            <para>
            An object in context-sensitive help mode that receives a WM_COMMAND should tell all the other in-place objects to exit
            context-sensitive help mode and then provide help for the command.
            </para>
            <para>
            If a container application is to support context-sensitive help on menu items, it must either provide its own message filter
            so that it can intercept the F1 key or ask the OLE library to add a message filter by calling OleSetMenuDescriptor, passing
            valid, non-NULL values for the lpFrame and lpActiveObj parameters.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellView3.TranslateAccelerator(Vanara.PInvoke.MSG@)">
            <summary>Translates keyboard shortcut (accelerator) key strokes when a namespace extension's view has the focus.</summary>
            <param name="lpmsg">The address of the message to be translated.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellView3.EnableModeless(System.Boolean)">
            <summary>Enables or disables modeless dialog boxes. This method is not currently implemented.</summary>
            <param name="enable"><c>true</c> to enable modeless dialog box windows or <c>false</c> to disable them.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellView3.UIActivate(Vanara.PInvoke.Shell32.SVUIA)">
            <summary>
            Called when the activation state of the view window is changed by an event that is not caused by the Shell view itself. For
            example, if the TAB key is pressed when the tree has the focus, the view should be given the focus.
            </summary>
            <param name="uState">Flag specifying the activation state of the window.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellView3.Refresh">
            <summary>Refreshes the view's contents in response to user input.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellView3.CreateViewWindow(Vanara.PInvoke.Shell32.IShellView,Vanara.PInvoke.Shell32.FOLDERSETTINGS@,Vanara.PInvoke.Shell32.IShellBrowser,Vanara.PInvoke.RECT@)">
            <summary>
            Creates a view window. This can be either the right pane of Windows Explorer or the client window of a folder window.
            </summary>
            <param name="psvPrevious">
            The address of the IShellView interface of the view window being exited. Views can use this parameter to communicate with a
            previous view of the same implementation. This interface can be used to optimize browsing between like views. This pointer
            may be NULL.
            </param>
            <param name="pfs">The address of a FOLDERSETTINGS structure. The view should use this when creating its view.</param>
            <param name="psb">
            The address of the current instance of the IShellBrowser interface. The view should call this interface's AddRef method and
            keep the interface pointer to allow communication with the Windows Explorer window.
            </param>
            <param name="prcView">The dimensions of the new view, in client coordinates.</param>
            <returns>The address of the window handle being created.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellView3.DestroyViewWindow">
            <summary>Destroys the view window.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellView3.GetCurrentInfo">
            <summary>Gets the current information.</summary>
            <returns>A FOLDERSETTINGS structure to receive the settings.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellView3.AddPropertySheetPages(System.UInt32,Vanara.PInvoke.ComCtl32.AddPropSheetPageProc,System.IntPtr)">
            <summary>Allows the view to add pages to the Options property sheet from the View menu.</summary>
            <param name="dwReserved">Reserved.</param>
            <param name="lpfn">The address of the callback function used to add the pages.</param>
            <param name="lparam">A value that must be passed as the callback function's lparam parameter.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellView3.SaveViewState">
            <summary>Saves the Shell's view settings so the current state can be restored during a subsequent browsing session.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellView3.SelectItem(System.IntPtr,Vanara.PInvoke.Shell32.SVSIF)">
            <summary>Changes the selection state of one or more items within the Shell view window.</summary>
            <param name="pidlItem">The address of the ITEMIDLIST structure.</param>
            <param name="uFlags">One of the _SVSIF constants that specify the type of selection to apply.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellView3.GetItemObject(Vanara.PInvoke.Shell32.SVGIO,System.Guid@)">
            <summary>Gets an interface that refers to data presented in the view.</summary>
            <param name="uItem">The constants that refer to an aspect of the view.</param>
            <param name="riid">The identifier of the COM interface being requested.</param>
            <returns>The address that receives the interface pointer. If an error occurs, the pointer returned must be NULL.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellView3.GetView(System.Guid@,Vanara.PInvoke.Shell32.SV2GV)">
            <summary>
            Requests the current or default Shell view, together with all other valid view identifiers (VIDs) supported by this
            implementation of IShellView2.
            </summary>
            <param name="pvid">A pointer to the GUID of the requested view.</param>
            <param name="uView">The type of view requested.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellView3.CreateViewWindow2(Vanara.PInvoke.Shell32.SV2CVW2_PARAMS)">
            <summary>
            Used to request the creation of a new Shell view window. It can be either the right pane of Windows Explorer or the client
            window of a folder window.
            </summary>
            <param name="lpParams">A pointer to an SV2CVW2_PARAMS structure that defines the new view window.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellView3.HandleRename(System.IntPtr)">
            <summary>Used to change an item's identifier.</summary>
            <param name="pidlNew">
            A pointer to an ITEMIDLIST structure. The current identifier is passed in and is replaced by the new one.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellView3.SelectAndPositionItem(System.IntPtr,Vanara.PInvoke.Shell32.SVSIF,Vanara.PInvoke.POINT@)">
            <summary>Selects and positions an item in a Shell View.</summary>
            <param name="pidlItem">A pointer to an ITEMIDLIST structure that uniquely identifies the item of interest.</param>
            <param name="flags">One of the _SVSIF constants that specify the type of selection to apply.</param>
            <param name="point">A pointer to a POINT structure containing the new position.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IShellView3.CreateViewWindow3(Vanara.PInvoke.Shell32.IShellBrowser,Vanara.PInvoke.Shell32.IShellView,Vanara.PInvoke.Shell32.SV3CVW3_FLAGS,Vanara.PInvoke.Shell32.FOLDERFLAGS,Vanara.PInvoke.Shell32.FOLDERFLAGS,Vanara.PInvoke.Shell32.FOLDERVIEWMODE,System.Guid@,Vanara.PInvoke.RECT@)">
            <summary>
            Requests the creation of a new Shell view window. The view can be either the right pane of Windows Explorer or the client
            window of a folder window. This method replaces CreateViewWindow2.
            </summary>
            <param name="psbOwner">A pointer to an IShellBrowser interface to provide namespace extension services.</param>
            <param name="psvPrevious">
            A pointer to an IShellView interface that represents the previous view in the Windows Explorer or folder window.
            </param>
            <param name="dwViewFlags">Flags that specify details of the view being created.</param>
            <param name="dwMask">A bitwise mask that specifies which folder options specified in dwFlags are to be used.</param>
            <param name="dwFlags">A bitwise value that contains the folder options, as FOLDERFLAGS, to use in the new view.</param>
            <param name="fvMode">A bitwise value that contains the folder view mode options, as FOLDERVIEWMODE, to use in the new view.</param>
            <param name="pvid">A pointer to Shell view ID as a GUID.</param>
            <param name="prcView">A pointer to a RECT structure that provides the dimensions of the view window.</param>
            <returns>A value that receives a pointer to the handle of the new Shell view window.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.GetItemObject``1(Vanara.PInvoke.Shell32.IShellView,Vanara.PInvoke.Shell32.SVGIO)">
            <summary>Gets an interface that refers to data presented in the view.</summary>
            <typeparam name="T">The type of the COM interface being requested.</typeparam>
            <param name="sv">The <see cref="T:Vanara.PInvoke.Shell32.IShellView"/> instance.</param>
            <param name="uItem">The constants that refer to an aspect of the view.</param>
            <returns>The address that receives the interface pointer. If an error occurs, the pointer returned must be NULL.</returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.FOLDERSETTINGS">
            <summary>Contains folder view information.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERSETTINGS.ViewMode">
            <summary>Folder view mode.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.FOLDERSETTINGS.fFlags">
            <summary>A set of flags that indicate the options for the folder.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.FOLDERSETTINGS.#ctor(Vanara.PInvoke.Shell32.FOLDERVIEWMODE,Vanara.PInvoke.Shell32.FOLDERFLAGS)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Shell32.FOLDERSETTINGS"/> struct.</summary>
            <param name="viewMode">Folder view mode.</param>
            <param name="flags">A set of flags that indicate the options for the folder.</param>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.PFOLDERSETTINGS">
            <summary>Contains folder view information.</summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.PFOLDERSETTINGS.ViewMode">
            <summary>Folder view mode.</summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.PFOLDERSETTINGS.fFlags">
            <summary>A set of flags that indicate the options for the folder.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.PFOLDERSETTINGS.#ctor(Vanara.PInvoke.Shell32.FOLDERVIEWMODE,Vanara.PInvoke.Shell32.FOLDERFLAGS)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Shell32.FOLDERSETTINGS"/> struct.</summary>
            <param name="viewMode">Folder view mode.</param>
            <param name="flags">A set of flags that indicate the options for the folder.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.PFOLDERSETTINGS.op_Implicit(Vanara.PInvoke.Shell32.PFOLDERSETTINGS)~Vanara.PInvoke.Shell32.FOLDERSETTINGS">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.Shell32.PFOLDERSETTINGS"/> to <see cref="T:Vanara.PInvoke.Shell32.FOLDERSETTINGS"/>.</summary>
            <param name="r">The <see cref="T:Vanara.PInvoke.Shell32.PFOLDERSETTINGS"/> instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.PFOLDERSETTINGS.op_Implicit(Vanara.PInvoke.Shell32.FOLDERSETTINGS@)~Vanara.PInvoke.Shell32.PFOLDERSETTINGS">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.Shell32.FOLDERSETTINGS"/> to <see cref="T:Vanara.PInvoke.Shell32.PFOLDERSETTINGS"/>.</summary>
            <param name="r">The <see cref="T:Vanara.PInvoke.Shell32.FOLDERSETTINGS"/> instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.SV2CVW2_PARAMS">
            <summary>
            <para>Holds the parameters for the IShellView2::CreateViewWindow2 method.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SV2CVW2_PARAMS.cbSize">
            <summary>The size of the structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SV2CVW2_PARAMS.psvPrev">
            <summary>
            A pointer to the IShellView interface of the previous view. A Shell view can use this parameter to communicate with a
            previous view with the same implementation. It can also be used to optimize browsing between like views. This parameter may
            be NULL.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SV2CVW2_PARAMS._pfs">
            <summary>A FOLDERSETTINGS structure with information needed to create the view.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SV2CVW2_PARAMS.psbOwner">
            <summary>
            A pointer to the current instance of the IShellBrowser interface of the parent Shell browser. IShellView2::CreateViewWindow2
            should call this interface's AddRef method and store the interface pointer. It can be used for communication with the
            Windows Explorer window.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SV2CVW2_PARAMS._prcView">
            <summary>A RECT structure that defines the view's display area.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SV2CVW2_PARAMS._pvid">
            <summary>
            A pointer to a view ID. The view ID can be one of the Windows-defined VIDs or a custom, view-defined VID. This value takes
            precedence over the view mode designated in the FOLDERSETTINGS structure pointed to by pfs.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SV2CVW2_PARAMS.hwndView">
            <summary>A window handle to the new Shell view.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SV2CVW2_PARAMS.#ctor(Vanara.PInvoke.Shell32.FOLDERVIEWMODE,Vanara.PInvoke.Shell32.FOLDERFLAGS,Vanara.PInvoke.Shell32.IShellBrowser,Vanara.PInvoke.RECT@,Vanara.PInvoke.Shell32.IShellView)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Shell32.SV2CVW2_PARAMS"/> class.</summary>
            <param name="viewMode">Folder view mode.</param>
            <param name="flags">A set of flags that indicate the options for the folder.</param>
            <param name="owner">The current instance of the IShellBrowser interface of the parent Shell browser.</param>
            <param name="displayArea">The view's display area.</param>
            <param name="prevView">
            Optional. The IShellView interface of the previous view. A Shell view can use this parameter to communicate with a previous
            view with the same implementation. It can also be used to optimize browsing between like views.
            </param>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.SV2CVW2_PARAMS.pfs">
            <summary>A FOLDERSETTINGS structure with information needed to create the view.</summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.SV2CVW2_PARAMS.prcView">
            <summary>A RECT structure that defines the view's display area.</summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.SV2CVW2_PARAMS.pvid">
            <summary>
            A view ID. The view ID can be one of the Windows-defined VIDs or a custom, view-defined VID. This value takes precedence
            over the view mode designated in the FOLDERSETTINGS structure pointed to by pfs.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.SV2CVW2_PARAMS.System#IDisposable#Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IStartMenuPinnedList">
            <summary>
            <para>Exposes a method that unpins an application shortcut from the <c>Start</c> menu or the taskbar.</para>
            </summary>
            <remarks>
            <para>When to Implement</para>
            <para>Windows provides an implementation of this interface as CLSID_StartMenuPin. Third parties do not provide their own implementation.</para>
            <para>When to Use</para>
            <para>
            Any shortcut installed by an application might have been subsequently pinned by the user, and there is no way for an application
            to know this. Therefore, we recommend that, during uninstallation, all applications call IStartMenuPinnedList::RemoveFromList on
            each shortcut they installed.
            </para>
            <para>
            Note that <c>IStartMenuPinnedList</c> does not remove the shortcuts themselves, it only unpins them. Applications first call
            IStartMenuPinnedList::RemoveFromList on a shortcut, then delete that shortcut.
            </para>
            <para>Compatibility</para>
            <para>
            In Windows 8, the Start screen replaces the legacy Start menu. CLSID_StartMenuPin and IStartMenuPinnedList are present in Windows
            8 to provide backward compatibility with existing applications, but they do not affect tiles pinned to the Windows 8 Start
            screen. CLSID_StartMenuPin and IStartMenuPinnedList do continue to impact items pinned to the Windows 8 desktop taskbar.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IStartMenuPinnedList.RemoveFromList(Vanara.PInvoke.Shell32.IShellItem)">
            <summary>
            <c>Windows Vista:</c> Removes an item from the Start menu pinned list, which is the list in the upper left position of the
            Start menu.
            <para><c>Windows 7:</c> Removes an item from the Start menu pinned list and unpins the item from the taskbar.</para>
            <para>
            <c>Windows 8:</c> Unpins the item from the taskbar but does not remove the item from the Start screen. Items cannot be
            programmatically removed from Start; they can only be unpinned by the user or removed as part of a program's uninstallation.
            </para>
            </summary>
            <param name="pitem">A pointer to an IShellItem object that represents the item to unpin.</param>
            <returns>
            <list type="bullet">
            <item>
            <term>Returns S_OK if the item was successfully removed from the list of pinned items and/or the taskbar.</term>
            </item>
            <item>
            <term>Returns S_OK if the item was not pinned at all.</term>
            </item>
            <item>
            <term>Returns a standard error code otherwise.</term>
            </item>
            </list>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.StartMenuPin">
            <summary>CoClass for IStartMenuPinnedList (CLSID_StartMenuPin).</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IStorageProviderBanners">
            <summary>Undocumented.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IStorageProviderBanners.SetBanner(System.String,System.String,System.String)">
            <summary>[Undocumented] Sets the banner.</summary>
            <param name="providerIdentity">The provider identity.</param>
            <param name="subscriptionId">The subscription identifier.</param>
            <param name="contentId">The content identifier.</param>
            <returns>Returns <c>S_OK</c> if successful, or an error code otherwise.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IStorageProviderBanners.ClearBanner(System.String,System.String)">
            <summary>[Undocumented] Clears the banner.</summary>
            <param name="providerIdentity">The provider identity.</param>
            <param name="subscriptionId">The subscription identifier.</param>
            <returns>Returns <c>S_OK</c> if successful, or an error code otherwise.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IStorageProviderBanners.ClearAllBanners(System.String)">
            <summary>[Undocumented] Clears all banners.</summary>
            <param name="providerIdentity">The provider identity.</param>
            <returns>Returns <c>S_OK</c> if successful, or an error code otherwise.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IStorageProviderBanners.GetBanner(System.String,System.String,System.String@)">
            <summary>[Undocumented] Gets the banner.</summary>
            <param name="providerIdentity">The provider identity.</param>
            <param name="subscriptionId">The subscription identifier.</param>
            <param name="contentId">The content identifier.</param>
            <returns>Returns <c>S_OK</c> if successful, or an error code otherwise.</returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IStorageProviderCopyHook">
            <summary>
            Exposes a method that determines whether the Shell will be allowed to move, copy, delete, or rename a folder in a cloud
            provider's sync root.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IStorageProviderCopyHook.CopyCallback(Vanara.PInvoke.HWND,Vanara.PInvoke.Shell32.ShellFileOperation,Vanara.PInvoke.Shell32.FILEOP_FLAGS,System.String,Vanara.PInvoke.FileFlagsAndAttributes,System.String,Vanara.PInvoke.FileFlagsAndAttributes,Vanara.PInvoke.User32.MB_RESULT@)">
            <summary>
            Determines whether the Shell will be allowed to move, copy, delete, or rename a folder in a cloud provider's sync root.
            </summary>
            <param name="hwnd">
            A handle to the window that the copy hook handler should use as the parent for any user interface elements the handler may
            need to display. If <c>FOF_SILENT</c> is specified in operation, the method should ignore this parameter.
            </param>
            <param name="operation">
            The operation to perform. This parameter can be one of the values listed under the <see cref="F:Vanara.PInvoke.Shell32.SHFILEOPSTRUCT.wFunc"/> member.
            </param>
            <param name="flags">
            <para>
            The flags that control the operation. This parameter can be one or more of the values listed under the the <see
            cref="F:Vanara.PInvoke.Shell32.SHFILEOPSTRUCT.fFlags"/> member.
            </para>
            <para>For printer copy hooks, this value is one of the following values defined in shellapi.h.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>PO_DELETE</term>
            <term>A printer is being deleted. The srcFile parameter points to the full path to the specified printer.</term>
            </item>
            <item>
            <term>PO_RENAME</term>
            <term>
            A printer is being renamed. The srcFile parameter points to the printer's new name. The destFile parameter points to the old name.
            </term>
            </item>
            <item>
            <term>PO_PORTCHANGE</term>
            <term>Not supported. Do not use.</term>
            </item>
            <item>
            <term>PO_REN_PORT</term>
            <term>Not supported. Do not use.</term>
            </item>
            </list>
            </param>
            <param name="srcFile">A pointer to a string that contains the name of the source folder.</param>
            <param name="srcAttribs">
            <para>[in]</para>
            <para>
            <para>
            The attributes of the source folder. This parameter can be a combination of any of the file attribute flags
            (FILE_ATTRIBUTE_*) defined in the header files. See File Attribute Constants.
            </para>
            </para>
            </param>
            <param name="destFile">
            <para>[in]</para>
            <para>
            <para>A pointer to a string that contains the name of the destination folder.</para>
            </para>
            </param>
            <param name="destAttribs">
            <para>[in]</para>
            <para>
            <para>
            The attributes of the destination folder. This parameter can be a combination of any of the file attribute flags
            (FILE_ATTRIBUTE_*) defined in the header files. See File Attribute Constants.
            </para>
            </para>
            </param>
            <param name="result">
            <para>[out]</para>
            <para>
            <para>The integer value that indicates whether the Shell should perform the operation. One of the following:</para>
            </para>
            </param>
            <returns>Returns <c>S_OK</c> if successful, or an error code otherwise.</returns>
            <remarks>
            <para>
            The Shell calls the cloud provider's copy hook handler for every folder under the registered sync root. To register a copy
            hook handler for cloud folders, set the <c>CopyHook</c> value under the
            <c>HKEY_LOCAL_MACHINE/Software/Microsoft/Windows/CurrentVersion/Explorer/SyncRootManager/{SyncRootId}</c> key to the CLSID
            of the copy hook object.
            </para>
            <para>
            When the <c>CopyCallback</c> method is called, the Shell initializes the IStorageProviderCopyHook interface directly without
            using an IShellExtInit interface first.
            </para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.StorageProviderBanners">
            <summary>CLSID_StorageProviderBanners</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IStreamAsync">
            <summary>Exposes methods to manage input/outpout (I/O) to an asynchronous stream.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IStreamAsync.Read(System.Byte[],System.Int32,System.IntPtr)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IStreamAsync.Write(System.Byte[],System.Int32,System.IntPtr)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IStreamAsync.Seek(System.Int64,System.Int32,System.IntPtr)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IStreamAsync.SetSize(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IStreamAsync.CopyTo(System.Runtime.InteropServices.ComTypes.IStream,System.Int64,System.IntPtr,System.IntPtr)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IStreamAsync.Commit(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IStreamAsync.Revert">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IStreamAsync.LockRegion(System.Int64,System.Int64,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IStreamAsync.UnlockRegion(System.Int64,System.Int64,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IStreamAsync.Stat(System.Runtime.InteropServices.ComTypes.STATSTG@,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IStreamAsync.Clone(System.Runtime.InteropServices.ComTypes.IStream@)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IStreamAsync.ReadAsync(System.IntPtr,System.UInt32,System.UInt32@,System.Threading.NativeOverlapped*)">
            <summary>
            Reads information from a stream asynchronously. For example, the Shell implements this interface on file items when
            transferring them asynchronously.
            </summary>
            <param name="pv">
            <para>Type: <c>void*</c></para>
            <para>
            When this method returns successfully, returns a buffer that is cb bytes long and contains pcbRead bytes of information from
            the read operation.
            </para>
            </param>
            <param name="cb">
            <para>Type: <c>DWORD</c></para>
            <para>The number of bytes to read from the stream.</para>
            </param>
            <param name="pcbRead">
            <para>Type: <c>LPDWORD</c></para>
            <para>
            Pointer to a <c>DWORD</c> value that, when this method returns successfully, states the actual number of bytes read to the
            buffer pointed to by pv. This value can be <c>NULL</c>.
            </para>
            </param>
            <param name="lpOverlapped">
            <para>Type: <c>LPOVERLAPPED</c></para>
            <para>A pointer to an OVERLAPPED structure that contains information used in the asynchronous read operation.</para>
            </param>
            <remarks>
            <para>
            <c>IStreamAsync::ReadAsync</c> should reset the event specified by the <c>hEvent</c> member of the OVERLAPPED structure to a
            nonsignaled state when it begins the input/output (I/O) operation.
            </para>
            <para>This method has been implemented in the Shell as a thin wrapper around the public ReadFile API.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IStreamAsync.WriteAsync(System.IntPtr,System.UInt32,System.UInt32@,System.Threading.NativeOverlapped*)">
            <summary>
            Writes information to a stream asynchronously. For example, the Shell implements this method on file items when transferring
            them asynchronously.
            </summary>
            <param name="lpBuffer">
            <para>Type: <c>const void*</c></para>
            <para>A pointer to a buffer of size cb bytes that contains the information to be written to the stream.</para>
            </param>
            <param name="cb">
            <para>Type: <c>DWORD</c></para>
            <para>The size of the buffer pointed to by lpBuffer, in bytes.</para>
            </param>
            <param name="pcbWritten">
            <para>Type: <c>LPDWORD</c></para>
            <para>
            Pointer to a <c>DWORD</c> value that, when the method returns successfully, states the actual number of bytes written to the
            stream. This value can be <c>NULL</c> if this information is not needed.
            </para>
            </param>
            <param name="lpOverlapped">
            <para>Type: <c>LPOVERLAPPED</c></para>
            <para>A pointer to an OVERLAPPED structure that contains information used in the asynchronous write operation.</para>
            </param>
            <remarks>
            <c>WriteAsync</c> should reset the event specified by the <c>hEvent</c> member of the OVERLAPPED structure to a nonsignaled
            state when it begins the input/output (I/O) operation.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IStreamAsync.OverlappedResult(System.Threading.NativeOverlapped*,System.UInt32@,System.Boolean)">
            <summary>Retrieves the results of an overlapped operation.</summary>
            <param name="lpOverlapped">
            <para>Type: <c>LPOVERLAPPED*</c></para>
            <para>A pointer to the OVERLAPPED structure that was specified when the overlapped operation was started.</para>
            </param>
            <param name="lpNumberOfBytesTransferred">
            <para>Type: <c>LPDWORD</c></para>
            <para>When this method returns, contains the number of bytes that were actually transferred by a read or write operation.</para>
            </param>
            <param name="bWait">
            <para>Type: <c>BOOL</c></para>
            <para>
            If <c>TRUE</c> the method does not return until the operation has been completed. If <c>FALSE</c> and an operation is
            pending, the method returns the HRESULT equivalent to ERROR_IO_INCOMPLETE.
            </para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IStreamAsync.CancelIo">
            <summary>Marks all pending input/output (I/O) operations as canceled.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IStreamUnbufferedInfo">
            <summary>Exposes a method that determines the sector size as an aid to byte alignment.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IStreamUnbufferedInfo.GetSectorSize(System.UInt32@)">
            <summary>
            Retrieves the number of bytes per sector on the disk currently being used. When using unbuffered input/output (I/O), it is
            important to know the size of the sectors on the disk being read in order to ensure proper byte alignment.
            </summary>
            <param name="pcbSectorSize">
            <para>Type: <c>ULONG*</c></para>
            <para>
            When this method returns successfully, contains a pointer to a <c>ULONG</c> value that represents the number of bytes per
            sector for the disk.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.THBN_CLICKED">
            <summary>
            When a button in a thumbnail toolbar is clicked, the window associated with that thumbnail is sent a WM_COMMAND message with the
            HIWORD of its wParam parameter set to THBN_CLICKED and the LOWORD to the button ID.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DESTS_E_NO_MATCHING_ASSOC_HANDLER">
            <summary>DESTS_E_NO_MATCHING_ASSOC_HANDLER.  Win7 internal error code for Jump Lists.</summary>
            <remarks>There is no Assoc Handler for the given item registered by the specified application.</remarks>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DESTS_E_NORECDOCS">
            <summary>DESTS_E_NORECDOCS.  Win7 internal error code for Jump Lists.</summary>
            <remarks>The given item is excluded from the recent docs folder by the NoRecDocs bit on its registration.</remarks>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.DESTS_E_NOTALLCLEARED">
            <summary>DESTS_E_NOTALLCLEARED.  Win7 internal error code for Jump Lists.</summary>
            <remarks>Not all of the items were successfully cleared</remarks>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.WM_TASKBARCREATED">
            <summary>Windows message indicating that the taskbar was created.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.WM_TASKBARBUTTONCREATED">
            <summary>Windows message indicating that the taskbar button was created for the application window.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.STPFLAG">
            <summary>Used by the ITaskbarList4::SetTabProperties method to specify tab properties.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.STPFLAG.STPF_NONE">
            <summary>
            No specific property values are specified. The default behavior is used: the tab window provides a thumbnail and peek image,
            either live or static as appropriate.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.STPFLAG.STPF_USEAPPTHUMBNAILALWAYS">
            <summary>
            Always use the thumbnail provided by the main application frame window rather than a thumbnail provided by the individual tab
            window. Do not combine this value with STPF_USEAPPTHUMBNAILWHENACTIVE; doing so will result in an error.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.STPFLAG.STPF_USEAPPTHUMBNAILWHENACTIVE">
            <summary>
            When the application tab is active and a live representation of its window is available, use the main application's frame
            window thumbnail. At other times, use the tab window thumbnail. Do not combine this value with STPF_USEAPPTHUMBNAILALWAYS;
            doing so will result in an error.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.STPFLAG.STPF_USEAPPPEEKALWAYS">
            <summary>
            Always use the peek image provided by the main application frame window rather than a peek image provided by the individual
            tab window. Do not combine this value with STPF_USEAPPPEEKWHENACTIVE; doing so will result in an error.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.STPFLAG.STPF_USEAPPPEEKWHENACTIVE">
            <summary>
            When the application tab is active and a live representation of its window is available, show the main application frame in
            the peek feature. At other times, use the tab window. Do not combine this value with STPF_USEAPPPEEKALWAYS; doing so will
            result in an error.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.TBPFLAG">
            <summary>
            Flags that control the current state of the progress button. Specify only one of the following flags; all states are mutually
            exclusive of all others.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.TBPFLAG.TBPF_ERROR">
            <summary>
            The progress indicator turns red to show that an error has occurred in one of the windows that is broadcasting progress. This
            is a determinate state. If the progress indicator is in the indeterminate state, it switches to a red determinate display of
            a generic percentage not indicative of actual progress.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.TBPFLAG.TBPF_INDETERMINATE">
            <summary>
            The progress indicator does not grow in size, but cycles repeatedly along the length of the taskbar button. This indicates
            activity without specifying what proportion of the progress is complete. Progress is taking place, but there is no prediction
            as to how long the operation will take.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.TBPFLAG.TBPF_NOPROGRESS">
            <summary>
            Stops displaying progress and returns the button to its normal state. Call this method with this flag to dismiss the progress
            bar when the operation is complete or canceled.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.TBPFLAG.TBPF_NORMAL">
            <summary>
            The progress indicator grows in size from left to right in proportion to the estimated amount of the operation completed.
            This is a determinate progress indicator; a prediction is being made as to the duration of the operation.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.TBPFLAG.TBPF_PAUSED">
            <summary>
            The progress indicator turns yellow to show that progress is currently stopped in one of the windows but can be resumed by
            the user. No error condition exists and nothing is preventing the progress from continuing. This is a determinate state. If
            the progress indicator is in the indeterminate state, it switches to a yellow determinate display of a generic percentage not
            indicative of actual progress.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.THUMBBUTTONFLAGS">
            <summary>Used by THUMBBUTTON to control specific states and behaviors of the button.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.THUMBBUTTONFLAGS.THBF_DISABLED">
            <summary>
            The button is disabled. It is present, but has a visual state that indicates that it will not respond to user action.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.THUMBBUTTONFLAGS.THBF_DISMISSONCLICK">
            <summary>When the button is clicked, the taskbar button's flyout closes immediately.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.THUMBBUTTONFLAGS.THBF_ENABLED">
            <summary>The button is active and available to the user.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.THUMBBUTTONFLAGS.THBF_HIDDEN">
            <summary>The button is not shown to the user.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.THUMBBUTTONFLAGS.THBF_NOBACKGROUND">
            <summary>Do not draw a button border, use only the image.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.THUMBBUTTONFLAGS.THBF_NONINTERACTIVE">
            <summary>
            The button is enabled but not interactive; no pressed button state is drawn. This value is intended for instances where the
            button is used in a notification.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.THUMBBUTTONMASK">
            <summary>Used by the THUMBBUTTON structure to specify which members of that structure contain valid data.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.THUMBBUTTONMASK.THB_BITMAP">
            <summary>The iBitmap member contains valid information.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.THUMBBUTTONMASK.THB_FLAGS">
            <summary>The dwFlags member contains valid information.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.THUMBBUTTONMASK.THB_ICON">
            <summary>The hIcon member contains valid information.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.THUMBBUTTONMASK.THB_TOOLTIP">
            <summary>The szTip member contains valid information.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.ICustomDestinationList">
            <summary>
            Exposes methods that allow an application to provide a custom Jump List, including destinations and tasks, for display in the taskbar.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ICustomDestinationList.SetAppID(System.String)">
            <summary>
            Specifies a unique Application User Model ID (AppUserModelID) for the application whose taskbar button will hold the custom
            Jump List built through the methods of this interface. This method is optional.
            </summary>
            <param name="pszAppID">
            A pointer to the AppUserModelID of the process or application whose taskbar representation receives the Jump List.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ICustomDestinationList.BeginList(System.UInt32@,System.Guid@)">
            <summary>Initiates a building session for a custom Jump List.</summary>
            <param name="pcMaxSlots">
            A pointer that, when this method returns, points to the current user setting for the Number of recent items to display in
            Jump Lists option in the Taskbar and Start Menu Properties window. The default value is 10. This is the maximum number of
            destinations that will be shown, and it is a total of all destinations, regardless of category. More destinations can be
            added, but they will not be shown in the UI.
            <para>A Jump List will always show at least this many slots—destinations and, if there is room, tasks.</para>
            <para>
            This number does not include separators and section headers as long as the total number of separators and headers does not
            exceed four. Separators and section headers beyond the first four might reduce the number of destinations displayed if space
            is constrained. This number does not affect the standard command entries for pinning or unpinning, closing the window, or
            launching a new instance. It also does not affect tasks or pinned items, the number of which that can be displayed is based
            on the space available to the Jump List.
            </para>
            </param>
            <param name="riid">
            A reference to the IID of an interface to be retrieved in ppv, typically IID_IObjectArray, that will represent all items
            currently stored in the list of removed destinations for the application. This information is used to ensure that removed
            items are not part of the new Jump List.
            </param>
            <returns>
            When this method returns, contains the interface pointer requested in riid. This is typically an IObjectArray, which
            represents a collection of IShellItem and IShellLink objects that represent the removed items.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ICustomDestinationList.AppendCategory(System.String,Vanara.PInvoke.Shell32.IObjectArray)">
            <summary>Defines a custom category and the destinations that it contains, for inclusion in a custom Jump List.</summary>
            <param name="pszCategory">
            A pointer to a string that contains the display name of the custom category. This string is shown in the category's header in
            the Jump List. The string can directly hold the display name or it can be an indirect string representation, such as
            "@shell32.dll,-1324", to use a stored string. An indirect string enables the category header to be displayed in the user's
            selected language. <note>Each custom category must have a unique name. Duplicate category names will cause presentation
            issues in the Jump List.</note>
            </param>
            <param name="poa">
            A pointer to an IObjectArray that represents one or more IShellItem objects that represent the destinations in the category.
            Some destinations in the list might also be represented by IShellLink objects, although less often. <note>Any IShellLink used
            here must declare an argument list through SetArguments. Adding an IShellLink object with no arguments to a custom category
            is not supported since a user cannot pin or unpin this type of item from a Jump List, nor can they be added or removed.</note>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ICustomDestinationList.AppendKnownCategory(Vanara.PInvoke.Shell32.KNOWNDESTCATEGORY)">
            <summary>Specifies that the Frequent or Recent category should be included in a custom Jump List.</summary>
            <param name="category">One of the KNOWNDESTCATEGORY values that indicate which known category to add to the list.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ICustomDestinationList.AddUserTasks(Vanara.PInvoke.Shell32.IObjectArray)">
            <summary>Specifies items to include in the Tasks category of a custom Jump List.</summary>
            <param name="poa">
            A pointer to an IObjectArray that represents one or more IShellLink (or, more rarely, IShellItem) objects that represent the
            tasks. <note>Any IShellLink used here must declare an argument list through SetArguments. Adding an IShellLink object with no
            arguments to a custom category is not supported. A user cannot pin or unpin this type of item from a Jump List, nor can they
            be added or removed.</note>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ICustomDestinationList.CommitList">
            <summary>
            Declares that the Jump List initiated by a call to ICustomDestinationList::BeginList is complete and ready for display.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ICustomDestinationList.GetRemovedDestinations(System.Guid@)">
            <summary>
            Retrieves the current list of destinations that have been removed by the user from the existing Jump List that this custom
            Jump List is meant to replace.
            </summary>
            <param name="riid">A reference to the IID of the interface to retrieve through ppv, typically IID_IObjectArray.</param>
            <returns>
            When this method returns, contains the interface pointer requested in riid. This is typically an IObjectArray, which
            represents a collection of IShellItem or IShellLink objects that represent the items in the list of removed destinations.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ICustomDestinationList.DeleteList(System.String)">
            <summary>Deletes a custom Jump List for a specified application.</summary>
            <param name="pszAppID">
            A pointer to the AppUserModelID of the process whose taskbar button representation displays the custom Jump List. In the beta
            release of Windows 7, this AppUserModelID must be explicitly provided because this method is intended to be called from an
            uninstaller, which runs in a separate process. Because it is in a separate process, the system cannot reliably deduce the
            AppUserModelID. This restriction is expected to be removed in later releases.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ICustomDestinationList.AbortList">
            <summary>
            Discontinues a Jump List building session initiated by ICustomDestinationList::BeginList without committing any changes.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.ITaskbarList">
            <summary>Exposes methods that control the taskbar. It allows you to dynamically add, remove, and activate items on the taskbar.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ITaskbarList.HrInit">
            <summary>
            Initializes the taskbar list object. This method must be called before any other ITaskbarList methods can be called.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ITaskbarList.AddTab(Vanara.PInvoke.HWND)">
            <summary>Adds an item to the taskbar.</summary>
            <param name="hwnd">A handle to the window to be added to the taskbar.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ITaskbarList.DeleteTab(Vanara.PInvoke.HWND)">
            <summary>Deletes an item from the taskbar.</summary>
            <param name="hwnd">A handle to the window to be deleted from the taskbar.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ITaskbarList.ActivateTab(Vanara.PInvoke.HWND)">
            <summary>
            Activates an item on the taskbar. The window is not actually activated; the window's item on the taskbar is merely displayed
            as active.
            </summary>
            <param name="hwnd">A handle to the window on the taskbar to be displayed as active.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ITaskbarList.SetActiveAlt(Vanara.PInvoke.HWND)">
            <summary>Marks a taskbar button as active but does not visually activate it.</summary>
            <param name="hwnd">A handle to the window to be marked as active.</param>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.ITaskbarList2">
            <summary>Extends the ITaskbarList interface by exposing a method to mark a window as a full-screen display.</summary>
            <seealso cref="T:Vanara.PInvoke.Shell32.ITaskbarList"/>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ITaskbarList2.HrInit">
            <summary>
            Initializes the taskbar list object. This method must be called before any other ITaskbarList methods can be called.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ITaskbarList2.AddTab(Vanara.PInvoke.HWND)">
            <summary>Adds an item to the taskbar.</summary>
            <param name="hwnd">A handle to the window to be added to the taskbar.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ITaskbarList2.DeleteTab(Vanara.PInvoke.HWND)">
            <summary>Deletes an item from the taskbar.</summary>
            <param name="hwnd">A handle to the window to be deleted from the taskbar.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ITaskbarList2.ActivateTab(Vanara.PInvoke.HWND)">
            <summary>
            Activates an item on the taskbar. The window is not actually activated; the window's item on the taskbar is merely displayed
            as active.
            </summary>
            <param name="hwnd">A handle to the window on the taskbar to be displayed as active.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ITaskbarList2.SetActiveAlt(Vanara.PInvoke.HWND)">
            <summary>Marks a taskbar button as active but does not visually activate it.</summary>
            <param name="hwnd">A handle to the window to be marked as active.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ITaskbarList2.MarkFullscreenWindow(Vanara.PInvoke.HWND,System.Boolean)">
            <summary>Marks a window as full-screen.</summary>
            <param name="hwnd">
            <para>Type: <c>HWND</c></para>
            <para>The handle of the window to be marked.</para>
            </param>
            <param name="fFullscreen">
            <para>Type: <c>BOOL</c></para>
            <para>A Boolean value marking the desired full-screen status of the window.</para>
            </param>
            <remarks>
            Setting the value of fFullscreen to <c>TRUE</c>, the Shell treats this window as a full-screen window, and the taskbar is
            moved to the bottom of the z-order when this window is active. Setting the value of fFullscreen to <c>FALSE</c> removes the
            full-screen marking, but does not cause the Shell to treat the window as though it were definitely not full-screen. With a
            <c>FALSE</c> fFullscreen value, the Shell depends on its automatic detection facility to specify how the window should be
            treated, possibly still flagging the window as full-screen.
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.ITaskbarList3">
            <summary>
            Extends ITaskbarList2 by exposing methods that support the unified launching and switching taskbar button functionality added in
            Windows 7. This functionality includes thumbnail representations and switch targets based on individual tabs in a tabbed
            application, thumbnail toolbars, notification and status overlays, and progress indicators.
            </summary>
            <seealso cref="T:Vanara.PInvoke.Shell32.ITaskbarList2"/>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ITaskbarList3.HrInit">
            <summary>
            Initializes the taskbar list object. This method must be called before any other ITaskbarList methods can be called.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ITaskbarList3.AddTab(Vanara.PInvoke.HWND)">
            <summary>Adds an item to the taskbar.</summary>
            <param name="hwnd">A handle to the window to be added to the taskbar.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ITaskbarList3.DeleteTab(Vanara.PInvoke.HWND)">
            <summary>Deletes an item from the taskbar.</summary>
            <param name="hwnd">A handle to the window to be deleted from the taskbar.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ITaskbarList3.ActivateTab(Vanara.PInvoke.HWND)">
            <summary>
            Activates an item on the taskbar. The window is not actually activated; the window's item on the taskbar is merely displayed
            as active.
            </summary>
            <param name="hwnd">A handle to the window on the taskbar to be displayed as active.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ITaskbarList3.SetActiveAlt(Vanara.PInvoke.HWND)">
            <summary>Marks a taskbar button as active but does not visually activate it.</summary>
            <param name="hwnd">A handle to the window to be marked as active.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ITaskbarList3.MarkFullscreenWindow(Vanara.PInvoke.HWND,System.Boolean)">
            <summary>Marks a window as full-screen.</summary>
            <param name="hwnd">The handle of the window to be marked.</param>
            <param name="fFullscreen">A Boolean value marking the desired full-screen status of the window.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ITaskbarList3.SetProgressValue(Vanara.PInvoke.HWND,System.UInt64,System.UInt64)">
            <summary>
            Displays or updates a progress bar hosted in a taskbar button to show the specific percentage completed of the full operation.
            </summary>
            <param name="hwnd">The handle of the window whose associated taskbar button is being used as a progress indicator.</param>
            <param name="ullCompleted">
            An application-defined value that indicates the proportion of the operation that has been completed at the time the method is called.
            </param>
            <param name="ullTotal">
            An application-defined value that specifies the value ullCompleted will have when the operation is complete.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ITaskbarList3.SetProgressState(Vanara.PInvoke.HWND,Vanara.PInvoke.Shell32.TBPFLAG)">
            <summary>Sets the type and state of the progress indicator displayed on a taskbar button.</summary>
            <param name="hwnd">
            The handle of the window in which the progress of an operation is being shown. This window's associated taskbar button will
            display the progress bar.
            </param>
            <param name="tbpFlags">
            Flags that control the current state of the progress button. Specify only one of the following flags; all states are mutually
            exclusive of all others.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ITaskbarList3.RegisterTab(Vanara.PInvoke.HWND,Vanara.PInvoke.HWND)">
            <summary>
            Informs the taskbar that a new tab or document thumbnail has been provided for display in an application's taskbar group flyout.
            </summary>
            <param name="hwndTab">Handle of the tab or document window. This value is required and cannot be NULL.</param>
            <param name="hwndMDI">
            Handle of the application's main window. This value tells the taskbar which application's preview group to attach the new
            thumbnail to. This value is required and cannot be NULL.
            </param>
            <remarks>
            By itself, registering a tab thumbnail alone will not result in its being displayed. You must also call
            ITaskbarList3::SetTabOrder to instruct the group where to display it.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ITaskbarList3.UnregisterTab(Vanara.PInvoke.HWND)">
            <summary>Removes a thumbnail from an application's preview group when that tab or document is closed in the application.</summary>
            <param name="hwndTab">
            The handle of the tab window whose thumbnail is being removed. This is the same value with which the thumbnail was registered
            as part the group through ITaskbarList3::RegisterTab. This value is required and cannot be NULL.
            </param>
            <remarks>
            It is the responsibility of the calling application to free hwndTab through DestroyWindow. UnregisterTab must be called
            before the handle is freed.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ITaskbarList3.SetTabOrder(Vanara.PInvoke.HWND,Vanara.PInvoke.HWND)">
            <summary>
            Inserts a new thumbnail into a tabbed-document interface (TDI) or multiple-document interface (MDI) application's group
            flyout or moves an existing thumbnail to a new position in the application's group.
            </summary>
            <param name="hwndTab">
            The handle of the tab window whose thumbnail is being placed. This value is required, must already be registered through
            ITaskbarList3::RegisterTab, and cannot be NULL.
            </param>
            <param name="hwndInsertBefore">
            The handle of the tab window whose thumbnail that hwndTab is inserted to the left of. This handle must already be registered
            through ITaskbarList3::RegisterTab. If this value is NULL, the new thumbnail is added to the end of the list.
            </param>
            <remarks>This method must be called for the thumbnail to be shown in the group. Call it after you have called ITaskbarList3::RegisterTab.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ITaskbarList3.SetTabActive(Vanara.PInvoke.HWND,Vanara.PInvoke.HWND,System.UInt32)">
            <summary>Informs the taskbar that a tab or document window has been made the active window.</summary>
            <param name="hwndTab">
            Handle of the active tab window. This handle must already be registered through ITaskbarList3::RegisterTab. This value can be
            NULL if no tab is active.
            </param>
            <param name="hwndMDI">
            Handle of the application's main window. This value tells the taskbar which group the thumbnail is a member of. This value is
            required and cannot be NULL.
            </param>
            <param name="dwReserved">Reserved; set to 0.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ITaskbarList3.ThumbBarAddButtons(Vanara.PInvoke.HWND,System.UInt32,Vanara.PInvoke.Shell32.THUMBBUTTON[])">
            <summary>
            Adds a thumbnail toolbar with a specified set of buttons to the thumbnail image of a window in a taskbar button flyout.
            </summary>
            <param name="hwnd">
            The handle of the window whose thumbnail representation will receive the toolbar. This handle must belong to the calling process.
            </param>
            <param name="cButtons">
            The number of buttons defined in the array pointed to by pButton. The maximum number of buttons allowed is 7.
            </param>
            <param name="pButtons">
            A pointer to an array of THUMBBUTTON structures. Each THUMBBUTTON defines an individual button to be added to the toolbar.
            Buttons cannot be added or deleted later, so this must be the full defined set. Buttons also cannot be reordered, so their
            order in the array, which is the order in which they are displayed left to right, will be their permanent order.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ITaskbarList3.ThumbBarUpdateButtons(Vanara.PInvoke.HWND,System.UInt32,Vanara.PInvoke.Shell32.THUMBBUTTON[])">
            <summary>
            Shows, enables, disables, or hides buttons in a thumbnail toolbar as required by the window's current state. A thumbnail
            toolbar is a toolbar embedded in a thumbnail image of a window in a taskbar button flyout.
            </summary>
            <param name="hwnd">The handle of the window whose thumbnail representation contains the toolbar.</param>
            <param name="cButtons">
            The number of buttons defined in the array pointed to by pButton. The maximum number of buttons allowed is 7. This array
            contains only structures that represent existing buttons that are being updated.
            </param>
            <param name="pButtons">
            A pointer to an array of THUMBBUTTON structures. Each THUMBBUTTON defines an individual button. If the button already exists
            (the iId value is already defined), then that existing button is updated with the information provided in the structure.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ITaskbarList3.ThumbBarSetImageList(Vanara.PInvoke.HWND,Vanara.PInvoke.HIMAGELIST)">
            <summary>
            Specifies an image list that contains button images for a toolbar embedded in a thumbnail image of a window in a taskbar
            button flyout.
            </summary>
            <param name="hwnd">
            The handle of the window whose thumbnail representation contains the toolbar to be updated. This handle must belong to the
            calling process.
            </param>
            <param name="himl">The handle of the image list that contains all button images to be used in the toolbar.</param>
            <remarks>
            Applications must provide these button images:
            <list type="bullet">
            <item>
            <term>The button in its default active state.</term>
            </item>
            <item>
            <term>Images suitable for use with high-dpi (dots per inch) displays.</term>
            </item>
            </list>
            <para>
            Images must be 32-bit and of dimensions GetSystemMetrics(SM_CXICON) x GetSystemMetrics(SM_CYICON). The toolbar itself
            provides visuals for a button's clicked, disabled, and hover states.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ITaskbarList3.SetOverlayIcon(Vanara.PInvoke.HWND,Vanara.PInvoke.HICON,System.String)">
            <summary>Applies an overlay to a taskbar button to indicate application status or a notification to the user.</summary>
            <param name="hwnd">
            The handle of the window whose associated taskbar button receives the overlay. This handle must belong to a calling process
            associated with the button's application and must be a valid HWND or the call is ignored.
            </param>
            <param name="hIcon">
            The handle of an icon to use as the overlay. This should be a small icon, measuring 16x16 pixels at 96 dpi. If an overlay
            icon is already applied to the taskbar button, that existing overlay is replaced.
            <para>
            This value can be NULL.How a NULL value is handled depends on whether the taskbar button represents a single window or a
            group of windows.
            </para>
            <list type="bullet">
            <item>
            <term>If the taskbar button represents a single window, the overlay icon is removed from the display.</term>
            </item>
            <item>
            <term>
            If the taskbar button represents a group of windows and a previous overlay is still available (received earlier than the
            current overlay, but not yet freed by a NULL value), then that previous overlay is displayed in place of the current overlay.
            </term>
            </item>
            </list>
            <para>
            It is the responsibility of the calling application to free hIcon when it is no longer needed.This can generally be done
            after you call SetOverlayIcon because the taskbar makes and uses its own copy of the icon.
            </para>
            </param>
            <param name="pszDescription">
            A pointer to a string that provides an alt text version of the information conveyed by the overlay, for accessibility purposes.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ITaskbarList3.SetThumbnailTooltip(Vanara.PInvoke.HWND,System.String)">
            <summary>
            Specifies or updates the text of the tooltip that is displayed when the mouse pointer rests on an individual preview
            thumbnail in a taskbar button flyout.
            </summary>
            <param name="hwnd">
            The handle to the window whose thumbnail displays the tooltip. This handle must belong to the calling process.
            </param>
            <param name="pszTip">
            The pointer to the text to be displayed in the tooltip. This value can be NULL, in which case the title of the window
            specified by hwnd is used as the tooltip.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ITaskbarList3.SetThumbnailClip(Vanara.PInvoke.HWND,Vanara.PInvoke.PRECT)">
            <summary>Selects a portion of a window's client area to display as that window's thumbnail in the taskbar.</summary>
            <param name="hwnd">The handle to a window represented in the taskbar.</param>
            <param name="prcClip">
            A pointer to a RECT structure that specifies a selection within the window's client area, relative to the upper-left corner
            of that client area. To clear a clip that is already in place and return to the default display of the thumbnail, set this
            parameter to NULL.
            </param>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.ITaskbarList4">
            <summary>
            Extends ITaskbarList3 by providing a method that allows the caller to control two property values for the tab thumbnail and peek feature.
            </summary>
            <seealso cref="T:Vanara.PInvoke.Shell32.ITaskbarList3"/>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ITaskbarList4.HrInit">
            <summary>
            Initializes the taskbar list object. This method must be called before any other ITaskbarList methods can be called.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ITaskbarList4.AddTab(Vanara.PInvoke.HWND)">
            <summary>Adds an item to the taskbar.</summary>
            <param name="hwnd">A handle to the window to be added to the taskbar.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ITaskbarList4.DeleteTab(Vanara.PInvoke.HWND)">
            <summary>Deletes an item from the taskbar.</summary>
            <param name="hwnd">A handle to the window to be deleted from the taskbar.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ITaskbarList4.ActivateTab(Vanara.PInvoke.HWND)">
            <summary>
            Activates an item on the taskbar. The window is not actually activated; the window's item on the taskbar is merely displayed
            as active.
            </summary>
            <param name="hwnd">A handle to the window on the taskbar to be displayed as active.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ITaskbarList4.SetActiveAlt(Vanara.PInvoke.HWND)">
            <summary>Marks a taskbar button as active but does not visually activate it.</summary>
            <param name="hwnd">A handle to the window to be marked as active.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ITaskbarList4.MarkFullscreenWindow(Vanara.PInvoke.HWND,System.Boolean)">
            <summary>Marks a window as full-screen.</summary>
            <param name="hwnd">The handle of the window to be marked.</param>
            <param name="fFullscreen">A Boolean value marking the desired full-screen status of the window.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ITaskbarList4.SetProgressValue(Vanara.PInvoke.HWND,System.UInt64,System.UInt64)">
            <summary>
            Displays or updates a progress bar hosted in a taskbar button to show the specific percentage completed of the full operation.
            </summary>
            <param name="hwnd">The handle of the window whose associated taskbar button is being used as a progress indicator.</param>
            <param name="ullCompleted">
            An application-defined value that indicates the proportion of the operation that has been completed at the time the method is called.
            </param>
            <param name="ullTotal">
            An application-defined value that specifies the value ullCompleted will have when the operation is complete.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ITaskbarList4.SetProgressState(Vanara.PInvoke.HWND,Vanara.PInvoke.Shell32.TBPFLAG)">
            <summary>Sets the type and state of the progress indicator displayed on a taskbar button.</summary>
            <param name="hwnd">
            The handle of the window in which the progress of an operation is being shown. This window's associated taskbar button will
            display the progress bar.
            </param>
            <param name="tbpFlags">
            Flags that control the current state of the progress button. Specify only one of the following flags; all states are mutually
            exclusive of all others.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ITaskbarList4.RegisterTab(Vanara.PInvoke.HWND,Vanara.PInvoke.HWND)">
            <summary>
            Informs the taskbar that a new tab or document thumbnail has been provided for display in an application's taskbar group flyout.
            </summary>
            <param name="hwndTab">Handle of the tab or document window. This value is required and cannot be NULL.</param>
            <param name="hwndMDI">
            Handle of the application's main window. This value tells the taskbar which application's preview group to attach the new
            thumbnail to. This value is required and cannot be NULL.
            </param>
            <remarks>
            By itself, registering a tab thumbnail alone will not result in its being displayed. You must also call
            ITaskbarList3::SetTabOrder to instruct the group where to display it.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ITaskbarList4.UnregisterTab(Vanara.PInvoke.HWND)">
            <summary>Removes a thumbnail from an application's preview group when that tab or document is closed in the application.</summary>
            <param name="hwndTab">
            The handle of the tab window whose thumbnail is being removed. This is the same value with which the thumbnail was registered
            as part the group through ITaskbarList3::RegisterTab. This value is required and cannot be NULL.
            </param>
            <remarks>
            It is the responsibility of the calling application to free hwndTab through DestroyWindow. UnregisterTab must be called
            before the handle is freed.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ITaskbarList4.SetTabOrder(Vanara.PInvoke.HWND,Vanara.PInvoke.HWND)">
            <summary>
            Inserts a new thumbnail into a tabbed-document interface (TDI) or multiple-document interface (MDI) application's group
            flyout or moves an existing thumbnail to a new position in the application's group.
            </summary>
            <param name="hwndTab">
            The handle of the tab window whose thumbnail is being placed. This value is required, must already be registered through
            ITaskbarList3::RegisterTab, and cannot be NULL.
            </param>
            <param name="hwndInsertBefore">
            The handle of the tab window whose thumbnail that hwndTab is inserted to the left of. This handle must already be registered
            through ITaskbarList3::RegisterTab. If this value is NULL, the new thumbnail is added to the end of the list.
            </param>
            <remarks>This method must be called for the thumbnail to be shown in the group. Call it after you have called ITaskbarList3::RegisterTab.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ITaskbarList4.SetTabActive(Vanara.PInvoke.HWND,Vanara.PInvoke.HWND,System.UInt32)">
            <summary>Informs the taskbar that a tab or document window has been made the active window.</summary>
            <param name="hwndTab">
            Handle of the active tab window. This handle must already be registered through ITaskbarList3::RegisterTab. This value can be
            NULL if no tab is active.
            </param>
            <param name="hwndMDI">
            Handle of the application's main window. This value tells the taskbar which group the thumbnail is a member of. This value is
            required and cannot be NULL.
            </param>
            <param name="dwReserved">Reserved; set to 0.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ITaskbarList4.ThumbBarAddButtons(Vanara.PInvoke.HWND,System.UInt32,Vanara.PInvoke.Shell32.THUMBBUTTON[])">
            <summary>
            Adds a thumbnail toolbar with a specified set of buttons to the thumbnail image of a window in a taskbar button flyout.
            </summary>
            <param name="hwnd">
            The handle of the window whose thumbnail representation will receive the toolbar. This handle must belong to the calling process.
            </param>
            <param name="cButtons">
            The number of buttons defined in the array pointed to by pButton. The maximum number of buttons allowed is 7.
            </param>
            <param name="pButtons">
            A pointer to an array of THUMBBUTTON structures. Each THUMBBUTTON defines an individual button to be added to the toolbar.
            Buttons cannot be added or deleted later, so this must be the full defined set. Buttons also cannot be reordered, so their
            order in the array, which is the order in which they are displayed left to right, will be their permanent order.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ITaskbarList4.ThumbBarUpdateButtons(Vanara.PInvoke.HWND,System.UInt32,Vanara.PInvoke.Shell32.THUMBBUTTON[])">
            <summary>
            Shows, enables, disables, or hides buttons in a thumbnail toolbar as required by the window's current state. A thumbnail
            toolbar is a toolbar embedded in a thumbnail image of a window in a taskbar button flyout.
            </summary>
            <param name="hwnd">The handle of the window whose thumbnail representation contains the toolbar.</param>
            <param name="cButtons">
            The number of buttons defined in the array pointed to by pButton. The maximum number of buttons allowed is 7. This array
            contains only structures that represent existing buttons that are being updated.
            </param>
            <param name="pButtons">
            A pointer to an array of THUMBBUTTON structures. Each THUMBBUTTON defines an individual button. If the button already exists
            (the iId value is already defined), then that existing button is updated with the information provided in the structure.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ITaskbarList4.ThumbBarSetImageList(Vanara.PInvoke.HWND,Vanara.PInvoke.HIMAGELIST)">
            <summary>
            Specifies an image list that contains button images for a toolbar embedded in a thumbnail image of a window in a taskbar
            button flyout.
            </summary>
            <param name="hwnd">
            The handle of the window whose thumbnail representation contains the toolbar to be updated. This handle must belong to the
            calling process.
            </param>
            <param name="himl">The handle of the image list that contains all button images to be used in the toolbar.</param>
            <remarks>
            Applications must provide these button images:
            <list type="bullet">
            <item>
            <term>The button in its default active state.</term>
            </item>
            <item>
            <term>Images suitable for use with high-dpi (dots per inch) displays.</term>
            </item>
            </list>
            <para>
            Images must be 32-bit and of dimensions GetSystemMetrics(SM_CXICON) x GetSystemMetrics(SM_CYICON). The toolbar itself
            provides visuals for a button's clicked, disabled, and hover states.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ITaskbarList4.SetOverlayIcon(Vanara.PInvoke.HWND,Vanara.PInvoke.HICON,System.String)">
            <summary>Applies an overlay to a taskbar button to indicate application status or a notification to the user.</summary>
            <param name="hwnd">
            The handle of the window whose associated taskbar button receives the overlay. This handle must belong to a calling process
            associated with the button's application and must be a valid HWND or the call is ignored.
            </param>
            <param name="hIcon">
            The handle of an icon to use as the overlay. This should be a small icon, measuring 16x16 pixels at 96 dpi. If an overlay
            icon is already applied to the taskbar button, that existing overlay is replaced.
            <para>
            This value can be NULL.How a NULL value is handled depends on whether the taskbar button represents a single window or a
            group of windows.
            </para>
            <list type="bullet">
            <item>
            <term>If the taskbar button represents a single window, the overlay icon is removed from the display.</term>
            </item>
            <item>
            <term>
            If the taskbar button represents a group of windows and a previous overlay is still available (received earlier than the
            current overlay, but not yet freed by a NULL value), then that previous overlay is displayed in place of the current overlay.
            </term>
            </item>
            </list>
            <para>
            It is the responsibility of the calling application to free hIcon when it is no longer needed.This can generally be done
            after you call SetOverlayIcon because the taskbar makes and uses its own copy of the icon.
            </para>
            </param>
            <param name="pszDescription">
            A pointer to a string that provides an alt text version of the information conveyed by the overlay, for accessibility purposes.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ITaskbarList4.SetThumbnailTooltip(Vanara.PInvoke.HWND,System.String)">
            <summary>
            Specifies or updates the text of the tooltip that is displayed when the mouse pointer rests on an individual preview
            thumbnail in a taskbar button flyout.
            </summary>
            <param name="hwnd">
            The handle to the window whose thumbnail displays the tooltip. This handle must belong to the calling process.
            </param>
            <param name="pszTip">
            The pointer to the text to be displayed in the tooltip. This value can be NULL, in which case the title of the window
            specified by hwnd is used as the tooltip.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ITaskbarList4.SetThumbnailClip(Vanara.PInvoke.HWND,Vanara.PInvoke.PRECT)">
            <summary>Selects a portion of a window's client area to display as that window's thumbnail in the taskbar.</summary>
            <param name="hwnd">The handle to a window represented in the taskbar.</param>
            <param name="prcClip">
            A pointer to a RECT structure that specifies a selection within the window's client area, relative to the upper-left corner
            of that client area. To clear a clip that is already in place and return to the default display of the thumbnail, set this
            parameter to NULL.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ITaskbarList4.SetTabProperties(Vanara.PInvoke.HWND,Vanara.PInvoke.Shell32.STPFLAG)">
            <summary>
            Allows a tab to specify whether the main application frame window or the tab window should be used as a thumbnail or in the
            peek feature under certain circumstances.
            </summary>
            <param name="hwndTab">
            The handle of the tab window that is to have properties set. This handle must already be registered through RegisterTab.
            </param>
            <param name="stpFlags">
            One or more members of the STPFLAG enumeration that specify the displayed thumbnail and peek image source of the tab thumbnail.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.BeginList``1(Vanara.PInvoke.Shell32.ICustomDestinationList,System.UInt32@)">
            <summary>Initiates a building session for a custom Jump List.</summary>
            <typeparam name="T">
            A type of an interface to be retrieved, typically IID_IObjectArray, that will represent all items currently stored in the list of
            removed destinations for the application. This information is used to ensure that removed items are not part of the new Jump List.
            </typeparam>
            <param name="cdl">The <see cref="T:Vanara.PInvoke.Shell32.ICustomDestinationList"/> instance.</param>
            <param name="pcMaxSlots">
            A pointer that, when this method returns, points to the current user setting for the Number of recent items to display in Jump
            Lists option in the Taskbar and Start Menu Properties window. The default value is 10. This is the maximum number of destinations
            that will be shown, and it is a total of all destinations, regardless of category. More destinations can be added, but they will
            not be shown in the UI.
            <para>A Jump List will always show at least this many slots—destinations and, if there is room, tasks.</para>
            <para>
            This number does not include separators and section headers as long as the total number of separators and headers does not exceed
            four. Separators and section headers beyond the first four might reduce the number of destinations displayed if space is
            constrained. This number does not affect the standard command entries for pinning or unpinning, closing the window, or launching
            a new instance. It also does not affect tasks or pinned items, the number of which that can be displayed is based on the space
            available to the Jump List.
            </para>
            </param>
            <returns>
            When this method returns, contains the interface pointer requested. This is typically an IObjectArray, which represents a
            collection of IShellItem and IShellLink objects that represent the removed items.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.GetRemovedDestinations``1(Vanara.PInvoke.Shell32.ICustomDestinationList)">
            <summary>
            Retrieves the current list of destinations that have been removed by the user from the existing Jump List that this custom Jump
            List is meant to replace.
            </summary>
            <typeparam name="T">The type of the interface to retrieve, typically IID_IObjectArray.</typeparam>
            <param name="cdl">The <see cref="T:Vanara.PInvoke.Shell32.ICustomDestinationList"/> instance.</param>
            <returns>
            When this method returns, contains the interface pointer requested. This is typically an IObjectArray, which represents a
            collection of IShellItem or IShellLink objects that represent the items in the list of removed destinations.
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.THUMBBUTTON">
            <summary>
            Used by methods of the ITaskbarList3 interface to define buttons used in a toolbar embedded in a window's thumbnail representation.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.THUMBBUTTON.THBN_CLICKED">
            <summary>The THBN clicked</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.THUMBBUTTON.dwMask">
            <summary>
            A combination of THUMBBUTTONMASK values that specify which members of this structure contain valid data; other members are
            ignored, with the exception of iId, which is always required.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.THUMBBUTTON.iId">
            <summary>The application-defined identifier of the button, unique within the toolbar.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.THUMBBUTTON.iBitmap">
            <summary>The zero-based index of the button image within the image list set through ITaskbarList3::ThumbBarSetImageList.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.THUMBBUTTON.hIcon">
            <summary>The handle of an icon to use as the button image.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.THUMBBUTTON.szTip">
            <summary>
            A wide character array that contains the text of the button's tooltip, displayed when the mouse pointer hovers over the button.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.THUMBBUTTON.dwFlags">
            <summary>A combination of THUMBBUTTONFLAGS values that control specific states and behaviors of the button.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.THUMBBUTTON.Default">
            <summary>The default</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.CDestinationList">
            <summary>Class interface for ICustomDestinationList.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.CTaskbarList">
            <summary>Class interface for ITaskbarList and derivatives.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IThumbnailHandlerFactory">
            <summary>
            Exposes a method for retrieving the thumbnail handler of an item. Implement this interface if you want to specify what extractor
            is used for a child IDList.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IThumbnailHandlerFactory.GetThumbnailHandler(Vanara.PInvoke.Shell32.PIDL,System.Runtime.InteropServices.ComTypes.IBindCtx,System.Guid@,System.Object@)">
            <summary>Gets the requested thumbnail handler for the thumbnail of a given item.</summary>
            <param name="pidlChild">
            <para>Type: <c>PCUITEMID_CHILD</c></para>
            <para>The item within the namespace for which the thumbnail handler is being retrieved.</para>
            </param>
            <param name="pbc">
            <para>Type: <c>IBindCtx*</c></para>
            <para>A pointer to an IBindCtx to be used during the moniker binding operation of this process.</para>
            </param>
            <param name="riid">
            <para>Type: <c>REFIID</c></para>
            <para>A reference to the IID of the interface requested. This is usually IThumbnailProvider or IExtractImage.</para>
            </param>
            <param name="ppv">
            <para>Type: <c>void**</c></para>
            <para>
            When this method returns, contains the address of a pointer to the requested thumbnail handler. If this method fails, this
            value is <c>NULL</c>.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>Windows Vista calls the <c>IThumbnailHandlerFactory::GetThumbnailHandler</c> method before falling back on GetUIObjectOf.</remarks>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.TRANSFER_ADVISE_STATE">
            <summary>The transfer state. One of the following values.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.TRANSFER_ADVISE_STATE.TS_NONE">
            <summary>No transfer is in progress.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.TRANSFER_ADVISE_STATE.TS_PERFORMING">
            <summary>The transfer is being performed.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.TRANSFER_ADVISE_STATE.TS_PREPARING">
            <summary>The transfer is preparing to begin. For example, this flag would be set when space requirements are being calculated.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.TRANSFER_ADVISE_STATE.TS_INDETERMINATE">
            <summary>Length of the transfer is unknown.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.ITransferAdviseSink">
            <summary>Exposes methods supporting status collection and failure information.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ITransferAdviseSink.UpdateProgress(System.UInt64,System.UInt64,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Updates the transfer progress status in the UI.</summary>
            <param name="ullSizeCurrent">
            <para>Type: <c>ULONGLONG</c></para>
            <para>The number of bytes processed in the current operation.</para>
            </param>
            <param name="ullSizeTotal">
            <para>Type: <c>ULONGLONG</c></para>
            <para>The total number of bytes in the current operation.</para>
            </param>
            <param name="nFilesCurrent">
            <para>Type: <c>int</c></para>
            <para>The number of files processed in the current operation.</para>
            </param>
            <param name="nFilesTotal">
            <para>Type: <c>int</c></para>
            <para>
            The total number of files in the operation. Set to 0 to indicate that the value has not changed since the last call to this method.
            </para>
            </param>
            <param name="nFoldersCurrent">
            <para>Type: <c>int</c></para>
            <para>The number of folders processed in the current operation.</para>
            </param>
            <param name="nFoldersTotal">
            <para>Type: <c>int</c></para>
            <para>
            The total number of folders in the operation. Set to 0 to indicate that the value has not changed since the last call to
            this method.
            </para>
            </param>
            <remarks>
            <para>
            Set ullSizeTotal, nFilesTotal, and nFoldersTotal all to 0 to indicate that the totals have not changed since the last call
            to this method.
            </para>
            <para>Set all six parameters to 0 to indicate that progress has not changed since the last call to this method.</para>
            <para>Note to Implementers</para>
            <para>
            Implementers of this function should return an erorr code when the operation needs to terminate before it is complete, such
            as when the user clicks the <c>Cancel</c> button.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ITransferAdviseSink.UpdateTransferState(Vanara.PInvoke.Shell32.TRANSFER_ADVISE_STATE)">
            <summary>Updates the transfer state.</summary>
            <param name="ts">
            <para>Type: <c>TRANSFER_ADVISE_STATE</c></para>
            <para>The transfer state. One of the following values.</para>
            <para>TS_NONE (0x00000000)</para>
            <para>0x00000000. No transfer is in progress.</para>
            <para>TS_PERFORMING (0x00000001)</para>
            <para>0x00000001. The transfer is being performed.</para>
            <para>TS_PREPARING (0x00000002)</para>
            <para>
            0x00000002. The transfer is preparing to begin. For example, this flag would be set when space requirements are being calculated.
            </para>
            <para>TS_INDETERMINATE (0x00000004)</para>
            <para>0x00000004. Length of the transfer is unknown.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ITransferAdviseSink.ConfirmOverwrite(Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.Shell32.IShellItem,System.String)">
            <summary>Displays a message to the user confirming that overwriting existing items is acceptable.</summary>
            <param name="psiSource">
            <para>Type: <c>IShellItem*</c></para>
            <para>A pointer to the source IShellItem .</para>
            </param>
            <param name="psiDestParent">
            <para>Type: <c>IShellItem*</c></para>
            <para>A pointer to the destination parent folder IShellItem.</para>
            </param>
            <param name="pszName">
            <para>Type: <c>LPCWSTR</c></para>
            <para>
            A pointer to a wide-string containing the desired name of the item at the destination. If <c>NULL</c>, the name is the same
            as the Shell item pointed to by psiSource.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>
            The return values listed below are emitted specifically by this method to inform the calling process of how the operation
            ended. If other results or errors are emitted during the operation of this method, they should be returned to the calling process.
            </para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>COPYENGINE_S_USER_IGNORED</term>
            <term>The user clicked Ignore. Allows the calling process to continue processing other files as appropriate.</term>
            </item>
            <item>
            <term>COPYENGINE_E_USER_CANCELLED</term>
            <term>The user clicked Cancel. Stops processing of the current document and ends the current process.</term>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ITransferAdviseSink.ConfirmEncryptionLoss(Vanara.PInvoke.Shell32.IShellItem)">
            <summary>Displays a message to the user confirming that loss of encryption is acceptable for this operation.</summary>
            <param name="psiSource">
            <para>Type: <c>IShellItem*</c></para>
            <para>A pointer to an IShellItem of the file in which encryption information will be lost.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>Returns one of the following specific Shell codes, or a system error code.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>COPYENGINE_S_YES</term>
            <term>User responded "Yes" to the dialog. Copy continues without encryption.</term>
            </item>
            <item>
            <term>COPYENGINE_S_USER_IGNORED</term>
            <term>User responded "No" to the dialog.</term>
            </item>
            <item>
            <term>COPYENGINE_S_PENDING</term>
            <term>Error has been queued and will display later. Operation on this file will be skipped.</term>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ITransferAdviseSink.FileFailure(Vanara.PInvoke.Shell32.IShellItem,System.String,Vanara.PInvoke.HRESULT,System.Text.StringBuilder,System.UInt32)">
            <summary>Called when there is a failure and user interaction is needed.</summary>
            <param name="psi">
            <para>Type: <c>IShellItem*</c></para>
            <para>The IShellItem on which the operation failed.</para>
            </param>
            <param name="pszItem">
            <para>Type: <c>LPCWSTR</c></para>
            <para>
            Optional. A pointer to a null-terminated buffer that contains the name of the file. If this value is <c>NULL</c>, the name
            given by the psi parameter is used.
            </para>
            </param>
            <param name="hrError">
            <para>Type: <c>HRESULT</c></para>
            <para>The error code generated by the failure. This error must be handled by the copy engine.</para>
            </param>
            <param name="pszRename">
            <para>Type: <c>LPWSTR</c></para>
            <para>
            Optional. When this method returns, contains a pointer to a null-terminated buffer that contains a new name for the file.
            The name cannot exceed length cchRename. If this parameter is <c>NULL</c>, no option to rename will be available.
            </para>
            </param>
            <param name="cchRename">
            <para>Type: <c>ULONG</c></para>
            <para>The size of the pszRenamebuffer, in characters.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>
            Any other <c>HRESULT</c> should be returned to the calling process. If the failure is not handled, the return value should
            be hrError.
            </para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>COPYENGINE_S_USER_RETRY</term>
            <term>The user clicked Retry. The handler should retry the file operation.</term>
            </item>
            <item>
            <term>COPYENGINE_E_USERCANCELLED</term>
            <term>
            The user clicked Cancel. The entire copy job is being terminated. The handler should return this code back to the copy engine.
            </term>
            </item>
            <item>
            <term>COPYENGINE_S_USER_IGNORED</term>
            <term>The user clicked Ignore. The handler should skip creating the item and return this code back to the copy engine.</term>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ITransferAdviseSink.SubStreamFailure(Vanara.PInvoke.Shell32.IShellItem,System.String,Vanara.PInvoke.HRESULT)">
            <summary>Called when there is a failure that involves secondary streams and user interaction is needed.</summary>
            <param name="psi">
            <para>Type: <c>IShellItem*</c></para>
            <para>A pointer to the IShellItem that caused the failure.</para>
            </param>
            <param name="pszStreamName">
            <para>Type: <c>LPCWSTR</c></para>
            <para>The name of the data that will be lost in the operation.</para>
            </param>
            <param name="hrError">
            <para>Type: <c>HRESULT</c></para>
            <para>The error code that was generated. It must be handled by the copy engine.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>Any other <c>HRESULT</c> should be passed up. If the failure is not handled, the return value should be hrError.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>COPYENGINE_S_USERRETRY</term>
            <term>The handler should retry the file operation.</term>
            </item>
            <item>
            <term>COPYENGINE_S_USERRETRYWITHNEWNAME</term>
            <term>The handler should retry the file operation using the name returned in the pszRename buffer.</term>
            </item>
            <item>
            <term>COPYENGINE_S_OVERWRITE</term>
            <term>The user has indicated that the handler should overwrite the existing file.</term>
            </item>
            <item>
            <term>COPYENGINE_S_RETRYWITHOUTSECURITY</term>
            <term>The user has indicated that the handler should try the operation again without the security descriptor.</term>
            </item>
            <item>
            <term>COPYENGINE_E_USERCANCELLED</term>
            <term>
            The user clicked Cancel. The entire copy job is being terminated. The handler should return this code back to the copy engine.
            </term>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ITransferAdviseSink.PropertyFailure(Vanara.PInvoke.Shell32.IShellItem,System.IntPtr,Vanara.PInvoke.HRESULT)">
            <summary>Called when there is a failure that involves file properties and user interaction is needed.</summary>
            <param name="psi">
            <para>Type: <c>IShellItem*</c></para>
            <para>A pointer to the IShellItem that caused the failure.</para>
            </param>
            <param name="pkey">
            <para>Type: <c>const PROPERTYKEY*</c></para>
            <para>
            A value that corresponds to the property that will be lost. A <c>NULL</c> value indicates that all properties were lost.
            </para>
            </param>
            <param name="hrError">
            <para>Type: <c>HRESULT</c></para>
            <para>The error code generated by the failure. It must be handled by the copy engine.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>Any other <c>HRESULT</c> should be passed up. If the failure is not handled, the return value should be hrError.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>COPYENGINE_S_USERRETRY</term>
            <term>The handler should retry the file operation.</term>
            </item>
            <item>
            <term>COPYENGINE_S_USERRETRYWITHNEWNAME</term>
            <term>The handler should retry the file operation using the name returned in the pszRename buffer.</term>
            </item>
            <item>
            <term>COPYENGINE_S_OVERWRITE</term>
            <term>The user has indicated that the handler should overwrite the existing file.</term>
            </item>
            <item>
            <term>COPYENGINE_S_RETRYWITHOUTSECURITY</term>
            <term>The user has indicated that the handler should try the operation again without the security descriptor.</term>
            </item>
            <item>
            <term>COPYENGINE_E_USERCANCELLED</term>
            <term>
            The user clicked Cancel. The entire copy job is being terminated. The handler should return this code back to the copy engine.
            </term>
            </item>
            </list>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.ITransferDestination">
            <summary>
            Exposes methods that create a destination Shell item for a copy or move operation. This interface is provided to allow more
            control over file operations by providing an ITransferDestination::Advise method.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ITransferDestination.Advise(Vanara.PInvoke.Shell32.ITransferAdviseSink,System.UInt32@)">
            <summary>Sets up an advisory connection for notifications on the status of file operations.</summary>
            <param name="psink">
            <para>Type: <c>ITransferAdviseSink*</c></para>
            <para>
            A pointer to an ITransferAdviseSink notification interface to update the calling application using methods on this interface.
            </para>
            </param>
            <param name="pdwCookie">
            <para>Type: <c>DWORD*</c></para>
            <para>
            A pointer to a returned token that uniquely identifies this connection. The calling application uses this token later to
            delete the connection by passing it to the ITransferDestination::Unadvise method. If the connection is not successfully
            established, this value is zero.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>Any HRESULTs other than listed indicate a failure.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>S_OK</term>
            <term>The Interface successfully associated.</term>
            </item>
            <item>
            <term>E_UNEXPECTED</term>
            <term>The handler can only handle one sink interface.</term>
            </item>
            </list>
            </returns>
            <remarks>
            Call <c>ITransferDestination::Advise</c> before calling any other ITransferDestination methods so the handler can callback
            for any errors that might occur. If not set, the handler should consider it an indication that no feedback is available and
            do the "default" operation.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ITransferDestination.Unadvise(System.UInt32)">
            <summary>Terminates an advisory connection.</summary>
            <param name="dwCookie">
            <para>Type: <c>DWORD</c></para>
            <para>A connection token previously returned from ITransferDestination::Advise. Identifies the connection to be terminated.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>Any HRESULTs other than those listed here indicate a failure.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>S_OK</term>
            <term>The connection was successfully terminated.</term>
            </item>
            <item>
            <term>CONNECT_E_NOCONNECTION</term>
            <term>The value in dwCookie does not represent a valid connection.</term>
            </item>
            </list>
            </returns>
            <remarks>Terminates an advisory connection previously established through the ITransferDestination::Advise method.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ITransferDestination.CreateItem(System.String,Vanara.PInvoke.FileFlagsAndAttributes,System.UInt64,Vanara.PInvoke.Shell32.TRANSFER_SOURCE_FLAGS,System.Guid@,System.Object@,System.Guid@,System.Object@)">
            <summary>Creates the specified file.</summary>
            <param name="pszName">
            <para>Type: <c>LPCWSTR</c></para>
            <para>A pointer to a null-terminated buffer that contains the name of the file relative to the current directory.</para>
            </param>
            <param name="dwAttributes">
            <para>Type: <c>DWORD</c></para>
            <para>
            One or more of the FILE_ATTRIBUTE flags defined in the BY_HANDLE_FILE_INFORMATION structure. The most significant value is
            FILE_ATTRIBUTE_DIRECTORY, which indicates that a folder should be created.
            </para>
            </param>
            <param name="ullSize">
            <para>Type: <c>ULONGLONG</c></para>
            <para>The size, in bytes, of the file to create. This value can be 0 if the size is unknown.</para>
            </param>
            <param name="flags">
            <para>Type: <c>TRANSFER_SOURCE_FLAGS</c></para>
            <para>Flags that control the file operation. One or more of the TRANSFER_SOURCE_FLAGS flags.</para>
            </param>
            <param name="riidItem">
            <para>Type: <c>REFIID</c></para>
            <para>
            A reference to the IID of the interface to retrieve through ppvItem, typically IID_IShellItem or another interface that
            derives from it.
            </para>
            </param>
            <param name="ppvItem">
            <para>Type: <c>void**</c></para>
            <para>
            When this method returns, contains the interface pointer requested in riidItem. This is typically IShellItem or a derived interface.
            </para>
            </param>
            <param name="riidResources">
            <para>Type: <c>REFIID</c></para>
            <para>
            A reference to the IID of the interface to retrieve through ppvResources, typically IID_IShellItemResources or another
            interface that derives from it.
            </para>
            </param>
            <param name="ppvResources">
            <para>Type: <c>void**</c></para>
            <para>
            When this method returns, contains the interface pointer requested in riidResources. This is typically IShellItemResources
            or a derived interface.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>Returns a success code if successful, or an error value otherwise. Success codes include:</para>
            <list type="bullet">
            <item>
            <term><c>S_OK</c>: The move succeeded and ppvItem and ppvResources both point to valid objects.</term>
            </item>
            <item>
            <term>
            <c>COPYENGINE_S_USER_IGNORED</c>: The destination item already exists and has not been overwritten. The values pointed to by
            ppvItem and ppvResources are <c>NULL</c>. If the caller is implementing a move as a copy and delete operation, the caller
            should complete the move by deleting the source item.
            </term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            This method may be used to create a Shell item object representing the destination folder for a copy or move operation. The
            ITransferSource interface provides methods to actually move objects of IShellItem to the destination.
            </para>
            <para>
            Call ITransferDestination::Advise before calling any other ITransferDestination methods so the handler can callback on any
            errors that might occur. If not set, the handler should consider it an indication that no feedback is available and to do
            the "default" operation.
            </para>
            <para>
            It is recommended that you use the <c>IID_PPV_ARGS</c> macro, defined in Objbase.h, to package the riidResources and
            ppvResources parameters. This macro provides the correct IID based on the interface pointed to by the value in ppvResources,
            which eliminates the possibility of a coding error.
            </para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.ITransferSource">
            <summary>
            Exposes methods to manipulate IShellItem, including copy, move, recycle, and others. This interface is offered to provide more
            control over file operations by providing an ITransferSource::Advise method.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ITransferSource.Advise(Vanara.PInvoke.Shell32.ITransferAdviseSink,System.UInt32@)">
            <summary>Sets up an advisory connection for notifications on the status of file operations.</summary>
            <param name="psink">
            <para>Type: <c>ITransferAdviseSink*</c></para>
            <para>A pointer to notification interface ITransferAdviseSink to update the calling application using methods on this interface.</para>
            </param>
            <param name="pdwCookie">
            <para>Type: <c>DWORD*</c></para>
            <para>
            A pointer to a returned token that uniquely identifies this connection. The calling application uses this token later to
            delete the connection by passing it to the ITransferSource::Unadvise method. If the connection was not successfully
            established, this value is zero.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>Any HRESULTs other than listed indicate a failure.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>S_OK</term>
            <term>The Interface successfully associated.</term>
            </item>
            <item>
            <term>E_UNEXPECTED</term>
            <term>The handler can only handle one sink interface.</term>
            </item>
            </list>
            </returns>
            <remarks>
            Call <c>ITransferSource::Advise</c> before calling any other methods in this interface to enable an advisory session. If not
            set, the handler should consider it an indication that no feedback is available and to do the "default" operation without
            consulting the calling application.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ITransferSource.Unadvise(System.UInt32)">
            <summary>Terminates an advisory connection.</summary>
            <param name="dwCookie">
            <para>Type: <c>DWORD</c></para>
            <para>The connection token previously returned from method ITransferSource::Advise.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>Any HRESULTs other than listed indicate a failure.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>S_OK</term>
            <term>The connection was successfully terminated.</term>
            </item>
            <item>
            <term>CONNECT_E_NOCONNECTION</term>
            <term>The value in dwCookie does not represent a valid connection.</term>
            </item>
            </list>
            </returns>
            <remarks>
            Terminates an advisory connection previously established through method ITransferSource::Advise. The dwCookie parameter
            identifies the connection to terminate.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ITransferSource.SetProperties(Vanara.PInvoke.PropSys.IPropertyChangeArray)">
            <summary>Sets properties that should be applied to an item.</summary>
            <param name="pproparray">
            <para>Type: <c>IPropertyChangeArray*</c></para>
            <para>An array of properties and their changed values.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>Any return value other than S_OK indicates a failure.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ITransferSource.OpenItem(Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.Shell32.TRANSFER_SOURCE_FLAGS,System.Guid@,System.Object@)">
            <summary>Opens the item for copying. Returns an object that can be enumerated for resources (IShellItemResources).</summary>
            <param name="psi">
            <para>Type: <c>IShellItem*</c></para>
            <para>A pointer to the IShellItem to be opened.</para>
            </param>
            <param name="flags">
            <para>Type: <c>TRANSFER_SOURCE_FLAGS</c></para>
            <para>The flags that control the file operation. One or more of the TRANSFER_SOURCE_FLAGS constants.</para>
            </param>
            <param name="riid">
            <para>Type: <c>REFIID</c></para>
            <para>
            A reference to the IID (the interface ID or GUID) of the interface to return in ppv. This should be an IShellItemResources
            or an interface derived from <c>IShellItemResources</c>.
            </para>
            </param>
            <param name="ppv">
            <para>Type: <c>void**</c></para>
            <para>When this method returns, contains the address of a pointer to the interface specified by riid.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>Returns S_OK if successful, or one of the following specific Shell codes, or a system error code.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>COPYENGINE_S_YES</term>
            <term>User responded "Yes" to the dialog.</term>
            </item>
            <item>
            <term>COPYENGINE_S_USER_RETRY</term>
            <term>User responded to retry the current action.</term>
            </item>
            <item>
            <term>COPYENGINE_S_USER_IGNORED</term>
            <term>User responded "No" to the dialog.</term>
            </item>
            <item>
            <term>COPYENGINE_S_MERGE</term>
            <term>User responded to merge folders.</term>
            </item>
            <item>
            <term>COPYENGINE_S_USER_RETRY_WITH_NEW_NAME</term>
            <term>User responded to retry the file with new name.</term>
            </item>
            <item>
            <term>COPYENGINE_S_DONT_PROCESS_CHILDREN</term>
            <term>Child items should not be processed.</term>
            </item>
            <item>
            <term>COPYENGINE_S_PENDING</term>
            <term>Error has been queued and will display later.</term>
            </item>
            <item>
            <term>COPYENGINE_E_USER_CANCELLED</term>
            <term>User canceled the current action.</term>
            </item>
            <item>
            <term>COPYENGINE_E_REQUIRES_ELEVATION</term>
            <term>Operation requires elevated privileges.</term>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ITransferSource.MoveItem(Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.Shell32.IShellItem,System.String,Vanara.PInvoke.Shell32.TRANSFER_SOURCE_FLAGS,Vanara.PInvoke.Shell32.IShellItem@)">
            <summary>Moves the item within the volume/namespace, returning the IShellItem in its new location.</summary>
            <param name="psi">
            <para>Type: <c>IShellItem*</c></para>
            <para>A pointer to the IShellItem to be moved.</para>
            </param>
            <param name="psiParentDst">
            <para>Type: <c>IShellItem*</c></para>
            <para>A pointer to the IShellItem that represents the new parent item at the destination.</para>
            </param>
            <param name="pszNameDst">
            <para>Type: <c>LPCWSTR</c></para>
            <para>Pointer to a null-terminated buffer that contains the destination path.</para>
            </param>
            <param name="flags">
            <para>Type: <c>TRANSFER_SOURCE_FLAGS</c></para>
            <para>Flags that control the file operation. One or more of the TRANSFER_SOURCE_FLAGS constants.</para>
            </param>
            <param name="ppsiNew">
            <para>Type: <c>IShellItem**</c></para>
            <para>When this method returns successfully, contains an address of a pointer to the IShellItem in its new location.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>
            Returns <c>S_OK</c> if the move succeeded. In that case, ppsiNew points to the address of the new item. Other possible
            return values, both success and failure codes, include the following:
            </para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>COPYENGINE_S_USER_IGNORED</term>
            <term>
            The destination item already exists and has not been overwritten. In this case, ppsiNew is NULL and the caller should delete
            the source item.
            </term>
            </item>
            <item>
            <term>COPYENGINE_S_MERGE</term>
            <term>
            The destination item already exists and the user has chosen to merge the source and destination folders. In this case,
            ppsiNew points to a NULL value and the caller should delete the source item.
            </term>
            </item>
            <item>
            <term>E_NOINTERFACE</term>
            <term>When the item being moved is a folder, the caller should convert a move operation into a copy and delete operation.</term>
            </item>
            <item>
            <term>ERROR_NOT_SAME_DEVICE</term>
            <term>The caller should convert a move operation into a copy and delete operation. This error is seen as .</term>
            </item>
            <item>
            <term>ERROR_FILE_EXISTS</term>
            <term>
            When moving a folder, the caller should convert the move operation into a copy and delete operation. The destination item
            must support ITransferDestination. This error is seen as .
            </term>
            </item>
            <item>
            <term>ERROR_ALREADY_EXISTS</term>
            <term>
            When moving a folder, the caller should convert the move operation into a copy and delete operation. The destination item
            must support ITransferDestination. This error is seen as .
            </term>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ITransferSource.RecycleItem(Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.Shell32.TRANSFER_SOURCE_FLAGS,Vanara.PInvoke.Shell32.IShellItem@)">
            <summary>Recycle the item into the provided recycle location and return the item in its new location.</summary>
            <param name="psiSource">
            <para>Type: <c>IShellItem*</c></para>
            <para>A pointer to the IShellItem to be recycled.</para>
            </param>
            <param name="psiParentDest">
            <para>Type: <c>IShellItem*</c></para>
            <para>A pointer to the IShellItem of the recycle location (the new parent of the item).</para>
            </param>
            <param name="flags">
            <para>Type: <c>TRANSFER_SOURCE_FLAGS</c></para>
            <para>The flags that control the file operation. One or more of the TRANSFER_SOURCE_FLAGS constants.</para>
            </param>
            <param name="ppsiNewDest">
            <para>Type: <c>IShellItem**</c></para>
            <para>When the method returns, contains the address of a pointer to the recycled IShellItem.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>Returns one of the following, or an error code.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>COPYENGINE_S_YES</term>
            <term>User responded "Yes" to the dialog.</term>
            </item>
            <item>
            <term>COPYENGINE_S_USER_RETRY</term>
            <term>User responded to retry the current action.</term>
            </item>
            <item>
            <term>COPYENGINE_S_USER_IGNORED</term>
            <term>User responded "No" to the dialog.</term>
            </item>
            <item>
            <term>COPYENGINE_S_DONT_PROCESS_CHILDREN</term>
            <term>Children items should not be processed.</term>
            </item>
            <item>
            <term>COPYENGINE_S_PENDING</term>
            <term>Error has been queued and will display later.</term>
            </item>
            <item>
            <term>COPYENGINE_E_USER_CANCELLED</term>
            <term>User canceled the current action.</term>
            </item>
            <item>
            <term>COPYENGINE_E_REQUIRES_ELEVATION</term>
            <term>Operation requires elevated privileges.</term>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ITransferSource.RemoveItem(Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.Shell32.TRANSFER_SOURCE_FLAGS)">
            <summary>Removes the item without moving the item to the Recycle Bin.</summary>
            <param name="psiSource">
            <para>Type: <c>IShellItem*</c></para>
            <para>A pointer to the IShellItem to be removed.</para>
            </param>
            <param name="flags">
            <para>Type: <c>TRANSFER_SOURCE_FLAGS</c></para>
            <para>Flags that control the file operation. One or more of the TRANSFER_SOURCE_FLAGS constants.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>Returns one of the following, or an error code.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>COPYENGINE_S_YES</term>
            <term>User responded "Yes" to the dialog</term>
            </item>
            <item>
            <term>COPYENGINE_S_USER_RETRY</term>
            <term>User responded to retry the current action</term>
            </item>
            <item>
            <term>COPYENGINE_S_USER_IGNORED</term>
            <term>User responded "No" to the dialog.</term>
            </item>
            <item>
            <term>COPYENGINE_S_MERGE</term>
            <term>User responded to merge folders.</term>
            </item>
            <item>
            <term>COPYENGINE_S_USER_RETRY_WITH_NEW_NAME</term>
            <term>User responded to retry the file with new name.</term>
            </item>
            <item>
            <term>COPYENGINE_S_DONT_PROCESS_CHILDREN</term>
            <term>Child items should not be processed.</term>
            </item>
            <item>
            <term>COPYENGINE_S_PENDING</term>
            <term>Error has been queued and will display later.</term>
            </item>
            <item>
            <term>COPYENGINE_E_USER_CANCELLED</term>
            <term>User canceled the current action.</term>
            </item>
            <item>
            <term>COPYENGINE_E_REQUIRES_ELEVATION</term>
            <term>Operation requires elevated privileges.</term>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ITransferSource.RenameItem(Vanara.PInvoke.Shell32.IShellItem,System.String,Vanara.PInvoke.Shell32.TRANSFER_SOURCE_FLAGS,Vanara.PInvoke.Shell32.IShellItem@)">
            <summary>Changes the name of an item, returning the IShellItem with the new name.</summary>
            <param name="psiSource">
            <para>Type: <c>IShellItem*</c></para>
            <para>A pointer to the IShellItem object to be renamed.</para>
            </param>
            <param name="pszNewName">
            <para>Type: <c>LPCWSTR</c></para>
            <para>A pointer to a null-terminated, Unicode string containing the new name.</para>
            </param>
            <param name="flags">
            <para>Type: <c>TRANSFER_SOURCE_FLAGS</c></para>
            <para>Flags that control the file operation. One or more of the TRANSFER_SOURCE_FLAGS constants.</para>
            </param>
            <param name="ppsiNewDest">
            <para>Type: <c>IShellItem**</c></para>
            <para>When this method returns, contains the address of a pointer to the IShellItem object.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>Returns one of the following, or an error code.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>COPYENGINE_S_YES</term>
            <term>User responded "Yes" to the dialog.</term>
            </item>
            <item>
            <term>COPYENGINE_S_USER_RETRY</term>
            <term>User responded to retry the current action.</term>
            </item>
            <item>
            <term>COPYENGINE_S_USER_IGNORED</term>
            <term>User responded "No" to the dialog.</term>
            </item>
            <item>
            <term>COPYENGINE_S_MERGE</term>
            <term>User responded to merge folders.</term>
            </item>
            <item>
            <term>COPYENGINE_S_USER_RETRY_WITH_NEW_NAME</term>
            <term>User responded to retry the file with new name.</term>
            </item>
            <item>
            <term>COPYENGINE_S_DONT_PROCESS_CHILDREN</term>
            <term>Child items should not be processed.</term>
            </item>
            <item>
            <term>COPYENGINE_S_PENDING</term>
            <term>Error has been queued and will display later.</term>
            </item>
            <item>
            <term>COPYENGINE_E_USER_CANCELLED</term>
            <term>User canceled the current action.</term>
            </item>
            <item>
            <term>COPYENGINE_E_REQUIRES_ELEVATION</term>
            <term>Operation requires elevated privileges.</term>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ITransferSource.LinkItem(Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.Shell32.IShellItem,System.String,Vanara.PInvoke.Shell32.TRANSFER_SOURCE_FLAGS,Vanara.PInvoke.Shell32.IShellItem@)">
            <summary>Not implemented.</summary>
            <param name="psiSource">
            <para>Type: <c>IShellItem*</c></para>
            <para>A pointer to an IShellItem that represents the source item.</para>
            </param>
            <param name="psiParentDest">
            <para>Type: <c>IShellItem*</c></para>
            <para>A pointer to the IShellItem as parent to link.</para>
            </param>
            <param name="pszNewName">
            <para>Type: <c>LPCWSTR</c></para>
            <para>A pointer to a null-terminated, Unicode string containing the name for the link.</para>
            </param>
            <param name="flags">
            <para>Type: <c>DWORD</c></para>
            <para>The flags that control the file operation. Value is one or more of the TRANSFER_SOURCE_FLAGS constants.</para>
            </param>
            <param name="ppsiNewDest">
            <para>Type: <c>IShellItem**</c></para>
            <para>When the method returns, contains the address of a pointer to the IShellItem of the link.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ITransferSource.ApplyPropertiesToItem(Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.Shell32.IShellItem@)">
            <summary>Apply a set of property changes to an item.</summary>
            <param name="psiSource">
            <para>Type: <c>IShellItem*</c></para>
            <para>A pointer to the IShellItem to be altered.</para>
            </param>
            <param name="ppsiNew">
            <para>Type: <c>IShellItem**</c></para>
            <para>When this method returns, contains the address of a pointer to the changed IShellItem.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ITransferSource.GetDefaultDestinationName(Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.Shell32.IShellItem,System.String@)">
            <summary>Gets the default name for a Shell item.</summary>
            <param name="psiSource">
            <para>Type: <c>IShellItem*</c></para>
            <para>A pointer to the IShellItem.</para>
            </param>
            <param name="psiParentDest">
            <para>Type: <c>IShellItem*</c></para>
            <para>A pointer to the parent IShellItem of the destination target of the file operation.</para>
            </param>
            <param name="ppszDestinationName">
            <para>Type: <c>LPWSTR*</c></para>
            <para>When the method returns, contains a pointer to a null-terminated, Unicode string containing the default name.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>Gets the default name for a Shell item, if different than the item's parsing name.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ITransferSource.EnterFolder(Vanara.PInvoke.Shell32.IShellItem)">
            <summary>Notifies that a folder is the destination of a file operation.</summary>
            <param name="psiChildFolderDest">
            <para>Type: <c>IShellItem*</c></para>
            <para>A pointer to the IShellItem destination folder.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            This method is called when beginning to process a folder or subfolder in a recursive operation. For instance, when a source
            folder is copied to a destination folder, method <c>ITransferSource::EnterFolder</c> should be called with
            psiChildFolderDest set to the destination folder.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ITransferSource.LeaveFolder(Vanara.PInvoke.Shell32.IShellItem)">
            <summary>Sends notification that a folder is no longer the destination of a file operation.</summary>
            <param name="psiChildFolderDest">
            <para>Type: <c>IShellItem*</c></para>
            <para>A pointer to the IShellItem destination folder.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>This method is called at the end of recursive file operations on a destination folder.</remarks>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IUpdateIDList">
            <summary>Provides a method to update the ITEMIDLIST of the child of an folder object.</summary>
            <remarks>
            <para>When to Implement</para>
            <para>Implement this interface for an IShellFolder implementation to update the provided child ITEMIDLIST.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IUpdateIDList.Update(System.Runtime.InteropServices.ComTypes.IBindCtx,Vanara.PInvoke.Shell32.PIDL,Vanara.PInvoke.Shell32.PIDL@)">
            <summary>Updates the provided child ITEMIDLIST based on the parameters specified by the provided IBindCtx.</summary>
            <param name="pbc">
            <para>Type: <c>IBindCtx*</c></para>
            <para>
            An IBindCtx interface on a bind context object. Used to specify parameters for updating the child ITEMIDLIST. This value can
            be <c>NULL</c>.
            </para>
            </param>
            <param name="pidlIn">
            <para>Type: <c>PCUITEMID_CHILD</c></para>
            <para>The child ITEMIDLIST.</para>
            </param>
            <param name="ppidlOut">
            <para>Type: <c>PITEMID_CHILD*</c></para>
            <para>A pointer to the child ITEMIDLIST relative to the parent folder.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            If pbc is <c>NULL</c> or does not contain any parameters that apply to the current Shell folder, ppidlOut points to the same
            ITEMIDLIST as pidlIn.
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IUserAccountChangeCallback">
            <summary>Exposes a method which is called when the picture that represents a user account is changed.</summary>
            <remarks>
            <para>
            Applications that want to notify users through this interface can add their class identifier (CLSID) strings as values under
            this key:
            </para>
            <para><c>SOFTWARE</c><c>Microsoft</c><c>Windows</c><c>CurrentVersion</c><c>UserPictureChange</c></para>
            <para>The values under this key are enumerated to create this callback object.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IUserAccountChangeCallback.OnPictureChange(System.String)">
            <summary>Called to send notifications when the picture that represents a user account is changed.</summary>
            <param name="pszUserName">
            <para>Type: <c>LPCWSTR</c></para>
            <para>Pointer to a string that contains the user name. Set this parameter to <c>NULL</c> to specify the current user.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            <para>
            When the picture that represents a user account changes, the callback object notifies all applications that are registered
            under this registry subkey:
            </para>
            <para><c>SOFTWARE</c><c>Microsoft</c><c>Windows</c><c>CurrentVersion</c><c>UserPictureChange</c></para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IUserNotification">
            <summary>
            <para>
            Exposes methods that set notification information and then display that notification to the user in a balloon that appears in
            conjunction with the notification area of the taskbar.
            </para>
            <para>
            <c>Note</c> IUserNotification2 differs from <c>IUserNotification</c> only in its Show method, which adds an additional parameter
            for a callback interface to communicate with the notification. Otherwise the two interfaces are identical in form and function.
            CLSID_UserNotification implements both versions of <c>Show</c> as an overload.
            </para>
            </summary>
            <remarks>
            <para>When to Implement</para>
            <para>An implementation of this interface is provided in Windows as CLSID_UserNotification.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IUserNotification.SetBalloonInfo(System.String,System.String,Vanara.PInvoke.Shell32.NIIF)">
            <summary>Sets the information to be displayed in a balloon notification.</summary>
            <param name="pszTitle">
            <para>Type: <c>LPCWSTR</c></para>
            <para>A pointer to a Unicode string that specifies the title of the notification.</para>
            </param>
            <param name="pszText">
            <para>Type: <c>LPCWSTR</c></para>
            <para>A pointer to a Unicode string that specifies the text to be displayed in the body of the balloon.</para>
            </param>
            <param name="dwInfoFlags">
            <para>Type: <c>DWORD</c></para>
            <para>One or more of the following values that indicate an icon to display in the notification balloon.</para>
            <para>NIIF_NONE (0x00000000)</para>
            <para>0x00000000. Do not display an icon.</para>
            <para>NIIF_INFO (0x00000001)</para>
            <para>0x00000001. Display an information icon.</para>
            <para>NIIF_WARNING (0x00000002)</para>
            <para>0x00000002. Display a warning icon.</para>
            <para>NIIF_ERROR (0x00000003)</para>
            <para>0x00000003. Display an error icon.</para>
            <para>NIIF_USER (0x00000004)</para>
            <para>0x00000004. <c>Windows XP SP2 and later</c>. Use the icon identified in <c>hIcon</c> in the notification balloon.</para>
            <para>NIIF_NOSOUND (0x00000010)</para>
            <para>
            0x00000010. <c>Windows XP and later</c>. Do not play the associated sound. This value applies only to balloon notifications
            and not to standard user notifications.
            </para>
            <para>NIIF_LARGE_ICON (0x00000010)</para>
            <para>
            0x00000010. <c>Windows Vista and later</c>. The large version of the icon should be used as the icon in the notification
            balloon. This corresponds to the icon with dimensions SM_CXICON x SM_CYICON. If this flag is not set, the icon with
            dimensions XM_CXSMICON x SM_CYSMICON is used.
            </para>
            <list type="bullet">
            <item>
            <term>This flag can be used with all stock icons.</term>
            </item>
            <item>
            <term>
            Applications that use older customized icons (NIIF_USER with <c>hIcon</c>) must provide a new SM_CXICON x SM_CYICON version
            in the tray icon specified in the <c>hIcon</c> member of the NOTIFYICONDATA structure. These icons are scaled down when they
            are displayed in the notification area.
            </term>
            </item>
            <item>
            <term>
            New customized icons (NIIF_USER with <c>hBalloonIcon</c>) must supply an SM_CXICON x SM_CYICON version in the supplied icon
            ( <c>hBalloonIcon</c>).
            </term>
            </item>
            </list>
            <para>NIIF_RESPECT_QUIET_TIME (0x00000080)</para>
            <para>
            0x00000080. <c>Windows 7 and later</c>. Do not display the notification balloon if the current user is in "quiet time",
            which is the first hour after a new user logs into his or her account for the first time. During this time, most
            notifications should not be sent or shown. This lets a user become accustomed to a new computer system without those
            distractions. Quiet time also occurs for each user after an operating system upgrade or clean installation. A notification
            sent with this flag during quiet time is not queued; it is simply dismissed unshown. The application can resend the
            notification later if it is still valid at that time.
            </para>
            <para>
            Because an application cannot predict when it might encounter quiet time, we recommended that this flag always be set on all
            appropriate notifications by any application that means to honor quiet time.
            </para>
            <para>If the current user is not in quiet time, this flag has no effect.</para>
            <para>NIIF_ICON_MASK (0x0000000F)</para>
            <para>0x0000000F. <c>Windows XP</c> (Shell32.dll version 6.0 <c>) and later</c>. Reserved.</para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IUserNotification.SetBalloonRetry(System.UInt32,System.UInt32,System.UInt32)">
            <summary>Specifies the conditions for trying to display user information when the first attempt fails.</summary>
            <param name="dwShowTime">
            <para>Type: <c>DWORD</c></para>
            <para>The amount of time, in milliseconds, to display the user information.</para>
            </param>
            <param name="dwInterval">
            <para>Type: <c>DWORD</c></para>
            <para>The interval of time, in milliseconds, between attempts to display the user information.</para>
            </param>
            <param name="cRetryCount">
            <para>Type: <c>UINT</c></para>
            <para>The number of times the system should try to display the user information.</para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IUserNotification.SetIconInfo(Vanara.PInvoke.HICON,System.String)">
            <summary>Sets the notification area icon associated with specific user information.</summary>
            <param name="hIcon">
            <para>Type: <c>HICON</c></para>
            <para>A handle to the icon.</para>
            </param>
            <param name="pszToolTip">
            <para>Type: <c>LPCWSTR</c></para>
            <para>
            A pointer to a string that contains the tooltip text to display for the specified icon. This value can be <c>NULL</c>,
            although it is not recommended.
            </para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IUserNotification.Show(Vanara.PInvoke.Shell32.IQueryContinue,System.UInt32)">
            <summary>Displays the notification.</summary>
            <param name="pqc">
            <para>Type: <c>IQueryContinue*</c></para>
            <para>
            An IQueryContinue interface pointer, used to determine whether the notification display can continue or should stop (for
            example, if the user closes the notification). This value can be <c>NULL</c>.
            </para>
            </param>
            <param name="dwContinuePollInterval">
            <para>Type: <c>DWORD</c></para>
            <para>The length of time, in milliseconds, to display user information.</para>
            </param>
            <remarks>This method is equivalent to calling Show with pSink= <c>NULL</c>.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IUserNotification.PlaySound(System.String)">
            <summary>Plays a sound in conjunction with the notification.</summary>
            <param name="pszSoundName">
            <para>Type: <c>LPCWSTR</c></para>
            <para>A pointer to a null-terminated Unicode string that specifies the alias of the sound file to play.</para>
            </param>
            <remarks>
            <para>
            The string pointed to by pszSoundNamepqc contains an alias for a system event found in the registry or the Win.ini file; for
            instance, "SystemExit".
            </para>
            <para>
            The specified sound is played asynchronously and the method returns immediately after beginning the sound. To stop an
            asynchronous waveform sound, call <c>IUserNotification::PlaySound</c> with pszSoundNamepqc set to <c>NULL</c>.
            </para>
            <para>
            The specified sound event will yield to another sound event that is already playing. If a sound cannot be played because the
            resource needed to play that sound is busy, the method immediately returns S_FALSE without playing the requested sound.
            </para>
            <para>If the specified sound cannot be found, <c>IUserNotification::PlaySound</c> uses the system default sound.</para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IVirtualDesktopManager">
            <summary>Exposes methods that enable an application to interact with groups of windows that form virtual workspaces.</summary>
            <remarks>
            <para>
            The user can group a collection of windows together to create a virtual desktop. Every window is considered to be part of a
            virtual desktop. When one virtual desktop is hidden, all of the windows associated with it are also hidden. This enables the
            user to create multiple working environments and to be able to switch between them. Similarly, when a virtual desktop is
            selected to be active, the windows associated with that virtual desktop are displayed on the screen.
            </para>
            <para>
            To support this concept, applications should avoid automatically switching the user from one virtual desktop to another. Only
            the user should instigate that change. In order to support this, newly created windows should appear on the currently active
            virtual desktop. In addition, if an application can reuse currently active windows, it should only reuse windows if they are on
            the currently active virtual desktop. Otherwise, a new window should be created.
            </para>
            <para>
            In the above image, the user has two virtual desktops and <c>VD2</c> is the currently active virtual desktop. If the user clicks
            a link in an outlook message, there's a URI activation that should open the link in an Internet Explorer window. If the user has
            configured IE to open links in the current window, it would normally use the currently open window. However, in this case, IE is
            on an inactive virtual desktop. In this scenario, IE should create a new window in the currently active virtual desktop.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IVirtualDesktopManager.IsWindowOnCurrentVirtualDesktop(Vanara.PInvoke.HWND)">
            <summary>Indicates whether the provided window is on the currently active virtual desktop.</summary>
            <param name="topLevelWindow">The window of interest.</param>
            <returns><c>True</c> if the topLevelWindow is on the currently active virtual desktop, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IVirtualDesktopManager.GetWindowDesktopId(Vanara.PInvoke.HWND)">
            <summary>Gets the identifier for the virtual desktop hosting the provided top-level window.</summary>
            <param name="topLevelWindow">The top level window for the virtual desktop you are interested in.</param>
            <returns>The identifier for the virtual desktop hosting the topLevelWindow.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IVirtualDesktopManager.MoveWindowToDesktop(Vanara.PInvoke.HWND,System.Guid@)">
            <summary>Moves a window to the specified virtual desktop.</summary>
            <param name="topLevelWindow">The window to move.</param>
            <param name="desktopId">The identifier of the virtual desktop to move the GetWindowDesktopId to get a window's identifier.</param>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.VirtualDesktopManager">
            <summary>CLSID_VirtualDesktopManager</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.VPCOLORFLAGS">
            <summary>Specifies the use of a color. Used by IVisualProperties methods.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.VPCOLORFLAGS.VPCF_TEXT">
            <summary>A text color.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.VPCOLORFLAGS.VPCF_BACKGROUND">
            <summary>A background color.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.VPCOLORFLAGS.VPCF_SORTCOLUMN">
            <summary>A sort-column color.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.VPCOLORFLAGS.VPCF_SUBTEXT">
            <summary>A subtext color.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.VPCOLORFLAGS.VPCF_TEXTBACKGROUND">
            <summary>Windows 7 and later. A text background color.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.VPWATERMARKFLAGS">
            <summary>Specifies watermark flags. Used by IVisualProperties::SetWatermark.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.VPWATERMARKFLAGS.VPWF_DEFAULT">
            <summary>Default Windows XP behavior.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.VPWATERMARKFLAGS.VPWF_ALPHABLEND">
            <summary>Alpha blend the respective bitmap; assumed 24-bit color + 8-bit alpha.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IVisualProperties">
            <summary>Exposes methods that set and get visual properties.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IVisualProperties.SetWatermark(Vanara.PInvoke.HBITMAP,Vanara.PInvoke.Shell32.VPWATERMARKFLAGS)">
            <summary>Provides a bitmap to use as a watermark.</summary>
            <param name="hbmp">
            <para>Type: <c>HBITMAP</c></para>
            <para>A handle to the bitmap.</para>
            </param>
            <param name="vpwf">
            <para>Type: <c>VPWATERMARKFLAGS</c></para>
            <para>VPWATERMARKFLAGS flags that customize the watermark.</para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IVisualProperties.SetColor(Vanara.PInvoke.Shell32.VPCOLORFLAGS,Vanara.PInvoke.COLORREF)">
            <summary>Sets the color, as specified.</summary>
            <param name="vpcf">
            <para>Type: <c>VPCOLORFLAGS</c></para>
            <para>The color flags. See VPCOLORFLAGS.</para>
            </param>
            <param name="cr">
            <para>Type: <c>COLORREF</c></para>
            <para>A value of type COLORREF</para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IVisualProperties.GetColor(Vanara.PInvoke.Shell32.VPCOLORFLAGS)">
            <summary>Gets the color, as specified.</summary>
            <param name="vpcf">
            <para>Type: <c>VPCOLORFLAGS</c></para>
            <para>The color flags. See VPCOLORFLAGS</para>
            </param>
            <returns>
            <para>Type: <c>COLORREF*</c></para>
            <para>A pointer to a value of type COLORREF.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IVisualProperties.SetItemHeight(System.Int32)">
            <summary>Sets the specified item height.</summary>
            <param name="cyItemInPixels">
            <para>Type: <c>int</c></para>
            <para>The item height, in pixels.</para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IVisualProperties.GetItemHeight">
            <summary>Gets the item height.</summary>
            <returns>
            <para>Type: <c>int*</c></para>
            <para>A pointer to the item height, in pixels.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IVisualProperties.SetFont(Vanara.PInvoke.LOGFONT@,System.Boolean)">
            <summary>Sets attributes of the font.</summary>
            <param name="plf">
            <para>Type: <c>const LOGFONTW*</c></para>
            <para>A pointer to a LOGFONT structure that contains the attributes to set.</para>
            </param>
            <param name="bRedraw">
            <para>Type: <c>BOOL</c></para>
            <para><c>TRUE</c> if the item should be redrawn after the new attributes are set; otherwise <c>FALSE</c>.</para>
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IVisualProperties.GetFont">
            <summary>Gets the current attributes set on the font.</summary>
            <returns>
            <para>Type: <c>LOGFONTW*</c></para>
            <para>
            A pointer to a LOGFONT structure that, when this method returns successfully, receives the current attributes of the font.
            </para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IVisualProperties.SetTheme(System.String,System.String)">
            <summary>Sets the specified theme.</summary>
            <param name="pszSubAppName">
            <para>Type: <c>LPCWSTR</c></para>
            <para>
            A pointer to a Unicode string that contains the application name to use in place of the calling application's name. If this
            parameter is <c>NULL</c>, the calling application's name is used.
            </para>
            </param>
            <param name="pszSubIdList">
            <para>Type: <c>LPCWSTR</c></para>
            <para>
            A pointer to a Unicode string that contains a semicolon-separated list of CLSID names for use in place of the actual list
            passed by the window's class. If this parameter is <c>NULL</c>, the ID list from the calling class is used.
            </para>
            </param>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.ShellUtil">
            <remarks>Methods in this class will only work on Vista and above.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ShellUtil.CreateBindCtx(Vanara.PInvoke.STGM,System.TimeSpan,Vanara.PInvoke.Ole32.BIND_FLAGS)">
            <summary>Wrapper for native <c>CreateBindCtx</c> and <c>SetBindOptions</c>.</summary>
            <param name="openMode">
            Represents flags that should be used when opening the file that contains the object identified by the moniker.
            </param>
            <param name="timeout">
            Indicates the amount of time (clock time in milliseconds) that the caller specified to complete the binding operation.
            </param>
            <param name="bindFlags">Flags that control aspects of moniker binding operations.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ShellUtil.GetKnownFolderFromGuid(System.Guid)">
            <summary>Gets the KNOWNFOLDERID enum from a KNOWNFOLDERID Guid.</summary>
            <param name="knownFolder">The KNOWNFOLDERID Guid.</param>
            <returns>The KNOWNFOLDERID enum.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ShellUtil.GetKnownFolderFromPath(System.String)">
            <summary>Gets the KNOWNFOLDERID enum from a path.</summary>
            <param name="path">The folder path.</param>
            <returns>The KNOWNFOLDERID enum.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ShellUtil.GetParentAndItem(Vanara.PInvoke.Shell32.IShellItem)">
            <summary>Gets the parent and item for the supplied IShellItem regardless of support by IShellItem.</summary>
            <param name="psi">The IShellItem instance.</param>
            <returns>An IParentAndItem reference for the shell item.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ShellUtil.GetPathForKnownFolder(System.Guid)">
            <summary>Gets the path for a KNOWNFOLDERID Guid.</summary>
            <param name="knownFolder">The KNOWNFOLDERID Guid.</param>
            <returns>The file system path.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ShellUtil.GetPathFromShellItem(Vanara.PInvoke.Shell32.IShellItem)">
            <summary>Gets the path from shell item.</summary>
            <param name="item">The shell item.</param>
            <returns>The file system path.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ShellUtil.GetShellItemForPath(System.String)">
            <summary>Gets the shell item for a file system path.</summary>
            <returns>The file system path.</returns>
            <returns>The corresponding IShellItem.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ShellUtil.LoadIconFromExtractIcon(Vanara.PInvoke.Shell32.IShellFolder,Vanara.PInvoke.Shell32.PIDL,System.UInt32@,Vanara.PInvoke.User32.SafeHICON@)">
            <summary>Gets the icon for the item using the specified characteristics.</summary>
            <param name="psf">The IShellFolder from which to request the IExtractIcon instance.</param>
            <param name="pidl">The PIDL of the item within <paramref name="psf"/>.</param>
            <param name="imgSz">The width, in pixels, of the icon.</param>
            <param name="hico">The resulting icon handle, on success, or <c>null</c> on failure.</param>
            <returns>The result of function.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ShellUtil.LoadIconFromExtractIcon(Vanara.PInvoke.Shell32.IExtractIconW,System.UInt32@,Vanara.PInvoke.User32.SafeHICON@)">
            <summary>Gets the icon for the item using the specified characteristics.</summary>
            <param name="iei">The IExtractIconW from which to retrieve the icon.</param>
            <param name="imgSz">The width, in pixels, of the icon.</param>
            <param name="hico">The resulting icon handle, on success, or <c>null</c> on failure.</param>
            <returns>The result of function.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ShellUtil.LoadIconFromExtractIcon(Vanara.PInvoke.Shell32.IExtractIconA,System.UInt32@,Vanara.PInvoke.User32.SafeHICON@)">
            <summary>Gets the icon for the item using the specified characteristics.</summary>
            <param name="iei">The IExtractIconA from which to retrieve the icon.</param>
            <param name="imgSz">The width, in pixels, of the icon.</param>
            <param name="hico">The resulting icon handle, on success, or <c>null</c> on failure.</param>
            <returns>The result of function.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ShellUtil.LoadIconFromSystemImageList(System.Int32,System.UInt32@,Vanara.PInvoke.User32.SafeHICON@)">
            <summary>Loads an icon from the system image list.</summary>
            <param name="iIdx">A value of type int that contains the index of the image.</param>
            <param name="imgSz">The width, in pixels, of the icon.</param>
            <param name="hico">The resulting icon handle, on success, or <c>null</c> on failure.</param>
            <returns>The result of function.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ShellUtil.LoadImageFromExtractImage(Vanara.PInvoke.Shell32.IShellFolder,Vanara.PInvoke.Shell32.PIDL,System.UInt32@,Vanara.PInvoke.Gdi32.SafeHBITMAP@)">
            <summary>Gets the image for the item using the specified characteristics.</summary>
            <param name="psf">The IShellFolder from which to request the IExtractImage instance.</param>
            <param name="pidl">The PIDL of the item within <paramref name="psf"/>.</param>
            <param name="imgSz">The width, in pixels, of the Bitmap.</param>
            <param name="hbmp">The resulting Bitmap, on success, or <c>null</c> on failure.</param>
            <returns>The result of function.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ShellUtil.LoadImageFromThumbnailProvider(Vanara.PInvoke.Shell32.IShellItem,System.UInt32@,Vanara.PInvoke.Gdi32.SafeHBITMAP@)">
            <summary>Gets the thumbnail image for the item using the specified characteristics.</summary>
            <param name="psi">The IShellItem from which to request the IThumbnailProvider instance.</param>
            <param name="imgSz">The width, in pixels, of the Bitmap.</param>
            <param name="hbmp">The resulting Bitmap, on success, or <c>null</c> on failure.</param>
            <returns>The result of function.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ShellUtil.LoadImageFromThumbnailProvider(Vanara.PInvoke.Shell32.IShellFolder,Vanara.PInvoke.Shell32.PIDL,System.UInt32@,Vanara.PInvoke.Gdi32.SafeHBITMAP@)">
            <summary>Gets the thumbnail image for the item using the specified characteristics.</summary>
            <param name="psf">The IShellFolder from which to request the IThumbnailProvider instance.</param>
            <param name="pidl">The PIDL of the item within <paramref name="psf"/>.</param>
            <param name="imgSz">The width, in pixels, of the Bitmap.</param>
            <param name="hbmp">The resulting Bitmap, on success, or <c>null</c> on failure.</param>
            <returns>The result of function.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ShellUtil.LoadImageFromThumbnailProvider(Vanara.PInvoke.Shell32.IThumbnailProvider,System.UInt32@,Vanara.PInvoke.Gdi32.SafeHBITMAP@)">
            <summary>Gets the thumbnail image for the item using the specified characteristics.</summary>
            <param name="itp">The itp.</param>
            <param name="imgSz">The width, in pixels, of the Bitmap.</param>
            <param name="hbmp">The resulting Bitmap, on success, or <c>null</c> on failure.</param>
            <returns>The result of function.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ShellUtil.PixelsToSHIL(System.Int32)">
            <summary>Given a pixel size, return the ShellImageSize value with the closest size.</summary>
            <param name="pixels">Size, in pixels, of the image list size to search for.</param>
            <returns>An image list size.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ShellUtil.QueryInterface(System.Object@,System.Guid@)">
            <summary>Requests a specified interface from a COM object.</summary>
            <param name="iUnk">The interface to be queried.</param>
            <param name="riid">The interface identifier (IID) of the requested interface.</param>
            <returns>The returned interface.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ShellUtil.QueryInterface``1(System.Object@)">
            <summary>Requests a specified interface from a COM object.</summary>
            <typeparam name="T">The interface type for which to query and return.</typeparam>
            <param name="iUnk">The interface to be queried.</param>
            <returns>The returned interface.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ShellUtil.QueryInterface(System.Object@,System.Guid@,System.Object@)">
            <summary>Requests a specified interface from a COM object.</summary>
            <param name="iUnk">The interface to be queried.</param>
            <param name="riid">The interface identifier (IID) of the requested interface.</param>
            <param name="ppv">When this method returns, contains the returned interface.</param>
            <returns>An HRESULT that indicates the success or failure of the call.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.ShellUtil.SHILToPixels(Vanara.PInvoke.Shell32.SHIL)">
            <summary>Given an image list size, return the related size, in pixels, of that size defined on the system.</summary>
            <param name="imageListSize">Size of the image list.</param>
            <returns>Pixel size of corresponding system value.</returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.SHCOLSTATE">
            <summary>Describes how a property should be treated.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHCOLSTATE.SHCOLSTATE_DEFAULT">
            <summary>The value is displayed according to default settings for the column.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHCOLSTATE.SHCOLSTATE_TYPE_STR">
            <summary>The value is displayed as a string.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHCOLSTATE.SHCOLSTATE_TYPE_INT">
            <summary>The value is displayed as an integer.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHCOLSTATE.SHCOLSTATE_TYPE_DATE">
            <summary>The value is displayed as a date/time.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHCOLSTATE.SHCOLSTATE_TYPEMASK">
            <summary>A mask for display type values SHCOLSTATE_TYPE_STR, SHCOLSTATE_TYPE_STR, and SHCOLSTATE_TYPE_DATE.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHCOLSTATE.SHCOLSTATE_ONBYDEFAULT">
            <summary>The column should be on by default in Details view.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHCOLSTATE.SHCOLSTATE_SLOW">
            <summary>Will be slow to compute. Perform on a background thread.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHCOLSTATE.SHCOLSTATE_EXTENDED">
            <summary>Provided by a handler, not the folder.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHCOLSTATE.SHCOLSTATE_SECONDARYUI">
            <summary>Not displayed in the context menu, but is listed in the More... dialog.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHCOLSTATE.SHCOLSTATE_HIDDEN">
            <summary>Not displayed in the UI.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHCOLSTATE.SHCOLSTATE_PREFER_VARCMP">
            <summary>VarCmp produces same result as IShellFolder::CompareIDs.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHCOLSTATE.SHCOLSTATE_PREFER_FMTCMP">
            <summary>PSFormatForDisplay produces same result as IShellFolder::CompareIDs.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHCOLSTATE.SHCOLSTATE_NOSORTBYFOLDERNESS">
            <summary>Do not sort folders separately.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHCOLSTATE.SHCOLSTATE_VIEWONLY">
            <summary>Only displayed in the UI.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHCOLSTATE.SHCOLSTATE_BATCHREAD">
            <summary>Marks columns with values that should be read in a batch.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHCOLSTATE.SHCOLSTATE_NO_GROUPBY">
            <summary>Grouping is disabled for this column.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHCOLSTATE.SHCOLSTATE_FIXED_WIDTH">
            <summary>Can't resize the column.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHCOLSTATE.SHCOLSTATE_NODPISCALE">
            <summary>The width is the same in all dpi.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHCOLSTATE.SHCOLSTATE_FIXED_RATIO">
            <summary>Fixed width and height ratio.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHCOLSTATE.SHCOLSTATE_DISPLAYMASK">
            <summary>Filters out new display flags.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.STRRET_TYPE">
            <summary>A value that specifies the desired format of the string.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.STRRET_TYPE.STRRET_WSTR">
            <summary>The string is at the address specified by pOleStr member.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.STRRET_TYPE.STRRET_OFFSET">
            <summary>
            The uOffset member value indicates the number of bytes from the beginning of the item identifier list where the string is located.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.STRRET_TYPE.STRRET_CSTR">
            <summary>The string is returned in the cStr member.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.ITEMIDLIST">
            <summary>Contains a list of item identifiers.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.ITEMIDLIST.mkid">
            <summary>A list of item identifiers.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.SHELLDETAILS">
            <summary>Reports detailed information on an item in a Shell folder.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHELLDETAILS.fmt">
            <summary>The alignment of the column heading and the subitem text in the column.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHELLDETAILS.cxChar">
            <summary>he number of average-sized characters in the header.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHELLDETAILS.str">
            <summary>
            An STRRET structure that includes a string with the requested information. To convert this structure to a string, use
            StrRetToBuf or StrRetToStr.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.SHITEMID">
            <summary>Defines an item identifier.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHITEMID.cb">
            <summary>The size of identifier, in bytes, including <see cref="F:Vanara.PInvoke.Shell32.SHITEMID.cb"/> itself.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.SHITEMID.abID">
            <summary>A variable-length item identifier.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.STRRET">
            <summary>Contains strings returned from the IShellFolder interface methods.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.STRRET.uType">
            <summary>A value that specifies the desired format of the string.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.STRRET.pOleStr">
            <summary>
            A pointer to the string. This memory must be allocated with CoTaskMemAlloc. It is the calling application's responsibility to
            free this memory with CoTaskMemFree when it is no longer needed.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.STRRET.uOffset">
            <summary>The offset into the item identifier list.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.STRRET.cStr">
            <summary>The buffer to receive the display name. CHAR[MAX_PATH]</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.STRRET.op_Implicit(Vanara.PInvoke.Shell32.STRRET@)~System.String">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.Shell32.STRRET"/> to <see cref="T:System.String"/>.</summary>
            <param name="s">The <see cref="T:Vanara.PInvoke.Shell32.STRRET"/> instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.STRRET.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents this instance.</summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.PIDL">
            <summary>Represents a managed pointer to an ITEMIDLIST.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.PIDL.#ctor(System.IntPtr,System.Boolean,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Shell32.PIDL"/> class.</summary>
            <param name="pidl">The raw pointer to a native ITEMIDLIST.</param>
            <param name="clone">if set to <c>true</c> clone the list before storing it.</param>
            <param name="own">if set to <c>true</c><see cref="T:Vanara.PInvoke.Shell32.PIDL"/> will release the memory associated with the ITEMIDLIST when done.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.PIDL.#ctor(Vanara.PInvoke.Shell32.PIDL)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Shell32.PIDL"/> class.</summary>
            <param name="pidl">An existing <see cref="T:Vanara.PInvoke.Shell32.PIDL"/> that will be copied and managed.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.PIDL.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Shell32.PIDL"/> class from a file path.</summary>
            <param name="path">A string that contains the path.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.PIDL.#ctor(System.Byte[])">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Shell32.PIDL"/> class from an array of bytes.</summary>
            <param name="bytes">The bytes.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.PIDL.#ctor(System.Runtime.InteropServices.ComTypes.IStream)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Shell32.PIDL"/> class from a stream holding an absolute ITEMIDLIST.</summary>
            <param name="stream">The stream interface instance from which the ITEMIDLIST loads.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.PIDL.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Shell32.PIDL"/> class.</summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.PIDL.Null">
            <summary>Gets a value representing a NULL PIDL.</summary>
            <value>The null equivalent.</value>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.PIDL.IsEmpty">
            <summary>Gets a value indicating whether this list is empty.</summary>
            <value><c>true</c> if this list is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.PIDL.LastId">
            <summary>Gets the last SHITEMID in this ITEMIDLIST.</summary>
            <value>The last SHITEMID.</value>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.PIDL.Parent">
            <summary>Gets an ITEMIDLIST with the last ID removed. If this is the topmost ID, a clone of the current is returned.</summary>
        </member>
        <member name="P:Vanara.PInvoke.Shell32.PIDL.Size">
            <summary>Gets the size, in bytes, of the ITEMIDLIST.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.PIDL.Combine(Vanara.PInvoke.Shell32.PIDL,Vanara.PInvoke.Shell32.PIDL)">
            <summary>Combines the specified <see cref="T:Vanara.PInvoke.Shell32.PIDL"/> instances to create a new one.</summary>
            <param name="firstPidl">The first <see cref="T:Vanara.PInvoke.Shell32.PIDL"/>.</param>
            <param name="secondPidl">The second <see cref="T:Vanara.PInvoke.Shell32.PIDL"/>.</param>
            <returns>A managed <see cref="T:Vanara.PInvoke.Shell32.PIDL"/> instance that contains both supplied lists in their respective order.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.PIDL.op_Explicit(Vanara.PInvoke.Shell32.PIDL)~System.IntPtr">
            <summary>Performs an explicit conversion from <see cref="T:Vanara.PInvoke.Shell32.PIDL"/> to <see cref="T:System.IntPtr"/>.</summary>
            <param name="pidl">The current <see cref="T:Vanara.PInvoke.Shell32.PIDL"/>.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.PIDL.op_Implicit(System.IntPtr)~Vanara.PInvoke.Shell32.PIDL">
            <summary>Performs an implicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:Vanara.PInvoke.Shell32.PIDL"/>.</summary>
            <param name="p">The pointer to a raw ITEMIDLIST.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.PIDL.op_Addition(Vanara.PInvoke.Shell32.PIDL,Vanara.PInvoke.Shell32.PIDL)">
            <summary>Combines the specified <see cref="T:Vanara.PInvoke.Shell32.PIDL"/> instances to create a new one.</summary>
            <param name="first">The first <see cref="T:Vanara.PInvoke.Shell32.PIDL"/>.</param>
            <param name="second">The second <see cref="T:Vanara.PInvoke.Shell32.PIDL"/>.</param>
            <returns>A managed <see cref="T:Vanara.PInvoke.Shell32.PIDL"/> instance that contains both supplied lists in their respective order.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.PIDL.op_Equality(Vanara.PInvoke.Shell32.PIDL,Vanara.PInvoke.Shell32.PIDL)">
            <summary>Implements the operator ==.</summary>
            <param name="first">The first <see cref="T:Vanara.PInvoke.Shell32.PIDL"/>.</param>
            <param name="second">The second <see cref="T:Vanara.PInvoke.Shell32.PIDL"/>.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.PIDL.op_Inequality(Vanara.PInvoke.Shell32.PIDL,Vanara.PInvoke.Shell32.PIDL)">
            <summary>Implements the operator !=.</summary>
            <param name="first">The first <see cref="T:Vanara.PInvoke.Shell32.PIDL"/>.</param>
            <param name="second">The second <see cref="T:Vanara.PInvoke.Shell32.PIDL"/>.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.PIDL.Append(Vanara.PInvoke.Shell32.PIDL)">
            <summary>Appends the specified <see cref="T:Vanara.PInvoke.Shell32.PIDL"/> to the existing list.</summary>
            <param name="appendPidl">The <see cref="T:Vanara.PInvoke.Shell32.PIDL"/> to append.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.PIDL.Dump">
            <summary>Dumps this instance to a string a list of binary values.</summary>
            <returns>A binary string of the contents.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.PIDL.Equals(System.Object)">
            <summary>Determines whether the specified <see cref="T:System.Object"/>, is equal to this instance.</summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.PIDL.Equals(System.IntPtr)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.PIDL.Equals(Vanara.PInvoke.Shell32.PIDL)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.PIDL.GetBytes">
            <summary>Gets the ID list as an array of bytes.</summary>
            <returns>An array of bytes representing the ID list.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.PIDL.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator{PIDL}"/> that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.PIDL.GetHashCode">
            <summary>Returns a hash code for this instance.</summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.PIDL.Insert(Vanara.PInvoke.Shell32.PIDL)">
            <summary>Inserts the specified <see cref="T:Vanara.PInvoke.Shell32.PIDL"/> before the existing list.</summary>
            <param name="insertPidl">The <see cref="T:Vanara.PInvoke.Shell32.PIDL"/> to insert.</param>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.PIDL.IsParentOf(Vanara.PInvoke.Shell32.PIDL,System.Boolean)">
            <summary>Determines if this instance is a parent or ancestor of a supplied PIDL.</summary>
            <param name="childPidl">Child instance to test.</param>
            <param name="immediate">If <c>true</c>, narrows test to immediate children only.</param>
            <returns><c>true</c> if this instance is a parent or ancestor of a supplied PIDL.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.PIDL.RemoveLastId">
            <summary>Removes the last identifier from the list.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.PIDL.SaveToStream(System.Runtime.InteropServices.ComTypes.IStream)">
            <summary>Saves an ITEMIDLIST structure to a stream.</summary>
            <param name="stream">An IStream instance where the ITEMIDLIST is saved.</param>
            <remarks>The stream must be opened for writing, or <see cref="M:Vanara.PInvoke.Shell32.PIDL.SaveToStream(System.Runtime.InteropServices.ComTypes.IStream)"/> returns an error.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.PIDL.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents this instance.</summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.PIDL.ToString(Vanara.PInvoke.Shell32.SIGDN)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance base according to the format provided by <paramref name="displayNameFormat"/>.
            </summary>
            <param name="displayNameFormat">The desired display name format.</param>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.PIDL.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.PIDL.InternalReleaseHandle">
            <summary>
            Internal method that actually releases the handle. This is called by <see cref="M:Vanara.PInvoke.SafeHANDLE.ReleaseHandle"/>
            for valid handles and afterwards zeros the handle.
            </summary>
            <returns><c>true</c> to indicate successful release of the handle; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.PIDL.UpdateHandle(System.IntPtr)">
            <summary>Updates the handle after freeing the existing handle.</summary>
            <param name="newHandle">The new handle.</param>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IStorageProviderPropertyHandler">
            <summary>Provides a collection of properties associated with a file or folder.</summary>
            <remarks>
            <para><c>Caution</c>
            <para></para>
            You should only implement this interface if you have a specific need to do so.
            </para>
            <para>
            This interface can be implemented by a cloud storage provider sync engine to share properties about a file or file folder. An
            instance of <c>IStorageProviderPropertyHandler</c> exists for the lifetime of a storage file created under a sync root. Use
            IStorageProviderHandler to retrieve the set of properties associated with an individual file or folder.
            </para>
            <para>This interface is responsible for keeping track of the following properties:</para>
            <list type="bullet">
            <item>
            <term>StorageProviderFileIdentifier</term>
            </item>
            <item>
            <term>StorageProviderFileRemoteUri</term>
            </item>
            <item>
            <term>StorageProviderFileChecksum</term>
            </item>
            <item>
            <term>StorageProviderFileVersionWaterline</term>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IStorageProviderPropertyHandler.RetrieveProperties(Vanara.PInvoke.Ole32.PROPERTYKEY[],System.UInt32,Vanara.PInvoke.PropSys.IPropertyStore@)">
            <summary>Gets the properties managed by the sync engine.</summary>
            <param name="propertiesToRetrieve">The identifier for the properties to retrieve.</param>
            <param name="propertiesToRetrieveCount">The number of properties to retrieve.</param>
            <param name="retrievedProperties">A collection of properties.</param>
            <returns>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</returns>
            <remarks>
            <para>
            If the file or folder cannot be found, this method should return <c>S_OK</c>, but <c>retrievedProperties</c> should be empty.
            </para>
            <para>Any properties that are not managed by the sync engine should return <c>VT_EMPTY</c> for those properties.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IStorageProviderPropertyHandler.SaveProperties(Vanara.PInvoke.PropSys.IPropertyStore)">
            <summary>Saves properties associated with a file or folder.</summary>
            <param name="propertiesToSave">The properties to save.</param>
            <returns>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</returns>
            <remarks>Attempting to save properties that are not managed by the sync engine should result in the error code <c>E_INVALIDARG</c>.</remarks>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IStorageProviderHandler">
            <summary>Retrieves the IStorageProviderPropertyHandler associated with a specific file or folder.</summary>
            <remarks>
            <c>Caution</c>
            <para></para>
            You should only implement this interface if you have a specific need to do so.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IStorageProviderHandler.GetPropertyHandlerFromPath(System.String,Vanara.PInvoke.Shell32.IStorageProviderPropertyHandler@)">
            <summary>Gets an instance of IStorageProviderPropertyHandler associated with the provided path.</summary>
            <param name="path">The path for the relevant file.</param>
            <param name="propertyHandler">An IStorageProviderPropertyHandler instance associated with the file specified by <c>path</c>.</param>
            <returns>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IStorageProviderHandler.GetPropertyHandlerFromUri(System.String,Vanara.PInvoke.Shell32.IStorageProviderPropertyHandler@)">
            <summary>Gets an instance of IStorageProviderPropertyHandler associated with the provided URI.</summary>
            <param name="uri">The URI for the relevant file.</param>
            <param name="propertyHandler">An IStorageProviderPropertyHandler instance associated with the file specified by <c>uri</c>.</param>
            <returns>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</returns>
            <remarks>
            This method is used to convert a remote URI to a local file system path. That path is then used to provide the
            <c>propertyHandler</c> to the local file.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IStorageProviderHandler.GetPropertyHandlerFromFileId(System.String,Vanara.PInvoke.Shell32.IStorageProviderPropertyHandler@)">
            <summary>Gets an instance of IStorageProviderPropertyHandler associated with the provided file identifier.</summary>
            <param name="fileId">The identifier for the relevant file.</param>
            <param name="propertyHandler">An IStorageProviderPropertyHandler instance associated with the file specified by <c>fileId</c>.</param>
            <returns>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</returns>
            <remarks>
            This method is used to convert a file identifier to a local file system path. That path is then used to provide the
            <c>propertyHandler</c> to the local file.
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.WTS_ALPHATYPE">
            <summary>Alpha channel type information.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.WTS_ALPHATYPE.WTSAT_UNKNOWN">
            <summary>The bitmap is an unknown format. The Shell tries nonetheless to detect whether the image has an alpha channel.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.WTS_ALPHATYPE.WTSAT_RGB">
            <summary>The bitmap is an RGB image without alpha. The alpha channel is invalid and the Shell ignores it.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Shell32.WTS_ALPHATYPE.WTSAT_ARGB">
            <summary>The bitmap is an ARGB image with a valid alpha channel.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.IThumbnailProvider">
            <summary>
            <para>
            Exposes a method for getting a thumbnail image and is intended to be implemented for thumbnail handlers. The object that
            implements this interface must also implement IInitializeWithStream.
            </para>
            </summary>
            <remarks>
            <para>The Shell calls IThumbnailProvider::GetThumbnail to obtain an image to use as a representation of the item.</para>
            <para>
            An implementation of this interface for photo thumbnails is supplied in Microsoft Windows as CLSID_PhotoThumbnailProvider.
            Applications that use the supplied implementation must define a constant CLSID identifier using the GUID {C7657C4A-9F68-40fa-A4DF-96BC08EB3551}.
            </para>
            <para>Initializing</para>
            <para>
            The object that implements this interface must also implement IInitializeWithStream . The Shell calls
            IInitializeWithStream::Initialize with the stream of the item, and IInitializeWithStream is the only initialization interface
            used when IThumbnailProvider instances are loaded out-of-proc (for isolation purposes). This is the primary code path for Windows
            for all IThumbnailCache code paths.
            </para>
            <para>
            It is possible for a thumbnail implementation to be initialized with IInitializeWithItem or IInitializeWithFile when the handler
            is request by a 3rd party without using the IThumbnailCache API, but this is uncommon. If you implement
            <c>IInitializeWithItem</c>, the Shell calls IInitializeWithItem::Initialize with the IShellItem representation of the item. If
            you implement <c>IInitializeWithFile</c>, the Shell calls IInitializeWithFile::Initialize with the path of the file.
            </para>
            <para>If none of these interfaces is present, <c>IThumbnailProvider</c> is not called.</para>
            <para><c>Client apps</c> If you're developing a client app, you should use IShellItemImageFactory instead.</para>
            <para>
            <c>Windows Vista</c> IThumbnailProivder is new for Vista and replaces IExtractImage. Vista still supports IExtractImage but lacks
            the ability to return the image type (alpha or not).
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Shell32.IThumbnailProvider.GetThumbnail(System.UInt32,Vanara.PInvoke.Gdi32.SafeHBITMAP@,Vanara.PInvoke.Shell32.WTS_ALPHATYPE@)">
            <summary>Gets a thumbnail image and alpha type.</summary>
            <param name="cx">
            The maximum thumbnail size, in pixels. The Shell draws the returned bitmap at this size or smaller. The returned bitmap
            should fit into a square of width and height cx, though it does not need to be a square image. The Shell scales the bitmap to
            render at lower sizes. For example, if the image has a 6:4 aspect ratio, then the returned bitmap should also have a 6:4
            aspect ratio.
            </param>
            <param name="phbmp">
            When this method returns, contains a pointer to the thumbnail image handle. The image must be a DIB section and 32 bits per
            pixel. The Shell scales down the bitmap if its width or height is larger than the size specified by cx. The Shell always
            respects the aspect ratio and never scales a bitmap larger than its original size.
            </param>
            <param name="pdwAlpha">
            When this method returns, contains a pointer to one of the following values from the WTS_ALPHATYPE enumeration.
            </param>
            <returns>If this method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="T:Vanara.PInvoke.Shell32.PhotoThumbnailProvider">
            <summary>An implementation of IThumbnailProvider for photo thumbnails is supplied in Microsoft Windows as CLSID_PhotoThumbnailProvider.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Url">
            <summary>Interfaces and methods from Url.dll.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Url.IURL_INVOKECOMMAND_FLAGS">
            <summary>Flags used by IUniformResourceLocator::InvokeCommand.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Url.IURL_INVOKECOMMAND_FLAGS.IURL_INVOKECOMMAND_FL_ALLOW_UI">
            <summary>
            Interaction with the user is allowed and the hwndParent member of this structure is valid. If this is not set, interaction
            with the user is not allowed and the hwndParent member is ignored.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Url.IURL_INVOKECOMMAND_FLAGS.IURL_INVOKECOMMAND_FL_USE_DEFAULT_VERB">
            <summary>
            Default verb for the Internet Shortcut's protocol should be used and the pcszVerb member is ignored. If this bit is not set,
            the verb is specified by pcszVerb.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Url.IURL_INVOKECOMMAND_FLAGS.IURL_INVOKECOMMAND_FL_DDEWAIT">
            <summary>Wait for the DDE conversation to terminate before returning.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Url.IURL_INVOKECOMMAND_FLAGS.IURL_INVOKECOMMAND_FL_ASYNCOK">
            <summary>pass SEE_MASK_ASYNCOK to ShellExec</summary>
        </member>
        <member name="F:Vanara.PInvoke.Url.IURL_INVOKECOMMAND_FLAGS.IURL_INVOKECOMMAND_FL_LOG_USAGE">
            <summary>Record launch with UA system</summary>
        </member>
        <member name="T:Vanara.PInvoke.Url.IURL_SETURL_FLAGS">
            <summary>Flags used by IUniformResourceLocator::SetUrl.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Url.IURL_SETURL_FLAGS.IURL_SETURL_FL_GUESS_PROTOCOL">
            <summary>
            If the protocol scheme is not specified in pcszURL, the system automatically chooses a scheme and adds it to the URL.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Url.IURL_SETURL_FLAGS.IURL_SETURL_FL_USE_DEFAULT_PROTOCOL">
            <summary>If the protocol scheme is not specified in pcszURL, the system adds the default protocol scheme to the URL.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Url.TRANSLATEURL_IN_FLAGS">
            <summary>Bit flags that specify how the URL string is to be translated.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Url.TRANSLATEURL_IN_FLAGS.TRANSLATEURL_FL_GUESS_PROTOCOL">
            <summary>
            If the protocol scheme is not specified in the pcszURL parameter of TranslateURL, the system automatically chooses a scheme
            and adds it to the URL.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Url.TRANSLATEURL_IN_FLAGS.TRANSLATEURL_FL_USE_DEFAULT_PROTOCOL">
            <summary>
            If the protocol scheme is not specified in the pcszURL parameter of TranslateURL, the system adds the default protocol to
            the URL.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Url.URLASSOCIATIONDIALOG_IN_FLAGS">
            <summary>The bit flags that specify the behavior of <see cref="M:Vanara.PInvoke.Url.URLAssociationDialog(Vanara.PInvoke.HWND,Vanara.PInvoke.Url.URLASSOCIATIONDIALOG_IN_FLAGS,System.String,System.String,System.Text.StringBuilder,System.UInt32)"/>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Url.URLASSOCIATIONDIALOG_IN_FLAGS.URLASSOCDLG_FL_USE_DEFAULT_NAME">
            <summary>Use the default file name (that is, "Internet Shortcut").</summary>
        </member>
        <member name="F:Vanara.PInvoke.Url.URLASSOCIATIONDIALOG_IN_FLAGS.URLASSOCDLG_FL_REGISTER_ASSOC">
            <summary>
            Register the selected application as the handler for the protocol specified in pcszURL. The application is registered only
            if this flag is set and the user indicates that a persistent association is desired.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Url.IUniformResourceLocator">
            <summary>This interface provides methods that retrieve, set, and run commands on an object's URL.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Url.IUniformResourceLocator.SetUrl(System.String,Vanara.PInvoke.Url.IURL_SETURL_FLAGS)">
            <summary>Sets an object's URL.</summary>
            <param name="pcszUrl">
            Address of a zero-terminated string that contains the URL to set. The protocol scheme may be included as part of the URL.
            </param>
            <param name="dwInFlags">The dw in flags.</param>
        </member>
        <member name="M:Vanara.PInvoke.Url.IUniformResourceLocator.GetUrl(System.String@)">
            <summary>Retrieves an object's URL.</summary>
            <param name="ppszUrl">
            Address of an LPSTR that will be filled with a pointer to the object's URL. Because this method allocates memory for the
            string, you must create and instance of an IMalloc interface and free the memory using IMalloc::Free when it is no longer needed.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Url.IUniformResourceLocator.InvokeCommand(Vanara.PInvoke.Url.URLINVOKECOMMANDINFO@)">
            <summary>Runs a command on an object's URL.</summary>
            <param name="purlici">Address of a URLINVOKECOMMANDINFO structure that contains command information for the function.</param>
        </member>
        <member name="M:Vanara.PInvoke.Url.InetIsOffline(System.UInt32)">
            <summary>Determines whether the system is connected to the Internet.</summary>
            <param name="dwFlags">
            <para>Type: <c>DWORD</c></para>
            <para>The input flags for the function. This must be set to zero.</para>
            </param>
            <returns>
            <para>Type: <c>BOOL</c></para>
            <para>
            Returns <c>TRUE</c> if the local system is not currently connected to the Internet. Returns <c>FALSE</c> if the local system is
            connected to the Internet or if no attempt has yet been made to connect to the Internet.
            </para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Url.MIMEAssociationDialog(Vanara.PInvoke.HWND,System.UInt32,System.String,System.String,System.Text.StringBuilder,System.UInt32)">
            <summary>
            <para>Runs the unregistered MIME content type dialog box.</para>
            <para><c>Note</c> Windows XP Service Pack 2 (SP2) or later: This function is no longer supported.</para>
            </summary>
            <param name="hwndParent">
            <para>Type: <c>HWND</c></para>
            <para>A handle to the parent window of any posted child windows.</para>
            </param>
            <param name="dwInFlags">
            <para>Type: <c>DWORD</c></para>
            <para>
            A bit flag value that specifies if an association is to be registered. The bit flag is the value MIMEASSOCDLG_FL_REGISTER_ASSOC
            (0x0001). If this bit is set, the selected application is registered as the handler for the given MIME type. If this bit is
            clear, no association is registered.
            </para>
            <para>An application is registered only if this flag is set and the user indicates that a persistent association is to be made.</para>
            <para>Registration is impossible if the string at pcszFile does not contain an extension.</para>
            </param>
            <param name="pcszFile">
            <para>Type: <c>PCTSTR</c></para>
            <para>
            The address of a null-terminated string that contains the name of the target file. This file must conform to the content type
            described by the pcszMIMEContentType parameter.
            </para>
            </param>
            <param name="pcszMIMEContentType">
            <para>Type: <c>PCTSTR</c></para>
            <para>The address of a null-terminated string that contains the unregistered content type.</para>
            </param>
            <param name="pszAppBuf">
            <para>Type: <c>PTSTR</c></para>
            <para>
            A pointer to a buffer that, when this function returns successfully, receives the path of the application specified by the user.
            </para>
            </param>
            <param name="ucAppBufLen">
            <para>Type: <c>UINT</c></para>
            <para>Size of pszAppBuf, in characters.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para><c>Note</c> As of Windows XP SP2, this function is not supported and returns E_NOTIMPL in all situations.</para>
            <para>
            In supported systems, returns S_OK if the content type was successfully associated with the extension. In this case, the
            extension is associated as the default for the content type, and pszAppBuf points to the string that contains the path of the
            specified application. The function returns S_FALSE if nothing was registered. Otherwise, the return value will be one of the following:
            </para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>E_ABORT</term>
            <term>The user canceled the operation.</term>
            </item>
            <item>
            <term>E_FLAGS</term>
            <term>The flag combination passed in dwInFlags is invalid.</term>
            </item>
            <item>
            <term>E_OUTOFMEMORY</term>
            <term>There was insufficient memory available to complete the operation.</term>
            </item>
            <item>
            <term>E_POINTER</term>
            <term>One of the input pointers is invalid.</term>
            </item>
            </list>
            </returns>
            <remarks>
            This function does not validate the syntax of the input content type string at pcszMIMEContentType. A successful return value
            does not indicate that the specified MIME content type is valid.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Url.TranslateURL(System.String,Vanara.PInvoke.Url.TRANSLATEURL_IN_FLAGS,System.String@)">
            <summary>Applies common translations to a given URL string, creating a new URL string.</summary>
            <param name="pcszURL">
            <para>Type: <c>PCTSTR</c></para>
            <para>The address of the URL string to be translated.</para>
            </param>
            <param name="dwInFlags">
            <para>Type: <c>DWORD</c></para>
            <para>The bit flags that specify how the URL string is to be translated. This value can be a combination of the following:</para>
            <para>TRANSLATEURL_FL_GUESS_PROTOCOL</para>
            <para>
            If the protocol scheme is not specified in the pcszURL parameter to <c>TranslateURL</c>, the system automatically chooses a
            scheme and adds it to the URL.
            </para>
            <para>TRANSLATEURL_FL_USE_DEFAULT_PROTOCOL</para>
            <para>
            If the protocol scheme is not specified in the pcszURL parameter to <c>TranslateURL</c>, the system adds the default protocol to
            the URL.
            </para>
            </param>
            <param name="ppszTranslatedURL">
            <para>Type: <c>PTSTR*</c></para>
            <para>
            A pointer variable that receives the pointer to the newly created, translated URL string, if any. The ppszTranslatedURL
            parameter is valid only if the function returns S_OK.
            </para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>
            Returns S_OK upon success, or S_FALSE if the URL did not require translation. If an error occurs, the function returns one of
            the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>E_FLAGS</term>
            <term>The flag combination passed in dwInFlags is invalid.</term>
            </item>
            <item>
            <term>E_OUTOFMEMORY</term>
            <term>There was insufficient memory to complete the operation.</term>
            </item>
            <item>
            <term>E_POINTER</term>
            <term>One of the input pointers is invalid.</term>
            </item>
            </list>
            </returns>
            <remarks>
            This function does not validate the input URL string. A successful return value does not indicate that the URL strings are valid URLs.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Url.URLAssociationDialog(Vanara.PInvoke.HWND,Vanara.PInvoke.Url.URLASSOCIATIONDIALOG_IN_FLAGS,System.String,System.String,System.Text.StringBuilder,System.UInt32)">
            <summary>
            <para>
            Invokes the unregistered URL protocol dialog box. This dialog box allows the user to select an application to associate with a
            previously unknown protocol.
            </para>
            <para><c>Note</c> Windows XP Service Pack 2 (SP2) or later: This function is no longer supported.</para>
            </summary>
            <param name="hwndParent">
            <para>Type: <c>HWND</c></para>
            <para>A handle to the parent window.</para>
            </param>
            <param name="dwInFlags">
            <para>Type: <c>DWORD</c></para>
            <para>The bit flags that specify the behavior of the function. This value can be a combination of the following:</para>
            <para>URLASSOCDLG_FL_USE_DEFAULT_NAME</para>
            <para>Use the default file name (that is, "Internet Shortcut").</para>
            <para>URLASSOCDLG_FL_REGISTER_ASSOC</para>
            <para>
            Register the selected application as the handler for the protocol specified in pcszURL. The application is registered only if
            this flag is set and the user indicates that a persistent association is desired.
            </para>
            </param>
            <param name="pcszFile">
            <para>Type: <c>PTCSTR</c></para>
            <para>The address of a constant zero-terminated string that contains the file name to associate with the URLs protocol.</para>
            </param>
            <param name="pcszURL">
            <para>Type: <c>PTCSTR</c></para>
            <para>The address of a constant zero-terminated string that contains the URL with an unknown protocol.</para>
            </param>
            <param name="pszAppBuf">
            <para>Type: <c>PTSTR</c></para>
            <para>The address of a buffer that receives the path of the application specified by the user.</para>
            </param>
            <param name="ucAppBufLen">
            <para>Type: <c>UINT</c></para>
            <para>The size of pszAppBuf, in characters.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para><c>Note</c> As of Windows XP SP2, this function not supported and returns E_NOTIMPL in all situations.</para>
            <para>
            In supported systems, returns S_OK if the application is registered with the URL protocol, or S_FALSE if nothing is registered.
            For example, the function returns S_FALSE when the user elects to perform a one-time execution via the selected application.
            </para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Url.URLINVOKECOMMANDINFO">
            <summary>Contains information for use with the IUniformResourceLocator::InvokeCommand method.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Url.URLINVOKECOMMANDINFO.dwcbSize">
            <summary>Size of this structure, in bytes.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Url.URLINVOKECOMMANDINFO.dwFlags">
            <summary>Flag value that specifies how the IUniformResourceLocator::InvokeCommand method will execute.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Url.URLINVOKECOMMANDINFO.hwndParent">
            <summary>Handle to the parent window. If dwFlags is set to IURL_INVOKECOMMAND_FL_USE_DEFAULT_VERB, this member is ignored.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Url.URLINVOKECOMMANDINFO.pcszVerb">
            <summary>
            Address of a zero-terminated string that contains the verb to be invoked by IUniformResourceLocator::InvokeCommand. If
            dwFlags is set to IURL_INVOKECOMMAND_FL_USE_DEFAULT_VERB, this member is ignored.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Url.URLINVOKECOMMANDINFO.#ctor(System.String,System.Nullable{Vanara.PInvoke.HWND})">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Url.URLINVOKECOMMANDINFO"/> struct.</summary>
            <param name="verb">The verb to be invoked by IUniformResourceLocator::InvokeCommand.</param>
            <param name="parentHwnd">Handle to the parent window.</param>
        </member>
        <member name="F:Vanara.PInvoke.Url.URLINVOKECOMMANDINFO.Default">
            <summary>Gets a default instance of this structure with the size field set appropriately.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Url.InternetShortcut">
            <summary>CoClass for IUniformResourceLocator.</summary>
        </member>
        <member name="T:Vanara.PInvoke.KnownFolderIdExt">
            <summary>Extension methods for <see cref="T:Vanara.PInvoke.Shell32.KNOWNFOLDERID"/>.</summary>
        </member>
        <member name="M:Vanara.PInvoke.KnownFolderIdExt.FullPath(Vanara.PInvoke.Shell32.KNOWNFOLDERID)">
            <summary>Retrieves the full path associated with a <see cref="T:Vanara.PInvoke.Shell32.KNOWNFOLDERID"/>.</summary>
            <param name="id">The known folder.</param>
            <returns>The path.</returns>
        </member>
        <member name="M:Vanara.PInvoke.KnownFolderIdExt.GetIKnownFolder(Vanara.PInvoke.Shell32.KNOWNFOLDERID)">
            <summary>Retrieves the IKnownFolder associated with a <see cref="T:Vanara.PInvoke.Shell32.KNOWNFOLDERID"/>.</summary>
            <param name="id">The known folder.</param>
            <returns>The <see cref="T:Vanara.PInvoke.Shell32.IKnownFolder"/> instance.</returns>
        </member>
        <member name="M:Vanara.PInvoke.KnownFolderIdExt.GetIShellFolder(Vanara.PInvoke.Shell32.KNOWNFOLDERID)">
            <summary>Retrieves the IShellFolder associated with a <see cref="T:Vanara.PInvoke.Shell32.KNOWNFOLDERID"/>.</summary>
            <param name="id">The known folder.</param>
            <returns>The <see cref="T:Vanara.PInvoke.Shell32.IShellFolder"/> instance.</returns>
        </member>
        <member name="M:Vanara.PInvoke.KnownFolderIdExt.GetIShellItem(Vanara.PInvoke.Shell32.KNOWNFOLDERID)">
            <summary>Retrieves the IShellItem associated with a <see cref="T:Vanara.PInvoke.Shell32.KNOWNFOLDERID"/>.</summary>
            <param name="id">The known folder.</param>
            <returns>The <see cref="T:Vanara.PInvoke.Shell32.IShellItem"/> instance.</returns>
        </member>
        <member name="M:Vanara.PInvoke.KnownFolderIdExt.GetRegistryProperty``1(Vanara.PInvoke.Shell32.KNOWNFOLDERID,System.String)">
            <summary>Gets a registry property associated with this known folder.</summary>
            <typeparam name="T">Return type.</typeparam>
            <param name="id">The known folder.</param>
            <param name="valueName">Name of the property (value under registry key).</param>
            <returns>Retrieved value or default(T) if no value exists.</returns>
        </member>
        <member name="M:Vanara.PInvoke.KnownFolderIdExt.Guid(Vanara.PInvoke.Shell32.KNOWNFOLDERID)">
            <summary>Retrieves the Guid associated with a <see cref="T:Vanara.PInvoke.Shell32.KNOWNFOLDERID"/>.</summary>
            <param name="id">The known folder.</param>
            <returns>The GUID associated with the <paramref name="id"/> or <see cref="F:System.Guid.Empty"/> if no association exists.</returns>
        </member>
        <member name="M:Vanara.PInvoke.KnownFolderIdExt.KnownFolderId(System.Environment.SpecialFolder)">
            <summary>Retrieves the <see cref="T:Vanara.PInvoke.Shell32.KNOWNFOLDERID"/> associated with the <see cref="T:System.Environment.SpecialFolder"/>.</summary>
            <param name="spFolder">The <see cref="T:System.Environment.SpecialFolder"/>.</param>
            <returns>Matching <see cref="T:Vanara.PInvoke.Shell32.KNOWNFOLDERID"/>.</returns>
        </member>
        <member name="M:Vanara.PInvoke.KnownFolderIdExt.Name(Vanara.PInvoke.Shell32.KNOWNFOLDERID)">
            <summary>Retrieves the name associated with a <see cref="T:Vanara.PInvoke.Shell32.KNOWNFOLDERID"/>.</summary>
            <param name="id">The known folder.</param>
            <returns>The name.</returns>
        </member>
        <member name="M:Vanara.PInvoke.KnownFolderIdExt.Name(Vanara.PInvoke.Shell32.IKnownFolder)">
            <summary>Retrieves the name associated with a <see cref="T:Vanara.PInvoke.Shell32.IKnownFolder"/>.</summary>
            <param name="kf">The known folder.</param>
            <returns>The name.</returns>
        </member>
        <member name="M:Vanara.PInvoke.KnownFolderIdExt.PIDL(Vanara.PInvoke.Shell32.KNOWNFOLDERID)">
            <summary>Retrieves the PIDL associated with a <see cref="T:Vanara.PInvoke.Shell32.KNOWNFOLDERID"/>.</summary>
            <param name="id">The known folder.</param>
            <returns>The PIDL.</returns>
        </member>
        <member name="M:Vanara.PInvoke.KnownFolderIdExt.SpecialFolder(Vanara.PInvoke.Shell32.KNOWNFOLDERID)">
            <summary>Retrieves the <see cref="T:System.Environment.SpecialFolder"/> associated with a <see cref="T:Vanara.PInvoke.Shell32.KNOWNFOLDERID"/> if it exists.</summary>
            <param name="id">The known folder.</param>
            <returns>The <see cref="T:System.Environment.SpecialFolder"/> if defined, <c>null</c> otherwise.</returns>
        </member>
        <member name="T:Vanara.PInvoke.ShlGuidExt">
            <summary>Extension methods for enums with associated Guids.</summary>
        </member>
        <member name="M:Vanara.PInvoke.ShlGuidExt.Guid(Vanara.PInvoke.Shell32.BHID)">
            <summary>Retrieves the Guid associated with a <see cref="T:Vanara.PInvoke.Shell32.BHID"/>.</summary>
            <param name="id">The known folder.</param>
            <returns>The GUID.</returns>
        </member>
        <member name="M:Vanara.PInvoke.ShlGuidExt.Guid(Vanara.PInvoke.Shell32.FOLDERTYPEID)">
            <summary>Retrieves the Guid associated with a <see cref="T:Vanara.PInvoke.Shell32.FOLDERTYPEID"/>.</summary>
            <param name="id">The known folder.</param>
            <returns>The GUID.</returns>
        </member>
        <member name="M:Vanara.PInvoke.ShlGuidExt.Lookup``1(System.Guid)">
            <summary>Lookups the specified unique identifier.</summary>
            <param name="guid">The unique identifier.</param>
            <returns>Corresponding BHID.</returns>
        </member>
        <member name="T:Vanara.PInvoke.IDestinationStreamFactory">
            <summary>Exposes a method for manually copying a stream or file before applying changes to properties.</summary>
            <remarks>
            The default copy-on-write behavior provided by IPropertyStore causes the entire source stream to be duplicated during a write
            operation. This can be costly for large streams, especially when a large portion of the stream is to be changed.
            <c>IDestinationStreamFactory</c> provides an alternative for the property handler author, who can use it manually to ensure that
            property changes do not corrupt the stream in case of failure. To do this, the author marks the handler as NoTransactedMode in the
            handler's CoClass registry key, and queries the stream for this interface.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IDestinationStreamFactory.GetDestinationStream(System.Runtime.InteropServices.ComTypes.IStream@)">
            <summary>Gets an empty stream that receives the new version of the file being copied.</summary>
            <param name="ppstm">
            <para>Type: <c>IStream**</c></para>
            <para>The address of a pointer to the new stream.</para>
            </param>
            <returns>
            <para>Type: <c>HRESULT</c></para>
            <para>If this method succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
            <remarks>
            The property handler author calls <c>IDestinationStreamFactory::GetDestinationStream</c> to get a new empty stream that the new
            version of the file will write to. The handler builds the destination stream manually, copying from the source stream as necessary.
            </remarks>
        </member>
        <member name="T:Vanara.Extensions.ControlPanelItemExtensions">
            <summary>Extension methods to get attribute information from a ControlPanelItem value.</summary>
        </member>
        <member name="M:Vanara.Extensions.ControlPanelItemExtensions.CanonicalName(Vanara.PInvoke.Shell32.ControlPanelItem)">
            <summary>Gets the canonical name for a Control Panel item.</summary>
            <param name="cp">The <see cref="T:Vanara.PInvoke.Shell32.ControlPanelItem"/> value.</param>
            <returns>The canonical name.</returns>
            <exception cref="T:System.InvalidOperationException">No information exists for the <see cref="T:Vanara.PInvoke.Shell32.ControlPanelItem"/> value.</exception>
        </member>
        <member name="M:Vanara.Extensions.ControlPanelItemExtensions.Guid(Vanara.PInvoke.Shell32.ControlPanelItem)">
            <summary>Gets the GUID for a Control Panel item.</summary>
            <param name="cp">The <see cref="T:Vanara.PInvoke.Shell32.ControlPanelItem"/> value.</param>
            <returns>The GUID.</returns>
            <exception cref="T:System.InvalidOperationException">No information exists for the <see cref="T:Vanara.PInvoke.Shell32.ControlPanelItem"/> value.</exception>
        </member>
        <member name="M:Vanara.Extensions.ControlPanelItemExtensions.MinClient(Vanara.PInvoke.Shell32.ControlPanelItem)">
            <summary>Gets the minimum Windows client for a Control Panel item.</summary>
            <param name="cp">The <see cref="T:Vanara.PInvoke.Shell32.ControlPanelItem"/> value.</param>
            <returns>The minimum Windows client.</returns>
            <exception cref="T:System.InvalidOperationException">No information exists for the <see cref="T:Vanara.PInvoke.Shell32.ControlPanelItem"/> value.</exception>
        </member>
        <member name="M:Vanara.Extensions.ControlPanelItemExtensions.ModuleName(Vanara.PInvoke.Shell32.ControlPanelItem)">
            <summary>Gets the module name for a Control Panel item.</summary>
            <param name="cp">The <see cref="T:Vanara.PInvoke.Shell32.ControlPanelItem"/> value.</param>
            <returns>The module name.</returns>
            <exception cref="T:System.InvalidOperationException">No information exists for the <see cref="T:Vanara.PInvoke.Shell32.ControlPanelItem"/> value.</exception>
        </member>
        <member name="M:Vanara.Extensions.ControlPanelItemExtensions.ValidPages(Vanara.PInvoke.Shell32.ControlPanelItem)">
            <summary>Gets the list of valid pages for a Control Panel item.</summary>
            <param name="cp">The <see cref="T:Vanara.PInvoke.Shell32.ControlPanelItem"/> value.</param>
            <returns>The list of valid pages.</returns>
            <exception cref="T:System.InvalidOperationException">No information exists for the <see cref="T:Vanara.PInvoke.Shell32.ControlPanelItem"/> value.</exception>
        </member>
    </members>
</doc>
