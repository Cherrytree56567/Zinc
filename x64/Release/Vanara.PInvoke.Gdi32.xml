<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Vanara.PInvoke.Gdi32</name>
    </assembly>
    <members>
        <member name="T:Vanara.PInvoke.Gdi32">
            <summary>Functions and types from Gdi32.dll.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.CBM">
            <summary>Flags for CreateDIBitmap.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.CBM.CBM_INIT">
            <summary>
            If this flag is set, the system uses the data pointed to by the lpbInit and lpbmi parameters to initialize the bitmap bits.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.DIBColorMode">
            <summary>Specifies the type of color values in DIB functions.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DIBColorMode.DIB_RGB_COLORS">
            <summary>The BITMAPINFO structure contains an array of literal RGB values.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DIBColorMode.DIB_PAL_COLORS">
            <summary>
            The bmiColors member of the BITMAPINFO structure is an array of 16-bit indexes into the logical palette of the device context
            specified by hdc.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.FloodFillType">
            <summary>The type of fill operation to be performed.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.FloodFillType.FLOODFILLBORDER">
            <summary>
            The fill area is bounded by the color specified by the crColor parameter. This style is identical to the filling performed by
            the FloodFill function.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.FloodFillType.FLOODFILLSURFACE">
            <summary>
            The fill area is defined by the color that is specified by crColor. Filling continues outward in all directions as long as
            the color is encountered. This style is useful for filling areas with multicolored boundaries.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.GradientFillMode">
            <summary>Flags for <see cref="M:Vanara.PInvoke.Gdi32.GradientFill(Vanara.PInvoke.HDC,Vanara.PInvoke.Gdi32.TRIVERTEX[],System.UInt32,Vanara.PInvoke.Gdi32.GRADIENT_TRIANGLE[],System.UInt32,Vanara.PInvoke.Gdi32.GradientFillMode)"/>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.GradientFillMode.GRADIENT_FILL_RECT_H">
            <summary>
            In this mode, two endpoints describe a rectangle. The rectangle is defined to have a constant color (specified by the
            TRIVERTEX structure) for the left and right edges. GDI interpolates the color from the left to right edge and fills the interior.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.GradientFillMode.GRADIENT_FILL_RECT_V">
            <summary>
            In this mode, two endpoints describe a rectangle. The rectangle is defined to have a constant color (specified by the
            TRIVERTEX structure) for the top and bottom edges. GDI interpolates the color from the top to bottom edge and fills the interior.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.GradientFillMode.GRADIENT_FILL_TRIANGLE">
            <summary>
            In this mode, an array of TRIVERTEX structures is passed to GDI along with a list of array indexes that describe separate
            triangles. GDI performs linear interpolation between triangle vertices and fills the interior. Drawing is done directly in
            24- and 32-bpp modes. Dithering is performed in 16-, 8-, 4-, and 1-bpp mode.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.GradientFillMode.GRADIENT_FILL_OP_FLAG">
            <summary>Undocumented.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.RasterOperationMode">
            <summary>
            Defines how the color data for the source rectangle is to be combined with the color data for the destination rectangle to
            achieve the final color when using the <see cref="M:Vanara.PInvoke.Gdi32.BitBlt(Vanara.PInvoke.HDC,System.Int32,System.Int32,System.Int32,System.Int32,Vanara.PInvoke.HDC,System.Int32,System.Int32,Vanara.PInvoke.Gdi32.RasterOperationMode)"/> function.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RasterOperationMode.SRCCOPY">
            <summary>Copies the source rectangle directly to the destination rectangle.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RasterOperationMode.SRCPAINT">
            <summary>Combines the colors of the source and destination rectangles by using the Boolean OR operator.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RasterOperationMode.SRCAND">
            <summary>Combines the colors of the source and destination rectangles by using the Boolean AND operator.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RasterOperationMode.SRCINVERT">
            <summary>Combines the colors of the source and destination rectangles by using the Boolean XOR operator.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RasterOperationMode.SRCERASE">
            <summary>
            Combines the inverted colors of the destination rectangle with the colors of the source rectangle by using the Boolean AND operator.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RasterOperationMode.NOTSRCCOPY">
            <summary></summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RasterOperationMode.NOTSRCERASE">
            <summary>Copies the inverted source rectangle to the destination.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RasterOperationMode.MERGECOPY">
            <summary>
            Merges the colors of the source rectangle with the brush currently selected in hdcDest, by using the Boolean AND operator.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RasterOperationMode.MERGEPAINT">
            <summary>
            Merges the colors of the inverted source rectangle with the colors of the destination rectangle by using the Boolean OR operator.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RasterOperationMode.PATCOPY">
            <summary>Copies the brush currently selected in hdcDest, into the destination bitmap.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RasterOperationMode.PATPAINT">
            <summary>
            Combines the colors of the brush currently selected in hdcDest, with the colors of the inverted source rectangle by using the
            Boolean OR operator. The result of this operation is combined with the colors of the destination rectangle by using the
            Boolean OR operator.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RasterOperationMode.PATINVERT">
            <summary>
            Combines the colors of the brush currently selected in hdcDest, with the colors of the destination rectangle by using the
            Boolean XOR operator.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RasterOperationMode.DSTINVERT">
            <summary>Inverts the destination rectangle.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RasterOperationMode.BLACKNESS">
            <summary>
            Fills the destination rectangle using the color associated with index 0 in the physical palette. (This color is black for the
            default physical palette.)
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RasterOperationMode.WHITENESS">
            <summary>
            Fills the destination rectangle using the color associated with index 1 in the physical palette. (This color is white for the
            default physical palette.)
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RasterOperationMode.NOMIRRORBITMAP">
            <summary>Prevents the bitmap from being mirrored.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RasterOperationMode.CAPTUREBLT">
            <summary>
            Includes any windows that are layered on top of your window in the resulting image.By default, the image only contains your
            window.Note that this generally cannot be used for printing device contexts.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.StretchMode">
            <summary>Stretching mode.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.StretchMode.BLACKONWHITE">
            <summary>
            Performs a Boolean AND operation using the color values for the eliminated and existing pixels. If the bitmap is a monochrome
            bitmap, this mode preserves black pixels at the expense of white pixels.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.StretchMode.WHITEONBLACK">
            <summary>
            Performs a Boolean OR operation using the color values for the eliminated and existing pixels. If the bitmap is a monochrome
            bitmap, this mode preserves white pixels at the expense of black pixels.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.StretchMode.COLORONCOLOR">
            <summary>Deletes the pixels. This mode deletes all eliminated lines of pixels without trying to preserve their information.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.StretchMode.HALFTONE">
            <summary>
            Maps pixels from the source rectangle into blocks of pixels in the destination rectangle. The average color over the
            destination block of pixels approximates the color of the source pixels.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.StretchMode.STRETCH_ANDSCANS">
            <summary>Same as BLACKONWHITE.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.StretchMode.STRETCH_ORSCANS">
            <summary>Same as WHITEONBLACK.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.StretchMode.STRETCH_DELETESCANS">
            <summary>Same as COLORONCOLOR.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.StretchMode.STRETCH_HALFTONE">
            <summary>Same as HALFTONE.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.AlphaBlend(Vanara.PInvoke.HDC,System.Int32,System.Int32,System.Int32,System.Int32,Vanara.PInvoke.HDC,System.Int32,System.Int32,System.Int32,System.Int32,Vanara.PInvoke.Gdi32.BLENDFUNCTION)">
            <summary>The AlphaBlend function displays bitmaps that have transparent or semitransparent pixels.</summary>
            <param name="hdcDest">A handle to the destination device context.</param>
            <param name="nXOriginDest">The x-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
            <param name="nYOriginDest">The y-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
            <param name="nWidthDest">The width, in logical units, of the destination rectangle.</param>
            <param name="nHeightDest">The height, in logical units, of the destination rectangle.</param>
            <param name="hdcSrc">A handle to the source device context.</param>
            <param name="nXOriginSrc">The x-coordinate, in logical units, of the upper-left corner of the source rectangle.</param>
            <param name="nYOriginSrc">The y-coordinate, in logical units, of the upper-left corner of the source rectangle.</param>
            <param name="nWidthSrc">The width, in logical units, of the source rectangle.</param>
            <param name="nHeightSrc">The height, in logical units, of the source rectangle.</param>
            <param name="blendFunction">
            The alpha-blending function for source and destination bitmaps, a global alpha value to be applied to the entire source bitmap,
            and format information for the source bitmap. The source and destination blend functions are currently limited to AC_SRC_OVER.
            </param>
            <returns>If the function succeeds, the return value is TRUE. If the function fails, the return value is FALSE.</returns>
            <remarks>
            If the source rectangle and destination rectangle are not the same size, the source bitmap is stretched to match the destination
            rectangle. If the SetStretchBltMode function is used, the iStretchMode value is automatically converted to COLORONCOLOR for this
            function (that is, BLACKONWHITE, WHITEONBLACK, and HALFTONE are changed to COLORONCOLOR).
            <para>
            The destination coordinates are transformed by using the transformation currently specified for the destination device context.
            The source coordinates are transformed by using the transformation currently specified for the source device context.
            </para>
            <para>An error occurs (and the function returns FALSE) if the source device context identifies an enhanced metafile device context.</para>
            <para>
            If destination and source bitmaps do not have the same color format, AlphaBlend converts the source bitmap to match the
            destination bitmap.
            </para>
            <para>
            AlphaBlend does not support mirroring. If either the width or height of the source or destination is negative, this call will fail.
            </para>
            <para>
            When rendering to a printer, first call GetDeviceCaps with SHADEBLENDCAPS to determine if the printer supports blending with
            AlphaBlend. Note that, for a display DC, all blending operations are supported and these flags represent whether the operations
            are accelerated.
            </para>
            <para>
            If the source and destination are the same surface that is, they are both the screen or the same memory bitmap and the source and
            destination rectangles overlap, an error occurs and the function returns FALSE.
            </para>
            <para>
            The source rectangle must lie completely within the source surface, otherwise an error occurs and the function returns FALSE.
            </para>
            <para>AlphaBlend fails if the width or height of the source or destination is negative.</para>
            <para>
            The SourceConstantAlpha member of BLENDFUNCTION specifies an alpha transparency value to be used on the entire source bitmap. The
            SourceConstantAlpha value is combined with any per-pixel alpha values. If SourceConstantAlpha is 0, it is assumed that the image
            is transparent. Set the SourceConstantAlpha value to 255 (which indicates that the image is opaque) when you only want to use
            per-pixel alpha values.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.BitBlt(Vanara.PInvoke.HDC,System.Int32,System.Int32,System.Int32,System.Int32,Vanara.PInvoke.HDC,System.Int32,System.Int32,Vanara.PInvoke.Gdi32.RasterOperationMode)">
            <summary>
            The BitBlt function performs a bit-block transfer of the color data corresponding to a rectangle of pixels from the specified
            source device context into a destination device context.
            </summary>
            <param name="hdc">A handle to the destination device context.</param>
            <param name="nXDest">The x-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
            <param name="nYDest">The y-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
            <param name="nWidth">The width, in logical units, of the destination rectangle.</param>
            <param name="nHeight">The height, in logical units, of the destination rectangle.</param>
            <param name="hdcSrc">A handle to the source device context.</param>
            <param name="nXSrc">The x-coordinate, in logical units, of the upper-left corner of the source rectangle.</param>
            <param name="nYSrc">The y-coordinate, in logical units, of the upper-left corner of the source rectangle.</param>
            <param name="dwRop">
            A raster-operation code. These codes define how the color data for the source rectangle is to be combined with the color data for
            the destination rectangle to achieve the final color.
            </param>
            <returns>
            If the function succeeds, the return value is nonzero.
            <para>If the function fails, the return value is zero. To get extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            BitBlt only does clipping on the destination DC.
            <para>
            If a rotation or shear transformation is in effect in the source device context, BitBlt returns an error. If other
            transformations exist in the source device context (and a matching transformation is not in effect in the destination device
            context), the rectangle in the destination device context is stretched, compressed, or rotated, as necessary.
            </para>
            <para>
            If the color formats of the source and destination device contexts do not match, the BitBlt function converts the source color
            format to match the destination format.
            </para>
            <para>
            When an enhanced metafile is being recorded, an error occurs if the source device context identifies an enhanced-metafile device context.
            </para>
            <para>
            Not all devices support the BitBlt function. For more information, see the RC_BITBLT raster capability entry in the GetDeviceCaps
            function as well as the following functions: MaskBlt, PlgBlt, and StretchBlt.
            </para>
            <para>
            BitBlt returns an error if the source and destination device contexts represent different devices. To transfer data between DCs
            for different devices, convert the memory bitmap to a DIB by calling GetDIBits. To display the DIB to the second device, call
            SetDIBits or StretchDIBits.
            </para>
            <para>ICM: No color management is performed when blits occur.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.CreateBitmap(System.Int32,System.Int32,System.UInt32,System.UInt32,System.IntPtr)">
            <summary>
            The <c>CreateBitmap</c> function creates a bitmap with the specified width, height, and color format (color planes and bits-per-pixel).
            </summary>
            <param name="nWidth">The bitmap width, in pixels.</param>
            <param name="nHeight">The bitmap height, in pixels.</param>
            <param name="nPlanes">The number of color planes used by the device.</param>
            <param name="nBitCount">The number of bits required to identify the color of a single pixel.</param>
            <param name="lpBits">
            A pointer to an array of color data used to set the colors in a rectangle of pixels. Each scan line in the rectangle must be word
            aligned (scan lines that are not word aligned must be padded with zeros). If this parameter is <c>NULL</c>, the contents of the
            new bitmap is undefined.
            </param>
            <returns>
            <para>If the function succeeds, the return value is a handle to a bitmap.</para>
            <para>If the function fails, the return value is <c>NULL</c>.</para>
            <para>This function can return the following value.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_INVALID_BITMAP</term>
            <term>The calculated size of the bitmap is less than zero.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The <c>CreateBitmap</c> function creates a device-dependent bitmap.</para>
            <para>
            After a bitmap is created, it can be selected into a device context by calling the SelectObject function. However, the bitmap can
            only be selected into a device context if the bitmap and the DC have the same format.
            </para>
            <para>
            The <c>CreateBitmap</c> function can be used to create color bitmaps. However, for performance reasons applications should use
            <c>CreateBitmap</c> to create monochrome bitmaps and CreateCompatibleBitmap to create color bitmaps. Whenever a color bitmap
            returned from <c>CreateBitmap</c> is selected into a device context, the system checks that the bitmap matches the format of the
            device context it is being selected into. Because <c>CreateCompatibleBitmap</c> takes a device context, it returns a bitmap that
            has the same format as the specified device context. Thus, subsequent calls to SelectObject are faster with a color bitmap from
            <c>CreateCompatibleBitmap</c> than with a color bitmap returned from <c>CreateBitmap</c>.
            </para>
            <para>
            If the bitmap is monochrome, zeros represent the foreground color and ones represent the background color for the destination
            device context.
            </para>
            <para>
            If an application sets the nWidth or nHeight parameters to zero, <c>CreateBitmap</c> returns the handle to a 1-by-1 pixel,
            monochrome bitmap.
            </para>
            <para>When you no longer need the bitmap, call the DeleteObject function to delete it.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.CreateBitmap(System.Int32,System.Int32,System.UInt32,System.UInt32,System.Byte[])">
            <summary>
            The <c>CreateBitmap</c> function creates a bitmap with the specified width, height, and color format (color planes and bits-per-pixel).
            </summary>
            <param name="nWidth">The bitmap width, in pixels.</param>
            <param name="nHeight">The bitmap height, in pixels.</param>
            <param name="nPlanes">The number of color planes used by the device.</param>
            <param name="nBitCount">The number of bits required to identify the color of a single pixel.</param>
            <param name="lpBits">
            A pointer to an array of color data used to set the colors in a rectangle of pixels. Each scan line in the rectangle must be word
            aligned (scan lines that are not word aligned must be padded with zeros). If this parameter is <c>NULL</c>, the contents of the
            new bitmap is undefined.
            </param>
            <returns>
            <para>If the function succeeds, the return value is a handle to a bitmap.</para>
            <para>If the function fails, the return value is <c>NULL</c>.</para>
            <para>This function can return the following value.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_INVALID_BITMAP</term>
            <term>The calculated size of the bitmap is less than zero.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The <c>CreateBitmap</c> function creates a device-dependent bitmap.</para>
            <para>
            After a bitmap is created, it can be selected into a device context by calling the SelectObject function. However, the bitmap can
            only be selected into a device context if the bitmap and the DC have the same format.
            </para>
            <para>
            The <c>CreateBitmap</c> function can be used to create color bitmaps. However, for performance reasons applications should use
            <c>CreateBitmap</c> to create monochrome bitmaps and CreateCompatibleBitmap to create color bitmaps. Whenever a color bitmap
            returned from <c>CreateBitmap</c> is selected into a device context, the system checks that the bitmap matches the format of the
            device context it is being selected into. Because <c>CreateCompatibleBitmap</c> takes a device context, it returns a bitmap that
            has the same format as the specified device context. Thus, subsequent calls to SelectObject are faster with a color bitmap from
            <c>CreateCompatibleBitmap</c> than with a color bitmap returned from <c>CreateBitmap</c>.
            </para>
            <para>
            If the bitmap is monochrome, zeros represent the foreground color and ones represent the background color for the destination
            device context.
            </para>
            <para>
            If an application sets the nWidth or nHeight parameters to zero, <c>CreateBitmap</c> returns the handle to a 1-by-1 pixel,
            monochrome bitmap.
            </para>
            <para>When you no longer need the bitmap, call the DeleteObject function to delete it.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.CreateBitmapIndirect(Vanara.PInvoke.Gdi32.BITMAP@)">
            <summary>
            The <c>CreateBitmapIndirect</c> function creates a bitmap with the specified width, height, and color format (color planes and bits-per-pixel).
            </summary>
            <param name="pbm">
            A pointer to a BITMAP structure that contains information about the bitmap. If an application sets the <c>bmWidth</c> or
            <c>bmHeight</c> members to zero, <c>CreateBitmapIndirect</c> returns the handle to a 1-by-1 pixel, monochrome bitmap.
            </param>
            <returns>
            <para>If the function succeeds, the return value is a handle to the bitmap.</para>
            <para>If the function fails, the return value is <c>NULL</c>.</para>
            <para>This function can return the following values.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>One or more of the input parameters is invalid.</term>
            </item>
            <item>
            <term>ERROR_NOT_ENOUGH_MEMORY</term>
            <term>The bitmap is too big for memory to be allocated.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The <c>CreateBitmapIndirect</c> function creates a device-dependent bitmap.</para>
            <para>
            After a bitmap is created, it can be selected into a device context by calling the SelectObject function. However, the bitmap can
            only be selected into a device context if the bitmap and the DC have the same format.
            </para>
            <para>
            While the <c>CreateBitmapIndirect</c> function can be used to create color bitmaps, for performance reasons applications should
            use <c>CreateBitmapIndirect</c> to create monochrome bitmaps and CreateCompatibleBitmap to create color bitmaps. Whenever a color
            bitmap from <c>CreateBitmapIndirect</c> is selected into a device context, the system must ensure that the bitmap matches the
            format of the device context it is being selected into. Because <c>CreateCompatibleBitmap</c> takes a device context, it returns
            a bitmap that has the same format as the specified device context. Thus, subsequent calls to SelectObject are faster with a color
            bitmap from <c>CreateCompatibleBitmap</c> than with a color bitmap returned from <c>CreateBitmapIndirect</c>.
            </para>
            <para>
            If the bitmap is monochrome, zeros represent the foreground color and ones represent the background color for the destination
            device context.
            </para>
            <para>When you no longer need the bitmap, call the DeleteObject function to delete it.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.CreateCompatibleBitmap(Vanara.PInvoke.HDC,System.Int32,System.Int32)">
            <summary>
            The <c>CreateCompatibleBitmap</c> function creates a bitmap compatible with the device that is associated with the specified
            device context.
            </summary>
            <param name="hdc">A handle to a device context.</param>
            <param name="cx">The bitmap width, in pixels.</param>
            <param name="cy">The bitmap height, in pixels.</param>
            <returns>
            <para>If the function succeeds, the return value is a handle to the compatible bitmap (DDB).</para>
            <para>If the function fails, the return value is <c>NULL</c>.</para>
            </returns>
            <remarks>
            <para>
            The color format of the bitmap created by the <c>CreateCompatibleBitmap</c> function matches the color format of the device
            identified by the hdc parameter. This bitmap can be selected into any memory device context that is compatible with the original device.
            </para>
            <para>
            Because memory device contexts allow both color and monochrome bitmaps, the format of the bitmap returned by the
            <c>CreateCompatibleBitmap</c> function differs when the specified device context is a memory device context. However, a
            compatible bitmap that was created for a nonmemory device context always possesses the same color format and uses the same color
            palette as the specified device context.
            </para>
            <para>
            Note: When a memory device context is created, it initially has a 1-by-1 monochrome bitmap selected into it. If this memory
            device context is used in <c>CreateCompatibleBitmap</c>, the bitmap that is created is a monochrome bitmap. To create a color
            bitmap, use the <c>HDC</c> that was used to create the memory device context, as shown in the following code:
            </para>
            <para>
            If an application sets the nWidth or nHeight parameters to zero, <c>CreateCompatibleBitmap</c> returns the handle to a 1-by-1
            pixel, monochrome bitmap.
            </para>
            <para>
            If a DIB section, which is a bitmap created by the CreateDIBSection function, is selected into the device context identified by
            the hdc parameter, <c>CreateCompatibleBitmap</c> creates a DIB section.
            </para>
            <para>When you no longer need the bitmap, call the DeleteObject function to delete it.</para>
            <para>Examples</para>
            <para>For an example, see Scaling an Image.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.CreateDIBitmap(Vanara.PInvoke.HDC,Vanara.PInvoke.Gdi32.BITMAPINFOHEADER@,Vanara.PInvoke.Gdi32.CBM,System.Byte[],Vanara.PInvoke.Gdi32.BITMAPINFO@,Vanara.PInvoke.Gdi32.DIBColorMode)">
            <summary>
            The <c>CreateDIBitmap</c> function creates a compatible bitmap (DDB) from a DIB and, optionally, sets the bitmap bits.
            </summary>
            <param name="hdc">A handle to a device context.</param>
            <param name="pbmih">
            <para>A pointer to a bitmap information header structure, BITMAPV5HEADER.</para>
            <para>
            If fdwInit is CBM_INIT, the function uses the bitmap information header structure to obtain the desired width and height of the
            bitmap as well as other information. Note that a positive value for the height indicates a bottom-up DIB while a negative value
            for the height indicates a top-down DIB. Calling <c>CreateDIBitmap</c> with fdwInit as CBM_INIT is equivalent to calling the
            CreateCompatibleBitmap function to create a DDB in the format of the device and then calling the SetDIBits function to translate
            the DIB bits to the DDB.
            </para>
            </param>
            <param name="flInit">
            <para>Specifies how the system initializes the bitmap bits. The following value is defined.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CBM_INIT</term>
            <term>
            If this flag is set, the system uses the data pointed to by the lpbInit and lpbmi parameters to initialize the bitmap bits. If
            this flag is clear, the data pointed to by those parameters is not used.
            </term>
            </item>
            </list>
            <para>If fdwInit is zero, the system does not initialize the bitmap bits.</para>
            </param>
            <param name="pjBits">
            A pointer to an array of bytes containing the initial bitmap data. The format of the data depends on the <c>biBitCount</c> member
            of the BITMAPINFO structure to which the lpbmi parameter points.
            </param>
            <param name="pbmi">
            A pointer to a BITMAPINFO structure that describes the dimensions and color format of the array pointed to by the lpbInit parameter.
            </param>
            <param name="iUsage">
            <para>
            Specifies whether the <c>bmiColors</c> member of the BITMAPINFO structure was initialized and, if so, whether <c>bmiColors</c>
            contains explicit red, green, blue (RGB) values or palette indexes. The fuUsage parameter must be one of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>DIB_PAL_COLORS</term>
            <term>
            A color table is provided and consists of an array of 16-bit indexes into the logical palette of the device context into which
            the bitmap is to be selected.
            </term>
            </item>
            <item>
            <term>DIB_RGB_COLORS</term>
            <term>A color table is provided and contains literal RGB values.</term>
            </item>
            </list>
            </param>
            <returns>
            <para>If the function succeeds, the return value is a handle to the compatible bitmap.</para>
            <para>If the function fails, the return value is <c>NULL</c>.</para>
            </returns>
            <remarks>
            <para>
            The DDB that is created will be whatever bit depth your reference DC is. To create a bitmap that is of different bit depth, use CreateDIBSection.
            </para>
            <para>
            For a device to reach optimal bitmap-drawing speed, specify fdwInit as CBM_INIT. Then, use the same color depth DIB as the video
            mode. When the video is running 4- or 8-bpp, use DIB_PAL_COLORS.
            </para>
            <para>The CBM_CREATDIB flag for the fdwInit parameter is no longer supported.</para>
            <para>When you no longer need the bitmap, call the DeleteObject function to delete it.</para>
            <para>
            <c>ICM:</c> No color management is performed. The contents of the resulting bitmap are not color matched after the bitmap has
            been created.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.CreateDIBitmap(Vanara.PInvoke.HDC,System.IntPtr,Vanara.PInvoke.Gdi32.CBM,System.Byte[],Vanara.PInvoke.Gdi32.SafeBITMAPINFO,Vanara.PInvoke.Gdi32.DIBColorMode)">
            <summary>
            The <c>CreateDIBitmap</c> function creates a compatible bitmap (DDB) from a DIB and, optionally, sets the bitmap bits.
            </summary>
            <param name="hdc">A handle to a device context.</param>
            <param name="pbmih">
            <para>A pointer to a bitmap information header structure, BITMAPV5HEADER.</para>
            <para>
            If fdwInit is CBM_INIT, the function uses the bitmap information header structure to obtain the desired width and height of the
            bitmap as well as other information. Note that a positive value for the height indicates a bottom-up DIB while a negative value
            for the height indicates a top-down DIB. Calling <c>CreateDIBitmap</c> with fdwInit as CBM_INIT is equivalent to calling the
            CreateCompatibleBitmap function to create a DDB in the format of the device and then calling the SetDIBits function to translate
            the DIB bits to the DDB.
            </para>
            </param>
            <param name="flInit">
            <para>Specifies how the system initializes the bitmap bits. The following value is defined.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CBM_INIT</term>
            <term>
            If this flag is set, the system uses the data pointed to by the lpbInit and lpbmi parameters to initialize the bitmap bits. If
            this flag is clear, the data pointed to by those parameters is not used.
            </term>
            </item>
            </list>
            <para>If fdwInit is zero, the system does not initialize the bitmap bits.</para>
            </param>
            <param name="pjBits">
            A pointer to an array of bytes containing the initial bitmap data. The format of the data depends on the <c>biBitCount</c> member
            of the BITMAPINFO structure to which the lpbmi parameter points.
            </param>
            <param name="pbmi">
            A pointer to a BITMAPINFO structure that describes the dimensions and color format of the array pointed to by the lpbInit parameter.
            </param>
            <param name="iUsage">
            <para>
            Specifies whether the <c>bmiColors</c> member of the BITMAPINFO structure was initialized and, if so, whether <c>bmiColors</c>
            contains explicit red, green, blue (RGB) values or palette indexes. The fuUsage parameter must be one of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>DIB_PAL_COLORS</term>
            <term>
            A color table is provided and consists of an array of 16-bit indexes into the logical palette of the device context into which
            the bitmap is to be selected.
            </term>
            </item>
            <item>
            <term>DIB_RGB_COLORS</term>
            <term>A color table is provided and contains literal RGB values.</term>
            </item>
            </list>
            </param>
            <returns>
            <para>If the function succeeds, the return value is a handle to the compatible bitmap.</para>
            <para>If the function fails, the return value is <c>NULL</c>.</para>
            </returns>
            <remarks>
            <para>
            The DDB that is created will be whatever bit depth your reference DC is. To create a bitmap that is of different bit depth, use CreateDIBSection.
            </para>
            <para>
            For a device to reach optimal bitmap-drawing speed, specify fdwInit as CBM_INIT. Then, use the same color depth DIB as the video
            mode. When the video is running 4- or 8-bpp, use DIB_PAL_COLORS.
            </para>
            <para>The CBM_CREATDIB flag for the fdwInit parameter is no longer supported.</para>
            <para>When you no longer need the bitmap, call the DeleteObject function to delete it.</para>
            <para>
            <c>ICM:</c> No color management is performed. The contents of the resulting bitmap are not color matched after the bitmap has
            been created.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.CreateDIBSection(Vanara.PInvoke.HDC,Vanara.PInvoke.Gdi32.BITMAPINFO@,Vanara.PInvoke.Gdi32.DIBColorMode,System.IntPtr@,Vanara.PInvoke.Gdi32.HSECTION,System.UInt32)">
            <summary>
            The <c>CreateDIBSection</c> function creates a DIB that applications can write to directly. The function gives you a pointer to
            the location of the bitmap bit values. You can supply a handle to a file-mapping object that the function will use to create the
            bitmap, or you can let the system allocate the memory for the bitmap.
            </summary>
            <param name="hdc">
            A handle to a device context. If the value of iUsage is DIB_PAL_COLORS, the function uses this device context's logical palette
            to initialize the DIB colors.
            </param>
            <param name="pbmi">
            A pointer to a BITMAPINFO structure that specifies various attributes of the DIB, including the bitmap dimensions and colors.
            </param>
            <param name="usage">
            <para>
            The type of data contained in the <c>bmiColors</c> array member of the BITMAPINFO structure pointed to by pbmi (either logical
            palette indexes or literal RGB values). The following values are defined.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>DIB_PAL_COLORS</term>
            <term>The bmiColors member is an array of 16-bit indexes into the logical palette of the device context specified by hdc.</term>
            </item>
            <item>
            <term>DIB_RGB_COLORS</term>
            <term>The BITMAPINFO structure contains an array of literal RGB values.</term>
            </item>
            </list>
            </param>
            <param name="ppvBits">A pointer to a variable that receives a pointer to the location of the DIB bit values.</param>
            <param name="hSection">
            <para>A handle to a file-mapping object that the function will use to create the DIB. This parameter can be <c>NULL</c>.</para>
            <para>
            If hSection is not <c>NULL</c>, it must be a handle to a file-mapping object created by calling the CreateFileMapping function
            with the PAGE_READWRITE or PAGE_WRITECOPY flag. Read-only DIB sections are not supported. Handles created by other means will
            cause <c>CreateDIBSection</c> to fail.
            </para>
            <para>
            If hSection is not <c>NULL</c>, the <c>CreateDIBSection</c> function locates the bitmap bit values at offset dwOffset in the
            file-mapping object referred to by hSection. An application can later retrieve the hSection handle by calling the GetObject
            function with the <c>HBITMAP</c> returned by <c>CreateDIBSection</c>.
            </para>
            <para>
            If hSection is <c>NULL</c>, the system allocates memory for the DIB. In this case, the <c>CreateDIBSection</c> function ignores
            the dwOffset parameter. An application cannot later obtain a handle to this memory. The <c>dshSection</c> member of the
            DIBSECTION structure filled in by calling the GetObject function will be <c>NULL</c>.
            </para>
            </param>
            <param name="offset">
            The offset from the beginning of the file-mapping object referenced by hSection where storage for the bitmap bit values is to
            begin. This value is ignored if hSection is <c>NULL</c>. The bitmap bit values are aligned on doubleword boundaries, so dwOffset
            must be a multiple of the size of a <c>DWORD</c>.
            </param>
            <returns>
            <para>
            If the function succeeds, the return value is a handle to the newly created DIB, and *ppvBits points to the bitmap bit values.
            </para>
            <para>If the function fails, the return value is <c>NULL</c>, and *ppvBits is <c>NULL</c>.</para>
            <para>This function can return the following value.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>One or more of the input parameters is invalid.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            As noted above, if hSection is <c>NULL</c>, the system allocates memory for the DIB. The system closes the handle to that memory
            when you later delete the DIB by calling the DeleteObject function. If hSection is not <c>NULL</c>, you must close the hSection
            memory handle yourself after calling <c>DeleteObject</c> to delete the bitmap.
            </para>
            <para>You cannot paste a DIB section from one application into another application.</para>
            <para>
            <c>CreateDIBSection</c> does not use the BITMAPINFOHEADER parameters biXPelsPerMeter or biYPelsPerMeter and will not provide
            resolution information in the BITMAPINFO structure.
            </para>
            <para>
            You need to guarantee that the GDI subsystem has completed any drawing to a bitmap created by <c>CreateDIBSection</c> before you
            draw to the bitmap yourself. Access to the bitmap must be synchronized. Do this by calling the GdiFlush function. This applies to
            any use of the pointer to the bitmap bit values, including passing the pointer in calls to functions such as SetDIBits.
            </para>
            <para><c>ICM:</c> No color management is done.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.CreateDIBSection(Vanara.PInvoke.HDC,Vanara.PInvoke.Gdi32.SafeBITMAPINFO,Vanara.PInvoke.Gdi32.DIBColorMode,System.IntPtr@,Vanara.PInvoke.Gdi32.HSECTION,System.UInt32)">
            <summary>
            The <c>CreateDIBSection</c> function creates a DIB that applications can write to directly. The function gives you a pointer to
            the location of the bitmap bit values. You can supply a handle to a file-mapping object that the function will use to create the
            bitmap, or you can let the system allocate the memory for the bitmap.
            </summary>
            <param name="hdc">
            A handle to a device context. If the value of iUsage is DIB_PAL_COLORS, the function uses this device context's logical palette
            to initialize the DIB colors.
            </param>
            <param name="pbmi">
            A pointer to a BITMAPINFO structure that specifies various attributes of the DIB, including the bitmap dimensions and colors.
            </param>
            <param name="usage">
            <para>
            The type of data contained in the <c>bmiColors</c> array member of the BITMAPINFO structure pointed to by pbmi (either logical
            palette indexes or literal RGB values). The following values are defined.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>DIB_PAL_COLORS</term>
            <term>The bmiColors member is an array of 16-bit indexes into the logical palette of the device context specified by hdc.</term>
            </item>
            <item>
            <term>DIB_RGB_COLORS</term>
            <term>The BITMAPINFO structure contains an array of literal RGB values.</term>
            </item>
            </list>
            </param>
            <param name="ppvBits">A pointer to a variable that receives a pointer to the location of the DIB bit values.</param>
            <param name="hSection">
            <para>A handle to a file-mapping object that the function will use to create the DIB. This parameter can be <c>NULL</c>.</para>
            <para>
            If hSection is not <c>NULL</c>, it must be a handle to a file-mapping object created by calling the CreateFileMapping function
            with the PAGE_READWRITE or PAGE_WRITECOPY flag. Read-only DIB sections are not supported. Handles created by other means will
            cause <c>CreateDIBSection</c> to fail.
            </para>
            <para>
            If hSection is not <c>NULL</c>, the <c>CreateDIBSection</c> function locates the bitmap bit values at offset dwOffset in the
            file-mapping object referred to by hSection. An application can later retrieve the hSection handle by calling the GetObject
            function with the <c>HBITMAP</c> returned by <c>CreateDIBSection</c>.
            </para>
            <para>
            If hSection is <c>NULL</c>, the system allocates memory for the DIB. In this case, the <c>CreateDIBSection</c> function ignores
            the dwOffset parameter. An application cannot later obtain a handle to this memory. The <c>dshSection</c> member of the
            DIBSECTION structure filled in by calling the GetObject function will be <c>NULL</c>.
            </para>
            </param>
            <param name="offset">
            The offset from the beginning of the file-mapping object referenced by hSection where storage for the bitmap bit values is to
            begin. This value is ignored if hSection is <c>NULL</c>. The bitmap bit values are aligned on doubleword boundaries, so dwOffset
            must be a multiple of the size of a <c>DWORD</c>.
            </param>
            <returns>
            <para>
            If the function succeeds, the return value is a handle to the newly created DIB, and *ppvBits points to the bitmap bit values.
            </para>
            <para>If the function fails, the return value is <c>NULL</c>, and *ppvBits is <c>NULL</c>.</para>
            <para>This function can return the following value.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>One or more of the input parameters is invalid.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            As noted above, if hSection is <c>NULL</c>, the system allocates memory for the DIB. The system closes the handle to that memory
            when you later delete the DIB by calling the DeleteObject function. If hSection is not <c>NULL</c>, you must close the hSection
            memory handle yourself after calling <c>DeleteObject</c> to delete the bitmap.
            </para>
            <para>You cannot paste a DIB section from one application into another application.</para>
            <para>
            <c>CreateDIBSection</c> does not use the BITMAPINFOHEADER parameters biXPelsPerMeter or biYPelsPerMeter and will not provide
            resolution information in the BITMAPINFO structure.
            </para>
            <para>
            You need to guarantee that the GDI subsystem has completed any drawing to a bitmap created by <c>CreateDIBSection</c> before you
            draw to the bitmap yourself. Access to the bitmap must be synchronized. Do this by calling the GdiFlush function. This applies to
            any use of the pointer to the bitmap bit values, including passing the pointer in calls to functions such as SetDIBits.
            </para>
            <para><c>ICM:</c> No color management is done.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.CreateDiscardableBitmap(Vanara.PInvoke.HDC,System.Int32,System.Int32)">
            <summary>
            <para>
            The <c>CreateDiscardableBitmap</c> function creates a discardable bitmap that is compatible with the specified device. The bitmap
            has the same bits-per-pixel format and the same color palette as the device. An application can select this bitmap as the current
            bitmap for a memory device that is compatible with the specified device.
            </para>
            <para>
            <c>Note</c> This function is provided only for compatibility with 16-bit versions of Windows. Applications should use the
            CreateCompatibleBitmap function.
            </para>
            </summary>
            <param name="hdc">A handle to a device context.</param>
            <param name="cx">The width, in pixels, of the bitmap.</param>
            <param name="cy">The height, in pixels, of the bitmap.</param>
            <returns>
            <para>If the function succeeds, the return value is a handle to the compatible bitmap (DDB).</para>
            <para>If the function fails, the return value is <c>NULL</c>.</para>
            </returns>
            <remarks>When you no longer need the bitmap, call the DeleteObject function to delete it.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.ExtFloodFill(Vanara.PInvoke.HDC,System.Int32,System.Int32,Vanara.PInvoke.COLORREF,Vanara.PInvoke.Gdi32.FloodFillType)">
            <summary>The <c>ExtFloodFill</c> function fills an area of the display surface with the current brush.</summary>
            <param name="hdc">A handle to a device context.</param>
            <param name="x">The x-coordinate, in logical units, of the point where filling is to start.</param>
            <param name="y">The y-coordinate, in logical units, of the point where filling is to start.</param>
            <param name="color">
            The color of the boundary or of the area to be filled. The interpretation of crColor depends on the value of the fuFillType
            parameter. To create a COLORREF color value, use the RGB macro.
            </param>
            <param name="type">
            <para>The type of fill operation to be performed. This parameter must be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>FLOODFILLBORDER</term>
            <term>
            The fill area is bounded by the color specified by the crColor parameter. This style is identical to the filling performed by the
            FloodFill function.
            </term>
            </item>
            <item>
            <term>FLOODFILLSURFACE</term>
            <term>
            The fill area is defined by the color that is specified by crColor. Filling continues outward in all directions as long as the
            color is encountered. This style is useful for filling areas with multicolored boundaries.
            </term>
            </item>
            </list>
            </param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>The following are some of the reasons this function might fail:</para>
            <list type="bullet">
            <item>
            <term>The filling could not be completed.</term>
            </item>
            <item>
            <term>The specified point has the boundary color specified by the crColor parameter (if FLOODFILLBORDER was requested).</term>
            </item>
            <item>
            <term>The specified point does not have the color specified by crColor (if FLOODFILLSURFACE was requested).</term>
            </item>
            <item>
            <term>The point is outside the clipping regionthat is, it is not visible on the device.</term>
            </item>
            </list>
            <para>
            If the fuFillType parameter is FLOODFILLBORDER, the system assumes that the area to be filled is completely bounded by the color
            specified by the crColor parameter. The function begins filling at the point specified by the nXStart and nYStart parameters and
            continues in all directions until it reaches the boundary.
            </para>
            <para>
            If fuFillType is FLOODFILLSURFACE, the system assumes that the area to be filled is a single color. The function begins to fill
            the area at the point specified by nXStart and nYStart and continues in all directions, filling all adjacent regions containing
            the color specified by crColor.
            </para>
            <para>
            Only memory device contexts and devices that support raster-display operations support the <c>ExtFloodFill</c> function. To
            determine whether a device supports this technology, use the GetDeviceCaps function.
            </para>
            <para>Examples</para>
            <para>For an example, see "Adding Lines and Graphs to a Menu" in Using Menus.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.FloodFill(Vanara.PInvoke.HDC,System.Int32,System.Int32,Vanara.PInvoke.COLORREF)">
            <summary>
            <para>
            The <c>FloodFill</c> function fills an area of the display surface with the current brush. The area is assumed to be bounded as
            specified by the crFill parameter.
            </para>
            <para>
            <c>Note</c> The <c>FloodFill</c> function is included only for compatibility with 16-bit versions of Windows. Applications should
            use the ExtFloodFill function with FLOODFILLBORDER specified.
            </para>
            </summary>
            <param name="hdc">A handle to a device context.</param>
            <param name="x">The x-coordinate, in logical units, of the point where filling is to start.</param>
            <param name="y">The y-coordinate, in logical units, of the point where filling is to start.</param>
            <param name="color">The color of the boundary or the area to be filled. To create a COLORREF color value, use the RGB macro.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>The following are reasons this function might fail:</para>
            <list type="bullet">
            <item>
            <term>The fill could not be completed.</term>
            </item>
            <item>
            <term>The given point has the boundary color specified by the crFill parameter.</term>
            </item>
            <item>
            <term>The given point lies outside the current clipping regionthat is, it is not visible on the device.</term>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetBitmapBits(Vanara.PInvoke.HBITMAP,System.Int32,System.Byte[])">
            <summary>
            <para>The <c>GetBitmapBits</c> function copies the bitmap bits of a specified device-dependent bitmap into a buffer.</para>
            <para>
            <c>Note</c> This function is provided only for compatibility with 16-bit versions of Windows. Applications should use the
            GetDIBits function.
            </para>
            </summary>
            <param name="hbit">A handle to the device-dependent bitmap.</param>
            <param name="cb">The number of bytes to copy from the bitmap into the buffer.</param>
            <param name="lpvBits">A pointer to a buffer to receive the bitmap bits. The bits are stored as an array of byte values.</param>
            <returns>
            <para>If the function succeeds, the return value is the number of bytes copied to the buffer.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetBitmapDimensionEx(Vanara.PInvoke.HBITMAP,Vanara.PInvoke.SIZE@)">
            <summary>
            The <c>GetBitmapDimensionEx</c> function retrieves the dimensions of a compatible bitmap. The retrieved dimensions must have been
            set by the SetBitmapDimensionEx function.
            </summary>
            <param name="hbit">A handle to a compatible bitmap (DDB).</param>
            <param name="lpsize">A pointer to a SIZE structure to receive the bitmap dimensions. For more information, see Remarks.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            The function returns a data structure that contains fields for the height and width of the bitmap, in .01-mm units. If those
            dimensions have not yet been set, the structure that is returned will have zeros in those fields.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetDIBColorTable(Vanara.PInvoke.HDC,System.UInt32,System.UInt32,Vanara.PInvoke.RGBQUAD[])">
            <summary>
            The <c>GetDIBColorTable</c> function retrieves RGB (red, green, blue) color values from a range of entries in the color table of
            the DIB section bitmap that is currently selected into a specified device context.
            </summary>
            <param name="hdc">A handle to a device context. A DIB section bitmap must be selected into this device context.</param>
            <param name="iStart">A zero-based color table index that specifies the first color table entry to retrieve.</param>
            <param name="cEntries">The number of color table entries to retrieve.</param>
            <param name="prgbq">
            A pointer to a buffer that receives an array of RGBQUAD data structures containing color information from the DIB color table.
            The buffer must be large enough to contain as many <c>RGBQUAD</c> data structures as the value of cEntries.
            </param>
            <returns>
            <para>If the function succeeds, the return value is the number of color table entries that the function retrieves.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            The <c>GetDIBColorTable</c> function should be called to retrieve the color table for DIB section bitmaps that use 1, 4, or 8
            bpp. The <c>biBitCount</c> member of a bitmap associated BITMAPINFOHEADER structure specifies the number of bits-per-pixel. DIB
            section bitmaps with a <c>biBitCount</c> value greater than eight do not have a color table, but they do have associated color
            masks. Call the GetObject function to retrieve those color masks.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetDIBits(Vanara.PInvoke.HDC,Vanara.PInvoke.HBITMAP,System.UInt32,System.UInt32,System.Byte[],Vanara.PInvoke.Gdi32.BITMAPINFO@,Vanara.PInvoke.Gdi32.DIBColorMode)">
            <summary>
            The <c>GetDIBits</c> function retrieves the bits of the specified compatible bitmap and copies them into a buffer as a DIB using
            the specified format.
            </summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="hbm">A handle to the bitmap. This must be a compatible bitmap (DDB).</param>
            <param name="start">The first scan line to retrieve.</param>
            <param name="cLines">The number of scan lines to retrieve.</param>
            <param name="lpvBits">
            A pointer to a buffer to receive the bitmap data. If this parameter is <c>NULL</c>, the function passes the dimensions and format
            of the bitmap to the BITMAPINFO structure pointed to by the lpbi parameter.
            </param>
            <param name="lpbmi">A pointer to a BITMAPINFO structure that specifies the desired format for the DIB data.</param>
            <param name="usage">
            <para>The format of the <c>bmiColors</c> member of the BITMAPINFO structure. It must be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>DIB_PAL_COLORS</term>
            <term>The color table should consist of an array of 16-bit indexes into the current logical palette.</term>
            </item>
            <item>
            <term>DIB_RGB_COLORS</term>
            <term>The color table should consist of literal red, green, blue (RGB) values.</term>
            </item>
            </list>
            </param>
            <returns>
            <para>
            If the lpvBits parameter is non- <c>NULL</c> and the function succeeds, the return value is the number of scan lines copied from
            the bitmap.
            </para>
            <para>
            If the lpvBits parameter is <c>NULL</c> and <c>GetDIBits</c> successfully fills the BITMAPINFO structure, the return value is nonzero.
            </para>
            <para>If the function fails, the return value is zero.</para>
            <para>This function can return the following value.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>One or more of the input parameters is invalid.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            If the requested format for the DIB matches its internal format, the RGB values for the bitmap are copied. If the requested
            format doesn't match the internal format, a color table is synthesized. The following table describes the color table synthesized
            for each format.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>1_BPP</term>
            <term>The color table consists of a black and a white entry.</term>
            </item>
            <item>
            <term>4_BPP</term>
            <term>The color table consists of a mix of colors identical to the standard VGA palette.</term>
            </item>
            <item>
            <term>8_BPP</term>
            <term>
            The color table consists of a general mix of 256 colors defined by GDI. (Included in these 256 colors are the 20 colors found in
            the default logical palette.)
            </term>
            </item>
            <item>
            <term>24_BPP</term>
            <term>No color table is returned.</term>
            </item>
            </list>
            <para>
            If the lpvBits parameter is a valid pointer, the first six members of the BITMAPINFOHEADER structure must be initialized to
            specify the size and format of the DIB. The scan lines must be aligned on a <c>DWORD</c> except for RLE compressed bitmaps.
            </para>
            <para>
            A bottom-up DIB is specified by setting the height to a positive number, while a top-down DIB is specified by setting the height
            to a negative number. The bitmap color table will be appended to the BITMAPINFO structure.
            </para>
            <para>
            If lpvBits is <c>NULL</c>, <c>GetDIBits</c> examines the first member of the first structure pointed to by lpbi. This member must
            specify the size, in bytes, of a BITMAPCOREHEADER or a BITMAPINFOHEADER structure. The function uses the specified size to
            determine how the remaining members should be initialized.
            </para>
            <para>
            If lpvBits is <c>NULL</c> and the bit count member of BITMAPINFO is initialized to zero, <c>GetDIBits</c> fills in a
            BITMAPINFOHEADER structure or BITMAPCOREHEADER without the color table. This technique can be used to query bitmap attributes.
            </para>
            <para>
            The bitmap identified by the hbmp parameter must not be selected into a device context when the application calls this function.
            </para>
            <para>
            The origin for a bottom-up DIB is the lower-left corner of the bitmap; the origin for a top-down DIB is the upper-left corner.
            </para>
            <para>Examples</para>
            <para>For an example, see Capturing an Image.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetDIBits(Vanara.PInvoke.HDC,Vanara.PInvoke.HBITMAP,System.UInt32,System.UInt32,System.IntPtr,Vanara.PInvoke.Gdi32.SafeBITMAPINFO,Vanara.PInvoke.Gdi32.DIBColorMode)">
            <summary>
            The <c>GetDIBits</c> function retrieves the bits of the specified compatible bitmap and copies them into a buffer as a DIB using
            the specified format.
            </summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="hbm">A handle to the bitmap. This must be a compatible bitmap (DDB).</param>
            <param name="start">The first scan line to retrieve.</param>
            <param name="cLines">The number of scan lines to retrieve.</param>
            <param name="lpvBits">
            A pointer to a buffer to receive the bitmap data. If this parameter is <c>NULL</c>, the function passes the dimensions and format
            of the bitmap to the BITMAPINFO structure pointed to by the lpbi parameter.
            </param>
            <param name="lpbmi">A pointer to a BITMAPINFO structure that specifies the desired format for the DIB data.</param>
            <param name="usage">
            <para>The format of the <c>bmiColors</c> member of the BITMAPINFO structure. It must be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>DIB_PAL_COLORS</term>
            <term>The color table should consist of an array of 16-bit indexes into the current logical palette.</term>
            </item>
            <item>
            <term>DIB_RGB_COLORS</term>
            <term>The color table should consist of literal red, green, blue (RGB) values.</term>
            </item>
            </list>
            </param>
            <returns>
            <para>
            If the lpvBits parameter is non- <c>NULL</c> and the function succeeds, the return value is the number of scan lines copied from
            the bitmap.
            </para>
            <para>
            If the lpvBits parameter is <c>NULL</c> and <c>GetDIBits</c> successfully fills the BITMAPINFO structure, the return value is nonzero.
            </para>
            <para>If the function fails, the return value is zero.</para>
            <para>This function can return the following value.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>One or more of the input parameters is invalid.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            If the requested format for the DIB matches its internal format, the RGB values for the bitmap are copied. If the requested
            format doesn't match the internal format, a color table is synthesized. The following table describes the color table synthesized
            for each format.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>1_BPP</term>
            <term>The color table consists of a black and a white entry.</term>
            </item>
            <item>
            <term>4_BPP</term>
            <term>The color table consists of a mix of colors identical to the standard VGA palette.</term>
            </item>
            <item>
            <term>8_BPP</term>
            <term>
            The color table consists of a general mix of 256 colors defined by GDI. (Included in these 256 colors are the 20 colors found in
            the default logical palette.)
            </term>
            </item>
            <item>
            <term>24_BPP</term>
            <term>No color table is returned.</term>
            </item>
            </list>
            <para>
            If the lpvBits parameter is a valid pointer, the first six members of the BITMAPINFOHEADER structure must be initialized to
            specify the size and format of the DIB. The scan lines must be aligned on a <c>DWORD</c> except for RLE compressed bitmaps.
            </para>
            <para>
            A bottom-up DIB is specified by setting the height to a positive number, while a top-down DIB is specified by setting the height
            to a negative number. The bitmap color table will be appended to the BITMAPINFO structure.
            </para>
            <para>
            If lpvBits is <c>NULL</c>, <c>GetDIBits</c> examines the first member of the first structure pointed to by lpbi. This member must
            specify the size, in bytes, of a BITMAPCOREHEADER or a BITMAPINFOHEADER structure. The function uses the specified size to
            determine how the remaining members should be initialized.
            </para>
            <para>
            If lpvBits is <c>NULL</c> and the bit count member of BITMAPINFO is initialized to zero, <c>GetDIBits</c> fills in a
            BITMAPINFOHEADER structure or BITMAPCOREHEADER without the color table. This technique can be used to query bitmap attributes.
            </para>
            <para>
            The bitmap identified by the hbmp parameter must not be selected into a device context when the application calls this function.
            </para>
            <para>
            The origin for a bottom-up DIB is the lower-left corner of the bitmap; the origin for a top-down DIB is the upper-left corner.
            </para>
            <para>Examples</para>
            <para>For an example, see Capturing an Image.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetPixel(Vanara.PInvoke.HDC,System.Int32,System.Int32)">
            <summary>The <c>GetPixel</c> function retrieves the red, green, blue (RGB) color value of the pixel at the specified coordinates.</summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="x">The x-coordinate, in logical units, of the pixel to be examined.</param>
            <param name="y">The y-coordinate, in logical units, of the pixel to be examined.</param>
            <returns>
            The return value is the COLORREF value that specifies the RGB of the pixel. If the pixel is outside of the current clipping
            region, the return value is CLR_INVALID (0xFFFFFFFF defined in Wingdi.h).
            </returns>
            <remarks>
            <para>The pixel must be within the boundaries of the current clipping region.</para>
            <para>
            Not all devices support <c>GetPixel</c>. An application should call GetDeviceCaps to determine whether a specified device
            supports this function.
            </para>
            <para>A bitmap must be selected within the device context, otherwise, CLR_INVALID is returned on all pixels.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetStretchBltMode(Vanara.PInvoke.HDC)">
            <summary>
            The <c>GetStretchBltMode</c> function retrieves the current stretching mode. The stretching mode defines how color data is added
            to or removed from bitmaps that are stretched or compressed when the StretchBlt function is called.
            </summary>
            <param name="hdc">A handle to the device context.</param>
            <returns>
            <para>If the function succeeds, the return value is the current stretching mode. This can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>BLACKONWHITE</term>
            <term>
            Performs a Boolean AND operation using the color values for the eliminated and existing pixels. If the bitmap is a monochrome
            bitmap, this mode preserves black pixels at the expense of white pixels.
            </term>
            </item>
            <item>
            <term>COLORONCOLOR</term>
            <term>Deletes the pixels. This mode deletes all eliminated lines of pixels without trying to preserve their information.</term>
            </item>
            <item>
            <term>HALFTONE</term>
            <term>
            Maps pixels from the source rectangle into blocks of pixels in the destination rectangle. The average color over the destination
            block of pixels approximates the color of the source pixels.
            </term>
            </item>
            <item>
            <term>STRETCH_ANDSCANS</term>
            <term>Same as BLACKONWHITE.</term>
            </item>
            <item>
            <term>STRETCH_DELETESCANS</term>
            <term>Same as COLORONCOLOR.</term>
            </item>
            <item>
            <term>STRETCH_HALFTONE</term>
            <term>Same as HALFTONE.</term>
            </item>
            <item>
            <term>STRETCH_ORSCANS</term>
            <term>Same as WHITEONBLACK.</term>
            </item>
            <item>
            <term>WHITEONBLACK</term>
            <term>
            Performs a Boolean OR operation using the color values for the eliminated and existing pixels. If the bitmap is a monochrome
            bitmap, this mode preserves white pixels at the expense of black pixels.
            </term>
            </item>
            </list>
            <para>If the function fails, the return value is zero.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GradientFill(Vanara.PInvoke.HDC,Vanara.PInvoke.Gdi32.TRIVERTEX[],System.UInt32,Vanara.PInvoke.Gdi32.GRADIENT_TRIANGLE[],System.UInt32,Vanara.PInvoke.Gdi32.GradientFillMode)">
            <summary>The <c>GdiGradientFill</c> function fills rectangle and triangle structures.</summary>
            <param name="hdc">A handle to the destination device context.</param>
            <param name="pVertex">A pointer to an array of TRIVERTEX structures that each define a triangle vertex.</param>
            <param name="nVertex">The number of vertices in pVertex.</param>
            <param name="pMesh">
            An array of GRADIENT_TRIANGLE structures in triangle mode, or an array of GRADIENT_RECT structures in rectangle mode.
            </param>
            <param name="nCount">The number of elements (triangles or rectangles) in pMesh.</param>
            <param name="ulMode">
            <para>The gradient fill mode. This parameter can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>GRADIENT_FILL_RECT_H</term>
            <term>
            In this mode, two endpoints describe a rectangle. The rectangle is defined to have a constant color (specified by the TRIVERTEX
            structure) for the left and right edges. GDI interpolates the color from the left to right edge and fills the interior.
            </term>
            </item>
            <item>
            <term>GRADIENT_FILL_RECT_V</term>
            <term>
            In this mode, two endpoints describe a rectangle. The rectangle is defined to have a constant color (specified by the TRIVERTEX
            structure) for the top and bottom edges. GDI interpolates the color from the top to bottom edge and fills the interior.
            </term>
            </item>
            <item>
            <term>GRADIENT_FILL_TRIANGLE</term>
            <term>
            In this mode, an array of TRIVERTEX structures is passed to GDI along with a list of array indexes that describe separate
            triangles. GDI performs linear interpolation between triangle vertices and fills the interior. Drawing is done directly in 24-
            and 32-bpp modes. Dithering is performed in 16-, 8-, 4-, and 1-bpp mode.
            </term>
            </item>
            </list>
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>.</para>
            </returns>
            <remarks>
            <para><c>Note</c> This function is the same as GradientFill.</para>
            <para>
            To add smooth shading to a triangle, call the <c>GdiGradientFill</c> function with the three triangle endpoints. GDI will
            linearly interpolate and fill the triangle. Here is the drawing output of a shaded triangle.
            </para>
            <para>
            To add smooth shading to a rectangle, call <c>GdiGradientFill</c> with the upper-left and lower-right coordinates of the
            rectangle. There are two shading modes used when drawing a rectangle. In horizontal mode, the rectangle is shaded from
            left-to-right. In vertical mode, the rectangle is shaded from top-to-bottom. Here is the drawing output of two shaded rectangles
            - one in horizontal mode, the other in vertical mode.
            </para>
            <para>
            The <c>GdiGradientFill</c> function uses a mesh method to specify the endpoints of the object to draw. All vertices are passed to
            <c>GdiGradientFill</c> in the pVertex array. The pMesh parameter specifies how these vertices are connected to form an object.
            When filling a rectangle, pMesh points to an array of GRADIENT_RECT structures. Each <c>GRADIENT_RECT</c> structure specifies the
            index of two vertices in the pVertex array. These two vertices form the upper-left and lower-right boundary of one rectangle.
            </para>
            <para>
            In the case of filling a triangle, pMesh points to an array of GRADIENT_TRIANGLE structures. Each <c>GRADIENT_TRIANGLE</c>
            structure specifies the index of three vertices in the pVertex array. These three vertices form one triangle.
            </para>
            <para>To simplify hardware acceleration, this routine is not required to be pixel-perfect in the triangle interior.</para>
            <para>
            Note that <c>GdiGradientFill</c> does not use the Alpha member of the TRIVERTEX structure. To use <c>GdiGradientFill</c> with
            transparency, call <c>GdiGradientFill</c> and then call GdiAlphaBlend with the desired values for the alpha channel of each vertex.
            </para>
            <para>For more information, see Smooth Shading, Drawing a Shaded Triangle, and Drawing a Shaded Rectangle.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.MaskBlt(Vanara.PInvoke.HDC,System.Int32,System.Int32,System.Int32,System.Int32,Vanara.PInvoke.HDC,System.Int32,System.Int32,Vanara.PInvoke.HBITMAP,System.Int32,System.Int32,Vanara.PInvoke.Gdi32.RasterOperationMode)">
            <summary>
            The <c>MaskBlt</c> function combines the color data for the source and destination bitmaps using the specified mask and raster operation.
            </summary>
            <param name="hdcDest">A handle to the destination device context.</param>
            <param name="xDest">The x-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
            <param name="yDest">The y-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
            <param name="width">The width, in logical units, of the destination rectangle and source bitmap.</param>
            <param name="height">The height, in logical units, of the destination rectangle and source bitmap.</param>
            <param name="hdcSrc">
            A handle to the device context from which the bitmap is to be copied. It must be zero if the dwRop parameter specifies a raster
            operation that does not include a source.
            </param>
            <param name="xSrc">The x-coordinate, in logical units, of the upper-left corner of the source bitmap.</param>
            <param name="ySrc">The y-coordinate, in logical units, of the upper-left corner of the source bitmap.</param>
            <param name="hbmMask">A handle to the monochrome mask bitmap combined with the color bitmap in the source device context.</param>
            <param name="xMask">The horizontal pixel offset for the mask bitmap specified by the hbmMask parameter.</param>
            <param name="yMask">The vertical pixel offset for the mask bitmap specified by the hbmMask parameter.</param>
            <param name="rop">
            <para>
            The foreground and background ternary raster operation codes (ROPs) that the function uses to control the combination of source
            and destination data. The background raster operation code is stored in the high-order byte of the high-order word of this value;
            the foreground raster operation code is stored in the low-order byte of the high-order word of this value; the low-order word of
            this value is ignored, and should be zero. The macro MAKEROP4 creates such combinations of foreground and background raster
            operation codes.
            </para>
            <para>For a discussion of foreground and background in the context of this function, see the following Remarks section.</para>
            <para>
            For a list of common raster operation codes (ROPs), see the BitBlt function. Note that the CAPTUREBLT ROP generally cannot be
            used for printing device contexts.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>The <c>MaskBlt</c> function uses device-dependent bitmaps.</para>
            <para>
            A value of 1 in the mask specified by hbmMask indicates that the foreground raster operation code specified by dwRop should be
            applied at that location. A value of 0 in the mask indicates that the background raster operation code specified by dwRop should
            be applied at that location.
            </para>
            <para>
            If the raster operations require a source, the mask rectangle must cover the source rectangle. If it does not, the function will
            fail. If the raster operations do not require a source, the mask rectangle must cover the destination rectangle. If it does not,
            the function will fail.
            </para>
            <para>
            If a rotation or shear transformation is in effect for the source device context when this function is called, an error occurs.
            However, other types of transformation are allowed.
            </para>
            <para>
            If the color formats of the source, pattern, and destination bitmaps differ, this function converts the pattern or source format,
            or both, to match the destination format.
            </para>
            <para>If the mask bitmap is not a monochrome bitmap, an error occurs.</para>
            <para>
            When an enhanced metafile is being recorded, an error occurs (and the function returns <c>FALSE</c>) if the source device context
            identifies an enhanced-metafile device context.
            </para>
            <para>
            Not all devices support the <c>MaskBlt</c> function. An application should call the GetDeviceCaps function with the nIndex
            parameter as RC_BITBLT to determine whether a device supports this function.
            </para>
            <para>If no mask bitmap is supplied, this function behaves exactly like BitBlt, using the foreground raster operation code.</para>
            <para><c>ICM:</c> No color management is performed when blits occur.</para>
            <para>
            When used in a multiple monitor system, both hdcSrc and hdcDest must refer to the same device or the function will fail. To
            transfer data between DCs for different devices, convert the memory bitmap (compatible bitmap, or DDB) to a DIB by calling
            GetDIBits. To display the DIB to the second device, call SetDIBits or StretchDIBits.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.PlgBlt(Vanara.PInvoke.HDC,Vanara.PInvoke.POINT[],Vanara.PInvoke.HDC,System.Int32,System.Int32,System.Int32,System.Int32,Vanara.PInvoke.HBITMAP,System.Int32,System.Int32)">
            <summary>
            The <c>PlgBlt</c> function performs a bit-block transfer of the bits of color data from the specified rectangle in the source
            device context to the specified parallelogram in the destination device context. If the given bitmask handle identifies a valid
            monochrome bitmap, the function uses this bitmap to mask the bits of color data from the source rectangle.
            </summary>
            <param name="hdcDest">A handle to the destination device context.</param>
            <param name="lpPoint">
            A pointer to an array of three points in logical space that identify three corners of the destination parallelogram. The
            upper-left corner of the source rectangle is mapped to the first point in this array, the upper-right corner to the second point
            in this array, and the lower-left corner to the third point. The lower-right corner of the source rectangle is mapped to the
            implicit fourth point in the parallelogram.
            </param>
            <param name="hdcSrc">A handle to the source device context.</param>
            <param name="xSrc">The x-coordinate, in logical units, of the upper-left corner of the source rectangle.</param>
            <param name="ySrc">The y-coordinate, in logical units, of the upper-left corner of the source rectangle.</param>
            <param name="width">The width, in logical units, of the source rectangle.</param>
            <param name="height">The height, in logical units, of the source rectangle.</param>
            <param name="hbmMask">A handle to an optional monochrome bitmap that is used to mask the colors of the source rectangle.</param>
            <param name="xMask">The x-coordinate, in logical units, of the upper-left corner of the monochrome bitmap.</param>
            <param name="yMask">The y-coordinate, in logical units, of the upper-left corner of the monochrome bitmap.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>The <c>PlgBlt</c> function works with device-dependent bitmaps.</para>
            <para>
            The fourth vertex of the parallelogram (D) is defined by treating the first three points (A, B, and C ) as vectors and computing
            D = B +CA.
            </para>
            <para>
            If the bitmask exists, a value of one in the mask indicates that the source pixel color should be copied to the destination. A
            value of zero in the mask indicates that the destination pixel color is not to be changed. If the mask rectangle is smaller than
            the source and destination rectangles, the function replicates the mask pattern.
            </para>
            <para>
            Scaling, translation, and reflection transformations are allowed in the source device context; however, rotation and shear
            transformations are not. If the mask bitmap is not a monochrome bitmap, an error occurs. The stretching mode for the destination
            device context is used to determine how to stretch or compress the pixels, if that is necessary.
            </para>
            <para>
            When an enhanced metafile is being recorded, an error occurs if the source device context identifies an enhanced-metafile device context.
            </para>
            <para>
            The destination coordinates are transformed according to the destination device context; the source coordinates are transformed
            according to the source device context. If the source transformation has a rotation or shear, an error is returned.
            </para>
            <para>
            If the destination and source rectangles do not have the same color format, <c>PlgBlt</c> converts the source rectangle to match
            the destination rectangle.
            </para>
            <para>
            Not all devices support the <c>PlgBlt</c> function. For more information, see the description of the RC_BITBLT raster capability
            in the GetDeviceCaps function.
            </para>
            <para>If the source and destination device contexts represent incompatible devices, <c>PlgBlt</c> returns an error.</para>
            <para>
            When used in a multiple monitor system, both hdcSrc and hdcDest must refer to the same device or the function will fail. To
            transfer data between DCs for different devices, convert the memory bitmap to a DIB by calling GetDIBits. To display the DIB to
            the second device, call SetDIBits or StretchDIBits.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SetBitmapBits(Vanara.PInvoke.HBITMAP,System.UInt32,System.Byte[])">
            <summary>
            <para>The <c>SetBitmapBits</c> function sets the bits of color data for a bitmap to the specified values.</para>
            <para>
            <c>Note</c> This function is provided only for compatibility with 16-bit versions of Windows. Applications should use the
            SetDIBits function.
            </para>
            </summary>
            <param name="hbm">A handle to the bitmap to be set. This must be a compatible bitmap (DDB).</param>
            <param name="cb">The number of bytes pointed to by the lpBits parameter.</param>
            <param name="pvBits">A pointer to an array of bytes that contain color data for the specified bitmap.</param>
            <returns>
            <para>If the function succeeds, the return value is the number of bytes used in setting the bitmap bits.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>The array identified by lpBits must be WORD aligned.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SetBitmapDimensionEx(Vanara.PInvoke.HBITMAP,System.Int32,System.Int32,Vanara.PInvoke.SIZE@)">
            <summary>
            The <c>SetBitmapDimensionEx</c> function assigns preferred dimensions to a bitmap. These dimensions can be used by applications;
            however, they are not used by the system.
            </summary>
            <param name="hbm">A handle to the bitmap. The bitmap cannot be a DIB-section bitmap.</param>
            <param name="w">The width, in 0.1-millimeter units, of the bitmap.</param>
            <param name="h">The height, in 0.1-millimeter units, of the bitmap.</param>
            <param name="lpsz">A pointer to a SIZE structure to receive the previous dimensions of the bitmap. This pointer can be <c>NULL</c>.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>
            An application can retrieve the dimensions assigned to a bitmap with the <c>SetBitmapDimensionEx</c> function by calling the
            GetBitmapDimensionEx function.
            </para>
            <para>
            The bitmap identified by hBitmap cannot be a DIB section, which is a bitmap created by the CreateDIBSection function. If the
            bitmap is a DIB section, the <c>SetBitmapDimensionEx</c> function fails.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SetDIBColorTable(Vanara.PInvoke.HDC,System.UInt32,System.UInt32,Vanara.PInvoke.RGBQUAD[])">
            <summary>
            The <c>SetDIBColorTable</c> function sets RGB (red, green, blue) color values in a range of entries in the color table of the DIB
            that is currently selected into a specified device context.
            </summary>
            <param name="hdc">A device context. A DIB must be selected into this device context.</param>
            <param name="iStart">A zero-based color table index that specifies the first color table entry to set.</param>
            <param name="cEntries">The number of color table entries to set.</param>
            <param name="prgbq">A pointer to an array of RGBQUAD structures containing new color information for the DIB's color table.</param>
            <returns>
            <para>If the function succeeds, the return value is the number of color table entries that the function sets.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>
            This function should be called to set the color table for DIBs that use 1, 4, or 8 bpp. The <c>BitCount</c> member of a bitmap's
            associated bitmap information header structure.
            </para>
            <para>
            BITMAPINFOHEADER structure specifies the number of bits-per-pixel. Device-independent bitmaps with a <c>biBitCount</c> value
            greater than 8 do not have a color table.
            </para>
            <para>
            The <c>bV5BitCount</c> member of a bitmap's associated BITMAPV5HEADER structure specifies the number of bits-per-pixel.
            Device-independent bitmaps with a <c>bV5BitCount</c> value greater than 8 do not have a color table.
            </para>
            <para><c>ICM:</c> No color management is performed.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SetDIBits(Vanara.PInvoke.HDC,Vanara.PInvoke.HBITMAP,System.UInt32,System.UInt32,System.Byte[],Vanara.PInvoke.Gdi32.BITMAPINFO@,Vanara.PInvoke.Gdi32.DIBColorMode)">
            <summary>
            The <c>SetDIBits</c> function sets the pixels in a compatible bitmap (DDB) using the color data found in the specified DIB.
            </summary>
            <param name="hdc">A handle to a device context.</param>
            <param name="hbm">A handle to the compatible bitmap (DDB) that is to be altered using the color data from the specified DIB.</param>
            <param name="start">The starting scan line for the device-independent color data in the array pointed to by the lpvBits parameter.</param>
            <param name="cLines">The number of scan lines found in the array containing device-independent color data.</param>
            <param name="lpBits">
            A pointer to the DIB color data, stored as an array of bytes. The format of the bitmap values depends on the <c>biBitCount</c>
            member of the BITMAPINFO structure pointed to by the lpbmi parameter.
            </param>
            <param name="lpbmi">A pointer to a BITMAPINFO structure that contains information about the DIB.</param>
            <param name="ColorUse">
            <para>
            Indicates whether the <c>bmiColors</c> member of the BITMAPINFO structure was provided and, if so, whether <c>bmiColors</c>
            contains explicit red, green, blue (RGB) values or palette indexes. The fuColorUse parameter must be one of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>DIB_PAL_COLORS</term>
            <term>
            The color table consists of an array of 16-bit indexes into the logical palette of the device context identified by the hdc parameter.
            </term>
            </item>
            <item>
            <term>DIB_RGB_COLORS</term>
            <term>The color table is provided and contains literal RGB values.</term>
            </item>
            </list>
            </param>
            <returns>
            <para>If the function succeeds, the return value is the number of scan lines copied.</para>
            <para>If the function fails, the return value is zero.</para>
            <para>This can be the following value.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>One or more of the input parameters is invalid.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>Optimal bitmap drawing speed is obtained when the bitmap bits are indexes into the system palette.</para>
            <para>
            Applications can retrieve the system palette colors and indexes by calling the GetSystemPaletteEntries function. After the colors
            and indexes are retrieved, the application can create the DIB. For more information, see System Palette.
            </para>
            <para>
            The device context identified by the hdc parameter is used only if the DIB_PAL_COLORS constant is set for the fuColorUse
            parameter; otherwise it is ignored.
            </para>
            <para>
            The bitmap identified by the hbmp parameter must not be selected into a device context when the application calls this function.
            </para>
            <para>The scan lines must be aligned on a <c>DWORD</c> except for RLE-compressed bitmaps.</para>
            <para>
            The origin for bottom-up DIBs is the lower-left corner of the bitmap; the origin for top-down DIBs is the upper-left corner of
            the bitmap.
            </para>
            <para>
            <c>ICM:</c> Color management is performed if color management has been enabled with a call to SetICMMode with the iEnableICM
            parameter set to ICM_ON. If the bitmap specified by lpbmi has a BITMAPV4HEADER that specifies the gamma and endpoints members, or
            a BITMAPV5HEADER that specifies either the gamma and endpoints members or the profileData and profileSize members, then the call
            treats the bitmap's pixels as being expressed in the color space described by those members, rather than in the device context's
            source color space.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SetDIBits(Vanara.PInvoke.HDC,Vanara.PInvoke.HBITMAP,System.UInt32,System.UInt32,System.IntPtr,Vanara.PInvoke.Gdi32.SafeBITMAPINFO,Vanara.PInvoke.Gdi32.DIBColorMode)">
            <summary>
            The <c>SetDIBits</c> function sets the pixels in a compatible bitmap (DDB) using the color data found in the specified DIB.
            </summary>
            <param name="hdc">A handle to a device context.</param>
            <param name="hbm">A handle to the compatible bitmap (DDB) that is to be altered using the color data from the specified DIB.</param>
            <param name="start">The starting scan line for the device-independent color data in the array pointed to by the lpvBits parameter.</param>
            <param name="cLines">The number of scan lines found in the array containing device-independent color data.</param>
            <param name="lpBits">
            A pointer to the DIB color data, stored as an array of bytes. The format of the bitmap values depends on the <c>biBitCount</c>
            member of the BITMAPINFO structure pointed to by the lpbmi parameter.
            </param>
            <param name="lpbmi">A pointer to a BITMAPINFO structure that contains information about the DIB.</param>
            <param name="ColorUse">
            <para>
            Indicates whether the <c>bmiColors</c> member of the BITMAPINFO structure was provided and, if so, whether <c>bmiColors</c>
            contains explicit red, green, blue (RGB) values or palette indexes. The fuColorUse parameter must be one of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>DIB_PAL_COLORS</term>
            <term>
            The color table consists of an array of 16-bit indexes into the logical palette of the device context identified by the hdc parameter.
            </term>
            </item>
            <item>
            <term>DIB_RGB_COLORS</term>
            <term>The color table is provided and contains literal RGB values.</term>
            </item>
            </list>
            </param>
            <returns>
            <para>If the function succeeds, the return value is the number of scan lines copied.</para>
            <para>If the function fails, the return value is zero.</para>
            <para>This can be the following value.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>One or more of the input parameters is invalid.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>Optimal bitmap drawing speed is obtained when the bitmap bits are indexes into the system palette.</para>
            <para>
            Applications can retrieve the system palette colors and indexes by calling the GetSystemPaletteEntries function. After the colors
            and indexes are retrieved, the application can create the DIB. For more information, see System Palette.
            </para>
            <para>
            The device context identified by the hdc parameter is used only if the DIB_PAL_COLORS constant is set for the fuColorUse
            parameter; otherwise it is ignored.
            </para>
            <para>
            The bitmap identified by the hbmp parameter must not be selected into a device context when the application calls this function.
            </para>
            <para>The scan lines must be aligned on a <c>DWORD</c> except for RLE-compressed bitmaps.</para>
            <para>
            The origin for bottom-up DIBs is the lower-left corner of the bitmap; the origin for top-down DIBs is the upper-left corner of
            the bitmap.
            </para>
            <para>
            <c>ICM:</c> Color management is performed if color management has been enabled with a call to SetICMMode with the iEnableICM
            parameter set to ICM_ON. If the bitmap specified by lpbmi has a BITMAPV4HEADER that specifies the gamma and endpoints members, or
            a BITMAPV5HEADER that specifies either the gamma and endpoints members or the profileData and profileSize members, then the call
            treats the bitmap's pixels as being expressed in the color space described by those members, rather than in the device context's
            source color space.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SetDIBitsToDevice(Vanara.PInvoke.HDC,System.Int32,System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.UInt32,System.UInt32,System.Byte[],Vanara.PInvoke.Gdi32.BITMAPINFO@,Vanara.PInvoke.Gdi32.DIBColorMode)">
            <summary>
            The <c>SetDIBitsToDevice</c> function sets the pixels in the specified rectangle on the device that is associated with the
            destination device context using color data from a DIB, JPEG, or PNG image.
            </summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="xDest">The x-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
            <param name="yDest">The y-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
            <param name="w">The width, in logical units, of the image.</param>
            <param name="h">The height, in logical units, of the image.</param>
            <param name="xSrc">The x-coordinate, in logical units, of the lower-left corner of the image.</param>
            <param name="ySrc">The y-coordinate, in logical units, of the lower-left corner of the image.</param>
            <param name="StartScan">The starting scan line in the image.</param>
            <param name="cLines">The number of DIB scan lines contained in the array pointed to by the lpvBits parameter.</param>
            <param name="lpvBits">
            A pointer to the color data stored as an array of bytes. For more information, see the following Remarks section.
            </param>
            <param name="lpbmi">A pointer to a BITMAPINFO structure that contains information about the DIB.</param>
            <param name="ColorUse">
            <para>
            Indicates whether the <c>bmiColors</c> member of the BITMAPINFO structure contains explicit red, green, blue (RGB) values or
            indexes into a palette. For more information, see the following Remarks section.
            </para>
            <para>The fuColorUse parameter must be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>DIB_PAL_COLORS</term>
            <term>The color table consists of an array of 16-bit indexes into the currently selected logical palette.</term>
            </item>
            <item>
            <term>DIB_RGB_COLORS</term>
            <term>The color table contains literal RGB values.</term>
            </item>
            </list>
            </param>
            <returns>
            <para>If the function succeeds, the return value is the number of scan lines set.</para>
            <para>If zero scan lines are set (such as when dwHeight is 0) or the function fails, the function returns zero.</para>
            <para>
            If the driver cannot support the JPEG or PNG file image passed to <c>SetDIBitsToDevice</c>, the function will fail and return
            GDI_ERROR. If failure does occur, the application must fall back on its own JPEG or PNG support to decompress the image into a
            bitmap, and then pass the bitmap to <c>SetDIBitsToDevice</c>.
            </para>
            </returns>
            <remarks>
            <para>Optimal bitmap drawing speed is obtained when the bitmap bits are indexes into the system palette.</para>
            <para>
            Applications can retrieve the system palette colors and indexes by calling the GetSystemPaletteEntries function. After the colors
            and indexes are retrieved, the application can create the DIB. For more information about the system palette, see Colors.
            </para>
            <para>The scan lines must be aligned on a <c>DWORD</c> except for RLE-compressed bitmaps.</para>
            <para>The origin of a bottom-up DIB is the lower-left corner of the bitmap; the origin of a top-down DIB is the upper-left corner.</para>
            <para>
            To reduce the amount of memory required to set bits from a large DIB on a device surface, an application can band the output by
            repeatedly calling <c>SetDIBitsToDevice</c>, placing a different portion of the bitmap into the lpvBits array each time. The
            values of the uStartScan and cScanLines parameters identify the portion of the bitmap contained in the lpvBits array.
            </para>
            <para>
            The <c>SetDIBitsToDevice</c> function returns an error if it is called by a process that is running in the background while a
            full-screen MS-DOS session runs in the foreground.
            </para>
            <list type="bullet">
            <item>
            <term>
            If the <c>biCompression</c> member of BITMAPINFOHEADER is BI_JPEG or BI_PNG, lpvBits points to a buffer containing a JPEG or PNG
            image. The <c>biSizeImage</c> member of specifies the size of the buffer. The fuColorUse parameter must be set to DIB_RGB_COLORS.
            </term>
            </item>
            <item>
            <term>
            To ensure proper metafile spooling while printing, applications must call the CHECKJPEGFORMAT or CHECKPNGFORMAT escape to verify
            that the printer recognizes the JPEG or PNG image, respectively, before calling <c>SetDIBitsToDevice</c>.
            </term>
            </item>
            </list>
            <para>
            <c>ICM:</c> Color management is performed if color management has been enabled with a call to SetICMMode with the iEnableICM
            parameter set to ICM_ON. If the bitmap specified by lpbmi has a BITMAPV4HEADER that specifies the gamma and endpoints members, or
            a BITMAPV5HEADER that specifies either the gamma and endpoints members or the profileData and profileSize members, then the call
            treats the bitmap's pixels as being expressed in the color space described by those members, rather than in the device context's
            source color space.
            </para>
            <para>Examples</para>
            <para>For an example, see Testing a Printer for JPEG or PNG Support.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SetDIBitsToDevice(Vanara.PInvoke.HDC,System.Int32,System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.UInt32,System.UInt32,System.IntPtr,Vanara.PInvoke.Gdi32.SafeBITMAPINFO,Vanara.PInvoke.Gdi32.DIBColorMode)">
            <summary>
            The <c>SetDIBitsToDevice</c> function sets the pixels in the specified rectangle on the device that is associated with the
            destination device context using color data from a DIB, JPEG, or PNG image.
            </summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="xDest">The x-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
            <param name="yDest">The y-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
            <param name="w">The width, in logical units, of the image.</param>
            <param name="h">The height, in logical units, of the image.</param>
            <param name="xSrc">The x-coordinate, in logical units, of the lower-left corner of the image.</param>
            <param name="ySrc">The y-coordinate, in logical units, of the lower-left corner of the image.</param>
            <param name="StartScan">The starting scan line in the image.</param>
            <param name="cLines">The number of DIB scan lines contained in the array pointed to by the lpvBits parameter.</param>
            <param name="lpvBits">
            A pointer to the color data stored as an array of bytes. For more information, see the following Remarks section.
            </param>
            <param name="lpbmi">A pointer to a BITMAPINFO structure that contains information about the DIB.</param>
            <param name="ColorUse">
            <para>
            Indicates whether the <c>bmiColors</c> member of the BITMAPINFO structure contains explicit red, green, blue (RGB) values or
            indexes into a palette. For more information, see the following Remarks section.
            </para>
            <para>The fuColorUse parameter must be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>DIB_PAL_COLORS</term>
            <term>The color table consists of an array of 16-bit indexes into the currently selected logical palette.</term>
            </item>
            <item>
            <term>DIB_RGB_COLORS</term>
            <term>The color table contains literal RGB values.</term>
            </item>
            </list>
            </param>
            <returns>
            <para>If the function succeeds, the return value is the number of scan lines set.</para>
            <para>If zero scan lines are set (such as when dwHeight is 0) or the function fails, the function returns zero.</para>
            <para>
            If the driver cannot support the JPEG or PNG file image passed to <c>SetDIBitsToDevice</c>, the function will fail and return
            GDI_ERROR. If failure does occur, the application must fall back on its own JPEG or PNG support to decompress the image into a
            bitmap, and then pass the bitmap to <c>SetDIBitsToDevice</c>.
            </para>
            </returns>
            <remarks>
            <para>Optimal bitmap drawing speed is obtained when the bitmap bits are indexes into the system palette.</para>
            <para>
            Applications can retrieve the system palette colors and indexes by calling the GetSystemPaletteEntries function. After the colors
            and indexes are retrieved, the application can create the DIB. For more information about the system palette, see Colors.
            </para>
            <para>The scan lines must be aligned on a <c>DWORD</c> except for RLE-compressed bitmaps.</para>
            <para>The origin of a bottom-up DIB is the lower-left corner of the bitmap; the origin of a top-down DIB is the upper-left corner.</para>
            <para>
            To reduce the amount of memory required to set bits from a large DIB on a device surface, an application can band the output by
            repeatedly calling <c>SetDIBitsToDevice</c>, placing a different portion of the bitmap into the lpvBits array each time. The
            values of the uStartScan and cScanLines parameters identify the portion of the bitmap contained in the lpvBits array.
            </para>
            <para>
            The <c>SetDIBitsToDevice</c> function returns an error if it is called by a process that is running in the background while a
            full-screen MS-DOS session runs in the foreground.
            </para>
            <list type="bullet">
            <item>
            <term>
            If the <c>biCompression</c> member of BITMAPINFOHEADER is BI_JPEG or BI_PNG, lpvBits points to a buffer containing a JPEG or PNG
            image. The <c>biSizeImage</c> member of specifies the size of the buffer. The fuColorUse parameter must be set to DIB_RGB_COLORS.
            </term>
            </item>
            <item>
            <term>
            To ensure proper metafile spooling while printing, applications must call the CHECKJPEGFORMAT or CHECKPNGFORMAT escape to verify
            that the printer recognizes the JPEG or PNG image, respectively, before calling <c>SetDIBitsToDevice</c>.
            </term>
            </item>
            </list>
            <para>
            <c>ICM:</c> Color management is performed if color management has been enabled with a call to SetICMMode with the iEnableICM
            parameter set to ICM_ON. If the bitmap specified by lpbmi has a BITMAPV4HEADER that specifies the gamma and endpoints members, or
            a BITMAPV5HEADER that specifies either the gamma and endpoints members or the profileData and profileSize members, then the call
            treats the bitmap's pixels as being expressed in the color space described by those members, rather than in the device context's
            source color space.
            </para>
            <para>Examples</para>
            <para>For an example, see Testing a Printer for JPEG or PNG Support.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SetPixel(Vanara.PInvoke.HDC,System.Int32,System.Int32,Vanara.PInvoke.COLORREF)">
            <summary>The <c>SetPixel</c> function sets the pixel at the specified coordinates to the specified color.</summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="x">The x-coordinate, in logical units, of the point to be set.</param>
            <param name="y">The y-coordinate, in logical units, of the point to be set.</param>
            <param name="color">The color to be used to paint the point. To create a COLORREF color value, use the RGB macro.</param>
            <returns>
            <para>
            If the function succeeds, the return value is the RGB value that the function sets the pixel to. This value may differ from the
            color specified by crColor; that occurs when an exact match for the specified color cannot be found.
            </para>
            <para>If the function fails, the return value is -1.</para>
            <para>This can be the following value.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>One or more of the input parameters is invalid.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The function fails if the pixel coordinates lie outside of the current clipping region.</para>
            <para>Not all devices support the <c>SetPixel</c> function. For more information, see GetDeviceCaps.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SetPixelV(Vanara.PInvoke.HDC,System.Int32,System.Int32,Vanara.PInvoke.COLORREF)">
            <summary>
            The <c>SetPixelV</c> function sets the pixel at the specified coordinates to the closest approximation of the specified color.
            The point must be in the clipping region and the visible part of the device surface.
            </summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="x">The x-coordinate, in logical units, of the point to be set.</param>
            <param name="y">The y-coordinate, in logical units, of the point to be set.</param>
            <param name="color">The color to be used to paint the point. To create a COLORREF color value, use the RGB macro.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>
            Not all devices support the <c>SetPixelV</c> function. For more information, see the description of the RC_BITBLT capability in
            the GetDeviceCaps function.
            </para>
            <para><c>SetPixelV</c> is faster than SetPixel because it does not need to return the color value of the point actually painted.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SetStretchBltMode(Vanara.PInvoke.HDC,Vanara.PInvoke.Gdi32.StretchMode)">
            <summary>The <c>SetStretchBltMode</c> function sets the bitmap stretching mode in the specified device context.</summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="mode">
            <para>The stretching mode. This parameter can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>BLACKONWHITE</term>
            <term>
            Performs a Boolean AND operation using the color values for the eliminated and existing pixels. If the bitmap is a monochrome
            bitmap, this mode preserves black pixels at the expense of white pixels.
            </term>
            </item>
            <item>
            <term>COLORONCOLOR</term>
            <term>Deletes the pixels. This mode deletes all eliminated lines of pixels without trying to preserve their information.</term>
            </item>
            <item>
            <term>HALFTONE</term>
            <term>
            Maps pixels from the source rectangle into blocks of pixels in the destination rectangle. The average color over the destination
            block of pixels approximates the color of the source pixels. After setting the HALFTONE stretching mode, an application must call
            the SetBrushOrgEx function to set the brush origin. If it fails to do so, brush misalignment occurs.
            </term>
            </item>
            <item>
            <term>STRETCH_ANDSCANS</term>
            <term>Same as BLACKONWHITE.</term>
            </item>
            <item>
            <term>STRETCH_DELETESCANS</term>
            <term>Same as COLORONCOLOR.</term>
            </item>
            <item>
            <term>STRETCH_HALFTONE</term>
            <term>Same as HALFTONE.</term>
            </item>
            <item>
            <term>STRETCH_ORSCANS</term>
            <term>Same as WHITEONBLACK.</term>
            </item>
            <item>
            <term>WHITEONBLACK</term>
            <term>
            Performs a Boolean OR operation using the color values for the eliminated and existing pixels. If the bitmap is a monochrome
            bitmap, this mode preserves white pixels at the expense of black pixels.
            </term>
            </item>
            </list>
            </param>
            <returns>
            <para>If the function succeeds, the return value is the previous stretching mode.</para>
            <para>If the function fails, the return value is zero.</para>
            <para>This function can return the following value.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>One or more of the input parameters is invalid.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            The stretching mode defines how the system combines rows or columns of a bitmap with existing pixels on a display device when an
            application calls the StretchBlt function.
            </para>
            <para>
            The BLACKONWHITE (STRETCH_ANDSCANS) and WHITEONBLACK (STRETCH_ORSCANS) modes are typically used to preserve foreground pixels in
            monochrome bitmaps. The COLORONCOLOR (STRETCH_DELETESCANS) mode is typically used to preserve color in color bitmaps.
            </para>
            <para>
            The HALFTONE mode is slower and requires more processing of the source image than the other three modes; but produces higher
            quality images. Also note that SetBrushOrgEx must be called after setting the HALFTONE mode to avoid brush misalignment.
            </para>
            <para>Additional stretching modes might also be available depending on the capabilities of the device driver.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.StretchBlt(Vanara.PInvoke.HDC,System.Int32,System.Int32,System.Int32,System.Int32,Vanara.PInvoke.HDC,System.Int32,System.Int32,System.Int32,System.Int32,Vanara.PInvoke.Gdi32.RasterOperationMode)">
            <summary>
            The <c>StretchBlt</c> function copies a bitmap from a source rectangle into a destination rectangle, stretching or compressing
            the bitmap to fit the dimensions of the destination rectangle, if necessary. The system stretches or compresses the bitmap
            according to the stretching mode currently set in the destination device context.
            </summary>
            <param name="hdcDest">A handle to the destination device context.</param>
            <param name="xDest">The x-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
            <param name="yDest">The y-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
            <param name="wDest">The width, in logical units, of the destination rectangle.</param>
            <param name="hDest">The height, in logical units, of the destination rectangle.</param>
            <param name="hdcSrc">A handle to the source device context.</param>
            <param name="xSrc">The x-coordinate, in logical units, of the upper-left corner of the source rectangle.</param>
            <param name="ySrc">The y-coordinate, in logical units, of the upper-left corner of the source rectangle.</param>
            <param name="wSrc">The width, in logical units, of the source rectangle.</param>
            <param name="hSrc">The height, in logical units, of the source rectangle.</param>
            <param name="rop">
            <para>
            The raster operation to be performed. Raster operation codes define how the system combines colors in output operations that
            involve a brush, a source bitmap, and a destination bitmap.
            </para>
            <para>
            See BitBlt for a list of common raster operation codes (ROPs). Note that the CAPTUREBLT ROP generally cannot be used for printing
            device contexts.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>
            <c>StretchBlt</c> stretches or compresses the source bitmap in memory and then copies the result to the destination rectangle.
            This bitmap can be either a compatible bitmap (DDB) or the output from CreateDIBSection. The color data for pattern or
            destination pixels is merged after the stretching or compression occurs.
            </para>
            <para>
            When an enhanced metafile is being recorded, an error occurs (and the function returns <c>FALSE</c>) if the source device context
            identifies an enhanced-metafile device context.
            </para>
            <para>
            If the specified raster operation requires a brush, the system uses the brush currently selected into the destination device context.
            </para>
            <para>
            The destination coordinates are transformed by using the transformation currently specified for the destination device context;
            the source coordinates are transformed by using the transformation currently specified for the source device context.
            </para>
            <para>If the source transformation has a rotation or shear, an error occurs.</para>
            <para>
            If destination, source, and pattern bitmaps do not have the same color format, <c>StretchBlt</c> converts the source and pattern
            bitmaps to match the destination bitmap.
            </para>
            <para>
            If <c>StretchBlt</c> must convert a monochrome bitmap to a color bitmap, it sets white bits (1) to the background color and black
            bits (0) to the foreground color. To convert a color bitmap to a monochrome bitmap, it sets pixels that match the background
            color to white (1) and sets all other pixels to black (0). The foreground and background colors of the device context with color
            are used.
            </para>
            <para>
            <c>StretchBlt</c> creates a mirror image of a bitmap if the signs of the nWidthSrc and nWidthDest parameters or if the nHeightSrc
            and nHeightDest parameters differ. If nWidthSrc and nWidthDest have different signs, the function creates a mirror image of the
            bitmap along the x-axis. If nHeightSrc and nHeightDest have different signs, the function creates a mirror image of the bitmap
            along the y-axis.
            </para>
            <para>Not all devices support the <c>StretchBlt</c> function. For more information, see the GetDeviceCaps.</para>
            <para><c>ICM:</c> No color management is performed when a blit operation occurs.</para>
            <para>
            When used in a multiple monitor system, both hdcSrc and hdcDest must refer to the same device or the function will fail. To
            transfer data between DCs for different devices, convert the memory bitmap to a DIB by calling GetDIBits. To display the DIB to
            the second device, call SetDIBits or StretchDIBits.
            </para>
            <para>Examples</para>
            <para>For an example, see Scaling an Image.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.StretchDIBits(Vanara.PInvoke.HDC,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[],Vanara.PInvoke.Gdi32.BITMAPINFO@,Vanara.PInvoke.Gdi32.DIBColorMode,Vanara.PInvoke.Gdi32.RasterOperationMode)">
            <summary>
            The <c>StretchDIBits</c> function copies the color data for a rectangle of pixels in a DIB, JPEG, or PNG image to the specified
            destination rectangle. If the destination rectangle is larger than the source rectangle, this function stretches the rows and
            columns of color data to fit the destination rectangle. If the destination rectangle is smaller than the source rectangle, this
            function compresses the rows and columns by using the specified raster operation.
            </summary>
            <param name="hdc">A handle to the destination device context.</param>
            <param name="xDest">The x-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
            <param name="yDest">The y-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
            <param name="DestWidth">The width, in logical units, of the destination rectangle.</param>
            <param name="DestHeight">The height, in logical units, of the destination rectangle.</param>
            <param name="xSrc">The x-coordinate, in pixels, of the source rectangle in the image.</param>
            <param name="ySrc">The y-coordinate, in pixels, of the source rectangle in the image.</param>
            <param name="SrcWidth">The width, in pixels, of the source rectangle in the image.</param>
            <param name="SrcHeight">The height, in pixels, of the source rectangle in the image.</param>
            <param name="lpBits">
            A pointer to the image bits, which are stored as an array of bytes. For more information, see the Remarks section.
            </param>
            <param name="lpbmi">A pointer to a BITMAPINFO structure that contains information about the DIB.</param>
            <param name="iUsage">
            <para>
            Specifies whether the <c>bmiColors</c> member of the BITMAPINFO structure was provided and, if so, whether <c>bmiColors</c>
            contains explicit red, green, blue (RGB) values or indexes. The iUsage parameter must be one of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>DIB_PAL_COLORS</term>
            <term>The array contains 16-bit indexes into the logical palette of the source device context.</term>
            </item>
            <item>
            <term>DIB_RGB_COLORS</term>
            <term>The color table contains literal RGB values.</term>
            </item>
            </list>
            <para>For more information, see the Remarks section.</para>
            </param>
            <param name="rop">
            A raster-operation code that specifies how the source pixels, the destination device context's current brush, and the destination
            pixels are to be combined to form the new image. For a list of some common raster operation codes, see BitBlt.
            </param>
            <returns>
            <para>
            If the function succeeds, the return value is the number of scan lines copied. Note that this value can be negative for mirrored content.
            </para>
            <para>If the function fails, or no scan lines are copied, the return value is 0.</para>
            <para>
            If the driver cannot support the JPEG or PNG file image passed to <c>StretchDIBits</c>, the function will fail and return
            GDI_ERROR. If failure does occur, the application must fall back on its own JPEG or PNG support to decompress the image into a
            bitmap, and then pass the bitmap to <c>StretchDIBits</c>.
            </para>
            </returns>
            <remarks>
            <para>The origin of a bottom-up DIB is the lower-left corner; the origin of a top-down DIB is the upper-left corner.</para>
            <para>
            <c>StretchDIBits</c> creates a mirror image of a bitmap if the signs of the nSrcWidth and nDestWidth parameters, or if the
            nSrcHeight and nDestHeight parameters differ. If nSrcWidth and nDestWidth have different signs, the function creates a mirror
            image of the bitmap along the x-axis. If nSrcHeight and nDestHeight have different signs, the function creates a mirror image of
            the bitmap along the y-axis.
            </para>
            <para>
            <c>StretchDIBits</c> creates a top-down image if the sign of the <c>biHeight</c> member of the BITMAPINFOHEADER structure for the
            DIB is negative. For a code example, see Sizing a JPEG or PNG Image.
            </para>
            <para>
            This function allows a JPEG or PNG image to be passed as the source image. How each parameter is used remains the same, except:
            </para>
            <list type="bullet">
            <item>
            <term>
            If the <c>biCompression</c> member of BITMAPINFOHEADER is BI_JPEG or BI_PNG, lpBits points to a buffer containing a JPEG or PNG
            image, respectively. The <c>biSizeImage</c> member of the <c>BITMAPINFOHEADER</c> structure specifies the size of the buffer. The
            iUsage parameter must be set to DIB_RGB_COLORS. The dwRop parameter must be set to SRCCOPY.
            </term>
            </item>
            <item>
            <term>
            To ensure proper metafile spooling while printing, applications must call the CHECKJPEGFORMAT or CHECKPNGFORMAT escape to verify
            that the printer recognizes the JPEG or PNG image, respectively, before calling <c>StretchDIBits</c>.
            </term>
            </item>
            </list>
            <para>
            <c>ICM:</c> Color management is performed if color management has been enabled with a call to SetICMMode with the iEnableICM
            parameter set to ICM_ON. If the bitmap specified by lpBitsInfo has a BITMAPV4HEADER that specifies the gamma and endpoints
            members, or a BITMAPV5HEADER that specifies either the gamma and endpoints members or the profileData and profileSize members,
            then the call treats the bitmap's pixels as being expressed in the color space described by those members, rather than in the
            device context's source color space.
            </para>
            <para>Examples</para>
            <para>For an example, see Sizing a JPEG or PNG Image.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.StretchDIBits(Vanara.PInvoke.HDC,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,Vanara.PInvoke.Gdi32.SafeBITMAPINFO,Vanara.PInvoke.Gdi32.DIBColorMode,Vanara.PInvoke.Gdi32.RasterOperationMode)">
            <summary>
            The <c>StretchDIBits</c> function copies the color data for a rectangle of pixels in a DIB, JPEG, or PNG image to the specified
            destination rectangle. If the destination rectangle is larger than the source rectangle, this function stretches the rows and
            columns of color data to fit the destination rectangle. If the destination rectangle is smaller than the source rectangle, this
            function compresses the rows and columns by using the specified raster operation.
            </summary>
            <param name="hdc">A handle to the destination device context.</param>
            <param name="xDest">The x-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
            <param name="yDest">The y-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
            <param name="DestWidth">The width, in logical units, of the destination rectangle.</param>
            <param name="DestHeight">The height, in logical units, of the destination rectangle.</param>
            <param name="xSrc">The x-coordinate, in pixels, of the source rectangle in the image.</param>
            <param name="ySrc">The y-coordinate, in pixels, of the source rectangle in the image.</param>
            <param name="SrcWidth">The width, in pixels, of the source rectangle in the image.</param>
            <param name="SrcHeight">The height, in pixels, of the source rectangle in the image.</param>
            <param name="lpBits">
            A pointer to the image bits, which are stored as an array of bytes. For more information, see the Remarks section.
            </param>
            <param name="lpbmi">A pointer to a BITMAPINFO structure that contains information about the DIB.</param>
            <param name="iUsage">
            <para>
            Specifies whether the <c>bmiColors</c> member of the BITMAPINFO structure was provided and, if so, whether <c>bmiColors</c>
            contains explicit red, green, blue (RGB) values or indexes. The iUsage parameter must be one of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>DIB_PAL_COLORS</term>
            <term>The array contains 16-bit indexes into the logical palette of the source device context.</term>
            </item>
            <item>
            <term>DIB_RGB_COLORS</term>
            <term>The color table contains literal RGB values.</term>
            </item>
            </list>
            <para>For more information, see the Remarks section.</para>
            </param>
            <param name="rop">
            A raster-operation code that specifies how the source pixels, the destination device context's current brush, and the destination
            pixels are to be combined to form the new image. For a list of some common raster operation codes, see BitBlt.
            </param>
            <returns>
            <para>
            If the function succeeds, the return value is the number of scan lines copied. Note that this value can be negative for mirrored content.
            </para>
            <para>If the function fails, or no scan lines are copied, the return value is 0.</para>
            <para>
            If the driver cannot support the JPEG or PNG file image passed to <c>StretchDIBits</c>, the function will fail and return
            GDI_ERROR. If failure does occur, the application must fall back on its own JPEG or PNG support to decompress the image into a
            bitmap, and then pass the bitmap to <c>StretchDIBits</c>.
            </para>
            </returns>
            <remarks>
            <para>The origin of a bottom-up DIB is the lower-left corner; the origin of a top-down DIB is the upper-left corner.</para>
            <para>
            <c>StretchDIBits</c> creates a mirror image of a bitmap if the signs of the nSrcWidth and nDestWidth parameters, or if the
            nSrcHeight and nDestHeight parameters differ. If nSrcWidth and nDestWidth have different signs, the function creates a mirror
            image of the bitmap along the x-axis. If nSrcHeight and nDestHeight have different signs, the function creates a mirror image of
            the bitmap along the y-axis.
            </para>
            <para>
            <c>StretchDIBits</c> creates a top-down image if the sign of the <c>biHeight</c> member of the BITMAPINFOHEADER structure for the
            DIB is negative. For a code example, see Sizing a JPEG or PNG Image.
            </para>
            <para>
            This function allows a JPEG or PNG image to be passed as the source image. How each parameter is used remains the same, except:
            </para>
            <list type="bullet">
            <item>
            <term>
            If the <c>biCompression</c> member of BITMAPINFOHEADER is BI_JPEG or BI_PNG, lpBits points to a buffer containing a JPEG or PNG
            image, respectively. The <c>biSizeImage</c> member of the <c>BITMAPINFOHEADER</c> structure specifies the size of the buffer. The
            iUsage parameter must be set to DIB_RGB_COLORS. The dwRop parameter must be set to SRCCOPY.
            </term>
            </item>
            <item>
            <term>
            To ensure proper metafile spooling while printing, applications must call the CHECKJPEGFORMAT or CHECKPNGFORMAT escape to verify
            that the printer recognizes the JPEG or PNG image, respectively, before calling <c>StretchDIBits</c>.
            </term>
            </item>
            </list>
            <para>
            <c>ICM:</c> Color management is performed if color management has been enabled with a call to SetICMMode with the iEnableICM
            parameter set to ICM_ON. If the bitmap specified by lpBitsInfo has a BITMAPV4HEADER that specifies the gamma and endpoints
            members, or a BITMAPV5HEADER that specifies either the gamma and endpoints members or the profileData and profileSize members,
            then the call treats the bitmap's pixels as being expressed in the color space described by those members, rather than in the
            device context's source color space.
            </para>
            <para>Examples</para>
            <para>For an example, see Sizing a JPEG or PNG Image.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.TransparentBlt(Vanara.PInvoke.HDC,System.Int32,System.Int32,System.Int32,System.Int32,Vanara.PInvoke.HDC,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32)">
            <summary>
            <para>
            The <c>GdiTransparentBlt</c> function performs a bit-block transfer of the color data corresponding to a rectangle of pixels from
            the specified source device context into a destination device context.
            </para>
            <para><c>Note</c> This function is the same as TransparentBlt.</para>
            </summary>
            <param name="hdcDest">A handle to the destination device context.</param>
            <param name="xoriginDest">The x-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
            <param name="yoriginDest">The y-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
            <param name="wDest">The width, in logical units, of the destination rectangle.</param>
            <param name="hDest">The height, in logical units, of the destination rectangle.</param>
            <param name="hdcSrc">A handle to the source device context.</param>
            <param name="xoriginSrc">The x-coordinate, in logical units, of the source rectangle.</param>
            <param name="yoriginSrc">The y-coordinate, in logical units, of the source rectangle.</param>
            <param name="wSrc">The width, in logical units, of the source rectangle.</param>
            <param name="hSrc">The height, in logical units, of the source rectangle.</param>
            <param name="crTransparent">The RGB color in the source bitmap to treat as transparent.</param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>.</para>
            </returns>
            <remarks>
            <para>The <c>GdiTransparentBlt</c> function works with compatible bitmaps (DDBs).</para>
            <para>
            The GdiTransparentBlt function supports all formats of source bitmaps. However, for 32 bpp bitmaps, it just copies the alpha
            value over. Use AlphaBlend to specify 32 bits-per-pixel bitmaps with transparency.
            </para>
            <para>
            If the source and destination rectangles are not the same size, the source bitmap is stretched to match the destination
            rectangle. When the SetStretchBltMode function is used, the iStretchMode modes of BLACKONWHITE and WHITEONBLACK are converted to
            COLORONCOLOR for the <c>GdiTransparentBlt</c> function.
            </para>
            <para>
            The destination device context specifies the transformation type for the destination coordinates. The source device context
            specifies the transformation type for the source coordinates.
            </para>
            <para>
            <c>GdiTransparentBlt</c> does not mirror a bitmap if either the width or height, of either the source or destination, is negative.
            </para>
            <para>
            When used in a multiple monitor system, both hdcSrc and hdcDest must refer to the same device or the function will fail. To
            transfer data between DCs for different devices, convert the memory bitmap to a DIB by calling GetDIBits. To display the DIB to
            the second device, call SetDIBits or StretchDIBits.
            </para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.GRADIENT_RECT">
            <summary>
            The <c>GRADIENT_RECT</c> structure specifies the index of two vertices in the pVertex array in the <c>GradientFill</c> function.
            These two vertices form the upper-left and lower-right boundaries of a rectangle.
            </summary>
            <remarks>
            <para>
            The <c>GRADIENT_RECT</c> structure specifies the values of the pVertex array that are used when the dwMode parameter of the
            GradientFill function is GRADIENT_FILL_RECT_H or GRADIENT_FILL_RECT_V. For related <c>GradientFill</c> structures, see
            GRADIENT_TRIANGLE and TRIVERTEX.
            </para>
            <para>
            The following images shows examples of a rectangle with a gradient fill - one in horizontal mode, the other in vertical mode.
            </para>
            <para>Examples</para>
            <para>For an example, see Drawing a Shaded Rectangle.</para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.GRADIENT_RECT.UpperLeft">
            <summary>The upper-left corner of a rectangle.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.GRADIENT_RECT.LowerRight">
            <summary>The lower-right corner of a rectangle.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.GRADIENT_TRIANGLE">
            <summary>
            The <c>GRADIENT_TRIANGLE</c> structure specifies the index of three vertices in the pVertex array in the <c>GradientFill</c>
            function. These three vertices form one triangle.
            </summary>
            <remarks>
            <para>
            The <c>GRADIENT_TRIANGLE</c> structure specifies the values in the pVertex array that are used when the dwMode parameter of the
            GradientFill function is GRADIENT_FILL_TRIANGLE. For related <c>GradientFill</c> structures, see GRADIENT_RECT and TRIVERTEX.
            </para>
            <para>The following image shows an example of a triangle with a gradient fill.</para>
            <para>Examples</para>
            <para>For an example, see Drawing a Shaded Triangle.</para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.GRADIENT_TRIANGLE.Vertex1">
            <summary>The first point of the triangle where sides intersect.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.GRADIENT_TRIANGLE.Vertex2">
            <summary>The second point of the triangle where sides intersect.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.GRADIENT_TRIANGLE.Vertex3">
            <summary>The third point of the triangle where sides intersect.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.HSECTION">
            <summary>Provides a handle to a DIB section.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.HSECTION.#ctor(System.IntPtr)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Gdi32.HSECTION"/> struct.</summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
        </member>
        <member name="P:Vanara.PInvoke.Gdi32.HSECTION.NULL">
            <summary>Returns an invalid handle by instantiating a <see cref="T:Vanara.PInvoke.Gdi32.HSECTION"/> object with <see cref="F:System.IntPtr.Zero"/>.</summary>
        </member>
        <member name="P:Vanara.PInvoke.Gdi32.HSECTION.IsNull">
            <summary>Gets a value indicating whether this instance is a null handle.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.HSECTION.op_Explicit(Vanara.PInvoke.Gdi32.HSECTION)~System.IntPtr">
            <summary>Performs an explicit conversion from <see cref="T:Vanara.PInvoke.Gdi32.HSECTION"/> to <see cref="T:System.IntPtr"/>.</summary>
            <param name="h">The handle.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.HSECTION.op_Implicit(System.IntPtr)~Vanara.PInvoke.Gdi32.HSECTION">
            <summary>Performs an implicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:Vanara.PInvoke.Gdi32.HSECTION"/>.</summary>
            <param name="h">The pointer to a handle.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.HSECTION.op_Inequality(Vanara.PInvoke.Gdi32.HSECTION,Vanara.PInvoke.Gdi32.HSECTION)">
            <summary>Implements the operator !=.</summary>
            <param name="h1">The first handle.</param>
            <param name="h2">The second handle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.HSECTION.op_Equality(Vanara.PInvoke.Gdi32.HSECTION,Vanara.PInvoke.Gdi32.HSECTION)">
            <summary>Implements the operator ==.</summary>
            <param name="h1">The first handle.</param>
            <param name="h2">The second handle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.HSECTION.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.HSECTION.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.HSECTION.DangerousGetHandle">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.TRIVERTEX">
            <summary>The <c>TRIVERTEX</c> structure contains color information and position information.</summary>
            <remarks>
            <para>
            In the <c>TRIVERTEX</c> structure, x and y indicate position in the same manner as in the POINTL structure contained in the
            wtypes.h header file. <c>Red</c>, <c>Green</c>, <c>Blue</c>, and <c>Alpha</c> members indicate color information at the point x,
            y. The color information of each channel is specified as a value from 0x0000 to 0xff00. This allows higher color resolution for
            an object that has been split into small triangles for display. The <c>TRIVERTEX</c> structure contains information needed by the
            pVertex parameter of GradientFill.
            </para>
            <para>Examples</para>
            <para>For an example of the use of this structure, see Drawing a Shaded Triangle or Drawing a Shaded Rectangle.</para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.TRIVERTEX.x">
            <summary>The x-coordinate, in logical units, of the upper-left corner of the rectangle.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.TRIVERTEX.y">
            <summary>The y-coordinate, in logical units, of the upper-left corner of the rectangle.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.TRIVERTEX.Red">
            <summary>The color information at the point of x, y.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.TRIVERTEX.Green">
            <summary>The color information at the point of x, y.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.TRIVERTEX.Blue">
            <summary>The color information at the point of x, y.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.TRIVERTEX.Alpha">
            <summary>The color information at the point of x, y.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.BitmapCompressionMode">
            <summary>The type of compression for a compressed bottom-up bitmap (top-down DIBs cannot be compressed). Used in <see cref="T:Vanara.PInvoke.Gdi32.BITMAPINFOHEADER"/>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BitmapCompressionMode.BI_RGB">
            <summary>An uncompressed format.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BitmapCompressionMode.BI_RLE8">
            <summary>
            A run-length encoded (RLE) format for bitmaps with 8 bpp. The compression format is a 2-byte format consisting of a count
            byte followed by a byte containing a color index.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BitmapCompressionMode.BI_RLE4">
            <summary>
            An RLE format for bitmaps with 4 bpp. The compression format is a 2-byte format consisting of a count byte followed by two
            word-length color indexes.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BitmapCompressionMode.BI_BITFIELDS">
            <summary>
            Specifies that the bitmap is not compressed and that the color table consists of three DWORD color masks that specify the
            red, green, and blue components, respectively, of each pixel. This is valid when used with 16- and 32-bpp bitmaps.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BitmapCompressionMode.BI_JPEG">
            <summary>Indicates that the image is a JPEG image.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BitmapCompressionMode.BI_PNG">
            <summary>Indicates that the image is a PNG image.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.BITMAP">
            <summary>The BITMAP structure defines the type, width, height, color format, and bit values of a bitmap.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BITMAP.bmType">
            <summary>The bitmap type. This member must be zero.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BITMAP.bmWidth">
            <summary>The width, in pixels, of the bitmap. The width must be greater than zero.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BITMAP.bmHeight">
            <summary>The height, in pixels, of the bitmap. The height must be greater than zero.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BITMAP.bmWidthBytes">
            <summary>
            The number of bytes in each scan line. This value must be divisible by 2, because the system assumes that the bit values of
            a bitmap form an array that is word aligned.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BITMAP.bmPlanes">
            <summary>The count of color planes.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BITMAP.bmBitsPixel">
            <summary>The number of bits required to indicate the color of a pixel.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BITMAP.bmBits">
            <summary>
            A pointer to the location of the bit values for the bitmap. The bmBits member must be a pointer to an array of character
            (1-byte) values.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.BITMAPCOREHEADER">
            <summary>The <c>BITMAPCOREHEADER</c> structure contains information about the dimensions and color format of a DIB.</summary>
            <remarks>
            <para>
            The BITMAPCOREINFO structure combines the <c>BITMAPCOREHEADER</c> structure and a color table to provide a complete definition
            of the dimensions and colors of a DIB. For more information about specifying a DIB, see <c>BITMAPCOREINFO</c>.
            </para>
            <para>
            An application should use the information stored in the <c>bcSize</c> member to locate the color table in a BITMAPCOREINFO
            structure, using a method such as the following:
            </para>
            <para>
            <code> pColor = ((LPBYTE) pBitmapCoreInfo + (WORD) (pBitmapCoreInfo -&gt; bcSize))</code>
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BITMAPCOREHEADER.bcSize">
            <summary>The number of bytes required by the structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BITMAPCOREHEADER.bcWidth">
            <summary>The width of the bitmap, in pixels.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BITMAPCOREHEADER.bcHeight">
            <summary>The height of the bitmap, in pixels.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BITMAPCOREHEADER.bcPlanes">
            <summary>The number of planes for the target device. This value must be 1.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BITMAPCOREHEADER.bcBitCount">
            <summary>The number of bits-per-pixel. This value must be 1, 4, 8, or 24.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.BITMAPCOREINFO">
            <summary>The <c>BITMAPCOREINFO</c> structure defines the dimensions and color information for a DIB.</summary>
            <remarks>
            <para>
            A DIB consists of two parts: a <c>BITMAPCOREINFO</c> structure describing the dimensions and colors of the bitmap, and an array
            of bytes defining the pixels of the bitmap. The bits in the array are packed together, but each scan line must be padded with
            zeros to end on a <c>LONG</c> boundary. The origin of the bitmap is the lower-left corner.
            </para>
            <para>
            The <c>bcBitCount</c> member of the BITMAPCOREHEADER structure determines the number of bits that define each pixel and the
            maximum number of colors in the bitmap. This member can be one of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>1</term>
            <term>
            The bitmap is monochrome, and the bmciColors member contains two entries. Each bit in the bitmap array represents a pixel. If
            the bit is clear, the pixel is displayed with the color of the first entry in the bmciColors table; if the bit is set, the pixel
            has the color of the second entry in the table.
            </term>
            </item>
            <item>
            <term>4</term>
            <term>
            The bitmap has a maximum of 16 colors, and the bmciColors member contains up to 16 entries. Each pixel in the bitmap is
            represented by a 4-bit index into the color table. For example, if the first byte in the bitmap is 0x1F, the byte represents two
            pixels. The first pixel contains the color in the second table entry, and the second pixel contains the color in the sixteenth
            table entry.
            </term>
            </item>
            <item>
            <term>8</term>
            <term>
            The bitmap has a maximum of 256 colors, and the bmciColors member contains up to 256 entries. In this case, each byte in the
            array represents a single pixel.
            </term>
            </item>
            <item>
            <term>24</term>
            <term>
            The bitmap has a maximum of 2 (24) colors, and the bmciColors member is NULL. Each three-byte triplet in the bitmap array
            represents the relative intensities of blue, green, and red, respectively, for a pixel.
            </term>
            </item>
            </list>
            <para>The colors in the <c>bmciColors</c> table should appear in order of importance.</para>
            <para>
            Alternatively, for functions that use DIBs, the <c>bmciColors</c> member can be an array of 16-bit unsigned integers that
            specify indexes into the currently realized logical palette, instead of explicit RGB values. In this case, an application using
            the bitmap must call the DIB functions ( CreateDIBitmap, CreateDIBPatternBrush, and CreateDIBSection ) with the iUsage parameter
            set to DIB_PAL_COLORS.
            </para>
            <para><c>Note</c>
            <para></para>
            The <c>bmciColors</c> member should not contain palette indexes if the bitmap is to be stored in a file or transferred to
            another application. Unless the application has exclusive use and control of the bitmap, the bitmap color table should contain
            explicit RGB values.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BITMAPCOREINFO.bmciHeader">
            <summary>A BITMAPCOREHEADER structure that contains information about the dimensions and color format of a DIB.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BITMAPCOREINFO.bmciColors">
            <summary>Specifies an array of RGBTRIPLE structures that define the colors in the bitmap.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.BITMAPFILEHEADER">
            <summary>
            The <c>BITMAPFILEHEADER</c> structure contains information about the type, size, and layout of a file that contains a DIB.
            </summary>
            <remarks>
            A BITMAPINFO or BITMAPCOREINFO structure immediately follows the <c>BITMAPFILEHEADER</c> structure in the DIB file. For more
            information, see Bitmap Storage.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BITMAPFILEHEADER.bfType">
            <summary>The file type; must be BM.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BITMAPFILEHEADER.bfSize">
            <summary>The size, in bytes, of the bitmap file.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BITMAPFILEHEADER.bfReserved1">
            <summary>Reserved; must be zero.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BITMAPFILEHEADER.bfReserved2">
            <summary>Reserved; must be zero.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BITMAPFILEHEADER.bfOffBits">
            <summary>The offset, in bytes, from the beginning of the <c>BITMAPFILEHEADER</c> structure to the bitmap bits.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.BITMAPINFO">
            <summary>The BITMAPINFO structure defines the dimensions and color information for a DIB.</summary>
            <remarks>
            A DIB consists of two distinct parts: a BITMAPINFO structure describing the dimensions and colors of the bitmap, and an array of
            bytes defining the pixels of the bitmap. The bits in the array are packed together, but each scan line must be padded with zeros
            to end on a LONG data-type boundary. If the height of the bitmap is positive, the bitmap is a bottom-up DIB and its origin is
            the lower-left corner. If the height is negative, the bitmap is a top-down DIB and its origin is the upper left corner.
            <para>
            A bitmap is packed when the bitmap array immediately follows the BITMAPINFO header. Packed bitmaps are referenced by a single
            pointer. For packed bitmaps, the biClrUsed member must be set to an even number when using the DIB_PAL_COLORS mode so that the
            DIB bitmap array starts on a DWORD boundary.
            </para>
            <para><c>Note</c></para>
            <para>
            The bmiColors member should not contain palette indexes if the bitmap is to be stored in a file or transferred to another application.
            </para>
            <para>
            Unless the application has exclusive use and control of the bitmap, the bitmap color table should contain explicit RGB values.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BITMAPINFO.bmiHeader">
            <summary>A BITMAPINFOHEADER structure that contains information about the dimensions of color format.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BITMAPINFO.bmiColors">
            <summary>
            The bmiColors member contains one of the following:
            <list type="bullet">
            <item>
            <description>An array of RGBQUAD. The elements of the array that make up the color table.</description>
            </item>
            <item>
            <description>
            An array of 16-bit unsigned integers that specifies indexes into the currently realized logical palette. This use of
            bmiColors is allowed for functions that use DIBs. When bmiColors elements contain indexes to a realized logical palette,
            they must also call the following bitmap
            functions: CreateDIBitmap, CreateDIBPatternBrush, CreateDIBSection (The iUsage parameter of CreateDIBSection must be set to DIB_PAL_COLORS.)
            </description>
            </item>
            </list>
            <para>
            The number of entries in the array depends on the values of the biBitCount and biClrUsed members of the BITMAPINFOHEADER structure.
            </para>
            <para>The colors in the bmiColors table appear in order of importance. For more information, see the Remarks section.</para>
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.BITMAPINFO.#ctor(System.Int32,System.Int32,System.UInt16)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Gdi32.BITMAPINFO"/> structure.</summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="bitCount">The bit count.</param>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.BITMAPINFO.FromHBITMAP(Vanara.PInvoke.HBITMAP@)">
            <summary>Creates a <see cref="T:Vanara.PInvoke.Gdi32.BITMAPINFO"/> structure from the information in a bitmap handle.</summary>
            <param name="hBmp">The handle to a bitmap.</param>
            <returns>
            A structure with all the information the bitmap handle. If the specified bitmap is less than 24bpp, this resulting structure
            must not be used without creating unmanaged memory to hold the structure and <c>BITMAPINFO.bmiHeader.biClrUsed *
            sizeof(RGBQUAD)</c> extra bytes.
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.BITMAPINFOHEADER">
            <summary>
            <para>
            The <c>BITMAPINFOHEADER</c> structure contains information about the dimensions and color format of a device-independent bitmap (DIB).
            </para>
            <para>
            <c>Note</c> This structure is also described in the GDI documentation. However, the semantics for video data are slightly
            different than the semantics used for GDI. If you are using this structure to describe video data, use the information given here.
            </para>
            </summary>
            <remarks>
            <para>Color Tables</para>
            <para>
            The <c>BITMAPINFOHEADER</c> structure may be followed by an array of palette entries or color masks. The rules depend on the
            value of <c>biCompression</c>.
            </para>
            <list type="bullet">
            <item>
            <term>
            If <c>biCompression</c> equals <c>BI_RGB</c> and the bitmap uses 8 bpp or less, the bitmap has a color table immediatelly
            following the <c>BITMAPINFOHEADER</c> structure. The color table consists of an array of <c>RGBQUAD</c> values. The size of the
            array is given by the <c>biClrUsed</c> member. If <c>biClrUsed</c> is zero, the array contains the maximum number of colors for
            the given bitdepth; that is, 2^ <c>biBitCount</c> colors.
            </term>
            </item>
            <item>
            <term>
            If <c>biCompression</c> equals <c>BI_BITFIELDS</c>, the bitmap uses three <c>DWORD</c> color masks (red, green, and blue,
            respectively), which specify the byte layout of the pixels. The 1 bits in each mask indicate the bits for that color within the pixel.
            </term>
            </item>
            <item>
            <term>
            If <c>biCompression</c> is a video FOURCC, the presence of a color table is implied by the video format. You should not assume
            that a color table exists when the bit depth is 8 bpp or less. However, some legacy components might assume that a color table
            is present. Therefore, if you are allocating a <c>BITMAPINFOHEADER</c> structure, it is recommended to allocate space for a
            color table when the bit depth is 8 bpp or less, even if the color table is not used.
            </term>
            </item>
            </list>
            <para>
            When the <c>BITMAPINFOHEADER</c> is followed by a color table or a set of color masks, you can use the BITMAPINFO structure to
            reference the color table of the color masks. The <c>BITMAPINFO</c> structure is defined as follows:
            </para>
            <para>
            <code>typedef struct tagBITMAPINFO { BITMAPINFOHEADER bmiHeader; RGBQUAD bmiColors[1]; } BITMAPINFO;</code>
            </para>
            <para>
            If you cast the <c>BITMAPINFOHEADER</c> to a BITMAPINFO, the <c>bmiHeader</c> member refers to the <c>BITMAPINFOHEADER</c> and
            the <c>bmiColors</c> member refers to the first entry in the color table, or the first color mask.
            </para>
            <para>
            Be aware that if the bitmap uses a color table or color masks, then the size of the entire format structure (the
            <c>BITMAPINFOHEADER</c> plus the color information) is not equal to
            <code>sizeof(BITMAPINFOHEADER)</code>
            or
            <code>sizeof(BITMAPINFO)</code>
            . You must calculate the actual size for each instance.
            </para>
            <para>Calculating Surface Stride</para>
            <para>
            In an uncompressed bitmap, the stride is the number of bytes needed to go from the start of one row of pixels to the start of
            the next row. The image format defines a minimum stride for an image. In addition, the graphics hardware might require a larger
            stride for the surface that contains the image.
            </para>
            <para>
            For uncompressed RGB formats, the minimum stride is always the image width in bytes, rounded up to the nearest <c>DWORD</c>. You
            can use the following formula to calculate the stride:
            </para>
            <para>
            <code>stride = ((((biWidth * biBitCount) + 31) &amp; ~31) &gt;&gt; 3)</code>
            </para>
            <para>
            For YUV formats, there is no general rule for calculating the minimum stride. You must understand the rules for the particular
            YUV format. For a description of the most common YUV formats, see Recommended 8-Bit YUV Formats for Video Rendering.
            </para>
            <para>
            Decoders and video sources should propose formats where biWidth is the width of the image in pixels. If the video renderer
            requires a surface stride that is larger than the default image stride, it modifies the proposed media type by setting the
            following values:
            </para>
            <list type="bullet">
            <item>
            <term>It sets <c>biWidth</c> equal to the surface stride in pixels.</term>
            </item>
            <item>
            <term>It sets the <c>rcTarget</c> member of the VIDEOINFOHEADER or VIDEOINFOHEADER2 structure equal to the image width, in pixels.</term>
            </item>
            </list>
            <para>
            Then the video renderer proposes the modified format by calling IPin::QueryAccept on the upstream pin. For more information
            about this mechanism, see Dynamic Format Changes.
            </para>
            <para>
            If there is padding in the image buffer, never dereference a pointer into the memory that has been reserved for the padding. If
            the image buffer has been allocated in video memory, the padding might not be readable memory.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BITMAPINFOHEADER.biSize">
            <summary>
            Specifies the number of bytes required by the structure. This value does not include the size of the color table or the size
            of the color masks, if they are appended to the end of structure. See Remarks.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BITMAPINFOHEADER.biWidth">
            <summary>
            Specifies the width of the bitmap, in pixels. For information about calculating the stride of the bitmap, see Remarks.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BITMAPINFOHEADER.biHeight">
            <summary>
            <para>Specifies the height of the bitmap, in pixels.</para>
            <list type="bullet">
            <item>
            <term>
            For uncompressed RGB bitmaps, if <c>biHeight</c> is positive, the bitmap is a bottom-up DIB with the origin at the lower
            left corner. If <c>biHeight</c> is negative, the bitmap is a top-down DIB with the origin at the upper left corner.
            </term>
            </item>
            <item>
            <term>
            For YUV bitmaps, the bitmap is always top-down, regardless of the sign of <c>biHeight</c>. Decoders should offer YUV formats
            with postive <c>biHeight</c>, but for backward compatibility they should accept YUV formats with either positive or negative <c>biHeight</c>.
            </term>
            </item>
            <item>
            <term>For compressed formats, <c>biHeight</c> must be positive, regardless of image orientation.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BITMAPINFOHEADER.biPlanes">
            <summary>Specifies the number of planes for the target device. This value must be set to 1.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BITMAPINFOHEADER.biBitCount">
            <summary>
            Specifies the number of bits per pixel (bpp). For uncompressed formats, this value is the average number of bits per pixel.
            For compressed formats, this value is the implied bit depth of the uncompressed image, after the image has been decoded.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BITMAPINFOHEADER.biCompression">
            <summary>
            <para>
            For compressed video and YUV formats, this member is a FOURCC code, specified as a <c>DWORD</c> in little-endian order. For
            example, YUYV video has the FOURCC 'VYUY' or 0x56595559. For more information, see FOURCC Codes.
            </para>
            <para>For uncompressed RGB formats, the following values are possible:</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>BI_RGB</term>
            <term>Uncompressed RGB.</term>
            </item>
            <item>
            <term>BI_BITFIELDS</term>
            <term>Uncompressed RGB with color masks. Valid for 16-bpp and 32-bpp bitmaps.</term>
            </item>
            </list>
            <para>See Remarks for more information. Note that <c>BI_JPG</c> and <c>BI_PNG</c> are not valid video formats.</para>
            <para>
            For 16-bpp bitmaps, if <c>biCompression</c> equals <c>BI_RGB</c>, the format is always RGB 555. If <c>biCompression</c>
            equals <c>BI_BITFIELDS</c>, the format is either RGB 555 or RGB 565. Use the subtype GUID in the AM_MEDIA_TYPE structure to
            determine the specific RGB type.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BITMAPINFOHEADER.biSizeImage">
            <summary>Specifies the size, in bytes, of the image. This can be set to 0 for uncompressed RGB bitmaps.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BITMAPINFOHEADER.biXPelsPerMeter">
            <summary>Specifies the horizontal resolution, in pixels per meter, of the target device for the bitmap.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BITMAPINFOHEADER.biYPelsPerMeter">
            <summary>Specifies the vertical resolution, in pixels per meter, of the target device for the bitmap.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BITMAPINFOHEADER.biClrUsed">
            <summary>
            Specifies the number of color indices in the color table that are actually used by the bitmap. See Remarks for more information.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BITMAPINFOHEADER.biClrImportant">
            <summary>
            Specifies the number of color indices that are considered important for displaying the bitmap. If this value is zero, all
            colors are important.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.BITMAPINFOHEADER.#ctor(System.Int32,System.Int32,System.UInt16)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Gdi32.BITMAPINFOHEADER"/> structure.</summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="bitCount">The bit count.</param>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.BITMAPINFOHEADER.FromHBITMAP(Vanara.PInvoke.HBITMAP@)">
            <summary>Creates a <see cref="T:Vanara.PInvoke.Gdi32.BITMAPINFOHEADER"/> structure from the information in a bitmap handle.</summary>
            <param name="hBmp">The handle to a bitmap.</param>
            <returns>
            A structure with all the information the bitmap handle. If the specified bitmap is less than 24bpp, the <see
            cref="F:Vanara.PInvoke.Gdi32.BITMAPINFOHEADER.biClrUsed"/> value is set to the number of <see cref="T:Vanara.PInvoke.RGBQUAD"/> structures that must be allocated.
            </returns>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BITMAPINFOHEADER.Default">
            <summary>Gets the default value for this structure with size fields set appropriately.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.BITMAPV4HEADER">
            <summary>
            <para>
            The <c>BITMAPV4HEADER</c> structure is the bitmap information header file. It is an extended version of the BITMAPINFOHEADER structure.
            </para>
            <para>Applications can use the BITMAPV5HEADER structure for added functionality.</para>
            </summary>
            <remarks>
            The <c>BITMAPV4HEADER</c> structure is extended to allow a JPEG or PNG image to be passed as the source image to StretchDIBits.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BITMAPV4HEADER.bV4Size">
            <summary>
            The number of bytes required by the structure. Applications should use this member to determine which bitmap information
            header structure is being used.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BITMAPV4HEADER.bV4Width">
            <summary>
            <para>The width of the bitmap, in pixels.</para>
            <para>If <c>bV4Compression</c> is BI_JPEG or BI_PNG, <c>bV4Width</c> specifies the width of the JPEG or PNG image in pixels.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BITMAPV4HEADER.bV4Height">
            <summary>
            <para>
            The height of the bitmap, in pixels. If <c>bV4Height</c> is positive, the bitmap is a bottom-up DIB and its origin is the
            lower-left corner. If <c>bV4Height</c> is negative, the bitmap is a top-down DIB and its origin is the upper-left corner.
            </para>
            <para>
            If <c>bV4Height</c> is negative, indicating a top-down DIB, <c>bV4Compression</c> must be either BI_RGB or BI_BITFIELDS.
            Top-down DIBs cannot be compressed.
            </para>
            <para>If <c>bV4Compression</c> is BI_JPEG or BI_PNG, <c>bV4Height</c> specifies the height of the JPEG or PNG image in pixels.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BITMAPV4HEADER.bV4Planes">
            <summary>The number of planes for the target device. This value must be set to 1.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BITMAPV4HEADER.bV4BitCount">
            <summary>
            <para>
            The number of bits-per-pixel. The <c>bV4BitCount</c> member of the <c>BITMAPV4HEADER</c> structure determines the number of
            bits that define each pixel and the maximum number of colors in the bitmap. This member must be one of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>0</term>
            <term>The number of bits-per-pixel is specified or is implied by the JPEG or PNG file format.</term>
            </item>
            <item>
            <term>1</term>
            <term>
            The bitmap is monochrome, and the bmiColors member of BITMAPINFO contains two entries. Each bit in the bitmap array
            represents a pixel. If the bit is clear, the pixel is displayed with the color of the first entry in the bmiColors table; if
            the bit is set, the pixel has the color of the second entry in the table.
            </term>
            </item>
            <item>
            <term>4</term>
            <term>
            The bitmap has a maximum of 16 colors, and the bmiColors member of BITMAPINFO contains up to 16 entries. Each pixel in the
            bitmap is represented by a 4-bit index into the color table. For example, if the first byte in the bitmap is 0x1F, the byte
            represents two pixels. The first pixel contains the color in the second table entry, and the second pixel contains the color
            in the sixteenth table entry.
            </term>
            </item>
            <item>
            <term>8</term>
            <term>
            The bitmap has a maximum of 256 colors, and the bmiColors member of BITMAPINFO contains up to 256 entries. In this case,
            each byte in the array represents a single pixel.
            </term>
            </item>
            <item>
            <term>16</term>
            <term>
            The bitmap has a maximum of 2^16 colors. If the bV4Compression member of the BITMAPV4HEADER structure is BI_RGB, the
            bmiColors member of BITMAPINFO is NULL. Each WORD in the bitmap array represents a single pixel. The relative intensities of
            red, green, and blue are represented with five bits for each color component. The value for blue is in the least significant
            five bits, followed by five bits each for green and red, respectively. The most significant bit is not used. The bmiColors
            color table is used for optimizing colors used on palette-based devices, and must contain the number of entries specified by
            the bV4ClrUsed member of the BITMAPV4HEADER.If the bV4Compression member of the BITMAPV4HEADER is BI_BITFIELDS, the
            bmiColors member contains three DWORD color masks that specify the red, green, and blue components of each pixel. Each WORD
            in the bitmap array represents a single pixel.
            </term>
            </item>
            <item>
            <term>24</term>
            <term>
            The bitmap has a maximum of 2^24 colors, and the bmiColors member of BITMAPINFO is NULL. Each 3-byte triplet in the bitmap
            array represents the relative intensities of blue, green, and red for a pixel. The bmiColors color table is used for
            optimizing colors used on palette-based devices, and must contain the number of entries specified by the bV4ClrUsed member
            of the BITMAPV4HEADER.
            </term>
            </item>
            <item>
            <term>32</term>
            <term>
            The bitmap has a maximum of 2^32 colors. If the bV4Compression member of the BITMAPV4HEADER is BI_RGB, the bmiColors member
            of BITMAPINFO is NULL. Each DWORD in the bitmap array represents the relative intensities of blue, green, and red for a
            pixel. The value for blue is in the least significant 8 bits, followed by 8 bits each for green and red. The high byte in
            each DWORD is not used. The bmiColors color table is used for optimizing colors used on palette-based devices, and must
            contain the number of entries specified by the bV4ClrUsed member of the BITMAPV4HEADER.If the bV4Compression member of the
            BITMAPV4HEADER is BI_BITFIELDS, the bmiColors member contains three DWORD color masks that specify the red, green, and blue
            components of each pixel. Each DWORD in the bitmap array represents a single pixel.
            </term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BITMAPV4HEADER.bV4V4Compression">
            <summary>
            <para>
            The type of compression for a compressed bottom-up bitmap (top-down DIBs cannot be compressed). This member can be one of
            the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>BI_RGB</term>
            <term>An uncompressed format.</term>
            </item>
            <item>
            <term>BI_RLE8</term>
            <term>
            A run-length encoded (RLE) format for bitmaps with 8 bpp. The compression format is a 2-byte format consisting of a count
            byte followed by a byte containing a color index. For more information, see Bitmap Compression.
            </term>
            </item>
            <item>
            <term>BI_RLE4</term>
            <term>
            An RLE format for bitmaps with 4 bpp. The compression format is a 2-byte format consisting of a count byte followed by two
            word-length color indexes. For more information, see Bitmap Compression.
            </term>
            </item>
            <item>
            <term>BI_BITFIELDS</term>
            <term>
            Specifies that the bitmap is not compressed. The members bV4RedMask, bV4GreenMask, and bV4BlueMask specify the red, green,
            and blue components for each pixel. This is valid when used with 16- and 32-bpp bitmaps.
            </term>
            </item>
            <item>
            <term>BI_JPEG</term>
            <term>
            Specifies that the image is compressed using the JPEG file interchange format. JPEG compression trades off compression
            against loss; it can achieve a compression ratio of 20:1 with little noticeable loss.
            </term>
            </item>
            <item>
            <term>BI_PNG</term>
            <term>Specifies that the image is compressed using the PNG file interchange format.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BITMAPV4HEADER.bV4SizeImage">
            <summary>
            <para>The size, in bytes, of the image. This may be set to zero for BI_RGB bitmaps.</para>
            <para>If <c>bV4Compression</c> is BI_JPEG or BI_PNG, <c>bV4SizeImage</c> is the size of the JPEG or PNG image buffer.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BITMAPV4HEADER.bV4XPelsPerMeter">
            <summary>
            The horizontal resolution, in pixels-per-meter, of the target device for the bitmap. An application can use this value to
            select a bitmap from a resource group that best matches the characteristics of the current device.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BITMAPV4HEADER.bV4YPelsPerMeter">
            <summary>The vertical resolution, in pixels-per-meter, of the target device for the bitmap.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BITMAPV4HEADER.bV4ClrUsed">
            <summary>
            <para>
            The number of color indexes in the color table that are actually used by the bitmap. If this value is zero, the bitmap uses
            the maximum number of colors corresponding to the value of the <c>bV4BitCount</c> member for the compression mode specified
            by <c>bV4Compression</c>.
            </para>
            <para>
            If <c>bV4ClrUsed</c> is nonzero and the <c>bV4BitCount</c> member is less than 16, the <c>bV4ClrUsed</c> member specifies
            the actual number of colors the graphics engine or device driver accesses. If <c>bV4BitCount</c> is 16 or greater, the
            <c>bV4ClrUsed</c> member specifies the size of the color table used to optimize performance of the system color palettes. If
            <c>bV4BitCount</c> equals 16 or 32, the optimal color palette starts immediately following the <c>BITMAPV4HEADER</c>.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BITMAPV4HEADER.bV4ClrImportant">
            <summary>
            The number of color indexes that are required for displaying the bitmap. If this value is zero, all colors are important.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BITMAPV4HEADER.bV4RedMask">
            <summary>Color mask that specifies the red component of each pixel, valid only if <c>bV4Compression</c> is set to BI_BITFIELDS.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BITMAPV4HEADER.bV4GreenMask">
            <summary>Color mask that specifies the green component of each pixel, valid only if <c>bV4Compression</c> is set to BI_BITFIELDS.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BITMAPV4HEADER.bV4BlueMask">
            <summary>Color mask that specifies the blue component of each pixel, valid only if <c>bV4Compression</c> is set to BI_BITFIELDS.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BITMAPV4HEADER.bV4AlphaMask">
            <summary>Color mask that specifies the alpha component of each pixel.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BITMAPV4HEADER.bV4CSType">
            <summary>
            <para>The color space of the DIB. The following table lists the value for <c>bV4CSType</c>.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>LCS_CALIBRATED_RGB</term>
            <term>This value indicates that endpoints and gamma values are given in the appropriate fields.</term>
            </item>
            </list>
            <para>See the LOGCOLORSPACE structure for information that defines a logical color space.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BITMAPV4HEADER.bV4Endpoints">
            <summary>
            <para>
            A CIEXYZTRIPLE structure that specifies the x, y, and z coordinates of the three colors that correspond to the red, green,
            and blue endpoints for the logical color space associated with the bitmap. This member is ignored unless the
            <c>bV4CSType</c> member specifies LCS_CALIBRATED_RGB.
            </para>
            <para>
            <c>Note</c> A color space is a model for representing color numerically in terms of three or more coordinates. For example,
            the RGB color space represents colors in terms of the red, green, and blue coordinates.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BITMAPV4HEADER.bV4GammaRed">
            <summary>
            Tone response curve for red. This member is ignored unless color values are calibrated RGB values and <c>bV4CSType</c> is
            set to LCS_CALIBRATED_RGB. Specify in unsigned fixed 16.16 format. The upper 16 bits are the unsigned integer value. The
            lower 16 bits are the fractional part.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BITMAPV4HEADER.bV4GammaGreen">
            <summary>
            Tone response curve for green. Used if <c>bV4CSType</c> is set to LCS_CALIBRATED_RGB. Specify in unsigned fixed 16.16
            format. The upper 16 bits are the unsigned integer value. The lower 16 bits are the fractional part.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BITMAPV4HEADER.bV4GammaBlue">
            <summary>
            Tone response curve for blue. Used if <c>bV4CSType</c> is set to LCS_CALIBRATED_RGB. Specify in unsigned fixed 16.16 format.
            The upper 16 bits are the unsigned integer value. The lower 16 bits are the fractional part.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.BITMAPV5HEADER">
            <summary>
            The <c>BITMAPV5HEADER</c> structure is the bitmap information header file. It is an extended version of the BITMAPINFOHEADER structure.
            </summary>
            <remarks>
            <para>
            If <c>bV5Height</c> is negative, indicating a top-down DIB, <c>bV5Compression</c> must be either BI_RGB or BI_BITFIELDS.
            Top-down DIBs cannot be compressed.
            </para>
            <para>
            The Independent Color Management interface (ICM) 2.0 allows International Color Consortium (ICC) color profiles to be linked or
            embedded in DIBs (DIBs). See Using Structures for more information.
            </para>
            <para>
            When a DIB is loaded into memory, the profile data (if present) should follow the color table, and the <c>bV5ProfileData</c>
            should provide the offset of the profile data from the beginning of the <c>BITMAPV5HEADER</c> structure. The value stored in
            <c>bV5ProfileData</c> will be different from the value returned by the <c>sizeof</c> operator given the <c>BITMAPV5HEADER</c>
            argument, because <c>bV5ProfileData</c> is the offset in bytes from the beginning of the <c>BITMAPV5HEADER</c> structure to the
            start of the profile data. (Bitmap bits do not follow the color table in memory). Applications should modify the
            <c>bV5ProfileData</c> member after loading the DIB into memory.
            </para>
            <para>
            For packed DIBs, the profile data should follow the bitmap bits similar to the file format. The <c>bV5ProfileData</c> member
            should still give the offset of the profile data from the beginning of the <c>BITMAPV5HEADER</c>.
            </para>
            <para>
            Applications should access the profile data only when <c>bV5Size</c> equals the size of the <c>BITMAPV5HEADER</c> and
            <c>bV5CSType</c> equals PROFILE_EMBEDDED or PROFILE_LINKED.
            </para>
            <para>
            If a profile is linked, the path of the profile can be any fully qualified name (including a network path) that can be opened
            using the CreateFile function.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BITMAPV5HEADER.bV5Size">
            <summary>
            The number of bytes required by the structure. Applications should use this member to determine which bitmap information
            header structure is being used.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BITMAPV5HEADER.bV5Width">
            <summary>
            <para>The width of the bitmap, in pixels.</para>
            <para>
            If <c>bV5Compression</c> is BI_JPEG or BI_PNG, the <c>bV5Width</c> member specifies the width of the decompressed JPEG or
            PNG image in pixels.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BITMAPV5HEADER.bV5Height">
            <summary>
            <para>
            The height of the bitmap, in pixels. If the value of <c>bV5Height</c> is positive, the bitmap is a bottom-up DIB and its
            origin is the lower-left corner. If <c>bV5Height</c> value is negative, the bitmap is a top-down DIB and its origin is the
            upper-left corner.
            </para>
            <para>
            If <c>bV5Height</c> is negative, indicating a top-down DIB, <c>bV5Compression</c> must be either BI_RGB or BI_BITFIELDS.
            Top-down DIBs cannot be compressed.
            </para>
            <para>
            If <c>bV5Compression</c> is BI_JPEG or BI_PNG, the <c>bV5Height</c> member specifies the height of the decompressed JPEG or
            PNG image in pixels.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BITMAPV5HEADER.bV5Planes">
            <summary>The number of planes for the target device. This value must be set to 1.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BITMAPV5HEADER.bV5BitCount">
            <summary>
            <para>The number of bits that define each pixel and the maximum number of colors in the bitmap.</para>
            <para>This member can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>0</term>
            <term>The number of bits per pixel is specified or is implied by the JPEG or PNG file format.</term>
            </item>
            <item>
            <term>1</term>
            <term>
            The bitmap is monochrome, and the bmiColors member of BITMAPINFO contains two entries. Each bit in the bitmap array
            represents a pixel. If the bit is clear, the pixel is displayed with the color of the first entry in the bmiColors color
            table. If the bit is set, the pixel has the color of the second entry in the table.
            </term>
            </item>
            <item>
            <term>4</term>
            <term>
            The bitmap has a maximum of 16 colors, and the bmiColors member of BITMAPINFO contains up to 16 entries. Each pixel in the
            bitmap is represented by a 4-bit index into the color table. For example, if the first byte in the bitmap is 0x1F, the byte
            represents two pixels. The first pixel contains the color in the second table entry, and the second pixel contains the color
            in the sixteenth table entry.
            </term>
            </item>
            <item>
            <term>8</term>
            <term>
            The bitmap has a maximum of 256 colors, and the bmiColors member of BITMAPINFO contains up to 256 entries. In this case,
            each byte in the array represents a single pixel.
            </term>
            </item>
            <item>
            <term>16</term>
            <term>
            The bitmap has a maximum of 2^16 colors. If the bV5Compression member of the BITMAPV5HEADER structure is BI_RGB, the
            bmiColors member of BITMAPINFO is NULL. Each WORD in the bitmap array represents a single pixel. The relative intensities of
            red, green, and blue are represented with five bits for each color component. The value for blue is in the least significant
            five bits, followed by five bits each for green and red. The most significant bit is not used. The bmiColors color table is
            used for optimizing colors used on palette-based devices, and must contain the number of entries specified by the bV5ClrUsed
            member of the BITMAPV5HEADER.If the bV5Compression member of the BITMAPV5HEADER is BI_BITFIELDS, the bmiColors member
            contains three DWORD color masks that specify the red, green, and blue components, respectively, of each pixel. Each WORD in
            the bitmap array represents a single pixel. When the bV5Compression member is BI_BITFIELDS, bits set in each DWORD mask must
            be contiguous and should not overlap the bits of another mask. All the bits in the pixel do not need to be used.
            </term>
            </item>
            <item>
            <term>24</term>
            <term>
            The bitmap has a maximum of 2^24 colors, and the bmiColors member of BITMAPINFO is NULL. Each 3-byte triplet in the bitmap
            array represents the relative intensities of blue, green, and red, respectively, for a pixel. The bmiColors color table is
            used for optimizing colors used on palette-based devices, and must contain the number of entries specified by the bV5ClrUsed
            member of the BITMAPV5HEADER structure.
            </term>
            </item>
            <item>
            <term>32</term>
            <term>
            The bitmap has a maximum of 2^32 colors. If the bV5Compression member of the BITMAPV5HEADER is BI_RGB, the bmiColors member
            of BITMAPINFO is NULL. Each DWORD in the bitmap array represents the relative intensities of blue, green, and red for a
            pixel. The value for blue is in the least significant 8 bits, followed by 8 bits each for green and red. The high byte in
            each DWORD is not used. The bmiColors color table is used for optimizing colors used on palette-based devices, and must
            contain the number of entries specified by the bV5ClrUsed member of the BITMAPV5HEADER.If the bV5Compression member of the
            BITMAPV5HEADER is BI_BITFIELDS, the bmiColors member contains three DWORD color masks that specify the red, green, and blue
            components of each pixel. Each DWORD in the bitmap array represents a single pixel.
            </term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BITMAPV5HEADER.bV5Compression">
            <summary>
            <para>
            Specifies that the bitmap is not compressed. The <c>bV5RedMask</c>, <c>bV5GreenMask</c>, and <c>bV5BlueMask</c> members
            specify the red, green, and blue components of each pixel. This is valid when used with 16- and 32-bpp bitmaps. This member
            can be one of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>BI_RGB</term>
            <term>An uncompressed format.</term>
            </item>
            <item>
            <term>BI_RLE8</term>
            <term>
            A run-length encoded (RLE) format for bitmaps with 8 bpp. The compression format is a two-byte format consisting of a count
            byte followed by a byte containing a color index. If bV5Compression is BI_RGB and the bV5BitCount member is 16, 24, or 32,
            the bitmap array specifies the actual intensities of blue, green, and red rather than using color table indexes. For more
            information, see Bitmap Compression.
            </term>
            </item>
            <item>
            <term>BI_RLE4</term>
            <term>
            An RLE format for bitmaps with 4 bpp. The compression format is a two-byte format consisting of a count byte followed by two
            word-length color indexes. For more information, see Bitmap Compression.
            </term>
            </item>
            <item>
            <term>BI_BITFIELDS</term>
            <term>
            Specifies that the bitmap is not compressed and that the color masks for the red, green, and blue components of each pixel
            are specified in the bV5RedMask, bV5GreenMask, and bV5BlueMask members. This is valid when used with 16- and 32-bpp bitmaps.
            </term>
            </item>
            <item>
            <term>BI_JPEG</term>
            <term>
            Specifies that the image is compressed using the JPEG file Interchange Format. JPEG compression trades off compression
            against loss; it can achieve a compression ratio of 20:1 with little noticeable loss.
            </term>
            </item>
            <item>
            <term>BI_PNG</term>
            <term>Specifies that the image is compressed using the PNG file Interchange Format.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BITMAPV5HEADER.bV5SizeImage">
            <summary>
            <para>The size, in bytes, of the image. This may be set to zero for BI_RGB bitmaps.</para>
            <para>If <c>bV5Compression</c> is BI_JPEG or BI_PNG, <c>bV5SizeImage</c> is the size of the JPEG or PNG image buffer.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BITMAPV5HEADER.bV5XPelsPerMeter">
            <summary>
            The horizontal resolution, in pixels-per-meter, of the target device for the bitmap. An application can use this value to
            select a bitmap from a resource group that best matches the characteristics of the current device.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BITMAPV5HEADER.bV5YPelsPerMeter">
            <summary>The vertical resolution, in pixels-per-meter, of the target device for the bitmap.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BITMAPV5HEADER.bV5ClrUsed">
            <summary>
            <para>
            The number of color indexes in the color table that are actually used by the bitmap. If this value is zero, the bitmap uses
            the maximum number of colors corresponding to the value of the <c>bV5BitCount</c> member for the compression mode specified
            by <c>bV5Compression</c>.
            </para>
            <para>
            If <c>bV5ClrUsed</c> is nonzero and <c>bV5BitCount</c> is less than 16, the <c>bV5ClrUsed</c> member specifies the actual
            number of colors the graphics engine or device driver accesses. If <c>bV5BitCount</c> is 16 or greater, the
            <c>bV5ClrUsed</c> member specifies the size of the color table used to optimize performance of the system color palettes. If
            <c>bV5BitCount</c> equals 16 or 32, the optimal color palette starts immediately following the <c>BITMAPV5HEADER</c>. If
            <c>bV5ClrUsed</c> is nonzero, the color table is used on palettized devices, and <c>bV5ClrUsed</c> specifies the number of entries.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BITMAPV5HEADER.bV5ClrImportant">
            <summary>
            The number of color indexes that are required for displaying the bitmap. If this value is zero, all colors are required.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BITMAPV5HEADER.bV5RedMask">
            <summary>Color mask that specifies the red component of each pixel, valid only if <c>bV5Compression</c> is set to BI_BITFIELDS.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BITMAPV5HEADER.bV5GreenMask">
            <summary>Color mask that specifies the green component of each pixel, valid only if <c>bV5Compression</c> is set to BI_BITFIELDS.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BITMAPV5HEADER.bV5BlueMask">
            <summary>Color mask that specifies the blue component of each pixel, valid only if <c>bV5Compression</c> is set to BI_BITFIELDS.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BITMAPV5HEADER.bV5AlphaMask">
            <summary>Color mask that specifies the alpha component of each pixel.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BITMAPV5HEADER.bV5CSType">
            <summary>
            <para>The color space of the DIB.</para>
            <para>The following table specifies the values for <c>bV5CSType</c>.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>LCS_CALIBRATED_RGB</term>
            <term>This value implies that endpoints and gamma values are given in the appropriate fields.</term>
            </item>
            <item>
            <term>LCS_sRGB</term>
            <term>Specifies that the bitmap is in sRGB color space.</term>
            </item>
            <item>
            <term>LCS_WINDOWS_COLOR_SPACE</term>
            <term>This value indicates that the bitmap is in the system default color space, sRGB.</term>
            </item>
            <item>
            <term>PROFILE_LINKED</term>
            <term>
            This value indicates that bV5ProfileData points to the file name of the profile to use (gamma and endpoints values are ignored).
            </term>
            </item>
            <item>
            <term>PROFILE_EMBEDDED</term>
            <term>
            This value indicates that bV5ProfileData points to a memory buffer that contains the profile to be used (gamma and endpoints
            values are ignored).
            </term>
            </item>
            </list>
            <para>See the LOGCOLORSPACE structure for information that defines a logical color space.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BITMAPV5HEADER.bV5Endpoints">
            <summary>
            A CIEXYZTRIPLE structure that specifies the x, y, and z coordinates of the three colors that correspond to the red, green,
            and blue endpoints for the logical color space associated with the bitmap. This member is ignored unless the
            <c>bV5CSType</c> member specifies LCS_CALIBRATED_RGB.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BITMAPV5HEADER.bV5GammaRed">
            <summary>
            Toned response curve for red. Used if <c>bV5CSType</c> is set to LCS_CALIBRATED_RGB. Specify in unsigned fixed 16.16 format.
            The upper 16 bits are the unsigned integer value. The lower 16 bits are the fractional part.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BITMAPV5HEADER.bV5GammaGreen">
            <summary>
            Toned response curve for green. Used if <c>bV5CSType</c> is set to LCS_CALIBRATED_RGB. Specify in unsigned fixed 16.16
            format. The upper 16 bits are the unsigned integer value. The lower 16 bits are the fractional part.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BITMAPV5HEADER.bV5GammaBlue">
            <summary>
            Toned response curve for blue. Used if <c>bV5CSType</c> is set to LCS_CALIBRATED_RGB. Specify in unsigned fixed 16.16
            format. The upper 16 bits are the unsigned integer value. The lower 16 bits are the fractional part.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BITMAPV5HEADER.bV5Intent">
            <summary>
            <para>Rendering intent for bitmap. This can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Intent</term>
            <term>ICC name</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>LCS_GM_ABS_COLORIMETRIC</term>
            <term>Match</term>
            <term>Absolute Colorimetric</term>
            <term>Maintains the white point. Matches the colors to their nearest color in the destination gamut.</term>
            </item>
            <item>
            <term>LCS_GM_BUSINESS</term>
            <term>Graphic</term>
            <term>Saturation</term>
            <term>Maintains saturation. Used for business charts and other situations in which undithered colors are required.</term>
            </item>
            <item>
            <term>LCS_GM_GRAPHICS</term>
            <term>Proof</term>
            <term>Relative Colorimetric</term>
            <term>Maintains colorimetric match. Used for graphic designs and named colors.</term>
            </item>
            <item>
            <term>LCS_GM_IMAGES</term>
            <term>Picture</term>
            <term>Perceptual</term>
            <term>Maintains contrast. Used for photographs and natural images.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BITMAPV5HEADER.bV5ProfileData">
            <summary>
            The offset, in bytes, from the beginning of the <c>BITMAPV5HEADER</c> structure to the start of the profile data. If the
            profile is embedded, profile data is the actual profile, and it is linked. (The profile data is the null-terminated file
            name of the profile.) This cannot be a Unicode string. It must be composed exclusively of characters from the Windows
            character set (code page 1252). These profile members are ignored unless the <c>bV5CSType</c> member specifies
            PROFILE_LINKED or PROFILE_EMBEDDED.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BITMAPV5HEADER.bV5ProfileSize">
            <summary>Size, in bytes, of embedded profile data.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BITMAPV5HEADER.bV5Reserved">
            <summary>This member has been reserved. Its value should be set to zero.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.DIBSECTION">
            <summary>
            The DIBSECTION structure contains information about a DIB created by calling the CreateDIBSection function. A DIBSECTION
            structure includes information about the bitmap's dimensions, color format, color masks, optional file mapping object, and
            optional bit values storage offset. An application can obtain a filled-in DIBSECTION structure for a given DIB by calling the
            GetObject function.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DIBSECTION.dsBm">
            <summary>
            A BITMAP data structure that contains information about the DIB: its type, its dimensions, its color capacities, and a
            pointer to its bit values.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DIBSECTION.dsBmih">
            <summary>A BITMAPINFOHEADER structure that contains information about the color format of the DIB.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DIBSECTION.dshSection">
            <summary>
            The DSH sectionContains a handle to the file mapping object that the CreateDIBSection function used to create the DIB. If
            CreateDIBSection was called with a NULL value for its hSection parameter, causing the system to allocate memory for the
            bitmap, the dshSection member will be NULL.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DIBSECTION.dsOffset">
            <summary>
            The offset to the bitmap's bit values within the file mapping object referenced by dshSection. If dshSection is NULL, the
            dsOffset value has no meaning.
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Gdi32.DIBSECTION.dsBitFields">
            <summary>
            Specifies three color masks for the DIB. This field is only valid when the BitCount member of the BITMAPINFOHEADER structure
            has a value greater than 8. Each color mask indicates the bits that are used to encode one of the three color channels (red,
            green, and blue).
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DIBSECTION.Default">
            <summary>Gets the default value for this structure with size fields set appropriately.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.SafeBITMAPINFO">
            <summary>Provides a safe handle to a <see cref="T:Vanara.PInvoke.Gdi32.BITMAPINFO"/> structure.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SafeBITMAPINFO.#ctor(Vanara.PInvoke.Gdi32.BITMAPINFO@)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Gdi32.SafeBITMAPINFO"/> class.</summary>
            <param name="bmpInfo">The <see cref="T:Vanara.PInvoke.Gdi32.BITMAPINFO"/> value.</param>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SafeBITMAPINFO.#ctor(Vanara.PInvoke.Gdi32.BITMAPINFOHEADER@,Vanara.PInvoke.SizeT)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Gdi32.SafeBITMAPINFO"/> class.</summary>
            <param name="hdr">The HDR.</param>
            <param name="capacity">The capacity of the buffer, in bytes. If 0 or <see langword="default"/>, the capacity is calculated.</param>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SafeBITMAPINFO.#ctor(System.IntPtr,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Gdi32.SafeBITMAPINFO"/> class.</summary>
            <param name="ptr">Existing handle.</param>
            <param name="ownsHandle">if set to <c>true</c> if this class is responsible for freeing the memory on disposal.</param>
        </member>
        <member name="P:Vanara.PInvoke.Gdi32.SafeBITMAPINFO.bmiColorBytes">
            <summary>
            The bmiColors member contains one of the following:
            <list type="bullet">
            <item>
            <description>An array of RGBQUAD. The elements of the array that make up the color table.</description>
            </item>
            <item>
            <description>
            An array of 16-bit unsigned integers that specifies indexes into the currently realized logical palette. This use of
            bmiColors is allowed for functions that use DIBs. When bmiColors elements contain indexes to a realized logical palette,
            they must also call the following bitmap functions: CreateDIBitmap, CreateDIBPatternBrush, CreateDIBSection (The iUsage
            parameter of CreateDIBSection must be set to DIB_PAL_COLORS.)
            </description>
            </item>
            </list>
            <para>
            The number of entries in the array depends on the values of the biBitCount and biClrUsed members of the BITMAPINFOHEADER structure.
            </para>
            <para>The colors in the bmiColors table appear in order of importance. For more information, see the Remarks section.</para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Gdi32.SafeBITMAPINFO.bmiColors">
            <summary>
            The bmiColors member contains one of the following:
            <list type="bullet">
            <item>
            <description>An array of RGBQUAD. The elements of the array that make up the color table.</description>
            </item>
            <item>
            <description>
            An array of 16-bit unsigned integers that specifies indexes into the currently realized logical palette. This use of
            bmiColors is allowed for functions that use DIBs. When bmiColors elements contain indexes to a realized logical palette,
            they must also call the following bitmap functions: CreateDIBitmap, CreateDIBPatternBrush, CreateDIBSection (The iUsage
            parameter of CreateDIBSection must be set to DIB_PAL_COLORS.)
            </description>
            </item>
            </list>
            <para>
            The number of entries in the array depends on the values of the biBitCount and biClrUsed members of the BITMAPINFOHEADER structure.
            </para>
            <para>The colors in the bmiColors table appear in order of importance. For more information, see the Remarks section.</para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Gdi32.SafeBITMAPINFO.bmiHeader">
            <summary>A BITMAPINFOHEADER structure that contains information about the dimensions of color format.</summary>
        </member>
        <member name="P:Vanara.PInvoke.Gdi32.SafeBITMAPINFO.bmiHeaderAsRef">
            <summary>A reference to the BITMAPINFOHEADER structure.</summary>
        </member>
        <member name="P:Vanara.PInvoke.Gdi32.SafeBITMAPINFO.HeaderSize">
            <summary>
            Specifies the number of bytes required by the structure. This value does not include the size of the color table or the size
            of the color masks, if they are appended to the end of structure. See Remarks.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.SafeBITMAPINFO.Null">
            <summary>Represents the <see langword="null"/> equivalent of this class instances.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SafeBITMAPINFO.op_Implicit(Vanara.PInvoke.Gdi32.BITMAPINFO@)~Vanara.PInvoke.Gdi32.SafeBITMAPINFO">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.Gdi32.BITMAPINFO"/> to <see cref="T:Vanara.PInvoke.Gdi32.SafeBITMAPINFO"/>.</summary>
            <param name="bi">The <see cref="T:Vanara.PInvoke.Gdi32.BITMAPINFO"/> value.</param>
            <returns>The resulting <see cref="T:Vanara.PInvoke.Gdi32.SafeBITMAPINFO"/> instance from the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SafeBITMAPINFO.GetHeader``1">
            <summary>Gets a header of the specified type <typeparamref name="T"/>.</summary>
            <typeparam name="T">The type of the header to get.</typeparam>
            <returns>The requested header structure.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SafeBITMAPINFO.Zero">
            <summary>Zero out all allocated memory.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.BLENDFUNCTION">
            <summary>
            The BLENDFUNCTION structure controls blending by specifying the blending functions for source and destination bitmaps.
            </summary>
            <remarks>See information on how this function determines the resulting values on <a href="https://msdn.microsoft.com/en-us/library/dd183393(v=vs.85).aspx">MSDN</a>.</remarks>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BLENDFUNCTION.BlendOp">
            <summary>
            The source blend operation. Currently, the only source and destination blend operation that has been defined is AC_SRC_OVER. For details, see the
            following Remarks section.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BLENDFUNCTION.BlendFlags">
            <summary>Must be zero.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BLENDFUNCTION.SourceConstantAlpha">
            <summary>
            Specifies an alpha transparency value to be used on the entire source bitmap. The SourceConstantAlpha value is combined with any per-pixel alpha
            values in the source bitmap. If you set SourceConstantAlpha to 0, it is assumed that your image is transparent. Set the SourceConstantAlpha value
            to 255 (opaque) when you only want to use per-pixel alpha values.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BLENDFUNCTION.AlphaFormat">
            <summary>
            This member controls the way the source and destination bitmaps are interpreted. AlphaFormat has the following value.
            <para>
            <c>AC_SRC_ALPHA</c> This flag is set when the bitmap has an Alpha channel (that is, per-pixel alpha). Note that the APIs use premultiplied alpha,
            which means that the red, green and blue channel values in the bitmap must be premultiplied with the alpha channel value. For example, if the
            alpha channel value is x, the red, green and blue channels must be multiplied by x and divided by 0xff prior to the call.
            </para>
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.BLENDFUNCTION.#ctor(System.Byte)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Gdi32.BLENDFUNCTION"/> struct and sets the alpha value.</summary>
            <param name="alpha">The alpha.</param>
        </member>
        <member name="P:Vanara.PInvoke.Gdi32.BLENDFUNCTION.IsEmpty">
            <summary>Gets a value indicating whether this instance is empty.</summary>
            <value><see langword="true"/> if this instance is empty; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.CreateBrushIndirect(Vanara.PInvoke.Gdi32.LOGBRUSH@)">
            <summary>
            <para>The <c>CreateBrushIndirect</c> function creates a logical brush that has the specified style, color, and pattern.</para>
            </summary>
            <param name="plbrush">
            <para>A pointer to a LOGBRUSH structure that contains information about the brush.</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value identifies a logical brush.</para>
            <para>If the function fails, the return value is <c>NULL</c>.</para>
            </returns>
            <remarks>
            <para>A brush is a bitmap that the system uses to paint the interiors of filled shapes.</para>
            <para>
            After an application creates a brush by calling <c>CreateBrushIndirect</c>, it can select it into any device context by calling
            the SelectObject function.
            </para>
            <para>
            A brush created by using a monochrome bitmap (one color plane, one bit per pixel) is drawn using the current text and background
            colors. Pixels represented by a bit set to 0 are drawn with the current text color; pixels represented by a bit set to 1 are
            drawn with the current background color.
            </para>
            <para>When you no longer need the brush, call the DeleteObject function to delete it.</para>
            <para>
            <c>ICM:</c> No color is done at brush creation. However, color management is performed when the brush is selected into an
            ICM-enabled device context.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.CreateDIBPatternBrush(System.IntPtr,Vanara.PInvoke.Gdi32.DIBColorMode)">
            <summary>
            <para>
            The <c>CreateDIBPatternBrush</c> function creates a logical brush that has the pattern specified by the specified
            device-independent bitmap (DIB). The brush can subsequently be selected into any device context that is associated with a device
            that supports raster operations.
            </para>
            <para>
            <c>Note</c> This function is provided only for compatibility with 16-bit versions of Windows. Applications should use the
            CreateDIBPatternBrushPt function.
            </para>
            </summary>
            <param name="h">
            <para>
            A handle to a global memory object containing a packed DIB, which consists of a BITMAPINFO structure immediately followed by an
            array of bytes defining the pixels of the bitmap.
            </para>
            </param>
            <param name="iUsage">
            <para>
            Specifies whether the <c>bmiColors</c> member of the BITMAPINFO structure is initialized and, if so, whether this member contains
            explicit red, green, blue (RGB) values or indexes into a logical palette. The fuColorSpec parameter must be one of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>DIB_PAL_COLORS</term>
            <term>
            A color table is provided and consists of an array of 16-bit indexes into the logical palette of the device context into which
            the brush is to be selected.
            </term>
            </item>
            <item>
            <term>DIB_RGB_COLORS</term>
            <term>A color table is provided and contains literal RGB values.</term>
            </item>
            </list>
            </param>
            <returns>
            <para>If the function succeeds, the return value identifies a logical brush.</para>
            <para>If the function fails, the return value is <c>NULL</c>.</para>
            </returns>
            <remarks>
            <para>
            When an application selects a two-color DIB pattern brush into a monochrome device context, the system does not acknowledge the
            colors specified in the DIB; instead, it displays the pattern brush using the current background and foreground colors of the
            device context. Pixels mapped to the first color of the DIB (offset 0 in the DIB color table) are displayed using the foreground
            color; pixels mapped to the second color (offset 1 in the color table) are displayed using the background color.
            </para>
            <para>When you no longer need the brush, call the DeleteObject function to delete it.</para>
            <para>
            <c>ICM:</c> No color is done at brush creation. However, color management is performed when the brush is selected into an
            ICM-enabled device context.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.CreateDIBPatternBrushPt(System.IntPtr,Vanara.PInvoke.Gdi32.DIBColorMode)">
            <summary>
            <para>
            The <c>CreateDIBPatternBrushPt</c> function creates a logical brush that has the pattern specified by the device-independent
            bitmap (DIB).
            </para>
            </summary>
            <param name="lpPackedDIB">
            <para>
            A pointer to a packed DIB consisting of a BITMAPINFO structure immediately followed by an array of bytes defining the pixels of
            the bitmap.
            </para>
            </param>
            <param name="iUsage">
            <para>
            Specifies whether the <c>bmiColors</c> member of the BITMAPINFO structure contains a valid color table and, if so, whether the
            entries in this color table contain explicit red, green, blue (RGB) values or palette indexes. The iUsage parameter must be one
            of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>DIB_PAL_COLORS</term>
            <term>
            A color table is provided and consists of an array of 16-bit indexes into the logical palette of the device context into which
            the brush is to be selected.
            </term>
            </item>
            <item>
            <term>DIB_RGB_COLORS</term>
            <term>A color table is provided and contains literal RGB values.</term>
            </item>
            </list>
            </param>
            <returns>
            <para>If the function succeeds, the return value identifies a logical brush.</para>
            <para>If the function fails, the return value is <c>NULL</c>.</para>
            </returns>
            <remarks>
            <para>A brush is a bitmap that the system uses to paint the interiors of filled shapes.</para>
            <para>
            After an application creates a brush by calling <c>CreateDIBPatternBrushPt</c>, it can select that brush into any device context
            by calling the SelectObject function.
            </para>
            <para>When you no longer need the brush, call the DeleteObject function to delete it.</para>
            <para>
            <c>ICM:</c> No color is done at brush creation. However, color management is performed when the brush is selected into an
            ICM-enabled device context.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.CreateHatchBrush(Vanara.PInvoke.Gdi32.HatchStyle,Vanara.PInvoke.COLORREF)">
            <summary>
            <para>The <c>CreateHatchBrush</c> function creates a logical brush that has the specified hatch pattern and color.</para>
            </summary>
            <param name="iHatch">
            <para>The hatch style of the brush. This parameter can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>HS_BDIAGONAL</term>
            <term>45-degree upward left-to-right hatch</term>
            </item>
            <item>
            <term>HS_CROSS</term>
            <term>Horizontal and vertical crosshatch</term>
            </item>
            <item>
            <term>HS_DIAGCROSS</term>
            <term>45-degree crosshatch</term>
            </item>
            <item>
            <term>HS_FDIAGONAL</term>
            <term>45-degree downward left-to-right hatch</term>
            </item>
            <item>
            <term>HS_HORIZONTAL</term>
            <term>Horizontal hatch</term>
            </item>
            <item>
            <term>HS_VERTICAL</term>
            <term>Vertical hatch</term>
            </item>
            </list>
            </param>
            <param name="color">
            <para>The foreground color of the brush that is used for the hatches. To create a COLORREF color value, use the RGB macro.</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value identifies a logical brush.</para>
            <para>If the function fails, the return value is <c>NULL</c>.</para>
            </returns>
            <remarks>
            <para>A brush is a bitmap that the system uses to paint the interiors of filled shapes.</para>
            <para>
            After an application creates a brush by calling <c>CreateHatchBrush</c>, it can select that brush into any device context by
            calling the SelectObject function. It can also call SetBkMode to affect the rendering of the brush.
            </para>
            <para>
            If an application uses a hatch brush to fill the backgrounds of both a parent and a child window with matching color, you must
            set the brush origin before painting the background of the child window. You can do this by calling the SetBrushOrgEx function.
            Your application can retrieve the current brush origin by calling the GetBrushOrgEx function.
            </para>
            <para>When you no longer need the brush, call the DeleteObject function to delete it.</para>
            <para>
            <c>ICM:</c> No color is defined at brush creation. However, color management is performed when the brush is selected into an
            ICM-enabled device context.
            </para>
            <para>Examples</para>
            <para>
            The following example creates a logical brush that has the specified hatch pattern and color. You can also set a hatch brush
            background to transparent or to opaque.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.CreatePatternBrush(Vanara.PInvoke.HBITMAP)">
            <summary>
            <para>
            The <c>CreatePatternBrush</c> function creates a logical brush with the specified bitmap pattern. The bitmap can be a DIB section
            bitmap, which is created by the <c>CreateDIBSection</c> function, or it can be a device-dependent bitmap.
            </para>
            </summary>
            <param name="hbm">
            <para>A handle to the bitmap to be used to create the logical brush.</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value identifies a logical brush.</para>
            <para>If the function fails, the return value is <c>NULL</c>.</para>
            </returns>
            <remarks>
            <para>A pattern brush is a bitmap that the system uses to paint the interiors of filled shapes.</para>
            <para>
            After an application creates a brush by calling <c>CreatePatternBrush</c>, it can select that brush into any device context by
            calling the SelectObject function.
            </para>
            <para>
            You can delete a pattern brush without affecting the associated bitmap by using the DeleteObject function. Therefore, you can
            then use this bitmap to create any number of pattern brushes.
            </para>
            <para>
            A brush created by using a monochrome (1 bit per pixel) bitmap has the text and background colors of the device context to which
            it is drawn. Pixels represented by a 0 bit are drawn with the current text color; pixels represented by a 1 bit are drawn with
            the current background color.
            </para>
            <para>
            <c>ICM:</c> No color is done at brush creation. However, color management is performed when the brush is selected into an
            ICM-enabled device context.
            </para>
            <para>Examples</para>
            <para>For an example, see Using Brushes.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.CreateSolidBrush(Vanara.PInvoke.COLORREF)">
            <summary>
            <para>The <c>CreateSolidBrush</c> function creates a logical brush that has the specified solid color.</para>
            </summary>
            <param name="color">
            <para>The color of the brush. To create a COLORREF color value, use the RGB macro.</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value identifies a logical brush.</para>
            <para>If the function fails, the return value is <c>NULL</c>.</para>
            </returns>
            <remarks>
            <para>When you no longer need the <c>HBRUSH</c> object, call the DeleteObject function to delete it.</para>
            <para>A solid brush is a bitmap that the system uses to paint the interiors of filled shapes.</para>
            <para>
            After an application creates a brush by calling <c>CreateSolidBrush</c>, it can select that brush into any device context by
            calling the SelectObject function.
            </para>
            <para>
            To paint with a system color brush, an application should use instead of , because GetSysColorBrush returns a cached brush
            instead of allocating a new one.
            </para>
            <para>
            <c>ICM:</c> No color management is done at brush creation. However, color management is performed when the brush is selected into
            an ICM-enabled device context.
            </para>
            <para>Examples</para>
            <para>For an example, see Creating Colored Pens and Brushes.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetBrushOrgEx(Vanara.PInvoke.HDC,Vanara.PInvoke.POINT@)">
            <summary>
            <para>
            The <c>GetBrushOrgEx</c> function retrieves the current brush origin for the specified device context. This function replaces the
            <c>GetBrushOrg</c> function.
            </para>
            </summary>
            <param name="hdc">
            <para>A handle to the device context.</para>
            </param>
            <param name="lppt">
            <para>A pointer to a POINT structure that receives the brush origin, in device coordinates.</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>A brush is a bitmap that the system uses to paint the interiors of filled shapes.</para>
            <para>
            The brush origin is a set of coordinates with values between 0 and 7, specifying the location of one pixel in the bitmap. The
            default brush origin coordinates are (0,0). For horizontal coordinates, the value 0 corresponds to the leftmost column of pixels;
            the value 7 corresponds to the rightmost column. For vertical coordinates, the value 0 corresponds to the uppermost row of
            pixels; the value 7 corresponds to the lowermost row. When the system positions the brush at the start of any painting operation,
            it maps the origin of the brush to the location in the window's client area specified by the brush origin. For example, if the
            origin is set to (2,3), the system maps the origin of the brush (0,0) to the location (2,3) on the window's client area.
            </para>
            <para>
            If an application uses a brush to fill the backgrounds of both a parent and a child window with matching colors, it may be
            necessary to set the brush origin after painting the parent window but before painting the child window.
            </para>
            <para>
            The system automatically tracks the origin of all window-managed device contexts and adjusts their brushes as necessary to
            maintain an alignment of patterns on the surface.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.PatBlt(Vanara.PInvoke.HDC,System.Int32,System.Int32,System.Int32,System.Int32,Vanara.PInvoke.Gdi32.RasterOperationMode)">
            <summary>
            <para>
            The <c>PatBlt</c> function paints the specified rectangle using the brush that is currently selected into the specified device
            context. The brush color and the surface color or colors are combined by using the specified raster operation.
            </para>
            </summary>
            <param name="hdc">
            <para>A handle to the device context.</para>
            </param>
            <param name="x">
            <para>The x-coordinate, in logical units, of the upper-left corner of the rectangle to be filled.</para>
            </param>
            <param name="y">
            <para>The y-coordinate, in logical units, of the upper-left corner of the rectangle to be filled.</para>
            </param>
            <param name="w">
            <para>The width, in logical units, of the rectangle.</para>
            </param>
            <param name="h">
            <para>The height, in logical units, of the rectangle.</para>
            </param>
            <param name="rop">
            <para>The raster operation code. This code can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>PATCOPY</term>
            <term>Copies the specified pattern into the destination bitmap.</term>
            </item>
            <item>
            <term>PATINVERT</term>
            <term>Combines the colors of the specified pattern with the colors of the destination rectangle by using the Boolean XOR operator.</term>
            </item>
            <item>
            <term>DSTINVERT</term>
            <term>Inverts the destination rectangle.</term>
            </item>
            <item>
            <term>BLACKNESS</term>
            <term>
            Fills the destination rectangle using the color associated with index 0 in the physical palette. (This color is black for the
            default physical palette.)
            </term>
            </item>
            <item>
            <term>WHITENESS</term>
            <term>
            Fills the destination rectangle using the color associated with index 1 in the physical palette. (This color is white for the
            default physical palette.)
            </term>
            </item>
            </list>
            </param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>
            The values of the dwRop parameter for this function are a limited subset of the full 256 ternary raster-operation codes; in
            particular, an operation code that refers to a source rectangle cannot be used.
            </para>
            <para>
            Not all devices support the <c>PatBlt</c> function. For more information, see the description of the RC_BITBLT capability in the
            GetDeviceCaps function.
            </para>
            <para>Examples</para>
            <para>For an example, see "Example of Menu-Item Bitmaps" in Using Menus.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SetBrushOrgEx(Vanara.PInvoke.HDC,System.Int32,System.Int32,Vanara.PInvoke.POINT@)">
            <summary>
            <para>
            The <c>SetBrushOrgEx</c> function sets the brush origin that GDI assigns to the next brush an application selects into the
            specified device context.
            </para>
            </summary>
            <param name="hdc">
            <para>A handle to the device context.</para>
            </param>
            <param name="x">
            <para>
            The x-coordinate, in device units, of the new brush origin. If this value is greater than the brush width, its value is reduced
            using the modulus operator (nXOrg <c>mod</c> brush width).
            </para>
            </param>
            <param name="y">
            <para>
            The y-coordinate, in device units, of the new brush origin. If this value is greater than the brush height, its value is reduced
            using the modulus operator (nYOrg <c>mod</c> brush height).
            </para>
            </param>
            <param name="lppt">
            <para>A pointer to a POINT structure that receives the previous brush origin.</para>
            <para>This parameter can be <c>NULL</c> if the previous brush origin is not required.</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>A brush is a bitmap that the system uses to paint the interiors of filled shapes.</para>
            <para>
            The brush origin is a pair of coordinates specifying the location of one pixel in the bitmap. The default brush origin
            coordinates are (0,0). For horizontal coordinates, the value 0 corresponds to the leftmost column of pixels; the width
            corresponds to the rightmost column. For vertical coordinates, the value 0 corresponds to the uppermost row of pixels; the height
            corresponds to the lowermost row.
            </para>
            <para>
            The system automatically tracks the origin of all window-managed device contexts and adjusts their brushes as necessary to
            maintain an alignment of patterns on the surface. The brush origin that is set with this call is relative to the upper-left
            corner of the client area.
            </para>
            <para>
            An application should call <c>SetBrushOrgEx</c> after setting the bitmap stretching mode to HALFTONE by using SetStretchBltMode.
            This must be done to avoid brush misalignment.
            </para>
            <para>
            The system automatically tracks the origin of all window-managed device contexts and adjusts their brushes as necessary to
            maintain an alignment of patterns on the surface.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SetDCBrushColor(Vanara.PInvoke.HDC,Vanara.PInvoke.COLORREF)">
            <summary>
            <c>SetDCBrushColor</c> function sets the current device context (DC) brush color to the specified color value. If the device
            cannot represent the specified color value, the color is set to the nearest physical color.
            </summary>
            <param name="hdc">A handle to the DC.</param>
            <param name="color">The new brush color.</param>
            <returns>
            <para>If the function succeeds, the return value specifies the previous DC brush color as a COLORREF value.</para>
            <para>If the function fails, the return value is CLR_INVALID.</para>
            </returns>
            <remarks>
            <para>
            When the stock DC_BRUSH is selected in a DC, all the subsequent drawings will be done using the DC brush color until the stock
            brush is deselected. The default DC_BRUSH color is WHITE.
            </para>
            <para>
            The function returns the previous DC_BRUSH color, even if the stock brush DC_BRUSH is not selected in the DC: however, this will
            not be used in drawing operations until the stock DC_BRUSH is selected in the DC.
            </para>
            <para>
            The GetStockObject function with an argument of DC_BRUSH or DC_PEN can be used interchangeably with the SetDCPenColor and
            <c>SetDCBrushColor</c> functions.
            </para>
            <para><c>ICM:</c> Color management is performed if ICM is enabled.</para>
            <para>Examples</para>
            <para>For an example of setting colors, see Setting the Pen or Brush Color.</para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.LOGBRUSH">
            <summary>
            The <c>LOGBRUSH</c> structure defines the style, color, and pattern of a physical brush. It is used by the CreateBrushIndirect
            and ExtCreatePen functions.
            </summary>
            <remarks>
            Although <c>lbColor</c> controls the foreground color of a hatch brush, the SetBkMode and SetBkColor functions control the
            background color.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.LOGBRUSH.lbStyle">
            <summary>
            <para>The brush style. The <c>lbStyle</c> member must be one of the following styles.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>BS_DIBPATTERN</term>
            <term>
            A pattern brush defined by a device-independent bitmap (DIB) specification. If lbStyle is BS_DIBPATTERN, the lbHatch member
            contains a handle to a packed DIB. For more information, see discussion in lbHatch.
            </term>
            </item>
            <item>
            <term>BS_DIBPATTERN8X8</term>
            <term>See BS_DIBPATTERN.</term>
            </item>
            <item>
            <term>BS_DIBPATTERNPT</term>
            <term>
            A pattern brush defined by a device-independent bitmap (DIB) specification. If lbStyle is BS_DIBPATTERNPT, the lbHatch member
            contains a pointer to a packed DIB. For more information, see discussion in lbHatch.
            </term>
            </item>
            <item>
            <term>BS_HATCHED</term>
            <term>Hatched brush.</term>
            </item>
            <item>
            <term>BS_HOLLOW</term>
            <term>Hollow brush.</term>
            </item>
            <item>
            <term>BS_NULL</term>
            <term>Same as BS_HOLLOW.</term>
            </item>
            <item>
            <term>BS_PATTERN</term>
            <term>Pattern brush defined by a memory bitmap.</term>
            </item>
            <item>
            <term>BS_PATTERN8X8</term>
            <term>See BS_PATTERN.</term>
            </item>
            <item>
            <term>BS_SOLID</term>
            <term>Solid brush.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.LOGBRUSH.lbColor">
            <summary>
            <para>
            The color in which the brush is to be drawn. If <c>lbStyle</c> is the BS_HOLLOW or BS_PATTERN style, <c>lbColor</c> is ignored.
            </para>
            <para>
            If <c>lbStyle</c> is BS_DIBPATTERN or BS_DIBPATTERNPT, the low-order word of <c>lbColor</c> specifies whether the
            <c>bmiColors</c> members of the BITMAPINFO structure contain explicit red, green, blue (RGB) values or indexes into the
            currently realized logical palette. The <c>lbColor</c> member must be one of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>DIB_PAL_COLORS</term>
            <term>The color table consists of an array of 16-bit indexes into the currently realized logical palette.</term>
            </item>
            <item>
            <term>DIB_RGB_COLORS</term>
            <term>The color table contains literal RGB values.</term>
            </item>
            </list>
            <para>
            If <c>lbStyle</c> is BS_HATCHED or BS_SOLID, <c>lbColor</c> is a COLORREF color value. To create a <c>COLORREF</c> color
            value, use the RGB macro.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.LOGBRUSH.lbHatchStyle">
            <summary>
            <para>A hatch style. The meaning depends on the brush style defined by <c>lbStyle</c>.</para>
            <para>
            If <c>lbStyle</c> is BS_DIBPATTERN, the <c>lbHatch</c> member contains a handle to a packed DIB. To obtain this handle, an
            application calls the GlobalAlloc function with GMEM_MOVEABLE (or LocalAlloc with LMEM_MOVEABLE) to allocate a block of
            memory and then fills the memory with the packed DIB. A packed DIB consists of a BITMAPINFO structure immediately followed by
            the array of bytes that define the pixels of the bitmap.
            </para>
            <para>
            If <c>lbStyle</c> is BS_DIBPATTERNPT, the <c>lbHatch</c> member contains a pointer to a packed DIB. The pointer derives from
            the memory block created by LocalAlloc with LMEM_FIXED set or by GlobalAlloc with GMEM_FIXED set, or it is the pointer
            returned by a call like LocalLock (handle_to_the_dib). A packed DIB consists of a BITMAPINFO structure immediately followed
            by the array of bytes that define the pixels of the bitmap.
            </para>
            <para>
            If <c>lbStyle</c> is BS_HATCHED, the <c>lbHatch</c> member specifies the orientation of the lines used to create the hatch.
            It can be one of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>HS_BDIAGONAL</term>
            <term>A 45-degree upward, left-to-right hatch</term>
            </item>
            <item>
            <term>HS_CROSS</term>
            <term>Horizontal and vertical cross-hatch</term>
            </item>
            <item>
            <term>HS_DIAGCROSS</term>
            <term>45-degree crosshatch</term>
            </item>
            <item>
            <term>HS_FDIAGONAL</term>
            <term>A 45-degree downward, left-to-right hatch</term>
            </item>
            <item>
            <term>HS_HORIZONTAL</term>
            <term>Horizontal hatch</term>
            </item>
            <item>
            <term>HS_VERTICAL</term>
            <term>Vertical hatch</term>
            </item>
            </list>
            <para>
            If <c>lbStyle</c> is BS_PATTERN, <c>lbHatch</c> is a handle to the bitmap that defines the pattern. The bitmap cannot be a
            DIB section bitmap, which is created by the CreateDIBSection function.
            </para>
            <para>If <c>lbStyle</c> is BS_SOLID or BS_HOLLOW, <c>lbHatch</c> is ignored.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.LOGBRUSH.lbHatch">
            <summary>
            <para>A hatch style. The meaning depends on the brush style defined by <c>lbStyle</c>.</para>
            <para>
            If <c>lbStyle</c> is BS_DIBPATTERN, the <c>lbHatch</c> member contains a handle to a packed DIB. To obtain this handle, an
            application calls the GlobalAlloc function with GMEM_MOVEABLE (or LocalAlloc with LMEM_MOVEABLE) to allocate a block of
            memory and then fills the memory with the packed DIB. A packed DIB consists of a BITMAPINFO structure immediately followed by
            the array of bytes that define the pixels of the bitmap.
            </para>
            <para>
            If <c>lbStyle</c> is BS_DIBPATTERNPT, the <c>lbHatch</c> member contains a pointer to a packed DIB. The pointer derives from
            the memory block created by LocalAlloc with LMEM_FIXED set or by GlobalAlloc with GMEM_FIXED set, or it is the pointer
            returned by a call like LocalLock (handle_to_the_dib). A packed DIB consists of a BITMAPINFO structure immediately followed
            by the array of bytes that define the pixels of the bitmap.
            </para>
            <para>
            If <c>lbStyle</c> is BS_HATCHED, the <c>lbHatch</c> member specifies the orientation of the lines used to create the hatch.
            It can be one of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>HS_BDIAGONAL</term>
            <term>A 45-degree upward, left-to-right hatch</term>
            </item>
            <item>
            <term>HS_CROSS</term>
            <term>Horizontal and vertical cross-hatch</term>
            </item>
            <item>
            <term>HS_DIAGCROSS</term>
            <term>45-degree crosshatch</term>
            </item>
            <item>
            <term>HS_FDIAGONAL</term>
            <term>A 45-degree downward, left-to-right hatch</term>
            </item>
            <item>
            <term>HS_HORIZONTAL</term>
            <term>Horizontal hatch</term>
            </item>
            <item>
            <term>HS_VERTICAL</term>
            <term>Vertical hatch</term>
            </item>
            </list>
            <para>
            If <c>lbStyle</c> is BS_PATTERN, <c>lbHatch</c> is a handle to the bitmap that defines the pattern. The bitmap cannot be a
            DIB section bitmap, which is created by the CreateDIBSection function.
            </para>
            <para>If <c>lbStyle</c> is BS_SOLID or BS_HOLLOW, <c>lbHatch</c> is ignored.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.RegionFlags">
            <summary>Flags used with region functions.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RegionFlags.ERROR">
            <summary>An error occurred.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RegionFlags.NULLREGION">
            <summary>Region is empty.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RegionFlags.SIMPLEREGION">
            <summary>Region is a single rectangle.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RegionFlags.COMPLEXREGION">
            <summary>Region consists of more than one rectangle.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.RegionOp">
            <summary>A region operation to perform.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RegionOp.RGN_AND">
            <summary>
            The new clipping region combines the overlapping areas of the current clipping region and the region identified by hrgn.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RegionOp.RGN_OR">
            <summary>The new clipping region combines the current clipping region and the region identified by hrgn.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RegionOp.RGN_XOR">
            <summary>
            The new clipping region combines the current clipping region and the region identified by hrgn but excludes any overlapping areas.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RegionOp.RGN_DIFF">
            <summary>
            The new clipping region combines the areas of the current clipping region with those areas excluded from the region
            identified by hrgn.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RegionOp.RGN_COPY">
            <summary>
            The new clipping region is a copy of the region identified by hrgn. This is identical to SelectClipRgn. If the region
            identified by hrgn is NULL, the new clipping region is the default clipping region (the default clipping region is a null region).
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.ExcludeClipRect(Vanara.PInvoke.HDC,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            The <c>ExcludeClipRect</c> function creates a new clipping region that consists of the existing clipping region minus the
            specified rectangle.
            </summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="left">The x-coordinate, in logical units, of the upper-left corner of the rectangle.</param>
            <param name="top">The y-coordinate, in logical units, of the upper-left corner of the rectangle.</param>
            <param name="right">The x-coordinate, in logical units, of the lower-right corner of the rectangle.</param>
            <param name="bottom">The y-coordinate, in logical units, of the lower-right corner of the rectangle.</param>
            <returns>
            <para>The return value specifies the new clipping region's complexity; it can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>NULLREGION</term>
            <term>Region is empty.</term>
            </item>
            <item>
            <term>SIMPLEREGION</term>
            <term>Region is a single rectangle.</term>
            </item>
            <item>
            <term>COMPLEXREGION</term>
            <term>Region is more than one rectangle.</term>
            </item>
            <item>
            <term>ERROR</term>
            <term>No region was created.</term>
            </item>
            </list>
            </returns>
            <remarks>The lower and right edges of the specified rectangle are not excluded from the clipping region.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.ExtSelectClipRgn(Vanara.PInvoke.HDC,Vanara.PInvoke.HRGN,Vanara.PInvoke.Gdi32.RegionOp)">
            <summary>
            The <c>ExtSelectClipRgn</c> function combines the specified region with the current clipping region using the specified mode.
            </summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="hrgn">A handle to the region to be selected. This handle must not be <c>NULL</c> unless the RGN_COPY mode is specified.</param>
            <param name="mode">
            <para>The operation to be performed. It must be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>RGN_AND</term>
            <term>The new clipping region combines the overlapping areas of the current clipping region and the region identified by hrgn.</term>
            </item>
            <item>
            <term>RGN_COPY</term>
            <term>
            The new clipping region is a copy of the region identified by hrgn. This is identical to SelectClipRgn. If the region identified
            by hrgn is NULL, the new clipping region is the default clipping region (the default clipping region is a null region).
            </term>
            </item>
            <item>
            <term>RGN_DIFF</term>
            <term>
            The new clipping region combines the areas of the current clipping region with those areas excluded from the region identified by hrgn.
            </term>
            </item>
            <item>
            <term>RGN_OR</term>
            <term>The new clipping region combines the current clipping region and the region identified by hrgn.</term>
            </item>
            <item>
            <term>RGN_XOR</term>
            <term>
            The new clipping region combines the current clipping region and the region identified by hrgn but excludes any overlapping areas.
            </term>
            </item>
            </list>
            </param>
            <returns>
            <para>The return value specifies the new clipping region's complexity; it can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>NULLREGION</term>
            <term>Region is empty.</term>
            </item>
            <item>
            <term>SIMPLEREGION</term>
            <term>Region is a single rectangle.</term>
            </item>
            <item>
            <term>COMPLEXREGION</term>
            <term>Region is more than one rectangle.</term>
            </item>
            <item>
            <term>ERROR</term>
            <term>An error occurred.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            If an error occurs when this function is called, the previous clipping region for the specified device context is not affected.
            </para>
            <para>The <c>ExtSelectClipRgn</c> function assumes that the coordinates for the specified region are specified in device units.</para>
            <para>
            Only a copy of the region identified by the hrgn parameter is used. The region itself can be reused after this call or it can be deleted.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetClipBox(Vanara.PInvoke.HDC,Vanara.PInvoke.RECT@)">
            <summary>
            The <c>GetClipBox</c> function retrieves the dimensions of the tightest bounding rectangle that can be drawn around the current
            visible area on the device. The visible area is defined by the current clipping region or clip path, as well as any overlapping windows.
            </summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="lprect">A pointer to a RECT structure that is to receive the rectangle dimensions, in logical units.</param>
            <returns>
            <para>If the function succeeds, the return value specifies the clipping box's complexity and can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>NULLREGION</term>
            <term>Region is empty.</term>
            </item>
            <item>
            <term>SIMPLEREGION</term>
            <term>Region is a single rectangle.</term>
            </item>
            <item>
            <term>COMPLEXREGION</term>
            <term>Region is more than one rectangle.</term>
            </item>
            <item>
            <term>ERROR</term>
            <term>An error occurred.</term>
            </item>
            </list>
            <para><c>GetClipBox</c> returns logical coordinates based on the given device context.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetClipRgn(Vanara.PInvoke.HDC,Vanara.PInvoke.HRGN)">
            <summary>
            The <c>GetClipRgn</c> function retrieves a handle identifying the current application-defined clipping region for the specified
            device context.
            </summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="hrgn">
            A handle to an existing region before the function is called. After the function returns, this parameter is a handle to a copy of
            the current clipping region.
            </param>
            <returns>
            If the function succeeds and there is no clipping region for the given device context, the return value is zero. If the function
            succeeds and there is a clipping region for the given device context, the return value is 1. If an error occurs, the return value
            is -1.
            </returns>
            <remarks>
            <para>
            An application-defined clipping region is a clipping region identified by the SelectClipRgn function. It is not a clipping region
            created when the application calls the BeginPaint function.
            </para>
            <para>
            If the function succeeds, the hrgn parameter is a handle to a copy of the current clipping region. Subsequent changes to this
            copy will not affect the current clipping region.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetMetaRgn(Vanara.PInvoke.HDC,Vanara.PInvoke.HRGN)">
            <summary>The <c>GetMetaRgn</c> function retrieves the current metaregion for the specified device context.</summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="hrgn">
            A handle to an existing region before the function is called. After the function returns, this parameter is a handle to a copy of
            the current metaregion.
            </param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>
            If the function succeeds, hrgn is a handle to a copy of the current metaregion. Subsequent changes to this copy will not affect
            the current metaregion.
            </para>
            <para>The current clipping region of a device context is defined by the intersection of its clipping region and its metaregion.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetRandomRgn(Vanara.PInvoke.HDC,Vanara.PInvoke.HRGN,System.Int32)">
            <summary>The <c>GetRandomRgn</c> function copies the system clipping region of a specified device context to a specific region.</summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="hrgn">
            A handle to a region. Before the function is called, this identifies an existing region. After the function returns, this
            identifies a copy of the current system region. The old region identified by hrgn is overwritten.
            </param>
            <param name="i">This parameter must be SYSRGN.</param>
            <returns>
            If the function succeeds, the return value is 1. If the function fails, the return value is -1. If the region to be retrieved is
            <c>NULL</c>, the return value is 0. If the function fails or the region to be retrieved is <c>NULL</c>, hrgn is not initialized.
            </returns>
            <remarks>
            <para>
            When using the SYSRGN flag, note that the system clipping region might not be current because of window movements. Nonetheless,
            it is safe to retrieve and use the system clipping region within the BeginPaint-EndPaint block during WM_PAINT processing. In
            this case, the system region is the intersection of the update region and the current visible area of the window. Any window
            movement following the return of <c>GetRandomRgn</c> and before <c>EndPaint</c> will result in a new <c>WM_PAINT</c> message. Any
            other use of the SYSRGN flag may result in painting errors in your application.
            </para>
            <para>The region returned is in screen coordinates.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.IntersectClipRect(Vanara.PInvoke.HDC,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            The <c>IntersectClipRect</c> function creates a new clipping region from the intersection of the current clipping region and the
            specified rectangle.
            </summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="left">The x-coordinate, in logical units, of the upper-left corner of the rectangle.</param>
            <param name="top">The y-coordinate, in logical units, of the upper-left corner of the rectangle.</param>
            <param name="right">The x-coordinate, in logical units, of the lower-right corner of the rectangle.</param>
            <param name="bottom">The y-coordinate, in logical units, of the lower-right corner of the rectangle.</param>
            <returns>
            <para>The return value specifies the new clipping region's type and can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>NULLREGION</term>
            <term>Region is empty.</term>
            </item>
            <item>
            <term>SIMPLEREGION</term>
            <term>Region is a single rectangle.</term>
            </item>
            <item>
            <term>COMPLEXREGION</term>
            <term>Region is more than one rectangle.</term>
            </item>
            <item>
            <term>ERROR</term>
            <term>An error occurred. (The current clipping region is unaffected.)</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The lower and right-most edges of the given rectangle are excluded from the clipping region.</para>
            <para>
            If a clipping region does not already exist then the system may apply a default clipping region to the specified HDC. A clipping
            region is then created from the intersection of that default clipping region and the rectangle specified in the function parameters.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.OffsetClipRgn(Vanara.PInvoke.HDC,System.Int32,System.Int32)">
            <summary>The <c>OffsetClipRgn</c> function moves the clipping region of a device context by the specified offsets.</summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="x">The number of logical units to move left or right.</param>
            <param name="y">The number of logical units to move up or down.</param>
            <returns>
            <para>The return value specifies the new region's complexity and can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>NULLREGION</term>
            <term>Region is empty.</term>
            </item>
            <item>
            <term>SIMPLEREGION</term>
            <term>Region is a single rectangle.</term>
            </item>
            <item>
            <term>COMPLEXREGION</term>
            <term>Region is more than one rectangle.</term>
            </item>
            <item>
            <term>ERROR</term>
            <term>An error occurred. (The current clipping region is unaffected.)</term>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.PtVisible(Vanara.PInvoke.HDC,System.Int32,System.Int32)">
            <summary>The <c>PtVisible</c> function determines whether the specified point is within the clipping region of a device context.</summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="x">The x-coordinate, in logical units, of the point.</param>
            <param name="y">The y-coordinate, in logical units, of the point.</param>
            <returns>
            <para>If the specified point is within the clipping region of the device context, the return value is <c>TRUE</c>(1).</para>
            <para>If the specified point is not within the clipping region of the device context, the return value is <c>FALSE</c>(0).</para>
            <para>If the <c>HDC</c> is not valid, the return value is (BOOL)-1.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.RectVisible(Vanara.PInvoke.HDC,Vanara.PInvoke.RECT@)">
            <summary>
            The <c>RectVisible</c> function determines whether any part of the specified rectangle lies within the clipping region of a
            device context.
            </summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="lprect">A pointer to a RECT structure that contains the logical coordinates of the specified rectangle.</param>
            <returns>
            <para>
            If the current transform does not have a rotation and the rectangle lies within the clipping region, the return value is
            <c>TRUE</c> (1).
            </para>
            <para>
            If the current transform does not have a rotation and the rectangle does not lie within the clipping region, the return value is
            <c>FALSE</c> (0).
            </para>
            <para>If the current transform has a rotation and the rectangle lies within the clipping region, the return value is 2.</para>
            <para>
            If the current transform has a rotation and the rectangle does not lie within the clipping region, the return value is 1.
            </para>
            <para>All other return values are considered error codes. If the any parameter is not valid, the return value is undefined.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SelectClipPath(Vanara.PInvoke.HDC,Vanara.PInvoke.Gdi32.RegionOp)">
            <summary>
            The <c>SelectClipPath</c> function selects the current path as a clipping region for a device context, combining the new region
            with any existing clipping region using the specified mode.
            </summary>
            <param name="hdc">A handle to the device context of the path.</param>
            <param name="mode">
            <para>The way to use the path. This parameter can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>RGN_AND</term>
            <term>The new clipping region includes the intersection (overlapping areas) of the current clipping region and the current path.</term>
            </item>
            <item>
            <term>RGN_COPY</term>
            <term>The new clipping region is the current path.</term>
            </item>
            <item>
            <term>RGN_DIFF</term>
            <term>The new clipping region includes the areas of the current clipping region with those of the current path excluded.</term>
            </item>
            <item>
            <term>RGN_OR</term>
            <term>The new clipping region includes the union (combined areas) of the current clipping region and the current path.</term>
            </item>
            <item>
            <term>RGN_XOR</term>
            <term>
            The new clipping region includes the union of the current clipping region and the current path but without the overlapping areas.
            </term>
            </item>
            </list>
            </param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>The device context identified by the hdc parameter must contain a closed path.</para>
            <para>Examples</para>
            <para>For an example, see Using Clipping.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SelectClipRgn(Vanara.PInvoke.HDC,Vanara.PInvoke.HRGN)">
            <summary>The <c>SelectClipRgn</c> function selects a region as the current clipping region for the specified device context.</summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="hrgn">A handle to the region to be selected.</param>
            <returns>
            <para>The return value specifies the region's complexity and can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>NULLREGION</term>
            <term>Region is empty.</term>
            </item>
            <item>
            <term>SIMPLEREGION</term>
            <term>Region is a single rectangle.</term>
            </item>
            <item>
            <term>COMPLEXREGION</term>
            <term>Region is more than one rectangle.</term>
            </item>
            <item>
            <term>ERROR</term>
            <term>An error occurred. (The previous clipping region is unaffected.)</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            Only a copy of the selected region is used. The region itself can be selected for any number of other device contexts or it can
            be deleted.
            </para>
            <para>The <c>SelectClipRgn</c> function assumes that the coordinates for a region are specified in device units.</para>
            <para>To remove a device-context's clipping region, specify a <c>NULL</c> region handle.</para>
            <para>Examples</para>
            <para>For an example, see Clipping Output.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SetMetaRgn(Vanara.PInvoke.HDC)">
            <summary>
            The <c>SetMetaRgn</c> function intersects the current clipping region for the specified device context with the current
            metaregion and saves the combined region as the new metaregion for the specified device context. The clipping region is reset to
            a null region.
            </summary>
            <param name="hdc">A handle to the device context.</param>
            <returns>
            <para>The return value specifies the new clipping region's complexity and can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>NULLREGION</term>
            <term>Region is empty.</term>
            </item>
            <item>
            <term>SIMPLEREGION</term>
            <term>Region is a single rectangle.</term>
            </item>
            <item>
            <term>COMPLEXREGION</term>
            <term>Region is more than one rectangle.</term>
            </item>
            <item>
            <term>ERROR</term>
            <term>An error occurred. (The previous clipping region is unaffected.)</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The current clipping region of a device context is defined by the intersection of its clipping region and its metaregion.</para>
            <para>
            The <c>SetMetaRgn</c> function should only be called after an application's original device context was saved by calling the
            SaveDC function.
            </para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.EnumICMProfilesProcCallback">
            <summary>
            The <c>EnumICMProfilesProcCallback</c> callback is an application-defined callback function that processes color profile data
            from <c>EnumICMProfiles</c> .
            </summary>
            <param name="lpszFilename">Pointer to the file name of the color profile.</param>
            <param name="lParam">Data supplied by the application that is passed to the callback function by the EnumICMProfiles function.</param>
            <returns>
            This function must return a positive value to continue enumeration, or zero to stop enumeration. It may not return a negative value.
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.CA_FLAGS">
            <summary>Specifies how the output image should be prepared.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.CA_FLAGS.CA_NEGATIVE">
            <summary>Specifies that the negative of the original image should be displayed.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.CA_FLAGS.CA_LOG_FILTER">
            <summary>
            Specifies that a logarithmic function should be applied to the final density of the output colors. This will increase the
            color contrast when the luminance is low.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.CS">
            <summary>Constants used for <see cref="M:Vanara.PInvoke.Gdi32.ColorMatchToTarget(Vanara.PInvoke.HDC,Vanara.PInvoke.HDC,Vanara.PInvoke.Gdi32.CS)"/>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.CS.CS_ENABLE">
            <summary>
            Map the colors to the target device's color gamut. This enables color proofing. All subsequent draw commands to the DC will
            render colors as they would appear on the target device.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.CS.CS_DISABLE">
            <summary>Disable color proofing.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.CS.CS_DELETE_TRANSFORM">
            <summary>If color management is enabled for the target profile, disable it and delete the concatenated transform.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.ICM">
            <summary>Turns on and off image color management.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ICM.ICM_OFF">
            <summary>Turns off color management. Turns on old-style color correction of halftones.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ICM.ICM_ON">
            <summary>Turns on color management. Turns off old-style color correction of halftones.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ICM.ICM_QUERY">
            <summary>Queries the current state of color management.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ICM.ICM_DONE_OUTSIDEDC">
            <summary>
            Turns off color management inside DC. Under Windows 2000, also turns off old-style color correction of halftones. Not
            supported under Windows 95.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.ILLUMINANT">
            <summary>The type of standard light source under which the image is viewed.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ILLUMINANT.ILLUMINANT_DEVICE_DEFAULT">
            <summary>Device's default. Standard used by output devices.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ILLUMINANT.ILLUMINANT_A">
            <summary>Tungsten lamp.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ILLUMINANT.ILLUMINANT_B">
            <summary>Noon sunlight.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ILLUMINANT.ILLUMINANT_C">
            <summary>NTSC daylight.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ILLUMINANT.ILLUMINANT_D50">
            <summary>Normal print.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ILLUMINANT.ILLUMINANT_D55">
            <summary>Bond paper print.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ILLUMINANT.ILLUMINANT_D65">
            <summary>Standard daylight. Standard for CRTs and pictures.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ILLUMINANT.ILLUMINANT_D75">
            <summary>Northern daylight.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ILLUMINANT.ILLUMINANT_F2">
            <summary>Cool white lamp.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ILLUMINANT.ILLUMINANT_TUNGSTEN">
            <summary>Same as ILLUMINANT_A.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ILLUMINANT.ILLUMINANT_DAYLIGHT">
            <summary>Same as ILLUMINANT_C.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ILLUMINANT.ILLUMINANT_FLUORESCENT">
            <summary>Same as ILLUMINANT_F2.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ILLUMINANT.ILLUMINANT_NTSC">
            <summary>Same as ILLUMINANT_C.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.LCSCSTYPE">
            <summary>Color space type.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.LCSCSTYPE.LCS_CALIBRATED_RGB">
            <summary>
            Color values are calibrated RGB values. The values are translated using the endpoints specified by the lcsEndpoints member
            before being passed to the device.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.LCSCSTYPE.LCS_sRGB">
            <summary>Color values are values are sRGB values.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.LCSCSTYPE.LCS_WINDOWS_COLOR_SPACE">
            <summary>Color values are Windows default color space color values.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.LCSGAMUTMATCH">
            <summary>The gamut mapping method.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.LCSGAMUTMATCH.LCS_GM_BUSINESS">
            <summary>Maintain saturation. Used for business charts and other situations in which undithered colors are required.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.LCSGAMUTMATCH.LCS_GM_GRAPHICS">
            <summary>Maintain colorimetric match. Used for graphic designs and named colors.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.LCSGAMUTMATCH.LCS_GM_IMAGES">
            <summary>Maintain contrast. Used for photographs and natural images.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.LCSGAMUTMATCH.LCS_GM_ABS_COLORIMETRIC">
            <summary>Maintain the white point. Match the colors to their nearest color in the destination gamut.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.SYSPAL">
            <summary>The current state of the system (physical) palette.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.SYSPAL.SYSPAL_ERROR">
            <summary>The given device context is invalid or does not support a color palette.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.SYSPAL.SYSPAL_STATIC">
            <summary>The system palette contains static colors that will not change when an application realizes its logical palette.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.SYSPAL.SYSPAL_NOSTATIC">
            <summary>The system palette contains no static colors except black and white.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.SYSPAL.SYSPAL_NOSTATIC256">
            <summary>The system palette contains no static colors.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.AnimatePalette(Vanara.PInvoke.HPALETTE,System.UInt32,System.UInt32,Vanara.PInvoke.PALETTEENTRY[])">
            <summary>The <c>AnimatePalette</c> function replaces entries in the specified logical palette.</summary>
            <param name="hPal">A handle to the logical palette.</param>
            <param name="iStartIndex">The first logical palette entry to be replaced.</param>
            <param name="cEntries">The number of entries to be replaced.</param>
            <param name="ppe">A pointer to the first member in an array of PALETTEENTRY structures used to replace the current entries.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>
            An application can determine whether a device supports palette operations by calling the GetDeviceCaps function and specifying
            the RASTERCAPS constant.
            </para>
            <para>
            The <c>AnimatePalette</c> function only changes entries with the PC_RESERVED flag set in the corresponding <c>palPalEntry</c>
            member of the LOGPALETTE structure.
            </para>
            <para>If the given palette is associated with the active window, the colors in the palette are replaced immediately.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.CheckColorsInGamut(Vanara.PInvoke.HDC,Vanara.PInvoke.Gdi32.RGBTRIPLE[],System.IntPtr,System.UInt32)">
            <summary>
            The <c>CheckColorsInGamut</c> function determines whether a specified set of RGB triples lies in the output gamut of a specified
            device. The RGB triples are interpreted in the input logical color space.
            </summary>
            <param name="hdc">Handle to the device context whose output gamut to be checked.</param>
            <param name="lpRGBTriple">Pointer to an array of RGB triples to check.</param>
            <param name="dlpBuffer">
            Pointer to the buffer in which the results are to be placed. This buffer must be at least as large as nCount bytes.
            </param>
            <param name="nCount">The number of elements in the array of triples.</param>
            <returns>
            <para>If this function succeeds, the return value is a nonzero value.</para>
            <para>If this function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>
            The function places the test results in the buffer pointed to by lpBuffer. Each byte in the buffer corresponds to an RGB triple,
            and has an unsigned value between CM_IN_GAMUT (= 0) and CM_OUT_OF_GAMUT (= 255). The value 0 denotes that the color is in gamut,
            while a nonzero value denotes that it is out of gamut. For any integer n such that 0 &lt; n &lt; 255, a result value of n + 1
            indicates that the corresponding color is at least as far out of gamut as would be indicated by a result value of n, as specified
            by the ICC Profile Format Specification. For more information on the ICC Profile Format Specification, see the sources listed in
            Further Information.
            </para>
            <para>
            Note that for this function to succeed, WCS must be enabled for the device context handle that is passed in through the hDC
            parameter. WCS can be enabled for a device context handle by calling the SetICMMode function.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.ColorCorrectPalette(Vanara.PInvoke.HDC,Vanara.PInvoke.HPALETTE,System.UInt32,System.UInt32)">
            <summary>
            The <c>ColorCorrectPalette</c> function corrects the entries of a palette using the WCS 1.0 parameters in the specified device context.
            </summary>
            <param name="hdc">Specifies a device context whose WCS parameters to use.</param>
            <param name="hPal">Specifies the handle to the palette to be color corrected.</param>
            <param name="deFirst">Specifies the first entry in the palette to be color corrected.</param>
            <param name="num">Specifies the number of entries to color correct.</param>
            <returns>
            <para>If this function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If this function fails, the return value is <c>FALSE</c>.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.ColorMatchToTarget(Vanara.PInvoke.HDC,Vanara.PInvoke.HDC,Vanara.PInvoke.Gdi32.CS)">
            <summary>The <c>ColorMatchToTarget</c> function enables you to preview colors as they would appear on the target device.</summary>
            <param name="hdc">Specifies the device context for previewing, generally the screen.</param>
            <param name="hdcTarget">Specifies the target device context, generally a printer.</param>
            <param name="action">
            <para>A constant that can have one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CS_ENABLE</term>
            <term>
            Map the colors to the target device's color gamut. This enables color proofing. All subsequent draw commands to the DC will
            render colors as they would appear on the target device.
            </term>
            </item>
            <item>
            <term>CS_DISABLE</term>
            <term>Disable color proofing.</term>
            </item>
            <item>
            <term>CS_DELETE_TRANSFORM</term>
            <term>If color management is enabled for the target profile, disable it and delete the concatenated transform.</term>
            </item>
            </list>
            </param>
            <returns>
            <para>If this function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If this function fails, the return value is <c>FALSE</c>.</para>
            </returns>
            <remarks>
            <para>
            <c>ColorMatchToTarget</c> can be used to proof the colors of a color output device on another color output device. Setting the
            uiAction parameter to CS_ENABLE causes all subsequent drawing commands to the DC to render colors as they would appear on the
            target device. If uiAction is set to CS_DISABLE, proofing is turned off. However, the current color transform is not deleted from
            the DC. It is just inactive.
            </para>
            <para>
            When <c>ColorMatchToTarget</c> is called, the color transform for the target device is performed first, and then the transform to
            the preview device is applied to the results of the first transform. This is used primarily for checking gamut mapping
            conditions. Before using this function, you must enable WCS for both device contexts.
            </para>
            <para>
            This function cannot be cascaded. While color mapping to the target is enabled by setting uiAction to CS_ENABLE, application
            changes to the color space or gamut mapping method are ignored. Those changes then take effect when color mapping to the target
            is disabled.
            </para>
            <para>
            <c>Note</c> A memory leak will not occur if an application does not delete a transform using CS_DELETE_TRANSFORM. The transform
            will be deleted when either the device context (DC) is closed, or when the application color space is deleted. However if the
            transform is not going to be used again, or if the application will not be performing any more color matching on the DC, it
            should explicitly delete the transform to free the memory it occupies.
            </para>
            <para>
            The uiAction parameter should only be set to CS_DELETE_TRANSFORM if color management is enabled before the
            <c>ColorMatchToTarget</c> function is called.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.CreateColorSpace(Vanara.PInvoke.Gdi32.LOGCOLORSPACE@)">
            <summary>The <c>CreateColorSpace</c> function creates a logical color space.</summary>
            <param name="lplcs">Pointer to the LOGCOLORSPACE data structure.</param>
            <returns>
            <para>If this function succeeds, the return value is a handle that identifies a color space.</para>
            <para>If this function fails, the return value is <c>NULL</c>.</para>
            </returns>
            <remarks>
            <para>When the color space is no longer needed, use <c>DeleteColorSpace</c> to delete it.</para>
            <para>
            <c>Windows 95/98/Me:</c><c>CreateColorSpaceW</c> is supported by the Microsoft Layer for Unicode. To use this, you must add
            certain files to your application, as outlined in Microsoft Layer for Unicode on Windows 95/98/Me Systems.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.CreateHalftonePalette(Vanara.PInvoke.HDC)">
            <summary>The <c>CreateHalftonePalette</c> function creates a halftone palette for the specified device context (DC).</summary>
            <param name="hdc">A handle to the device context.</param>
            <returns>
            <para>If the function succeeds, the return value is a handle to a logical halftone palette.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>
            An application should create a halftone palette when the stretching mode of a device context is set to HALFTONE. The logical
            halftone palette returned by <c>CreateHalftonePalette</c> should then be selected and realized into the device context before the
            StretchBlt or StretchDIBits function is called.
            </para>
            <para>When you no longer need the palette, call the DeleteObject function to delete it.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.CreatePalette(Vanara.PInvoke.LOGPALETTE)">
            <summary>The <c>CreatePalette</c> function creates a logical palette.</summary>
            <param name="plpal">A pointer to a LOGPALETTE structure that contains information about the colors in the logical palette.</param>
            <returns>
            <para>If the function succeeds, the return value is a handle to a logical palette.</para>
            <para>If the function fails, the return value is <c>NULL</c>.</para>
            </returns>
            <remarks>
            <para>
            An application can determine whether a device supports palette operations by calling the GetDeviceCaps function and specifying
            the RASTERCAPS constant.
            </para>
            <para>
            Once an application creates a logical palette, it can select that palette into a device context by calling the SelectPalette
            function. A palette selected into a device context can be realized by calling the RealizePalette function.
            </para>
            <para>When you no longer need the palette, call the DeleteObject function to delete it.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.DeleteColorSpace(Vanara.PInvoke.HCOLORSPACE)">
            <summary>The <c>DeleteColorSpace</c> function removes and destroys a specified color space.</summary>
            <param name="hcs">Specifies the handle to a color space to delete.</param>
            <returns>
            <para>If this function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If this function fails, the return value is <c>FALSE</c>.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.EnumICMProfiles(Vanara.PInvoke.HDC,Vanara.PInvoke.Gdi32.EnumICMProfilesProcCallback,System.IntPtr)">
            <summary>
            The <c>EnumICMProfiles</c> function enumerates the different output color profiles that the system supports for a given device context.
            </summary>
            <param name="hdc">Specifies the device context.</param>
            <param name="proc">Specifies the procedure instance address of a callback function defined by the application. (See EnumICMProfilesProcCallback.)</param>
            <param name="param">Data supplied by the application that is passed to the callback function along with the color profile information.</param>
            <returns>
            This function returns zero if the application interrupted the enumeration. The return value is -1 if there are no color profiles
            to enumerate. Otherwise, the return value is the last value returned by the callback function.
            </returns>
            <remarks>
            <para>
            The <c>EnumICMProfiles</c> function returns a list of profiles that are associated with a device context (DC), and whose settings
            match those of the DC. It is possible for a device context to contain device profiles that are not associated with particular
            hardware devices, or device profiles that do not match the settings of the DC. The sRGB profile is an example. The SetICMProfile
            function is used to associate these types of profiles with a DC. The GetICMProfile function can be used to retrieve a profile
            that is not enumerated by the <c>EnumICMProfiles</c> function.
            </para>
            <para>
            <c>Windows 95/98/Me:</c><c>EnumICMProfilesW</c> is supported by the Microsoft Layer for Unicode. To use this, you must add
            certain files to your application, as outlined in Microsoft Layer for Unicode on Windows 95/98/Me Systems.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetColorAdjustment(Vanara.PInvoke.HDC,Vanara.PInvoke.Gdi32.COLORADJUSTMENT@)">
            <summary>The <c>GetColorAdjustment</c> function retrieves the color adjustment values for the specified device context (DC).</summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="lpca">A pointer to a COLORADJUSTMENT structure that receives the color adjustment values.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetColorSpace(Vanara.PInvoke.HDC)">
            <summary>The <c>GetColorSpace</c> function retrieves the handle to the input color space from a specified device context.</summary>
            <param name="hdc">Specifies a device context that is to have its input color space handle retrieved.</param>
            <returns>
            <para>If the function succeeds, the return value is the current input color space handle.</para>
            <para>If this function fails, the return value is <c>NULL</c>.</para>
            </returns>
            <remarks>
            <c>GetColorSpace</c> obtains the handle to the input color space regardless of whether color management is enabled for the device context.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetDeviceGammaRamp(Vanara.PInvoke.HDC,System.IntPtr)">
            <summary>The <c>GetDeviceGammaRamp</c> function gets the gamma ramp on direct color display boards having drivers that support downloadable gamma ramps in hardware.</summary>
            <param name="hdc">Specifies the device context of the direct color display board in question.</param>
            <param name="lpRamp">Points to a buffer where the function can place the current gamma ramp of the color display board. The gamma ramp is specified in three arrays of 256 <c>WORD</c> elements each, which contain the mapping between RGB values in the frame buffer and digital-analog-converter (DAC) values. The sequence of the arrays is red, green, blue.</param>
            <returns>
            <para>If this function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If this function fails, the return value is <c>FALSE</c>.</para>
            </returns>
            <remarks>Direct color display modes do not use color lookup tables and are usually 16, 24, or 32 bit. Not all direct color video boards support loadable gamma ramps. <c>GetDeviceGammaRamp</c> succeeds only for devices with drivers that support downloadable gamma ramps in hardware.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetICMProfile(Vanara.PInvoke.HDC,System.UInt32@,System.Text.StringBuilder)">
            <summary>
            The <c>GetICMProfile</c> function retrieves the file name of the current output color profile for a specified device context.
            </summary>
            <param name="hdc">Specifies a device context from which to retrieve the color profile.</param>
            <param name="pBufSize">
            Pointer to a <c>DWORD</c> that contains the size of the buffer pointed to by lpszFilename. For the ANSI version of this function,
            the size is in bytes. For the Unicode version, the size is in WCHARs. If this function is successful, on return this parameter
            contains the size of the buffer actually used. However, if the buffer is not large enough, this function returns <c>FALSE</c>. In
            this case, the <c>GetLastError()</c> function returns ERROR_INSUFFICIENT_BUFFER and the <c>DWORD</c> pointed to by this parameter
            contains the size needed for the lpszFilename buffer.
            </param>
            <param name="pszFilename">Points to the buffer that receives the path name of the profile.</param>
            <returns>
            <para>
            If this function succeeds, the return value is <c>TRUE</c>. It also returns <c>TRUE</c> if the lpszFilename parameter is
            <c>NULL</c> and the size required for the buffer is copied into lpcbName.
            </para>
            <para>If this function fails, the return value is <c>FALSE</c>.</para>
            </returns>
            <remarks>
            <para>
            <c>GetICMProfile</c> obtains the file name of the current output profile regardless of whether or not color management is enabled
            for the device context.
            </para>
            <para>
            Given a device context, <c>GetICMProfile</c> will output, through the parameter lpszFilename, the path name of the file
            containing the color profile currently being used by the device context. It will also output, through the parameter lpcbName, the
            length of the string containing the path name.
            </para>
            <para>
            It is possible that the profile name returned by <c>GetICMProfile</c> will not be in the list of profiles returned by
            EnumICMProfiles. The <c>EnumICMProfiles</c> function returns all color space profiles that are associated with a device context
            (DC) whose settings match that of the DC. If the SetICMProfile function is used to set the current profile, a profile may be
            associated with the DC that does not match its settings. For instance, the <c>SetICMProfile</c> function can be used to associate
            the device-independent sRGB profile with a DC. This profile will be used as the current WCS profile for that DC, and calls to
            <c>GetICMProfile</c> will return its file name. However, the profile will not appear in the list of profiles that is returned
            from <c>EnumICMProfiles</c>.
            </para>
            <para>
            If this function is called before any calls to the <c>SetICMProfile</c> function, it can be used to get the default profile for a
            device context.
            </para>
            <para>
            <c>Windows 95/98/Me:</c><c>GetICMProfileW</c> is supported by the Microsoft Layer for Unicode. To use this, you must add certain
            files to your application, as outlined in Microsoft Layer for Unicode on Windows 95/98/Me Systems.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetLogColorSpace(Vanara.PInvoke.HCOLORSPACE,Vanara.PInvoke.Gdi32.LOGCOLORSPACE@,System.UInt32)">
            <summary>The <c>GetLogColorSpace</c> function retrieves the color space definition identified by a specified handle.</summary>
            <param name="hColorSpace">Specifies the handle to a color space.</param>
            <param name="lpBuffer">Points to a buffer to receive the LOGCOLORSPACE structure.</param>
            <param name="nSize">Specifies the maximum size of the buffer.</param>
            <returns>
            <para>If this function succeeds, the return value is TRUE.</para>
            <para>If this function fails, the return value is <c>FALSE</c>.</para>
            </returns>
            <remarks>
            <c>Windows 95/98/Me:</c><c>GetLogColorSpaceW</c> is supported by the Microsoft Layer for Unicode. To use this, you must add
            certain files to your application, as outlined in Microsoft Layer for Unicode on Windows 95/98/Me Systems.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetNearestColor(Vanara.PInvoke.HDC,Vanara.PInvoke.COLORREF)">
            <summary>
            The <c>GetNearestColor</c> function retrieves a color value identifying a color from the system palette that will be displayed
            when the specified color value is used.
            </summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="color">A color value that identifies a requested color. To create a COLORREF color value, use the RGB macro.</param>
            <returns>
            <para>
            If the function succeeds, the return value identifies a color from the system palette that corresponds to the given color value.
            </para>
            <para>If the function fails, the return value is CLR_INVALID.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetNearestPaletteIndex(Vanara.PInvoke.HPALETTE,Vanara.PInvoke.COLORREF)">
            <summary>
            The <c>GetNearestPaletteIndex</c> function retrieves the index for the entry in the specified logical palette most closely
            matching a specified color value.
            </summary>
            <returns>
            <para>If the function succeeds, the return value is the index of an entry in a logical palette.</para>
            <para>If the function fails, the return value is CLR_INVALID.</para>
            </returns>
            <remarks>
            <para>
            An application can determine whether a device supports palette operations by calling the <c>GetDeviceCaps</c> function and
            specifying the RASTERCAPS constant.
            </para>
            <para>If the given logical palette contains entries with the PC_EXPLICIT flag set, the return value is undefined.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetPaletteEntries(Vanara.PInvoke.HPALETTE,System.UInt32,System.UInt32,Vanara.PInvoke.PALETTEENTRY[])">
            <summary>The <c>GetPaletteEntries</c> function retrieves a specified range of palette entries from the given logical palette.</summary>
            <param name="hpal">A handle to the logical palette.</param>
            <param name="iStart">The first entry in the logical palette to be retrieved.</param>
            <param name="cEntries">The number of entries in the logical palette to be retrieved.</param>
            <param name="pPalEntries">
            A pointer to an array of PALETTEENTRY structures to receive the palette entries. The array must contain at least as many
            structures as specified by the nEntries parameter.
            </param>
            <returns>
            <para>
            If the function succeeds and the handle to the logical palette is a valid pointer (not <c>NULL</c>), the return value is the
            number of entries retrieved from the logical palette. If the function succeeds and handle to the logical palette is <c>NULL</c>,
            the return value is the number of entries in the given palette.
            </para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>
            An application can determine whether a device supports palette operations by calling the GetDeviceCaps function and specifying
            the RASTERCAPS constant.
            </para>
            <para>
            If the nEntries parameter specifies more entries than exist in the palette, the remaining members of the PALETTEENTRY structure
            are not altered.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetSystemPaletteEntries(Vanara.PInvoke.HDC,System.UInt32,System.UInt32,Vanara.PInvoke.PALETTEENTRY[])">
            <summary>
            The <c>GetSystemPaletteEntries</c> function retrieves a range of palette entries from the system palette that is associated with
            the specified device context (DC).
            </summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="iStart">The first entry to be retrieved from the system palette.</param>
            <param name="cEntries">The number of entries to be retrieved from the system palette.</param>
            <param name="pPalEntries">
            A pointer to an array of PALETTEENTRY structures to receive the palette entries. The array must contain at least as many
            structures as specified by the nEntries parameter. If this parameter is <c>NULL</c>, the function returns the total number of
            entries in the palette.
            </param>
            <returns>
            <para>If the function succeeds, the return value is the number of entries retrieved from the palette.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            An application can determine whether a device supports palette operations by calling the GetDeviceCaps function and specifying
            the RASTERCAPS constant.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetSystemPaletteUse(Vanara.PInvoke.HDC)">
            <summary>
            The <c>GetSystemPaletteUse</c> function retrieves the current state of the system (physical) palette for the specified device
            context (DC).
            </summary>
            <param name="hdc">A handle to the device context.</param>
            <returns>
            <para>
            If the function succeeds, the return value is the current state of the system palette. This parameter can be one of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>SYSPAL_NOSTATIC</term>
            <term>The system palette contains no static colors except black and white.</term>
            </item>
            <item>
            <term>SYSPAL_STATIC</term>
            <term>The system palette contains static colors that will not change when an application realizes its logical palette.</term>
            </item>
            <item>
            <term>SYSPAL_ERROR</term>
            <term>The given device context is invalid or does not support a color palette.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            By default, the system palette contains 20 static colors that are not changed when an application realizes its logical palette.
            An application can gain access to most of these colors by calling the SetSystemPaletteUse function.
            </para>
            <para>The device context identified by the hdc parameter must represent a device that supports color palettes.</para>
            <para>
            An application can determine whether a device supports color palettes by calling the GetDeviceCaps function and specifying the
            RASTERCAPS constant.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.RealizePalette(Vanara.PInvoke.HDC)">
            <summary>The <c>RealizePalette</c> function maps palette entries from the current logical palette to the system palette.</summary>
            <param name="hdc">A handle to the device context into which a logical palette has been selected.</param>
            <returns>
            <para>If the function succeeds, the return value is the number of entries in the logical palette mapped to the system palette.</para>
            <para>If the function fails, the return value is GDI_ERROR.</para>
            </returns>
            <remarks>
            <para>
            An application can determine whether a device supports palette operations by calling the GetDeviceCaps function and specifying
            the RASTERCAPS constant.
            </para>
            <para>
            The <c>RealizePalette</c> function modifies the palette for the device associated with the specified device context. If the
            device context is a memory DC, the color table for the bitmap selected into the DC is modified. If the device context is a
            display DC, the physical palette for that device is modified.
            </para>
            <para>
            A logical palette is a buffer between color-intensive applications and the system, allowing these applications to use as many
            colors as needed without interfering with colors displayed by other windows.
            </para>
            <para>
            When an application's window has the focus and it calls the <c>RealizePalette</c> function, the system attempts to realize as
            many of the requested colors as possible. The same is also true for applications with inactive windows.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.ResizePalette(Vanara.PInvoke.HPALETTE,System.UInt32)">
            <summary>The <c>ResizePalette</c> function increases or decreases the size of a logical palette based on the specified value.</summary>
            <param name="hpal">A handle to the palette to be changed.</param>
            <param name="n">
            <para>The number of entries in the palette after it has been resized.</para>
            <para>The number of entries is limited to 1024.</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>
            An application can determine whether a device supports palette operations by calling the GetDeviceCaps function and specifying
            the RASTERCAPS constant.
            </para>
            <para>
            If an application calls <c>ResizePalette</c> to reduce the size of the palette, the entries remaining in the resized palette are
            unchanged. If the application calls <c>ResizePalette</c> to enlarge the palette, the additional palette entries are set to black
            (the red, green, and blue values are all 0) and their flags are set to zero.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SelectPalette(Vanara.PInvoke.HDC,Vanara.PInvoke.HPALETTE,System.Boolean)">
            <summary>The <c>SelectPalette</c> function selects the specified logical palette into a device context.</summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="hPal">A handle to the logical palette to be selected.</param>
            <param name="bForceBkgd">
            <para>
            Specifies whether the logical palette is forced to be a background palette. If this value is <c>TRUE</c>, the RealizePalette
            function causes the logical palette to be mapped to the colors already in the physical palette in the best possible way. This is
            always done, even if the window for which the palette is realized belongs to a thread without active focus.
            </para>
            <para>
            If this value is <c>FALSE</c>, RealizePalette causes the logical palette to be copied into the device palette when the
            application is in the foreground. (If the hdc parameter is a memory device context, this parameter is ignored.)
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is a handle to the device context's previous logical palette.</para>
            <para>If the function fails, the return value is <c>NULL</c>.</para>
            </returns>
            <remarks>
            <para>
            An application can determine whether a device supports palette operations by calling the GetDeviceCaps function and specifying
            the RASTERCAPS constant.
            </para>
            <para>
            An application can select a logical palette into more than one device context only if device contexts are compatible. Otherwise
            <c>SelectPalette</c> fails. To create a device context that is compatible with another device context, call CreateCompatibleDC
            with the first device context as the parameter. If a logical palette is selected into more than one device context, changes to
            the logical palette will affect all device contexts for which it is selected.
            </para>
            <para>
            An application might call the <c>SelectPalette</c> function with the bForceBackground parameter set to <c>TRUE</c> if the child
            windows of a top-level window each realize their own palettes. However, only the child window that needs to realize its palette
            must set bForceBackground to <c>TRUE</c>; other child windows must set this value to <c>FALSE</c>.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SetColorAdjustment(Vanara.PInvoke.HDC,Vanara.PInvoke.Gdi32.COLORADJUSTMENT@)">
            <summary>
            The <c>SetColorAdjustment</c> function sets the color adjustment values for a device context (DC) using the specified values.
            </summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="lpca">A pointer to a COLORADJUSTMENT structure containing the color adjustment values.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            The color adjustment values are used to adjust the input color of the source bitmap for calls to the StretchBlt and StretchDIBits
            functions when HALFTONE mode is set.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SetColorSpace(Vanara.PInvoke.HDC,Vanara.PInvoke.HCOLORSPACE)">
            <summary>The <c>SetColorSpace</c> function defines the input color space for a given device context.</summary>
            <param name="hdc">Specifies the handle to a device context.</param>
            <param name="hcs">Identifies handle to the color space to set.</param>
            <returns>
            <para>If this function succeeds, the return value is a handle to the hColorSpace being replaced.</para>
            <para>If this function fails, the return value is <c>NULL</c>.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SetDeviceGammaRamp(Vanara.PInvoke.HDC,System.IntPtr)">
            <summary>
            The <c>SetDeviceGammaRamp</c> function sets the gamma ramp on direct color display boards having drivers that support
            downloadable gamma ramps in hardware.
            </summary>
            <param name="hdc">Specifies the device context of the direct color display board in question.</param>
            <param name="lpRamp">
            Pointer to a buffer containing the gamma ramp to be set. The gamma ramp is specified in three arrays of 256 <c>WORD</c> elements
            each, which contain the mapping between RGB values in the frame buffer and digital-analog-converter (DAC ) values. The sequence
            of the arrays is red, green, blue. The RGB values must be stored in the most significant bits of each WORD to increase DAC independence.
            </param>
            <returns>
            <para>If this function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If this function fails, the return value is <c>FALSE</c>.</para>
            </returns>
            <remarks>
            Direct color display modes do not use color lookup tables and are usually 16, 24, or 32 bit. Not all direct color video boards
            support loadable gamma ramps. <c>SetDeviceGammaRamp</c> succeeds only for devices with drivers that support downloadable gamma
            ramps in hardware.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SetICMMode(Vanara.PInvoke.HDC,Vanara.PInvoke.Gdi32.ICM)">
            <summary>
            The <c>SetICMMode</c> function causes Image Color Management to be enabled, disabled, or queried on a given device context (DC).
            </summary>
            <param name="hdc">Identifies handle to the device context.</param>
            <param name="mode">
            <para>Turns on and off image color management. This parameter can take one of the following constant values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>ICM_ON</term>
            <term>Turns on color management. Turns off old-style color correction of halftones.</term>
            </item>
            <item>
            <term>ICM_OFF</term>
            <term>Turns off color management. Turns on old-style color correction of halftones.</term>
            </item>
            <item>
            <term>ICM_QUERY</term>
            <term>Queries the current state of color management.</term>
            </item>
            <item>
            <term>ICM_DONE_OUTSIDEDC</term>
            <term>
            Turns off color management inside DC. Under Windows 2000, also turns off old-style color correction of halftones. Not supported
            under Windows 95.
            </term>
            </item>
            </list>
            </param>
            <returns>
            <para>If this function succeeds, the return value is a nonzero value.</para>
            <para>If this function fails, the return value is zero.</para>
            <para>
            If ICM_QUERY is specified and the function succeeds, the nonzero value returned is ICM_ON or ICM_OFF to indicate the current mode.
            </para>
            </returns>
            <remarks>
            <para>If the system cannot find an ICC color profile to match the state of the device, <c>SetICMMode</c> fails and returns zero.</para>
            <para>
            Once WCS is enabled for a device context (DC), colors passed into the DC using most Win32 API functions are color matched. The
            primary exceptions are <c>BitBlt</c> and <c>StretchBlt</c>. The assumption is that when performing a bit block transfer (blit)
            from one DC to another, the two DCs are already compatible and need no color correction. If this is not the case, color
            correction may be performed. Specifically, if a device independent bitmap (DIB) is used as the source for a blit, and the blit is
            performed into a DC that has WCS enabled, color matching will be performed. If this is not what you want, turn WCS off for the
            destination DC by calling <c>SetICMMode</c> before calling <c>BitBlt</c> or <c>StretchBlt</c>.
            </para>
            <para>
            If the <c>CreateCompatibleDC</c> function is used to create a bitmap in a DC, it is possible for the bitmap to be color matched
            twice, once when it is created and once when a blit is performed. The reason is that a bitmap in a DC created by the
            <c>CreateCompatibleDC</c> function acquires the current brush, pens, and palette of the source DC. However, WCS will be disabled
            by default for the new DC. If WCS is later enabled for the new DC by using the <c>SetICMMode</c> function, a color correction
            will be done. To prevent double color corrections through the use of the <c>CreateCompatibleDC</c> function, use the
            <c>SetICMMode</c> function to turn WCS off for the source DC before the <c>CreateCompatibleDC</c> function is called.
            </para>
            <para>
            When a compatible DC is created from a printer's DC (see <c>CreateCompatibleDC</c> ), the default is for color matching to always
            be performed if it is enabled for the printer's DC. The default color profile for the printer is used when a blit is performed
            into the printer's DC using <c>SetDIBitsToDevice</c> or <c>StretchDIBits</c>. If this is not what you want, turn WCS off for the
            printer's DC by calling <c>SetICMMode</c> before calling <c>SetDIBitsToDevice</c> or <c>StretchDIBits</c>.
            </para>
            <para>
            Also, when printing to a printer's DC with WCS turned on, the <c>SetICMMode</c> function needs to be called after every call to
            the <c>StartPage</c> function to turn back on WCS. The <c>StartPage</c> function calls the <c>RestoreDC</c> and <c>SaveDC</c>
            functions, which result in WCS being turned off for the printer's DC.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SetICMProfile(Vanara.PInvoke.HDC,System.String)">
            <summary>
            The <c>SetICMProfile</c> function sets a specified color profile as the output profile for a specified device context (DC).
            </summary>
            <param name="hdc">Specifies a device context in which to set the color profile.</param>
            <param name="lpFileName">Specifies the path name of the color profile to be set.</param>
            <returns>
            <para>If this function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If this function fails, the return value is <c>FALSE</c>.</para>
            </returns>
            <remarks>
            <para>
            <c>SetICMProfile</c> associates a color profile with a device context. It becomes the output profile for that device context. The
            color profile does not have to be associated with any particular device. Device-independent profiles such as sRGB can also be
            used. If the color profile is not associated with a hardware device, it will be returned by GetICMProfile, but not by EnumICMProfiles.
            </para>
            <para>
            Note that under Windows 95 or later, the PostScript device driver for printers assumes a CMYK color model. Therefore, all
            PostScript printers must use a CMYK color profile. Windows 2000 does not have this limitation.
            </para>
            <para><c>SetICMProfile</c> supports only RGB profiles in compatible DCs.</para>
            <para>
            <c>Windows 95/98/Me:</c><c>SetICMProfileW</c> is supported by the Microsoft Layer for Unicode. To use this, you must add certain
            files to your application, as outlined in Microsoft Layer for Unicode on Windows 95/98/Me Systems.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SetPaletteEntries(Vanara.PInvoke.HPALETTE,System.UInt32,System.UInt32,Vanara.PInvoke.PALETTEENTRY[])">
            <summary>
            The <c>SetPaletteEntries</c> function sets RGB (red, green, blue) color values and flags in a range of entries in a logical palette.
            </summary>
            <param name="hpal">A handle to the logical palette.</param>
            <param name="iStart">The first logical-palette entry to be set.</param>
            <param name="cEntries">The number of logical-palette entries to be set.</param>
            <param name="pPalEntries">
            A pointer to the first member of an array of PALETTEENTRY structures containing the RGB values and flags.
            </param>
            <returns>
            <para>If the function succeeds, the return value is the number of entries that were set in the logical palette.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>
            An application can determine whether a device supports palette operations by calling the GetDeviceCaps function and specifying
            the RASTERCAPS constant.
            </para>
            <para>
            Even if a logical palette has been selected and realized, changes to the palette do not affect the physical palette in the
            surface. RealizePalette must be called again to set the new logical palette into the surface.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SetSystemPaletteUse(Vanara.PInvoke.HDC,Vanara.PInvoke.Gdi32.SYSPAL)">
            <summary>
            The <c>SetSystemPaletteUse</c> function allows an application to specify whether the system palette contains 2 or 20 static
            colors. The default system palette contains 20 static colors. (Static colors cannot be changed when an application realizes a
            logical palette.)
            </summary>
            <param name="hdc">A handle to the device context. This device context must refer to a device that supports color palettes.</param>
            <param name="use">
            <para>The new use of the system palette. This parameter can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>SYSPAL_NOSTATIC</term>
            <term>The system palette contains two static colors (black and white).</term>
            </item>
            <item>
            <term>SYSPAL_NOSTATIC256</term>
            <term>The system palette contains no static colors.</term>
            </item>
            <item>
            <term>SYSPAL_STATIC</term>
            <term>The system palette contains static colors that will not change when an application realizes its logical palette.</term>
            </item>
            </list>
            </param>
            <returns>
            <para>
            If the function succeeds, the return value is the previous system palette. It can be either SYSPAL_NOSTATIC, SYSPAL_NOSTATIC256,
            or SYSPAL_STATIC.
            </para>
            <para>If the function fails, the return value is SYSPAL_ERROR.</para>
            </returns>
            <remarks>
            <para>
            An application can determine whether a device supports palette operations by calling the GetDeviceCaps function and specifying
            the RASTERCAPS constant.
            </para>
            <para>
            When an application window moves to the foreground and the SYSPAL_NOSTATIC value is set, the application must call the
            GetSysColor function to save the current system colors setting. It must also call SetSysColors to set reasonable values using
            only black and white. When the application returns to the background or terminates, the previous system colors must be restored.
            </para>
            <para>If the function returns SYSPAL_ERROR, the specified device context is invalid or does not support color palettes.</para>
            <para>An application must call this function only when its window is maximized and has the input focus.</para>
            <para>
            If an application calls <c>SetSystemPaletteUse</c> with uUsage set to SYSPAL_NOSTATIC, the system continues to set aside two
            entries in the system palette for pure white and pure black, respectively.
            </para>
            <para>After calling this function with uUsage set to SYSPAL_NOSTATIC, an application must take the following steps:</para>
            <list type="number">
            <item>
            <term>Realize the logical palette.</term>
            </item>
            <item>
            <term>Call the GetSysColor function to save the current system-color settings.</term>
            </item>
            <item>
            <term>
            Call the SetSysColors function to set the system colors to reasonable values using black and white. For example, adjacent or
            overlapping items (such as window frames and borders) should be set to black and white, respectively.
            </term>
            </item>
            <item>
            <term>Send the WM_SYSCOLORCHANGE message to other top-level windows to allow them to be redrawn with the new system colors.</term>
            </item>
            </list>
            <para>When the application's window loses focus or closes, the application must perform the following steps:</para>
            <list type="number">
            <item>
            <term>Call <c>SetSystemPaletteUse</c> with the uUsage parameter set to SYSPAL_STATIC.</term>
            </item>
            <item>
            <term>Realize the logical palette.</term>
            </item>
            <item>
            <term>Restore the system colors to their previous values.</term>
            </item>
            <item>
            <term>Send the WM_SYSCOLORCHANGE message.</term>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.UnrealizeObject(Vanara.PInvoke.HGDIOBJ)">
            <summary>
            The <c>UnrealizeObject</c> function resets the origin of a brush or resets a logical palette. If the hgdiobj parameter is a
            handle to a brush, <c>UnrealizeObject</c> directs the system to reset the origin of the brush the next time it is selected. If
            the hgdiobj parameter is a handle to a logical palette, <c>UnrealizeObject</c> directs the system to realize the palette as
            though it had not previously been realized. The next time the application calls the RealizePalette function for the specified
            palette, the system completely remaps the logical palette to the system palette.
            </summary>
            <param name="h">A handle to the logical palette to be reset.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>
            The <c>UnrealizeObject</c> function should not be used with stock objects. For example, the default palette, obtained by calling
            GetStockObject (DEFAULT_PALETTE), is a stock object.
            </para>
            <para>A palette identified by hgdiobj can be the currently selected palette of a device context.</para>
            <para>
            If hgdiobj is a brush, <c>UnrealizeObject</c> does nothing, and the function returns <c>TRUE</c>. Use SetBrushOrgEx to set the
            origin of a brush.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.UpdateColors(Vanara.PInvoke.HDC)">
            <summary>
            The <c>UpdateColors</c> function updates the client area of the specified device context by remapping the current colors in the
            client area to the currently realized logical palette.
            </summary>
            <param name="hdc">A handle to the device context.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>
            An application can determine whether a device supports palette operations by calling the GetDeviceCaps function and specifying
            the RASTERCAPS constant.
            </para>
            <para>
            An inactive window with a realized logical palette may call <c>UpdateColors</c> as an alternative to redrawing its client area
            when the system palette changes.
            </para>
            <para>
            The <c>UpdateColors</c> function typically updates a client area faster than redrawing the area. However, because
            <c>UpdateColors</c> performs the color translation based on the color of each pixel before the system palette changed, each call
            to this function results in the loss of some color accuracy.
            </para>
            <para>This function must be called soon after a WM_PALETTECHANGED message is received.</para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.CIEXYZ">
            <summary>The <c>CIEXYZ</c> structure contains the x,y, and z coordinates of a specific color in a specified color space.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.CIEXYZ.ciexyzX">
            <summary>The x coordinate in fix point (2.30).</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.CIEXYZ.ciexyzY">
            <summary>The y coordinate in fix point (2.30).</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.CIEXYZ.ciexyzZ">
            <summary>The z coordinate in fix point (2.30).</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.CIEXYZTRIPLE">
            <summary>
            The <c>CIEXYZTRIPLE</c> structure contains the x,y, and z coordinates of the three colors that correspond to the red, green, and
            blue endpoints for a specified logical color space.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.CIEXYZTRIPLE.ciexyzRed">
            <summary>The xyz coordinates of red endpoint.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.CIEXYZTRIPLE.ciexyzGreen">
            <summary>The xyz coordinates of green endpoint.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.CIEXYZTRIPLE.ciexyzBlue">
            <summary>The xyz coordinates of blue endpoint.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.COLORADJUSTMENT">
            <summary>
            The <c>COLORADJUSTMENT</c> structure defines the color adjustment values used by the StretchBlt and StretchDIBits functions when
            the stretch mode is HALFTONE. You can set the color adjustment values by calling the SetColorAdjustment function.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.COLORADJUSTMENT.caSize">
            <summary>The size, in bytes, of the structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.COLORADJUSTMENT.caFlags">
            <summary>
            <para>
            Specifies how the output image should be prepared. This member may be set to <c>NULL</c> or any combination of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CA_NEGATIVE</term>
            <term>Specifies that the negative of the original image should be displayed.</term>
            </item>
            <item>
            <term>CA_LOG_FILTER</term>
            <term>
            Specifies that a logarithmic function should be applied to the final density of the output colors. This will increase the
            color contrast when the luminance is low.
            </term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.COLORADJUSTMENT.caIlluminantIndex">
            <summary>
            <para>
            The type of standard light source under which the image is viewed. This member may be set to one of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>ILLUMINANT_DEVICE_DEFAULT</term>
            <term>Device's default. Standard used by output devices.</term>
            </item>
            <item>
            <term>ILLUMINANT_A</term>
            <term>Tungsten lamp.</term>
            </item>
            <item>
            <term>ILLUMINANT_B</term>
            <term>Noon sunlight.</term>
            </item>
            <item>
            <term>ILLUMINANT_C</term>
            <term>NTSC daylight.</term>
            </item>
            <item>
            <term>ILLUMINANT_D50</term>
            <term>Normal print.</term>
            </item>
            <item>
            <term>ILLUMINANT_D55</term>
            <term>Bond paper print.</term>
            </item>
            <item>
            <term>ILLUMINANT_D65</term>
            <term>Standard daylight. Standard for CRTs and pictures.</term>
            </item>
            <item>
            <term>ILLUMINANT_D75</term>
            <term>Northern daylight.</term>
            </item>
            <item>
            <term>ILLUMINANT_F2</term>
            <term>Cool white lamp.</term>
            </item>
            <item>
            <term>ILLUMINANT_TUNGSTEN</term>
            <term>Same as ILLUMINANT_A.</term>
            </item>
            <item>
            <term>ILLUMINANT_DAYLIGHT</term>
            <term>Same as ILLUMINANT_C.</term>
            </item>
            <item>
            <term>ILLUMINANT_FLUORESCENT</term>
            <term>Same as ILLUMINANT_F2.</term>
            </item>
            <item>
            <term>ILLUMINANT_NTSC</term>
            <term>Same as ILLUMINANT_C.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.COLORADJUSTMENT.caRedGamma">
            <summary>
            Specifies the n power gamma-correction value for the red primary of the source colors. The value must be in the range from
            2500 to 65,000. A value of 10,000 means no gamma correction.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.COLORADJUSTMENT.caGreenGamma">
            <summary>
            Specifies the n power gamma-correction value for the green primary of the source colors. The value must be in the range from
            2500 to 65,000. A value of 10,000 means no gamma correction.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.COLORADJUSTMENT.caBlueGamma">
            <summary>
            Specifies the n power gamma-correction value for the blue primary of the source colors. The value must be in the range from
            2500 to 65,000. A value of 10,000 means no gamma correction.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.COLORADJUSTMENT.caReferenceBlack">
            <summary>
            The black reference for the source colors. Any colors that are darker than this are treated as black. The value must be in
            the range from 0 to 4000.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.COLORADJUSTMENT.caReferenceWhite">
            <summary>
            The white reference for the source colors. Any colors that are lighter than this are treated as white. The value must be in
            the range from 6000 to 10,000.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.COLORADJUSTMENT.caContrast">
            <summary>
            The amount of contrast to be applied to the source object. The value must be in the range from -100 to 100. A value of 0
            means no contrast adjustment.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.COLORADJUSTMENT.caBrightness">
            <summary>
            The amount of brightness to be applied to the source object. The value must be in the range from -100 to 100. A value of 0
            means no brightness adjustment.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.COLORADJUSTMENT.caColorfulness">
            <summary>
            The amount of colorfulness to be applied to the source object. The value must be in the range from -100 to 100. A value of 0
            means no colorfulness adjustment.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.COLORADJUSTMENT.caRedGreenTint">
            <summary>
            The amount of red or green tint adjustment to be applied to the source object. The value must be in the range from -100 to
            100. Positive numbers adjust toward red and negative numbers adjust toward green. Zero means no tint adjustment.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.LOGCOLORSPACE">
            <summary>The <c>LOGCOLORSPACE</c> structure contains information that defines a logical color space.</summary>
            <remarks>
            <para>Like palettes, but unlike pens and brushes, a pointer must be passed when creating a LogColorSpace.</para>
            <para>
            If the <c>lcsCSType</c> member is set to LCS_sRGB or LCS_WINDOWS_COLOR_SPACE, the other members of this structure are ignored,
            and WCS uses the sRGB color space. The <c>lcsEndpoints,</c><c>lcsGammaRed, lcsGammaGreen,</c> and <c>lcsGammaBlue</c> members are
            used to describe the logical color space. The <c>lcsEndpoints</c> member is a <c>CIEXYZTRIPLE</c> that contains the x, y, and z
            values of the color space's RGB endpoint.
            </para>
            <para>
            The required DWORD bit format for the <c>lcsGammaRed</c>, <c>lcsGammaGreen</c>, and <c>lcsGammaBlue</c> is an 8.8 fixed point
            interger left-shifted by 8 bits. This means 8 interger bits are followed by 8 fraction bits. Taking the bit shift into account,
            the required format of the 32-bit DWORD is:
            </para>
            <para>00000000nnnnnnnnffffffff00000000</para>
            <para>
            Whenever the <c>lcsFilename</c> member contains a file name and the <c>lcsCSType</c> member is set to LCS_CALIBRATED_RGB, WCS
            ignores the other members of this structure. It uses the color space in the file as the color space to which this
            <c>LOGCOLORSPACE</c> structure refers.
            </para>
            <para>The relation between tri-stimulus values X,Y,Z and chromaticity values x,y,z is as follows:</para>
            <para>x = X/(X+Y+Z)</para>
            <para>y = Y/(X+Y+Z)</para>
            <para>z = Z/(X+Y+Z)</para>
            <para>
            If the lcsCSType member is set to LCS_sRGB or LCS_WINDOWS_COLOR_SPACE, the other members of this structure are ignored, and ICM
            uses the sRGB color space. Appliations should still initialize the rest of the structure since CreateProfileFromLogColorSpace
            ignores lcsCSType member and uses lcsEndpoints, lcsGammaRed, lcsGammaGreen, lcsGammaBlue members to create a profile, which may
            not be initialized in case of LCS_sRGB or LCS_WINDOWS_COLOR_SPACE color spaces.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.LOGCOLORSPACE.lcsSignature">
            <summary>Color space signature. At present, this member should always be set to LCS_SIGNATURE.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.LOGCOLORSPACE.lcsVersion">
            <summary>Version number; must be 0x400.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.LOGCOLORSPACE.lcsSize">
            <summary>Size of this structure, in bytes.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.LOGCOLORSPACE.lcsCSType">
            <summary>
            <para>Color space type. The member can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>LCS_CALIBRATED_RGB</term>
            <term>
            Color values are calibrated RGB values. The values are translated using the endpoints specified by the lcsEndpoints member
            before being passed to the device.
            </term>
            </item>
            <item>
            <term>LCS_sRGB</term>
            <term>Color values are values are sRGB values.</term>
            </item>
            <item>
            <term>LCS_WINDOWS_COLOR_SPACE</term>
            <term>Color values are Windows default color space color values.</term>
            </item>
            </list>
            <para>If LCS_CALIBRATED_RGB is not specified, the <c>lcsEndpoints</c> member is ignored.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.LOGCOLORSPACE.lcsIntent">
            <summary>
            <para>The gamut mapping method. This member can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Intent</term>
            <term>ICC Name</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>LCS_GM_ABS_COLORIMETRIC</term>
            <term>Match</term>
            <term>Absolute Colorimetric</term>
            <term>Maintain the white point. Match the colors to their nearest color in the destination gamut.</term>
            </item>
            <item>
            <term>LCS_GM_BUSINESS</term>
            <term>Graphic</term>
            <term>Saturation</term>
            <term>Maintain saturation. Used for business charts and other situations in which undithered colors are required.</term>
            </item>
            <item>
            <term>LCS_GM_GRAPHICS</term>
            <term>Proof</term>
            <term>Relative Colorimetric</term>
            <term>Maintain colorimetric match. Used for graphic designs and named colors.</term>
            </item>
            <item>
            <term>LCS_GM_IMAGES</term>
            <term>Picture</term>
            <term>Perceptual</term>
            <term>Maintain contrast. Used for photographs and natural images.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.LOGCOLORSPACE.lcsEndpoints">
            <summary>Red, green, blue endpoints.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.LOGCOLORSPACE.lcsGammaRed">
            <summary>Scale of the red coordinate.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.LOGCOLORSPACE.lcsGammaGreen">
            <summary>Scale of the green coordinate.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.LOGCOLORSPACE.lcsGammaBlue">
            <summary>Scale of the blue coordinate.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.LOGCOLORSPACE.lcsFilename">
            <summary>
            A null-terminated string that names a color profile file. This member is typically set to zero, but may be used to set the
            color space to be exactly as specified by the color profile. This is useful for devices that input color values for a
            specific printer, or when using an installable image color matcher. If a color profile is specified, all other members of
            this structure should be set to reasonable values, even if the values are not completely accurate.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.LOGCOLORSPACE.Default">
            <summary>The default structure with size and default fields preset.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.RGBTRIPLE">
            <summary>
            The <c>RGBTRIPLE</c> structure describes a color consisting of relative intensities of red, green, and blue. The
            <c>bmciColors</c> member of the BITMAPCOREINFO structure consists of an array of <c>RGBTRIPLE</c> structures.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RGBTRIPLE.rgbtBlue">
            <summary>The intensity of blue in the color.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RGBTRIPLE.rgbtGreen">
            <summary>The intensity of green in the color.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RGBTRIPLE.rgbtRed">
            <summary>The intensity of red in the color.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.SafeHCOLORSPACE">
            <summary>Provides a <see cref="T:System.Runtime.InteropServices.SafeHandle"/> for <see cref="T:Vanara.PInvoke.HCOLORSPACE"/> that is disposed using <see cref="M:Vanara.PInvoke.Gdi32.DeleteColorSpace(Vanara.PInvoke.HCOLORSPACE)"/>.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SafeHCOLORSPACE.#ctor(System.IntPtr,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Gdi32.SafeHCOLORSPACE"/> class and assigns an existing handle.</summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
            <param name="ownsHandle">
            <see langword="true"/> to reliably release the handle during the finalization phase; otherwise, <see langword="false"/> (not recommended).
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SafeHCOLORSPACE.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Gdi32.SafeHCOLORSPACE"/> class.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SafeHCOLORSPACE.op_Implicit(Vanara.PInvoke.Gdi32.SafeHCOLORSPACE)~Vanara.PInvoke.HCOLORSPACE">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.Gdi32.SafeHCOLORSPACE"/> to <see cref="T:Vanara.PInvoke.HCOLORSPACE"/>.</summary>
            <param name="h">The safe handle instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SafeHCOLORSPACE.InternalReleaseHandle">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.GraphicsMode">
            <summary>The graphics mode.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.GraphicsMode.GM_COMPATIBLE">
            <summary>
            The current graphics mode is the compatible graphics mode, a mode that is compatible with 16-bit Windows. In this graphics
            mode, an application cannot set or modify the world transformation for the specified device context. The compatible graphics
            mode is the default graphics mode.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.GraphicsMode.GM_ADVANCED">
            <summary>
            The current graphics mode is the advanced graphics mode, a mode that allows world transformations. In this graphics mode, an
            application can set or modify the world transformation for the specified device context.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.MapMode">
            <summary>A mapping mode.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.MapMode.MM_ANISOTROPIC">
            <summary>
            Logical units are mapped to arbitrary units with arbitrarily scaled axes. Use the SetWindowExtEx and SetViewportExtEx
            functions to specify the units, orientation, and scaling required.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.MapMode.MM_HIENGLISH">
            <summary>Each logical unit is mapped to 0.001 inch. Positive x is to the right; positive y is up.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.MapMode.MM_HIMETRIC">
            <summary>Each logical unit is mapped to 0.01 millimeter. Positive x is to the right; positive y is up.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.MapMode.MM_ISOTROPIC">
            <summary>
            Logical units are mapped to arbitrary units with equally scaled axes; that is, one unit along the x-axis is equal to one unit
            along the y-axis. Use the SetWindowExtEx and SetViewportExtEx functions to specify the units and the orientation of the axes.
            Graphics device interface makes adjustments as necessary to ensure the x and y units remain the same size. (When the windows
            extent is set, the viewport will be adjusted to keep the units isotropic).
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.MapMode.MM_LOENGLISH">
            <summary>Each logical unit is mapped to 0.01 inch. Positive x is to the right; positive y is up.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.MapMode.MM_LOMETRIC">
            <summary>Each logical unit is mapped to 0.1 millimeter. Positive x is to the right; positive y is up.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.MapMode.MM_TEXT">
            <summary>Each logical unit is mapped to one device pixel. Positive x is to the right; positive y is down.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.MapMode.MM_TWIPS">
            <summary>
            Each logical unit is mapped to one twentieth of a printer's point (1/1440 inch, also called a "twip"). Positive x is to the
            right; positive y is up.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.MWT">
            <summary>Specifies how the transformation data modifies the current world transformation.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.MWT.MWT_IDENTITY">
            <summary>
            Resets the current world transformation by using the identity matrix. If this mode is specified, the XFORM structure pointed
            to by lpXform is ignored.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.MWT.MWT_LEFTMULTIPLY">
            <summary>
            Multiplies the current transformation by the data in the XFORM structure. (The data in the XFORM structure becomes the left
            multiplicand, and the data for the current transformation becomes the right multiplicand.)
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.MWT.MWT_RIGHTMULTIPLY">
            <summary>
            Multiplies the current transformation by the data in the XFORM structure. (The data in the XFORM structure becomes the right
            multiplicand, and the data for the current transformation becomes the left multiplicand.)
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.CombineTransform(Vanara.PInvoke.Gdi32.XFORM@,Vanara.PInvoke.Gdi32.XFORM@,Vanara.PInvoke.Gdi32.XFORM@)">
            <summary>The <c>CombineTransform</c> function concatenates two world-space to page-space transformations.</summary>
            <param name="lpxfOut">A pointer to an XFORM structure that receives the combined transformation.</param>
            <param name="lpxf1">A pointer to an XFORM structure that specifies the first transformation.</param>
            <param name="lpxf2">A pointer to an XFORM structure that specifies the second transformation.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>
            Applying the combined transformation has the same effect as applying the first transformation and then applying the second transformation.
            </para>
            <para>The three transformations need not be distinct. For example, lpxform1 can point to the same XFORM structure as lpxformResult.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.DPtoLP(Vanara.PInvoke.HDC,Vanara.PInvoke.POINT[],System.Int32)">
            <summary>
            The <c>DPtoLP</c> function converts device coordinates into logical coordinates. The conversion depends on the mapping mode of
            the device context, the settings of the origins and extents for the window and viewport, and the world transformation.
            </summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="lppt">
            A pointer to an array of POINT structures. The x- and y-coordinates contained in each <c>POINT</c> structure will be transformed.
            </param>
            <param name="c">The number of points in the array.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>
            The <c>DPtoLP</c> function fails if the device coordinates exceed 27 bits, or if the converted logical coordinates exceed 32
            bits. In the case of such an overflow, the results for all the points are undefined.
            </para>
            <para>Examples</para>
            <para>For an example, see Using Coordinate Spaces and Transformations.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetCurrentPositionEx(Vanara.PInvoke.HDC,Vanara.PInvoke.POINT@)">
            <summary>The <c>GetCurrentPositionEx</c> function retrieves the current position in logical coordinates.</summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="lppt">A pointer to a POINT structure that receives the logical coordinates of the current position.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetGraphicsMode(Vanara.PInvoke.HDC)">
            <summary>The <c>GetGraphicsMode</c> function retrieves the current graphics mode for the specified device context.</summary>
            <param name="hdc">A handle to the device context.</param>
            <returns>
            <para>If the function succeeds, the return value is the current graphics mode. It can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>GM_COMPATIBLE</term>
            <term>
            The current graphics mode is the compatible graphics mode, a mode that is compatible with 16-bit Windows. In this graphics mode,
            an application cannot set or modify the world transformation for the specified device context. The compatible graphics mode is
            the default graphics mode.
            </term>
            </item>
            <item>
            <term>GM_ADVANCED</term>
            <term>
            The current graphics mode is the advanced graphics mode, a mode that allows world transformations. In this graphics mode, an
            application can set or modify the world transformation for the specified device context.
            </term>
            </item>
            </list>
            <para>Otherwise, the return value is zero.</para>
            </returns>
            <remarks>An application can set the graphics mode for a device context by calling the SetGraphicsMode function.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetMapMode(Vanara.PInvoke.HDC)">
            <summary>The <c>GetMapMode</c> function retrieves the current mapping mode.</summary>
            <param name="hdc">A handle to the device context.</param>
            <returns>
            <para>If the function succeeds, the return value specifies the mapping mode.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>The following are the various mapping modes.</para>
            <list type="table">
            <listheader>
            <term>Mode</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>MM_ANISOTROPIC</term>
            <term>
            Logical units are mapped to arbitrary units with arbitrarily scaled axes. Use the SetWindowExtEx and SetViewportExtEx functions
            to specify the units, orientation, and scaling required.
            </term>
            </item>
            <item>
            <term>MM_HIENGLISH</term>
            <term>Each logical unit is mapped to 0.001 inch. Positive x is to the right; positive y is up.</term>
            </item>
            <item>
            <term>MM_HIMETRIC</term>
            <term>Each logical unit is mapped to 0.01 millimeter. Positive x is to the right; positive y is up.</term>
            </item>
            <item>
            <term>MM_ISOTROPIC</term>
            <term>
            Logical units are mapped to arbitrary units with equally scaled axes; that is, one unit along the x-axis is equal to one unit
            along the y-axis. Use the SetWindowExtEx and SetViewportExtEx functions to specify the units and the orientation of the axes.
            Graphics device interface makes adjustments as necessary to ensure the x and y units remain the same size. (When the windows
            extent is set, the viewport will be adjusted to keep the units isotropic).
            </term>
            </item>
            <item>
            <term>MM_LOENGLISH</term>
            <term>Each logical unit is mapped to 0.01 inch. Positive x is to the right; positive y is up.</term>
            </item>
            <item>
            <term>MM_LOMETRIC</term>
            <term>Each logical unit is mapped to 0.1 millimeter. Positive x is to the right; positive y is up.</term>
            </item>
            <item>
            <term>MM_TEXT</term>
            <term>Each logical unit is mapped to one device pixel. Positive x is to the right; positive y is down.</term>
            </item>
            <item>
            <term>MM_TWIPS</term>
            <term>
            Each logical unit is mapped to one twentieth of a printer's point (1/1440 inch, also called a "twip"). Positive x is to the
            right; positive y is up.
            </term>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetViewportExtEx(Vanara.PInvoke.HDC,Vanara.PInvoke.SIZE@)">
            <summary>
            The <c>GetViewportExtEx</c> function retrieves the x-extent and y-extent of the current viewport for the specified device context.
            </summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="lpsize">A pointer to a SIZE structure that receives the x- and y-extents, in device units.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetViewportOrgEx(Vanara.PInvoke.HDC,Vanara.PInvoke.POINT@)">
            <summary>
            The <c>GetViewportOrgEx</c> function retrieves the x-coordinates and y-coordinates of the viewport origin for the specified
            device context.
            </summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="lppoint">A pointer to a POINT structure that receives the coordinates of the origin, in device units.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetWindowExtEx(Vanara.PInvoke.HDC,Vanara.PInvoke.SIZE@)">
            <summary>This function retrieves the x-extent and y-extent of the window for the specified device context.</summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="lpsize">
            A pointer to a SIZE structure that receives the x- and y-extents in page-space units, that is, logical units.
            </param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetWindowOrgEx(Vanara.PInvoke.HDC,Vanara.PInvoke.POINT@)">
            <summary>
            The <c>GetWindowOrgEx</c> function retrieves the x-coordinates and y-coordinates of the window origin for the specified device context.
            </summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="lppoint">A pointer to a POINT structure that receives the coordinates, in logical units, of the window origin.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetWorldTransform(Vanara.PInvoke.HDC,Vanara.PInvoke.Gdi32.XFORM@)">
            <summary>The <c>GetWorldTransform</c> function retrieves the current world-space to page-space transformation.</summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="lpxf">A pointer to an XFORM structure that receives the current world-space to page-space transformation.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            The precision of the transformation may be altered if an application calls the ModifyWorldTransform function prior to calling
            <c>GetWorldTransform</c>. (This is because the internal format for storing transformation values uses a higher precision than a
            <c>FLOAT</c> value.)
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.LogicalHeightToDeviceWidth(System.Int32,Vanara.PInvoke.HDC)">
            <summary>Converts a height in logical units to pixels.</summary>
            <param name="height">The height in logical units.</param>
            <param name="hdc">The device context handle.</param>
            <returns>The height in pixels.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.LogicalWidthToDeviceWidth(System.Int32,Vanara.PInvoke.HDC)">
            <summary>Converts a width in logical units to pixels.</summary>
            <param name="width">The width in logical units.</param>
            <param name="hdc">The device context handle.</param>
            <returns>The width in pixels.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.LPtoDP(Vanara.PInvoke.HDC,Vanara.PInvoke.POINT[],System.Int32)">
            <summary>
            <para>
            The <c>LPtoDP</c> function converts logical coordinates into device coordinates. The conversion depends on the mapping mode of
            the device context, the settings of the origins and extents for the window and viewport, and the world transformation.
            </para>
            </summary>
            <param name="hdc">
            <para>A handle to the device context.</para>
            </param>
            <param name="lppt">
            <para>
            A pointer to an array of POINT structures. The x-coordinates and y-coordinates contained in each of the <c>POINT</c> structures
            will be transformed.
            </para>
            </param>
            <param name="c">
            <para>The number of points in the array.</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>
            The <c>LPtoDP</c> function fails if the logical coordinates exceed 32 bits, or if the converted device coordinates exceed 27
            bits. In the case of such an overflow, the results for all the points are undefined.
            </para>
            <para>
            <c>LPtoDP</c> calculates complex floating-point arithmetic, and it has a caching system for efficiency. Therefore, the conversion
            result of an initial call to <c>LPtoDP</c> might not exactly match the conversion result of a later call to <c>LPtoDP</c>. We
            recommend not to write code that relies on the exact match of the conversion results from multiple calls to <c>LPtoDP</c> even if
            the parameters that are passed to each call are identical.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.ModifyWorldTransform(Vanara.PInvoke.HDC,Vanara.PInvoke.Gdi32.XFORM@,Vanara.PInvoke.Gdi32.MWT)">
            <summary>
            The <c>ModifyWorldTransform</c> function changes the world transformation for a device context using the specified mode.
            </summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="lpxf">A pointer to an XFORM structure used to modify the world transformation for the given device context.</param>
            <param name="mode">
            <para>
            Specifies how the transformation data modifies the current world transformation. This parameter must be one of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>MWT_IDENTITY</term>
            <term>
            Resets the current world transformation by using the identity matrix. If this mode is specified, the XFORM structure pointed to
            by lpXform is ignored.
            </term>
            </item>
            <item>
            <term>MWT_LEFTMULTIPLY</term>
            <term>
            Multiplies the current transformation by the data in the XFORM structure. (The data in the XFORM structure becomes the left
            multiplicand, and the data for the current transformation becomes the right multiplicand.)
            </term>
            </item>
            <item>
            <term>MWT_RIGHTMULTIPLY</term>
            <term>
            Multiplies the current transformation by the data in the XFORM structure. (The data in the XFORM structure becomes the right
            multiplicand, and the data for the current transformation becomes the left multiplicand.)
            </term>
            </item>
            </list>
            </param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            The <c>ModifyWorldTransform</c> function will fail unless graphics mode for the specified device context has been set to
            GM_ADVANCED by previously calling the SetGraphicsMode function. Likewise, it will not be possible to reset the graphics mode for
            the device context to the default GM_COMPATIBLE mode, unless world transform has first been reset to the default identity
            transform by calling SetWorldTransform or <c>ModifyWorldTransform</c>.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.OffsetViewportOrgEx(Vanara.PInvoke.HDC,System.Int32,System.Int32,Vanara.PInvoke.POINT@)">
            <summary>
            The <c>OffsetViewportOrgEx</c> function modifies the viewport origin for a device context using the specified horizontal and
            vertical offsets.
            </summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="x">The horizontal offset, in device units.</param>
            <param name="y">The vertical offset, in device units.</param>
            <param name="lppt">
            A pointer to a POINT structure. The previous viewport origin, in device units, is placed in this structure. If lpPoint is
            <c>NULL</c>, the previous viewport origin is not returned.
            </param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>The new origin is the sum of the current origin and the horizontal and vertical offsets.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.OffsetWindowOrgEx(Vanara.PInvoke.HDC,System.Int32,System.Int32,Vanara.PInvoke.POINT@)">
            <summary>
            The <c>OffsetWindowOrgEx</c> function modifies the window origin for a device context using the specified horizontal and vertical offsets.
            </summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="x">The horizontal offset, in logical units.</param>
            <param name="y">The vertical offset, in logical units.</param>
            <param name="lppt">
            A pointer to a POINT structure. The logical coordinates of the previous window origin are placed in this structure. If lpPoint is
            <c>NULL</c>, the previous origin is not returned.
            </param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.ScaleViewportExtEx(Vanara.PInvoke.HDC,System.Int32,System.Int32,System.Int32,System.Int32,Vanara.PInvoke.SIZE@)">
            <summary>
            The <c>ScaleViewportExtEx</c> function modifies the viewport for a device context using the ratios formed by the specified
            multiplicands and divisors.
            </summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="xn">The amount by which to multiply the current horizontal extent.</param>
            <param name="dx">The amount by which to divide the current horizontal extent.</param>
            <param name="yn">The amount by which to multiply the current vertical extent.</param>
            <param name="yd">The amount by which to divide the current vertical extent.</param>
            <param name="lpsz">
            A pointer to a SIZE structure that receives the previous viewport extents, in device units. If lpSize is <c>NULL</c>, this
            parameter is not used.
            </param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>The viewport extents are modified as follows:</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.ScaleWindowExtEx(Vanara.PInvoke.HDC,System.Int32,System.Int32,System.Int32,System.Int32,Vanara.PInvoke.SIZE@)">
            <summary>
            The <c>ScaleWindowExtEx</c> function modifies the window for a device context using the ratios formed by the specified
            multiplicands and divisors.
            </summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="xn">The amount by which to multiply the current horizontal extent.</param>
            <param name="xd">The amount by which to divide the current horizontal extent.</param>
            <param name="yn">The amount by which to multiply the current vertical extent.</param>
            <param name="yd">The amount by which to divide the current vertical extent.</param>
            <param name="lpsz">
            A pointer to a SIZE structure that receives the previous window extents, in logical units. If lpSize is <c>NULL</c>, this
            parameter is not used.
            </param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>The window extents are modified as follows:</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SetGraphicsMode(Vanara.PInvoke.HDC,Vanara.PInvoke.Gdi32.GraphicsMode)">
            <summary>The <c>SetGraphicsMode</c> function sets the graphics mode for the specified device context.</summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="iMode">
            <para>The graphics mode. This parameter can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>GM_COMPATIBLE</term>
            <term>
            Sets the graphics mode that is compatible with 16-bit Windows. This is the default mode. If this value is specified, the
            application can only modify the world-to-device transform by calling functions that set window and viewport extents and origins,
            but not by using SetWorldTransform or ModifyWorldTransform; calls to those functions will fail. Examples of functions that set
            window and viewport extents and origins are SetViewportExtEx and SetWindowExtEx.
            </term>
            </item>
            <item>
            <term>GM_ADVANCED</term>
            <term>
            Sets the advanced graphics mode that allows world transformations. This value must be specified if the application will set or
            modify the world transformation for the specified device context. In this mode all graphics, including text output, fully conform
            to the world-to-device transformation specified in the device context.
            </term>
            </item>
            </list>
            </param>
            <returns>
            <para>If the function succeeds, the return value is the old graphics mode.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>There are three areas in which graphics output differs according to the graphics mode:</para>
            <list type="number">
            <item>
            <term>
            Text Output: In the GM_COMPATIBLE mode, TrueType (or vector font) text output behaves much the same way as raster font text
            output with respect to the world-to-device transformations in the DC. The TrueType text is always written from left to right and
            right side up, even if the rest of the graphics will be flipped on the x or y axis. Only the height of the TrueType (or vector
            font) text is scaled. The only way to write text that is not horizontal in the GM_COMPATIBLE mode is to specify nonzero
            escapement and orientation for the logical font selected in this device context.
            </term>
            </item>
            <item>
            <term>
            Rectangle Exclusion: If the default GM_COMPATIBLE graphics mode is set, the system excludes bottom and rightmost edges when it
            draws rectangles.
            </term>
            </item>
            <item>
            <term>
            Arc Drawing: If the default GM_COMPATIBLE graphics mode is set, GDI draws arcs using the current arc direction in the device
            space. With this convention, arcs do not respect page-to-device transforms that require a flip along the x or y axis.
            </term>
            </item>
            </list>
            <para>Examples</para>
            <para>For an example, see Using Coordinate Spaces and Transformations.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SetMapMode(Vanara.PInvoke.HDC,Vanara.PInvoke.Gdi32.MapMode)">
            <summary>
            The <c>SetMapMode</c> function sets the mapping mode of the specified device context. The mapping mode defines the unit of
            measure used to transform page-space units into device-space units, and also defines the orientation of the device's x and y axes.
            </summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="iMode">
            <para>The new mapping mode. This parameter can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>MM_ANISOTROPIC</term>
            <term>
            Logical units are mapped to arbitrary units with arbitrarily scaled axes. Use the SetWindowExtEx and SetViewportExtEx functions
            to specify the units, orientation, and scaling.
            </term>
            </item>
            <item>
            <term>MM_HIENGLISH</term>
            <term>Each logical unit is mapped to 0.001 inch. Positive x is to the right; positive y is up.</term>
            </item>
            <item>
            <term>MM_HIMETRIC</term>
            <term>Each logical unit is mapped to 0.01 millimeter. Positive x is to the right; positive y is up.</term>
            </item>
            <item>
            <term>MM_ISOTROPIC</term>
            <term>
            Logical units are mapped to arbitrary units with equally scaled axes; that is, one unit along the x-axis is equal to one unit
            along the y-axis. Use the SetWindowExtEx and SetViewportExtEx functions to specify the units and the orientation of the axes.
            Graphics device interface (GDI) makes adjustments as necessary to ensure the x and y units remain the same size (When the window
            extent is set, the viewport will be adjusted to keep the units isotropic).
            </term>
            </item>
            <item>
            <term>MM_LOENGLISH</term>
            <term>Each logical unit is mapped to 0.01 inch. Positive x is to the right; positive y is up.</term>
            </item>
            <item>
            <term>MM_LOMETRIC</term>
            <term>Each logical unit is mapped to 0.1 millimeter. Positive x is to the right; positive y is up.</term>
            </item>
            <item>
            <term>MM_TEXT</term>
            <term>Each logical unit is mapped to one device pixel. Positive x is to the right; positive y is down.</term>
            </item>
            <item>
            <term>MM_TWIPS</term>
            <term>
            Each logical unit is mapped to one twentieth of a printer's point (1/1440 inch, also called a twip). Positive x is to the right;
            positive y is up.
            </term>
            </item>
            </list>
            </param>
            <returns>
            <para>If the function succeeds, the return value identifies the previous mapping mode.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>The MM_TEXT mode allows applications to work in device pixels, whose size varies from device to device.</para>
            <para>
            The MM_HIENGLISH, MM_HIMETRIC, MM_LOENGLISH, MM_LOMETRIC, and MM_TWIPS modes are useful for applications drawing in physically
            meaningful units (such as inches or millimeters).
            </para>
            <para>The MM_ISOTROPIC mode ensures a 1:1 aspect ratio.</para>
            <para>The MM_ANISOTROPIC mode allows the x-coordinates and y-coordinates to be adjusted independently.</para>
            <para>Examples</para>
            <para>For an example, see Using Coordinate Spaces and Transformations.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SetViewportExtEx(Vanara.PInvoke.HDC,System.Int32,System.Int32,Vanara.PInvoke.SIZE@)">
            <summary>
            The <c>SetViewportExtEx</c> function sets the horizontal and vertical extents of the viewport for a device context by using the
            specified values.
            </summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="x">The horizontal extent, in device units, of the viewport.</param>
            <param name="y">The vertical extent, in device units, of the viewport.</param>
            <param name="lpsz">
            A pointer to a SIZE structure that receives the previous viewport extents, in device units. If lpSize is <c>NULL</c>, this
            parameter is not used.
            </param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>
            The viewport refers to the device coordinate system of the device space. The extent is the maximum value of an axis. This
            function sets the maximum values for the horizontal and vertical axes of the viewport in device coordinates (or pixels). When
            mapping between page space and device space, SetWindowExtEx and <c>SetViewportExtEx</c> determine the scaling factor between the
            window and the viewport. For more information, see Transformation of Coordinate Spaces.
            </para>
            <para>When the following mapping modes are set, calls to the SetWindowExtEx and <c>SetViewportExtEx</c> functions are ignored.</para>
            <list type="bullet">
            <item>
            <term>MM_HIENGLISH</term>
            </item>
            <item>
            <term>MM_HIMETRIC</term>
            </item>
            <item>
            <term>MM_LOENGLISH</term>
            </item>
            <item>
            <term>MM_LOMETRIC</term>
            </item>
            <item>
            <term>MM_TEXT</term>
            </item>
            <item>
            <term>MM_TWIPS</term>
            </item>
            </list>
            <para>
            When MM_ISOTROPIC mode is set, an application must call the SetWindowExtEx function before it calls <c>SetViewportExtEx</c>. Note
            that for the MM_ISOTROPIC mode certain portions of a nonsquare screen may not be available for display because the logical units
            on both axes represent equal physical distances.
            </para>
            <para>Examples</para>
            <para>For an example, see Invalidating the Client Area.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SetViewportOrgEx(Vanara.PInvoke.HDC,System.Int32,System.Int32,Vanara.PInvoke.POINT@)">
            <summary>The <c>SetViewportOrgEx</c> function specifies which device point maps to the window origin (0,0).</summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="x">The x-coordinate, in device units, of the new viewport origin.</param>
            <param name="y">The y-coordinate, in device units, of the new viewport origin.</param>
            <param name="lppt">
            A pointer to a POINT structure that receives the previous viewport origin, in device coordinates. If lpPoint is <c>NULL</c>, this
            parameter is not used.
            </param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>
            This function (along with SetViewportExtEx and SetWindowExtEx) helps define the mapping from the logical coordinate space (also
            known as a window) to the device coordinate space (the viewport). <c>SetViewportOrgEx</c> specifies which device point maps to
            the logical point (0,0). It has the effect of shifting the axes so that the logical point (0,0) no longer refers to the
            upper-left corner.
            </para>
            <para>
            This is related to the SetWindowOrgEx function. Generally, you will use one function or the other, but not both. Regardless of
            your use of <c>SetWindowOrgEx</c> and <c>SetViewportOrgEx</c>, the device point (0,0) is always the upper-left corner.
            </para>
            <para>Examples</para>
            <para>For an example, see Redrawing in the Update Region.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SetWindowExtEx(Vanara.PInvoke.HDC,System.Int32,System.Int32,Vanara.PInvoke.SIZE@)">
            <summary>
            The <c>SetWindowExtEx</c> function sets the horizontal and vertical extents of the window for a device context by using the
            specified values.
            </summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="x">The window's horizontal extent in logical units.</param>
            <param name="y">The window's vertical extent in logical units.</param>
            <param name="lpsz">
            A pointer to a SIZE structure that receives the previous window extents, in logical units. If lpSize is <c>NULL</c>, this
            parameter is not used.
            </param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>
            The window refers to the logical coordinate system of the page space. The extent is the maximum value of an axis. This function
            sets the maximum values for the horizontal and vertical axes of the window (in logical coordinates). When mapping between page
            space and device space, SetViewportExtEx and <c>SetWindowExtEx</c> determine the scaling factor between the window and the
            viewport. For more information, see Transformation of Coordinate Spaces.
            </para>
            <para>When the following mapping modes are set, calls to the <c>SetWindowExtEx</c> and SetViewportExtEx functions are ignored:</para>
            <list type="bullet">
            <item>
            <term>MM_HIENGLISH</term>
            </item>
            <item>
            <term>MM_HIMETRIC</term>
            </item>
            <item>
            <term>MM_LOENGLISH</term>
            </item>
            <item>
            <term>MM_LOMETRIC</term>
            </item>
            <item>
            <term>MM_TEXT</term>
            </item>
            <item>
            <term>MM_TWIPS</term>
            </item>
            </list>
            <para>
            When MM_ISOTROPIC mode is set, an application must call the <c>SetWindowExtEx</c> function before calling SetViewportExtEx. Note
            that for the MM_ISOTROPIC mode, certain portions of a nonsquare screen may not be available for display because the logical units
            on both axes represent equal physical distances.
            </para>
            <para>Examples</para>
            <para>For an example, see Invalidating the Client Area.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SetWindowOrgEx(Vanara.PInvoke.HDC,System.Int32,System.Int32,Vanara.PInvoke.POINT@)">
            <summary>The <c>SetWindowOrgEx</c> function specifies which window point maps to the viewport origin (0,0).</summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="x">The x-coordinate, in logical units, of the new window origin.</param>
            <param name="y">The y-coordinate, in logical units, of the new window origin.</param>
            <param name="lppt">
            A pointer to a POINT structure that receives the previous origin of the window, in logical units. If lpPoint is <c>NULL</c>, this
            parameter is not used.
            </param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>
            This helps define the mapping from the logical coordinate space (also known as a window) to the device coordinate space (the
            viewport). <c>SetWindowOrgEx</c> specifies which logical point maps to the device point (0,0). It has the effect of shifting the
            axes so that the logical point (0,0) no longer refers to the upper-left corner.
            </para>
            <para>
            This is related to the SetViewportOrgEx function. Generally, you will use one function or the other, but not both. Regardless of
            your use of <c>SetWindowOrgEx</c> and <c>SetViewportOrgEx</c>, the device point (0,0) is always the upper-left corner.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SetWorldTransform(Vanara.PInvoke.HDC,Vanara.PInvoke.Gdi32.XFORM@)">
            <summary>
            The <c>SetWorldTransform</c> function sets a two-dimensional linear transformation between world space and page space for the
            specified device context. This transformation can be used to scale, rotate, shear, or translate graphics output.
            </summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="lpxf">A pointer to an XFORM structure that contains the transformation data.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>
            For any coordinates (x, y) in world space, the transformed coordinates in page space (x', y') can be determined by the following algorithm:
            </para>
            <para>where the transformation matrix is represented by the following:</para>
            <para>This function uses logical units.</para>
            <para>The world transformation is usually used to scale or rotate logical images in a device-independent way.</para>
            <para>The default world transformation is the identity matrix with zero offset.</para>
            <para>
            The <c>SetWorldTransform</c> function will fail unless the graphics mode for the given device context has been set to GM_ADVANCED
            by previously calling the SetGraphicsMode function. Likewise, it will not be possible to reset the graphics mode for the device
            context to the default GM_COMPATIBLE mode, unless the world transformation has first been reset to the default identity
            transformation by calling <c>SetWorldTransform</c> or ModifyWorldTransform.
            </para>
            <para>Examples</para>
            <para>For an example, see Using Coordinate Spaces and Transformations.</para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.XFORM">
            <summary>The <c>XFORM</c> structure specifies a world-space to page-space transformation.</summary>
            <remarks>
            <para>The following list describes how the members are used for each operation.</para>
            <list type="table">
            <listheader>
            <term>Operation</term>
            <term>eM11</term>
            <term>eM12</term>
            <term>eM21</term>
            <term>eM22</term>
            </listheader>
            <item>
            <term>Rotation</term>
            <term>Cosine</term>
            <term>Sine</term>
            <term>Negative sine</term>
            <term>Cosine</term>
            </item>
            <item>
            <term>Scaling</term>
            <term>Horizontal scaling component</term>
            <term>Not used</term>
            <term>Not used</term>
            <term>Vertical Scaling Component</term>
            </item>
            <item>
            <term>Shear</term>
            <term>Not used</term>
            <term>Horizontal Proportionality Constant</term>
            <term>Vertical Proportionality Constant</term>
            <term>Not used</term>
            </item>
            <item>
            <term>Reflection</term>
            <term>Horizontal Reflection Component</term>
            <term>Not used</term>
            <term>Not used</term>
            <term>Vertical Reflection Component</term>
            </item>
            </list>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.XFORM.eM11">
            <summary>
            <para>The following.</para>
            <list type="table">
            <listheader>
            <term>Operation</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>Scaling</term>
            <term>Horizontal scaling component</term>
            </item>
            <item>
            <term>Rotation</term>
            <term>Cosine of rotation angle</term>
            </item>
            <item>
            <term>Reflection</term>
            <term>Horizontal component</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.XFORM.eM12">
            <summary>
            <para>The following.</para>
            <list type="table">
            <listheader>
            <term>Operation</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>Shear</term>
            <term>Horizontal proportionality constant</term>
            </item>
            <item>
            <term>Rotation</term>
            <term>Sine of the rotation angle</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.XFORM.eM21">
            <summary>
            <para>The following.</para>
            <list type="table">
            <listheader>
            <term>Operation</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>Shear</term>
            <term>Vertical proportionality constant</term>
            </item>
            <item>
            <term>Rotation</term>
            <term>Negative sine of the rotation angle</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.XFORM.eM22">
            <summary>
            <para>The following.</para>
            <list type="table">
            <listheader>
            <term>Operation</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>Scaling</term>
            <term>Vertical scaling component</term>
            </item>
            <item>
            <term>Rotation</term>
            <term>Cosine of rotation angle</term>
            </item>
            <item>
            <term>Reflection</term>
            <term>Vertical reflection component</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.XFORM.eDx">
            <summary>The horizontal translation component, in logical units.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.XFORM.eDy">
            <summary>The vertical translation component, in logical units.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.LF_FACESIZE">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.LF_FULLFACESIZE">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.BrushStyle">
            <summary>Brush style used by <see cref="F:Vanara.PInvoke.Gdi32.LOGBRUSH.lbStyle"/>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BrushStyle.BS_DIBPATTERN">
            <summary>
            A pattern brush defined by a device-independent bitmap (DIB) specification. If lbStyle is BS_DIBPATTERN, the lbHatch member
            contains a handle to a packed DIB. For more information, see discussion in lbHatch.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BrushStyle.BS_DIBPATTERN8X8">
            <summary>See BS_DIBPATTERN.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BrushStyle.BS_DIBPATTERNPT">
            <summary>
            A pattern brush defined by a device-independent bitmap (DIB) specification. If lbStyle is BS_DIBPATTERNPT, the lbHatch member
            contains a pointer to a packed DIB. For more information, see discussion in lbHatch.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BrushStyle.BS_HATCHED">
            <summary>Hatched brush.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BrushStyle.BS_HOLLOW">
            <summary>Hollow brush.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BrushStyle.BS_INDEXED">
            <summary>Not supported.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BrushStyle.BS_MONOPATTERN">
            <summary>Not supported.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BrushStyle.BS_NULL">
            <summary>Same as BS_HOLLOW.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BrushStyle.BS_PATTERN">
            <summary>Pattern brush defined by a memory bitmap.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BrushStyle.BS_PATTERN8X8">
            <summary>See BS_PATTERN.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BrushStyle.BS_SOLID">
            <summary>Solid brush.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.DCLayout">
            <summary>The DC layout used by the <see cref="M:Vanara.PInvoke.Gdi32.SetLayout(Vanara.PInvoke.HDC,Vanara.PInvoke.Gdi32.DCLayout)"/> function.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DCLayout.GDI_ERROR">
            <summary>Indicates that on return, the <see cref="M:Vanara.PInvoke.Gdi32.SetLayout(Vanara.PInvoke.HDC,Vanara.PInvoke.Gdi32.DCLayout)"/> has failed.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DCLayout.LAYOUT_RTL">
            <summary>Sets the default horizontal layout to be right to left.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DCLayout.LAYOUT_BTT">
            <summary>Sets the default horizontal layout to be bottom to top.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DCLayout.LAYOUT_VBH">
            <summary>Sets the default horizontal layout to be vertical before horizontal.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DCLayout.LAYOUT_BITMAPORIENTATIONPRESERVED">
            <summary>Disables any reflection during BitBlt and StretchBlt operations.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.DISPLAY_DEVICE_FLAGS">
            <summary>Device state flags.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAY_DEVICE_FLAGS.DISPLAY_DEVICE_ACTIVE">
            <summary>
            The DISPLAY_DEVICE_ACTIVE specifies whether a monitor is presented as being "on" by the respective GDI view. Windows Vista:
            EnumDisplayDevices will only enumerate monitors that can be presented as being "on."
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAY_DEVICE_FLAGS.DISPLAY_DEVICE_ATTACHED">
            <summary>The display device is attached.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAY_DEVICE_FLAGS.DISPLAY_DEVICE_ATTACHED_TO_DESKTOP">
            <summary>The display device attached to desktop</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAY_DEVICE_FLAGS.DISPLAY_DEVICE_MULTI_DRIVER">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAY_DEVICE_FLAGS.DISPLAY_DEVICE_PRIMARY_DEVICE">
            <summary>
            The primary desktop is on the device. For a system with a single display card, this is always set. For a system with multiple
            display cards, only one device can have this set.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAY_DEVICE_FLAGS.DISPLAY_DEVICE_MIRRORING_DRIVER">
            <summary>
            Represents a pseudo device used to mirror application drawing for remoting or other purposes. An invisible pseudo monitor is
            associated with this device. For example, NetMeeting uses it. Note that GetSystemMetrics (SM_MONITORS) only accounts for
            visible display monitors.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAY_DEVICE_FLAGS.DISPLAY_DEVICE_VGA_COMPATIBLE">
            <summary>The device is VGA compatible.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAY_DEVICE_FLAGS.DISPLAY_DEVICE_REMOVABLE">
            <summary>The device is removable; it cannot be the primary display.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAY_DEVICE_FLAGS.DISPLAY_DEVICE_ACC_DRIVER">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAY_DEVICE_FLAGS.DISPLAY_DEVICE_MODESPRUNED">
            <summary>The device has more display modes than its output devices support.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAY_DEVICE_FLAGS.DISPLAY_DEVICE_RDPUDD">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAY_DEVICE_FLAGS.DISPLAY_DEVICE_REMOTE">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAY_DEVICE_FLAGS.DISPLAY_DEVICE_DISCONNECT">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAY_DEVICE_FLAGS.DISPLAY_DEVICE_TS_COMPATIBLE">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAY_DEVICE_FLAGS.DISPLAY_DEVICE_UNSAFE_MODES_ON">
            <summary>Undocumented.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.HatchStyle">
            <summary>Hatch style used by <see cref="F:Vanara.PInvoke.Gdi32.LOGBRUSH.lbHatchStyle"/>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.HatchStyle.HS_BDIAGONAL">
            <summary>A 45-degree upward, left-to-right hatch</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.HatchStyle.HS_CROSS">
            <summary>Horizontal and vertical cross-hatch</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.HatchStyle.HS_DIAGCROSS">
            <summary>45-degree crosshatch</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.HatchStyle.HS_FDIAGONAL">
            <summary>A 45-degree downward, left-to-right hatch</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.HatchStyle.HS_HORIZONTAL">
            <summary>Horizontal hatch</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.HatchStyle.HS_VERTICAL">
            <summary>Vertical hatch</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.TCI">
            <summary>Flags specifying how to perform the character set translation.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.TCI.TCI_SRCCHARSET">
            <summary>Source contains the character set value in the low word, and 0 in the high word.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.TCI.TCI_SRCCODEPAGE">
            <summary>Source is a code page identifier in the low word and 0 in the high word.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.TCI.TCI_SRCFONTSIG">
            <summary>
            Source is the code page bitfield portion of a FONTSIGNATURE structure. On input this should have only one Windows code-page
            bit set, either for an ANSI code page value or for a common ANSI and OEM value (for OEM values, bits 32-63 must be clear). On
            output, this has only one bit set. If the TCI_SRCFONTSIG value is given, the lpSrc parameter must be the address of the
            code-page bitfield. If any other TCI_ value is given, the lpSrc parameter must be a value not an address.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.TCI.TCI_SRCLOCALE">
            <summary>
            Windows 2000: Source is the locale identifier (LCID) or language identifier of the keyboard layout. If it is a language
            identifier, the value is in the low word.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetCharWidth(Vanara.PInvoke.HDC,System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            <para>
            The <c>GetCharWidth</c> function retrieves the widths, in logical coordinates, of consecutive characters in a specified range
            from the current font.
            </para>
            <para>
            <c>Note</c> This function is provided only for compatibility with 16-bit versions of Windows. Applications should call the
            GetCharWidth32 function, which provides more accurate results.
            </para>
            </summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="iFirst">The first character in the group of consecutive characters.</param>
            <param name="iLast">The last character in the group of consecutive characters, which must not precede the specified first character.</param>
            <param name="lpBuffer">A pointer to a buffer that receives the character widths, in logical coordinates.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para><c>GetCharWidth</c> cannot be used on TrueType fonts. To retrieve character widths for TrueType fonts, use GetCharABCWidths.</para>
            <para>
            The range is inclusive; that is, the returned widths include the widths of the characters specified by the iFirstChar and
            iLastChar parameters.
            </para>
            <para>If a character does not exist in the current font, it is assigned the width of the default character.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetTextCharset(Vanara.PInvoke.HDC)">
            <summary>
            <para>Retrieves a character set identifier for the font that is currently selected into a specified device context.</para>
            <para><c>Note</c> A call to this function is equivalent to a call to GetTextCharsetInfo passing <c>NULL</c> for the data buffer.</para>
            </summary>
            <param name="hdc">
            Handle to a device context. The function obtains a character set identifier for the font that is selected into this device context.
            </param>
            <returns>
            <para>
            If successful, returns a value identifying the character set of the font that is currently selected into the specified device
            context. The following character set identifiers are defined:
            </para>
            <para>If the function fails, it returns DEFAULT_CHARSET.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetTextCharsetInfo(Vanara.PInvoke.HDC,Vanara.PInvoke.Gdi32.FONTSIGNATURE@,System.UInt32)">
            <summary>Retrieves information about the character set of the font that is currently selected into a specified device context.</summary>
            <param name="hdc">
            Handle to a device context. The function obtains information about the font that is selected into this device context.
            </param>
            <param name="lpSig">
            <para>Pointer to a FONTSIGNATURE data structure that receives font-signature information.</para>
            <para>
            If a TrueType font is currently selected into the device context, the FONTSIGNATURE structure receives information that
            identifies the code page and Unicode subranges for which the font provides glyphs.
            </para>
            <para>
            If a font other than TrueType is currently selected into the device context, the FONTSIGNATURE structure receives zeros. In this
            case, the application should use the TranslateCharsetInfo function to obtain generic font-signature information for the character set.
            </para>
            <para>
            The lpSig parameter specifies <c>NULL</c> if the application does not require the FONTSIGNATURE information. In this case, the
            application can also call the GetTextCharset function, which is equivalent to calling <c>GetTextCharsetInfo</c> with lpSig set to <c>NULL</c>.
            </para>
            </param>
            <param name="dwFlags">Reserved; must be set to 0.</param>
            <returns>
            <para>
            If successful, returns a value identifying the character set of the font currently selected into the specified device context.
            The following character set identifiers are defined:
            </para>
            <para>If the function fails, the return value is DEFAULT_CHARSET.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.TranslateCharsetInfo(System.UInt32@,Vanara.PInvoke.Gdi32.CHARSETINFO@,Vanara.PInvoke.Gdi32.TCI)">
            <summary>Translates character set information and sets all members of a destination structure to appropriate values.</summary>
            <param name="lpSrc">
            Pointer to the <c>fsCsb</c> member of a FONTSIGNATURE structure if dwFlags is set to TCI_SRCFONTSIG. Otherwise, this parameter is
            set to a DWORD value indicating the source.
            </param>
            <param name="lpCs">Pointer to a CHARSETINFO structure that receives the translated character set information.</param>
            <param name="dwFlags">
            <para>Flags specifying how to perform the translation. This parameter can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>TCI_SRCCHARSET</term>
            <term>Source contains the character set value in the low word, and 0 in the high word.</term>
            </item>
            <item>
            <term>TCI_SRCCODEPAGE</term>
            <term>Source is a code page identifier in the low word and 0 in the high word.</term>
            </item>
            <item>
            <term>TCI_SRCFONTSIG</term>
            <term>
            Source is the code page bitfield portion of a FONTSIGNATURE structure. On input this should have only one Windows code-page bit
            set, either for an ANSI code page value or for a common ANSI and OEM value (for OEM values, bits 32-63 must be clear). On output,
            this has only one bit set. If the TCI_SRCFONTSIG value is given, the lpSrc parameter must be the address of the code-page
            bitfield. If any other TCI_ value is given, the lpSrc parameter must be a value not an address.
            </term>
            </item>
            <item>
            <term>TCI_SRCLOCALE</term>
            <term>
            Windows 2000: Source is the locale identifier (LCID) or language identifier of the keyboard layout. If it is a language
            identifier, the value is in the low word.
            </term>
            </item>
            </list>
            </param>
            <returns>
            Returns a nonzero value if successful, or 0 otherwise. To get extended error information, the application can call GetLastError.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.TranslateCharsetInfo(System.IntPtr,Vanara.PInvoke.Gdi32.CHARSETINFO@,Vanara.PInvoke.Gdi32.TCI)">
            <summary>Translates character set information and sets all members of a destination structure to appropriate values.</summary>
            <param name="lpSrc">
            Pointer to the <c>fsCsb</c> member of a FONTSIGNATURE structure if dwFlags is set to TCI_SRCFONTSIG. Otherwise, this parameter is
            set to a DWORD value indicating the source.
            </param>
            <param name="lpCs">Pointer to a CHARSETINFO structure that receives the translated character set information.</param>
            <param name="dwFlags">
            <para>Flags specifying how to perform the translation. This parameter can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>TCI_SRCCHARSET</term>
            <term>Source contains the character set value in the low word, and 0 in the high word.</term>
            </item>
            <item>
            <term>TCI_SRCCODEPAGE</term>
            <term>Source is a code page identifier in the low word and 0 in the high word.</term>
            </item>
            <item>
            <term>TCI_SRCFONTSIG</term>
            <term>
            Source is the code page bitfield portion of a FONTSIGNATURE structure. On input this should have only one Windows code-page bit
            set, either for an ANSI code page value or for a common ANSI and OEM value (for OEM values, bits 32-63 must be clear). On output,
            this has only one bit set. If the TCI_SRCFONTSIG value is given, the lpSrc parameter must be the address of the code-page
            bitfield. If any other TCI_ value is given, the lpSrc parameter must be a value not an address.
            </term>
            </item>
            <item>
            <term>TCI_SRCLOCALE</term>
            <term>
            Windows 2000: Source is the locale identifier (LCID) or language identifier of the keyboard layout. If it is a language
            identifier, the value is in the low word.
            </term>
            </item>
            </list>
            </param>
            <returns>
            Returns a nonzero value if successful, or 0 otherwise. To get extended error information, the application can call GetLastError.
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.CHARSETINFO">
            <summary>Contains information about a character set.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.CHARSETINFO.ciCharset">
            <summary>Character set value.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.CHARSETINFO.ciACP">
            <summary>Windows ANSI code page identifier. For a list of identifiers, see Code Page Identifiers.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.CHARSETINFO.fs">
            <summary>
            A FONTSIGNATURE structure that identifies the Unicode subrange and the specific Windows ANSI character set/code page. Only
            one code page will be set when this structure is set by the function.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.DISPLAY_DEVICE">
            <summary>
            The <c>DISPLAY_DEVICE</c> structure receives information about the display device specified by the iDevNum parameter of the
            EnumDisplayDevices function.
            </summary>
            <remarks>
            The four string members are set based on the parameters passed to EnumDisplayDevices. If the lpDevice param is <c>NULL</c>, then
            DISPLAY_DEVICE is filled in with information about the display adapter(s). If it is a valid device name, then it is filled in
            with information about the monitor(s) for that device.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAY_DEVICE.cb">
            <summary>Size, in bytes, of the <c>DISPLAY_DEVICE</c> structure. This must be initialized prior to calling EnumDisplayDevices.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAY_DEVICE.DeviceName">
            <summary>An array of characters identifying the device name. This is either the adapter device or the monitor device.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAY_DEVICE.DeviceString">
            <summary>
            An array of characters containing the device context string. This is either a description of the display adapter or of the
            display monitor.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAY_DEVICE.StateFlags">
            <summary>
            <para>Device state flags. It can be any reasonable combination of the following.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>DISPLAY_DEVICE_ACTIVE</term>
            <term>
            DISPLAY_DEVICE_ACTIVE specifies whether a monitor is presented as being "on" by the respective GDI view. Windows Vista:
            EnumDisplayDevices will only enumerate monitors that can be presented as being "on."
            </term>
            </item>
            <item>
            <term>DISPLAY_DEVICE_MIRRORING_DRIVER</term>
            <term>
            Represents a pseudo device used to mirror application drawing for remoting or other purposes. An invisible pseudo monitor is
            associated with this device. For example, NetMeeting uses it. Note that GetSystemMetrics (SM_MONITORS) only accounts for
            visible display monitors.
            </term>
            </item>
            <item>
            <term>DISPLAY_DEVICE_MODESPRUNED</term>
            <term>The device has more display modes than its output devices support.</term>
            </item>
            <item>
            <term>DISPLAY_DEVICE_PRIMARY_DEVICE</term>
            <term>
            The primary desktop is on the device. For a system with a single display card, this is always set. For a system with multiple
            display cards, only one device can have this set.
            </term>
            </item>
            <item>
            <term>DISPLAY_DEVICE_REMOVABLE</term>
            <term>The device is removable; it cannot be the primary display.</term>
            </item>
            <item>
            <term>DISPLAY_DEVICE_VGA_COMPATIBLE</term>
            <term>The device is VGA compatible.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAY_DEVICE.DeviceID">
            <summary>Not used.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAY_DEVICE.DeviceKey">
            <summary>Reserved.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAY_DEVICE.Default">
            <summary>Gets an empty structure with the <see cref="F:Vanara.PInvoke.Gdi32.DISPLAY_DEVICE.cb"/> set to the size of the structure.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.EnumObjectsProc">
            <summary>
            The <c>EnumObjectsProc</c> function is an application-defined callback function used with the EnumObjects function. It is used to
            process the object data. The <c>GOBJENUMPROC</c> type defines a pointer to this callback function. <c>EnumObjectsProc</c> is a
            placeholder for the application-defined function name.
            </summary>
            <param name="Arg1"/>
            <param name="Arg2"/>
            <returns>
            To continue enumeration, the callback function must return a nonzero value. This value is user-defined.
            <para>To stop enumeration, the callback function must return zero.</para>
            </returns>
            <remarks>An application must register this function by passing its address to the EnumObjects function.</remarks>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.DeviceCap">
            <summary>Values used by the <see cref="M:Vanara.PInvoke.Gdi32.GetDeviceCaps(Vanara.PInvoke.HDC,Vanara.PInvoke.Gdi32.DeviceCap)"/> function.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DeviceCap.DRIVERVERSION">
            <summary>Device driver version</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DeviceCap.TECHNOLOGY">
            <summary>Device classification</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DeviceCap.HORZSIZE">
            <summary>Horizontal size in millimeters</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DeviceCap.VERTSIZE">
            <summary>Vertical size in millimeters</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DeviceCap.HORZRES">
            <summary>Horizontal width in pixels</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DeviceCap.VERTRES">
            <summary>Vertical height in pixels</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DeviceCap.BITSPIXEL">
            <summary>Number of bits per pixel</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DeviceCap.PLANES">
            <summary>Number of planes</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DeviceCap.NUMBRUSHES">
            <summary>Number of brushes the device has</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DeviceCap.NUMPENS">
            <summary>Number of pens the device has</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DeviceCap.NUMMARKERS">
            <summary>Number of markers the device has</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DeviceCap.NUMFONTS">
            <summary>Number of fonts the device has</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DeviceCap.NUMCOLORS">
            <summary>Number of colors the device supports</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DeviceCap.PDEVICESIZE">
            <summary>Size required for device descriptor</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DeviceCap.CURVECAPS">
            <summary>Curve capabilities</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DeviceCap.LINECAPS">
            <summary>Line capabilities</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DeviceCap.POLYGONALCAPS">
            <summary>Polygonal capabilities</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DeviceCap.TEXTCAPS">
            <summary>Text capabilities</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DeviceCap.CLIPCAPS">
            <summary>Clipping capabilities</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DeviceCap.RASTERCAPS">
            <summary>Bitblt capabilities</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DeviceCap.ASPECTX">
            <summary>Length of the X leg</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DeviceCap.ASPECTY">
            <summary>Length of the Y leg</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DeviceCap.ASPECTXY">
            <summary>Length of the hypotenuse</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DeviceCap.SHADEBLENDCAPS">
            <summary>Shading and Blending caps</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DeviceCap.LOGPIXELSX">
            <summary>Logical pixels inch in X</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DeviceCap.LOGPIXELSY">
            <summary>Logical pixels inch in Y</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DeviceCap.SIZEPALETTE">
            <summary>Number of entries in physical palette</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DeviceCap.NUMRESERVED">
            <summary>Number of reserved entries in palette</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DeviceCap.COLORRES">
            <summary>Actual color resolution</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DeviceCap.PHYSICALWIDTH">
            <summary>Physical Width in device units</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DeviceCap.PHYSICALHEIGHT">
            <summary>Physical Height in device units</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DeviceCap.PHYSICALOFFSETX">
            <summary>Physical Printable Area x margin</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DeviceCap.PHYSICALOFFSETY">
            <summary>Physical Printable Area y margin</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DeviceCap.SCALINGFACTORX">
            <summary>Scaling factor x</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DeviceCap.SCALINGFACTORY">
            <summary>Scaling factor y</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DeviceCap.VREFRESH">
            <summary>Current vertical refresh rate of the display device (for displays only) in Hz</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DeviceCap.DESKTOPVERTRES">
            <summary>Vertical height of entire desktop in pixels</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DeviceCap.DESKTOPHORZRES">
            <summary>Horizontal width of entire desktop in pixels</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DeviceCap.BLTALIGNMENT">
            <summary>Preferred blt alignment</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.ObjType">
            <summary>Object Definitions for EnumObjects</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ObjType.OBJ_PEN">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ObjType.OBJ_BRUSH">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ObjType.OBJ_DC">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ObjType.OBJ_METADC">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ObjType.OBJ_PAL">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ObjType.OBJ_FONT">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ObjType.OBJ_BITMAP">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ObjType.OBJ_REGION">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ObjType.OBJ_METAFILE">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ObjType.OBJ_MEMDC">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ObjType.OBJ_EXTPEN">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ObjType.OBJ_ENHMETADC">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ObjType.OBJ_ENHMETAFILE">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ObjType.OBJ_COLORSPACE">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.StockObjectType">
            <summary>Stock object type.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.StockObjectType.ANSI_FIXED_FONT">
            <summary>Windows fixed-pitch (monospace) system font.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.StockObjectType.ANSI_VAR_FONT">
            <summary>Windows variable-pitch (proportional space) system font.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.StockObjectType.BLACK_BRUSH">
            <summary>Black brush.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.StockObjectType.BLACK_PEN">
            <summary>Black pen.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.StockObjectType.DC_BRUSH">
            <summary>
            Solid color brush. The default color is white. The color can be changed by using the SetDCBrushColor function. For more
            information, see the Remarks section.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.StockObjectType.DC_PEN">
            <summary>
            Solid pen color. The default color is white. The color can be changed by using the SetDCPenColor function. For more
            information, see the Remarks section.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.StockObjectType.DEFAULT_GUI_FONT">
            <summary>
            Default font for user interface objects such as menus and dialog boxes. It is not recommended that you use DEFAULT_GUI_FONT
            or SYSTEM_FONT to obtain the font used by dialogs and windows; for more information, see the remarks section. The default
            font is Tahoma.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.StockObjectType.DEFAULT_PALETTE">
            <summary>Default palette. This palette consists of the static colors in the system palette.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.StockObjectType.DEVICE_DEFAULT_FONT">
            <summary>Device-dependent font.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.StockObjectType.DKGRAY_BRUSH">
            <summary>Dark gray brush.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.StockObjectType.GRAY_BRUSH">
            <summary>Gray brush.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.StockObjectType.HOLLOW_BRUSH">
            <summary>Hollow brush (equivalent to NULL_BRUSH).</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.StockObjectType.LTGRAY_BRUSH">
            <summary>Light gray brush.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.StockObjectType.NULL_BRUSH">
            <summary>Null brush (equivalent to HOLLOW_BRUSH).</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.StockObjectType.NULL_PEN">
            <summary>Null pen. The null pen draws nothing.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.StockObjectType.OEM_FIXED_FONT">
            <summary>Original equipment manufacturer (OEM) dependent fixed-pitch (monospace) font.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.StockObjectType.SYSTEM_FIXED_FONT">
            <summary>
            Fixed-pitch (monospace) system font. This stock object is provided only for compatibility with 16-bit Windows versions
            earlier than 3.0.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.StockObjectType.SYSTEM_FONT">
            <summary>
            System font. By default, the system uses the system font to draw menus, dialog box controls, and text. It is not recommended
            that you use DEFAULT_GUI_FONT or SYSTEM_FONT to obtain the font used by dialogs and windows; for more information, see the
            remarks section. The default system font is Tahoma.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.StockObjectType.WHITE_BRUSH">
            <summary>White brush.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.StockObjectType.WHITE_PEN">
            <summary>White pen.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.CancelDC(Vanara.PInvoke.HDC)">
            <summary>The <c>CancelDC</c> function cancels any pending operation on the specified device context (DC).</summary>
            <param name="hdc">A handle to the DC.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>
            The <c>CancelDC</c> function is used by multithreaded applications to cancel lengthy drawing operations. If thread A initiates a
            lengthy drawing operation, thread B may cancel that operation by calling this function.
            </para>
            <para>
            If an operation is canceled, the affected thread returns an error and the result of its drawing operation is undefined. The
            results are also undefined if no drawing operation was in progress when the function was called.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.CreateCompatibleDC(Vanara.PInvoke.HDC)">
            <summary>The CreateCompatibleDC function creates a memory device context (DC) compatible with the specified device.</summary>
            <param name="hDC">
            A handle to an existing DC. If this handle is NULL, the function creates a memory DC compatible with the application's current screen.
            </param>
            <returns>
            If the function succeeds, the return value is the handle to a memory DC.
            <para>If the function fails, the return value is NULL.</para>
            </returns>
            <remarks>
            A memory DC exists only in memory. When the memory DC is created, its display surface is exactly one monochrome pixel wide and
            one monochrome pixel high. Before an application can use a memory DC for drawing operations, it must select a bitmap of the
            correct width and height into the DC. To select a bitmap into a DC, use the CreateCompatibleBitmap function, specifying the
            height, width, and color organization required.
            <para>
            When a memory DC is created, all attributes are set to normal default values. The memory DC can be used as a normal DC. You can
            set the attributes; obtain the current settings of its attributes; and select pens, brushes, and regions.
            </para>
            <para>
            The CreateCompatibleDC function can only be used with devices that support raster operations. An application can determine
            whether a device supports these operations by calling the GetDeviceCaps function.
            </para>
            <para>
            When you no longer need the memory DC, call the DeleteDC function. We recommend that you call DeleteDC to delete the DC. However,
            you can also call DeleteObject with the HDC to delete the DC.
            </para>
            <para>
            If hdc is NULL, the thread that calls CreateCompatibleDC owns the HDC that is created. When this thread is destroyed, the HDC is
            no longer valid. Thus, if you create the HDC and pass it to another thread, then exit the first thread, the second thread will
            not be able to use the HDC.
            </para>
            <para>
            ICM: If the DC that is passed to this function is enabled for Image Color Management (ICM), the DC created by the function is
            ICM-enabled. The source and destination color spaces are specified in the DC.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.CreateDC(System.String,System.String,System.String,Vanara.PInvoke.DEVMODE@)">
            <summary>The <c>CreateDC</c> function creates a device context (DC) for a device using the specified name.</summary>
            <param name="pwszDriver">
            A pointer to a null-terminated character string that specifies either DISPLAY or the name of a specific display device. For
            printing, we recommend that you pass <c>NULL</c> to lpszDriver because GDI ignores lpszDriver for printer devices.
            </param>
            <param name="pwszDevice">
            <para>
            A pointer to a null-terminated character string that specifies the name of the specific output device being used, as shown by the
            Print Manager (for example, Epson FX-80). It is not the printer model name. The lpszDevice parameter must be used.
            </para>
            <para>To obtain valid names for displays, call EnumDisplayDevices.</para>
            <para>
            If lpszDriver is DISPLAY or the device name of a specific display device, then lpszDevice must be <c>NULL</c> or that same device
            name. If lpszDevice is <c>NULL</c>, then a DC is created for the primary display device.
            </para>
            <para>If there are multiple monitors on the system, calling will create a DC covering all the monitors.</para>
            </param>
            <param name="pszPort">
            This parameter is ignored and should be set to <c>NULL</c>. It is provided only for compatibility with 16-bit Windows.
            </param>
            <param name="pdm">
            <para>
            A pointer to a DEVMODE structure containing device-specific initialization data for the device driver. The DocumentProperties
            function retrieves this structure filled in for a specified device. The pdm parameter must be <c>NULL</c> if the device driver is
            to use the default initialization (if any) specified by the user.
            </para>
            <para>If lpszDriver is DISPLAY, pdm must be <c>NULL</c>; GDI then uses the display device's current DEVMODE.</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is the handle to a DC for the specified device.</para>
            <para>If the function fails, the return value is <c>NULL</c>.</para>
            </returns>
            <remarks>
            <para>Note that the handle to the DC can only be used by a single thread at any one time.</para>
            <para>For parameters lpszDriver and lpszDevice, call EnumDisplayDevices to obtain valid names for displays.</para>
            <para>When you no longer need the DC, call the DeleteDC function.</para>
            <para>
            If lpszDriver or lpszDevice is DISPLAY, the thread that calls <c>CreateDC</c> owns the <c>HDC</c> that is created. When this
            thread is destroyed, the <c>HDC</c> is no longer valid. Thus, if you create the <c>HDC</c> and pass it to another thread, then
            exit the first thread, the second thread will not be able to use the <c>HDC</c>.
            </para>
            <para>
            When you call <c>CreateDC</c> to create the <c>HDC</c> for a display device, you must pass to pdm either <c>NULL</c> or a pointer
            to DEVMODE that matches the current <c>DEVMODE</c> of the display device that lpszDevice specifies. We recommend to pass
            <c>NULL</c> and not to try to exactly match the <c>DEVMODE</c> for the current display device.
            </para>
            <para>
            When you call <c>CreateDC</c> to create the <c>HDC</c> for a printer device, the printer driver validates the DEVMODE. If the
            printer driver determines that the <c>DEVMODE</c> is invalid (that is, printer driver can’t convert or consume the DEVMODE), the
            printer driver provides a default <c>DEVMODE</c> to create the HDC for the printer device.
            </para>
            <para>
            <c>ICM:</c> To enable ICM, set the <c>dmICMMethod</c> member of the DEVMODE structure (pointed to by the pInitData parameter) to
            the appropriate value.
            </para>
            <para>Examples</para>
            <para>For an example, see Capturing an Image.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.CreateDC(System.String,System.String,System.String,System.IntPtr)">
            <summary>The <c>CreateDC</c> function creates a device context (DC) for a device using the specified name.</summary>
            <param name="pwszDriver">
            A pointer to a null-terminated character string that specifies either DISPLAY or the name of a specific display device. For
            printing, we recommend that you pass <c>NULL</c> to lpszDriver because GDI ignores lpszDriver for printer devices.
            </param>
            <param name="pwszDevice">
            <para>
            A pointer to a null-terminated character string that specifies the name of the specific output device being used, as shown by the
            Print Manager (for example, Epson FX-80). It is not the printer model name. The lpszDevice parameter must be used.
            </para>
            <para>To obtain valid names for displays, call EnumDisplayDevices.</para>
            <para>
            If lpszDriver is DISPLAY or the device name of a specific display device, then lpszDevice must be <c>NULL</c> or that same device
            name. If lpszDevice is <c>NULL</c>, then a DC is created for the primary display device.
            </para>
            <para>If there are multiple monitors on the system, calling will create a DC covering all the monitors.</para>
            </param>
            <param name="pszPort">
            This parameter is ignored and should be set to <c>NULL</c>. It is provided only for compatibility with 16-bit Windows.
            </param>
            <param name="pdm">
            <para>
            A pointer to a DEVMODE structure containing device-specific initialization data for the device driver. The DocumentProperties
            function retrieves this structure filled in for a specified device. The pdm parameter must be <c>NULL</c> if the device driver is
            to use the default initialization (if any) specified by the user.
            </para>
            <para>If lpszDriver is DISPLAY, pdm must be <c>NULL</c>; GDI then uses the display device's current DEVMODE.</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is the handle to a DC for the specified device.</para>
            <para>If the function fails, the return value is <c>NULL</c>.</para>
            </returns>
            <remarks>
            <para>Note that the handle to the DC can only be used by a single thread at any one time.</para>
            <para>For parameters lpszDriver and lpszDevice, call EnumDisplayDevices to obtain valid names for displays.</para>
            <para>When you no longer need the DC, call the DeleteDC function.</para>
            <para>
            If lpszDriver or lpszDevice is DISPLAY, the thread that calls <c>CreateDC</c> owns the <c>HDC</c> that is created. When this
            thread is destroyed, the <c>HDC</c> is no longer valid. Thus, if you create the <c>HDC</c> and pass it to another thread, then
            exit the first thread, the second thread will not be able to use the <c>HDC</c>.
            </para>
            <para>
            When you call <c>CreateDC</c> to create the <c>HDC</c> for a display device, you must pass to pdm either <c>NULL</c> or a pointer
            to DEVMODE that matches the current <c>DEVMODE</c> of the display device that lpszDevice specifies. We recommend to pass
            <c>NULL</c> and not to try to exactly match the <c>DEVMODE</c> for the current display device.
            </para>
            <para>
            When you call <c>CreateDC</c> to create the <c>HDC</c> for a printer device, the printer driver validates the DEVMODE. If the
            printer driver determines that the <c>DEVMODE</c> is invalid (that is, printer driver can’t convert or consume the DEVMODE), the
            printer driver provides a default <c>DEVMODE</c> to create the HDC for the printer device.
            </para>
            <para>
            <c>ICM:</c> To enable ICM, set the <c>dmICMMethod</c> member of the DEVMODE structure (pointed to by the pInitData parameter) to
            the appropriate value.
            </para>
            <para>Examples</para>
            <para>For an example, see Capturing an Image.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.CreateIC(System.String,System.String,System.String,Vanara.PInvoke.DEVMODE@)">
            <summary>
            The <c>CreateIC</c> function creates an information context for the specified device. The information context provides a fast way
            to get information about the device without creating a device context (DC). However, GDI drawing functions cannot accept a handle
            to an information context.
            </summary>
            <param name="pszDriver">
            A pointer to a null-terminated character string that specifies the name of the device driver (for example, Epson).
            </param>
            <param name="pszDevice">
            A pointer to a null-terminated character string that specifies the name of the specific output device being used, as shown by the
            Print Manager (for example, Epson FX-80). It is not the printer model name. The lpszDevice parameter must be used.
            </param>
            <param name="pszPort">
            This parameter is ignored and should be set to <c>NULL</c>. It is provided only for compatibility with 16-bit Windows.
            </param>
            <param name="pdm">
            A pointer to a DEVMODE structure containing device-specific initialization data for the device driver. The DocumentProperties
            function retrieves this structure filled in for a specified device. The lpdvmInit parameter must be <c>NULL</c> if the device
            driver is to use the default initialization (if any) specified by the user.
            </param>
            <returns>
            <para>If the function succeeds, the return value is the handle to an information context.</para>
            <para>If the function fails, the return value is <c>NULL</c>.</para>
            </returns>
            <remarks>When you no longer need the information DC, call the DeleteDC function.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.CreateIC(System.String,System.String,System.String,System.IntPtr)">
            <summary>
            The <c>CreateIC</c> function creates an information context for the specified device. The information context provides a fast way
            to get information about the device without creating a device context (DC). However, GDI drawing functions cannot accept a handle
            to an information context.
            </summary>
            <param name="pszDriver">
            A pointer to a null-terminated character string that specifies the name of the device driver (for example, Epson).
            </param>
            <param name="pszDevice">
            A pointer to a null-terminated character string that specifies the name of the specific output device being used, as shown by the
            Print Manager (for example, Epson FX-80). It is not the printer model name. The lpszDevice parameter must be used.
            </param>
            <param name="pszPort">
            This parameter is ignored and should be set to <c>NULL</c>. It is provided only for compatibility with 16-bit Windows.
            </param>
            <param name="pdm">
            A pointer to a DEVMODE structure containing device-specific initialization data for the device driver. The DocumentProperties
            function retrieves this structure filled in for a specified device. The lpdvmInit parameter must be <c>NULL</c> if the device
            driver is to use the default initialization (if any) specified by the user.
            </param>
            <returns>
            <para>If the function succeeds, the return value is the handle to an information context.</para>
            <para>If the function fails, the return value is <c>NULL</c>.</para>
            </returns>
            <remarks>When you no longer need the information DC, call the DeleteDC function.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.DeleteDC(Vanara.PInvoke.HDC)">
            <summary>The DeleteDC function deletes the specified device context (DC).</summary>
            <param name="hdc">A handle to the device context.</param>
            <returns>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero.</returns>
            <remarks>
            An application must not delete a DC whose handle was obtained by calling the GetDC function. Instead, it must call the ReleaseDC
            function to free the DC.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.DeleteObject(Vanara.PInvoke.HGDIOBJ)">
            <summary>
            The DeleteObject function deletes a logical pen, brush, font, bitmap, region, or palette, freeing all system resources associated
            with the object. After the object is deleted, the specified handle is no longer valid.
            </summary>
            <param name="hObject">A handle to a logical pen, brush, font, bitmap, region, or palette.</param>
            <returns>
            If the function succeeds, the return value is nonzero. If the specified handle is not valid or is currently selected into a DC,
            the return value is zero.
            </returns>
            <remarks>
            Do not delete a drawing object (pen or brush) while it is still selected into a DC.
            <para>When a pattern brush is deleted, the bitmap associated with the brush is not deleted. The bitmap must be deleted independently.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.DrawEscape(Vanara.PInvoke.HDC,System.Int32,System.Int32,System.String)">
            <summary>
            The <c>DrawEscape</c> function provides drawing capabilities of the specified video display that are not directly available
            through the graphics device interface (GDI).
            </summary>
            <param name="hdc">A handle to the DC for the specified video display.</param>
            <param name="iEscape">The escape function to be performed.</param>
            <param name="cjIn">The number of bytes of data pointed to by the lpszInData parameter.</param>
            <param name="lpIn">A pointer to the input structure required for the specified escape.</param>
            <returns>
            <para>
            If the function is successful, the return value is greater than zero except for the QUERYESCSUPPORT draw escape, which checks for
            implementation only.
            </para>
            <para>If the escape is not implemented, the return value is zero.</para>
            <para>If an error occurred, the return value is less than zero.</para>
            </returns>
            <remarks>
            When an application calls the <c>DrawEscape</c> function, the data identified by cbInput and lpszInData is passed directly to the
            specified display driver.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.EnumObjects(Vanara.PInvoke.HDC,Vanara.PInvoke.Gdi32.ObjType,Vanara.PInvoke.Gdi32.EnumObjectsProc,System.IntPtr)">
            <summary>
            The <c>EnumObjects</c> function enumerates the pens or brushes available for the specified device context (DC). This function
            calls the application-defined callback function once for each available object, supplying data describing that object.
            <c>EnumObjects</c> continues calling the callback function until the callback function returns zero or until all of the objects
            have been enumerated.
            </summary>
            <param name="hdc">A handle to the DC.</param>
            <param name="nType">The object type. This parameter can be OBJ_BRUSH or OBJ_PEN.</param>
            <param name="lpFunc">
            A pointer to the application-defined callback function. For more information about the callback function, see the EnumObjectsProc function.
            </param>
            <param name="lParam">
            A pointer to the application-defined data. The data is passed to the callback function along with the object information.
            </param>
            <returns>
            <para>If the function succeeds, the return value is the last value returned by the callback function. Its meaning is user-defined.</para>
            <para>
            If the objects cannot be enumerated (for example, there are too many objects), the function returns zero without calling the
            callback function.
            </para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.EnumObjects``1(Vanara.PInvoke.HDC)">
            <summary>
            The <c>EnumObjects</c> function enumerates the pens or brushes available for the specified device context (DC). This function
            calls the application-defined callback function once for each available object, supplying data describing that object.
            <c>EnumObjects</c> continues calling the callback function until the callback function returns zero or until all of the objects
            have been enumerated.
            </summary>
            <typeparam name="T">The type of the handle to enumerate. Currently, only HPEN and HBRUSH are supported.</typeparam>
            <param name="hdc">A handle to the DC.</param>
            <returns>An enumeration of the object handles for the <paramref name="hdc"/>.</returns>
            <exception cref="T:System.ArgumentException">The supplied type cannot be enumerated by this function.</exception>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetCurrentObject(Vanara.PInvoke.HDC,Vanara.PInvoke.Gdi32.ObjType)">
            <summary>
            The <c>GetCurrentObject</c> function retrieves a handle to an object of the specified type that has been selected into the
            specified device context (DC).
            </summary>
            <param name="hdc">A handle to the DC.</param>
            <param name="type">
            <para>The object type to be queried. This parameter can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>OBJ_BITMAP</term>
            <term>Returns the current selected bitmap.</term>
            </item>
            <item>
            <term>OBJ_BRUSH</term>
            <term>Returns the current selected brush.</term>
            </item>
            <item>
            <term>OBJ_COLORSPACE</term>
            <term>Returns the current color space.</term>
            </item>
            <item>
            <term>OBJ_FONT</term>
            <term>Returns the current selected font.</term>
            </item>
            <item>
            <term>OBJ_PAL</term>
            <term>Returns the current selected palette.</term>
            </item>
            <item>
            <term>OBJ_PEN</term>
            <term>Returns the current selected pen.</term>
            </item>
            </list>
            </param>
            <returns>
            <para>If the function succeeds, the return value is a handle to the specified object.</para>
            <para>If the function fails, the return value is <c>NULL</c>.</para>
            </returns>
            <remarks>
            <para>
            An application can use the <c>GetCurrentObject</c> and GetObject functions to retrieve descriptions of the graphic objects
            currently selected into the specified DC.
            </para>
            <para>Examples</para>
            <para>For an example, see Retrieving Graphic-Object Attributes and Selecting New Graphic Objects.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetDCBrushColor(Vanara.PInvoke.HDC)">
            <summary>The <c>GetDCBrushColor</c> function retrieves the current brush color for the specified device context (DC).</summary>
            <param name="hdc">A handle to the DC whose brush color is to be returned.</param>
            <returns>
            <para>If the function succeeds, the return value is the COLORREF value for the current DC brush color.</para>
            <para>If the function fails, the return value is CLR_INVALID.</para>
            </returns>
            <remarks>
            <para>For information on setting the brush color, see SetDCBrushColor.</para>
            <para><c>ICM:</c> Color management is performed if ICM is enabled.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetDCOrgEx(Vanara.PInvoke.HDC,Vanara.PInvoke.POINT@)">
            <summary>
            The <c>GetDCOrgEx</c> function retrieves the final translation origin for a specified device context (DC). The final translation
            origin specifies an offset that the system uses to translate device coordinates into client coordinates (for coordinates in an
            application's window).
            </summary>
            <param name="hdc">A handle to the DC whose final translation origin is to be retrieved.</param>
            <param name="lppt">A pointer to a POINT structure that receives the final translation origin, in device coordinates.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>The final translation origin is relative to the physical origin of the screen.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetDCPenColor(Vanara.PInvoke.HDC)">
            <summary>The <c>GetDCPenColor</c> function retrieves the current pen color for the specified device context (DC).</summary>
            <param name="hdc">A handle to the DC whose brush color is to be returned.</param>
            <returns>
            <para>If the function succeeds, the return value is a COLORREF value for the current DC pen color.</para>
            <para>If the function fails, the return value is CLR_INVALID.</para>
            </returns>
            <remarks>
            <para>For information on setting the pen color, see SetDCPenColor.</para>
            <para><c>ICM:</c> Color management is performed if ICM is enabled.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetDeviceCaps(Vanara.PInvoke.HDC,Vanara.PInvoke.Gdi32.DeviceCap)">
            <summary>The GetDeviceCaps function retrieves device-specific information for the specified device.</summary>
            <param name="hdc">A handle to the DC.</param>
            <param name="index">The item to be returned.</param>
            <returns>
            The return value specifies the value of the desired item. When nIndex is BITSPIXEL and the device has 15bpp or 16bpp, the return
            value is 16.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetLayout(Vanara.PInvoke.HDC)">
            <summary>The <c>GetLayout</c> function returns the layout of a device context (DC).</summary>
            <param name="hdc">A handle to the device context.</param>
            <returns>
            <para>If the function succeeds, it returns the layout flags for the current device context.</para>
            <para>If the function fails, it returns GDI_ERROR. For extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            The layout specifies the order in which text and graphics are revealed in a window or device context. The default is left to
            right. The <c>GetLayout</c> function tells you if the default has been changed through a call to SetLayout. For more information,
            see "Window Layout and Mirroring" in Window Features.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetObject(Vanara.PInvoke.HGDIOBJ,System.Int32,System.IntPtr)">
            <summary>The GetObject function retrieves information for the specified graphics object.</summary>
            <param name="hgdiobj">
            A handle to the graphics object of interest. This can be a handle to one of the following: a logical bitmap, a brush, a font, a
            palette, a pen, or a device independent bitmap created by calling the CreateDIBSection function.
            </param>
            <param name="cbBuffer">The number of bytes of information to be written to the buffer.</param>
            <param name="lpvObject">
            A pointer to a buffer that receives the information about the specified graphics object. If the <paramref name="lpvObject"/>
            parameter is NULL, the function return value is the number of bytes required to store the information it writes to the buffer for
            the specified graphics object.
            </param>
            <returns>
            If the function succeeds, and <paramref name="lpvObject"/> is a valid pointer, the return value is the number of bytes stored
            into the buffer.
            <para>
            If the function succeeds, and <paramref name="lpvObject"/> is NULL, the return value is the number of bytes required to hold the
            information the function would store into the buffer.
            </para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            The buffer pointed to by the <paramref name="lpvObject"/> parameter must be sufficiently large to receive the information about
            the graphics object. Depending on the graphics object, the function uses a BITMAP, DIBSECTION, EXTLOGPEN, LOGBRUSH, LOGFONT, or
            LOGPEN structure, or a count of table entries (for a logical palette).
            <para>
            If <paramref name="hgdiobj"/> is a handle to a bitmap created by calling CreateDIBSection, and the specified buffer is large
            enough, the GetObject function returns a DIBSECTION structure. In addition, the bmBits member of the BITMAP structure contained
            within the DIBSECTION will contain a pointer to the bitmap's bit values.
            </para>
            <para>
            If <paramref name="hgdiobj"/> is a handle to a bitmap created by any other means, GetObject returns only the width, height, and
            color format information of the bitmap. You can obtain the bitmap's bit values by calling the GetDIBits or GetBitmapBits function.
            </para>
            <para>
            If <paramref name="hgdiobj"/> is a handle to a logical palette, GetObject retrieves a 2-byte integer that specifies the number of
            entries in the palette. The function does not retrieve the LOGPALETTE structure defining the palette. To retrieve information
            about palette entries, an application can call the GetPaletteEntries function.
            </para>
            <para>
            If <paramref name="hgdiobj"/> is a handle to a font, the LOGFONT that is returned is the LOGFONT used to create the font. If
            Windows had to make some interpolation of the font because the precise LOGFONT could not be represented, the interpolation will
            not be reflected in the LOGFONT. For example, if you ask for a vertical version of a font that doesn't support vertical painting,
            the LOGFONT indicates the font is vertical, but Windows will paint it horizontally.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetObject``1(Vanara.PInvoke.IGraphicsObjectHandle)">
            <summary>The GetObject function retrieves information for the specified graphics object.</summary>
            <typeparam name="T">The output structure type.</typeparam>
            <param name="hgdiobj">
            A handle to the graphics object of interest. This can be a handle to one of the following: a logical bitmap, a brush, a font, a
            palette, a pen, or a device independent bitmap created by calling the CreateDIBSection function.
            </param>
            <returns>The output structure holding the information for the graphics object.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetObject(Vanara.PInvoke.IGraphicsObjectHandle,System.Int32)">
            <summary>The GetObject function retrieves information for the specified graphics object.</summary>
            <param name="hgdiobj">
            A handle to the graphics object of interest. This can be a handle to one of the following: a logical bitmap, a brush, a font, a
            palette, a pen, or a device independent bitmap created by calling the CreateDIBSection function.
            </param>
            <param name="bufferSize">Size of the buffer. If this value is 0, then the size is requested.</param>
            <returns>Allocated memory holding the information for the graphics object.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetObjectType(Vanara.PInvoke.HGDIOBJ)">
            <summary>The <c>GetObjectType</c> retrieves the type of the specified object.</summary>
            <param name="h">A handle to the graphics object.</param>
            <returns>
            <para>If the function succeeds, the return value identifies the object. This value can be one of the following.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>OBJ_BITMAP</term>
            <term>Bitmap</term>
            </item>
            <item>
            <term>OBJ_BRUSH</term>
            <term>Brush</term>
            </item>
            <item>
            <term>OBJ_COLORSPACE</term>
            <term>Color space</term>
            </item>
            <item>
            <term>OBJ_DC</term>
            <term>Device context</term>
            </item>
            <item>
            <term>OBJ_ENHMETADC</term>
            <term>Enhanced metafile DC</term>
            </item>
            <item>
            <term>OBJ_ENHMETAFILE</term>
            <term>Enhanced metafile</term>
            </item>
            <item>
            <term>OBJ_EXTPEN</term>
            <term>Extended pen</term>
            </item>
            <item>
            <term>OBJ_FONT</term>
            <term>Font</term>
            </item>
            <item>
            <term>OBJ_MEMDC</term>
            <term>Memory DC</term>
            </item>
            <item>
            <term>OBJ_METAFILE</term>
            <term>Metafile</term>
            </item>
            <item>
            <term>OBJ_METADC</term>
            <term>Metafile DC</term>
            </item>
            <item>
            <term>OBJ_PAL</term>
            <term>Palette</term>
            </item>
            <item>
            <term>OBJ_PEN</term>
            <term>Pen</term>
            </item>
            <item>
            <term>OBJ_REGION</term>
            <term>Region</term>
            </item>
            </list>
            <para>If the function fails, the return value is zero.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetStockObject(Vanara.PInvoke.Gdi32.StockObjectType)">
            <summary>The <c>GetStockObject</c> function retrieves a handle to one of the stock pens, brushes, fonts, or palettes.</summary>
            <param name="i">
            <para>The type of stock object. This parameter can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>BLACK_BRUSH</term>
            <term>Black brush.</term>
            </item>
            <item>
            <term>DKGRAY_BRUSH</term>
            <term>Dark gray brush.</term>
            </item>
            <item>
            <term>DC_BRUSH</term>
            <term>
            Solid color brush. The default color is white. The color can be changed by using the SetDCBrushColor function. For more
            information, see the Remarks section.
            </term>
            </item>
            <item>
            <term>GRAY_BRUSH</term>
            <term>Gray brush.</term>
            </item>
            <item>
            <term>HOLLOW_BRUSH</term>
            <term>Hollow brush (equivalent to NULL_BRUSH).</term>
            </item>
            <item>
            <term>LTGRAY_BRUSH</term>
            <term>Light gray brush.</term>
            </item>
            <item>
            <term>NULL_BRUSH</term>
            <term>Null brush (equivalent to HOLLOW_BRUSH).</term>
            </item>
            <item>
            <term>WHITE_BRUSH</term>
            <term>White brush.</term>
            </item>
            <item>
            <term>BLACK_PEN</term>
            <term>Black pen.</term>
            </item>
            <item>
            <term>DC_PEN</term>
            <term>
            Solid pen color. The default color is white. The color can be changed by using the SetDCPenColor function. For more information,
            see the Remarks section.
            </term>
            </item>
            <item>
            <term>NULL_PEN</term>
            <term>Null pen. The null pen draws nothing.</term>
            </item>
            <item>
            <term>WHITE_PEN</term>
            <term>White pen.</term>
            </item>
            <item>
            <term>ANSI_FIXED_FONT</term>
            <term>Windows fixed-pitch (monospace) system font.</term>
            </item>
            <item>
            <term>ANSI_VAR_FONT</term>
            <term>Windows variable-pitch (proportional space) system font.</term>
            </item>
            <item>
            <term>DEVICE_DEFAULT_FONT</term>
            <term>Device-dependent font.</term>
            </item>
            <item>
            <term>DEFAULT_GUI_FONT</term>
            <term>
            Default font for user interface objects such as menus and dialog boxes. It is not recommended that you use DEFAULT_GUI_FONT or
            SYSTEM_FONT to obtain the font used by dialogs and windows; for more information, see the remarks section. The default font is Tahoma.
            </term>
            </item>
            <item>
            <term>OEM_FIXED_FONT</term>
            <term>Original equipment manufacturer (OEM) dependent fixed-pitch (monospace) font.</term>
            </item>
            <item>
            <term>SYSTEM_FONT</term>
            <term>
            System font. By default, the system uses the system font to draw menus, dialog box controls, and text. It is not recommended that
            you use DEFAULT_GUI_FONT or SYSTEM_FONT to obtain the font used by dialogs and windows; for more information, see the remarks
            section. The default system font is Tahoma.
            </term>
            </item>
            <item>
            <term>SYSTEM_FIXED_FONT</term>
            <term>
            Fixed-pitch (monospace) system font. This stock object is provided only for compatibility with 16-bit Windows versions earlier
            than 3.0.
            </term>
            </item>
            <item>
            <term>DEFAULT_PALETTE</term>
            <term>Default palette. This palette consists of the static colors in the system palette.</term>
            </item>
            </list>
            </param>
            <returns>
            <para>If the function succeeds, the return value is a handle to the requested logical object.</para>
            <para>If the function fails, the return value is <c>NULL</c>.</para>
            </returns>
            <remarks>
            <para>
            It is not recommended that you employ this method to obtain the current font used by dialogs and windows. Instead, use the
            SystemParametersInfo function with the SPI_GETNONCLIENTMETRICS parameter to retrieve the current font. SystemParametersInfo will
            take into account the current theme and provides font information for captions, menus, and message dialogs.
            </para>
            <para>
            Use the DKGRAY_BRUSH, GRAY_BRUSH, and LTGRAY_BRUSH stock objects only in windows with the CS_HREDRAW and CS_VREDRAW styles. Using
            a gray stock brush in any other style of window can lead to misalignment of brush patterns after a window is moved or sized. The
            origins of stock brushes cannot be adjusted.
            </para>
            <para>The HOLLOW_BRUSH and NULL_BRUSH stock objects are equivalent.</para>
            <para>It is not necessary (but it is not harmful) to delete stock objects by calling DeleteObject.</para>
            <para>
            Both DC_BRUSH and DC_PEN can be used interchangeably with other stock objects like BLACK_BRUSH and BLACK_PEN. For information on
            retrieving the current pen or brush color, see GetDCBrushColor and GetDCPenColor. See Setting the Pen or Brush Color for an
            example of setting colors. The <c>GetStockObject</c> function with an argument of DC_BRUSH or DC_PEN can be used interchangeably
            with the SetDCPenColor and SetDCBrushColor functions.
            </para>
            <para>Examples</para>
            <para>For an example, see Setting the Pen or Brush Color.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.ResetDC(Vanara.PInvoke.HDC,Vanara.PInvoke.DEVMODE@)">
            <summary>The <c>ResetDC</c> function updates the specified printer or plotter device context (DC) using the specified information.</summary>
            <param name="hdc">A handle to the DC to update.</param>
            <param name="lpdm">A pointer to a DEVMODE structure containing information about the new DC.</param>
            <returns>
            <para>If the function succeeds, the return value is a handle to the original DC.</para>
            <para>If the function fails, the return value is <c>NULL</c>.</para>
            </returns>
            <remarks>
            <para>
            An application will typically use the <c>ResetDC</c> function when a window receives a WM_DEVMODECHANGE message. <c>ResetDC</c>
            can also be used to change the paper orientation or paper bins while printing a document.
            </para>
            <para>
            The <c>ResetDC</c> function cannot be used to change the driver name, device name, or the output port. When the user changes the
            port connection or device name, the application must delete the original DC and create a new DC with the new information.
            </para>
            <para>
            An application can pass an information DC to the <c>ResetDC</c> function. In that situation, <c>ResetDC</c> will always return a
            printer DC.
            </para>
            <para>
            <c>ICM:</c> The color profile of the DC specified by the hdc parameter will be reset based on the information contained in the
            <c>lpInitData</c> member of the DEVMODE structure.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.RestoreDC(Vanara.PInvoke.HDC,System.Int32)">
            <summary>
            The <c>RestoreDC</c> function restores a device context (DC) to the specified state. The DC is restored by popping state
            information off a stack created by earlier calls to the SaveDC function.
            </summary>
            <param name="hdc">A handle to the DC.</param>
            <param name="nSavedDC">
            The saved state to be restored. If this parameter is positive, nSavedDC represents a specific instance of the state to be
            restored. If this parameter is negative, nSavedDC represents an instance relative to the current state. For example, -1 restores
            the most recently saved state.
            </param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            Each DC maintains a stack of saved states. The SaveDC function pushes the current state of the DC onto its stack of saved states.
            That state can be restored only to the same DC from which it was created. After a state is restored, the saved state is destroyed
            and cannot be reused. Furthermore, any states saved after the restored state was created are also destroyed and cannot be used.
            In other words, the <c>RestoreDC</c> function pops the restored state (and any subsequent states) from the state information stack.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SaveDC(Vanara.PInvoke.HDC)">
            <summary>
            The <c>SaveDC</c> function saves the current state of the specified device context (DC) by copying data describing selected
            objects and graphic modes (such as the bitmap, brush, palette, font, pen, region, drawing mode, and mapping mode) to a context stack.
            </summary>
            <param name="hdc">A handle to the DC whose state is to be saved.</param>
            <returns>
            <para>If the function succeeds, the return value identifies the saved state.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>The <c>SaveDC</c> function can be used any number of times to save any number of instances of the DC state.</para>
            <para>A saved state can be restored by using the RestoreDC function.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SelectObject(Vanara.PInvoke.HDC,Vanara.PInvoke.HGDIOBJ)">
            <summary>
            The SelectObject function selects an object into the specified device context (DC). The new object replaces the previous object
            of the same type.
            </summary>
            <param name="hDC">A handle to the DC.</param>
            <param name="hObject">
            A handle to the object to be selected. The specified object must have been created by using one of the following functions.
            </param>
            <returns>
            If the selected object is not a region and the function succeeds, the return value is a handle to the object being replaced. If
            the selected object is a region and the function succeeds, the return value is one of the following values.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SetDCPenColor(Vanara.PInvoke.HDC,Vanara.PInvoke.COLORREF)">
            <summary>
            <c>SetDCPenColor</c> function sets the current device context (DC) pen color to the specified color value. If the device cannot
            represent the specified color value, the color is set to the nearest physical color.
            </summary>
            <param name="hdc">A handle to the DC.</param>
            <param name="color">The new pen color.</param>
            <returns>
            If the function succeeds, the return value specifies the previous DC pen color as a COLORREF value. If the function fails, the
            return value is CLR_INVALID.
            </returns>
            <remarks>
            <para>
            The function returns the previous DC_PEN color, even if the stock pen DC_PEN is not selected in the DC; however, this will not be
            used in drawing operations until the stock DC_PEN is selected in the DC.
            </para>
            <para>
            The GetStockObject function with an argument of DC_BRUSH or DC_PEN can be used interchangeably with the <c>SetDCPenColor</c> and
            SetDCBrushColor functions.
            </para>
            <para><c>ICM:</c> Color management is performed if ICM is enabled.</para>
            <para>Examples</para>
            <para>For an example of setting colors, see Setting the Pen or Brush Color.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SetLayout(Vanara.PInvoke.HDC,Vanara.PInvoke.Gdi32.DCLayout)">
            <summary>The SetLayout function changes the layout of a device context (DC).</summary>
            <param name="hdc">A handle to the DC.</param>
            <param name="dwLayout">The DC layout.</param>
            <returns>If the function succeeds, it returns the previous layout of the DC. If the function fails, it returns GDI_ERROR.</returns>
            <remarks>
            The layout specifies the order in which text and graphics are revealed in a window or a device context. The default is left to
            right. The SetLayout function changes this to be right to left, which is the standard in Arabic and Hebrew cultures.
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_COLOR_ENCODING">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_COLOR_ENCODING.DISPLAYCONFIG_COLOR_ENCODING_RGB">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_COLOR_ENCODING.DISPLAYCONFIG_COLOR_ENCODING_YCBCR444">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_COLOR_ENCODING.DISPLAYCONFIG_COLOR_ENCODING_YCBCR422">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_COLOR_ENCODING.DISPLAYCONFIG_COLOR_ENCODING_YCBCR420">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_COLOR_ENCODING.DISPLAYCONFIG_COLOR_ENCODING_INTENSITY">
            <summary>Undocumented.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_DEVICE_INFO_TYPE">
            <summary>
            <para>
            The DISPLAYCONFIG_DEVICE_INFO_TYPE enumeration specifies the type of display device info to configure or obtain through the
            DisplayConfigSetDeviceInfo or DisplayConfigGetDeviceInfo function.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_DEVICE_INFO_TYPE.DISPLAYCONFIG_DEVICE_INFO_GET_SOURCE_NAME">
            <summary>
            Specifies the source name of the display device. If the DisplayConfigGetDeviceInfo function is successful,
            DisplayConfigGetDeviceInfo returns the source name in the DISPLAYCONFIG_SOURCE_DEVICE_NAME structure.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_DEVICE_INFO_TYPE.DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_NAME">
            <summary>
            Specifies information about the monitor. If the DisplayConfigGetDeviceInfo function is successful, DisplayConfigGetDeviceInfo
            returns info about the monitor in the DISPLAYCONFIG_TARGET_DEVICE_NAME structure.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_DEVICE_INFO_TYPE.DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_PREFERRED_MODE">
            <summary>
            Specifies information about the preferred mode of a monitor. If the DisplayConfigGetDeviceInfo function is successful,
            DisplayConfigGetDeviceInfo returns info about the preferred mode of a monitor in the DISPLAYCONFIG_TARGET_PREFERRED_MODE structure.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_DEVICE_INFO_TYPE.DISPLAYCONFIG_DEVICE_INFO_GET_ADAPTER_NAME">
            <summary>
            Specifies the graphics adapter name. If the DisplayConfigGetDeviceInfo function is successful, DisplayConfigGetDeviceInfo
            returns the adapter name in the DISPLAYCONFIG_ADAPTER_NAME structure.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_DEVICE_INFO_TYPE.DISPLAYCONFIG_DEVICE_INFO_SET_TARGET_PERSISTENCE">
            <summary>
            Specifies how to set the monitor. If the DisplayConfigSetDeviceInfo function is successful, DisplayConfigSetDeviceInfo uses
            info in the DISPLAYCONFIG_SET_TARGET_PERSISTENCE structure to force the output in a boot-persistent manner.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_DEVICE_INFO_TYPE.DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_BASE_TYPE">
            <summary>
            Specifies how to set the base output technology for a given target ID. If the DisplayConfigGetDeviceInfo function is
            successful, DisplayConfigGetDeviceInfo returns base output technology info in the DISPLAYCONFIG_TARGET_BASE_TYPE structure.
            Supported by WDDM 1.3 and later user-mode display drivers running on Windows 8.1 and later.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_DEVICE_INFO_TYPE.DISPLAYCONFIG_DEVICE_INFO_GET_SUPPORT_VIRTUAL_RESOLUTION">
            <summary>
            Specifies the state of virtual mode support. If the DisplayConfigGetDeviceInfo function is successful,
            DisplayConfigGetDeviceInfo returns virtual mode support information in the DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION
            structure. Supported starting in Windows 10.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_DEVICE_INFO_TYPE.DISPLAYCONFIG_DEVICE_INFO_SET_SUPPORT_VIRTUAL_RESOLUTION">
            <summary>
            Specifies how to set the state of virtual mode support. If the DisplayConfigGetDeviceInfo function is successful,
            DisplayConfigGetDeviceInfo uses info in the DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION structure to change the state of virtual
            mode support. Supported starting in Windows 10.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_DEVICE_INFO_TYPE.DISPLAYCONFIG_DEVICE_INFO_GET_ADVANCED_COLOR_INFO">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_DEVICE_INFO_TYPE.DISPLAYCONFIG_DEVICE_INFO_SET_ADVANCED_COLOR_STATE">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_DEVICE_INFO_TYPE.DISPLAYCONFIG_DEVICE_INFO_GET_SDR_WHITE_LEVEL">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO_VALUE">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO_VALUE.advancedColorSupported">
            <summary>A type of advanced color is supported</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO_VALUE.advancedColorEnabled">
            <summary>A type of advanced color is enabled</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO_VALUE.wideColorEnforced">
            <summary>Wide color gamut is enabled</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO_VALUE.advancedColorForceDisabled">
            <summary>Advanced color is force disabled due to system/OS policy</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_MODE_INFO_TYPE">
            <summary>
            The DISPLAYCONFIG_MODE_INFO_TYPE enumeration specifies that the information that is contained within the DISPLAYCONFIG_MODE_INFO
            structure is either source or target mode.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_MODE_INFO_TYPE.DISPLAYCONFIG_MODE_INFO_TYPE_SOURCE">
            <summary>Indicates that the DISPLAYCONFIG_MODE_INFO structure contains source mode information.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_MODE_INFO_TYPE.DISPLAYCONFIG_MODE_INFO_TYPE_TARGET">
            <summary>Indicates that the DISPLAYCONFIG_MODE_INFO structure contains target mode information.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_MODE_INFO_TYPE.DISPLAYCONFIG_MODE_INFO_TYPE_DESKTOP_IMAGE">
            <summary>
            Indicates that the DISPLAYCONFIG_MODE_INFO structure contains a valid DISPLAYCONFIG_DESKTOP_IMAGE_INFO structure. Supported
            starting in Windows 10.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_PIXELFORMAT">
            <summary>The DISPLAYCONFIG_PIXELFORMAT enumeration specifies pixel format in various bits per pixel (BPP) values.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_PIXELFORMAT.DISPLAYCONFIG_PIXELFORMAT_8BPP">
            <summary>Indicates 8 BPP format.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_PIXELFORMAT.DISPLAYCONFIG_PIXELFORMAT_16BPP">
            <summary>Indicates 16 BPP format.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_PIXELFORMAT.DISPLAYCONFIG_PIXELFORMAT_24BPP">
            <summary>Indicates 24 BPP format.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_PIXELFORMAT.DISPLAYCONFIG_PIXELFORMAT_32BPP">
            <summary>Indicates 32 BPP format.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_PIXELFORMAT.DISPLAYCONFIG_PIXELFORMAT_NONGDI">
            <summary>
            Indicates that the current display is not an 8, 16, 24, or 32 BPP GDI desktop mode. For example, a call to the
            QueryDisplayConfig function returns DISPLAYCONFIG_PIXELFORMAT_NONGDI if a DirectX application previously set the desktop to
            A2R10G10B10 format. A call to the SetDisplayConfig function fails if any pixel formats for active paths are set to DISPLAYCONFIG_PIXELFORMAT_NONGDI.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_ROTATION">
            <summary>The DISPLAYCONFIG_ROTATION enumeration specifies the clockwise rotation of the display.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_ROTATION.DISPLAYCONFIG_ROTATION_IDENTITY">
            <summary>Indicates that rotation is 0 degrees—landscape mode.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_ROTATION.DISPLAYCONFIG_ROTATION_ROTATE90">
            <summary>Indicates that rotation is 90 degrees clockwise—portrait mode.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_ROTATION.DISPLAYCONFIG_ROTATION_ROTATE180">
            <summary>Indicates that rotation is 180 degrees clockwise—inverted landscape mode.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_ROTATION.DISPLAYCONFIG_ROTATION_ROTATE270">
            <summary>Indicates that rotation is 270 degrees clockwise—inverted portrait mode.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_SCALING">
            <summary>
            The DISPLAYCONFIG_SCALING enumeration specifies the scaling transformation applied to content displayed on a video present
            network (VidPN) present path.
            </summary>
            <remarks>For more information about scaling, see Scaling the Desktop Image.</remarks>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_SCALING.DISPLAYCONFIG_SCALING_IDENTITY">
            <summary>
            Indicates the identity transformation; the source content is presented with no change. This transformation is available only
            if the path's source mode has the same spatial resolution as the path's target mode.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_SCALING.DISPLAYCONFIG_SCALING_CENTERED">
            <summary>
            Indicates the centering transformation; the source content is presented unscaled, centered with respect to the spatial
            resolution of the target mode.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_SCALING.DISPLAYCONFIG_SCALING_STRETCHED">
            <summary>Indicates the content is scaled to fit the path's target.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_SCALING.DISPLAYCONFIG_SCALING_ASPECTRATIOCENTEREDMAX">
            <summary>Indicates the aspect-ratio centering transformation.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_SCALING.DISPLAYCONFIG_SCALING_CUSTOM">
            <summary>
            Indicates that the caller requests a custom scaling that the caller cannot describe with any of the other
            DISPLAYCONFIG_SCALING_XXX values. Only a hardware vendor's value-add application should use DISPLAYCONFIG_SCALING_CUSTOM,
            because the value-add application might require a private interface to the driver. The application can then use
            DISPLAYCONFIG_SCALING_CUSTOM to indicate additional context for the driver for the custom value on the specified path.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_SCALING.DISPLAYCONFIG_SCALING_PREFERRED">
            <summary>
            Indicates that the caller does not have any preference for the scaling. The SetDisplayConfig function will use the scaling
            value that was last saved in the database for the path. If such a scaling value does not exist, SetDisplayConfig will use the
            default scaling for the computer. For example, stretched (DISPLAYCONFIG_SCALING_STRETCHED) for tablet computers and
            aspect-ratio centered (DISPLAYCONFIG_SCALING_ASPECTRATIOCENTEREDMAX) for non-tablet computers.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_SCANLINE_ORDERING">
            <summary>
            The DISPLAYCONFIG_SCANLINE_ORDERING enumeration specifies the method that the display uses to create an image on a screen.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_SCANLINE_ORDERING.DISPLAYCONFIG_SCANLINE_ORDERING_UNSPECIFIED">
            <summary>
            Indicates that scan-line ordering of the output is unspecified. The caller can only set the scanLineOrdering member of the
            DISPLAYCONFIG_PATH_TARGET_INFO structure in a call to the SetDisplayConfig function to
            DISPLAYCONFIG_SCANLINE_ORDERING_UNSPECIFIED if the caller also set the refresh rate denominator and numerator of the
            refreshRate member both to zero. In this case, SetDisplayConfig uses the best refresh rate it can find.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_SCANLINE_ORDERING.DISPLAYCONFIG_SCANLINE_ORDERING_PROGRESSIVE">
            <summary>Indicates that the output is a progressive image.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_SCANLINE_ORDERING.DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED">
            <summary>Indicates that the output is an interlaced image that is created beginning with the upper field.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_SCANLINE_ORDERING.DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_UPPERFIELDFIRST">
            <summary>Indicates that the output is an interlaced image that is created beginning with the upper field.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_SCANLINE_ORDERING.DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_LOWERFIELDFIRST">
            <summary>Indicates that the output is an interlaced image that is created beginning with the lower field.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE_VALUE">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE_VALUE.enableAdvancedColor">
            <summary>Undocumented.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_SET_TARGET_PERSISTENCE_VALUE">
            <summary>
            A member in the union that DISPLAYCONFIG_SET_TARGET_PERSISTENCE contains that can hold a 32-bit value that identifies information
            about setting the display.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_SET_TARGET_PERSISTENCE_VALUE.bootPersistenceOn">
            <summary>
            <para>
            A UINT32 value that specifies whether the SetDisplayConfig function should enable or disable boot persistence for the
            specified target.
            </para>
            <para>Setting this member is equivalent to setting the first bit of the 32-bit <c>value</c> member (0x00000001).</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION_VALUE">
            <summary>Reflects the value of <c>disableMonitorVirtualResolution</c> in cases where debugging is utilized.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION_VALUE.disableMonitorVirtualResolution">
            <summary>Setting this bit disables virtual mode for the monitor using information found in <c>header</c>.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS">
            <summary>The <c>DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS</c> enum contains information about a target device.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS.friendlyNameFromEdid">
            <summary>
            Indicates that the string in the monitorFriendlyDeviceName member of the DISPLAYCONFIG_TARGET_DEVICE_NAME structure was
            constructed from the manufacture identification string in the extended display identification data (EDID).
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS.friendlyNameForced">
            <summary>
            Indicates that the target is forced with no detectable monitor attached and the monitorFriendlyDeviceName member of the
            DISPLAYCONFIG_TARGET_DEVICE_NAME structure is a NULL-terminated empty string.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS.edidIdsValid">
            <summary>
            Indicates that the edidManufactureId and edidProductCodeId members of the DISPLAYCONFIG_TARGET_DEVICE_NAME structure are
            valid and were obtained from the EDID.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_TOPOLOGY_ID">
            <summary>The DISPLAYCONFIG_TOPOLOGY_ID enumeration specifies the type of display topology.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_TOPOLOGY_ID.DISPLAYCONFIG_TOPOLOGY_INTERNAL">
            <summary>Indicates that the display topology is an internal configuration.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_TOPOLOGY_ID.DISPLAYCONFIG_TOPOLOGY_CLONE">
            <summary>Indicates that the display topology is clone-view configuration.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_TOPOLOGY_ID.DISPLAYCONFIG_TOPOLOGY_EXTEND">
            <summary>Indicates that the display topology is an extended configuration.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_TOPOLOGY_ID.DISPLAYCONFIG_TOPOLOGY_EXTERNAL">
            <summary>Indicates that the display topology is an external configuration.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY">
            <summary>The DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY enumeration specifies the target's connector type.</summary>
            <remarks>
            <para>
            Values with "embedded" in their names indicate that the graphics adapter's video output device connects internally to the display
            device. In those cases, the DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INTERNAL value is redundant. The caller should ignore
            DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INTERNAL and just process the embedded values,
            DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EMBEDDED and DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EMBEDDED.
            </para>
            <para>An embedded display port or UDI is also known as an integrated display port or UDI.</para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY.DISPLAYCONFIG_OUTPUT_TECHNOLOGY_OTHER">
            <summary>Indicates a connector that is not one of the types that is indicated by the following enumerators in this enumeration.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY.DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HD15">
            <summary>Indicates an HD15 (VGA) connector.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY.DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SVIDEO">
            <summary>Indicates an S-video connector.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY.DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPOSITE_VIDEO">
            <summary>Indicates a composite video connector group.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY.DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPONENT_VIDEO">
            <summary>Indicates a component video connector group.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY.DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DVI">
            <summary>Indicates a Digital Video Interface (DVI) connector.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY.DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HDMI">
            <summary>Indicates a High-Definition Multimedia Interface (HDMI) connector.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY.DISPLAYCONFIG_OUTPUT_TECHNOLOGY_LVDS">
            <summary>Indicates a Low Voltage Differential Swing (LVDS) connector.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY.DISPLAYCONFIG_OUTPUT_TECHNOLOGY_D_JPN">
            <summary>Indicates a Japanese D connector.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY.DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDI">
            <summary>Indicates an SDI connector.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY.DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EXTERNAL">
            <summary>Indicates an external display port, which is a display port that connects externally to a display device.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY.DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EMBEDDED">
            <summary>Indicates an embedded display port that connects internally to a display device.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY.DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EXTERNAL">
            <summary>
            Indicates an external Unified Display Interface (UDI), which is a UDI that connects externally to a display device.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY.DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EMBEDDED">
            <summary>Indicates an embedded UDI that connects internally to a display device.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY.DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDTVDONGLE">
            <summary>Indicates a dongle cable that supports standard definition television (SDTV).</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY.DISPLAYCONFIG_OUTPUT_TECHNOLOGY_MIRACAST">
            <summary>Indicates that the VidPN target is a Miracast wireless display device. Supported starting in Windows 8.1.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY.DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INDIRECT_WIRED">
            <summary>The displayconfig output technology indirect wired</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY.DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INDIRECT_VIRTUAL">
            <summary>The displayconfig output technology indirect virtual</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY.DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INTERNAL">
            <summary>
            Indicates that the video output device connects internally to a display device (for example, the internal connection in a
            laptop computer).
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_2DREGION">
            <summary>The DISPLAYCONFIG_2DREGION structure represents a point or an offset in a two-dimensional space.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_2DREGION.cx">
            <summary>The horizontal component of the point or offset.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_2DREGION.cy">
            <summary>The vertical component of the point or offset.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_ADAPTER_NAME">
            <summary>The DISPLAYCONFIG_ADAPTER_NAME structure contains information about the display adapter.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_ADAPTER_NAME.header">
            <summary>
            A DISPLAYCONFIG_DEVICE_INFO_HEADER structure that contains information about the request for the adapter name. The caller
            should set the <c>type</c> member of DISPLAYCONFIG_DEVICE_INFO_HEADER to DISPLAYCONFIG_DEVICE_INFO_GET_ADAPTER_NAME and the
            <c>adapterId</c> member of DISPLAYCONFIG_DEVICE_INFO_HEADER to the adapter identifier of the adapter for which the caller
            wants the name. For this request, the caller does not need to set the <c>id</c> member of DISPLAYCONFIG_DEVICE_INFO_HEADER.
            The caller should set the <c>size</c> member of DISPLAYCONFIG_DEVICE_INFO_HEADER to at least the size of the
            DISPLAYCONFIG_ADAPTER_NAME structure.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_ADAPTER_NAME.adapterDevicePath">
            <summary>
            A NULL-terminated WCHAR string that is the device name for the adapter. This name can be used with SetupAPI.dll to obtain the
            device name that is contained in the installation package.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_DESKTOP_IMAGE_INFO">
            <summary>The DISPLAYCONFIG_DESKTOP_IMAGE_INFO structure contains information about the image displayed on the desktop.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_DESKTOP_IMAGE_INFO.PathSourceSize">
            <summary>A POINTL structure that specifies the size of the VidPn source surface that is being displayed on the monitor.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_DESKTOP_IMAGE_INFO.DesktopImageRegion">
            <summary>
            A RECTL structure that defines where the desktop image will be positioned within path source. Region must be completely
            inside the bounds of the path source size.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_DESKTOP_IMAGE_INFO.DesktopImageClip">
            <summary>
            A RECTL structure that defines which part of the desktop image for this clone group will be displayed on this path. This
            currently must be set to the desktop size.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_DEVICE_INFO_HEADER">
            <summary>The DISPLAYCONFIG_DEVICE_INFO_HEADER structure contains display information about the device.</summary>
            <remarks>
            The DisplayConfigGetDeviceInfo function uses the DISPLAYCONFIG_DEVICE_INFO_HEADER structure for retrieving display configuration
            information about the device, and the DisplayConfigSetDeviceInfo function uses the DISPLAYCONFIG_DEVICE_INFO_HEADER structure for
            setting display configuration information for the device.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_DEVICE_INFO_HEADER.type">
            <summary>
            A DISPLAYCONFIG_DEVICE_INFO_TYPE enumerated value that determines the type of device information to retrieve or set. The
            remainder of the packet for the retrieve or set operation follows immediately after the DISPLAYCONFIG_DEVICE_INFO_HEADER structure.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_DEVICE_INFO_HEADER.size">
            <summary>
            The size, in bytes, of the device information that is retrieved or set. This size includes the size of the header and the
            size of the additional data that follows the header. This device information depends on the request type.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_DEVICE_INFO_HEADER.adapterId">
            <summary>A locally unique identifier (LUID) that identifies the adapter that the device information packet refers to.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_DEVICE_INFO_HEADER.id">
            <summary>
            The source or target identifier to get or set the device information for. The meaning of this identifier is related to the
            type of information being requested. For example, in the case of DISPLAYCONFIG_DEVICE_INFO_GET_SOURCE_NAME, this is the
            source identifier.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO.header">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO.value">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO.colorEncoding">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO.bitsPerColorChannel">
            <summary>Undocumented.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_MODE_INFO">
            <summary>The DISPLAYCONFIG_MODE_INFO structure contains either source mode or target mode information.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_MODE_INFO.infoType">
            <summary>
            A value that indicates whether the <c>DISPLAYCONFIG_MODE_INFO</c> structure represents source or target mode information. If
            <c>infoType</c> is DISPLAYCONFIG_MODE_INFO_TYPE_TARGET, the targetMode parameter value contains a valid
            DISPLAYCONFIG_TARGET_MODE structure describing the specified target. If <c>infoType</c> is
            DISPLAYCONFIG_MODE_INFO_TYPE_SOURCE, the sourceMode parameter value contains a valid DISPLAYCONFIG_SOURCE_MODE structure
            describing the specified source.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_MODE_INFO.id">
            <summary>The source or target identifier on the specified adapter that this path relates to.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_MODE_INFO.adapterId">
            <summary>The identifier of the adapter that this source or target mode information relates to.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_MODE_INFO.targetMode">
            <summary>
            A valid DISPLAYCONFIG_TARGET_MODE structure that describes the specified target only when <c>infoType</c> is DISPLAYCONFIG_MODE_INFO_TYPE_TARGET.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_MODE_INFO.sourceMode">
            <summary>
            A valid DISPLAYCONFIG_SOURCE_MODE structure that describes the specified source only when <c>infoType</c> is DISPLAYCONFIG_MODE_INFO_TYPE_SOURCE.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_MODE_INFO.desktopImageInfo">
            <summary>
            <para>
            A DISPLAYCONFIG_DESKTOP_IMAGE_INFO structure that describes information about the desktop image only when <c>infoType</c> is DISPLAYCONFIG_MODE_INFO_TYPE_.
            </para>
            <para>Supported starting in Windows 10.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_PATH_INFO">
            <summary>The DISPLAYCONFIG_PATH_INFO structure is used to describe a single path from a target to a source.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_PATH_INFO.sourceInfo">
            <summary>A DISPLAYCONFIG_PATH_SOURCE_INFO structure that contains the source information for the path.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_PATH_INFO.targetInfo">
            <summary>A DISPLAYCONFIG_PATH_TARGET_INFO structure that contains the target information for the path.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_PATH_INFO.flags">
            <summary>
            <para>A bitwise OR of flag values that indicates the state of the path. The following values are supported:</para>
            <para>DISPLAYCONFIG_PATH_ACTIVE</para>
            <para>
            Set by QueryDisplayConfig to indicate that the path is active and part of the desktop. If this flag value is set,
            SetDisplayConfig attempts to enable this path.
            </para>
            <para>DISPLAYCONFIG_PATH_SUPPORT_VIRTUAL_MODE</para>
            <para>Set by QueryDisplayConfig to indicate that the path supports the virtual mode. Supported starting in Windows 10.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_PATH_SOURCE_INFO">
            <summary>The DISPLAYCONFIG_PATH_SOURCE_INFO structure contains source information for a single path.</summary>
            <remarks>
            <para>A DISPLAYCONFIG_PATH_SOURCE_INFO structure is specified in the <c>sourceInfo</c> member of a DISPLAYCONFIG_PATH_INFO structure.</para>
            <para>
            A source corresponds to a surface on which the display adapter can render pixels. Each display adapter is capable of rendering to
            x number of sources. What this means is how many desktops can be rendered for extend mode. This is typically 2. For example,
            source 0 might be rendering pixels from 0,0 to 1024,768, and source 1 might be rendering pixels from 1025,0 to 2048, 768.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_PATH_SOURCE_INFO.adapterId">
            <summary>The identifier of the adapter that this source information relates to.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_PATH_SOURCE_INFO.id">
            <summary>The source identifier on the specified adapter that this path relates to.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_PATH_SOURCE_INFO.union">
            <summary>A union.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_PATH_SOURCE_INFO.statusFlags">
            <summary>
            <para>A bitwise OR of flag values that indicates the status of the source. The following values are supported:</para>
            <para>DISPLAYCONFIG_SOURCE_IN_USE</para>
            <para>This source is in use by at least one active path.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_PATH_SOURCE_INFO.Union">
            <summary>A union.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_PATH_SOURCE_INFO.Union.modeInfoIdx">
            <summary>
            A valid index into the mode information table that contains the source mode information for this path only when
            DISPLAYCONFIG_PATH_SUPPORT_VIRTUAL_MODE is not set. If source mode information is not available, the value of
            <c>modeInfoIdx</c> is DISPLAYCONFIG_PATH_MODE_IDX_INVALID.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_PATH_SOURCE_INFO.Union.cloneGroupId">
            <summary>
            <para>
            A valid identifier used to show which clone group the path is a member of only when
            DISPLAYCONFIG_PATH_SUPPORT_VIRTUAL_MODE is set. If this value is invalid, then it must be set to DISPLAYCONFIG_PATH_CLONE_GROUP_INVALID.
            </para>
            <para>
            <c>cloneGroupId</c> is only used when the source mode index is not specified. Two such scenarios are when the source mode
            info must be invalid because SDC_TOPOLOGY_SUPPLIED is used, and when SDC_USE_SUPPLIED_DISPLAY_CONFIG is used with paths
            that do not have source mode info. The <c>cloneGroupId</c> will be used to indicate which paths are in a clone group, all
            the paths with the same <c>cloneGroupId</c> value are considered in the same clone group. There is no requirement that
            the clone group id’s have to be zero based or contiguous. Supported starting in Windows 10.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_PATH_SOURCE_INFO.Union.sourceModeInfoIdx">
            <summary>
            A valid index into the mode array of the DISPLAYCONFIG_SOURCE_MODE entry that contains the source mode information for
            this path only when DISPLAYCONFIG_PATH_SUPPORT_VIRTUAL_MODE is set. If there is no entry for this in the mode array, the
            value of <c>sourceModeInfoIdx</c> is DISPLAYCONFIG_PATH_SOURCE_MODE_IDX_INVALID. Supported starting in Windows 10.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_PATH_TARGET_INFO">
            <summary>The DISPLAYCONFIG_PATH_TARGET_INFO structure contains target information for a single path.</summary>
            <remarks>
            <para>A DISPLAYCONFIG_PATH_TARGET_INFO structure is specified in the <c>targetInfo</c> member of a DISPLAYCONFIG_PATH_INFO structure.</para>
            <para>
            A target corresponds to the number of possible video outputs on a display adapter. This number, however, does not equate to the
            number of physical connectors on the display adapter. Each connector exposes a number of targets that includes backward
            compatibility with older connector technology. For example, a DVI connector exposes a DVI target, as well as a VGA target. A
            DisplayPort connector, which was introduced in 2006, exposes DisplayPort, HDMI, DVI, legacy TV, and VGA targets.
            </para>
            <para>The <c>statusFlags</c> member is set when you call the QueryDisplayConfig function.</para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_PATH_TARGET_INFO.adapterId">
            <summary>The identifier of the adapter that the path is on.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_PATH_TARGET_INFO.id">
            <summary>The target identifier on the specified adapter that this path relates to.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_PATH_TARGET_INFO.union">
            <summary>A union.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_PATH_TARGET_INFO.outputTechnology">
            <summary>
            The target's connector type. For a list of possible values, see the DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY enumerated type.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_PATH_TARGET_INFO.rotation">
            <summary>
            A value that specifies the rotation of the target. For a list of possible values, see the DISPLAYCONFIG_ROTATION enumerated type.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_PATH_TARGET_INFO.scaling">
            <summary>
            A value that specifies how the source image is scaled to the target. For a list of possible values, see the
            DISPLAYCONFIG_SCALING enumerated type. For more information about scaling, see Scaling the Desktop Image.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_PATH_TARGET_INFO.refreshRate">
            <summary>
            A DISPLAYCONFIG_RATIONAL structure that specifies the refresh rate of the target. If the caller specifies target mode
            information, the operating system will instead use the refresh rate that is stored in the <c>vSyncFreq</c> member of the
            DISPLAYCONFIG_VIDEO_SIGNAL_INFO structure. In this case, the caller specifies this value in the <c>targetVideoSignalInfo</c>
            member of the DISPLAYCONFIG_TARGET_MODE structure. A refresh rate with both the numerator and denominator set to zero
            indicates that the caller does not specify a refresh rate and the operating system should use the most optimal refresh rate
            available. For this case, in a call to the SetDisplayConfig function, the caller must set the <c>scanLineOrdering</c> member
            to the DISPLAYCONFIG_SCANLINE_ORDERING_UNSPECIFIED value; otherwise, <c>SetDisplayConfig</c> fails.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_PATH_TARGET_INFO.scanLineOrdering">
            <summary>
            A value that specifies the scan-line ordering of the output on the target. For a list of possible values, see the
            DISPLAYCONFIG_SCANLINE_ORDERING enumerated type. If the caller specifies target mode information, the operating system will
            instead use the scan-line ordering that is stored in the <c>scanLineOrdering</c> member of the
            DISPLAYCONFIG_VIDEO_SIGNAL_INFO structure. In this case, the caller specifies this value in the <c>targetVideoSignalInfo</c>
            member of the DISPLAYCONFIG_TARGET_MODE structure.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_PATH_TARGET_INFO.targetAvailable">
            <summary>
            <para>A Boolean value that specifies whether the target is available. <c>TRUE</c> indicates that the target is available.</para>
            <para>
            Because the asynchronous nature of display topology changes when a monitor is removed, a path might still be marked as active
            even though the monitor has been removed. In such a case, <c>targetAvailable</c> could be <c>FALSE</c> for an active path.
            This is typically a transient situation that will change after the operating system takes action on the monitor removal.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_PATH_TARGET_INFO.statusFlags">
            <summary>
            <para>A bitwise OR of flag values that indicates the status of the target. The following values are supported:</para>
            <para>DISPLAYCONFIG_TARGET_IN_USE</para>
            <para>Target is in use on an active path.</para>
            <para>DISPLAYCONFIG_TARGET_FORCIBLE</para>
            <para>The output can be forced on this target even if a monitor is not detected.</para>
            <para>DISPLAYCONFIG_TARGET_FORCED_AVAILABILITY_BOOT</para>
            <para>Output is currently being forced in a boot-persistent manner.</para>
            <para>DISPLAYCONFIG_TARGET_FORCED_AVAILABILITY_PATH</para>
            <para>Output is currently being forced in a path-persistent manner.</para>
            <para>DISPLAYCONFIG_TARGET_FORCED_AVAILABILITY_SYSTEM</para>
            <para>Output is currently being forced in a non-persistent manner.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_PATH_TARGET_INFO.Union">
            <summary>A union.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_PATH_TARGET_INFO.Union.modeInfoIdx">
            <summary>
            A valid index into the mode information table that contains the target mode information for this path only when
            DISPLAYCONFIG_PATH_SUPPORT_VIRTUAL_MODE is not set. If target mode information is not available, the value of
            <c>modeInfoIdx</c> is DISPLAYCONFIG_PATH_MODE_IDX_INVALID.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_PATH_TARGET_INFO.Union.desktopModeInfoIdx">
            <summary>
            A valid index into the mode array of the DISPLAYCONFIG_DESKTOP_IMAGE_INFO entry that contains the desktop mode
            information for this path only when DISPLAYCONFIG_PATH_SUPPORT_VIRTUAL_MODE is set. If there is no entry for this in the
            mode array, the value of <c>desktopModeInfoIdx</c> is DISPLAYCONFIG_PATH_DESKTOP_IMAGE_IDX_INVALID. Supported starting in
            Windows 10.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_PATH_TARGET_INFO.Union.targetModeInfoIdx">
            <summary>
            A valid index into the mode array of the DISPLAYCONFIG_TARGET_MODE entry that contains the target mode information for
            this path only when DISPLAYCONFIG_PATH_SUPPORT_VIRTUAL_MODE is set. If there is no entry for this in the mode array, the
            value of <c>targetModeInfoIdx</c> is DISPLAYCONFIG_PATH_TARGET_MODE_IDX_INVALID. Supported starting in Windows 10.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_RATIONAL">
            <summary>
            The DISPLAYCONFIG_RATIONAL structure describes a fractional value that represents vertical and horizontal frequencies of a video
            mode (that is, vertical sync and horizontal sync).
            </summary>
            <remarks>
            A DISPLAYCONFIG_RATIONAL structure is specified in members of the DISPLAYCONFIG_PATH_TARGET_INFO and
            DISPLAYCONFIG_VIDEO_SIGNAL_INFO structures.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_RATIONAL.Numerator">
            <summary>The numerator of the frequency fraction.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_RATIONAL.Denominator">
            <summary>The denominator of the frequency fraction.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_SDR_WHITE_LEVEL">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_SDR_WHITE_LEVEL.header">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_SDR_WHITE_LEVEL.SDRWhiteLevel">
            <summary>
            SDRWhiteLevel represents a multiplier for standard SDR white peak value i.e. 80 nits represented as fixed point. To get value
            in nits use the following conversion SDRWhiteLevel in nits = (SDRWhiteLevel / 1000 ) * 80
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE.header">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE.value">
            <summary>Undocumented.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_SET_TARGET_PERSISTENCE">
            <summary>The DISPLAYCONFIG_SET_TARGET_PERSISTENCE structure contains information about setting the display.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_SET_TARGET_PERSISTENCE.header">
            <summary>
            A DISPLAYCONFIG_DEVICE_INFO_HEADER structure that contains information for setting the target persistence. The <c>type</c>
            member of DISPLAYCONFIG_DEVICE_INFO_HEADER is set to DISPLAYCONFIG_DEVICE_INFO_SET_TARGET_PERSISTENCE.
            DISPLAYCONFIG_DEVICE_INFO_HEADER also contains the adapter and target identifiers of the target to set the persistence for.
            The <c>size</c> member of DISPLAYCONFIG_DEVICE_INFO_HEADER is set to at least the size of the
            DISPLAYCONFIG_SET_TARGET_PERSISTENCE structure.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_SET_TARGET_PERSISTENCE.value">
            <summary>
            A member in the union that DISPLAYCONFIG_SET_TARGET_PERSISTENCE contains that can hold a 32-bit value that identifies
            information about setting the display.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_SOURCE_DEVICE_NAME">
            <summary>The <c>DISPLAYCONFIG_SOURCE_DEVICE_NAME</c> structure contains the GDI device name for the source or view.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_SOURCE_DEVICE_NAME.header">
            <summary>
            A DISPLAYCONFIG_DEVICE_INFO_HEADER structure that contains information about the request for the source device name. The
            caller should set the <c>type</c> member of DISPLAYCONFIG_DEVICE_INFO_HEADER to DISPLAYCONFIG_DEVICE_INFO_GET_SOURCE_NAME and
            the <c>adapterId</c> and <c>id</c> members of DISPLAYCONFIG_DEVICE_INFO_HEADER to the source for which the caller wants the
            source device name. The caller should set the <c>size</c> member of DISPLAYCONFIG_DEVICE_INFO_HEADER to at least the size of
            the DISPLAYCONFIG_SOURCE_DEVICE_NAME structure.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_SOURCE_DEVICE_NAME.viewGdiDeviceName">
            <summary>
            A NULL-terminated WCHAR string that is the GDI device name for the source, or view. This name can be used in a call to
            <c>EnumDisplaySettings</c> to obtain a list of available modes for the specified source.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_SOURCE_MODE">
            <summary>The <c>DISPLAYCONFIG_SOURCE_MODE</c> structure represents a point or an offset in a two-dimensional space.</summary>
            <remarks>
            <para>
            The arrangement of source surfaces on the desktop is controlled by the <c>position</c> member, which specifies the position in
            desktop coordinates of the upper-left corner of the source surface. The source surface that is positioned at (0, 0) is considered
            the primary. GDI has strict rules about how the source surfaces can be arranged in the desktop space. For example, there cannot
            be any gaps between source surfaces, and there can be no overlaps.
            </para>
            <para>
            The SetDisplayConfig function attempts to rearrange source surfaces in order to enforce these layout rules. The caller must make
            every effort to lay out the source surfaces correctly because GDI rearranges the sources in an undefined manner to enforce the
            layout rules. The resultant layout may not be what the caller wanted to achieve.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_SOURCE_MODE.width">
            <summary>The width in pixels of the source mode.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_SOURCE_MODE.height">
            <summary>The height in pixels of the source mode.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_SOURCE_MODE.pixelFormat">
            <summary>A value from the DISPLAYCONFIG_PIXELFORMAT enumeration that specifies the pixel format of the source mode.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_SOURCE_MODE.position">
            <summary>
            A POINTL structure that specifies the position in the desktop coordinate space of the upper-left corner of this source
            surface. The source surface that is located at (0, 0) is always the primary source surface.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION">
            <summary>
            The DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION structure contains information on the state of virtual resolution support for the monitor.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION.header">
            <summary>
            A DISPLAYCONFIG_DEVICE_INFO_HEADER structure that holds information on the type, size, adapterID, and ID of the target the
            monitor is connected to.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION.value">
            <summary>Reflects the value of <c>disableMonitorVirtualResolution</c> in cases where debugging is utilized.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_TARGET_BASE_TYPE">
            <summary>Specifies base output technology info for a given target ID.</summary>
            <remarks>
            For a Miracast display device, a call to the DisplayConfigGetDeviceInfo function always returns a value of
            DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY. <c>DISPLAYCONFIG_OUTPUT_TECHNOLOGY_MIRACAST</c>, regardless of what the Miracast sink
            reports as the connector type.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_TARGET_BASE_TYPE.header">
            <summary>
            <para>
            A DISPLAYCONFIG_DEVICE_INFO_HEADER structure that contains info about the request for the target device name. The caller
            should set the <c>type</c> member of <c>DISPLAYCONFIG_DEVICE_INFO_HEADER</c> to
            <c>DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_BASE_TYPE</c> and the <c>adapterId</c> and <c>id</c> members of
            <c>DISPLAYCONFIG_DEVICE_INFO_HEADER</c> to the target for which the caller wants the target device name.
            </para>
            <para>
            The caller should set the <c>size</c> member of DISPLAYCONFIG_DEVICE_INFO_HEADER to at least the size of the
            <c>DISPLAYCONFIG_TARGET_BASE_TYPE</c> structure.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_TARGET_BASE_TYPE.baseOutputTechnology">
            <summary>
            The base output technology, given as a constant value of the DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY enumeration, of the
            adapter and the target specified by the <c>header</c> member. See Remarks.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_TARGET_DEVICE_NAME">
            <summary>The DISPLAYCONFIG_TARGET_DEVICE_NAME structure contains information about the target.</summary>
            <remarks>
            <para>
            Extended display identification data (EDID) is a set of data that is provided by a display to describe its capabilities to a
            graphics adapter. EDID data allows a computer to detect the type of monitor that is connected to it. EDID data includes the
            manufacturer name, the product type, the timings that are supported by the display, the display size, as well as other display
            characteristics. EDID is defined by a standard published by the Video Electronics Standards Association (VESA).
            </para>
            <para>
            A named device object has a path and name of the form \Device\DeviceName. This is known as the device name of the device object.
            </para>
            <para>
            If an application calls the DisplayConfigGetDeviceInfo function to obtain the monitor name and <c>DisplayConfigGetDeviceInfo</c>
            either cannot get the monitor name or the target is forced without a monitor connected, the string in the
            <c>monitorFriendlyDeviceName</c> member of the DISPLAYCONFIG_TARGET_DEVICE_NAME structure is a <c>NULL</c> string and none of the
            bit-field flags in the DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS structure are set.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_TARGET_DEVICE_NAME.header">
            <summary>
            A DISPLAYCONFIG_DEVICE_INFO_HEADER structure that contains information about the request for the target device name. The
            caller should set the <c>type</c> member of DISPLAYCONFIG_DEVICE_INFO_HEADER to DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_NAME and
            the <c>adapterId</c> and <c>id</c> members of DISPLAYCONFIG_DEVICE_INFO_HEADER to the target for which the caller wants the
            target device name. The caller should set the <c>size</c> member of DISPLAYCONFIG_DEVICE_INFO_HEADER to at least the size of
            the DISPLAYCONFIG_TARGET_DEVICE_NAME structure.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_TARGET_DEVICE_NAME.flags">
            <summary>
            A DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS structure that identifies, in bit-field flags, information about the target.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_TARGET_DEVICE_NAME.outputTechnology">
            <summary>A value from the DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY enumeration that specifies the target's connector type.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_TARGET_DEVICE_NAME.edidManufactureId">
            <summary>
            The manufacture identifier from the monitor extended display identification data (EDID). This member is set only when the
            <c>edidIdsValid</c> bit-field is set in the <c>flags</c> member.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_TARGET_DEVICE_NAME.edidProductCodeId">
            <summary>
            The product code from the monitor EDID. This member is set only when the <c>edidIdsValid</c> bit-field is set in the
            <c>flags</c> member.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_TARGET_DEVICE_NAME.connectorInstance">
            <summary>
            The one-based instance number of this particular target only when the adapter has multiple targets of this type. The
            connector instance is a consecutive one-based number that is unique within each adapter. If this is the only target of this
            type on the adapter, this value is zero.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_TARGET_DEVICE_NAME.monitorFriendlyDeviceName">
            <summary>
            A NULL-terminated WCHAR string that is the device name for the monitor. This name can be used with SetupAPI.dll to obtain the
            device name that is contained in the installation package.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_TARGET_DEVICE_NAME.monitorDevicePath">
            <summary>
            A NULL-terminated WCHAR string that is the path to the device name for the monitor. This path can be used with SetupAPI.dll
            to obtain the device name that is contained in the installation package.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_TARGET_MODE">
            <summary>The DISPLAYCONFIG_TARGET_MODE structure describes a display path target mode.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_TARGET_MODE.targetVideoSignalInfo">
            <summary>A DISPLAYCONFIG_VIDEO_SIGNAL_INFO structure that contains a detailed description of the current target mode.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_TARGET_PREFERRED_MODE">
            <summary>The <c>DISPLAYCONFIG_TARGET_PREFERRED_MODE</c> structure contains information about the preferred mode of a display.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_TARGET_PREFERRED_MODE.header">
            <summary>
            A DISPLAYCONFIG_DEVICE_INFO_HEADER structure that contains information about the request for the target preferred mode. The
            caller should set the <c>type</c> member of DISPLAYCONFIG_DEVICE_INFO_HEADER to
            DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_PREFERRED_MODE and the <c>adapterId</c> and <c>id</c> members of
            DISPLAYCONFIG_DEVICE_INFO_HEADER to the target for which the caller wants the preferred mode. The caller should set the
            <c>size</c> member of DISPLAYCONFIG_DEVICE_INFO_HEADER to at least the size of the DISPLAYCONFIG_TARGET_PREFERRED_MODE structure.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_TARGET_PREFERRED_MODE.width">
            <summary>
            The width in pixels of the best mode for the monitor that is connected to the target that the <c>targetMode</c> member specifies.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_TARGET_PREFERRED_MODE.height">
            <summary>
            The height in pixels of the best mode for the monitor that is connected to the target that the <c>targetMode</c> member specifies.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_TARGET_PREFERRED_MODE.targetMode">
            <summary>
            A DISPLAYCONFIG_TARGET_MODE structure that describes the best target mode for the monitor that is connected to the specified target.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_VIDEO_SIGNAL_INFO">
            <summary>The DISPLAYCONFIG_VIDEO_SIGNAL_INFO structure contains information about the video signal for a display.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_VIDEO_SIGNAL_INFO.pixelRate">
            <summary>The pixel clock rate.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_VIDEO_SIGNAL_INFO.hSyncFreq">
            <summary>A DISPLAYCONFIG_RATIONAL structure that represents horizontal sync.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_VIDEO_SIGNAL_INFO.vSyncFreq">
            <summary>A DISPLAYCONFIG_RATIONAL structure that represents vertical sync.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_VIDEO_SIGNAL_INFO.activeSize">
            <summary>
            A DISPLAYCONFIG_2DREGION structure that specifies the width and height (in pixels) of the active portion of the video signal.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_VIDEO_SIGNAL_INFO.totalSize">
            <summary>A DISPLAYCONFIG_2DREGION structure that specifies the width and height (in pixels) of the entire video signal.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_VIDEO_SIGNAL_INFO.videoStandard">
            <summary>
            The video standard (if any) that defines the video signal. For a list of possible values, see the
            D3DKMDT_VIDEO_SIGNAL_STANDARD enumerated type.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_VIDEO_SIGNAL_INFO.vSyncFreqDivider">
            <summary>The ratio of the VSync rate of a monitor that displays through a Miracast connected session to the VSync rate of the Miracast sink.
            <para>To avoid visual artifacts, the VSync rate of the display monitor that's connected to the Miracast sink must be an integer multiple of the VSync rate of the Miracast sink. The display miniport driver reports the latter rate to the operating system as the refresh rate of the desktop present path.</para>
            <note>The operating system fails any attempt by the driver to add a target mode that results in a Miracast target having a VSync rate below 23.9 Hz.</note>
            <para>For a non-Miracast target, the driver should set vSyncFreqDivider to zero.</para>
            <para>Supported starting with Windows 8.1.</para></summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DISPLAYCONFIG_VIDEO_SIGNAL_INFO.scanLineOrdering">
            <summary>
            The scan-line ordering (for example, progressive or interlaced) of the video signal. For a list of possible values, see the
            DISPLAYCONFIG_SCANLINE_ORDERING enumerated type.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.D3DKMDT_VIDEO_SIGNAL_STANDARD">
            <summary>
            The D3DKMDT_VIDEO_SIGNAL_STANDARD enumeration contains constants that represent video signal standards.
            </summary>
            <remarks>
              <para>The <c>SignalInfo</c> member of the D3DKMDT_VIDPN_TARGET_MODE structure is a D3DKMDT_VIDEO_SIGNAL_MODE structure.</para><para>The <c>VideoStandard</c> member of the D3DKMDT_VIDEO_SIGNAL_MODE structure is a D3DKMDT_VIDEO_SIGNAL_STANDARD value.</para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.D3DKMDT_VIDEO_SIGNAL_STANDARD.D3DKMDT_VSS_UNINITIALIZED">
            <summary>
            Indicates that a variable of type D3DKMDT_VIDEO_SIGNAL_STANDARD has not yet been assigned a meaningful value.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.D3DKMDT_VIDEO_SIGNAL_STANDARD.D3DKMDT_VSS_VESA_DMT">
            <summary>Represents the Video Electronics Standards Association (VESA) Display Monitor Timing (DMT) standard.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.D3DKMDT_VIDEO_SIGNAL_STANDARD.D3DKMDT_VSS_VESA_GTF">
            <summary>Represents the VESA Generalized Timing Formula (GTF) standard.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.D3DKMDT_VIDEO_SIGNAL_STANDARD.D3DKMDT_VSS_VESA_CVT">
            <summary>Represents the VESA Coordinated Video Timing (CVT) standard.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.D3DKMDT_VIDEO_SIGNAL_STANDARD.D3DKMDT_VSS_IBM">
            <summary>Represents the IBM standard.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.D3DKMDT_VIDEO_SIGNAL_STANDARD.D3DKMDT_VSS_APPLE">
            <summary>Represents the Apple standard.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.D3DKMDT_VIDEO_SIGNAL_STANDARD.D3DKMDT_VSS_NTSC_M">
            <summary>Represents the National Television Standards Committee (NTSC) standard.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.D3DKMDT_VIDEO_SIGNAL_STANDARD.D3DKMDT_VSS_NTSC_J">
            <summary>Represents the NTSC standard.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.D3DKMDT_VIDEO_SIGNAL_STANDARD.D3DKMDT_VSS_NTSC_443">
            <summary>Represents the NTSC standard.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.D3DKMDT_VIDEO_SIGNAL_STANDARD.D3DKMDT_VSS_PAL_B">
            <summary>Represents the Phase Alteration Line (PAL) standard.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.D3DKMDT_VIDEO_SIGNAL_STANDARD.D3DKMDT_VSS_PAL_B1">
            <summary>Represents the PAL standard.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.D3DKMDT_VIDEO_SIGNAL_STANDARD.D3DKMDT_VSS_PAL_G">
            <summary>Represents the PAL standard.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.D3DKMDT_VIDEO_SIGNAL_STANDARD.D3DKMDT_VSS_PAL_H">
            <summary>Represents the PAL standard.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.D3DKMDT_VIDEO_SIGNAL_STANDARD.D3DKMDT_VSS_PAL_I">
            <summary>Represents the PAL standard.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.D3DKMDT_VIDEO_SIGNAL_STANDARD.D3DKMDT_VSS_PAL_D">
            <summary>Represents the PAL standard.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.D3DKMDT_VIDEO_SIGNAL_STANDARD.D3DKMDT_VSS_PAL_N">
            <summary>Represents the PAL standard.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.D3DKMDT_VIDEO_SIGNAL_STANDARD.D3DKMDT_VSS_PAL_NC">
            <summary>Represents the PAL standard.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.D3DKMDT_VIDEO_SIGNAL_STANDARD.D3DKMDT_VSS_SECAM_B">
            <summary>Represents the Systeme Electronic Pour Couleur Avec Memoire (SECAM) standard.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.D3DKMDT_VIDEO_SIGNAL_STANDARD.D3DKMDT_VSS_SECAM_D">
            <summary>Represents the SECAM standard.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.D3DKMDT_VIDEO_SIGNAL_STANDARD.D3DKMDT_VSS_SECAM_G">
            <summary>Represents the SECAM standard.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.D3DKMDT_VIDEO_SIGNAL_STANDARD.D3DKMDT_VSS_SECAM_H">
            <summary>Represents the SECAM standard.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.D3DKMDT_VIDEO_SIGNAL_STANDARD.D3DKMDT_VSS_SECAM_K">
            <summary>Represents the SECAM standard.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.D3DKMDT_VIDEO_SIGNAL_STANDARD.D3DKMDT_VSS_SECAM_K1">
            <summary>Represents the SECAM standard.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.D3DKMDT_VIDEO_SIGNAL_STANDARD.D3DKMDT_VSS_SECAM_L">
            <summary>Represents the SECAM standard.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.D3DKMDT_VIDEO_SIGNAL_STANDARD.D3DKMDT_VSS_SECAM_L1">
            <summary>Represents the SECAM standard.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.D3DKMDT_VIDEO_SIGNAL_STANDARD.D3DKMDT_VSS_EIA_861">
            <summary>Represents the Electronics Industries Association (EIA) standard.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.D3DKMDT_VIDEO_SIGNAL_STANDARD.D3DKMDT_VSS_EIA_861A">
            <summary>Represents the EIA standard.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.D3DKMDT_VIDEO_SIGNAL_STANDARD.D3DKMDT_VSS_EIA_861B">
            <summary>Represents the EIA standard.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.D3DKMDT_VIDEO_SIGNAL_STANDARD.D3DKMDT_VSS_PAL_K">
            <summary>Represents the PAL standard.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.D3DKMDT_VIDEO_SIGNAL_STANDARD.D3DKMDT_VSS_PAL_K1">
            <summary>Represents the PAL standard.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.D3DKMDT_VIDEO_SIGNAL_STANDARD.D3DKMDT_VSS_PAL_L">
            <summary>Represents the PAL standard.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.D3DKMDT_VIDEO_SIGNAL_STANDARD.D3DKMDT_VSS_PAL_M">
            <summary>Represents the PAL standard.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.D3DKMDT_VIDEO_SIGNAL_STANDARD.D3DKMDT_VSS_OTHER">
            <summary>
            Represents any video standard other than those represented by the previous constants in this enumeration.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.BackgroundMode">
            <summary>The background mode used by the <see cref="M:Vanara.PInvoke.Gdi32.SetBkMode(Vanara.PInvoke.HDC,Vanara.PInvoke.Gdi32.BackgroundMode)"/> function.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BackgroundMode.ERROR">
            <summary>Indicates that on return, the <see cref="M:Vanara.PInvoke.Gdi32.SetBkMode(Vanara.PInvoke.HDC,Vanara.PInvoke.Gdi32.BackgroundMode)"/> has failed.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BackgroundMode.TRANSPARENT">
            <summary>Background remains untouched.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.BackgroundMode.OPAQUE">
            <summary>Background is filled with the current background color before the text, hatched brush, or pen is drawn.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.DCB">
            <summary>Bounds information.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DCB.DCB_RESET">
            <summary>The bounding rectangle is empty.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DCB.DCB_ACCUMULATE">
            <summary>
            Adds the rectangle specified by the lprcBounds parameter to the bounding rectangle (using a rectangle union operation). Using
            both DCB_RESET and DCB_ACCUMULATE sets the bounding rectangle to the rectangle specified by the lprcBounds parameter.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DCB.DCB_DIRTY">
            <summary>Same as DCB_ACCUMULATE.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DCB.DCB_SET">
            <summary>The bounding rectangle is not empty.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DCB.DCB_ENABLE">
            <summary>Boundary accumulation is on.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DCB.DCB_DISABLE">
            <summary>Boundary accumulation is off.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.R2">
            <summary>Foreground mix mode.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.R2.R2_BLACK">
            <summary>Pixel is always 0.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.R2.R2_NOTMERGEPEN">
            <summary>Pixel is the inverse of the R2_MERGEPEN color.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.R2.R2_MASKNOTPEN">
            <summary>Pixel is a combination of the colors common to both the screen and the inverse of the pen.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.R2.R2_NOTCOPYPEN">
            <summary>Pixel is the inverse of the pen color.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.R2.R2_MASKPENNOT">
            <summary>Pixel is a combination of the colors common to both the pen and the inverse of the screen.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.R2.R2_NOT">
            <summary>Pixel is the inverse of the screen color.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.R2.R2_XORPEN">
            <summary>Pixel is a combination of the colors in the pen and in the screen, but not in both.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.R2.R2_NOTMASKPEN">
            <summary>Pixel is the inverse of the R2_MASKPEN color.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.R2.R2_MASKPEN">
            <summary>Pixel is a combination of the colors common to both the pen and the screen.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.R2.R2_NOTXORPEN">
            <summary>Pixel is the inverse of the R2_XORPEN color.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.R2.R2_NOP">
            <summary>Pixel remains unchanged.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.R2.R2_MERGENOTPEN">
            <summary>Pixel is a combination of the screen color and the inverse of the pen color.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.R2.R2_COPYPEN">
            <summary>Pixel is the pen color.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.R2.R2_MERGEPENNOT">
            <summary>Pixel is a combination of the pen color and the inverse of the screen color.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.R2.R2_MERGEPEN">
            <summary>Pixel is a combination of the pen color and the screen color.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.R2.R2_WHITE">
            <summary>Pixel is always 1.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GdiFlush">
            <summary>The <c>GdiFlush</c> function flushes the calling thread's current batch.</summary>
            <returns>
            <para>If all functions in the current batch succeed, the return value is nonzero.</para>
            <para>
            If not all functions in the current batch succeed, the return value is zero, indicating that at least one function returned an error.
            </para>
            </returns>
            <remarks>
            <para>
            Batching enhances drawing performance by minimizing the amount of time needed to call GDI drawing functions that return Boolean
            values. The system accumulates the parameters for calls to these functions in the current batch and then calls the functions when
            the batch is flushed by any of the following means:
            </para>
            <list type="bullet">
            <item>
            <term>Calling the <c>GdiFlush</c> function.</term>
            </item>
            <item>
            <term>Reaching or exceeding the batch limit set by the GdiSetBatchLimit function.</term>
            </item>
            <item>
            <term>Filling the batching buffers.</term>
            </item>
            <item>
            <term>Calling any GDI function that does not return a Boolean value.</term>
            </item>
            </list>
            <para>
            The return value for <c>GdiFlush</c> applies only to the functions in the batch at the time <c>GdiFlush</c> is called. Errors
            that occur when the batch is flushed by any other means are never reported.
            </para>
            <para>The GdiGetBatchLimit function returns the batch limit.</para>
            <para>
            <c>Note</c> The batch limit is maintained for each thread separately. In order to completely disable batching, call
            GdiSetBatchLimit (1) during the initialization of each thread.
            </para>
            <para>
            An application should call <c>GdiFlush</c> before a thread goes away if there is a possibility that there are pending function
            calls in the graphics batch queue. The system does not execute such batched functions when a thread goes away.
            </para>
            <para>
            A multithreaded application that serializes access to GDI objects with a mutex must ensure flushing the GDI batch queue by
            calling <c>GdiFlush</c> as each thread releases ownership of the GDI object. This prevents collisions of the GDI objects (device
            contexts, metafiles, and so on).
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GdiGetBatchLimit">
            <summary>
            The <c>GdiGetBatchLimit</c> function returns the maximum number of function calls that can be accumulated in the calling thread's
            current batch. The system flushes the current batch whenever this limit is exceeded.
            </summary>
            <returns>
            <para>If the function succeeds, the return value is the batch limit.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>The batch limit is set by using the GdiSetBatchLimit function. Setting the limit to 1 effectively disables batching.</para>
            <para>
            Only GDI drawing functions that return Boolean values can be batched; calls to any other GDI functions immediately flush the
            current batch. Exceeding the batch limit or calling the GdiFlush function also flushes the current batch.
            </para>
            <para>
            When the system batches a function call, the function returns <c>TRUE</c>. The actual return value for the function is reported
            only if GdiFlush is used to flush the batch.
            </para>
            <para>
            <c>Note</c> The batch limit is maintained for each thread separately. In order to completely disable batching, call
            GdiSetBatchLimit (1) during the initialization of each thread.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GdiGradientFill(Vanara.PInvoke.HDC,Vanara.PInvoke.Gdi32.TRIVERTEX@,System.UInt32,System.IntPtr,System.UInt32,Vanara.PInvoke.Gdi32.GradientFillMode)">
            <summary>The <c>GdiGradientFill</c> function fills rectangle and triangle structures.</summary>
            <param name="hdc">A handle to the destination device context.</param>
            <param name="pVertex">A pointer to an array of TRIVERTEX structures that each define a triangle vertex.</param>
            <param name="nVertex">The number of vertices in pVertex.</param>
            <param name="pMesh">
            An array of GRADIENT_TRIANGLE structures in triangle mode, or an array of GRADIENT_RECT structures in rectangle mode.
            </param>
            <param name="nCount">The number of elements (triangles or rectangles) in pMesh.</param>
            <param name="ulMode">
            <para>The gradient fill mode. This parameter can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>GRADIENT_FILL_RECT_H</term>
            <term>
            In this mode, two endpoints describe a rectangle. The rectangle is defined to have a constant color (specified by the TRIVERTEX
            structure) for the left and right edges. GDI interpolates the color from the left to right edge and fills the interior.
            </term>
            </item>
            <item>
            <term>GRADIENT_FILL_RECT_V</term>
            <term>
            In this mode, two endpoints describe a rectangle. The rectangle is defined to have a constant color (specified by the TRIVERTEX
            structure) for the top and bottom edges. GDI interpolates the color from the top to bottom edge and fills the interior.
            </term>
            </item>
            <item>
            <term>GRADIENT_FILL_TRIANGLE</term>
            <term>
            In this mode, an array of TRIVERTEX structures is passed to GDI along with a list of array indexes that describe separate
            triangles. GDI performs linear interpolation between triangle vertices and fills the interior. Drawing is done directly in 24-
            and 32-bpp modes. Dithering is performed in 16-, 8-, 4-, and 1-bpp mode.
            </term>
            </item>
            </list>
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>.</para>
            </returns>
            <remarks>
            <para><c>Note</c> This function is the same as GradientFill.</para>
            <para>
            To add smooth shading to a triangle, call the <c>GdiGradientFill</c> function with the three triangle endpoints. GDI will
            linearly interpolate and fill the triangle. Here is the drawing output of a shaded triangle.
            </para>
            <para>
            To add smooth shading to a rectangle, call <c>GdiGradientFill</c> with the upper-left and lower-right coordinates of the
            rectangle. There are two shading modes used when drawing a rectangle. In horizontal mode, the rectangle is shaded from
            left-to-right. In vertical mode, the rectangle is shaded from top-to-bottom. Here is the drawing output of two shaded rectangles
            - one in horizontal mode, the other in vertical mode.
            </para>
            <para>
            The <c>GdiGradientFill</c> function uses a mesh method to specify the endpoints of the object to draw. All vertices are passed
            to <c>GdiGradientFill</c> in the pVertex array. The pMesh parameter specifies how these vertices are connected to form an
            object. When filling a rectangle, pMesh points to an array of GRADIENT_RECT structures. Each <c>GRADIENT_RECT</c> structure
            specifies the index of two vertices in the pVertex array. These two vertices form the upper-left and lower-right boundary of one rectangle.
            </para>
            <para>
            In the case of filling a triangle, pMesh points to an array of GRADIENT_TRIANGLE structures. Each <c>GRADIENT_TRIANGLE</c>
            structure specifies the index of three vertices in the pVertex array. These three vertices form one triangle.
            </para>
            <para>To simplify hardware acceleration, this routine is not required to be pixel-perfect in the triangle interior.</para>
            <para>
            Note that <c>GdiGradientFill</c> does not use the Alpha member of the TRIVERTEX structure. To use <c>GdiGradientFill</c> with
            transparency, call <c>GdiGradientFill</c> and then call GdiAlphaBlend with the desired values for the alpha channel of each vertex.
            </para>
            <para>For more information, see Smooth Shading, Drawing a Shaded Triangle, and Drawing a Shaded Rectangle.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GdiGradientFill(Vanara.PInvoke.HDC,Vanara.PInvoke.Gdi32.TRIVERTEX@,System.UInt32,Vanara.PInvoke.Gdi32.GRADIENT_TRIANGLE[],System.UInt32,Vanara.PInvoke.Gdi32.GradientFillMode)">
            <summary>The <c>GdiGradientFill</c> function fills rectangle and triangle structures.</summary>
            <param name="hdc">A handle to the destination device context.</param>
            <param name="pVertex">A pointer to an array of TRIVERTEX structures that each define a triangle vertex.</param>
            <param name="nVertex">The number of vertices in pVertex.</param>
            <param name="pMesh">
            An array of GRADIENT_TRIANGLE structures in triangle mode, or an array of GRADIENT_RECT structures in rectangle mode.
            </param>
            <param name="nCount">The number of elements (triangles or rectangles) in pMesh.</param>
            <param name="ulMode">
            <para>The gradient fill mode. This parameter can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>GRADIENT_FILL_RECT_H</term>
            <term>
            In this mode, two endpoints describe a rectangle. The rectangle is defined to have a constant color (specified by the TRIVERTEX
            structure) for the left and right edges. GDI interpolates the color from the left to right edge and fills the interior.
            </term>
            </item>
            <item>
            <term>GRADIENT_FILL_RECT_V</term>
            <term>
            In this mode, two endpoints describe a rectangle. The rectangle is defined to have a constant color (specified by the TRIVERTEX
            structure) for the top and bottom edges. GDI interpolates the color from the top to bottom edge and fills the interior.
            </term>
            </item>
            <item>
            <term>GRADIENT_FILL_TRIANGLE</term>
            <term>
            In this mode, an array of TRIVERTEX structures is passed to GDI along with a list of array indexes that describe separate
            triangles. GDI performs linear interpolation between triangle vertices and fills the interior. Drawing is done directly in 24-
            and 32-bpp modes. Dithering is performed in 16-, 8-, 4-, and 1-bpp mode.
            </term>
            </item>
            </list>
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>.</para>
            </returns>
            <remarks>
            <para><c>Note</c> This function is the same as GradientFill.</para>
            <para>
            To add smooth shading to a triangle, call the <c>GdiGradientFill</c> function with the three triangle endpoints. GDI will
            linearly interpolate and fill the triangle. Here is the drawing output of a shaded triangle.
            </para>
            <para>
            To add smooth shading to a rectangle, call <c>GdiGradientFill</c> with the upper-left and lower-right coordinates of the
            rectangle. There are two shading modes used when drawing a rectangle. In horizontal mode, the rectangle is shaded from
            left-to-right. In vertical mode, the rectangle is shaded from top-to-bottom. Here is the drawing output of two shaded rectangles
            - one in horizontal mode, the other in vertical mode.
            </para>
            <para>
            The <c>GdiGradientFill</c> function uses a mesh method to specify the endpoints of the object to draw. All vertices are passed
            to <c>GdiGradientFill</c> in the pVertex array. The pMesh parameter specifies how these vertices are connected to form an
            object. When filling a rectangle, pMesh points to an array of GRADIENT_RECT structures. Each <c>GRADIENT_RECT</c> structure
            specifies the index of two vertices in the pVertex array. These two vertices form the upper-left and lower-right boundary of one rectangle.
            </para>
            <para>
            In the case of filling a triangle, pMesh points to an array of GRADIENT_TRIANGLE structures. Each <c>GRADIENT_TRIANGLE</c>
            structure specifies the index of three vertices in the pVertex array. These three vertices form one triangle.
            </para>
            <para>To simplify hardware acceleration, this routine is not required to be pixel-perfect in the triangle interior.</para>
            <para>
            Note that <c>GdiGradientFill</c> does not use the Alpha member of the TRIVERTEX structure. To use <c>GdiGradientFill</c> with
            transparency, call <c>GdiGradientFill</c> and then call GdiAlphaBlend with the desired values for the alpha channel of each vertex.
            </para>
            <para>For more information, see Smooth Shading, Drawing a Shaded Triangle, and Drawing a Shaded Rectangle.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GdiGradientFill(Vanara.PInvoke.HDC,Vanara.PInvoke.Gdi32.TRIVERTEX@,System.UInt32,Vanara.PInvoke.Gdi32.GRADIENT_RECT[],System.UInt32,Vanara.PInvoke.Gdi32.GradientFillMode)">
            <summary>The <c>GdiGradientFill</c> function fills rectangle and triangle structures.</summary>
            <param name="hdc">A handle to the destination device context.</param>
            <param name="pVertex">A pointer to an array of TRIVERTEX structures that each define a triangle vertex.</param>
            <param name="nVertex">The number of vertices in pVertex.</param>
            <param name="pMesh">
            An array of GRADIENT_TRIANGLE structures in triangle mode, or an array of GRADIENT_RECT structures in rectangle mode.
            </param>
            <param name="nCount">The number of elements (triangles or rectangles) in pMesh.</param>
            <param name="ulMode">
            <para>The gradient fill mode. This parameter can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>GRADIENT_FILL_RECT_H</term>
            <term>
            In this mode, two endpoints describe a rectangle. The rectangle is defined to have a constant color (specified by the TRIVERTEX
            structure) for the left and right edges. GDI interpolates the color from the left to right edge and fills the interior.
            </term>
            </item>
            <item>
            <term>GRADIENT_FILL_RECT_V</term>
            <term>
            In this mode, two endpoints describe a rectangle. The rectangle is defined to have a constant color (specified by the TRIVERTEX
            structure) for the top and bottom edges. GDI interpolates the color from the top to bottom edge and fills the interior.
            </term>
            </item>
            <item>
            <term>GRADIENT_FILL_TRIANGLE</term>
            <term>
            In this mode, an array of TRIVERTEX structures is passed to GDI along with a list of array indexes that describe separate
            triangles. GDI performs linear interpolation between triangle vertices and fills the interior. Drawing is done directly in 24-
            and 32-bpp modes. Dithering is performed in 16-, 8-, 4-, and 1-bpp mode.
            </term>
            </item>
            </list>
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>.</para>
            </returns>
            <remarks>
            <para><c>Note</c> This function is the same as GradientFill.</para>
            <para>
            To add smooth shading to a triangle, call the <c>GdiGradientFill</c> function with the three triangle endpoints. GDI will
            linearly interpolate and fill the triangle. Here is the drawing output of a shaded triangle.
            </para>
            <para>
            To add smooth shading to a rectangle, call <c>GdiGradientFill</c> with the upper-left and lower-right coordinates of the
            rectangle. There are two shading modes used when drawing a rectangle. In horizontal mode, the rectangle is shaded from
            left-to-right. In vertical mode, the rectangle is shaded from top-to-bottom. Here is the drawing output of two shaded rectangles
            - one in horizontal mode, the other in vertical mode.
            </para>
            <para>
            The <c>GdiGradientFill</c> function uses a mesh method to specify the endpoints of the object to draw. All vertices are passed
            to <c>GdiGradientFill</c> in the pVertex array. The pMesh parameter specifies how these vertices are connected to form an
            object. When filling a rectangle, pMesh points to an array of GRADIENT_RECT structures. Each <c>GRADIENT_RECT</c> structure
            specifies the index of two vertices in the pVertex array. These two vertices form the upper-left and lower-right boundary of one rectangle.
            </para>
            <para>
            In the case of filling a triangle, pMesh points to an array of GRADIENT_TRIANGLE structures. Each <c>GRADIENT_TRIANGLE</c>
            structure specifies the index of three vertices in the pVertex array. These three vertices form one triangle.
            </para>
            <para>To simplify hardware acceleration, this routine is not required to be pixel-perfect in the triangle interior.</para>
            <para>
            Note that <c>GdiGradientFill</c> does not use the Alpha member of the TRIVERTEX structure. To use <c>GdiGradientFill</c> with
            transparency, call <c>GdiGradientFill</c> and then call GdiAlphaBlend with the desired values for the alpha channel of each vertex.
            </para>
            <para>For more information, see Smooth Shading, Drawing a Shaded Triangle, and Drawing a Shaded Rectangle.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GdiSetBatchLimit(System.UInt32)">
            <summary>
            The <c>GdiSetBatchLimit</c> function sets the maximum number of function calls that can be accumulated in the calling thread's
            current batch. The system flushes the current batch whenever this limit is exceeded.
            </summary>
            <param name="dw">Specifies the batch limit to be set. A value of 0 sets the default limit. A value of 1 disables batching.</param>
            <returns>
            <para>If the function succeeds, the return value is the previous batch limit.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>
            Only GDI drawing functions that return Boolean values can be accumulated in the current batch; calls to any other GDI functions
            immediately flush the current batch. Exceeding the batch limit or calling the GdiFlush function also flushes the current batch.
            </para>
            <para>
            When the system accumulates a function call, the function returns <c>TRUE</c> to indicate it is in the batch. When the system
            flushes the current batch and executes the function for the second time, the return value is either <c>TRUE</c> or <c>FALSE</c>,
            depending on whether the function succeeds. This second return value is reported only if GdiFlush is used to flush the batch.
            </para>
            <para>
            <c>Note</c> The batch limit is maintained for each thread separately. In order to completely disable batching, call
            <c>GdiSetBatchLimit</c> (1) during the initialization of each thread.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetBkColor(Vanara.PInvoke.HDC)">
            <summary>The <c>GetBkColor</c> function returns the current background color for the specified device context.</summary>
            <param name="hdc">Handle to the device context whose background color is to be returned.</param>
            <returns>
            <para>If the function succeeds, the return value is a COLORREF value for the current background color.</para>
            <para>If the function fails, the return value is CLR_INVALID.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetBkMode(Vanara.PInvoke.HDC)">
            <summary>
            The <c>GetBkMode</c> function returns the current background mix mode for a specified device context. The background mix mode of
            a device context affects text, hatched brushes, and pen styles that are not solid lines.
            </summary>
            <param name="hdc">Handle to the device context whose background mode is to be returned.</param>
            <returns>
            <para>If the function succeeds, the return value specifies the current background mix mode, either OPAQUE or TRANSPARENT.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetBoundsRect(Vanara.PInvoke.HDC,Vanara.PInvoke.RECT@,Vanara.PInvoke.Gdi32.DCB)">
            <summary>
            <para>The <c>GetBoundsRect</c> function obtains the current accumulated bounding rectangle for a specified device context.</para>
            <para>
            The system maintains an accumulated bounding rectangle for each application. An application can retrieve and set this rectangle.
            </para>
            </summary>
            <param name="hdc">A handle to the device context whose bounding rectangle the function will return.</param>
            <param name="lprect">
            A pointer to the RECT structure that will receive the current bounding rectangle. The application's rectangle is returned in
            logical coordinates, and the bounding rectangle is returned in screen coordinates.
            </param>
            <param name="flags">
            <para>Specifies how the <c>GetBoundsRect</c> function will behave. This parameter can be the following value.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>DCB_RESET</term>
            <term>Clears the bounding rectangle after returning it. If this flag is not set, the bounding rectangle will not be cleared.</term>
            </item>
            </list>
            </param>
            <returns>
            <para>The return value specifies the state of the accumulated bounding rectangle; it can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>0</term>
            <term>An error occurred. The specified device context handle is invalid.</term>
            </item>
            <item>
            <term>DCB_DISABLE</term>
            <term>Boundary accumulation is off.</term>
            </item>
            <item>
            <term>DCB_ENABLE</term>
            <term>Boundary accumulation is on.</term>
            </item>
            <item>
            <term>DCB_RESET</term>
            <term>The bounding rectangle is empty.</term>
            </item>
            <item>
            <term>DCB_SET</term>
            <term>The bounding rectangle is not empty.</term>
            </item>
            </list>
            </returns>
            <remarks>
            The DCB_SET value is a combination of the bit values DCB_ACCUMULATE and DCB_RESET. Applications that check the DCB_RESET bit to
            determine whether the bounding rectangle is empty must also check the DCB_ACCUMULATE bit. The bounding rectangle is empty only if
            the DCB_RESET bit is 1 and the DCB_ACCUMULATE bit is 0.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetROP2(Vanara.PInvoke.HDC)">
            <summary>
            The <c>GetROP2</c> function retrieves the foreground mix mode of the specified device context. The mix mode specifies how the pen
            or interior color and the color already on the screen are combined to yield a new color.
            </summary>
            <param name="hdc">Handle to the device context.</param>
            <returns>
            <para>If the function succeeds, the return value specifies the foreground mix mode.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>Following are the foreground mix modes.</para>
            <list type="table">
            <listheader>
            <term>Mix mode</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>R2_BLACK</term>
            <term>Pixel is always 0.</term>
            </item>
            <item>
            <term>R2_COPYPEN</term>
            <term>Pixel is the pen color.</term>
            </item>
            <item>
            <term>R2_MASKNOTPEN</term>
            <term>Pixel is a combination of the colors common to both the screen and the inverse of the pen.</term>
            </item>
            <item>
            <term>R2_MASKPEN</term>
            <term>Pixel is a combination of the colors common to both the pen and the screen.</term>
            </item>
            <item>
            <term>R2_MASKPENNOT</term>
            <term>Pixel is a combination of the colors common to both the pen and the inverse of the screen.</term>
            </item>
            <item>
            <term>R2_MERGENOTPEN</term>
            <term>Pixel is a combination of the screen color and the inverse of the pen color.</term>
            </item>
            <item>
            <term>R2_MERGEPEN</term>
            <term>Pixel is a combination of the pen color and the screen color.</term>
            </item>
            <item>
            <term>R2_MERGEPENNOT</term>
            <term>Pixel is a combination of the pen color and the inverse of the screen color.</term>
            </item>
            <item>
            <term>R2_NOP</term>
            <term>Pixel remains unchanged.</term>
            </item>
            <item>
            <term>R2_NOT</term>
            <term>Pixel is the inverse of the screen color.</term>
            </item>
            <item>
            <term>R2_NOTCOPYPEN</term>
            <term>Pixel is the inverse of the pen color.</term>
            </item>
            <item>
            <term>R2_NOTMASKPEN</term>
            <term>Pixel is the inverse of the R2_MASKPEN color.</term>
            </item>
            <item>
            <term>R2_NOTMERGEPEN</term>
            <term>Pixel is the inverse of the R2_MERGEPEN color.</term>
            </item>
            <item>
            <term>R2_NOTXORPEN</term>
            <term>Pixel is the inverse of the R2_XORPEN color.</term>
            </item>
            <item>
            <term>R2_WHITE</term>
            <term>Pixel is always 1.</term>
            </item>
            <item>
            <term>R2_XORPEN</term>
            <term>Pixel is a combination of the colors in the pen and in the screen, but not in both.</term>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SetBkColor(Vanara.PInvoke.HDC,Vanara.PInvoke.COLORREF)">
            <summary>
            The <c>SetBkColor</c> function sets the current background color to the specified color value, or to the nearest physical color
            if the device cannot represent the specified color value.
            </summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="color">The new background color. To make a COLORREF value, use the RGB macro.</param>
            <returns>
            <para>If the function succeeds, the return value specifies the previous background color as a COLORREF value.</para>
            <para>If the function fails, the return value is CLR_INVALID.</para>
            </returns>
            <remarks>
            <para>
            This function fills the gaps between styled lines drawn using a pen created by the CreatePen function; it does not fill the gaps
            between styled lines drawn using a pen created by the ExtCreatePen function. The <c>SetBkColor</c> function also sets the
            background colors for TextOut and ExtTextOut.
            </para>
            <para>
            If the background mode is OPAQUE, the background color is used to fill gaps between styled lines, gaps between hatched lines in
            brushes, and character cells. The background color is also used when converting bitmaps from color to monochrome and vice versa.
            </para>
            <para>Examples</para>
            <para>For an example, see "Example of Owner-Drawn Menu Items" in Using Menus.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SetBkMode(Vanara.PInvoke.HDC,Vanara.PInvoke.Gdi32.BackgroundMode)">
            <summary>
            The <c>SetBkMode</c> function sets the background mix mode of the specified device context. The background mix mode is used with
            text, hatched brushes, and pen styles that are not solid lines.
            </summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="mode">
            <para>The background mode. This parameter can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>OPAQUE</term>
            <term>Background is filled with the current background color before the text, hatched brush, or pen is drawn.</term>
            </item>
            <item>
            <term>TRANSPARENT</term>
            <term>Background remains untouched.</term>
            </item>
            </list>
            </param>
            <returns>
            <para>If the function succeeds, the return value specifies the previous background mode.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>
            The <c>SetBkMode</c> function affects the line styles for lines drawn using a pen created by the CreatePen function.
            <c>SetBkMode</c> does not affect lines drawn using a pen created by the ExtCreatePen function.
            </para>
            <para>Examples</para>
            <para>
            To see how to make the background of a hatch brush transparent or opaque, refer to the example shown in the CreateHatchBrush topic.
            </para>
            <para>
            The next example draws a string 36 times, rotating it 10 degrees counterclockwise each time. It also sets the background mode to
            transparent to make the text visible.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SetBoundsRect(Vanara.PInvoke.HDC,Vanara.PInvoke.RECT@,Vanara.PInvoke.Gdi32.DCB)">
            <summary>
            The <c>SetBoundsRect</c> function controls the accumulation of bounding rectangle information for the specified device context.
            The system can maintain a bounding rectangle for all drawing operations. An application can examine and set this rectangle. The
            drawing boundaries are useful for invalidating bitmap caches.
            </summary>
            <param name="hdc">A handle to the device context for which to accumulate bounding rectangles.</param>
            <param name="lprect">
            A pointer to a RECT structure used to set the bounding rectangle. Rectangle dimensions are in logical coordinates. This parameter
            can be <c>NULL</c>.
            </param>
            <param name="flags">
            <para>
            Specifies how the new rectangle will be combined with the accumulated rectangle. This parameter can be one of more of the
            following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>DCB_ACCUMULATE</term>
            <term>
            Adds the rectangle specified by the lprcBounds parameter to the bounding rectangle (using a rectangle union operation). Using
            both DCB_RESET and DCB_ACCUMULATE sets the bounding rectangle to the rectangle specified by the lprcBounds parameter.
            </term>
            </item>
            <item>
            <term>DCB_DISABLE</term>
            <term>Turns off boundary accumulation.</term>
            </item>
            <item>
            <term>DCB_ENABLE</term>
            <term>Turns on boundary accumulation, which is disabled by default.</term>
            </item>
            <item>
            <term>DCB_RESET</term>
            <term>Clears the bounding rectangle.</term>
            </item>
            </list>
            </param>
            <returns>
            <para>
            If the function succeeds, the return value specifies the previous state of the bounding rectangle. This state can be a
            combination of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>DCB_DISABLE</term>
            <term>Boundary accumulation is off.</term>
            </item>
            <item>
            <term>DCB_ENABLE</term>
            <term>Boundary accumulation is on. DCB_ENABLE and DCB_DISABLE are mutually exclusive.</term>
            </item>
            <item>
            <term>DCB_RESET</term>
            <term>Bounding rectangle is empty.</term>
            </item>
            <item>
            <term>DCB_SET</term>
            <term>Bounding rectangle is not empty. DCB_SET and DCB_RESET are mutually exclusive.</term>
            </item>
            </list>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            The DCB_SET value is a combination of the bit values DCB_ACCUMULATE and DCB_RESET. Applications that check the DCB_RESET bit to
            determine whether the bounding rectangle is empty must also check the DCB_ACCUMULATE bit. The bounding rectangle is empty only if
            the DCB_RESET bit is 1 and the DCB_ACCUMULATE bit is 0.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SetBoundsRect(Vanara.PInvoke.HDC,System.IntPtr,Vanara.PInvoke.Gdi32.DCB)">
            <summary>
            The <c>SetBoundsRect</c> function controls the accumulation of bounding rectangle information for the specified device context.
            The system can maintain a bounding rectangle for all drawing operations. An application can examine and set this rectangle. The
            drawing boundaries are useful for invalidating bitmap caches.
            </summary>
            <param name="hdc">A handle to the device context for which to accumulate bounding rectangles.</param>
            <param name="lprect">
            A pointer to a RECT structure used to set the bounding rectangle. Rectangle dimensions are in logical coordinates. This parameter
            can be <c>NULL</c>.
            </param>
            <param name="flags">
            <para>
            Specifies how the new rectangle will be combined with the accumulated rectangle. This parameter can be one of more of the
            following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>DCB_ACCUMULATE</term>
            <term>
            Adds the rectangle specified by the lprcBounds parameter to the bounding rectangle (using a rectangle union operation). Using
            both DCB_RESET and DCB_ACCUMULATE sets the bounding rectangle to the rectangle specified by the lprcBounds parameter.
            </term>
            </item>
            <item>
            <term>DCB_DISABLE</term>
            <term>Turns off boundary accumulation.</term>
            </item>
            <item>
            <term>DCB_ENABLE</term>
            <term>Turns on boundary accumulation, which is disabled by default.</term>
            </item>
            <item>
            <term>DCB_RESET</term>
            <term>Clears the bounding rectangle.</term>
            </item>
            </list>
            </param>
            <returns>
            <para>
            If the function succeeds, the return value specifies the previous state of the bounding rectangle. This state can be a
            combination of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>DCB_DISABLE</term>
            <term>Boundary accumulation is off.</term>
            </item>
            <item>
            <term>DCB_ENABLE</term>
            <term>Boundary accumulation is on. DCB_ENABLE and DCB_DISABLE are mutually exclusive.</term>
            </item>
            <item>
            <term>DCB_RESET</term>
            <term>Bounding rectangle is empty.</term>
            </item>
            <item>
            <term>DCB_SET</term>
            <term>Bounding rectangle is not empty. DCB_SET and DCB_RESET are mutually exclusive.</term>
            </item>
            </list>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            The DCB_SET value is a combination of the bit values DCB_ACCUMULATE and DCB_RESET. Applications that check the DCB_RESET bit to
            determine whether the bounding rectangle is empty must also check the DCB_ACCUMULATE bit. The bounding rectangle is empty only if
            the DCB_RESET bit is 1 and the DCB_ACCUMULATE bit is 0.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SetROP2(Vanara.PInvoke.HDC,Vanara.PInvoke.Gdi32.R2)">
            <summary>
            The <c>SetROP2</c> function sets the current foreground mix mode. GDI uses the foreground mix mode to combine pens and interiors
            of filled objects with the colors already on the screen. The foreground mix mode defines how colors from the brush or pen and the
            colors in the existing image are to be combined.
            </summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="rop2">
            <para>The mix mode. This parameter can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Mix mode</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>R2_BLACK</term>
            <term>Pixel is always 0.</term>
            </item>
            <item>
            <term>R2_COPYPEN</term>
            <term>Pixel is the pen color.</term>
            </item>
            <item>
            <term>R2_MASKNOTPEN</term>
            <term>Pixel is a combination of the colors common to both the screen and the inverse of the pen.</term>
            </item>
            <item>
            <term>R2_MASKPEN</term>
            <term>Pixel is a combination of the colors common to both the pen and the screen.</term>
            </item>
            <item>
            <term>R2_MASKPENNOT</term>
            <term>Pixel is a combination of the colors common to both the pen and the inverse of the screen.</term>
            </item>
            <item>
            <term>R2_MERGENOTPEN</term>
            <term>Pixel is a combination of the screen color and the inverse of the pen color.</term>
            </item>
            <item>
            <term>R2_MERGEPEN</term>
            <term>Pixel is a combination of the pen color and the screen color.</term>
            </item>
            <item>
            <term>R2_MERGEPENNOT</term>
            <term>Pixel is a combination of the pen color and the inverse of the screen color.</term>
            </item>
            <item>
            <term>R2_NOP</term>
            <term>Pixel remains unchanged.</term>
            </item>
            <item>
            <term>R2_NOT</term>
            <term>Pixel is the inverse of the screen color.</term>
            </item>
            <item>
            <term>R2_NOTCOPYPEN</term>
            <term>Pixel is the inverse of the pen color.</term>
            </item>
            <item>
            <term>R2_NOTMASKPEN</term>
            <term>Pixel is the inverse of the R2_MASKPEN color.</term>
            </item>
            <item>
            <term>R2_NOTMERGEPEN</term>
            <term>Pixel is the inverse of the R2_MERGEPEN color.</term>
            </item>
            <item>
            <term>R2_NOTXORPEN</term>
            <term>Pixel is the inverse of the R2_XORPEN color.</term>
            </item>
            <item>
            <term>R2_WHITE</term>
            <term>Pixel is always 1.</term>
            </item>
            <item>
            <term>R2_XORPEN</term>
            <term>Pixel is a combination of the colors in the pen and in the screen, but not in both.</term>
            </item>
            </list>
            </param>
            <returns>
            <para>If the function succeeds, the return value specifies the previous mix mode.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>
            Mix modes define how GDI combines source and destination colors when drawing with the current pen. The mix modes are binary
            raster operation codes, representing all possible Boolean functions of two variables, using the binary operations AND, OR, and
            XOR (exclusive OR), and the unary operation NOT. The mix mode is for raster devices only; it is not available for vector devices.
            </para>
            <para>Examples</para>
            <para>For an example, see Using Rectangles.</para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.FLI_MASK">
            <summary>Mask for GetFontLanguageInfo results.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.FW_BOLD">
            <summary>Font weight value.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.FW_DONTCARE">
            <summary>Font weight value.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.FW_EXTRABOLD">
            <summary>Font weight value.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.FW_EXTRALIGHT">
            <summary>Font weight value.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.FW_HEAVY">
            <summary>Font weight value.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.FW_LIGHT">
            <summary>Font weight value.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.FW_MEDIUM">
            <summary>Font weight value.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.FW_NORMAL">
            <summary>Font weight value.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.FW_SEMIBOLD">
            <summary>Font weight value.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.FW_THIN">
            <summary>Font weight value.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.GCP_ERROR">
            <summary>Error value for some functions.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.GCPGLYPH_LINKAFTER">
            <summary>Value for <see cref="T:Vanara.PInvoke.Gdi32.GCP_RESULTS"/><c>.lpGlyph</c> field.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.GCPGLYPH_LINKBEFORE">
            <summary>Value for <see cref="T:Vanara.PInvoke.Gdi32.GCP_RESULTS"/><c>.lpGlyph</c> field.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.GDI_ERROR">
            <summary>Represents a generic GDI error.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.EnableEUDC(System.Boolean)">
            <summary>This function enables or disables support for end-user-defined characters (EUDC).</summary>
            <param name="fEnableEUDC">Boolean that is set to <c>TRUE</c> to enable EUDC, and to <c>FALSE</c> to disable EUDC.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>If EUDC is disabled, trying to display EUDC characters will result in missing or bad glyphs.</para>
            <para>During multi-session, this function affects the current session only.</para>
            <para>It is recommended that you use this function with Windows XP SP2 or later.</para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.EnumFontFamExProc">
            <summary>
            The <c>EnumFontFamExProc</c> function is an application defined callback function used with the <c>EnumFontFamiliesEx</c>
            function. It is used to process the fonts. It is called once for each enumerated font. The <c>FONTENUMPROC</c> type defines a
            pointer to this callback function. <c>EnumFontFamExProc</c> is a placeholder for the application defined function name.
            </summary>
            <param name="lpelfe">
            A pointer to an <c>LOGFONT</c> structure that contains information about the logical attributes of the font. To obtain additional
            information about the font, you can cast the result as an <c>ENUMLOGFONTEX</c> or <c>ENUMLOGFONTEXDV</c> structure.
            </param>
            <param name="lpntme">
            <para>
            A pointer to a structure that contains information about the physical attributes of a font. The function uses the
            <c>NEWTEXTMETRICEX</c> structure for TrueType fonts; and the <c>TEXTMETRIC</c> structure for other fonts.
            </para>
            <para>This can be an <c>ENUMTEXTMETRIC</c> structure.</para>
            </param>
            <param name="FontType">
            <para>The type of the font. This parameter can be a combination of these values:</para>
            <para><c>DEVICE_FONTTYPE</c></para>
            <para><c>RASTER_FONTTYPE</c></para>
            <para><c>TRUETYPE_FONTTYPE</c></para>
            </param>
            <param name="lParam">The application-defined data passed by the <c>EnumFontFamiliesEx</c> function.</param>
            <returns>
            The return value must be a nonzero value to continue enumeration; to stop enumeration, the return value must be zero.
            </returns>
            <remarks>
            <para>An application must register this callback function by passing its address to the <c>EnumFontFamiliesEx</c> function.</para>
            <para>
            When the graphics mode on the device context is set to GM_ADVANCED using the <c>SetGraphicsMode</c> function and the
            DEVICE_FONTTYPE flag is passed to the FontType parameter, this function returns a list of type 1 and OpenType fonts on the
            system. When the graphics mode is not set to GM_ADVANCED, this function returns a list of type 1, OpenType, and TrueType fonts on
            the system.
            </para>
            <para>
            Unlike the <c>EnumFontFamProc</c> callback function, <c>EnumFontFamExProc</c> receives extended information about a font. The
            <c>ENUMLOGFONTEX</c> structure includes the localized name of the script (character set) and the <c>NEWTEXTMETRICEX</c> structure
            includes a font-coverage signature.
            </para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.EnumFontFamProc">
            <summary>
            <para>
            The <c>EnumFontFamProc</c> function is an application defined callback function used with the <c>EnumFontFamilies</c> function.
            It receives data describing the available fonts. The <c>FONTENUMPROC</c> type defines a pointer to this callback function.
            <c>EnumFontFamProc</c> is a placeholder for the application definedfunction name.
            </para>
            <para>
            <c>Note</c> This function is provided only for compatibility with 16-bit versions of Windows. Applications should call the
            <c>EnumFontFamiliesEx</c> function.
            </para>
            </summary>
            <param name="lpelf">
            <para>[in]</para>
            <para>
            A pointer to an <c>ENUMLOGFONT</c> structure that contains information about the logical attributes of the font. This structure
            is locally defined.
            </para>
            <para>This can be an <c>ENUMLOGFONTEXDV</c> structure.</para>
            </param>
            <param name="lpntm">
            <para>[in]</para>
            <para>
            A pointer to a <c>NEWTEXTMETRIC</c> structure that contains information about the physical attributes of the font, if the font is
            a TrueType font. If the font is not a TrueType font, this parameter is a pointer to a <c>TEXTMETRIC</c> structure.
            </para>
            <para>This can be an <c>ENUMTEXTMETRIC</c> structure.</para>
            </param>
            <param name="FontType">
            <para>[in]</para>
            <para>The type of the font. This parameter can be a combination of the following values:</para>
            <para><c>DEVICE_FONTTYPE</c></para>
            <para><c>RASTER_FONTTYPE</c></para>
            <para><c>TRUETYPE_FONTTYPE</c></para>
            </param>
            <param name="lParam">
            <para>[in]</para>
            <para>A pointer to the application-defined data passed by the <c>EnumFontFamilies</c> function.</para>
            </param>
            <returns>The return value must be a nonzero value to continue enumeration; to stop enumeration, it must return zero.</returns>
            <remarks>
            <para>An application must register this callback function by passing its address to the <c>EnumFontFamilies</c> function.</para>
            <para>
            When the graphics mode on the device context is set to GM_ADVANCED using the <c>SetGraphicsMode</c> function and the
            DEVICE_FONTTYPE flag is passed to the FontType parameter, this function returns a list of type 1 and OpenType fonts on the
            system. When the graphics mode is not set to GM_ADVANCED, this function returns a list of type 1, OpenType, and TrueType fonts on
            the system.
            </para>
            <para>
            The AND (&amp;) operator can be used with the RASTER_FONTTYPE, DEVICE_FONTTYPE, and TRUETYPE_FONTTYPE constants to determine the
            font type. If the RASTER_FONTTYPE bit is set, the font is a raster font. If the TRUETYPE_FONTTYPE bit is set, the font is a
            TrueType font. If neither bit is set, the font is a vector font. DEVICE_FONTTYPE is set when a device (for example, a laser
            printer) supports downloading TrueType fonts or when the font is a device-resident font; it is zero if the device is a display
            adapter, dot-matrix printer, or other raster device. An application can also use DEVICE_FONTTYPE to distinguish graphics device
            interface (GDI)-supplied raster fonts from device-supplied fonts. GDI can simulate bold, italic, underline, and strikeout
            attributes for GDI-supplied raster fonts, but not for device-supplied fonts.
            </para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.EnumFontsProc">
            <summary>
            <para>
            The <c>EnumFontsProc</c> function is an application definedcallback function that processes font data from the <c>EnumFonts</c>
            function. The <c>FONTENUMPROC</c> type defines a pointer to this callback function. <c>EnumFontsProc</c> is a placeholder for the
            application definedfunction name.
            </para>
            <para>
            <c>Note</c> This function is provided only for compatibility with 16-bit versions of Windows. Applications should call the
            <c>EnumFontFamiliesEx</c> function.
            </para>
            </summary>
            <param name="lplf">
            <para>[in]</para>
            <para>A pointer to a <c>LOGFONT</c> structure that contains information about the logical attributes of the font.</para>
            <para>This can be an <c>ENUMLOGFONTEXDV</c> structure.</para>
            </param>
            <param name="lptm">
            <para>[in]</para>
            <para>A pointer to a <c>TEXTMETRIC</c> structure that contains information about the physical attributes of the font.</para>
            <para>This can be an <c>ENUMTEXTMETRIC</c> structure.</para>
            </param>
            <param name="dwType">
            <para>[in]</para>
            <para>The type of the font. This parameter can be a combination of the following values:</para>
            <para><c>DEVICE_FONTTYPE</c></para>
            <para><c>RASTER_FONTTYPE</c></para>
            <para><c>TRUETYPE_FONTTYPE</c></para>
            </param>
            <param name="lpData">
            <para>[in]</para>
            <para>A pointer to the application-defined data passed by <c>EnumFonts</c>.</para>
            </param>
            <returns>The return value must be a nonzero value to continue enumeration; to stop enumeration, it must be zero.</returns>
            <remarks>
            <para>
            The AND (&amp;) operator can be used with the RASTER_FONTTYPE and DEVICE_FONTTYPE constants to determine the font type. The
            RASTER_FONTTYPE bit of the FontType parameter specifies whether the font is a raster or vector font. If the bit is one, the font
            is a raster font; if zero, it is a vector font. The DEVICE_FONTTYPE bit of FontType specifies whether the font is a device-based
            or graphics device interface (GDI)-based font. If the bit is one, the font is a device-based font; if zero, it is a GDI-based font.
            </para>
            <para>
            If the device is capable of text transformations (scaling, italicizing, and so on) only the base font is enumerated. The user
            must inquire into the device's text-transformation abilities to determine which additional fonts are available directly from the device.
            </para>
            <para>An application must register the <c>EnumFontsProc</c> function by passing its address to the <c>EnumFonts</c> function.</para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.CharacterSetUint">
            <summary>The character set (4-bytes).</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.CharacterSetUint.ANSI_CHARSET">
            <summary>Specifies the English character set.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.CharacterSetUint.DEFAULT_CHARSET">
            <summary>
            Specifies a character set based on the current system locale; for example, when the system locale is United States English,
            the default character set is ANSI_CHARSET.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.CharacterSetUint.SYMBOL_CHARSET">
            <summary>Specifies a character set of symbols.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.CharacterSetUint.SHIFTJIS_CHARSET">
            <summary>Specifies the Japanese character set.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.CharacterSetUint.HANGEUL_CHARSET">
            <summary>Specifies the Hangul Korean character set.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.CharacterSetUint.HANGUL_CHARSET">
            <summary>Also spelled "Hangeul". Specifies the Hangul Korean character set.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.CharacterSetUint.GB2312_CHARSET">
            <summary>Specifies the "simplified" Chinese character set for People's Republic of China.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.CharacterSetUint.CHINESEBIG5_CHARSET">
            <summary>
            Specifies the "traditional" Chinese character set, used mostly in Taiwan and in the Hong Kong and Macao Special
            Administrative Regions.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.CharacterSetUint.OEM_CHARSET">
            <summary>Specifies a mapping to one of the OEM code pages, according to the current system locale setting.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.CharacterSetUint.JOHAB_CHARSET">
            <summary>Also spelled "Johap". Specifies the Johab Korean character set.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.CharacterSetUint.HEBREW_CHARSET">
            <summary>Specifies the Hebrew character set.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.CharacterSetUint.ARABIC_CHARSET">
            <summary>Specifies the Arabic character set.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.CharacterSetUint.GREEK_CHARSET">
            <summary>Specifies the Greek character set.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.CharacterSetUint.TURKISH_CHARSET">
            <summary>Specifies the Turkish character set.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.CharacterSetUint.VIETNAMESE_CHARSET">
            <summary>Specifies the Vietnamese character set.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.CharacterSetUint.THAI_CHARSET">
            <summary>Specifies the Thai character set.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.CharacterSetUint.EASTEUROPE_CHARSET">
            <summary>Specifies a Eastern European character set.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.CharacterSetUint.RUSSIAN_CHARSET">
            <summary>Specifies the Russian Cyrillic character set.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.CharacterSetUint.MAC_CHARSET">
            <summary>Specifies the Apple Macintosh character set.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.CharacterSetUint.BALTIC_CHARSET">
            <summary>Specifies the Baltic (Northeastern European) character set.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.ClippingPrecision">
            <summary>The clipping precision defines how to clip characters that are partially outside the clipping region.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ClippingPrecision.CLIP_CHARACTER_PRECIS">
            <summary>Not used.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ClippingPrecision.CLIP_DEFAULT_PRECIS">
            <summary>Specifies default clipping behavior.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ClippingPrecision.CLIP_DFA_DISABLE">
            <summary>
            Windows XP SP1: Turns off font association for the font. Note that this flag is not guaranteed to have any effect on any
            platform after Windows Server 2003.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ClippingPrecision.CLIP_DFA_OVERRIDE">
            <summary>
            Turns off font association for the font. This is identical to CLIP_DFA_DISABLE, but it can have problems in some situations;
            the recommended flag to use is CLIP_DFA_DISABLE.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ClippingPrecision.CLIP_EMBEDDED">
            <summary>You must specify this flag to use an embedded read-only font.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ClippingPrecision.CLIP_LH_ANGLES">
            <summary>
            When this value is used, the rotation for all fonts depends on whether the orientation of the coordinate system is
            left-handed or right-handed. If not used, device fonts always rotate counterclockwise, but the rotation of other fonts is
            dependent on the orientation of the coordinate system.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ClippingPrecision.CLIP_MASK">
            <summary>Not used.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ClippingPrecision.CLIP_STROKE_PRECIS">
            <summary>
            Not used by the font mapper, but is returned when raster, vector, or TrueType fonts are enumerated. For compatibility, this
            value is always returned when enumerating fonts.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ClippingPrecision.CLIP_TT_ALWAYS">
            <summary>Not used.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.ETO">
            <summary>Options for <see cref="M:Vanara.PInvoke.Gdi32.ExtTextOut(Vanara.PInvoke.HDC,System.Int32,System.Int32,Vanara.PInvoke.Gdi32.ETO,Vanara.PInvoke.PRECT,System.String,System.UInt32,System.Int32[])"/>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ETO.ETO_OPAQUE">
            <summary>The current background color should be used to fill the rectangle.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ETO.ETO_CLIPPED">
            <summary>The text will be clipped to the rectangle.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ETO.ETO_GLYPH_INDEX">
            <summary>
            The lpString array refers to an array returned from GetCharacterPlacement and should be parsed directly by GDI as no further
            language-specific processing is required. Glyph indexing only applies to TrueType fonts, but the flag can be used for bitmap
            and vector fonts to indicate that no further language processing is necessary and GDI should process the string directly.
            Note that all glyph indexes are 16-bit values even though the string is assumed to be an array of 8-bit values for raster
            fonts. For ExtTextOutW, the glyph indexes are saved to a metafile. However, to display the correct characters the metafile
            must be played back using the same font. For ExtTextOutA, the glyph indexes are not saved.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ETO.ETO_RTLREADING">
            <summary>
            Middle East language edition of Windows: If this value is specified and a Hebrew or Arabic font is selected into the device
            context, the string is output using right-to-left reading order. If this value is not specified, the string is output in
            left-to-right order. The same effect can be achieved by setting the TA_RTLREADING value in SetTextAlign. This value is
            preserved for backward compatibility.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ETO.ETO_NUMERICSLOCAL">
            <summary>To display numbers, use digits appropriate to the locale.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ETO.ETO_NUMERICSLATIN">
            <summary>To display numbers, use European digits.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ETO.ETO_IGNORELANGUAGE">
            <summary>
            Reserved for system use. If an application sets this flag, it loses international scripting support and in some cases it may
            display no text at all.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ETO.ETO_PDY">
            <summary>
            When this is set, the array pointed to by lpDx contains pairs of values. The first value of each pair is, as usual, the
            distance between origins of adjacent character cells, but the second value is the displacement along the vertical direction
            of the font.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ETO.ETO_REVERSE_INDEX_MAP">
            <summary>Reserved and SHOULD NOT be used.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.FontType">
            <summary>Font type.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.FontType.DEVICE_FONTTYPE">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.FontType.RASTER_FONTTYPE">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.FontType.TRUETYPE_FONTTYPE">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.FR">
            <summary>Flags for <see cref="M:Vanara.PInvoke.Gdi32.AddFontResourceEx(System.String,Vanara.PInvoke.Gdi32.FR,System.IntPtr)"/>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.FR.FR_PRIVATE">
            <summary>
            Specifies that only the process that called the AddFontResourceEx function can use this font. When the font name matches a
            public font, the private font will be chosen. When the process terminates, the system will remove all fonts installed by the
            process with the AddFontResourceEx function.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.FR.FR_NOT_ENUM">
            <summary>
            Specifies that no process, including the process that called the AddFontResourceEx function, can enumerate this font.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.GCP">
            <summary>Flags for <see cref="M:Vanara.PInvoke.Gdi32.GetCharacterPlacement(Vanara.PInvoke.HDC,System.String,System.Int32,System.Int32,Vanara.PInvoke.Gdi32.GCP_RESULTS@,Vanara.PInvoke.Gdi32.GCP)"/> and <see cref="M:Vanara.PInvoke.Gdi32.GetFontLanguageInfo(Vanara.PInvoke.HDC)"/>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.GCP.FLI_GLYPHS">
            <summary>
            The font contains extra glyphs not normally accessible using the code page. Use GetCharacterPlacement to access the glyphs.
            This value is for information only and is not intended to be passed to GetCharacterPlacement.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.GCP.GCP_CLASSIN">
            <summary>
            Specifies that the lpClass array contains preset classifications for characters. The classifications may be the same as on
            output. If the particular classification for a character is not known, the corresponding location in the array must be set to
            zero. for more information about the classifications, see GCP_RESULTS. This is useful only if GetFontLanguageInfo returned
            the GCP_REORDER flag.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.GCP.GCP_DBCS">
            <summary>The character set is DBCS.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.GCP.GCP_DIACRITIC">
            <summary>
            Determines how diacritics in the string are handled. If this value is not set, diacritics are treated as zero-width
            characters. For example, a Hebrew string may contain diacritics, but you may not want to display them. Use
            GetFontLanguageInfo to determine whether a font supports diacritics. If it does, you can use or not use the GCP_DIACRITIC
            flag in the call to GetCharacterPlacement, depending on the needs of your application.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.GCP.GCP_DISPLAYZWG">
            <summary>
            For languages that need reordering or different glyph shapes depending on the positions of the characters within a word,
            nondisplayable characters often appear in the code page. For example, in the Hebrew code page, there are Left-To-Right and
            Right-To-Left markers, to help determine the final positioning of characters within the output strings. Normally these are
            not displayed and are removed from the lpGlyphs and lpDx arrays. You can use the GCP_DISPLAYZWG flag to display these characters.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.GCP.GCP_GLYPHSHAPE">
            <summary>
            Specifies that some or all characters in the string are to be displayed using shapes other than the standard shapes defined
            in the currently selected font for the current code page. Some languages, such as Arabic, cannot support glyph creation
            unless this value is specified. As a general rule, if GetFontLanguageInfo returns this value for a string, this value must be
            used with GetCharacterPlacement.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.GCP.GCP_JUSTIFY">
            <summary>
            Adjusts the extents in the lpDx array so that the string length is the same as nMaxExtent. GCP_JUSTIFY may only be used in
            conjunction with GCP_MAXEXTENT.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.GCP.GCP_JUSTIFYIN">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.GCP.GCP_KASHIDA">
            <summary>
            Use Kashidas as well as, or instead of, adjusted extents to modify the length of the string so that it is equal to the value
            specified by nMaxExtent. In the lpDx array, a Kashida is indicated by a negative justification index. GCP_KASHIDA may be used
            only in conjunction with GCP_JUSTIFY and only if the font (and language) support Kashidas. Use GetFontLanguageInfo to
            determine whether the current font supports Kashidas. Using Kashidas to justify the string can result in the number of glyphs
            required being greater than the number of characters in the input string. Because of this, when Kashidas are used, the
            application cannot assume that setting the arrays to be the size of the input string will be sufficient. (The maximum
            possible will be approximately dxPageWidth/dxAveCharWidth, where dxPageWidth is the width of the document and dxAveCharWidth
            is the average character width as returned from a GetTextMetrics call). Note that just because GetFontLanguageInfo returns
            the GCP_KASHIDA flag does not mean that it has to be used in the call to GetCharacterPlacement, just that the option is available.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.GCP.GCP_LIGATE">
            <summary>
            Use ligations wherever characters ligate. A ligation occurs where one glyph is used for two or more characters. For example,
            the letters a and e can ligate to ?. For this to be used, however, both the language support and the font must support the
            required glyphs (the example will not be processed by default in English). Use GetFontLanguageInfo to determine whether the
            current font supports ligation. If it does and a specific maximum is required for the number of characters that will ligate,
            set the number in the first element of the lpGlyphs array. If normal ligation is required, set this value to zero. If
            GCP_LIGATE is not specified, no ligation will take place. See GCP_RESULTS for more information. If the GCP_REORDER value is
            usually required for the character set but is not specified, the output will be meaningless unless the string being passed in
            is already in visual ordering (that is, the result that gets put into lpGcpResults-&gt;lpOutString in one call to
            GetCharacterPlacement is the input string of a second call). Note that just because GetFontLanguageInfo returns the
            GCP_LIGATE flag does not mean that it has to be used in the call to GetCharacterPlacement, just that the option is available.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.GCP.GCP_MAXEXTENT">
            <summary>
            Compute extents of the string only as long as the resulting extent, in logical units, does not exceed the values specified by
            the nMaxExtent parameter.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.GCP.GCP_NEUTRALOVERRIDE">
            <summary>
            Certain languages only. Override the normal handling of neutrals and treat them as strong characters that match the strings
            reading order. Useful only with the GCP_REORDER flag.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.GCP.GCP_NUMERICOVERRIDE">
            <summary>
            Certain languages only. Override the normal handling of numerics and treat them as strong characters that match the strings
            reading order. Useful only with the GCP_REORDER flag.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.GCP.GCP_NUMERICSLATIN">
            <summary>
            Arabic/Thai only. Use standard Latin glyphs for numbers and override the system default. To determine if this option is
            available in the language of the font, use GetStringTypeEx to see if the language supports more than one number format.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.GCP.GCP_NUMERICSLOCAL">
            <summary>
            Arabic/Thai only. Use local glyphs for numeric characters and override the system default. To determine if this option is
            available in the language of the font, use GetStringTypeEx to see if the language supports more than one number format.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.GCP.GCP_REORDER">
            <summary>
            Reorder the string. Use for languages that are not SBCS and left-to-right reading order. If this value is not specified, the
            string is assumed to be in display order already. If this flag is set for Semitic languages and the lpClass array is used,
            the first two elements of the array are used to specify the reading order beyond the bounds of the string.
            GCP_CLASS_PREBOUNDRTL and GCP_CLASS_PREBOUNDLTR can be used to set the order. If no preset order is required, set the values
            to zero. These values can be combined with other values if the GCPCLASSIN flag is set. If the GCP_REORDER value is not
            specified, the lpString parameter is taken to be visual ordered for languages where this is used, and the lpOutString and
            lpOrder fields are ignored. Use GetFontLanguageInfo to determine whether the current font supports reordering.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.GCP.GCP_SYMSWAPOFF">
            <summary>
            Semitic languages only. Specifies that swappable characters are not reset. For example, in a right-to-left string, the '('
            and ')' are not reversed.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.GCP.GCP_USEKERNING">
            <summary>
            Use kerning pairs in the font (if any) when creating the widths arrays. Use GetFontLanguageInfo to determine whether the
            current font supports kerning pairs. Note that just because GetFontLanguageInfo returns the GCP_USEKERNING flag does not mean
            that it has to be used in the call to GetCharacterPlacement, just that the option is available. Most TrueType fonts have a
            kerning table, but you do not have to use it.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.GCPCLASS">
            <summary>Values for <see cref="T:Vanara.PInvoke.Gdi32.GCP_RESULTS"/><c>.lpClass</c> field.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.GCPCLASS.GCPCLASS_LATIN">
            <summary>Character from a Latin or other single-byte character set for a left-to-right language.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.GCPCLASS.GCPCLASS_HEBREW">
            <summary>Hebrew character.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.GCPCLASS.GCPCLASS_ARABIC">
            <summary>Arabic character.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.GCPCLASS.GCPCLASS_NEUTRAL">
            <summary>Input only. Character has no specific classification.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.GCPCLASS.GCPCLASS_LOCALNUMBER">
            <summary>Digit from the character set associated with the current font.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.GCPCLASS.GCPCLASS_LATINNUMBER">
            <summary>Digit from a Latin or other single-byte character set for a left-to-right language.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.GCPCLASS.GCPCLASS_LATINNUMERICTERMINATOR">
            <summary>Input only. Character used to terminate Latin digits, such as a plus or minus sign.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.GCPCLASS.GCPCLASS_LATINNUMERICSEPARATOR">
            <summary>Input only. Character used to separate Latin digits, such as a comma or decimal point.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.GCPCLASS.GCPCLASS_NUMERICSEPARATOR">
            <summary>Input only. Character used to separate digits, such as a comma or decimal point.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.GCPCLASS.GCPCLASS_PREBOUNDLTR">
            <summary>Set lpClass[0] to GCPCLASS_PREBOUNDLTR to bind the string to left-to-right reading order before the string.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.GCPCLASS.GCPCLASS_PREBOUNDRTL">
            <summary>Set lpClass[0] to GCPCLASS_PREBOUNDRTL to bind the string to right-to-left reading order before the string.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.GCPCLASS.GCPCLASS_POSTBOUNDLTR">
            <summary>Set lpClass[0] to GCPCLASS_POSTBOUNDLTR to bind the string to left-to-right reading order after the string.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.GCPCLASS.GCPCLASS_POSTBOUNDRTL">
            <summary>Set lpClass[0] to GCPCLASS_POSTBOUNDRTL to bind the string to right-to-left reading order after the string.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.GGI">
            <summary>Specifies how glyphs should be handled if they are not supported.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.GGI.GGI_MARK_NONEXISTING_GLYPHS">
            <summary>Marks unsupported glyphs with the hexadecimal value 0xffff.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.GGO">
            <summary>The format of the data that <see cref="M:Vanara.PInvoke.Gdi32.GetGlyphOutline(Vanara.PInvoke.HDC,System.UInt32,Vanara.PInvoke.Gdi32.GGO,Vanara.PInvoke.Gdi32.GLYPHMETRICS@,System.UInt32,System.IntPtr,Vanara.PInvoke.Gdi32.MAT2@)"/> retrieves.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.GGO.GGO_METRICS">
            <summary>
            The function only retrieves the GLYPHMETRICS structure specified by lpgm. The lpvBuffer is ignored. This value affects the
            meaning of the function's return value upon failure; see the Return Values section.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.GGO.GGO_BITMAP">
            <summary>
            The function retrieves the glyph bitmap. For information about memory allocation, see the following Remarks section.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.GGO.GGO_NATIVE">
            <summary>The function retrieves the curve data points in the rasterizer's native format and uses the font's design units.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.GGO.GGO_BEZIER">
            <summary>The function retrieves the curve data as a cubic Bézier spline (not in quadratic spline format).</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.GGO.GGO_GRAY2_BITMAP">
            <summary>The function retrieves a glyph bitmap that contains five levels of gray.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.GGO.GGO_GRAY4_BITMAP">
            <summary>The function retrieves a glyph bitmap that contains 17 levels of gray.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.GGO.GGO_GRAY8_BITMAP">
            <summary>The function retrieves a glyph bitmap that contains 65 levels of gray.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.GGO.GGO_GLYPH_INDEX">
            <summary>
            Indicates that the uChar parameter is a TrueType Glyph Index rather than a character code. See the ExtTextOut function for
            additional remarks on Glyph Indexing.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.GGO.GGO_UNHINTED">
            <summary>The function only returns unhinted outlines. This flag only works in conjunction with GGO_BEZIER and GGO_NATIVE.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.GSISize">
            <summary>Flags describing the maximum size of the glyph indices.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.GSISize.GS_16BIT_INDICES">
            <summary>Treat glyph indices as 16-bit wide values.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.GSISize.GS_8BIT_INDICES">
            <summary>Treat glyph indices as 8-bit wide values.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.OutputPrecision">
            <summary>
            The output precision. The output precision defines how closely the output must match the requested font's height, width,
            character orientation, escapement, pitch, and font type.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.OutputPrecision.OUT_CHARACTER_PRECIS">
            <summary>Not used.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.OutputPrecision.OUT_DEFAULT_PRECIS">
            <summary>Specifies the default font mapper behavior.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.OutputPrecision.OUT_DEVICE_PRECIS">
            <summary>Instructs the font mapper to choose a Device font when the system contains multiple fonts with the same name.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.OutputPrecision.OUT_OUTLINE_PRECIS">
            <summary>This value instructs the font mapper to choose from TrueType and other outline-based fonts.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.OutputPrecision.OUT_PS_ONLY_PRECIS">
            <summary>
            Instructs the font mapper to choose from only PostScript fonts. If there are no PostScript fonts installed in the system, the
            font mapper returns to default behavior.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.OutputPrecision.OUT_RASTER_PRECIS">
            <summary>Instructs the font mapper to choose a raster font when the system contains multiple fonts with the same name.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.OutputPrecision.OUT_SCREEN_OUTLINE_PRECIS">
            <summary>A value that specifies a preference for TrueType and other outline fonts.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.OutputPrecision.OUT_STRING_PRECIS">
            <summary>This value is not used by the font mapper, but it is returned when raster fonts are enumerated.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.OutputPrecision.OUT_STROKE_PRECIS">
            <summary>
            This value is not used by the font mapper, but it is returned when TrueType, other outline-based fonts, and vector fonts are enumerated.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.OutputPrecision.OUT_TT_ONLY_PRECIS">
            <summary>
            Instructs the font mapper to choose from only TrueType fonts. If there are no TrueType fonts installed in the system, the
            font mapper returns to default behavior.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.OutputPrecision.OUT_TT_PRECIS">
            <summary>Instructs the font mapper to choose a TrueType font when the system contains multiple fonts with the same name.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.OutputQuality">
            <summary>
            The output quality defines how carefully the graphics device interface (GDI) must attempt to match the logical-font attributes to
            those of an actual physical font.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.OutputQuality.DEFAULT_QUALITY">
            <summary>Appearance of the font does not matter.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.OutputQuality.DRAFT_QUALITY">
            <summary>
            Appearance of the font is less important than when PROOF_QUALITY is used. For GDI raster fonts, scaling is enabled, which
            means that more font sizes are available, but the quality may be lower. Bold, italic, underline, and strikeout fonts are
            synthesized if necessary.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.OutputQuality.PROOF_QUALITY">
            <summary>
            Character quality of the font is more important than exact matching of the logical-font attributes. For GDI raster fonts,
            scaling is disabled and the font closest in size is chosen. Although the chosen font size may not be mapped exactly when
            PROOF_QUALITY is used, the quality of the font is high and there is no distortion of appearance. Bold, italic, underline, and
            strikeout fonts are synthesized if necessary.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.OutputQuality.NONANTIALIASED_QUALITY">
            <summary>Font is never antialiased.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.OutputQuality.ANTIALIASED_QUALITY">
            <summary>Font is always antialiased if the font supports it and the size of the font is not too small or too large.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.OutputQuality.CLEARTYPE_QUALITY">
            <summary>
            If set, text is rendered (when possible) using ClearType antialiasing method. The font quality is given less importance than
            maintaining the text size.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.OutputQuality.CLEARTYPE_NATURAL_QUALITY">
            <summary>
            If set, text is rendered (when possible) using ClearType antialiasing method. The font quality is given more importance than
            maintaining the text size.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.PAN_ARMS">
            <summary>PANOSE font-classification values for a TrueType font.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_ARMS.PAN_ANY">
            <summary>Any</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_ARMS.PAN_NO_FIT">
            <summary>No Fit</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_ARMS.PAN_STRAIGHT_ARMS_HORZ">
            <summary>Straight Arms/Horizontal</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_ARMS.PAN_STRAIGHT_ARMS_WEDGE">
            <summary>Straight Arms/Wedge</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_ARMS.PAN_STRAIGHT_ARMS_VERT">
            <summary>Straight Arms/Vertical</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_ARMS.PAN_STRAIGHT_ARMS_SINGLE_SERIF">
            <summary>Straight Arms/Single-Serif</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_ARMS.PAN_STRAIGHT_ARMS_DOUBLE_SERIF">
            <summary>Straight Arms/Double-Serif</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_ARMS.PAN_BENT_ARMS_HORZ">
            <summary>Non-Straight Arms/Horizontal</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_ARMS.PAN_BENT_ARMS_WEDGE">
            <summary>Non-Straight Arms/Wedge</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_ARMS.PAN_BENT_ARMS_VERT">
            <summary>Non-Straight Arms/Vertical</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_ARMS.PAN_BENT_ARMS_SINGLE_SERIF">
            <summary>Non-Straight Arms/Single-Serif</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_ARMS.PAN_BENT_ARMS_DOUBLE_SERIF">
            <summary>Non-Straight Arms/Double-Serif</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.PAN_CONTRAST">
            <summary>PANOSE font-classification values for a TrueType font.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_CONTRAST.PAN_ANY">
            <summary>Any</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_CONTRAST.PAN_NO_FIT">
            <summary>No Fit</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_CONTRAST.PAN_CONTRAST_NONE">
            <summary>None</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_CONTRAST.PAN_CONTRAST_VERY_LOW">
            <summary>Very Low</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_CONTRAST.PAN_CONTRAST_LOW">
            <summary>Low</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_CONTRAST.PAN_CONTRAST_MEDIUM_LOW">
            <summary>Medium Low</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_CONTRAST.PAN_CONTRAST_MEDIUM">
            <summary>Medium</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_CONTRAST.PAN_CONTRAST_MEDIUM_HIGH">
            <summary>Mediim High</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_CONTRAST.PAN_CONTRAST_HIGH">
            <summary>High</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_CONTRAST.PAN_CONTRAST_VERY_HIGH">
            <summary>Very High</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.PAN_FAMILY">
            <summary>PANOSE font-classification values for a TrueType font.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_FAMILY.PAN_ANY">
            <summary>Any</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_FAMILY.PAN_NO_FIT">
            <summary>No Fit</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_FAMILY.PAN_FAMILY_TEXT_DISPLAY">
            <summary>Text and Display</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_FAMILY.PAN_FAMILY_SCRIPT">
            <summary>Script</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_FAMILY.PAN_FAMILY_DECORATIVE">
            <summary>Decorative</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_FAMILY.PAN_FAMILY_PICTORIAL">
            <summary>Pictorial</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.PAN_LETT">
            <summary>PANOSE font-classification values for a TrueType font.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_LETT.PAN_ANY">
            <summary>Any</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_LETT.PAN_NO_FIT">
            <summary>No Fit</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_LETT.PAN_LETT_NORMAL_CONTACT">
            <summary>Normal/Contact</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_LETT.PAN_LETT_NORMAL_WEIGHTED">
            <summary>Normal/Weighted</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_LETT.PAN_LETT_NORMAL_BOXED">
            <summary>Normal/Boxed</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_LETT.PAN_LETT_NORMAL_FLATTENED">
            <summary>Normal/Flattened</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_LETT.PAN_LETT_NORMAL_ROUNDED">
            <summary>Normal/Rounded</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_LETT.PAN_LETT_NORMAL_OFF_CENTER">
            <summary>Normal/Off Center</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_LETT.PAN_LETT_NORMAL_SQUARE">
            <summary>Normal/Square</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_LETT.PAN_LETT_OBLIQUE_CONTACT">
            <summary>Oblique/Contact</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_LETT.PAN_LETT_OBLIQUE_WEIGHTED">
            <summary>Oblique/Weighted</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_LETT.PAN_LETT_OBLIQUE_BOXED">
            <summary>Oblique/Boxed</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_LETT.PAN_LETT_OBLIQUE_FLATTENED">
            <summary>Oblique/Flattened</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_LETT.PAN_LETT_OBLIQUE_ROUNDED">
            <summary>Oblique/Rounded</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_LETT.PAN_LETT_OBLIQUE_OFF_CENTER">
            <summary>Oblique/Off Center</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_LETT.PAN_LETT_OBLIQUE_SQUARE">
            <summary>Oblique/Square</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.PAN_MIDLINE">
            <summary>PANOSE font-classification values for a TrueType font.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_MIDLINE.PAN_ANY">
            <summary>Any</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_MIDLINE.PAN_NO_FIT">
            <summary>No Fit</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_MIDLINE.PAN_MIDLINE_STANDARD_TRIMMED">
            <summary>Standard/Trimmed</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_MIDLINE.PAN_MIDLINE_STANDARD_POINTED">
            <summary>Standard/Pointed</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_MIDLINE.PAN_MIDLINE_STANDARD_SERIFED">
            <summary>Standard/Serifed</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_MIDLINE.PAN_MIDLINE_HIGH_TRIMMED">
            <summary>High/Trimmed</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_MIDLINE.PAN_MIDLINE_HIGH_POINTED">
            <summary>High/Pointed</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_MIDLINE.PAN_MIDLINE_HIGH_SERIFED">
            <summary>High/Serifed</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_MIDLINE.PAN_MIDLINE_CONSTANT_TRIMMED">
            <summary>Constant/Trimmed</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_MIDLINE.PAN_MIDLINE_CONSTANT_POINTED">
            <summary>Constant/Pointed</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_MIDLINE.PAN_MIDLINE_CONSTANT_SERIFED">
            <summary>Constant/Serifed</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_MIDLINE.PAN_MIDLINE_LOW_TRIMMED">
            <summary>Low/Trimmed</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_MIDLINE.PAN_MIDLINE_LOW_POINTED">
            <summary>Low/Pointed</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_MIDLINE.PAN_MIDLINE_LOW_SERIFED">
            <summary>Low/Serifed</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.PAN_PROP">
            <summary>PANOSE font-classification values for a TrueType font.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_PROP.PAN_ANY">
            <summary>Any</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_PROP.PAN_NO_FIT">
            <summary>No Fit</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_PROP.PAN_PROP_OLD_STYLE">
            <summary>Old Style</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_PROP.PAN_PROP_MODERN">
            <summary>Modern</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_PROP.PAN_PROP_EVEN_WIDTH">
            <summary>Even Width</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_PROP.PAN_PROP_EXPANDED">
            <summary>Expanded</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_PROP.PAN_PROP_CONDENSED">
            <summary>Condensed</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_PROP.PAN_PROP_VERY_EXPANDED">
            <summary>Very Expanded</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_PROP.PAN_PROP_VERY_CONDENSED">
            <summary>Very Condensed</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_PROP.PAN_PROP_MONOSPACED">
            <summary>Monospaced</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.PAN_SERIF">
            <summary>PANOSE font-classification values for a TrueType font.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_SERIF.PAN_ANY">
            <summary>Any</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_SERIF.PAN_NO_FIT">
            <summary>No Fit</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_SERIF.PAN_SERIF_COVE">
            <summary>Cove</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_SERIF.PAN_SERIF_OBTUSE_COVE">
            <summary>Obtuse Cove</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_SERIF.PAN_SERIF_SQUARE_COVE">
            <summary>Square Cove</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_SERIF.PAN_SERIF_OBTUSE_SQUARE_COVE">
            <summary>Obtuse Square Cove</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_SERIF.PAN_SERIF_SQUARE">
            <summary>Square</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_SERIF.PAN_SERIF_THIN">
            <summary>Thin</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_SERIF.PAN_SERIF_BONE">
            <summary>Bone</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_SERIF.PAN_SERIF_EXAGGERATED">
            <summary>Exaggerated</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_SERIF.PAN_SERIF_TRIANGLE">
            <summary>Triangle</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_SERIF.PAN_SERIF_NORMAL_SANS">
            <summary>Normal Sans</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_SERIF.PAN_SERIF_OBTUSE_SANS">
            <summary>Obtuse Sans</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_SERIF.PAN_SERIF_PERP_SANS">
            <summary>Prep Sans</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_SERIF.PAN_SERIF_FLARED">
            <summary>Flared</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_SERIF.PAN_SERIF_ROUNDED">
            <summary>Rounded</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.PAN_STROKE">
            <summary>PANOSE font-classification values for a TrueType font.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_STROKE.PAN_ANY">
            <summary>Any</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_STROKE.PAN_NO_FIT">
            <summary>No Fit</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_STROKE.PAN_STROKE_GRADUAL_DIAG">
            <summary>Gradual/Diagonal</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_STROKE.PAN_STROKE_GRADUAL_TRAN">
            <summary>Gradual/Transitional</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_STROKE.PAN_STROKE_GRADUAL_VERT">
            <summary>Gradual/Vertical</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_STROKE.PAN_STROKE_GRADUAL_HORZ">
            <summary>Gradual/Horizontal</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_STROKE.PAN_STROKE_RAPID_VERT">
            <summary>Rapid/Vertical</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_STROKE.PAN_STROKE_RAPID_HORZ">
            <summary>Rapid/Horizontal</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_STROKE.PAN_STROKE_INSTANT_VERT">
            <summary>Instant/Vertical</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.PAN_WEIGHT">
            <summary>PANOSE font-classification values for a TrueType font.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_WEIGHT.PAN_ANY">
            <summary>Any</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_WEIGHT.PAN_NO_FIT">
            <summary>No Fit</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_WEIGHT.PAN_WEIGHT_VERY_LIGHT">
            <summary>Very Light</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_WEIGHT.PAN_WEIGHT_LIGHT">
            <summary>Light</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_WEIGHT.PAN_WEIGHT_THIN">
            <summary>Thin</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_WEIGHT.PAN_WEIGHT_BOOK">
            <summary>Book</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_WEIGHT.PAN_WEIGHT_MEDIUM">
            <summary>Medium</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_WEIGHT.PAN_WEIGHT_DEMI">
            <summary>Demi</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_WEIGHT.PAN_WEIGHT_BOLD">
            <summary>Bold</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_WEIGHT.PAN_WEIGHT_HEAVY">
            <summary>Heavy</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_WEIGHT.PAN_WEIGHT_BLACK">
            <summary>Black</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_WEIGHT.PAN_WEIGHT_NORD">
            <summary>Nord</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.PAN_XHEIGHT">
            <summary>PANOSE font-classification values for a TrueType font.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_XHEIGHT.PAN_ANY">
            <summary>Any</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_XHEIGHT.PAN_NO_FIT">
            <summary>No Fit</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_XHEIGHT.PAN_XHEIGHT_CONSTANT_SMALL">
            <summary>Constant/Small</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_XHEIGHT.PAN_XHEIGHT_CONSTANT_STD">
            <summary>Constant/Standard</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_XHEIGHT.PAN_XHEIGHT_CONSTANT_LARGE">
            <summary>Constant/Large</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_XHEIGHT.PAN_XHEIGHT_DUCKING_SMALL">
            <summary>Ducking/Small</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_XHEIGHT.PAN_XHEIGHT_DUCKING_STD">
            <summary>Ducking/Standard</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PAN_XHEIGHT.PAN_XHEIGHT_DUCKING_LARGE">
            <summary>Ducking/Large</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.PitchAndFamily">
            <summary>Flags specifying pitch and family for fonts.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PitchAndFamily.DEFAULT_PITCH">
            <summary>The default pitch, which is implementation-dependent.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PitchAndFamily.FIXED_PITCH">
            <summary>A fixed pitch, which means that all the characters in the font occupy the same width when output in a string.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PitchAndFamily.VARIABLE_PITCH">
            <summary>
            A variable pitch, which means that the characters in the font occupy widths that are proportional to the actual widths of the
            glyphs when output in a string. For example, the "i" and space characters usually have much smaller widths than a "W" or "O" character.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PitchAndFamily.MONO_FONT">
            <summary>The mono font/</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PitchAndFamily.TMPF_FIXED_PITCH">
            <summary>
            If this bit is set the font is a variable pitch font. If this bit is clear the font is a fixed pitch font. Note very
            carefully that those meanings are the opposite of what the constant name implies.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PitchAndFamily.TMPF_VECTOR">
            <summary>If this bit is set the font is a vector font.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PitchAndFamily.TMPF_TRUETYPE">
            <summary>If this bit is set the font is a TrueType font.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PitchAndFamily.TMPF_DEVICE">
            <summary>If this bit is set the font is a device font.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PitchAndFamily.FF_DONTCARE">
            <summary>Use default font.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PitchAndFamily.FF_ROMAN">
            <summary>Fonts with variable stroke width (proportional) and with serifs. MS Serif is an example.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PitchAndFamily.FF_SWISS">
            <summary>Fonts with variable stroke width (proportional) and without serifs. MS Sans Serif is an example.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PitchAndFamily.FF_MODERN">
            <summary>
            Fonts with constant stroke width (monospace), with or without serifs. Monospace fonts are usually modern. Pica, Elite, and
            CourierNew are examples.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PitchAndFamily.FF_SCRIPT">
            <summary>Fonts designed to look like handwriting. Script and Cursive are examples.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PitchAndFamily.FF_DECORATIVE">
            <summary>Novelty fonts. Old English is an example.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.TextAlign">
            <summary>Text-alignment settings for a device context.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.TextAlign.TA_NOUPDATECP">
            <summary>The current position is not updated after each text output call.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.TextAlign.TA_UPDATECP">
            <summary>The current position is updated after each text output call.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.TextAlign.TA_LEFT">
            <summary>The reference point is on the left edge of the bounding rectangle.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.TextAlign.TA_RIGHT">
            <summary>The reference point is on the right edge of the bounding rectangle.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.TextAlign.TA_CENTER">
            <summary>The reference point is aligned horizontally with the center of the bounding rectangle.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.TextAlign.TA_TOP">
            <summary>The reference point is on the top edge of the bounding rectangle.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.TextAlign.TA_BOTTOM">
            <summary>The reference point is on the bottom edge of the bounding rectangle.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.TextAlign.TA_BASELINE">
            <summary>The reference point is on the base line of the text.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.TextAlign.TA_RTLREADING">
            <summary>
            Middle East language edition of Windows: The text is laid out in right to left reading order, as opposed to the default left
            to right order. This only applies when the font selected into the device context is either Hebrew or Arabic.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.TT">
            <summary>Flags regarding TrueType status.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.TT.TT_AVAILABLE">
            <summary>TrueType is available.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.TT.TT_ENABLED">
            <summary>TrueType is enabled.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.AddFontMemResourceEx(System.IntPtr,System.UInt32,System.IntPtr,System.UInt32@)">
            <summary>The <c>AddFontMemResourceEx</c> function adds the font resource from a memory image to the system.</summary>
            <param name="pFileView">A pointer to a font resource.</param>
            <param name="cjSize">The number of bytes in the font resource that is pointed to by pbFont.</param>
            <param name="pvResrved">Reserved. Must be 0.</param>
            <param name="pNumFonts">A pointer to a variable that specifies the number of fonts installed.</param>
            <returns>
            If the function succeeds, the return value specifies the handle to the font added. This handle uniquely identifies the fonts that
            were installed on the system. If the function fails, the return value is zero. No extended error information is available.
            </returns>
            <remarks>
            <para>
            This function allows an application to get a font that is embedded in a document or a webpage. A font that is added by
            <c>AddFontMemResourceEx</c> is always private to the process that made the call and is not enumerable.
            </para>
            <para>
            A memory image can contain more than one font. When this function succeeds, pcFonts is a pointer to a <c>DWORD</c> whose value is
            the number of fonts added to the system as a result of this call. For example, this number could be 2 for the vertical and
            horizontal faces of an Asian font.
            </para>
            <para>
            When the function succeeds, the caller of this function can free the memory pointed to by pbFont because the system has made its
            own copy of the memory. To remove the fonts that were installed, call RemoveFontMemResourceEx. However, when the process goes
            away, the system will unload the fonts even if the process did not call RemoveFontMemResource.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.AddFontResource(System.String)">
            <summary>
            <para>
            The <c>AddFontResource</c> function adds the font resource from the specified file to the system font table. The font can
            subsequently be used for text output by any application.
            </para>
            <para>To mark a font as private or not enumerable, use the AddFontResourceEx function.</para>
            </summary>
            <param name="Arg1">
            <para>
            A pointer to a null-terminated character string that contains a valid font file name. This parameter can specify any of the
            following files.
            </para>
            <list type="table">
            <listheader>
            <term>File Extension</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>.fon</term>
            <term>Font resource file.</term>
            </item>
            <item>
            <term>.fnt</term>
            <term>Raw bitmap font file.</term>
            </item>
            <item>
            <term>.ttf</term>
            <term>Raw TrueType file.</term>
            </item>
            <item>
            <term>.ttc</term>
            <term>East Asian Windows: TrueType font collection.</term>
            </item>
            <item>
            <term>.fot</term>
            <term>TrueType resource file.</term>
            </item>
            <item>
            <term>.otf</term>
            <term>PostScript OpenType font.</term>
            </item>
            <item>
            <term>.mmm</term>
            <term>Multiple master Type1 font resource file. It must be used with .pfm and .pfb files.</term>
            </item>
            <item>
            <term>.pfb</term>
            <term>Type 1 font bits file. It is used with a .pfm file.</term>
            </item>
            <item>
            <term>.pfm</term>
            <term>Type 1 font metrics file. It is used with a .pfb file.</term>
            </item>
            </list>
            <para>
            To add a font whose information comes from several resource files, have lpszFileName point to a string with the file names
            separated by a "|" --for example, abcxxxxx.pfm | abcxxxxx.pfb.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the return value specifies the number of fonts added.</para>
            <para>If the function fails, the return value is zero. No extended error information is available.</para>
            </returns>
            <remarks>
            <para>
            Any application that adds or removes fonts from the system font table should notify other windows of the change by sending a
            WM_FONTCHANGE message to all top-level windows in the operating system. The application should send this message by calling the
            SendMessage function and setting the hwnd parameter to HWND_BROADCAST.
            </para>
            <para>
            When an application no longer needs a font resource that it loaded by calling the <c>AddFontResource</c> function, it must remove
            that resource by calling the RemoveFontResource function.
            </para>
            <para>
            This function installs the font only for the current session. When the system restarts, the font will not be present. To have the
            font installed even after restarting the system, the font must be listed in the registry.
            </para>
            <para>
            A font listed in the registry and installed to a location other than the %windir%\fonts\ folder cannot be modified, deleted, or
            replaced as long as it is loaded in any session. In order to change one of these fonts, it must first be removed by calling
            RemoveFontResource, removed from the font registry ( <c>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows
            NT\CurrentVersion\Fonts</c>), and the system restarted. After restarting the system, the font will no longer be loaded and can be changed.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.AddFontResourceEx(System.String,Vanara.PInvoke.Gdi32.FR,System.IntPtr)">
            <summary>
            The <c>AddFontResourceEx</c> function adds the font resource from the specified file to the system. Fonts added with the
            <c>AddFontResourceEx</c> function can be marked as private and not enumerable.
            </summary>
            <param name="name">
            <para>
            A pointer to a null-terminated character string that contains a valid font file name. This parameter can specify any of the
            following files.
            </para>
            <list type="table">
            <listheader>
            <term>File Extension</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>.fon</term>
            <term>Font resource file.</term>
            </item>
            <item>
            <term>.fnt</term>
            <term>Raw bitmap font file.</term>
            </item>
            <item>
            <term>.ttf</term>
            <term>Raw TrueType file.</term>
            </item>
            <item>
            <term>.ttc</term>
            <term>East Asian Windows: TrueType font collection.</term>
            </item>
            <item>
            <term>.fot</term>
            <term>TrueType resource file.</term>
            </item>
            <item>
            <term>.otf</term>
            <term>PostScript OpenType font.</term>
            </item>
            <item>
            <term>.mmm</term>
            <term>multiple master Type1 font resource file. It must be used with .pfm and .pfb files.</term>
            </item>
            <item>
            <term>.pfb</term>
            <term>Type 1 font bits file. It is used with a .pfm file.</term>
            </item>
            <item>
            <term>.pfm</term>
            <term>Type 1 font metrics file. It is used with a .pfb file.</term>
            </item>
            </list>
            <para>
            To add a font whose information comes from several resource files, point lpszFileName to a string with the file names separated
            by a | --for example, abcxxxxx.pfm | abcxxxxx.pfb.
            </para>
            </param>
            <param name="fl">
            <para>The characteristics of the font to be added to the system. This parameter can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>FR_PRIVATE</term>
            <term>
            Specifies that only the process that called the AddFontResourceEx function can use this font. When the font name matches a public
            font, the private font will be chosen. When the process terminates, the system will remove all fonts installed by the process
            with the AddFontResourceEx function.
            </term>
            </item>
            <item>
            <term>FR_NOT_ENUM</term>
            <term>Specifies that no process, including the process that called the AddFontResourceEx function, can enumerate this font.</term>
            </item>
            </list>
            </param>
            <param name="res">Reserved. Must be zero.</param>
            <returns>
            <para>If the function succeeds, the return value specifies the number of fonts added.</para>
            <para>If the function fails, the return value is zero. No extended error information is available.</para>
            </returns>
            <remarks>
            <para>This function allows a process to use fonts without allowing other processes access to the fonts.</para>
            <para>
            When an application no longer needs a font resource it loaded by calling the <c>AddFontResourceEx</c> function, it must remove
            the resource by calling the RemoveFontResourceEx function.
            </para>
            <para>
            This function installs the font only for the current session. When the system restarts, the font will not be present. To have the
            font installed even after restarting the system, the font must be listed in the registry.
            </para>
            <para>
            A font listed in the registry and installed to a location other than the %windir%\fonts\ folder cannot be modified, deleted, or
            replaced as long as it is loaded in any session. In order to change one of these fonts, it must first be removed by calling
            RemoveFontResource, removed from the font registry ( <c>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows
            NT\CurrentVersion\Fonts</c>), and the system restarted. After restarting the system, the font will no longer be loaded and can be changed.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.CreateFont(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,Vanara.PInvoke.CharacterSet,Vanara.PInvoke.Gdi32.OutputPrecision,Vanara.PInvoke.Gdi32.ClippingPrecision,Vanara.PInvoke.Gdi32.OutputQuality,Vanara.PInvoke.Gdi32.PitchAndFamily,System.String)">
            <summary>
            The <c>CreateFont</c> function creates a logical font with the specified characteristics. The logical font can subsequently be
            selected as the font for any device.
            </summary>
            <param name="cHeight">
            <para>
            The height, in logical units, of the font's character cell or character. The character height value (also known as the em height)
            is the character cell height value minus the internal-leading value. The font mapper interprets the value specified in nHeight in
            the following manner.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>&gt; 0</term>
            <term>The font mapper transforms this value into device units and matches it against the cell height of the available fonts.</term>
            </item>
            <item>
            <term>0</term>
            <term>The font mapper uses a default height value when it searches for a match.</term>
            </item>
            <item>
            <term>&lt; 0</term>
            <term>
            The font mapper transforms this value into device units and matches its absolute value against the character height of the
            available fonts.
            </term>
            </item>
            </list>
            <para>For all height comparisons, the font mapper looks for the largest font that does not exceed the requested size.</para>
            <para>This mapping occurs when the font is used for the first time.</para>
            <para>
            For the MM_TEXT mapping mode, you can use the following formula to specify a height for a font with a specified point size:
            </para>
            <para>nHeight = -MulDiv(PointSize, GetDeviceCaps(hDC, LOGPIXELSY), 72);</para>
            </param>
            <param name="cWidth">
            The average width, in logical units, of characters in the requested font. If this value is zero, the font mapper chooses a
            closest match value. The closest match value is determined by comparing the absolute values of the difference between the current
            device's aspect ratio and the digitized aspect ratio of available fonts.
            </param>
            <param name="cEscapement">
            <para>
            The angle, in tenths of degrees, between the escapement vector and the x-axis of the device. The escapement vector is parallel to
            the base line of a row of text.
            </para>
            <para>
            When the graphics mode is set to GM_ADVANCED, you can specify the escapement angle of the string independently of the orientation
            angle of the string's characters.
            </para>
            <para>
            When the graphics mode is set to GM_COMPATIBLE, nEscapement specifies both the escapement and orientation. You should set
            nEscapement and nOrientation to the same value.
            </para>
            </param>
            <param name="cOrientation">The angle, in tenths of degrees, between each character's base line and the x-axis of the device.</param>
            <param name="cWeight">
            <para>
            The weight of the font in the range 0 through 1000. For example, 400 is normal and 700 is bold. If this value is zero, a default
            weight is used.
            </para>
            <para>The following values are defined for convenience.</para>
            <list type="table">
            <listheader>
            <term>Weight</term>
            <term>Value</term>
            </listheader>
            <item>
            <term>FW_DONTCARE</term>
            <term>0</term>
            </item>
            <item>
            <term>FW_THIN</term>
            <term>100</term>
            </item>
            <item>
            <term>FW_EXTRALIGHT</term>
            <term>200</term>
            </item>
            <item>
            <term>FW_ULTRALIGHT</term>
            <term>200</term>
            </item>
            <item>
            <term>FW_LIGHT</term>
            <term>300</term>
            </item>
            <item>
            <term>FW_NORMAL</term>
            <term>400</term>
            </item>
            <item>
            <term>FW_REGULAR</term>
            <term>400</term>
            </item>
            <item>
            <term>FW_MEDIUM</term>
            <term>500</term>
            </item>
            <item>
            <term>FW_SEMIBOLD</term>
            <term>600</term>
            </item>
            <item>
            <term>FW_DEMIBOLD</term>
            <term>600</term>
            </item>
            <item>
            <term>FW_BOLD</term>
            <term>700</term>
            </item>
            <item>
            <term>FW_EXTRABOLD</term>
            <term>800</term>
            </item>
            <item>
            <term>FW_ULTRABOLD</term>
            <term>800</term>
            </item>
            <item>
            <term>FW_HEAVY</term>
            <term>900</term>
            </item>
            <item>
            <term>FW_BLACK</term>
            <term>900</term>
            </item>
            </list>
            </param>
            <param name="bItalic">Specifies an italic font if set to <c>TRUE</c>.</param>
            <param name="bUnderline">Specifies an underlined font if set to <c>TRUE</c>.</param>
            <param name="bStrikeOut">A strikeout font if set to <c>TRUE</c>.</param>
            <param name="iCharSet">
            <para>The character set. The following values are predefined:</para>
            <list type="bullet">
            <item>
            <term>ANSI_CHARSET</term>
            </item>
            <item>
            <term>BALTIC_CHARSET</term>
            </item>
            <item>
            <term>CHINESEBIG5_CHARSET</term>
            </item>
            <item>
            <term>DEFAULT_CHARSET</term>
            </item>
            <item>
            <term>EASTEUROPE_CHARSET</term>
            </item>
            <item>
            <term>GB2312_CHARSET</term>
            </item>
            <item>
            <term>GREEK_CHARSET</term>
            </item>
            <item>
            <term>HANGUL_CHARSET</term>
            </item>
            <item>
            <term>MAC_CHARSET</term>
            </item>
            <item>
            <term>OEM_CHARSET</term>
            </item>
            <item>
            <term>RUSSIAN_CHARSET</term>
            </item>
            <item>
            <term>SHIFTJIS_CHARSET</term>
            </item>
            <item>
            <term>SYMBOL_CHARSET</term>
            </item>
            <item>
            <term>TURKISH_CHARSET</term>
            </item>
            <item>
            <term>VIETNAMESE_CHARSET</term>
            </item>
            </list>
            <para>Korean language edition of Windows:</para>
            <list type="bullet">
            <item>
            <term>JOHAB_CHARSET</term>
            </item>
            </list>
            <para>Middle East language edition of Windows:</para>
            <list type="bullet">
            <item>
            <term>ARABIC_CHARSET</term>
            </item>
            <item>
            <term>HEBREW_CHARSET</term>
            </item>
            </list>
            <para>Thai language edition of Windows:</para>
            <list type="bullet">
            <item>
            <term>THAI_CHARSET</term>
            </item>
            </list>
            <para>The OEM_CHARSET value specifies a character set that is operating-system dependent.</para>
            <para>
            DEFAULT_CHARSET is set to a value based on the current system locale. For example, when the system locale is English (United
            States), it is set as ANSI_CHARSET.
            </para>
            <para>
            Fonts with other character sets may exist in the operating system. If an application uses a font with an unknown character set,
            it should not attempt to translate or interpret strings that are rendered with that font.
            </para>
            <para>
            To ensure consistent results when creating a font, do not specify OEM_CHARSET or DEFAULT_CHARSET. If you specify a typeface name
            in the lpszFace parameter, make sure that the fdwCharSet value matches the character set of the typeface specified in lpszFace.
            </para>
            </param>
            <param name="iOutPrecision">
            <para>
            The output precision. The output precision defines how closely the output must match the requested font's height, width,
            character orientation, escapement, pitch, and font type. It can be one of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>OUT_CHARACTER_PRECIS</term>
            <term>Not used.</term>
            </item>
            <item>
            <term>OUT_DEFAULT_PRECIS</term>
            <term>The default font mapper behavior.</term>
            </item>
            <item>
            <term>OUT_DEVICE_PRECIS</term>
            <term>Instructs the font mapper to choose a Device font when the system contains multiple fonts with the same name.</term>
            </item>
            <item>
            <term>OUT_OUTLINE_PRECIS</term>
            <term>This value instructs the font mapper to choose from TrueType and other outline-based fonts.</term>
            </item>
            <item>
            <term>OUT_PS_ONLY_PRECIS</term>
            <term>
            Instructs the font mapper to choose from only PostScript fonts. If there are no PostScript fonts installed in the system, the
            font mapper returns to default behavior.
            </term>
            </item>
            <item>
            <term>OUT_RASTER_PRECIS</term>
            <term>Instructs the font mapper to choose a raster font when the system contains multiple fonts with the same name.</term>
            </item>
            <item>
            <term>OUT_STRING_PRECIS</term>
            <term>This value is not used by the font mapper, but it is returned when raster fonts are enumerated.</term>
            </item>
            <item>
            <term>OUT_STROKE_PRECIS</term>
            <term>
            This value is not used by the font mapper, but it is returned when TrueType, other outline-based fonts, and vector fonts are enumerated.
            </term>
            </item>
            <item>
            <term>OUT_TT_ONLY_PRECIS</term>
            <term>
            Instructs the font mapper to choose from only TrueType fonts. If there are no TrueType fonts installed in the system, the font
            mapper returns to default behavior.
            </term>
            </item>
            <item>
            <term>OUT_TT_PRECIS</term>
            <term>Instructs the font mapper to choose a TrueType font when the system contains multiple fonts with the same name.</term>
            </item>
            </list>
            <para>
            Applications can use the OUT_DEVICE_PRECIS, OUT_RASTER_PRECIS, OUT_TT_PRECIS, and OUT_PS_ONLY_PRECIS values to control how the
            font mapper chooses a font when the operating system contains more than one font with a specified name. For example, if an
            operating system contains a font named Symbol in raster and TrueType form, specifying OUT_TT_PRECIS forces the font mapper to
            choose the TrueType version. Specifying OUT_TT_ONLY_PRECIS forces the font mapper to choose a TrueType font, even if it must
            substitute a TrueType font of another name.
            </para>
            </param>
            <param name="iClipPrecision">
            <para>
            The clipping precision. The clipping precision defines how to clip characters that are partially outside the clipping region. It
            can be one or more of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CLIP_CHARACTER_PRECIS</term>
            <term>Not used.</term>
            </item>
            <item>
            <term>CLIP_DEFAULT_PRECIS</term>
            <term>Specifies default clipping behavior.</term>
            </item>
            <item>
            <term>CLIP_DFA_DISABLE</term>
            <term>
            Windows XP SP1: Turns off font association for the font. Note that this flag is not guaranteed to have any effect on any platform
            after Windows Server 2003.
            </term>
            </item>
            <item>
            <term>CLIP_EMBEDDED</term>
            <term>You must specify this flag to use an embedded read-only font.</term>
            </item>
            <item>
            <term>CLIP_LH_ANGLES</term>
            <term>
            When this value is used, the rotation for all fonts depends on whether the orientation of the coordinate system is left-handed or
            right-handed. If not used, device fonts always rotate counterclockwise, but the rotation of other fonts is dependent on the
            orientation of the coordinate system. For more information about the orientation of coordinate systems, see the description of
            the nOrientation parameter
            </term>
            </item>
            <item>
            <term>CLIP_MASK</term>
            <term>Not used.</term>
            </item>
            <item>
            <term>CLIP_DFA_OVERRIDE</term>
            <term>
            Turns off font association for the font. This is identical to CLIP_DFA_DISABLE, but it can have problems in some situations; the
            recommended flag to use is CLIP_DFA_DISABLE.
            </term>
            </item>
            <item>
            <term>CLIP_STROKE_PRECIS</term>
            <term>
            Not used by the font mapper, but is returned when raster, vector, or TrueType fonts are enumerated. For compatibility, this value
            is always returned when enumerating fonts.
            </term>
            </item>
            <item>
            <term>CLIP_TT_ALWAYS</term>
            <term>Not used.</term>
            </item>
            </list>
            </param>
            <param name="iQuality">
            <para>
            The output quality. The output quality defines how carefully GDI must attempt to match the logical-font attributes to those of an
            actual physical font. It can be one of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>ANTIALIASED_QUALITY</term>
            <term>Font is antialiased, or smoothed, if the font supports it and the size of the font is not too small or too large.</term>
            </item>
            <item>
            <term>CLEARTYPE_QUALITY</term>
            <term>If set, text is rendered (when possible) using ClearType antialiasing method. See Remarks for more information.</term>
            </item>
            <item>
            <term>DEFAULT_QUALITY</term>
            <term>Appearance of the font does not matter.</term>
            </item>
            <item>
            <term>DRAFT_QUALITY</term>
            <term>
            Appearance of the font is less important than when the PROOF_QUALITY value is used. For GDI raster fonts, scaling is enabled,
            which means that more font sizes are available, but the quality may be lower. Bold, italic, underline, and strikeout fonts are
            synthesized, if necessary.
            </term>
            </item>
            <item>
            <term>NONANTIALIASED_QUALITY</term>
            <term>Font is never antialiased, that is, font smoothing is not done.</term>
            </item>
            <item>
            <term>PROOF_QUALITY</term>
            <term>
            Character quality of the font is more important than exact matching of the logical-font attributes. For GDI raster fonts, scaling
            is disabled and the font closest in size is chosen. Although the chosen font size may not be mapped exactly when PROOF_QUALITY is
            used, the quality of the font is high and there is no distortion of appearance. Bold, italic, underline, and strikeout fonts are
            synthesized, if necessary.
            </term>
            </item>
            </list>
            <para>
            If the output quality is DEFAULT_QUALITY, DRAFT_QUALITY, or PROOF_QUALITY, then the font is antialiased if the
            SPI_GETFONTSMOOTHING system parameter is <c>TRUE</c>. Users can control this system parameter from the Control Panel. (The
            precise wording of the setting in the Control panel depends on the version of Windows, but it will be words to the effect of
            "Smooth edges of screen fonts".)
            </para>
            </param>
            <param name="iPitchAndFamily">
            <para>
            The pitch and family of the font. The two low-order bits specify the pitch of the font and can be one of the following values:
            </para>
            <list type="bullet">
            <item>
            <term>DEFAULT_PITCH</term>
            </item>
            <item>
            <term>FIXED_PITCH</term>
            </item>
            <item>
            <term>VARIABLE_PITCH</term>
            </item>
            </list>
            <para>The four high-order bits specify the font family and can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>FF_DECORATIVE</term>
            <term>Novelty fonts. Old English is an example.</term>
            </item>
            <item>
            <term>FF_DONTCARE</term>
            <term>Use default font.</term>
            </item>
            <item>
            <term>FF_MODERN</term>
            <term>Fonts with constant stroke width, with or without serifs. Pica, Elite, and Courier New are examples.</term>
            </item>
            <item>
            <term>FF_ROMAN</term>
            <term>Fonts with variable stroke width and with serifs. MS Serif is an example.</term>
            </item>
            <item>
            <term>FF_SCRIPT</term>
            <term>Fonts designed to look like handwriting. Script and Cursive are examples.</term>
            </item>
            <item>
            <term>FF_SWISS</term>
            <term>Fonts with variable stroke width and without serifs. MS?Sans Serif is an example.</term>
            </item>
            </list>
            <para>
            An application can specify a value for the fdwPitchAndFamily parameter by using the Boolean OR operator to join a pitch constant
            with a family constant.
            </para>
            <para>
            Font families describe the look of a font in a general way. They are intended for specifying fonts when the exact typeface
            requested is not available.
            </para>
            </param>
            <param name="pszFaceName">
            <para>
            A pointer to a null-terminated string that specifies the typeface name of the font. The length of this string must not exceed 32
            characters, including the terminating null character. The EnumFontFamilies function can be used to enumerate the typeface names
            of all currently available fonts. For more information, see the Remarks.
            </para>
            <para>If lpszFace is <c>NULL</c> or empty string, GDI uses the first font that matches the other specified attributes.</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is a handle to a logical font.</para>
            <para>If the function fails, the return value is <c>NULL</c>.</para>
            </returns>
            <remarks>
            <para>When you no longer need the font, call the DeleteObject function to delete it.</para>
            <para>
            To help protect the copyrights of vendors who provide fonts for Windows, applications should always report the exact name of a
            selected font. Because available fonts can vary from system to system, do not assume that the selected font is always the same as
            the requested font. For example, if you request a font named Palatino, but no such font is available on the system, the font
            mapper will substitute a font that has similar attributes but a different name. Always report the name of the selected font to
            the user.
            </para>
            <para>
            To get the appropriate font on different language versions of the OS, call EnumFontFamiliesEx with the desired font
            characteristics in the LOGFONT structure, then retrieve the appropriate typeface name and create the font using <c>CreateFont</c>
            or CreateFontIndirect.
            </para>
            <para>
            The font mapper for <c>CreateFont</c>,CreateFontIndirect, and CreateFontIndirectEx recognizes both the English and the localized
            typeface name, regardless of locale.
            </para>
            <para>The following situations do not support ClearType antialiasing:</para>
            <list type="bullet">
            <item>
            <term>Text rendered on a printer.</term>
            </item>
            <item>
            <term>A display set for 256 colors or less.</term>
            </item>
            <item>
            <term>Text rendered to a terminal server client.</term>
            </item>
            <item>
            <term>
            The font is not a TrueType font or an OpenType font with TrueType outlines. For example, the following do not support ClearType
            antialiasing: Type 1 fonts, Postscript OpenType fonts without TrueType outlines, bitmap fonts, vector fonts, and device fonts.
            </term>
            </item>
            <item>
            <term>
            The font has tuned embedded bitmaps, only for the font sizes that contain the embedded bitmaps. For example, this occurs commonly
            in East Asian fonts.
            </term>
            </item>
            </list>
            <para>Examples</para>
            <para>For another example, see "Setting Fonts for Menu-Item Text Strings" in Using Menus.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.CreateFontIndirect(Vanara.PInvoke.LOGFONT@)">
            <summary>
            The <c>CreateFontIndirect</c> function creates a logical font that has the specified characteristics. The font can subsequently
            be selected as the current font for any device context.
            </summary>
            <param name="lplf">A pointer to a LOGFONT structure that defines the characteristics of the logical font.</param>
            <returns>
            <para>If the function succeeds, the return value is a handle to a logical font.</para>
            <para>If the function fails, the return value is <c>NULL</c>.</para>
            </returns>
            <remarks>
            <para>
            The <c>CreateFontIndirect</c> function creates a logical font with the characteristics specified in the LOGFONT structure. When
            this font is selected by using the SelectObject function, GDI's font mapper attempts to match the logical font with an existing
            physical font. If it fails to find an exact match, it provides an alternative whose characteristics match as many of the
            requested characteristics as possible.
            </para>
            <para>
            To get the appropriate font on different language versions of the OS, call EnumFontFamiliesEx with the desired font
            characteristics in the LOGFONT structure, retrieve the appropriate typeface name, and create the font using CreateFont or <c>CreateFontIndirect</c>.
            </para>
            <para>When you no longer need the font, call the DeleteObject function to delete it.</para>
            <para>
            The fonts for many East Asian languages have two typeface names: an English name and a localized name. CreateFont and
            <c>CreateFontIndirect</c> take the localized typeface name only on a system locale that matches the language, while they take the
            English typeface name on all other system locales. The best method is to try one name and, on failure, try the other. Note that
            EnumFonts, EnumFontFamilies, and EnumFontFamiliesEx return the English typeface name if the system locale does not match the
            language of the font.
            </para>
            <para>
            The font mapper for CreateFont, <c>CreateFontIndirect</c>, and CreateFontIndirectEx recognizes both the English and the localized
            typeface name, regardless of locale.
            </para>
            <para>Examples</para>
            <para>For an example, see Creating a Logical Font.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.CreateFontIndirectEx(Vanara.PInvoke.Gdi32.ENUMLOGFONTEXDV@)">
            <summary>
            The <c>CreateFontIndirectEx</c> function specifies a logical font that has the characteristics in the specified structure. The
            font can subsequently be selected as the current font for any device context.
            </summary>
            <param name="Arg1">
            <para>Pointer to an ENUMLOGFONTEXDV structure that defines the characteristics of a multiple master font.</para>
            <para>Note, this function ignores the <c>elfDesignVector</c> member in ENUMLOGFONTEXDV.</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is the handle to the new ENUMLOGFONTEXDV structure.</para>
            <para>If the function fails, the return value is zero. No extended error information is available.</para>
            </returns>
            <remarks>
            <para>
            The <c>CreateFontIndirectEx</c> function creates a logical font with the characteristics specified in the ENUMLOGFONTEXDV
            structure. When this font is selected by using the SelectObject function, GDI's font mapper attempts to match the logical font
            with an existing physical font. If it fails to find an exact match, it provides an alternative whose characteristics match as
            many of the requested characteristics as possible.
            </para>
            <para>When you no longer need the font, call the DeleteObject function to delete it.</para>
            <para>
            The font mapper for CreateFont, CreateFontIndirect, and <c>CreateFontIndirectEx</c> recognizes both the English and the localized
            typeface name, regardless of locale.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.CreateScalableFontResource(System.UInt32,System.String,System.String,System.String)">
            <summary>
            <para>
            [The <c>CreateScalableFontResource</c> function is available for use in the operating systems specified in the Requirements
            section. It may be
            </para>
            <para>altered or unavailable in subsequent versions.]</para>
            <para>The <c>CreateScalableFontResource</c> function creates a font resource file for a scalable font.</para>
            </summary>
            <param name="fdwHidden">
            <para>Specifies whether the font is a read-only font. This parameter can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>0</term>
            <term>The font has read/write permission.</term>
            </item>
            <item>
            <term>1</term>
            <term>
            The font has read-only permission and should be hidden from other applications in the system. When this flag is set, the font is
            not enumerated by the EnumFonts or EnumFontFamilies function.
            </term>
            </item>
            </list>
            </param>
            <param name="lpszFont">
            A pointer to a null-terminated string specifying the name of the font resource file to create. If this parameter specifies an
            existing font resource file, the function fails.
            </param>
            <param name="lpszFile">
            A pointer to a null-terminated string specifying the name of the scalable font file that this function uses to create the font
            resource file.
            </param>
            <param name="lpszPath">A pointer to a null-terminated string specifying the path to the scalable font file.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            <para>If lpszFontRes specifies an existing font file, GetLastError returns ERROR_FILE_EXISTS</para>
            </returns>
            <remarks>
            <para>
            The <c>CreateScalableFontResource</c> function is used by applications that install TrueType fonts. An application uses the
            <c>CreateScalableFontResource</c> function to create a font resource file (typically with a .fot file name extension) and then
            uses the AddFontResource function to install the font. The TrueType font file (typically with a .ttf file name extension) must be
            in the System subdirectory of the Windows directory to be used by the AddFontResource function.
            </para>
            <para>The <c>CreateScalableFontResource</c> function currently supports only TrueType-technology scalable fonts.</para>
            <para>
            When the lpszFontFile parameter specifies only a file name and extension, the lpszCurrentPath parameter must specify a path. When
            the lpszFontFile parameter specifies a full path, the lpszCurrentPath parameter must be <c>NULL</c> or a pointer to <c>NULL</c>.
            </para>
            <para>
            When only a file name and extension are specified in the lpszFontFile parameter and a path is specified in the lpszCurrentPath
            parameter, the string in lpszFontFile is copied into the .fot file as the .ttf file that belongs to this resource. When the
            AddFontResource function is called, the operating system assumes that the .ttf file has been copied into the System directory (or
            into the main Windows directory in the case of a network installation). The .ttf file need not be in this directory when the
            <c>CreateScalableFontResource</c> function is called, because the lpszCurrentPath parameter contains the directory information. A
            resource created in this manner does not contain absolute path information and can be used in any installation.
            </para>
            <para>
            When a path is specified in the lpszFontFile parameter and <c>NULL</c> is specified in the lpszCurrentPath parameter, the string
            in lpszFontFile is copied into the .fot file. In this case, when the AddFontResource function is called, the .ttf file must be at
            the location specified in the lpszFontFile parameter when the <c>CreateScalableFontResource</c> function was called; the
            lpszCurrentPath parameter is not needed. A resource created in this manner contains absolute references to paths and drives and
            does not work if the .ttf file is moved to a different location.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.EnumFontFamilies(Vanara.PInvoke.HDC,System.String,Vanara.PInvoke.Gdi32.EnumFontFamProc,System.IntPtr)">
            <summary>
            <para>
            The <c>EnumFontFamilies</c> function enumerates the fonts in a specified font family that are available on a specified device.
            </para>
            <para>
            <c>Note</c> This function is provided only for compatibility with 16-bit versions of Windows. Applications should use the
            EnumFontFamiliesEx function.
            </para>
            </summary>
            <param name="hdc">A handle to the device context from which to enumerate the fonts.</param>
            <param name="lpLogfont">
            A pointer to a null-terminated string that specifies the family name of the desired fonts. If lpszFamily is <c>NULL</c>,
            <c>EnumFontFamilies</c> selects and enumerates one font of each available type family.
            </param>
            <param name="lpProc">A pointer to the application defined callback function. For information, see EnumFontFamProc.</param>
            <param name="lParam">
            A pointer to application-supplied data. The data is passed to the callback function along with the font information.
            </param>
            <returns>The return value is the last value returned by the callback function. Its meaning is implementation specific.</returns>
            <remarks>
            <para>
            For each font having the typeface name specified by the lpszFamily parameter, the <c>EnumFontFamilies</c> function retrieves
            information about that font and passes it to the function pointed to by the lpEnumFontFamProc parameter. The application defined
            callback function can process the font information as desired. Enumeration continues until there are no more fonts or the
            callback function returns zero.
            </para>
            <para>
            When the graphics mode on the device context is set to GM_ADVANCED using the SetGraphicsMode function and the DEVICE_FONTTYPE
            flag is passed to the FontType parameter, this function returns a list of type 1 and OpenType fonts on the system. When the
            graphics mode is not set to GM_ADVANCED, this function returns a list of type 1, OpenType, and TrueType fonts on the system.
            </para>
            <para>
            The fonts for many East Asian languages have two typeface names: an English name and a localized name. EnumFonts,
            <c>EnumFontFamilies</c>, and EnumFontFamiliesEx return the English typeface name if the system locale does not match the language
            of the font.
            </para>
            <para>Examples</para>
            <para>For examples, see Enumerating the Installed Fonts.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.EnumFontFamiliesEx(Vanara.PInvoke.HDC,Vanara.PInvoke.LOGFONT@,Vanara.PInvoke.Gdi32.EnumFontFamExProc,System.IntPtr,System.UInt32)">
            <summary>
            The <c>EnumFontFamiliesEx</c> function enumerates all uniquely-named fonts in the system that match the font characteristics
            specified by the LOGFONT structure. <c>EnumFontFamiliesEx</c> enumerates fonts based on typeface name, character set, or both.
            </summary>
            <param name="hdc">A handle to the device context from which to enumerate the fonts.</param>
            <param name="lpLogfont">
            <para>
            A pointer to a LOGFONT structure that contains information about the fonts to enumerate. The function examines the following members.
            </para>
            <list type="table">
            <listheader>
            <term>Member</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>lfCharSet</term>
            <term>
            If set to DEFAULT_CHARSET, the function enumerates all uniquely-named fonts in all character sets. (If there are two fonts with
            the same name, only one is enumerated.) If set to a valid character set value, the function enumerates only fonts in the
            specified character set.
            </term>
            </item>
            <item>
            <term>lfFaceName</term>
            <term>
            If set to an empty string, the function enumerates one font in each available typeface name. If set to a valid typeface name, the
            function enumerates all fonts with the specified name.
            </term>
            </item>
            <item>
            <term>lfPitchAndFamily</term>
            <term>Must be set to zero for all language versions of the operating system.</term>
            </item>
            </list>
            </param>
            <param name="lpProc">
            A pointer to the application defined callback function. For more information, see the EnumFontFamExProc function.
            </param>
            <param name="lParam">
            An application defined value. The function passes this value to the callback function along with font information.
            </param>
            <param name="dwFlags">This parameter is not used and must be zero.</param>
            <returns>
            The return value is the last value returned by the callback function. This value depends on which font families are available for
            the specified device.
            </returns>
            <remarks>
            <para>
            The <c>EnumFontFamiliesEx</c> function does not use tagged typeface names to identify character sets. Instead, it always passes
            the correct typeface name and a separate character set value to the callback function. The function enumerates fonts based on the
            values of the <c>lfCharSet</c> and <c>lfFaceName</c> members in the LOGFONT structure.
            </para>
            <para>
            As with EnumFontFamilies, <c>EnumFontFamiliesEx</c> enumerates all font styles. Not all styles of a font cover the same character
            sets. For example, Fontorama Bold might contain ANSI, Greek, and Cyrillic characters, but Fontorama Italic might contain only
            ANSI characters. For this reason, it's best not to assume that a specified font covers a specific character set, even if it is
            the ANSI character set. The following table shows the results of various combinations of values for <c>lfCharSet</c> and <c>lfFaceName</c>.
            </para>
            <list type="table">
            <listheader>
            <term>Values</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>lfCharSet = DEFAULT_CHARSET lfFaceName = '\0'</term>
            <term>
            Enumerates all uniquely-named fonts within all character sets. If there are two fonts with the same name, only one is enumerated.
            </term>
            </item>
            <item>
            <term>lfCharSet = DEFAULT_CHARSET lfFaceName = a specific font</term>
            <term>Enumerates all character sets and styles in a specific font.</term>
            </item>
            <item>
            <term>lfCharSet =a specific character set lfFaceName = '\0'</term>
            <term>Enumerates all styles of all fonts in the specific character set.</term>
            </item>
            <item>
            <term>lfCharSet =a specific character set lfFaceName = a specific font</term>
            <term>Enumerates all styles of a font in a specific character set.</term>
            </item>
            </list>
            <para>The following code sample shows how these values are used.</para>
            <para>
            The callback functions for EnumFontFamilies and <c>EnumFontFamiliesEx</c> are very similar. The main difference is that the
            ENUMLOGFONTEX structure includes a script field.
            </para>
            <para>
            Note, based on the values of <c>lfCharSet</c> and <c>lfFaceName</c>, <c>EnumFontFamiliesEx</c> will enumerate the same font as
            many times as there are distinct character sets in the font. This can create an extensive list of fonts which can be burdensome
            to a user. For example, the Century Schoolbook font can appear for the Baltic, Western, Greek, Turkish, and Cyrillic character
            sets. To avoid this, an application should filter the list of fonts.
            </para>
            <para>
            The fonts for many East Asian languages have two typeface names: an English name and a localized name. EnumFonts,
            EnumFontFamilies, and <c>EnumFontFamiliesEx</c> return the English typeface name if the system locale does not match the language
            of the font.
            </para>
            <para>
            When the graphics mode on the device context is set to GM_ADVANCED using the SetGraphicsMode function and the DEVICE_FONTTYPE
            flag is passed to the FontType parameter, this function returns a list of type 1 and OpenType fonts on the system. When the
            graphics mode is not set to GM_ADVANCED, this function returns a list of type 1, OpenType, and TrueType fonts on the system.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.EnumFontFamiliesEx(Vanara.PInvoke.HDC,Vanara.PInvoke.CharacterSet,System.String)">
            <summary>
            The <c>EnumFontFamiliesEx</c> function enumerates all uniquely-named fonts in the system that match the font characteristics
            specified by the LOGFONT structure. <c>EnumFontFamiliesEx</c> enumerates fonts based on typeface name, character set, or both.
            </summary>
            <param name="hdc">A handle to the device context from which to enumerate the fonts.</param>
            <param name="lfCharSet">The character set.</param>
            <param name="lfFaceName">
            A null-terminated string that specifies the typeface name of the font. The length of this string must not exceed 32 TCHAR
            values, including the terminating NULL. The EnumFontFamiliesEx function can be used to enumerate the typeface names of all
            currently available fonts. If lfFaceName is an empty string, GDI uses the first font that matches the other specified attributes.
            </param>
            <returns>A sequence of tuples that contain the ENUMLOGFONTEXDV, ENUMTEXTMETRIC and FontType for each font family.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.EnumFonts(Vanara.PInvoke.HDC,System.String,Vanara.PInvoke.Gdi32.EnumFontsProc,System.IntPtr)">
            <summary>
            <para>
            The <c>EnumFonts</c> function enumerates the fonts available on a specified device. For each font with the specified typeface
            name, the <c>EnumFonts</c> function retrieves information about that font and passes it to the application defined callback
            function. This callback function can process the font information as desired. Enumeration continues until there are no more fonts
            or the callback function returns zero.
            </para>
            <para>
            <c>Note</c> This function is provided only for compatibility with 16-bit versions of Windows. Applications should use the
            EnumFontFamiliesEx function.
            </para>
            </summary>
            <param name="hdc">A handle to the device context from which to enumerate the fonts.</param>
            <param name="lpLogfont">
            A pointer to a null-terminated string that specifies the typeface name of the desired fonts. If lpFaceName is <c>NULL</c>,
            <c>EnumFonts</c> randomly selects and enumerates one font of each available typeface.
            </param>
            <param name="lpProc">A pointer to the application definedcallback function. For more information, see EnumFontsProc.</param>
            <param name="lParam">
            A pointer to any application-defined data. The data is passed to the callback function along with the font information.
            </param>
            <returns>The return value is the last value returned by the callback function. Its meaning is defined by the application.</returns>
            <remarks>
            <para>
            Use EnumFontFamiliesEx instead of <c>EnumFonts</c>. The <c>EnumFontFamiliesEx</c> function differs from the <c>EnumFonts</c>
            function in that it retrieves the style names associated with a TrueType font. With <c>EnumFontFamiliesEx</c>, you can retrieve
            information about font styles that cannot be enumerated using the <c>EnumFonts</c> function.
            </para>
            <para>
            The fonts for many East Asian languages have two typeface names: an English name and a localized name. <c>EnumFonts</c>,
            EnumFontFamilies, and EnumFontFamiliesEx return the English typeface name if the system locale does not match the language of the font.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.ExtTextOut(Vanara.PInvoke.HDC,System.Int32,System.Int32,Vanara.PInvoke.Gdi32.ETO,Vanara.PInvoke.PRECT,System.String,System.UInt32,System.Int32[])">
            <summary>
            The <c>ExtTextOut</c> function draws text using the currently selected font, background color, and text color. You can optionally
            provide dimensions to be used for clipping, opaquing, or both.
            </summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="x">The x-coordinate, in logical coordinates, of the reference point used to position the string.</param>
            <param name="y">The y-coordinate, in logical coordinates, of the reference point used to position the string.</param>
            <param name="options">
            <para>Specifies how to use the application-defined rectangle. This parameter can be one or more of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>ETO_CLIPPED</term>
            <term>The text will be clipped to the rectangle.</term>
            </item>
            <item>
            <term>ETO_GLYPH_INDEX</term>
            <term>
            The lpString array refers to an array returned from GetCharacterPlacement and should be parsed directly by GDI as no further
            language-specific processing is required. Glyph indexing only applies to TrueType fonts, but the flag can be used for bitmap and
            vector fonts to indicate that no further language processing is necessary and GDI should process the string directly. Note that
            all glyph indexes are 16-bit values even though the string is assumed to be an array of 8-bit values for raster fonts. For
            ExtTextOutW, the glyph indexes are saved to a metafile. However, to display the correct characters the metafile must be played
            back using the same font. For ExtTextOutA, the glyph indexes are not saved.
            </term>
            </item>
            <item>
            <term>ETO_IGNORELANGUAGE</term>
            <term>
            Reserved for system use. If an application sets this flag, it loses international scripting support and in some cases it may
            display no text at all.
            </term>
            </item>
            <item>
            <term>ETO_NUMERICSLATIN</term>
            <term>To display numbers, use European digits.</term>
            </item>
            <item>
            <term>ETO_NUMERICSLOCAL</term>
            <term>To display numbers, use digits appropriate to the locale.</term>
            </item>
            <item>
            <term>ETO_OPAQUE</term>
            <term>The current background color should be used to fill the rectangle.</term>
            </item>
            <item>
            <term>ETO_PDY</term>
            <term>
            When this is set, the array pointed to by lpDx contains pairs of values. The first value of each pair is, as usual, the distance
            between origins of adjacent character cells, but the second value is the displacement along the vertical direction of the font.
            </term>
            </item>
            <item>
            <term>ETO_RTLREADING</term>
            <term>
            Middle East language edition of Windows: If this value is specified and a Hebrew or Arabic font is selected into the device
            context, the string is output using right-to-left reading order. If this value is not specified, the string is output in
            left-to-right order. The same effect can be achieved by setting the TA_RTLREADING value in SetTextAlign. This value is preserved
            for backward compatibility.
            </term>
            </item>
            </list>
            <para>
            The ETO_GLYPH_INDEX and ETO_RTLREADING values cannot be used together. Because ETO_GLYPH_INDEX implies that all language
            processing has been completed, the function ignores the ETO_RTLREADING flag if also specified.
            </para>
            </param>
            <param name="lprect">
            A pointer to an optional RECT structure that specifies the dimensions, in logical coordinates, of a rectangle that is used for
            clipping, opaquing, or both.
            </param>
            <param name="lpString">
            A pointer to a string that specifies the text to be drawn. The string does not need to be zero-terminated, since cbCount
            specifies the length of the string.
            </param>
            <param name="c">
            <para>The length of the string pointed to by lpString.</para>
            <para>This value may not exceed 8192.</para>
            </param>
            <param name="lpDx">
            A pointer to an optional array of values that indicate the distance between origins of adjacent character cells. For example,
            lpDx[i] logical units separate the origins of character cell i and character cell i + 1.
            </param>
            <returns>
            <para>
            If the string is drawn, the return value is nonzero. However, if the ANSI version of <c>ExtTextOut</c> is called with
            ETO_GLYPH_INDEX, the function returns <c>TRUE</c> even though the function does nothing.
            </para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>
            The current text-alignment settings for the specified device context determine how the reference point is used to position the
            text. The text-alignment settings are retrieved by calling the GetTextAlign function. The text-alignment settings are altered by
            calling the SetTextAlign function. You can use the following values for text alignment. Only one flag can be chosen from those
            that affect horizontal and vertical alignment. In addition, only one of the two flags that alter the current position can be chosen.
            </para>
            <list type="table">
            <listheader>
            <term>Term</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>TA_BASELINE</term>
            <term>The reference point will be on the base line of the text.</term>
            </item>
            <item>
            <term>TA_BOTTOM</term>
            <term>The reference point will be on the bottom edge of the bounding rectangle.</term>
            </item>
            <item>
            <term>TA_TOP</term>
            <term>The reference point will be on the top edge of the bounding rectangle.</term>
            </item>
            <item>
            <term>TA_CENTER</term>
            <term>The reference point will be aligned horizontally with the center of the bounding rectangle.</term>
            </item>
            <item>
            <term>TA_LEFT</term>
            <term>The reference point will be on the left edge of the bounding rectangle.</term>
            </item>
            <item>
            <term>TA_RIGHT</term>
            <term>The reference point will be on the right edge of the bounding rectangle.</term>
            </item>
            <item>
            <term>TA_NOUPDATECP</term>
            <term>The current position is not updated after each text output call. The reference point is passed to the text output function.</term>
            </item>
            <item>
            <term>TA_RTLREADING</term>
            <term>
            Middle East language edition of Windows: The text is laid out in right to left reading order, as opposed to the default left to
            right order. This applies only when the font selected into the device context is either Hebrew or Arabic.
            </term>
            </item>
            <item>
            <term>TA_UPDATECP</term>
            <term>The current position is updated after each text output call. The current position is used as the reference point.</term>
            </item>
            </list>
            <para>
            If the lpDx parameter is <c>NULL</c>, the <c>ExtTextOut</c> function uses the default spacing between characters. The
            character-cell origins and the contents of the array pointed to by the lpDx parameter are specified in logical units. A
            character-cell origin is defined as the upper-left corner of the character cell.
            </para>
            <para>
            By default, the current position is not used or updated by this function. However, an application can call the SetTextAlign
            function with the fMode parameter set to TA_UPDATECP to permit the system to use and update the current position each time the
            application calls <c>ExtTextOut</c> for a specified device context. When this flag is set, the system ignores the X and Y
            parameters on subsequent <c>ExtTextOut</c> calls.
            </para>
            <para>
            For the ANSI version of <c>ExtTextOut</c>, the lpDx array has the same number of INT values as there are bytes in lpString. For
            DBCS characters, you can apportion the dx in the lpDx entries between the lead byte and the trail byte, as long as the sum of the
            two bytes adds up to the desired dx. For DBCS characters with the Unicode version of <c>ExtTextOut</c>, each Unicode glyph gets a
            single pdx entry.
            </para>
            <para>
            Note, the alpDx values from GetTextExtentExPoint are not the same as the lpDx values for <c>ExtTextOut</c>. To use the alpDx
            values in lpDx, you must first process them.
            </para>
            <para>Examples</para>
            <para>For an example, see "Setting Fonts for Menu-Item Text Strings" in Using Menus.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetAspectRatioFilterEx(Vanara.PInvoke.HDC,Vanara.PInvoke.SIZE@)">
            <summary>The <c>GetAspectRatioFilterEx</c> function retrieves the setting for the current aspect-ratio filter.</summary>
            <param name="hdc">Handle to a device context.</param>
            <param name="lpsize">Pointer to a SIZE structure that receives the current aspect-ratio filter.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>The aspect ratio is the ratio formed by the width and height of a pixel on a specified device.</para>
            <para>
            The system provides a special filter, the aspect-ratio filter, to select fonts that were designed for a particular device. An
            application can specify that the system should only retrieve fonts matching the specified aspect ratio by calling the
            SetMapperFlags function.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetCharABCWidths(Vanara.PInvoke.HDC,System.UInt32,System.UInt32,Vanara.PInvoke.Gdi32.ABC[])">
            <summary>
            The <c>GetCharABCWidths</c> function retrieves the widths, in logical units, of consecutive characters in a specified range from
            the current TrueType font. This function succeeds only with TrueType fonts.
            </summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="wFirst">The first character in the group of consecutive characters from the current font.</param>
            <param name="wLast">The last character in the group of consecutive characters from the current font.</param>
            <param name="lpABC">
            A pointer to an array of ABC structures that receives the character widths, in logical units. This array must contain at least as
            many <c>ABC</c> structures as there are characters in the range specified by the uFirstChar and uLastChar parameters.
            </param>
            <returns>
            <para>If the function succeeds, the return value is nonzero</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>
            The TrueType rasterizer provides ABC character spacing after a specific point size has been selected. A spacing is the distance
            added to the current position before placing the glyph. B spacing is the width of the black part of the glyph. C spacing is the
            distance added to the current position to provide white space to the right of the glyph. The total advanced width is specified by A+B+C.
            </para>
            <para>
            When the <c>GetCharABCWidths</c> function retrieves negative A or C widths for a character, that character includes underhangs or overhangs.
            </para>
            <para>
            To convert the ABC widths to font design units, an application should use the value stored in the <c>otmEMSquare</c> member of a
            OUTLINETEXTMETRIC structure. This value can be retrieved by calling the GetOutlineTextMetrics function.
            </para>
            <para>The ABC widths of the default character are used for characters outside the range of the currently selected font.</para>
            <para>To retrieve the widths of characters in non-TrueType fonts, applications should use the GetCharWidth function.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetCharABCWidthsFloat(Vanara.PInvoke.HDC,System.UInt32,System.UInt32,Vanara.PInvoke.Gdi32.ABCFLOAT[])">
            <summary>
            The <c>GetCharABCWidthsFloat</c> function retrieves the widths, in logical units, of consecutive characters in a specified range
            from the current font.
            </summary>
            <param name="hdc">Handle to the device context.</param>
            <param name="iFirst">
            Specifies the code point of the first character in the group of consecutive characters where the ABC widths are seeked.
            </param>
            <param name="iLast">
            Specifies the code point of the last character in the group of consecutive characters where the ABC widths are seeked. This range
            is inclusive. An error is returned if the specified last character precedes the specified first character.
            </param>
            <param name="lpABC">Pointer to an array of ABCFLOAT structures that receives the character widths, in logical units.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>
            Unlike the GetCharABCWidths function that returns widths only for TrueType fonts, the <c>GetCharABCWidthsFloat</c> function
            retrieves widths for any font. The widths returned by this function are in the IEEE floating-point format.
            </para>
            <para>
            If the current world-to-device transformation is not identified, the returned widths may be noninteger values, even if the
            corresponding values in the device space are integers.
            </para>
            <para>
            A spacing is the distance added to the current position before placing the glyph. B spacing is the width of the black part of the
            glyph. C spacing is the distance added to the current position to provide white space to the right of the glyph. The total
            advanced width is specified by A+B+C.
            </para>
            <para>The ABC spaces are measured along the character base line of the selected font.</para>
            <para>The ABC widths of the default character are used for characters outside the range of the currently selected font.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetCharABCWidthsI(Vanara.PInvoke.HDC,System.UInt32,System.UInt32,System.UInt16[],Vanara.PInvoke.Gdi32.ABC[])">
            <summary>
            The <c>GetCharABCWidthsI</c> function retrieves the widths, in logical units, of consecutive glyph indices in a specified range
            from the current TrueType font. This function succeeds only with TrueType fonts.
            </summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="giFirst">
            The first glyph index in the group of consecutive glyph indices from the current font. This parameter is only used if the pgi
            parameter is <c>NULL</c>.
            </param>
            <param name="cgi">The number of glyph indices.</param>
            <param name="pgi">
            A pointer to an array that contains glyph indices. If this parameter is <c>NULL</c>, the giFirst parameter is used instead. The
            cgi parameter specifies the number of glyph indices in this array.
            </param>
            <param name="pabc">
            A pointer to an array of ABC structures that receives the character widths, in logical units. This array must contain at least as
            many <c>ABC</c> structures as there are glyph indices specified by the cgi parameter.
            </param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>
            The TrueType rasterizer provides ABC character spacing after a specific point size has been selected. A spacing is the distance
            added to the current position before placing the glyph. B spacing is the width of the black part of the glyph. C spacing is the
            distance added to the current position to provide white space to the right of the glyph. The total advanced width is specified by A+B+C.
            </para>
            <para>
            When the <c>GetCharABCWidthsI</c> function retrieves negative A or C widths for a character, that character includes underhangs
            or overhangs.
            </para>
            <para>
            To convert the ABC widths to font design units, an application should use the value stored in the <c>otmEMSquare</c> member of a
            OUTLINETEXTMETRIC structure. This value can be retrieved by calling the GetOutlineTextMetrics function.
            </para>
            <para>The ABC widths of the default character are used for characters outside the range of the currently selected font.</para>
            <para>To retrieve the widths of glyph indices in non-TrueType fonts, applications should use the GetCharWidthI function.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetCharacterPlacement(Vanara.PInvoke.HDC,System.String,System.Int32,System.Int32,Vanara.PInvoke.Gdi32.GCP_RESULTS@,Vanara.PInvoke.Gdi32.GCP)">
            <summary>
            <para>
            The <c>GetCharacterPlacement</c> function retrieves information about a character string, such as character widths, caret
            positioning, ordering within the string, and glyph rendering. The type of information returned depends on the dwFlags parameter
            and is based on the currently selected font in the specified display context. The function copies the information to the
            specified GCP_RESULTS structure or to one or more arrays specified by the structure.
            </para>
            <para>
            Although this function was once adequate for working with character strings, a need to work with an increasing number of
            languages and scripts has rendered it obsolete. It has been superseded by the functionality of the Uniscribe module. For more
            information, see Uniscribe.
            </para>
            <para>
            It is recommended that an application use the GetFontLanguageInfo function to determine whether the GCP_DIACRITIC, GCP_DBCS,
            GCP_USEKERNING, GCP_LIGATE, GCP_REORDER, GCP_GLYPHSHAPE, and GCP_KASHIDA values are valid for the currently selected font. If not
            valid, <c>GetCharacterPlacement</c> ignores the value.
            </para>
            <para>The GCP_NODIACRITICS value is no longer defined and should not be used.</para>
            </summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="lpString">
            A pointer to the character string to process. The string does not need to be zero-terminated, since nCount specifies the length
            of the string.
            </param>
            <param name="nCount">The length of the string pointed to by lpString.</param>
            <param name="nMexExtent">
            The maximum extent (in logical units) to which the string is processed. Characters that, if processed, would exceed this extent
            are ignored. Computations for any required ordering or glyph arrays apply only to the included characters. This parameter is used
            only if the GCP_MAXEXTENT value is specified in the dwFlags parameter. As the function processes the input string, each character
            and its extent is added to the output, extent, and other arrays only if the total extent has not yet exceeded the maximum. Once
            the limit is reached, processing will stop.
            </param>
            <param name="lpResults">A pointer to a GCP_RESULTS structure that receives the results of the function.</param>
            <param name="dwFlags">
            <para>Specifies how to process the string into the required arrays. This parameter can be one or more of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>GCP_CLASSIN</term>
            <term>
            Specifies that the lpClass array contains preset classifications for characters. The classifications may be the same as on
            output. If the particular classification for a character is not known, the corresponding location in the array must be set to
            zero. for more information about the classifications, see GCP_RESULTS. This is useful only if GetFontLanguageInfo returned the
            GCP_REORDER flag.
            </term>
            </item>
            <item>
            <term>GCP_DIACRITIC</term>
            <term>
            Determines how diacritics in the string are handled. If this value is not set, diacritics are treated as zero-width characters.
            For example, a Hebrew string may contain diacritics, but you may not want to display them. Use GetFontLanguageInfo to determine
            whether a font supports diacritics. If it does, you can use or not use the GCP_DIACRITIC flag in the call to
            GetCharacterPlacement, depending on the needs of your application.
            </term>
            </item>
            <item>
            <term>GCP_DISPLAYZWG</term>
            <term>
            For languages that need reordering or different glyph shapes depending on the positions of the characters within a word,
            nondisplayable characters often appear in the code page. For example, in the Hebrew code page, there are Left-To-Right and
            Right-To-Left markers, to help determine the final positioning of characters within the output strings. Normally these are not
            displayed and are removed from the lpGlyphs and lpDx arrays. You can use the GCP_DISPLAYZWG flag to display these characters.
            </term>
            </item>
            <item>
            <term>GCP_GLYPHSHAPE</term>
            <term>
            Specifies that some or all characters in the string are to be displayed using shapes other than the standard shapes defined in
            the currently selected font for the current code page. Some languages, such as Arabic, cannot support glyph creation unless this
            value is specified. As a general rule, if GetFontLanguageInfo returns this value for a string, this value must be used with GetCharacterPlacement.
            </term>
            </item>
            <item>
            <term>GCP_JUSTIFY</term>
            <term>
            Adjusts the extents in the lpDx array so that the string length is the same as nMaxExtent. GCP_JUSTIFY may only be used in
            conjunction with GCP_MAXEXTENT.
            </term>
            </item>
            <item>
            <term>GCP_KASHIDA</term>
            <term>
            Use Kashidas as well as, or instead of, adjusted extents to modify the length of the string so that it is equal to the value
            specified by nMaxExtent. In the lpDx array, a Kashida is indicated by a negative justification index. GCP_KASHIDA may be used
            only in conjunction with GCP_JUSTIFY and only if the font (and language) support Kashidas. Use GetFontLanguageInfo to determine
            whether the current font supports Kashidas. Using Kashidas to justify the string can result in the number of glyphs required
            being greater than the number of characters in the input string. Because of this, when Kashidas are used, the application cannot
            assume that setting the arrays to be the size of the input string will be sufficient. (The maximum possible will be approximately
            dxPageWidth/dxAveCharWidth, where dxPageWidth is the width of the document and dxAveCharWidth is the average character width as
            returned from a GetTextMetrics call). Note that just because GetFontLanguageInfo returns the GCP_KASHIDA flag does not mean that
            it has to be used in the call to GetCharacterPlacement, just that the option is available.
            </term>
            </item>
            <item>
            <term>GCP_LIGATE</term>
            <term>
            Use ligations wherever characters ligate. A ligation occurs where one glyph is used for two or more characters. For example, the
            letters a and e can ligate to ?. For this to be used, however, both the language support and the font must support the required
            glyphs (the example will not be processed by default in English). Use GetFontLanguageInfo to determine whether the current font
            supports ligation. If it does and a specific maximum is required for the number of characters that will ligate, set the number in
            the first element of the lpGlyphs array. If normal ligation is required, set this value to zero. If GCP_LIGATE is not specified,
            no ligation will take place. See GCP_RESULTS for more information. If the GCP_REORDER value is usually required for the character
            set but is not specified, the output will be meaningless unless the string being passed in is already in visual ordering (that
            is, the result that gets put into lpGcpResults-&gt;lpOutString in one call to GetCharacterPlacement is the input string of a
            second call). Note that just because GetFontLanguageInfo returns the GCP_LIGATE flag does not mean that it has to be used in the
            call to GetCharacterPlacement, just that the option is available.
            </term>
            </item>
            <item>
            <term>GCP_MAXEXTENT</term>
            <term>
            Compute extents of the string only as long as the resulting extent, in logical units, does not exceed the values specified by the
            nMaxExtent parameter.
            </term>
            </item>
            <item>
            <term>GCP_NEUTRALOVERRIDE</term>
            <term>
            Certain languages only. Override the normal handling of neutrals and treat them as strong characters that match the strings
            reading order. Useful only with the GCP_REORDER flag.
            </term>
            </item>
            <item>
            <term>GCP_NUMERICOVERRIDE</term>
            <term>
            Certain languages only. Override the normal handling of numerics and treat them as strong characters that match the strings
            reading order. Useful only with the GCP_REORDER flag.
            </term>
            </item>
            <item>
            <term>GCP_NUMERICSLATIN</term>
            <term>
            Arabic/Thai only. Use standard Latin glyphs for numbers and override the system default. To determine if this option is available
            in the language of the font, use GetStringTypeEx to see if the language supports more than one number format.
            </term>
            </item>
            <item>
            <term>GCP_NUMERICSLOCAL</term>
            <term>
            Arabic/Thai only. Use local glyphs for numeric characters and override the system default. To determine if this option is
            available in the language of the font, use GetStringTypeEx to see if the language supports more than one number format.
            </term>
            </item>
            <item>
            <term>GCP_REORDER</term>
            <term>
            Reorder the string. Use for languages that are not SBCS and left-to-right reading order. If this value is not specified, the
            string is assumed to be in display order already. If this flag is set for Semitic languages and the lpClass array is used, the
            first two elements of the array are used to specify the reading order beyond the bounds of the string. GCP_CLASS_PREBOUNDRTL and
            GCP_CLASS_PREBOUNDLTR can be used to set the order. If no preset order is required, set the values to zero. These values can be
            combined with other values if the GCPCLASSIN flag is set. If the GCP_REORDER value is not specified, the lpString parameter is
            taken to be visual ordered for languages where this is used, and the lpOutString and lpOrder fields are ignored. Use
            GetFontLanguageInfo to determine whether the current font supports reordering.
            </term>
            </item>
            <item>
            <term>GCP_SYMSWAPOFF</term>
            <term>
            Semitic languages only. Specifies that swappable characters are not reset. For example, in a right-to-left string, the '(' and
            ')' are not reversed.
            </term>
            </item>
            <item>
            <term>GCP_USEKERNING</term>
            <term>
            Use kerning pairs in the font (if any) when creating the widths arrays. Use GetFontLanguageInfo to determine whether the current
            font supports kerning pairs. Note that just because GetFontLanguageInfo returns the GCP_USEKERNING flag does not mean that it has
            to be used in the call to GetCharacterPlacement, just that the option is available. Most TrueType fonts have a kerning table, but
            you do not have to use it.
            </term>
            </item>
            </list>
            <para>
            It is recommended that an application use the GetFontLanguageInfo function to determine whether the GCP_DIACRITIC, GCP_DBCS,
            GCP_USEKERNING, GCP_LIGATE, GCP_REORDER, GCP_GLYPHSHAPE, and GCP_KASHIDA values are valid for the currently selected font. If not
            valid, <c>GetCharacterPlacement</c> ignores the value.
            </para>
            <para>The GCP_NODIACRITICS value is no longer defined and should not be used.</para>
            </param>
            <returns>
            <para>
            If the function succeeds, the return value is the width and height of the string in logical units. The width is the low-order
            word and the height is the high-order word.
            </para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>
            <c>GetCharacterPlacement</c> ensures that an application can correctly process text regardless of the international setting and
            type of fonts available. Applications use this function before using the ExtTextOut function and in place of the
            GetTextExtentPoint32 function (and occasionally in place of the GetCharWidth32 and GetCharABCWidths functions).
            </para>
            <para>
            Using <c>GetCharacterPlacement</c> to retrieve intercharacter spacing and index arrays is not always necessary unless
            justification or kerning is required. For non-Latin fonts, applications can improve the speed at which the ExtTextOut function
            renders text by using <c>GetCharacterPlacement</c> to retrieve the intercharacter spacing and index arrays before calling
            <c>ExtTextOut</c>. This is especially useful when rendering the same text repeatedly or when using intercharacter spacing to
            position the caret. If the <c>lpGlyphs</c> output array is used in the call to <c>ExtTextOut</c>, the ETO_GLYPH_INDEX flag must
            be set.
            </para>
            <para>
            <c>GetCharacterPlacement</c> checks the <c>lpOrder</c>, <c>lpDX</c>, <c>lpCaretPos</c>, <c>lpOutString</c>, and <c>lpGlyphs</c>
            members of the GCP_RESULTS structure and fills the corresponding arrays if these members are not set to <c>NULL</c>. If
            <c>GetCharacterPlacement</c> cannot fill an array, it sets the corresponding member to <c>NULL</c>. To ensure retrieval of valid
            information, the application is responsible for setting the member to a valid address before calling the function and for
            checking the value of the member after the call. If the GCP_JUSTIFY or GCP_USEKERNING values are specified, the <c>lpDX</c>
            and/or <c>lpCaretPos</c> members must have valid addresses.
            </para>
            <para>
            Note that the glyph indexes returned in GCP_RESULTS.lpGlyphs are specific to the current font in the device context and should
            only be used to draw text in the device context while that font remains selected.
            </para>
            <para>
            When computing justification, if the trailing characters in the string are spaces, the function reduces the length of the string
            and removes the spaces prior to computing the justification. If the array consists of only spaces, the function returns an error.
            </para>
            <para>
            ExtTextOut expects an <c>lpDX</c> entry for each byte of a DBCS string, whereas <c>GetCharacterPlacement</c> assigns an
            <c>lpDX</c> entry for each glyph. To correct this mismatch when using this combination of functions, either use GetGlyphIndices
            or expand the <c>lpDX</c> array with zero-width entries for the corresponding second byte of a DBCS byte pair.
            </para>
            <para>
            If the logical width is less than the width of the leading character in the input string, GCP_RESULTS.nMaxFit returns a bad
            value. For this case, call <c>GetCharacterPlacement</c> for glyph indexes and the <c>lpDX</c> array. Then use the <c>lpDX</c>
            array to do the extent calculation using the advance width of each character, where <c>nMaxFit</c> is the number of characters
            whose glyph indexes advance width is less than the width of the leading character.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetCharWidth32(Vanara.PInvoke.HDC,System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            The <c>GetCharWidth32</c> function retrieves the widths, in logical coordinates, of consecutive characters in a specified range
            from the current font.
            </summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="iFirst">The first character in the group of consecutive characters.</param>
            <param name="iLast">The last character in the group of consecutive characters, which must not precede the specified first character.</param>
            <param name="lpBuffer">A pointer to a buffer that receives the character widths, in logical coordinates.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para><c>GetCharWidth32</c> cannot be used on TrueType fonts. To retrieve character widths for TrueType fonts, use GetCharABCWidths.</para>
            <para>
            The range is inclusive; that is, the returned widths include the widths of the characters specified by the iFirstChar and
            iLastChar parameters.
            </para>
            <para>If a character does not exist in the current font, it is assigned the width of the default character.</para>
            <para>Examples</para>
            <para>For an example, see "Displaying Keyboard Input" in Using Keyboard Input.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetCharWidthFloat(Vanara.PInvoke.HDC,System.UInt32,System.UInt32,System.Single[])">
            <summary>
            The <c>GetCharWidthFloat</c> function retrieves the fractional widths of consecutive characters in a specified range from the
            current font.
            </summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="iFirst">The code point of the first character in the group of consecutive characters.</param>
            <param name="iLast">The code point of the last character in the group of consecutive characters.</param>
            <param name="lpBuffer">A pointer to a buffer that receives the character widths, in logical units.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>
            The returned widths are in the 32-bit IEEE floating-point format. (The widths are measured along the base line of the characters.)
            </para>
            <para>
            If the iFirstChar parameter specifies the letter a and the iLastChar parameter specifies the letter z, <c>GetCharWidthFloat</c>
            retrieves the widths of all lowercase characters.
            </para>
            <para>If a character does not exist in the current font, it is assigned the width of the default character.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetCharWidthI(Vanara.PInvoke.HDC,System.UInt32,System.UInt32,System.UInt16[],System.Int32[])">
            <summary>
            The <c>GetCharWidthI</c> function retrieves the widths, in logical coordinates, of consecutive glyph indices in a specified range
            from the current font.
            </summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="giFirst">The first glyph index in the group of consecutive glyph indices.</param>
            <param name="cgi">The number of glyph indices.</param>
            <param name="pgi">
            A pointer to an array of glyph indices. If this parameter is not <c>NULL</c>, it is used instead of the giFirst parameter.
            </param>
            <param name="piWidths">A pointer to a buffer that receives the widths, in logical coordinates.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>
            The <c>GetCharWidthI</c> function processes a consecutive glyph indices if the pgi parameter is <c>NULL</c> with the giFirst
            parameter indicating the first glyph index to process and the cgi parameter indicating how many glyph indices to process.
            Otherwise the <c>GetCharWidthI</c> function processes the array of glyph indices pointed to by the pgi parameter with the cgi
            parameter indicating how many glyph indices to process.
            </para>
            <para>If a character does not exist in the current font, it is assigned the width of the default character.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetFontData(Vanara.PInvoke.HDC,System.UInt32,System.UInt32,System.IntPtr,System.UInt32)">
            <summary>The <c>GetFontData</c> function retrieves font metric data for a TrueType font.</summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="dwTable">
            The name of a font metric table from which the font data is to be retrieved. This parameter can identify one of the metric tables
            documented in the TrueType Font Files specification published by Microsoft Corporation. If this parameter is zero, the
            information is retrieved starting at the beginning of the file for TrueType font files or from the beginning of the data for the
            currently selected font for TrueType Collection files. To retrieve the data from the beginning of the file for TrueType
            Collection files specify 'ttcf' (0x66637474).
            </param>
            <param name="dwOffset">
            The offset from the beginning of the font metric table to the location where the function should begin retrieving information. If
            this parameter is zero, the information is retrieved starting at the beginning of the table specified by the dwTable parameter.
            If this value is greater than or equal to the size of the table, an error occurs.
            </param>
            <param name="pvBuffer">
            A pointer to a buffer that receives the font information. If this parameter is <c>NULL</c>, the function returns the size of the
            buffer required for the font data.
            </param>
            <param name="cjBuffer">
            The length, in bytes, of the information to be retrieved. If this parameter is zero, <c>GetFontData</c> returns the size of the
            data specified in the dwTable parameter.
            </param>
            <returns>
            <para>If the function succeeds, the return value is the number of bytes returned.</para>
            <para>If the function fails, the return value is GDI_ERROR.</para>
            </returns>
            <remarks>
            <para>
            This function is intended to be used to retrieve TrueType font information directly from the font file by font-manipulation
            applications. For information about embedding fonts see the Font Embedding Reference.
            </para>
            <para>
            An application can sometimes use the <c>GetFontData</c> function to save a TrueType font with a document. To do this, the
            application determines whether the font can be embedded by checking the <c>otmfsType</c> member of the OUTLINETEXTMETRIC
            structure. If bit 1 of <c>otmfsType</c> is set, embedding is not permitted for the font. If bit 1 is clear, the font can be
            embedded. If bit 2 is set, the embedding is read-only. If embedding is permitted, the application can retrieve the entire font
            file, specifying zero for the dwTable, dwOffset, and cbData parameters.
            </para>
            <para>If an application attempts to use this function to retrieve information for a non-TrueType font, an error occurs.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetFontLanguageInfo(Vanara.PInvoke.HDC)">
            <summary>
            The <c>GetFontLanguageInfo</c> function returns information about the currently selected font for the specified display context.
            Applications typically use this information and the GetCharacterPlacement function to prepare a character string for display.
            </summary>
            <param name="hdc">Handle to a display device context.</param>
            <returns>
            <para>
            The return value identifies characteristics of the currently selected font. The function returns 0 if the font is "normalized"
            and can be treated as a simple Latin font; it returns GCP_ERROR if an error occurs. Otherwise, the function returns a combination
            of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>GCP_DBCS</term>
            <term>The character set is DBCS.</term>
            </item>
            <item>
            <term>GCP_DIACRITIC</term>
            <term>The font/language contains diacritic glyphs.</term>
            </item>
            <item>
            <term>FLI_GLYPHS</term>
            <term>
            The font contains extra glyphs not normally accessible using the code page. Use GetCharacterPlacement to access the glyphs. This
            value is for information only and is not intended to be passed to GetCharacterPlacement.
            </term>
            </item>
            <item>
            <term>GCP_GLYPHSHAPE</term>
            <term>
            The font/language contains multiple glyphs per code point or per code point combination (supports shaping and/or ligation), and
            the font contains advanced glyph tables to provide extra glyphs for the extra shapes. If this value is specified, the lpGlyphs
            array must be used with the GetCharacterPlacement function and the ETO_GLYPHINDEX value must be passed to the ExtTextOut function
            when the string is drawn.
            </term>
            </item>
            <item>
            <term>GCP_KASHIDA</term>
            <term>The font/ language permits Kashidas.</term>
            </item>
            <item>
            <term>GCP_LIGATE</term>
            <term>The font/language contains ligation glyphs which can be substituted for specific character combinations.</term>
            </item>
            <item>
            <term>GCP_USEKERNING</term>
            <term>The font contains a kerning table which can be used to provide better spacing between the characters and glyphs.</term>
            </item>
            <item>
            <term>GCP_REORDER</term>
            <term>The language requires reordering for displayfor example, Hebrew or Arabic.</term>
            </item>
            </list>
            <para>The return value, when masked with FLI_MASK, can be passed directly to the GetCharacterPlacement function.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetFontUnicodeRanges(Vanara.PInvoke.HDC,System.IntPtr)">
            <summary>
            The <c>GetFontUnicodeRanges</c> function returns information about which Unicode characters are supported by a font. The
            information is returned as a GLYPHSET structure.
            </summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="lpgs">
            A pointer to a GLYPHSET structure that receives the glyph set information. If this parameter is <c>NULL</c>, the function returns
            the size of the <c>GLYPHSET</c> structure required to store the information.
            </param>
            <returns>
            <para>
            If the function succeeds, it returns number of bytes written to the GLYPHSET structure or, if the lpgs parameter is <c>NULL</c>,
            it returns the size of the GLYPHSET structure required to store the information.
            </para>
            <para>If the function fails, it returns zero. No extended error information is available.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetFontUnicodeRanges(Vanara.PInvoke.HDC)">
            <summary>
            The <c>GetFontUnicodeRanges</c> function returns information about which Unicode characters are supported by a font. The
            information is returned as a GLYPHSET structure.
            </summary>
            <param name="hdc">A handle to the device context.</param>
            <returns>A <see cref="T:Vanara.PInvoke.Gdi32.GLYPHSET"/> structure with the glyph set information.</returns>
            <exception cref="T:System.Exception">An unspecified error has occurred.</exception>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetGlyphIndices(Vanara.PInvoke.HDC,System.String,System.Int32,System.UInt16[],Vanara.PInvoke.Gdi32.GGI)">
            <summary>
            The <c>GetGlyphIndices</c> function translates a string into an array of glyph indices. The function can be used to determine
            whether a glyph exists in a font.
            </summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="lpstr">A pointer to the string to be converted.</param>
            <param name="c">
            The length of both the length of the string pointed to by lpstr and the size (in WORDs) of the buffer pointed to by pgi.
            </param>
            <param name="pgi">
            This buffer must be of dimension c. On successful return, contains an array of glyph indices corresponding to the characters in
            the string.
            </param>
            <param name="fl">
            <para>Specifies how glyphs should be handled if they are not supported. This parameter can be the following value.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>GGI_MARK_NONEXISTING_GLYPHS</term>
            <term>Marks unsupported glyphs with the hexadecimal value 0xffff.</term>
            </item>
            </list>
            </param>
            <returns>
            <para>If the function succeeds, it returns the number of bytes (for the ANSI function) or WORDs (for the Unicode function) converted.</para>
            <para>If the function fails, the return value is GDI_ERROR.</para>
            </returns>
            <remarks>
            This function attempts to identify a single-glyph representation for each character in the string pointed to by lpstr. While this
            is useful for certain low-level purposes (such as manipulating font files), higher-level applications that wish to map a string
            to glyphs will typically wish to use the Uniscribe functions.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetGlyphOutline(Vanara.PInvoke.HDC,System.UInt32,Vanara.PInvoke.Gdi32.GGO,Vanara.PInvoke.Gdi32.GLYPHMETRICS@,System.UInt32,System.IntPtr,Vanara.PInvoke.Gdi32.MAT2@)">
            <summary>
            The <c>GetGlyphOutline</c> function retrieves the outline or bitmap for a character in the TrueType font that is selected into
            the specified device context.
            </summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="uChar">The character for which data is to be returned.</param>
            <param name="fuFormat">
            <para>The format of the data that the function retrieves. This parameter can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>GGO_BEZIER</term>
            <term>The function retrieves the curve data as a cubic Bézier spline (not in quadratic spline format).</term>
            </item>
            <item>
            <term>GGO_BITMAP</term>
            <term>The function retrieves the glyph bitmap. For information about memory allocation, see the following Remarks section.</term>
            </item>
            <item>
            <term>GGO_GLYPH_INDEX</term>
            <term>
            Indicates that the uChar parameter is a TrueType Glyph Index rather than a character code. See the ExtTextOut function for
            additional remarks on Glyph Indexing.
            </term>
            </item>
            <item>
            <term>GGO_GRAY2_BITMAP</term>
            <term>The function retrieves a glyph bitmap that contains five levels of gray.</term>
            </item>
            <item>
            <term>GGO_GRAY4_BITMAP</term>
            <term>The function retrieves a glyph bitmap that contains 17 levels of gray.</term>
            </item>
            <item>
            <term>GGO_GRAY8_BITMAP</term>
            <term>The function retrieves a glyph bitmap that contains 65 levels of gray.</term>
            </item>
            <item>
            <term>GGO_METRICS</term>
            <term>
            The function only retrieves the GLYPHMETRICS structure specified by lpgm. The lpvBuffer is ignored. This value affects the
            meaning of the function's return value upon failure; see the Return Values section.
            </term>
            </item>
            <item>
            <term>GGO_NATIVE</term>
            <term>The function retrieves the curve data points in the rasterizer's native format and uses the font's design units.</term>
            </item>
            <item>
            <term>GGO_UNHINTED</term>
            <term>The function only returns unhinted outlines. This flag only works in conjunction with GGO_BEZIER and GGO_NATIVE.</term>
            </item>
            </list>
            <para>
            Note that, for the GGO_GRAYn_BITMAP values, the function retrieves a glyph bitmap that contains n^2+1 (n squared plus one) levels
            of gray.
            </para>
            </param>
            <param name="lpgm">A pointer to the GLYPHMETRICS structure describing the placement of the glyph in the character cell.</param>
            <param name="cjBuffer">
            The size, in bytes, of the buffer (*lpvBuffer) where the function is to copy information about the outline character. If this
            value is zero, the function returns the required size of the buffer.
            </param>
            <param name="pvBuffer">
            A pointer to the buffer that receives information about the outline character. If this value is <c>NULL</c>, the function returns
            the required size of the buffer.
            </param>
            <param name="lpmat2">A pointer to a MAT2 structure specifying a transformation matrix for the character.</param>
            <returns>
            <para>
            If GGO_BITMAP, GGO_GRAY2_BITMAP, GGO_GRAY4_BITMAP, GGO_GRAY8_BITMAP, or GGO_NATIVE is specified and the function succeeds, the
            return value is greater than zero; otherwise, the return value is GDI_ERROR. If one of these flags is specified and the buffer
            size or address is zero, the return value specifies the required buffer size, in bytes.
            </para>
            <para>If GGO_METRICS is specified and the function fails, the return value is GDI_ERROR.</para>
            </returns>
            <remarks>
            <para>
            The glyph outline returned by the <c>GetGlyphOutline</c> function is for a grid-fitted glyph. (A grid-fitted glyph is a glyph
            that has been modified so that its bitmapped image conforms as closely as possible to the original design of the glyph.) If an
            application needs an unmodified glyph outline, it can request the glyph outline for a character in a font whose size is equal to
            the font's em unit. The value for a font's em unit is stored in the <c>otmEMSquare</c> member of the OUTLINETEXTMETRIC structure.
            </para>
            <para>
            The glyph bitmap returned by <c>GetGlyphOutline</c> when GGO_BITMAP is specified is a DWORD-aligned, row-oriented, monochrome
            bitmap. When GGO_GRAY2_BITMAP is specified, the bitmap returned is a DWORD-aligned, row-oriented array of bytes whose values
            range from 0 to 4. When GGO_GRAY4_BITMAP is specified, the bitmap returned is a DWORD-aligned, row-oriented array of bytes whose
            values range from 0 to 16. When GGO_GRAY8_BITMAP is specified, the bitmap returned is a DWORD-aligned, row-oriented array of
            bytes whose values range from 0 to 64.
            </para>
            <para>
            The native buffer returned by <c>GetGlyphOutline</c> when GGO_NATIVE is specified is a glyph outline. A glyph outline is returned
            as a series of one or more contours defined by a TTPOLYGONHEADER structure followed by one or more curves. Each curve in the
            contour is defined by a TTPOLYCURVE structure followed by a number of POINTFX data points. <c>POINTFX</c> points are absolute
            positions, not relative moves. The starting point of a contour is given by the <c>pfxStart</c> member of the
            <c>TTPOLYGONHEADER</c> structure. The starting point of each curve is the last point of the previous curve or the starting point
            of the contour. The count of data points in a curve is stored in the <c>cpfx</c> member of <c>TTPOLYCURVE</c> structure. The size
            of each contour in the buffer, in bytes, is stored in the <c>cb</c> member of <c>TTPOLYGONHEADER</c> structure. Additional curve
            definitions are packed into the buffer following preceding curves and additional contours are packed into the buffer following
            preceding contours. The buffer contains as many contours as fit within the buffer returned by <c>GetGlyphOutline</c>.
            </para>
            <para>
            The GLYPHMETRICS structure specifies the width of the character cell and the location of a glyph within the character cell. The
            origin of the character cell is located at the left side of the cell at the baseline of the font. The location of the glyph
            origin is relative to the character cell origin. The height of a character cell, the baseline, and other metrics global to the
            font are given by the OUTLINETEXTMETRIC structure.
            </para>
            <para>
            An application can alter the characters retrieved in bitmap or native format by specifying a 2-by-2 transformation matrix in the
            lpMatrix parameter. For example the glyph can be modified by shear, rotation, scaling, or any combination of the three using
            matrix multiplication.
            </para>
            <para>Additional information on a glyph outlines is located in the TrueType and the OpenType technical specifications.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetKerningPairs(Vanara.PInvoke.HDC,System.UInt32,Vanara.PInvoke.Gdi32.KERNINGPAIR[])">
            <summary>
            The <c>GetKerningPairs</c> function retrieves the character-kerning pairs for the currently selected font for the specified
            device context.
            </summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="nPairs">
            The number of pairs in the lpkrnpair array. If the font has more than nNumPairs kerning pairs, the function returns an error.
            </param>
            <param name="lpKernPair">
            A pointer to an array of KERNINGPAIR structures that receives the kerning pairs. The array must contain at least as many
            structures as specified by the nNumPairs parameter. If this parameter is <c>NULL</c>, the function returns the total number of
            kerning pairs for the font.
            </param>
            <returns>
            <para>If the function succeeds, the return value is the number of kerning pairs returned.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetOutlineTextMetrics(Vanara.PInvoke.HDC,System.UInt32,System.IntPtr)">
            <summary>The <c>GetOutlineTextMetrics</c> function retrieves text metrics for TrueType fonts.</summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="cjCopy">The size, in bytes, of the array that receives the text metrics.</param>
            <param name="potm">
            A pointer to an OUTLINETEXTMETRIC structure. If this parameter is <c>NULL</c>, the function returns the size of the buffer
            required for the retrieved metric data.
            </param>
            <returns>
            <para>If the function succeeds, the return value is nonzero or the size of the required buffer.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            The OUTLINETEXTMETRIC structure contains most of the text metric information provided for TrueType fonts (including a TEXTMETRIC
            structure). The sizes returned in <c>OUTLINETEXTMETRIC</c> are in logical units; they depend on the current mapping mode.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetRasterizerCaps(Vanara.PInvoke.Gdi32.RASTERIZER_STATUS@,System.UInt32)">
            <summary>The <c>GetRasterizerCaps</c> function returns flags indicating whether TrueType fonts are installed in the system.</summary>
            <param name="lpraststat">A pointer to a RASTERIZER_STATUS structure that receives information about the rasterizer.</param>
            <param name="cjBytes">The number of bytes to be copied into the structure pointed to by the lprs parameter.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>
            The <c>GetRasterizerCaps</c> function enables applications and printer drivers to determine whether TrueType fonts are installed.
            </para>
            <para>
            If the TT_AVAILABLE flag is set in the <c>wFlags</c> member of the RASTERIZER_STATUS structure, at least one TrueType font is
            installed. If the TT_ENABLED flag is set, TrueType is enabled for the system.
            </para>
            <para>
            The actual number of bytes copied is either the member specified in the cb parameter or the length of the RASTERIZER_STATUS
            structure, whichever is less.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetTextAlign(Vanara.PInvoke.HDC)">
            <summary>The <c>GetTextAlign</c> function retrieves the text-alignment setting for the specified device context.</summary>
            <param name="hdc">A handle to the device context.</param>
            <returns>
            <para>
            If the function succeeds, the return value is the status of the text-alignment flags. For more information about the return
            value, see the Remarks section. The return value is a combination of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>TA_BASELINE</term>
            <term>The reference point is on the base line of the text.</term>
            </item>
            <item>
            <term>TA_BOTTOM</term>
            <term>The reference point is on the bottom edge of the bounding rectangle.</term>
            </item>
            <item>
            <term>TA_TOP</term>
            <term>The reference point is on the top edge of the bounding rectangle.</term>
            </item>
            <item>
            <term>TA_CENTER</term>
            <term>The reference point is aligned horizontally with the center of the bounding rectangle.</term>
            </item>
            <item>
            <term>TA_LEFT</term>
            <term>The reference point is on the left edge of the bounding rectangle.</term>
            </item>
            <item>
            <term>TA_RIGHT</term>
            <term>The reference point is on the right edge of the bounding rectangle.</term>
            </item>
            <item>
            <term>TA_RTLREADING</term>
            <term>
            Middle East language edition of Windows: The text is laid out in right to left reading order, as opposed to the default left to
            right order. This only applies when the font selected into the device context is either Hebrew or Arabic.
            </term>
            </item>
            <item>
            <term>TA_NOUPDATECP</term>
            <term>The current position is not updated after each text output call.</term>
            </item>
            <item>
            <term>TA_UPDATECP</term>
            <term>The current position is updated after each text output call.</term>
            </item>
            </list>
            <para>
            When the current font has a vertical default base line (as with Kanji), the following values are used instead of TA_BASELINE and TA_CENTER.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>VTA_BASELINE</term>
            <term>The reference point is on the base line of the text.</term>
            </item>
            <item>
            <term>VTA_CENTER</term>
            <term>The reference point is aligned vertically with the center of the bounding rectangle.</term>
            </item>
            </list>
            <para>If the function fails, the return value is GDI_ERROR.</para>
            </returns>
            <remarks>
            <para>
            The bounding rectangle is a rectangle bounding all of the character cells in a string of text. Its dimensions can be obtained by
            calling the GetTextExtentPoint32 function.
            </para>
            <para>
            The text-alignment flags determine how the TextOut and ExtTextOut functions align a string of text in relation to the string's
            reference point provided to <c>TextOut</c> or <c>ExtTextOut</c>.
            </para>
            <para>
            The text-alignment flags are not necessarily single bit flags and may be equal to zero. The flags must be examined in groups of
            related flags, as shown in the following list.
            </para>
            <list type="bullet">
            <item>
            <term>TA_LEFT, TA_RIGHT, and TA_CENTER</term>
            </item>
            <item>
            <term>TA_BOTTOM, TA_TOP, and TA_BASELINE</term>
            </item>
            <item>
            <term>TA_NOUPDATECP and TA_UPDATECP</term>
            </item>
            </list>
            <para>If the current font has a vertical default base line, the related flags are as shown in the following list.</para>
            <list type="bullet">
            <item>
            <term>TA_LEFT, TA_RIGHT, and VTA_BASELINE</term>
            </item>
            <item>
            <term>TA_BOTTOM, TA_TOP, and VTA_CENTER</term>
            </item>
            <item>
            <term>TA_NOUPDATECP and TA_UPDATECP</term>
            </item>
            </list>
            <para><c>To verify that a particular flag is set in the return value of this function:</c></para>
            <list type="number">
            <item>
            <term>Apply the bitwise OR operator to the flag and its related flags.</term>
            </item>
            <item>
            <term>Apply the bitwise AND operator to the result and the return value.</term>
            </item>
            <item>
            <term>Test for the equality of this result and the flag.</term>
            </item>
            </list>
            <para>Examples</para>
            <para>For an example, see Setting the Text Alignment.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetTextCharacterExtra(Vanara.PInvoke.HDC)">
            <summary>
            The <c>GetTextCharacterExtra</c> function retrieves the current intercharacter spacing for the specified device context.
            </summary>
            <param name="hdc">Handle to the device context.</param>
            <returns>
            <para>If the function succeeds, the return value is the current intercharacter spacing, in logical coordinates.</para>
            <para>If the function fails, the return value is 0x8000000.</para>
            </returns>
            <remarks>
            The intercharacter spacing defines the extra space, in logical units along the base line, that the TextOut or ExtTextOut
            functions add to each character as a line is written. The spacing is used to expand lines of text.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetTextColor(Vanara.PInvoke.HDC)">
            <summary>The <c>GetTextColor</c> function retrieves the current text color for the specified device context.</summary>
            <param name="hdc">Handle to the device context.</param>
            <returns>
            <para>If the function succeeds, the return value is the current text color as a COLORREF value.</para>
            <para>If the function fails, the return value is CLR_INVALID. No extended error information is available.</para>
            </returns>
            <remarks>The text color defines the foreground color of characters drawn by using the TextOut or ExtTextOut function.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetTextExtentExPoint(Vanara.PInvoke.HDC,System.String,System.Int32,System.Int32,System.Int32@,System.Int32[],Vanara.PInvoke.SIZE@)">
            <summary>
            The <c>GetTextExtentExPoint</c> function retrieves the number of characters in a specified string that will fit within a
            specified space and fills an array with the text extent for each of those characters. (A text extent is the distance between the
            beginning of the space and a character that will fit in the space.) This information is useful for word-wrapping calculations.
            </summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="lpszString">A pointer to the null-terminated string for which extents are to be retrieved.</param>
            <param name="cchString">
            The number of characters in the string pointed to by the lpszStr parameter. For an ANSI call it specifies the string length in
            bytes and for a Unicode it specifies the string length in WORDs. Note that for the ANSI function, characters in SBCS code pages
            take one byte each, while most characters in DBCS code pages take two bytes; for the Unicode function, most currently defined
            Unicode characters (those in the Basic Multilingual Plane (BMP)) are one WORD while Unicode surrogates are two WORDs.
            </param>
            <param name="nMaxExtent">The maximum allowable width, in logical units, of the formatted string.</param>
            <param name="lpnFit">
            A pointer to an integer that receives a count of the maximum number of characters that will fit in the space specified by the
            nMaxExtent parameter. When the lpnFit parameter is <c>NULL</c>, the nMaxExtent parameter is ignored.
            </param>
            <param name="lpnDx">
            <para>
            A pointer to an array of integers that receives partial string extents. Each element in the array gives the distance, in logical
            units, between the beginning of the string and one of the characters that fits in the space specified by the nMaxExtent
            parameter. This array must have at least as many elements as characters specified by the cchString parameter because the entire
            array is used internally. The function fills the array with valid extents for as many characters as are specified by the lpnFit
            parameter. Any values in the rest of the array should be ignored. If alpDx is <c>NULL</c>, the function does not compute partial
            string widths.
            </para>
            <para>
            For complex scripts, where a sequence of characters may be represented by any number of glyphs, the values in the alpDx array up
            to the number specified by the lpnFit parameter match one-to-one with code points. Again, you should ignore the rest of the
            values in the alpDx array.
            </para>
            </param>
            <param name="lpSize">
            A pointer to a SIZE structure that receives the dimensions of the string, in logical units. This parameter cannot be <c>NULL</c>.
            </param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>
            If both the lpnFit and alpDx parameters are <c>NULL</c>, calling the <c>GetTextExtentExPoint</c> function is equivalent to
            calling the GetTextExtentPoint function.
            </para>
            <para>
            For the ANSI version of <c>GetTextExtentExPoint</c>, the lpDx array has the same number of INT values as there are bytes in
            lpString. The INT values that correspond to the two bytes of a DBCS character are each the extent of the entire composite character.
            </para>
            <para>
            Note, the alpDx values for <c>GetTextExtentExPoint</c> are not the same as the lpDx values for ExtTextOut. To use the alpDx
            values in lpDx, you must first process them.
            </para>
            <para>
            When this function returns the text extent, it assumes that the text is horizontal, that is, that the escapement is always 0.
            This is true for both the horizontal and vertical measurements of the text. Even if you use a font that specifies a nonzero
            escapement, this function doesn't use the angle while it computes the text extent. The app must convert it explicitly. However,
            when the graphics mode is set to GM_ADVANCED and the character orientation is 90 degrees from the print orientation, the values
            that this function return do not follow this rule. When the character orientation and the print orientation match for a given
            string, this function returns the dimensions of the string in the SIZE structure as { cx : 116, cy : 18 }. When the character
            orientation and the print orientation are 90 degrees apart for the same string, this function returns the dimensions of the
            string in the <c>SIZE</c> structure as { cx : 18, cy : 116 }.
            </para>
            <para>
            This function returns the extent of each successive character in a string. When these are rounded to logical units, you get
            different results than what is returned from the GetCharWidth, which returns the width of each individual character rounded to
            logical units.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetTextExtentExPointI(Vanara.PInvoke.HDC,System.UInt16[],System.Int32,System.Int32,System.Int32@,System.Int32[],Vanara.PInvoke.SIZE@)">
            <summary>
            The <c>GetTextExtentExPointI</c> function retrieves the number of characters in a specified string that will fit within a
            specified space and fills an array with the text extent for each of those characters. (A text extent is the distance between the
            beginning of the space and a character that will fit in the space.) This information is useful for word-wrapping calculations.
            </summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="lpwszString">A pointer to an array of glyph indices for which extents are to be retrieved.</param>
            <param name="cwchString">The number of glyphs in the array pointed to by the pgiIn parameter.</param>
            <param name="nMaxExtent">The maximum allowable width, in logical units, of the formatted string.</param>
            <param name="lpnFit">
            A pointer to an integer that receives a count of the maximum number of characters that will fit in the space specified by the
            nMaxExtent parameter. When the lpnFit parameter is <c>NULL</c>, the nMaxExtent parameter is ignored.
            </param>
            <param name="lpnDx">
            A pointer to an array of integers that receives partial glyph extents. Each element in the array gives the distance, in logical
            units, between the beginning of the glyph indices array and one of the glyphs that fits in the space specified by the nMaxExtent
            parameter. Although this array should have at least as many elements as glyph indices specified by the cgi parameter, the
            function fills the array with extents only for as many glyph indices as are specified by the lpnFit parameter. If lpnFit is
            <c>NULL</c>, the function does not compute partial string widths.
            </param>
            <param name="lpSize">
            A pointer to a SIZE structure that receives the dimensions of the glyph indices array, in logical units. This value cannot be <c>NULL</c>.
            </param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>
            If both the lpnFit and alpDx parameters are <c>NULL</c>, calling the <c>GetTextExtentExPointI</c> function is equivalent to
            calling the GetTextExtentPointI function.
            </para>
            <para>
            When this function returns the text extent, it assumes that the text is horizontal, that is, that the escapement is always 0.
            This is true for both the horizontal and vertical measurements of the text. Even if you use a font that specifies a nonzero
            escapement, this function doesn't use the angle while it computes the text extent. The app must convert it explicitly. However,
            when the graphics mode is set to GM_ADVANCED and the character orientation is 90 degrees from the print orientation, the values
            that this function return do not follow this rule. When the character orientation and the print orientation match for a given
            string, this function returns the dimensions of the string in the SIZE structure as { cx : 116, cy : 18 }. When the character
            orientation and the print orientation are 90 degrees apart for the same string, this function returns the dimensions of the
            string in the <c>SIZE</c> structure as { cx : 18, cy : 116 }.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetTextExtentPoint(Vanara.PInvoke.HDC,System.String,System.Int32,Vanara.PInvoke.SIZE@)">
            <summary>
            <para>The <c>GetTextExtentPoint</c> function computes the width and height of the specified string of text.</para>
            <para>
            <c>Note</c> This function is provided only for compatibility with 16-bit versions of Windows. Applications should call the
            GetTextExtentPoint32 function, which provides more accurate results.
            </para>
            </summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="lpString">
            A pointer to the string that specifies the text. The string does not need to be zero-terminated, since cbString specifies the
            length of the string.
            </param>
            <param name="c">The length of the string pointed to by lpString.</param>
            <param name="lpsz">A pointer to a SIZE structure that receives the dimensions of the string, in logical units.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>
            The <c>GetTextExtentPoint</c> function uses the currently selected font to compute the dimensions of the string. The width and
            height, in logical units, are computed without considering any clipping. Also, this function assumes that the text is horizontal,
            that is, that the escapement is always 0. This is true for both the horizontal and vertical measurements of the text. Even if
            using a font specifying a nonzero escapement, this function will not use the angle while computing the text extent. The
            application must convert it explicitly.
            </para>
            <para>
            Because some devices kern characters, the sum of the extents of the characters in a string may not be equal to the extent of the string.
            </para>
            <para>The calculated string width takes into account the intercharacter spacing set by the SetTextCharacterExtra function.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetTextExtentPoint32(Vanara.PInvoke.HDC,System.String,System.Int32,Vanara.PInvoke.SIZE@)">
            <summary>The <c>GetTextExtentPoint32</c> function computes the width and height of the specified string of text.</summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="lpString">
            A pointer to a buffer that specifies the text string. The string does not need to be null-terminated, because the c parameter
            specifies the length of the string.
            </param>
            <param name="c">The length of the string pointed to by lpString.</param>
            <param name="psizl">A pointer to a SIZE structure that receives the dimensions of the string, in logical units.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>
            The <c>GetTextExtentPoint32</c> function uses the currently selected font to compute the dimensions of the string. The width and
            height, in logical units, are computed without considering any clipping.
            </para>
            <para>
            Because some devices kern characters, the sum of the extents of the characters in a string may not be equal to the extent of the string.
            </para>
            <para>
            The calculated string width takes into account the intercharacter spacing set by the SetTextCharacterExtra function and the
            justification set by SetTextJustification. This is true for both displaying on a screen and for printing. However, if lpDx is set
            in ExtTextOut, <c>GetTextExtentPoint32</c> does not take into account either intercharacter spacing or justification. In
            addition, for EMF, the print result always takes both intercharacter spacing and justification into account.
            </para>
            <para>
            When dealing with text displayed on a screen, the calculated string width takes into account the intercharacter spacing set by
            the SetTextCharacterExtra function and the justification set by SetTextJustification. However, if lpDx is set in ExtTextOut,
            <c>GetTextExtentPoint32</c> does not take into account either intercharacter spacing or justification. However, when printing
            with EMF:
            </para>
            <list type="bullet">
            <item>
            <term>The print result ignores intercharacter spacing, although <c>GetTextExtentPoint32</c> takes it into account.</term>
            </item>
            <item>
            <term>The print result takes justification into account, although <c>GetTextExtentPoint32</c> ignores it.</term>
            </item>
            </list>
            <para>
            When this function returns the text extent, it assumes that the text is horizontal, that is, that the escapement is always 0.
            This is true for both the horizontal and vertical measurements of the text. Even if you use a font that specifies a nonzero
            escapement, this function doesn't use the angle while it computes the text extent. The app must convert it explicitly. However,
            when the graphics mode is set to GM_ADVANCED and the character orientation is 90 degrees from the print orientation, the values
            that this function return do not follow this rule. When the character orientation and the print orientation match for a given
            string, this function returns the dimensions of the string in the SIZE structure as { cx : 116, cy : 18 }. When the character
            orientation and the print orientation are 90 degrees apart for the same string, this function returns the dimensions of the
            string in the <c>SIZE</c> structure as { cx : 18, cy : 116 }.
            </para>
            <para>
            <c>GetTextExtentPoint32</c> doesn't consider "\n" (new line) or "\r\n" (carriage return and new line) characters when it computes
            the height of a text string.
            </para>
            <para>Examples</para>
            <para>For an example, see Drawing Text from Different Fonts on the Same Line.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetTextExtentPointI(Vanara.PInvoke.HDC,System.UInt16[],System.Int32,Vanara.PInvoke.SIZE@)">
            <summary>The <c>GetTextExtentPointI</c> function computes the width and height of the specified array of glyph indices.</summary>
            <param name="hdc">Handle to the device context.</param>
            <param name="pgiIn">Pointer to array of glyph indices.</param>
            <param name="cgi">Specifies the number of glyph indices.</param>
            <param name="psize">Pointer to a SIZE structure that receives the dimensions of the string, in logical units.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>
            The <c>GetTextExtentPointI</c> function uses the currently selected font to compute the dimensions of the array of glyph indices.
            The width and height, in logical units, are computed without considering any clipping.
            </para>
            <para>
            When this function returns the text extent, it assumes that the text is horizontal, that is, that the escapement is always 0.
            This is true for both the horizontal and vertical measurements of the text. Even if you use a font that specifies a nonzero
            escapement, this function doesn't use the angle while it computes the text extent. The app must convert it explicitly. However,
            when the graphics mode is set to GM_ADVANCED and the character orientation is 90 degrees from the print orientation, the values
            that this function return do not follow this rule. When the character orientation and the print orientation match for a given
            string, this function returns the dimensions of the string in the SIZE structure as { cx : 116, cy : 18 }. When the character
            orientation and the print orientation are 90 degrees apart for the same string, this function returns the dimensions of the
            string in the <c>SIZE</c> structure as { cx : 18, cy : 116 }.
            </para>
            <para>
            Because some devices kern characters, the sum of the extents of the individual glyph indices may not be equal to the extent of
            the entire array of glyph indices.
            </para>
            <para>The calculated string width takes into account the intercharacter spacing set by the SetTextCharacterExtra function.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetTextFace(Vanara.PInvoke.HDC,System.Int32,System.Text.StringBuilder)">
            <summary>
            The <c>GetTextFace</c> function retrieves the typeface name of the font that is selected into the specified device context.
            </summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="c">
            The length of the buffer pointed to by lpFaceName. For the ANSI function it is a BYTE count and for the Unicode function it is a
            WORD count. Note that for the ANSI function, characters in SBCS code pages take one byte each, while most characters in DBCS code
            pages take two bytes; for the Unicode function, most currently defined Unicode characters (those in the Basic Multilingual Plane
            (BMP)) are one WORD while Unicode surrogates are two WORDs.
            </param>
            <param name="lpName">
            A pointer to the buffer that receives the typeface name. If this parameter is <c>NULL</c>, the function returns the number of
            characters in the name, including the terminating null character.
            </param>
            <returns>
            <para>If the function succeeds, the return value is the number of characters copied to the buffer.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>The typeface name is copied as a null-terminated character string.</para>
            <para>If the name is longer than the number of characters specified by the nCount parameter, the name is truncated.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetTextMetrics(Vanara.PInvoke.HDC,Vanara.PInvoke.TEXTMETRIC@)">
            <summary>The <c>GetTextMetrics</c> function fills the specified buffer with the metrics for the currently selected font.</summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="lptm">A pointer to the TEXTMETRIC structure that receives the text metrics.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>
            To determine whether a font is a TrueType font, first select it into a DC, then call <c>GetTextMetrics</c>, and then check for
            TMPF_TRUETYPE in TEXTMETRIC.tmPitchAndFamily. Note that GetDC returns an uninitialized DC, which has "System" (a bitmap font) as
            the default font; thus the need to select a font into the DC.
            </para>
            <para>Examples</para>
            <para>
            For an example, see "Displaying Keyboard Input" in Using Keyboard Input or Drawing Text from Different Fonts on the Same Line.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.PolyTextOut(Vanara.PInvoke.HDC,Vanara.PInvoke.Gdi32.POLYTEXT[],System.Int32)">
            <summary>
            The <c>PolyTextOut</c> function draws several strings using the font and text colors currently selected in the specified device context.
            </summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="ppt">
            A pointer to an array of POLYTEXT structures describing the strings to be drawn. The array contains one structure for each string
            to be drawn.
            </param>
            <param name="nstrings">The number of POLYTEXT structures in the pptxt array.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>
            Each POLYTEXT structure contains the coordinates of a reference point that Windows uses to align the corresponding string of
            text. An application can specify how the reference point is used by calling the SetTextAlign function. An application can
            determine the current text-alignment setting for the specified device context by calling the GetTextAlign function.
            </para>
            <para>To draw a single string of text, the application should call the ExtTextOut function.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.RemoveFontMemResourceEx(Vanara.PInvoke.HANDLE)">
            <summary>The <c>RemoveFontMemResourceEx</c> function removes the fonts added from a memory image file.</summary>
            <param name="h">A handle to the font-resource. This handle is returned by the AddFontMemResourceEx function.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero. No extended error information is available.</para>
            </returns>
            <remarks>
            This function removes a font that was added by the AddFontMemResourceEx function. To remove the font, specify the same path and
            flags as were used in <c>AddFontMemResourceEx</c>. This function will only remove the font that is specified by fh.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.RemoveFontResource(System.String)">
            <summary>
            <para>The <c>RemoveFontResource</c> function removes the fonts in the specified file from the system font table.</para>
            <para>If the font was added using the AddFontResourceEx function, you must use the RemoveFontResourceEx function.</para>
            </summary>
            <param name="lpFileName">A pointer to a null-terminated string that names a font resource file.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>
            We recommend that if an app adds or removes fonts from the system font table that it notify other windows of the change by
            sending a WM_FONTCHANGE message to all top-level windows in the system. The app sends this message by calling the SendMessage
            function with the hwnd parameter set to HWND_BROADCAST.
            </para>
            <para>
            If there are outstanding references to a font, the associated resource remains loaded until no device context is using it.
            Furthermore, if the font is listed in the font registry ( <c>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows
            NT\CurrentVersion\Fonts</c>) and is installed to any location other than the %windir%\fonts\ folder, it may be loaded into other
            active sessions (including session 0).
            </para>
            <para>
            When you try to replace an existing font file that contains a font with outstanding references to it, you might get an error that
            indicates that the original font can't be deleted because it’s in use even after you call <c>RemoveFontResource</c>. If your app
            requires that the font file be replaced, to reduce the resource count of the original font to zero, call
            <c>RemoveFontResource</c> in a loop as shown in this example code. If you continue to get errors, this is an indication that the
            font file remains loaded in other sessions. Make sure the font isn't listed in the font registry and restart the system to ensure
            the font is unloaded from all sessions.
            </para>
            <para>
            <c>Note</c> Apps where the original font file is in use will still be able to access the original file and won't use the new font
            until the font reloads. Call AddFontResource to reload the font. We recommend that you call <c>AddFontResource</c> the same
            number of times as the call to <c>RemoveFontResource</c> succeeded as shown in this example code.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.RemoveFontResourceEx(System.String,Vanara.PInvoke.Gdi32.FR,System.IntPtr)">
            <summary>The <c>RemoveFontResourceEx</c> function removes the fonts in the specified file from the system font table.</summary>
            <param name="name">A pointer to a null-terminated string that names a font resource file.</param>
            <param name="fl">
            The characteristics of the font to be removed from the system. In order for the font to be removed, the flags used must be the
            same as when the font was added with the AddFontResourceEx function. See the <see cref="M:Vanara.PInvoke.Gdi32.AddFontResourceEx(System.String,Vanara.PInvoke.Gdi32.FR,System.IntPtr)"/> function for more information.
            </param>
            <param name="pdv">Reserved. Must be zero.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero. No extended error information is available.</para>
            </returns>
            <remarks>
            <para>
            This function will only remove the font if the flags specified are the same as when then font was added with the
            AddFontResourceEx function.
            </para>
            <para>
            When you try to replace an existing font file that contains a font with outstanding references to it, you might get an error that
            indicates that the original font can't be deleted because it’s in use even after you call <c>RemoveFontResourceEx</c>. If your
            app requires that the font file be replaced, to reduce the resource count of the original font to zero, call
            <c>RemoveFontResourceEx</c> in a loop as shown in this example code. If you continue to get errors, this is an indication that
            the font file remains loaded in other sessions. Make sure the font isn't listed in the font registry and restart the system to
            ensure the font is unloaded from all sessions.
            </para>
            <para>
            <c>Note</c> Apps where the original font file is in use will still be able to access the original file and won't use the new font
            until the font reloads. Call AddFontResourceEx to reload the font. We recommend that you call <c>AddFontResourceEx</c> the same
            number of times as the call to <c>RemoveFontResourceEx</c> succeeded as shown in this example code.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SetMapperFlags(Vanara.PInvoke.HDC,System.UInt32)">
            <summary>
            The <c>SetMapperFlags</c> function alters the algorithm the font mapper uses when it maps logical fonts to physical fonts.
            </summary>
            <param name="hdc">A handle to the device context that contains the font-mapper flag.</param>
            <param name="flags">
            Specifies whether the font mapper should attempt to match a font's aspect ratio to the current device's aspect ratio. If bit zero
            is set, the mapper selects only matching fonts.
            </param>
            <returns>
            <para>If the function succeeds, the return value is the previous value of the font-mapper flag.</para>
            <para>If the function fails, the return value is GDI_ERROR.</para>
            </returns>
            <remarks>
            <para>
            If the dwFlag parameter is set and no matching fonts exist, Windows chooses a new aspect ratio and retrieves a font that matches
            this ratio.
            </para>
            <para>The remaining bits of the dwFlag parameter must be zero.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SetTextAlign(Vanara.PInvoke.HDC,Vanara.PInvoke.Gdi32.TextAlign)">
            <summary>The <c>SetTextAlign</c> function sets the text-alignment flags for the specified device context.</summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="align">
            <para>
            The text alignment by using a mask of the values in the following list. Only one flag can be chosen from those that affect
            horizontal and vertical alignment. In addition, only one of the two flags that alter the current position can be chosen.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>TA_BASELINE</term>
            <term>The reference point will be on the base line of the text.</term>
            </item>
            <item>
            <term>TA_BOTTOM</term>
            <term>The reference point will be on the bottom edge of the bounding rectangle.</term>
            </item>
            <item>
            <term>TA_TOP</term>
            <term>The reference point will be on the top edge of the bounding rectangle.</term>
            </item>
            <item>
            <term>TA_CENTER</term>
            <term>The reference point will be aligned horizontally with the center of the bounding rectangle.</term>
            </item>
            <item>
            <term>TA_LEFT</term>
            <term>The reference point will be on the left edge of the bounding rectangle.</term>
            </item>
            <item>
            <term>TA_RIGHT</term>
            <term>The reference point will be on the right edge of the bounding rectangle.</term>
            </item>
            <item>
            <term>TA_NOUPDATECP</term>
            <term>The current position is not updated after each text output call. The reference point is passed to the text output function.</term>
            </item>
            <item>
            <term>TA_RTLREADING</term>
            <term>
            Middle East language edition of Windows: The text is laid out in right to left reading order, as opposed to the default left to
            right order. This applies only when the font selected into the device context is either Hebrew or Arabic.
            </term>
            </item>
            <item>
            <term>TA_UPDATECP</term>
            <term>The current position is updated after each text output call. The current position is used as the reference point.</term>
            </item>
            </list>
            <para>
            When the current font has a vertical default base line, as with Kanji, the following values must be used instead of TA_BASELINE
            and TA_CENTER.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>VTA_BASELINE</term>
            <term>The reference point will be on the base line of the text.</term>
            </item>
            <item>
            <term>VTA_CENTER</term>
            <term>The reference point will be aligned vertically with the center of the bounding rectangle.</term>
            </item>
            </list>
            <para>The default values are TA_LEFT, TA_TOP, and TA_NOUPDATECP.</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is the previous text-alignment setting.</para>
            <para>If the function fails, the return value is GDI_ERROR.</para>
            </returns>
            <remarks>
            <para>
            The TextOut and ExtTextOut functions use the text-alignment flags to position a string of text on a display or other device. The
            flags specify the relationship between a reference point and a rectangle that bounds the text. The reference point is either the
            current position or a point passed to a text output function.
            </para>
            <para>The rectangle that bounds the text is formed by the character cells in the text string.</para>
            <para>The best way to get left-aligned text is to use either</para>
            <para>or</para>
            <para>You can also use <c>SetTextAlign</c> (hdc, TA_LEFT) for this purpose, but this loses any vertical or right-to-left settings.</para>
            <para>
            <c>Note</c> You should not use <c>SetTextAlign</c> with TA_UPDATECP when you are using ScriptStringOut, because selected text is
            not rendered correctly. If you must use this flag, you can unset and reset it as necessary to avoid the problem.
            </para>
            <para>Examples</para>
            <para>For an example, see Setting the Text Alignment.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SetTextCharacterExtra(Vanara.PInvoke.HDC,System.Int32)">
            <summary>
            The <c>SetTextCharacterExtra</c> function sets the intercharacter spacing. Intercharacter spacing is added to each character,
            including break characters, when the system writes a line of text.
            </summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="extra">
            The amount of extra space, in logical units, to be added to each character. If the current mapping mode is not MM_TEXT, the
            nCharExtra parameter is transformed and rounded to the nearest pixel.
            </param>
            <returns>
            <para>If the function succeeds, the return value is the previous intercharacter spacing.</para>
            <para>If the function fails, the return value is 0x80000000.</para>
            </returns>
            <remarks>
            <para>
            This function is supported mainly for compatibility with existing applications. New applications should generally avoid calling
            this function, because it is incompatible with complex scripts (scripts that require text shaping; Arabic script is an example of this).
            </para>
            <para>
            The recommended approach is that instead of calling this function and then TextOut, applications should call ExtTextOut and use
            its lpDx parameter to supply widths.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SetTextColor(Vanara.PInvoke.HDC,Vanara.PInvoke.COLORREF)">
            <summary>The <c>SetTextColor</c> function sets the text color for the specified device context to the specified color.</summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="color">The color of the text.</param>
            <returns>
            <para>If the function succeeds, the return value is a color reference for the previous text color as a COLORREF value.</para>
            <para>If the function fails, the return value is CLR_INVALID.</para>
            </returns>
            <remarks>
            <para>
            The text color is used to draw the face of each character written by the TextOut and ExtTextOut functions. The text color is also
            used in converting bitmaps from color to monochrome and vice versa.
            </para>
            <para>Examples</para>
            <para>For an example, see "Setting Fonts for Menu-Item Text Strings" in Using Menus.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SetTextJustification(Vanara.PInvoke.HDC,System.Int32,System.Int32)">
            <summary>
            The <c>SetTextJustification</c> function specifies the amount of space the system should add to the break characters in a string
            of text. The space is added when an application calls the TextOut or ExtTextOut functions.
            </summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="extra">
            The total extra space, in logical units, to be added to the line of text. If the current mapping mode is not MM_TEXT, the value
            identified by the nBreakExtra parameter is transformed and rounded to the nearest pixel.
            </param>
            <param name="count">The number of break characters in the line.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>
            The break character is usually the space character (ASCII 32), but it may be defined by a font as some other character. The
            GetTextMetrics function can be used to retrieve a font's break character.
            </para>
            <para>The TextOut function distributes the specified extra space evenly among the break characters in the line.</para>
            <para>
            The GetTextExtentPoint32 function is always used with the <c>SetTextJustification</c> function. Sometimes the
            <c>GetTextExtentPoint32</c> function takes justification into account when computing the width of a specified line before
            justification, and sometimes it does not. For more details on this, see <c>GetTextExtentPoint32</c>. This width must be known
            before an appropriate nBreakExtra value can be computed.
            </para>
            <para>
            <c>SetTextJustification</c> can be used to justify a line that contains multiple strings in different fonts. In this case, each
            string must be justified separately.
            </para>
            <para>
            Because rounding errors can occur during justification, the system keeps a running error term that defines the current error
            value. When justifying a line that contains multiple runs, GetTextExtentPoint automatically uses this error term when it computes
            the extent of the next run, allowing TextOut to blend the error into the new run. After each line has been justified, this error
            term must be cleared to prevent it from being incorporated into the next line. The term can be cleared by calling
            <c>SetTextJustification</c> with nBreakExtra set to zero.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.TextOut(Vanara.PInvoke.HDC,System.Int32,System.Int32,System.String,System.Int32)">
            <summary>
            The <c>TextOut</c> function writes a character string at the specified location, using the currently selected font, background
            color, and text color.
            </summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="x">The x-coordinate, in logical coordinates, of the reference point that the system uses to align the string.</param>
            <param name="y">The y-coordinate, in logical coordinates, of the reference point that the system uses to align the string.</param>
            <param name="lpString">
            A pointer to the string to be drawn. The string does not need to be zero-terminated, because cchString specifies the length of
            the string.
            </param>
            <param name="c">The length of the string pointed to by lpString, in characters.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>
            The interpretation of the reference point depends on the current text-alignment mode. An application can retrieve this mode by
            calling the GetTextAlign function; an application can alter this mode by calling the SetTextAlign function. You can use the
            following values for text alignment. Only one flag can be chosen from those that affect horizontal and vertical alignment. In
            addition, only one of the two flags that alter the current position can be chosen.
            </para>
            <list type="table">
            <listheader>
            <term>Term</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>TA_BASELINE</term>
            <term>The reference point will be on the base line of the text.</term>
            </item>
            <item>
            <term>TA_BOTTOM</term>
            <term>The reference point will be on the bottom edge of the bounding rectangle.</term>
            </item>
            <item>
            <term>TA_TOP</term>
            <term>The reference point will be on the top edge of the bounding rectangle.</term>
            </item>
            <item>
            <term>TA_CENTER</term>
            <term>The reference point will be aligned horizontally with the center of the bounding rectangle.</term>
            </item>
            <item>
            <term>TA_LEFT</term>
            <term>The reference point will be on the left edge of the bounding rectangle.</term>
            </item>
            <item>
            <term>TA_RIGHT</term>
            <term>The reference point will be on the right edge of the bounding rectangle.</term>
            </item>
            <item>
            <term>TA_NOUPDATECP</term>
            <term>The current position is not updated after each text output call. The reference point is passed to the text output function.</term>
            </item>
            <item>
            <term>TA_RTLREADING</term>
            <term>
            Middle East language edition of Windows: The text is laid out in right to left reading order, as opposed to the default left to
            right order. This applies only when the font selected into the device context is either Hebrew or Arabic.
            </term>
            </item>
            <item>
            <term>TA_UPDATECP</term>
            <term>The current position is updated after each text output call. The current position is used as the reference point.</term>
            </item>
            </list>
            <para>
            By default, the current position is not used or updated by this function. However, an application can call the SetTextAlign
            function with the fMode parameter set to TA_UPDATECP to permit the system to use and update the current position each time the
            application calls <c>TextOut</c> for a specified device context. When this flag is set, the system ignores the nXStart and
            nYStart parameters on subsequent <c>TextOut</c> calls.
            </para>
            <para>
            When the <c>TextOut</c> function is placed inside a path bracket, the system generates a path for the TrueType text that includes
            each character plus its character box. The region generated is the character box minus the text, rather than the text itself. You
            can obtain the region enclosed by the outline of the TrueType text by setting the background mode to transparent before placing
            the <c>TextOut</c> function in the path bracket. Following is sample code that demonstrates this procedure.
            </para>
            <para>Examples</para>
            <para>For an example, see Enumerating the Installed Fonts.</para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.ABC">
            <summary>The <c>ABC</c> structure contains the width of a character in a TrueType font.</summary>
            <remarks>
            The total width of a character is the summation of the A, B, and C spaces. Either the A or the C space can be negative to
            indicate underhangs or overhangs.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ABC.abcA">
            <summary>
            The A spacing of the character. The A spacing is the distance to add to the current position before drawing the character glyph.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ABC.abcB">
            <summary>The B spacing of the character. The B spacing is the width of the drawn portion of the character glyph.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ABC.abcC">
            <summary>
            The C spacing of the character. The C spacing is the distance to add to the current position to provide white space to the
            right of the character glyph.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.ABCFLOAT">
            <summary>The <c>ABCFLOAT</c> structure contains the A, B, and C widths of a font character.</summary>
            <remarks>
            <para>The A, B, and C widths are measured along the base line of the font.</para>
            <para>
            The character increment (total width) of a character is the sum of the A, B, and C spaces. Either the A or the C space can be
            negative to indicate underhangs or overhangs.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ABCFLOAT.abcfA">
            <summary>
            The A spacing of the character. The A spacing is the distance to add to the current position before drawing the character glyph.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ABCFLOAT.abcfB">
            <summary>The B spacing of the character. The B spacing is the width of the drawn portion of the character glyph.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ABCFLOAT.abcfC">
            <summary>
            The C spacing of the character. The C spacing is the distance to add to the current position to provide white space to the
            right of the character glyph.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.AXESLIST">
            <summary>The <c>AXESLIST</c> structure contains information on all the axes of a multiple master font.</summary>
            <remarks>
            <para>The PostScript Open Type Font does not support multiple master functionality.</para>
            <para>
            The information on the axes of a multiple master font are specified by the AXISINFO structures. The <c>axlNumAxes</c> member
            specifies the actual size of <c>axlAxisInfo</c>, while MM_MAX_NUMAXES, which equals 16, is the maximum allowed size of <c>axlAxisInfo</c>.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.AXESLIST.axlReserved">
            <summary>Reserved. Must be STAMP_AXESLIST.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.AXESLIST.axlNumAxes">
            <summary>Number of axes for a specified multiple master font.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.AXESLIST.axlAxisInfo">
            <summary>
            An array of AXISINFO structures. Each <c>AXISINFO</c> structure contains information on an axis of a specified multiple
            master font. This corresponds to the <c>dvValues</c> array in the DESIGNVECTOR structure.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.AXISINFO">
            <summary>The <c>AXISINFO</c> structure contains information about an axis of a multiple master font.</summary>
            <remarks>
            <para>
            The <c>AXISINFO</c> structure contains the name of an axis in a multiple master font and also the minimum and maximum possible
            values for the axis. The length of the name is MM_MAX_AXES_NAMELEN, which equals 16. An application queries these values before
            setting its desired values in the DESIGNVECTOR array.
            </para>
            <para>The PostScript Open Type Font does not support multiple master functionality.</para>
            <para>For the ANSI version of this structure, <c>axAxisName</c> must be an array of bytes.</para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.AXISINFO.axMinValue">
            <summary>The minimum value for this axis.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.AXISINFO.axMaxValue">
            <summary>The maximum value for this axis.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.AXISINFO.axAxisName">
            <summary>The name of the axis, specified as an array of characters.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.DESIGNVECTOR">
            <summary>
            The <c>DESIGNVECTOR</c> structure is used by an application to specify values for the axes of a multiple master font.
            </summary>
            <remarks>
            <para>
            The <c>dvNumAxes</c> member determines the actual size of <c>dvValues</c>, and thus, of <c>DESIGNVECTOR</c>. The constant
            MM_MAX_NUMAXES, which is 16, specifies the maximum allowed size of the <c>dvValues</c> array.
            </para>
            <para>The PostScript Open Type Font does not support multiple master functionality.</para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DESIGNVECTOR.dvReserved">
            <summary>Reserved. Must be STAMP_DESIGNVECTOR.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DESIGNVECTOR.dvNumAxes">
            <summary>Number of values in the <c>dvValues</c> array.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DESIGNVECTOR.dvValues">
            <summary>
            An array specifying the values of the axes of a multiple master OpenType font. This array corresponds to the
            <c>axlAxisInfo</c> array in the AXESLIST structure.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.ENUMLOGFONT">
            <summary>
            The <c>ENUMLOGFONT</c> structure defines the attributes of a font, the complete name of a font, and the style of a font.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ENUMLOGFONT.elfLogFont">
            <summary>A LOGFONT structure that defines the attributes of a font.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ENUMLOGFONT.elfFullName">
            <summary>A unique name for the font. For example, ABCD Font Company TrueType Bold Italic Sans Serif.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ENUMLOGFONT.elfStyle">
            <summary>The style of the font. For example, Bold Italic.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.ENUMLOGFONTEX">
            <summary>The <c>ENUMLOGFONTEX</c> structure contains information about an enumerated font.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ENUMLOGFONTEX.elfLogFont">
            <summary>A LOGFONT structure that contains values defining the font attributes.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ENUMLOGFONTEX.elfFullName">
            <summary>The unique name of the font. For example, ABC Font Company TrueType Bold Italic Sans Serif.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ENUMLOGFONTEX.elfStyle">
            <summary>The style of the font. For example, Bold Italic.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ENUMLOGFONTEX.elfScript">
            <summary>The script, that is, the character set, of the font. For example, Cyrillic.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.ENUMLOGFONTEXDV">
            <summary>The <c>ENUMLOGFONTEXDV</c> structure contains the information used to create a font.</summary>
            <remarks>
            <para>
            The actual size of <c>ENUMLOGFONTEXDV</c> depends on that of DESIGNVECTOR, which, in turn depends on its <c>dvNumAxes</c> member.
            </para>
            <para>
            The EnumFonts, EnumFontFamilies, and EnumFontFamiliesEx functions have been modified to return pointers to ENUMTEXTMETRIC and
            <c>ENUMLOGFONTEXDV</c> to the callback function.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ENUMLOGFONTEXDV.elfEnumLogfontEx">
            <summary>An ENUMLOGFONTEX structure that contains information about the logical attributes of the font.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ENUMLOGFONTEXDV.elfDesignVector">
            <summary>A DESIGNVECTOR structure. This is zero-filled unless the font described is a multiple master OpenType font.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.ENUMTEXTMETRIC">
            <summary>The <c>ENUMTEXTMETRIC</c> structure contains information about a physical font.</summary>
            <remarks>
            <para><c>ENUMTEXTMETRIC</c> is an extension of NEWTEXTMETRICEX that includes the axis information for a multiple master font.</para>
            <para>
            The EnumFonts, EnumFontFamilies, and EnumFontFamiliesEx functions have been modified to return pointers to the
            <c>ENUMTEXTMETRIC</c> and ENUMLOGFONTEXDV structures.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ENUMTEXTMETRIC.etmNewTextMetricEx">
            <summary>A NEWTEXTMETRICEX structure, containing information about a physical font.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ENUMTEXTMETRIC.etmAxesList">
            <summary>
            An AXESLIST structure, containing information about the axes for the font. This is only used for multiple master fonts.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.FIXED">
            <summary>The <c>FIXED</c> structure contains the integral and fractional parts of a fixed-point real number.</summary>
            <remarks>The <c>FIXED</c> structure is used to describe the elements of the MAT2 structure.</remarks>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.FIXED.value">
            <summary>The integral value.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.FIXED.fract">
            <summary>The fractional value.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.FIXED.op_Implicit(Vanara.PInvoke.Gdi32.FIXED)~System.Decimal">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.Gdi32.FIXED"/> to <see cref="T:System.Decimal"/>.</summary>
            <param name="f">The FIXED instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.FIXED.op_Implicit(System.Decimal)~Vanara.PInvoke.Gdi32.FIXED">
            <summary>Performs an implicit conversion from <see cref="T:System.Decimal"/> to <see cref="T:Vanara.PInvoke.Gdi32.FIXED"/>.</summary>
            <param name="d">The decimal value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.FIXED.ToString">
            <summary>Converts to string.</summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.FONTSIGNATURE">
            <summary>Contains information identifying the code pages and Unicode subranges for which a given font provides glyphs.</summary>
            <remarks>
            GDI relies on Windows code pages fitting within a 32-bit value. Furthermore, the highest 2 bits within this value are reserved
            for GDI internal use and may not be assigned to code pages.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.FONTSIGNATURE.fsUsb">
            <summary>
            A 128-bit Unicode subset bitfield (USB) identifying up to 126 Unicode subranges. Each bit, except the two most significant
            bits, represents a single subrange. The most significant bit is always 1 and identifies the bitfield as a font signature; the
            second most significant bit is reserved and must be 0. Unicode subranges are numbered in accordance with the ISO 10646
            standard. For more information, see Unicode Subset Bitfields.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.FONTSIGNATURE.fsCsb">
            <summary>
            A 64-bit, code-page bitfield (CPB) that identifies a specific character set or code page. Code pages are in the lower 32 bits
            of this bitfield. The high 32 are used for non-Windows code pages. For more information, see Code Page Bitfields.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.GCP_RESULTS">
            <summary>
            The <c>GCP_RESULTS</c> structure contains information about characters in a string. This structure receives the results of the
            GetCharacterPlacement function. For some languages, the first element in the arrays may contain more, language-dependent information.
            </summary>
            <remarks>
            <para>
            Whether the <c>lpGlyphs</c>, <c>lpOutString</c>, or neither is required depends on the results of the GetFontLanguageInfo call.
            </para>
            <para>
            In the case of a font for a language such as English, in which none of the GCP_DBCS, GCP_REORDER, GCP_GLYPHSHAPE, GCP_LIGATE,
            GCP_DIACRITIC, or GCP_KASHIDA flags are returned, neither of the arrays is required for proper operation. (Though not required,
            they can still be used. If the <c>lpOutString</c> array is used, it will be exactly the same as the lpInputString passed to
            GetCharacterPlacement.) Note, however, that if GCP_MAXEXTENT is used, then <c>lpOutString</c> will contain the truncated string
            if it is used, NOT an exact copy of the original.
            </para>
            <para>
            In the case of fonts for languages such as Hebrew, which DO have reordering but do not typically have extra glyph shapes,
            <c>lpOutString</c> should be used. This will give the string on the screen-readable order. However, the <c>lpGlyphs</c> array is
            not typically needed. (Hebrew can have extra glyphs, if the font is a TrueType/Open font.)
            </para>
            <para>
            In the case of languages such as Thai or Arabic, in which GetFontLanguageInfo returns the GCP_GLYPHSHAPE flag, the
            <c>lpOutString</c> will give the display-readable order of the string passed to GetCharacterPlacement, but the values will still
            be the unshaped characters. For proper display, the <c>lpGlyphs</c> array must be used.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.GCP_RESULTS.lStructSize">
            <summary>The size, in bytes, of the structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.GCP_RESULTS.lpOutString">
            <summary>
            A pointer to the buffer that receives the output string or is <c>NULL</c> if the output string is not needed. The output
            string is a version of the original string that is in the order that will be displayed on a specified device. Typically the
            output string is identical to the original string, but may be different if the string needs reordering and the GCP_REORDER
            flag is set or if the original string exceeds the maximum extent and the GCP_MAXEXTENT flag is set.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.GCP_RESULTS.lpOrder">
            <summary>
            <para>
            A pointer to the array that receives ordering indexes or is <c>NULL</c> if the ordering indexes are not needed. However, its
            meaning depends on the other elements of <c>GCP_RESULTS</c>. If glyph indexes are to be returned, the indexes are for the
            <c>lpGlyphs</c> array; if glyphs indexes are not returned and <c>lpOrder</c> is requested, the indexes are for
            <c>lpOutString</c>. For example, in the latter case the value of <c>lpOrder</c>[i] is the position of <c>lpString</c>[i] in
            the output string lpOutString.
            </para>
            <para>
            This is typically used when GetFontLanguageInfo returns the GCP_REORDER flag, which indicates that the original string needs
            reordering. For example, in Hebrew, in which the text runs from right to left, the <c>lpOrder</c> array gives the exact
            locations of each element in the original string.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.GCP_RESULTS.lpDx">
            <summary>
            <para>
            A pointer to the array that receives the distances between adjacent character cells or is <c>NULL</c> if these distances are
            not needed. If glyph rendering is done, the distances are for the glyphs not the characters, so the resulting array can be
            used with the ExtTextOut function.
            </para>
            <para>
            The distances in this array are in display order. To find the distance for the i character in the original string, use the
            <c>lpOrder</c> array as follows:
            </para>
            <para>width = lpDx[lpOrder[i]];</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.GCP_RESULTS.lpCaretPos">
            <summary>
            <para>
            A pointer to the array that receives the caret position values or is <c>NULL</c> if caret positions are not needed. Each
            value specifies the caret position immediately before the corresponding character. In some languages the position of the
            caret for each character may not be immediately to the left of the character. For example, in Hebrew, in which the text runs
            from right to left, the caret position is to the right of the character. If glyph ordering is done, <c>lpCaretPos</c> matches
            the original string, not the output string. This means that some adjacent values may be the same.
            </para>
            <para>
            The values in this array are in input order. To find the caret position value for the i character in the original string, use
            the array as follows:
            </para>
            <para>position = lpCaretPos[i];</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.GCP_RESULTS.lpClass">
            <summary>
            <para>
            A pointer to the array that contains and/or receives character classifications. The values indicate how to lay out characters
            in the string and are similar (but not identical) to the CT_CTYPE2 values returned by the GetStringTypeEx function. Each
            element of the array can be set to zero or one of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>GCPCLASS_ARABIC</term>
            <term>Arabic character.</term>
            </item>
            <item>
            <term>GCPCLASS_HEBREW</term>
            <term>Hebrew character.</term>
            </item>
            <item>
            <term>GCPCLASS_LATIN</term>
            <term>Character from a Latin or other single-byte character set for a left-to-right language.</term>
            </item>
            <item>
            <term>GCPCLASS_LATINNUMBER</term>
            <term>Digit from a Latin or other single-byte character set for a left-to-right language.</term>
            </item>
            <item>
            <term>GCPCLASS_LOCALNUMBER</term>
            <term>Digit from the character set associated with the current font.</term>
            </item>
            </list>
            <para>In addition, the following can be used when supplying values in the <c>lpClass</c> array with the GCP_CLASSIN flag.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>GCPCLASS_LATINNUMERICSEPARATOR</term>
            <term>Input only. Character used to separate Latin digits, such as a comma or decimal point.</term>
            </item>
            <item>
            <term>GCPCLASS_LATINNUMERICTERMINATOR</term>
            <term>Input only. Character used to terminate Latin digits, such as a plus or minus sign.</term>
            </item>
            <item>
            <term>GCPCLASS_NEUTRAL</term>
            <term>Input only. Character has no specific classification.</term>
            </item>
            <item>
            <term>GCPCLASS_NUMERICSEPARATOR</term>
            <term>Input only. Character used to separate digits, such as a comma or decimal point.</term>
            </item>
            </list>
            <para>
            For languages that use the GCP_REORDER flag, the following values can also be used with the GCP_CLASSIN flag. Unlike the
            preceding values, which can be used anywhere in the <c>lpClass</c> array, all of the following values are used only in the
            first location in the array. All combine with other classifications.
            </para>
            <para>Note that GCPCLASS_PREBOUNDLTR and GCPCLASS_PREBOUNDRTL are mutually exclusive, as are GCPCLASSPOSTBOUNDLTR and GCPCLASSPOSTBOUNDRTL.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>GCPCLASS_PREBOUNDLTR</term>
            <term>Set lpClass[0] to GCPCLASS_PREBOUNDLTR to bind the string to left-to-right reading order before the string.</term>
            </item>
            <item>
            <term>GCPCLASS_PREBOUNDRTL</term>
            <term>Set lpClass[0] to GCPCLASS_PREBOUNDRTL to bind the string to right-to-left reading order before the string.</term>
            </item>
            <item>
            <term>GCPCLASS_POSTBOUNDLTR</term>
            <term>Set lpClass[0] to GCPCLASS_POSTBOUNDLTR to bind the string to left-to-right reading order after the string.</term>
            </item>
            <item>
            <term>GCPCLASS_POSTBOUNDRTL</term>
            <term>Set lpClass[0] to GCPCLASS_POSTBOUNDRTL to bind the string to right-to-left reading order after the string.</term>
            </item>
            </list>
            <para>
            To force the layout of a character to be carried out in a specific way, preset the classification for the corresponding array
            element; the function leaves such preset classifications unchanged and computes classifications only for array elements that
            have been set to zero. Preset classifications are used only if the GCP_CLASSIN flag is set and the <c>lpClass</c> array is supplied.
            </para>
            <para>If GetFontLanguageInfo does not return GCP_REORDER for the current font, only the GCPCLASS_LATIN value is meaningful.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.GCP_RESULTS.lpGlyphs">
            <summary>
            <para>
            A pointer to the array that receives the values identifying the glyphs used for rendering the string or is <c>NULL</c> if
            glyph rendering is not needed. The number of glyphs in the array may be less than the number of characters in the original
            string if the string contains ligated glyphs. Also if reordering is required, the order of the glyphs may not be sequential.
            </para>
            <para>
            This array is useful if more than one operation is being done on a string which has any form of ligation, kerning or
            order-switching. Using the values in this array for subsequent operations saves the time otherwise required to generate the
            glyph indices each time.
            </para>
            <para>
            This array always contains glyph indices and the ETO_GLYPH_INDEX value must always be used when this array is used with the
            ExtTextOut function.
            </para>
            <para>
            When GCP_LIGATE is used, you can limit the number of characters that will be ligated together. (In Arabic for example,
            three-character ligations are common). This is done by setting the maximum required in lpGcpResults-&gt;lpGlyphs[0]. If no
            maximum is required, you should set this field to zero.
            </para>
            <para>
            For languages such as Arabic, where GetFontLanguageInfo returns the GCP_GLYPHSHAPE flag, the glyphs for a character will be
            different depending on whether the character is at the beginning, middle, or end of a word. Typically, the first character in
            the input string will also be the first character in a word, and the last character in the input string will be treated as
            the last character in a word. However, if the displayed string is a subset of the complete string, such as when displaying a
            section of scrolled text, this may not be true. In these cases, it is desirable to force the first or last characters to be
            shaped as not being initial or final forms. To do this, again, the first location in the <c>lpGlyphs</c> array is used by
            performing an OR operation of the ligation value above with the values GCPGLYPH_LINKBEFORE and/or GCPGLYPH_LINKAFTER. For
            example, a value of GCPGLYPH_LINKBEFORE | 2 means that two-character ligatures are the maximum required, and the first
            character in the string should be treated as if it is in the middle of a word.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.GCP_RESULTS.nGlyphs">
            <summary>
            On input, this member must be set to the size of the arrays pointed to by the array pointer members. On output, this is set
            to the number of glyphs filled in, in the output arrays. If glyph substitution is not required (that is, each input character
            maps to exactly one glyph), this member is the same as it is on input.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.GCP_RESULTS.nMaxFit">
            <summary>
            The number of characters that fit within the extents specified by the nMaxExtent parameter of the GetCharacterPlacement
            function. If the GCP_MAXEXTENT or GCP_JUSTIFY value is set, this value may be less than the number of characters in the
            original string. This member is set regardless of whether the GCP_MAXEXTENT or GCP_JUSTIFY value is specified. Unlike
            <c>nGlyphs</c>, which specifies the number of output glyphs, <c>nMaxFit</c> refers to the number of characters from the input
            string. For Latin SBCS languages, this will be the same.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.GCP_RESULTS.Default">
            <summary>The default instance of this structure with the structure size value set.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.GLYPHMETRICS">
            <summary>
            The <c>GLYPHMETRICS</c> structure contains information about the placement and orientation of a glyph in a character cell.
            </summary>
            <remarks>Values in the <c>GLYPHMETRICS</c> structure are specified in device units.</remarks>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.GLYPHMETRICS.gmBlackBoxX">
            <summary>The width of the smallest rectangle that completely encloses the glyph (its black box).</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.GLYPHMETRICS.gmBlackBoxY">
            <summary>The height of the smallest rectangle that completely encloses the glyph (its black box).</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.GLYPHMETRICS.gmptGlyphOrigin">
            <summary>The x- and y-coordinates of the upper left corner of the smallest rectangle that completely encloses the glyph.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.GLYPHMETRICS.gmCellIncX">
            <summary>The horizontal distance from the origin of the current character cell to the origin of the next character cell.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.GLYPHMETRICS.gmCellIncY">
            <summary>The vertical distance from the origin of the current character cell to the origin of the next character cell.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.GLYPHSET">
            <summary>The <c>GLYPHSET</c> structure contains information about a range of Unicode code points.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.GLYPHSET.cbThis">
            <summary>The size, in bytes, of this structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.GLYPHSET.flAccel">
            <summary>
            <para>Flags describing the maximum size of the glyph indices. This member can be the following value.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>GS_8BIT_INDICES</term>
            <term>Treat glyph indices as 8-bit wide values. Otherwise, they are 16-bit wide values.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.GLYPHSET.cGlyphsSupported">
            <summary>The total number of Unicode code points supported in the font.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.GLYPHSET.cRanges">
            <summary>The total number of Unicode ranges in <c>ranges</c>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.GLYPHSET.ranges">
            <summary>Array of Unicode ranges that are supported in the font.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.KERNINGPAIR">
            <summary>The <c>KERNINGPAIR</c> structure defines a kerning pair.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.KERNINGPAIR.wFirst">
            <summary>The character code for the first character in the kerning pair.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.KERNINGPAIR.wSecond">
            <summary>The character code for the second character in the kerning pair.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.KERNINGPAIR.iKernAmount">
            <summary>
            The amount this pair will be kerned if they appear side by side in the same font and size. This value is typically negative,
            because pair kerning usually results in two characters being set more tightly than normal. The value is specified in logical
            units; that is, it depends on the current mapping mode.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.MAT2">
            <summary>The <c>MAT2</c> structure contains the values for a transformation matrix used by the GetGlyphOutline function.</summary>
            <remarks>
            The identity matrix produces a transformation in which the transformed graphical object is identical to the source object. In the
            identity matrix, the value of <c>eM11</c> is 1, the value of <c>eM12</c> is zero, the value of <c>eM21</c> is zero, and the value
            of <c>eM22</c> is 1.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.MAT2.eM11">
            <summary>A fixed-point value for the M11 component of a 3 by 3 transformation matrix.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.MAT2.eM12">
            <summary>A fixed-point value for the M12 component of a 3 by 3 transformation matrix.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.MAT2.eM21">
            <summary>A fixed-point value for the M21 component of a 3 by 3 transformation matrix.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.MAT2.eM22">
            <summary>A fixed-point value for the M22 component of a 3 by 3 transformation matrix.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.MAT2.IdentityMatrix">
            <summary>The identity matrix value.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.NEWTEXTMETRIC">
            <summary>The <c>NEWTEXTMETRIC</c> structure contains data that describes a physical font.</summary>
            <remarks>
            <para>
            The last four members of the <c>NEWTEXTMETRIC</c> structure are not included in the TEXTMETRIC structure; in all other respects,
            the structures are identical.
            </para>
            <para>
            The sizes in the <c>NEWTEXTMETRIC</c> structure are typically specified in logical units; that is, they depend on the current
            mapping mode of the display context.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.NEWTEXTMETRIC.tmHeight">
            <summary>The height (ascent + descent) of characters.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.NEWTEXTMETRIC.tmAscent">
            <summary>The ascent (units above the base line) of characters.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.NEWTEXTMETRIC.tmDescent">
            <summary>The descent (units below the base line) of characters.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.NEWTEXTMETRIC.tmInternalLeading">
            <summary>
            The amount of leading (space) inside the bounds set by the <c>tmHeight</c> member. Accent marks and other diacritical
            characters may occur in this area. The designer may set this member to zero.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.NEWTEXTMETRIC.tmExternalLeading">
            <summary>
            The amount of extra leading (space) that the application adds between rows. Since this area is outside the font, it contains
            no marks and is not altered by text output calls in either OPAQUE or TRANSPARENT mode. The designer may set this member to zero.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.NEWTEXTMETRIC.tmAveCharWidth">
            <summary>
            The average width of characters in the font (generally defined as the width of the letter x). This value does not include
            overhang required for bold or italic characters.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.NEWTEXTMETRIC.tmMaxCharWidth">
            <summary>The width of the widest character in the font.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.NEWTEXTMETRIC.tmWeight">
            <summary>The weight of the font.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.NEWTEXTMETRIC.tmOverhang">
            <summary>
            <para>
            The extra width per string that may be added to some synthesized fonts. When synthesizing some attributes, such as bold or
            italic, graphics device interface (GDI) or a device may have to add width to a string on both a per-character and per-string
            basis. For example, GDI makes a string bold by expanding the spacing of each character and overstriking by an offset value;
            it italicizes a font by shearing the string. In either case, there is an overhang past the basic string. For bold strings,
            the overhang is the distance by which the overstrike is offset. For italic strings, the overhang is the amount the top of the
            font is sheared past the bottom of the font.
            </para>
            <para>
            The <c>tmOverhang</c> member enables the application to determine how much of the character width returned by a
            GetTextExtentPoint32 function call on a single character is the actual character width and how much is the per-string extra
            width. The actual width is the extent minus the overhang.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.NEWTEXTMETRIC.tmDigitizedAspectX">
            <summary>The horizontal aspect of the device for which the font was designed.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.NEWTEXTMETRIC.tmDigitizedAspectY">
            <summary>
            The vertical aspect of the device for which the font was designed. The ratio of the <c>tmDigitizedAspectX</c> and
            <c>tmDigitizedAspectY</c> members is the aspect ratio of the device for which the font was designed.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.NEWTEXTMETRIC.tmFirstChar">
            <summary>The value of the first character defined in the font.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.NEWTEXTMETRIC.tmLastChar">
            <summary>The value of the last character defined in the font.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.NEWTEXTMETRIC.tmDefaultChar">
            <summary>The value of the character to be substituted for characters that are not in the font.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.NEWTEXTMETRIC.tmBreakChar">
            <summary>The value of the character to be used to define word breaks for text justification.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.NEWTEXTMETRIC.tmItalic">
            <summary>An italic font if it is nonzero.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.NEWTEXTMETRIC.tmUnderlined">
            <summary>An underlined font if it is nonzero.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.NEWTEXTMETRIC.tmStruckOut">
            <summary>A strikeout font if it is nonzero.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.NEWTEXTMETRIC.tmPitchAndFamily">
            <summary>
            <para>
            The pitch and family of the selected font. The low-order bit (bit 0) specifies the pitch of the font. If it is 1, the font is
            variable pitch (or proportional). If it is 0, the font is fixed pitch (or monospace). Bits 1 and 2 specify the font type. If
            both bits are 0, the font is a raster font; if bit 1 is 1 and bit 2 is 0, the font is a vector font; if bit 1 is 0 and bit 2
            is set, or if both bits are 1, the font is some other type. Bit 3 is 1 if the font is a device font; otherwise, it is 0.
            </para>
            <para>
            The four high-order bits designate the font family. The <c>tmPitchAndFamily</c> member can be combined with the hexadecimal
            value 0xF0 by using the bitwise AND operator and can then be compared with the font family names for an identical match. For
            more information about the font families, see LOGFONT.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.NEWTEXTMETRIC.tmCharSet">
            <summary>The character set of the font.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.NEWTEXTMETRIC.ntmFlags">
            <summary>
            <para>
            Specifies whether the font is italic, underscored, outlined, bold, and so forth. May be any reasonable combination of the
            following values.
            </para>
            <list type="table">
            <listheader>
            <term>Bit</term>
            <term>Name</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>0</term>
            <term>NTM_ITALIC</term>
            <term>italic</term>
            </item>
            <item>
            <term>5</term>
            <term>NTM_BOLD</term>
            <term>bold</term>
            </item>
            <item>
            <term>8</term>
            <term>NTM_REGULAR</term>
            <term>regular</term>
            </item>
            <item>
            <term>16</term>
            <term>NTM_NONNEGATIVE_AC</term>
            <term>no glyph in a font at any size has a negative A or C space.</term>
            </item>
            <item>
            <term>17</term>
            <term>NTM_PS_OPENTYPE</term>
            <term>PostScript OpenType font</term>
            </item>
            <item>
            <term>18</term>
            <term>NTM_TT_OPENTYPE</term>
            <term>TrueType OpenType font</term>
            </item>
            <item>
            <term>19</term>
            <term>NTM_MULTIPLEMASTER</term>
            <term>multiple master font</term>
            </item>
            <item>
            <term>20</term>
            <term>NTM_TYPE1</term>
            <term>Type 1 font</term>
            </item>
            <item>
            <term>21</term>
            <term>NTM_DSIG</term>
            <term>font with a digital signature. This allows traceability and ensures that the font has been tested and is not corrupted</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.NEWTEXTMETRIC.ntmSizeEM">
            <summary>
            The size of the em square for the font. This value is in notional units (that is, the units for which the font was designed).
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.NEWTEXTMETRIC.ntmCellHeight">
            <summary>
            The height, in notional units, of the font. This value should be compared with the value of the <c>ntmSizeEM</c> member.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.NEWTEXTMETRIC.ntmAvgWidth">
            <summary>
            The average width of characters in the font, in notional units. This value should be compared with the value of the
            <c>ntmSizeEM</c> member.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.NEWTEXTMETRICEX">
            <summary>The <c>NEWTEXTMETRICEX</c> structure contains information about a physical font.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.NEWTEXTMETRICEX.ntmTm">
            <summary>A NEWTEXTMETRIC structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.NEWTEXTMETRICEX.ntmFontSig">
            <summary>A FONTSIGNATURE structure indicating the coverage of the font.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.OUTLINETEXTMETRIC">
            <summary>The <c>OUTLINETEXTMETRIC</c> structure contains metrics describing a TrueType font.</summary>
            <remarks>
            <para>
            The sizes returned in <c>OUTLINETEXTMETRIC</c> are specified in logical units; that is, they depend on the current mapping mode
            of the specified display context.
            </para>
            <para>
            Note, <c>OUTLINETEXTMETRIC</c> is defined using the current pack setting. To avoid problems, make sure that the application is
            built using the platform default packing. For example, 32-bit Windows uses a default of 8-byte packing. For more information, see
            the MSDN topic "C-Compiler Packing Issues".
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.OUTLINETEXTMETRIC.otmSize">
            <summary>The size, in bytes, of the <c>OUTLINETEXTMETRIC</c> structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.OUTLINETEXTMETRIC.otmTextMetrics">
            <summary>A TEXTMETRIC structure containing further information about the font.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.OUTLINETEXTMETRIC.otmFiller">
            <summary>A value that causes the structure to be byte-aligned.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.OUTLINETEXTMETRIC.otmPanoseNumber">
            <summary>The PANOSE number for this font.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.OUTLINETEXTMETRIC.otmfsSelection">
            <summary>
            <para>The nature of the font pattern. This member can be a combination of the following bits.</para>
            <list type="table">
            <listheader>
            <term>Bit</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>0</term>
            <term>Italic</term>
            </item>
            <item>
            <term>1</term>
            <term>Underscore</term>
            </item>
            <item>
            <term>2</term>
            <term>Negative</term>
            </item>
            <item>
            <term>3</term>
            <term>Outline</term>
            </item>
            <item>
            <term>4</term>
            <term>Strikeout</term>
            </item>
            <item>
            <term>5</term>
            <term>Bold</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.OUTLINETEXTMETRIC.otmfsType">
            <summary>
            Indicates whether the font is licensed. Licensed fonts must not be modified or exchanged. If bit 1 is set, the font may not
            be embedded in a document. If bit 1 is clear, the font can be embedded. If bit 2 is set, the embedding is read-only.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.OUTLINETEXTMETRIC.otmsCharSlopeRise">
            <summary>
            The slope of the cursor. This value is 1 if the slope is vertical. Applications can use this value and the value of the
            <c>otmsCharSlopeRun</c> member to create an italic cursor that has the same slope as the main italic angle (specified by the
            <c>otmItalicAngle</c> member).
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.OUTLINETEXTMETRIC.otmsCharSlopeRun">
            <summary>
            The slope of the cursor. This value is zero if the slope is vertical. Applications can use this value and the value of the
            <c>otmsCharSlopeRise</c> member to create an italic cursor that has the same slope as the main italic angle (specified by the
            <c>otmItalicAngle</c> member).
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.OUTLINETEXTMETRIC.otmItalicAngle">
            <summary>
            The main italic angle of the font, in tenths of a degree counterclockwise from vertical. Regular (roman) fonts have a value
            of zero. Italic fonts typically have a negative italic angle (that is, they lean to the right).
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.OUTLINETEXTMETRIC.otmEMSquare">
            <summary>
            The number of logical units defining the x- or y-dimension of the em square for this font. (The number of units in the x- and
            y-directions are always the same for an em square.)
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.OUTLINETEXTMETRIC.otmAscent">
            <summary>
            The maximum distance characters in this font extend above the base line. This is the typographic ascent for the font.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.OUTLINETEXTMETRIC.otmDescent">
            <summary>
            The maximum distance characters in this font extend below the base line. This is the typographic descent for the font.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.OUTLINETEXTMETRIC.otmLineGap">
            <summary>The typographic line spacing.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.OUTLINETEXTMETRIC.otmsCapEmHeight">
            <summary>Not supported.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.OUTLINETEXTMETRIC.otmsXHeight">
            <summary>Not supported.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.OUTLINETEXTMETRIC.otmrcFontBox">
            <summary>The bounding box for the font.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.OUTLINETEXTMETRIC.otmMacAscent">
            <summary>The maximum distance characters in this font extend above the base line for the Macintosh computer.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.OUTLINETEXTMETRIC.otmMacDescent">
            <summary>The maximum distance characters in this font extend below the base line for the Macintosh computer.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.OUTLINETEXTMETRIC.otmMacLineGap">
            <summary>The line-spacing information for the Macintosh computer.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.OUTLINETEXTMETRIC.otmusMinimumPPEM">
            <summary>The smallest recommended size for this font, in pixels per em-square.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.OUTLINETEXTMETRIC.otmptSubscriptSize">
            <summary>The recommended horizontal and vertical size for subscripts in this font.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.OUTLINETEXTMETRIC.otmptSubscriptOffset">
            <summary>
            The recommended horizontal and vertical offset for subscripts in this font. The subscript offset is measured from the
            character origin to the origin of the subscript character.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.OUTLINETEXTMETRIC.otmptSuperscriptSize">
            <summary>The recommended horizontal and vertical size for superscripts in this font.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.OUTLINETEXTMETRIC.otmptSuperscriptOffset">
            <summary>
            The recommended horizontal and vertical offset for superscripts in this font. The superscript offset is measured from the
            character base line to the base line of the superscript character.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.OUTLINETEXTMETRIC.otmsStrikeoutSize">
            <summary>The width of the strikeout stroke for this font. Typically, this is the width of the em dash for the font.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.OUTLINETEXTMETRIC.otmsStrikeoutPosition">
            <summary>
            The position of the strikeout stroke relative to the base line for this font. Positive values are above the base line and
            negative values are below.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.OUTLINETEXTMETRIC.otmsUnderscoreSize">
            <summary>The thickness of the underscore character for this font.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.OUTLINETEXTMETRIC.otmsUnderscorePosition">
            <summary>The position of the underscore character for this font.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.OUTLINETEXTMETRIC.otmpFamilyName">
            <summary>The offset from the beginning of the structure to a string specifying the family name for the font.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.OUTLINETEXTMETRIC.otmpFaceName">
            <summary>
            The offset from the beginning of the structure to a string specifying the typeface name for the font. (This typeface name
            corresponds to the name specified in the LOGFONT structure.)
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.OUTLINETEXTMETRIC.otmpStyleName">
            <summary>The offset from the beginning of the structure to a string specifying the style name for the font.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.OUTLINETEXTMETRIC.otmpFullName">
            <summary>
            The offset from the beginning of the structure to a string specifying the full name for the font. This name is unique for the
            font and often contains a version number or other identifying information.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.PANOSE">
            <summary>
            The <c>PANOSE</c> structure describes the PANOSE font-classification values for a TrueType font. These characteristics are then
            used to associate the font with other fonts of similar appearance but different names.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PANOSE.bFamilyType">
            <summary>
            <para>For Latin fonts, one of one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>PAN_ANY</term>
            <term>Any</term>
            </item>
            <item>
            <term>PAN_NO_FIT</term>
            <term>No fit</term>
            </item>
            <item>
            <term>PAN_FAMILY_TEXT_DISPLAY</term>
            <term>Text and display</term>
            </item>
            <item>
            <term>PAN_FAMILY_SCRIPT</term>
            <term>Script</term>
            </item>
            <item>
            <term>PAN_FAMILY_DECORATIVE</term>
            <term>Decorative</term>
            </item>
            <item>
            <term>PAN_FAMILY_PICTORIAL</term>
            <term>Pictorial</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PANOSE.bSerifStyle">
            <summary>
            <para>The serif style. For Latin fonts, one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>PAN_ANY</term>
            <term>Any</term>
            </item>
            <item>
            <term>PAN_NO_FIT</term>
            <term>No fit</term>
            </item>
            <item>
            <term>PAN_SERIF_COVE</term>
            <term>Cove</term>
            </item>
            <item>
            <term>PAN_SERIF_OBTUSE_COVE</term>
            <term>Obtuse cove</term>
            </item>
            <item>
            <term>PAN_SERIF_SQUARE_COVE</term>
            <term>Square cove</term>
            </item>
            <item>
            <term>PAN_SERIF_OBTUSE_SQUARE_COVE</term>
            <term>Obtuse square cove</term>
            </item>
            <item>
            <term>PAN_SERIF_SQUARE</term>
            <term>Square</term>
            </item>
            <item>
            <term>PAN_SERIF_THIN</term>
            <term>Thin</term>
            </item>
            <item>
            <term>PAN_SERIF_BONE</term>
            <term>Bone</term>
            </item>
            <item>
            <term>PAN_SERIF_EXAGGERATED</term>
            <term>Exaggerated</term>
            </item>
            <item>
            <term>PAN_SERIF_TRIANGLE</term>
            <term>Triangle</term>
            </item>
            <item>
            <term>PAN_SERIF_NORMAL_SANS</term>
            <term>Normal sans serif</term>
            </item>
            <item>
            <term>PAN_SERIF_OBTUSE_SANS</term>
            <term>Obtuse sans serif</term>
            </item>
            <item>
            <term>PAN_SERIF_PERP_SANS</term>
            <term>Perp sans serif</term>
            </item>
            <item>
            <term>PAN_SERIF_FLARED</term>
            <term>Flared</term>
            </item>
            <item>
            <term>PAN_SERIF_ROUNDED</term>
            <term>Rounded</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PANOSE.bWeight">
            <summary>
            <para>For Latin fonts, one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>PAN_ANY</term>
            <term>Any</term>
            </item>
            <item>
            <term>PAN_NO_FIT</term>
            <term>No fit</term>
            </item>
            <item>
            <term>PAN_WEIGHT_VERY_LIGHT</term>
            <term>Very light</term>
            </item>
            <item>
            <term>PAN_WEIGHT_LIGHT</term>
            <term>Light</term>
            </item>
            <item>
            <term>PAN_WEIGHT_THIN</term>
            <term>Thin</term>
            </item>
            <item>
            <term>PAN_WEIGHT_BOOK</term>
            <term>Book</term>
            </item>
            <item>
            <term>PAN_WEIGHT_MEDIUM</term>
            <term>Medium</term>
            </item>
            <item>
            <term>PAN_WEIGHT_DEMI</term>
            <term>Demibold</term>
            </item>
            <item>
            <term>PAN_WEIGHT_BOLD</term>
            <term>Bold</term>
            </item>
            <item>
            <term>PAN_WEIGHT_HEAVY</term>
            <term>Heavy</term>
            </item>
            <item>
            <term>PAN_WEIGHT_BLACK</term>
            <term>Black</term>
            </item>
            <item>
            <term>PAN_WEIGHT_NORD</term>
            <term>Nord</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PANOSE.bProportion">
            <summary>
            <para>For Latin fonts, one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>PAN_ANY</term>
            <term>Any</term>
            </item>
            <item>
            <term>PAN_NO_FIT</term>
            <term>No fit</term>
            </item>
            <item>
            <term>PAN_PROP_OLD_STYLE</term>
            <term>Old style</term>
            </item>
            <item>
            <term>PAN_PROP_MODERN</term>
            <term>Modern</term>
            </item>
            <item>
            <term>PAN_PROP_EVEN_WIDTH</term>
            <term>Even width</term>
            </item>
            <item>
            <term>PAN_PROP_EXPANDED</term>
            <term>Expanded</term>
            </item>
            <item>
            <term>PAN_PROP_CONDENSED</term>
            <term>Condensed</term>
            </item>
            <item>
            <term>PAN_PROP_VERY_EXPANDED</term>
            <term>Very expanded</term>
            </item>
            <item>
            <term>PAN_PROP_VERY_CONDENSED</term>
            <term>Very condensed</term>
            </item>
            <item>
            <term>PAN_PROP_MONOSPACED</term>
            <term>Monospaced</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PANOSE.bContrast">
            <summary>
            <para>For Latin fonts, one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>PAN_ANY</term>
            <term>Any</term>
            </item>
            <item>
            <term>PAN_NO_FIT</term>
            <term>No fit</term>
            </item>
            <item>
            <term>PAN_CONTRAST_NONE</term>
            <term>None</term>
            </item>
            <item>
            <term>PAN_CONTRAST_VERY_LOW</term>
            <term>Very low</term>
            </item>
            <item>
            <term>PAN_CONTRAST_LOW</term>
            <term>Low</term>
            </item>
            <item>
            <term>PAN_CONTRAST_MEDIUM_LOW</term>
            <term>Medium low</term>
            </item>
            <item>
            <term>PAN_CONTRAST_MEDIUM</term>
            <term>Medium</term>
            </item>
            <item>
            <term>PAN_CONTRAST_MEDIUM_HIGH</term>
            <term>Medium high</term>
            </item>
            <item>
            <term>PAN_CONTRAST_HIGH</term>
            <term>High</term>
            </item>
            <item>
            <term>PAN_CONTRAST_VERY_HIGH</term>
            <term>Very high</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PANOSE.bStrokeVariation">
            <summary>
            <para>For Latin fonts, one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>PAN_ANY</term>
            <term>Any</term>
            </item>
            <item>
            <term>PAN_NO_FIT</term>
            <term>No fit</term>
            </item>
            <item>
            <term>PAN_STROKE_GRADUAL_DIAG</term>
            <term>Gradual/diagonal</term>
            </item>
            <item>
            <term>PAN_STROKE_GRADUAL_TRAN</term>
            <term>Gradual/transitional</term>
            </item>
            <item>
            <term>PAN_STROKE_GRADUAL_VERT</term>
            <term>Gradual/vertical</term>
            </item>
            <item>
            <term>PAN_STROKE_GRADUAL_HORZ</term>
            <term>Gradual/horizontal</term>
            </item>
            <item>
            <term>PAN_STROKE_RAPID_VERT</term>
            <term>Rapid/vertical</term>
            </item>
            <item>
            <term>PAN_STROKE_RAPID_HORZ</term>
            <term>Rapid/horizontal</term>
            </item>
            <item>
            <term>PAN_STROKE_INSTANT_VERT</term>
            <term>Instant/vertical</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PANOSE.bArmStyle">
            <summary>
            <para>For Latin fonts, one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>PAN_ANY</term>
            <term>Any</term>
            </item>
            <item>
            <term>PAN_NO_FIT</term>
            <term>No fit</term>
            </item>
            <item>
            <term>PAN_STRAIGHT_ARMS_HORZ</term>
            <term>Straight arms/horizontal</term>
            </item>
            <item>
            <term>PAN_STRAIGHT_ARMS_WEDGE</term>
            <term>Straight arms/wedge</term>
            </item>
            <item>
            <term>PAN_STRAIGHT_ARMS_VERT</term>
            <term>Straight arms/vertical</term>
            </item>
            <item>
            <term>PAN_STRAIGHT_ARMS_SINGLE_SERIF</term>
            <term>Straight arms/single-serif</term>
            </item>
            <item>
            <term>PAN_STRAIGHT_ARMS_DOUBLE_SERIF</term>
            <term>Straight arms/double-serif</term>
            </item>
            <item>
            <term>PAN_BENT_ARMS_HORZ</term>
            <term>Nonstraight arms/horizontal</term>
            </item>
            <item>
            <term>PAN_BENT_ARMS_WEDGE</term>
            <term>Nonstraight arms/wedge</term>
            </item>
            <item>
            <term>PAN_BENT_ARMS_VERT</term>
            <term>Nonstraight arms/vertical</term>
            </item>
            <item>
            <term>PAN_BENT_ARMS_SINGLE_SERIF</term>
            <term>Nonstraight arms/single-serif</term>
            </item>
            <item>
            <term>PAN_BENT_ARMS_DOUBLE_SERIF</term>
            <term>Nonstraight arms/double-serif</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PANOSE.bLetterform">
            <summary>
            <para>For Latin fonts, one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>PAN_ANY</term>
            <term>Any</term>
            </item>
            <item>
            <term>PAN_NO_FIT</term>
            <term>No fit</term>
            </item>
            <item>
            <term>PAN_LETT_NORMAL_CONTACT</term>
            <term>Normal/contact</term>
            </item>
            <item>
            <term>PAN_LETT_NORMAL_WEIGHTED</term>
            <term>Normal/weighted</term>
            </item>
            <item>
            <term>PAN_LETT_NORMAL_BOXED</term>
            <term>Normal/boxed</term>
            </item>
            <item>
            <term>PAN_LETT_NORMAL_FLATTENED</term>
            <term>Normal/flattened</term>
            </item>
            <item>
            <term>PAN_LETT_NORMAL_ROUNDED</term>
            <term>Normal/rounded</term>
            </item>
            <item>
            <term>PAN_LETT_NORMAL_OFF_CENTER</term>
            <term>Normal/off center</term>
            </item>
            <item>
            <term>PAN_LETT_NORMAL_SQUARE</term>
            <term>Normal/square</term>
            </item>
            <item>
            <term>PAN_LETT_OBLIQUE_CONTACT</term>
            <term>Oblique/contact</term>
            </item>
            <item>
            <term>PAN_LETT_OBLIQUE_WEIGHTED</term>
            <term>Oblique/weighted</term>
            </item>
            <item>
            <term>PAN_LETT_OBLIQUE_BOXED</term>
            <term>Oblique/boxed</term>
            </item>
            <item>
            <term>PAN_LETT_OBLIQUE_FLATTENED</term>
            <term>Oblique/flattened</term>
            </item>
            <item>
            <term>PAN_LETT_OBLIQUE_ROUNDED</term>
            <term>Oblique/rounded</term>
            </item>
            <item>
            <term>PAN_LETT_OBLIQUE_OFF_CENTER</term>
            <term>Oblique/off center</term>
            </item>
            <item>
            <term>PAN_LETT_OBLIQUE_SQUARE</term>
            <term>Oblique/square</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PANOSE.bMidline">
            <summary>
            <para>For Latin fonts, one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>PAN_ANY</term>
            <term>Any</term>
            </item>
            <item>
            <term>PAN_NO_FIT</term>
            <term>No fit</term>
            </item>
            <item>
            <term>PAN_MIDLINE_STANDARD_TRIMMED</term>
            <term>Standard/trimmed</term>
            </item>
            <item>
            <term>PAN_MIDLINE_STANDARD_POINTED</term>
            <term>Standard/pointed</term>
            </item>
            <item>
            <term>PAN_MIDLINE_STANDARD_SERIFED</term>
            <term>Standard/serifed</term>
            </item>
            <item>
            <term>PAN_MIDLINE_HIGH_TRIMMED</term>
            <term>High/trimmed</term>
            </item>
            <item>
            <term>PAN_MIDLINE_HIGH_POINTED</term>
            <term>High/pointed</term>
            </item>
            <item>
            <term>PAN_MIDLINE_HIGH_SERIFED</term>
            <term>High/serifed</term>
            </item>
            <item>
            <term>PAN_MIDLINE_CONSTANT_TRIMMED</term>
            <term>Constant/trimmed</term>
            </item>
            <item>
            <term>PAN_MIDLINE_CONSTANT_POINTED</term>
            <term>Constant/pointed</term>
            </item>
            <item>
            <term>PAN_MIDLINE_CONSTANT_SERIFED</term>
            <term>Constant/serifed</term>
            </item>
            <item>
            <term>PAN_MIDLINE_LOW_TRIMMED</term>
            <term>Low/trimmed</term>
            </item>
            <item>
            <term>PAN_MIDLINE_LOW_POINTED</term>
            <term>Low/pointed</term>
            </item>
            <item>
            <term>PAN_MIDLINE_LOW_SERIFED</term>
            <term>Low/serifed</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PANOSE.bXHeight">
            <summary>
            <para>For Latin fonts, one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>PAN_ANY</term>
            <term>Any</term>
            </item>
            <item>
            <term>PAN_NO_FIT</term>
            <term>No fit</term>
            </item>
            <item>
            <term>PAN_XHEIGHT_CONSTANT_SMALL</term>
            <term>Constant/small</term>
            </item>
            <item>
            <term>PAN_XHEIGHT_CONSTANT_STD</term>
            <term>Constant/standard</term>
            </item>
            <item>
            <term>PAN_XHEIGHT_CONSTANT_LARGE</term>
            <term>Constant/large</term>
            </item>
            <item>
            <term>PAN_XHEIGHT_DUCKING_SMALL</term>
            <term>Ducking/small</term>
            </item>
            <item>
            <term>PAN_XHEIGHT_DUCKING_STD</term>
            <term>Ducking/standard</term>
            </item>
            <item>
            <term>PAN_XHEIGHT_DUCKING_LARGE</term>
            <term>Ducking/large</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.POLYTEXT">
            <summary>The <c>POLYTEXT</c> structure describes how the PolyTextOut function should draw a string of text.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.POLYTEXT.x">
            <summary>
            The horizontal reference point for the string. The string is aligned to this point using the current text-alignment mode.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.POLYTEXT.y">
            <summary>
            The vertical reference point for the string. The string is aligned to this point using the current text-alignment mode.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.POLYTEXT.n">
            <summary>The length of the string pointed to by <c>lpstr</c>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.POLYTEXT.lpstr">
            <summary>
            Pointer to a string of text to be drawn by the PolyTextOut function. This string need not be null-terminated, since <c>n</c>
            specifies the length of the string.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.POLYTEXT.uiFlags">
            <summary>
            <para>
            Specifies whether the string is to be opaque or clipped and whether the string is accompanied by an array of character-width
            values. This member can be one or more of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>ETO_OPAQUE</term>
            <term>The rectangle for each string is to be opaqued with the current background color.</term>
            </item>
            <item>
            <term>ETO_CLIPPED</term>
            <term>Each string is to be clipped to its specified rectangle.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.POLYTEXT.rcl">
            <summary>
            A rectangle structure that contains the dimensions of the opaquing or clipping rectangle. This member is ignored if neither
            of the ETO_OPAQUE nor the ETO_CLIPPED value is specified for the <c>uiFlags</c> member.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.POLYTEXT.pdx">
            <summary>Pointer to an array containing the width value for each character in the string.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.RASTERIZER_STATUS">
            <summary>
            The <c>RASTERIZER_STATUS</c> structure contains information about whether TrueType is installed. This structure is filled when an
            application calls the GetRasterizerCaps function.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RASTERIZER_STATUS.nSize">
            <summary>The size, in bytes, of the <c>RASTERIZER_STATUS</c> structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RASTERIZER_STATUS.wFlags">
            <summary>
            Specifies whether at least one TrueType font is installed and whether TrueType is enabled. This value is TT_AVAILABLE,
            TT_ENABLED, or both if TrueType is on the system.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RASTERIZER_STATUS.nLanguageID">
            <summary>The language in the system's Setup.inf file.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.WCRANGE">
            <summary>The <c>WCRANGE</c> structure specifies a range of Unicode characters.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.WCRANGE.wcLow">
            <summary>Low Unicode code point in the range of supported Unicode code points.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.WCRANGE.cGlyphs">
            <summary>Number of supported Unicode code points in this range.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.EnhMetaFileProc">
            <summary>
            The <c>EnhMetaFileProc</c> function is an application-defined callback function used with the EnumEnhMetaFile function. The
            <c>ENHMFENUMPROC</c> type defines a pointer to this callback function. <c>EnhMetaFileProc</c> is a placeholder for the
            application-defined function name.
            </summary>
            <param name="hdc">Handle to the device context passed to EnumEnhMetaFile.</param>
            <param name="lpht">
            Pointer to a HANDLETABLE structure representing the table of handles associated with the graphics objects (pens, brushes, and so
            on) in the metafile. The first entry contains the enhanced-metafile handle.
            </param>
            <param name="lpmr">
            Pointer to one of the records in the metafile. This record should not be modified. (If modification is necessary, it should be
            performed on a copy of the record.)
            </param>
            <param name="nHandles">Specifies the number of objects with associated handles in the handle table.</param>
            <param name="data">Pointer to optional data.</param>
            <returns>This function must return a nonzero value to continue enumeration; to stop enumeration, it must return zero.</returns>
            <remarks>An application must register the callback function by passing its address to the EnumEnhMetaFile function.</remarks>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.EnumMetaFileProc">
            <summary>
            <para>
            The <c>EnumMetaFileProc</c> function is an application-defined callback function that processes Windows-format metafile records.
            This function is called by the EnumMetaFile function. The <c>MFENUMPROC</c> type defines a pointer to this callback function.
            <c>EnumMetaFileProc</c> is a placeholder for the application-defined function name.
            </para>
            <para>
            <c>Note</c> This function is provided only for compatibility with Windows-format metafiles. Enhanced-format metafiles provide
            superior functionality and are recommended for new applications. The corresponding function for an enhanced-format metafile is EnhMetaFileProc.
            </para>
            </summary>
            <remarks>
            <para>An application must register the callback function by passing its address to the EnumMetaFile function.</para>
            <para><c>EnumMetaFileProc</c> is a placeholder for the application-supplied function name.</para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.RecordType">
            <summary>
            The RecordType enumeration defines values that uniquely identify records in an EMF metafile. These values are specified in the
            Type fields of EMF records (section 2.3).
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_HEADER">
            <summary>
            This record defines the start of the metafile and specifies its characteristics; its contents, including the dimensions of
            the embedded image; the number of records in the metafile; and the resolution of the device on which the embedded image was
            created. These values make it possible for the metafile to be device-independent.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_POLYBEZIER">
            <summary>
            This record defines one or more Bezier curves. Cubic Bezier curves are defined using specified endpoints and control points,
            and are stroked with the current pen.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_POLYGON">
            <summary>
            This record defines a polygon consisting of two or more vertexes connected by straight lines. The polygon is outlined by
            using the current pen and filled by using the current brush and polygon fill mode. The polygon is closed automatically by
            drawing a line from the last vertex to the first.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_POLYLINE">
            <summary>This record defines a series of line segments by connecting the points in the specified array.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_POLYBEZIERTO">
            <summary>This record defines one or more Bezier curves based upon the current drawing position.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_POLYLINETO">
            <summary>
            This record defines one or more straight lines based upon the current drawing position. A line is drawn from the current
            drawing position to the first point specified by the points field by using the current pen. For each additional line, drawing
            is performed from the ending point of the previous line to the next point specified by points.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_POLYPOLYLINE">
            <summary>
            This record defines multiple series of connected line segments. The line segments are drawn by using the current pen. The
            figures formed by the segments are not filled. The current position is neither used nor updated by this record.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_POLYPOLYGON">
            <summary>
            This record defines a series of closed polygons. Each polygon is outlined by using the current pen and filled by using the
            current brush and polygon fill mode. The polygons defined by this record can overlap.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_SETWINDOWEXTEX">
            <summary>This record defines the window extent.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_SETWINDOWORGEX">
            <summary>This record defines the window origin.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_SETVIEWPORTEXTEX">
            <summary>This record defines the viewport extent.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_SETVIEWPORTORGEX">
            <summary>This record defines the viewport origin.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_SETBRUSHORGEX">
            <summary>This record defines the origin of the current brush.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_EOF">
            <summary>This record indicates the end of the metafile.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_SETPIXELV">
            <summary>This record defines the color of the pixel at the specified logical coordinates.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_SETMAPPERFLAGS">
            <summary>
            This record specifies parameters for the process of matching logical fonts to physical fonts, which is performed by the font mapper.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_SETMAPMODE">
            <summary>
            This record defines the mapping mode, which defines the unit of measure used to transform page space units into device space
            units, and defines the orientation of the device's X and Y axes.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_SETBKMODE">
            <summary>
            This record defines the background mix mode, which is used with text, hatched brushes, and pen styles that are not solid lines.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_SETPOLYFILLMODE">
            <summary>This record defines polygon fill mode.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_SETROP2">
            <summary>This record defines binary raster operation mode.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_SETSTRETCHBLTMODE">
            <summary>This record defines bitmap stretch mode.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_SETTEXTALIGN">
            <summary>This record defines text alignment.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_SETCOLORADJUSTMENT">
            <summary>This record defines the color adjustment values using the specified values.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_SETTEXTCOLOR">
            <summary>This record defines the current text color.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_SETBKCOLOR">
            <summary>This record defines the background color.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_OFFSETCLIPRGN">
            <summary>This record redefines the current clipping region by the specified offsets.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_MOVETOEX">
            <summary>This record defines coordinates of the new drawing position in logical units.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_SETMETARGN">
            <summary>
            This record intersects the current clipping region with the current metaregion and saves the combined region as the new
            current metaregion.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_EXCLUDECLIPRECT">
            <summary>
            This record defines a new clipping region that consists of the current clipping region intersected with the specified rectangle.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_INTERSECTCLIPRECT">
            <summary>
            This record defines a new clipping region from the intersection of the current clipping region and the specified rectangle.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_SCALEVIEWPORTEXTEX">
            <summary>This record redefines the viewport using the ratios formed by the specified multiplicands and divisors.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_SCALEWINDOWEXTEX">
            <summary>This record redefines the window using the ratios formed by the specified multiplicands and divisors.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_SAVEDC">
            <summary>
            This record saves the current state of the playback device context (section 3.1) in an array of states saved by preceding
            EMR_SAVEDC records if any.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_RESTOREDC">
            <summary>
            This record restores the playback device context to the specified state, which was saved by a preceding EMR_SAVEDC record
            (section 2.3.11).
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_SETWORLDTRANSFORM">
            <summary>This record defines a two-dimensional linear transform between world space and page space [MSDN-WRLDPGSPC].</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_MODIFYWORLDTRANSFORM">
            <summary>This record redefines the world transform by using the specified mode.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_SELECTOBJECT">
            <summary>
            This record selects an object in the playback device context, which is identified by its index in the EMF object table
            (section 3.1.1.1).
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_CREATEPEN">
            <summary>This record defines a logical pen (section 2.2.19) that has the specified style, width, and color.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_CREATEBRUSHINDIRECT">
            <summary>This record defines a logical brush for filling figures in graphics operations.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_DELETEOBJECT">
            <summary>This record deletes a graphics object, clearing its index in the EMF object table.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_ANGLEARC">
            <summary>
            This record defines a line segment of an arc. The line segment is drawn from the current drawing position to the beginning of
            the arc. The arc is drawn along the perimeter of a circle with the given radius and center. The length of the arc is defined
            by the given start and sweep angles.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_ELLIPSE">
            <summary>
            This record defines an ellipse. The center of the ellipse is the center of the specified bounding rectangle. The ellipse is
            outlined by using the current pen and is filled by using the current brush.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_RECTANGLE">
            <summary>
            This record defines a rectangle. The rectangle is outlined by using the current pen and filled by using the current brush.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_ROUNDRECT">
            <summary>
            This record defines a rectangle with rounded corners. The rectangle is outlined by using the current pen and filled by using
            the current brush.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_ARC">
            <summary>This record defines an elliptical arc.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_CHORD">
            <summary>
            This record defines a chord, which is a region bounded by the intersection of an ellipse and a line segment, called a secant.
            The chord is outlined by using the current pen and filled by using the current brush.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_PIE">
            <summary>
            This record defines a pie-shaped wedge bounded by the intersection of an ellipse and two radials. The pie is outlined by
            using the current pen and filled by using the current brush.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_SELECTPALETTE">
            <summary>
            This record selects a LogPalette object (section 2.2.17) into the playback device context, identifying it by its index in the
            EMF object table.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_CREATEPALETTE">
            <summary>This record defines a LogPalette object.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_SETPALETTEENTRIES">
            <summary>This record defines RGB color values in a range of entries in a LogPalette object.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_RESIZEPALETTE">
            <summary>This record increases or decreases the size of a logical palette.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_REALIZEPALETTE">
            <summary>This record maps entries from the current logical palette to the system palette.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_EXTFLOODFILL">
            <summary>This record fills an area of the display surface with the current brush.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_LINETO">
            <summary>
            This record defines a line from the current drawing position up to, but not including, the specified point. It resets the
            current drawing position to the specified point.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_ARCTO">
            <summary>This record defines an elliptical arc. It resets the current position to the endpoint of the arc.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_POLYDRAW">
            <summary>This record defines a set of line segments and Bezier curves.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_SETARCDIRECTION">
            <summary>This record defines the drawing direction to be used for arc and rectangle operations.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_SETMITERLIMIT">
            <summary>This record defines the limit for the length of miter joins.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_BEGINPATH">
            <summary>This record opens a path bracket for specifying the current path.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_ENDPATH">
            <summary>This record closes an open path bracket and selects the path into the playback device context.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_CLOSEFIGURE">
            <summary>This record closes an open figure in a path.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_FILLPATH">
            <summary>
            This record closes any open figures in the current path bracket and fills its interior by using the current brush and
            polygon-filling mode.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_STROKEANDFILLPATH">
            <summary>
            This record closes any open figures in a path, strokes the outline of the path by using the current pen, and fills its
            interior by using the current brush.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_STROKEPATH">
            <summary>This record renders the specified path by using the current pen.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_FLATTENPATH">
            <summary>This record turns each curve in the path into a sequence of lines.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_WIDENPATH">
            <summary>
            This record redefines the current path bracket as the area that would be painted if the path were stroked using the current pen.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_SELECTCLIPPATH">
            <summary>
            This record specifies a clipping region as the current clipping region combined with the current path bracket, using the
            specified mode.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_ABORTPATH">
            <summary>This record aborts a path bracket or discards the path from a closed path bracket.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_GDICOMMENT">
            <summary>This record specifies arbitrary private data.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_FILLRGN">
            <summary>This record fills the specified region by using the specified brush.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_FRAMERGN">
            <summary>This record draws a border around the specified region using the specified brush.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_INVERTRGN">
            <summary>This record inverts the colors in the specified region.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_PAINTRGN">
            <summary>This record paints the specified region by using the current brush.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_EXTSELECTCLIPRGN">
            <summary>This record combines the specified region with the current clipping region, using the specified mode.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_BITBLT">
            <summary>
            This record specifies a block transfer of pixels from a source bitmap to a destination rectangle, optionally in combination
            with a brush pattern, according to a specified raster operation.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_STRETCHBLT">
            <summary>
            This record specifies a block transfer of pixels from a source bitmap to a destination rectangle, optionally in combination
            with a brush pattern, according to a specified raster operation, stretching or compressing the output to fit the dimensions
            of the destination, if necessary.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_MASKBLT">
            <summary>
            This record specifies a block transfer of pixels from a source bitmap to a destination rectangle, optionally in combination
            with a brush pattern and with the application of a color mask bitmap, according to specified foreground and background raster operations.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_PLGBLT">
            <summary>
            This record specifies a block transfer of pixels from a source bitmap to a destination parallelogram, with the application of
            a color mask bitmap.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_SETDIBITSTODEVICE">
            <summary>
            This record specifies a block transfer of pixels from specified scanlines of a source bitmap to a destination rectangle.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_STRETCHDIBITS">
            <summary>
            This record specifies a block transfer of pixels from a source bitmap to a destination rectangle, optionally in combination
            with a brush pattern, according to a specified raster operation, stretching or compressing the output to fit the dimensions
            of the destination, if necessary.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_EXTCREATEFONTINDIRECTW">
            <summary>
            This record defines a logical font that has the specified characteristics. The font can subsequently be selected as the
            current font.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_EXTTEXTOUTA">
            <summary>This record draws an ASCII text string using the current font and text colors.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_EXTTEXTOUTW">
            <summary>This record draws a Unicode text string using the current font and text colors.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_POLYBEZIER16">
            <summary>This record defines one or more Bezier curves. The curves are drawn using the current pen.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_POLYGON16">
            <summary>
            This record defines a polygon consisting of two or more vertexes connected by straight lines. The polygon is outlined by
            using the current pen and filled by using the current brush and polygon fill mode. The polygon is closed automatically by
            drawing a line from the last vertex to the first.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_POLYLINE16">
            <summary>This record defines a series of line segments by connecting the points in the specified array.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_POLYBEZIERTO16">
            <summary>This record defines one or more Bezier curves based on the current position.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_POLYLINETO16">
            <summary>
            This record defines one or more straight lines based upon the current position. A line is drawn from the current position to
            the first point specified by the Points field by using the current pen. For each additional line, drawing is performed from
            the ending point of the previous line to the next point specified by Points.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_POLYPOLYLINE16">
            <summary>This record defines multiple series of connected line segments.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_POLYPOLYGON16">
            <summary>
            This record defines a series of closed polygons. Each polygon is outlined by using the current pen and filled by using the
            current brush and polygon fill mode. The polygons specified by this record can overlap.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_POLYDRAW16">
            <summary>This record defines a set of line segments and Bezier curves.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_CREATEMONOBRUSH">
            <summary>
            This record defines a logical brush with the specified bitmap pattern. The bitmap can be a device-independent bitmap (DIB)
            section bitmap or it can be a device-dependent bitmap.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_CREATEDIBPATTERNBRUSHPT">
            <summary>This record defines a logical brush that has the pattern specified by the DIB.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_EXTCREATEPEN">
            <summary>
            This record defines an extended logical pen (section 2.2.20) that has the specified style, width, color, and brush attributes.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_POLYTEXTOUTA">
            <summary>
            This record draws one or more ASCII text strings using the current font and text colors. Note: EMR_POLYTEXTOUTA SHOULD be
            emulated with a series of EMR_EXTTEXTOUTW records, one per string.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_POLYTEXTOUTW">
            <summary>
            This record draws one or more Unicode text strings using the current font and text colors. Note: EMR_POLYTEXTOUTW SHOULD be
            emulated with a series of EMR_EXTTEXTOUTW records, one per string.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_SETICMMODE">
            <summary>This record specifies the mode of Image Color Management (ICM) for graphics operations.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_CREATECOLORSPACE">
            <summary>This record creates a logical color space object from a color profile with a name consisting of ASCII characters.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_SETCOLORSPACE">
            <summary>This record defines the current logical color space object for graphics operations.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_DELETECOLORSPACE">
            <summary>
            This record deletes a logical color space object. Note: An EMR_DELETEOBJECT record SHOULD be used instead of
            EMR_DELETECOLORSPACE to delete a logical color space object.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_GLSRECORD">
            <summary>This record specifies an OpenGL function.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_GLSBOUNDEDRECORD">
            <summary>This record specifies an OpenGL function with a bounding rectangle for output.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_PIXELFORMAT">
            <summary>This record specifies the pixel format to use for graphics operations.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_DRAWESCAPE">
            <summary>
            This record passes arbitrary information to the driver. The intent is that the information results in drawing being done.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_EXTESCAPE">
            <summary>
            This record passes arbitrary information to the driver. The intent is that the information does not result in drawing being done.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_SMALLTEXTOUT">
            <summary>This record outputs a string.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_FORCEUFIMAPPING">
            <summary>
            This record forces the font mapper to match fonts based on their UniversalFontId in preference to their LogFont information.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_NAMEDESCAPE">
            <summary>This record passes arbitrary information to the given named driver.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_COLORCORRECTPALETTE">
            <summary>
            This record specifies how to correct the entries of a logical palette object using Windows Color System (WCS) 1.0 values.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_SETICMPROFILEA">
            <summary>This record specifies a color profile in a file with a name consisting of ASCII characters, for graphics output.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_SETICMPROFILEW">
            <summary>This record specifies a color profile in a file with a name consisting of Unicode characters, for graphics output.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_ALPHABLEND">
            <summary>
            This record specifies a block transfer of pixels from a source bitmap to a destination rectangle, including alpha
            transparency data, according to a specified blending operation.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_SETLAYOUT">
            <summary>This record specifies the order in which text and graphics are drawn.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_TRANSPARENTBLT">
            <summary>
            This record specifies a block transfer of pixels from a source bitmap to a destination rectangle, treating a specified color
            as transparent, stretching or compressing the output to fit the dimensions of the destination, if necessary.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_GRADIENTFILL">
            <summary>This record specifies filling rectangles or triangles with gradients of color.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_SETLINKEDUFIS">
            <summary>This record sets the UniversalFontIds (section 2.2.27) of linked fonts to use during character lookup.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_SETTEXTJUSTIFICATION">
            <summary>This record specifies the amount of extra space to add to break characters for justification purposes.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_COLORMATCHTOTARGETW">
            <summary>
            This record specifies whether to perform color matching with a color profile that is specified in a file with a name
            consisting of Unicode characters.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RecordType.EMR_CREATECOLORSPACEW">
            <summary>This record creates a logical color space object from a color profile with a name consisting of Unicode characters.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.CloseEnhMetaFile(Vanara.PInvoke.HDC)">
            <summary>
            The <c>CloseEnhMetaFile</c> function closes an enhanced-metafile device context and returns a handle that identifies an
            enhanced-format metafile.
            </summary>
            <param name="hdc">Handle to an enhanced-metafile device context.</param>
            <returns>
            <para>If the function succeeds, the return value is a handle to an enhanced metafile.</para>
            <para>If the function fails, the return value is <c>NULL</c>.</para>
            </returns>
            <remarks>
            <para>
            An application can use the enhanced-metafile handle returned by the <c>CloseEnhMetaFile</c> function to perform the following tasks:
            </para>
            <list type="bullet">
            <item>
            <term>Display a picture stored in an enhanced metafile</term>
            </item>
            <item>
            <term>Create copies of the enhanced metafile</term>
            </item>
            <item>
            <term>Enumerate, edit, or copy individual records in the enhanced metafile</term>
            </item>
            <item>
            <term>Retrieve an optional description of the metafile contents from the enhanced-metafile header</term>
            </item>
            <item>
            <term>Retrieve a copy of the enhanced-metafile header</term>
            </item>
            <item>
            <term>Retrieve a binary copy of the enhanced metafile</term>
            </item>
            <item>
            <term>Enumerate the colors in the optional palette</term>
            </item>
            <item>
            <term>Convert an enhanced-format metafile into a Windows-format metafile</term>
            </item>
            </list>
            <para>
            When the application no longer needs the enhanced metafile handle, it should release the handle by calling the DeleteEnhMetaFile function.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.CloseMetaFile(Vanara.PInvoke.HDC)">
            <summary>
            <para>
            The <c>CloseMetaFile</c> function closes a metafile device context and returns a handle that identifies a Windows-format metafile.
            </para>
            <para>
            <c>Note</c> This function is provided only for compatibility with Windows-format metafiles. Enhanced-format metafiles provide
            superior functionality and are recommended for new applications. The corresponding function for an enhanced-format metafile is CloseEnhMetaFile.
            </para>
            </summary>
            <param name="hdc">Handle to a metafile device context used to create a Windows-format metafile.</param>
            <returns>
            <para>If the function succeeds, the return value is a handle to a Windows-format metafile.</para>
            <para>If the function fails, the return value is <c>NULL</c>.</para>
            </returns>
            <remarks>
            <para>To convert a Windows-format metafile into a new enhanced-format metafile, use the SetWinMetaFileBits function.</para>
            <para>
            When an application no longer needs the Windows-format metafile handle, it should delete the handle by calling the DeleteMetaFile function.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.CopyEnhMetaFile(Vanara.PInvoke.HENHMETAFILE,System.String)">
            <summary>The <c>CopyEnhMetaFile</c> function copies the contents of an enhanced-format metafile to a specified file.</summary>
            <param name="hEnh">A handle to the enhanced metafile to be copied.</param>
            <param name="lpFileName">
            A pointer to the name of the destination file. If this parameter is <c>NULL</c>, the source metafile is copied to memory.
            </param>
            <returns>
            <para>If the function succeeds, the return value is a handle to the copy of the enhanced metafile.</para>
            <para>If the function fails, the return value is <c>NULL</c>.</para>
            </returns>
            <remarks>
            <para>
            Where text arguments must use Unicode characters, use the <c>CopyEnhMetaFile</c> function as a wide-character function. Where
            text arguments must use characters from the Windows character set, use this function as an ANSI function.
            </para>
            <para>Applications can use metafiles stored in memory for temporary operations.</para>
            <para>
            When the application no longer needs the enhanced-metafile handle, it should delete the handle by calling the DeleteEnhMetaFile function.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.CopyMetaFile(Vanara.PInvoke.HMETAFILE,System.String)">
            <summary>
            <para>The <c>CopyMetaFile</c> function copies the content of a Windows-format metafile to the specified file.</para>
            <para>
            <c>Note</c> This function is provided only for compatibility with Windows-format metafiles. Enhanced-format metafiles provide
            superior functionality and are recommended for new applications. The corresponding function for an enhanced-format metafile is CopyEnhMetaFile.
            </para>
            </summary>
            <param name="arg1">A handle to the source Windows-format metafile.</param>
            <param name="arg2">
            A pointer to the name of the destination file. If this parameter is <c>NULL</c>, the source metafile is copied to memory.
            </param>
            <returns>
            <para>If the function succeeds, the return value is a handle to the copy of the Windows-format metafile.</para>
            <para>If the function fails, the return value is <c>NULL</c>.</para>
            </returns>
            <remarks>
            <para>
            Where text arguments must use Unicode characters, use this function as a wide-character function. Where text arguments must use
            characters from the Windows character set, use this function as an ANSI function.
            </para>
            <para>
            When the application no longer needs the Windows-format metafile handle, it should delete the handle by calling the
            DeleteMetaFile function.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.CreateEnhMetaFile(Vanara.PInvoke.HDC,System.String,Vanara.PInvoke.PRECT,System.String)">
            <summary>
            <para>
            The <c>CreateEnhMetaFile</c> function creates a device context for an enhanced-format metafile. This device context can be used
            to store a device-independent picture.
            </para>
            </summary>
            <param name="hdc">
            <para>
            A handle to a reference device for the enhanced metafile. This parameter can be <c>NULL</c>; for more information, see Remarks.
            </para>
            </param>
            <param name="lpFilename">
            <para>
            A pointer to the file name for the enhanced metafile to be created. If this parameter is <c>NULL</c>, the enhanced metafile is
            memory based and its contents are lost when it is deleted by using the DeleteEnhMetaFile function.
            </para>
            </param>
            <param name="lprc">
            <para>
            A pointer to a RECT structure that specifies the dimensions (in .01-millimeter units) of the picture to be stored in the enhanced metafile.
            </para>
            </param>
            <param name="lpDesc">
            <para>
            A pointer to a string that specifies the name of the application that created the picture, as well as the picture's title. This
            parameter can be <c>NULL</c>; for more information, see Remarks.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is a handle to the device context for the enhanced metafile.</para>
            <para>If the function fails, the return value is <c>NULL</c>.</para>
            </returns>
            <remarks>
            <para>
            Where text arguments must use Unicode characters, use the <c>CreateEnhMetaFile</c> function as a wide-character function. Where
            text arguments must use characters from the Windows character set, use this function as an ANSI function.
            </para>
            <para>
            The system uses the reference device identified by the hdcRef parameter to record the resolution and units of the device on which
            a picture originally appeared. If the hdcRef parameter is <c>NULL</c>, it uses the current display device for reference.
            </para>
            <para>
            The <c>left</c> and <c>top</c> members of the RECT structure pointed to by the <paramref name="lprc"/> parameter must be less
            than the <c>right</c> and <c>bottom</c> members, respectively. Points along the edges of the rectangle are included in the
            picture. If <paramref name="lprc"/> is <c>NULL</c>, the graphics device interface (GDI) computes the dimensions of the smallest
            rectangle that surrounds the picture drawn by the application. The <paramref name="lprc"/> parameter should be provided where possible.
            </para>
            <para>
            The string pointed to by the lpDescription parameter must contain a null character between the application name and the picture
            name and must terminate with two null characters for example, "XYZ Graphics Editor\0Bald Eagle\0\0", where \0 represents the null
            character. If lpDescription is <c>NULL</c>, there is no corresponding entry in the enhanced-metafile header.
            </para>
            <para>
            Applications use the device context created by this function to store a graphics picture in an enhanced metafile. The handle
            identifying this device context can be passed to any GDI function.
            </para>
            <para>
            After an application stores a picture in an enhanced metafile, it can display the picture on any output device by calling the
            PlayEnhMetaFile function. When displaying the picture, the system uses the rectangle pointed to by the <paramref name="lprc"/>
            parameter and the resolution data from the reference device to position and scale the picture.
            </para>
            <para>The device context returned by this function contains the same default attributes associated with any new device context.</para>
            <para>Applications must use the GetWinMetaFileBits function to convert an enhanced metafile to the older Windows metafile format.</para>
            <para>The file name for the enhanced metafile should use the .emf extension.</para>
            <para>Examples</para>
            <para>For an example, see Creating an Enhanced Metafile.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.CreateMetaFile(System.String)">
            <summary>
            <para>The <c>CreateMetaFile</c> function creates a device context for a Windows-format metafile.</para>
            <para>
            <c>Note</c> This function is provided only for compatibility with Windows-format metafiles. Enhanced-format metafiles provide
            superior functionality and are recommended for new applications. The corresponding function for an enhanced-format metafile is CreateEnhMetaFile.
            </para>
            </summary>
            <param name="pszFile">
            A pointer to the file name for the Windows-format metafile to be created. If this parameter is <c>NULL</c>, the Windows-format
            metafile is memory based and its contents are lost when it is deleted by using the DeleteMetaFile function.
            </param>
            <returns>
            <para>If the function succeeds, the return value is a handle to the device context for the Windows-format metafile.</para>
            <para>If the function fails, the return value is <c>NULL</c>.</para>
            </returns>
            <remarks>
            <para>
            Where text arguments must use Unicode characters, use the <c>CreateMetaFile</c> function as a wide-character function. Where text
            arguments must use characters from the Windows character set, use this function as an ANSI function.
            </para>
            <para>
            <c>CreateMetaFile</c> is a Windows-format metafile function. This function supports only 16-bit Windows-based applications, which
            are listed in Windows-Format Metafiles. It does not record or play back GDI functions such as PolyBezier, which were not part of
            16-bit Windows.
            </para>
            <para>
            The device context created by this function can be used to record GDI output functions in a Windows-format metafile. It cannot be
            used with GDI query functions such as GetTextColor. When the device context is used with a GDI output function, the return value
            of that function becomes <c>TRUE</c> if the function is recorded and <c>FALSE</c> otherwise. When an object is selected by using
            the SelectObject function, only a copy of the object is recorded. The object still belongs to the application.
            </para>
            <para>
            To create a scalable Windows-format metafile, record the graphics output in the MM_ANISOTROPIC mapping mode. The file cannot
            contain functions that modify the viewport origin and extents, nor can it contain device-dependent functions such as the
            SelectClipRgn function. Once created, the Windows metafile can be scaled and rendered to any output device-format by defining the
            viewport origin and extents of the picture before playing it.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.DeleteEnhMetaFile(Vanara.PInvoke.HENHMETAFILE)">
            <summary>
            <para>The <c>DeleteEnhMetaFile</c> function deletes an enhanced-format metafile or an enhanced-format metafile handle.</para>
            </summary>
            <param name="hmf">
            <para>A handle to an enhanced metafile.</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>
            If the hemf parameter identifies an enhanced metafile stored in memory, the <c>DeleteEnhMetaFile</c> function deletes the
            metafile. If hemf identifies a metafile stored on a disk, the function deletes the metafile handle but does not destroy the
            actual metafile. An application can retrieve the file by calling the GetEnhMetaFile function.
            </para>
            <para>Examples</para>
            <para>For an example, see Opening an Enhanced Metafile and Displaying Its Contents.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.DeleteMetaFile(Vanara.PInvoke.HMETAFILE)">
            <summary>
            <para>The <c>DeleteMetaFile</c> function deletes a Windows-format metafile or Windows-format metafile handle.</para>
            <para>
            <c>Note</c> This function is provided only for compatibility with Windows-format metafiles. Enhanced-format metafiles provide
            superior functionality and are recommended for new applications. The corresponding function for an enhanced-format metafile is DeleteEnhMetaFile.
            </para>
            </summary>
            <param name="hmf">A handle to a Windows-format metafile.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            If the metafile identified by the hmf parameter is stored in memory (rather than on a disk), its content is lost when it is
            deleted by using the <c>DeleteMetaFile</c> function.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.EnumEnhMetaFile(Vanara.PInvoke.HDC,Vanara.PInvoke.HENHMETAFILE,Vanara.PInvoke.Gdi32.EnhMetaFileProc,System.IntPtr,Vanara.PInvoke.PRECT)">
            <summary>
            The <c>EnumEnhMetaFile</c> function enumerates the records within an enhanced-format metafile by retrieving each record and
            passing it to the specified callback function. The application-supplied callback function processes each record as required. The
            enumeration continues until the last record is processed or when the callback function returns zero.
            </summary>
            <param name="hdc">A handle to a device context. This handle is passed to the callback function.</param>
            <param name="hmf">A handle to an enhanced metafile.</param>
            <param name="proc">A pointer to the application-supplied callback function. For more information, see the EnhMetaFileProc function.</param>
            <param name="param">A pointer to optional callback-function data.</param>
            <param name="lpRect">
            A pointer to a RECT structure that specifies the coordinates, in logical units, of the picture's upper-left and lower-right corners.
            </param>
            <returns>
            <para>If the callback function successfully enumerates all the records in the enhanced metafile, the return value is nonzero.</para>
            <para>
            If the callback function does not successfully enumerate all the records in the enhanced metafile, the return value is zero.
            </para>
            </returns>
            <remarks>
            <para>
            Points along the edge of the rectangle pointed to by the lpRect parameter are included in the picture. If the hdc parameter is
            <c>NULL</c>, the system ignores lpRect.
            </para>
            <para>
            If the callback function calls the PlayEnhMetaFileRecord function, hdc must identify a valid device context. The system uses the
            device context's transformation and mapping mode to transform the picture displayed by the <c>PlayEnhMetaFileRecord</c> function.
            </para>
            <para>You can use the <c>EnumEnhMetaFile</c> function to embed one enhanced-metafile within another.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.EnumMetaFile(Vanara.PInvoke.HDC,Vanara.PInvoke.HMETAFILE,Vanara.PInvoke.Gdi32.EnumMetaFileProc,System.IntPtr)">
            <summary>
            <para>
            The <c>EnumMetaFile</c> function enumerates the records within a Windows-format metafile by retrieving each record and passing it
            to the specified callback function. The application-supplied callback function processes each record as required. The enumeration
            continues until the last record is processed or when the callback function returns zero.
            </para>
            <para>
            <c>Note</c> This function is provided only for compatibility with Windows-format metafiles. Enhanced-format metafiles provide
            superior functionality and are recommended for new applications. The corresponding function for an enhanced-format metafile is EnumEnhMetaFile.
            </para>
            </summary>
            <param name="hdc">Handle to a device context. This handle is passed to the callback function.</param>
            <param name="hmf">Handle to a Windows-format metafile.</param>
            <param name="proc">Pointer to an application-supplied callback function. For more information, see EnumMetaFileProc.</param>
            <param name="param">Pointer to optional data.</param>
            <returns>
            <para>If the callback function successfully enumerates all the records in the Windows-format metafile, the return value is nonzero.</para>
            <para>
            If the callback function does not successfully enumerate all the records in the Windows-format metafile, the return value is zero.
            </para>
            </returns>
            <remarks>
            <para>To convert a Windows-format metafile into an enhanced-format metafile, use the SetWinMetaFileBits function.</para>
            <para>You can use the <c>EnumMetaFile</c> function to embed one Windows-format metafile within another.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GdiComment(Vanara.PInvoke.HDC,System.UInt32,System.Byte[])">
            <summary>The <c>GdiComment</c> function copies a comment from a buffer into a specified enhanced-format metafile.</summary>
            <param name="hdc">A handle to an enhanced-metafile device context.</param>
            <param name="nSize">The length of the comment buffer, in bytes.</param>
            <param name="lpData">A pointer to the buffer that contains the comment.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>
            A comment can include any kind of private information, for example, the source of a picture and the date it was created. A
            comment should begin with an application signature, followed by the data.
            </para>
            <para>
            Comments should not contain application-specific or position-specific data. Position-specific data specifies the location of a
            record, and it should not be included because one metafile may be embedded within another metafile.
            </para>
            <para>
            A public comment is a comment that begins with the comment signature identifier GDICOMMENT_IDENTIFIER. The following public
            comments are defined.
            </para>
            <list type="table">
            <listheader>
            <term>GDICOMMENT_WINDOWS_METAFILE</term>
            <term>
            The GDICOMMENT_WINDOWS_METAFILE public comment contains a Windows-format metafile that is equivalent to an enhanced-format
            metafile. This comment is written only by the SetWinMetaFileBits function. The comment record, if given, follows the
            ENHMETAHEADER metafile record. The comment has the following form:
            </term>
            </listheader>
            </list>
            <list type="table">
            <listheader>
            <term>GDICOMMENT_BEGINGROUP</term>
            <term>
            The GDICOMMENT_BEGINGROUP public comment identifies the beginning of a group of drawing records. It identifies an object within
            an enhanced metafile. The comment has the following form:
            </term>
            </listheader>
            </list>
            <list type="table">
            <listheader>
            <term>GDICOMMENT_ENDGROUP</term>
            <term>
            The GDICOMMENT_ENDGROUP public comment identifies the end of a group of drawing records. The GDICOMMENT_BEGINGROUP comment and
            the GDICOMMENT_ENDGROUP comment must be included in a pair and may be nested. The comment has the following form:
            </term>
            </listheader>
            </list>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetEnhMetaFile(System.String)">
            <summary>
            <para>
            The <c>GetEnhMetaFile</c> function creates a handle that identifies the enhanced-format metafile stored in the specified file.
            </para>
            </summary>
            <param name="lpName">
            <para>A pointer to a null-terminated string that specifies the name of an enhanced metafile.</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is a handle to the enhanced metafile.</para>
            <para>If the function fails, the return value is <c>NULL</c>.</para>
            </returns>
            <remarks>
            <para>
            When the application no longer needs an enhanced-metafile handle, it should delete the handle by calling the DeleteEnhMetaFile function.
            </para>
            <para>
            A Windows-format metafile must be converted to the enhanced format before it can be processed by the <c>GetEnhMetaFile</c>
            function. To convert the file, use the SetWinMetaFileBits function.
            </para>
            <para>
            Where text arguments must use Unicode characters, use this function as a wide-character function. Where text arguments must use
            characters from the Windows character set, use this function as an ANSI function.
            </para>
            <para>Examples</para>
            <para>For an example, see Opening an Enhanced Metafile and Displaying Its Contents.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetEnhMetaFileBits(Vanara.PInvoke.HENHMETAFILE,System.UInt32,System.Byte[])">
            <summary>
            The <c>GetEnhMetaFileBits</c> function retrieves the contents of the specified enhanced-format metafile and copies them into a buffer.
            </summary>
            <param name="hEMF">A handle to the enhanced metafile.</param>
            <param name="nSize">The size, in bytes, of the buffer to receive the data.</param>
            <param name="lpData">
            A pointer to a buffer that receives the metafile data. The buffer must be sufficiently large to contain the data. If lpbBuffer is
            <c>NULL</c>, the function returns the size necessary to hold the data.
            </param>
            <returns>
            <para>
            If the function succeeds and the buffer pointer is <c>NULL</c>, the return value is the size of the enhanced metafile, in bytes.
            </para>
            <para>
            If the function succeeds and the buffer pointer is a valid pointer, the return value is the number of bytes copied to the buffer.
            </para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>
            After the enhanced-metafile bits are retrieved, they can be used to create a memory-based metafile by calling the
            SetEnhMetaFileBits function.
            </para>
            <para>
            The <c>GetEnhMetaFileBits</c> function does not invalidate the enhanced-metafile handle. The application must call the
            DeleteEnhMetaFile function to delete the handle when it is no longer needed.
            </para>
            <para>
            The metafile contents retrieved by this function are in the enhanced format. To retrieve the metafile contents in the Windows
            format, use the GetWinMetaFileBits function.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetEnhMetaFileDescription(Vanara.PInvoke.HENHMETAFILE,System.UInt32,System.Text.StringBuilder)">
            <summary>
            The <c>GetEnhMetaFileDescription</c> function retrieves an optional text description from an enhanced-format metafile and copies
            the string to the specified buffer.
            </summary>
            <param name="hemf">A handle to the enhanced metafile.</param>
            <param name="cchBuffer">The size, in characters, of the buffer to receive the data. Only this many characters will be copied.</param>
            <param name="lpDescription">A pointer to a buffer that receives the optional text description.</param>
            <returns>
            <para>
            If the optional text description exists and the buffer pointer is <c>NULL</c>, the return value is the length of the text string,
            in characters.
            </para>
            <para>
            If the optional text description exists and the buffer pointer is a valid pointer, the return value is the number of characters
            copied into the buffer.
            </para>
            <para>If the optional text description does not exist, the return value is zero.</para>
            <para>If the function fails, the return value is GDI_ERROR.</para>
            </returns>
            <remarks>
            <para>
            The optional text description contains two strings, the first identifying the application that created the enhanced metafile and
            the second identifying the picture contained in the metafile. The strings are separated by a null character and terminated with
            two null charactersfor example, "XYZ Graphics Editor\0Bald Eagle\0\0" where \0 represents the null character.
            </para>
            <para>
            Where text arguments must use Unicode characters, use this function as a wide-character function. Where text arguments must use
            characters from the Windows character set, use this function as an ANSI function.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetEnhMetaFileHeader(Vanara.PInvoke.HENHMETAFILE,System.UInt32,System.IntPtr)">
            <summary>
            The <c>GetEnhMetaFileHeader</c> function retrieves the record containing the header for the specified enhanced-format metafile.
            </summary>
            <param name="hemf">A handle to the enhanced metafile for which the header is to be retrieved.</param>
            <param name="nSize">The size, in bytes, of the buffer to receive the data. Only this many bytes will be copied.</param>
            <param name="lpEnhMetaHeader">
            A pointer to an ENHMETAHEADER structure that receives the header record. If this parameter is <c>NULL</c>, the function returns
            the size of the header record.
            </param>
            <returns>
            If the function succeeds and the structure pointer is <c>NULL</c>, the return value is the size of the record that contains the
            header; if the structure pointer is a valid pointer, the return value is the number of bytes copied. Otherwise, it is zero.
            </returns>
            <remarks>
            <para>
            An enhanced-metafile header contains such information as the metafile's size, in bytes; the dimensions of the picture stored in
            the metafile; the number of records stored in the metafile; the offset to the optional text description; the size of the optional
            palette, and the resolution of the device on which the picture was created.
            </para>
            <para>The record that contains the enhanced-metafile header is always the first record in the metafile.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetEnhMetaFileHeader(Vanara.PInvoke.HENHMETAFILE)">
            <summary>
            The <c>GetEnhMetaFileHeader</c> function retrieves the record containing the header for the specified enhanced-format metafile.
            </summary>
            <param name="hemf">A handle to the enhanced metafile for which the header is to be retrieved.</param>
            <returns>An ENHMETAHEADER structure with the header record.</returns>
            <remarks>
            <para>
            An enhanced-metafile header contains such information as the metafile's size, in bytes; the dimensions of the picture stored in
            the metafile; the number of records stored in the metafile; the offset to the optional text description; the size of the optional
            palette, and the resolution of the device on which the picture was created.
            </para>
            <para>The record that contains the enhanced-metafile header is always the first record in the metafile.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetEnhMetaFilePaletteEntries(Vanara.PInvoke.HENHMETAFILE,System.UInt32,Vanara.PInvoke.PALETTEENTRY[])">
            <summary>
            The <c>GetEnhMetaFilePaletteEntries</c> function retrieves optional palette entries from the specified enhanced metafile.
            </summary>
            <param name="hemf">A handle to the enhanced metafile.</param>
            <param name="nNumEntries">The number of entries to be retrieved from the optional palette.</param>
            <param name="lpPaletteEntries">
            A pointer to an array of PALETTEENTRY structures that receives the palette colors. The array must contain at least as many
            structures as there are entries specified by the cEntries parameter.
            </param>
            <returns>
            If the array pointer is <c>NULL</c> and the enhanced metafile contains an optional palette, the return value is the number of
            entries in the enhanced metafile's palette; if the array pointer is a valid pointer and the enhanced metafile contains an
            optional palette, the return value is the number of entries copied; if the metafile does not contain an optional palette, the
            return value is zero. Otherwise, the return value is GDI_ERROR.
            </returns>
            <remarks>
            <para>
            An application can store an optional palette in an enhanced metafile by calling the CreatePalette and SetPaletteEntries functions
            before creating the picture and storing it in the metafile. By doing this, the application can achieve consistent colors when the
            picture is displayed on a variety of devices.
            </para>
            <para>
            An application that displays a picture stored in an enhanced metafile can call the <c>GetEnhMetaFilePaletteEntries</c> function
            to determine whether the optional palette exists. If it does, the application can call the <c>GetEnhMetaFilePaletteEntries</c>
            function a second time to retrieve the palette entries and then create a logical palette (by using the CreatePalette function),
            select it into its device context (by using the SelectPalette function), and then realize it (by using the RealizePalette
            function). After the logical palette has been realized, calling the PlayEnhMetaFile function displays the picture using its
            original colors.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetMetaFile(System.String)">
            <summary>
            <para>[GetMetaFile is no longer available for use as of Windows 2000. Instead, use GetEnhMetaFile.]</para>
            <para>The <c>GetMetaFile</c> function creates a handle that identifies the metafile stored in the specified file.</para>
            </summary>
            <param name="lpName">A pointer to a null-terminated string that specifies the name of a metafile.</param>
            <returns>
            <para>If the function succeeds, the return value is a handle to the metafile.</para>
            <para>If the function fails, the return value is <c>NULL</c>.</para>
            </returns>
            <remarks>
            This function is not implemented in the Win32 API. It is provided for compatibility with 16-bit versions of Windows. In Win32
            applications, use the GetEnhMetaFile function.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetMetaFileBitsEx(Vanara.PInvoke.HMETAFILE,System.UInt32,System.Byte[])">
            <summary>
            <para>
            The <c>GetMetaFileBitsEx</c> function retrieves the contents of a Windows-format metafile and copies them into the specified buffer.
            </para>
            <para>
            <c>Note</c> This function is provided only for compatibility with Windows-format metafiles. Enhanced-format metafiles provide
            superior functionality and are recommended for new applications. The corresponding function for an enhanced-format metafile is GetEnhMetaFileBits.
            </para>
            </summary>
            <param name="hMF">A handle to a Windows-format metafile.</param>
            <param name="cbBuffer">The size, in bytes, of the buffer to receive the data.</param>
            <param name="lpData">
            A pointer to a buffer that receives the metafile data. The buffer must be sufficiently large to contain the data. If lpvData is
            <c>NULL</c>, the function returns the number of bytes required to hold the data.
            </param>
            <returns>
            <para>
            If the function succeeds and the buffer pointer is <c>NULL</c>, the return value is the number of bytes required for the buffer;
            if the function succeeds and the buffer pointer is a valid pointer, the return value is the number of bytes copied.
            </para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>
            After the Windows-metafile bits are retrieved, they can be used to create a memory-based metafile by calling the
            SetMetaFileBitsEx function.
            </para>
            <para>
            The <c>GetMetaFileBitsEx</c> function does not invalidate the metafile handle. An application must delete this handle by calling
            the DeleteMetaFile function.
            </para>
            <para>To convert a Windows-format metafile into an enhanced-format metafile, use the SetWinMetaFileBits function.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetWinMetaFileBits(Vanara.PInvoke.HENHMETAFILE,System.UInt32,System.Byte[],Vanara.PInvoke.Gdi32.MapMode,Vanara.PInvoke.HDC)">
            <summary>
            The <c>GetWinMetaFileBits</c> function converts the enhanced-format records from a metafile into Windows-format records and
            stores the converted records in the specified buffer.
            </summary>
            <param name="hemf">A handle to the enhanced metafile.</param>
            <param name="cbData16">The size, in bytes, of the buffer into which the converted records are to be copied.</param>
            <param name="pData16">
            A pointer to the buffer that receives the converted records. If lpbBuffer is <c>NULL</c>, <c>GetWinMetaFileBits</c> returns the
            number of bytes required to store the converted metafile records.
            </param>
            <param name="iMapMode">The mapping mode to use in the converted metafile.</param>
            <param name="hdcRef">A handle to the reference device context.</param>
            <returns>
            <para>
            If the function succeeds and the buffer pointer is <c>NULL</c>, the return value is the number of bytes required to store the
            converted records; if the function succeeds and the buffer pointer is a valid pointer, the return value is the size of the
            metafile data in bytes.
            </para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>
            This function converts an enhanced metafile into a Windows-format metafile so that its picture can be displayed in an application
            that recognizes the older format.
            </para>
            <para>The system uses the reference device context to determine the resolution of the converted metafile.</para>
            <para>
            The <c>GetWinMetaFileBits</c> function does not invalidate the enhanced metafile handle. An application should call the
            DeleteEnhMetaFile function to release the handle when it is no longer needed.
            </para>
            <para>To create a scalable Windows-format metafile, specify MM_ANISOTROPIC as the fnMapMode parameter.</para>
            <para>The upper-left corner of the metafile picture is always mapped to the origin of the reference device.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.PlayEnhMetaFile(Vanara.PInvoke.HDC,Vanara.PInvoke.HENHMETAFILE,Vanara.PInvoke.PRECT)">
            <summary>The <c>PlayEnhMetaFile</c> function displays the picture stored in the specified enhanced-format metafile.</summary>
            <param name="hdc">A handle to the device context for the output device on which the picture will appear.</param>
            <param name="hmf">A handle to the enhanced metafile.</param>
            <param name="lprect">
            A pointer to a RECT structure that contains the coordinates of the bounding rectangle used to display the picture. The
            coordinates are specified in logical units.
            </param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>
            When an application calls the <c>PlayEnhMetaFile</c> function, the system uses the picture frame in the enhanced-metafile header
            to map the picture onto the rectangle pointed to by the lpRect parameter. (This picture may be sheared or rotated by setting the
            world transform in the output device before calling <c>PlayEnhMetaFile</c>.) Points along the edges of the rectangle are included
            in the picture.
            </para>
            <para>
            An enhanced-metafile picture can be clipped by defining the clipping region in the output device before playing the enhanced metafile.
            </para>
            <para>
            If an enhanced metafile contains an optional palette, an application can achieve consistent colors by setting up a color palette
            on the output device before calling <c>PlayEnhMetaFile</c>. To retrieve the optional palette, use the
            GetEnhMetaFilePaletteEntries function.
            </para>
            <para>
            An enhanced metafile can be embedded in a newly created enhanced metafile by calling <c>PlayEnhMetaFile</c> and playing the
            source enhanced metafile into the device context for the new enhanced metafile.
            </para>
            <para>
            The states of the output device context are preserved by this function. Any object created but not deleted in the enhanced
            metafile is deleted by this function.
            </para>
            <para>
            To stop this function, an application can call the CancelDC function from another thread to terminate the operation. In this
            case, the function returns <c>FALSE</c>.
            </para>
            <para>Examples</para>
            <para>For an example, see Opening an Enhanced Metafile and Displaying Its Contents.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.PlayEnhMetaFileRecord(Vanara.PInvoke.HDC,Vanara.PInvoke.HGDIOBJ[],Vanara.PInvoke.Gdi32.ENHMETARECORD,System.UInt32)">
            <summary>
            The <c>PlayEnhMetaFileRecord</c> function plays an enhanced-metafile record by executing the graphics device interface (GDI)
            functions identified by the record.
            </summary>
            <param name="hdc">A handle to the device context passed to the EnumEnhMetaFile function.</param>
            <param name="pht">
            A pointer to a table of handles to GDI objects used when playing the metafile. The first entry in this table contains the
            enhanced-metafile handle.
            </param>
            <param name="pmr">A pointer to the enhanced-metafile record to be played.</param>
            <param name="cht">The number of handles in the handle table.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>This is an enhanced-metafile function.</para>
            <para>
            An application typically uses <c>PlayEnhMetaFileRecord</c> in conjunction with the EnumEnhMetaFile function to process and play
            an enhanced-format metafile one record at a time.
            </para>
            <para>
            The hdc, lpHandletable, and nHandles parameters must be exactly those passed to the EnhMetaFileProc callback procedure by the
            EnumEnhMetaFile function.
            </para>
            <para>If <c>PlayEnhMetaFileRecord</c> does not recognize a record, it ignores the record and returns <c>TRUE</c>.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.PlayMetaFile(Vanara.PInvoke.HDC,Vanara.PInvoke.HMETAFILE)">
            <summary>
            <para>The <c>PlayMetaFile</c> function displays the picture stored in the given Windows-format metafile on the specified device.</para>
            <para>
            <c>Note</c> This function is provided only for compatibility with Windows-format metafiles. Enhanced-format metafiles provide
            superior functionality and are recommended for new applications. The corresponding function for an enhanced-format metafile is PlayEnhMetaFile.
            </para>
            </summary>
            <param name="hdc">Handle to a device context.</param>
            <param name="hmf">Handle to a Windows-format metafile.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>To convert a Windows-format metafile into an enhanced format metafile, use the SetWinMetaFileBits function.</para>
            <para>A Windows-format metafile can be played multiple times.</para>
            <para>
            A Windows-format metafile can be embedded in a second Windows-format metafile by calling the <c>PlayMetaFile</c> function and
            playing the source metafile into the device context for the target metafile.
            </para>
            <para>Any object created but not deleted in the Windows-format metafile is deleted by this function.</para>
            <para>
            To stop this function, an application can call the CancelDC function from another thread to terminate the operation. In this
            case, the function returns <c>FALSE</c>.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.PlayMetaFileRecord(Vanara.PInvoke.HDC,Vanara.PInvoke.HGDIOBJ[],Vanara.PInvoke.Gdi32.METARECORD,System.UInt32)">
            <summary>
            <para>
            The <c>PlayMetaFileRecord</c> function plays a Windows-format metafile record by executing the graphics device interface (GDI)
            function contained within that record.
            </para>
            <para>
            <c>Note</c> This function is provided only for compatibility with Windows-format metafiles. Enhanced-format metafiles provide
            superior functionality and are recommended for new applications. The corresponding function for an enhanced-format metafile is PlayEnhMetaFileRecord.
            </para>
            </summary>
            <param name="hdc">A handle to a device context.</param>
            <param name="lpHandleTable">
            A pointer to a HANDLETABLE structure representing the table of handles to GDI objects used when playing the metafile.
            </param>
            <param name="lpMR">A pointer to the Windows-format metafile record.</param>
            <param name="noObjs">The number of handles in the handle table.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>To convert a Windows-format metafile into an enhanced-format metafile, use the SetWinMetaFileBits function.</para>
            <para>
            An application typically uses <c>PlayMetaFileRecord</c> in conjunction with the EnumMetaFile function to process and play a
            Windows-format metafile one record at a time.
            </para>
            <para>
            The lpHandletable and nHandles parameters must be identical to those passed to the EnumMetaFileProc callback procedure by EnumMetaFile.
            </para>
            <para>If the <c>PlayMetaFileRecord</c> function does not recognize a record, it ignores the record and returns <c>TRUE</c>.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SetEnhMetaFileBits(System.UInt32,System.Byte[])">
            <summary>The <c>SetEnhMetaFileBits</c> function creates a memory-based enhanced-format metafile from the specified data.</summary>
            <param name="nSize">Specifies the size, in bytes, of the data provided.</param>
            <param name="pb">
            Pointer to a buffer that contains enhanced-metafile data. (It is assumed that the data in the buffer was obtained by calling the
            GetEnhMetaFileBits function.)
            </param>
            <returns>
            <para>If the function succeeds, the return value is a handle to a memory-based enhanced metafile.</para>
            <para>If the function fails, the return value is <c>NULL</c>.</para>
            </returns>
            <remarks>
            <para>
            When the application no longer needs the enhanced-metafile handle, it should delete the handle by calling the DeleteEnhMetaFile function.
            </para>
            <para>
            The <c>SetEnhMetaFileBits</c> function does not accept metafile data in the Windows format. To import Windows-format metafiles,
            use the SetWinMetaFileBits function.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SetMetaFileBitsEx(System.UInt32,System.Byte[])">
            <summary>
            <para>The <c>SetMetaFileBitsEx</c> function creates a memory-based Windows-format metafile from the supplied data.</para>
            <para>
            <c>Note</c> This function is provided only for compatibility with Windows-format metafiles. Enhanced-format metafiles provide
            superior functionality and are recommended for new applications. The corresponding function for an enhanced-format metafile is SetEnhMetaFileBits.
            </para>
            </summary>
            <param name="cbBuffer">Specifies the size, in bytes, of the Windows-format metafile.</param>
            <param name="lpData">
            Pointer to a buffer that contains the Windows-format metafile. (It is assumed that the data was obtained by using the
            GetMetaFileBitsEx function.)
            </param>
            <returns>
            <para>If the function succeeds, the return value is a handle to a memory-based Windows-format metafile.</para>
            <para>If the function fails, the return value is <c>NULL</c>.</para>
            </returns>
            <remarks>
            <para>To convert a Windows-format metafile into an enhanced-format metafile, use the SetWinMetaFileBits function.</para>
            <para>
            When the application no longer needs the metafile handle returned by <c>SetMetaFileBitsEx</c>, it should delete it by calling the
            DeleteMetaFile function.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SetWinMetaFileBits(System.UInt32,System.Byte[],Vanara.PInvoke.HDC,Vanara.PInvoke.Gdi32.METAFILEPICT@)">
            <summary>
            The <c>SetWinMetaFileBits</c> function converts a metafile from the older Windows format to the new enhanced format and stores
            the new metafile in memory.
            </summary>
            <param name="nSize">The size, in bytes, of the buffer that contains the Windows-format metafile.</param>
            <param name="lpMeta16Data">
            A pointer to a buffer that contains the Windows-format metafile data. (It is assumed that the data was obtained by using the
            GetMetaFileBitsEx or GetWinMetaFileBits function.)
            </param>
            <param name="hdcRef">A handle to a reference device context.</param>
            <param name="lpMFP">
            A pointer to a METAFILEPICT structure that contains the suggested size of the metafile picture and the mapping mode that was used
            when the picture was created.
            </param>
            <returns>
            <para>If the function succeeds, the return value is a handle to a memory-based enhanced metafile.</para>
            <para>If the function fails, the return value is <c>NULL</c>.</para>
            </returns>
            <remarks>
            <para>
            Windows uses the reference device context's resolution data and the data in the METAFILEPICT structure to scale a picture. If the
            hdcRef parameter is <c>NULL</c>, the system uses resolution data for the current output device. If the lpmfp parameter is
            <c>NULL</c>, the system uses the MM_ANISOTROPIC mapping mode to scale the picture so that it fits the entire device surface. The
            <c>hMF</c> member of the <c>METAFILEPICT</c> structure is not used.
            </para>
            <para>
            When the application no longer needs the enhanced metafile handle, it should delete it by calling the DeleteEnhMetaFile function.
            </para>
            <para>The handle returned by this function can be used with other enhanced-metafile functions.</para>
            <para>
            If the reference device context is not identical to the device in which the metafile was originally created, some GDI functions
            that use device units may not draw the picture correctly.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SetWinMetaFileBits(System.UInt32,System.Byte[],Vanara.PInvoke.HDC,System.IntPtr)">
            <summary>
            The <c>SetWinMetaFileBits</c> function converts a metafile from the older Windows format to the new enhanced format and stores
            the new metafile in memory.
            </summary>
            <param name="nSize">The size, in bytes, of the buffer that contains the Windows-format metafile.</param>
            <param name="lpMeta16Data">
            A pointer to a buffer that contains the Windows-format metafile data. (It is assumed that the data was obtained by using the
            GetMetaFileBitsEx or GetWinMetaFileBits function.)
            </param>
            <param name="hdcRef">A handle to a reference device context.</param>
            <param name="lpMFP">
            A pointer to a METAFILEPICT structure that contains the suggested size of the metafile picture and the mapping mode that was used
            when the picture was created.
            </param>
            <returns>
            <para>If the function succeeds, the return value is a handle to a memory-based enhanced metafile.</para>
            <para>If the function fails, the return value is <c>NULL</c>.</para>
            </returns>
            <remarks>
            <para>
            Windows uses the reference device context's resolution data and the data in the METAFILEPICT structure to scale a picture. If the
            hdcRef parameter is <c>NULL</c>, the system uses resolution data for the current output device. If the lpmfp parameter is
            <c>NULL</c>, the system uses the MM_ANISOTROPIC mapping mode to scale the picture so that it fits the entire device surface. The
            <c>hMF</c> member of the <c>METAFILEPICT</c> structure is not used.
            </para>
            <para>
            When the application no longer needs the enhanced metafile handle, it should delete it by calling the DeleteEnhMetaFile function.
            </para>
            <para>The handle returned by this function can be used with other enhanced-metafile functions.</para>
            <para>
            If the reference device context is not identical to the device in which the metafile was originally created, some GDI functions
            that use device units may not draw the picture correctly.
            </para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.ENHMETAHEADER">
            <summary>
            <para>
            The <c>ENHMETAHEADER</c> structure contains enhanced-metafile data such as the dimensions of the picture stored in the enhanced
            metafile, the count of records in the enhanced metafile, the resolution of the device on which the picture was created, and so on.
            </para>
            <para>This structure is always the first record in an enhanced metafile.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ENHMETAHEADER.iType">
            <summary>The record type. This member must specify the value assigned to the EMR_HEADER constant.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ENHMETAHEADER.nSize">
            <summary>The structure size, in bytes.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ENHMETAHEADER.rclBounds">
            <summary>
            The dimensions, in device units, of the smallest rectangle that can be drawn around the picture stored in the metafile. This
            rectangle is supplied by graphics device interface (GDI). Its dimensions include the right and bottom edges.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ENHMETAHEADER.rclFrame">
            <summary>
            The dimensions, in .01 millimeter units, of a rectangle that surrounds the picture stored in the metafile. This rectangle
            must be supplied by the application that creates the metafile. Its dimensions include the right and bottom edges.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ENHMETAHEADER.dSignature">
            <summary>A signature. This member must specify the value assigned to the ENHMETA_SIGNATURE constant.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ENHMETAHEADER.nVersion">
            <summary>The metafile version. The current version value is 0x10000.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ENHMETAHEADER.nBytes">
            <summary>The size of the enhanced metafile, in bytes.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ENHMETAHEADER.nRecords">
            <summary>The number of records in the enhanced metafile.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ENHMETAHEADER.nHandles">
            <summary>The number of handles in the enhanced-metafile handle table. (Index zero in this table is reserved.)</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ENHMETAHEADER.sReserved">
            <summary>Reserved; must be zero.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ENHMETAHEADER.nDescription">
            <summary>
            The number of characters in the array that contains the description of the enhanced metafile's contents. This member should
            be set to zero if the enhanced metafile does not contain a description string.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ENHMETAHEADER.offDescription">
            <summary>
            The offset from the beginning of the <c>ENHMETAHEADER</c> structure to the array that contains the description of the
            enhanced metafile's contents. This member should be set to zero if the enhanced metafile does not contain a description string.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ENHMETAHEADER.nPalEntries">
            <summary>The number of entries in the enhanced metafile's palette.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ENHMETAHEADER.szlDevice">
            <summary>The resolution of the reference device, in pixels.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ENHMETAHEADER.szlMillimeters">
            <summary>The resolution of the reference device, in millimeters.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ENHMETAHEADER.cbPixelFormat">
            <summary>
            The size of the last recorded pixel format in a metafile. If a pixel format is set in a reference DC at the start of
            recording, cbPixelFormat is set to the size of the PIXELFORMATDESCRIPTOR. When no pixel format is set when a metafile is
            recorded, this member is set to zero. If more than a single pixel format is set, the header points to the last pixel format.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ENHMETAHEADER.offPixelFormat">
            <summary>
            The offset of pixel format used when recording a metafile. If a pixel format is set in a reference DC at the start of
            recording or during recording, offPixelFormat is set to the offset of the PIXELFORMATDESCRIPTOR in the metafile. If no pixel
            format is set when a metafile is recorded, this member is set to zero. If more than a single pixel format is set, the header
            points to the last pixel format.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ENHMETAHEADER.bOpenGL">
            <summary>
            Indicates whether any OpenGL records are present in a metafile. bOpenGL is a simple Boolean flag that you can use to
            determine whether an enhanced metafile requires OpenGL handling. When a metafile contains OpenGL records, bOpenGL is
            <c>TRUE</c>; otherwise it is <c>FALSE</c>.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ENHMETAHEADER.szlMicrometers">
            <summary>The size of the reference device, in micrometers.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ENHMETAHEADER.Default">
            <summary>A default instance of the structure with the size field preset.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.HANDLETABLE">
            <summary>
            The <c>HANDLETABLE</c> structure is an array of handles, each of which identifies a graphics device interface (GDI) object.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.HANDLETABLE.objectHandle">
            <summary>An array of handles.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.METAFILEPICT">
            <summary>Defines the metafile picture format used for exchanging metafile data through the clipboard.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.METAFILEPICT.mm">
            <summary>
            <para>Type: <c>LONG</c></para>
            <para>The mapping mode in which the picture is drawn.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.METAFILEPICT.xExt">
            <summary>
            <para>Type: <c>LONG</c></para>
            <para>
            The size of the metafile picture for all modes except the <c>MM_ISOTROPIC</c> and <c>MM_ANISOTROPIC</c> modes. (For more
            information about these modes, see the <c>yExt</c> member.) The x-extent specifies the width of the rectangle within which
            the picture is drawn. The coordinates are in units that correspond to the mapping mode.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.METAFILEPICT.yExt">
            <summary>
            <para>Type: <c>LONG</c></para>
            <para>
            The size of the metafile picture for all modes except the <c>MM_ISOTROPIC</c> and <c>MM_ANISOTROPIC</c> modes. The y-extent
            specifies the height of the rectangle within which the picture is drawn. The coordinates are in units that correspond to the
            mapping mode. For <c>MM_ISOTROPIC</c> and <c>MM_ANISOTROPIC</c> modes, which can be scaled, the <c>xExt</c> and <c>yExt</c>
            members contain an optional suggested size in <c>MM_HIMETRIC</c> units. For <c>MM_ANISOTROPIC</c> pictures, <c>xExt</c> and
            <c>yExt</c> can be zero when no suggested size is supplied. For <c>MM_ISOTROPIC</c> pictures, an aspect ratio must be
            supplied even when no suggested size is given. (If a suggested size is given, the aspect ratio is implied by the size.) To
            give an aspect ratio without implying a suggested size, set <c>xExt</c> and <c>yExt</c> to negative values whose ratio is the
            appropriate aspect ratio. The magnitude of the negative <c>xExt</c> and <c>yExt</c> values is ignored; only the ratio is used.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.METAFILEPICT.hMF">
            <summary>
            <para>Type: <c>HMETAFILE</c></para>
            <para>A handle to a memory metafile.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.ENHMETARECORD">
            <summary>
            The <c>ENHMETARECORD</c> structure contains data that describes a graphics device interface (GDI) function used to create part of
            a picture in an enhanced-format metafile.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.ENHMETARECORD.#ctor(Vanara.PInvoke.Gdi32.RecordType,System.UInt32[])">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Gdi32.ENHMETARECORD"/> class.</summary>
            <param name="type">The record type.</param>
            <param name="parameters">An array of parameters passed to the GDI function identified by the record.</param>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.ENHMETARECORD.#ctor(System.IntPtr)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Gdi32.ENHMETARECORD"/> class.</summary>
        </member>
        <member name="P:Vanara.PInvoke.Gdi32.ENHMETARECORD.dParm">
            <summary>An array of parameters passed to the GDI function identified by the record.</summary>
        </member>
        <member name="P:Vanara.PInvoke.Gdi32.ENHMETARECORD.iType">
            <summary>The record type.</summary>
        </member>
        <member name="P:Vanara.PInvoke.Gdi32.ENHMETARECORD.nSize">
            <summary>The size of the record, in bytes.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.ENHMETARECORD.op_Explicit(System.IntPtr)~Vanara.PInvoke.Gdi32.ENHMETARECORD">
            <summary>Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:Vanara.PInvoke.Gdi32.ENHMETARECORD"/>.</summary>
            <param name="ptr">The pointer to an instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.METARECORD">
            <summary>The <c>METARECORD</c> structure contains a Windows-format metafile record.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.METARECORD.#ctor(System.UInt16,System.UInt16[])">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Gdi32.METARECORD"/> class.</summary>
            <param name="functionNumber">The function number.</param>
            <param name="parameters">An array of parameters passed to the GDI function identified by the record.</param>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.METARECORD.#ctor(System.IntPtr)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Gdi32.ENHMETARECORD"/> class.</summary>
        </member>
        <member name="P:Vanara.PInvoke.Gdi32.METARECORD.rdFunction">
            <summary>The function number.</summary>
        </member>
        <member name="P:Vanara.PInvoke.Gdi32.METARECORD.rdParm">
            <summary>An array of words containing the function parameters, in reverse of the order they are passed to the function.</summary>
        </member>
        <member name="P:Vanara.PInvoke.Gdi32.METARECORD.rdSize">
            <summary>The size, in words, of the record.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.METARECORD.op_Explicit(System.IntPtr)~Vanara.PInvoke.Gdi32.METARECORD">
            <summary>Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:Vanara.PInvoke.Gdi32.METARECORD"/>.</summary>
            <param name="ptr">The pointer to an instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.SafeHENHMETAFILE">
            <summary>Provides a <see cref="T:System.Runtime.InteropServices.SafeHandle"/> for <see cref="T:Vanara.PInvoke.HENHMETAFILE"/> that is disposed using <see cref="M:Vanara.PInvoke.Gdi32.DeleteEnhMetaFile(Vanara.PInvoke.HENHMETAFILE)"/>.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SafeHENHMETAFILE.#ctor(System.IntPtr,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Gdi32.SafeHENHMETAFILE"/> class and assigns an existing handle.</summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
            <param name="ownsHandle">
            <see langword="true"/> to reliably release the handle during the finalization phase; otherwise, <see langword="false"/> (not recommended).
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SafeHENHMETAFILE.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Gdi32.SafeHENHMETAFILE"/> class.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SafeHENHMETAFILE.op_Implicit(Vanara.PInvoke.Gdi32.SafeHENHMETAFILE)~Vanara.PInvoke.HENHMETAFILE">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.Gdi32.SafeHENHMETAFILE"/> to <see cref="T:Vanara.PInvoke.HENHMETAFILE"/>.</summary>
            <param name="h">The safe handle instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SafeHENHMETAFILE.InternalReleaseHandle">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.SafeHMETAFILE">
            <summary>Provides a <see cref="T:System.Runtime.InteropServices.SafeHandle"/> for <see cref="T:Vanara.PInvoke.HMETAFILE"/> that is disposed using <see cref="M:Vanara.PInvoke.Gdi32.DeleteMetaFile(Vanara.PInvoke.HMETAFILE)"/>.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SafeHMETAFILE.#ctor(System.IntPtr,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Gdi32.SafeHMETAFILE"/> class and assigns an existing handle.</summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
            <param name="ownsHandle">
            <see langword="true"/> to reliably release the handle during the finalization phase; otherwise, <see langword="false"/> (not recommended).
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SafeHMETAFILE.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Gdi32.SafeHMETAFILE"/> class.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SafeHMETAFILE.op_Implicit(Vanara.PInvoke.Gdi32.SafeHMETAFILE)~Vanara.PInvoke.HMETAFILE">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.Gdi32.SafeHMETAFILE"/> to <see cref="T:Vanara.PInvoke.HMETAFILE"/>.</summary>
            <param name="h">The safe handle instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SafeHMETAFILE.InternalReleaseHandle">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.PFD_FLAGS">
            <summary>A set of bit flags that specify properties of the pixel buffer.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PFD_FLAGS.PFD_DOUBLEBUFFER">
            <summary>The buffer is double-buffered. This flag and PFD_SUPPORT_GDI are mutually exclusive in the current generic implementation.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PFD_FLAGS.PFD_STEREO">
            <summary>The buffer is stereoscopic. This flag is not supported in the current generic implementation.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PFD_FLAGS.PFD_DRAW_TO_WINDOW">
            <summary>The buffer can draw to a window or device surface.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PFD_FLAGS.PFD_DRAW_TO_BITMAP">
            <summary>The buffer can draw to a memory bitmap.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PFD_FLAGS.PFD_SUPPORT_GDI">
            <summary>
            The buffer supports GDI drawing. This flag and PFD_DOUBLEBUFFER are mutually exclusive in the current generic implementation.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PFD_FLAGS.PFD_SUPPORT_OPENGL">
            <summary>The buffer supports OpenGL drawing.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PFD_FLAGS.PFD_GENERIC_FORMAT">
            <summary>
            The pixel format is supported by the GDI software implementation, which is also known as the generic implementation. If this
            bit is clear, the pixel format is supported by a device driver or hardware.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PFD_FLAGS.PFD_NEED_PALETTE">
            <summary>
            The buffer uses RGBA pixels on a palette-managed device. A logical palette is required to achieve the best results for this
            pixel type. Colors in the palette should be specified according to the values of the cRedBits, cRedShift, cGreenBits,
            cGreenShift, cBluebits, and cBlueShift members. The palette should be created and realized in the device context before
            calling wglMakeCurrent.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PFD_FLAGS.PFD_NEED_SYSTEM_PALETTE">
            <summary>
            Defined in the pixel format descriptors of hardware that supports one hardware palette in 256-color mode only. For such
            systems to use hardware acceleration, the hardware palette must be in a fixed order (for example, 3-3-2) when in RGBA mode or
            must match the logical palette when in color-index mode.When this flag is set, you must call SetSystemPaletteUse in your
            program to force a one-to-one mapping of the logical palette and the system palette. If your OpenGL hardware supports
            multiple hardware palettes and the device driver can allocate spare hardware palettes for OpenGL, this flag is typically clear.
            <para>This flag is not set in the generic pixel formats.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PFD_FLAGS.PFD_SWAP_EXCHANGE">
            <summary>
            Specifies the content of the back buffer in the double-buffered main color plane following a buffer swap. Swapping the color
            buffers causes the exchange of the back buffer's content with the front buffer's content. Following the swap, the back
            buffer's content contains the front buffer's content before the swap. PFD_SWAP_EXCHANGE is a hint only and might not be
            provided by a driver.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PFD_FLAGS.PFD_SWAP_COPY">
            <summary>
            Specifies the content of the back buffer in the double-buffered main color plane following a buffer swap. Swapping the color
            buffers causes the content of the back buffer to be copied to the front buffer. The content of the back buffer is not
            affected by the swap. PFD_SWAP_COPY is a hint only and might not be provided by a driver.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PFD_FLAGS.PFD_SWAP_LAYER_BUFFERS">
            <summary>
            Indicates whether a device can swap individual layer planes with pixel formats that include double-buffered overlay or
            underlay planes. Otherwise all layer planes are swapped together as a group. When this flag is set, wglSwapLayerBuffers is supported.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PFD_FLAGS.PFD_GENERIC_ACCELERATED">
            <summary>
            The pixel format is supported by a device driver that accelerates the generic implementation. If this flag is clear and the
            PFD_GENERIC_FORMAT flag is set, the pixel format is supported by the generic implementation only.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PFD_FLAGS.PFD_SUPPORT_DIRECTDRAW">
            <summary>The PFD support directdraw</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PFD_FLAGS.PFD_DIRECT3D_ACCELERATED">
            <summary>The PFD direc t3 d accelerated</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PFD_FLAGS.PFD_SUPPORT_COMPOSITION">
            <summary>The PFD support composition</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PFD_FLAGS.PFD_DEPTH_DONTCARE">
            <summary>
            The requested pixel format can either have or not have a depth buffer. To select a pixel format without a depth buffer, you
            must specify this flag. The requested pixel format can be with or without a depth buffer. Otherwise, only pixel formats with
            a depth buffer are considered.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PFD_FLAGS.PFD_DOUBLEBUFFER_DONTCARE">
            <summary>The requested pixel format can be either single- or double-buffered.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PFD_FLAGS.PFD_STEREO_DONTCARE">
            <summary>The requested pixel format can be either monoscopic or stereoscopic.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.PFD_LAYER">
            <summary>The plane layer.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PFD_LAYER.PFD_MAIN_PLANE">
            <summary>The layer is the main plane.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PFD_LAYER.PFD_OVERLAY_PLANE">
            <summary>The layer is the overlay plane.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PFD_LAYER.PFD_UNDERLAY_PLANE">
            <summary>The layer is the underlay plane.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.PFD_TYPE">
            <summary>Specifies the type of pixel data.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PFD_TYPE.PFD_TYPE_RGBA">
            <summary>RGBA pixels. Each pixel has four components in this order: red, green, blue, and alpha.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PFD_TYPE.PFD_TYPE_COLORINDEX">
            <summary>Color-index pixels. Each pixel uses a color-index value.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.ChoosePixelFormat(Vanara.PInvoke.HDC,Vanara.PInvoke.Gdi32.PIXELFORMATDESCRIPTOR@)">
            <summary>
            The <c>ChoosePixelFormat</c> function attempts to match an appropriate pixel format supported by a device context to a given
            pixel format specification.
            </summary>
            <param name="hdc">
            Specifies the device context that the function examines to determine the best match for the pixel format descriptor pointed to by ppfd.
            </param>
            <param name="ppfd">
            <para>
            Pointer to a PIXELFORMATDESCRIPTOR structure that specifies the requested pixel format. In this context, the members of the
            <c>PIXELFORMATDESCRIPTOR</c> structure that ppfd points to are used as follows:
            </para>
            <list type="table">
            <listheader>
            <term>nSize</term>
            <term>Specifies the size of the PIXELFORMATDESCRIPTOR data structure. Set this member to .</term>
            </listheader>
            <item>
            <term>nVersion</term>
            <term>Specifies the version number of the PIXELFORMATDESCRIPTOR data structure. Set this member to 1.</term>
            </item>
            <item>
            <term>dwFlags</term>
            <term>
            A set of bit flags that specify properties of the pixel buffer. You can combine the following bit flag constants by using
            bitwise-OR. If any of the following flags are set, the ChoosePixelFormat function attempts to match pixel formats that also have
            that flag or flags set. Otherwise, ChoosePixelFormat ignores that flag in the pixel formats: PFD_DRAW_TO_WINDOW,
            PFD_DRAW_TO_BITMAP, PFD_SUPPORT_GDI, PFD_SUPPORT_OPENGL If any of the following flags are set, ChoosePixelFormat attempts to
            match pixel formats that also have that flag or flags set. Otherwise, it attempts to match pixel formats without that flag set:
            PFD_DOUBLEBUFFER PFD_STEREO If the following flag is set, the function ignores the PFD_DOUBLEBUFFER flag in the pixel formats:
            PFD_DOUBLEBUFFER_DONTCARE If the following flag is set, the function ignores the PFD_STEREO flag in the pixel formats: PFD_STEREO_DONTCARE
            </term>
            </item>
            <item>
            <term>iPixelType</term>
            <term>Specifies the type of pixel format for the function to consider: PFD_TYPE_RGBA, PFD_TYPE_COLORINDEX</term>
            </item>
            <item>
            <term>cColorBits</term>
            <term>Zero or greater.</term>
            </item>
            <item>
            <term>cRedBits</term>
            <term>Not used.</term>
            </item>
            <item>
            <term>cRedShift</term>
            <term>Not used.</term>
            </item>
            <item>
            <term>cGreenBits</term>
            <term>Not used.</term>
            </item>
            <item>
            <term>cGreenShift</term>
            <term>Not used.</term>
            </item>
            <item>
            <term>cBlueBits</term>
            <term>Not used.</term>
            </item>
            <item>
            <term>cBlueShift</term>
            <term>Not used.</term>
            </item>
            <item>
            <term>cAlphaBits</term>
            <term>Zero or greater.</term>
            </item>
            <item>
            <term>cAlphaShift</term>
            <term>Not used.</term>
            </item>
            <item>
            <term>cAccumBits</term>
            <term>Zero or greater.</term>
            </item>
            <item>
            <term>cAccumRedBits</term>
            <term>Not used.</term>
            </item>
            <item>
            <term>cAccumGreenBits</term>
            <term>Not used.</term>
            </item>
            <item>
            <term>cAccumBlueBits</term>
            <term>Not used.</term>
            </item>
            <item>
            <term>cAccumAlphaBits</term>
            <term>Not used.</term>
            </item>
            <item>
            <term>cDepthBits</term>
            <term>Zero or greater.</term>
            </item>
            <item>
            <term>cStencilBits</term>
            <term>Zero or greater.</term>
            </item>
            <item>
            <term>cAuxBuffers</term>
            <term>Zero or greater.</term>
            </item>
            <item>
            <term>iLayerType</term>
            <term>Specifies one of the following layer type values: PFD_MAIN_PLANE, PFD_OVERLAY_PLANE, PFD_UNDERLAY_PLANE</term>
            </item>
            <item>
            <term>bReserved</term>
            <term>Not used.</term>
            </item>
            <item>
            <term>dwLayerMask</term>
            <term>Not used.</term>
            </item>
            <item>
            <term>dwVisibleMask</term>
            <term>Not used.</term>
            </item>
            <item>
            <term>dwDamageMask</term>
            <term>Not used.</term>
            </item>
            </list>
            </param>
            <returns>
            <para>
            If the function succeeds, the return value is a pixel format index (one-based) that is the closest match to the given pixel
            format descriptor.
            </para>
            <para>If the function fails, the return value is zero. To get extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            You must ensure that the pixel format matched by the <c>ChoosePixelFormat</c> function satisfies your requirements. For example,
            if you request a pixel format with a 24-bit RGB color buffer but the device context offers only 8-bit RGB color buffers, the
            function returns a pixel format with an 8-bit RGB color buffer.
            </para>
            <para>Examples</para>
            <para>The following code sample shows how to use <c>ChoosePixelFormat</c> to match a specified pixel format.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.DescribePixelFormat(Vanara.PInvoke.HDC,System.Int32,System.UInt32,Vanara.PInvoke.Gdi32.PIXELFORMATDESCRIPTOR@)">
            <summary>
            The <c>DescribePixelFormat</c> function obtains information about the pixel format identified by iPixelFormat of the device
            associated with hdc. The function sets the members of the PIXELFORMATDESCRIPTOR structure pointed to by ppfd with that pixel
            format data.
            </summary>
            <param name="hdc">Specifies the device context.</param>
            <param name="iPixelFormat">
            Index that specifies the pixel format. The pixel formats that a device context supports are identified by positive one-based
            integer indexes.
            </param>
            <param name="nBytes">
            The size, in bytes, of the structure pointed to by ppfd. The <c>DescribePixelFormat</c> function stores no more than nBytes bytes
            of data to that structure. Set this value to <c>sizeof</c>( <c>PIXELFORMATDESCRIPTOR</c>).
            </param>
            <param name="ppfd">
            Pointer to a <c>PIXELFORMATDESCRIPTOR</c> structure whose members the function sets with pixel format data. The function stores
            the number of bytes copied to the structure in the structure's <c>nSize</c> member. If, upon entry, ppfd is <c>NULL</c>, the
            function writes no data to the structure. This is useful when you only want to obtain the maximum pixel format index of a device context.
            </param>
            <returns>
            <para>
            If the function succeeds, the return value is the maximum pixel format index of the device context. In addition, the function
            sets the members of the <c>PIXELFORMATDESCRIPTOR</c> structure pointed to by ppfd according to the specified pixel format.
            </para>
            <para>If the function fails, the return value is zero. To get extended error information, call GetLastError.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetEnhMetaFilePixelFormat(Vanara.PInvoke.HENHMETAFILE,System.UInt32,Vanara.PInvoke.Gdi32.PIXELFORMATDESCRIPTOR@)">
            <summary>The <c>GetEnhMetaFilePixelFormat</c> function retrieves pixel format information for an enhanced metafile.</summary>
            <param name="hemf">Identifies the enhanced metafile.</param>
            <param name="cbBuffer">Specifies the size, in bytes, of the buffer into which the pixel format information is copied.</param>
            <param name="ppfd">
            Pointer to a PIXELFORMATDESCRIPTOR structure that contains the logical pixel format specification. The metafile uses this
            structure to record the logical pixel format specification.
            </param>
            <returns>
            <para>If the function succeeds and finds a pixel format, the return value is the size of the metafile's pixel format.</para>
            <para>If no pixel format is present, the return value is zero.</para>
            <para>If an error occurs and the function fails, the return value is GDI_ERROR. To get extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            When an enhanced metafile specifies a pixel format in its <c>ENHMETAHEADER</c> structure and the pixel format fits in the buffer,
            the pixel format information is copied into ppfd. When cbBuffer is too small to contain the pixel format of the metafile, the
            pixel format is not copied to the buffer. In either case, the function returns the size of the metafile's pixel format.
            </para>
            <para>For information on metafile recording and other operations, see Enhanced Metafile Operations.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetPixelFormat(Vanara.PInvoke.HDC)">
            <summary>
            The <c>GetPixelFormat</c> function obtains the index of the currently selected pixel format of the specified device context.
            </summary>
            <param name="hdc">Specifies the device context of the currently selected pixel format index returned by the function.</param>
            <returns>
            <para>
            If the function succeeds, the return value is the currently selected pixel format index of the specified device context. This is
            a positive, one-based index value.
            </para>
            <para>If the function fails, the return value is zero. To get extended error information, call GetLastError.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SetPixelFormat(Vanara.PInvoke.HDC,System.Int32,Vanara.PInvoke.Gdi32.PIXELFORMATDESCRIPTOR@)">
            <summary>
            The <c>SetPixelFormat</c> function sets the pixel format of the specified device context to the format specified by the
            iPixelFormat index.
            </summary>
            <param name="hdc">Specifies the device context whose pixel format the function attempts to set.</param>
            <param name="format">
            Index that identifies the pixel format to set. The various pixel formats supported by a device context are identified by
            one-based indexes.
            </param>
            <param name="ppfd">
            Pointer to a PIXELFORMATDESCRIPTOR structure that contains the logical pixel format specification. The system's metafile
            component uses this structure to record the logical pixel format specification. The structure has no other effect upon the
            behavior of the <c>SetPixelFormat</c> function.
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To get extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            If hdc references a window, calling the <c>SetPixelFormat</c> function also changes the pixel format of the window. Setting the
            pixel format of a window more than once can lead to significant complications for the Window Manager and for multithread
            applications, so it is not allowed. An application can only set the pixel format of a window one time. Once a window's pixel
            format is set, it cannot be changed.
            </para>
            <para>
            You should select a pixel format in the device context before calling the wglCreateContext function. The <c>wglCreateContext</c>
            function creates a rendering context for drawing on the device in the selected pixel format of the device context.
            </para>
            <para>
            An OpenGL window has its own pixel format. Because of this, only device contexts retrieved for the client area of an OpenGL
            window are allowed to draw into the window. As a result, an OpenGL window should be created with the WS_CLIPCHILDREN and
            WS_CLIPSIBLINGS styles. Additionally, the window class attribute should not include the CS_PARENTDC style.
            </para>
            <para>Examples</para>
            <para>The following code example shows <c>SetPixelFormat</c> usage.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SwapBuffers(Vanara.PInvoke.HDC)">
            <summary>
            The <c>SwapBuffers</c> function exchanges the front and back buffers if the current pixel format for the window referenced by the
            specified device context includes a back buffer.
            </summary>
            <param name="Arg1">
            Specifies a device context. If the current pixel format for the window referenced by this device context includes a back buffer,
            the function exchanges the front and back buffers.
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To get extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            If the current pixel format for the window referenced by the device context does not include a back buffer, this call has no
            effect and the content of the back buffer is undefined when the function returns.
            </para>
            <para>
            With multithread applications, flush the drawing commands in any other threads drawing to the same window before calling <c>SwapBuffers</c>.
            </para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.PIXELFORMATDESCRIPTOR">
            <summary>The <c>PIXELFORMATDESCRIPTOR</c> structure describes the pixel format of a drawing surface.</summary>
            <remarks>
            Please notice carefully, as documented above, that certain pixel format properties are not supported in the current generic
            implementation. The generic implementation is the Microsoft GDI software implementation of OpenGL. Hardware manufacturers may
            enhance parts of OpenGL, and may support some pixel format properties not supported by the generic implementation.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PIXELFORMATDESCRIPTOR.nSize">
            <summary>Specifies the size of this data structure. This value should be set to <c>sizeof</c>( <c>PIXELFORMATDESCRIPTOR</c>).</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PIXELFORMATDESCRIPTOR.nVersion">
            <summary>Specifies the version of this data structure. This value should be set to 1.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PIXELFORMATDESCRIPTOR.dwFlags">
            <summary>
            <para>
            A set of bit flags that specify properties of the pixel buffer. The properties are generally not mutually exclusive; you can
            set any combination of bit flags, with the exceptions noted. The following bit flag constants are defined.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>PFD_DRAW_TO_WINDOW</term>
            <term>The buffer can draw to a window or device surface.</term>
            </item>
            <item>
            <term>PFD_DRAW_TO_BITMAP</term>
            <term>The buffer can draw to a memory bitmap.</term>
            </item>
            <item>
            <term>PFD_SUPPORT_GDI</term>
            <term>The buffer supports GDI drawing. This flag and PFD_DOUBLEBUFFER are mutually exclusive in the current generic implementation.</term>
            </item>
            <item>
            <term>PFD_SUPPORT_OPENGL</term>
            <term>The buffer supports OpenGL drawing.</term>
            </item>
            <item>
            <term>PFD_GENERIC_ACCELERATED</term>
            <term>
            The pixel format is supported by a device driver that accelerates the generic implementation. If this flag is clear and the
            PFD_GENERIC_FORMAT flag is set, the pixel format is supported by the generic implementation only.
            </term>
            </item>
            <item>
            <term>PFD_GENERIC_FORMAT</term>
            <term>
            The pixel format is supported by the GDI software implementation, which is also known as the generic implementation. If this
            bit is clear, the pixel format is supported by a device driver or hardware.
            </term>
            </item>
            <item>
            <term>PFD_NEED_PALETTE</term>
            <term>
            The buffer uses RGBA pixels on a palette-managed device. A logical palette is required to achieve the best results for this
            pixel type. Colors in the palette should be specified according to the values of the cRedBits, cRedShift, cGreenBits,
            cGreenShift, cBluebits, and cBlueShift members. The palette should be created and realized in the device context before
            calling wglMakeCurrent.
            </term>
            </item>
            <item>
            <term>PFD_NEED_SYSTEM_PALETTE</term>
            <term>
            Defined in the pixel format descriptors of hardware that supports one hardware palette in 256-color mode only. For such
            systems to use hardware acceleration, the hardware palette must be in a fixed order (for example, 3-3-2) when in RGBA mode or
            must match the logical palette when in color-index mode.When this flag is set, you must call SetSystemPaletteUse in your
            program to force a one-to-one mapping of the logical palette and the system palette. If your OpenGL hardware supports
            multiple hardware palettes and the device driver can allocate spare hardware palettes for OpenGL, this flag is typically
            clear. This flag is not set in the generic pixel formats.
            </term>
            </item>
            <item>
            <term>PFD_DOUBLEBUFFER</term>
            <term>The buffer is double-buffered. This flag and PFD_SUPPORT_GDI are mutually exclusive in the current generic implementation.</term>
            </item>
            <item>
            <term>PFD_STEREO</term>
            <term>The buffer is stereoscopic. This flag is not supported in the current generic implementation.</term>
            </item>
            <item>
            <term>PFD_SWAP_LAYER_BUFFERS</term>
            <term>
            Indicates whether a device can swap individual layer planes with pixel formats that include double-buffered overlay or
            underlay planes. Otherwise all layer planes are swapped together as a group. When this flag is set, wglSwapLayerBuffers is supported.
            </term>
            </item>
            </list>
            <para>You can specify the following bit flags when calling ChoosePixelFormat.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>PFD_DEPTH_DONTCARE</term>
            <term>
            The requested pixel format can either have or not have a depth buffer. To select a pixel format without a depth buffer, you
            must specify this flag. The requested pixel format can be with or without a depth buffer. Otherwise, only pixel formats with
            a depth buffer are considered.
            </term>
            </item>
            <item>
            <term>PFD_DOUBLEBUFFER_DONTCARE</term>
            <term>The requested pixel format can be either single- or double-buffered.</term>
            </item>
            <item>
            <term>PFD_STEREO_DONTCARE</term>
            <term>The requested pixel format can be either monoscopic or stereoscopic.</term>
            </item>
            </list>
            <para>
            With the <c>glAddSwapHintRectWIN</c> extension function, two new flags are included for the <c>PIXELFORMATDESCRIPTOR</c>
            pixel format structure.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>PFD_SWAP_COPY</term>
            <term>
            Specifies the content of the back buffer in the double-buffered main color plane following a buffer swap. Swapping the color
            buffers causes the content of the back buffer to be copied to the front buffer. The content of the back buffer is not
            affected by the swap. PFD_SWAP_COPY is a hint only and might not be provided by a driver.
            </term>
            </item>
            <item>
            <term>PFD_SWAP_EXCHANGE</term>
            <term>
            Specifies the content of the back buffer in the double-buffered main color plane following a buffer swap. Swapping the color
            buffers causes the exchange of the back buffer's content with the front buffer's content. Following the swap, the back
            buffer's content contains the front buffer's content before the swap. PFD_SWAP_EXCHANGE is a hint only and might not be
            provided by a driver.
            </term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PIXELFORMATDESCRIPTOR.iPixelType">
            <summary>
            <para>Specifies the type of pixel data. The following types are defined.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>PFD_TYPE_RGBA</term>
            <term>RGBA pixels. Each pixel has four components in this order: red, green, blue, and alpha.</term>
            </item>
            <item>
            <term>PFD_TYPE_COLORINDEX</term>
            <term>Color-index pixels. Each pixel uses a color-index value.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PIXELFORMATDESCRIPTOR.cColorBits">
            <summary>
            Specifies the number of color bitplanes in each color buffer. For RGBA pixel types, it is the size of the color buffer,
            excluding the alpha bitplanes. For color-index pixels, it is the size of the color-index buffer.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PIXELFORMATDESCRIPTOR.cRedBits">
            <summary>Specifies the number of red bitplanes in each RGBA color buffer.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PIXELFORMATDESCRIPTOR.cRedShift">
            <summary>Specifies the shift count for red bitplanes in each RGBA color buffer.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PIXELFORMATDESCRIPTOR.cGreenBits">
            <summary>Specifies the number of green bitplanes in each RGBA color buffer.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PIXELFORMATDESCRIPTOR.cGreenShift">
            <summary>Specifies the shift count for green bitplanes in each RGBA color buffer.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PIXELFORMATDESCRIPTOR.cBlueBits">
            <summary>Specifies the number of blue bitplanes in each RGBA color buffer.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PIXELFORMATDESCRIPTOR.cBlueShift">
            <summary>Specifies the shift count for blue bitplanes in each RGBA color buffer.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PIXELFORMATDESCRIPTOR.cAlphaBits">
            <summary>Specifies the number of alpha bitplanes in each RGBA color buffer. Alpha bitplanes are not supported.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PIXELFORMATDESCRIPTOR.cAlphaShift">
            <summary>Specifies the shift count for alpha bitplanes in each RGBA color buffer. Alpha bitplanes are not supported.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PIXELFORMATDESCRIPTOR.cAccumBits">
            <summary>Specifies the total number of bitplanes in the accumulation buffer.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PIXELFORMATDESCRIPTOR.cAccumRedBits">
            <summary>Specifies the number of red bitplanes in the accumulation buffer.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PIXELFORMATDESCRIPTOR.cAccumGreenBits">
            <summary>Specifies the number of green bitplanes in the accumulation buffer.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PIXELFORMATDESCRIPTOR.cAccumBlueBits">
            <summary>Specifies the number of blue bitplanes in the accumulation buffer.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PIXELFORMATDESCRIPTOR.cAccumAlphaBits">
            <summary>Specifies the number of alpha bitplanes in the accumulation buffer.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PIXELFORMATDESCRIPTOR.cDepthBits">
            <summary>Specifies the depth of the depth (z-axis) buffer.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PIXELFORMATDESCRIPTOR.cStencilBits">
            <summary>Specifies the depth of the stencil buffer.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PIXELFORMATDESCRIPTOR.cAuxBuffers">
            <summary>Specifies the number of auxiliary buffers. Auxiliary buffers are not supported.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PIXELFORMATDESCRIPTOR.iLayerType">
            <summary>Ignored. Earlier implementations of OpenGL used this member, but it is no longer used.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PIXELFORMATDESCRIPTOR.bReserved">
            <summary>
            Specifies the number of overlay and underlay planes. Bits 0 through 3 specify up to 15 overlay planes and bits 4 through 7
            specify up to 15 underlay planes.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PIXELFORMATDESCRIPTOR.dwLayerMask">
            <summary>Ignored. Earlier implementations of OpenGL used this member, but it is no longer used.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PIXELFORMATDESCRIPTOR.dwVisibleMask">
            <summary>
            Specifies the transparent color or index of an underlay plane. When the pixel type is RGBA, <c>dwVisibleMask</c> is a
            transparent RGB color value. When the pixel type is color index, it is a transparent index value.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PIXELFORMATDESCRIPTOR.dwDamageMask">
            <summary>Ignored. Earlier implementations of OpenGL used this member, but it is no longer used.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.VertexType">
            <summary>Vertex types.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.VertexType.PT_CLOSEFIGURE">
            <summary>
            Specifies that the figure is automatically closed after the corresponding line or curve is drawn. The figure is closed by
            drawing a line from the line or curve endpoint to the point corresponding to the last PT_MOVETO.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.VertexType.PT_LINETO">
            <summary>Specifies that the previous point and the corresponding point in lpPoints are the endpoints of a line.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.VertexType.PT_BEZIERTO">
            <summary>
            Specifies that the corresponding point in lpPoints is a control point or ending point for a Bézier curve. PT_BEZIERTO values
            always occur in sets of three. The point in the path immediately preceding them defines the starting point for the Bézier
            curve. The first two PT_BEZIERTO points are the control points, and the third PT_BEZIERTO point is the ending (if hard-coded) point.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.VertexType.PT_MOVETO">
            <summary>Specifies that the corresponding point in the lpPoints parameter starts a disjoint figure.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.AbortPath(Vanara.PInvoke.HDC)">
            <summary>The <c>AbortPath</c> function closes and discards any paths in the specified device context.</summary>
            <param name="hdc">Handle to the device context from which a path will be discarded.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            If there is an open path bracket in the given device context, the path bracket is closed and the path is discarded. If there is a
            closed path in the device context, the path is discarded.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.BeginPath(Vanara.PInvoke.HDC)">
            <summary>The <c>BeginPath</c> function opens a path bracket in the specified device context.</summary>
            <param name="hdc">A handle to the device context.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>
            After a path bracket is open, an application can begin calling GDI drawing functions to define the points that lie in the path.
            An application can close an open path bracket by calling the EndPath function.
            </para>
            <para>
            When an application calls <c>BeginPath</c> for a device context, any previous paths are discarded from that device context. The
            following list shows which drawing functions can be used.
            </para>
            <list type="bullet">
            <item>
            <term>AngleArc</term>
            </item>
            <item>
            <term>Arc</term>
            </item>
            <item>
            <term>ArcTo</term>
            </item>
            <item>
            <term>Chord</term>
            </item>
            <item>
            <term>CloseFigure</term>
            </item>
            <item>
            <term>Ellipse</term>
            </item>
            <item>
            <term>ExtTextOut</term>
            </item>
            <item>
            <term>LineTo</term>
            </item>
            <item>
            <term>MoveToEx</term>
            </item>
            <item>
            <term>Pie</term>
            </item>
            <item>
            <term>PolyBezier</term>
            </item>
            <item>
            <term>PolyBezierTo</term>
            </item>
            <item>
            <term>PolyDraw</term>
            </item>
            <item>
            <term>Polygon</term>
            </item>
            <item>
            <term>Polyline</term>
            </item>
            <item>
            <term>PolylineTo</term>
            </item>
            <item>
            <term>PolyPolygon</term>
            </item>
            <item>
            <term>PolyPolyline</term>
            </item>
            <item>
            <term>Rectangle</term>
            </item>
            <item>
            <term>RoundRect</term>
            </item>
            <item>
            <term>TextOut</term>
            </item>
            </list>
            <para>Examples</para>
            <para>For an example, see Using Paths.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.CloseFigure(Vanara.PInvoke.HDC)">
            <summary>The <c>CloseFigure</c> function closes an open figure in a path.</summary>
            <param name="hdc">Handle to the device context in which the figure will be closed.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>
            The <c>CloseFigure</c> function closes the figure by drawing a line from the current position to the first point of the figure
            (usually, the point specified by the most recent call to the MoveToEx function) and then connects the lines by using the line
            join style. If a figure is closed by using the LineTo function instead of <c>CloseFigure</c>, end caps are used to create the
            corner instead of a join.
            </para>
            <para>The <c>CloseFigure</c> function should only be called if there is an open path bracket in the specified device context.</para>
            <para>
            A figure in a path is open unless it is explicitly closed by using this function. (A figure can be open even if the current point
            and the starting point of the figure are the same.)
            </para>
            <para>After a call to <c>CloseFigure</c>, adding a line or curve to the path starts a new figure.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.EndPath(Vanara.PInvoke.HDC)">
            <summary>
            The <c>EndPath</c> function closes a path bracket and selects the path defined by the bracket into the specified device context.
            </summary>
            <param name="hdc">A handle to the device context into which the new path is selected.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.FillPath(Vanara.PInvoke.HDC)">
            <summary>
            The <c>FillPath</c> function closes any open figures in the current path and fills the path's interior by using the current brush
            and polygon-filling mode.
            </summary>
            <param name="hdc">A handle to a device context that contains a valid path.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>After its interior is filled, the path is discarded from the DC identified by the hdc parameter.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.FlattenPath(Vanara.PInvoke.HDC)">
            <summary>
            The <c>FlattenPath</c> function transforms any curves in the path that is selected into the current device context (DC), turning
            each curve into a sequence of lines.
            </summary>
            <param name="hdc">A handle to a DC that contains a valid path.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetMiterLimit(Vanara.PInvoke.HDC,System.Single@)">
            <summary>The <c>GetMiterLimit</c> function retrieves the miter limit for the specified device context.</summary>
            <param name="hdc">Handle to the device context.</param>
            <param name="plimit">Pointer to a floating-point value that receives the current miter limit.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>The miter limit is used when drawing geometric lines that have miter joins.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetPath(Vanara.PInvoke.HDC,Vanara.PInvoke.POINT[],Vanara.PInvoke.Gdi32.VertexType[],System.Int32)">
            <summary>
            The <c>GetPath</c> function retrieves the coordinates defining the endpoints of lines and the control points of curves found in
            the path that is selected into the specified device context.
            </summary>
            <param name="hdc">A handle to a device context that contains a closed path.</param>
            <param name="apt">
            A pointer to an array of POINT structures that receives the line endpoints and curve control points, in logical coordinates.
            </param>
            <param name="aj">
            <para>A pointer to an array of bytes that receives the vertex types. This parameter can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Type</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>PT_MOVETO</term>
            <term>Specifies that the corresponding point in the lpPoints parameter starts a disjoint figure.</term>
            </item>
            <item>
            <term>PT_LINETO</term>
            <term>Specifies that the previous point and the corresponding point in lpPoints are the endpoints of a line.</term>
            </item>
            <item>
            <term>PT_BEZIERTO</term>
            <term>
            Specifies that the corresponding point in lpPoints is a control point or ending point for a Bézier curve. PT_BEZIERTO values
            always occur in sets of three. The point in the path immediately preceding them defines the starting point for the Bézier curve.
            The first two PT_BEZIERTO points are the control points, and the third PT_BEZIERTO point is the ending (if hard-coded) point.
            </term>
            </item>
            </list>
            <para>
            A PT_LINETO or PT_BEZIERTO value may be combined with the following value (by using the bitwise operator OR) to indicate that the
            corresponding point is the last point in a figure and the figure should be closed.
            </para>
            <list type="table">
            <listheader>
            <term>Flag</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>PT_CLOSEFIGURE</term>
            <term>
            Specifies that the figure is automatically closed after the corresponding line or curve is drawn. The figure is closed by drawing
            a line from the line or curve endpoint to the point corresponding to the last PT_MOVETO.
            </term>
            </item>
            </list>
            </param>
            <param name="cpt">
            The total number of POINT structures that can be stored in the array pointed to by lpPoints. This value must be the same as the
            number of bytes that can be placed in the array pointed to by lpTypes.
            </param>
            <returns>
            If the nSize parameter is nonzero, the return value is the number of points enumerated. If nSize is 0, the return value is the
            total number of points in the path (and <c>GetPath</c> writes nothing to the buffers). If nSize is nonzero and is less than the
            number of points in the path, the return value is 1.
            </returns>
            <remarks>
            <para>The device context identified by the hdc parameter must contain a closed path.</para>
            <para>
            The points of the path are returned in logical coordinates. Points are stored in the path in device coordinates, so
            <c>GetPath</c> changes the points from device coordinates to logical coordinates by using the inverse of the current transformation.
            </para>
            <para>The FlattenPath function may be called before <c>GetPath</c> to convert all curves in the path into line segments.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.PathToRegion(Vanara.PInvoke.HDC)">
            <summary>
            The <c>PathToRegion</c> function creates a region from the path that is selected into the specified device context. The resulting
            region uses device coordinates.
            </summary>
            <param name="hdc">Handle to a device context that contains a closed path.</param>
            <returns>
            <para>If the function succeeds, the return value identifies a valid region.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>When you no longer need the <c>HRGN</c> object call the DeleteObject function to delete it.</para>
            <para>The device context identified by the hdc parameter must contain a closed path.</para>
            <para>
            After <c>PathToRegion</c> converts a path into a region, the system discards the closed path from the specified device context.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SetMiterLimit(Vanara.PInvoke.HDC,System.Single,System.Single@)">
            <summary>The <c>SetMiterLimit</c> function sets the limit for the length of miter joins for the specified device context.</summary>
            <param name="hdc">Handle to the device context.</param>
            <param name="limit">Specifies the new miter limit for the device context.</param>
            <param name="old">
            Pointer to a floating-point value that receives the previous miter limit. If this parameter is <c>NULL</c>, the previous miter
            limit is not returned.
            </param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>
            The miter length is defined as the distance from the intersection of the line walls on the inside of the join to the intersection
            of the line walls on the outside of the join. The miter limit is the maximum allowed ratio of the miter length to the line width.
            </para>
            <para>The default miter limit is 10.0.</para>
            <para><c>Note</c> Setting eNewLimit to a float value less than 1.0f will cause the function to fail.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.StrokeAndFillPath(Vanara.PInvoke.HDC)">
            <summary>
            The <c>StrokeAndFillPath</c> function closes any open figures in a path, strokes the outline of the path by using the current
            pen, and fills its interior by using the current brush.
            </summary>
            <param name="hdc">A handle to the device context.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>The device context identified by the hdc parameter must contain a closed path.</para>
            <para>
            The <c>StrokeAndFillPath</c> function has the same effect as closing all the open figures in the path, and stroking and filling
            the path separately, except that the filled region will not overlap the stroked region even if the pen is wide.
            </para>
            <para>Examples</para>
            <para>For an example, see Drawing a Pie Chart.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.StrokePath(Vanara.PInvoke.HDC)">
            <summary>The <c>StrokePath</c> function renders the specified path by using the current pen.</summary>
            <param name="hdc">Handle to a device context that contains the completed path.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            The path, if it is to be drawn by <c>StrokePath</c>, must have been completed through a call to EndPath. Calling this function on
            a path for which <c>EndPath</c> has not been called will cause this function to fail and return zero. Unlike other path drawing
            functions such as StrokeAndFillPath, <c>StrokePath</c> will not attempt to close the path by drawing a straight line from the
            first point on the path to the last point on the path.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.WidenPath(Vanara.PInvoke.HDC)">
            <summary>
            The <c>WidenPath</c> function redefines the current path as the area that would be painted if the path were stroked using the pen
            currently selected into the given device context.
            </summary>
            <param name="hdc">A handle to a device context that contains a closed path.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>
            The <c>WidenPath</c> function is successful only if the current pen is a geometric pen created by the ExtCreatePen function, or
            if the pen is created with the CreatePen function and has a width, in device units, of more than one.
            </para>
            <para>The device context identified by the hdc parameter must contain a closed path.</para>
            <para>
            Any Bézier curves in the path are converted to sequences of straight lines approximating the widened curves. As such, no Bézier
            curves remain in the path after <c>WidenPath</c> is called.
            </para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.PenEndCap">
            <summary>End caps used by Pen functions and structures.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PenEndCap.PS_ENDCAP_ROUND">
            <summary>End caps are round.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PenEndCap.PS_ENDCAP_SQUARE">
            <summary>End caps are square.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PenEndCap.PS_ENDCAP_FLAT">
            <summary>End caps are flat.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.PenJoin">
            <summary>Joins used by Pen functions and structures.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PenJoin.PS_JOIN_ROUND">
            <summary>Joins are round.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PenJoin.PS_JOIN_BEVEL">
            <summary>Joins are beveled.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PenJoin.PS_JOIN_MITER">
            <summary>
            Joins are mitered when they are within the current limit set by the SetMiterLimit function. If it exceeds this limit, the
            join is beveled.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.PenStyle">
            <summary>Styles used by Pen functions and structures.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PenStyle.PS_SOLID">
            <summary>The pen is solid.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PenStyle.PS_DASH">
            <summary>The pen is dashed.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PenStyle.PS_DOT">
            <summary>The pen is dotted.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PenStyle.PS_DASHDOT">
            <summary>The pen has alternating dashes and dots.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PenStyle.PS_DASHDOTDOT">
            <summary>The pen has alternating dashes and double dots.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PenStyle.PS_NULL">
            <summary>The pen is invisible.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PenStyle.PS_INSIDEFRAME">
            <summary>
            The pen is solid. When this pen is used in any GDI drawing function that takes a bounding rectangle, the dimensions of the
            figure are shrunk so that it fits entirely in the bounding rectangle, taking into account the width of the pen. This applies
            only to geometric pens.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PenStyle.PS_USERSTYLE">
            <summary>The pen uses a styling array supplied by the user.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PenStyle.PS_ALTERNATE">
            <summary>The pen sets every other pixel. (This style is applicable only for cosmetic pens.)</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.PenType">
            <summary>Joins used by Pen functions and structures.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PenType.PS_COSMETIC">
            <summary>The pen is cosmetic.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PenType.PS_GEOMETRIC">
            <summary>The pen is geometric.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.CreatePen(System.UInt32,System.Int32,Vanara.PInvoke.COLORREF)">
            <summary>
            <para>
            The <c>CreatePen</c> function creates a logical pen that has the specified style, width, and color. The pen can subsequently be
            selected into a device context and used to draw lines and curves.
            </para>
            </summary>
            <param name="iStyle">
            <para>The pen style. It can be any one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>PS_SOLID</term>
            <term>The pen is solid.</term>
            </item>
            <item>
            <term>PS_DASH</term>
            <term>The pen is dashed. This style is valid only when the pen width is one or less in device units.</term>
            </item>
            <item>
            <term>PS_DOT</term>
            <term>The pen is dotted. This style is valid only when the pen width is one or less in device units.</term>
            </item>
            <item>
            <term>PS_DASHDOT</term>
            <term>The pen has alternating dashes and dots. This style is valid only when the pen width is one or less in device units.</term>
            </item>
            <item>
            <term>PS_DASHDOTDOT</term>
            <term>The pen has alternating dashes and double dots. This style is valid only when the pen width is one or less in device units.</term>
            </item>
            <item>
            <term>PS_NULL</term>
            <term>The pen is invisible.</term>
            </item>
            <item>
            <term>PS_INSIDEFRAME</term>
            <term>
            The pen is solid. When this pen is used in any GDI drawing function that takes a bounding rectangle, the dimensions of the figure
            are shrunk so that it fits entirely in the bounding rectangle, taking into account the width of the pen. This applies only to
            geometric pens.
            </term>
            </item>
            </list>
            </param>
            <param name="cWidth">
            <para>The width of the pen, in logical units. If nWidth is zero, the pen is a single pixel wide, regardless of the current transformation.</para>
            <para>
            <c>CreatePen</c> returns a pen with the specified width bit with the PS_SOLID style if you specify a width greater than one for
            the following styles: PS_DASH, PS_DOT, PS_DASHDOT, PS_DASHDOTDOT.
            </para>
            </param>
            <param name="color">
            <para>A color reference for the pen color. To generate a COLORREF structure, use the RGB macro.</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is a handle that identifies a logical pen.</para>
            <para>If the function fails, the return value is <c>NULL</c>.</para>
            </returns>
            <remarks>
            <para>
            After an application creates a logical pen, it can select that pen into a device context by calling the SelectObject function.
            After a pen is selected into a device context, it can be used to draw lines and curves.
            </para>
            <para>
            If the value specified by the nWidth parameter is zero, a line drawn with the created pen always is a single pixel wide
            regardless of the current transformation.
            </para>
            <para>If the value specified by nWidth is greater than 1, the fnPenStyle parameter must be PS_NULL, PS_SOLID, or PS_INSIDEFRAME.</para>
            <para>
            If the value specified by nWidth is greater than 1 and fnPenStyle is PS_INSIDEFRAME, the line associated with the pen is drawn
            inside the frame of all primitives except polygons and polylines.
            </para>
            <para>
            If the value specified by nWidth is greater than 1, fnPenStyle is PS_INSIDEFRAME, and the color specified by the crColor
            parameter does not match one of the entries in the logical palette, the system draws lines by using a dithered color. Dithered
            colors are not available with solid pens.
            </para>
            <para>When you no longer need the pen, call the DeleteObject function to delete it.</para>
            <para>
            <c>ICM:</c> No color management is done at creation. However, color management is performed when the pen is selected into an
            ICM-enabled device context.
            </para>
            <para>Examples</para>
            <para>For an example, see Creating Colored Pens and Brushes.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.CreatePenIndirect(Vanara.PInvoke.Gdi32.LOGPEN@)">
            <summary>
            <para>
            The <c>CreatePenIndirect</c> function creates a logical cosmetic pen that has the style, width, and color specified in a structure.
            </para>
            </summary>
            <param name="plpen">
            <para>Pointer to a LOGPEN structure that specifies the pen's style, width, and color.</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is a handle that identifies a logical cosmetic pen.</para>
            <para>If the function fails, the return value is <c>NULL</c>.</para>
            </returns>
            <remarks>
            <para>
            After an application creates a logical pen, it can select that pen into a device context by calling the SelectObject function.
            After a pen is selected into a device context, it can be used to draw lines and curves.
            </para>
            <para>When you no longer need the pen, call the DeleteObject function to delete it.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.ExtCreatePen(System.UInt32,System.UInt32,Vanara.PInvoke.Gdi32.LOGBRUSH@,System.UInt32,System.UInt32[])">
            <summary>
            <para>
            The <c>ExtCreatePen</c> function creates a logical cosmetic or geometric pen that has the specified style, width, and brush attributes.
            </para>
            </summary>
            <param name="iPenStyle">
            <para>
            A combination of type, style, end cap, and join attributes. The values from each category are combined by using the bitwise OR
            operator ( | ).
            </para>
            <para>The pen type can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>PS_GEOMETRIC</term>
            <term>The pen is geometric.</term>
            </item>
            <item>
            <term>PS_COSMETIC</term>
            <term>The pen is cosmetic.</term>
            </item>
            </list>
            <para>The pen style can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>PS_ALTERNATE</term>
            <term>The pen sets every other pixel. (This style is applicable only for cosmetic pens.)</term>
            </item>
            <item>
            <term>PS_SOLID</term>
            <term>The pen is solid.</term>
            </item>
            <item>
            <term>PS_DASH</term>
            <term>The pen is dashed.</term>
            </item>
            <item>
            <term>PS_DOT</term>
            <term>The pen is dotted.</term>
            </item>
            <item>
            <term>PS_DASHDOT</term>
            <term>The pen has alternating dashes and dots.</term>
            </item>
            <item>
            <term>PS_DASHDOTDOT</term>
            <term>The pen has alternating dashes and double dots.</term>
            </item>
            <item>
            <term>PS_NULL</term>
            <term>The pen is invisible.</term>
            </item>
            <item>
            <term>PS_USERSTYLE</term>
            <term>The pen uses a styling array supplied by the user.</term>
            </item>
            <item>
            <term>PS_INSIDEFRAME</term>
            <term>
            The pen is solid. When this pen is used in any GDI drawing function that takes a bounding rectangle, the dimensions of the figure
            are shrunk so that it fits entirely in the bounding rectangle, taking into account the width of the pen. This applies only to
            geometric pens.
            </term>
            </item>
            </list>
            <para>The end cap is only specified for geometric pens. The end cap can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>PS_ENDCAP_ROUND</term>
            <term>End caps are round.</term>
            </item>
            <item>
            <term>PS_ENDCAP_SQUARE</term>
            <term>End caps are square.</term>
            </item>
            <item>
            <term>PS_ENDCAP_FLAT</term>
            <term>End caps are flat.</term>
            </item>
            </list>
            <para>The join is only specified for geometric pens. The join can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>PS_JOIN_BEVEL</term>
            <term>Joins are beveled.</term>
            </item>
            <item>
            <term>PS_JOIN_MITER</term>
            <term>
            Joins are mitered when they are within the current limit set by the SetMiterLimit function. If it exceeds this limit, the join is beveled.
            </term>
            </item>
            <item>
            <term>PS_JOIN_ROUND</term>
            <term>Joins are round.</term>
            </item>
            </list>
            </param>
            <param name="cWidth">
            <para>
            The width of the pen. If the dwPenStyle parameter is PS_GEOMETRIC, the width is given in logical units. If dwPenStyle is
            PS_COSMETIC, the width must be set to 1.
            </para>
            </param>
            <param name="plbrush">
            <para>
            A pointer to a LOGBRUSH structure. If dwPenStyle is PS_COSMETIC, the <c>lbColor</c> member specifies the color of the pen and the
            <c>lpStyle</c> member must be set to BS_SOLID. If dwPenStyle is PS_GEOMETRIC, all members must be used to specify the brush
            attributes of the pen.
            </para>
            </param>
            <param name="cStyle">
            <para>The length, in <c>DWORD</c> units, of the lpStyle array. This value must be zero if dwPenStyle is not PS_USERSTYLE.</para>
            <para>The style count is limited to 16.</para>
            </param>
            <param name="pstyle">
            <para>
            A pointer to an array. The first value specifies the length of the first dash in a user-defined style, the second value specifies
            the length of the first space, and so on. This pointer must be <c>NULL</c> if dwPenStyle is not PS_USERSTYLE.
            </para>
            <para>
            If the lpStyle array is exceeded during line drawing, the pointer is reset to the beginning of the array. When this happens and
            dwStyleCount is an even number, the pattern of dashes and spaces repeats. However, if dwStyleCount is odd, the pattern reverses
            when the pointer is reset -- the first element of lpStyle now refers to spaces, the second refers to dashes, and so forth.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is a handle that identifies a logical pen.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>
            A geometric pen can have any width and can have any of the attributes of a brush, such as dithers and patterns. A cosmetic pen
            can only be a single pixel wide and must be a solid color, but cosmetic pens are generally faster than geometric pens.
            </para>
            <para>The width of a geometric pen is always specified in world units. The width of a cosmetic pen is always 1.</para>
            <para>End caps and joins are only specified for geometric pens.</para>
            <para>
            After an application creates a logical pen, it can select that pen into a device context by calling the SelectObject function.
            After a pen is selected into a device context, it can be used to draw lines and curves.
            </para>
            <para>
            If dwPenStyle is PS_COSMETIC and PS_USERSTYLE, the entries in the lpStyle array specify lengths of dashes and spaces in style
            units. A style unit is defined by the device where the pen is used to draw a line.
            </para>
            <para>
            If dwPenStyle is PS_GEOMETRIC and PS_USERSTYLE, the entries in the lpStyle array specify lengths of dashes and spaces in logical units.
            </para>
            <para>If dwPenStyle is PS_ALTERNATE, the style unit is ignored and every other pixel is set.</para>
            <para>
            If the <c>lbStyle</c> member of the LOGBRUSH structure pointed to by lplb is BS_PATTERN, the bitmap pointed to by the
            <c>lbHatch</c> member of that structure cannot be a DIB section. A DIB section is a bitmap created by CreateDIBSection. If that
            bitmap is a DIB section, the <c>ExtCreatePen</c> function fails.
            </para>
            <para>When an application no longer requires a specified pen, it should call the DeleteObject function to delete the pen.</para>
            <para>
            <c>ICM:</c> No color management is done at pen creation. However, color management is performed when the pen is selected into an
            ICM-enabled device context.
            </para>
            <para>Examples</para>
            <para>For an example, see Using Pens.</para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.EXTLOGPEN">
            <summary>
            <para>
            The <c>EXTLOGPEN</c> structure defines the pen style, width, and brush attributes for an extended pen. This structure is used by
            the GetObject function when it retrieves a description of a pen that was created when an application called the ExtCreatePen function.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.EXTLOGPEN.elpPenStyle">
            <summary>
            <para>
            A combination of pen type, style, end cap style, and join style. The values from each category can be retrieved by using a
            bitwise AND operator with the appropriate mask.
            </para>
            <para>The <c>elpPenStyle</c> member masked with PS_TYPE_MASK has one of the following pen type values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>PS_GEOMETRIC</term>
            <term>The pen is geometric.</term>
            </item>
            <item>
            <term>PS_COSMETIC</term>
            <term>The pen is cosmetic.</term>
            </item>
            </list>
            <para>The <c>elpPenStyle</c> member masked with PS_STYLE_MASK has one of the following pen styles values:</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>PS_DASH</term>
            <term>The pen is dashed.</term>
            </item>
            <item>
            <term>PS_DASHDOT</term>
            <term>The pen has alternating dashes and dots.</term>
            </item>
            <item>
            <term>PS_DASHDOTDOT</term>
            <term>The pen has alternating dashes and double dots.</term>
            </item>
            <item>
            <term>PS_DOT</term>
            <term>The pen is dotted.</term>
            </item>
            <item>
            <term>PS_INSIDEFRAME</term>
            <term>
            The pen is solid. When this pen is used in any GDI drawing function that takes a bounding rectangle, the dimensions of the
            figure are shrunk so that it fits entirely in the bounding rectangle, taking into account the width of the pen. This applies
            only to PS_GEOMETRIC pens.
            </term>
            </item>
            <item>
            <term>PS_NULL</term>
            <term>The pen is invisible.</term>
            </item>
            <item>
            <term>PS_SOLID</term>
            <term>The pen is solid.</term>
            </item>
            <item>
            <term>PS_USERSTYLE</term>
            <term>The pen uses a styling array supplied by the user.</term>
            </item>
            </list>
            <para>
            The following category applies only to PS_GEOMETRIC pens. The <c>elpPenStyle</c> member masked with PS_ENDCAP_MASK has one of
            the following end cap values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>PS_ENDCAP_FLAT</term>
            <term>Line end caps are flat.</term>
            </item>
            <item>
            <term>PS_ENDCAP_ROUND</term>
            <term>Line end caps are round.</term>
            </item>
            <item>
            <term>PS_ENDCAP_SQUARE</term>
            <term>Line end caps are square.</term>
            </item>
            </list>
            <para>
            The following category applies only to PS_GEOMETRIC pens. The <c>elpPenStyle</c> member masked with PS_JOIN_MASK has one of
            the following join values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>PS_JOIN_BEVEL</term>
            <term>Line joins are beveled.</term>
            </item>
            <item>
            <term>PS_JOIN_MITER</term>
            <term>
            Line joins are mitered when they are within the current limit set by the SetMiterLimit function. A join is beveled when it
            would exceed the limit.
            </term>
            </item>
            <item>
            <term>PS_JOIN_ROUND</term>
            <term>Line joins are round.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.EXTLOGPEN.elpWidth">
            <summary>
            <para>
            The width of the pen. If the <c>elpPenStyle</c> member is PS_GEOMETRIC, this value is the width of the line in logical units.
            Otherwise, the lines are cosmetic and this value is 1, which indicates a line with a width of one pixel.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.EXTLOGPEN.elpBrushStyle">
            <summary>
            <para>The brush style of the pen. The <c>elpBrushStyle</c> member value can be one of the following.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>BS_DIBPATTERN</term>
            <term>
            Specifies a pattern brush defined by a DIB specification. If elpBrushStyle is BS_DIBPATTERN, the elpHatch member contains a
            handle to a packed DIB. For more information, see discussion in elpHatch
            </term>
            </item>
            <item>
            <term>BS_DIBPATTERNPT</term>
            <term>
            Specifies a pattern brush defined by a DIB specification. If elpBrushStyle is BS_DIBPATTERNPT, the elpHatch member contains a
            pointer to a packed DIB. For more information, see discussion in elpHatch.
            </term>
            </item>
            <item>
            <term>BS_HATCHED</term>
            <term>Specifies a hatched brush.</term>
            </item>
            <item>
            <term>BS_HOLLOW</term>
            <term>Specifies a hollow or NULL brush.</term>
            </item>
            <item>
            <term>BS_PATTERN</term>
            <term>Specifies a pattern brush defined by a memory bitmap.</term>
            </item>
            <item>
            <term>BS_SOLID</term>
            <term>Specifies a solid brush.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.EXTLOGPEN.elpColor">
            <summary>
            <para>
            If <c>elpBrushStyle</c> is BS_SOLID or BS_HATCHED, <c>elpColor</c> specifies the color in which the pen is to be drawn. For
            BS_HATCHED, the SetBkMode and SetBkColor functions determine the background color.
            </para>
            <para>If <c>elpBrushStyle</c> is BS_HOLLOW or BS_PATTERN, <c>elpColor</c> is ignored.</para>
            <para>
            If <c>elpBrushStyle</c> is BS_DIBPATTERN or BS_DIBPATTERNPT, the low-order word of <c>elpColor</c> specifies whether the
            <c>bmiColors</c> member of the BITMAPINFO structure contain explicit RGB values or indices into the currently realized
            logical palette. The <c>elpColor</c> value must be one of the following.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>DIB_PAL_COLORS</term>
            <term>The color table consists of an array of 16-bit indices into the currently realized logical palette.</term>
            </item>
            <item>
            <term>DIB_RGB_COLORS</term>
            <term>The color table contains literal RGB values.</term>
            </item>
            </list>
            <para>The RGB macro is used to generate a COLORREF structure.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.EXTLOGPEN.elpHatch">
            <summary>
            <para>If <c>elpBrushStyle</c> is BS_PATTERN, <c>elpHatch</c> is a handle to the bitmap that defines the pattern.</para>
            <para>If <c>elpBrushStyle</c> is BS_SOLID or BS_HOLLOW, <c>elpHatch</c> is ignored.</para>
            <para>
            If <c>elpBrushStyle</c> is BS_DIBPATTERN, the <c>elpHatch</c> member is a handle to a packed DIB. To obtain this handle, an
            application calls the GlobalAlloc function with GMEM_MOVEABLE (or LocalAlloc with LMEM_MOVEABLE) to allocate a block of
            memory and then fills the memory with the packed DIB. A packed DIB consists of a BITMAPINFO structure immediately followed by
            the array of bytes that define the pixels of the bitmap.
            </para>
            <para>
            If <c>elpBrushStyle</c> is BS_DIBPATTERNPT, the <c>elpHatch</c> member is a pointer to a packed DIB. The pointer derives from
            the memory block created by LocalAlloc with LMEM_FIXED set or by GlobalAlloc with GMEM_FIXED set, or it is the pointer
            returned by a call like LocalLock (handle_to_the_dib). A packed DIB consists of a BITMAPINFO structure immediately followed
            by the array of bytes that define the pixels of the bitmap.
            </para>
            <para>
            If <c>elpBrushStyle</c> is BS_HATCHED, the <c>elpHatch</c> member specifies the orientation of the lines used to create the
            hatch. It can be one of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>HS_BDIAGONAL</term>
            <term>45-degree upward hatch (left to right)</term>
            </item>
            <item>
            <term>HS_CROSS</term>
            <term>Horizontal and vertical crosshatch</term>
            </item>
            <item>
            <term>HS_DIAGCROSS</term>
            <term>45-degree crosshatch</term>
            </item>
            <item>
            <term>HS_FDIAGONAL</term>
            <term>45-degree downward hatch (left to right)</term>
            </item>
            <item>
            <term>HS_HORIZONTAL</term>
            <term>Horizontal hatch</term>
            </item>
            <item>
            <term>HS_VERTICAL</term>
            <term>Vertical hatch</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.EXTLOGPEN.elpNumEntries">
            <summary>
            <para>
            The number of entries in the style array in the <c>elpStyleEntry</c> member. This value is zero if <c>elpPenStyle</c> does
            not specify PS_USERSTYLE.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.EXTLOGPEN.elpStyleEntry">
            <summary>
            <para>
            A user-supplied style array. The array is specified with a finite length, but it is used as if it repeated indefinitely. The
            first entry in the array specifies the length of the first dash. The second entry specifies the length of the first gap.
            Thereafter, lengths of dashes and gaps alternate.
            </para>
            <para>
            If <c>elpWidth</c> specifies geometric lines, the lengths are in logical units. Otherwise, the lines are cosmetic and lengths
            are in device units.
            </para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Gdi32.EXTLOGPEN.Style">
            <summary>Gets or sets the style of the pen.</summary>
        </member>
        <member name="P:Vanara.PInvoke.Gdi32.EXTLOGPEN.EndCap">
            <summary>Gets or sets the end cap style of the pen.</summary>
        </member>
        <member name="P:Vanara.PInvoke.Gdi32.EXTLOGPEN.Join">
            <summary>Gets or sets the join style for the pen.</summary>
        </member>
        <member name="P:Vanara.PInvoke.Gdi32.EXTLOGPEN.Type">
            <summary>Gets or sets the pen type.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.LOGPEN">
            <summary>
            <para>
            The <c>LOGPEN</c> structure defines the style, width, and color of a pen. The CreatePenIndirect function uses the <c>LOGPEN</c> structure.
            </para>
            </summary>
            <remarks>
            <para>
            If the width of the pen is greater than 1 and the pen style is PS_INSIDEFRAME, the line is drawn inside the frame of all GDI
            objects except polygons and polylines. If the pen color does not match an available RGB value, the pen is drawn with a logical
            (dithered) color. If the pen width is less than or equal to 1, the PS_INSIDEFRAME style is identical to the PS_SOLID style.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.LOGPEN.lopnStyle">
            <summary>
            <para>The pen style, which can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>PS_SOLID</term>
            <term>The pen is solid.</term>
            </item>
            <item>
            <term>PS_DASH</term>
            <term>The pen is dashed.</term>
            </item>
            <item>
            <term>PS_DOT</term>
            <term>The pen is dotted.</term>
            </item>
            <item>
            <term>PS_DASHDOT</term>
            <term>The pen has alternating dashes and dots.</term>
            </item>
            <item>
            <term>PS_DASHDOTDOT</term>
            <term>The pen has dashes and double dots.</term>
            </item>
            <item>
            <term>PS_NULL</term>
            <term>The pen is invisible.</term>
            </item>
            <item>
            <term>PS_INSIDEFRAME</term>
            <term>
            The pen is solid. When this pen is used in any GDI drawing function that takes a bounding rectangle, the dimensions of the
            figure are shrunk so that it fits entirely in the bounding rectangle, taking into account the width of the pen. This applies
            only to geometric pens.
            </term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.LOGPEN.lopnWidth">
            <summary>
            <para>
            The POINT structure that contains the pen width, in logical units. If the <c>pointer</c> member is <c>NULL</c>, the pen is
            one pixel wide on raster devices. The <c>y</c> member in the <c>POINT</c> structure for <c>lopnWidth</c> is not used.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.LOGPEN.lopnColor">
            <summary>
            <para>The pen color. To generate a COLORREF structure, use the RGB macro.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.SP_APPABORT">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.SP_ERROR">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.SP_NOTREPORTED">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.SP_OUTOFDISK">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.SP_OUTOFMEMORY">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.SP_USERABORT">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.AbortProc">
            <summary>
            The <c>AbortProc</c> function is an application-defined callback function used with the SetAbortProc function. It is called when
            a print job is to be canceled during spooling. The <c>ABORTPROC</c> type defines a pointer to this callback function.
            <c>AbortProc</c> is a placeholder for the application-defined function name.
            </summary>
            <param name="hdc">A handle to the device context for the print job.</param>
            <param name="iError">
            Specifies whether an error has occurred. This parameter is zero if no error has occurred; it is SP_OUTOFDISK if Print Manager is
            currently out of disk space and more disk space will become available if the application waits.
            </param>
            <returns>The callback function should return <c>TRUE</c> to continue the print job or <c>FALSE</c> to cancel the print job.</returns>
            <remarks>
            <para>
            <c>Note</c> This is a blocking or synchronous function and might not return immediately. How quickly this function returns
            depends on run-time factors such as network status, print server configuration, and printer driver implementation—factors that
            are difficult to predict when writing an application. Calling this function from a thread that manages interaction with the user
            interface could make the application appear to be unresponsive.
            </para>
            <para>
            If the iError parameter is SP_OUTOFDISK, the application need not cancel the print job. If it does not cancel the job, it must
            yield to Print Manager by calling the PeekMessage or GetMessage function.
            </para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.DI">
            <summary>Specifies additional information about the print job.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DI.DI_APPBANDING">
            <summary>Applications that use banding should set this flag for optimal performance during printing.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DI.DI_ROPS_READ_DESTINATION">
            <summary>The application will use raster operations that involve reading from the destination surface.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.EscapeFunction">
            <summary>The escape function to be performed.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.EscapeFunction.QUERYESCSUPPORT">
            <summary>Determines whether a particular escape is implemented by the device driver.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.EscapeFunction.PASSTHROUGH">
            <summary>
            The PASSTHROUGH printer escape function sends data directly to a printer driver.
            <list type="table">
            <listheader>
            <term>Parameter</term>
            <term>Value</term>
            </listheader>
            <item>
            <term>hdc</term>
            <description>A handle to the printer device context.</description>
            </item>
            <item>
            <term>iEscape</term>
            <description><c>PASSTHROUGH</c></description>
            </item>
            <item>
            <term>cjInput</term>
            <description>The number of bytes of data to which the lpszInData parameter points.</description>
            </item>
            <item>
            <term>lpInData</term>
            <description>
            A pointer to the input structure required for the specified escape. The first word in the buffer contains the number of
            bytes of input data. The remaining bytes of the buffer contain the data itself.
            </description>
            </item>
            <item>
            <term>cjOutput</term>
            <description>
            The number of bytes of data to which the lpszOutData parameter points. For this printer escape function, the value of this
            parameter is 0.
            </description>
            </item>
            <item>
            <term>lpOutData</term>
            <description>
            A pointer to the structure that receives output from this escape. For this printer escape function, the value of the
            parameter is NULL.
            </description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.EscapeFunction.GETTECHNOLOGY">
            <summary>
            The GETTECHNOLOGY printer escape function identifies the type of printer driver.
            <list type="table">
            <listheader>
            <term>Parameter</term>
            <term>Value</term>
            </listheader>
            <item>
            <term>hdc</term>
            <description>A handle to the printer device context.</description>
            </item>
            <item>
            <term>iEscape</term>
            <description><c>GETTECHNOLOGY</c></description>
            </item>
            <item>
            <term>cjInput</term>
            <description>The number of bytes of data to which the lpszInData parameter points.</description>
            </item>
            <item>
            <term>lpInData</term>
            <description>A pointer to the input structure required for the specified escape.</description>
            </item>
            <item>
            <term>cjOutput</term>
            <description>The number of bytes of data to which the lpszOutData parameter points.</description>
            </item>
            <item>
            <term>lpOutData</term>
            <description>
            A pointer to the structure that receives output from this escape. This parameter must not be NULL if ExtEscape is called as
            a query function. If no data is to be returned in this structure, set cbOutput to 0.
            </description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.EscapeFunction.DRAWPATTERNRECT">
            <summary>
            The DRAWPATTERNRECT printer escape creates a white, gray scale, or solid black rectangle by using the pattern and rule
            capabilities of Page Control Language (PCL) on Hewlett-Packard LaserJet or LaserJet-compatible printers. A gray scale is a
            gray pattern that contains a specific mixture of black and white pixels.
            <list type="table">
            <listheader>
            <term>Parameter</term>
            <term>Value</term>
            </listheader>
            <item>
            <term>hdc</term>
            <description>A handle to the printer device context.</description>
            </item>
            <item>
            <term>iEscape</term>
            <description><c>DRAWPATTERNRECT</c></description>
            </item>
            <item>
            <term>cjInput</term>
            <description>The number of bytes of data to which the lpszInData parameter points.
            <para>Set this value to <c>sizeof(DRAWPATRECT)</c>.</para>
            </description>
            </item>
            <item>
            <term>lpInData</term>
            <description>A pointer to a DRAWPATTERNRECT structure that describes the rectangle.</description>
            </item>
            <item>
            <term>cjOutput</term>
            <description>The number of bytes of data to which the lpszOutData parameter points.
            <para>For this escape, the value of this parameter is 0.</para>
            </description>
            </item>
            <item>
            <term>lpOutData</term>
            <description>A pointer to the structure that will receive output from this escape.
            <para>For this printer escape function, the value of the parameter is NULL.</para>
            </description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.EscapeFunction.POSTSCRIPT_DATA">
            <summary>
            The POSTSCRIPT_DATA printer escape function sends data directly to a printer driver.
            <list type="table">
            <listheader>
            <term>Parameter</term>
            <term>Value</term>
            </listheader>
            <item>
            <term>hdc</term>
            <description>A handle to the printer device context.</description>
            </item>
            <item>
            <term>iEscape</term>
            <description><c>POSTSCRIPT_DATA</c></description>
            </item>
            <item>
            <term>cjInput</term>
            <description>The number of bytes of data to which the lpszInData parameter points.</description>
            </item>
            <item>
            <term>lpInData</term>
            <description>
            A pointer to the input structure required for the specified escape. The first word in the buffer contains the number of
            bytes of input data. The remaining bytes of the buffer contain the data itself.
            </description>
            </item>
            <item>
            <term>cjOutput</term>
            <description>
            The number of bytes of data to which the lpszOutData parameter points. For this printer escape function, the value of this
            parameter is 0.
            </description>
            </item>
            <item>
            <term>lpOutData</term>
            <description>
            A pointer to the structure that receives output from this escape. For this printer escape function, the value of the
            parameter is NULL.
            </description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.EscapeFunction.POSTSCRIPT_PASSTHROUGH">
            <summary>
            The POSTSCRIPT_PASSTHROUGH printer escape function sends data directly to a PostScript printer driver.
            <para>
            A PostScript driver supports this escape function when in PostScript-centric mode or in compatibility mode, but not in
            GDI-centric mode.
            </para>
            <para>To set the PostScript driver's mode, call the POSTSCRIPT_IDENTIFY escape function.</para>
            <list type="table">
            <listheader>
            <term>Parameter</term>
            <term>Value</term>
            </listheader>
            <item>
            <term>hdc</term>
            <description>A handle to the printer device context.</description>
            </item>
            <item>
            <term>iEscape</term>
            <description><c>POSTSCRIPT_PASSTHROUGH</c></description>
            </item>
            <item>
            <term>cjInput</term>
            <description>The number of bytes of data to which the lpszInData parameter points.</description>
            </item>
            <item>
            <term>lpInData</term>
            <description>
            A pointer to the input structure required for the specified escape. The first word in the buffer contains the number of
            bytes of input data. The remaining bytes of the buffer contain the data itself.
            </description>
            </item>
            <item>
            <term>cjOutput</term>
            <description>
            The number of bytes of data to which the lpszOutData parameter points. For this printer escape function, the value of this
            parameter is 0.
            </description>
            </item>
            <item>
            <term>lpOutData</term>
            <description>
            A pointer to the structure that receives output from this escape. For this printer escape function, the value of the
            parameter is NULL.
            </description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.EscapeFunction.POSTSCRIPT_IDENTIFY">
            <summary>
            The POSTSCRIPT_IDENTIFY printer escape function sets a PostScript driver to GDI-centric mode or PostScript-centric mode.
            <list type="table">
            <listheader>
            <term>Parameter</term>
            <term>Value</term>
            </listheader>
            <item>
            <term>hdc</term>
            <description>A handle to the printer device context.</description>
            </item>
            <item>
            <term>iEscape</term>
            <description><c>POSTSCRIPT_IDENTIFY</c></description>
            </item>
            <item>
            <term>cjInput</term>
            <description>The number of bytes of data to which the lpszInData parameter points.
            <para>For this escape, set this value to <c>sizeof(DWORD)</c>.</para>
            </description>
            </item>
            <item>
            <term>lpInData</term>
            <description>A pointer to the input structure required for the specified escape.
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <description>PSIDENT_GDICENTRIC</description>
            <description>
            <para>
            GDI-centric mode. Specify this value if the PostScript driver supports the PASSTHROUGH printer escape function, but not the
            POSTSCRIPT_PASSTHROUGH printer escape function.
            </para>
            </description>
            </item>
            <item>
            <description>PSIDENT_PSCENTRIC</description>
            <description>
            <para>
            PostScript-centric mode. Specify this value if the PostScript driver supports the POSTSCRIPT_PASSTHROUGH printer escape
            function, but not the PASSTHROUGH printer escape function.
            </para>
            </description>
            </item>
            </list>
            </description>
            </item>
            <item>
            <term>cjOutput</term>
            <description>
            The number of bytes of data to which the lpszOutData parameter points. For this printer escape function, the value of this
            parameter is 0.
            </description>
            </item>
            <item>
            <term>lpOutData</term>
            <description>
            A pointer to the structure that receives output from this escape. For this printer escape function, the value of the
            parameter is NULL.
            </description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.EscapeFunction.POSTSCRIPT_INJECTION">
            <summary>
            The POSTSCRIPT_INJECTION printer escape function inserts a block of raw data at a specified point in a PostScript job stream.
            <para>
            A PostScript driver supports this escape function in GDI-centric mode or PostScript-centric mode support, but not in
            compatibility mode.
            </para>
            <para>To set the PostScript driver's mode, call the POSTSCRIPT_IDENTIFY escape function.</para>
            <list type="table">
            <listheader>
            <term>Parameter</term>
            <term>Value</term>
            </listheader>
            <item>
            <term>hdc</term>
            <description>A handle to the printer device context.</description>
            </item>
            <item>
            <term>iEscape</term>
            <description><c>POSTSCRIPT_INJECTION</c></description>
            </item>
            <item>
            <term>cjInput</term>
            <description>The number of bytes of data to which the lpszInData parameter points.
            <para>Set this parameter to <c>sizeof(PSINJECTDATA)</c> plus the size of the raw data to inject.</para>
            </description>
            </item>
            <item>
            <term>lpInData</term>
            <description>A pointer to the buffer that contains a PSINJECTDATA structure followed by the raw data to inject.</description>
            </item>
            <item>
            <term>cjOutput</term>
            <description>
            The number of bytes of data to which the lpszOutData parameter points. For this printer escape function, the value of this
            parameter is 0.
            </description>
            </item>
            <item>
            <term>lpOutData</term>
            <description>
            A pointer to the structure that receives output from this escape. For this printer escape function, the value of the
            parameter is NULL.
            </description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.EscapeFunction.CHECKJPEGFORMAT">
            <summary>
            The CHECKJPEGFORMAT printer escape function determines whether a printer supports printing a JPEG image.
            <list type="table">
            <listheader>
            <term>Parameter</term>
            <term>Value</term>
            </listheader>
            <item>
            <term>hdc</term>
            <description>A handle to the printer device context.</description>
            </item>
            <item>
            <term>iEscape</term>
            <description><c>CHECKJPEGFORMAT</c></description>
            </item>
            <item>
            <term>cjInput</term>
            <description>The size, in bytes, of the JPEG image buffer pointed to by the lpInData parameter.</description>
            </item>
            <item>
            <term>lpInData</term>
            <description>A pointer to a buffer that contains the JPEG image.</description>
            </item>
            <item>
            <term>cjOutput</term>
            <description>The number of bytes of data pointed to by the lpOutData parameter.
            <para>For this escape, set this value to <c>sizeof(DWORD)</c>.</para>
            </description>
            </item>
            <item>
            <term>lpOutData</term>
            <description>
            A pointer to the DWORD variable that receives the output from this escape. This parameter must not be NULL.
            <para>If the printer supports the image type, this value is set to 1. Otherwise, it is set to zero.</para>
            </description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.EscapeFunction.CHECKPNGFORMAT">
            <summary>
            The CHECKJPEGFORMAT printer escape function determines whether a printer supports printing a PNG image.
            <list type="table">
            <listheader>
            <term>Parameter</term>
            <term>Value</term>
            </listheader>
            <item>
            <term>hdc</term>
            <description>A handle to the printer device context.</description>
            </item>
            <item>
            <term>iEscape</term>
            <description><c>CHECKPNGFORMAT</c></description>
            </item>
            <item>
            <term>cjInput</term>
            <description>The size, in bytes, of the PNG image buffer pointed to by the lpInData parameter.</description>
            </item>
            <item>
            <term>lpInData</term>
            <description>A pointer to a buffer that contains the PNG image.</description>
            </item>
            <item>
            <term>cjOutput</term>
            <description>The number of bytes of data pointed to by the lpOutData parameter.
            <para>For this escape, set this value to <c>sizeof(DWORD)</c>.</para>
            </description>
            </item>
            <item>
            <term>lpOutData</term>
            <description>
            A pointer to the DWORD variable that receives the output from this escape. This parameter must not be NULL.
            <para>If the printer supports the image type, this value is set to 1. Otherwise, it is set to zero.</para>
            </description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.EscapeFunction.GET_PS_FEATURESETTING">
            <summary>
            The GET_PS_FEATURESETTING printer escape function retrieves information about a specified feature setting for a PostScript driver.
            <para>
            This escape function is supported only if the PostScript driver is in PostScript-centric mode or in GDI-centric mode. To set
            the PostScript driver mode, call the POSTSCRIPT_IDENTIFY escape function.
            </para>
            <list type="table">
            <listheader>
            <term>Parameter</term>
            <term>Value</term>
            </listheader>
            <item>
            <description>hdc</description>
            <description>A handle to the printer device context.</description>
            </item>
            <item>
            <description>iEscape</description>
            <description><c>DRAWPATTERNRECT</c></description>
            </item>
            <item>
            <description>cjInput</description>
            <description>The number of bytes of data to which the lpszInData parameter points.
            <para>Set this value to <c>sizeof(INT)</c>.</para>
            </description>
            </item>
            <item>
            <description>lpInData</description>
            <description>A pointer to the INT variable that contains a feature setting value from the following table.
            <para>
            Windows XP and later versions of Windows support the private use of this parameter. For private use, you can use the numbers
            in the range from FEATURESETTING_PRIVATE_BEGIN to FEATURESETTING_PRIVATE_END. Private parties that intend to use numbers in
            this range should contact Microsoft first to avoid conflicts with other applications.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <description>FEATURESETTING_CUSTPAPER</description>
            <description>
            <para>Retrieves the custom paper parameters.</para>
            <para>Set cbOutput to sizeof ( PSFEATURE_CUSTPAPER ) and lpszOutData to point to a PSFEATURE_CUSTPAPER structure.</para>
            </description>
            </item>
            <item>
            <description>FEATURESETTING_MIRROR</description>
            <description>
            <para>Retrieves the mirrored output setting.</para>
            <para>Set cbOutput to sizeof ( BOOL ) and lpszOutData to point to a BOOL variable.</para>
            <para>If mirrored output is selected, the value returned in lpszOutData is TRUE.</para>
            <para>If mirrored output is not selected, the value returned in lpszOutData is FALSE</para>
            </description>
            </item>
            <item>
            <description>FEATURESETTING_NEGATIVE</description>
            <description>
            <para>Retrieves the negative output setting.</para>
            <para>Set cbOutput to sizeof ( BOOL ) and lpszOutData to point to a BOOL variable.</para>
            <para>
            When the function returns, the lpszOutData variable is TRUE if "Negative Output: Yes" is selected; otherwise, it is FALSE.
            </para>
            </description>
            </item>
            <item>
            <description>FEATURESETTING_NUP</description>
            <description>
            <para>Retrieves the N-Up setting of the page layout.</para>
            <para>Set cbOutput to sizeof ( BOOL ) and lpszOutData to point to a BOOL variable.</para>
            <para>If an N-Up page layout is not being used, the lpszOutData variable returns FALSE.</para>
            <para>
            If an N-Up page layout is being used, the lpszOutData variable returns TRUE. However, the variable does not indicate the
            format of the N-Up page layout or its semantics.
            </para>
            </description>
            </item>
            <item>
            <description>FEATURESETTING_OUTPUT</description>
            <description>
            <para>Retrieves information about PostScript driver output options.</para>
            <para>Set cbOutput to sizeof ( PSFEATURE_OUTPUT ) and lpszOutData to point to a PSFEATURE_OUTPUT structure.</para>
            </description>
            </item>
            <item>
            <description>FEATURESETTING_PROTOCOL</description>
            <description>
            <para>Retrieves the output protocol setting.</para>
            <para>Sets cbOutput to sizeof( INT ) and lpszOutData to point to an INT variable.</para>
            <para>When the function returns, the lpszOutData variable is set to one of the following output protocol values:</para>
            <para>PSPROTOCOL_ASCII PSPROTOCOL_BCP PSPROTOCOL_TBCP PSPROTOCOL_BINARY</para>
            </description>
            </item>
            <item>
            <description>FEATURESETTING_PSLEVEL</description>
            <description>
            <para>Retrieves the PostScript language level.</para>
            <para>Set cbOutput to sizeof ( INT ) and lpszOutData to point to an INT variable.</para>
            <para>
            When the function returns, the lpszOutData variable is set to 1, 2, 3, or higher to indicate the PostScript language level.
            </para>
            </description>
            </item>
            </list>
            </description>
            </item>
            <item>
            <description>cjOutput</description>
            <description>The number of bytes of data to which the lpszOutData parameter points.</description>
            </item>
            <item>
            <description>lpOutData</description>
            <description>
            A pointer to the structure that receives output from this escape. This parameter must not be NULL if ExtEscape is called as
            a query function. If no data is to be returned in this structure, set cbOutput to 0.
            </description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.EscapeFunction.SPCLPASSTHROUGH2">
            <summary>
            The SPCLPASSTHROUGH2 printer escape function allows applications that print to PostScript devices using EPSPRINTING to
            include private PostScript procedures and other resources at the document-level save context.
            <para>
            This escape is supported only for backward compatibility with Adobe Acrobat. Other applications should not use this obsolete escape.
            </para>
            <list type="table">
            <listheader>
            <term>Parameter</term>
            <term>Value</term>
            </listheader>
            <item>
            <term>hdc</term>
            <description>A handle to the printer device context.</description>
            </item>
            <item>
            <term>iEscape</term>
            <description><c>SPCLPASSTHROUGH2</c></description>
            </item>
            <item>
            <term>cjInput</term>
            <description>The number of bytes of data to which the lpszInData parameter points.</description>
            </item>
            <item>
            <term>lpInData</term>
            <description>A pointer to the input structure required for the specified escape.</description>
            </item>
            <item>
            <term>cjOutput</term>
            <description>
            The number of bytes of data to which the lpszOutData parameter points. For this printer escape function, the value of this
            parameter is 0.
            </description>
            </item>
            <item>
            <term>lpOutData</term>
            <description>
            A pointer to the structure that receives output from this escape. For this printer escape function, the value of the
            parameter is NULL.
            </description>
            </item>
            </list>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.PSINJECT">
            <summary>Specifies where to inject the raw data in the PostScript output.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PSINJECT.PSINJECT_BEGINSTREAM">
            <summary>Before the first byte of job stream.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PSINJECT.PSINJECT_PSADOBE">
            <summary>Before %!PS-Adobe.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PSINJECT.PSINJECT_PAGESATEND">
            <summary>Replaces driver's %%Pages (atend).</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PSINJECT.PSINJECT_PAGES">
            <summary>Replaces driver's %%Pages nnn.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PSINJECT.PSINJECT_DOCNEEDEDRES">
            <summary>After %%DocumentNeededResources.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PSINJECT.PSINJECT_DOCSUPPLIEDRES">
            <summary>After %%DocumentSuppliedResources.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PSINJECT.PSINJECT_PAGEORDER">
            <summary>Replaces driver's %%PageOrder.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PSINJECT.PSINJECT_ORIENTATION">
            <summary>Replaces driver's %%Orientation.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PSINJECT.PSINJECT_BOUNDINGBOX">
            <summary>Replaces driver's %%BoundingBox.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PSINJECT.PSINJECT_DOCUMENTPROCESSCOLORS">
            <summary>Replaces driver's %%DocumentProcessColors &lt;color&gt;.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PSINJECT.PSINJECT_COMMENTS">
            <summary>Before %%EndComments.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PSINJECT.PSINJECT_BEGINDEFAULTS">
            <summary>After %%BeginDefaults.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PSINJECT.PSINJECT_ENDDEFAULTS">
            <summary>Before %%EndDefaults.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PSINJECT.PSINJECT_BEGINPROLOG">
            <summary>After %%BeginProlog.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PSINJECT.PSINJECT_ENDPROLOG">
            <summary>Before %%EndProlog.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PSINJECT.PSINJECT_BEGINSETUP">
            <summary>After %%BeginSetup.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PSINJECT.PSINJECT_ENDSETUP">
            <summary>TBefore %%EndSetup.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PSINJECT.PSINJECT_TRAILER">
            <summary>After %%Trailer</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PSINJECT.PSINJECT_EOF">
            <summary>After %%EOF</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PSINJECT.PSINJECT_ENDSTREAM">
            <summary>After the last byte of job stream</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PSINJECT.PSINJECT_DOCUMENTPROCESSCOLORSATEND">
            <summary>Replaces driver's %%DocumentProcessColors (atend)</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PSINJECT.PSINJECT_PAGENUMBER">
            <summary>Replaces driver's %%Page</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PSINJECT.PSINJECT_BEGINPAGESETUP">
            <summary>After %%BeginPageSetup</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PSINJECT.PSINJECT_ENDPAGESETUP">
            <summary>Before %%EndPageSetup</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PSINJECT.PSINJECT_PAGETRAILER">
            <summary>After %%PageTrailer</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PSINJECT.PSINJECT_PLATECOLOR">
            <summary>Replace driver's %%PlateColor: &lt;color&gt;</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PSINJECT.PSINJECT_SHOWPAGE">
            <summary>Before showpage operator</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PSINJECT.PSINJECT_PAGEBBOX">
            <summary>Replaces driver's %%PageBoundingBox</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PSINJECT.PSINJECT_ENDPAGECOMMENTS">
            <summary>Before %%EndPageComments</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PSINJECT.PSINJECT_VMSAVE">
            <summary>Before save operator</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PSINJECT.PSINJECT_VMRESTORE">
            <summary>After restore operator</summary>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.AbortDoc(Vanara.PInvoke.HDC)">
            <summary>
            The <c>AbortDoc</c> function stops the current print job and erases everything drawn since the last call to the StartDoc function.
            </summary>
            <param name="hdc">Handle to the device context for the print job.</param>
            <returns>
            <para>If the function succeeds, the return value is greater than zero.</para>
            <para>If the function fails, the return value is SP_ERROR.</para>
            </returns>
            <remarks>
            <para>
            <c>Note</c> This is a blocking or synchronous function and might not return immediately. How quickly this function returns
            depends on run-time factors such as network status, print server configuration, and printer driver implementation—factors that
            are difficult to predict when writing an application. Calling this function from a thread that manages interaction with the user
            interface could make the application appear to be unresponsive.
            </para>
            <para>
            Applications should call the <c>AbortDoc</c> function to stop a print job if an error occurs, or to stop a print job after the
            user cancels that job. To end a successful print job, an application should call the EndDoc function.
            </para>
            <para>
            If Print Manager was used to start the print job, calling <c>AbortDoc</c> erases the entire spool job, so that the printer
            receives nothing. If Print Manager was not used to start the print job, the data may already have been sent to the printer. In
            this case, the printer driver resets the printer (when possible) and ends the print job.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.EndDoc(Vanara.PInvoke.HDC)">
            <summary>The <c>EndDoc</c> function ends a print job.</summary>
            <param name="hdc">Handle to the device context for the print job.</param>
            <returns>
            <para>If the function succeeds, the return value is greater than zero.</para>
            <para>If the function fails, the return value is less than or equal to zero.</para>
            </returns>
            <remarks>
            <para>
            <c>Note</c> This is a blocking or synchronous function and might not return immediately. How quickly this function returns
            depends on run-time factors such as network status, print server configuration, and printer driver implementation—factors that
            are difficult to predict when writing an application. Calling this function from a thread that manages interaction with the user
            interface could make the application appear to be unresponsive.
            </para>
            <para>Applications should call <c>EndDoc</c> immediately after finishing a print job.</para>
            <para>Examples</para>
            <para>For a sample program that uses this function, see How To: Print Using the GDI Print API.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.EndPage(Vanara.PInvoke.HDC)">
            <summary>
            The <c>EndPage</c> function notifies the device that the application has finished writing to a page. This function is typically
            used to direct the device driver to advance to a new page.
            </summary>
            <param name="hdc">A handle to the device context for the print job.</param>
            <returns>
            <para>If the function succeeds, the return value is greater than zero.</para>
            <para>If the function fails, the return value is less than or equal to zero.</para>
            </returns>
            <remarks>
            <para>
            <c>Note</c> This is a blocking or synchronous function and might not return immediately. How quickly this function returns
            depends on run-time factors such as network status, print server configuration, and printer driver implementation—factors that
            are difficult to predict when writing an application. Calling this function from a thread that manages interaction with the user
            interface could make the application appear to be unresponsive.
            </para>
            <para>
            Use the ResetDC function to change the device mode, if necessary, after calling the <c>EndPage</c> function. Note that a call to
            <c>ResetDC</c> resets all device context attributes back to default values. Neither <c>EndPage</c> nor StartPage resets the
            device context attributes. Device context attributes remain constant across subsequent pages. You do not need to re-select
            objects and set up the mapping mode again before printing the next page; however, doing so will produce the same results and
            reduce code differences between versions of Windows.
            </para>
            <para>
            When a page in a spooled file exceeds approximately 350 MB, it may fail to print and not send an error message. For example,
            this can occur when printing large EMF files. The page size limit depends on many factors including the amount of virtual memory
            available, the amount of memory allocated by calling processes, and the amount of fragmentation in the process heap.
            </para>
            <para>Examples</para>
            <para>For a sample program that uses this function, see How To: Print Using the GDI Print API.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.Escape(Vanara.PInvoke.HDC,Vanara.PInvoke.Gdi32.EscapeFunction,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            The <c>Escape</c> function enables an application to access the system-defined device capabilities that are not available
            through GDI. Escape calls made by an application are translated and sent to the driver.
            </summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="iEscape">
            The escape function to be performed. This parameter must be one of the predefined escape values listed in Remarks. Use the
            ExtEscape function if your application defines a private escape value.
            </param>
            <param name="cjIn">The number of bytes of data pointed to by the lpvInData parameter. This can be 0.</param>
            <param name="pvIn">A pointer to the input structure required for the specified escape.</param>
            <param name="pvOut">
            A pointer to the structure that receives output from this escape. This parameter should be <c>NULL</c> if no data is returned.
            </param>
            <returns>
            <para>
            If the function succeeds, the return value is greater than zero, except with the QUERYESCSUPPORT printer escape, which checks
            for implementation only. If the escape is not implemented, the return value is zero.
            </para>
            <para>If the function fails, the return value is a system error code.</para>
            </returns>
            <remarks>
            <para>
            <c>Note</c> This is a blocking or synchronous function and might not return immediately. How quickly this function returns
            depends on run-time factors such as network status, print server configuration, and printer driver implementation—factors that
            are difficult to predict when writing an application. Calling this function from a thread that manages interaction with the user
            interface could make the application appear to be unresponsive.
            </para>
            <para>The effect of passing 0 for cbInput will depend on the value of nEscape and on the driver that is handling the escape.</para>
            <para>Of the original printer escapes, only the following can be used.</para>
            <list type="table">
            <listheader>
            <term>Escape</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>QUERYESCSUPPORT</term>
            <term>Determines whether a particular escape is implemented by the device driver.</term>
            </item>
            <item>
            <term>PASSTHROUGH</term>
            <term>Allows the application to send data directly to a printer.</term>
            </item>
            </list>
            <para>For information about printer escapes, see ExtEscape.</para>
            <para>Use the StartPage function to prepare the printer driver to receive data.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.ExtEscape(Vanara.PInvoke.HDC,Vanara.PInvoke.Gdi32.EscapeFunction,System.Int32,System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            The <c>ExtEscape</c> function enables an application to access device capabilities that are not available through GDI.
            </summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="iEscape">
            <para>The escape function to be performed. It can be one of the following or it can be an application-defined escape function.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CHECKJPEGFORMAT</term>
            <term>Checks whether the printer supports a JPEG image.</term>
            </item>
            <item>
            <term>CHECKPNGFORMAT</term>
            <term>Checks whether the printer supports a PNG image.</term>
            </item>
            <item>
            <term>DRAWPATTERNRECT</term>
            <term>Draws a white, gray-scale, or black rectangle.</term>
            </item>
            <item>
            <term>GET_PS_FEATURESETTING</term>
            <term>Gets information on a specified feature setting for a PostScript driver.</term>
            </item>
            <item>
            <term>GETTECHNOLOGY</term>
            <term>Reports on whether or not the driver is a Postscript driver.</term>
            </item>
            <item>
            <term>PASSTHROUGH</term>
            <term>Allows the application to send data directly to a printer. Supported in compatibility mode and GDI-centric mode.</term>
            </item>
            <item>
            <term>POSTSCRIPT_DATA</term>
            <term>Allows the application to send data directly to a printer. Supported only in compatibility mode.</term>
            </item>
            <item>
            <term>POSTSCRIPT_IDENTIFY</term>
            <term>Sets a PostScript driver to GDI-centric or PostScript-centric mode.</term>
            </item>
            <item>
            <term>POSTSCRIPT_INJECTION</term>
            <term>Inserts a block of raw data in a PostScript job stream.</term>
            </item>
            <item>
            <term>POSTSCRIPT_PASSTHROUGH</term>
            <term>Sends data directly to a PostScript printer driver. Supported in compatibility mode and PostScript-centric mode.</term>
            </item>
            <item>
            <term>QUERYESCSUPPORT</term>
            <term>Determines whether a particular escape is implemented by the device driver.</term>
            </item>
            <item>
            <term>SPCLPASSTHROUGH2</term>
            <term>Enables applications to include private procedures and other resources at the document level-save context.</term>
            </item>
            </list>
            </param>
            <param name="cjInput">The number of bytes of data pointed to by the lpszInData parameter.</param>
            <param name="lpInData">A pointer to the input structure required for the specified escape. See also Remarks.</param>
            <param name="cjOutput">The number of bytes of data pointed to by the lpszOutData parameter.</param>
            <param name="lpOutData">
            A pointer to the structure that receives output from this escape. This parameter must not be <c>NULL</c> if <c>ExtEscape</c> is
            called as a query function. If no data is to be returned in this structure, set cbOutput to 0. See also Remarks.
            </param>
            <returns>
            The return value specifies the outcome of the function. It is greater than zero if the function is successful, except for the
            QUERYESCSUPPORT printer escape, which checks for implementation only. The return value is zero if the escape is not implemented.
            A return value less than zero indicates an error.
            </returns>
            <remarks>
            <para>
            <c>Note</c> This is a blocking or synchronous function and might not return immediately. How quickly this function returns
            depends on run-time factors such as network status, print server configuration, and printer driver implementation—factors that
            are difficult to predict when writing an application. Calling this function from a thread that manages interaction with the user
            interface could make the application appear to be unresponsive.
            </para>
            <para>Use this function to pass a driver-defined escape value to a device.</para>
            <para>
            Use the Escape function to pass one of the system-defined escape values to a device, unless the escape is one of the defined
            escapes in nEscape. <c>ExtEscape</c> might not work properly with the system-defined escapes. In particular, escapes in which
            lpszInData is a pointer to a structure that contains a member that is a pointer will fail.
            </para>
            <para>
            Note, that the behavior described in this article is the expected behavior, but it is up to the driver to comply with this model.
            </para>
            <para>
            The variables referenced by lpszInData and lpszOutData should not be the same or overlap. If the input and the output buffer
            size variables overlap, they may not contain the correct values after the call returns. For the best results, lpszInData and
            lpszOutData should refer to different variables.
            </para>
            <para>The CHECKJPEGFORMAT printer escape function determines whether a printer supports printing a JPEG image.</para>
            <para>
            Before using the CHECKJPEGFORMAT printer escape function, call the QUERYESCSUPPORT printer escape function to determine whether
            the driver supports <c>CHECKJPEGFORMAT</c>. For sample code that demonstrates the use of <c>CHECKJPEGFORMAT</c>, see Testing a
            Printer for JPEG or PNG Support.
            </para>
            <para>The CHECKPNGFORMAT printer escape function determines whether a printer supports printing a PNG image.</para>
            <para>
            Before using the CHECKJPEGFORMAT printer escape function, call the QUERYESCSUPPORT printer escape function to determine whether
            the driver supports <c>CHECKJPEGFORMAT</c>. For sample code, see Testing a Printer for JPEG or PNG Support.
            </para>
            <para>
            The DRAWPATTERNRECT printer escape creates a white, gray scale, or solid black rectangle by using the pattern and rule
            capabilities of Page Control Language (PCL) on Hewlett-Packard LaserJet or LaserJet-compatible printers. A gray scale is a gray
            pattern that contains a specific mixture of black and white pixels.
            </para>
            <para>
            An application should use the QUERYESCSUPPORT escape to determine whether the printer is capable of drawing patterns and rules
            before using the DRAWPATTERNRECT escape.
            </para>
            <list type="bullet">
            <item>
            <term>Rules drawn with DRAWPATTERNRECT are not subject to clipping regions in the device context.</term>
            </item>
            <item>
            <term>Applications should not try to erase patterns and rules created with DRAWPATTERNRECT by placing opaque objects over them.</term>
            </item>
            </list>
            <para>
            If the printer supports white rules, these can be used to erase patterns created by DRAWPATTERNRECT. If the printer does not
            support white rules, there is no method for erasing these patterns.
            </para>
            <para>
            If an application cannot use the DRAWPATTERNRECT escape and the device is a printer, it should generally use the PatBlt function
            instead. Note that if <c>PatBlt</c> is used to print a black rectangle, the application should use the BLACKNESS raster
            operator. If the device is a plotter, however, the application should use the Rectangle function.
            </para>
            <para>
            The GET_PS_FEATURESETTING printer escape function retrieves information about a specified feature setting for a PostScript driver.
            </para>
            <para>
            This escape function is supported only if the PostScript driver is in PostScript-centric mode or in GDI-centric mode. To set the
            PostScript driver mode, call the POSTSCRIPT_IDENTIFY escape function.
            </para>
            <para>To perform this operation, call the <c>ExtEscape</c> function with the following parameters.</para>
            <para>
            The GET_PS_FEATURESETTING printer escape function is valid if called any time after calling the CreateDC function and before
            calling the DeleteDC function.
            </para>
            <para>The GETTECHNOLOGY printer escape function identifies the type of printer driver.</para>
            <para>For non-XPSDrv printers, this escape reports whether the driver is a Postscript driver.</para>
            <para>
            For XPSDrv printers, this escape reports whether the driver is the Microsoft XPS Document Converter (MXDC). If it is, the escape
            returns the zero-terminated string "http://schemas.microsoft.com/xps/2005/06"
            </para>
            <para>
            The PASSTHROUGH printer escape function sends data directly to a printer driver. To perform this operation, call the
            <c>ExtEscape</c> function with the following parameters.
            </para>
            <para>
            The <c>PASSTHROUGH</c> printer escape function is supported by PostScript drivers in GDI-centric mode or compatibility mode, but
            not in PostScript-centric mode. Drivers in PostScript-centric mode can use the POSTSCRIPT_PASSTHROUGH escape function. To set a
            PostScript driver mode, call the POSTSCRIPT_IDENTIFY escape function.
            </para>
            <para>
            For PASSTHROUGH data sent by EPSPRINTING or PostScript-centric applications, the PostScript driver will not make any
            modifications. For PASSTHROUGH data sent by other applications, if the PostScript driver is using BCP (Binary Communication
            Protocol) or TBCP (Tagged Binary Communication Protocol) output protocol, the driver does the appropriate BCP or TBCP quoting on
            special characters, as described in "Adobe Serial and Parallel Communications Protocols Specification." This means that the
            application should send either ASCII or pure binary PASSTHROUGH data.
            </para>
            <para>
            The POSTSCRIPT_DATA printer escape function sends data directly to a printer driver. To perform this operation, call the
            <c>ExtEscape</c> function with the following parameters.
            </para>
            <para>
            The POSTSCRIPT_DATA function is identical to the PASSTHROUGH escape function except that it is supported by PostScript drivers
            in compatibility mode only. It is not supported by PostScript drivers in PostScript-centric mode or in GDI-centric mode.
            </para>
            <para>
            Drivers in PostScript-centric mode can use the POSTSCRIPT_PASSTHROUGH escape function, and drivers in GDI-centric mode can use
            the PASSTHROUGH escape function. To set a PostScript driver's mode, call the POSTSCRIPT_IDENTIFY escape function.
            </para>
            <para>The POSTSCRIPT_IDENTIFY printer escape function sets a PostScript driver to GDI-centric mode or PostScript-centric mode.</para>
            <para>
            To put the driver in GDI-centric or PostScript-centric modes, first call the QUERYESCSUPPORT printer escape function to
            determine whether the driver supports the POSTSCRIPT_IDENTIFY printer escape function. If so, you can assume the driver is
            PSCRIPT 5.0. Then, before you call any other printer escape function, you must call <c>POSTSCRIPT_IDENTIFY</c> and specify
            either <c>PSIDENT_GDICENTRIC</c> or <c>PSIDENT_PSCENTRIC</c>. You must call the <c>QUERYESCSUPPORT</c> and
            <c>POSTSCRIPT_IDENTIFY</c> printer escape functions before calling any other printer escape function.
            </para>
            <para>
            <c>Note</c> After the PostScript driver is set to GDI-centric mode or PostScript-centric mode, you will not be allowed to call
            the POSTSCRIPT_IDENTIFY printer escape function anymore.
            </para>
            <para>
            If you do not use the POSTSCRIPT_IDENTIFY printer escape function, the PostScript driver is in compatibility mode and provides
            identical support for the PASSTHROUGH, POSTSCRIPT_PASSTHROUGH, and POSTSCRIPT_DATA printer escape functions.
            </para>
            <para>
            For PostScript drivers that support the POSTSCRIPT_PASSTHROUGH, PASSTHROUGH, and <c>POSTSCRIPT_PASSTHROUGH</c> printer escape
            functions are identical.
            </para>
            <para>
            In PostScript-centric mode, the application is responsible for all PostScript output that marks the paper using the
            POSTSCRIPT_PASSTHROUGH escape function. GDI functions are not allowed. The driver is responsible for the overall document
            structure and printer control settings. The application can use the POSTSCRIPT_INJECTION printer escape function to inject a
            block of raw data (including DSC comments) into the job stream at specific places.
            </para>
            <para>
            The POSTSCRIPT_INJECTION printer escape function inserts a block of raw data at a specified point in a PostScript job stream.
            </para>
            <para>
            A PostScript driver supports this escape function in GDI-centric mode or PostScript-centric mode support, but not in
            compatibility mode.
            </para>
            <para>To set the PostScript driver's mode, call the POSTSCRIPT_IDENTIFY escape function.</para>
            <para>To perform this operation, call the <c>ExtEscape</c> function with the following parameters.</para>
            <para>
            The driver internally caches the injection data and emits it at appropriate points in the output. The cached information is
            flushed when it is no longer needed. At the latest, it is flushed after the EndDoc call.
            </para>
            <para>
            In GDI-centric mode, the application can only inject valid DSC block data by using the POSTSCRIPT_INJECTION printer escape
            function. A valid DSC block must satisfy all of the following conditions:
            </para>
            <list type="bullet">
            <item>
            <term>It consists of an integral sequence of "lines."</term>
            </item>
            <item>
            <term>Each "line" must begin with "%%".</term>
            </item>
            <item>
            <term>
            Each "line" except the last line must end with &lt;CR&gt;, &lt;LF&gt;, or &lt;CR&gt;&lt;LF&gt; except for the last line. If the
            last line does not end with &lt;CR&gt;, &lt;LF&gt;, or &lt;CR&gt;&lt;LF&gt;, the driver appends &lt;CR&gt;&lt;LF&gt; after the
            last byte of the injection data.
            </term>
            </item>
            <item>
            <term>Each "line" must be 255 bytes or less including the "%%" but not counting the &lt;CR&gt;/&lt;LF&gt; line termination.</term>
            </item>
            </list>
            <para>The POSTSCRIPT_PASSTHROUGH printer escape function sends data directly to a PostScript printer driver.</para>
            <para>
            A PostScript driver supports this escape function when in PostScript-centric mode or in compatibility mode, but not in
            GDI-centric mode.
            </para>
            <para>To set the PostScript driver's mode, call the POSTSCRIPT_IDENTIFY escape function.</para>
            <para>The QUERYESCSUPPORT printer escape function checks the implementation of a printer escape function.</para>
            <para>
            The SPCLPASSTHROUGH2 printer escape function allows applications that print to PostScript devices using EPSPRINTING to include
            private PostScript procedures and other resources at the document-level save context.
            </para>
            <para>
            This escape is supported only for backward compatibility with Adobe Acrobat. Other applications should not use this obsolete escape.
            </para>
            <para>
            The application must call this escape before calling StartDoc so that the driver will cache the data for insertion at the
            correct point in the PostScript stream. If this escape is supported, the driver will also allow escape <c>DOWNLOADFACE</c> calls
            prior to <c>StartDoc</c>. The driver internally caches the data to be inserted and the data required by any escape
            <c>DOWNLOADFACE</c> calls prior to <c>StartDoc</c> and emits them all immediately before %%EndProlog. The sequence of
            SPCLPASSTHROUGH2 and <c>DOWNLOADFACE</c> calls will be preserved in the order their data is passed in, that is, a later call
            results in data output after an earlier call's data. The driver will consider fonts downloaded by pre- <c>StartDoc</c> escape
            <c>DOWNLOADFACE</c> calls as unavailable for removal during the scope of the job.
            </para>
            <para>
            This escape is not recorded in EMF files by the operating system, therefore applications must ensure that EMF recording is
            turned off for those jobs using the escape.
            </para>
            <para>Examples</para>
            <para>For an example, see Sizing a JPEG or PNG Image.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SetAbortProc(Vanara.PInvoke.HDC,Vanara.PInvoke.Gdi32.AbortProc)">
            <summary>
            The <c>SetAbortProc</c> function sets the application-defined abort function that allows a print job to be canceled during spooling.
            </summary>
            <param name="hdc">Handle to the device context for the print job.</param>
            <param name="proc">
            Pointer to the application-defined abort function. For more information about the callback function, see the AbortProc callback function.
            </param>
            <returns>
            <para>If the function succeeds, the return value is greater than zero.</para>
            <para>If the function fails, the return value is SP_ERROR.</para>
            </returns>
            <remarks>
            <para>
            <c>Note</c> This is a blocking or synchronous function and might not return immediately. How quickly this function returns
            depends on run-time factors such as network status, print server configuration, and printer driver implementation—factors that
            are difficult to predict when writing an application. Calling this function from a thread that manages interaction with the user
            interface could make the application appear to be unresponsive.
            </para>
            <para>Examples</para>
            <para>For an example, see How to Collect Print Job Information from the User.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.StartDoc(Vanara.PInvoke.HDC,Vanara.PInvoke.Gdi32.DOCINFO@)">
            <summary>The <c>StartDoc</c> function starts a print job.</summary>
            <param name="hdc">A handle to the device context for the print job.</param>
            <param name="lpdi">A pointer to a DOCINFO structure containing the name of the document file and the name of the output file.</param>
            <returns>
            <para>If the function succeeds, the return value is greater than zero. This value is the print job identifier for the document.</para>
            <para>If the function fails, the return value is less than or equal to zero.</para>
            </returns>
            <remarks>
            <para>
            <c>Note</c> This is a blocking or synchronous function and might not return immediately. How quickly this function returns
            depends on run-time factors such as network status, print server configuration, and printer driver implementation—factors that
            are difficult to predict when writing an application. Calling this function from a thread that manages interaction with the user
            interface could make the application appear to be unresponsive.
            </para>
            <para>
            Applications should call the <c>StartDoc</c> function immediately before beginning a print job. Using this function ensures that
            multipage documents are not interspersed with other print jobs.
            </para>
            <para>
            Applications can use the value returned by <c>StartDoc</c> to retrieve or set the priority of a print job. Call the GetJob or
            SetJob function and supply this value as one of the required arguments.
            </para>
            <para>Examples</para>
            <para>For a sample program that uses this function, see How To: Print Using the GDI Print API.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.StartPage(Vanara.PInvoke.HDC)">
            <summary>The <c>StartPage</c> function prepares the printer driver to accept data.</summary>
            <param name="hdc">A handle to the device context for the print job.</param>
            <returns>
            <para>If the function succeeds, the return value is greater than zero.</para>
            <para>If the function fails, the return value is less than or equal to zero.</para>
            </returns>
            <remarks>
            <para>
            <c>Note</c> This is a blocking or synchronous function and might not return immediately. How quickly this function returns
            depends on run-time factors such as network status, print server configuration, and printer driver implementation—factors that
            are difficult to predict when writing an application. Calling this function from a thread that manages interaction with the user
            interface could make the application appear to be unresponsive.
            </para>
            <para>
            The system disables the ResetDC function between calls to the <c>StartPage</c> and EndPage functions. This means that you cannot
            change the device mode except at page boundaries. After calling <c>EndPage</c>, you can call <c>ResetDC</c> to change the device
            mode, if necessary. Note that a call to <c>ResetDC</c> resets all device context attributes back to default values.
            </para>
            <para>
            Neither EndPage nor <c>StartPage</c> resets the device context attributes. Device context attributes remain constant across
            subsequent pages. You do not need to re-select objects and set up the mapping mode again before printing the next page; however,
            doing so will produce the same results and reduce code differences between versions of Windows.
            </para>
            <para>Examples</para>
            <para>For a sample program that uses this function, see How To: Print Using the GDI Print API.</para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.DOCINFO">
            <summary>
            The <c>DOCINFO</c> structure contains the input and output file names and other information used by the StartDoc function.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DOCINFO.cbSize">
            <summary>The size, in bytes, of the structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DOCINFO.lpszDocName">
            <summary>Pointer to a null-terminated string that specifies the name of the document.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DOCINFO.lpszOutput">
            <summary>
            Pointer to a null-terminated string that specifies the name of an output file. If this pointer is <c>NULL</c>, the output
            will be sent to the device identified by the device context handle that was passed to the StartDoc function.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DOCINFO.lpszDatatype">
            <summary>
            Pointer to a null-terminated string that specifies the type of data used to record the print job. The legal values for this
            member can be found by calling EnumPrintProcessorDatatypes and can include such values as raw, emf, or XPS_PASS. This member
            can be <c>NULL</c>. Note that the requested data type might be ignored.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DOCINFO.fwType">
            <summary>
            <para>Specifies additional information about the print job. This member must be zero or one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>DI_APPBANDING</term>
            <term>Applications that use banding should set this flag for optimal performance during printing.</term>
            </item>
            <item>
            <term>DI_ROPS_READ_DESTINATION</term>
            <term>The application will use raster operations that involve reading from the destination surface.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.DRAWPATRECT">
            <summary>The <c>DRAWPATRECT</c> structure defines a rectangle to be created.</summary>
            <remarks>This structure is used with the DRAWPATTERNRECT printer escape.</remarks>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DRAWPATRECT.ptPosition">
            <summary>The upper-left corner of the rectangle, in logical units.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DRAWPATRECT.ptSize">
            <summary>The lower-right corner of the rectangle, in logical units.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DRAWPATRECT.wStyle">
            <summary>
            <para>The style of the rectangle. It can be one of the following.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>0</term>
            <term>Black rectangle.</term>
            </item>
            <item>
            <term>1</term>
            <term>White rectangle.</term>
            </item>
            <item>
            <term>2</term>
            <term>Gray rectangle. Used with wPattern.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.DRAWPATRECT.wPattern">
            <summary>
            Amount of grayness of the rectangle, as a percentage (0-100). A value of 0 means a white rectangle and 100 means a black
            rectangle. This is only used when <c>wStyle</c> is 2.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.PSFEATURE_CUSTPAPER">
            <summary>
            The <c>PSFEATURE_CUSTPAPER</c> structure contains information about a custom paper size for a PostScript driver. This structure
            is used with the GET_PS_FEATURESETTING printer escape function.
            </summary>
            <remarks>
            For the semantics of the <c>lOrientation</c>, <c>lWidth</c>, <c>lHeight</c>, <c>lWidthOffset</c>, and <c>lHeightOffset</c>
            members, please refer to "Custom Page Size Parameters" in "PostScript Printer Description File Format Specification" v.4.3.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PSFEATURE_CUSTPAPER.lOrientation">
            <summary>
            Indicates the custom paper orientation. This member can be 0 to 3 if custom page size is selected. Otherwise, it is 1 and
            all other structure members are zero
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PSFEATURE_CUSTPAPER.lWidth">
            <summary>Custom page width, in points.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PSFEATURE_CUSTPAPER.lHeight">
            <summary>Custom page height, in points.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PSFEATURE_CUSTPAPER.lWidthOffset">
            <summary>Custom page width offset, in points.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PSFEATURE_CUSTPAPER.lHeightOffset">
            <summary>Custom page height offset, in points.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.PSFEATURE_OUTPUT">
            <summary>
            The <c>PSFEATURE_OUTPUT</c> structure contains information about PostScript driver output options. This structure is used with
            the GET_PS_FEATURESETTING printer escape function.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PSFEATURE_OUTPUT.bPageIndependent">
            <summary><c>TRUE</c> if PostScript output is page-independent or <c>FALSE</c> if PostScript output is page-dependent.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PSFEATURE_OUTPUT.bSetPageDevice">
            <summary>
            <c>TRUE</c> if printer feature code (setpagedevice's) is included or <c>FALSE</c> if all printer feature code is suppressed.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.PSINJECTDATA">
            <summary>
            The <c>PSINJECTDATA</c> structure is a header for the input buffer used with the POSTSCRIPT_INJECTION printer escape function.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PSINJECTDATA.DataBytes">
            <summary>
            The number of bytes of raw data to be injected. The raw data begins immediately following this structure. This size does not
            include the size of the <c>PSINJECTDATA</c> structure.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PSINJECTDATA.InjectionPoint">
            <summary>
            <para>Specifies where to inject the raw data in the PostScript output. This member can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>PSINJECT_BEGINSTREAM</term>
            <term>Before the first byte of job stream.</term>
            </item>
            <item>
            <term>PSINJECT_PSADOBE</term>
            <term>Before %!PS-Adobe.</term>
            </item>
            <item>
            <term>PSINJECT_PAGESATEND</term>
            <term>Replaces driver's %%Pages (atend).</term>
            </item>
            <item>
            <term>PSINJECT_PAGES</term>
            <term>Replaces driver's %%Pages nnn.</term>
            </item>
            <item>
            <term>PSINJECT_DOCNEEDEDRES</term>
            <term>After %%DocumentNeededResources.</term>
            </item>
            <item>
            <term>PSINJECT_DOCSUPPLIEDRES</term>
            <term>After %%DocumentSuppliedResources.</term>
            </item>
            <item>
            <term>PSINJECT_PAGEORDER</term>
            <term>Replaces driver's %%PageOrder.</term>
            </item>
            <item>
            <term>PSINJECT_ORIENTATION</term>
            <term>Replaces driver's %%Orientation.</term>
            </item>
            <item>
            <term>PSINJECT_BOUNDINGBOX</term>
            <term>Replaces driver's %%BoundingBox.</term>
            </item>
            <item>
            <term>PSINJECT_DOCUMENTPROCESSCOLORS</term>
            <term>Replaces driver's %%DocumentProcessColors &lt;color&gt;.</term>
            </item>
            <item>
            <term>PSINJECT_COMMENTS</term>
            <term>Before %%EndComments.</term>
            </item>
            <item>
            <term>PSINJECT_BEGINDEFAULTS</term>
            <term>After %%BeginDefaults.</term>
            </item>
            <item>
            <term>PSINJECT_ENDDEFAULTS</term>
            <term>Before %%EndDefaults.</term>
            </item>
            <item>
            <term>PSINJECT_BEGINPROLOG</term>
            <term>After %%BeginProlog.</term>
            </item>
            <item>
            <term>PSINJECT_ENDPROLOG</term>
            <term>Before %%EndProlog.</term>
            </item>
            <item>
            <term>PSINJECT_BEGINSETUP</term>
            <term>After %%BeginSetup.</term>
            </item>
            <item>
            <term>PSINJECT_ENDSETUP</term>
            <term>Before %%EndSetup.</term>
            </item>
            <item>
            <term>PSINJECT_TRAILER</term>
            <term>After %%Trailer</term>
            </item>
            <item>
            <term>PSINJECT_EOF</term>
            <term>After %%EOF</term>
            </item>
            <item>
            <term>PSINJECT_ENDSTREAM</term>
            <term>After the last byte of job stream</term>
            </item>
            <item>
            <term>PSINJECT_DOCUMENTPROCESSCOLORSATEND</term>
            <term>Replaces driver's %%DocumentProcessColors (atend)</term>
            </item>
            <item>
            <term>Page level injection points</term>
            </item>
            <item>
            <term>PSINJECT_PAGENUMBER</term>
            <term>Replaces driver's %%Page</term>
            </item>
            <item>
            <term>PSINJECT_BEGINPAGESETUP</term>
            <term>After %%BeginPageSetup</term>
            </item>
            <item>
            <term>PSINJECT_ENDPAGESETUP</term>
            <term>Before %%EndPageSetup</term>
            </item>
            <item>
            <term>PSINJECT_PAGETRAILER</term>
            <term>After %%PageTrailer</term>
            </item>
            <item>
            <term>PSINJECT_PLATECOLOR</term>
            <term>Replace driver's %%PlateColor: &lt;color&gt;</term>
            </item>
            <item>
            <term>PSINJECT_SHOWPAGE</term>
            <term>Before showpage operator</term>
            </item>
            <item>
            <term>PSINJECT_PAGEBBOX</term>
            <term>Replaces driver's %%PageBoundingBox</term>
            </item>
            <item>
            <term>PSINJECT_ENDPAGECOMMENTS</term>
            <term>Before %%EndPageComments</term>
            </item>
            <item>
            <term>PSINJECT_VMSAVE</term>
            <term>Before save operator</term>
            </item>
            <item>
            <term>PSINJECT_VMRESTORE</term>
            <term>After restore operator</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.PSINJECTDATA.PageNumber">
            <summary>
            The page number (starting from 1) to which the injection data is applied. Specify zero to apply the injection data to all
            pages. This member is meaningful only for page level injection points starting from PSINJECT_PAGENUMBER. For other injection
            points, set <c>PageNumber</c> to zero.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.RDH">
            <summary>The type of region.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RDH.RDH_RECTANGLES">
            <summary>Rectangle region type.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.RGN_COMB">
            <summary>A mode indicating how the two regions will be combined.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RGN_COMB.RGN_AND">
            <summary>Creates the intersection of the two combined regions.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RGN_COMB.RGN_OR">
            <summary>Creates the union of two combined regions.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RGN_COMB.RGN_XOR">
            <summary>Creates the union of two combined regions except for any overlapping areas.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RGN_COMB.RGN_DIFF">
            <summary>Combines the parts of hrgnSrc1 that are not part of hrgnSrc2.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RGN_COMB.RGN_COPY">
            <summary>Creates a copy of the region identified by hrgnSrc1.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.RGN_FILLMODE">
            <summary>The fill mode used to determine which pixels are in the region.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RGN_FILLMODE.ALTERNATE">
            <summary>Selects alternate mode (fills area between odd-numbered and even-numbered polygon sides on each scan line).</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RGN_FILLMODE.WINDING">
            <summary>Selects winding mode (fills any region with a nonzero winding value).</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.RGN_TYPE">
            <summary>The type of the resulting region.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RGN_TYPE.ERROR">
            <summary>No region is created.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RGN_TYPE.NULLREGION">
            <summary>The region is empty.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RGN_TYPE.SIMPLEREGION">
            <summary>The region is a single rectangle.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RGN_TYPE.COMPLEXREGION">
            <summary>The region is more than a single rectangle.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.CombineRgn(Vanara.PInvoke.HRGN,Vanara.PInvoke.HRGN,Vanara.PInvoke.HRGN,Vanara.PInvoke.Gdi32.RGN_COMB)">
            <summary>
            The <c>CombineRgn</c> function combines two regions and stores the result in a third region. The two regions are combined
            according to the specified mode.
            </summary>
            <param name="hrgnDst">
            A handle to a new region with dimensions defined by combining two other regions. (This region must exist before <c>CombineRgn</c>
            is called.)
            </param>
            <param name="hrgnSrc1">A handle to the first of two regions to be combined.</param>
            <param name="hrgnSrc2">A handle to the second of two regions to be combined.</param>
            <param name="iMode">
            <para>A mode indicating how the two regions will be combined. This parameter can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>RGN_AND</term>
            <term>Creates the intersection of the two combined regions.</term>
            </item>
            <item>
            <term>RGN_COPY</term>
            <term>Creates a copy of the region identified by hrgnSrc1.</term>
            </item>
            <item>
            <term>RGN_DIFF</term>
            <term>Combines the parts of hrgnSrc1 that are not part of hrgnSrc2.</term>
            </item>
            <item>
            <term>RGN_OR</term>
            <term>Creates the union of two combined regions.</term>
            </item>
            <item>
            <term>RGN_XOR</term>
            <term>Creates the union of two combined regions except for any overlapping areas.</term>
            </item>
            </list>
            </param>
            <returns>
            <para>The return value specifies the type of the resulting region. It can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>NULLREGION</term>
            <term>The region is empty.</term>
            </item>
            <item>
            <term>SIMPLEREGION</term>
            <term>The region is a single rectangle.</term>
            </item>
            <item>
            <term>COMPLEXREGION</term>
            <term>The region is more than a single rectangle.</term>
            </item>
            <item>
            <term>ERROR</term>
            <term>No region is created.</term>
            </item>
            </list>
            </returns>
            <remarks>The three regions need not be distinct. For example, the hrgnSrc1 parameter can equal the hrgnDest parameter.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.CreateEllipticRgn(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>The <c>CreateEllipticRgn</c> function creates an elliptical region.</summary>
            <param name="x1">Specifies the x-coordinate in logical units, of the upper-left corner of the bounding rectangle of the ellipse.</param>
            <param name="y1">Specifies the y-coordinate in logical units, of the upper-left corner of the bounding rectangle of the ellipse.</param>
            <param name="x2">Specifies the x-coordinate in logical units, of the lower-right corner of the bounding rectangle of the ellipse.</param>
            <param name="y2">Specifies the y-coordinate in logical units, of the lower-right corner of the bounding rectangle of the ellipse.</param>
            <returns>
            <para>If the function succeeds, the return value is the handle to the region.</para>
            <para>If the function fails, the return value is <c>NULL</c>.</para>
            </returns>
            <remarks>
            <para>When you no longer need the HRGN object, call the DeleteObject function to delete it.</para>
            <para>
            A bounding rectangle defines the size, shape, and orientation of the region: The long sides of the rectangle define the length of
            the ellipse's major axis; the short sides define the length of the ellipse's minor axis; and the center of the rectangle defines
            the intersection of the major and minor axes.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.CreateEllipticRgnIndirect(Vanara.PInvoke.RECT@)">
            <summary>The <c>CreateEllipticRgnIndirect</c> function creates an elliptical region.</summary>
            <param name="lprect">
            Pointer to a RECT structure that contains the coordinates of the upper-left and lower-right corners of the bounding rectangle of
            the ellipse in logical units.
            </param>
            <returns>
            <para>If the function succeeds, the return value is the handle to the region.</para>
            <para>If the function fails, the return value is <c>NULL</c>.</para>
            </returns>
            <remarks>
            <para>When you no longer need the <c>HRGN</c> object, call the DeleteObject function to delete it.</para>
            <para>
            A bounding rectangle defines the size, shape, and orientation of the region: The long sides of the rectangle define the length of
            the ellipse's major axis; the short sides define the length of the ellipse's minor axis; and the center of the rectangle defines
            the intersection of the major and minor axes.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.CreatePolygonRgn(Vanara.PInvoke.POINT,System.Int32,Vanara.PInvoke.Gdi32.RGN_FILLMODE)">
            <summary>The <c>CreatePolygonRgn</c> function creates a polygonal region.</summary>
            <param name="pptl">
            A pointer to an array of POINT structures that define the vertices of the polygon in logical units. The polygon is presumed
            closed. Each vertex can be specified only once.
            </param>
            <param name="cPoint">The number of points in the array.</param>
            <param name="iMode">
            <para>The fill mode used to determine which pixels are in the region. This parameter can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>ALTERNATE</term>
            <term>Selects alternate mode (fills area between odd-numbered and even-numbered polygon sides on each scan line).</term>
            </item>
            <item>
            <term>WINDING</term>
            <term>Selects winding mode (fills any region with a nonzero winding value).</term>
            </item>
            </list>
            <para>For more information about these modes, see the SetPolyFillMode function.</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is the handle to the region.</para>
            <para>If the function fails, the return value is <c>NULL</c>.</para>
            </returns>
            <remarks>
            <para>When you no longer need the <c>HRGN</c> object, call the DeleteObject function to delete it.</para>
            <para>Region coordinates are represented as 27-bit signed integers.</para>
            <para>
            Regions created by the Create&lt;shape&gt;Rgn methods (such as CreateRectRgn and <c>CreatePolygonRgn</c>) only include the
            interior of the shape; the shape's outline is excluded from the region. This means that any point on a line between two
            sequential vertices is not included in the region. If you were to call PtInRegion for such a point, it would return zero as the result.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.CreatePolyPolygonRgn(Vanara.PInvoke.POINT[],System.Int32[],System.Int32,Vanara.PInvoke.Gdi32.RGN_FILLMODE)">
            <summary>The <c>CreatePolyPolygonRgn</c> function creates a region consisting of a series of polygons. The polygons can overlap.</summary>
            <param name="pptl">
            A pointer to an array of POINT structures that define the vertices of the polygons in logical units. The polygons are specified
            consecutively. Each polygon is presumed closed and each vertex is specified only once.
            </param>
            <param name="pc">
            A pointer to an array of integers, each of which specifies the number of points in one of the polygons in the array pointed to by lppt.
            </param>
            <param name="cPoly">The total number of integers in the array pointed to by lpPolyCounts.</param>
            <param name="iMode">
            <para>The fill mode used to determine which pixels are in the region. This parameter can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>ALTERNATE</term>
            <term>Selects alternate mode (fills area between odd-numbered and even-numbered polygon sides on each scan line).</term>
            </item>
            <item>
            <term>WINDING</term>
            <term>Selects winding mode (fills any region with a nonzero winding value).</term>
            </item>
            </list>
            <para>For more information about these modes, see the SetPolyFillMode function.</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is the handle to the region.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>When you no longer need the <c>HRGN</c> object, call the DeleteObject function to delete it.</para>
            <para>Region coordinates are represented as 27-bit signed integers.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.CreateRectRgn(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>The <c>CreateRectRgn</c> function creates a rectangular region.</summary>
            <param name="x1">Specifies the x-coordinate of the upper-left corner of the region in logical units.</param>
            <param name="y1">Specifies the y-coordinate of the upper-left corner of the region in logical units.</param>
            <param name="x2">Specifies the x-coordinate of the lower-right corner of the region in logical units.</param>
            <param name="y2">Specifies the y-coordinate of the lower-right corner of the region in logical units.</param>
            <returns>
            <para>If the function succeeds, the return value is the handle to the region.</para>
            <para>If the function fails, the return value is <c>NULL</c>.</para>
            </returns>
            <remarks>
            <para>When you no longer need the <c>HRGN</c> object, call the DeleteObject function to delete it.</para>
            <para>Region coordinates are represented as 27-bit signed integers.</para>
            <para>
            Regions created by the Create&lt;shape&gt;Rgn methods (such as <c>CreateRectRgn</c> and CreatePolygonRgn) only include the
            interior of the shape; the shape's outline is excluded from the region. This means that any point on a line between two
            sequential vertices is not included in the region. If you were to call PtInRegion for such a point, it would return zero as the result.
            </para>
            <para>Examples</para>
            <para>For an example, see Drawing Markers.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.CreateRectRgnIndirect(Vanara.PInvoke.RECT@)">
            <summary>The <c>CreateRectRgnIndirect</c> function creates a rectangular region.</summary>
            <param name="lprect">
            Pointer to a RECT structure that contains the coordinates of the upper-left and lower-right corners of the rectangle that defines
            the region in logical units.
            </param>
            <returns>
            <para>If the function succeeds, the return value is the handle to the region.</para>
            <para>If the function fails, the return value is <c>NULL</c>.</para>
            </returns>
            <remarks>
            <para>When you no longer need the <c>HRGN</c> object, call the DeleteObject function to delete it.</para>
            <para>Region coordinates are represented as 27-bit signed integers.</para>
            <para>The region will be exclusive of the bottom and right edges.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.CreateRoundRectRgn(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>The <c>CreateRoundRectRgn</c> function creates a rectangular region with rounded corners.</summary>
            <param name="x1">Specifies the x-coordinate of the upper-left corner of the region in device units.</param>
            <param name="y1">Specifies the y-coordinate of the upper-left corner of the region in device units.</param>
            <param name="x2">Specifies the x-coordinate of the lower-right corner of the region in device units.</param>
            <param name="y2">Specifies the y-coordinate of the lower-right corner of the region in device units.</param>
            <param name="w">Specifies the width of the ellipse used to create the rounded corners in device units.</param>
            <param name="h">Specifies the height of the ellipse used to create the rounded corners in device units.</param>
            <returns>
            <para>If the function succeeds, the return value is the handle to the region.</para>
            <para>If the function fails, the return value is <c>NULL</c>.</para>
            </returns>
            <remarks>
            <para>When you no longer need the <c>HRGN</c> object call the DeleteObject function to delete it.</para>
            <para>Region coordinates are represented as 27-bit signed integers.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.EqualRgn(Vanara.PInvoke.HRGN,Vanara.PInvoke.HRGN)">
            <summary>
            The <c>EqualRgn</c> function checks the two specified regions to determine whether they are identical. The function considers two
            regions identical if they are equal in size and shape.
            </summary>
            <param name="hrgn1">Handle to a region.</param>
            <param name="hrgn2">Handle to a region.</param>
            <returns>
            <para>If the two regions are equal, the return value is nonzero.</para>
            <para>
            If the two regions are not equal, the return value is zero. A return value of ERROR means at least one of the region handles is invalid.
            </para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.ExtCreateRegion(Vanara.PInvoke.Gdi32.XFORM@,System.UInt32,Vanara.PInvoke.Gdi32.RGNDATA)">
            <summary>The <c>ExtCreateRegion</c> function creates a region from the specified region and transformation data.</summary>
            <param name="lpx">
            A pointer to an XFORM structure that defines the transformation to be performed on the region. If this pointer is <c>NULL</c>,
            the identity transformation is used.
            </param>
            <param name="nCount">The number of bytes pointed to by lpRgnData.</param>
            <param name="lpData">A pointer to a RGNDATA structure that contains the region data in logical units.</param>
            <returns>
            <para>If the function succeeds, the return value is the value of the region.</para>
            <para>If the function fails, the return value is <c>NULL</c>.</para>
            </returns>
            <remarks>
            <para>Region coordinates are represented as 27-bit signed integers.</para>
            <para>An application can retrieve data for a region by calling the GetRegionData function.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.FillRgn(Vanara.PInvoke.HDC,Vanara.PInvoke.HRGN,Vanara.PInvoke.HBRUSH)">
            <summary>The <c>FillRgn</c> function fills a region by using the specified brush.</summary>
            <param name="hdc">Handle to the device context.</param>
            <param name="hrgn">Handle to the region to be filled. The region's coordinates are presumed to be in logical units.</param>
            <param name="hbr">Handle to the brush to be used to fill the region.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.FrameRgn(Vanara.PInvoke.HDC,Vanara.PInvoke.HRGN,Vanara.PInvoke.HBRUSH,System.Int32,System.Int32)">
            <summary>The <c>FrameRgn</c> function draws a border around the specified region by using the specified brush.</summary>
            <param name="hdc">Handle to the device context.</param>
            <param name="hrgn">
            Handle to the region to be enclosed in a border. The region's coordinates are presumed to be in logical units.
            </param>
            <param name="hbr">Handle to the brush to be used to draw the border.</param>
            <param name="w">Specifies the width, in logical units, of vertical brush strokes.</param>
            <param name="h">Specifies the height, in logical units, of horizontal brush strokes.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetPolyFillMode(Vanara.PInvoke.HDC)">
            <summary>The <c>GetPolyFillMode</c> function retrieves the current polygon fill mode.</summary>
            <param name="hdc">Handle to the device context.</param>
            <returns>
            <para>If the function succeeds, the return value specifies the polygon fill mode, which can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>ALTERNATE</term>
            <term>Selects alternate mode (fills area between odd-numbered and even-numbered polygon sides on each scan line).</term>
            </item>
            <item>
            <term>WINDING</term>
            <term>Selects winding mode (fills any region with a nonzero winding value).</term>
            </item>
            </list>
            <para>If an error occurs, the return value is zero.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetRegionData(Vanara.PInvoke.HRGN,System.UInt32,Vanara.PInvoke.Gdi32.RGNDATA)">
            <summary>
            The <c>GetRegionData</c> function fills the specified buffer with data describing a region. This data includes the dimensions of
            the rectangles that make up the region.
            </summary>
            <param name="hrgn">A handle to the region.</param>
            <param name="nCount">The size, in bytes, of the lpRgnData buffer.</param>
            <param name="lpRgnData">
            A pointer to a RGNDATA structure that receives the information. The dimensions of the region are in logical units. If this
            parameter is <c>NULL</c>, the return value contains the number of bytes needed for the region data.
            </param>
            <returns>
            <para>
            If the function succeeds and dwCount specifies an adequate number of bytes, the return value is always dwCount. If dwCount is too
            small or the function fails, the return value is 0. If lpRgnData is <c>NULL</c>, the return value is the required number of bytes.
            </para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>The <c>GetRegionData</c> function is used in conjunction with the ExtCreateRegion function.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetRgnBox(Vanara.PInvoke.HRGN,Vanara.PInvoke.RECT@)">
            <summary>The <c>GetRgnBox</c> function retrieves the bounding rectangle of the specified region.</summary>
            <param name="hrgn">A handle to the region.</param>
            <param name="lprc">A pointer to a RECT structure that receives the bounding rectangle in logical units.</param>
            <returns>
            <para>The return value specifies the region's complexity. It can be one of the following values:</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>NULLREGION</term>
            <term>Region is empty.</term>
            </item>
            <item>
            <term>SIMPLEREGION</term>
            <term>Region is a single rectangle.</term>
            </item>
            <item>
            <term>COMPLEXREGION</term>
            <term>Region is more than a single rectangle.</term>
            </item>
            </list>
            <para>If the hrgn parameter does not identify a valid region, the return value is zero.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.InvertRgn(Vanara.PInvoke.HDC,Vanara.PInvoke.HRGN)">
            <summary>The <c>InvertRgn</c> function inverts the colors in the specified region.</summary>
            <param name="hdc">Handle to the device context.</param>
            <param name="hrgn">
            Handle to the region for which colors are inverted. The region's coordinates are presumed to be logical coordinates.
            </param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>
            On monochrome screens, the <c>InvertRgn</c> function makes white pixels black and black pixels white. On color screens, this
            inversion is dependent on the type of technology used to generate the colors for the screen.
            </para>
            <para>Examples</para>
            <para>For an example, see Using Brushes.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.OffsetRgn(Vanara.PInvoke.HRGN,System.Int32,System.Int32)">
            <summary>The <c>OffsetRgn</c> function moves a region by the specified offsets.</summary>
            <param name="hrgn">Handle to the region to be moved.</param>
            <param name="x">Specifies the number of logical units to move left or right.</param>
            <param name="y">Specifies the number of logical units to move up or down.</param>
            <returns>
            <para>The return value specifies the new region's complexity. It can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>NULLREGION</term>
            <term>Region is empty.</term>
            </item>
            <item>
            <term>SIMPLEREGION</term>
            <term>Region is a single rectangle.</term>
            </item>
            <item>
            <term>COMPLEXREGION</term>
            <term>Region is more than one rectangle.</term>
            </item>
            <item>
            <term>ERROR</term>
            <term>An error occurred; region is unaffected.</term>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.PaintRgn(Vanara.PInvoke.HDC,Vanara.PInvoke.HRGN)">
            <summary>The <c>PaintRgn</c> function paints the specified region by using the brush currently selected into the device context.</summary>
            <param name="hdc">Handle to the device context.</param>
            <param name="hrgn">Handle to the region to be filled. The region's coordinates are presumed to be logical coordinates.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.PtInRegion(Vanara.PInvoke.HRGN,System.Int32,System.Int32)">
            <summary>The <c>PtInRegion</c> function determines whether the specified point is inside the specified region.</summary>
            <param name="hrgn">Handle to the region to be examined.</param>
            <param name="x">Specifies the x-coordinate of the point in logical units.</param>
            <param name="y">Specifies the y-coordinate of the point in logical units.</param>
            <returns>
            <para>If the specified point is in the region, the return value is nonzero.</para>
            <para>If the specified point is not in the region, the return value is zero.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.RectInRegion(Vanara.PInvoke.HRGN,Vanara.PInvoke.RECT@)">
            <summary>
            The <c>RectInRegion</c> function determines whether any part of the specified rectangle is within the boundaries of a region.
            </summary>
            <param name="hrgn">Handle to the region.</param>
            <param name="lprect">
            Pointer to a RECT structure containing the coordinates of the rectangle in logical units. The lower and right edges of the
            rectangle are not included.
            </param>
            <returns>
            <para>If any part of the specified rectangle lies within the boundaries of the region, the return value is nonzero.</para>
            <para>If no part of the specified rectangle lies within the boundaries of the region, the return value is zero.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SetPolyFillMode(Vanara.PInvoke.HDC,Vanara.PInvoke.Gdi32.RGN_FILLMODE)">
            <summary>The <c>SetPolyFillMode</c> function sets the polygon fill mode for functions that fill polygons.</summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="mode">
            <para>The new fill mode. This parameter can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>ALTERNATE</term>
            <term>Selects alternate mode (fills the area between odd-numbered and even-numbered polygon sides on each scan line).</term>
            </item>
            <item>
            <term>WINDING</term>
            <term>Selects winding mode (fills any region with a nonzero winding value).</term>
            </item>
            </list>
            </param>
            <returns>The return value specifies the previous filling mode. If an error occurs, the return value is zero.</returns>
            <remarks>
            <para>
            In general, the modes differ only in cases where a complex, overlapping polygon must be filled (for example, a five-sided polygon
            that forms a five-pointed star with a pentagon in the center). In such cases, ALTERNATE mode fills every other enclosed region
            within the polygon (that is, the points of the star), but WINDING mode fills all regions (that is, the points and the pentagon).
            </para>
            <para>
            When the fill mode is ALTERNATE, GDI fills the area between odd-numbered and even-numbered polygon sides on each scan line. That
            is, GDI fills the area between the first and second side, between the third and fourth side, and so on.
            </para>
            <para>
            When the fill mode is WINDING, GDI fills any region that has a nonzero winding value. This value is defined as the number of
            times a pen used to draw the polygon would go around the region. The direction of each edge of the polygon is important.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SetRectRgn(Vanara.PInvoke.HRGN,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>The <c>SetRectRgn</c> function converts a region into a rectangular region with the specified coordinates.</summary>
            <param name="hrgn">Handle to the region.</param>
            <param name="left">Specifies the x-coordinate of the upper-left corner of the rectangular region in logical units.</param>
            <param name="top">Specifies the y-coordinate of the upper-left corner of the rectangular region in logical units.</param>
            <param name="right">Specifies the x-coordinate of the lower-right corner of the rectangular region in logical units.</param>
            <param name="bottom">Specifies the y-coordinate of the lower-right corner of the rectangular region in logical units.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>The region does not include the lower and right boundaries of the rectangle.</remarks>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.RGNDATAHEADER">
            <summary>The <c>RGNDATAHEADER</c> structure describes the data returned by the GetRegionData function.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RGNDATAHEADER.dwSize">
            <summary>The size, in bytes, of the header.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RGNDATAHEADER.iType">
            <summary>The type of region. This value must be RDH_RECTANGLES.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RGNDATAHEADER.nCount">
            <summary>The number of rectangles that make up the region.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RGNDATAHEADER.nRgnSize">
            <summary>
            The size of the RGNDATA buffer required to receive the RECT structures that make up the region. If the size is not known,
            this member can be zero.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RGNDATAHEADER.rcBound">
            <summary>A bounding rectangle for the region in logical units.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.RGNDATA">
            <summary>
            The <c>RGNDATA</c> structure contains a header and an array of rectangles that compose a region. The rectangles are sorted top to
            bottom, left to right. They do not overlap.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.RGNDATA.rdh">
            <summary>
            A RGNDATAHEADER structure. The members of this structure specify the type of region (whether it is rectangular or
            trapezoidal), the number of rectangles that make up the region, the size of the buffer that contains the rectangle
            structures, and so on.
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.Gdi32.RGNDATA.Buffer">
            <summary>Specifies an arbitrary-size buffer that contains the RECT structures that make up the region.</summary>
        </member>
        <member name="P:Vanara.PInvoke.Gdi32.RGNDATA.Size">
            <summary>Gets the size, in bytes, of the structure with allocated memory for <see cref="P:Vanara.PInvoke.Gdi32.RGNDATA.Buffer"/>.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.RGNDATA.#ctor(Vanara.PInvoke.RECT@,System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Gdi32.RGNDATA"/> class.</summary>
            <param name="bounds">A bounding rectangle for the region in logical units.</param>
            <param name="count">The number of rectangles that make up the region.</param>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.RGNDATA.#ctor(Vanara.PInvoke.RECT@,Vanara.PInvoke.RECT[])">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Gdi32.RGNDATA"/> class.</summary>
            <param name="bounds">A bounding rectangle for the region in logical units.</param>
            <param name="rects">The RECT structures that make up the region.</param>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.RGNDATA.System#IDisposable#Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.GdiObjectContext">
             <summary>Provides a selection context for graphics objects.</summary>
             <example>
             <code language="cs" title="Using a pen and brush">
             using (var screenDC = SafeHDC.ScreenCompatibleDCHandle)
             {
             var brush = CreateSolidBrush(Color.Red);
             using (new GdiObjectContext(screenDC, brush))
             {
             // Do brush stuff
             }
            
             var pen = CreatePen(PS_SOLID, 1, Color.Black);
             // Alternatively, call the SelectObject method on the SafeHDC object
             using (screenDC.SelectObject(pen))
             {
             // Do pen stuff
             }
             }
             </code>
             </example>
             <seealso cref="T:System.IDisposable"/>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GdiObjectContext.#ctor(Vanara.PInvoke.HDC,Vanara.PInvoke.HGDIOBJ)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Gdi32.GdiObjectContext"/> class.</summary>
            <param name="hdc">The HDC into which <paramref name="hObj"/> is selected.</param>
            <param name="hObj">The graphics object to select.</param>
            <exception cref="T:System.ArgumentNullException">hdc - Device context cannot be null.</exception>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GdiObjectContext.System#IDisposable#Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.SafeHBITMAP">
            <summary>
            Provides a <see cref="T:System.Runtime.InteropServices.SafeHandle"/> to a graphics bitmap object that releases a created HBITMAP instance at disposal using DeleteObject.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SafeHBITMAP.#ctor(System.IntPtr,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Gdi32.SafeHBITMAP"/> class and assigns an existing handle.</summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
            <param name="ownsHandle">
            <see langword="true"/> to reliably release the handle during the finalization phase; otherwise, <see langword="false"/> (not recommended).
            </param>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.SafeHBITMAP.Null">
            <summary>A NULL value for this handle.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SafeHBITMAP.op_Implicit(Vanara.PInvoke.Gdi32.SafeHBITMAP)~Vanara.PInvoke.HBITMAP">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.Gdi32.SafeHBITMAP"/> to <see cref="T:Vanara.PInvoke.HBITMAP"/>.</summary>
            <param name="h">The safe handle instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SafeHBITMAP.op_Implicit(Vanara.PInvoke.Gdi32.SafeHBITMAP)~Vanara.PInvoke.HGDIOBJ">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.Gdi32.SafeHBITMAP"/> to <see cref="T:Vanara.PInvoke.HGDIOBJ"/>.</summary>
            <param name="h">The safe handle instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SafeHBITMAP.InternalReleaseHandle">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.SafeHBRUSH">
            <summary>
            Provides a <see cref="T:System.Runtime.InteropServices.SafeHandle"/> to a graphics bitmap object that releases a created HBRUSH instance at disposal using DeleteObject.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SafeHBRUSH.#ctor(System.IntPtr,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Gdi32.SafeHBRUSH"/> class and assigns an existing handle.</summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
            <param name="ownsHandle">
            <see langword="true"/> to reliably release the handle during the finalization phase; otherwise, <see langword="false"/> (not recommended).
            </param>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.SafeHBRUSH.Null">
            <summary>A NULL value for this handle.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SafeHBRUSH.op_Implicit(Vanara.PInvoke.Gdi32.SafeHBRUSH)~Vanara.PInvoke.HBRUSH">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.Gdi32.SafeHBRUSH"/> to <see cref="T:Vanara.PInvoke.HBRUSH"/>.</summary>
            <param name="h">The safe handle instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SafeHBRUSH.op_Implicit(Vanara.PInvoke.Gdi32.SafeHBRUSH)~Vanara.PInvoke.HGDIOBJ">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.Gdi32.SafeHBRUSH"/> to <see cref="T:Vanara.PInvoke.HGDIOBJ"/>.</summary>
            <param name="h">The safe handle instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SafeHBRUSH.InternalReleaseHandle">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.SafeHDC">
            <summary>A SafeHandle to track DC handles.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SafeHDC.#ctor(System.IntPtr,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Gdi32.SafeHDC"/> class and assigns an existing handle.</summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
            <param name="ownsHandle">
            <see langword="true"/> to reliably release the handle during the finalization phase; otherwise, <see langword="false"/> (not recommended).
            </param>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.SafeHDC.Null">
            <summary>A NULL value for this handle.</summary>
        </member>
        <member name="P:Vanara.PInvoke.Gdi32.SafeHDC.ScreenCompatibleDCHandle">
            <summary>Gets the screen compatible device context handle.</summary>
            <value>The screen compatible device context handle.</value>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SafeHDC.op_Implicit(Vanara.PInvoke.Gdi32.SafeHDC)~Vanara.PInvoke.HDC">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.Gdi32.SafeHDC"/> to <see cref="T:Vanara.PInvoke.HDC"/>.</summary>
            <param name="h">The safe handle instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SafeHDC.GetCompatibleDCHandle">
            <summary>Gets the compatible device context handle.</summary>
            <returns>A device context handle.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SafeHDC.SelectObject(Vanara.PInvoke.HGDIOBJ)">
            <summary>Creates a context into which a graphics object is selected.</summary>
            <param name="hObject">The graphics object to select.</param>
            <returns>A selection context for the graphics object.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SafeHDC.InternalReleaseHandle">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.SafeHFONT">
            <summary>
            Provides a <see cref="T:System.Runtime.InteropServices.SafeHandle"/> to a graphics bitmap object that releases a created HFONT instance at disposal using DeleteObject.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SafeHFONT.#ctor(System.IntPtr,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Gdi32.SafeHFONT"/> class and assigns an existing handle.</summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
            <param name="ownsHandle">
            <see langword="true"/> to reliably release the handle during the finalization phase; otherwise, <see langword="false"/> (not recommended).
            </param>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.SafeHFONT.Null">
            <summary>A NULL value for this handle.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SafeHFONT.op_Implicit(Vanara.PInvoke.Gdi32.SafeHFONT)~Vanara.PInvoke.HFONT">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.Gdi32.SafeHFONT"/> to <see cref="T:Vanara.PInvoke.HFONT"/>.</summary>
            <param name="h">The safe handle instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SafeHFONT.op_Implicit(Vanara.PInvoke.Gdi32.SafeHFONT)~Vanara.PInvoke.HGDIOBJ">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.Gdi32.SafeHFONT"/> to <see cref="T:Vanara.PInvoke.HGDIOBJ"/>.</summary>
            <param name="h">The safe handle instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SafeHFONT.InternalReleaseHandle">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.SafeHPALETTE">
            <summary>
            Provides a <see cref="T:System.Runtime.InteropServices.SafeHandle"/> to a graphics color palette object that releases a created HPALETTE instance at disposal
            using DeleteObject.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SafeHPALETTE.#ctor(System.IntPtr,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Gdi32.SafeHPALETTE"/> class and assigns an existing handle.</summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
            <param name="ownsHandle">
            <see langword="true"/> to reliably release the handle during the finalization phase; otherwise, <see langword="false"/> (not recommended).
            </param>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.SafeHPALETTE.Null">
            <summary>A NULL value for this handle.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SafeHPALETTE.op_Implicit(Vanara.PInvoke.Gdi32.SafeHPALETTE)~Vanara.PInvoke.HGDIOBJ">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.Gdi32.SafeHPALETTE"/> to <see cref="T:Vanara.PInvoke.HGDIOBJ"/>.</summary>
            <param name="h">The safe handle instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SafeHPALETTE.op_Implicit(Vanara.PInvoke.Gdi32.SafeHPALETTE)~Vanara.PInvoke.HPALETTE">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.Gdi32.SafeHPALETTE"/> to <see cref="T:Vanara.PInvoke.HPALETTE"/>.</summary>
            <param name="h">The safe handle instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SafeHPALETTE.InternalReleaseHandle">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.SafeHPEN">
            <summary>
            Provides a <see cref="T:System.Runtime.InteropServices.SafeHandle"/> to a graphics bitmap object that releases a created HPEN instance at disposal using DeleteObject.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SafeHPEN.#ctor(System.IntPtr,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Gdi32.SafeHPEN"/> class and assigns an existing handle.</summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
            <param name="ownsHandle">
            <see langword="true"/> to reliably release the handle during the finalization phase; otherwise, <see langword="false"/> (not recommended).
            </param>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.SafeHPEN.Null">
            <summary>A NULL value for this handle.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SafeHPEN.op_Implicit(Vanara.PInvoke.Gdi32.SafeHPEN)~Vanara.PInvoke.HGDIOBJ">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.Gdi32.SafeHPEN"/> to <see cref="T:Vanara.PInvoke.HGDIOBJ"/>.</summary>
            <param name="h">The safe handle instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SafeHPEN.op_Implicit(Vanara.PInvoke.Gdi32.SafeHPEN)~Vanara.PInvoke.HPEN">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.Gdi32.SafeHPEN"/> to <see cref="T:Vanara.PInvoke.HPEN"/>.</summary>
            <param name="h">The safe handle instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SafeHPEN.InternalReleaseHandle">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.SafeHRGN">
            <summary>
            Provides a <see cref="T:System.Runtime.InteropServices.SafeHandle"/> to a graphics bitmap object that releases a created HRGN instance at disposal using DeleteObject.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SafeHRGN.#ctor(System.IntPtr,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Gdi32.SafeHRGN"/> class and assigns an existing handle.</summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
            <param name="ownsHandle">
            <see langword="true"/> to reliably release the handle during the finalization phase; otherwise, <see langword="false"/> (not recommended).
            </param>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.SafeHRGN.Null">
            <summary>A NULL value for this handle.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SafeHRGN.op_Implicit(Vanara.PInvoke.Gdi32.SafeHRGN)~Vanara.PInvoke.HGDIOBJ">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.Gdi32.SafeHRGN"/> to <see cref="T:Vanara.PInvoke.HGDIOBJ"/>.</summary>
            <param name="h">The safe handle instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SafeHRGN.op_Implicit(Vanara.PInvoke.Gdi32.SafeHRGN)~Vanara.PInvoke.HRGN">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.Gdi32.SafeHRGN"/> to <see cref="T:Vanara.PInvoke.HRGN"/>.</summary>
            <param name="h">The safe handle instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SafeHRGN.InternalReleaseHandle">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.LineDDAProc">
            <summary>
            The <c>LineDDAProc</c> function is an application-defined callback function used with the LineDDA function. It is used to process
            coordinates. The <c>LINEDDAPROC</c> type defines a pointer to this callback function. <c>LineDDAProc</c> is a placeholder for the
            application-defined function name.
            </summary>
            <param name="X">Specifies the x-coordinate of the current point.</param>
            <param name="Y">Specifies the y-coordinate of the current point.</param>
            <param name="lpData">Points to the application-defined data.</param>
            <returns>This function does not return a value.</returns>
            <remarks>An application registers a <c>LineDDAProc</c> function by passing its address to the LineDDA function.</remarks>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.ArcDirection">
            <summary>
            <para>The <c>ArcDirection</c> enumeration is used in setting the drawing direction for arcs and rectangles.</para>
            <para><c>AD_COUNTERCLOCKWISE:</c> Figures drawn counterclockwise.</para>
            <para><c>AD_CLOCKWISE:</c> Figures drawn clockwise.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ArcDirection.AD_COUNTERCLOCKWISE">
            <summary>Figures drawn counterclockwise.</summary>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.ArcDirection.AD_CLOCKWISE">
            <summary>Figures drawn clockwise.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.AngleArc(Vanara.PInvoke.HDC,System.Int32,System.Int32,System.UInt32,System.Single,System.Single)">
            <summary>
            The <c>AngleArc</c> function draws a line segment and an arc. The line segment is drawn from the current position to the
            beginning of the arc. The arc is drawn along the perimeter of a circle with the given radius and center. The length of the arc is
            defined by the given start and sweep angles.
            </summary>
            <param name="hdc">Handle to a device context.</param>
            <param name="x">Specifies the x-coordinate, in logical units, of the center of the circle.</param>
            <param name="y">Specifies the y-coordinate, in logical units, of the center of the circle.</param>
            <param name="r">Specifies the radius, in logical units, of the circle. This value must be positive.</param>
            <param name="StartAngle">Specifies the start angle, in degrees, relative to the x-axis.</param>
            <param name="SweepAngle">Specifies the sweep angle, in degrees, relative to the starting angle.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>The <c>AngleArc</c> function moves the current position to the ending point of the arc.</para>
            <para>
            The arc drawn by this function may appear to be elliptical, depending on the current transformation and mapping mode. Before
            drawing the arc, <c>AngleArc</c> draws the line segment from the current position to the beginning of the arc.
            </para>
            <para>
            The arc is drawn by constructing an imaginary circle around the specified center point with the specified radius. The starting
            point of the arc is determined by measuring counterclockwise from the x-axis of the circle by the number of degrees in the start
            angle. The ending point is similarly located by measuring counterclockwise from the starting point by the number of degrees in
            the sweep angle.
            </para>
            <para>If the sweep angle is greater than 360 degrees, the arc is swept multiple times.</para>
            <para>This function draws lines by using the current pen. The figure is not filled.</para>
            <para>Examples</para>
            <para>For an example, see Drawing a Pie Chart.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.Arc(Vanara.PInvoke.HDC,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>The <c>Arc</c> function draws an elliptical arc.</summary>
            <param name="hdc">A handle to the device context where drawing takes place.</param>
            <param name="x1">The x-coordinate, in logical units, of the upper-left corner of the bounding rectangle.</param>
            <param name="y1">The y-coordinate, in logical units, of the upper-left corner of the bounding rectangle.</param>
            <param name="x2">The x-coordinate, in logical units, of the lower-right corner of the bounding rectangle.</param>
            <param name="y2">The y-coordinate, in logical units, of the lower-right corner of the bounding rectangle.</param>
            <param name="x3">
            The x-coordinate, in logical units, of the ending point of the radial line defining the starting point of the arc.
            </param>
            <param name="y3">
            The y-coordinate, in logical units, of the ending point of the radial line defining the starting point of the arc.
            </param>
            <param name="x4">
            The x-coordinate, in logical units, of the ending point of the radial line defining the ending point of the arc.
            </param>
            <param name="y4">
            The y-coordinate, in logical units, of the ending point of the radial line defining the ending point of the arc.
            </param>
            <returns>
            <para>If the arc is drawn, the return value is nonzero.</para>
            <para>If the arc is not drawn, the return value is zero.</para>
            </returns>
            <remarks>
            <para>
            The points (nLeftRect, nTopRect) and (nRightRect, nBottomRect) specify the bounding rectangle. An ellipse formed by the specified
            bounding rectangle defines the curve of the arc. The arc extends in the current drawing direction from the point where it
            intersects the radial from the center of the bounding rectangle to the (nXStartArc, nYStartArc) point. The arc ends where it
            intersects the radial from the center of the bounding rectangle to the (nXEndArc, nYEndArc) point. If the starting point and
            ending point are the same, a complete ellipse is drawn.
            </para>
            <para>The arc is drawn using the current pen; it is not filled.</para>
            <para>The current position is neither used nor updated by <c>Arc</c>.</para>
            <para>
            Use the GetArcDirection and SetArcDirection functions to get and set the current drawing direction for a device context. The
            default drawing direction is counterclockwise.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.ArcTo(Vanara.PInvoke.HDC,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>The <c>ArcTo</c> function draws an elliptical arc.</summary>
            <param name="hdc">A handle to the device context where drawing takes place.</param>
            <param name="left">The x-coordinate, in logical units, of the upper-left corner of the bounding rectangle.</param>
            <param name="top">The y-coordinate, in logical units, of the upper-left corner of the bounding rectangle.</param>
            <param name="right">The x-coordinate, in logical units, of the lower-right corner of the bounding rectangle.</param>
            <param name="bottom">The y-coordinate, in logical units, of the lower-right corner of the bounding rectangle.</param>
            <param name="xr1">The x-coordinate, in logical units, of the endpoint of the radial defining the starting point of the arc.</param>
            <param name="yr1">The y-coordinate, in logical units, of the endpoint of the radial defining the starting point of the arc.</param>
            <param name="xr2">The x-coordinate, in logical units, of the endpoint of the radial defining the ending point of the arc.</param>
            <param name="yr2">The y-coordinate, in logical units, of the endpoint of the radial defining the ending point of the arc.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para><c>ArcTo</c> is similar to the Arc function, except that the current position is updated.</para>
            <para>
            The points (nLeftRect, nTopRect) and (nRightRect, nBottomRect) specify the bounding rectangle. An ellipse formed by the specified
            bounding rectangle defines the curve of the arc. The arc extends counterclockwise from the point where it intersects the radial
            line from the center of the bounding rectangle to the (nXRadial1, nYRadial1) point. The arc ends where it intersects the radial
            line from the center of the bounding rectangle to the (nXRadial2, nYRadial2) point. If the starting point and ending point are
            the same, a complete ellipse is drawn.
            </para>
            <para>
            A line is drawn from the current position to the starting point of the arc. If no error occurs, the current position is set to
            the ending point of the arc.
            </para>
            <para>The arc is drawn using the current pen; it is not filled.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.Chord(Vanara.PInvoke.HDC,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            The <c>Chord</c> function draws a chord (a region bounded by the intersection of an ellipse and a line segment, called a secant).
            The chord is outlined by using the current pen and filled by using the current brush.
            </summary>
            <param name="hdc">A handle to the device context in which the chord appears.</param>
            <param name="x1">The x-coordinate, in logical coordinates, of the upper-left corner of the bounding rectangle.</param>
            <param name="y1">The y-coordinate, in logical coordinates, of the upper-left corner of the bounding rectangle.</param>
            <param name="x2">The x-coordinate, in logical coordinates, of the lower-right corner of the bounding rectangle.</param>
            <param name="y2">The y-coordinate, in logical coordinates, of the lower-right corner of the bounding rectangle.</param>
            <param name="x3">The x-coordinate, in logical coordinates, of the endpoint of the radial defining the beginning of the chord.</param>
            <param name="y3">The y-coordinate, in logical coordinates, of the endpoint of the radial defining the beginning of the chord.</param>
            <param name="x4">The x-coordinate, in logical coordinates, of the endpoint of the radial defining the end of the chord.</param>
            <param name="y4">The y-coordinate, in logical coordinates, of the endpoint of the radial defining the end of the chord.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>
            The curve of the chord is defined by an ellipse that fits the specified bounding rectangle. The curve begins at the point where
            the ellipse intersects the first radial and extends counterclockwise to the point where the ellipse intersects the second radial.
            The chord is closed by drawing a line from the intersection of the first radial and the curve to the intersection of the second
            radial and the curve.
            </para>
            <para>If the starting point and ending point of the curve are the same, a complete ellipse is drawn.</para>
            <para>The current position is neither used nor updated by <c>Chord</c>.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.Ellipse(Vanara.PInvoke.HDC,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            The <c>Ellipse</c> function draws an ellipse. The center of the ellipse is the center of the specified bounding rectangle. The
            ellipse is outlined by using the current pen and is filled by using the current brush.
            </summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="left">The x-coordinate, in logical coordinates, of the upper-left corner of the bounding rectangle.</param>
            <param name="top">The y-coordinate, in logical coordinates, of the upper-left corner of the bounding rectangle.</param>
            <param name="right">The x-coordinate, in logical coordinates, of the lower-right corner of the bounding rectangle.</param>
            <param name="bottom">The y-coordinate, in logical coordinates, of the lower-right corner of the bounding rectangle.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>The current position is neither used nor updated by <c>Ellipse</c>.</para>
            <para>Examples</para>
            <para>For an example, see Using Filled Shapes.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GetArcDirection(Vanara.PInvoke.HDC)">
            <summary>
            The <c>GetArcDirection</c> function retrieves the current arc direction for the specified device context. Arc and rectangle
            functions use the arc direction.
            </summary>
            <param name="hdc">Handle to the device context.</param>
            <returns>
            <para>The return value specifies the current arc direction; it can be any one of the following values:</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>AD_COUNTERCLOCKWISE</term>
            <term>Arcs and rectangles are drawn counterclockwise.</term>
            </item>
            <item>
            <term>AD_CLOCKWISE</term>
            <term>Arcs and rectangles are drawn clockwise.</term>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.LineDDA(System.Int32,System.Int32,System.Int32,System.Int32,Vanara.PInvoke.Gdi32.LineDDAProc,System.IntPtr)">
            <summary>
            The <c>LineDDA</c> function determines which pixels should be highlighted for a line defined by the specified starting and ending points.
            </summary>
            <param name="xStart">Specifies the x-coordinate, in logical units, of the line's starting point.</param>
            <param name="yStart">Specifies the y-coordinate, in logical units, of the line's starting point.</param>
            <param name="xEnd">Specifies the x-coordinate, in logical units, of the line's ending point.</param>
            <param name="yEnd">Specifies the y-coordinate, in logical units, of the line's ending point.</param>
            <param name="lpProc">
            Pointer to an application-defined callback function. For more information, see the LineDDAProc callback function.
            </param>
            <param name="data">Pointer to the application-defined data.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>
            The <c>LineDDA</c> function passes the coordinates for each point along the line, except for the line's ending point, to the
            application-defined callback function. In addition to passing the coordinates of a point, this function passes any existing
            application-defined data.
            </para>
            <para>
            The coordinates passed to the callback function match pixels on a video display only if the default transformations and mapping
            modes are used.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.LineTo(Vanara.PInvoke.HDC,System.Int32,System.Int32)">
            <summary>The <c>LineTo</c> function draws a line from the current position up to, but not including, the specified point.</summary>
            <param name="hdc">Handle to a device context.</param>
            <param name="x">Specifies the x-coordinate, in logical units, of the line's ending point.</param>
            <param name="y">Specifies the y-coordinate, in logical units, of the line's ending point.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>The line is drawn by using the current pen and, if the pen is a geometric pen, the current brush.</para>
            <para>If <c>LineTo</c> succeeds, the current position is set to the specified ending point.</para>
            <para>Examples</para>
            <para>For an example, see Drawing Markers.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.MoveToEx(Vanara.PInvoke.HDC,System.Int32,System.Int32,Vanara.PInvoke.POINT@)">
            <summary>
            The <c>MoveToEx</c> function updates the current position to the specified point and optionally returns the previous position.
            </summary>
            <param name="hdc">Handle to a device context.</param>
            <param name="x">Specifies the x-coordinate, in logical units, of the new position, in logical units.</param>
            <param name="y">Specifies the y-coordinate, in logical units, of the new position, in logical units.</param>
            <param name="lppt">
            Pointer to a POINT structure that receives the previous current position. If this parameter is a <c>NULL</c> pointer, the
            previous position is not returned.
            </param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>The <c>MoveToEx</c> function affects all drawing functions.</para>
            <para>Examples</para>
            <para>For an example, see Drawing Markers.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.Pie(Vanara.PInvoke.HDC,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            The <c>Pie</c> function draws a pie-shaped wedge bounded by the intersection of an ellipse and two radials. The pie is outlined
            by using the current pen and filled by using the current brush.
            </summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="left">The x-coordinate, in logical coordinates, of the upper-left corner of the bounding rectangle.</param>
            <param name="top">The y-coordinate, in logical coordinates, of the upper-left corner of the bounding rectangle.</param>
            <param name="right">The x-coordinate, in logical coordinates, of the lower-right corner of the bounding rectangle.</param>
            <param name="bottom">The y-coordinate, in logical coordinates, of the lower-right corner of the bounding rectangle.</param>
            <param name="xr1">The x-coordinate, in logical coordinates, of the endpoint of the first radial.</param>
            <param name="yr1">The y-coordinate, in logical coordinates, of the endpoint of the first radial.</param>
            <param name="xr2">The x-coordinate, in logical coordinates, of the endpoint of the second radial.</param>
            <param name="yr2">The y-coordinate, in logical coordinates, of the endpoint of the second radial.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>
            The curve of the pie is defined by an ellipse that fits the specified bounding rectangle. The curve begins at the point where the
            ellipse intersects the first radial and extends counterclockwise to the point where the ellipse intersects the second radial.
            </para>
            <para>The current position is neither used nor updated by the <c>Pie</c> function.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.PolyBezier(Vanara.PInvoke.HDC,Vanara.PInvoke.POINT[],System.UInt32)">
            <summary>The <c>PolyBezier</c> function draws one or more Bézier curves.</summary>
            <param name="hdc">A handle to a device context.</param>
            <param name="apt">
            A pointer to an array of POINT structures that contain the endpoints and control points of the curve(s), in logical units.
            </param>
            <param name="cpt">
            The number of points in the lppt array. This value must be one more than three times the number of curves to be drawn, because
            each Bézier curve requires two control points and an endpoint, and the initial curve requires an additional starting point.
            </param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>
            The <c>PolyBezier</c> function draws cubic Bézier curves by using the endpoints and control points specified by the lppt
            parameter. The first curve is drawn from the first point to the fourth point by using the second and third points as control
            points. Each subsequent curve in the sequence needs exactly three more points: the ending point of the previous curve is used as
            the starting point, the next two points in the sequence are control points, and the third is the ending point.
            </para>
            <para>The current position is neither used nor updated by the <c>PolyBezier</c> function. The figure is not filled.</para>
            <para>This function draws lines by using the current pen.</para>
            <para>Examples</para>
            <para>For an example, see Redrawing in the Update Region.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.PolyBezierTo(Vanara.PInvoke.HDC,Vanara.PInvoke.POINT[],System.UInt32)">
            <summary>The <c>PolyBezierTo</c> function draws one or more Bézier curves.</summary>
            <param name="hdc">A handle to a device context.</param>
            <param name="apt">A pointer to an array of POINT structures that contains the endpoints and control points, in logical units.</param>
            <param name="cpt">
            The number of points in the lppt array. This value must be three times the number of curves to be drawn because each Bézier curve
            requires two control points and an ending point.
            </param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>
            This function draws cubic Bézier curves by using the control points specified by the lppt parameter. The first curve is drawn
            from the current position to the third point by using the first two points as control points. For each subsequent curve, the
            function needs exactly three more points, and uses the ending point of the previous curve as the starting point for the next.
            </para>
            <para><c>PolyBezierTo</c> moves the current position to the ending point of the last Bézier curve. The figure is not filled.</para>
            <para>This function draws lines by using the current pen.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.PolyDraw(Vanara.PInvoke.HDC,Vanara.PInvoke.POINT[],Vanara.PInvoke.Gdi32.VertexType[],System.Int32)">
            <summary>The <c>PolyDraw</c> function draws a set of line segments and Bézier curves.</summary>
            <param name="hdc">A handle to a device context.</param>
            <param name="apt">
            A pointer to an array of POINT structures that contains the endpoints for each line segment and the endpoints and control points
            for each Bézier curve, in logical units.
            </param>
            <param name="aj">
            <para>
            A pointer to an array that specifies how each point in the lppt array is used. This parameter can be one of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Type</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>PT_MOVETO</term>
            <term>Specifies that this point starts a disjoint figure. This point becomes the new current position.</term>
            </item>
            <item>
            <term>PT_LINETO</term>
            <term>Specifies that a line is to be drawn from the current position to this point, which then becomes the new current position.</term>
            </item>
            <item>
            <term>PT_BEZIERTO</term>
            <term>
            Specifies that this point is a control point or ending point for a Bézier curve. PT_BEZIERTO types always occur in sets of three.
            The current position defines the starting point for the Bézier curve. The first two PT_BEZIERTO points are the control points,
            and the third PT_BEZIERTO point is the ending point. The ending point becomes the new current position. If there are not three
            consecutive PT_BEZIERTO points, an error results.
            </term>
            </item>
            </list>
            <para>
            A PT_LINETO or PT_BEZIERTO type can be combined with the following value by using the bitwise operator OR to indicate that the
            corresponding point is the last point in a figure and the figure is closed.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>PT_CLOSEFIGURE</term>
            <term>
            Specifies that the figure is automatically closed after the PT_LINETO or PT_BEZIERTO type for this point is done. A line is drawn
            from this point to the most recent PT_MOVETO or MoveToEx point. This value is combined with the PT_LINETO type for a line, or
            with the PT_BEZIERTO type of the ending point for a Bézier curve, by using the bitwise operator OR. The current position is set
            to the ending point of the closing line.
            </term>
            </item>
            </list>
            </param>
            <param name="cpt">The total number of points in the lppt array, the same as the number of bytes in the lpbTypes array.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>
            The <c>PolyDraw</c> function can be used in place of consecutive calls to MoveToEx, LineTo, and PolyBezierTo functions to draw
            disjoint figures. The lines and curves are drawn using the current pen and figures are not filled. If there is an active path
            started by calling BeginPath, <c>PolyDraw</c> adds to the path.
            </para>
            <para>
            The points contained in the lppt array and in the lpbTypes array indicate whether each point is part of a MoveTo, LineTo, or
            PolyBezierTo operation. It is also possible to close figures.
            </para>
            <para>This function updates the current position.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.Polygon(Vanara.PInvoke.HDC,Vanara.PInvoke.POINT[],System.Int32)">
            <summary>
            The <c>Polygon</c> function draws a polygon consisting of two or more vertices connected by straight lines. The polygon is
            outlined by using the current pen and filled by using the current brush and polygon fill mode.
            </summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="apt">A pointer to an array of POINT structures that specify the vertices of the polygon, in logical coordinates.</param>
            <param name="cpt">The number of vertices in the array. This value must be greater than or equal to 2.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>The polygon is closed automatically by drawing a line from the last vertex to the first.</para>
            <para>The current position is neither used nor updated by the <c>Polygon</c> function.</para>
            <para>
            Any extra points are ignored. To draw a line with more points, divide your data into groups, each of which have less than the
            maximum number of points, and call the function for each group of points. Remember to connect the line segments.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.Polyline(Vanara.PInvoke.HDC,Vanara.PInvoke.POINT[],System.Int32)">
            <summary>The <c>Polyline</c> function draws a series of line segments by connecting the points in the specified array.</summary>
            <param name="hdc">A handle to a device context.</param>
            <param name="apt">A pointer to an array of POINT structures, in logical units.</param>
            <param name="cpt">The number of points in the array. This number must be greater than or equal to two.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            The lines are drawn from the first point through subsequent points by using the current pen. Unlike the LineTo or PolylineTo
            functions, the <c>Polyline</c> function neither uses nor updates the current position.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.PolylineTo(Vanara.PInvoke.HDC,Vanara.PInvoke.POINT[],System.UInt32)">
            <summary>The <c>PolylineTo</c> function draws one or more straight lines.</summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="apt">A pointer to an array of POINT structures that contains the vertices of the line, in logical units.</param>
            <param name="cpt">The number of points in the array.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>Unlike the Polyline function, the <c>PolylineTo</c> function uses and updates the current position.</para>
            <para>
            A line is drawn from the current position to the first point specified by the lppt parameter by using the current pen. For each
            additional line, the function draws from the ending point of the previous line to the next point specified by lppt.
            </para>
            <para><c>PolylineTo</c> moves the current position to the ending point of the last line.</para>
            <para>If the line segments drawn by this function form a closed figure, the figure is not filled.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.PolyPolygon(Vanara.PInvoke.HDC,Vanara.PInvoke.POINT[],System.Int32[],System.Int32)">
            <summary>
            The <c>PolyPolygon</c> function draws a series of closed polygons. Each polygon is outlined by using the current pen and filled
            by using the current brush and polygon fill mode. The polygons drawn by this function can overlap.
            </summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="apt">
            A pointer to an array of POINT structures that define the vertices of the polygons, in logical coordinates. The polygons are
            specified consecutively. Each polygon is closed automatically by drawing a line from the last vertex to the first. Each vertex
            should be specified once.
            </param>
            <param name="asz">
            A pointer to an array of integers, each of which specifies the number of points in the corresponding polygon. Each integer must
            be greater than or equal to 2.
            </param>
            <param name="csz">The total number of polygons.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>The current position is neither used nor updated by this function.</para>
            <para>
            Any extra points are ignored. To draw the polygons with more points, divide your data into groups, each of which have less than
            the maximum number of points, and call the function for each group of points. Note, it is best to have a polygon in only one of
            the groups.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.PolyPolyline(Vanara.PInvoke.HDC,Vanara.PInvoke.POINT[],System.UInt32[],System.UInt32)">
            <summary>The <c>PolyPolyline</c> function draws multiple series of connected line segments.</summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="apt">
            A pointer to an array of POINT structures that contains the vertices of the polylines, in logical units. The polylines are
            specified consecutively.
            </param>
            <param name="asz">
            A pointer to an array of variables specifying the number of points in the lppt array for the corresponding polyline. Each entry
            must be greater than or equal to two.
            </param>
            <param name="csz">The total number of entries in the lpdwPolyPoints array.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>The line segments are drawn by using the current pen. The figures formed by the segments are not filled.</para>
            <para>The current position is neither used nor updated by this function.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.Rectangle(Vanara.PInvoke.HDC,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            The <c>Rectangle</c> function draws a rectangle. The rectangle is outlined by using the current pen and filled by using the
            current brush.
            </summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="left">The x-coordinate, in logical coordinates, of the upper-left corner of the rectangle.</param>
            <param name="top">The y-coordinate, in logical coordinates, of the upper-left corner of the rectangle.</param>
            <param name="right">The x-coordinate, in logical coordinates, of the lower-right corner of the rectangle.</param>
            <param name="bottom">The y-coordinate, in logical coordinates, of the lower-right corner of the rectangle.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>The current position is neither used nor updated by <c>Rectangle</c>.</para>
            <para>The rectangle that is drawn excludes the bottom and right edges.</para>
            <para>If a PS_NULL pen is used, the dimensions of the rectangle are 1 pixel less in height and 1 pixel less in width.</para>
            <para>Examples</para>
            <para>For an example, see Using Filled Shapes.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.RoundRect(Vanara.PInvoke.HDC,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            The <c>RoundRect</c> function draws a rectangle with rounded corners. The rectangle is outlined by using the current pen and
            filled by using the current brush.
            </summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="left">The x-coordinate, in logical coordinates, of the upper-left corner of the rectangle.</param>
            <param name="top">The y-coordinate, in logical coordinates, of the upper-left corner of the rectangle.</param>
            <param name="right">The x-coordinate, in logical coordinates, of the lower-right corner of the rectangle.</param>
            <param name="bottom">The y-coordinate, in logical coordinates, of the lower-right corner of the rectangle.</param>
            <param name="width">The width, in logical coordinates, of the ellipse used to draw the rounded corners.</param>
            <param name="height">The height, in logical coordinates, of the ellipse used to draw the rounded corners.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>The current position is neither used nor updated by this function.</para>
            <para>Examples</para>
            <para>For an example, see Using Filled Shapes.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SetArcDirection(Vanara.PInvoke.HDC,Vanara.PInvoke.Gdi32.ArcDirection)">
            <summary>The <c>SetArcDirection</c> sets the drawing direction to be used for arc and rectangle functions.</summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="dir">
            <para>The new arc direction. This parameter can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>AD_COUNTERCLOCKWISE</term>
            <term>Figures drawn counterclockwise.</term>
            </item>
            <item>
            <term>AD_CLOCKWISE</term>
            <term>Figures drawn clockwise.</term>
            </item>
            </list>
            </param>
            <returns>
            <para>If the function succeeds, the return value specifies the old arc direction.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>The default direction is counterclockwise.</para>
            <para>The <c>SetArcDirection</c> function specifies the direction in which the following functions draw:</para>
            <list type="bullet">
            <item>
            <term>Arc</term>
            </item>
            <item>
            <term>ArcTo</term>
            </item>
            <item>
            <term>Chord</term>
            </item>
            <item>
            <term>Ellipse</term>
            </item>
            <item>
            <term>Pie</term>
            </item>
            <item>
            <term>Rectangle</term>
            </item>
            <item>
            <term>RoundRect</term>
            </item>
            </list>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.Gdi32.EMF_PP_COLOR_OPTIMIZATION">
            <summary>Enable color optimization.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GdiDeleteSpoolFileHandle(Vanara.PInvoke.Gdi32.HSPOOLFILE)">
            <summary>The <c>GdiDeleteSpoolFileHandle</c> function releases a spool file handle.</summary>
            <param name="SpoolFileHandle">Caller-supplied spool file handle, obtained by a previous call to GdiGetSpoolFileHandle.</param>
            <returns>If the operation succeeds, the function returns <c>TRUE</c>. Otherwise the function returns <c>FALSE</c>.</returns>
            <remarks>
            <para>
            The <c>GdiDeleteSpoolFileHandle</c> function is exported by Gdi32.dll for use within a print processor's
            PrintDocumentOnPrintProcessor function.
            </para>
            <para>
            Print processors should call <c>GdiDeleteSpoolFileHandle</c> after calling GdiEndDocEMF, when processing a print job's EMF data
            stream has been completed. The function calls ClosePrinter (described in the Microsoft Window SDK documentation) to close the
            printer connection.
            </para>
            <para>For additional information, see Using GDI Functions in Print Processors.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GdiEndDocEMF(Vanara.PInvoke.Gdi32.HSPOOLFILE)">
            <summary>The <c>GdiEndDocEMF</c> function ends EMF playback operations for an EMF-formatted print job.</summary>
            <param name="SpoolFileHandle">Caller-supplied spool file handle, obtained by a previous call to GdiGetSpoolFileHandle.</param>
            <returns>
            If the operation succeeds, the function returns <c>TRUE</c>. Otherwise the function returns <c>FALSE</c>, and an error code can
            be obtained by calling <c>GetLastError</c>.
            </returns>
            <remarks>
            <para>
            The <c>GdiEndDocEMF</c> function is exported by Gdi32.dll for use within a print processor's PrintDocumentOnPrintProcessor function.
            </para>
            <para>
            The function performs operations that must be performed after a print job's EMF records have been played. The function calls the
            spooler's <c>EndDoc</c> function (described in the Microsoft Window SDK documentation), which in turn calls the printer driver's
            DrvEndDoc function.
            </para>
            <para>For additional information, see Using GDI Functions in Print Processors.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GdiEndPageEMF(Vanara.PInvoke.Gdi32.HSPOOLFILE,System.UInt32)">
            <summary>The <c>GdiEndPageEMF</c> function ends EMF playback operations for a physical page of an EMF-formatted print job.</summary>
            <param name="SpoolFileHandle">Caller-supplied spool file handle, obtained by a previous call to GdiGetSpoolFileHandle.</param>
            <param name="dwOptimization">
            <para>Caller-supplied flags. The following flag is defined:</para>
            <para>EMF_PP_COLOR_OPTIMIZATION</para>
            <para>Enable color optimization. For more information, see Remarks.</para>
            </param>
            <returns>
            If the operation succeeds, the function returns <c>TRUE</c>. Otherwise the function returns <c>FALSE</c>, and an error code can
            be obtained by calling <c>GetLastError</c>.
            </returns>
            <remarks>
            <para>
            The <c>GdiEndPageEMF</c> function is exported by Gdi32.dll for use within a print processor's PrintDocumentOnPrintProcessor function.
            </para>
            <para>
            The <c>GdiEndPageEMF</c> function ends the processing of a physical page and causes it to be ejected from the printer. A print
            processor should call <c>GdiEndPageEMF</c> at the following times:
            </para>
            <list type="bullet">
            <item>
            <term>
            After the appropriate number of document pages have been placed on the physical page by making calls to GdiPlayPageEMF. Note
            that <c>GdiPlayPageEMF</c> does not actually print on the device context, but instead prepares a data structure that describes
            the text and graphics that are to be printed on the physical page(s). The text and graphics are printed to the device context
            when <c>GdiEndPageEMF</c> is called.
            </term>
            </item>
            <item>
            <term>
            Whenever a call to GdiGetDevmodeForPage indicates a document page's DEVMODEW structure is different from the previous page's
            DEVMODE structure.
            </term>
            </item>
            </list>
            <para>
            If this function is called with the dwOptimization parameter set to EMF_PP_COLOR_OPTIMIZATION, color optimization is enabled. If
            dwOptimization is set to 0, no optimization is performed. When color optimization is enabled, the presence of color in the spool
            file causes the spool file to be played in color; the lack of color in the spool file causes the spool file to be played in monochrome.
            </para>
            <para>
            If you are creating a Unidrv rendering plug-in to generate color watermarks, be advised that color optimization causes color
            watermarks to be printed in black and white when they are printed on black-and-white documents. To ensure that color watermarks
            print correctly with color and black-and-white documents, disable color optimization.
            </para>
            <para>
            The color optimization controlled by the dwOptimization parameter can also be controlled by setting the
            <c>dwColorOptimization</c> member of the ATTRIBUTE_INFO_2 or ATTRIBUTE_INFO_3 structures. This optimization also can be
            controlled by the Unidrv * <c>ChangeColorModeOnDoc?</c> color attribute (see Color Attributes).
            </para>
            <para>For additional information, see Using GDI Functions in Print Processors.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GdiGetDC(Vanara.PInvoke.Gdi32.HSPOOLFILE)">
            <summary>The <c>GdiGetDC</c> function returns a handle to a printer's device context.</summary>
            <param name="SpoolFileHandle">Caller-supplied spool file handle, obtained by a previous call to GdiGetSpoolFileHandle.</param>
            <returns>If the operation succeeds, the function returns a device context handle. Otherwise the function returns <c>NULL</c>.</returns>
            <remarks>
            <para>
            The <c>GdiGetDC</c> function is exported by Gdi32.dll for use within a print processor's PrintDocumentOnPrintProcessor function.
            </para>
            <para>
            A print processor can call <c>GdiGetDC</c> to obtain a printer's device context handle anytime after calling
            GdiGetSpoolFileHandle. The print processor can use the context handle to call Win32 device context functions, in order to
            perform such operations as applying transformations on the print image.
            </para>
            <para>For additional information, see Using GDI Functions in Print Processors.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GdiGetDevmodeForPage(Vanara.PInvoke.Gdi32.HSPOOLFILE,System.UInt32,System.IntPtr@,System.IntPtr@)">
            <summary>
            The <c>GdiGetDevmodeForPage</c> function returns DEVMODEW structures for the specified and previous pages of a print job.
            </summary>
            <param name="SpoolFileHandle">Caller-supplied spool file handle, obtained by a previous call to GdiGetSpoolFileHandle.</param>
            <param name="dwPageNumber">Caller-supplied number of the page for which DEVMODEW contents are to be returned.</param>
            <param name="pCurrDM">Caller-supplied location to receive a pointer to a DEVMODE structure for the page specified by dwPageNumber.</param>
            <param name="pLastDM">
            Caller-supplied location to receive a pointer to a DEVMODE structure for the page previous to the one specified by dwPageNumber.
            </param>
            <returns>If the operation succeeds, the function returns <c>TRUE</c>. Otherwise it returns <c>FALSE</c>.</returns>
            <remarks>
            <para>
            The <c>GdiGetDevmodeForPage</c> function is exported by Gdi32.dll for use within a print processor's
            PrintDocumentOnPrintProcessor function.
            </para>
            <para>
            Before calling GdiPlayPageEMF to execute a page's EMF instructions, a print processor must call <c>GdiGetDevmodeForPage</c> to
            determine if the DEVMODE structure associated with the page to be printed is the same as that of the last page printed. If the
            two returned DEVMODE structures are not identical, the print processor must perform the following steps, in order, before
            calling <c>GdiPlayPageEMF</c> for the page:
            </para>
            <list type="number">
            <item>
            <term>Call GdiEndPageEMF.</term>
            </item>
            <item>
            <term>Call GdiResetDCEMF, specifying the DEVMODE pointed to by pCurrDM.</term>
            </item>
            <item>
            <term>Call GdiStartPageEMF.</term>
            </item>
            </list>
            <para>For additional information, see Using GDI Functions in Print Processors.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GdiGetPageCount(Vanara.PInvoke.Gdi32.HSPOOLFILE)">
            <summary>The <c>GdiGetPageCount</c> function returns the number of pages in a print job.</summary>
            <param name="SpoolFileHandle">Caller-supplied spool file handle, obtained by a previous call to GdiGetSpoolFileHandle.</param>
            <returns>
            If the operation succeeds, the function returns the number of pages in the current print job. Otherwise the function returns zero.
            </returns>
            <remarks>
            <para>
            The <c>GdiGetPageCount</c> function is exported by Gdi32.dll for use within a print processor's PrintDocumentOnPrintProcessor function.
            </para>
            <para>
            <c>Note</c> The <c>GdiGetPageCount</c> function does not return until all pages have been spooled, even if the print server
            administrator has specified that print jobs should be printed during spooling. Therefore, this function should not be used
            unless it is necessary to obtain the total page count before document processing can begin, such as for printing pages in
            reverse order.Usually, a better method for determining the page count is to count the number of calls made to GdiGetPageHandle.
            </para>
            <para>For additional information about this set of functions, see Using GDI Functions in Print Processors.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GdiGetPageHandle(Vanara.PInvoke.Gdi32.HSPOOLFILE,System.UInt32,System.UInt32@)">
            <summary>The <c>GdiGetPageHandle</c> function returns a handle to the specified page within a print job.</summary>
            <param name="SpoolFileHandle">Caller-supplied spool file handle, obtained by a previous call to GdiGetSpoolFileHandle.</param>
            <param name="Page">Caller-supplied page number.</param>
            <param name="pdwPageType">
            <para>
            Caller-supplied pointer to a location that receives the page type. The possible page types are shown in the following table:
            </para>
            <list type="table">
            <listheader>
            <term>Page Type</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>EMF_PP_FORM</term>
            <term>The page is a form or has a watermark. (Not currently supported.)</term>
            </item>
            <item>
            <term>EMF_PP_NORMAL</term>
            <term>The page is a normal page.</term>
            </item>
            </list>
            </param>
            <returns>
            If the operation succeeds, the function returns <c>TRUE</c>. Otherwise the function returns <c>FALSE</c>, and an error code can
            be obtained by calling <c>GetLastError</c>.
            </returns>
            <remarks>
            <para>
            The <c>GdiGetPageHandle</c> function is exported by Gdi32.dll for use within a print processor's PrintDocumentOnPrintProcessor function.
            </para>
            <para>
            Print processors must obtain a page handle before calling GdiPlayPageEMF to draw a page. If a Page value is specified that is
            too large, the function returns ERROR_NO_MORE_ITEMS.
            </para>
            <para>For additional information, see Using GDI Functions in Print Processors.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GdiGetSpoolFileHandle(System.String,Vanara.PInvoke.DEVMODE@,System.String)">
            <summary>The <c>GdiGetSpoolFileHandle</c> function returns a handle to a print job's EMF file.</summary>
            <param name="pwszPrinterName">
            Caller-supplied pointer to a string representing the name of the target printer. See the following Remarks section.
            </param>
            <param name="pDevmode">Caller-supplied pointer to a DEVMODEW structure. See the following Remarks section.</param>
            <param name="pwszDocName">Caller-supplied pointer to the print job's document name. See the following Remarks section.</param>
            <returns>If the operation succeeds, the function returns a spool file handle. Otherwise the function returns <c>NULL</c>.</returns>
            <remarks>
            <para>
            The <c>GdiGetSpoolFileHandle</c> function is exported by Gdi32.dll for use within a print processor's
            PrintDocumentOnPrintProcessor function.
            </para>
            <para>
            When a print processor calls <c>GdiGetSpoolFileHandle</c>, it should supply arguments as illustrated in the following table.
            </para>
            <list type="table">
            <listheader>
            <term>Parameter</term>
            <term>Argument</term>
            </listheader>
            <item>
            <term>pwszPrinterName</term>
            <term>Pointer to the printer name received by the print processor's OpenPrintProcessor function.</term>
            </item>
            <item>
            <term>pDevmode</term>
            <term>
            Pointer to the DEVMODEW structure contained in the PRINTPROCESSOROPENDATA structure, received by the print processor's
            OpenPrintProcessor function.
            </term>
            </item>
            <item>
            <term>pwszDocName</term>
            <term>Document name pointer received by the print processor's PrintDocumentOnPrintProcessor function.</term>
            </item>
            </list>
            <para>
            A print processor must call the <c>GdiGetSpoolFileHandle</c> function before calling any other GDI printing functions, because
            the returned handle must be passed to the other functions. The function calls OpenPrinter to open a connection to the printer,
            and CreateDC to create a device context for drawing. The print processor can obtain the device context's handle by calling GdiGetDC.
            </para>
            <para>For additional information, see Using GDI Functions in Print Processors.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GdiPlayPageEMF(Vanara.PInvoke.Gdi32.HSPOOLFILE,Vanara.PInvoke.HANDLE,Vanara.PInvoke.RECT@,Vanara.PInvoke.RECT@,Vanara.PInvoke.RECT@)">
            <summary>
            The <c>GdiPlayPageEMF</c> function plays the EMF records within a specified rectangle for one document page of a spooled print job.
            </summary>
            <param name="SpoolFileHandle">Caller-supplied spool file handle, obtained by a previous call to GdiGetSpoolFileHandle.</param>
            <param name="hemf">
            Caller-supplied page handle, obtained by calling GdiGetPageHandle, identifying the page for which records are to be played.
            </param>
            <param name="prectDocument">
            Caller-supplied pointer to a RECT structure specifying the rectangle into which the page is to be drawn.
            </param>
            <param name="prectBorder">
            Caller-supplied pointer to a RECT structure specifying the page's border rectangle (if any). Can be <c>NULL</c>.
            </param>
            <param name="prectClip">
            Caller-supplied pointer to a RECT structure specifying the coordinates of the page's clip region (if any). Can be <c>NULL</c>.
            </param>
            <returns>
            If the operation succeeds, the function returns <c>TRUE</c>. Otherwise the function returns <c>FALSE</c>, and an error code can
            be obtained by calling <c>GetLastError</c>.
            </returns>
            <remarks>
            <para>
            The <c>GdiPlayPageEMF</c> function is exported by Gdi32.dll for use within a print processor's PrintDocumentOnPrintProcessor function.
            </para>
            <para>
            The <c>GdiPlayPageEMF</c> function is the means by which a print processor positions a document page or a specified rectangular
            region of a document page on a physical page. Note that <c>GdiPlayPageEMF</c> does not actually print on the device context, but
            instead prepares a data structure that describes the text and graphics that are to be printed on the physical page(s). The text
            and graphics are printed to the device context when GdiEndPageEMF is called.
            </para>
            <para>
            The print processor uses prectClip to describe the rectangular region to be printed, and prectDocument to describe a rectangle
            into which the document page (or clipped region) must fit. If prectClip is <c>NULL</c>, the entire document page will be
            printed. For non- <c>NULL</c> values of prectClip, only the portion of the document page within the clip region will be printed.
            The <c>GdiPlayPageEMF</c> function then performs the scaling and translation operations required to make the document page (or
            selected portion) fit into the rectangle.
            </para>
            <para>
            The prectBorder parameter, if it is non- <c>NULL</c>, describes a solid-line border rectangle to be drawn around the document
            page. If prectBorder is <c>NULL</c>, no such border will be drawn.
            </para>
            <para>For additional information, see Using GDI Functions in Print Processors.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GdiResetDCEMF(Vanara.PInvoke.Gdi32.HSPOOLFILE,System.IntPtr)">
            <summary>The <c>GdiResetDCEMF</c> function resets a printer's device context during playback of a spooled EMF print job.</summary>
            <param name="SpoolFileHandle">Caller-supplied spool file handle, obtained by a previous call to GdiGetSpoolFileHandle.</param>
            <param name="pCurrDM">Caller-supplied pointer to a DEVMODEW structure, obtained by a previous call to GdiGetDevmodeForPage.</param>
            <returns>If the operation succeeds, the function returns <c>TRUE</c>. Otherwise the function returns <c>FALSE</c>.</returns>
            <remarks>
            <para>
            The <c>GdiResetDCEMF</c> function is exported by Gdi32.dll for use within a print processor's PrintDocumentOnPrintProcessor function.
            </para>
            <para>
            Print processors must call <c>GdiResetDCEMF</c> whenever it is necessary to reset the printer's device context. The function
            must be called whenever the GdiGetDevmodeForPage function indicates that the current document page's DEVMODEW structure is not
            identical to that of the previous document page.
            </para>
            <para>For additional information, see Using GDI Functions in Print Processors.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GdiStartDocEMF(Vanara.PInvoke.Gdi32.HSPOOLFILE,Vanara.PInvoke.Gdi32.DOCINFO@)">
            <summary>The <c>GdiStartDocEMF</c> function performs initialization operations for an EMF-formatted print job.</summary>
            <param name="SpoolFileHandle">Caller-supplied spool file handle, obtained by a previous call to GdiGetSpoolFileHandle.</param>
            <param name="pDocInfo">Caller-supplied pointer to a DOCINFOW structure (described in the Microsoft Window SDK documentation).</param>
            <returns>
            If the operation succeeds, the function returns <c>TRUE</c>. Otherwise the function returns <c>FALSE</c>, and an error code can
            be obtained by calling <c>GetLastError</c>.
            </returns>
            <remarks>
            <para>
            The <c>GdiStartDocEMF</c> function is exported by Gdi32.dll for use within a print processor's PrintDocumentOnPrintProcessor function.
            </para>
            <para>
            The function performs initializations that must take place before a print job's EMF records can be played. The function calls
            the spooler's <c>StartDoc</c> function (described in the Window SDK documentation), which in turn calls the printer driver's
            DrvStartDoc function.
            </para>
            <para>
            The print processor must set the <c>lpszOutput</c> member of the DOCINFOW structure to the output file name contained in the
            PRINTPROCESSOROPENDATA structure, previously received by the OpenPrintProcessor function.
            </para>
            <para>
            The print processor must set the <c>lpszDocName</c> member of the DOCINFOW structure to the document name pointer, previously
            received by the PrintDocumentOnPrintProcessor function.
            </para>
            <para>For additional information, see Using GDI Functions in Print Processors.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.GdiStartPageEMF(Vanara.PInvoke.Gdi32.HSPOOLFILE)">
            <summary>
            The <c>GdiStartPageEMF</c> function performs initialization operations for a physical page of an EMF-formatted print job.
            </summary>
            <param name="SpoolFileHandle">Caller-supplied spool file handle, obtained by a previous call to GdiGetSpoolFileHandle.</param>
            <returns>
            If the operation succeeds, the function returns <c>TRUE</c>. Otherwise the function returns <c>FALSE</c>, and an error code can
            be obtained by calling <c>GetLastError</c>.
            </returns>
            <remarks>
            <para>
            The <c>GdiStartPageEMF</c> function is exported by Gdi32.dll for use within a print processor's PrintDocumentOnPrintProcessor function.
            </para>
            <para>
            A print processor must call the <c>GdiStartPageEMF</c> function each time a new physical page is to be created. It can then call
            GdiPlayPageEMF for each document page that is to be placed on the physical page.
            </para>
            <para>For additional information, see Using GDI Functions in Print Processors.</para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.HSPOOLFILE">
            <summary>Provides a handle to a spool file.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.HSPOOLFILE.#ctor(System.IntPtr)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Gdi32.HSPOOLFILE"/> struct.</summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
        </member>
        <member name="P:Vanara.PInvoke.Gdi32.HSPOOLFILE.NULL">
            <summary>Returns an invalid handle by instantiating a <see cref="T:Vanara.PInvoke.Gdi32.HSPOOLFILE"/> object with <see cref="F:System.IntPtr.Zero"/>.</summary>
        </member>
        <member name="P:Vanara.PInvoke.Gdi32.HSPOOLFILE.IsNull">
            <summary>Gets a value indicating whether this instance is a null handle.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.HSPOOLFILE.op_Explicit(Vanara.PInvoke.Gdi32.HSPOOLFILE)~System.IntPtr">
            <summary>Performs an explicit conversion from <see cref="T:Vanara.PInvoke.Gdi32.HSPOOLFILE"/> to <see cref="T:System.IntPtr"/>.</summary>
            <param name="h">The handle.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.HSPOOLFILE.op_Implicit(System.IntPtr)~Vanara.PInvoke.Gdi32.HSPOOLFILE">
            <summary>Performs an implicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:Vanara.PInvoke.Gdi32.HSPOOLFILE"/>.</summary>
            <param name="h">The pointer to a handle.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.HSPOOLFILE.op_Inequality(Vanara.PInvoke.Gdi32.HSPOOLFILE,Vanara.PInvoke.Gdi32.HSPOOLFILE)">
            <summary>Implements the operator !=.</summary>
            <param name="h1">The first handle.</param>
            <param name="h2">The second handle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.HSPOOLFILE.op_Equality(Vanara.PInvoke.Gdi32.HSPOOLFILE,Vanara.PInvoke.Gdi32.HSPOOLFILE)">
            <summary>Implements the operator ==.</summary>
            <param name="h1">The first handle.</param>
            <param name="h2">The second handle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.HSPOOLFILE.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.HSPOOLFILE.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.HSPOOLFILE.DangerousGetHandle">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.Gdi32.SafeHSPOOLFILE">
            <summary>Provides a <see cref="T:System.Runtime.InteropServices.SafeHandle"/> for <see cref="T:Vanara.PInvoke.Gdi32.HSPOOLFILE"/> that is disposed using <see cref="M:Vanara.PInvoke.Gdi32.GdiDeleteSpoolFileHandle(Vanara.PInvoke.Gdi32.HSPOOLFILE)"/>.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SafeHSPOOLFILE.#ctor(System.IntPtr,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Gdi32.SafeHSPOOLFILE"/> class and assigns an existing handle.</summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
            <param name="ownsHandle">
            <see langword="true"/> to reliably release the handle during the finalization phase; otherwise, <see langword="false"/> (not recommended).
            </param>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SafeHSPOOLFILE.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Gdi32.SafeHSPOOLFILE"/> class.</summary>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SafeHSPOOLFILE.op_Implicit(Vanara.PInvoke.Gdi32.SafeHSPOOLFILE)~Vanara.PInvoke.Gdi32.HSPOOLFILE">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.Gdi32.SafeHSPOOLFILE"/> to <see cref="T:Vanara.PInvoke.Gdi32.HSPOOLFILE"/>.</summary>
            <param name="h">The safe handle instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.Gdi32.SafeHSPOOLFILE.InternalReleaseHandle">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.GdiObjExtensions">
            <summary>Extension methods to convert GdiObj handle variants to their .NET equivalents.</summary>
        </member>
        <member name="M:Vanara.PInvoke.GdiObjExtensions.ConvertTo``1(Vanara.PInvoke.IGraphicsObjectHandle)">
            <summary>Converts the generic GDI object handle to a specific handle.</summary>
            <typeparam name="T">The handle type to which to convert.</typeparam>
            <param name="hObj">The generic GDI object handle.</param>
            <returns>The converted handle of type <typeparamref name="T"/>.</returns>
            <exception cref="T:System.ArgumentException">The conversion type specified is not valid for the supplied GDI object.</exception>
        </member>
        <member name="M:Vanara.PInvoke.GdiObjExtensions.DrawViaDIB(Vanara.PInvoke.Gdi32.SafeHDC,Vanara.PInvoke.RECT@,System.Action{Vanara.PInvoke.Gdi32.SafeHDC,Vanara.PInvoke.RECT})">
            <summary>Draws on a device context (<see cref="T:Vanara.PInvoke.Gdi32.SafeHDC"/>) via a DIB section. This is useful when you need to draw on a transparent background.</summary>
            <param name="hdc">The device context.</param>
            <param name="bounds">The bounds of the device context to paint.</param>
            <param name="drawMethod">The draw method.</param>
        </member>
        <member name="M:Vanara.PInvoke.GdiObjExtensions.DrawViaDIB(Vanara.PInvoke.HDC@,Vanara.PInvoke.RECT@,System.Action{Vanara.PInvoke.Gdi32.SafeHDC,Vanara.PInvoke.RECT})">
            <summary>Draws on a device context (<see cref="T:Vanara.PInvoke.HDC"/>) via a DIB section. This is useful when you need to draw on a transparent background.</summary>
            <param name="hdc">The device context.</param>
            <param name="bounds">The bounds of the device context to paint.</param>
            <param name="drawMethod">The draw method.</param>
        </member>
        <member name="M:Vanara.PInvoke.GdiObjExtensions.IsBottomUpDIB(Vanara.PInvoke.HBITMAP@)">
            <summary>Determines whether the bitmap is a bottom-up DIB.</summary>
            <param name="hbmp">The handle of the bitmap to assess.</param>
            <returns><see langword="true"/> if the specified bitmap is a bottom-up DIB; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Vanara.PInvoke.GdiObjExtensions.IsDIB(Vanara.PInvoke.HBITMAP@)">
            <summary>Determines whether the bitmap is a bottom-up DIB.</summary>
            <param name="hbmp">The handle of the bitmap to assess.</param>
            <returns><see langword="true"/> if the specified bitmap is a bottom-up DIB; otherwise, <see langword="false"/>.</returns>
        </member>
    </members>
</doc>
