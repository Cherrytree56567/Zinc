<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Vanara.PInvoke.ComCtl32</name>
    </assembly>
    <members>
        <member name="T:Vanara.Windows.Forms.ComCtl32v6Context">
            <summary>
            Activation context that forces the loading of the v6 COMCTL32.DLL. <note type="note">This is not needed if the application has a
            manifest including COMCTL32 or if Application.RenderWithVisualStyles is set.</note>
            </summary>
            <remarks>
            <para>Use as follows for all items that require the 6.0 or later version of COMCTL32:</para>
            <code lang="cs">
            using (new ComCtl32v6Context())
            {
            // Code that needs the right lib
            TaskDialog.Show(...)
            }
            </code>
            </remarks>
            <seealso cref="T:System.IDisposable"/>
        </member>
        <member name="M:Vanara.Windows.Forms.ComCtl32v6Context.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Vanara.Windows.Forms.ComCtl32v6Context"/> class.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32">
            <summary>Contains structures, enumerations and functions from COMCTL32.DLL.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.BCCL_NOGLYPH">
            <summary>Used in the <see cref="T:Vanara.PInvoke.ComCtl32.BUTTON_IMAGELIST"/> structure himl member to indicate that no glyph should be displayed.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.ButtonImageListAlign">
            <summary>Used by the <see cref="F:Vanara.PInvoke.ComCtl32.BUTTON_IMAGELIST.uAlign"/> member to specify alignment.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ButtonImageListAlign.BUTTON_IMAGELIST_ALIGN_LEFT">
            <summary>Align the image with the left margin.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ButtonImageListAlign.BUTTON_IMAGELIST_ALIGN_RIGHT">
            <summary>Align the image with the right margin.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ButtonImageListAlign.BUTTON_IMAGELIST_ALIGN_TOP">
            <summary>Align the image with the top margin.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ButtonImageListAlign.BUTTON_IMAGELIST_ALIGN_BOTTOM">
            <summary>Align the image with the bottom margin.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ButtonImageListAlign.BUTTON_IMAGELIST_ALIGN_CENTER">
            <summary>Center the image.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.SplitButtonInfoMask">
            <summary>
            A set of flags that specify which members of <see cref="T:Vanara.PInvoke.ComCtl32.BUTTON_SPLITINFO"/> contain data to be set or which members are being requested.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.SplitButtonInfoMask.BCSIF_GLYPH">
            <summary>himlGlyph is valid.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.SplitButtonInfoMask.BCSIF_IMAGE">
            <summary>himlGlyph is valid. Use when uSplitStyle is set to BCSS_IMAGE.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.SplitButtonInfoMask.BCSIF_STYLE">
            <summary>uSplitStyle is valid.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.SplitButtonInfoMask.BCSIF_SIZE">
            <summary>size is valid.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.SplitButtonInfoStyle">
            <summary>The split button style for the uSplitStyle member of <see cref="T:Vanara.PInvoke.ComCtl32.BUTTON_SPLITINFO"/>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.SplitButtonInfoStyle.BCSS_NOSPLIT">
            <summary>No split.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.SplitButtonInfoStyle.BCSS_STRETCH">
            <summary>Stretch glyph, but try to retain aspect ratio.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.SplitButtonInfoStyle.BCSS_ALIGNLEFT">
            <summary>Align the image or glyph horizontally with the left margin.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.SplitButtonInfoStyle.BCSS_IMAGE">
            <summary>Draw an icon image as the glyph.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.BUTTON_IMAGELIST">
            <summary>Contains information about an image list that is used with a button control.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.BUTTON_IMAGELIST.himl">
            <summary>
            A handle to the image list. The provider retains ownership of the image list and is ultimately responsible for its disposal.
            Under Windows Vista, you can pass BCCL_NOGLYPH in this parameter to indicate that no glyph should be displayed.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.BUTTON_IMAGELIST.margin">
            <summary>A RECT that specifies the margin around the icon.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.BUTTON_IMAGELIST.uAlign">
            <summary>A UINT that specifies the alignment to use.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.BUTTON_SPLITINFO">
            <summary>
            Contains information that defines a split button (BS_SPLITBUTTON and BS_DEFSPLITBUTTON styles). Used with the BCM_GETSPLITINFO
            and BCM_SETSPLITINFO messages.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.BUTTON_SPLITINFO.mask">
            <summary>
            A set of flags that specify which members of this structure contain data to be set or which members are being requested.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.BUTTON_SPLITINFO.himlGlyph">
            <summary>
            A handle to the image list. The provider retains ownership of the image list and is ultimately responsible for its disposal.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.BUTTON_SPLITINFO.uSplitButtonInfoStyle">
            <summary>The split button style.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.BUTTON_SPLITINFO.size">
            <summary>A SIZE structure that specifies the size of the glyph in himlGlyph.</summary>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.BUTTON_SPLITINFO.#ctor(Vanara.PInvoke.ComCtl32.SplitButtonInfoStyle)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.ComCtl32.BUTTON_SPLITINFO"/> struct and sets the uSplitStyle value.</summary>
            <param name="buttonInfoStyle">The style.</param>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.BUTTON_SPLITINFO.#ctor(Vanara.PInvoke.HIMAGELIST)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.ComCtl32.BUTTON_SPLITINFO"/> struct and sets an ImageList</summary>
            <param name="hImageList">The h image list.</param>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.NMBCDROPDOWN">
            <summary>Contains information about a BCN_DROPDOWN notification.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMBCDROPDOWN.hdr">
            <summary>An NMHDR structure containing information about the notification.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMBCDROPDOWN.rcButton">
            <summary>A RECT structure that contains the client area of the button.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.NMBCHOTITEM">
            <summary>Contains information about the movement of the mouse over a button control.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMBCHOTITEM.hdr">
            <summary>An NMHDR structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMBCHOTITEM.dwFlags">
            <summary>The action of the mouse. This parameter can be one of the following values combined with HICF_MOUSE.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.WC_COMBOBOXEX">
            <summary>Window class for Extended Combo Box.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.CBEN_ENDEDIT_FLAG">
            <summary>A value that specifies the action that generated the CBEN_ENDEDIT notification code.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CBEN_ENDEDIT_FLAG.CBENF_KILLFOCUS">
            <summary>The edit box lost the keyboard focus.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CBEN_ENDEDIT_FLAG.CBENF_RETURN">
            <summary>The user completed the edit operation by pressing ENTER.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CBEN_ENDEDIT_FLAG.CBENF_ESCAPE">
            <summary>The user pressed ESC.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CBEN_ENDEDIT_FLAG.CBENF_DROPDOWN">
            <summary>The user activated the drop-down list.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.ComboBoxExItemMask">
            <summary>
            A set of bit flags that specify attributes of COMBOBOXEXITEM or of an operation that is using this structure. The flags specify
            members that are valid or must be filled in.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ComboBoxExItemMask.CBEIF_TEXT">
            <summary>The pszText member is valid or must be filled in.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ComboBoxExItemMask.CBEIF_IMAGE">
            <summary>The iImage member is valid or must be filled in.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ComboBoxExItemMask.CBEIF_SELECTEDIMAGE">
            <summary>The iSelectedImage member is valid or must be filled in.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ComboBoxExItemMask.CBEIF_OVERLAY">
            <summary>The iOverlay member is valid or must be filled in.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ComboBoxExItemMask.CBEIF_INDENT">
            <summary>The iIndent member is valid or must be filled in.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ComboBoxExItemMask.CBEIF_LPARAM">
            <summary>The lParam member is valid or must be filled in.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ComboBoxExItemMask.CBEIF_DI_SETITEM">
            <summary>
            Set this flag when processing CBEN_GETDISPINFO; the ComboBoxEx control will retain the supplied information and will not
            request it again.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.ComboBoxExStyle">
            <summary>Support the extended styles that are listed in this section as well as most standard combo box control styles.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ComboBoxExStyle.CBES_EX_NOEDITIMAGE">
            <summary>The edit box and the dropdown list will not display item images.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ComboBoxExStyle.CBES_EX_NOEDITIMAGEINDENT">
            <summary>The edit box and the dropdown list will not display item images.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ComboBoxExStyle.CBES_EX_PATHWORDBREAKPROC">
            <summary>
            Windows NT only. The edit box will use the slash (/), backslash (\), and period (.) characters as word delimiters. This makes
            keyboard shortcuts for word-by-word cursor movement effective in path names and URLs.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ComboBoxExStyle.CBES_EX_NOSIZELIMIT">
            <summary>
            Allows the ComboBoxEx control to be vertically sized smaller than its contained combo box control. If the ComboBoxEx is sized
            smaller than the combo box, the combo box will be clipped.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ComboBoxExStyle.CBES_EX_CASESENSITIVE">
            <summary>
            BSTR searches in the list will be case sensitive. This includes searches as a result of text being typed in the edit box and
            the CB_FINDSTRINGEXACT message.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ComboBoxExStyle.CBES_EX_TEXTENDELLIPSIS">
            <summary>
            Windows Vista and later. Causes items in the drop-down list and the edit box (when the edit box is read only) to be truncated
            with an ellipsis ("...") rather than just clipped by the edge of the control. This is useful when the control needs to be set
            to a fixed width, yet the entries in the list may be long.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.COMBOBOXINFO">
            <summary>Contains combo box status information.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.COMBOBOXINFO.cbSize">
            <summary>The size, in bytes, of the structure. The calling application must set this to sizeof(COMBOBOXINFO).</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.COMBOBOXINFO.rcItem">
            <summary>A RECT structure that specifies the coordinates of the edit box.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.COMBOBOXINFO.rcButton">
            <summary>A RECT structure that specifies the coordinates of the button that contains the drop-down arrow.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.COMBOBOXINFO.buttonState">
            <summary>The combo box button state.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.COMBOBOXINFO.hwndCombo">
            <summary>A handle to the combo box.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.COMBOBOXINFO.hwndEdit">
            <summary>A handle to the edit box.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.COMBOBOXINFO.hwndList">
            <summary>A handle to the drop-down list.</summary>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.COMBOBOXINFO.FromHandle(Vanara.PInvoke.HWND)">
            <summary>Creates an instance of the <see cref="T:Vanara.PInvoke.ComCtl32.COMBOBOXINFO"/> structure from a handle and retrieves its values.</summary>
            <param name="hComboBox">The handle to a ComboBox.</param>
            <returns>A <see cref="T:Vanara.PInvoke.ComCtl32.COMBOBOXINFO"/> structure with values from the supplied handle.</returns>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.COMBOBOXINFO.Invisible">
            <summary>Gets a value indicating whether this <see cref="T:Vanara.PInvoke.ComCtl32.COMBOBOXINFO"/> is invisible.</summary>
            <value><c>true</c> if invisible; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.COMBOBOXINFO.Pressed">
            <summary>Gets a value indicating whether this <see cref="T:Vanara.PInvoke.ComCtl32.COMBOBOXINFO"/> is pressed.</summary>
            <value><c>true</c> if pressed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.COMBOBOXINFO.ItemRectangle">
            <summary>Gets the item rectangle.</summary>
            <value>The item rectangle.</value>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.COMBOBOXINFO.ButtonRectangle">
            <summary>Gets the button rectangle.</summary>
            <value>The button rectangle.</value>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.NMCBEDRAGBEGIN">
            <summary>Contains information used with the CBEN_DRAGBEGIN notification code.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMCBEDRAGBEGIN.hdr">
            <summary>The NMHDR structure that contains information about the notification code.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMCBEDRAGBEGIN.iItemId">
            <summary>
            The zero-based index of the item being dragged. This value will always be -1, indicating that the item being dragged is the
            item displayed in the edit portion of the control.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMCBEDRAGBEGIN.szText">
            <summary>The character buffer that contains the text of the item being dragged.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.NMCBEENDEDIT">
            <summary>
            Contains information about the conclusion of an edit operation within a ComboBoxEx control. This structure is used with the
            CBEN_ENDEDIT notification code.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMCBEENDEDIT.hdr">
            <summary>The NMHDR structure that contains information about the notification code.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMCBEENDEDIT.fChanged">
            <summary>
            A value indicating whether the contents of the control's edit box have changed. This value is nonzero if the contents have
            been modified, or zero otherwise.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMCBEENDEDIT.iNewSelection">
            <summary>
            The zero-based index of the item that will be selected after completing the edit operation. This value can be CB_ERR if no
            item will be selected.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMCBEENDEDIT.szText">
            <summary>A zero-terminated string that contains the text from within the control's edit box.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMCBEENDEDIT.iWhy">
            <summary>A value that specifies the action that generated the CBEN_ENDEDIT notification code.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.NMCOMBOBOXEX">
            <summary>Contains information specific to ComboBoxEx items for use with notification codes.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMCOMBOBOXEX.hdr">
            <summary>The NMHDR structure that contains information about the notification code.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMCOMBOBOXEX.ceItem">
            <summary>
            The COMBOBOXEXITEM structure that holds item information specific to the current notification. Upon receiving a notification
            code, the COMBOBOXEXITEM structure holds information required for the owner to respond. The members of this structure are
            often used as fields for the owner to return values in response to the notification.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.COMBOBOXEXITEM">
            <summary>Contains information about an item in a ComboBoxEx control.</summary>
            <seealso cref="T:System.IDisposable"/>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.COMBOBOXEXITEM.mask">
            <summary>
            A set of bit flags that specify attributes of this structure or of an operation that is using this structure. The flags
            specify members that are valid or must be filled in.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.COMBOBOXEXITEM.iItem">
            <summary>The zero-based index of the item.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.COMBOBOXEXITEM.pszText">
            <summary>
            A pointer to a character buffer that contains or receives the item's text. If text information is being retrieved, this
            member must be set to the address of a character buffer that will receive the text. The size of this buffer must also be
            indicated in cchTextMax. If this member is set to LPSTR_TEXTCALLBACK, the control will request the information by using the
            CBEN_GETDISPINFO notification codes.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.COMBOBOXEXITEM.cchTextMax">
            <summary>The length of pszText, in TCHARs. If text information is being set, this member is ignored.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.COMBOBOXEXITEM.iImage">
            <summary>
            The zero-based index of an image within the image list. The specified image will be displayed for the item when it is not
            selected. If this member is set to I_IMAGECALLBACK, the control will request the information by using CBEN_GETDISPINFO
            notification codes.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.COMBOBOXEXITEM.iSelectedImage">
            <summary>
            The zero-based index of an image within the image list. The specified image will be displayed for the item when it is
            selected. If this member is set to I_IMAGECALLBACK, the control will request the information by using CBEN_GETDISPINFO
            notification codes.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.COMBOBOXEXITEM.iOverlay">
            <summary>
            The one-based index of an overlay image within the image list. If this member is set to I_IMAGECALLBACK, the control will
            request the information by using CBEN_GETDISPINFO notification codes.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.COMBOBOXEXITEM.iIndent">
            <summary>
            The number of indent spaces to display for the item. Each indentation equals 10 pixels. If this member is set to
            I_INDENTCALLBACK, the control will request the information by using CBEN_GETDISPINFO notification codes.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.COMBOBOXEXITEM.lParam">
            <summary>A value specific to the item.</summary>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.COMBOBOXEXITEM.#ctor(System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.ComCtl32.COMBOBOXEXITEM"/> class.</summary>
            <param name="textBufferSize">Size of the text buffer. If this value is 0, no buffer is created.</param>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.COMBOBOXEXITEM.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.ComCtl32.COMBOBOXEXITEM"/> class.</summary>
            <param name="text">The text.</param>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.COMBOBOXEXITEM.Text">
            <summary>Gets or sets the item's text.</summary>
            <value>The text value.</value>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.COMBOBOXEXITEM.UseTextCallback">
            <summary>Gets or sets a value indicating whether to use a text callback method.</summary>
            <value><c>true</c> if using text callback method; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.COMBOBOXEXITEM.System#IDisposable#Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CLR_DEFAULT">
            <summary>The default color.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CLR_NONE">
            <summary>No color.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.I_IMAGECALLBACK">
            <summary>
            By specifying the I_IMAGECALLBACK value instead of the index of an image, you can delay specifying the selected or nonselected
            image until the item is about to be redrawn. I_IMAGECALLBACK directs the control to query the application for the index by
            sending a control specific notification message.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.I_IMAGENONE">
            <summary>
            Set LPARAM to I_IMAGENONE to indicate that the button does not have an image. The button layout will not include any
            space for a bitmap, only text.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.INFOTIPSIZE">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NM_FIRST">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LPSTR_TEXTCALLBACK">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.SUBCLASSPROC">
            <summary>Defines the prototype for the callback function used by <c>RemoveWindowSubclass</c> and <c>SetWindowSubclass</c>.</summary>
            <param name="hWnd">
            <para>Type: <c>HWND</c></para>
            <para>The handle to the subclassed window.</para>
            </param>
            <param name="uMsg">
            <para>Type: <c>UINT</c></para>
            <para>The message being passed.</para>
            </param>
            <param name="wParam">
            <para>Type: <c>WPARAM</c></para>
            <para>Additional message information. The contents of this parameter depend on the value of uMsg.</para>
            </param>
            <param name="lParam">
            <para>Type: <c>LPARAM</c></para>
            <para>Additional message information. The contents of this parameter depend on the value of uMsg.</para>
            </param>
            <param name="uIdSubclass">
            <para>Type: <c>UINT_PTR</c></para>
            <para>The subclass ID.</para>
            </param>
            <param name="dwRefData">
            <para>Type: <c>DWORD_PTR</c></para>
            <para>
            The reference data provided to the <c>SetWindowSubclass</c> function. This can be used to associate the subclass instance with a
            "this" pointer.
            </para>
            </param>
            <returns>
            <para>Type: <c>LRESULT</c></para>
            <para>The return value is the result of the message processing and depends on the message sent.</para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.CommonControlClass">
            <summary>
            The set of bit flags that indicate which common control classes will be loaded from the DLL when calling <see cref="M:Vanara.PInvoke.ComCtl32.InitCommonControlsEx(Vanara.PInvoke.ComCtl32.INITCOMMONCONTROLSEX@)"/>.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CommonControlClass.ICC_ANIMATE_CLASS">
            <summary>Load animate control class.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CommonControlClass.ICC_BAR_CLASSES">
            <summary>Load toolbar, status bar, trackbar, and tooltip control classes.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CommonControlClass.ICC_COOL_CLASSES">
            <summary>Load rebar control class.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CommonControlClass.ICC_DATE_CLASSES">
            <summary>Load date and time picker control class.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CommonControlClass.ICC_HOTKEY_CLASS">
            <summary>Load hot key control class.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CommonControlClass.ICC_INTERNET_CLASSES">
            <summary>Load IP address class.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CommonControlClass.ICC_LINK_CLASS">
            <summary>Load a hyperlink control class.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CommonControlClass.ICC_LISTVIEW_CLASSES">
            <summary>Load list-view and header control classes.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CommonControlClass.ICC_NATIVEFNTCTL_CLASS">
            <summary>Load a native font control class.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CommonControlClass.ICC_PAGESCROLLER_CLASS">
            <summary>Load pager control class.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CommonControlClass.ICC_PROGRESS_CLASS">
            <summary>Load progress bar control class.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CommonControlClass.ICC_STANDARD_CLASSES">
            <summary>
            Load one of the intrinsic User32 control classes. The user controls include button, edit, static, listbox, combobox, and
            scroll bar.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CommonControlClass.ICC_TAB_CLASSES">
            <summary>Load tab and tooltip control classes.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CommonControlClass.ICC_TREEVIEW_CLASSES">
            <summary>Load tree-view and tooltip control classes.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CommonControlClass.ICC_UPDOWN_CLASS">
            <summary>Load up-down control class.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CommonControlClass.ICC_USEREX_CLASSES">
            <summary>Load ComboBoxEx class.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CommonControlClass.ICC_WIN95_CLASSES">
            <summary>
            Load animate control, header, hot key, list-view, progress bar, status bar, tab, tooltip, toolbar, trackbar, tree-view, and
            up-down control classes.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.CommonControlNotification">
            <summary>Notification codes for CommCtrl.h</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CommonControlNotification.NM_OUTOFMEMORY">
            <summary>
            <para>
            Notifies a control's parent window that the control could not complete an operation because there was not enough memory
            available. This notification code is sent in the form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>NM_OUTOFMEMORY lpnmh = (LPNMHDR) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>A pointer to an <c>NMHDR</c> structure that contains additional information about this notification.</para>
            <para><strong>Returns</strong></para>
            <para>The return value is ignored by the control.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CommonControlNotification.NM_CLICK">
            <summary>
            <para>
            Sent by a list-view control when the user clicks an item with the left mouse button. This notification code is sent in the
            form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>NM_CLICK lpnmitem = (LPNMITEMACTIVATE) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>
            Version 4.71. Pointer to an <c>NMITEMACTIVATE</c> structure that contains additional information about this notification. The
            <c>iItem</c>, <c>iSubItem</c>, and <c>ptAction</c> members of this structure contain information about the item.
            </para>
            <para><strong>Returns</strong></para>
            <para>The return value for this notification is not used.</para>
            </summary>
            <remarks>
            The <c>iItem</c> member of lParam is only valid if the icon or first-column label has been clicked. To determine which item
            is selected when a click takes place elsewhere in a row, send an <c>LVM_SUBITEMHITTEST</c> message.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CommonControlNotification.NM_DBLCLK">
            <summary>
            <para>
            Sent by a list-view control when the user double-clicks an item with the left mouse button. This notification code is sent in
            the form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>NM_DBLCLK lpnmitem = (LPNMITEMACTIVATE) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>
            Version 4.71. Pointer to an <c>NMITEMACTIVATE</c> structure that contains additional information about this notification. The
            <c>iItem</c>, <c>iSubItem</c>, and <c>ptAction</c> members of this structure contain information about the item.
            </para>
            <para><strong>Returns</strong></para>
            <para>The return value for this notification is not used.</para>
            </summary>
            <remarks>
            The <c>iItem</c> member of lParam is only valid if the icon or first-column label has been clicked. To determine which item
            is selected when a click takes place elsewhere in a row, send an <c>LVM_SUBITEMHITTEST</c> message.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CommonControlNotification.NM_RETURN">
            <summary>
            <para>
            Notifies a control's parent window that the control has the input focus and that the user has pressed the ENTER key. This
            notification code is sent in the form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>NM_RETURN lpnmh = (LPNMHDR) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>A pointer to an <c>NMHDR</c> structure that contains additional information about this notification.</para>
            <para><strong>Returns</strong></para>
            <para>The return value is ignored by the control.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CommonControlNotification.NM_RCLICK">
            <summary>
            <para>
            Notifies the parent window of a tree-view control that the user has clicked the right mouse button within the control. This
            notification code is sent in the form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>NM_RCLICK lpnmh = (LPNMHDR) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>Pointer to an <c>NMHDR</c> structure that contains additional information about this notification.</para>
            <para><strong>Returns</strong></para>
            <para>Return nonzero to prevent the default processing, or zero to allow the default processing.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CommonControlNotification.NM_RDBLCLK">
            <summary>
            <para>
            Notifies the parent of a tree-view control that the user has double-clicked the right mouse button within the control. This
            notification is sent in the form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>NM_RDBLCLK lpnmh = (LPNMHDR) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>Pointer to an <c>NMHDR</c> structure that contains additional information about this notification.</para>
            <para><strong>Returns</strong></para>
            <para>Return nonzero to prevent the default processing, or zero to allow the default processing.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CommonControlNotification.NM_SETFOCUS">
            <summary>
            <para>
            Notifies a control's parent window that the control has received the input focus. This notification code is sent in the form
            of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>NM_SETFOCUS lpnmh = (LPNMHDR) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>A pointer to an <c>NMHDR</c> structure that contains additional information about this notification.</para>
            <para><strong>Returns</strong></para>
            <para>The return value is ignored by the control.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CommonControlNotification.NM_KILLFOCUS">
            <summary>
            <para>
            Notifies a control's parent window that the control has lost the input focus. This notification code is sent in the form of a
            <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>NM_KILLFOCUS lpnmh = (LPNMHDR) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>A pointer to an <c>NMHDR</c> structure that contains additional information about this notification.</para>
            <para><strong>Returns</strong></para>
            <para>The return value is ignored by the control.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CommonControlNotification.NM_CUSTOMDRAW">
            <summary>
            <para>
            Notifies a control's parent window about custom drawing operations. This notification code is sent in the form of a
            <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>NM_CUSTOMDRAW #ifdef LIST_VIEW_CUSTOM_DRAW lpNMCustomDraw = (LPNMLVCUSTOMDRAW) lParam; #elif TOOL_TIPS_CUSTOM_DRAW lpNMCustomDraw = (LPNMTTCUSTOMDRAW) lParam; #elif TREE_VIEW_CUSTOM_DRAW lpNMCustomDraw = (LPNMTVCUSTOMDRAW) lParam; #elif TOOL_BAR_CUSTOM_DRAW lpNMCustomDraw = (LPNMTBCUSTOMDRAW) lParam; #else lpNMCustomDraw = (LPNMCUSTOMDRAW) lParam; #endif</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>
            A pointer to a custom draw-related structure that contains information about the drawing operation. The following list
            specifies the controls and their associated structures.
            </para>
            <list type="table">
            <listheader>
            <term>Control</term>
            <term>Custom Draw Structure</term>
            </listheader>
            <item>
            <term>Rebar, trackbar, and header</term>
            <term><c>NMCUSTOMDRAW</c></term>
            </item>
            <item>
            <term>List view</term>
            <term><c>NMLVCUSTOMDRAW</c></term>
            </item>
            <item>
            <term>Tooltip</term>
            <term><c>NMTTCUSTOMDRAW</c></term>
            </item>
            <item>
            <term>Tree view</term>
            <term><c>NMTVCUSTOMDRAW</c></term>
            </item>
            <item>
            <term>Toolbar</term>
            <term><c>NMTBCUSTOMDRAW</c></term>
            </item>
            </list>
            <para><strong>Returns</strong></para>
            <para>
            The value your application can return depends on the current drawing stage. The <c>dwDrawStage</c> member of the associated
            <c>NMCUSTOMDRAW</c> structure holds a value that specifies the drawing stage. You must return one of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term><c>CDRF_DODEFAULT</c></term>
            <term>
            The control will draw itself. It will not send additional NM_CUSTOMDRAW notification codes for this paint cycle. This flag
            cannot be used with any other flag.
            </term>
            </item>
            <item>
            <term><c>CDRF_DOERASE</c></term>
            <term>The control will only draw the background.</term>
            </item>
            <item>
            <term><c>CDRF_NEWFONT</c></term>
            <term>
            Your application specified a new font for the item; the control will use the new font. For more information on changing
            fonts, see Changing fonts and colors. This occurs when <c>dwDrawStage</c> equals CDDS_ITEMPREPAINT.
            </term>
            </item>
            <item>
            <term><c>CDRF_NOTIFYITEMDRAW</c></term>
            <term>
            The control will notify the parent of any item-related drawing operations. It will send NM_CUSTOMDRAW notification codes
            before and after drawing items. This occurs when <c>dwDrawStage</c> equals CDDS_PREPAINT.
            </term>
            </item>
            <item>
            <term><c>CDRF_NOTIFYPOSTERASE</c></term>
            <term>The control will notify the parent after erasing an item. This occurs when <c>dwDrawStage</c> equals CDDS_PREPAINT.</term>
            </item>
            <item>
            <term><c>CDRF_NOTIFYPOSTPAINT</c></term>
            <term>
            The control will send an NM_CUSTOMDRAW notification code when the painting cycle for the entire control is complete. This
            occurs when <c>dwDrawStage</c> equals CDDS_PREPAINT.
            </term>
            </item>
            <item>
            <term><c>CDRF_NOTIFYSUBITEMDRAW</c></term>
            <term>
            Your application will receive an NM_CUSTOMDRAW notification code with <c>dwDrawStage</c> set to CDDS_ITEMPREPAINT |
            CDDS_SUBITEM before each list-view subitem is drawn. You can then specify font and color for each subitem separately or
            return <c>CDRF_DODEFAULT</c> for default processing. This occurs when <c>dwDrawStage</c> equals CDDS_ITEMPREPAINT.
            </term>
            </item>
            <item>
            <term><c>CDRF_SKIPDEFAULT</c></term>
            <term>
            Your application drew the item manually. The control will not draw the item. This occurs when <c>dwDrawStage</c> equals CDDS_ITEMPREPAINT.
            </term>
            </item>
            <item>
            <term><c>CDRF_SKIPPOSTPAINT</c></term>
            <term>The control will not draw the focus rectangle around an item.</term>
            </item>
            </list>
            </summary>
            <remarks>
            <para>
            Currently, the following controls support custom draw functionality: header, list view, rebar, toolbar, tooltip, trackbar,
            and tree view. Custom draw is also supported for button controls if you have an application manifest to ensure that
            Comctl32.dll version 6 is available.
            </para>
            <para>
            If this message is handled in a dialog procedure, you must set the return value as part of the window data before returning
            <c>TRUE</c>. For more information, see <c>DialogProc</c>.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CommonControlNotification.NM_HOVER">
            <summary>
            <para>
            Sent by a control when the mouse hovers over an item. This notification code is sent in the form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>NM_HOVER lpnmh = (LPNMHDR) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>A pointer to an <c>NMHDR</c> structure that contains additional information about this notification.</para>
            <para><strong>Returns</strong></para>
            <para>
            Unless otherwise specified, return zero to allow the control to process the hover normally, or nonzero to prevent the hover
            from being processed.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CommonControlNotification.NM_NCHITTEST">
            <summary>
            <para>
            Sent by a rebar control when the control receives a <c>WM_NCHITTEST</c> message. This notification code is sent in the form
            of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>NM_NCHITTEST lpnmmouse = (LPNMMOUSE) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>
            A pointer to a <c>NMMOUSE</c> structure that contains information about the notification code. The pt member contains the
            mouse coordinates of the hit test message.
            </para>
            <para><strong>Returns</strong></para>
            <para>
            Unless otherwise specified, return zero to allow the control to perform default processing of the hit test message, or return
            one of the HT* values documented under <c>WM_NCHITTEST</c> to override the default hit test processing.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CommonControlNotification.NM_KEYDOWN">
            <summary>
            <para>
            Sent by a control when the control has the keyboard focus and the user presses a key. This notification code is sent in the
            form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>NM_KEYDOWN lpnmk = (LPNMKEY) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>
            A pointer to an <c>NMKEY</c> structure that contains additional information about the key that caused the notification code.
            </para>
            <para><strong>Returns</strong></para>
            <para>Return nonzero to prevent the control from processing the key, or zero otherwise.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CommonControlNotification.NM_RELEASEDCAPTURE">
            <summary>
            <para>
            Notifies a control's parent window that the control is releasing mouse capture. This notification code is sent in the form of
            a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>NM_RELEASEDCAPTURE lpnmh = (LPNMHDR) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>A pointer to an <c>NMHDR</c> structure that contains additional information about this notification.</para>
            <para><strong>Returns</strong></para>
            <para>Unless otherwise specified, the control ignores the return value from this notification code.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CommonControlNotification.NM_SETCURSOR">
            <summary>
            <para>
            Notifies a control's parent window that the control is setting the cursor in response to a <c>WM_SETCURSOR</c> message. This
            notification code is sent in the form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>NM_SETCURSOR lpnmm = (LPNMMOUSE) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>A pointer to an <c>NMMOUSE</c> structure that contains additional information about this notification.</para>
            <para><strong>Returns</strong></para>
            <para>Return zero to enable the control to set the cursor or nonzero to prevent the control from setting the cursor.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CommonControlNotification.NM_CHAR">
            <summary>
            <para>
            The NM_CHAR notification code is sent by a control when a character key is processed. This notification code is sent in the
            form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>NM_CHAR lpnmc = (LPNMCHAR) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>
            A pointer to an <c>NMCHAR</c> structure that contains additional information about the character that caused the notification code.
            </para>
            <para><strong>Returns</strong></para>
            <para>The return value is ignored by most controls. For more information, see the documentation for the individual controls.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CommonControlNotification.NM_TOOLTIPSCREATED">
            <summary>
            <para>
            Notifies a control's parent window that the control has created a tooltip control. This notification code is sent in the form
            of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>NM_TOOLTIPSCREATED lpnmttc = (LPNMHDR) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>A pointer to an <c>NMTOOLTIPSCREATED</c> structure that contains additional information about this notification.</para>
            <para><strong>Returns</strong></para>
            <para>Unless otherwise specified, the control ignores the return value from this notification code.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CommonControlNotification.NM_LDOWN">
            <summary>
            <para>
            Notifies a control's parent window that the left mouse button has been pressed. This notification code is sent in the form of
            a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>NM_LDOWN lpnmhdr = (LPNMHDR) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>A pointer to an <c>NMHDR</c> structure that contains additional information about this notification.</para>
            <para><strong>Returns</strong></para>
            <para>The return value is ignored by the control.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CommonControlNotification.NM_RDOWN">
            <summary>This notification code is not supported.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CommonControlNotification.NM_THEMECHANGED">
            <summary>
            <para>
            Notifies a control's parent window that the theme has changed. This notification code is sent in the form of a
            <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>NM_THEMECHANGED lpnmhdr = (LPNMHDR) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>A pointer to an <c>NMHDR</c> structure that contains additional information about this notification.</para>
            <para><strong>Returns</strong></para>
            <para>The return value is ignored by the control.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CommonControlNotification.NM_FONTCHANGED">
            <summary>
            <para>
            Sent by a list-view control when the control has changed a font. This notification code is sent in the form of a
            <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>NM_FONTCHANGED lpnmh = (LPNMHDR) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>A pointer to an <c>NMHDR</c> structure that contains additional information about this notification.</para>
            <para><strong>Returns</strong></para>
            <para>The return value is ignored by the control.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CommonControlNotification.NM_CUSTOMTEXT">
            <summary>
            <para>
            Notifies a control's parent window about custom text operations. This notification code is sent in the form of a
            <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>NM_CUSTOMTEXT lpnmct = (NMCUSTOMTEXT) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>A pointer to an <c>NMCUSTOMTEXT</c> structure that contains additional information about this notification.</para>
            <para><strong>Returns</strong></para>
            <para>The return value is ignored by the control.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CommonControlNotification.NM_TVSTATEIMAGECHANGING">
            <summary>
            <para>
            Sent by a tree-view control to its parent window that the state image is changing. This notification code is sent in the form
            of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>NM_TVSTATEIMAGECHANGING lpnmtsic = (LPNMTVSTATEIMAGECHANGING) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>A pointer to an <c>NMTVSTATEIMAGECHANGING</c> structure that contains additional information about this notification.</para>
            <para><strong>Returns</strong></para>
            <para>The return value is ignored by the control.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.CustomDrawItemState">
            <summary>The current item state.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CustomDrawItemState.CDIS_SELECTED">
            <summary>The item is selected.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CustomDrawItemState.CDIS_GRAYED">
            <summary>The item is grayed.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CustomDrawItemState.CDIS_DISABLED">
            <summary>The item is disabled.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CustomDrawItemState.CDIS_CHECKED">
            <summary>The item is in focus.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CustomDrawItemState.CDIS_FOCUS">
            <summary>The item is in focus.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CustomDrawItemState.CDIS_DEFAULT">
            <summary>The item is in its default state.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CustomDrawItemState.CDIS_HOT">
            <summary>The item is currently under the pointer ("hot").</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CustomDrawItemState.CDIS_MARKED">
            <summary>
            The item is marked. The meaning of this is determined by the implementation. <note>This flag does not work correctly for
            owner-drawn list-view controls that have the LVS_SHOWSELALWAYS style. For these controls, you can determine whether an item
            is selected by using LVM_GETITEMSTATE (or
            ListView_GetItemState) and checking for the LVIS_SELECTED flag.</note>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CustomDrawItemState.CDIS_INDETERMINATE">
            <summary>The item is in an indeterminate state.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CustomDrawItemState.CDIS_SHOWKEYBOARDCUES">
            <summary>
            Version 6.0.The item is showing its keyboard cues. <note>Comctl32 version 6 is not redistributable. operating systems. To use
            Comctl32.dll version 6, specify it in the manifest. For more information on manifests, see Enabling Visual Styles.</note>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CustomDrawItemState.CDIS_NEARHOT">
            <summary>
            The item is part of a control that is currently under the mouse pointer ("hot"), but the item is not "hot" itself. The
            meaning of this is determined by the implementation.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CustomDrawItemState.CDIS_OTHERSIDEHOT">
            <summary>
            The item is part of a splitbutton that is currently under the mouse pointer ("hot"), but the item is not "hot" itself. The
            meaning of this is determined by the implementation.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CustomDrawItemState.CDIS_DROPHILITED">
            <summary>The item is currently the drop target of a drag-and-drop operation.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.CustomDrawResponse">
            <summary>These constants are used as return values by a control in response to an NM_CUSTOMDRAW notification code.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CustomDrawResponse.CDRF_DODEFAULT">
            <summary>
            The control will draw itself. It will not send any additional NM_CUSTOMDRAW notification codes for this paint cycle. This
            occurs when the dwDrawStage of the NMCUSTOMDRAW structure equals CDDS_PREPAINT.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CustomDrawResponse.CDRF_NEWFONT">
            <summary>
            The application specified a new font for the item; the control will use the new font. For more information about changing
            fonts, see Changing fonts and colors. This occurs when the dwDrawStage of the NMCUSTOMDRAW structure equals CDDS_ITEMPREPAINT.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CustomDrawResponse.CDRF_SKIPDEFAULT">
            <summary>
            The application drew the item manually. The control will not draw the item. This occurs when the dwDrawStage of the
            NMCUSTOMDRAW structure equals CDDS_ITEMPREPAINT.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CustomDrawResponse.CDRF_DOERASE">
            <summary>Windows Vista and later. The control will draw the background.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CustomDrawResponse.CDRF_NOTIFYPOSTPAINT">
            <summary>
            The control will notify the parent after painting an item. This occurs when the dwDrawStage of the NMCUSTOMDRAW structure
            equals CDDS_PREPAINT.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CustomDrawResponse.CDRF_NOTIFYITEMDRAW">
            <summary>
            The control will notify the parent of any item-related drawing operations. It will send NM_CUSTOMDRAW notification codes
            before and after drawing items. This occurs when the dwDrawStage of the NMCUSTOMDRAW structure equals CDDS_PREPAINT.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CustomDrawResponse.CDRF_NOTIFYSUBITEMDRAW">
            <summary>
            Internet Explorer 4.0 and later. The control will notify the parent of any item-related drawing operations. It will send
            NM_CUSTOMDRAW notification codes before and after drawing items. This occurs when the dwDrawStage of the NMCUSTOMDRAW
            structure equals CDDS_PREPAINT. This flag is identical to CDRF_NOTIFYITEMDRAW and its use is context-dependent.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CustomDrawResponse.CDRF_NOTIFYPOSTERASE">
            <summary>
            The control will notify the parent after erasing an item. This occurs when the dwDrawStage of the NMCUSTOMDRAW structure
            equals CDDS_PREPAINT.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CustomDrawResponse.CDRF_SKIPPOSTPAINT">
            <summary>Windows Vista and later. The control will not draw the focus rectangle.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.CustomDrawStage">
            <summary>The current drawing stage.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CustomDrawStage.CDDS_PREPAINT">
            <summary>Before the painting cycle begins.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CustomDrawStage.CDDS_POSTPAINT">
            <summary>After the painting cycle is complete.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CustomDrawStage.CDDS_PREERASE">
            <summary>Before the erasing cycle begins.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CustomDrawStage.CDDS_POSTERASE">
            <summary>After the erasing cycle is complete.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CustomDrawStage.CDDS_ITEM">
            <summary>Indicates that the dwItemSpec, uItemState, and lItemlParam members are valid.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CustomDrawStage.CDDS_ITEMPREPAINT">
            <summary>Before an item is drawn.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CustomDrawStage.CDDS_ITEMPOSTPAINT">
            <summary>After an item has been drawn.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CustomDrawStage.CDDS_ITEMPREERASE">
            <summary>Before an item is erased.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CustomDrawStage.CDDS_ITEMPOSTERASE">
            <summary>After an item has been erased.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CustomDrawStage.CDDS_SUBITEM">
            <summary>
            Flag combined with CDDS_ITEMPREPAINT or CDDS_ITEMPOSTPAINT if a subitem is being drawn. This will only be set if
            CDRF_NOTIFYITEMDRAW is returned from CDDS_PREPAINT.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.HotItemChangeFlags">
            <summary>Flags that indicate why the hot item has changed.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HotItemChangeFlags.HICF_OTHER">
            <summary>
            The change in the hot item resulted from an event that could not be determined. This will most often be due to a change in
            focus or the TB_SETHOTITEM message.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HotItemChangeFlags.HICF_MOUSE">
            <summary>The change in the hot item resulted from a mouse event.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HotItemChangeFlags.HICF_ARROWKEYS">
            <summary>The change in the hot item was caused by an arrow key.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HotItemChangeFlags.HICF_ACCELERATOR">
            <summary>The change in the hot item was caused by a shortcut key.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HotItemChangeFlags.HICF_DUPACCEL">
            <summary>Modifies HICF_ACCELERATOR. If this flag is set, more than one item has the same shortcut key character.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HotItemChangeFlags.HICF_ENTERING">
            <summary>
            Modifies the other reason flags. If this flag is set, there is no previous hot item and idOld does not contain valid information.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HotItemChangeFlags.HICF_LEAVING">
            <summary>
            Modifies the other reason flags. If this flag is set, there is no new hot item and idNew does not contain valid information.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HotItemChangeFlags.HICF_RESELECT">
            <summary>The change in the hot item resulted from the user entering the shortcut key for an item that was already hot.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HotItemChangeFlags.HICF_LMOUSE">
            <summary>The change in the hot item resulted from a left-click mouse event.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HotItemChangeFlags.HICF_TOGGLEDROPDOWN">
            <summary>Version 5.80. Causes the button to switch states.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.LI_METRIC">
            <summary>The desired metric.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LI_METRIC.LIM_SMALL">
            <summary>Corresponds to SM_CXSMICON, the recommended pixel width of a small icon.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LI_METRIC.LIM_LARGE">
            <summary>Corresponds toSM_CXICON, the default pixel width of an icon.</summary>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32._TrackMouseEvent(Vanara.PInvoke.User32.TRACKMOUSEEVENT@)">
            <summary>
            Posts messages when the mouse pointer leaves a window or hovers over a window for a specified amount of time. This function calls
            TrackMouseEvent if it exists, otherwise it emulates it.
            </summary>
            <param name="lpEventTrack">
            <para>Type: <c>LPTRACKMOUSEEVENT</c></para>
            <para>A pointer to a <c>TRACKMOUSEEVENT</c> structure that contains tracking information.</para>
            </param>
            <returns>
            <para>Type: <c>BOOL</c></para>
            <para>If the function succeeds, the return value is nonzero .</para>
            <para>If the function fails, return value is zero. To get extended error information, call <c>GetLastError</c>.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.DefSubclassProc(Vanara.PInvoke.HWND,System.UInt32,System.IntPtr,System.IntPtr)">
            <summary>
            Calls the next handler in a window's subclass chain. The last handler in the subclass chain calls the original window procedure
            for the window.
            </summary>
            <param name="hWnd">
            <para>Type: <c>HWND</c></para>
            <para>A handle to the window being subclassed.</para>
            </param>
            <param name="uMsg">
            <para>Type: <c>UINT</c></para>
            <para>A value of type unsigned <c>int</c> that specifies a window message.</para>
            </param>
            <param name="WPARAM">
            <para>Type: <c>WPARAM</c></para>
            <para>Specifies additional message information. The contents of this parameter depend on the value of the window message.</para>
            </param>
            <param name="LPARAM">
            <para>Type: <c>LPARAM</c></para>
            <para>
            Specifies additional message information. The contents of this parameter depend on the value of the window message. Note: On
            64-bit versions of Windows LPARAM is a 64-bit value.
            </para>
            </param>
            <returns>
            <para>Type: <c>LRESULT</c></para>
            <para>The returned value is specific to the message sent. This value should be ignored.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.DrawShadowText(Vanara.PInvoke.HDC,System.String,System.UInt32,Vanara.PInvoke.RECT@,System.UInt32,Vanara.PInvoke.COLORREF,Vanara.PInvoke.COLORREF,System.Int32,System.Int32)">
            <summary>Draws text that has a shadow.</summary>
            <param name="hdc">
            <para>Type: <c><c>HDC</c></c></para>
            <para>HDC.</para>
            </param>
            <param name="pszText">
            <para>Type: <c><c>LPCWSTR</c></c></para>
            <para>A pointer to a string that contains the text to be drawn.</para>
            </param>
            <param name="cch">
            <para>Type: <c><c>UINT</c></c></para>
            <para>A <c>UINT</c> that specifies the number of characters in the string that is to be drawn.</para>
            </param>
            <param name="pRect">
            <para>Type: <c>const <c>RECT</c>*</c></para>
            <para>A pointer to a <c>RECT</c> structure that contains, in logical coordinates, the rectangle in which the text is to be drawn.</para>
            </param>
            <param name="dwFlags">
            <para>Type: <c><c>DWORD</c></c></para>
            <para>A <c>DWORD</c> that specifies how the text is to be drawn. See Format Values for possible parameter values.</para>
            </param>
            <param name="crText">
            <para>Type: <c><c>COLORREF</c></c></para>
            <para>A <c>COLORREF</c> structure that contains the color of the text.</para>
            </param>
            <param name="crShadow">
            <para>Type: <c><c>COLORREF</c></c></para>
            <para>A <c>COLORREF</c> structure that contains the color of the text shadow.</para>
            </param>
            <param name="ixOffset">
            <para>Type: <c>int</c></para>
            <para>A value of type <c>int</c> that specifies the x-coordinate of where the text should begin.</para>
            </param>
            <param name="iyOffset">
            <para>Type: <c>int</c></para>
            <para>A value of type <c>int</c> that specifies the y-coordinate of where the text should begin.</para>
            </param>
            <returns>
            <para>Type: <c>int</c></para>
            <para>Returns the height of the text in logical units if the function succeeds, otherwise returns zero.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.GetEffectiveClientRect(Vanara.PInvoke.HWND,Vanara.PInvoke.RECT@,System.IntPtr)">
            <summary>Calculates the dimensions of a rectangle in the client area that contains all the specified controls.</summary>
            <param name="hWnd">
            <para>Type: <c><c>HWND</c></c></para>
            <para>A handle to the window that has the client area to check.</para>
            </param>
            <param name="lprc">
            <para>Type: <c>LPRECT</c></para>
            <para>A pointer to a <c>RECT</c> structure that receives the dimensions of the rectangle.</para>
            </param>
            <param name="lpInfo">
            <para>Type: <c>const <c>INT</c>*</c></para>
            <para>
            A pointer to a null-terminated array of integers that identify controls in the client area. Each control requires a pair of
            consecutive elements. The first element of the pair must be nonzero and the second element of the pair must be the control
            identifier. The first pair represents the menu and is ignored. The last element must be zero to identify the end of the array.
            </para>
            </param>
            <returns>No return value.</returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.GetEffectiveClientRect(Vanara.PInvoke.HWND,System.Int32[])">
            <summary>Calculates the dimensions of a rectangle in the client area that contains all the specified controls.</summary>
            <param name="hWnd">A handle to the window that has the client area to check.</param>
            <param name="controlIdentifiers">An array of integers that identify the control identifiers in the client area.</param>
            <returns>The dimensions of the rectangle.</returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.GetMUILanguage">
            <summary>Gets the language currently in use by the common controls for a particular process.</summary>
            <returns>
            <para>Type: <c><c>LANGID</c></c></para>
            <para>
            Returns the language identifier of the language an application has specified for the common controls by calling
            <c>InitMUILanguage</c>. <c>GetMUILanguage</c> returns the value for the process from which it is called. If
            <c>InitMUILanguage</c> has not been called or was not called from the same process, <c>GetMUILanguage</c> returns the
            language-neutral LANGID, <c>MAKELANGID</c>(LANG_NEUTRAL, SUBLANG_NEUTRAL).
            </para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.GetWindowSubclass(Vanara.PInvoke.HWND,Vanara.PInvoke.ComCtl32.SUBCLASSPROC,System.UInt32,System.IntPtr@)">
            <summary>Retrieves the reference data for the specified window subclass callback.</summary>
            <param name="hWnd">
            <para>Type: <c>HWND</c></para>
            <para>The handle of the window being subclassed.</para>
            </param>
            <param name="pfnSubclass">
            <para>Type: <c><c>SUBCLASSPROC</c></c></para>
            <para>A pointer to a window procedure. This pointer and the subclass ID uniquely identify this subclass callback.</para>
            </param>
            <param name="uIdSubclass">
            <para>Type: <c>UINT_PTR</c></para>
            <para>
            <c>UINT_PTR</c> subclass ID. This ID and the callback pointer uniquely identify this subclass callback. Note: On 64-bit versions
            of Windows this is a 64-bit value.
            </para>
            </param>
            <param name="pdwRefData">
            <para>Type: <c>DWORD_PTR*</c></para>
            <para>
            A pointer to a <c>DWORD</c> which will return the reference data. Note: On 64-bit versions of Windows, pointers are 64-bit values.
            </para>
            </param>
            <returns>
            <para>Type: <c>BOOL</c></para>
            <para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>TRUE</term>
            <term>The subclass callback was successfully installed.</term>
            </item>
            <item>
            <term>FALSE</term>
            <term>The subclass callback was not installed.</term>
            </item>
            </list>
            </para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.InitCommonControlsEx(Vanara.PInvoke.ComCtl32.INITCOMMONCONTROLSEX@)">
            <summary>
            Ensures that the common control DLL (Comctl32.dll) is loaded, and registers specific common control classes from the DLL. An
            application must call this function before creating a common control.
            </summary>
            <param name="icc">
            A pointer to an INITCOMMONCONTROLSEX structure that contains information specifying which control classes will be registered.
            </param>
            <returns>Returns TRUE if successful, or FALSE otherwise.</returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.InitCommonControlsEx(Vanara.PInvoke.ComCtl32.CommonControlClass)">
            <summary>
            Ensures that the common control DLL (Comctl32.dll) is loaded, and registers specific common control classes from the DLL. An
            application must call this function before creating a common control.
            </summary>
            <param name="ccc">The <see cref="T:Vanara.PInvoke.ComCtl32.CommonControlClass"/> value to assign to the dwICC field in <see cref="T:Vanara.PInvoke.ComCtl32.INITCOMMONCONTROLSEX"/>.</param>
            <returns>Returns TRUE if successful, or FALSE otherwise.</returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.InitMUILanguage(System.UInt16)">
            <summary>
            Enables an application to specify a language to be used with the common controls that is different from the system language.
            </summary>
            <param name="uiLang">
            <para>Type: <c><c>LANGID</c></c></para>
            <para>The language identifier of the language to be used by the common controls.</para>
            </param>
            <returns>None</returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.LoadIconMetric(Vanara.PInvoke.HINSTANCE,System.String,Vanara.PInvoke.ComCtl32.LI_METRIC,Vanara.PInvoke.User32.SafeHICON@)">
            <summary>Loads a specified icon resource with a client-specified system metric.</summary>
            <param name="hinst">
            <para>Type: <c><c>HINSTANCE</c></c></para>
            <para>
            A handle to the module of either a DLL or executable (.exe) file that contains the icon to be loaded. For more information, see <c>GetModuleHandle</c>.
            </para>
            <para>To load a predefined icon or a standalone icon file, set this parameter to <c>NULL</c>.</para>
            </param>
            <param name="pszName">
            <para>Type: <c><c>PCWSTR</c></c></para>
            <para>
            A pointer to a null-terminated, Unicode buffer that contains location information about the icon to load. It is interpreted as follows:
            </para>
            <para>If hinst is <c>NULL</c>, pszName can specify one of two things.</para>
            <para>If hinst is non-null, pszName can specify one of two things.</para>
            </param>
            <param name="lims">
            <para>Type: <c>int</c></para>
            <para>The desired metric. One of the following values:</para>
            <para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>LIM_SMALL</term>
            <term>Corresponds to SM_CXSMICON, the recommended pixel width of a small icon.</term>
            </item>
            <item>
            <term>LIM_LARGE</term>
            <term>Corresponds toSM_CXICON, the default pixel width of an icon.</term>
            </item>
            </list>
            </para>
            </param>
            <param name="phico">
            <para>Type: <c><c>HICON</c>*</c></para>
            <para>When this function returns, contains a pointer to the handle of the loaded icon.</para>
            </param>
            <returns>
            <para>Type: <c><c>HRESULT</c></c></para>
            <para>Returns S_OK if successful, otherwise an error, including the following value.</para>
            <para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>E_INVALIDARG</term>
            <term>The contents of the buffer pointed to by pszName do not fit any of the expected interpretations.</term>
            </item>
            </list>
            </para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.LoadIconWithScaleDown(Vanara.PInvoke.HINSTANCE,System.String,System.Int32,System.Int32,System.IntPtr@)">
            <summary>
            Loads an icon. If the icon is not a standard size, this function scales down a larger image instead of scaling up a smaller image.
            </summary>
            <param name="hinst">
            <para>Type: <c><c>HINSTANCE</c></c></para>
            <para>
            A handle to the module of either a DLL or executable (.exe) file that contains the icon to be loaded. For more information, see <c>GetModuleHandle</c>.
            </para>
            <para>To load a predefined icon or a standalone icon file, set this parameter to <c>NULL</c>.</para>
            </param>
            <param name="pszName">
            <para>Type: <c><c>PCWSTR</c></c></para>
            <para>A pointer to a null-terminated, Unicode buffer that contains location information about the icon to load.</para>
            <para>
            If hinst is non- <c>NULL</c>, pszName specifies the icon resource either by name or ordinal. This ordinal must be packaged by
            using the <c>MAKEINTRESOURCE</c> macro.
            </para>
            <para>
            If hinst is <c>NULL</c>, pszName specifies either the name of a standalone icon (.ico) file or the identifier of a predefined
            icon to load. The following identifiers are recognized. To pass these constants to the <c>LoadIconWithScaleDown</c> function, use
            the <c>MAKEINTRESOURCE</c> macro. For example, to load the IDI_ERROR icon, pass as the pszName parameter and <c>NULL</c> as the
            hinst parameter.
            </para>
            <para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>IDI_APPLICATION</term>
            <term>Default application icon.</term>
            </item>
            <item>
            <term>IDI_ASTERISK</term>
            <term>Same as IDI_INFORMATION.</term>
            </item>
            <item>
            <term>IDI_ERROR</term>
            <term>Hand-shaped icon.</term>
            </item>
            <item>
            <term>IDI_EXCLAMATION</term>
            <term>Same as IDI_WARNING.</term>
            </item>
            <item>
            <term>IDI_HAND</term>
            <term>Same as IDI_ERROR.</term>
            </item>
            <item>
            <term>IDI_INFORMATION</term>
            <term>Asterisk icon.</term>
            </item>
            <item>
            <term>IDI_QUESTION</term>
            <term>Question mark icon.</term>
            </item>
            <item>
            <term>IDI_WARNING</term>
            <term>Exclamation point icon.</term>
            </item>
            <item>
            <term>IDI_WINLOGO</term>
            <term>Windows logo icon.</term>
            </item>
            <item>
            <term>IDI_SHIELD</term>
            <term>Security Shield icon.</term>
            </item>
            </list>
            </para>
            </param>
            <param name="cx">
            <para>Type: <c>int</c></para>
            <para>The desired width, in pixels, of the icon.</para>
            </param>
            <param name="cy">
            <para>Type: <c>int</c></para>
            <para>The desired height, in pixels, of the icon.</para>
            </param>
            <param name="phico">
            <para>Type: <c><c>HICON</c>*</c></para>
            <para>When this function returns, contains a pointer to the handle of the loaded icon.</para>
            </param>
            <returns>
            <para>Type: <c><c>HRESULT</c></c></para>
            <para>Returns S_OK if successful, or an error value otherwise, including the following:</para>
            <para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>E_INVALIDARG</term>
            <term>The contents of the buffer pointed to by pszName do not fit any of the expected interpretations.</term>
            </item>
            </list>
            </para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.RemoveWindowSubclass(Vanara.PInvoke.HWND,Vanara.PInvoke.ComCtl32.SUBCLASSPROC,System.UIntPtr)">
            <summary>Removes a subclass callback from a window.</summary>
            <param name="hWnd">
            <para>Type: <c>HWND</c></para>
            <para>The handle of the window being subclassed.</para>
            </param>
            <param name="pfnSubclass">
            <para>Type: <c><c>SUBCLASSPROC</c></c></para>
            <para>
            A pointer to a window procedure. This pointer and the subclass ID uniquely identify this subclass callback. For the callback
            function prototype, see <c>SUBCLASSPROC</c>.
            </para>
            </param>
            <param name="uIdSubclass">
            <para>Type: <c>UINT_PTR</c></para>
            <para>
            The <c>UINT_PTR</c> subclass ID. This ID and the callback pointer uniquely identify this subclass callback. Note: On 64-bit
            versions of Windows this is a 64-bit value.
            </para>
            </param>
            <returns>
            <para>Type: <c>BOOL</c></para>
            <para><c>TRUE</c> if the subclass callback was successfully removed; otherwise, <c>FALSE</c>.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.SetWindowSubclass(Vanara.PInvoke.HWND,Vanara.PInvoke.ComCtl32.SUBCLASSPROC,System.UIntPtr,System.IntPtr)">
            <summary>Installs or updates a window subclass callback.</summary>
            <param name="hWnd">
            <para>Type: <c>HWND</c></para>
            <para>The handle of the window being subclassed.</para>
            </param>
            <param name="pfnSubclass">
            <para>Type: <c><c>SUBCLASSPROC</c></c></para>
            <para>
            A pointer to a window procedure. This pointer and the subclass ID uniquely identify this subclass callback. For the callback
            function prototype, see <c>SUBCLASSPROC</c>.
            </para>
            </param>
            <param name="uIdSubclass">
            <para>Type: <c>UINT_PTR</c></para>
            <para>
            The subclass ID. This ID together with the subclass procedure uniquely identify a subclass. To remove a subclass, pass the
            subclass procedure and this value to the <c>RemoveWindowSubclass</c> function. This value is passed to the subclass procedure in
            the uIdSubclass parameter.
            </para>
            </param>
            <param name="dwRefData">
            <para>Type: <c>DWORD_PTR</c></para>
            <para>
            <c>DWORD_PTR</c> to reference data. The meaning of this value is determined by the calling application. This value is passed to
            the subclass procedure in the dwRefData parameter. A different dwRefData is associated with each combination of window handle,
            subclass procedure and uIdSubclass.
            </para>
            </param>
            <returns>
            <para>Type: <c>BOOL</c></para>
            <para><c>TRUE</c> if the subclass callback was successfully installed; otherwise, <c>FALSE</c>.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.ShowHideMenuCtl(Vanara.PInvoke.HWND,System.UInt32,System.Int32[])">
            <summary>
            <para>
            [ <c>ShowHideMenuCtl</c> is available for use in the operating systems specified in the Requirements section. It may be altered
            or unavailable in subsequent versions.]
            </para>
            <para>
            Sets or removes the specified menu item's check mark attribute and shows or hides the corresponding control. The function adds a
            check mark to the specified menu item if it does not have one and then displays the corresponding control. If the menu item
            already has a check mark, the function removes the check mark and hides the corresponding control.
            </para>
            </summary>
            <param name="hWnd">
            <para>Type: <c><c>HWND</c></c></para>
            <para>A handle to the window that contains the menu and controls.</para>
            </param>
            <param name="uFlags">
            <para>Type: <c><c>UINT_PTR</c></c></para>
            <para>The identifier of the menu item to receive or lose a check mark.</para>
            </param>
            <param name="lpInfo">
            <para>Type: <c><c>LPINT</c></c></para>
            <para>
            A pointer to an array that contains pairs of values. The second value in the first pair must be the handle to the application's
            main menu. Each subsequent pair consists of a menu item identifier and a control window identifier. The function searches the
            array for a value that matches uFlags and, if the value is found, checks or unchecks the menu item and shows or hides the
            corresponding control.
            </para>
            </param>
            <returns>
            <para>Type: <c><c>BOOL</c></c></para>
            <para>Returns nonzero if successful, or zero otherwise.</para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.COLORSCHEME">
            <summary>Contains information for the drawing of buttons in a toolbar or rebar.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.COLORSCHEME.dwSize">
            <summary>The size of this structure, in bytes.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.COLORSCHEME.clrBtnHighlight">
            <summary>
            The COLORREF value that represents the highlight color of the buttons. Use CLR_DEFAULT for the default highlight color.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.COLORSCHEME.clrBtnShadow">
            <summary>The COLORREF value that represents the shadow color of the buttons. Use CLR_DEFAULT for the default shadow color.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.INITCOMMONCONTROLSEX">
            <summary>
            Carries information used to load common control classes from the dynamic-link library (DLL). This structure is used with the
            <see cref="M:Vanara.PInvoke.ComCtl32.InitCommonControlsEx(Vanara.PInvoke.ComCtl32.INITCOMMONCONTROLSEX@)"/> function.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.INITCOMMONCONTROLSEX.dwSize">
            <summary>The size of the structure, in bytes.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.INITCOMMONCONTROLSEX.dwICC">
            <summary>
            The set of bit flags that indicate which common control classes will be loaded from the DLL when calling
            <see cref="M:Vanara.PInvoke.ComCtl32.InitCommonControlsEx(Vanara.PInvoke.ComCtl32.INITCOMMONCONTROLSEX@)"/>.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.INITCOMMONCONTROLSEX.#ctor(Vanara.PInvoke.ComCtl32.CommonControlClass)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.ComCtl32.INITCOMMONCONTROLSEX"/> class and sets the dwICC field.</summary>
            <param name="ccc">The <see cref="T:Vanara.PInvoke.ComCtl32.CommonControlClass"/> value to assign to the dwICC field.</param>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.NMCHAR">
            <summary>Contains information used with character notification messages.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMCHAR.hdr">
            <summary>
            <para>Type: <c><c>NMHDR</c></c></para>
            <para>An <c>NMHDR</c> structure that contains additional information about this notification.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMCHAR.ch">
            <summary>
            <para>Type: <c><c>UINT</c></c></para>
            <para>The character that is being processed.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMCHAR.dwItemPrev">
            <summary>
            <para>Type: <c><c>DWORD</c></c></para>
            <para>A 32-bit value that is determined by the control that is sending the notification.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMCHAR.dwItemNext">
            <summary>
            <para>Type: <c><c>DWORD</c></c></para>
            <para>A 32-bit value that is determined by the control that is sending the notification.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.NMCUSTOMDRAW">
            <summary>Contains information specific to an NM_CUSTOMDRAW notification code.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMCUSTOMDRAW.hdr">
            <summary>An NMHDR structure that contains information about this notification code.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMCUSTOMDRAW.dwDrawStage">
            <summary>The current drawing stage.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMCUSTOMDRAW.hdc">
            <summary>A handle to the control's device context. Use this HDC to perform any GDI functions.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMCUSTOMDRAW.rc">
            <summary>
            The RECT structure that describes the bounding rectangle of the area being drawn. This member is initialized only by the
            CDDS_ITEMPREPAINT notification. Version 5.80. This member is also initialized by the CDDS_PREPAINT notification.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMCUSTOMDRAW.dwItemSpec">
            <summary>
            The item number. What is contained in this member will depend on the type of control that is sending the notification. See
            the NM_CUSTOMDRAW notification reference for the specific control to determine what, if anything, is contained in this member.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMCUSTOMDRAW.uItemState">
            <summary>The current item state.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMCUSTOMDRAW.lItemlParam">
            <summary>Application-defined item data.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.NMCUSTOMSPLITRECTINFO">
            <summary>Contains information about the two rectangles of a split button. Sent with the NM_GETCUSTOMSPLITRECT notification.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMCUSTOMSPLITRECTINFO.hdr">
            <summary>An NMHDR structure that contains information about the notification.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMCUSTOMSPLITRECTINFO.rcClient">
            <summary>A RECT structure that describes the client area the button occupies.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMCUSTOMSPLITRECTINFO.rcButton">
            <summary>A RECT structure that describes the rectangle that does not contain the drop-down arrow.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMCUSTOMSPLITRECTINFO.rcSplit">
            <summary>A RECT structure that describes the rectangle that contains the drop-down arrow.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.NMCUSTOMTEXT">
            <summary>Contains information used with custom text notification.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMCUSTOMTEXT.hdr">
            <summary>
            <para>Type: <c><c>NMHDR</c></c></para>
            <para>An <c>NMHDR</c> structure that contains additional information about this notification.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMCUSTOMTEXT.hDC">
            <summary>
            <para>Type: <c><c>HDC</c></c></para>
            <para>The device context to draw to.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMCUSTOMTEXT.lpString">
            <summary>
            <para>Type: <c><c>LPCWSTR</c></c></para>
            <para>The string to draw.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMCUSTOMTEXT.nCount">
            <summary>
            <para>Type: <c>int</c></para>
            <para>Length of lpString.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMCUSTOMTEXT.lpRect">
            <summary>
            <para>Type: <c>LPRECT</c></para>
            <para>The rect to draw in.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMCUSTOMTEXT.uFormat">
            <summary>
            <para>Type: <c><c>UINT</c></c></para>
            <para>
            One or more of the DT_* flags. For more information, see the description of the uFormat parameter of the <c>DrawText</c>
            function. This may be <c>NULL</c>.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMCUSTOMTEXT.fLink">
            <summary>
            <para>Type: <c><c>BOOL</c></c></para>
            <para>Whether the text is a link.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.NMKEY">
            <summary>Contains information used with key notification messages.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMKEY.hdr">
            <summary>
            <para>Type: <c><c>NMHDR</c></c></para>
            <para>An <c>NMHDR</c> structure that contains additional information about this notification.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMKEY.nVKey">
            <summary>
            <para>Type: <c><c>UINT</c></c></para>
            <para>A virtual key code of the key that caused the event.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMKEY.uFlags">
            <summary>
            <para>Type: <c><c>UINT</c></c></para>
            <para>
            Flags associated with the key. These are the same flags that are passed in the high word of the lParam parameter of the
            <c>WM_KEYDOWN</c> message.
            </para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.NMMOUSE">
            <summary>Contains information used with mouse notification messages.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMMOUSE.hdr">
            <summary>
            <para>Type: <c><c>NMHDR</c></c></para>
            <para>An <c>NMHDR</c> structure that contains additional information about this notification.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMMOUSE.dwItemSpec">
            <summary>
            <para>Type: <c><c>DWORD_PTR</c></c></para>
            <para>A control-specific item identifier.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMMOUSE.dwItemData">
            <summary>
            <para>Type: <c><c>DWORD_PTR</c></c></para>
            <para>A control-specific item data.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMMOUSE.pt">
            <summary>
            <para>Type: <c><c>POINT</c></c></para>
            <para>A <c>POINT</c> structure that contains the client coordinates of the mouse when the click occurred.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMMOUSE.dwHitInfo">
            <summary>
            <para>Type: <c><c>LPARAM</c></c></para>
            <para>Carries information about where on the item or control the cursor is pointing.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.NMOBJECTNOTIFY">
            <summary>Contains information used with the TBN_GETOBJECT, TCN_GETOBJECT, and PSN_GETOBJECT notification codes.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMOBJECTNOTIFY.hdr">
            <summary>
            <para>Type: <c><c>NMHDR</c></c></para>
            <para>An <c>NMHDR</c> structure that contains additional information about this notification.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMOBJECTNOTIFY.iItem">
            <summary>
            <para>Type: <c>int</c></para>
            <para>
            A control-specific item identifier. This value will comply to item identification standards for the control sending the
            notification. However, this member is not used with the PSN_GETOBJECT notification code.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMOBJECTNOTIFY.piid">
            <summary>
            <para>Type: <c>IID*</c></para>
            <para>A pointer to an interface identifier of the requested object.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMOBJECTNOTIFY.pObject">
            <summary>
            <para>Type: <c><c>IUnknown</c>*</c></para>
            <para>
            A pointer to an object provided by the window processing the notification code. The application processing the notification
            code sets this member.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMOBJECTNOTIFY.hResult">
            <summary>
            <para>Type: <c><c>HRESULT</c></c></para>
            <para>COM success or failure flags. The application processing the notification code sets this member.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMOBJECTNOTIFY.dwFlags">
            <summary>Undocumented</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.NMTOOLTIPSCREATED">
            <summary>Contains information used with NM_TOOLTIPSCREATED notification codes.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTOOLTIPSCREATED.hdr">
            <summary>
            <para>Type: <c><c>NMHDR</c></c></para>
            <para>An <c>NMHDR</c> structure that contains additional information about this notification.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTOOLTIPSCREATED.hwndToolTips">
            <summary>
            <para>Type: <c><c>HWND</c></c></para>
            <para>The window handle to the tooltip control created.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.EDITBALLOONTIP">
            <summary>
            Contains information about a balloon tip associated with a button control.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.EDITBALLOONTIP.cbStruct">
            <summary>
            A DWORD that contains the size, in bytes, of the structure.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.EDITBALLOONTIP.pszTitle">
            <summary>
            A pointer to a Unicode string that contains the title of the balloon tip.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.EDITBALLOONTIP.pszText">
            <summary>
            A pointer to a Unicode string that contains the balloon tip text.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.EDITBALLOONTIP.ttiIcon">
            <summary>
            A value of type INT that specifies the type of icon to associate with the balloon tip.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.EDITBALLOONTIP.#ctor(System.String,System.String,Vanara.PInvoke.ComCtl32.ToolTipIcon)">
            <summary>
            Initializes a new instance of the <see cref="T:Vanara.PInvoke.ComCtl32.EDITBALLOONTIP"/> struct.
            </summary>
            <param name="title">The title.</param>
            <param name="text">The text.</param>
            <param name="icon">The icon.</param>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.WC_HEADER">
            <summary>Window Class Name for Header control.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.HeaderHitTestFlag">
            <summary>The variable that receives information about the results of a hit test.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderHitTestFlag.HHT_ABOVE">
            <summary>The point is above the header control's bounding rectangle.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderHitTestFlag.HHT_BELOW">
            <summary>The point is below the header control's bounding rectangle.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderHitTestFlag.HHT_NOWHERE">
            <summary>The point is inside the header control's bounding rectangle but is not over a header item.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderHitTestFlag.HHT_ONDIVIDER">
            <summary>The point is on the divider between two header items.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderHitTestFlag.HHT_ONDIVOPEN">
            <summary>
            The point is on the divider of an item that has a width of zero. Dragging the divider reveals the item instead of resizing
            the item to the left of the divider.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderHitTestFlag.HHT_ONDROPDOWN">
            <summary>The point is within the split button of the item. The style HDF_SPLITBUTTON must be set on the item.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderHitTestFlag.HHT_ONFILTER">
            <summary>The point is over the filter area.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderHitTestFlag.HHT_ONFILTERBUTTON">
            <summary>The point is on the filter button.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderHitTestFlag.HHT_ONHEADER">
            <summary>The point is to the left of the header control's bounding rectangle.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderHitTestFlag.HHT_ONITEMSTATEICON">
            <summary>
            The point is within the state icon of the item. If style HDS_CHECKBOXES is specified, the point is within the checkbox of the item.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderHitTestFlag.HHT_ONOVERFLOW">
            <summary>
            The point is within the overflow button of the header control. The style HDS_OVERFLOW must be set on the header control.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderHitTestFlag.HHT_TOLEFT">
            <summary>The point is to the left of the header control's bounding rectangle.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderHitTestFlag.HHT_TORIGHT">
            <summary>The point is to the right of the header control's bounding rectangle.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.HeaderItemFilterType">
            <summary>The type of filter specified by <see cref="F:Vanara.PInvoke.ComCtl32.HDITEM.pvFilter"/>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderItemFilterType.HDFT_ISSTRING">
            <summary>String data.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderItemFilterType.HDFT_ISNUMBER">
            <summary>Numerical data.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderItemFilterType.HDFT_ISDATE">
            <summary>Date data. The pvFilter member is a pointer to a SYSTEMTIME structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderItemFilterType.HDFT_HASNOVALUE">
            <summary>Ignore pvFilter.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.HeaderItemFormat">
            <summary>Flags that specify an <see cref="T:Vanara.PInvoke.ComCtl32.HDITEM"/> format.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderItemFormat.HDF_LEFT">
            <summary>The item's contents are left-aligned.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderItemFormat.HDF_RIGHT">
            <summary>The item's contents are right-aligned.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderItemFormat.HDF_CENTER">
            <summary>The item's contents are centered.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderItemFormat.HDF_JUSTIFYMASK">
            <summary>Isolate the bits corresponding to the three justification flags listed in the preceding table.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderItemFormat.HDF_RTLREADING">
            <summary>
            Typically, windows displays text left-to-right (LTR). Windows can be mirrored to display languages such as Hebrew or Arabic
            that read right-to-left (RTL). Usually, header text is read in the same direction as the text in its parent window. If
            HDF_RTLREADING is set, header text will read in the opposite direction from the text in the parent window.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderItemFormat.HDF_CHECKBOX">
            <summary>
            The item displays a checkbox. The flag is only valid when the HDS_CHECKBOXES style is first set on the header control.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderItemFormat.HDF_CHECKED">
            <summary>The item displays a checked checkbox. The flag is only valid when HDF_CHECKBOX is also set.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderItemFormat.HDF_FIXEDWIDTH">
            <summary>The width of the item cannot be modified by a user action to resize it.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderItemFormat.HDF_OWNERDRAW">
            <summary>The header control's owner draws the item.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderItemFormat.HDF_STRING">
            <summary>The item displays a string.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderItemFormat.HDF_BITMAP">
            <summary>The item displays a bitmap.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderItemFormat.HDF_BITMAP_ON_RIGHT">
            <summary>The bitmap appears to the right of text.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderItemFormat.HDF_IMAGE">
            <summary>
            Display an image from an image list. Specify the image list by sending an HDM_SETIMAGELIST message. Specify the index of the
            image in the iImage member of this structure.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderItemFormat.HDF_SORTUP">
            <summary>
            Draws an up-arrow on this item. This is typically used to indicate that information in the current window is sorted on this
            column in ascending order. This flag cannot be combined with HDF_IMAGE or HDF_BITMAP.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderItemFormat.HDF_SORTDOWN">
            <summary>
            Draws a down-arrow on this item. This is typically used to indicate that information in the current window is sorted on this
            column in descending order. This flag cannot be combined with HDF_IMAGE or HDF_BITMAP.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderItemFormat.HDF_SPLITBUTTON">
            <summary>The item displays a split button. The HDN_DROPDOWN notification is sent when the split button is clicked.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.HeaderItemImageDisplay">
            <summary>Determines which type of bitmap is displayed on a header column.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderItemImageDisplay.None">
            <summary>All flags related to image display are cleared.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderItemImageDisplay.Bitmap">
            <summary>Display a supplied bitmap image. Correlates to HDF_BITMAP.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderItemImageDisplay.ImageListItem">
            <summary>Display a supplied image-list item. Correlates to HDF_IMAGE.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderItemImageDisplay.DownArrow">
            <summary>Display a system defined down arrow. Correlates to HDF_SORTDOWN.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderItemImageDisplay.UpArrow">
            <summary>Display a system defined up arrow. Correlates to HDF_SORTUP.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.HeaderItemMask">
            <summary>Flags indicating which <see cref="T:Vanara.PInvoke.ComCtl32.HDITEM"/> structure members contain valid data or must be filled in.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderItemMask.HDI_BITMAP">
            <summary>The <see cref="F:Vanara.PInvoke.ComCtl32.HDITEM.hbm"/> member is valid.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderItemMask.HDI_DI_SETITEM">
            <summary>
            While handling the message HDM_GETITEM, the header control may not have all the values needed to complete the request. In
            this case, the control must call the application back for the values via the HDN_GETDISPINFO notification. If HDI_DI_SETITEM
            has been passed in the HDM_GETITEM message, the control will cache any values returned from HDN_GETDISPINFO (otherwise the
            values remain unset.)
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderItemMask.HDI_FILTER">
            <summary>
            The <see cref="F:Vanara.PInvoke.ComCtl32.HDITEM.type"/> and <see cref="F:Vanara.PInvoke.ComCtl32.HDITEM.pvFilter"/> members are valid. This is used to filter out the values
            specified in the type member.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderItemMask.HDI_FORMAT">
            <summary>The <see cref="F:Vanara.PInvoke.ComCtl32.HDITEM.fmt"/> member is valid.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderItemMask.HDI_HEIGHT">
            <summary>The same as HDI_WIDTH.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderItemMask.HDI_IMAGE">
            <summary>The <see cref="F:Vanara.PInvoke.ComCtl32.HDITEM.iImage"/> member is valid and specifies the image to be displayed with the item.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderItemMask.HDI_LPARAM">
            <summary>The <see cref="F:Vanara.PInvoke.ComCtl32.HDITEM.lParam"/> member is valid.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderItemMask.HDI_ORDER">
            <summary>The <see cref="F:Vanara.PInvoke.ComCtl32.HDITEM.iOrder"/> member is valid and specifies the item's order value.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderItemMask.HDI_STATE">
            <summary>The <see cref="F:Vanara.PInvoke.ComCtl32.HDITEM.state"/> member is valid.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderItemMask.HDI_TEXT">
            <summary>The <see cref="F:Vanara.PInvoke.ComCtl32.HDITEM.pszText"/> and <see cref="F:Vanara.PInvoke.ComCtl32.HDITEM.cchTextMax"/> members are valid.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderItemMask.HDI_WIDTH">
            <summary>The <see cref="F:Vanara.PInvoke.ComCtl32.HDITEM.cxy"/> member is valid and specifies the item's width.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderItemMask.HDI_ALL">
            <summary>All <see cref="T:Vanara.PInvoke.ComCtl32.HDITEM"/> members are valid.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.HeaderItemState">
            <summary>Valid entries for <see cref="F:Vanara.PInvoke.ComCtl32.HDITEM.state"/>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderItemState.None">
            <summary>No state value.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderItemState.HDIS_FOCUSED">
            <summary>The item has keyboard focus.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.HeaderMessage">
            <summary>Header Control Messages</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderMessage.HDM_CLEARFILTER">
            <summary>
            Clears the filter for a given header control. You can send this message explicitly or use the <c>Header_ClearFilter</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>A column value indicating which filter to clear.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns an integer. The <c>LRESULT</c> is cast to an integer that indicates <c>TRUE</c>(1) or <c>FALSE</c>(0).</para>
            </summary>
            <remarks>
            If the column value is specified as -1, all the filters are cleared, and the HDN_FILTERCHANGE notification is sent only once.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderMessage.HDM_CREATEDRAGIMAGE">
            <summary>
            Creates a semi-transparent version of an item's image for use as a dragging image. You can send this message explicitly or
            use the <c>Header_CreateDragImage</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>
            The zero-based index of the item within the header control. The image assigned to this item is the basis for the transparent image.
            </para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns a handle to an image list that contains the new image as its only element.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderMessage.HDM_DELETEITEM">
            <summary>
            Deletes an item from a header control. You can send this message explicitly or use the <c>Header_DeleteItem</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>An index of the item to delete.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> if successful, or <c>FALSE</c> otherwise.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderMessage.HDM_EDITFILTER">
            <summary>Moves the input focus to the edit box when a filter button has the focus.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>A value specifying the column to edit.</para>
            <para><em>lParam</em></para>
            <para>
            A flag that specifies how to handle the user's editing changes. Use this flag to specify what to do if the user is in the
            process of editing the filter when the message is sent.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term><c>TRUE</c></term>
            <term>Discard the changes made by the user.</term>
            </item>
            <item>
            <term><c>FALSE</c></term>
            <term>Accept the changes made by the user.</term>
            </item>
            </list>
            <para><strong>Returns</strong></para>
            <para>Returns an integer. The <c>LRESULT</c> is cast to an integer that indicates <c>TRUE</c>(1) or <c>FALSE</c>(0).</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderMessage.HDM_GETBITMAPMARGIN">
            <summary>
            Gets the width of the bitmap margin for a header control. You can send this message explicitly or use the
            <c>Header_GetBitmapMargin</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>
            Returns the width of the bitmap margin in pixels. If the bitmap margin was not previously specified, the default value of 3*
            <c>GetSystemMetrics</c> (SM_CXEDGE) is returned.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderMessage.HDM_GETFOCUSEDITEM">
            <summary>
            Gets the item in a header control that has the focus. Send this message explicitly or by using the
            <c>Header_GetFocusedItem</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Not used. Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Not used. Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the index of the item in focus.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderMessage.HDM_GETIMAGELIST">
            <summary>
            Gets the handle to the image list that has been set for an existing header control. You can send this message explicitly or
            use the <c>Header_GetImageList</c> or <c>Header_GetStateImageList</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>*wParam*</em></para>
            <para>One of the following values:</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term><c>HDSIL_NORMAL</c></term>
            <term>Indicates that this is a normal image list.</term>
            </item>
            <item>
            <term><c>HDSIL_STATE</c></term>
            <term>Indicates that this is a state image list.</term>
            </item>
            </list>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns a handle to the image list set for the header control.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderMessage.HDM_GETITEM">
            <summary>
            Gets information about an item in a header control. You can send this message explicitly or use the <c>Header_GetItem</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>The index of the item for which information is to be retrieved.</para>
            <para><em>lParam</em></para>
            <para>
            A pointer to an <c>HDITEM</c> structure. When the message is sent, the <c>mask</c> member indicates the type of information
            being requested. When the message returns, the other members receive the requested information. If the <c>mask</c> member
            specifies zero, the message returns <c>TRUE</c> but copies no information to the structure.
            </para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> if successful, or <c>FALSE</c> otherwise.</para>
            </summary>
            <remarks>
            If the HDI_TEXT flag is set in the <c>mask</c> member of the <c>HDITEM</c> structure, the control may change the
            <c>pszText</c> member of the structure to point to the new text instead of filling the buffer with the requested text.
            Applications should not assume that the text will always be placed in the requested buffer.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderMessage.HDM_GETITEMCOUNT">
            <summary>
            Gets a count of the items in a header control. You can send this message explicitly or use the <c>Header_GetItemCount</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the number of items if successful, or -1 otherwise.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderMessage.HDM_GETITEMDROPDOWNRECT">
            <summary>
            Gets the bounding rectangle of the split button for a header item with style <c>HDF_SPLITBUTTON</c>. Send this message
            explicitly or by using the <c>Header_GetItemDropDownRect</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>The zero-based index of the header control item for which to retrieve the bounding rectangle.</para>
            <para><em>lParam</em></para>
            <para>
            A pointer to a <c>RECT</c> structure that receives the bounding rectangle information. The message sender is responsible for
            allocating this structure. The coordinates returned in the RECT structure are expressed relative to the header control parent.
            </para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> if successful, or <c>FALSE</c> otherwise.</para>
            </summary>
            <remarks>The header item must have style <c>HDF_SPLITBUTTON</c>.</remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderMessage.HDM_GETITEMRECT">
            <summary>
            Gets the bounding rectangle for a given item in a header control. You can send this message explicitly or use the
            <c>Header_GetItemRect</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>The zero-based index of the header control item for which to retrieve the bounding rectangle.</para>
            <para><em>lParam</em></para>
            <para>
            A pointer to a <c>RECT</c> structure that receives the bounding rectangle information. The message sender is responsible for
            allocating this structure. The coordinates returned in the RECT structure are expressed relative to the header control parent.
            </para>
            <para><strong>Returns</strong></para>
            <para>Returns nonzero if successful, or zero otherwise.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderMessage.HDM_GETORDERARRAY">
            <summary>
            Gets the current left-to-right order of items in a header control. You can send this message explicitly or use the
            <c>Header_GetOrderArray</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>
            The number of integer elements that lParam can hold. This value must be equal to the number of items in the control (see <c>HDM_GETITEMCOUNT</c>).
            </para>
            <para><em>lParam</em></para>
            <para>A pointer to an array of integers that receive the index values for items in the header.</para>
            <para><strong>Returns</strong></para>
            <para>
            Returns nonzero if successful, and the buffer at lParam receives the item number for each item in the header control in the
            order in which they appear from left to right. Otherwise, the message returns zero.
            </para>
            </summary>
            <remarks>
            <para>
            The number of elements in lParam is specified in wParam and must be equal to the number of items in the control. For example,
            the following code fragment will reserve enough memory to hold the index values.
            </para>
            <para>
            <code>int iItems, *lpiArray; // Get memory for buffer. (iItems = SendMessage(hwndHD, HDM_GETITEMCOUNT, 0,0))!=-1) if(!(lpiArray = calloc(iItems,sizeof(int)))) MessageBox(hwnd, "Out of memory.","Error", MB_OK);</code>
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderMessage.HDM_GETOVERFLOWRECT">
            <summary>
            Gets the bounding rectangle of the overflow button when the <c>HDS_OVERFLOW</c> style is set on the header control and the
            overflow button is visible. Send this message explicitly or by using the <c>Header_GetOverflowRect</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Not used. Must be zero.</para>
            <para><em>lParam</em></para>
            <para>
            A pointer to a <c>RECT</c> structure to receive the bounding rectangle information. The message sender is responsible for
            allocating this structure. The coordinates returned in the <c>RECT</c> structure are expressed as screen coordinates.
            </para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> if successful; otherwise, <c>FALSE</c>.</para>
            </summary>
            <remarks>The header control must have style <c>HDF_SPLITBUTTON</c>.</remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderMessage.HDM_GETUNICODEFORMAT">
            <summary>
            Gets the Unicode character format flag for the control. You can send this message explicitly or use the
            <c>Header_GetUnicodeFormat</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>
            Returns the Unicode format flag for the control. If this value is nonzero, the control is using Unicode characters. If this
            value is zero, the control is using ANSI characters.
            </para>
            </summary>
            <remarks>See the remarks for <c>CCM_GETUNICODEFORMAT</c> for a discussion of this message.</remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderMessage.HDM_HITTEST">
            <summary>Tests a point to determine which header item, if any, is at the specified point.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>
            A pointer to an <c>HDHITTESTINFO</c> structure that contains the position to test and receives information about the results
            of the test.
            </para>
            <para><strong>Returns</strong></para>
            <para>Returns the index of the item at the specified position, if any, or 1 otherwise.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderMessage.HDM_INSERTITEM">
            <summary>
            Inserts a new item into a header control. You can send this message explicitly or use the <c>Header_InsertItem</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>
            The index of the item after which the new item is to be inserted. The new item is inserted at the end of the header control
            if wParam is greater than or equal to the number of items in the control. If wParam is zero, the new item is inserted at the
            beginning of the header control.
            </para>
            <para><em>lParam</em></para>
            <para>A pointer to an <c>HDITEM</c> structure that contains information about the new item.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the index of the new item if successful, or -1 otherwise.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderMessage.HDM_LAYOUT">
            <summary>
            Retrieves information used to set the size and position of the header control within the target rectangle of the parent
            window. You can send this message explicitly or use the <c>Header_Layout</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>
            A pointer to an <c>HDLAYOUT</c> structure. The <c>prc</c> member specifies the coordinates of a rectangle, and the
            <c>pwpos</c> member receives the size and position for the header control within the rectangle.
            </para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> if successful, or <c>FALSE</c> otherwise.</para>
            </summary>
            <remarks>
            <para>
            The <c>pwpos</c> member of the lParam structure receives size and position values appropriate for positioning the control
            along the top of the specified rectangle. The height value is the sum of the heights of the control's horizontal borders and
            the average height of characters in the font currently selected into the control's device context.
            </para>
            <para>
            To use <c>HDM_LAYOUT</c> to set the initial size and position of a header control, set the initial visibility state of the
            control so that it is hidden. After sending <c>HDM_LAYOUT</c> to retrieve the size and position values, use the
            <c>SetWindowPos</c> function to set the new size, position, and visibility state.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderMessage.HDM_ORDERTOINDEX">
            <summary>
            Retrieves an index value for an item based on its order in the header control. You can send this message explicitly or use
            the <c>Header_OrderToIndex</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>
            The order in which the item appears within the header control, from left to right. For example, the index value of the item
            in the far left column would be 0. The value for the next item to the right would be 1, and so on.
            </para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns INT that indicates the item index. If wParam is invalid (negative or too large), the return equals wParam.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderMessage.HDM_SETBITMAPMARGIN">
            <summary>
            Sets the width of the margin, specified in pixels, of a bitmap in an existing header control. You can send this message
            explicitly or use the <c>Header_SetBitmapMargin</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>The width, specified in pixels, of the margin that surrounds a bitmap within an existing header control.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>
            Returns the width of the bitmap margin, in pixels. If the bitmap margin was not previously specified, the default value of 3*
            <c>GetSystemMetrics</c> (SM_CXEDGE) is returned.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderMessage.HDM_SETFILTERCHANGETIMEOUT">
            <summary>
            Sets the timeout interval between the time a change takes place in the filter attributes and the posting of an
            HDN_FILTERCHANGE notification. You can send this message explicitly or use the <c>Header_SetFilterChangeTimeout</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>The timeout value, in milliseconds.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the index of the filter control being modified.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderMessage.HDM_SETFOCUSEDITEM">
            <summary>
            Sets the focus to a specified item in a header control. Send this message explicitly or by using the
            <c>Header_SetFocusedItem</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Not used. Must be zero.</para>
            <para><em>lParam</em></para>
            <para>The index of item.</para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> if successful, or <c>FALSE</c> otherwise.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderMessage.HDM_SETHOTDIVIDER">
            <summary>
            Changes the color of a divider between header items to indicate the destination of an external drag-and-drop operation. You
            can send this message explicitly or use the <c>Header_SetHotDivider</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>The type of value represented by lParam. This value can be one of the following:</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term><c><c>TRUE</c></c></term>
            <term>Indicates that <c>lParam</c> holds the client coordinates of the pointer.</term>
            </item>
            <item>
            <term><c><c>FALSE</c></c></term>
            <term>Indicates that <c>lParam</c> holds a divider index value.</term>
            </item>
            </list>
            <para><em>lParam</em></para>
            <para>A value held in lParam is interpreted depending on the value of wParam.</para>
            <para>
            If wParam is <c>TRUE</c>, lParam represents the x- and y-coordinates of the pointer. The x-coordinate is in the low word, and
            the y-coordinate is in the high word. When the header control receives the message, it highlights the appropriate divider
            based on the lParam coordinates.
            </para>
            <para>If wParam is <c>FALSE</c>, lParam represents the integer index of the divider to be highlighted.</para>
            <para><strong>Returns</strong></para>
            <para>Returns a value equal to the index of the divider that the control highlighted.</para>
            </summary>
            <remarks>
            This message creates an effect that a header control automatically produces when it has the <c>HDS_DRAGDROP</c> style. The
            <c>HDM_SETHOTDIVIDER</c> message is intended to be used when the owner of the control handles drag-and-drop operations manually.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderMessage.HDM_SETIMAGELIST">
            <summary>
            Assigns an image list to an existing header control. You can send this message explicitly or use the
            <c>Header_SetImageList</c> or <c>Header_SetStateImageList</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>*wParam*</em></para>
            <para>One of the following values:</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term><c>HDSIL_NORMAL</c></term>
            <term>Indicates that this is a normal image list.</term>
            </item>
            <item>
            <term><c>HDSIL_STATE</c></term>
            <term>Indicates that this is a state image list.</term>
            </item>
            </list>
            <para><em>lParam</em></para>
            <para>A handle to an image list.</para>
            <para><strong>Returns</strong></para>
            <para>
            Returns the handle to the image list previously associated with the control. Returns <c>NULL</c> upon failure or if no image
            list was set previously.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderMessage.HDM_SETITEM">
            <summary>
            Sets the attributes of the specified item in a header control. You can send this message explicitly or use the
            <c>Header_SetItem</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>The current index of the item whose attributes are to be changed.</para>
            <para><em>lParam</em></para>
            <para>
            A pointer to an <c>HDITEM</c> structure that contains item information. When this message is sent, the <c>mask</c> member of
            the structure must be set to indicate which attributes are being set.
            </para>
            <para><strong>Returns</strong></para>
            <para>Returns nonzero upon success, or zero otherwise.</para>
            </summary>
            <remarks>
            The <c>HDITEM</c> structure that supports this message supports item order and image list information. By using these
            members, you can control the order in which items are displayed and specify images to appear with items.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderMessage.HDM_SETORDERARRAY">
            <summary>
            Sets the left-to-right order of header items. You can send this message explicitly or use the <c>Header_SetOrderArray</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>The size of the buffer at lParam, in elements. This value must equal the value returned by <c>HDM_GETITEMCOUNT</c>.</para>
            <para><em>lParam</em></para>
            <para>
            A pointer to an array that specifies the order in which items should be displayed, from left to right. For example, if the
            contents of the array are {2,0,1}, the control displays item 2, item 0, and item 1, from left to right.
            </para>
            <para><strong>Returns</strong></para>
            <para>Returns nonzero if successful, or zero otherwise.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderMessage.HDM_SETUNICODEFORMAT">
            <summary>
            Sets the UNICODE character format flag for the control. This message allows you to change the character set used by the
            control at run time rather than having to re-create the control. You can send this message explicitly or use the
            <c>Header_SetUnicodeFormat</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>
            The character set that is used by the control. If this value is nonzero, the control will use Unicode characters. If this
            value is zero, the control will use ANSI characters.
            </para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the previous Unicode format flag for the control.</para>
            </summary>
            <remarks>See the remarks for <c>CCM_SETUNICODEFORMAT</c> for a discussion of this message.</remarks>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.HeaderNotification">
            <summary>Header control notifications</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderNotification.HDN_BEGINDRAG">
            <summary>
            <para>
            Sent by a header control when a drag operation has begun on one of its items. This notification code is sent only by header
            controls that are set to the <c>HDS_DRAGDROP</c> style. This notification code is sent in the form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>HDN_BEGINDRAG pNMHeader = (LPNMHEADER) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>A pointer to an <c>NMHEADER</c> structure containing information about the header item that is being dragged.</para>
            <para><strong>Returns</strong></para>
            <para>
            To allow the header control to automatically manage drag-and-drop operations, return <c>FALSE</c>. If the owner of the
            control is manually performing drag-and-drop reordering, return <c>TRUE</c>.
            </para>
            </summary>
            <remarks>
            A header control defaults to automatically managing drag-and-drop reordering. Returning <c>TRUE</c> to indicate external
            (manual) drag-and-drop management allows the owner of the control to provide custom services as part of the drag-and-drop process.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderNotification.HDN_BEGINFILTEREDIT">
            <summary>
            <para>
            Notifies a header control's parent window that a filter edit has begun. This notification code is sent in the form of a
            <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>HDN_BEGINFILTEREDIT pNMHeader = (LPNMHEADER) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>A pointer to an <c>NMHEADER</c> structure that contains additional information about the filter that is being edited.</para>
            <para><strong>Returns</strong></para>
            <para>No return value.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderNotification.HDN_BEGINTRACK">
            <summary>
            <para>
            Notifies a header control's parent window that the user has begun dragging a divider in the control (that is, the user has
            pressed the left mouse button while the mouse cursor is on a divider in the header control). This notification code is sent
            in the form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>HDN_BEGINTRACK pNMHeader = (LPNMHEADER) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>
            A pointer to an <c>NMHEADER</c> structure that contains information about the header control and the item whose divider is to
            be dragged.
            </para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>FALSE</c> to allow tracking of the divider, or <c>TRUE</c> to prevent tracking.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderNotification.HDN_DIVIDERDBLCLICK">
            <summary>
            <para>
            Notifies a header control's parent window that the user double-clicked the divider area of the control. This notification
            code is sent in the form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>HDN_DIVIDERDBLCLICK pNMHeader = (LPNMHEADER) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>
            A pointer to an <c>NMHEADER</c> structure that contains information about the header control and the item whose divider was double-clicked.
            </para>
            <para><strong>Returns</strong></para>
            <para>No return value.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderNotification.HDN_DROPDOWN">
            <summary>
            <para>
            Sent by a header control to its parent when the drop-down arrow on the header control is clicked. This notification code is
            sent in the form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>HDN_DROPDOWN pNMHeader = (LPNMHEADER) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>A pointer to an <c>NMHEADER</c> structure that contains information on the header control.</para>
            <para><strong>Returns</strong></para>
            <para>No return value.</para>
            </summary>
            <remarks>
            <para>
            The example in the Syntax section shows how the notification receiver casts <c>LPARAM</c> to retrieve the <c>NMHEADER</c>
            structure. <c>WPARAM</c> contains the ID of the control that sends this message.
            </para>
            <para>This message is sent only if style HDF_SPLITBUTTON is set on the header item.</para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderNotification.HDN_ENDDRAG">
            <summary>
            <para>
            Sent by a header control when a drag operation has ended on one of its items. This notification code is sent as a
            <c>WM_NOTIFY</c> message. Only header controls that are set to the <c>HDS_DRAGDROP</c> style send this notification code.
            </para>
            <para>
            <code>HDN_ENDDRAG pNMHeader = (LPNMHEADER) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>A pointer to an <c>NMHEADER</c> structure containing information about the header item that was being dragged.</para>
            <para><strong>Returns</strong></para>
            <para>
            To allow the control to automatically place and reorder the item, return <c>FALSE</c>. To prevent the item from being placed,
            return <c>TRUE</c>.
            </para>
            </summary>
            <remarks>
            If the owner is performing external (manual) drag-and-drop management, it must return <c>FALSE</c>. The owner then must
            reorder header items manually by sending <c>HDM_SETITEM</c> or <c>HDM_SETORDERARRAY</c>.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderNotification.HDN_ENDFILTEREDIT">
            <summary>
            <para>
            Notifies a header control's parent window that a filter edit has ended. This notification code is sent in the form of a
            <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>HDN_ENDFILTEREDIT pNMHeader = (LPNMHEADER) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>A pointer to an <c>NMHEADER</c> structure that contains additional information about the filter that is being edited.</para>
            <para><strong>Returns</strong></para>
            <para>No return value.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderNotification.HDN_ENDTRACK">
            <summary>
            <para>
            Notifies a header control's parent window that the user has finished dragging a divider. This notification code sent in the
            form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>HDN_ENDTRACK pNMHeader = (LPNMHEADER) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>
            A pointer to an <c>NMHEADER</c> structure that contains information about the header control and the item whose divider was dragged.
            </para>
            <para><strong>Returns</strong></para>
            <para>No return value.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderNotification.HDN_FILTERBTNCLICK">
            <summary>
            <para>
            Notifies the header control's parent window when the filter button is clicked or in response to an <c>HDM_SETITEM</c>
            message. This notification code sent in the form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>HDN_FILTERBTNCLICK pNMHDFilterBtnClk = (LPNMHDFILTERBTNCLICK) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>
            A pointer to an <c>NMHDFILTERBTNCLICK</c> structure that contains information about the header control and the header filter button.
            </para>
            <para><strong>Returns</strong></para>
            <para>
            If you return <c>TRUE</c>, an HDN_FILTERCHANGE notification code will be sent to the header control's parent window. This
            notification code gives the parent window an opportunity to synchronize its user interface elements. Return <c>FALSE</c> if
            you do not want the notification sent.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderNotification.HDN_FILTERCHANGE">
            <summary>
            <para>
            Notifies the header control's parent window that the attributes of a header control filter are being changed or edited. This
            notification code sent in the form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>HDN_FILTERCHANGE pNMHeader = (LPNMHEADER) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>
            A pointer to an <c>NMHEADER</c> structure that contains information about the header control and the header item, including
            the attributes that are about to change.
            </para>
            <para><strong>Returns</strong></para>
            <para>No return value.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderNotification.HDN_GETDISPINFO">
            <summary>
            <para>
            Sent to the owner of a header control when the control needs information about a callback header item. This notification code
            is sent as a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>HDN_GETDISPINFO pNMHDDispInfo = (LPNMHDDISPINFO) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>
            A pointer to an <c>NMHDDISPINFO</c> structure. On input, the fields of the structure specify what information is required and
            the item of interest.
            </para>
            <para><strong>Returns</strong></para>
            <para>Returns an LRESULT.</para>
            </summary>
            <remarks>
            Fill the appropriate members of the structure to return the requested information to the header control. If your message
            handler sets the <c>mask</c> member of the <c>NMHDDISPINFO</c> structure to HDI_DI_SETITEM, the header control stores the
            information and will not request it again.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderNotification.HDN_ITEMCHANGED">
            <summary>
            <para>
            Notifies a header control's parent window that the attributes of a header item have changed. This notification code is sent
            in the form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>HDN_ITEMCHANGED pNMHeader = (LPNMHEADER) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>
            A pointer to an <c>NMHEADER</c> structure that contains information about the header control, including the attributes that
            have changed.
            </para>
            <para><strong>Returns</strong></para>
            <para>No return value.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderNotification.HDN_ITEMCHANGING">
            <summary>
            <para>
            Notifies a header control's parent window that the attributes of a header item are about to change. This notification code is
            sent in the form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>HDN_ITEMCHANGING pNMHeader = (LPNMHEADER) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>
            A pointer to an <c>NMHEADER</c> structure that contains information about the header control and the header item, including
            the attributes that are about to change.
            </para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>FALSE</c> to allow the changes, or <c>TRUE</c> to prevent them.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderNotification.HDN_ITEMCLICK">
            <summary>
            <para>
            Notifies a header control's parent window that the user clicked the control. This notification code is sent in the form of a
            <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>HDN_ITEMCLICK pNMHeader = (LPNMHEADER) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>
            A pointer to an <c>NMHEADER</c> structure that identifies the header control and specifies the index of the header item that
            was clicked and the mouse button used to click the item. The <c>pItem</c> member is set to <c>NULL</c>.
            </para>
            <para><strong>Returns</strong></para>
            <para>No return value.</para>
            </summary>
            <remarks>A header control sends this notification code after the user releases the left mouse button.</remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderNotification.HDN_ITEMDBLCLICK">
            <summary>
            <para>
            Notifies a header control's parent window that the user double-clicked the control. This notification code is sent in the
            form of a <c>WM_NOTIFY</c> message. Only header controls that are set to the <c>HDS_BUTTONS</c> style send this notification code.
            </para>
            <para>
            <code>HDN_ITEMDBLCLICK pNMHeader = (LPNMHEADER) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>A pointer to an <c>NMHEADER</c> structure that contains information about this notification code.</para>
            <para><strong>Returns</strong></para>
            <para>No return value.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderNotification.HDN_ITEMKEYDOWN">
            <summary>
            <para>
            Notifies a header control's parent window that a key has been pressed with an item selected. This notification code is sent
            in the form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>HDN_ITEMKEYDOWN pNMHeader = (LPNMHEADER) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>A pointer to an <c>NMHEADER</c> structure that contains additional information about the key that is being pressed.</para>
            <para><strong>Returns</strong></para>
            <para>No return value.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderNotification.HDN_ITEMSTATEICONCLICK">
            <summary>
            <para>
            Notifies a header control's parent window that the user clicked an item's state icon. This notification code is sent in the
            form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>HDN_ITEMSTATEICONCLICK pNMHeader = (LPNMHEADER) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>
            A pointer to an <c>NMHEADER</c> structure that contains additional information about the state icon that was clicked on.
            </para>
            <para><strong>Returns</strong></para>
            <para>No return value.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderNotification.HDN_OVERFLOWCLICK">
            <summary>
            <para>
            Sent by a header control to its parent when the header's overflow button is clicked. This notification code is sent in the
            form of an <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>HDN_OVERFLOWCLICK pNMHeader = (LPNMHEADER) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>
            A pointer to a <c>NMHEADER</c> structure that describes the notification code. The calling process is responsible for
            allocating this structure, including the contained <c>NMHDR</c> structure. Set the members of the <c>NMHDR</c> structure,
            including the code member that must be set to HDN_OVERFLOWCLICK.
            </para>
            <para>
            Set the <c>iItem</c> member of the <c>NMHEADER</c> structure to the index of the first header item that is not visible and
            thus should be displayed on an overflow.
            </para>
            <para><strong>Returns</strong></para>
            <para>No return value.</para>
            </summary>
            <remarks>
            <para>
            The notification receiver casts <c>LPARAM</c> to retrieve the <c>NMHEADER</c> structure. <c>WPARAM</c> contains the ID of the
            control that sends the notification.
            </para>
            <para>This message is sent only when style <c>HDS_OVERFLOW</c> is set on the header control.</para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderNotification.HDN_TRACK">
            <summary>
            <para>
            Notifies a header control's parent window that the user is dragging a divider in the header control. This notification code
            is sent in the form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>HDN_TRACK pNMHeader = (LPNMHEADER) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>
            A pointer to an <c>NMHEADER</c> structure that contains information about the header control and the item whose divider is
            being dragged.
            </para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>FALSE</c> to continue tracking the divider, or <c>TRUE</c> to end tracking.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.HeaderStyle">
            <summary>
            Header controls have a number of styles, described in this section, that determine the control's appearance and behavior. You set
            the initial styles when you create the header control.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderStyle.HDS_BUTTONS">
            <summary>
            Each item in the control looks and behaves like a push button. This style is useful if an application carries out a task when
            the user clicks an item in the header control. For example, an application could sort information in the columns differently
            depending on which item the user clicks.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderStyle.HDS_DRAGDROP">
            <summary>Allows drag-and-drop reordering of header items.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderStyle.HDS_FILTERBAR">
            <summary>
            Include a filter bar as part of the standard header control. This bar allows users to conveniently apply a filter to the
            display. Calls to HDM_LAYOUT will yield a new size for the control and cause the list view to update.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderStyle.HDS_FLAT">
            <summary>
            Version 6.0 and later. Causes the header control to be drawn flat when the operating system is running in classic mode.
            <note>Comctl32.dll version 6 is not redistributable but it is included in Windows. To use Comctl32.dll version 6, specify it
            in a manifest. For more information on manifests, see Enabling Visual Styles.</note>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderStyle.HDS_FULLDRAG">
            <summary>Causes the header control to display column contents even while the user resizes a column.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderStyle.HDS_HIDDEN">
            <summary>
            Indicates a header control that is intended to be hidden. This style does not hide the control. Instead, when you send the
            HDM_LAYOUT message to a header control with the HDS_HIDDEN style, the control returns zero in the cy member of the WINDOWPOS
            structure. You would then hide the control by setting its height to zero. This can be useful when you want to use the control
            as an information container instead of a visual control.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderStyle.HDS_HORZ">
            <summary>Creates a header control with a horizontal orientation.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderStyle.HDS_HOTTRACK">
            <summary>Enables hot tracking.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderStyle.HDS_CHECKBOXES">
            <summary>
            Version 6.00 and later. Allows the placing of checkboxes on header items. For more information, see the fmt member of HDITEM.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderStyle.HDS_NOSIZING">
            <summary>Version 6.00 and later. The user cannot drag the divider on the header control.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HeaderStyle.HDS_OVERFLOW">
            <summary>
            Version 6.00 and later. A button is displayed when not all items can be displayed within the header control's rectangle. When
            clicked, this button sends an HDN_OVERFLOWCLICK notification.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.HDTEXTFILTER">
            <summary>Contains information about header control text filters.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HDTEXTFILTER.pszText">
            <summary>A pointer to the buffer containing the filter.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HDTEXTFILTER.cchTextMax">
            <summary>A value specifying the maximum size, in characters, for an edit control buffer.</summary>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.HDTEXTFILTER.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.ComCtl32.HDTEXTFILTER"/> struct.</summary>
            <param name="filter">The filter.</param>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.HDTEXTFILTER.#ctor(System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.ComCtl32.HDTEXTFILTER"/> struct.</summary>
            <param name="length">The length.</param>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.HDTEXTFILTER.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents this instance.</summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.HDHITTESTINFO">
            <summary>
            Contains information about a hit test. This structure is used with the HDM_HITTEST message and it supersedes the HD_HITTESTINFO structure.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HDHITTESTINFO.pt">
            <summary>A POINT structure that contains the point to be hit test, in client coordinates.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HDHITTESTINFO.flags">
            <summary>
            The variable that receives information about the results of a hit test. Two of these values can be combined, such as when the
            position is above and to the left of the client area.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HDHITTESTINFO.iItem">
            <summary>If the hit test is successful, contains the index of the item at the hit test point.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.HDITEM">
            <summary>Contains information about an item in a header control. This structure supersedes the HD_ITEM structure.</summary>
            <seealso cref="T:System.IDisposable"/>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HDITEM.mask">
            <summary>Flags indicating which other structure members contain valid data or must be filled in.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HDITEM.cxy">
            <summary>The width or height of the item.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HDITEM.pszText">
            <summary>
            A pointer to an item string. If the text is being retrieved from the control, this member must be initialized to point to a
            character buffer. If this member is set to LPSTR_TEXTCALLBACK, the control will request text information for this item by
            sending an HDN_GETDISPINFO notification code. Note that although the header control allows a string of any length to be
            stored as item text, only the first 260 TCHARs are displayed.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HDITEM.hbm">
            <summary>A handle to the item bitmap.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HDITEM.cchTextMax">
            <summary>
            The length of the item string, in TCHARs. If the text is being retrieved from the control, this member must contain the
            number of TCHARs at the address specified by pszText.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HDITEM.fmt">
            <summary>Flags that specify the item's format.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HDITEM.lParam">
            <summary>Application-defined item data.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HDITEM.iImage">
            <summary>
            The zero-based index of an image within the image list. The specified image will be displayed in the header item in addition
            to any image specified in the hbm field. If iImage is set to I_IMAGECALLBACK, the control requests text information for this
            item by using an HDN_GETDISPINFO notification code. To clear the image, set this value to I_IMAGENONE.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HDITEM.iOrder">
            <summary>
            The order in which the item appears within the header control, from left to right. That is, the value for the far left item
            is 0. The value for the next item to the right is 1, and so on.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HDITEM.type">
            <summary>The type of filter specified by pvFilter.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HDITEM.pvFilter">
            <summary>
            The address of an application-defined data item. The data filter type is determined by setting the flag value of the member.
            Use the HDFT_ISSTRING flag to indicate a string and HDFT_ISNUMBER to indicate an integer. When the HDFT_ISSTRING flag is used
            pvFilter is a pointer to a HDTEXTFILTER structure.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HDITEM.state">
            <summary>The state.</summary>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.HDITEM.#ctor(Vanara.PInvoke.ComCtl32.HeaderItemMask)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.ComCtl32.HDITEM"/> class.</summary>
            <param name="mask">The mask.</param>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.HDITEM.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.ComCtl32.HDITEM"/> class.</summary>
            <param name="text">The text.</param>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.HDITEM.Checked">
            <summary>Gets or sets a value indicating whether this <see cref="T:Vanara.PInvoke.ComCtl32.HDITEM"/> is checked.</summary>
            <value><c>true</c> if checked; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.HDITEM.Filter">
            <summary>Gets or sets the filter. This value must be a string, integer, DateTime or SYSTEMTIME.</summary>
            <value>The filter.</value>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.HDITEM.FixedWidth">
            <summary>Gets or sets a value indicating whether the header is fixed width.</summary>
            <value><c>true</c> if fixed width; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.HDITEM.Focused">
            <summary>Gets or sets a value indicating whether this header is focused.</summary>
            <value><c>true</c> if focused; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.HDITEM.Format">
            <summary>Gets or sets the header format.</summary>
            <value>The format.</value>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.HDITEM.BitmapRightToLeft">
            <summary>Gets or sets a value indicating whether the bitmap is on the right.</summary>
            <value><c>true</c> if bitmap is on the right; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.HDITEM.ImageDisplay">
            <summary>Gets or sets the how the image is displayed.</summary>
            <value>How the image is displayed.</value>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.HDITEM.ImageIndex">
            <summary>Gets or sets the index of the image in the image list.</summary>
            <value>The index of the image.</value>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.HDITEM.LParam">
            <summary>Gets or sets an application defined value.</summary>
            <value>The parameter.</value>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.HDITEM.Order">
            <summary>Gets or sets the order in which the item appears in the header.</summary>
            <value>The order.</value>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.HDITEM.OwnerDrawn">
            <summary>Gets or sets a value indicating whether the header item is owner drawn.</summary>
            <value><c>true</c> if owner drawn; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.HDITEM.RightToLeft">
            <summary>Gets or sets a value indicating whether header text is displayed right to left.</summary>
            <value><c>true</c> if right to left; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.HDITEM.ShowCheckbox">
            <summary>Gets or sets a value indicating whether to show a checkbox.</summary>
            <value><c>true</c> if shows checkbox; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.HDITEM.ShowSplitButton">
            <summary>Gets or sets a value indicating whether to show a split button.</summary>
            <value><c>true</c> if showing a split button; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.HDITEM.ShowText">
            <summary>Gets or sets a value indicating whether to show text.</summary>
            <value><c>true</c> if showing text; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.HDITEM.Text">
            <summary>Gets or sets the text.</summary>
            <value>The text.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">Text - A header control will only display the first 260 characters.</exception>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.HDITEM.TextAlignment">
            <summary>Gets or sets the text alignment.</summary>
            <value>The text alignment.</value>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.HDITEM.UseTextCallback">
            <summary>
            Gets or sets a value indicating whether this header requests a callback message to retrieve the text. <note>Setting this
            value to either true or false will remove any previously set value for the <see cref="P:Vanara.PInvoke.ComCtl32.HDITEM.Text"/> property or <see
            cref="F:Vanara.PInvoke.ComCtl32.HDITEM.pszText"/> field.</note>
            </summary>
            <value><c>true</c> if using text callback; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.HDITEM.Width">
            <summary>Gets or sets the width.</summary>
            <value>The width.</value>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.HDITEM.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.HDLAYOUT">
            <summary>
            Contains information used to set the size and position of a header control. HDLAYOUT is used with the HDM_LAYOUT message. This
            structure supersedes the HD_LAYOUT structure.
            </summary>
            <seealso cref="T:System.IDisposable"/>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HDLAYOUT.prc">
            <summary>Structure that contains the coordinates of a rectangle that the header control will occupy.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HDLAYOUT.pwpos">
            <summary>Structure that receives information about the appropriate size and position of the header control.</summary>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.HDLAYOUT.#ctor(Vanara.PInvoke.RECT)">
            <summary>
            Initializes a new instance of the <see cref="T:Vanara.PInvoke.ComCtl32.HDLAYOUT"/> class setting the prc member and allocating memory for the pwpos member.
            </summary>
            <param name="rc">The coordinates of the header.</param>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.HDLAYOUT.Coordinates">
            <summary>Gets or sets the coordinates.</summary>
            <value>The coordinates.</value>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.HDLAYOUT.Position">
            <summary>Gets the position.</summary>
            <value>The position.</value>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.HDLAYOUT.Dispose">
            <summary>Releases unmanaged and - optionally - managed resources.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.NMHDDISPINFO">
            <summary>Contains information used in handling HDN_GETDISPINFO notification codes.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMHDDISPINFO.hdr">
            <summary>NMHDR structure containing information about this notification code</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMHDDISPINFO.iItem">
            <summary>The zero-based index of the item in the header control.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMHDDISPINFO.mask">
            <summary>A set of bit flags specifying which members of the structure must be filled in by the owner of the header control.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMHDDISPINFO.pszText">
            <summary>A pointer to a null-terminated string containing the text that will be displayed for the header item.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMHDDISPINFO.cchTextMax">
            <summary>The size of the buffer that pszText points to.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMHDDISPINFO.iImage">
            <summary>
            The zero-based index of an image within the image list. The specified image will be displayed with the header item, but it
            does not take the place of the item's bitmap. If iImage is set to I_IMAGECALLBACK, the control requests image information for
            this item by using an HDN_GETDISPINFO notification code.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMHDDISPINFO.lParam">
            <summary>An application-defined value to associate with the item.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.NMHDFILTERBTNCLICK">
            <summary>Specifies or receives the attributes of a filter button click.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMHDFILTERBTNCLICK.hdr">
            <summary>A handle of an NMHDR structure that contains additional information.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMHDFILTERBTNCLICK.iItem">
            <summary>The zero-based index of the control to which this structure refers.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMHDFILTERBTNCLICK.rc">
            <summary>A pointer to a RECT structure that contains the client rectangle for the filter button.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.NMHEADER">
            <summary>Contains information about header control notification messages. This structure supersedes the HD_NOTIFY structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMHEADER.nmhdr">
            <summary>A NMHDR structure that contains information about the notification message.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMHEADER.iItem">
            <summary>The zero-based index of the header item that is the focus of the notification message.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMHEADER.iButton">
            <summary>
            A value specifying the index of the mouse button used to generate the notification message. This member can be one of the
            following values:
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>0</term>
            <description>Left button</description>
            </item>
            <item>
            <term>1</term>
            <description>Right button</description>
            </item>
            <item>
            <term>2</term>
            <description>Middle button</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMHEADER.pItem">
            <summary>
            An optional pointer to an HDITEM structure containing information about the item specified by iItem. The mask member of the
            HDITEM structure indicates which of its members are valid.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.ILC">
            <summary>
            <para>
            The set of bit flags that specifies the type of image list to create. This parameter can be a combination of the following
            values, but it can include only one of the ILC_COLOR values. Used by <c>ImageList_Create</c> and <c>IImageList2::Initialize</c>.
            </para>
            <para>
            <list type="table">
            <listheader>
            <term>Constant/value</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ILC_MASK0x00000001</term>
            <term>
            Use a mask. The image list contains two bitmaps, one of which is a monochrome bitmap used as a mask. If this value is not
            included, the image list contains only one bitmap.
            </term>
            </item>
            <item>
            <term>ILC_COLOR0x00000000</term>
            <term>
            Use the default behavior if none of the other ILC_COLORx flags is specified. Typically, the default is ILC_COLOR4, but for older
            display drivers, the default is ILC_COLORDDB.
            </term>
            </item>
            <item>
            <term>ILC_COLORDDB0x000000FE</term>
            <term>Use a device-dependent bitmap.</term>
            </item>
            <item>
            <term>ILC_COLOR40x00000004</term>
            <term>Use a 4-bit (16-color) device-independent bitmap (DIB) section as the bitmap for the image list.</term>
            </item>
            <item>
            <term>ILC_COLOR80x00000008</term>
            <term>Use an 8-bit DIB section. The colors used for the color table are the same colors as the halftone palette.</term>
            </item>
            <item>
            <term>ILC_COLOR160x00000010</term>
            <term>Use a 16-bit (32/64k-color) DIB section.</term>
            </item>
            <item>
            <term>ILC_COLOR240x00000018</term>
            <term>Use a 24-bit DIB section.</term>
            </item>
            <item>
            <term>ILC_COLOR320x00000020</term>
            <term>Use a 32-bit DIB section.</term>
            </item>
            <item>
            <term>ILC_PALETTE0x00000800</term>
            <term>Not implemented.</term>
            </item>
            <item>
            <term>ILC_MIRROR0x00002000</term>
            <term>Mirror the icons contained, if the process is mirrored</term>
            </item>
            <item>
            <term>ILC_PERITEMMIRROR0x00008000</term>
            <term>Causes the mirroring code to mirror each item when inserting a set of images, versus the whole strip.</term>
            </item>
            <item>
            <term>ILC_ORIGINALSIZE0x00010000</term>
            <term>Windows Vista and later. Imagelist should accept smaller than set images and apply original size based on image added.</term>
            </item>
            <item>
            <term>ILC_HIGHQUALITYSCALE0x00020000</term>
            <term>Windows Vista and later. Reserved.</term>
            </item>
            </list>
            </para>
            </summary>
            <returns></returns>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ILC.ILC_MASK">
            <summary>
            Use a mask. The image list contains two bitmaps, one of which is a monochrome bitmap used as a mask. If this value is not
            included, the image list contains only one bitmap.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ILC.ILC_COLOR">
            <summary>
            Use the default behavior if none of the other ILC_COLORx flags is specified. Typically, the default is ILC_COLOR4, but for
            older display drivers, the default is ILC_COLORDDB.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ILC.ILC_COLORDDB">
            <summary>Use a device-dependent bitmap.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ILC.ILC_COLOR4">
            <summary>Use a 4-bit (16-color) device-independent bitmap (DIB) section as the bitmap for the image list.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ILC.ILC_COLOR8">
            <summary>Use an 8-bit DIB section. The colors used for the color table are the same colors as the halftone palette.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ILC.ILC_COLOR16">
            <summary>Use a 16-bit (32/64k-color) DIB section.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ILC.ILC_COLOR24">
            <summary>Use a 24-bit DIB section.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ILC.ILC_COLOR32">
            <summary>Use a 32-bit DIB section.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ILC.ILC_PALETTE">
            <summary>Not implemented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ILC.ILC_MIRROR">
            <summary>Mirror the icons contained, if the process is mirrored</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ILC.ILC_PERITEMMIRROR">
            <summary>Causes the mirroring code to mirror each item when inserting a set of images, versus the whole strip.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ILC.ILC_ORIGINALSIZE">
            <summary>
            Windows Vista and later. Imagelist should accept smaller than set images and apply original size based on image added.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ILC.ILC_HIGHQUALITYSCALE">
            <summary>Windows Vista and later. Reserved.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.ILDI">
            <summary>Discard images flags.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ILDI.ILDI_PURGE">
            <summary>Discard and purge.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ILDI.ILDI_STANDBY">
            <summary>Discard to standby list.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ILDI.ILDI_RESETACCESS">
            <summary>Reset the "has been accessed" flag.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ILDI.ILDI_QUERYACCESS">
            <summary>Ask whether access flag is set (but do not reset).</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.ILFIP">
            <summary>Force image flags.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ILFIP.ILFIP_ALWAYS">
            <summary>Always get the image (can be slow).</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ILFIP.ILFIP_FROMSTANDBY">
            <summary>Only get if on standby.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.ILGOS">
            <summary>Flags for getting original size.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ILGOS.ILGOS_ALWAYS">
            <summary>Always get the original size (can be slow).</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ILGOS.ILGOS_FROMSTANDBY">
            <summary>Only get if present or on standby.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.ILP">
            <summary>A flag that specifies how the stream is read.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ILP.ILP_NORMAL">
            <summary>Expects an image list that was written with the ILP_NORMAL flag specified.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ILP.ILP_DOWNLEVEL">
            <summary>Expects an image list that was written with the ILP_DOWNLEVEL flag specified.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.ILR">
            <summary>Specifies how the mask is applied to the image as one or a bitwise combination of the following decoration flags.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ILR.ILR_DEFAULT">
            <summary>Not used.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ILR.ILR_HORIZONTAL_LEFT">
            <summary>Horizontally align to left.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ILR.ILR_HORIZONTAL_CENTER">
            <summary>Horizontally center.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ILR.ILR_HORIZONTAL_RIGHT">
            <summary>Horizontally align to right.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ILR.ILR_VERTICAL_TOP">
            <summary>Vertically align to top.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ILR.ILR_VERTICAL_CENTER">
            <summary>Vertically align to center.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ILR.ILR_VERTICAL_BOTTOM">
            <summary>Vertically align to bottom.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ILR.ILR_SCALE_CLIP">
            <summary>Do nothing.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ILR.ILR_SCALE_ASPECTRATIO">
            <summary>Scale.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.IMAGELISTCOPYFLAG">
            <summary>Flags used when copying image lists.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.IMAGELISTCOPYFLAG.ILCF_MOVE">
            <summary>
            The source image is copied to the destination image's index. This operation results in multiple instances of a given image.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.IMAGELISTCOPYFLAG.ILCF_SWAP">
            <summary>The source and destination images exchange positions within the image list.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.IMAGELISTDRAWFLAGS">
            <summary>Passed to the IImageList::Draw method in the fStyle member of IMAGELISTDRAWPARAMS.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.IMAGELISTDRAWFLAGS.ILD_NORMAL">
            <summary>
            Draws the image using the background color for the image list. If the background color is the CLR_NONE value, the image is
            drawn transparently using the mask.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.IMAGELISTDRAWFLAGS.ILD_TRANSPARENT">
            <summary>
            Draws the image transparently using the mask, regardless of the background color. This value has no effect if the image list
            does not contain a mask.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.IMAGELISTDRAWFLAGS.ILD_BLEND25">
            <summary>
            Draws the image, blending 25 percent with the blend color specified by rgbFg. This value has no effect if the image list does
            not contain a mask.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.IMAGELISTDRAWFLAGS.ILD_FOCUS">
            <summary>Same as ILD_BLEND25</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.IMAGELISTDRAWFLAGS.ILD_BLEND50">
            <summary>
            Draws the image, blending 50 percent with the blend color specified by rgbFg. This value has no effect if the image list does
            not contain a mask.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.IMAGELISTDRAWFLAGS.ILD_SELECTED">
            <summary>Same as ILD_BLEND50</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.IMAGELISTDRAWFLAGS.ILD_BLEND">
            <summary>Same as ILD_BLEND50</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.IMAGELISTDRAWFLAGS.ILD_MASK">
            <summary>Draws the mask.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.IMAGELISTDRAWFLAGS.ILD_IMAGE">
            <summary>If the overlay does not require a mask to be drawn, set this flag.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.IMAGELISTDRAWFLAGS.ILD_ROP">
            <summary>Draws the image using the raster operation code specified by the dwRop member.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.IMAGELISTDRAWFLAGS.ILD_OVERLAYMASK">
            <summary>
            To extract the overlay image from the fStyle member, use the logical AND to combine fStyle with the ILD_OVERLAYMASK value.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.IMAGELISTDRAWFLAGS.ILD_PRESERVEALPHA">
            <summary>Preserves the alpha channel in the destination.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.IMAGELISTDRAWFLAGS.ILD_SCALE">
            <summary>Causes the image to be scaled to cx, cy instead of being clipped.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.IMAGELISTDRAWFLAGS.ILD_DPISCALE">
            <summary>Scales the image to the current dpi of the display.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.IMAGELISTDRAWFLAGS.ILD_ASYNC">
            <summary>
            <c>Windows Vista and later.</c> Draw the image if it is available in the cache. Do not extract it automatically. The called
            draw method returns E_PENDING to the calling component, which should then take an alternative action, such as, provide
            another image and queue a background task to force the image to be loaded via ForceImagePresent using the ILFIP_ALWAYS flag.
            The ILD_ASYNC flag then prevents the extraction operation from blocking the current thread and is especially important if a
            draw method is called from the user interface (UI) thread.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.IMAGELISTITEMFLAG">
            <summary>Item flags.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.IMAGELISTITEMFLAG.ILIF_ALPHA">
            <summary>Indicates that the item in the imagelist has an alpha channel.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.IMAGELISTITEMFLAG.ILIF_LOWQUALITY">
            <summary>
            Windows Vista and later. Indicates that the item in the imagelist was generated via a StretchBlt function, consequently image
            quality may have degraded.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.IMAGELISTSTATEFLAGS">
            <summary>The following flags are passed to the IImageList::Draw method in the fState member of IMAGELISTDRAWPARAMS.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.IMAGELISTSTATEFLAGS.ILS_NORMAL">
            <summary>The image state is not modified.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.IMAGELISTSTATEFLAGS.ILS_GLOW">
            <summary>Not supported.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.IMAGELISTSTATEFLAGS.ILS_SHADOW">
            <summary>Not supported.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.IMAGELISTSTATEFLAGS.ILS_SATURATE">
            <summary>Reduces the color saturation of the icon to grayscale. This only affects 32bpp images.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.IMAGELISTSTATEFLAGS.ILS_ALPHA">
            <summary>
            Alpha blends the icon. Alpha blending controls the transparency level of an icon, according to the value of its alpha
            channel. The value of the alpha channel is indicated by the frame member in the IMAGELISTDRAWPARAMS method. The alpha channel
            can be from 0 to 255, with 0 being completely transparent, and 255 being completely opaque.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.IImageList">
            <summary>Exposes methods that manipulate and interact with image lists.</summary>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.IImageList.Add(Vanara.PInvoke.HBITMAP,Vanara.PInvoke.HBITMAP)">
            <summary>Adds an image or images to an image list.</summary>
            <param name="hbmImage">
            A handle to the bitmap that contains the image or images. The number of images is inferred from the width of the bitmap.
            </param>
            <param name="hbmMask">
            A handle to the bitmap that contains the mask. If no mask is used with the image list, this parameter is ignored.
            </param>
            <returns>
            When this method returns, contains a pointer to the index of the first new image. If the method fails to successfully add the
            new image, this value is -1.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.IImageList.ReplaceIcon(System.Int32,Vanara.PInvoke.HICON)">
            <summary>Replaces an image with an icon or cursor.</summary>
            <param name="i">
            A value of type int that contains the index of the image to replace. If i is -1, the function adds the image to the end of
            the list.
            </param>
            <param name="hicon">A handle to the icon or cursor that contains the bitmap and mask for the new image.</param>
            <returns>A pointer to an int that will contain the index of the image on return if successful, or -1 otherwise.</returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.IImageList.SetOverlayImage(System.Int32,System.Int32)">
            <summary>
            Adds a specified image to the list of images used as overlay masks. An image list can have up to four overlay masks in Common
            Controls version 4.70 and earlier, and up to 15 in version 4.71 or later. The method assigns an overlay mask index to the
            specified image.
            </summary>
            <param name="iImage">
            A value of type int that contains the zero-based index of an image in the image list. This index identifies the image to use
            as an overlay mask.
            </param>
            <param name="iOverlay">A value of type int that contains the one-based index of the overlay mask.</param>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.IImageList.Replace(System.Int32,Vanara.PInvoke.HBITMAP,Vanara.PInvoke.HBITMAP)">
            <summary>Replaces an image in an image list with a new image.</summary>
            <param name="i">A value of type int that contains the index of the image to replace.</param>
            <param name="hbmImage">A handle to the bitmap that contains the image.</param>
            <param name="hbmMask">
            A handle to the bitmap that contains the mask. If no mask is used with the image list, this parameter is ignored.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.IImageList.AddMasked(Vanara.PInvoke.HBITMAP,Vanara.PInvoke.COLORREF)">
            <summary>Adds an image or images to an image list, generating a mask from the specified bitmap.</summary>
            <param name="hbmImage">
            A handle to the bitmap that contains one or more images. The number of images is inferred from the width of the bitmap.
            </param>
            <param name="crMask">
            The color used to generate the mask. Each pixel of this color in the specified bitmap is changed to black, and the
            corresponding bit in the mask is set to 1.
            </param>
            <returns>A pointer to an int that contains the index of the first new image when it returns, if successful, or -1 otherwise.</returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.IImageList.Draw(Vanara.PInvoke.ComCtl32.IMAGELISTDRAWPARAMS)">
            <summary>Draws an image list item in the specified device context.</summary>
            <param name="pimldp">A pointer to an IMAGELISTDRAWPARAMS structure that contains the drawing parameters.</param>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.IImageList.Remove(System.Int32)">
            <summary>Removes an image from an image list.</summary>
            <param name="i">
            A value of type int that contains the index of the image to remove. If this parameter is -1, the method removes all images.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.IImageList.GetIcon(System.Int32,Vanara.PInvoke.ComCtl32.IMAGELISTDRAWFLAGS)">
            <summary>Creates an icon from an image and a mask in an image list.</summary>
            <param name="i">A value of type int that contains the index of the image.</param>
            <param name="flags">A combination of flags that specify the drawing style. For a list of values, see IImageList::Draw.</param>
            <returns>A pointer to an int that contains the handle to the icon if successful, or NULL if otherwise.</returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.IImageList.GetImageInfo(System.Int32)">
            <summary>Gets information about an image.</summary>
            <param name="i">A value of type int that contains the index of the image.</param>
            <returns>
            A pointer to an IMAGEINFO structure that receives information about the image. The information in this structure can directly
            manipulate the bitmaps of the image.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.IImageList.Copy(System.Int32,Vanara.PInvoke.ComCtl32.IImageList,System.Int32,Vanara.PInvoke.ComCtl32.IMAGELISTCOPYFLAG)">
            <summary>Copies images from a given image list.</summary>
            <param name="iDst">A value of type int that contains the zero-based index of the destination image for the copy operation.</param>
            <param name="punkSrc">A pointer to the IUnknown interface for the source image list.</param>
            <param name="iSrc">A value of type int that contains the zero-based index of the source image for the copy operation.</param>
            <param name="uFlags">A value that specifies the type of copy operation to be made.</param>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.IImageList.Merge(System.Int32,Vanara.PInvoke.ComCtl32.IImageList,System.Int32,System.Int32,System.Int32,System.Guid@)">
            <summary>
            Creates a new image by combining two existing images. This method also creates a new image list in which to store the image.
            </summary>
            <param name="i1">A value of type int that contains the index of the first existing image.</param>
            <param name="punk2">A pointer to the IUnknown interface of the image list that contains the second image.</param>
            <param name="i2">A value of type int that contains the index of the second existing image.</param>
            <param name="dx">
            A value of type int that contains the x-component of the offset of the second image relative to the first image.
            </param>
            <param name="dy">
            A value of type int that contains the y-component of the offset of the second image relative to the first image.
            </param>
            <param name="riid">An IID of the interface for the new image list.</param>
            <returns>A raw pointer to the interface for the new image list.</returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.IImageList.Clone(System.Guid@)">
            <summary>Clones an existing image list.</summary>
            <param name="riid">An IID for the new image list.</param>
            <returns>The address of a pointer to the interface for the new image list.</returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.IImageList.GetImageRect(System.Int32)">
            <summary>Gets an image's bounding rectangle.</summary>
            <param name="i">A value of type int that contains the index of the image.</param>
            <returns>A pointer to a RECT that contains the bounding rectangle when the method returns.</returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.IImageList.GetIconSize(System.Int32@,System.Int32@)">
            <summary>Gets the dimensions of images in an image list. All images in an image list have the same dimensions.</summary>
            <param name="cx">A pointer to an int that receives the width, in pixels, of each image.</param>
            <param name="cy">A pointer to an int that receives the height, in pixels, of each image.</param>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.IImageList.SetIconSize(System.Int32,System.Int32)">
            <summary>Sets the dimensions of images in an image list and removes all images from the list.</summary>
            <param name="cx">
            A value of type int that contains the width, in pixels, of the images in the image list. All images in an image list have the
            same dimensions.
            </param>
            <param name="cy">
            A value of type int that contains the height, in pixels, of the images in the image list. All images in an image list have
            the same dimensions.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.IImageList.GetImageCount">
            <summary>Gets the number of images in an image list.</summary>
            <returns>A pointer to an int that contains the number of images when the method returns.</returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.IImageList.SetImageCount(System.Int32)">
            <summary>Resizes an existing image list.</summary>
            <param name="uNewCount">A value that specifies the new size of the image list.</param>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.IImageList.SetBkColor(Vanara.PInvoke.COLORREF,Vanara.PInvoke.COLORREF@)">
            <summary>
            Sets the background color for an image list. This method only functions if you add an icon to the image list or use the
            IImageList::AddMasked method to add a black and white bitmap. Without a mask, the entire image draws, and the background
            color is not visible.
            </summary>
            <param name="clrBk">
            The background color to set. If this parameter is set to CLR_NONE, then images draw transparently using the mask.
            </param>
            <param name="pclr">
            A pointer to a COLORREF that contains the previous background color on return if successful, or CLR_NONE otherwise.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.IImageList.GetBkColor">
            <summary>Gets the current background color for an image list.</summary>
            <returns>A pointer to a COLORREF that contains the background color when the method returns.</returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.IImageList.BeginDrag(System.Int32,System.Int32,System.Int32)">
            <summary>Begins dragging an image.</summary>
            <param name="iTrack">A value of type int that contains the index of the image to drag.</param>
            <param name="dxHotspot">
            A value of type int that contains the x-component of the drag position relative to the upper-left corner of the image.
            </param>
            <param name="dyHotspot">
            A value of type int that contains the y-component of the drag position relative to the upper-left corner of the image.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.IImageList.EndDrag">
            <summary>Ends a drag operation.</summary>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.IImageList.DragEnter(Vanara.PInvoke.HWND,System.Int32,System.Int32)">
            <summary>
            Locks updates to the specified window during a drag operation and displays the drag image at the specified position within
            the window.
            </summary>
            <param name="hwndLock">A handle to the window that owns the drag image.</param>
            <param name="x">
            The x-coordinate at which to display the drag image. The coordinate is relative to the upper-left corner of the window, not
            the client area.
            </param>
            <param name="y">
            The y-coordinate at which to display the drag image. The coordinate is relative to the upper-left corner of the window, not
            the client area.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.IImageList.DragLeave(Vanara.PInvoke.HWND)">
            <summary>Unlocks the specified window and hides the drag image, which enables the window to update.</summary>
            <param name="hwndLock">A handle to the window that contains the drag image.</param>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.IImageList.DragMove(System.Int32,System.Int32)">
            <summary>
            Moves the image that is being dragged during a drag-and-drop operation. This function is typically called in response to a
            WM_MOUSEMOVE message.
            </summary>
            <param name="x">
            A value of type int that contains the x-coordinate where the drag image appears. The coordinate is relative to the upper-left
            corner of the window, not the client area.
            </param>
            <param name="y">
            A value of type int that contains the y-coordinate where the drag image appears. The coordinate is relative to the upper-left
            corner of the window, not the client area.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.IImageList.SetDragCursorImage(Vanara.PInvoke.ComCtl32.IImageList,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new drag image by combining the specified image, which is typically a mouse cursor image, with the current drag image.
            </summary>
            <param name="punk">
            A pointer to the IUnknown interface that accesses the image list interface, which contains the new image to combine with the
            drag image.
            </param>
            <param name="iDrag">A value of type int that contains the index of the new image to combine with the drag image.</param>
            <param name="dxHotspot">A value of type int that contains the x-component of the hot spot within the new image.</param>
            <param name="dyHotspot">A value of type int that contains the x-component of the hot spot within the new image.</param>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.IImageList.DragShowNolock(System.Boolean)">
            <summary>Shows or hides the image being dragged.</summary>
            <param name="fShow">
            A value that specifies whether to show or hide the image being dragged. Specify TRUE to show the image or FALSE to hide the image.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.IImageList.GetDragImage(Vanara.PInvoke.POINT@,Vanara.PInvoke.POINT@,System.Guid@)">
            <summary>
            Gets the temporary image list that is used for the drag image. The function also retrieves the current drag position and the
            offset of the drag image relative to the drag position.
            </summary>
            <param name="ppt">A pointer to a POINT structure that receives the current drag position. Can be NULL.</param>
            <param name="pptHotspot">
            A pointer to a POINT structure that receives the offset of the drag image relative to the drag position. Can be NULL.
            </param>
            <param name="riid">An IID for the image list.</param>
            <returns>The address of a pointer to the interface for the image list if successful, NULL otherwise.</returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.IImageList.GetItemFlags(System.Int32)">
            <summary>Gets the flags of an image.</summary>
            <param name="i">A value of type int that contains the index of the images whose flags need to be retrieved.</param>
            <returns>A pointer to a DWORD that contains the flags when the method returns.</returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.IImageList.GetOverlayImage(System.Int32)">
            <summary>Gets the overlay image.</summary>
            <param name="iOverlay">The i overlay.</param>
            <returns></returns>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.IImageList2">
            <summary>Extends IImageList by providing additional methods for manipulating and interacting with image lists.</summary>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.IImageList2.Add(Vanara.PInvoke.HBITMAP,Vanara.PInvoke.HBITMAP)">
            <summary>Adds an image or images to an image list.</summary>
            <param name="hbmImage">
            A handle to the bitmap that contains the image or images. The number of images is inferred from the width of the bitmap.
            </param>
            <param name="hbmMask">
            A handle to the bitmap that contains the mask. If no mask is used with the image list, this parameter is ignored.
            </param>
            <returns>
            When this method returns, contains a pointer to the index of the first new image. If the method fails to successfully add the
            new image, this value is -1.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.IImageList2.ReplaceIcon(System.Int32,Vanara.PInvoke.HICON)">
            <summary>Replaces an image with an icon or cursor.</summary>
            <param name="i">
            A value of type int that contains the index of the image to replace. If i is -1, the function adds the image to the end of
            the list.
            </param>
            <param name="hicon">A handle to the icon or cursor that contains the bitmap and mask for the new image.</param>
            <returns>A pointer to an int that will contain the index of the image on return if successful, or -1 otherwise.</returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.IImageList2.SetOverlayImage(System.Int32,System.Int32)">
            <summary>
            Adds a specified image to the list of images used as overlay masks. An image list can have up to four overlay masks in Common
            Controls version 4.70 and earlier, and up to 15 in version 4.71 or later. The method assigns an overlay mask index to the
            specified image.
            </summary>
            <param name="iImage">
            A value of type int that contains the zero-based index of an image in the image list. This index identifies the image to use
            as an overlay mask.
            </param>
            <param name="iOverlay">A value of type int that contains the one-based index of the overlay mask.</param>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.IImageList2.Replace(System.Int32,Vanara.PInvoke.HBITMAP,Vanara.PInvoke.HBITMAP)">
            <summary>Replaces an image in an image list with a new image.</summary>
            <param name="i">A value of type int that contains the index of the image to replace.</param>
            <param name="hbmImage">A handle to the bitmap that contains the image.</param>
            <param name="hbmMask">
            A handle to the bitmap that contains the mask. If no mask is used with the image list, this parameter is ignored.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.IImageList2.AddMasked(Vanara.PInvoke.HBITMAP,Vanara.PInvoke.COLORREF)">
            <summary>Adds an image or images to an image list, generating a mask from the specified bitmap.</summary>
            <param name="hbmImage">
            A handle to the bitmap that contains one or more images. The number of images is inferred from the width of the bitmap.
            </param>
            <param name="crMask">
            The color used to generate the mask. Each pixel of this color in the specified bitmap is changed to black, and the
            corresponding bit in the mask is set to 1.
            </param>
            <returns>A pointer to an int that contains the index of the first new image when it returns, if successful, or -1 otherwise.</returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.IImageList2.Draw(Vanara.PInvoke.ComCtl32.IMAGELISTDRAWPARAMS)">
            <summary>Draws an image list item in the specified device context.</summary>
            <param name="pimldp">A pointer to an IMAGELISTDRAWPARAMS structure that contains the drawing parameters.</param>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.IImageList2.Remove(System.Int32)">
            <summary>Removes an image from an image list.</summary>
            <param name="i">
            A value of type int that contains the index of the image to remove. If this parameter is -1, the method removes all images.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.IImageList2.GetIcon(System.Int32,Vanara.PInvoke.ComCtl32.IMAGELISTDRAWFLAGS)">
            <summary>Creates an icon from an image and a mask in an image list.</summary>
            <param name="i">A value of type int that contains the index of the image.</param>
            <param name="flags">A combination of flags that specify the drawing style. For a list of values, see IImageList::Draw.</param>
            <returns>A pointer to an int that contains the handle to the icon if successful, or NULL if otherwise.</returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.IImageList2.GetImageInfo(System.Int32)">
            <summary>Gets information about an image.</summary>
            <param name="i">A value of type int that contains the index of the image.</param>
            <returns>
            A pointer to an IMAGEINFO structure that receives information about the image. The information in this structure can directly
            manipulate the bitmaps of the image.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.IImageList2.Copy(System.Int32,Vanara.PInvoke.ComCtl32.IImageList,System.Int32,Vanara.PInvoke.ComCtl32.IMAGELISTCOPYFLAG)">
            <summary>Copies images from a given image list.</summary>
            <param name="iDst">A value of type int that contains the zero-based index of the destination image for the copy operation.</param>
            <param name="punkSrc">A pointer to the IUnknown interface for the source image list.</param>
            <param name="iSrc">A value of type int that contains the zero-based index of the source image for the copy operation.</param>
            <param name="uFlags">A value that specifies the type of copy operation to be made.</param>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.IImageList2.Merge(System.Int32,Vanara.PInvoke.ComCtl32.IImageList,System.Int32,System.Int32,System.Int32,System.Guid@)">
            <summary>
            Creates a new image by combining two existing images. This method also creates a new image list in which to store the image.
            </summary>
            <param name="i1">A value of type int that contains the index of the first existing image.</param>
            <param name="punk2">A pointer to the IUnknown interface of the image list that contains the second image.</param>
            <param name="i2">A value of type int that contains the index of the second existing image.</param>
            <param name="dx">
            A value of type int that contains the x-component of the offset of the second image relative to the first image.
            </param>
            <param name="dy">
            A value of type int that contains the y-component of the offset of the second image relative to the first image.
            </param>
            <param name="riid">An IID of the interface for the new image list.</param>
            <returns>A raw pointer to the interface for the new image list.</returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.IImageList2.Clone(System.Guid@)">
            <summary>Clones an existing image list.</summary>
            <param name="riid">An IID for the new image list.</param>
            <returns>The address of a pointer to the interface for the new image list.</returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.IImageList2.GetImageRect(System.Int32)">
            <summary>Gets an image's bounding rectangle.</summary>
            <param name="i">A value of type int that contains the index of the image.</param>
            <returns>A pointer to a RECT that contains the bounding rectangle when the method returns.</returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.IImageList2.GetIconSize(System.Int32@,System.Int32@)">
            <summary>Gets the dimensions of images in an image list. All images in an image list have the same dimensions.</summary>
            <param name="cx">A pointer to an int that receives the width, in pixels, of each image.</param>
            <param name="cy">A pointer to an int that receives the height, in pixels, of each image.</param>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.IImageList2.SetIconSize(System.Int32,System.Int32)">
            <summary>Sets the dimensions of images in an image list and removes all images from the list.</summary>
            <param name="cx">
            A value of type int that contains the width, in pixels, of the images in the image list. All images in an image list have the
            same dimensions.
            </param>
            <param name="cy">
            A value of type int that contains the height, in pixels, of the images in the image list. All images in an image list have
            the same dimensions.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.IImageList2.GetImageCount">
            <summary>Gets the number of images in an image list.</summary>
            <returns>A pointer to an int that contains the number of images when the method returns.</returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.IImageList2.SetImageCount(System.Int32)">
            <summary>Resizes an existing image list.</summary>
            <param name="uNewCount">A value that specifies the new size of the image list.</param>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.IImageList2.SetBkColor(Vanara.PInvoke.COLORREF,Vanara.PInvoke.COLORREF@)">
            <summary>
            Sets the background color for an image list. This method only functions if you add an icon to the image list or use the
            IImageList::AddMasked method to add a black and white bitmap. Without a mask, the entire image draws, and the background
            color is not visible.
            </summary>
            <param name="clrBk">
            The background color to set. If this parameter is set to CLR_NONE, then images draw transparently using the mask.
            </param>
            <param name="pclr">
            A pointer to a COLORREF that contains the previous background color on return if successful, or CLR_NONE otherwise.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.IImageList2.GetBkColor">
            <summary>Gets the current background color for an image list.</summary>
            <returns>A pointer to a COLORREF that contains the background color when the method returns.</returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.IImageList2.BeginDrag(System.Int32,System.Int32,System.Int32)">
            <summary>Begins dragging an image.</summary>
            <param name="iTrack">A value of type int that contains the index of the image to drag.</param>
            <param name="dxHotspot">
            A value of type int that contains the x-component of the drag position relative to the upper-left corner of the image.
            </param>
            <param name="dyHotspot">
            A value of type int that contains the y-component of the drag position relative to the upper-left corner of the image.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.IImageList2.EndDrag">
            <summary>Ends a drag operation.</summary>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.IImageList2.DragEnter(Vanara.PInvoke.HWND,System.Int32,System.Int32)">
            <summary>
            Locks updates to the specified window during a drag operation and displays the drag image at the specified position within
            the window.
            </summary>
            <param name="hwndLock">A handle to the window that owns the drag image.</param>
            <param name="x">
            The x-coordinate at which to display the drag image. The coordinate is relative to the upper-left corner of the window, not
            the client area.
            </param>
            <param name="y">
            The y-coordinate at which to display the drag image. The coordinate is relative to the upper-left corner of the window, not
            the client area.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.IImageList2.DragLeave(Vanara.PInvoke.HWND)">
            <summary>Unlocks the specified window and hides the drag image, which enables the window to update.</summary>
            <param name="hwndLock">A handle to the window that contains the drag image.</param>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.IImageList2.DragMove(System.Int32,System.Int32)">
            <summary>
            Moves the image that is being dragged during a drag-and-drop operation. This function is typically called in response to a
            WM_MOUSEMOVE message.
            </summary>
            <param name="x">
            A value of type int that contains the x-coordinate where the drag image appears. The coordinate is relative to the upper-left
            corner of the window, not the client area.
            </param>
            <param name="y">
            A value of type int that contains the y-coordinate where the drag image appears. The coordinate is relative to the upper-left
            corner of the window, not the client area.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.IImageList2.SetDragCursorImage(Vanara.PInvoke.ComCtl32.IImageList,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new drag image by combining the specified image, which is typically a mouse cursor image, with the current drag image.
            </summary>
            <param name="punk">
            A pointer to the IUnknown interface that accesses the image list interface, which contains the new image to combine with the
            drag image.
            </param>
            <param name="iDrag">A value of type int that contains the index of the new image to combine with the drag image.</param>
            <param name="dxHotspot">A value of type int that contains the x-component of the hot spot within the new image.</param>
            <param name="dyHotspot">A value of type int that contains the x-component of the hot spot within the new image.</param>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.IImageList2.DragShowNolock(System.Boolean)">
            <summary>Shows or hides the image being dragged.</summary>
            <param name="fShow">
            A value that specifies whether to show or hide the image being dragged. Specify TRUE to show the image or FALSE to hide the image.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.IImageList2.GetDragImage(Vanara.PInvoke.POINT@,Vanara.PInvoke.POINT@,System.Guid@)">
            <summary>
            Gets the temporary image list that is used for the drag image. The function also retrieves the current drag position and the
            offset of the drag image relative to the drag position.
            </summary>
            <param name="ppt">A pointer to a POINT structure that receives the current drag position. Can be NULL.</param>
            <param name="pptHotspot">
            A pointer to a POINT structure that receives the offset of the drag image relative to the drag position. Can be NULL.
            </param>
            <param name="riid">An IID for the image list.</param>
            <returns>The address of a pointer to the interface for the image list if successful, NULL otherwise.</returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.IImageList2.GetItemFlags(System.Int32)">
            <summary>Gets the flags of an image.</summary>
            <param name="i">A value of type int that contains the index of the images whose flags need to be retrieved.</param>
            <returns>A pointer to a DWORD that contains the flags when the method returns.</returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.IImageList2.GetOverlayImage(System.Int32)">
            <summary>Retrieves a specified image from the list of images used as overlay masks.</summary>
            <param name="iOverlay">A value of type int that contains the one-based index of the overlay mask.</param>
            <returns>
            A pointer to an int that receives the zero-based index of an image in the image list. This index identifies the image that is
            used as an overlay mask.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.IImageList2.Resize(System.Int32,System.Int32)">
            <summary>Resizes the current image.</summary>
            <param name="cxNewIconSize">The x-axis count, in pixels, for the new size.</param>
            <param name="cyNewIconSize">The y-axis count, in pixels, for the new size.</param>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.IImageList2.GetOriginalSize(System.Int32,Vanara.PInvoke.ComCtl32.ILGOS,System.Int32@,System.Int32@)">
            <summary>Gets the original size of a specified image.</summary>
            <param name="iImage">The index of desired image.</param>
            <param name="dwFlags">Flags for getting original size.</param>
            <param name="pcx">A pointer to the x-axis count.</param>
            <param name="pcy">A pointer to the y-axis count.</param>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.IImageList2.SetOriginalSize(System.Int32,System.Int32,System.Int32)">
            <summary>Sets the original size of a specified image.</summary>
            <param name="iImage">An index of desired image.</param>
            <param name="cx">The x-axis count.</param>
            <param name="cy">The y-axis count.</param>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.IImageList2.SetCallback(System.Object)">
            <summary>Sets an image list callback.</summary>
            <param name="punk">A pointer to the callback interface.</param>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.IImageList2.GetCallback(System.Guid@)">
            <summary>Gets an image list callback object.</summary>
            <param name="riid">Reference to a desired IID.</param>
            <returns>Contains the address of a pointer to a callback object.</returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.IImageList2.ForceImagePresent(System.Int32,System.UInt32)">
            <summary>Forces an image present, as specified.</summary>
            <param name="iImage">An index of image to force present.</param>
            <param name="dwFlags">Force image flags.</param>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.IImageList2.DiscardImages(System.Int32,System.Int32,Vanara.PInvoke.ComCtl32.ILDI)">
            <summary>Discards images from list, as specified.</summary>
            <param name="iFirstImage">An index of first image to discard.</param>
            <param name="iLastImage">An index of last image to discard.</param>
            <param name="dwFlags">
            Discard images flags. ILDI_STANDBY and ILDI_PURGE are mutually exclusive. ILDI_RESETACCESS can be combined with either.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.IImageList2.PreloadImages(Vanara.PInvoke.ComCtl32.IMAGELISTDRAWPARAMS@)">
            <summary>Preloads images, as specified.</summary>
            <param name="pimldp">A pointer to an IMAGELISTDRAWPARAMS structure containing information about an image list draw operation.</param>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.IImageList2.GetStatistics">
            <summary>Gets an image list statistics structure.</summary>
            <returns>A pointer to the IMAGELISTSTATS structure.</returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.IImageList2.Initialize(System.Int32,System.Int32,System.UInt32,System.Int32,System.Int32)">
            <summary>Initializes an image list.</summary>
            <param name="cx">Width, in pixels, of each image.</param>
            <param name="cy">Height, in pixels, of each image.</param>
            <param name="flags">A combination of Image List Creation Flags.</param>
            <param name="cInitial">Number of images that the image list initially contains.</param>
            <param name="cGrow">Number of new images that the image list can contain.</param>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.IImageList2.Replace2(System.Int32,Vanara.PInvoke.HBITMAP,Vanara.PInvoke.HBITMAP,System.Object,Vanara.PInvoke.ComCtl32.ILR)">
            <summary>Replaces an image in an image list.</summary>
            <param name="i">The index of the image to replace.</param>
            <param name="hbmImage">A handle to the bitmap that contains the image.</param>
            <param name="hbmMask">
            A handle to the bitmap that contains the mask. If no mask is used with the image list, this parameter is ignored.
            </param>
            <param name="punk">A pointer to the IUnknown interface.</param>
            <param name="dwFlags">
            Specifies how the mask is applied to the image as one or a bitwise combination of the following decoration flags.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.IImageList2.ReplaceFromImageList(System.Int32,Vanara.PInvoke.ComCtl32.IImageList,System.Int32,System.Object,System.UInt32)">
            <summary>Replaces an image in one image list with an image from another image list.</summary>
            <param name="i">
            The index of the destination image in the image list. This is the image that is overwritten by the new image.
            </param>
            <param name="pil">A pointer to the source image list.</param>
            <param name="iSrc">The index of the source image in the image list pointed to by pil.</param>
            <param name="punk">A pointer to the IUnknown interface.</param>
            <param name="dwFlags">Not used; must be 0.</param>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.GetIconSize(Vanara.PInvoke.ComCtl32.IImageList)">
            <summary>Gets the dimensions of images in an image list. All images in an image list have the same dimensions.</summary>
            <param name="il">The <see cref="T:Vanara.PInvoke.ComCtl32.IImageList"/> instance.</param>
            <returns>The size of images.</returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.HIMAGELIST_QueryInterface(Vanara.PInvoke.HIMAGELIST,System.Guid@,System.Object@)">
            <summary>Get an image list interface from an image list handle.</summary>
            <param name="himl">
            <para>Type: <c>HIMAGELIST</c></para>
            <para>A handle to the image list to query.</para>
            </param>
            <param name="riid">
            <para>Type: <c>REFIID</c></para>
            <para>Reference to the desired interface ID.</para>
            </param>
            <param name="ppv">
            <para>Type: <c>void**</c></para>
            <para>
            When this method returns, contains the interface pointer requested in riid. This is normally <c>IImageList2</c>, which provides
            the <c>Initialize</c> method.
            </para>
            </param>
            <returns>
            <para>Type: <c><c>HRESULT</c></c></para>
            <para>If this function succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.HIMAGELIST_QueryInterface``1(Vanara.PInvoke.HIMAGELIST)">
            <summary>Get an image list interface from an image list handle.</summary>
            <param name="himl">
            <para>Type: <c>HIMAGELIST</c></para>
            <para>A handle to the image list to query.</para>
            </param>
            <returns>
            When this method returns, contains the interface pointer requested. This is normally <c>IImageList2</c>, which provides the
            <c>Initialize</c> method.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.IImageListToHIMAGELIST(Vanara.PInvoke.ComCtl32.IImageList)">
            <summary>Get an image list handle from an image list interface.</summary>
            <param name="himl">
            <para>Type: <c>HIMAGELIST</c></para>
            <para>An IImageList object.</para>
            </param>
            <returns>An image list handle.</returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.ImageList_CoCreateInstance(System.Guid@,System.Object,System.Guid@,System.Object@)">
            <summary>Creates a single instance of an imagelist and returns an interface pointer to it.</summary>
            <param name="rclsid">
            <para>Type: <c>REFCLSID</c></para>
            <para>A reference to the CLSID—a GUID that identifies the COM object to be created. This should be <c>CLSID_ImageList</c>.</para>
            </param>
            <param name="punkOuter">
            <para>Type: <c>const <c>IUnknown</c>*</c></para>
            <para>
            A pointer to the outer <c>IUnknown</c> interface that aggregates the object created by this function, or <c>NULL</c> if no
            aggregation is desired.
            </para>
            </param>
            <param name="riid">
            <para>Type: <c>REFIID</c></para>
            <para>Reference to the desired interface ID.</para>
            </param>
            <param name="ppv">
            <para>Type: <c>void**</c></para>
            <para>
            When this method returns, contains the interface pointer requested in riid. This is normally <c>IImageList2</c>, which provides
            the <c>Initialize</c> method.
            </para>
            </param>
            <returns>
            <para>Type: <c><c>HRESULT</c></c></para>
            <para>If this function succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.ImageList_Create(System.Int32,System.Int32,Vanara.PInvoke.ComCtl32.ILC,System.Int32,System.Int32)">
            <summary>Creates a new image list.</summary>
            <param name="cx">
            <para>Type: <c>int</c></para>
            <para>The width, in pixels, of each image.</para>
            </param>
            <param name="cy">
            <para>Type: <c>int</c></para>
            <para>The height, in pixels, of each image.</para>
            </param>
            <param name="flags">
            <para>Type: <c><c>UINT</c></c></para>
            <para>
            A set of bit flags that specify the type of image list to create. This parameter can be a combination of the <c>Image List
            Creation Flags</c>.
            </para>
            </param>
            <param name="cInitial">
            <para>Type: <c>int</c></para>
            <para>The number of images that the image list initially contains.</para>
            </param>
            <param name="cGrow">
            <para>Type: <c>int</c></para>
            <para>
            The number of images by which the image list can grow when the system needs to make room for new images. This parameter
            represents the number of new images that the resized image list can contain.
            </para>
            </param>
            <returns>
            <para>Type: <c>HIMAGELIST</c></para>
            <para>Returns the handle to the image list if successful, or <c>NULL</c> otherwise.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.ImageList_Destroy(Vanara.PInvoke.HIMAGELIST)">
            <summary>Destroys an image list.</summary>
            <param name="himl">
            <para>Type: <c>HIMAGELIST</c></para>
            <para>A handle to the image list to destroy.</para>
            </param>
            <returns>
            <para>Type: <c><c>BOOL</c></c></para>
            <para>Returns nonzero if successful, or zero otherwise.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.ImageList_Duplicate(Vanara.PInvoke.HIMAGELIST)">
            <summary>Creates a duplicate of an existing image list.</summary>
            <param name="himl">
            <para>Type: <c>HIMAGELIST</c></para>
            <para>
            A handle to the image list to be duplicated. All information contained in the original image list for normal images is copied to
            the new image list. Overlay images are not copied.
            </para>
            </param>
            <returns>
            <para>Type: <c>HIMAGELIST</c></para>
            <para>Returns the handle to the new duplicate image list if successful, or <c>NULL</c> otherwise.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.ImageList_GetIcon(Vanara.PInvoke.HIMAGELIST,System.Int32,Vanara.PInvoke.ComCtl32.IMAGELISTDRAWFLAGS)">
            <summary>Creates an icon from an image and mask in an image list.</summary>
            <param name="himl">
            <para>Type: <c>HIMAGELIST</c></para>
            <para>A handle to the image list.</para>
            </param>
            <param name="i">
            <para>Type: <c>int</c></para>
            <para>An index of the image.</para>
            </param>
            <param name="flags">
            <para>Type: <c><c>UINT</c></c></para>
            <para>
            A combination of flags that specify the drawing style. For a list of values, see the description of the fStyle parameter of the
            <c>ImageList_Draw</c> function.
            </para>
            </param>
            <returns>
            <para>Type: <c><c>HICON</c></c></para>
            <para>Returns the handle to the icon if successful, or <c>NULL</c> otherwise.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.ImageList_LoadImage(Vanara.PInvoke.HINSTANCE,System.String,System.Int32,System.Int32,Vanara.PInvoke.COLORREF,Vanara.PInvoke.User32.LoadImageType,Vanara.PInvoke.User32.LoadImageOptions)">
            <summary>Creates an image list from the specified bitmap.</summary>
            <param name="hi">
            <para>Type: <c><c>HINSTANCE</c></c></para>
            <para>
            A handle to the instance that contains the resource. This parameter can be <c>NULL</c> if you are loading an image from a file or
            loading an OEM resource.
            </para>
            </param>
            <param name="lpbmp">
            <para>Type: <c><c>LPCTSTR</c></c></para>
            <para>The image to load.</para>
            <para>
            If the uFlags parameter includes LR_LOADFROMFILE, lpbmp is the address of a null-terminated string that names the file containing
            the image to load.
            </para>
            <para>
            If the hi parameter is non- <c>NULL</c> and LR_LOADFROMFILE is not specified, lpbmp is the address of a null-terminated string
            that contains the name of the image resource in the hi module.
            </para>
            <para>
            If hi is <c>NULL</c> and LR_LOADFROMFILE is not specified, the <c>LOWORD</c> of this parameter must be the identifier of an OEM
            image to load. To create this value, use the <c>MAKEINTRESOURCE</c> macro with one of the OEM image identifiers defined in
            Winuser.h. These identifiers have the following prefixes.
            </para>
            <para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>OBM_ for OEM bitmaps</term>
            <term/>
            </item>
            <item>
            <term>OIC_ for OEM icons</term>
            <term/>
            </item>
            <item>
            <term>OCR_ for OEM cursors</term>
            <term/>
            </item>
            </list>
            </para>
            </param>
            <param name="cx">
            <para>Type: <c>int</c></para>
            <para>
            The width of each image. The height of each image and the initial number of images are inferred by the dimensions of the
            specified resource.
            </para>
            </param>
            <param name="cGrow">
            <para>Type: <c>int</c></para>
            <para>
            The number of images by which the image list can grow when the system needs to make room for new images. This parameter
            represents the number of new images that the resized image list can contain.
            </para>
            </param>
            <param name="crMask">
            <para>Type: <c><c>COLORREF</c></c></para>
            <para>
            The color used to generate a mask. Each pixel of this color in the specified bitmap, cursor, or icon is changed to black, and the
            corresponding bit in the mask is set to 1. If this parameter is the CLR_NONE value, no mask is generated. If this parameter is
            the CLR_DEFAULT value, the color of the pixel at the upper-left corner of the image is treated as the mask color.
            </para>
            </param>
            <param name="uType">
            <para>Type: <c><c>UINT</c></c></para>
            <para>
            A flag that specifies the type of image to load. This parameter must be IMAGE_BITMAP to indicate that a bitmap is being loaded.
            </para>
            <para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>IMAGE_BITMAP</term>
            <term>Loads a bitmap.</term>
            </item>
            </list>
            </para>
            </param>
            <param name="uFlags">
            <para>Type: <c><c>UINT</c></c></para>
            <para>Flags that specify how to load the image. This parameter can be a combination of the following values.</para>
            <para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>LR_CREATEDIBSECTION</term>
            <term>
            Causes the function to return a DIB section bitmap rather than a compatible bitmap when the uType parameter specifies
            IMAGE_BITMAP. LR_CREATEDIBSECTION is useful for loading a bitmap without mapping it to the colors of the display device.
            </term>
            </item>
            <item>
            <term>LR_DEFAULTCOLOR</term>
            <term>Uses the color format of the display.</term>
            </item>
            <item>
            <term>LR_DEFAULTSIZE</term>
            <term>
            Uses the width or height specified by the system metric values for cursors and icons if the cx parameter is set to zero. If this
            value is not specified and cx is set to zero, the function sets the size to the one specified in the resource. If the resource
            contains multiple images, the function sets the size to that of the first image.
            </term>
            </item>
            <item>
            <term>LR_LOADFROMFILE</term>
            <term>Loads the image from the file specified by the lpbmp parameter.</term>
            </item>
            <item>
            <term>LR_LOADMAP3DCOLORS</term>
            <term>
            Searches the color table for the image and replaces the following shades of gray with the corresponding three-dimensional color:
            Dk Gray: RGB(128, 128, 128)COLOR_3DSHADOW Gray: RGB(192, 192, 192)COLOR_3DFACE Lt Gray: RGB(223, 223, 223)COLOR_3DLIGHT For more
            information, see the Remarks section.
            </term>
            </item>
            <item>
            <term>LR_LOADTRANSPARENT</term>
            <term>
            Retrieves the color value of the first pixel in the image and replaces the corresponding entry in the color table with the
            default window color (the COLOR_WINDOW display color). All pixels in the image that use that color become the default window
            value color. This value applies only to images that have a corresponding color table. For more information, see the Remarks section.
            </term>
            </item>
            <item>
            <term>LR_MONOCHROME</term>
            <term>Loads the image in black and white.</term>
            </item>
            <item>
            <term>LR_SHARED</term>
            <term>
            Shares the image handle if the image is loaded multiple times. Do not use this value for images that have nontraditional sizes
            that might change after loading or for images that are loaded from a file.
            </term>
            </item>
            </list>
            </para>
            </param>
            <returns>
            <para>Type: <c>HIMAGELIST</c></para>
            <para>Returns the handle to the image list if successful, or <c>NULL</c> otherwise.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.ImageList_Read(System.Runtime.InteropServices.ComTypes.IStream)">
            <summary>Reads an image list from a stream.</summary>
            <param name="pstm">
            <para>Type: <c>LPSTREAM</c></para>
            <para>A pointer to the stream.</para>
            </param>
            <returns>
            <para>Type: <c>HIMAGELIST</c></para>
            <para>Returns the handle to the image list if successful, or <c>NULL</c> otherwise.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.ImageList_ReadEx(Vanara.PInvoke.ComCtl32.ILP,System.Runtime.InteropServices.ComTypes.IStream,System.Guid@,System.Object@)">
            <summary>Reads an image list from a stream, and returns an <c>IImageList</c> interface to the image list.</summary>
            <param name="dwFlags">
            <para>Type: <c><c>DWORD</c></c></para>
            <para>A flag that specifies how the stream is read.</para>
            <para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>ILP_NORMAL</term>
            <term>Expects an image list that was written with the ILP_NORMAL flag specified.</term>
            </item>
            <item>
            <term>ILP_DOWNLEVEL</term>
            <term>Expects an image list that was written with the ILP_DOWNLEVEL flag specified.</term>
            </item>
            </list>
            </para>
            </param>
            <param name="pstm">
            <para>Type: <c>LPSTREAM</c></para>
            <para>The address of the stream.</para>
            </param>
            <param name="riid">
            <para>Type: <c>REFIID</c></para>
            <para>An IID for the image list.</para>
            </param>
            <param name="ppv">
            <para>Type: <c>void**</c></para>
            <para>The address of a pointer to the interface for the image list if successful, <c>NULL</c> otherwise.</para>
            </param>
            <returns>
            <para>Type: <c><c>HRESULT</c></c></para>
            <para>If this function succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.ImageList_Write(Vanara.PInvoke.HIMAGELIST,System.Runtime.InteropServices.ComTypes.IStream)">
            <summary>Writes an image list to a stream.</summary>
            <param name="himl">
            <para>Type: <c>HIMAGELIST</c></para>
            <para>A handle to the image list.</para>
            </param>
            <param name="pstm">
            <para>Type: <c>LPSTREAM</c></para>
            <para>A pointer to the stream.</para>
            </param>
            <returns>
            <para>Type: <c><c>BOOL</c></c></para>
            <para>Returns nonzero if successful, or zero otherwise.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.ImageList_WriteEx(Vanara.PInvoke.HIMAGELIST,Vanara.PInvoke.ComCtl32.ILP,System.Runtime.InteropServices.ComTypes.IStream)">
            <summary>Writes an image list to a stream.</summary>
            <param name="himl">
            <para>Type: <c>HIMAGELIST</c></para>
            <para>A handle to the image list.</para>
            </param>
            <param name="dwFlags">
            <para>Type: <c><c>DWORD</c></c></para>
            <para>A flag that specifies how the stream is written.</para>
            <para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>ILP_NORMAL</term>
            <term>
            Writes to the stream using the file format for Common Controls 6.0, which includes information about image list attributes new to
            this version.
            </term>
            </item>
            <item>
            <term>ILP_DOWNLEVEL</term>
            <term>
            Writes to the stream using a file format previous to version 6.0. Specify this flag if you need to save image lists loaded under
            Common Controls versions earlier than version 6.0.
            </term>
            </item>
            </list>
            </para>
            </param>
            <param name="pstm">
            <para>Type: <c>LPSTREAM</c></para>
            <para>The address of the stream.</para>
            </param>
            <returns>
            <para>Type: <c><c>HRESULT</c></c></para>
            <para>If this function succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.INDEXTOOVERLAYMASK(System.Int32)">
            <summary>Prepares the index of an overlay mask so that the <c>ImageList_Draw</c> function can use it.</summary>
            <param name="iOverlay">
            <para>Type: <c><c>UINT</c></c></para>
            <para>An index of an overlay mask.</para>
            </param>
            <returns>No return value.</returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.SetIconSize(Vanara.PInvoke.ComCtl32.IImageList,Vanara.PInvoke.SIZE)">
            <summary>Sets the dimensions of images in an image list and removes all images from the list.</summary>
            <param name="il">The <see cref="T:Vanara.PInvoke.ComCtl32.IImageList"/> instance.</param>
            <param name="size">
            A value that contains the width and height, in pixels, of the images in the image list. All images in an image list have the same dimensions.
            </param>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.IMAGEINFO">
            <summary>Contains information about an image in an image list. This structure is used with the IImageList::GetImageInfo function.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.IMAGEINFO.hbmImage">
            <summary>A handle to the bitmap that contains the images.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.IMAGEINFO.hbmMask">
            <summary>
            A handle to a monochrome bitmap that contains the masks for the images. If the image list does not contain a mask, this
            member is NULL.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.IMAGEINFO.Unused1">
            <summary>Not used. This member should always be zero.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.IMAGEINFO.Unused2">
            <summary>Not used. This member should always be zero.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.IMAGEINFO.rcImage">
            <summary>The bounding rectangle of the specified image within the bitmap specified by hbmImage.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.IMAGELISTSTATS">
            <summary>Contains image list statistics. Used by <c>GetStatistics</c>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.IMAGELISTSTATS.cbSize">
            <summary>
            <para>Type: <c><c>DWORD</c></c></para>
            <para>The image list size.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.IMAGELISTSTATS.cAlloc">
            <summary>
            <para>Type: <c>int</c></para>
            <para>The number of images allocated.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.IMAGELISTSTATS.cUsed">
            <summary>
            <para>Type: <c>int</c></para>
            <para>The number of images in use.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.IMAGELISTSTATS.cStandby">
            <summary>
            <para>Type: <c>int</c></para>
            <para>The number of standby images.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.CImageList">
            <summary>Image list class.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.IMAGELISTDRAWPARAMS">
            <summary>Contains information about an image list draw operation and is used with the <c>IImageList::Draw</c> function.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.IMAGELISTDRAWPARAMS.cbSize">
            <summary>The size of this structure, in bytes.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.IMAGELISTDRAWPARAMS.himl">
            <summary>A handle to the image list that contains the image to be drawn.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.IMAGELISTDRAWPARAMS.i">
            <summary>The zero-based index of the image to be drawn.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.IMAGELISTDRAWPARAMS.hdcDst">
            <summary>A handle to the destination device context.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.IMAGELISTDRAWPARAMS.x">
            <summary>The x-coordinate that specifies where the image is drawn.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.IMAGELISTDRAWPARAMS.y">
            <summary>The y-coordinate that specifies where the image is drawn.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.IMAGELISTDRAWPARAMS.cx">
            <summary>
            A value that specifies the number of pixels to draw, relative to the upper-left corner of the drawing operation as specified
            by xBitmap and yBitmap. If cx and cy are zero, then Draw draws the entire valid section. The method does not ensure that the
            parameters are valid.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.IMAGELISTDRAWPARAMS.cy">
            <summary>
            A value that specifies the number of pixels to draw, relative to the upper-left corner of the drawing operation as specified
            by xBitmap and yBitmap. If cx and cy are zero, then Draw draws the entire valid section. The method does not ensure that the
            parameters are valid.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.IMAGELISTDRAWPARAMS.xBitmap">
            <summary>
            The x-coordinate that specifies the upper-left corner of the drawing operation in reference to the image itself. Pixels of
            the image that are to the left of xBitmap and above yBitmap do not appear.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.IMAGELISTDRAWPARAMS.yBitmap">
            <summary>
            The y-coordinate that specifies the upper-left corner of the drawing operation in reference to the image itself. Pixels of
            the image that are to the left of xBitmap and above yBitmap do not appear.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.IMAGELISTDRAWPARAMS.rgbBk">
            <summary>
            The image background color. This parameter can be an application-defined RGB value or <see cref="F:Vanara.PInvoke.ComCtl32.CLR_DEFAULT"/> or <see cref="F:Vanara.PInvoke.ComCtl32.CLR_NONE"/>.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.IMAGELISTDRAWPARAMS.rgbFg">
            <summary>
            The image foreground color. This member is used only if fStyle includes the ILD_BLEND25 or ILD_BLEND50 flag. This parameter
            can be an application-defined RGB value or <see cref="F:Vanara.PInvoke.ComCtl32.CLR_DEFAULT"/> or <see cref="F:Vanara.PInvoke.ComCtl32.CLR_NONE"/>.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.IMAGELISTDRAWPARAMS.fStyle">
            <summary>
            A flag specifying the drawing style and, optionally, the overlay image. See the comments section at the end of this topic for
            information on the overlay image. This member can contain one or more image list drawing flags.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.IMAGELISTDRAWPARAMS.dwRop">
            <summary>
            A value specifying a raster operation code. These codes define how the color data for the source rectangle will be combined
            with the color data for the destination rectangle to achieve the final color. This member is ignored if fStyle does not
            include the ILD_ROP flag.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.IMAGELISTDRAWPARAMS.fState">
            <summary>
            A flag that specifies the drawing state. This member can contain one or more image list state flags. You must use
            comctl32.dll version 6 to use this member.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.IMAGELISTDRAWPARAMS.Frame">
            <summary>
            Used with the alpha blending effect.
            <para>
            When used with ILS_ALPHA, this member holds the value for the alpha channel. This value can be from 0 to 255, with 0 being
            completely transparent, and 255 being completely opaque.
            </para>
            <para>You must use comctl32.dll version 6 to use this member. See the Remarks.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.IMAGELISTDRAWPARAMS.crEffect">
            <summary>
            A color used for the glow and shadow effects. You must use comctl32.dll version 6 to use this member. See the Remarks.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.IMAGELISTDRAWPARAMS.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.ComCtl32.IMAGELISTDRAWPARAMS"/> class.</summary>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.IMAGELISTDRAWPARAMS.#ctor(Vanara.PInvoke.HDC,Vanara.PInvoke.RECT,System.Int32,Vanara.PInvoke.COLORREF,Vanara.PInvoke.ComCtl32.IMAGELISTDRAWFLAGS)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.ComCtl32.IMAGELISTDRAWPARAMS"/> class.</summary>
            <param name="hdcDst">A handle to the destination device context.</param>
            <param name="bounds">The bounds that specifiy where the image is drawn.</param>
            <param name="index">The zero-based index of the image to be drawn.</param>
            <param name="bgColor">The image background color.</param>
            <param name="style">A flag specifying the drawing style and, optionally, the overlay image.</param>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.SafeHIMAGELIST">
            <summary>
            Safe image list handle. Be aware that if this is instantiated with ownership of the handle, it will be destroyed on disposal.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.SafeHIMAGELIST.#ctor(System.IntPtr,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.HIMAGELIST"/> class and assigns an existing handle.</summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
            <param name="ownsHandle">
            <see langword="true"/> to reliably release the handle during the finalization phase; otherwise, <see langword="false"/> (not recommended).
            </param>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.SafeHIMAGELIST.FromIImageList(Vanara.PInvoke.ComCtl32.IImageList)">
            <summary>Gets a safe HIMAGELIST handle from an <see cref="T:Vanara.PInvoke.ComCtl32.IImageList"/> instance.</summary>
            <param name="iil">An IImageList object.</param>
            <returns>A safe HIMAGELIST handle.</returns>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.SafeHIMAGELIST.Interface">
            <summary>Gets the IImageList interface for this handle.</summary>
            <value>The interface.</value>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.SafeHIMAGELIST.op_Implicit(Vanara.PInvoke.ComCtl32.SafeHIMAGELIST)~Vanara.PInvoke.HIMAGELIST">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.ComCtl32.SafeHIMAGELIST"/> to <see cref="T:Vanara.PInvoke.HIMAGELIST"/>.</summary>
            <param name="h">The safe handle instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.SafeHIMAGELIST.InternalReleaseHandle">
            <inheritdoc/>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.WC_IPADDRESS">
            <summary>
            Creates IP address controls. These controls are similar to an edit control, but they enable you to enter a numeric address in
            Internet protocol (IP) format.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.IPAddressMessage">
            <summary>IP Address Messages</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.IPAddressMessage.IPM_CLEARADDRESS">
            <summary>Clears the contents of the IP address control.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>The return value is not used.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.IPAddressMessage.IPM_SETADDRESS">
            <summary>Sets the address values for all four fields in the IP address control.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>
            A <c>DWORD</c> value that contains the new address. The field 3 value is contained in bits 0 through 7. The field 2 value is
            contained in bits 8 through 15. The field 1 value is contained in bits 16 through 23. The field 0 value is contained in bits
            24 through 31. The <c>MAKEIPADDRESS</c> macro can also be used to create the address information.
            </para>
            <para><strong>Returns</strong></para>
            <para>The return value is not used.</para>
            </summary>
            <remarks>This message does not generate an <c>IPN_FIELDCHANGED</c> notification.</remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.IPAddressMessage.IPM_GETADDRESS">
            <summary>Gets the address values for all four fields in the IP address control.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>
            A pointer to a <c>DWORD</c> value that receives the address. The field 3 value will be contained in bits 0 through 7. The
            field 2 value will be contained in bits 8 through 15. The field 1 value will be contained in bits 16 through 23. The field 0
            value will be contained in bits 24 through 31. The <c>FIRST_IPADDRESS</c>, <c>SECOND_IPADDRESS</c>, <c>THIRD_IPADDRESS</c>,
            and <c>FOURTH_IPADDRESS</c> macros can also be used to extract the address information. Zero will be returned as the address
            for any blank fields.
            </para>
            <para><strong>Returns</strong></para>
            <para>Returns the number of nonblank fields.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.IPAddressMessage.IPM_SETRANGE">
            <summary>Sets the valid range for the specified field in the IP address control.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>A zero-based field index to which the range will be applied.</para>
            <para><em>lParam</em></para>
            <para>
            A <c>WORD</c> value that contains the lower limit of the range in the low-order byte and the upper limit in the high-order
            byte. Both of these values are inclusive. The <c>MAKEIPRANGE</c> macro can also be used to create the range.
            </para>
            <para><strong>Returns</strong></para>
            <para>Returns nonzero if successful, or zero otherwise.</para>
            </summary>
            <remarks>
            If the user enters a value in the field that is outside of this range, the control will send the IPN_FIELDCHANGED
            notification with the entered value. If the value is still outside of the range after sending the notification, the control
            will attempt to change the entered value to the closest range limit.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.IPAddressMessage.IPM_SETFOCUS">
            <summary>
            Sets the keyboard focus to the specified field in the IP address control. All of the text in that field will be selected.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>
            A zero-based field index to which the focus should be set. If this value is greater than the number of fields, focus is set
            to the first blank field. If all fields are nonblank, focus is set to the first field.
            </para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>The return value is not used.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.IPAddressMessage.IPM_ISBLANK">
            <summary>Determines if all fields in the IP address control are blank.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns nonzero if all fields are blank, or zero otherwise.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.IPAddressNotification">
            <summary>IP Address Notifications</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.IPAddressNotification.IPN_FIELDCHANGED">
            <summary>
            <para>Sent when the user changes a field in the control or moves from one field to another. This notification code is sent in the form of a <c>WM_NOTIFY</c> message.</para>
            <para><code>IPN_FIELDCHANGED lpnmipa = (LPNMIPADDRESS) lParam; </code></para>
            <para>
            <strong>Parameters</strong>
            </para>
            <para><em>lParam</em></para>
            <para>A pointer to an <c>NMIPADDRESS</c> structure that contains information about the changed address. The <c>iValue</c> member of this structure will contain the entered value, even if it is out of the range of the field. You can modify this member to any value that is within the range for the field in response to this notification code.</para>
            <para>
            <strong>Returns</strong>
            </para>
            <para>The return value is ignored.</para></summary>
            <remarks>This notification code is not sent in response to a <c>IPM_SETADDRESS</c> message.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.GET_IPADDRESS(System.UInt32)">
            <summary>Gets the IP address represented as a byte array from an unsigned pointer.</summary>
            <param name="ipAddress">The IP address.</param>
            <returns>The IP address represented as a byte array.</returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.MAKEIPADDRESS(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>Packs four byte-values into a single LPARAM suitable for use with the IPM_SETADDRESS message.</summary>
            <param name="b0">The field 0 address.</param>
            <param name="b1">The field 1 address.</param>
            <param name="b2">The field 2 address.</param>
            <param name="b3">The field 3 address.</param>
            <returns>Returns an LPARAM value that contains the address.</returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.MAKEIPADDRESS(System.Byte[])">
            <summary>Packs four byte-values into a single LPARAM suitable for use with the IPM_SETADDRESS message.</summary>
            <param name="bytes">The bytes ordered 0-3.</param>
            <returns>Returns an LPARAM value that contains the address.</returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.MAKEIPRANGE(System.Byte,System.Byte)">
            <summary>Packs two byte-values into a single LPARAM suitable for use with the IPM_SETRANGE message.</summary>
            <param name="low">The lower limit of the range.</param>
            <param name="high">The upper limit of the range.</param>
            <returns>Returns an LPARAM value that contains the range.</returns>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.NMIPADDRESS">
            <summary>Contains information for the IPN_FIELDCHANGED notification code.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMIPADDRESS.hdr">
            <summary>An <see cref="T:Vanara.PInvoke.User32.NMHDR"/> structure that contains additional information about the notification.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMIPADDRESS.iField">
            <summary>The zero-based number of the field that was changed.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMIPADDRESS.iValue">
            <summary>
            The new value of the field specified in the iField member. While processing the IPN_FIELDCHANGED notification, this member
            can be set to any value that is within the range of the field and the control will place this new value in the field.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.DrawInsert(Vanara.PInvoke.HWND,Vanara.PInvoke.HWND,System.Int32)">
            <summary>Draws the insert icon in the parent window of the specified drag list box.</summary>
            <param name="handParent">
            <para>Type: <c><c>HWND</c></c></para>
            <para>A handle to the parent window of the drag list box.</para>
            </param>
            <param name="hLB">
            <para>Type: <c><c>HWND</c></c></para>
            <para>A handle to the drag list box.</para>
            </param>
            <param name="nItem">
            <para>Type: <c>int</c></para>
            <para>The identifier of the icon item to be drawn.</para>
            </param>
            <returns>No return value.</returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.LBItemFromPt(Vanara.PInvoke.HWND,Vanara.PInvoke.POINT,System.Boolean)">
            <summary>Retrieves the index of the item at the specified point in a list box.</summary>
            <param name="hLB">
            <para>Type: <c><c>HWND</c></c></para>
            <para>A handle to the list box to check.</para>
            </param>
            <param name="pt">
            <para>Type: <c><c>POINT</c></c></para>
            <para>A <c>POINT</c> structure that contains the screen coordinates to check.</para>
            </param>
            <param name="bAutoScroll">
            <para>Type: <c><c>BOOL</c></c></para>
            <para>
            A scroll flag. If this parameter is <c>TRUE</c> and the point is directly above or below the list box, the function scrolls the
            list box by one line and returns -1. Otherwise, the function does not scroll the list box.
            </para>
            </param>
            <returns>
            <para>Type: <c>int</c></para>
            <para>Returns the item identifier if the point is over a list item, or -1 otherwise.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.MakeDragList(Vanara.PInvoke.HWND)">
            <summary>Changes the specified single-selection list box to a drag list box.</summary>
            <param name="hLB">
            <para>Type: <c><c>HWND</c></c></para>
            <para>A handle to the single-selection list box.</para>
            </param>
            <returns>
            <para>Type: <c><c>BOOL</c></c></para>
            <para>Returns nonzero if successful, or zero otherwise.</para>
            </returns>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.I_COLUMNSCALLBACK">
            <summary>
            Specifies that the size of the column array and the array itself (puColumns) are obtained by sending a LVN_GETDISPINFO notification.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.I_GROUPIDCALLBACK">
            <summary>The listview control sends the parent an LVN_GETDISPINFO notification code to retrieve the index of the group.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.I_GROUPIDNONE">
            <summary>The item does not belong to a group.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.ListViewArrange">
            <summary>Values that specify alignment for LVM_ARRANGE.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewArrange.LVA_DEFAULT">
            <summary>Aligns items according to the list-view control's current alignment styles (the default value).</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewArrange.LVA_ALIGNLEFT">
            <summary>Not implemented. Apply the LVS_ALIGNLEFT style instead.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewArrange.LVA_ALIGNTOP">
            <summary>Not implemented. Apply the LVS_ALIGNTOP style instead.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewArrange.LVA_SNAPTOGRID">
            <summary>Snaps all icons to the nearest grid position.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.ListViewBkImageFlag">
            <summary>Flags for the <see cref="F:Vanara.PInvoke.ComCtl32.LVBKIMAGE.ulFlags"/> member.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewBkImageFlag.LVBKIF_SOURCE_NONE">
            <summary>The list-view control has no background image.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewBkImageFlag.LVBKIF_SOURCE_HBITMAP">
            <summary>
            A background bitmap is supplied via the hbm member of LVBKIMAGE. If the message LVM_SETBKIMAGE succeeds, then the list-view
            takes ownership of the bitmap.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewBkImageFlag.LVBKIF_SOURCE_URL">
            <summary>The pszImage member contains the URL of the background image.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewBkImageFlag.LVBKIF_SOURCE_MASK">
            <summary>You can use the LVBKIF_SOURCE_MASK value to mask off all but the source flags.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewBkImageFlag.LVBKIF_STYLE_NORMAL">
            <summary>The background image is displayed normally.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewBkImageFlag.LVBKIF_STYLE_TILE">
            <summary>The background image will be tiled to fill the entire background of the control.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewBkImageFlag.LVBKIF_STYLE_MASK">
            <summary>You can use the LVBKIF_STYLE_MASK value to mask off all but the style flags.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewBkImageFlag.LVBKIF_FLAG_TILEOFFSET">
            <summary>
            Specify the coordinates of the first tile. This flag is valid only if the LVBKIF_STYLE_TILE flag is also specified. If this
            flag is not specified, the first tile begins at the upper-left corner of the client area. If you use ComCtl32.dll Version
            6.0 the xOffsetPercent and yOffsetPercent fields contain pixels, not percentage values, to specify the coordinates of the
            first tile. Comctl32.dll version 6 is not redistributable but it is included in Windows or later. Also, you must specify
            Comctl32.dll version 6 in a manifest. For more information on manifests, see Enabling Visual Styles.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewBkImageFlag.LVBKIF_TYPE_WATERMARK">
            <summary>
            A watermark background bitmap is supplied via the hbm member of LVBKIMAGE. If the LVM_SETBKIMAGE message succeeds, then the
            list-view control takes ownership of the bitmap.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewBkImageFlag.LVBKIF_FLAG_ALPHABLEND">
            <summary>
            Valid only when LVBKIF_TYPE_WATERMARK is also specified. This flag indicates the bitmap provided via LVBKIF_TYPE_WATERMARK
            contains a valid alpha channel.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.ListViewColumMask">
            <summary>Mask flags used by <see cref="F:Vanara.PInvoke.ComCtl32.LVCOLUMN.mask"/>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewColumMask.LVCF_FMT">
            <summary>The fmt member is valid.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewColumMask.LVCF_WIDTH">
            <summary>The cx member is valid.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewColumMask.LVCF_TEXT">
            <summary>The pszText member is valid.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewColumMask.LVCF_SUBITEM">
            <summary>The iSubItem member is valid.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewColumMask.LVCF_IMAGE">
            <summary>Version 4.70. The iImage member is valid.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewColumMask.LVCF_ORDER">
            <summary>Version 4.70. The iOrder member is valid</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewColumMask.LVCF_MINWIDTH">
            <summary>Version 6.00 and Windows Vista.The cxMin member is valid.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewColumMask.LVCF_DEFAULTWIDTH">
            <summary>Version 6.00 and Windows Vista.The cxDefault member is valid.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewColumMask.LVCF_IDEALWIDTH">
            <summary>Version 6.00 and Windows Vista.The cxIdeal member is valid</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.ListViewColumnFormat">
            <summary>
            Alignment of the column header and the subitem text in the column. The alignment of the leftmost column is always LVCFMT_LEFT;
            it cannot be changed. This member can be a combination of the following values. Note that not all combinations are valid.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewColumnFormat.LVCFMT_LEFT">
            <summary>Text is left-aligned.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewColumnFormat.LVCFMT_RIGHT">
            <summary>Text is right-aligned.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewColumnFormat.LVCFMT_CENTER">
            <summary>Text is centered.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewColumnFormat.LVCFMT_JUSTIFYMASK">
            <summary>
            A bitmask used to select those bits of fmt that control field justification. To check the format of a column, use a logical
            "and" to combine LCFMT_JUSTIFYMASK with fmt. You can then use a switch statement to determine whether the LVCFMT_LEFT,
            LVCFMT_RIGHT, or LVCFMT_CENTER bits are set.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewColumnFormat.LVCFMT_IMAGE">
            <summary>Version 4.70. The item displays an image from an image list.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewColumnFormat.LVCFMT_BITMAP_ON_RIGHT">
            <summary>
            Version 4.70. The bitmap appears to the right of text. This does not affect an image from an image list assigned to the
            header item.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewColumnFormat.LVCFMT_COL_HAS_IMAGES">
            <summary>Version 4.70. The header item contains an image in the image list.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewColumnFormat.LVCFMT_FIXED_WIDTH">
            <summary>Version 6.00 and Windows Vista. Can't resize the column; same as HDF_FIXEDWIDTH.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewColumnFormat.LVCFMT_NO_DPI_SCALE">
            <summary>Version 6.00 and Windows Vista. If not set, CCM_DPISCALE will govern scaling up fixed width.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewColumnFormat.LVCFMT_FIXED_RATIO">
            <summary>Version 6.00 and Windows Vista. Width will augment with the row height.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewColumnFormat.LVCFMT_LINE_BREAK">
            <summary>Forces the column to wrap to the top of the next list of columns.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewColumnFormat.LVCFMT_FILL">
            <summary>Fills the remainder of the tile area. Might have a title.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewColumnFormat.LVCFMT_WRAP">
            <summary>Allows the column to wrap within the remaining space in its list of columns.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewColumnFormat.LVCFMT_NO_TITLE">
            <summary>Removes the title from the subitem.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewColumnFormat.LVCFMT_TILE_PLACEMENTMASK">
            <summary>Equivalent to a combination of LVCFMT_LINE_BREAK and LVCFMT_FILL.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewColumnFormat.LVCFMT_SPLITBUTTON">
            <summary>
            Version 6.00 and Windows Vista. Column is a split button (same as HDF_SPLITBUTTON). The header of the column displays a
            split button (same as HDF_SPLITBUTTON).
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.ListViewFindInfoFlag">
            <summary>Flags used in the <see cref="F:Vanara.PInvoke.ComCtl32.LVFINDINFO.flags"/> member.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewFindInfoFlag.LVFI_PARAM">
            <summary>Searches for a match between this structure's lParam member and the lParam member of an item's LVITEM structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewFindInfoFlag.LVFI_STRING">
            <summary>
            Searches based on the item text. Unless additional values are specified, the item text of the matching item must exactly
            match the string pointed to by the psz member. However, the search is case-insensitive.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewFindInfoFlag.LVFI_SUBSTRING">
            <summary>Windows Vista and later. Equivalent to LVFI_PARTIAL.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewFindInfoFlag.LVFI_PARTIAL">
            <summary>
            Checks to see if the item text begins with the string pointed to by the psz member. This value implies use of LVFI_STRING.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewFindInfoFlag.LVFI_WRAP">
            <summary>
            Continues the search at the beginning if no match is found. If this flag is used by itself, it is assumed that a string
            search is wanted.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewFindInfoFlag.LVFI_NEARESTXY">
            <summary>
            Finds the item nearest to the position specified in the pt member, in the direction specified by the vkDirection member.
            This flag is supported only by large icon and small icon modes. If LVFI_NEARESTXY is specified, all other flags are ignored.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.ListViewGroupAlignment">
            <summary>
            Indicates the alignment of the header or footer text for the group. It can have one or more of the following values. Use one of
            the header flags. Footer flags are optional.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewGroupAlignment.LVGA_HEADER_LEFT">
            <summary>Header text is aligned at the left of the window.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewGroupAlignment.LVGA_HEADER_CENTER">
            <summary>Header text is centered horizontally in the window.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewGroupAlignment.LVGA_HEADER_RIGHT">
            <summary>Header text is aligned at the right of the window.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewGroupAlignment.LVGA_FOOTER_LEFT">
            <summary>Footer text is aligned at the left of the window.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewGroupAlignment.LVGA_FOOTER_CENTER">
            <summary>Footer text is centered horizontally in the window.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewGroupAlignment.LVGA_FOOTER_RIGHT">
            <summary>Footer text is aligned at the right of the window.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.ListViewGroupMask">
            <summary>Used to set and retrieve groups.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewGroupMask.LVGF_NONE">
            <summary>No other items are valid.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewGroupMask.LVGF_HEADER">
            <summary>pszHeader and cchHeader members are valid.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewGroupMask.LVGF_FOOTER">
            <summary>pszFooter and cchFooter members are valid.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewGroupMask.LVGF_STATE">
            <summary>state and stateMask members are valid.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewGroupMask.LVGF_ALIGN">
            <summary>uAlign member is valid.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewGroupMask.LVGF_GROUPID">
            <summary>iGroupId member is valid.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewGroupMask.LVGF_SUBTITLE">
            <summary>Version 6.00 and later. The pszSubtitle member is valid.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewGroupMask.LVGF_TASK">
            <summary>Version 6.00 and later. The pszTask member is valid.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewGroupMask.LVGF_DESCRIPTIONTOP">
            <summary>Version 6.00 and later. The pszDescriptionTop member is valid.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewGroupMask.LVGF_DESCRIPTIONBOTTOM">
            <summary>Version 6.00 and later. The pszDescriptionBottom member is valid.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewGroupMask.LVGF_TITLEIMAGE">
            <summary>Version 6.00 and later. The iTitleImage member is valid.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewGroupMask.LVGF_EXTENDEDIMAGE">
            <summary>Version 6.00 and later. The iExtendedImage member is valid.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewGroupMask.LVGF_ITEMS">
            <summary>Version 6.00 and later. The cItems member is valid.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewGroupMask.LVGF_SUBSET">
            <summary>Version 6.00 and later. The pszSubsetTitle member is valid.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewGroupMask.LVGF_SUBSETITEMS">
            <summary>Version 6.00 and later. The cchSubsetTitle member is valid.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.ListViewGroupMetricsMask">
            <summary>Flags that specify which members contain or are to receive valid data.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewGroupMetricsMask.LVGMF_NONE">
            <summary>No members are valid.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewGroupMetricsMask.LVGMF_BORDERSIZE">
            <summary>The Left, Top, Right, and Bottom members are valid.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewGroupMetricsMask.LVGMF_BORDERCOLOR">
            <summary>Not implemented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewGroupMetricsMask.LVGMF_TEXTCOLOR">
            <summary>Not implemented.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.ListViewGroupRect">
            <summary>Value used in LVM_GETGROUPRECT lparam value to specify coordinates of the rectangle to get.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewGroupRect.LVGGR_GROUP">
            <summary>Coordinates of the entire expanded group.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewGroupRect.LVGGR_HEADER">
            <summary>Coordinates of the header only (collapsed group).</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewGroupRect.LVGGR_LABEL">
            <summary>Coordinates of the label only.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewGroupRect.LVGGR_SUBSETLINK">
            <summary>
            Coordinates of the subset link only (markup subset). A list-view control can limit the number of visible items displayed in
            each group. A link is presented to the user to allow the user to expand the group. This flag will return the bounding
            rectangle of the subset link if the group is a subset (group state of LVGS_SUBSETED, see structure LVGROUP, member state).
            This flag is provided so that accessibility applications can located the link.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.ListViewGroupState">
            <summary></summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewGroupState.LVGS_NORMAL">
            <summary>Groups are expanded, the group name is displayed, and all items in the group are displayed.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewGroupState.LVGS_COLLAPSED">
            <summary>The group is collapsed.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewGroupState.LVGS_HIDDEN">
            <summary>The group is hidden.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewGroupState.LVGS_NOHEADER">
            <summary>Version 6.00 and later. The group does not display a header.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewGroupState.LVGS_COLLAPSIBLE">
            <summary>Version 6.00 and later. The group can be collapsed.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewGroupState.LVGS_FOCUSED">
            <summary>Version 6.00 and later. The group has keyboard focus.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewGroupState.LVGS_SELECTED">
            <summary>Version 6.00 and later. The group is selected.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewGroupState.LVGS_SUBSETED">
            <summary>Version 6.00 and later. The group displays only a portion of its items.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewGroupState.LVGS_SUBSETLINKFOCUSED">
            <summary>Version 6.00 and later. The subset link of the group has keyboard focus.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.ListViewHitTestFlag">
            <summary>The results of a hit test. This member can be one or more of the following values:</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewHitTestFlag.LVHT_NOWHERE">
            <summary>The position is inside the list-view control's client window, but it is not over a list item.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewHitTestFlag.LVHT_ONITEMICON">
            <summary>The position is over a list-view item's icon.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewHitTestFlag.LVHT_ONITEMLABEL">
            <summary>The position is over a list-view item's text.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewHitTestFlag.LVHT_ONITEMSTATEICON">
            <summary>The position is over the state image of a list-view item.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewHitTestFlag.LVHT_ONITEM">
            <summary>The position is over a list-view item.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewHitTestFlag.LVHT_ABOVE">
            <summary>The position is above the control's client area.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewHitTestFlag.LVHT_BELOW">
            <summary>The position is below the control's client area.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewHitTestFlag.LVHT_TORIGHT">
            <summary>The position is to the right of the list-view control's client area.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewHitTestFlag.LVHT_TOLEFT">
            <summary>The position is to the left of the list-view control's client area.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewHitTestFlag.LVHT_EX_GROUP_HEADER">
            <summary>Windows Vista. The point is within the group header.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewHitTestFlag.LVHT_EX_GROUP_FOOTER">
            <summary>Windows Vista. The point is within the group footer.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewHitTestFlag.LVHT_EX_GROUP_COLLAPSE">
            <summary>Windows Vista. The point is within the collapse/expand button of the group.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewHitTestFlag.LVHT_EX_GROUP_BACKGROUND">
            <summary>Windows Vista. The point is within the area of the group where items are displayed.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewHitTestFlag.LVHT_EX_GROUP_STATEICON">
            <summary>Windows Vista. The point is within the state icon of the group.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewHitTestFlag.LVHT_EX_GROUP_SUBSETLINK">
            <summary>Windows Vista. The point is within the subset link of the group.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewHitTestFlag.LVHT_EX_GROUP">
            <summary>
            Windows Vista. LVHT_EX_GROUP_BACKGROUND | LVHT_EX_GROUP_COLLAPSE | LVHT_EX_GROUP_FOOTER | LVHT_EX_GROUP_HEADER |
            LVHT_EX_GROUP_STATEICON | LVHT_EX_GROUP_SUBSETLINK.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewHitTestFlag.LVHT_EX_ONCONTENTS">
            <summary>Windows Vista. The point is within the icon or text content of the item and not on the background.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewHitTestFlag.LVHT_EX_FOOTER">
            <summary>Windows Vista. The point is within the footer of the list-view control.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.ListViewImageList">
            <summary>Type of image list.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewImageList.LVSIL_NORMAL">
            <summary>Image list with large icons.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewImageList.LVSIL_SMALL">
            <summary>Image list with small icons.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewImageList.LVSIL_STATE">
            <summary>Image list with state images.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewImageList.LVSIL_GROUPHEADER">
            <summary>Image list for group header.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.ListViewInsertMarkFlag">
            <summary>Flag that specifies where the insertion point should appear.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewInsertMarkFlag.LVIM_BEFORE">
            <summary>The insertion point appears before the item</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewInsertMarkFlag.LVIM_AFTER">
            <summary>The insertion point appears after the item</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.ListViewItemMask">
            <summary>
            Set of flags that specify which members of the <see cref="T:Vanara.PInvoke.ComCtl32.LVITEM"/> structure contain data to be set or which members are being
            requested. This member can have one or more of the following flags set:
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewItemMask.LVIF_TEXT">
            <summary>The pszText member is valid or must be set.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewItemMask.LVIF_IMAGE">
            <summary>The iImage member is valid or must be set.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewItemMask.LVIF_PARAM">
            <summary>The lParam member is valid or must be set.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewItemMask.LVIF_STATE">
            <summary>The state member is valid or must be set.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewItemMask.LVIF_INDENT">
            <summary>The iIndent member is valid or must be set.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewItemMask.LVIF_NORECOMPUTE">
            <summary>
            The control will not generate LVN_GETDISPINFO to retrieve text information if it receives an LVM_GETITEM message. Instead,
            the pszText member will contain LPSTR_TEXTCALLBACK.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewItemMask.LVIF_GROUPID">
            <summary>
            The iGroupId member is valid or must be set. If this flag is not set when an LVM_INSERTITEM message is sent, the value of
            iGroupId is assumed to be I_GROUPIDCALLBACK.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewItemMask.LVIF_COLUMNS">
            <summary>The cColumns member is valid or must be set.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewItemMask.LVIF_COLFMT">
            <summary>
            Windows Vista and later. The piColFmt member is valid or must be set. If this flag is used, the cColumns member is valid or
            must be set.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewItemMask.LVIF_DISETITEM">
            <summary>
            The operating system should store the requested list item information and not ask for it again. This flag is used only with
            the LVN_GETDISPINFO notification code.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewItemMask.LVIF_ALL">
            <summary>Complete mask.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.ListViewItemRect">
            <summary>Used by LVM_GETITEMINDEXRECT.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewItemRect.LVIR_BOUNDS">
            <summary>Returns the bounding rectangle of the entire subitem, including the icon and label.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewItemRect.LVIR_ICON">
            <summary>Returns the bounding rectangle of the icon or small icon of the subitem.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewItemRect.LVIR_LABEL">
            <summary>Returns the bounding rectangle of the subitem text.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewItemRect.LVIR_SELECTBOUNDS">
            <summary>Returns the union of the LVIR_ICON and LVIR_LABEL rectangles, but excludes columns in report view.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.ListViewItemState">
            <summary>
            An item's state value consists of the item's state, an optional overlay mask index, and an optional state image mask index. An
            item's state determines its appearance and functionality. The state can be zero or one or more of the following values:
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewItemState.LVIS_NONE">
            <summary>No flags set.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewItemState.LVIS_FOCUSED">
            <summary>
            The item has the focus, so it is surrounded by a standard focus rectangle. Although more than one item may be selected, only
            one item can have the focus.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewItemState.LVIS_SELECTED">
            <summary>
            The item is selected. The appearance of a selected item depends on whether it has the focus and also on the system colors
            used for selection.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewItemState.LVIS_CUT">
            <summary>The item is marked for a cut-and-paste operation.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewItemState.LVIS_DROPHILITED">
            <summary>The item is highlighted as a drag-and-drop target.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewItemState.LVIS_GLOW">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewItemState.LVIS_OVERLAYMASK">
            <summary>The item's overlay image index is retrieved by a mask.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewItemState.LVIS_STATEIMAGEMASK">
            <summary>The item's state image index is retrieved by a mask.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewItemState.LVIS_ALL">
            <summary>All flags.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.ListViewMessage">
            <summary>LVM_ Messages for SendMessage</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_SETUNICODEFORMAT">
            <summary>
            Sets the UNICODE character format flag for the control. This message allows you to change the character set used by the
            control at run time rather than having to re-create the control. You can send this message explicitly or use the
            <c>ListView_SetUnicodeFormat</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>
            Determines the character set that is used by the control. If this value is nonzero, the control will use Unicode characters.
            If this value is zero, the control will use ANSI characters.
            </para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the previous Unicode format flag for the control.</para>
            </summary>
            <remarks>See the remarks for <c>CCM_SETUNICODEFORMAT</c> for a discussion of this message.</remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_GETUNICODEFORMAT">
            <summary>
            Retrieves the UNICODE character format flag for the control. You can send this message explicitly or use the
            <c>ListView_GetUnicodeFormat</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>
            Returns the Unicode format flag for the control. If this value is nonzero, the control is using Unicode characters. If this
            value is zero, the control is using ANSI characters.
            </para>
            </summary>
            <remarks>See the remarks for <c>CCM_GETUNICODEFORMAT</c> for a discussion of this message.</remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_GETBKCOLOR">
            <summary>
            Gets the background color of a list-view control. You can send this message explicitly or by using the
            <c>ListView_GetBkColor</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the background color of the list-view control.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_SETBKCOLOR">
            <summary>
            Sets the background color of a list-view control. You can send this message explicitly or by using the
            <c>ListView_SetBkColor</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>
            Background color to set or the CLR_NONE value for no background color. List-view controls with background colors redraw
            themselves significantly faster than those without background colors.
            </para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> if successful, or <c>FALSE</c> otherwise.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_GETIMAGELIST">
            <summary>
            Retrieves the handle to an image list used for drawing list-view items. You can send this message explicitly or by using the
            <c>ListView_GetImageList</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Image list to retrieve. This parameter can be one of the following values:</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term><c>LVSIL_NORMAL</c></term>
            <term>Image list with large icons.</term>
            </item>
            <item>
            <term><c>LVSIL_SMALL</c></term>
            <term>Image list with small icons.</term>
            </item>
            <item>
            <term><c>LVSIL_STATE</c></term>
            <term>Image list with state images.</term>
            </item>
            <item>
            <term><c>LVSIL_GROUPHEADER</c></term>
            <term>Image list for group header.</term>
            </item>
            </list>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the handle to the specified image list if successful, or <c>NULL</c> otherwise.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_SETIMAGELIST">
            <summary>
            Assigns an image list to a list-view control. You can send this message explicitly or by using the
            <c>ListView_SetImageList</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Type of image list. This parameter can be one of the following values:</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term><c>LVSIL_NORMAL</c></term>
            <term>Image list with large icons.</term>
            </item>
            <item>
            <term><c>LVSIL_SMALL</c></term>
            <term>Image list with small icons.</term>
            </item>
            <item>
            <term><c>LVSIL_STATE</c></term>
            <term>Image list with state images.</term>
            </item>
            <item>
            <term><c>LVSIL_GROUPHEADER</c></term>
            <term>Image list for group header.</term>
            </item>
            </list>
            <para><em>lParam</em></para>
            <para>Handle to the image list to assign.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the handle to the image list previously associated with the control if successful, or <c>NULL</c> otherwise.</para>
            </summary>
            <remarks>
            The current image list will be destroyed when the list-view control is destroyed unless the <c>LVS_SHAREIMAGELISTS</c> style
            is set. If you use this message to replace one image list with another, your application must explicitly destroy all image
            lists other than the current one.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_GETITEMCOUNT">
            <summary>
            Retrieves the number of items in a list-view control. You can send this message explicitly or by using the
            <c>ListView_GetItemCount</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the number of items.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_GETITEM">
            <summary>
            Retrieves some or all of a list-view item's attributes. You can send this message explicitly or by using the
            <c>ListView_GetItem</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>
            Pointer to an <c>LVITEM</c> structure that specifies the information to retrieve and receives information about the list-view item.
            </para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> if successful, or <c>FALSE</c> otherwise.</para>
            </summary>
            <remarks>
            <para>
            When the <c>LVM_GETITEM</c> message is sent, the <c>iItem</c> and <c>iSubItem</c> members identify the item or subitem to
            retrieve information about and the <c>mask</c> member specifies which attributes to retrieve. For a list of possible values,
            see the description of the <c>LVITEM</c> structure.
            </para>
            <para>
            If the LVIF_TEXT flag is set in the <c>mask</c> member of the <c>LVITEM</c> structure, the <c>pszText</c> member must point
            to a valid buffer and the <c>cchTextMax</c> member must be set to the number of characters in that buffer. Applications
            should not assume that the text will necessarily be placed in the specified buffer. The control may instead change the
            <c>pszText</c> member of the structure to point to the new text, rather than place it in the buffer.
            </para>
            <para>
            If the <c>mask</c> member specifies the LVIF_STATE value, the <c>stateMask</c> member must specify the item state bits to
            retrieve. On output, the <c>state</c> member contains the values of the specified state bits.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_SETITEM">
            <summary>
            Sets some or all of a list-view item's attributes. You can also send LVM_SETITEM to set the text of a subitem. You can send
            this message explicitly or by using the <c>ListView_SetItem</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>
            Pointer to an <c>LVITEM</c> structure that contains the new item attributes. The <c>iItem</c> and <c>iSubItem</c> members
            identify the item or subitem, and the <c>mask</c> member specifies which attributes to set. If the <c>mask</c> member
            specifies the LVIF_TEXT value, the <c>pszText</c> member is the address of a null-terminated string and the <c>cchTextMax</c>
            member is ignored. If the <c>mask</c> member specifies the LVIF_STATE value, the <c>stateMask</c> member specifies which item
            states to change and the <c>state</c> member contains the values for those states.
            </para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> if successful, or <c>FALSE</c> otherwise.</para>
            </summary>
            <remarks>
            <para>
            To set the attributes of a list-view item, set the <c>iItem</c> member of the <c>LVITEM</c> structure to the index of the
            item, and set the <c>iSubItem</c> member to zero. For an item, you can set the <c>state</c>, <c>pszText</c>, <c>iImage</c>,
            and <c>lParam</c> members of the <c>LVITEM</c> structure.
            </para>
            <para>
            To set the text of a subitem, set the <c>iItem</c> and <c>iSubItem</c> members to indicate the specific subitem, and use the
            <c>pszText</c> member to specify the text. Alternatively, you can use the <c>ListView_SetItemText</c> macro to set the text
            of a subitem. You cannot set the <c>state</c> or <c>lParam</c> members for subitems because subitems do not have these
            attributes. In version 4.70 and later, you can set the <c>iImage</c> member for subitems. The subitem image will be displayed
            if the list-view control has the <c>LVS_EX_SUBITEMIMAGES</c> extended style. Previous versions will ignore the subitem image.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_INSERTITEM">
            <summary>
            Inserts a new item in a list-view control. You can send this message explicitly or by using the <c>ListView_InsertItem</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>
            Pointer to an <c>LVITEM</c> structure that specifies the attributes of the list-view item. Use the <c>iItem</c> member to
            specify the zero-based index at which the new item should be inserted. If this value is greater than the number of items
            currently contained by the listview, the new item will be appended to the end of the list and assigned the correct index.
            Examine the message's return value to determine the actual index assigned to the item.
            </para>
            <para><strong>Returns</strong></para>
            <para>Returns the index of the new item if successful, or -1 otherwise.</para>
            </summary>
            <remarks>
            <para>
            You cannot use <c>ListView_InsertItem</c> or <c>LVM_INSERTITEM</c> to insert subitems. The <c>iSubItem</c> member of the
            <c>LVITEM</c> structure must be zero. See <c>LVM_SETITEM</c> for information on setting subitems.
            </para>
            <para>
            If a list-view control has the <c>LVS_EX_CHECKBOXES</c> style set, any value placed in bits 12 through 15 of the <c>state</c>
            member of the <c>LVITEM</c> structure will be ignored. When an item is added with this style set, it will always be set to
            the unchecked state.
            </para>
            <para>
            If a list-view control has either the <c>LVS_SORTASCENDING</c> or <c>LVS_SORTDESCENDING</c> window style, an
            <c>LVM_INSERTITEM</c> message will fail if you try to insert an item that has LPSTR_TEXTCALLBACK as the value for its
            <c>pszText</c> member.
            </para>
            <para>
            The <c>LVM_INSERTITEM</c> message will insert the new item in the proper position in the sort order if the following
            conditions hold:
            </para>
            <list type="bullet">
            <item>
            <term>You are using one of the LVS_SORTXXX styles.</term>
            </item>
            <item>
            <term>You are not using the <c>LVS_OWNERDRAW</c> style.</term>
            </item>
            <item>
            <term>The <c>pszText</c> member of the structure pointed to by <c>pitem</c> is not set to LPSTR_TEXTCALLBACK.</term>
            </item>
            </list>
            <para>
            If the <c>LVITEM</c> structure does not contain LVIF_GROUPID in the <c>mask</c> member, the value of the <c>iGroupId</c>
            member is I_GROUPIDCALLBACK by default.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_DELETEITEM">
            <summary>
            Removes an item from a list-view control. You can send this message explicitly or by using the <c>ListView_DeleteItem</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>The index of the list-view item to delete.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> if successful, or <c>FALSE</c> otherwise.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_DELETEALLITEMS">
            <summary>
            Removes all items from a list-view control. You can send this message explicitly or by using the
            <c>ListView_DeleteAllItems</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> if successful, or <c>FALSE</c> otherwise.</para>
            </summary>
            <remarks>
            When a list-view control receives the <c>LVM_DELETEALLITEMS</c> message, it sends the <c>LVN_DELETEALLITEMS</c> notification
            code to its parent window.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_GETCALLBACKMASK">
            <summary>
            Gets the callback mask for a list-view control. You can send this message explicitly or by using the
            <c>ListView_GetCallbackMask</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the callback mask.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_SETCALLBACKMASK">
            <summary>
            Changes the callback mask for a list-view control. You can send this message explicitly or by using the
            <c>ListView_SetCallbackMask</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>
            Value of the callback mask. The bits of the mask indicate the item states or images for which the application stores the
            current state data. This value can be any combination of the following constants:
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term><c>LVIS_CUT</c></term>
            <term>The item is marked for a cut-and-paste operation.</term>
            </item>
            <item>
            <term><c>LVIS_DROPHILITED</c></term>
            <term>The item is highlighted as a drag-and-drop target.</term>
            </item>
            <item>
            <term><c>LVIS_FOCUSED</c></term>
            <term>The item has the focus.</term>
            </item>
            <item>
            <term><c>LVIS_SELECTED</c></term>
            <term>The item is selected.</term>
            </item>
            <item>
            <term><c>LVIS_OVERLAYMASK</c></term>
            <term>The application stores the image list index of the current overlay image for each item.</term>
            </item>
            <item>
            <term><c>LVIS_STATEIMAGEMASK</c></term>
            <term>The application stores the image list index of the current state image for each item.</term>
            </item>
            </list>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> if successful, or <c>FALSE</c> otherwise.</para>
            </summary>
            <remarks>
            <para>
            The callback mask of a list-view control is a set of bit flags that specify the item states for which the application, rather
            than the control, stores the current data. The callback mask applies to all of the control's items, unlike the callback item
            designation, which applies to a specific item. The callback mask is zero by default, meaning that the list-view control
            stores all item state information. After creating a list-view control and initializing its items, you can send the
            <c>LVM_SETCALLBACKMASK</c> message to change the callback mask. To retrieve the current callback mask, send the
            <c>LVM_GETCALLBACKMASK</c> message.
            </para>
            <para>For more information about overlay images and state images, see Adding List-View Image Lists.</para>
            <para>For more information on list-view callbacks, see Callback Items and the Callback Mask.</para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_GETNEXTITEM">
            <summary>
            Searches for a list-view item that has the specified properties and bears the specified relationship to a specified item. You
            can send this message explicitly or by using the <c>ListView_GetNextItem</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>
            Index of the item to begin the search with, or -1 to find the first item that matches the specified flags. The specified item
            itself is excluded from the search.
            </para>
            <para><em>lParam</em></para>
            <para>Specifies the relationship to the item specified in wParam. This can be one or a combination of the following values:</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>Searches by index.</term>
            <term/>
            </item>
            <item>
            <term><c>LVNI_ALL</c></term>
            <term>Searches for a subsequent item by index, the default value.</term>
            </item>
            <item>
            <term><c>LVNI_PREVIOUS</c></term>
            <term>
            <c>Windows Vista and later:</c> Searches for an item that is ordered before the item specified in <c>wParam</c>. The
            LVNI_PREVIOUS flag is not directional (LVNI_ABOVE will find the item positioned above, while LVNI_PREVIOUS will find the item
            ordered before.) The LVNI_PREVIOUS flag basically reverses the logic of the search performed by the <c>LVM_GETNEXTITEM</c> or
            <c>LVM_GETNEXTITEMINDEX</c> messages.
            </term>
            </item>
            <item>
            <term>Searches by physical relationship to the index of the item where the search is to begin.</term>
            <term/>
            </item>
            <item>
            <term><c>LVNI_ABOVE</c></term>
            <term>Searches for an item that is above the specified item.</term>
            </item>
            <item>
            <term><c>LVNI_BELOW</c></term>
            <term>Searches for an item that is below the specified item.</term>
            </item>
            <item>
            <term><c>LVNI_TOLEFT</c></term>
            <term>Searches for an item to the left of the specified item.</term>
            </item>
            <item>
            <term><c>LVNI_TORIGHT</c></term>
            <term>Searches for an item to the right of the specified item.</term>
            </item>
            <item>
            <term><c>LVNI_DIRECTIONMASK</c></term>
            <term>
            <c>Windows Vista and later:</c> A directional flag mask with value as follows: LVNI_ABOVE | LVNI_BELOW | LVNI_TOLEFT | LVNI_TORIGHT.
            </term>
            </item>
            <item>
            <term>The state of the item to find can be specified with one or a combination of the following values:</term>
            <term/>
            </item>
            <item>
            <term><c>LVNI_CUT</c></term>
            <term>The item has the <c>LVIS_CUT</c> state flag set.</term>
            </item>
            <item>
            <term><c>LVNI_DROPHILITED</c></term>
            <term>The item has the <c>LVIS_DROPHILITED</c> state flag set</term>
            </item>
            <item>
            <term><c>LVNI_FOCUSED</c></term>
            <term>The item has the <c>LVIS_FOCUSED</c> state flag set.</term>
            </item>
            <item>
            <term><c>LVNI_SELECTED</c></term>
            <term>The item has the <c>LVIS_SELECTED</c> state flag set.</term>
            </item>
            <item>
            <term><c>LVNI_STATEMASK</c></term>
            <term>
            <c>Windows Vista and later:</c> A state flag mask with value as follows: LVNI_FOCUSED | LVNI_SELECTED | LVNI_CUT | LVNI_DROPHILITED.
            </term>
            </item>
            <item>
            <term>Searches by appearance of items or by group</term>
            <term/>
            </item>
            <item>
            <term><c>LVNI_VISIBLEORDER</c></term>
            <term><c>Windows Vista and later:</c> Search the visible order.</term>
            </item>
            <item>
            <term><c>LVNI_VISIBLEONLY</c></term>
            <term><c>Windows Vista and later:</c> Search the visible items.</term>
            </item>
            <item>
            <term><c>LVNI_SAMEGROUPONLY</c></term>
            <term><c>Windows Vista and later:</c> Search the current group.</term>
            </item>
            <item>
            <term>If an item does not have all of the specified state flags set, the search continues with the next item.</term>
            <term/>
            </item>
            </list>
            <para><strong>Returns</strong></para>
            <para>Returns the index of the next item if successful, or -1 otherwise.</para>
            </summary>
            <remarks>
            Note that the following flags, for use only with Windows Vista, are mutually exclusive of any other flags in use:
            LVNI_VISIBLEONLY, LVNI_SAMEGROUPONLY, LVNI_VISIBLEORDER, LVNI_DIRECTIONMASK, and LVNI_STATEMASK.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_FINDITEM">
            <summary>
            Searches for a list-view item with the specified characteristics. You can send this message explicitly or by using the
            <c>ListView_FindItem</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>
            The index of the item to begin the search with or -1 to start from the beginning. The specified item is itself excluded from
            the search.
            </para>
            <para><em>lParam</em></para>
            <para>A pointer to an <c>LVFINDINFO</c> structure that contains information about what to search for.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the index of the item if successful, or -1 otherwise.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_GETITEMRECT">
            <summary>
            Retrieves the bounding rectangle for all or part of an item in the current view. You can send this message explicitly or by
            using the <c>ListView_GetItemRect</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Index of the list-view item.</para>
            <para><em>lParam</em></para>
            <para>
            Pointer to a <c>RECT</c> structure that receives the bounding rectangle. When the message is sent, the <c>left</c> member of
            this structure is used to specify the portion of the list-view item from which to retrieve the bounding rectangle. It must be
            set to one of the following values:
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term><c>LVIR_BOUNDS</c></term>
            <term>Returns the bounding rectangle of the entire item, including the icon and label.</term>
            </item>
            <item>
            <term><c>LVIR_ICON</c></term>
            <term>Returns the bounding rectangle of the icon or small icon.</term>
            </item>
            <item>
            <term><c>LVIR_LABEL</c></term>
            <term>Returns the bounding rectangle of the item text.</term>
            </item>
            <item>
            <term><c>LVIR_SELECTBOUNDS</c></term>
            <term>Returns the union of the LVIR_ICON and LVIR_LABEL rectangles, but excludes columns in report view.</term>
            </item>
            </list>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> if successful, or <c>FALSE</c> otherwise.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_SETITEMPOSITION">
            <summary>
            Moves an item to a specified position in a list-view control (must be in icon or small icon view). You can send this message
            explicitly or by using the <c>ListView_SetItemPosition</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Index of the list-view item.</para>
            <para><em>lParam</em></para>
            <para>
            The <c>LOWORD</c> specifies the new x-position of the item's upper-left corner, in view coordinates. The <c>HIWORD</c>
            specifies the new y-position of the item's upper-left corner, in view coordinates.
            </para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> if successful, or <c>FALSE</c> otherwise.</para>
            </summary>
            <remarks>
            <para>
            If the list-view control has the <c>LVS_AUTOARRANGE</c> style, the items in the list-view control are arranged after the
            position of the item is set.
            </para>
            <para>
            On Windows Vista, sending this message to a list-view control with the <c>LVS_AUTOARRANGE</c> style does nothing, and the
            return value is <c>FALSE</c>.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_GETITEMPOSITION">
            <summary>
            Retrieves the position of a list-view item. You can send this message explicitly or by using the
            <c>ListView_GetItemPosition</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Index of the list-view item.</para>
            <para><em>lParam</em></para>
            <para>Pointer to a <c>POINT</c> structure that receives the position of the item's upper-left corner, in view coordinates.</para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> if successful, or <c>FALSE</c> otherwise.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_GETSTRINGWIDTH">
            <summary>
            Determines the width of a specified string using the specified list-view control's current font. You can send this message
            explicitly or by using the <c>ListView_GetStringWidth</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Pointer to a null-terminated string.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the string width if successful, or zero otherwise.</para>
            </summary>
            <remarks>
            The LVM_GETSTRINGWIDTH message returns the exact width, in pixels, of the specified string. If you use the returned string
            width as the column width in the <c>LVM_SETCOLUMNWIDTH</c> message, the string will be truncated. To retrieve the column
            width that can contain the string without truncating it, you must add padding to the returned string width.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_HITTEST">
            <summary>
            Determines which list-view item, if any, is at a specified position. You can send this message explicitly or by using the
            <c>ListView_HitTest</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>
            Must be 0. **Windows Vista.** Should be -1 if the **iGroup** and **iSubItem** members of the *lParam* structure are to be retrieved.
            </para>
            <para><em>lParam</em></para>
            <para>
            Pointer to an <c>LVHITTESTINFO</c> structure that contains the position to hit test and receives information about the
            results of the hit test.
            </para>
            <para><strong>Returns</strong></para>
            <para>Returns the index of the item at the specified position, if any, or -1 otherwise.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_ENSUREVISIBLE">
            <summary>
            Ensures that a list-view item is either entirely or partially visible, scrolling the list-view control if necessary. You can
            send this message explicitly or by using the <c>ListView_EnsureVisible</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>The index of the list-view item.</para>
            <para><em>lParam</em></para>
            <para>
            A value specifying whether the item must be entirely visible. If this parameter is <c>TRUE</c>, no scrolling occurs if the
            item is at least partially visible.
            </para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> if successful, or <c>FALSE</c> otherwise.</para>
            </summary>
            <remarks>The message fails if the window style includes <c>LVS_NOSCROLL</c>.</remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_SCROLL">
            <summary>
            Scrolls the content of a list-view control. You can send this message explicitly or by using the <c>ListView_Scroll</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>
            Value of type <c>int</c> that specifies the amount of horizontal scrolling, in pixels, relative to the current position of
            the list view content. If the list-view control is in list view, this value is rounded up to the nearest number of pixels
            that form a whole column.
            </para>
            <para><em>lParam</em></para>
            <para>
            Value of type <c>int</c> that specifies the amount of vertical scrolling, in pixels, relative to the current position of the
            list view content.
            </para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> if successful; otherwise, <c>FALSE</c>.</para>
            </summary>
            <remarks>
            When the list-view control is in report view, the control can only be scrolled vertically in whole line increments.
            Therefore, the lParam parameter will be rounded to the nearest number of pixels that form a whole line increment. For
            example, if the height of a line is 16 pixels and 8 is passed for lParam, the list will be scrolled by 16 pixels (1 line). If
            7 is passed for lParam, the list will be scrolled 0 pixels (0 lines).
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_REDRAWITEMS">
            <summary>
            Forces a list-view control to redraw a range of items. You can send this message explicitly or by using the
            <c>ListView_RedrawItems</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Index of the first item to redraw.</para>
            <para><em>lParam</em></para>
            <para>Index of the last item to redraw.</para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> if successful, or <c>FALSE</c> otherwise.</para>
            </summary>
            <remarks>
            The specified items are not actually redrawn until the list-view window receives a <c>WM_PAINT</c> message to repaint. To
            repaint immediately, call the <c>UpdateWindow</c> function after using this macro.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_ARRANGE">
            <summary>
            Arranges items in icon view. You can send this message explicitly or by using the <c>ListView_Arrange</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>One of the following values that specifies alignment:</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term><c>LVA_ALIGNLEFT</c></term>
            <term>Not implemented. Apply the <c>LVS_ALIGNLEFT</c> style instead.</term>
            </item>
            <item>
            <term><c>LVA_ALIGNTOP</c></term>
            <term>Not implemented. Apply the <c>LVS_ALIGNTOP</c> style instead.</term>
            </item>
            <item>
            <term><c>LVA_DEFAULT</c></term>
            <term>Aligns items according to the list-view control's current alignment styles (the default value).</term>
            </item>
            <item>
            <term><c>LVA_SNAPTOGRID</c></term>
            <term>Snaps all icons to the nearest grid position.</term>
            </item>
            </list>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> if successful; otherwise, <c>FALSE</c>.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_EDITLABEL">
            <summary>
            Begins in-place editing of the specified list-view item's text. The message implicitly selects and focuses the specified
            item. You can send this message explicitly or by using the <c>ListView_EditLabel</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>The index of the list-view item. To cancel editing, set the index to -1.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the handle to the edit control that is used to edit the item text if successful, or <c>NULL</c> otherwise.</para>
            </summary>
            <remarks>
            <para>
            When the user completes or cancels editing, the edit control is destroyed and the handle is no longer valid. You can subclass
            the edit control, but you should not destroy it.
            </para>
            <para>
            The control must have the focus before you send this message to the control. Focus can be set using the <c>SetFocus</c> function.
            </para>
            <para>If wParam is -1, an LVN_ENDLABELEDIT notification code is sent.</para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_GETEDITCONTROL">
            <summary>
            Gets the handle to the edit control being used to edit a list-view item's text. You can send this message explicitly or by
            using the <c>ListView_GetEditControl</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the handle to the edit control if successful, or <c>NULL</c> otherwise.</para>
            </summary>
            <remarks>
            <para>
            When label editing begins, an edit control is created, positioned, and initialized. Before it is displayed, the list-view
            control sends its parent window an LVN_BEGINLABELEDIT notification code.
            </para>
            <para>
            To customize label editing, implement a handler for LVN_BEGINLABELEDIT and have it send an <c>LVM_GETEDITCONTROL</c> message
            to the list-view control. If a label is being edited, the return value will be a handle to the edit control. Use this handle
            to customize the edit control by sending the usual <c>EM_XXX</c> messages.
            </para>
            <para>
            When the user completes or cancels editing, the edit control is destroyed and the handle is no longer valid. You can subclass
            the edit control, but you should not destroy it. To cancel editing, send the list-view control a <c>WM_CANCELMODE</c> message.
            </para>
            <para>
            The list-view item being edited is the currently focused item that is, the item in the focused state. To find an item based
            on its state, use the <c>LVM_GETNEXTITEM</c> message.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_GETCOLUMN">
            <summary>
            Gets the attributes of a list-view control's column. You can send this message explicitly or by using the
            <c>ListView_GetColumn</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>The index of the column.</para>
            <para><em>lParam</em></para>
            <para>
            A pointer to an <c>LVCOLUMN</c> structure that specifies the information to retrieve and receives information about the
            column. The <c>mask</c> member specifies which column attributes to retrieve. If the <c>mask</c> member specifies the
            LVCF_TEXT value, the <c>pszText</c> member must contain the address of the buffer that receives the item text and the
            <c>cchTextMax</c> member must specify the size of the buffer.
            </para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> if successful, or <c>FALSE</c> otherwise.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_SETCOLUMN">
            <summary>
            Sets the attributes of a list-view column. You can send this message explicitly or by using the <c>ListView_SetColumn</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Index of the column.</para>
            <para><em>lParam</em></para>
            <para>
            Pointer to an <c>LVCOLUMN</c> structure that contains the new column attributes. The <c>mask</c> member specifies which
            column attributes to set. If the <c>mask</c> member specifies the LVCF_TEXT value, the <c>pszText</c> member is the address
            of a null-terminated string and the <c>cchTextMax</c> member is ignored.
            </para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> if successful, or <c>FALSE</c> otherwise.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_INSERTCOLUMN">
            <summary>
            Inserts a new column in a list-view control. You can send this message explicitly or by using the
            <c>ListView_InsertColumn</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Index of the new column.</para>
            <para><em>lParam</em></para>
            <para>Pointer to an <c>LVCOLUMN</c> structure that contains the attributes of the new column.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the index of the new column if successful, or -1 otherwise.</para>
            </summary>
            <remarks>Columns are visible only in report (details) view.</remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_DELETECOLUMN">
            <summary>
            Removes a column from a list-view control. You can send this message explicitly or by using the <c>ListView_DeleteColumn</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>The index of the column to delete.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> if successful, or <c>FALSE</c> otherwise.</para>
            </summary>
            <remarks>
            Deleting column zero of a list-view control is supported only in ComCtl32.dll version 6 and later. Version 5 also supports
            deleting column zero, but only after you use <c>CCM_SETVERSION</c> to set the version to 5 or later. In versions prior to
            version 5, if you must delete column zero, insert a zero length dummy column zero and delete column one and above.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_GETCOLUMNWIDTH">
            <summary>
            Gets the width of a column in report or list view. You can send this message explicitly or by using the
            <c>ListView_GetColumnWidth</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>The index of the column. This parameter is ignored in list view.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>
            Returns the column width if successful, or zero otherwise. If this message is sent to a list-view control with the
            <c>LVS_REPORT</c> style and the specified column does not exist, the return value is undefined.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_SETCOLUMNWIDTH">
            <summary>
            Changes the width of a column in report-view mode or the width of all columns in list-view mode. You can send this message
            explicitly or use the <c>ListView_SetColumnWidth</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Zero-based index of a valid column. For list-view mode, this parameter must be set to zero.</para>
            <para><em>lParam</em></para>
            <para>New width of the column, in pixels. For report-view mode, the following special values are supported:</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term><c>LVSCW_AUTOSIZE</c></term>
            <term>Automatically sizes the column.</term>
            </item>
            <item>
            <term><c>LVSCW_AUTOSIZE_USEHEADER</c></term>
            <term>
            Automatically sizes the column to fit the header text. If you use this value with the last column, its width is set to fill
            the remaining width of the list-view control.
            </term>
            </item>
            </list>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> if successful, or <c>FALSE</c> otherwise.</para>
            </summary>
            <remarks>
            Assume that you have a 2-column list-view control with a width of 500 pixels. If the width of column zero is set to 200
            pixels, and you send this message with wParam = 1 and lParam = LVSCW_AUTOSIZE_USEHEADER, the second (and last) column will be
            300 pixels wide.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_GETHEADER">
            <summary>
            Gets the handle to the header control used by the list-view control. You can send this message explicitly or use the
            <c>ListView_GetHeader</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the handle to the header control.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_CREATEDRAGIMAGE">
            <summary>
            Creates a drag image list for the specified item. You can send this message explicitly or by using the
            <c>ListView_CreateDragImage</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>The index of the item.</para>
            <para><em>lParam</em></para>
            <para>
            A pointer to a <c>POINT</c> structure that receives the initial location of the upper-left corner of the image, in view coordinates.
            </para>
            <para><strong>Returns</strong></para>
            <para>Returns the handle to the drag image list if successful, or <c>NULL</c> otherwise.</para>
            </summary>
            <remarks>Your application is responsible for destroying the image list when it is no longer needed.</remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_GETVIEWRECT">
            <summary>
            Retrieves the bounding rectangle of all items in the list-view control. The list view must be in icon or small icon view. You
            can send this message explicitly or by using the <c>ListView_GetViewRect</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>
            Pointer to a <c>RECT</c> structure that receives the bounding rectangle. All coordinates are relative to the visible area of
            the list-view control.
            </para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> if successful, or <c>FALSE</c> otherwise.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_GETTEXTCOLOR">
            <summary>
            Retrieves the text color of a list-view control. You can send this message explicitly or by using the
            <c>ListView_GetTextColor</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the text color.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_SETTEXTCOLOR">
            <summary>
            Sets the text color of a list-view control. You can send this message explicitly or by using the <c>ListView_SetTextColor</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>A <c>COLORREF</c> that specifies the new text color.</para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> if successful, or <c>FALSE</c> otherwise.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_GETTEXTBKCOLOR">
            <summary>
            Retrieves the text background color of a list-view control. You can send this message explicitly or by using the
            <c>ListView_GetTextBkColor</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the background color of the text.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_SETTEXTBKCOLOR">
            <summary>
            Sets the background color of text in a list-view control. You can send this message explicitly or by using the
            <c>ListView_SetTextBkColor</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>New text background color. This can be CLR_NONE for no background color.</para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> if successful, or <c>FALSE</c> otherwise.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_GETTOPINDEX">
            <summary>
            Retrieves the index of the topmost visible item when in list or report view. You can send this message explicitly or by using
            the <c>ListView_GetTopIndex</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>
            Returns the index of the item if successful. Returns zero if the list-view control is in icon or small icon view, or if the
            list-view control is in details view with groups enabled.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_GETCOUNTPERPAGE">
            <summary>
            Calculates the number of items that can fit vertically in the visible area of a list-view control when in list or report
            view. Only fully visible items are counted. You can send this message explicitly or by using the
            <c>ListView_GetCountPerPage</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>
            Returns the number of fully visible items if successful. If the current view is icon or small icon view, the return value is
            the total number of items in the list-view control.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_GETORIGIN">
            <summary>
            Retrieves the current view origin for a list-view control. You can send this message explicitly or by using the
            <c>ListView_GetOrigin</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Pointer to a <c>POINT</c> structure that receives the view origin.</para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> if successful, or <c>FALSE</c> if the current view is list or report view.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_UPDATE">
            <summary>
            Updates a list-view item. If the list-view control has the <c>LVS_AUTOARRANGE</c> style, this macro causes the list-view
            control to be arranged. You can send this message explicitly or by using the <c>ListView_Update</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Index of the item to update.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> if successful, or <c>FALSE</c> otherwise.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_SETITEMSTATE">
            <summary>
            Changes the state of an item in a list-view control. You can send this message explicitly or by using the
            <c>ListView_SetItemState</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Index of the list-view item. If this parameter is -1, then the state change is applied to all items.</para>
            <para><em>lParam</em></para>
            <para>
            Pointer to an <c>LVITEM</c> structure. The <c>stateMask</c> member specifies which state bits to change, and the <c>state</c>
            member contains the new values for those bits. The other members are ignored.
            </para>
            <para><strong>Returns</strong></para>
            <para>If you send this message explicitly, it returns <c>TRUE</c> if successful or <c>FALSE</c> otherwise.</para>
            </summary>
            <remarks>
            An item's state value includes a set of bit flags that indicate the item's state. The state value can also include image list
            indexes that indicate the item's state image and overlay image.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_GETITEMSTATE">
            <summary>
            Retrieves the state of a list-view item. You can send this message explicitly or by using the <c>ListView_GetItemState</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Index of the list-view item.</para>
            <para><em>lParam</em></para>
            <para>State information to retrieve. This parameter can be a combination of the following values:</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term><c>LVIS_CUT</c></term>
            <term>The item is marked for a cut-and-paste operation.</term>
            </item>
            <item>
            <term><c>LVIS_DROPHILITED</c></term>
            <term>The item is highlighted as a drag-and-drop target.</term>
            </item>
            <item>
            <term><c>LVIS_FOCUSED</c></term>
            <term>
            The item has the focus, so it is surrounded by a standard focus rectangle. Although more than one item may be selected, only
            one item can have the focus.
            </term>
            </item>
            <item>
            <term><c>LVIS_SELECTED</c></term>
            <term>
            The item is selected. The appearance of a selected item depends on whether it has the focus and also on the system colors
            used for selection.
            </term>
            </item>
            <item>
            <term><c>LVIS_OVERLAYMASK</c></term>
            <term>Use this mask to retrieve the item's overlay image index.</term>
            </item>
            <item>
            <term><c>LVIS_STATEIMAGEMASK</c></term>
            <term>Use this mask to retrieve the item's state image index.</term>
            </item>
            </list>
            <para><strong>Returns</strong></para>
            <para>
            Returns the current state for the specified item. The only valid bits in the return value are those that correspond to the
            bits set in the lParam parameter.
            </para>
            </summary>
            <remarks>
            An item's state information includes a set of bit flags as well as image list indexes that indicate the item's state image
            and overlay image.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_GETITEMTEXT">
            <summary>
            Retrieves the text of a list-view item or subitem. You can send this message explicitly or by using the
            <c>ListView_GetItemText</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Index of the list-view item.</para>
            <para><em>lParam</em></para>
            <para>
            Pointer to an <c>LVITEM</c> structure. To retrieve the item text, set <c>iSubItem</c> to zero. To retrieve the text of a
            subitem, set <c>iSubItem</c> to the subitem's index. The <c>pszText</c> member points to a buffer that receives the text. The
            <c>cchTextMax</c> member specifies the number of characters in the buffer.
            </para>
            <para><strong>Returns</strong></para>
            <para>
            If you send this message explicitly, it returns the number of characters in the <c>pszText</c> member of the <c>LVITEM</c> structure.
            </para>
            </summary>
            <remarks>
            <para>
            You can also send this message by calling the <c>ListView_GetItemText</c> macro. However, this macro does not return the
            string length.
            </para>
            <para><c>LVM_GETITEMTEXT</c> is not supported under the <c>LVS_OWNERDATA</c> style.</para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_SETITEMTEXT">
            <summary>
            Changes the text of a list-view item or subitem. You can send this message explicitly or by using the
            <c>ListView_SetItemText</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Zero-based index of the list-view item.</para>
            <para><em>lParam</em></para>
            <para>
            Pointer to an <c>LVITEM</c> structure. The <c>iSubItem</c> member is the index of the subitem, or it can be zero to set the
            item label. The <c>pszText</c> member is the address of a null-terminated string containing the new text; it can also be
            <c>NULL</c>. The <c>pszText</c> member can also be LPSTR_TEXTCALLBACK to indicate a callback item for which the parent window
            stores the text. In this case, the list-view control sends the parent an <c>LVN_GETDISPINFO</c> notification code when it
            needs the text.
            </para>
            <para><strong>Returns</strong></para>
            <para>If you send this message explicitly, it returns <c>TRUE</c> if successful or <c>FALSE</c> otherwise.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_SETITEMCOUNT">
            <summary>
            Causes the list-view control to allocate memory for the specified number of items or sets the virtual number of items in a
            virtual list-view control.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Number of items that the list-view control will ultimately contain.</para>
            <para><em>lParam</em></para>
            <para>
            Version 4.70. Values that specify the behavior of the list-view control after resetting the item count. This value can be a
            combination of the following:
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term><c>LVSICF_NOINVALIDATEALL</c></term>
            <term>The list-view control will not repaint unless affected items are currently in view.</term>
            </item>
            <item>
            <term><c>LVSICF_NOSCROLL</c></term>
            <term>The list-view control will not change the scroll position when the item count changes.</term>
            </item>
            </list>
            <para><strong>Returns</strong></para>
            <para>Returns nonzero if successful, or zero otherwise.</para>
            </summary>
            <remarks>
            <para>
            How the memory is allocated depends on how the list-view control was created. You can send this message explicitly or use the
            <c>ListView_SetItemCount</c> or <c>ListView_SetItemCountEx</c> macros. For more information, see Virtual List-View Style.
            </para>
            <para>
            If the list-view control was created without the <c>LVS_OWNERDATA</c> style, sending this message causes the control to
            allocate its internal data structures for the specified number of items. This prevents the control from having to allocate
            the data structures every time an item is added.
            </para>
            <para>
            If the list-view control was created with the <c>LVS_OWNERDATA</c> style (a virtual list view), sending this message sets the
            virtual number of items that the control contains.
            </para>
            <para>
            The lParam parameter is intended only for list-view controls that use the <c>LVS_OWNERDATA</c> and <c>LVS_REPORT</c> or
            <c>LVS_LIST</c> styles.
            </para>
            <para>
            When the common control list-view is a virtualized list-view ( <c>LVS_OWNERDATA</c>), there is a 100,000,000 item limit on
            the list-view. In this scenario, <c>LVM_SETITEMCOUNT</c> will return FALSE when it has a wParam of 100,000,001.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_SORTITEMS">
            <summary>
            Uses an application-defined comparison function to sort the items of a list-view control. The index of each item changes to
            reflect the new sequence. You can send this message explicitly or by using the <c>ListView_SortItems</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Application-defined value that is passed to the comparison function.</para>
            <para><em>lParam</em></para>
            <para>
            Pointer to the application-defined comparison function. The comparison function is called during the sort operation each time
            the relative order of two list items needs to be compared.
            </para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> if successful, or <c>FALSE</c> otherwise.</para>
            </summary>
            <remarks>
            <para>The comparison function has the following form:</para>
            <para>
            <code>int CALLBACK CompareFunc(LPARAM lParam1, LPARAM lParam2, LPARAM lParamSort);</code>
            </para>
            <para>
            The lParam1 parameter is the value associated with the first item being compared, and the lParam2 parameter is the value
            associated with the second item. These are the values that were specified in the <c>lParam</c> member of the items'
            <c>LVITEM</c> structure when they were inserted into the list. The <c>ListView_SortItems</c>'s wParam parameter is passed to
            the callback function as its third parameter.
            </para>
            <para>
            The comparison function must return a negative value if the first item should precede the second, a positive value if the
            first item should follow the second, or zero if the two items are equivalent.
            </para>
            <para>
            <para>Note</para>
            <para>
            During the sorting process, the list-view contents are unstable. If the callback function sends any messages to the list-view
            control aside from <c>LVM_GETITEM</c> ( <c>ListView_GetItem</c>), the results are unpredictable.
            </para>
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_SETITEMPOSITION32">
            <summary>
            Moves an item to a specified position in a list-view control (must be in icon or small icon view). This message differs from
            the <c>LVM_SETITEMPOSITION</c> message in that it uses 32-bit coordinates. You can send this message explicitly or by using
            the <c>ListView_SetItemPosition32</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Index of the list-view item for which to set the position.</para>
            <para><em>lParam</em></para>
            <para>Pointer to a <c>POINT</c> structure that contains the new position of the item, in list-view coordinates.</para>
            <para><strong>Returns</strong></para>
            <para>No return value.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_GETSELECTEDCOUNT">
            <summary>
            Determines the number of selected items in a list-view control. You can send this message explicitly or by using the
            <c>ListView_GetSelectedCount</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the number of selected items.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_GETITEMSPACING">
            <summary>
            Determines the spacing between items in a list-view control. You can send this message explicitly or by using the
            <c>ListView_GetItemSpacing</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>
            View for which to retrieve the item spacing. This parameter is <c>TRUE</c> for small icon view, or <c>FALSE</c> for icon view.
            </para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>
            Returns the amount of spacing between items. The horizontal spacing is contained in the <c>LOWORD</c> and the vertical
            spacing is contained in the <c>HIWORD</c>.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_GETISEARCHSTRING">
            <summary>
            Retrieves the incremental search string of a list-view control. You can send this message explicitly or by using the
            <c>ListView_GetISearchString</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>
            Pointer to a buffer that receives the incremental search string. To just retrieve the length of the string, set lParam to <c>NULL</c>.
            </para>
            <para><strong>Returns</strong></para>
            <para>
            Returns the number of characters in the incremental search string, not including the terminating NULL character, or zero if
            the list-view control is not in incremental search mode.
            </para>
            </summary>
            <remarks>
            <para>
            <c>Security Warning:</c> Using this message incorrectly might compromise the security of your program. This message does not
            provide a way for you to know the size of the buffer. If you use this message, first call the message passing <c>NULL</c> in
            the lParam, this returns the number of characters, excluding <c>NULL</c> that are required. Then call the message a second
            time to retrieve the string. You should review the Security Considerations: Microsoft Windows Controls before continuing.
            </para>
            <para>
            The incremental search string is the character sequence that the user types while the list view has the input focus. Each
            time the user types a character, the system appends the character to the search string and then searches for a matching item.
            If the system finds a match, it selects the item and, if necessary, scrolls it into view.
            </para>
            <para>
            A time-out period is associated with each character that the user types. If the time-out period elapses before the user types
            another character, the incremental search string is reset.
            </para>
            <para>
            Make sure that the buffer is large enough to hold the string and the terminating NULL character. If it is too small, an
            immediate invalid page fault will result.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_SETICONSPACING">
            <summary>
            Sets the spacing between icons in list-view controls that have the <c>LVS_ICON</c> style. You can send this message
            explicitly or by using the <c>ListView_SetIconSpacing</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>
            The <c>LOWORD</c> specifies the distance, in pixels, to set between icons on the x-axis. The <c>HIWORD</c> specifies the
            distance, in pixels, to set between icons on the y-axis. See Remarks.
            </para>
            <para><strong>Returns</strong></para>
            <para>
            Returns a <c>DWORD</c> value that contains the previous x-axis distance in the low word, and the previous y-axis distance in
            the high word.
            </para>
            </summary>
            <remarks>
            <para>
            Values for lParam are relative to the upper-left corner of an icon bitmap. Therefore, to set spacing between icons that do
            not overlap, the lParam values must include the size of the icon, plus the amount of empty space desired between icons.
            Values that do not include the width of the icon will result in overlaps.
            </para>
            <para>
            When defining the icon spacing, the lParam values must set to 4 or larger. Smaller values will not yield the desired layout.
            To reset the icons to the default spacing, set the lParam values to -1.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_SETEXTENDEDLISTVIEWSTYLE">
            <summary>
            Sets extended styles in list-view controls. You can send this message explicitly or use the
            <c>ListView_SetExtendedListViewStyle</c> or <c>ListView_SetExtendedListViewStyleEx</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>
            <c>DWORD</c> value that specifies which styles in lParam are to be affected. This parameter can be a combination of
            <c>Extended List-View Styles</c>. Only the extended styles in wParam will be changed. All other styles will be maintained as
            they are. If this parameter is zero, all of the styles in lParam will be affected.
            </para>
            <para><em>lParam</em></para>
            <para>
            <c>DWORD</c> value that specifies the extended list-view control styles to set. This parameter can be a combination of
            <c>Extended List-View Styles</c>. Styles that are not set, but that are specified in wParam, are removed.
            </para>
            <para><strong>Returns</strong></para>
            <para>Returns a <c>DWORD</c> value that contains the previous extended list-view control styles.</para>
            </summary>
            <remarks>
            <para>
            The wParam parameter allows you to modify one or more extended styles without having to retrieve the existing styles first.
            For example, if you pass <c>LVS_EX_FULLROWSELECT</c> for wParam and 0 for lParam, the <c>LVS_EX_FULLROWSELECT</c> style will
            be cleared but all other styles will remain the same.
            </para>
            <para>
            For backward compatibility reasons, the <c>ListView_SetExtendedListViewStyle</c> macro has not been updated to use wParam. To
            use the wParam value, use the <c>ListView_SetExtendedListViewStyleEx</c> macro.
            </para>
            <para>
            When you use this message to set the <c>LVS_EX_CHECKBOXES</c> style, any previously set state image index will be discarded.
            All check boxes will be initialized to the unchecked state. The state image index is contained in bits 12 through 15 of the
            <c>state</c> member of the <c>LVITEM</c> structure.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_GETEXTENDEDLISTVIEWSTYLE">
            <summary>
            Gets the extended styles that are currently in use for a given list-view control. You can send this message explicitly or use
            the <c>ListView_GetExtendedListViewStyle</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>
            Returns a <c>DWORD</c> that represents the styles currently in use for a given list-view control. This value can be a
            combination of Extended List-View Styles.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_GETSUBITEMRECT">
            <summary>
            Retrieves information about the bounding rectangle for a subitem in a list-view control. You can send this message explicitly
            or by using the <c>ListView_GetSubItemRect</c> macro (recommended). This message is intended to be used only with list-view
            controls that use the <c>LVS_REPORT</c> style.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Index of the subitem's parent item.</para>
            <para><em>lParam</em></para>
            <para>
            Pointer to a <c>RECT</c> structure that will receive the subitem bounding rectangle information. Its members must be
            initialized according to the following member/value relationships:
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term><c>top</c></term>
            <term>The one-based index of the subitem.</term>
            </item>
            <item>
            <term><c>left</c></term>
            <term>Flag value (see remarks). Indicates the portion of the list-view subitem for which to retrieve the bounding rectangle.</term>
            </item>
            </list>
            <para><strong>Returns</strong></para>
            <para>Returns nonzero if successful, or zero otherwise.</para>
            </summary>
            <remarks>
            <para>Following are the flag values that may be set.</para>
            <list type="table">
            <listheader>
            <term>Requirement</term>
            <term>Value</term>
            </listheader>
            <item>
            <term><c>Flag Value</c></term>
            <term><c>Meaning</c></term>
            </item>
            <item>
            <term>LVIR_BOUNDS</term>
            <term>Returns the bounding rectangle of the entire item, including the icon and label.</term>
            </item>
            <item>
            <term>LVIR_ICON</term>
            <term>Returns the bounding rectangle of the icon or small icon.</term>
            </item>
            <item>
            <term>LVIR_LABEL</term>
            <term>Returns the bounding rectangle of the entire item, including the icon and label. This is identical to LVIR_BOUNDS.</term>
            </item>
            </list>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_SUBITEMHITTEST">
            <summary>
            Determines which list-view item or subitem is at a given position. You can send this message explicitly or by using the
            <c>ListView_SubItemHitTest</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be 0. **Windows Vista.** Should be -1 if the **iGroup** member of *lParam* is to be retrieved.</para>
            <para><em>lParam</em></para>
            <para>
            Pointer to an <c>LVHITTESTINFO</c> structure. The <c>POINT</c> structure within <c>LVHITTESTINFO</c> should be set to the
            client coordinates to be hit-tested.
            </para>
            <para><strong>Returns</strong></para>
            <para>
            Returns the index of the item or subitem tested, if any, or -1 otherwise. If an item or subitem is at the given coordinates,
            the fields of the <c>LVHITTESTINFO</c> structure will be filled with the applicable hit information.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_SETCOLUMNORDERARRAY">
            <summary>
            Sets the left-to-right order of columns in a list-view control. You can send this message explicitly or use the
            <c>ListView_SetColumnOrderArray</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Size, in elements, of the buffer at lParam.</para>
            <para><em>lParam</em></para>
            <para>
            Pointer to an array that specifies the order in which columns should be displayed, from left to right. For example, if the
            contents of the array are {2,0,1}, the control displays column 2, column 0, and column 1 in that order.
            </para>
            <para><strong>Returns</strong></para>
            <para>Returns nonzero if successful, or zero otherwise.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_GETCOLUMNORDERARRAY">
            <summary>
            Gets the current left-to-right order of columns in a list-view control. You can send this message explicitly or use the
            <c>ListView_GetColumnOrderArray</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>The number of columns in the list-view control.</para>
            <para><em>lParam</em></para>
            <para>
            A pointer to an array of integers that receives the index values of the columns in the list-view control. The array must be
            large enough to hold wParam elements.
            </para>
            <para><strong>Returns</strong></para>
            <para>
            If successful, returns nonzero, and the buffer at lParam receives the column index of each column in the control in the order
            they appear from left to right. Otherwise, the return value is zero.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_SETHOTITEM">
            <summary>
            Sets the hot item for a list-view control. You can send this message explicitly or use the <c>ListView_SetHotItem</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Zero-based index of the item to be set as the hot item.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the index of the item that was previously hot.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_GETHOTITEM">
            <summary>
            Retrieves the index of the hot item. You can send this message explicitly or use the <c>ListView_GetHotItem</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the index of the item that is hot.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_SETHOTCURSOR">
            <summary>
            Sets the HCURSOR value that the list-view control uses when the pointer is over an item while hot tracking is enabled. You
            can send this message explicitly or use the <c>ListView_SetHotCursor</c> macro. To check whether hot tracking is enabled,
            call <c>SystemParametersInfo</c>.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Handle to the cursor to be set.</para>
            <para><strong>Returns</strong></para>
            <para>Returns an HCURSOR value that is the previous hot cursor.</para>
            </summary>
            <remarks>A list-view control uses hot tracking and hover selection when the <c>LVS_EX_TRACKSELECT</c> style is set.</remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_GETHOTCURSOR">
            <summary>
            Retrieves the HCURSOR value used when the pointer is over an item while hot tracking is enabled. You can send this message
            explicitly or use the <c>ListView_GetHotCursor</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns an HCURSOR value that is the handle to the cursor that the list-view control uses when hot tracking is enabled.</para>
            </summary>
            <remarks>A list-view control uses hot tracking and hover selection when the <c>LVS_EX_TRACKSELECT</c> style is set.</remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_APPROXIMATEVIEWRECT">
            <summary>
            Calculates the approximate width and height required to display a given number of items. You can send this message explicitly
            or use the <c>ListView_ApproximateViewRect</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>
            The number of items to be displayed in the control. If this parameter is set to -1, the message uses the total number of
            items in the control.
            </para>
            <para><em>lParam</em></para>
            <para>
            The <c>LOWORD</c> is the proposed x-dimension of the control, in pixels. This parameter can be set to -1 to allow the message
            to use the current width value.
            </para>
            <para>
            The <c>HIWORD</c> is the proposed y-dimension of the control, in pixels. This parameter can be set to -1 to allow the message
            to use the current height value.
            </para>
            <para><strong>Returns</strong></para>
            <para>
            Returns a <c>DWORD</c> value that holds the approximate width (in the <c>LOWORD</c>) and height (in the <c>HIWORD</c>) needed
            to display the items, in pixels.
            </para>
            </summary>
            <remarks>
            Setting the size of the list-view control based on the dimensions provided by this message can optimize redraw and reduce flicker.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_SETWORKAREAS">
            <summary>
            Sets the working areas within a list-view control. You can send this message explicitly or use the
            <c>ListView_SetWorkAreas</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>
            The number of structures in the array at lprc. The maximum number of working areas allowed is defined by the LV_MAX_WORKAREAS value.
            </para>
            <para><em>lParam</em></para>
            <para>
            Pointer to an array of <c>RECT</c> structures that contain the new working areas of the list-view control. Values in these
            structures are in client coordinates. If this parameter is <c>NULL</c>, the working area will be set to the client area of
            the control. wParam specifies the number of structures in this array.
            </para>
            <para><strong>Returns</strong></para>
            <para>The return value for this message is not used.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_GETWORKAREAS">
            <summary>
            Retrieves the working areas from a list-view control. You can send this message explicitly or use the
            <c>ListView_GetWorkAreas</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>The number of <c>RECT</c> structures in the array at lParam.</para>
            <para><em>lParam</em></para>
            <para>
            Pointer to an array of <c>RECT</c> structures that receive the current working areas of the list-view control. Values in
            these structures are in client coordinates. wParam specifies the number of structures in this array.
            </para>
            <para><strong>Returns</strong></para>
            <para>The return value for this message is not used.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_GETNUMBEROFWORKAREAS">
            <summary>
            Retrieves the number of working areas in a list-view control. You can send this message explicitly or use the
            <c>ListView_GetNumberOfWorkAreas</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>
            Pointer to a UINT value that receives the number of working areas in the list-view control. If zero is placed in this
            variable, then no working areas are currently set. This value cannot be <c>NULL</c>.
            </para>
            <para><strong>Returns</strong></para>
            <para>The return value for this message is not used.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_GETSELECTIONMARK">
            <summary>
            Retrieves the selection mark from a list-view control. You can send this message explicitly or use the
            <c>ListView_GetSelectionMark</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the zero-based selection mark, or -1 if there is no selection mark.</para>
            </summary>
            <remarks>The selection mark is the item index from which a multiple selection starts.</remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_SETSELECTIONMARK">
            <summary>
            Sets the selection mark in a list-view control. You can send this message explicitly or use the
            <c>ListView_SetSelectionMark</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Zero-based index of the new selection mark. If set to -1, the selection mark is removed.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the previous selection mark, or -1 if there is no previous selection mark.</para>
            </summary>
            <remarks>
            The selection mark is the item index from which a multiple selection starts. This message does not affect the selection state
            of the item.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_SETHOVERTIME">
            <summary>
            Sets the amount of time which the mouse cursor must hover over an item before it is selected. You can send this message
            explicitly or use the <c>ListView_SetHoverTime</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>
            The new amount of time, in milliseconds, that the mouse cursor must hover over an item before it is selected. If this value
            is ( <c>DWORD</c>)-1, then the hover time is set to the default hover time.
            </para>
            <para><strong>Returns</strong></para>
            <para>Returns the previous hover time.</para>
            </summary>
            <remarks>
            The hover time only affects list-view controls that have the <c>LVS_EX_TRACKSELECT</c>, <c>LVS_EX_ONECLICKACTIVATE</c>, or
            <c>LVS_EX_TWOCLICKACTIVATE</c> extended list-view style.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_GETHOVERTIME">
            <summary>
            Retrieves the amount of time that the mouse cursor must hover over an item before it is selected. You can send this message
            explicitly or use the <c>ListView_GetHoverTime</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>
            Returns the amount of time, in milliseconds, that the mouse cursor must hover over an item before it is selected. If the
            return value is ( <c>DWORD</c>)-1, then the hover time is the default hover time.
            </para>
            </summary>
            <remarks>
            The hover time only affects list-view controls that have the <c>LVS_EX_TRACKSELECT</c>, <c>LVS_EX_ONECLICKACTIVATE</c>, or
            <c>LVS_EX_TWOCLICKACTIVATE</c> extended list-view style.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_SETTOOLTIPS">
            <summary>
            Sets the tooltip control that the list-view control will use to display tooltips. You can send this message explicitly or use
            the <c>ListView_SetToolTips</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Handle to the tooltip control to be set.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the handle to the previous tooltip control.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_GETTOOLTIPS">
            <summary>
            Retrieves the tooltip control that the list-view control uses to display tooltips. You can send this message explicitly or
            use the <c>ListView_GetToolTips</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the handle of the tooltip control.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_SORTITEMSEX">
            <summary>
            Uses an application-defined comparison function to sort the items of a list-view control. The index of each item changes to
            reflect the new sequence. You can send this message explicitly or by using the <c>ListView_SortItemsEx</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Application-defined value that is passed to the comparison function.</para>
            <para><em>lParam</em></para>
            <para>
            Pointer to an application-defined comparison function. It is called during the sort operation each time the relative order of
            two list items needs to be compared.
            </para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> if successful, or <c>FALSE</c> otherwise.</para>
            </summary>
            <remarks>
            <para>The comparison function has the following form:</para>
            <para>
            <code>int CALLBACK CompareFunc(LPARAM lParam1, LPARAM lParam2, LPARAM lParamSort);</code>
            </para>
            <para>
            This message is similar to <c>LVM_SORTITEMS</c>, except for the type of information passed to the comparison function. With
            <c>LVM_SORTITEMSEX</c>, lParam1 is the current index of the first item, and lParam2 is the current index of the second item.
            You can send an <c>LVM_GETITEMTEXT</c> message to retrieve more information on an item, if needed.
            </para>
            <para>
            The comparison function must return a negative value if the first item should precede the second, a positive value if the
            first item should follow the second, or zero if the two items are equivalent.
            </para>
            <para>
            <para>Note</para>
            <para>
            During the sorting process, the list-view contents are unstable. If the callback function sends any messages to the list-view
            control aside from <c>LVM_GETITEM</c> ( <c>ListView_GetItem</c>), the results are unpredictable.
            </para>
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_SETBKIMAGE">
            <summary>
            Sets the background image in a list-view control. You can send this message explicitly or by using the
            <c>ListView_SetBkImage</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Pointer to a <c>LVBKIMAGE</c> structure that contains the new background image information.</para>
            <para><strong>Returns</strong></para>
            <para>
            Returns nonzero if successful, or zero otherwise. Returns zero if the <c>ulFlags</c> member of the <c>LVBKIMAGE</c> structure
            is <c>LVBKIF_SOURCE_NONE</c>.
            </para>
            </summary>
            <remarks>
            Because the list-view control uses OLE COM to manipulate the background images, the calling application must call
            <c>CoInitialize</c> or <c>OleInitialize</c> before sending this message. It is best to call one of these functions when the
            application is initialized and call either <c>CoUninitialize</c> or <c>OleUninitialize</c> when the application is terminating.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_GETBKIMAGE">
            <summary>
            Gets the background image in a list-view control. You can send this message explicitly or by using the
            <c>ListView_GetBkImage</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>A pointer to an <c>LVBKIMAGE</c> structure that will receive the background image information.</para>
            <para><strong>Returns</strong></para>
            <para>Returns nonzero if successful, or zero otherwise.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_SETSELECTEDCOLUMN">
            <summary>
            Sets the index of the selected column.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Value of type **int** that specifies the column index.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>The return value is not used.</para>
            </summary>
            <remarks>
            <para>The column indices are stored in an <c>int</c> array. See the <c>puColumns</c> member of <c>LVITEM</c>.</para>
            <para>
            <para>Note</para>
            <para>
            To use this message, you must provide a manifest specifying Comclt32.dll version 6.0. For more information on manifests, see
            Enabling Visual Styles.
            </para>
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_SETVIEW">
            <summary>
            Sets the view of a list-view control.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>**DWORD** that specifies the view.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns 1 if successful, or -1 otherwise. For example, -1 is returned if the view is invalid.</para>
            </summary>
            <remarks>
            <para>Following are the values for views.</para>
            <list type="bullet">
            <item>
            <term>LV_VIEW_DETAILS</term>
            </item>
            <item>
            <term>LV_VIEW_ICON</term>
            </item>
            <item>
            <term>LV_VIEW_LIST</term>
            </item>
            <item>
            <term>LV_VIEW_SMALLICON</term>
            </item>
            <item>
            <term>LV_VIEW_TILE</term>
            </item>
            </list>
            <para>
            <para>Note</para>
            <para>
            To use this message, you must provide a manifest specifying Comctl32.dll version 6.0. For more information on manifests, see
            Enabling Visual Styles.
            </para>
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_GETVIEW">
            <summary>
            Retrieves the current view of a list-view control.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns a <c>DWORD</c> that specifies the current view.</para>
            </summary>
            <remarks>
            <para>Following are the values for views.</para>
            <list type="bullet">
            <item>
            <term>LV_VIEW_DETAILS</term>
            </item>
            <item>
            <term>LV_VIEW_ICON</term>
            </item>
            <item>
            <term>LV_VIEW_LIST</term>
            </item>
            <item>
            <term>LV_VIEW_SMALLICON</term>
            </item>
            <item>
            <term>LV_VIEW_TILE</term>
            </item>
            </list>
            <para>
            <para>Note</para>
            <para>
            To use this message, you must provide a manifest specifying Comclt32.dll version 6.0. For more information on manifests, see
            Enabling Visual Styles.
            </para>
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_INSERTGROUP">
            <summary>
            Inserts a group into a list-view control.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Index where the group is to be added. If this is -1, the group is added at the end of the list.</para>
            <para><em>lParam</em></para>
            <para>Pointer to a</para>
            <para>**LVGROUP**</para>
            <para>structure that contains the group to add.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the index of the item that the group was added to, or -1 if the operation failed.</para>
            </summary>
            <remarks>
            <para>To turn on group mode, call <c>LVM_ENABLEGROUPVIEW</c> or <c>ListView_EnableGroupView</c>.</para>
            <para>A group cannot be inserted into an empty list-view control.</para>
            <para>
            Be sure to set the <c>iGroupId</c> in the item(s) the group was added to. Otherwise after <c>LVM_ENABLEGROUPVIEW</c> message
            processing with <c>TRUE</c> the listview control will not show any items.
            </para>
            <para>
            <para>Note</para>
            <para>
            To use this message, you must provide a manifest specifying Comclt32 version 6.0. For more information on manifests, see
            Enabling Visual Styles.
            </para>
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_SETGROUPINFO">
            <summary>
            Sets group information. Send this message explicitly or by using the <c>ListView_SetGroupInfo</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>ID that specifies the group whose information is to be set.</para>
            <para><em>lParam</em></para>
            <para>
            Pointer to a [**LVGROUP**](windows/win32/api/commctrl/ns-commctrl-lvgroup) structure that contains the information to set.
            </para>
            <para><strong>Returns</strong></para>
            <para>Returns the ID of the group if successful, or -1 otherwise.</para>
            </summary>
            <remarks>
            <para>
            To change a group ID of an existing group add <c>LVGF_GROUPID</c> to <c>LVGROUP.mask</c> and set <c>LVGROUP.iGroupId</c> to
            the new ID. The call will fail if <c>LVGROUP.iGroupId</c> contains ID of an existing group.
            </para>
            <para>
            To update other properties of an existing group (e.g. update an alignment of the header or footer text for the group,
            <c>uAlign</c>) <c>LVGROUP.mask</c> must not contain <c>LVGF_GROUPID</c>, else the update will fail.
            </para>
            <para>
            <para>Note</para>
            <para>
            To use this message, you must provide a manifest specifying Comclt32.dll version 6.0. For more information on manifests, see
            Enabling Visual Styles.
            </para>
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_GETGROUPINFO">
            <summary>
            Gets group information.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>An ID that specifies the group whose information is retrieved.</para>
            <para><em>lParam</em></para>
            <para>A pointer an</para>
            <para>**LVGROUP**</para>
            <para>structure that receives the retrieved information. Set the **cbSize** member of this structure to sizeof(LVGROUP).</para>
            <para><strong>Returns</strong></para>
            <para>Returns the ID of the group if successful, or -1 otherwise.</para>
            </summary>
            <remarks>
            <para>Before attempting to retrieve the header for a group, first ensure that the group does not have the LBGS_NOHEADER style.</para>
            <para>
            <para>Note</para>
            <para>
            To use this message, you must provide a manifest specifying Comclt32.dll version 6.0. For more information on manifests, see
            Enabling Visual Styles.
            </para>
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_REMOVEGROUP">
            <summary>
            Removes a group from a list-view control.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>ID that specifies the group to remove.</para>
            <para><em>lParam</em></para>
            <para>Must be <c>NULL</c>.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the index of the group if successful, or -1 otherwise.</para>
            </summary>
            <remarks>
            <para>Note</para>
            <para>
            To use this message, you must provide a manifest specifying Comclt32.dll version 6.0. For more information on manifests, see
            Enabling Visual Styles.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_MOVEGROUP">
            <summary>This message is not implemented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_GETGROUPCOUNT">
            <summary>
            Gets the number of groups.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Not used. Should be 0.</para>
            <para><em>lParam</em></para>
            <para>Not used. Should be 0.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the number of groups.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_GETGROUPINFOBYINDEX">
            <summary>
            Gets information on a specified group. Send this message explicitly or by using the <c>ListView_GetGroupInfoByIndex</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>The index of the group.</para>
            <para><em>lParam</em></para>
            <para>
            A pointer to an <c>LVGROUP</c> structure to receive information on the group specified by wParam. The calling process is
            responsible for allocating memory for the structure and any buffers in the structure, such as the one pointed to by the
            <c>pszHeader</c> member. Set any contingent members of the structure, such as <c>cchHeader</c> the size of the buffer pointed
            to by <c>pszHeader</c> in <c>WCHARs</c> including the terminating <c>NULL</c>. Set <c>cbSize</c> to sizeof(LVGROUP).
            </para>
            <para>The message receiver is responsible for setting the structure members with information for the group specified by wParam.</para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> if successful, or <c>FALSE</c> otherwise.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_MOVEITEMTOGROUP">
            <summary>This message is not implemented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_GETGROUPRECT">
            <summary>
            Gets the rectangle for a specified group. Send this message explicitly or by using the <c>ListView_GetGroupRect</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Specifies the group by <c>iGroupId</c> (see <c>LVGROUP</c> structure).</para>
            <para><em>lParam</em></para>
            <para>
            A pointer to a <c>RECT</c> structure to receive information on the group specified by wParam. The message receiver is
            responsible for setting the structure members with information for the group specified by wParam.
            </para>
            <para>
            The calling process is responsible for allocating memory for the structure. Set the <c>top</c> member of the <c>RECT</c> to
            one of the following flags to specify the coordinates of the rectangle to get.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term><c>LVGGR_GROUP</c></term>
            <term>Coordinates of the entire expanded group.</term>
            </item>
            <item>
            <term><c>LVGGR_HEADER</c></term>
            <term>Coordinates of the header only (collapsed group).</term>
            </item>
            <item>
            <term><c>LVGGR_LABEL</c></term>
            <term>Coordinates of the label only.</term>
            </item>
            <item>
            <term><c>LVGGR_SUBSETLINK</c></term>
            <term>
            Coordinates of the subset link only (markup subset). A list-view control can limit the number of visible items displayed in
            each group. A link is presented to the user to allow the user to expand the group. This flag will return the bounding
            rectangle of the subset link if the group is a subset (group state of LVGS_SUBSETED, see structure <c>LVGROUP</c>, member
            <c>state</c>). This flag is provided so that accessibility applications can located the link.
            </term>
            </item>
            </list>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> if successful, or <c>FALSE</c> otherwise.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_SETGROUPMETRICS">
            <summary>
            Sets information about the display of groups.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be **NULL**.</para>
            <para><em>lParam</em></para>
            <para>Pointer to an</para>
            <para>**LVGROUPMETRICS**</para>
            <para>structure that contains the metrics to set.</para>
            <para><strong>Returns</strong></para>
            <para>The return value is not used.</para>
            </summary>
            <remarks>
            <para>Note</para>
            <para>
            To use this message, you must provide a manifest specifying Comclt32.dll version 6.0. For more information on manifests, see
            Enabling Visual Styles.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_GETGROUPMETRICS">
            <summary>
            Gets information about the display of groups.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be **NULL**.</para>
            <para><em>lParam</em></para>
            <para>A pointer to an</para>
            <para>**LVGROUPMETRICS**</para>
            <para>structure that receives the retrieved metrics.</para>
            <para><strong>Returns</strong></para>
            <para>The return value is not used.</para>
            </summary>
            <remarks>
            <para>Note</para>
            <para>
            To use this message, you must provide a manifest specifying Comclt32.dll version 6.0. For more information on manifests, see
            Enabling Visual Styles.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_ENABLEGROUPVIEW">
            <summary>
            Enables or disables whether the items in a list-view control display as a group.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>
            A **BOOL** that indicates whether to enable a list-view control to group displayed items. Use **TRUE** to enable grouping,
            **FALSE** to disable it.
            </para>
            <para><em>lParam</em></para>
            <para>Must be **NULL**.</para>
            <para><strong>Returns</strong></para>
            <para>Returns one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term><c>0</c></term>
            <term>The ability to display list-view items as a group is already enabled or disabled.</term>
            </item>
            <item>
            <term><c>1</c></term>
            <term>The state of the control was successfully changed.</term>
            </item>
            <item>
            <term><c>-1</c></term>
            <term>The operation failed.</term>
            </item>
            </list>
            </summary>
            <remarks>
            <para><c>LVM_ENABLEGROUPVIEW</c> is not supported under the <c>LVS_OWNERDATA</c> style.</para>
            <para>
            <para>Note</para>
            <para>
            To use this message, you must provide a manifest specifying Comclt32.dll version 6.0. For more information on manifests, see
            Enabling Visual Styles.
            </para>
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_SORTGROUPS">
            <summary>
            Uses an application-defined comparison function to sort groups by ID within a list-view control.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Pointer to an application-defined comparison function,</para>
            <para>LVGroupCompare</para>
            <para>.</para>
            <para><em>lParam</em></para>
            <para>Void pointer to the application-defined information.</para>
            <para><strong>Returns</strong></para>
            <para>Returns 1 if successful, or 0 otherwise.</para>
            </summary>
            <remarks>
            <para>Note</para>
            <para>
            To use this message, you must provide a manifest specifying Comclt32.dll version 6.0. For more information on manifests, see
            Enabling Visual Styles.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_INSERTGROUPSORTED">
            <summary>
            Inserts a group into an ordered list of groups.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Pointer to an</para>
            <para>LVINSERTGROUPSORTED</para>
            <para>structure that contains the group to insert.</para>
            <para><em>lParam</em></para>
            <para>Must be **NULL**.</para>
            <para><strong>Returns</strong></para>
            <para>The return value is not used.</para>
            </summary>
            <remarks>
            <para>
            The ordering of the list is based on the ID of the group. The order is defined by the application-defined ordering function,
            <c>LVGroupCompare</c>, that is passed in the <c>LVINSERTGROUPSORTED</c> structure by the wParam parameter.
            </para>
            <para>
            <para>Note</para>
            <para>
            To use this message, you must provide a manifest specifying Comclt32.dll version 6.0. For more information on manifests, see
            Enabling Visual Styles.
            </para>
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_REMOVEALLGROUPS">
            <summary>
            Removes all groups from a list-view control.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be **NULL**.</para>
            <para><em>lParam</em></para>
            <para>Must be **NULL**.</para>
            <para><strong>Returns</strong></para>
            <para>The return value is not used.</para>
            </summary>
            <remarks>
            <para>Note</para>
            <para>
            To use this message, you must provide a manifest specifying Comclt32.dll version 6.0. For more information on manifests, see
            Enabling Visual Styles.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_HASGROUP">
            <summary>
            Determines whether the list-view control has a specified group.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>ID of the group.</para>
            <para><em>lParam</em></para>
            <para>Must be **NULL**.</para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> if the list-view control has the specified group, or <c>FALSE</c> otherwise.</para>
            </summary>
            <remarks>
            <para>Note</para>
            <para>
            To use this message, you must provide a manifest specifying Comclt32.dll version 6.0. For more information on manifests, see
            Enabling Visual Styles.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_GETGROUPSTATE">
            <summary>
            Gets the state for a specified group. Send this message explicitly or by using the <c>ListView_GetGroupState</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Specifies the group by <c>iGroupId</c> (see <c>LVGROUP</c> structure).</para>
            <para><em>lParam</em></para>
            <para>Specifies the state values to retrieve. This is a combination of the flags listed for the <c>state</c> member of <c>LVGROUP</c>.</para>
            <para><strong>Returns</strong></para>
            <para>
            Returns the combination of state values that are set. For example, if lParam is LVGS_COLLAPSED and the value returned is
            zero, the LVGS_COLLAPSED state is not set. Zero is returned if the group is not found.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_GETFOCUSEDGROUP">
            <summary>
            Gets the group that has the focus. Send this message explicitly or by using the <c>ListView_GetFocusedGroup</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the index of the group with state of LVGS_FOCUSED, or -1 if there is no group with state of LVGS_FOCUSED.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_SETTILEVIEWINFO">
            <summary>
            Sets information that a list-view control uses in tile view.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Pointer to an</para>
            <para>**LVTILEVIEWINFO**</para>
            <para>structure that contains the information to set.</para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> if successful, or <c>FALSE</c> otherwise.</para>
            </summary>
            <remarks>
            To use this message, you must provide a manifest specifying Comclt32.dll version 6.0. For more information on manifests, see
            Enabling Visual Styles.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_GETTILEVIEWINFO">
            <summary>
            Retrieves information about a list-view control in tile view.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Pointer to an</para>
            <para>**LVTILEVIEWINFO**</para>
            <para>structure that receives the retrieved information.</para>
            <para><strong>Returns</strong></para>
            <para>Return value not used.</para>
            </summary>
            <remarks>
            <para>Note</para>
            <para>
            To use this message, you must provide a manifest specifying Comclt32.dll version 6.0. For more information on manifests, see
            Enabling Visual Styles.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_SETTILEINFO">
            <summary>
            Sets information for an existing tile of a list-view control.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Pointer to an</para>
            <para>**LVTILEINFO**</para>
            <para>structure that contains the information to set.</para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> if successful, or <c>FALSE</c> otherwise.</para>
            </summary>
            <remarks>
            <para><c>LVM_SETTILEINFO</c> is not supported under the <c>LVS_OWNERDATA</c> style.</para>
            <para>
            <para>Note</para>
            <para>
            To use this message, you must provide a manifest specifying Comclt32.dll version 6.0. For more information on manifests, see
            Enabling Visual Styles.
            </para>
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_GETTILEINFO">
            <summary>
            Retrieves information about a tile in a list-view control.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Pointer to an</para>
            <para>**LVTILEINFO**</para>
            <para>structure that receives the retrieved information.</para>
            <para><strong>Returns</strong></para>
            <para>Return value not used.</para>
            </summary>
            <remarks>
            <para>
            Tile view is a new way of arranging and displaying items in a list-view control. The other views are icon, small icon,
            details, and list.
            </para>
            <para>
            <para>Note</para>
            <para>
            To use this message, you must provide a manifest specifying Comclt32.dll version 6.0. For more information on manifests, see
            Enabling Visual Styles.
            </para>
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_SETINSERTMARK">
            <summary>
            Sets the insertion point to the defined position.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Pointer to a</para>
            <para>LVINSERTMARK</para>
            <para>structure that specifies where to set the insertion point.</para>
            <para><strong>Returns</strong></para>
            <para>
            Returns <c>TRUE</c> if successful, or <c>FALSE</c> otherwise. <c>FALSE</c> is returned if the size in the <c>cbSize</c>
            member of the <c>LVINSERTMARK</c> structure does not equal the actual size of the structure, or when an insertion point does
            not apply in the current view.
            </para>
            </summary>
            <remarks>
            <para>
            An insertion point can only appear if the list-view control is in icon view, small icon view, or tile view, and is not in
            group-view mode.
            </para>
            <para>
            <para>Note</para>
            <para>
            To use this message, you must provide a manifest specifying Comclt32.dll version 6.0. For more information on manifests, see
            Enabling Visual Styles.
            </para>
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_GETINSERTMARK">
            <summary>
            Retrieves the position of the insertion point.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Pointer to a</para>
            <para>LVINSERTMARK</para>
            <para>structure that receives the position of the insertion point.</para>
            <para><strong>Returns</strong></para>
            <para>
            Returns <c>TRUE</c> if successful, or <c>FALSE</c> otherwise. <c>FALSE</c> is returned if the size in the <c>cbSize</c>
            member of the <c>LVINSERTMARK</c> structure does not equal the actual size of the structure.
            </para>
            </summary>
            <remarks>
            <para>
            An insertion point can appear only if the list-view control is in icon view, small icon view, or tile view, and is not in
            group-view mode.
            </para>
            <para>
            <para>Note</para>
            <para>
            To use this message, you must provide a manifest specifying Comclt32.dll version 6.0. For more information on manifests, see
            Enabling Visual Styles.
            </para>
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_INSERTMARKHITTEST">
            <summary>
            Retrieves the insertion point closest to a specified point.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Pointer to a **POINT** structure that contains the hit test coordinates.</para>
            <para><em>lParam</em></para>
            <para>Pointer to an</para>
            <para>LVINSERTMARK</para>
            <para>structure that specifies the insertion point closest to the coordinates defined by the *wParam* parameter.</para>
            <para><strong>Returns</strong></para>
            <para>
            Returns <c>TRUE</c> if successful, or <c>FALSE</c> otherwise. <c>FALSE</c> is returned if the size in the <c>cbSize</c>
            member of the <c>LVINSERTMARK</c> structure does not equal the actual size of the structure, or when an insertion point does
            not apply in the current view.
            </para>
            </summary>
            <remarks>
            <para>
            An insertion point can only appear if the list-view control is in icon view, small icon view, or tile view and is not in
            group-view mode.
            </para>
            <para>
            If insertion points do not apply for the view, the <c>LVINSERTMARK</c> structure contains a -1 in the <c>iItem</c> member.
            </para>
            <para>
            <para>Note</para>
            <para>
            To use this message, you must provide a manifest specifying Comclt32.dll version 6.0. For more information on manifests, see
            Enabling Visual Styles.
            </para>
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_GETINSERTMARKRECT">
            <summary>
            Retrieves the rectangle that bounds the insertion point.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Not used; must be zero.</para>
            <para><em>lParam</em></para>
            <para>Pointer to a</para>
            <para>**RECT**</para>
            <para>structure that contains the coordinates of a rectangle that bounds the insertion point.</para>
            <para><strong>Returns</strong></para>
            <para>Returns one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term><c>0</c></term>
            <term>No insertion point found.</term>
            </item>
            <item>
            <term><c>1</c></term>
            <term>Insertion point found.</term>
            </item>
            </list>
            </summary>
            <remarks>
            <para>Note</para>
            <para>
            To use this message, you must provide a manifest specifying Comclt32.dll version 6.0. For more information on manifests, see
            Enabling Visual Styles.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_SETINSERTMARKCOLOR">
            <summary>
            Sets the color of the insertion point.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>**COLORREF** structure that specifies the color to set the insertion point.</para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>COLORREF</c> structure set to the previous color.</para>
            </summary>
            <remarks>
            <para>Note</para>
            <para>
            To use this message, you must provide a manifest specifying Comclt32.dll version 6.0. For more information on manifests, see
            Enabling Visual Styles.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_GETINSERTMARKCOLOR">
            <summary>
            Retrieves the color of the insertion point.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns a <c>COLORREF</c> structure that contains the color of the insertion point.</para>
            </summary>
            <remarks>
            <para>Note</para>
            <para>
            To use this message, you must provide a manifest specifying Comclt32.dll version 6.0. For more information on manifests, see
            Enabling Visual Styles.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_GETSELECTEDCOLUMN">
            <summary>
            Retrieves an integer that specifies the selected column.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns an <c>UINT</c> that specifies the selected column.</para>
            </summary>
            <remarks>
            <para>Note</para>
            <para>
            To use this message, you must provide a manifest specifying Comclt32.dll version 6.0. For more information on manifests, see
            Enabling Visual Styles.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_ISGROUPVIEWENABLED">
            <summary>
            Checks whether the list-view control has group view enabled.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> if group view is enabled, or <c>FALSE</c> otherwise.</para>
            </summary>
            <remarks>
            <para>Note</para>
            <para>
            To use this message, you must provide a manifest specifying Comclt32.dll version 6.0. For more information on manifests, see
            Enabling Visual Styles.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_GETOUTLINECOLOR">
            <summary>
            Retrieves the color of the border of a list-view control if the <c>LVS_EX_BORDERSELECT</c> extended window style is set.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns a <c>COLORREF</c> structure that contains the color of the border of a list-view control.</para>
            </summary>
            <remarks>
            <para>Note</para>
            <para>
            To use this message, you must provide a manifest specifying Comclt32.dll version 6.0. For more information on manifests, see
            Enabling Visual Styles.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_SETOUTLINECOLOR">
            <summary>
            Sets the color of the border of a list-view control if the <c>LVS_EX_BORDERSELECT</c> extended window style is set.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>**COLORREF** structure that specifies the color to set the border.</para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>COLORREF</c> structure that contains the outline color.</para>
            </summary>
            <remarks>
            <para>Note</para>
            <para>
            To use this message, you must provide a manifest specifying Comclt32.dll version 6.0. For more information on manifests, see
            Enabling Visual Styles.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_CANCELEDITLABEL">
            <summary>
            Cancels an item text editing operation.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            </summary>
            <remarks>
            <para>
            <para>Note</para>
            <para>
            To use this message, you must provide a manifest specifying Comclt32.dll version 6.0. For more information on manifests, see
            Enabling Visual Styles.
            </para>
            </para>
            <para>This message causes a an LVN_ENDLABELEDIT notification to be sent.</para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_MAPINDEXTOID">
            <summary>
            Maps the index of an item to a unique ID.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>The index of an item.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns a unique ID.</para>
            </summary>
            <remarks>
            <para>
            List-view controls internally track items by index. This can present problems because indexes can change during the control's lifetime.
            </para>
            <para>
            The list-view control can tag an item with an ID when the item is created. You can use this ID to guarantee uniqueness during
            the lifetime of the list-view control.
            </para>
            <para>
            To uniquely identify an item, take the index that is returned from a call such as <c>IComponent::GetDisplayInfo</c> and call
            <c>LVM_MAPINDEXTOID</c>. The return value is a unique ID.
            </para>
            <para>
            <para>Note</para>
            <para>
            In a multithreaded environment, the index is only guaranteed on the thread that hosts the list-view control, not on
            background threads.
            </para>
            </para>
            <para>
            <para>Note</para>
            <para>
            To use this message, you must provide a manifest specifying Comclt32.dll version 6.0. For more information on manifests, see
            Enabling Visual Styles.
            </para>
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_MAPIDTOINDEX">
            <summary>
            Maps the ID of an item to an index.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>The unique ID of an item.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the most current index.</para>
            </summary>
            <remarks>
            <para>
            List-view controls internally track items by index. This can present problems because indexes can change during the control's lifetime.
            </para>
            <para>
            The list-view control can tag an item with an ID when the item is created. You can use this ID to guarantee uniqueness during
            the lifetime of the list-view control.
            </para>
            <para>
            To uniquely identify an item, take the index that is returned from a call such as <c>IComponent::GetDisplayInfo</c> and call
            <c>LVM_MAPINDEXTOID</c>. The return value is a unique ID.
            </para>
            <para>
            If you need the index of an item after an ID is created you can call <c>LVM_MAPIDTOINDEX</c> with the unique ID and it
            returns the most current index.
            </para>
            <para><c>LVM_MAPIDTOINDEX</c> is not supported under the <c>LVS_OWNERDATA</c> style.</para>
            <para>
            <para>Note</para>
            <para>
            In a multithreaded environment, the index is only guaranteed on the thread that hosts the list-view control, not on
            background threads.
            </para>
            </para>
            <para>
            <para>Note</para>
            <para>
            To use this message, you must provide a manifest specifying Comclt32.dll version 6.0. For more information on manifests, see
            Enabling Visual Styles.
            </para>
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_ISITEMVISIBLE">
            <summary>
            Indicates if an item in the list-view control is visible. Send this message explicitly or by using the
            <c>ListView_IsItemVisible</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>An index of the item in the list-view control.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> if visible, or <c>FALSE</c> otherwise.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_GETACCVERSION">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_GETEMPTYTEXT">
            <summary>
            Gets the text meant for display when the list-view control appears empty. Send this message explicitly or by using the
            <c>ListView_GetEmptyText</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>The size of the buffer pointed to by lParam, including the terminating <c>NULL</c>.</para>
            <para><em>lParam</em></para>
            <para>
            A pointer to a null-terminated, Unicode buffer of size specified by wParam to receive the text. The caller is responsible for
            allocating the buffer.
            </para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> if successful, or <c>FALSE</c> otherwise.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_GETFOOTERRECT">
            <summary>
            Retrieves the coordinates of the footer for a list-view control. Send this message explicitly or by using the
            <c>ListView_GetFooterRect</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Not used. Must be 0.</para>
            <para><em>lParam</em></para>
            <para>
            A pointer to a <c>RECT</c> structure to receive the coordinates. The calling process is responsible for allocating this
            structure. The coordinates received are expressed as client coordinates.
            </para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> if successful, or <c>FALSE</c> otherwise.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_GETFOOTERINFO">
            <summary>
            Gets information about the footer of a list-view control. Send this message explicitly or by using the
            <c>ListView_GetFooterInfo</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Not used. Must be 0.</para>
            <para><em>lParam</em></para>
            <para>
            A pointer to a <c>LVFOOTERINFO</c> structure to receive information depending on the value of the <c>mask</c> member. The
            calling process is responsible for allocating this structure and setting the <c>mask</c> member.
            </para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c>.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_GETFOOTERITEMRECT">
            <summary>
            Gets the coordinates of a footer for a specified item in a list-view control. Send this message explicitly or by using the
            <c>ListView_GetFooterItemRect</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>The index of the item in the list-view control.</para>
            <para><em>lParam</em></para>
            <para>
            A pointer to a <c>RECT</c> structure to receive the coordinates. The calling application is responsible for allocating this
            structure. The coordinates received are expressed as client coordinates.
            </para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> if successful, or <c>FALSE</c> otherwise.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_GETFOOTERITEM">
            <summary>
            Gets information on a footer item in a list-view control. Send this message explicitly or by using the
            <c>ListView_GetFooterItem</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>The index of the item.</para>
            <para><em>lParam</em></para>
            <para>
            A pointer to a <c>LVFOOTERITEM</c> structure to receive a value for the <c>state</c> and/or <c>pszText</c> members according
            to the value of the <c>mask</c> member. The calling process is responsible for allocating this structure and setting its
            members to indicate to the receiver what information to return. For more information, see <c>LVFOOTERITEM</c>.
            </para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> if successful, or <c>FALSE</c> otherwise.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_GETITEMINDEXRECT">
            <summary>
            Retrieves the bounding rectangle for all or part of a subitem in the current view of a list-view control. Send this message
            explicitly or by using the <c>ListView_GetItemIndexRect</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>
            A pointer to a <c>LVITEMINDEX</c> structure for the parent item of the subitem. The calling process is responsible for
            allocating this structure and setting its members. wParam must not be <c>NULL</c>.
            </para>
            <para><em>lParam</em></para>
            <para>
            A pointer to a <c>RECT</c> structure to receive the coordinates. The calling process is responsible for allocating this
            structure. lParam must not be <c>NULL</c>. Set the <c>top</c> member to the index of the subitem. Set the <c>left</c> member
            to one of the following values, indicating the part of the subitem for which the bounding rectangle is to be retrieved.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term><c>LVIR_BOUNDS</c></term>
            <term>Returns the bounding rectangle of the entire subitem, including the icon and label.</term>
            </item>
            <item>
            <term><c>LVIR_ICON</c></term>
            <term>Returns the bounding rectangle of the icon or small icon of the subitem.</term>
            </item>
            <item>
            <term><c>LVIR_LABEL</c></term>
            <term>Returns the bounding rectangle of the subitem text.</term>
            </item>
            </list>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> if successful, or <c>FALSE</c> otherwise.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_SETITEMINDEXSTATE">
            <summary>
            Sets the state of a list-view item. Send this message explicitly or by using the <c>ListView_SetItemIndexState</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>
            A pointer to an <c>LVITEMINDEX</c> structure for the item. The calling process is responsible for allocating this structure
            and setting the members.
            </para>
            <para><em>lParam</em></para>
            <para>
            A pointer to an <c>LVITEM</c> structure. The calling process is responsible for allocating memory for the structure. Set the
            <c>state</c> member to one or more (as a bitwise combination) of the List-View Item States flags. Set the <c>stateMask</c>
            member of the structure to indicate the valid bits of the <c>state</c> member. For more information, see the <c>stateMask</c>
            member of the <c>LVITEM</c> structure.
            </para>
            <para><strong>Returns</strong></para>
            <para>Returns one of the following values of type <c>HRESULT</c>.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term><c>E_FAIL</c></term>
            <term>The state could not be set.</term>
            </item>
            <item>
            <term><c>E_UNEXPECTED</c></term>
            <term>The list-view control was not ready for the operation.</term>
            </item>
            <item>
            <term><c>S_OK</c></term>
            <term>The operation was successful.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_GETNEXTITEMINDEX">
            <summary>
            Retrieves the index of an item in a specified list-view control that matches the specified properties and relationship to
            another item. Send this message explicitly or by using the <c>ListView_GetNextItemIndex</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>
            A pointer to the <c>LVITEMINDEX</c> structure for the item to begin the search with, or -1 to find the first item that
            matches the specified flags. The calling process is responsible for allocating this structure and setting its members.
            </para>
            <para><em>lParam</em></para>
            <para>
            Specifies the relationship to the item listed in parameter wParam. This can be one or a combination of the following values:
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>Searches by index.</term>
            <term/>
            </item>
            <item>
            <term><c>LVNI_ALL</c></term>
            <term>Searches for a subsequent item by index, the default value.</term>
            </item>
            <item>
            <term>Searches by physical relationship to the index of the item where the search is to begin.</term>
            <term/>
            </item>
            <item>
            <term><c>LVNI_ABOVE</c></term>
            <term>Searches for an item that is above the specified item.</term>
            </item>
            <item>
            <term><c>LVNI_BELOW</c></term>
            <term>Searches for an item that is below the specified item.</term>
            </item>
            <item>
            <term><c>LVNI_TOLEFT</c></term>
            <term>Searches for an item to the left of the specified item.</term>
            </item>
            <item>
            <term><c>LVNI_PREVIOUS</c></term>
            <term>
            <c>Windows Vista and later:</c> Searches for an item that is ordered before the item specified in <c>wParam</c>. The
            LVNI_PREVIOUS flag is not directional (LVNI_ABOVE will find the item positioned above, while LVNI_PREVIOUS will find the item
            ordered before.) The LVNI_PREVIOUS flag basically reverses the logic of the search performed by the LVM_GETNEXTITEM or
            LVM_GETNEXTITEMINDEX messages.
            </term>
            </item>
            <item>
            <term><c>LVNI_TORIGHT</c></term>
            <term>Searches for an item to the right of the specified item.</term>
            </item>
            <item>
            <term><c>LVNI_DIRECTIONMASK</c></term>
            <term>
            <c>Windows Vista and later:</c> A directional flag mask with value as follows: LVNI_ABOVE | LVNI_BELOW | LVNI_TOLEFT | LVNI_TORIGHT.
            </term>
            </item>
            <item>
            <term>The state of the item to find can be specified with one or a combination of the following values:</term>
            <term/>
            </item>
            <item>
            <term><c>LVNI_CUT</c></term>
            <term>The item has the <c>LVIS_CUT</c> state flag set.</term>
            </item>
            <item>
            <term><c>LVNI_DROPHILITED</c></term>
            <term>The item has the <c>LVIS_DROPHILITED</c> state flag set</term>
            </item>
            <item>
            <term><c>LVNI_FOCUSED</c></term>
            <term>The item has the <c>LVIS_FOCUSED</c> state flag set.</term>
            </item>
            <item>
            <term><c>LVNI_SELECTED</c></term>
            <term>The item has the <c>LVIS_SELECTED</c> state flag set.</term>
            </item>
            <item>
            <term><c>LVNI_STATEMASK</c></term>
            <term>
            <c>Windows Vista and later:</c> A state flag mask with value as follows: LVNI_FOCUSED | LVNI_SELECTED | LVNI_CUT | LVNI_DROPHILITED.
            </term>
            </item>
            <item>
            <term>Searches by appearance of items or by group.</term>
            <term/>
            </item>
            <item>
            <term><c>LVNI_VISIBLEORDER</c></term>
            <term><c>Windows Vista and later:</c> Search the visible order.</term>
            </item>
            <item>
            <term><c>LVNI_VISIBLEONLY</c></term>
            <term><c>Windows Vista and later:</c> Search the visible items.</term>
            </item>
            <item>
            <term><c>LVNI_SAMEGROUPONLY</c></term>
            <term><c>Windows Vista and later:</c> Search the current group.</term>
            </item>
            <item>
            <term>If an item does not have all of the specified state flags set, the search continues with the next item.</term>
            <term/>
            </item>
            </list>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> if successful, or <c>FALSE</c> otherwise.</para>
            </summary>
            <remarks>
            Note that the following flags, for use only with Windows Vista, are mutually exclusive of any other flags in use:
            LVNI_PREVIOUS, LVNI_VISIBLEONLY, LVNI_SAMEGROUPONLY, LVNI_VISIBLEORDER, LVNI_DIRECTIONMASK, and LVNI_STATEMASK.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewMessage.LVM_SETPRESERVEALPHA">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.ListViewNextItemFlag">
            <summary>Specifies the relationship to the item listed in parameter wParam in LVM_GETNEXTITEMINDEX.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewNextItemFlag.LVNI_ALL">
            <summary>Searches for a subsequent item by index, the default value.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewNextItemFlag.LVNI_FOCUSED">
            <summary>The item has the LVIS_FOCUSED state flag set.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewNextItemFlag.LVNI_SELECTED">
            <summary>The item has the LVIS_SELECTED state flag set.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewNextItemFlag.LVNI_CUT">
            <summary>The item has the LVIS_CUT state flag set.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewNextItemFlag.LVNI_DROPHILITED">
            <summary>The item has the LVIS_DROPHILITED state flag set</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewNextItemFlag.LVNI_STATEMASK">
            <summary>Windows Vista and later: A state flag mask with value as follows: LVNI_FOCUSED | LVNI_SELECTED | LVNI_CUT | LVNI_DROPHILITED.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewNextItemFlag.LVNI_VISIBLEORDER">
            <summary>Windows Vista and later: Search the visible order.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewNextItemFlag.LVNI_PREVIOUS">
            <summary>
            Windows Vista and later: Searches for an item that is ordered before the item specified in wParam. The LVNI_PREVIOUS flag is
            not directional (LVNI_ABOVE will find the item positioned above, while LVNI_PREVIOUS will find the item ordered before.) The
            LVNI_PREVIOUS flag basically reverses the logic of the search performed by the LVM_GETNEXTITEM or LVM_GETNEXTITEMINDEX messages.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewNextItemFlag.LVNI_VISIBLEONLY">
            <summary>Windows Vista and later: Search the visible items.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewNextItemFlag.LVNI_SAMEGROUPONLY">
            <summary>Windows Vista and later: Search the current group.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewNextItemFlag.LVNI_ABOVE">
            <summary>Searches for an item that is above the specified item.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewNextItemFlag.LVNI_BELOW">
            <summary>Searches for an item that is below the specified item.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewNextItemFlag.LVNI_TOLEFT">
            <summary>Searches for an item to the left of the specified item.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewNextItemFlag.LVNI_TORIGHT">
            <summary>Searches for an item to the right of the specified item.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewNextItemFlag.LVNI_DIRECTIONMASK">
            <summary>
            Windows Vista and later: A directional flag mask with value as follows: LVNI_ABOVE | LVNI_BELOW | LVNI_TOLEFT | LVNI_TORIGHT.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.ListViewNotification">
            <summary>ListView notification identifiers.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewNotification.LVN_BEGINDRAG">
            <summary>
            <para>
            Notifies a list-view control's parent window that a drag-and-drop operation involving the left mouse button is being
            initiated. This notification code is sent in the form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>LVN_BEGINDRAG pnmv = (LPNMLISTVIEW) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>
            Pointer to an <c>NMLISTVIEW</c> structure. The <c>iItem</c> member identifies the item being dragged, and the other members
            are zero.
            </para>
            <para><strong>Returns</strong></para>
            <para>No return value.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewNotification.LVN_BEGINLABELEDIT">
            <summary>
            <para>
            Notifies a list-view control's parent window about the start of label editing for an item. This notification code is sent in
            the form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>LVN_BEGINLABELEDIT pdi = (LPNMLVDISPINFO) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>
            Pointer to an <c>NMLVDISPINFO</c> structure. The <c>item</c> member of this structure is an <c>LVITEM</c> structure whose
            <c>iItem</c> member identifies the item being edited. Note that subitems cannot be edited; the <c>iSubItem</c> member is
            always set to zero.
            </para>
            <para><strong>Returns</strong></para>
            <para>To allow the user to edit the label, return <c>FALSE</c>.</para>
            <para>To prevent the user from editing the label, return <c>TRUE</c>.</para>
            </summary>
            <remarks>
            <para>
            When label editing begins, an edit control is created, positioned, and initialized. Before it is displayed, the list-view
            control sends its parent window an LVN_BEGINLABELEDIT notification code.
            </para>
            <para>
            To customize label editing, implement a handler for LVN_BEGINLABELEDIT and have it send an <c>LVM_GETEDITCONTROL</c> message
            to the list-view control. If a label is being edited, the return value will be a handle to the edit control. Use this handle
            to customize the edit control by sending the usual <c>EM_XXX</c> messages.
            </para>
            <para>When the user cancels or completes the editing, the parent window receives an LVN_ENDLABELEDIT notification code.</para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewNotification.LVN_BEGINLABELEDITA">
            <summary>
            <para>
            Notifies a list-view control's parent window about the start of label editing for an item. This notification code is sent in
            the form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>LVN_BEGINLABELEDIT pdi = (LPNMLVDISPINFO) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>
            Pointer to an <c>NMLVDISPINFO</c> structure. The <c>item</c> member of this structure is an <c>LVITEM</c> structure whose
            <c>iItem</c> member identifies the item being edited. Note that subitems cannot be edited; the <c>iSubItem</c> member is
            always set to zero.
            </para>
            <para><strong>Returns</strong></para>
            <para>To allow the user to edit the label, return <c>FALSE</c>.</para>
            <para>To prevent the user from editing the label, return <c>TRUE</c>.</para>
            </summary>
            <remarks>
            <para>
            When label editing begins, an edit control is created, positioned, and initialized. Before it is displayed, the list-view
            control sends its parent window an LVN_BEGINLABELEDIT notification code.
            </para>
            <para>
            To customize label editing, implement a handler for LVN_BEGINLABELEDIT and have it send an <c>LVM_GETEDITCONTROL</c> message
            to the list-view control. If a label is being edited, the return value will be a handle to the edit control. Use this handle
            to customize the edit control by sending the usual <c>EM_XXX</c> messages.
            </para>
            <para>When the user cancels or completes the editing, the parent window receives an LVN_ENDLABELEDIT notification code.</para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewNotification.LVN_BEGINLABELEDITW">
            <summary>
            <para>
            Notifies a list-view control's parent window about the start of label editing for an item. This notification code is sent in
            the form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>LVN_BEGINLABELEDIT pdi = (LPNMLVDISPINFO) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>
            Pointer to an <c>NMLVDISPINFO</c> structure. The <c>item</c> member of this structure is an <c>LVITEM</c> structure whose
            <c>iItem</c> member identifies the item being edited. Note that subitems cannot be edited; the <c>iSubItem</c> member is
            always set to zero.
            </para>
            <para><strong>Returns</strong></para>
            <para>To allow the user to edit the label, return <c>FALSE</c>.</para>
            <para>To prevent the user from editing the label, return <c>TRUE</c>.</para>
            </summary>
            <remarks>
            <para>
            When label editing begins, an edit control is created, positioned, and initialized. Before it is displayed, the list-view
            control sends its parent window an LVN_BEGINLABELEDIT notification code.
            </para>
            <para>
            To customize label editing, implement a handler for LVN_BEGINLABELEDIT and have it send an <c>LVM_GETEDITCONTROL</c> message
            to the list-view control. If a label is being edited, the return value will be a handle to the edit control. Use this handle
            to customize the edit control by sending the usual <c>EM_XXX</c> messages.
            </para>
            <para>When the user cancels or completes the editing, the parent window receives an LVN_ENDLABELEDIT notification code.</para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewNotification.LVN_BEGINRDRAG">
            <summary>
            <para>
            Notifies a list-view control's parent window that a drag-and-drop operation involving the right mouse button is being
            initiated. This notification code is sent in the form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>LVN_BEGINRDRAG pnmv = (LPNMLISTVIEW) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>
            Pointer to an <c>NMLISTVIEW</c> structure. The <c>iItem</c> member identifies the item being dragged, and the other members
            are zero.
            </para>
            <para><strong>Returns</strong></para>
            <para>No return value.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewNotification.LVN_BEGINSCROLL">
            <summary>
            <para>
            Notifies a list-view control's parent window when a scrolling operation starts. This notification code is sent in the form of
            a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>LVN_BEGINSCROLL pnmLVScroll = (LPNMLVSCROLL) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>
            Pointer to a <c>NMLVSCROLL</c> structure that contains the horizontal or vertical position of where the scroll operation starts.
            </para>
            <para><strong>Returns</strong></para>
            <para>Return value not used.</para>
            </summary>
            <remarks>
            <para>Note</para>
            <para>
            To use this notification code, you must provide a manifest specifying Comclt32.dll version 6.0. For more information on
            manifests, see Enabling Visual Styles.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewNotification.LVN_COLUMNCLICK">
            <summary>
            <para>
            Notifies a list-view control's parent window that a column header was clicked while the list-view control was in report mode.
            This notification code is sent in the form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>LVN_COLUMNCLICK pnmv = (LPNMLISTVIEW) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>
            Pointer to an <c>NMLISTVIEW</c> structure. The <c>iItem</c> member is -1, and the <c>iSubItem</c> member identifies the
            column. All other members are zero.
            </para>
            <para><strong>Returns</strong></para>
            <para>No return value.</para>
            </summary>
            <remarks>
            Using header control formats such as HDF_CHECKBOX to modify the format of column headers in a list-view control causes the
            control to send the HDN_ITEMSTATEICONCLICK notification code instead of LVN_COLUMNCLICK when a header item is clicked.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewNotification.LVN_COLUMNDROPDOWN">
            <summary>
            <para>
            Sent by a list-view control when the list-view's drop-down button is pressed. This notification code is sent in the form of a
            <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>LVN_COLUMNDROPDOWN pnmv = (LPNMLISTVIEW) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>
            Pointer to a <c>NMLISTVIEW</c> structure that describes the notification code. The caller is responsible for allocating this
            structure, including the contained <c>NMHDR</c> structure. Set the members of the <c>NMHDR</c> structure. The <c>code</c>
            member must be set to LVN_COLUMNDROPDOWN.
            </para>
            <para>
            Set the <c>iItem</c> member of the <c>NMLISTVIEW</c> structure to -1. Set the <c>iSubItem</c> member to the index of the
            subitem. Set the <c>uNewState</c>, <c>uOldState</c>, and <c>lParam</c> members to zero. The remaining members of the
            <c>NMLISTVIEW</c> structure are not used.
            </para>
            <para><strong>Returns</strong></para>
            <para>No return value.</para>
            </summary>
            <remarks>
            <para>
            The notification receiver casts lParam to retrieve the <c>NMLISTVIEW</c> structure. The wParam parameter contains the ID of
            the control that sends the notification code.
            </para>
            <para>
            If a header control is a child of the list-view, the header control should send this notidication code to the list-view
            control when the header control receives the HDN_DROPDOWN notification code.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewNotification.LVN_COLUMNOVERFLOWCLICK">
            <summary>
            <para>
            Sent by a list-view control when its overflow button is clicked. This notification code is sent in the form of a
            <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>LVN_COLUMNOVERFLOWCLICK pnmv = (LPNMLISTVIEW) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>
            Pointer to a <c>NMLISTVIEW</c> structure that describes the notification code. The caller is responsible for allocating this
            structure, including the contained <c>NMHDR</c> structure. Set the members of the <c>NMHDR</c> structure. The <c>code</c>
            member must be set to LVN_COLUMNOVERFLOWCLICK.
            </para>
            <para>
            Set the <c>iItem</c> member of the <c>NMLISTVIEW</c> structure to -1. Set the <c>iSubItem</c> member to the index of the
            subitem. Set the <c>uNewState</c>, <c>uOldState</c>, and <c>lParam</c> members to zero. The remaining members of the
            <c>NMLISTVIEW</c> structure are not used.
            </para>
            <para><strong>Returns</strong></para>
            <para>No return value.</para>
            </summary>
            <remarks>
            <para>
            The notification receiver casts lParam to retrieve the <c>NMLISTVIEW</c> structure. The wParam parameter contains the ID of
            the control that sends the notification code.
            </para>
            <para>
            If a header control is a child of the listview, the header control should send this notification code to the listview control
            when the header control receives the HDN_OVERFLOWCLICK notification code.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewNotification.LVN_DELETEALLITEMS">
            <summary>
            <para>
            Notifies a list-view control's parent window that all items in the control are about to be deleted. This notification code is
            sent in the form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>LVN_DELETEALLITEMS pnmv = (LPNMLISTVIEW) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>Pointer to an <c>NMLISTVIEW</c> structure. The <c>iItem</c> member is -1, and the other members are zero.</para>
            <para><strong>Returns</strong></para>
            <para>To suppress subsequent LVN_DELETEITEM notification codes, return <c>TRUE</c>.</para>
            <para>To receive subsequent LVN_DELETEITEM notification codes, return <c>FALSE</c>.</para>
            </summary>
            <remarks>
            <para>
            A list-view control sends the <c>LVM_DELETEALLITEMS</c> notification code when it is destroyed or when it receives the
            <c>LVM_DELETEALLITEMS</c> message. If <c>LVM_DELETEALLITEMS</c> does not return <c>TRUE</c>, the control will also send an
            LVN_DELETEITEM notification code as each item is deleted.
            </para>
            <para>
            If the <c>LVM_DELETEALLITEMS</c> message handler is in a dialog box procedure, return <c>TRUE</c> from the dialog box
            procedure, and use the <c>SetWindowLong</c> function with DWL_MSGRESULT to set the message return value.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewNotification.LVN_DELETEITEM">
            <summary>
            <para>
            Notifies a list-view control's parent window that an item is about to be deleted. This notification code is sent in the form
            of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>LVN_DELETEITEM pnmv = (LPNMLISTVIEW) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>
            Pointer to an <c>NMLISTVIEW</c> structure. The <c>iItem</c> member identifies the item being deleted. If the control does not
            have the <c>LVS_OWNERDATA</c> style, then the lParam is the application-defined data associated with the item. All other
            members of this structure are zero.
            </para>
            <para><strong>Returns</strong></para>
            <para>No return value.</para>
            </summary>
            <remarks>Do not add, delete, or rearrange items in the list view while processing this notification code.</remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewNotification.LVN_ENDLABELEDIT">
            <summary>
            <para>
            Notifies a list-view control's parent window about the end of label editing for an item. This notification code is sent in
            the form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>LVN_ENDLABELEDIT pdi = (LPNMLVDISPINFO) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>
            Pointer to an <c>NMLVDISPINFO</c> structure. The <c>item</c> member of this structure is an <c>LVITEM</c> structure whose
            <c>iItem</c> member identifies the item being edited. The <c>pszText</c> member of <c>item</c> contains a valid value when
            the LVN_ENDLABELEDIT notification code is sent, regardless of whether the LVIF_TEXT flag is set in the <c>mask</c> member of
            the <c>LVITEM</c> structure. If the user cancels editing, the <c>pszText</c> member of the <c>LVITEM</c> structure is
            <c>NULL</c>; otherwise, <c>pszText</c> is the address of the edited text.
            </para>
            <para><strong>Returns</strong></para>
            <para>
            If the <c>pszText</c> member of the <c>LVITEM</c> structure is non- <c>NULL</c>, return <c>TRUE</c> to set the item's label
            to the edited text. Return <c>FALSE</c> to reject the edited text and revert to the original label.
            </para>
            <para>If the <c>pszText</c> member of the <c>LVITEM</c> structure is <c>NULL</c>, the return value is ignored.</para>
            </summary>
            <remarks>
            <para>
            The return value of the dialog procedure is whether the message was handled. The second return value must be set by calling
            <c>SetwindowLongPtr</c> with <c>DWLP_MSGRESULT</c>.
            </para>
            <para>
            When the user begins editing an item label, the parent window of the list-view control receives an LVN_BEGINLABELEDIT
            notification code. When the user cancels or completes the editing, the parent window receives an LVN_ENDLABELEDIT
            notification code.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewNotification.LVN_ENDLABELEDITA">
            <summary>
            <para>
            Notifies a list-view control's parent window about the end of label editing for an item. This notification code is sent in
            the form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>LVN_ENDLABELEDIT pdi = (LPNMLVDISPINFO) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>
            Pointer to an <c>NMLVDISPINFO</c> structure. The <c>item</c> member of this structure is an <c>LVITEM</c> structure whose
            <c>iItem</c> member identifies the item being edited. The <c>pszText</c> member of <c>item</c> contains a valid value when
            the LVN_ENDLABELEDIT notification code is sent, regardless of whether the LVIF_TEXT flag is set in the <c>mask</c> member of
            the <c>LVITEM</c> structure. If the user cancels editing, the <c>pszText</c> member of the <c>LVITEM</c> structure is
            <c>NULL</c>; otherwise, <c>pszText</c> is the address of the edited text.
            </para>
            <para><strong>Returns</strong></para>
            <para>
            If the <c>pszText</c> member of the <c>LVITEM</c> structure is non- <c>NULL</c>, return <c>TRUE</c> to set the item's label
            to the edited text. Return <c>FALSE</c> to reject the edited text and revert to the original label.
            </para>
            <para>If the <c>pszText</c> member of the <c>LVITEM</c> structure is <c>NULL</c>, the return value is ignored.</para>
            </summary>
            <remarks>
            <para>
            The return value of the dialog procedure is whether the message was handled. The second return value must be set by calling
            <c>SetwindowLongPtr</c> with <c>DWLP_MSGRESULT</c>.
            </para>
            <para>
            When the user begins editing an item label, the parent window of the list-view control receives an LVN_BEGINLABELEDIT
            notification code. When the user cancels or completes the editing, the parent window receives an LVN_ENDLABELEDIT
            notification code.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewNotification.LVN_ENDLABELEDITW">
            <summary>
            <para>
            Notifies a list-view control's parent window about the end of label editing for an item. This notification code is sent in
            the form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>LVN_ENDLABELEDIT pdi = (LPNMLVDISPINFO) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>
            Pointer to an <c>NMLVDISPINFO</c> structure. The <c>item</c> member of this structure is an <c>LVITEM</c> structure whose
            <c>iItem</c> member identifies the item being edited. The <c>pszText</c> member of <c>item</c> contains a valid value when
            the LVN_ENDLABELEDIT notification code is sent, regardless of whether the LVIF_TEXT flag is set in the <c>mask</c> member of
            the <c>LVITEM</c> structure. If the user cancels editing, the <c>pszText</c> member of the <c>LVITEM</c> structure is
            <c>NULL</c>; otherwise, <c>pszText</c> is the address of the edited text.
            </para>
            <para><strong>Returns</strong></para>
            <para>
            If the <c>pszText</c> member of the <c>LVITEM</c> structure is non- <c>NULL</c>, return <c>TRUE</c> to set the item's label
            to the edited text. Return <c>FALSE</c> to reject the edited text and revert to the original label.
            </para>
            <para>If the <c>pszText</c> member of the <c>LVITEM</c> structure is <c>NULL</c>, the return value is ignored.</para>
            </summary>
            <remarks>
            <para>
            The return value of the dialog procedure is whether the message was handled. The second return value must be set by calling
            <c>SetwindowLongPtr</c> with <c>DWLP_MSGRESULT</c>.
            </para>
            <para>
            When the user begins editing an item label, the parent window of the list-view control receives an LVN_BEGINLABELEDIT
            notification code. When the user cancels or completes the editing, the parent window receives an LVN_ENDLABELEDIT
            notification code.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewNotification.LVN_ENDSCROLL">
            <summary>
            <para>
            Notifies a list-view control's parent window when a scrolling operation ends. This notification code is sent in the form of a
            <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>LVN_ENDSCROLL pnmLVScroll = (LPNMLVSCROLL) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>
            Pointer to a <c>NMLVSCROLL</c> structure that contains the horizontal or vertical position of where the scroll operation ends.
            </para>
            <para><strong>Returns</strong></para>
            <para>Return value not used.</para>
            </summary>
            <remarks>
            <para>Note</para>
            <para>
            To use this notification code, you must provide a manifest specifying Comclt32.dll version 6.0. For more information on
            manifests, see Enabling Visual Styles.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewNotification.LVN_GETDISPINFO">
            <summary>
            <para>
            Sent by a list-view control to its parent window. It is a request for the parent window to provide information needed to
            display or sort a list-view item. This notification code is sent in the form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>LVN_GETDISPINFO pdi = (NMLVDISPINFO*) lParam</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>
            Pointer to an <c>NMLVDISPINFO</c> structure. On input, the <c>LVITEM</c> structure contained in this structure specifies the
            type of information required and identifies the item or subitem of interest. Use the <c>LVITEM</c> structure to return the
            requested information to the control. If your message handler sets the LVIF_DI_SETITEM flag in the <c>mask</c> member of the
            <c>LVITEM</c> structure, the list-view control stores the requested information and will not ask for it again.
            </para>
            <para><strong>Returns</strong></para>
            <para>No return value.</para>
            </summary>
            <remarks>
            <para>
            The notification receiver casts lParam to retrieve the <c>NMLVDISPINFO</c> structure. The wParam parameter contains the
            notification code.
            </para>
            <para>
            A list-view control sends the <c>LVN_GETDISPINFO</c> notification code to retrieve item information that is stored by the
            application rather than the control. The information can be text or icon information for an item. It can also be item state
            information. See the <c>LVM_SETCALLBACKMASK</c> message for more information on implementing item state on a callback basis.
            </para>
            <para>For more information on list-view callbacks, see Callback Items and the Callback Mask.</para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewNotification.LVN_GETDISPINFOA">
            <summary>
            <para>
            Sent by a list-view control to its parent window. It is a request for the parent window to provide information needed to
            display or sort a list-view item. This notification code is sent in the form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>LVN_GETDISPINFO pdi = (NMLVDISPINFO*) lParam</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>
            Pointer to an <c>NMLVDISPINFO</c> structure. On input, the <c>LVITEM</c> structure contained in this structure specifies the
            type of information required and identifies the item or subitem of interest. Use the <c>LVITEM</c> structure to return the
            requested information to the control. If your message handler sets the LVIF_DI_SETITEM flag in the <c>mask</c> member of the
            <c>LVITEM</c> structure, the list-view control stores the requested information and will not ask for it again.
            </para>
            <para><strong>Returns</strong></para>
            <para>No return value.</para>
            </summary>
            <remarks>
            <para>
            The notification receiver casts lParam to retrieve the <c>NMLVDISPINFO</c> structure. The wParam parameter contains the
            notification code.
            </para>
            <para>
            A list-view control sends the <c>LVN_GETDISPINFO</c> notification code to retrieve item information that is stored by the
            application rather than the control. The information can be text or icon information for an item. It can also be item state
            information. See the <c>LVM_SETCALLBACKMASK</c> message for more information on implementing item state on a callback basis.
            </para>
            <para>For more information on list-view callbacks, see Callback Items and the Callback Mask.</para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewNotification.LVN_GETDISPINFOW">
            <summary>
            <para>
            Sent by a list-view control to its parent window. It is a request for the parent window to provide information needed to
            display or sort a list-view item. This notification code is sent in the form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>LVN_GETDISPINFO pdi = (NMLVDISPINFO*) lParam</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>
            Pointer to an <c>NMLVDISPINFO</c> structure. On input, the <c>LVITEM</c> structure contained in this structure specifies the
            type of information required and identifies the item or subitem of interest. Use the <c>LVITEM</c> structure to return the
            requested information to the control. If your message handler sets the LVIF_DI_SETITEM flag in the <c>mask</c> member of the
            <c>LVITEM</c> structure, the list-view control stores the requested information and will not ask for it again.
            </para>
            <para><strong>Returns</strong></para>
            <para>No return value.</para>
            </summary>
            <remarks>
            <para>
            The notification receiver casts lParam to retrieve the <c>NMLVDISPINFO</c> structure. The wParam parameter contains the
            notification code.
            </para>
            <para>
            A list-view control sends the <c>LVN_GETDISPINFO</c> notification code to retrieve item information that is stored by the
            application rather than the control. The information can be text or icon information for an item. It can also be item state
            information. See the <c>LVM_SETCALLBACKMASK</c> message for more information on implementing item state on a callback basis.
            </para>
            <para>For more information on list-view callbacks, see Callback Items and the Callback Mask.</para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewNotification.LVN_GETEMPTYMARKUP">
            <summary>
            <para>
            Sent by list-view control to its parent window when the control has no items. The LVN_GETEMPTYMARKUP notification code is a
            request for the parent window to provide markup text. This notification code is sent in the form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>LVN_GETEMPTYMARKUP pnmMarkup = (NMLVEMPTYMARKUP*) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>
            Pointer to a <c>NMLVEMPTYMARKUP</c> structure. Set the members of this structure to provide markup text for the list-view control.
            </para>
            <para><strong>Returns</strong></para>
            <para>Return <c>TRUE</c> to set the markup text in the list-view control, or <c>FALSE</c> otherwise.</para>
            </summary>
            <remarks>
            The notification receiver casts lParam to retrieve the <c>NMLVEMPTYMARKUP</c> structure. The wParam parameter contains the ID
            of the control that sends this message.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewNotification.LVN_GETINFOTIP">
            <summary>
            <para>
            Sent by a large icon view list-view control that has the <c>LVS_EX_INFOTIP</c> extended style. This notification code is sent
            when the list-view control is requesting additional text information to be displayed in a tooltip. It is sent in the form of
            a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>LVN_GETINFOTIP pGetInfoTip = (LPNMLVGETINFOTIP) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>Pointer to an <c>NMLVGETINFOTIP</c> structure that contains information about this notification code.</para>
            <para><strong>Returns</strong></para>
            <para>The return value for this notification is not used.</para>
            </summary>
            <remarks>
            This notification code is only sent by list-view controls that have the <c>LVS_EX_INFOTIP</c> extended style. The
            LVN_GETINFOTIP notification code is sent only for subitem 0.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewNotification.LVN_GETINFOTIPA">
            <summary>
            <para>
            Sent by a large icon view list-view control that has the <c>LVS_EX_INFOTIP</c> extended style. This notification code is sent
            when the list-view control is requesting additional text information to be displayed in a tooltip. It is sent in the form of
            a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>LVN_GETINFOTIP pGetInfoTip = (LPNMLVGETINFOTIP) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>Pointer to an <c>NMLVGETINFOTIP</c> structure that contains information about this notification code.</para>
            <para><strong>Returns</strong></para>
            <para>The return value for this notification is not used.</para>
            </summary>
            <remarks>
            This notification code is only sent by list-view controls that have the <c>LVS_EX_INFOTIP</c> extended style. The
            LVN_GETINFOTIP notification code is sent only for subitem 0.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewNotification.LVN_GETINFOTIPW">
            <summary>
            <para>
            Sent by a large icon view list-view control that has the <c>LVS_EX_INFOTIP</c> extended style. This notification code is sent
            when the list-view control is requesting additional text information to be displayed in a tooltip. It is sent in the form of
            a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>LVN_GETINFOTIP pGetInfoTip = (LPNMLVGETINFOTIP) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>Pointer to an <c>NMLVGETINFOTIP</c> structure that contains information about this notification code.</para>
            <para><strong>Returns</strong></para>
            <para>The return value for this notification is not used.</para>
            </summary>
            <remarks>
            This notification code is only sent by list-view controls that have the <c>LVS_EX_INFOTIP</c> extended style. The
            LVN_GETINFOTIP notification code is sent only for subitem 0.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewNotification.LVN_HOTTRACK">
            <summary>
            <para>
            Sent by a list-view control when the user moves the mouse over an item. This notification code is only sent by list-view
            controls that have the <c>LVS_EX_TRACKSELECT</c> extended list-view style. It is sent in the form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>LVN_HOTTRACK lpnmlv = (LPNMLISTVIEW) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>
            Pointer to an <c>NMLISTVIEW</c> structure that contains information about this notification code. The <c>iItem</c>,
            <c>iSubItem</c>, and <c>ptAction</c> members of this structure contain information about the item. The receiving application
            can modify the <c>iItem</c> member to specify the item that will be selected. If <c>iItem</c> is set to -1, no item will be selected.
            </para>
            <para><strong>Returns</strong></para>
            <para>
            Return zero to allow the list view to perform its normal track select processing. If the application returns nonzero, the
            item will not be selected.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewNotification.LVN_INCREMENTALSEARCH">
            <summary>
            <para>
            Notifies a list-view control's parent window that an incremental search has started. This notification code is sent in the
            form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>LVN_INCREMENTALSEARCH pnmv = (LPNMLVFINDITEM) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>
            Pointer to a <c>NMLVFINDITEM</c> structure that describes the notification code. The caller is responsible for allocating
            this structure, including the contained <c>NMHDR</c> and <c>LVFINDINFO</c> structures. Set the members of the <c>NMHDR</c>
            structure. The <c>code</c> member must be set to LVN_INCREMENTALSEARCH.
            </para>
            <para><strong>Returns</strong></para>
            <para>No return value.</para>
            </summary>
            <remarks>
            <para>
            The notification receiver casts lParam to retrieve the <c>NMLVFINDITEM</c> structure. The wParam parameter contains the ID of
            the control that sends this notification code.
            </para>
            <para>
            This notification code gives an application (or the notification receiver) the opportunity to customize an incremental
            search. For example, if the search items are numeric, the application can perform a numerical search instead of a string search.
            </para>
            <para>
            The application sets the <c>lParam</c> member of the <c>LVFINDINFO</c> structure contained in <c>NMLVFINDITEM</c> structure
            to the result of the search, or to another application defined value to fail the search and indicate to the control how to proceed.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewNotification.LVN_INCREMENTALSEARCHA">
            <summary>
            <para>
            Notifies a list-view control's parent window that an incremental search has started. This notification code is sent in the
            form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>LVN_INCREMENTALSEARCH pnmv = (LPNMLVFINDITEM) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>
            Pointer to a <c>NMLVFINDITEM</c> structure that describes the notification code. The caller is responsible for allocating
            this structure, including the contained <c>NMHDR</c> and <c>LVFINDINFO</c> structures. Set the members of the <c>NMHDR</c>
            structure. The <c>code</c> member must be set to LVN_INCREMENTALSEARCH.
            </para>
            <para><strong>Returns</strong></para>
            <para>No return value.</para>
            </summary>
            <remarks>
            <para>
            The notification receiver casts lParam to retrieve the <c>NMLVFINDITEM</c> structure. The wParam parameter contains the ID of
            the control that sends this notification code.
            </para>
            <para>
            This notification code gives an application (or the notification receiver) the opportunity to customize an incremental
            search. For example, if the search items are numeric, the application can perform a numerical search instead of a string search.
            </para>
            <para>
            The application sets the <c>lParam</c> member of the <c>LVFINDINFO</c> structure contained in <c>NMLVFINDITEM</c> structure
            to the result of the search, or to another application defined value to fail the search and indicate to the control how to proceed.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewNotification.LVN_INCREMENTALSEARCHW">
            <summary>
            <para>
            Notifies a list-view control's parent window that an incremental search has started. This notification code is sent in the
            form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>LVN_INCREMENTALSEARCH pnmv = (LPNMLVFINDITEM) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>
            Pointer to a <c>NMLVFINDITEM</c> structure that describes the notification code. The caller is responsible for allocating
            this structure, including the contained <c>NMHDR</c> and <c>LVFINDINFO</c> structures. Set the members of the <c>NMHDR</c>
            structure. The <c>code</c> member must be set to LVN_INCREMENTALSEARCH.
            </para>
            <para><strong>Returns</strong></para>
            <para>No return value.</para>
            </summary>
            <remarks>
            <para>
            The notification receiver casts lParam to retrieve the <c>NMLVFINDITEM</c> structure. The wParam parameter contains the ID of
            the control that sends this notification code.
            </para>
            <para>
            This notification code gives an application (or the notification receiver) the opportunity to customize an incremental
            search. For example, if the search items are numeric, the application can perform a numerical search instead of a string search.
            </para>
            <para>
            The application sets the <c>lParam</c> member of the <c>LVFINDINFO</c> structure contained in <c>NMLVFINDITEM</c> structure
            to the result of the search, or to another application defined value to fail the search and indicate to the control how to proceed.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewNotification.LVN_INSERTITEM">
            <summary>
            <para>
            Notifies a list-view control's parent window that a new item was inserted. This notification code is sent in the form of a
            <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>LVN_INSERTITEM pnmv = (LPNMLISTVIEW) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>
            Pointer to an <c>NMLISTVIEW</c> structure. The <c>iItem</c> member identifies the new item, and the other members are zero.
            </para>
            <para><strong>Returns</strong></para>
            <para>No return value.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewNotification.LVN_ITEMACTIVATE">
            <summary>
            <para>
            Sent by a list-view control when the user activates an item. This notification code is sent in the form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>LVN_ITEMACTIVATE #if (_WIN32_IE &gt;= 0x0400) lpnmia = (LPNMITEMACTIVATE)lParam; #else lpnm = (LPNMHDR)lParam; #endif</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>Version 4.71. Pointer to an <c>NMITEMACTIVATE</c> structure that contains information about this notification code.</para>
            <para>Version 4.70 and earlier. Pointer to an <c>NMHDR</c> structure that contains information about this notification code.</para>
            <para><strong>Returns</strong></para>
            <para>The application receiving this notification code must return zero.</para>
            </summary>
            <remarks>
            To obtain the items being activated, the receiving application should use the <c>LVM_GETSELECTEDCOUNT</c> message to retrieve
            the number of items that are selected and then send the <c>LVM_GETNEXTITEM</c> message with <c>LVNI_SELECTED</c> until all of
            the items have been retrieved.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewNotification.LVN_ITEMCHANGED">
            <summary>
            <para>
            Notifies a list-view control's parent window that an item has changed. This notification code is sent in the form of a
            <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>LVN_ITEMCHANGED pnmv = (LPNMLISTVIEW) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>
            Pointer to an <c>NMLISTVIEW</c> structure that identifies the item and specifies which of its attributes have changed. If the
            <c>iItem</c> member of the structure pointed to by lParam is -1, the change has been applied to all items in the list view.
            </para>
            <para><strong>Returns</strong></para>
            <para>No return value.</para>
            </summary>
            <remarks>
            If a list-view control has the <c>LVS_OWNERDATA</c> style, and the user selects a range of items by holding down the SHIFT
            key and clicking the mouse, LVN_ITEMCHANGED notification codes are not sent for each selected or deselected item. Instead,
            you will receive a single LVN_ODSTATECHANGED notification code, indicating that a range of items has changed state.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewNotification.LVN_ITEMCHANGING">
            <summary>
            <para>
            Notifies a list-view control's parent window that an item is changing. This notification code is sent in the form of a
            <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>LVN_ITEMCHANGING pnmv = (LPNMLISTVIEW) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>Pointer to an <c>NMLISTVIEW</c> structure that identifies the item and specifies which of its attributes are changing.</para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> to prevent the change, or <c>FALSE</c> to allow the change.</para>
            </summary>
            <remarks>If the list-view control has the <c>LVS_OWNERDATA</c> style, LVN_ITEMCHANGING notification codes are not sent.</remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewNotification.LVN_KEYDOWN">
            <summary>
            <para>
            Notifies a list-view control's parent window that a key has been pressed. This notification code is sent in the form of a
            <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>LVN_KEYDOWN pnkd = (LPNMLVKEYDOWN) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>Pointer to an <c>NMLVKEYDOWN</c> structure.</para>
            <para><strong>Returns</strong></para>
            <para>No return value.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewNotification.LVN_LINKCLICK">
            <summary>
            <para>
            Notifies a list-view control's parent window that a link has been clicked on. This notification code is sent in the form of a
            <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>LVN_LINKCLICK pLinkInfo = (NMLVLINK*) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>
            Pointer to an <c>NMLVLINK</c> structure. The identifier of the group containing the link is in the <c>iSubItem</c> member.
            </para>
            <para><strong>Returns</strong></para>
            <para>No return value.</para>
            </summary>
            <remarks>
            <para>
            The following example shows how an application might respond to this notification code in its <c>WM_NOTIFY</c> message
            handler. The example toggles the collapsed state of the group and sets the appropriate link text.
            </para>
            <para>
            <code>case LVN_LINKCLICK: { NMLVLINK* pLinkInfo = (NMLVLINK*)lParam; HWND hList = pLinkInfo-&gt;hdr.hwndFrom; LVGROUP groupInfo; groupInfo.cbSize = sizeof(groupInfo); groupInfo.mask = LVGF_TASK; int groupIndex = pLinkInfo-&gt;iSubItem; if (ListView_GetGroupState(hList, groupIndex, LVGS_COLLAPSED)) { ListView_SetGroupState(hList, groupIndex, LVGS_COLLAPSED, 0); groupInfo.pszTask = L"Hide"; } else { ListView_SetGroupState(hList, groupIndex, LVGS_COLLAPSED, LVGS_COLLAPSED); groupInfo.pszTask = L"Show"; } ListView_SetGroupInfo(hList, groupIndex, &amp;groupInfo); break; }</code>
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewNotification.LVN_MARQUEEBEGIN">
            <summary>
            <para>
            Notifies a list-view control's parent window that a bounding box (marquee) selection has begun. This notification code is
            sent in the form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>LVN_MARQUEEBEGIN pnmv = (LPNMLISTVIEW) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>Pointer to an <c>NMHDR</c> structure.</para>
            <para><strong>Returns</strong></para>
            <para>To accept the notification code, return zero. To quit the bounding box selection, return nonzero.</para>
            </summary>
            <remarks>
            A bounding box selection is the process of clicking the list-view window's client area and dragging to select multiple items simultaneously.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewNotification.LVN_ODCACHEHINT">
            <summary>
            <para>
            Sent by a virtual list-view control when the contents of its display area have changed. For example, a list-view control
            sends this notification code when the user scrolls the control's display. The LVN_ODCACHEHINT notification code is sent in
            the form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>LVN_ODCACHEHINT pCachehint = (NMLVCACHEHINT *) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>Pointer to an <c>NMLVCACHEHINT</c> structure containing information about the range of items to be cached.</para>
            <para><strong>Returns</strong></para>
            <para>The application receiving this notification code must return zero.</para>
            </summary>
            <remarks>
            <para>
            Handling this message allows the application to update the item information held in cache so that it is readily available
            when an LVN_GETDISPINFO notification code is sent.
            </para>
            <para>
            Note that this notification code is not always an exact representation of the items that will be requested by
            LVN_GETDISPINFO. Therefore, if the requested item is not cached while handling LVN_GETDISPINFO, the application must be
            prepared to supply the requested information from a source outside the cache.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewNotification.LVN_ODFINDITEM">
            <summary>
            <para>
            Sent by a virtual list-view control when it needs the owner to find a particular callback item. For example, the control will
            send this notification code when it receives shortcut keyboard input or when it receives an <c>LVM_FINDITEM</c> message. The
            LVN_ODFINDITEM notification code is sent in the form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>LVN_ODFINDITEM pFindInfo = (PNMLVFINDITEM) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>Pointer to an <c>NMLVFINDITEM</c> structure that includes information to be used for the search.</para>
            <para><strong>Returns</strong></para>
            <para>Return the index of the item found, or -1 if no item is found.</para>
            </summary>
            <remarks>
            Search information is sent in the form of an <c>LVFINDINFO</c> structure, which is a member of the <c>NMLVFINDITEM</c> structure.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewNotification.LVN_ODFINDITEMA">
            <summary>
            <para>
            Sent by a virtual list-view control when it needs the owner to find a particular callback item. For example, the control will
            send this notification code when it receives shortcut keyboard input or when it receives an <c>LVM_FINDITEM</c> message. The
            LVN_ODFINDITEM notification code is sent in the form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>LVN_ODFINDITEM pFindInfo = (PNMLVFINDITEM) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>Pointer to an <c>NMLVFINDITEM</c> structure that includes information to be used for the search.</para>
            <para><strong>Returns</strong></para>
            <para>Return the index of the item found, or -1 if no item is found.</para>
            </summary>
            <remarks>
            Search information is sent in the form of an <c>LVFINDINFO</c> structure, which is a member of the <c>NMLVFINDITEM</c> structure.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewNotification.LVN_ODFINDITEMW">
            <summary>
            <para>
            Sent by a virtual list-view control when it needs the owner to find a particular callback item. For example, the control will
            send this notification code when it receives shortcut keyboard input or when it receives an <c>LVM_FINDITEM</c> message. The
            LVN_ODFINDITEM notification code is sent in the form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>LVN_ODFINDITEM pFindInfo = (PNMLVFINDITEM) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>Pointer to an <c>NMLVFINDITEM</c> structure that includes information to be used for the search.</para>
            <para><strong>Returns</strong></para>
            <para>Return the index of the item found, or -1 if no item is found.</para>
            </summary>
            <remarks>
            Search information is sent in the form of an <c>LVFINDINFO</c> structure, which is a member of the <c>NMLVFINDITEM</c> structure.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewNotification.LVN_ODSTATECHANGED">
            <summary>
            <para>
            Sent by a list-view control when the state of an item or range of items has changed. This notification code is sent in the
            form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>LVN_ODSTATECHANGED lpStateChange = (LPNMLVODSTATECHANGE) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>Pointer to an <c>NMLVODSTATECHANGE</c> structure that contains information about the item or items that have changed.</para>
            <para><strong>Returns</strong></para>
            <para>The application receiving this notification code must return zero.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewNotification.LVN_SETDISPINFO">
            <summary>
            <para>
            Notifies a list-view control's parent window that it must update the information it maintains for an item. This notification
            code is sent in the form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>LVN_SETDISPINFO pdi = (NMLVDISPINFO*) lParam</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>
            Pointer to an <c>NMLVDISPINFO</c> structure that specifies information for the changed item. The <c>item</c> member of this
            structure is an <c>LVITEM</c> structure that contains information about the item that was changed. The <c>pszText</c> member
            of <c>item</c> contains a valid value, regardless of whether the LVIF_TEXT flag is set in the <c>mask</c> member of this structure.
            </para>
            <para><strong>Returns</strong></para>
            <para>No return value.</para>
            </summary>
            <remarks>
            The notification receiver casts lParam to retrieve the <c>NMLVDISPINFO</c> structure. The wParam parameter contains the
            message code.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewNotification.LVN_SETDISPINFOA">
            <summary>
            <para>
            Notifies a list-view control's parent window that it must update the information it maintains for an item. This notification
            code is sent in the form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>LVN_SETDISPINFO pdi = (NMLVDISPINFO*) lParam</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>
            Pointer to an <c>NMLVDISPINFO</c> structure that specifies information for the changed item. The <c>item</c> member of this
            structure is an <c>LVITEM</c> structure that contains information about the item that was changed. The <c>pszText</c> member
            of <c>item</c> contains a valid value, regardless of whether the LVIF_TEXT flag is set in the <c>mask</c> member of this structure.
            </para>
            <para><strong>Returns</strong></para>
            <para>No return value.</para>
            </summary>
            <remarks>
            The notification receiver casts lParam to retrieve the <c>NMLVDISPINFO</c> structure. The wParam parameter contains the
            message code.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewNotification.LVN_SETDISPINFOW">
            <summary>
            <para>
            Notifies a list-view control's parent window that it must update the information it maintains for an item. This notification
            code is sent in the form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>LVN_SETDISPINFO pdi = (NMLVDISPINFO*) lParam</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>
            Pointer to an <c>NMLVDISPINFO</c> structure that specifies information for the changed item. The <c>item</c> member of this
            structure is an <c>LVITEM</c> structure that contains information about the item that was changed. The <c>pszText</c> member
            of <c>item</c> contains a valid value, regardless of whether the LVIF_TEXT flag is set in the <c>mask</c> member of this structure.
            </para>
            <para><strong>Returns</strong></para>
            <para>No return value.</para>
            </summary>
            <remarks>
            The notification receiver casts lParam to retrieve the <c>NMLVDISPINFO</c> structure. The wParam parameter contains the
            message code.
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.ListViewStyle">
            <summary>The following window styles are specific to list-view controls.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewStyle.LVS_ALIGNLEFT">
            <summary>Items are left-aligned in icon and small icon view.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewStyle.LVS_ALIGNMASK">
            <summary>The control's current alignment.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewStyle.LVS_ALIGNTOP">
            <summary>Items are aligned with the top of the list-view control in icon and small icon view.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewStyle.LVS_AUTOARRANGE">
            <summary>Icons are automatically kept arranged in icon and small icon view.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewStyle.LVS_EDITLABELS">
            <summary>Item text can be edited in place. The parent window must process the LVN_ENDLABELEDIT notification code.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewStyle.LVS_ICON">
            <summary>This style specifies icon view.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewStyle.LVS_LIST">
            <summary>This style specifies list view.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewStyle.LVS_NOCOLUMNHEADER">
            <summary>Column headers are not displayed in report view. By default, columns have headers in report view.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewStyle.LVS_NOLABELWRAP">
            <summary>Item text is displayed on a single line in icon view. By default, item text may wrap in icon view.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewStyle.LVS_NOSCROLL">
            <summary>
            Scrolling is disabled. All items must be within the client area. This style is not compatible with the LVS_LIST or
            LVS_REPORT styles. See Knowledge Base Article Q137520 for further discussion.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewStyle.LVS_NOSORTHEADER">
            <summary>
            Column headers do not work like buttons. This style can be used if clicking a column header in report view does not carry
            out an action, such as sorting.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewStyle.LVS_OWNERDATA">
            <summary>
            Version 4.70. This style specifies a virtual list-view control. For more information about this list control style, see
            About List-View Controls.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewStyle.LVS_OWNERDRAWFIXED">
            <summary>
            The owner window can paint items in report view. The list-view control sends a WM_DRAWITEM message to paint each item; it
            does not send separate messages for each subitem. The iItemData member of the DRAWITEMSTRUCT structure contains the item
            data for the specified list-view item.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewStyle.LVS_REPORT">
            <summary>
            This style specifies report view. When using the LVS_REPORT style with a list-view control, the first column is always
            left-aligned. You cannot use LVCFMT_RIGHT to change this alignment. See LVCOLUMN for further information on column alignment.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewStyle.LVS_SHAREIMAGELISTS">
            <summary>
            The image list will not be deleted when the control is destroyed. This style enables the use of the same image lists with
            multiple list-view controls.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewStyle.LVS_SHOWSELALWAYS">
            <summary>The selection, if any, is always shown, even if the control does not have the focus.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewStyle.LVS_SINGLESEL">
            <summary>Only one item at a time can be selected. By default, multiple items may be selected.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewStyle.LVS_SMALLICON">
            <summary>This style specifies small icon view.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewStyle.LVS_SORTASCENDING">
            <summary>Item indexes are sorted based on item text in ascending order.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewStyle.LVS_SORTDESCENDING">
            <summary>Item indexes are sorted based on item text in descending order.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewStyle.LVS_TYPEMASK">
            <summary>Determines the control's current window style.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewStyle.LVS_TYPESTYLEMASK">
            <summary>Determines the window styles that control item alignment and header appearance and behavior.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.ListViewStyleEx">
            <summary>
            Extended List-View Styles. Use the LVM_SETEXTENDEDLISTVIEWSTYLE message or one of the ListView_SetExtendedListViewStyle or
            ListView_SetExtendedListViewStyleEx macros to employ these extended list-view control styles.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewStyleEx.LVS_EX_AUTOAUTOARRANGE">
            <summary>Windows Vista and later. Automatically arrange icons if no icon positions have been set (Similar to LVS_AUTOARRANGE).</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewStyleEx.LVS_EX_AUTOCHECKSELECT">
            <summary>Windows Vista and later. Automatically select check boxes on single click.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewStyleEx.LVS_EX_AUTOSIZECOLUMNS">
            <summary>Windows Vista and later. Automatically size listview columns.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewStyleEx.LVS_EX_BORDERSELECT">
            <summary>Version 4.71 and later. Changes border color when an item is selected, instead of highlighting the item.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewStyleEx.LVS_EX_CHECKBOXES">
            <summary>
            Version 4.70. Enables check boxes for items in a list-view control. When set to this style, the control creates and sets a
            state image list with two images using DrawFrameControl. State image 1 is the unchecked box, and state image 2 is the
            checked box. Setting the state image to zero removes the check box.
            <para>
            Version 6.00 and later Check boxes are visible and functional with all list view modes except the tile view mode introduced
            in ComCtl32.dll version 6. Clicking a checkbox in tile view mode only selects the item; the state does not change.
            </para>
            <para>
            You can obtain the state of the check box for a given item with ListView_GetCheckState. To set the check state, use
            ListView_SetCheckState. If this style is set, the list-view control automatically toggles the check state when the user
            clicks the check box or presses the space bar.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewStyleEx.LVS_EX_COLUMNOVERFLOW">
            <summary>
            Indicates that an overflow button should be displayed in icon/tile view if there is not enough client width to display the
            complete set of header items. The list-view control sends the LVN_COLUMNOVERFLOWCLICK notification when the overflow button
            is clicked. This flag is only valid when LVS_EX_HEADERINALLVIEWS is also specified.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewStyleEx.LVS_EX_COLUMNSNAPPOINTS">
            <summary>Windows Vista and later. Snap to minimum column width when the user resizes a column.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewStyleEx.LVS_EX_DOUBLEBUFFER">
            <summary>
            Version 6.00 and later. Paints via double-buffering, which reduces flicker. This extended style also enables alpha-blended
            marquee selection on systems where it is supported.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewStyleEx.LVS_EX_FLATSB">
            <summary>
            Enables flat scroll bars in the list view. If you need more control over the appearance of the list view's scroll bars, you
            should manipulate the list view's scroll bars directly using the Flat Scroll Bar APIs. If the system metrics change, you are
            responsible for adjusting the scroll bar metrics with FlatSB_SetScrollProp. See Flat Scroll Bars for further details.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewStyleEx.LVS_EX_FULLROWSELECT">
            <summary>
            When an item is selected, the item and all its subitems are highlighted. This style is available only in conjunction with
            the LVS_REPORT style.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewStyleEx.LVS_EX_GRIDLINES">
            <summary>
            Displays gridlines around items and subitems. This style is available only in conjunction with the LVS_REPORT style.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewStyleEx.LVS_EX_HEADERDRAGDROP">
            <summary>
            Enables drag-and-drop reordering of columns in a list-view control. This style is only available to list-view controls that
            use the LVS_REPORT style.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewStyleEx.LVS_EX_HEADERINALLVIEWS">
            <summary>Windows Vista and later. Show column headers in all view modes.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewStyleEx.LVS_EX_HIDELABELS">
            <summary>Version 6.00 and later. Hides the labels in icon and small icon view.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewStyleEx.LVS_EX_INFOTIP">
            <summary>
            When a list-view control uses the LVS_EX_INFOTIP style, the LVN_GETINFOTIP notification code is sent to the parent window
            before displaying an item's tooltip.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewStyleEx.LVS_EX_JUSTIFYCOLUMNS">
            <summary>Windows Vista and later. Icons are lined up in columns that use up the whole view.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewStyleEx.LVS_EX_LABELTIP">
            <summary>
            If a partially hidden label in any list view mode lacks tooltip text, the list-view control will unfold the label. If this
            style is not set, the list-view control will unfold partly hidden labels only for the large icon mode.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewStyleEx.LVS_EX_MULTIWORKAREAS">
            <summary>
            If the list-view control has the LVS_AUTOARRANGE style, the control will not autoarrange its icons until one or more work
            areas are defined (see LVM_SETWORKAREAS). To be effective, this style must be set before any work areas are defined and any
            items have been added to the control.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewStyleEx.LVS_EX_ONECLICKACTIVATE">
            <summary>
            The list-view control sends an LVN_ITEMACTIVATE notification code to the parent window when the user clicks an item. This
            style also enables hot tracking in the list-view control. Hot tracking means that when the cursor moves over an item, it is
            highlighted but not selected. See the Extended List-View Styles Remarks section for a discussion of item activation.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewStyleEx.LVS_EX_REGIONAL">
            <summary>
            Version 4.71 through Version 5.80 only. Not supported on Windows Vista and later. Sets the list view window region to
            include only the item icons and text using SetWindowRgn. Any area that is not part of an item is excluded from the window
            region. This style is only available to list-view controls that use the LVS_ICON style.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewStyleEx.LVS_EX_SIMPLESELECT">
            <summary>
            Version 6.00 and later. In icon view, moves the state image of the control to the top right of the large icon rendering. In
            views other than icon view there is no change. When the user changes the state by using the space bar, all selected items
            cycle over, not the item with the focus.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewStyleEx.LVS_EX_SINGLEROW">
            <summary>Version 6.00 and later. Not used.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewStyleEx.LVS_EX_SNAPTOGRID">
            <summary>Version 6.00 and later. In icon view, icons automatically snap into a grid.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewStyleEx.LVS_EX_SUBITEMIMAGES">
            <summary>
            Allows images to be displayed for subitems. This style is available only in conjunction with the LVS_REPORT style.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewStyleEx.LVS_EX_TRACKSELECT">
            <summary>
            Enables hot-track selection in a list-view control. Hot track selection means that an item is automatically selected when
            the cursor remains over the item for a certain period of time. The delay can be changed from the default system setting with
            a LVM_SETHOVERTIME message. This style applies to all styles of list-view control. You can check whether hot-track selection
            is enabled by calling SystemParametersInfo.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewStyleEx.LVS_EX_TRANSPARENTBKGND">
            <summary>Windows Vista and later. Background is painted by the parent via WM_PRINTCLIENT.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewStyleEx.LVS_EX_TRANSPARENTSHADOWTEXT">
            <summary>Windows Vista and later. Enable shadow text on transparent backgrounds only.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewStyleEx.LVS_EX_TWOCLICKACTIVATE">
            <summary>
            The list-view control sends an LVN_ITEMACTIVATE notification code to the parent window when the user double-clicks an item.
            This style also enables hot tracking in the list-view control. Hot tracking means that when the cursor moves over an item,
            it is highlighted but not selected. See the Extended List-View Styles Remarks section for a discussion of item activation.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewStyleEx.LVS_EX_UNDERLINECOLD">
            <summary>
            Causes those non-hot items that may be activated to be displayed with underlined text. This style requires that
            LVS_EX_TWOCLICKACTIVATE be set also. See the Extended List-View Styles Remarks section for a discussion of item activation.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewStyleEx.LVS_EX_UNDERLINEHOT">
            <summary>
            Causes those hot items that may be activated to be displayed with underlined text. This style requires that
            LVS_EX_ONECLICKACTIVATE or LVS_EX_TWOCLICKACTIVATE also be set. See the Extended List-View Styles Remarks section for a
            discussion of item activation.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.ListViewTileViewFlag">
            <summary>Flags that determines how the tiles are sized in tile view.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewTileViewFlag.LVTVIF_AUTOSIZE">
            <summary>Size the tiles automatically.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewTileViewFlag.LVTVIF_FIXEDWIDTH">
            <summary>Apply a fixed width to the tiles.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewTileViewFlag.LVTVIF_FIXEDHEIGHT">
            <summary>Apply a fixed height to the tiles.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewTileViewFlag.LVTVIF_FIXEDSIZE">
            <summary>Apply a fixed height and width to the tiles.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewTileViewFlag.LVTVIF_EXTENDED">
            <summary>This flag is not supported and should not be used.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.ListViewTileViewMask">
            <summary>Mask that determines which members of the LVTILEVIEWINFO structure are valid.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewTileViewMask.LVTVIM_TILESIZE">
            <summary>sizeTile is valid.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewTileViewMask.LVTVIM_COLUMNS">
            <summary>cLines is valid.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ListViewTileViewMask.LVTVIM_LABELMARGIN">
            <summary>rcLabelMargin is valid.</summary>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.ListView_GetItemIndexRect(Vanara.PInvoke.HWND,Vanara.PInvoke.ComCtl32.LVITEMINDEX@,System.Int32,Vanara.PInvoke.ComCtl32.ListViewItemRect,Vanara.PInvoke.RECT@)">
            <summary>
            <para>
            Gets the bounding rectangle for all or part of a subitem in the current view of a specified list-view control. Use this macro or
            send the LVM_GETITEMINDEXRECT message explicitly.
            </para>
            </summary>
            <param name="hwnd">
            <para>Type: <c>HWND</c></para>
            <para>A handle to the list-view control.</para>
            </param>
            <param name="plvii">
            <para>Type: <c>LVITEMINDEX*</c></para>
            <para>
            A pointer to a LVITEMINDEX structure for the parent item of the subitem. The caller is responsible for allocating this structure
            and setting its members. plvii must not be <c>NULL</c>.
            </para>
            </param>
            <param name="iSubItem">
            <para>Type: <c>LONG</c></para>
            <para>The index of the subitem.</para>
            </param>
            <param name="code">
            <para>Type: <c>LONG</c></para>
            <para>
            The portion of the list-view subitem for which to retrieve the bounding rectangle. This parameter must be one of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>LVIR_BOUNDS</term>
            <term>Returns the bounding rectangle of the entire subitem, including the icon and label.</term>
            </item>
            <item>
            <term>LVIR_ICON</term>
            <term>Returns the bounding rectangle of the icon or small icon of the subitem.</term>
            </item>
            <item>
            <term>LVIR_LABEL</term>
            <term>Returns the bounding rectangle of the subitem text.</term>
            </item>
            </list>
            </param>
            <param name="prc">
            <para>A Rectangle structure to receive the coordinates.</para>
            </param>
            <returns>Returns TRUE if successful, or FALSE otherwise.</returns>
            <remarks>
            <para>
            If iSubItem is zero, this macro returns the coordinates of the rectangle to the item pointed to by plvii. The value
            LVIR_SELECTBOUNDS for the parameter code is not supported.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.ListView_GetNextItemIndex(Vanara.PInvoke.HWND,Vanara.PInvoke.ComCtl32.LVITEMINDEX@,Vanara.PInvoke.ComCtl32.ListViewNextItemFlag)">
            <summary>
            Gets the index of the item in a particular list-view control that has the specified properties and relationship to another
            specific item. Use this macro or send the <c>LVM_GETNEXTITEMINDEX</c> message explicitly.
            </summary>
            <param name="hwnd">
            <para>Type: <c><c>HWND</c></c></para>
            <para>A handle to the list-view control.</para>
            </param>
            <param name="plvii">
            <para>Type: <c><c>LVITEMINDEX</c>*</c></para>
            <para>
            A pointer to the <c>LVITEMINDEX</c> structure with which the item begins the search, or -1 to find the first item that matches
            the specified flags. The calling process is responsible for allocating this structure and setting its members.
            </para>
            </param>
            <param name="flags">
            <para>Type: <c><c>LPARAM</c></c></para>
            <para>The relationship to the item specified in parameter plvii. This can be one or a combination of the following values:</para>
            <para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>Searches by index.</term>
            <term/>
            </item>
            <item>
            <term>LVNI_ALL</term>
            <term>Searches for a subsequent item by index, the default value.</term>
            </item>
            <item>
            <term>Searches by physical relationship to the index of the item where the search is to begin.</term>
            <term/>
            </item>
            <item>
            <term>LVNI_ABOVE</term>
            <term>Searches for an item that is above the specified item.</term>
            </item>
            <item>
            <term>LVNI_BELOW</term>
            <term>Searches for an item that is below the specified item.</term>
            </item>
            <item>
            <term>LVNI_TOLEFT</term>
            <term>Searches for an item to the left of the specified item.</term>
            </item>
            <item>
            <term>LVNI_PREVIOUS</term>
            <term>
            Windows Vista and later: Searches for the item that is previous to the specified item. The LVNI_PREVIOUS flag is not directional
            (LVNI_ABOVE will find the item positioned above, while LVNI_PREVIOUS will find the item ordered before.) The LVNI_PREVIOUS flag
            essentially reverses the logic of the search performed via the LVM_GETNEXTITEM or LVM_GETNEXTITEMINDEX messages.
            </term>
            </item>
            <item>
            <term>LVNI_TORIGHT</term>
            <term>Searches for an item to the right of the specified item.</term>
            </item>
            <item>
            <term>LVNI_DIRECTIONMASK</term>
            <term>Windows Vista and later: A directional flag mask with value as follows: LVNI_ABOVE | LVNI_BELOW | LVNI_TOLEFT | LVNI_TORIGHT.</term>
            </item>
            <item>
            <term>The state of the item to find can be specified with one or a combination of the following values:</term>
            <term/>
            </item>
            <item>
            <term>LVNI_CUT</term>
            <term>The item has the LVIS_CUT state flag set.</term>
            </item>
            <item>
            <term>LVNI_DROPHILITED</term>
            <term>The item has the LVIS_DROPHILITED state flag set</term>
            </item>
            <item>
            <term>LVNI_FOCUSED</term>
            <term>The item has the LVIS_FOCUSED state flag set.</term>
            </item>
            <item>
            <term>LVNI_SELECTED</term>
            <term>The item has the LVIS_SELECTED state flag set.</term>
            </item>
            <item>
            <term>LVNI_STATEMASK</term>
            <term>Windows Vista and later: A state flag mask with value as follows: LVNI_FOCUSED | LVNI_SELECTED | LVNI_CUT | LVNI_DROPHILITED.</term>
            </item>
            <item>
            <term>Searches by appearance of items or by group.</term>
            <term/>
            </item>
            <item>
            <term>LVNI_VISIBLEORDER</term>
            <term>Windows Vista and later: Search the visible order.</term>
            </item>
            <item>
            <term>LVNI_VISIBLEONLY</term>
            <term>Windows Vista and later: Search the visible items.</term>
            </item>
            <item>
            <term>LVNI_SAMEGROUPONLY</term>
            <term>Windows Vista and later: Search the current group.</term>
            </item>
            <item>
            <term>If an item does not have all of the specified state flags set, the search continues with the next item.</term>
            <term/>
            </item>
            </list>
            </para>
            </param>
            <returns>Returns <c>TRUE</c> if successful, or <c>FALSE</c> otherwise.</returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.ListView_SetItemIndexState(Vanara.PInvoke.HWND,Vanara.PInvoke.ComCtl32.LVITEMINDEX@,System.UInt32,Vanara.PInvoke.ComCtl32.ListViewItemState)">
            <summary>
            <para>Sets the state of a specified list-view item. Use this macro or send the LVM_SETITEMINDEXSTATE message explicitly.</para>
            </summary>
            <param name="hwndLV">
            <para>Type: <c>HWND</c></para>
            <para>A handle to the list-view control.</para>
            </param>
            <param name="plvii">
            <para>Type: <c>LVITEMINDEX*</c></para>
            <para>
            A pointer to an LVITEMINDEX structure for the item. The caller is responsible for allocating this structure and setting the members.
            </para>
            </param>
            <param name="data">
            <para>Type: <c>UINT</c></para>
            <para>The state to set on the item as one or more (as a bitwise combination) of the List-View Item States flags.</para>
            </param>
            <param name="mask">
            <para>Type: <c>UINT</c></para>
            <para>
            The valid bits of the state specified by parameter data. For more information, see the stateMask member of the LVITEM) structure.
            </para>
            </param>
            <returns>
            <para>None</para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.LVFINDINFO">
            <summary>
            Contains information used when searching for a list-view item. This structure is identical to LV_FINDINFO but has been renamed
            to fit standard naming conventions.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVFINDINFO.flags">
            <summary>Type of search to perform.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVFINDINFO.psz">
            <summary>
            Address of a null-terminated string to compare with the item text. It is valid only if LVFI_STRING or LVFI_PARTIAL is set in
            the flags member.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVFINDINFO.lParam">
            <summary>
            Value to compare with the lParam member of a list-view item's LVITEM structure. It is valid only if LVFI_PARAM is set in the
            flags member.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVFINDINFO.pt">
            <summary>POINT structure with the initial search position. It is valid only if LVFI_NEARESTXY is set in the flags member.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVFINDINFO.vkDirection">
            <summary>Virtual key code that specifies the direction to search.</summary>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.LVFINDINFO.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.ComCtl32.LVFINDINFO"/> struct.</summary>
            <param name="searchString">The search string.</param>
            <param name="allowPartial">if set to <c>true</c> if <paramref name="searchString"/> is the beginning of an item's text.</param>
            <param name="wrap">if set to <c>true</c> continues the search at the beginning if no match is found.</param>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.LVFINDINFO.#ctor(System.IntPtr)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.ComCtl32.LVFINDINFO"/> struct.</summary>
            <param name="lParam">The value to compare to the lParam member of a list-view item.</param>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.LVFINDINFO.#ctor(Vanara.PInvoke.POINT,System.ConsoleKey)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.ComCtl32.LVFINDINFO"/> struct.</summary>
            <param name="point">The initial search position.</param>
            <param name="searchDirection">The search direction.</param>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.LVGROUPMETRICS">
            <summary>Contains information about the display of groups in a list-view control.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVGROUPMETRICS.cbSize">
            <summary>Size of the LVGROUPMETRICS structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVGROUPMETRICS.mask">
            <summary>Flags that specify which members contain or are to receive valid data.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVGROUPMETRICS.Left">
            <summary>Specifies the width of the left border in icon, small icon, or tile view.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVGROUPMETRICS.Top">
            <summary>Specifies the width of the top border in all group views.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVGROUPMETRICS.Right">
            <summary>Specifies the width of the right border in icon, small icon, or tile view.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVGROUPMETRICS.Bottom">
            <summary>Specifies the width of the bottom border in all group views.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVGROUPMETRICS.crLeft">
            <summary>Specifies the color of the left border. Not implemented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVGROUPMETRICS.crTop">
            <summary>Specifies the color of the top border. Not implemented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVGROUPMETRICS.crRight">
            <summary>Specifies the color of the right border. Not implemented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVGROUPMETRICS.crBottom">
            <summary>Specifies the color of the bottom border. Not implemented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVGROUPMETRICS.crHeader">
            <summary>Specifies the color of the header text. Not implemented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVGROUPMETRICS.crFooter">
            <summary>Specifies the color of the footer text. Not implemented.</summary>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.LVGROUPMETRICS.#ctor(Vanara.PInvoke.ComCtl32.ListViewGroupMetricsMask)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.ComCtl32.LVGROUPMETRICS"/> class.</summary>
            <param name="mask">The mask.</param>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.LVGROUPMETRICS.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.ComCtl32.LVGROUPMETRICS"/> class.</summary>
            <param name="left">The width of the left border.</param>
            <param name="top">The width of the top border.</param>
            <param name="right">The width of the right border.</param>
            <param name="bottom">The width of the bottom border.</param>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.LVGROUPMETRICS.SetBorderSize(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Sets the size of the border.</summary>
            <param name="left">The left.</param>
            <param name="top">The top.</param>
            <param name="right">The right.</param>
            <param name="bottom">The bottom.</param>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.LVHITTESTINFO">
            <summary>
            Contains information about a hit test. This structure has been extended to accommodate subitem hit-testing. It is used in
            association with the LVM_HITTEST and LVM_SUBITEMHITTEST messages and their related macros. This structure supersedes the
            LVHITTESTINFO structure.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVHITTESTINFO.pt">
            <summary>The position to hit test, in client coordinates.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVHITTESTINFO.flags">
            <summary>
            The variable that receives information about the results of a hit test. This member can be one or more of the following values:
            <para>
            You can use LVHT_ABOVE, LVHT_BELOW, LVHT_TOLEFT, and LVHT_TORIGHT to determine whether to scroll the contents of a list-view
            control.Two of these values may be combined. For example, if the position is above and to the left of the client area, you
            could use both LVHT_ABOVE and LVHT_TOLEFT.
            </para>
            <para>
            You can test for LVHT_ONITEM to determine whether a specified position is over a list-view item. This value is a bitwise-OR
            operation on LVHT_ONITEMICON, LVHT_ONITEMLABEL, and LVHT_ONITEMSTATEICON.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVHITTESTINFO.iItem">
            <summary>
            Receives the index of the matching item. Or if hit-testing a subitem, this value represents the subitem's parent item.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVHITTESTINFO.iSubItem">
            <summary>Version 4.70. Receives the index of the matching subitem. When hit-testing an item, this member will be zero.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVHITTESTINFO.iGroup">
            <summary>
            Windows Vista. Group index of the item hit (read only). Valid only for owner data. If the point is within an item that is
            displayed in multiple groups then iGroup will specify the group index of the item.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.LVHITTESTINFO.#ctor(Vanara.PInvoke.POINT)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.ComCtl32.LVHITTESTINFO"/> class.</summary>
            <param name="pt">The pt.</param>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.LVINSERTMARK">
            <summary>Used to describe insertion points.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVINSERTMARK.cbSize">
            <summary>Size of the LVINSERTMARK structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVINSERTMARK.dwFlags">
            <summary>Flag that specifies where the insertion point should appear.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVINSERTMARK.iItem">
            <summary>Item next to which the insertion point appears. If this member contains -1, there is no insertion point.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVINSERTMARK.dwReserved">
            <summary>Reserved. Must be zero.</summary>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.LVINSERTMARK.#ctor(System.Int32,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.ComCtl32.LVINSERTMARK"/> struct.</summary>
            <param name="insertAtItem">Index at which to insert the item.</param>
            <param name="insertAfter">if set to <c>true</c> the insertion point appears after the item specified.</param>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.LVITEMCOLUMNINFO">
            <summary>Helper structure for <see cref="T:Vanara.PInvoke.ComCtl32.LVITEM"/> to easily capture column order and format information.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVITEMCOLUMNINFO.columnIndex">
            <summary>The column index</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVITEMCOLUMNINFO.format">
            <summary>
            Windows Vista: Not implemented. Windows 7 and later: A flag specifying the format of this column in extended tile view.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.LVITEMCOLUMNINFO.#ctor(System.UInt32,Vanara.PInvoke.ComCtl32.ListViewColumnFormat)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.ComCtl32.LVITEMCOLUMNINFO"/> struct.</summary>
            <param name="colIdx">Index of the column.</param>
            <param name="fmt">The format of the column.</param>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.LVITEMINDEX">
            <summary>Contains index information about a list-view item.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVITEMINDEX.iItem">
            <summary>The index of the item.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVITEMINDEX.iGroup">
            <summary>The index of the group the item belongs to.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.LVTILEVIEWINFO">
            <summary>Provides information about a list-view control when it is displayed in tile view.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVTILEVIEWINFO.cbSize">
            <summary>Size of the LVTILEVIEWINFO structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVTILEVIEWINFO.dwMask">
            <summary>Mask that determines which members are valid. This member may be one of the following values.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVTILEVIEWINFO.dwFlags">
            <summary>Flags that determines how the tiles are sized in tile view. This member may be one of the following values.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVTILEVIEWINFO.sizeTile">
            <summary>Size of an individual tile. Values for dimensions not specified as fixed in dwFlags are ignored.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVTILEVIEWINFO.cLines">
            <summary>Maximum number of text lines in each item label, not counting the title.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVTILEVIEWINFO.rcLabelMargin">
            <summary>RECT that contains coordinates of the label margin.</summary>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.LVTILEVIEWINFO.#ctor(Vanara.PInvoke.ComCtl32.ListViewTileViewMask)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.ComCtl32.LVTILEVIEWINFO"/> struct.</summary>
            <param name="mask">The mask.</param>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.LVTILEVIEWINFO.AutoSize">
            <summary>Gets or sets a value indicating whether to size the tiles automatically.</summary>
            <value><c>true</c> if tiles are automatically sized; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.LVTILEVIEWINFO.TileSize">
            <summary>Gets or sets the size of an individual tile.</summary>
            <value>The size of an individual tile.</value>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.LVTILEVIEWINFO.TileHeight">
            <summary>Gets or sets the height of an individual tile.</summary>
            <value>The height of an individual tile.</value>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.LVTILEVIEWINFO.TileWidth">
            <summary>Gets or sets the width of an individual tile.</summary>
            <value>The width of an individual tile.</value>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.LVTILEVIEWINFO.MaxTextLines">
            <summary>Gets or sets the maximum number of text lines in each item label, not counting the title.</summary>
            <value>The maximum number of text lines in each item label, not counting the title.</value>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.LVTILEVIEWINFO.TilePadding">
            <summary>Gets or sets the tile padding.</summary>
            <value>The tile padding.</value>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.NMLISTVIEW">
            <summary>
            Contains information about a list-view notification message. This structure is the same as the NM_LISTVIEW structure but has
            been renamed to fit standard naming conventions.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMLISTVIEW.hdr">
            <summary>NMHDR structure that contains information about this notification message</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMLISTVIEW.iItem">
            <summary>Identifies the list-view item, or -1 if not used.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMLISTVIEW.iSubItem">
            <summary>Identifies the subitem, or zero if none.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMLISTVIEW.uNewState">
            <summary>
            New item state. This member is zero for notification messages that do not use it. For a list of possible values, see
            List-View Item States.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMLISTVIEW.uOldState">
            <summary>
            Old item state. This member is zero for notification messages that do not use it. For a list of possible values, see
            List-View Item States.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMLISTVIEW.uChanged">
            <summary>
            Set of flags that indicate the item attributes that have changed. This member is zero for notifications that do not use it.
            Otherwise, it can have the same values as the mask member of the LVITEM structure.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMLISTVIEW.ptAction">
            <summary>
            POINT structure that indicates the location at which the event occurred. This member is undefined for notification messages
            that do not use it.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMLISTVIEW.lParam">
            <summary>Application-defined value of the item. This member is undefined for notification messages that do not use it.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.LVBKIMAGE">
            <summary>
            Contains information about the background image of a list-view control. This structure is used for both setting and retrieving
            background image information.
            </summary>
            <seealso cref="T:System.IDisposable"/>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVBKIMAGE.ulFlags">
            <summary>
            This member may be one or more of the following flags. You can use the LVBKIF_SOURCE_MASK value to mask off all but the
            source flags. You can use the LVBKIF_STYLE_MASK value to mask off all but the style flags.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVBKIMAGE.hBmp">
            <summary>The handle of the background bitmap. This member is valid only if the LVBKIF_SOURCE_HBITMAP flag is set in ulFlags.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVBKIMAGE.pszImage">
            <summary>
            Address of a NULL-terminated string that contains the URL of the background image. This member is valid only if the
            LVBKIF_SOURCE_URL flag is set in ulFlags. This member must be initialized to point to the buffer that contains or receives
            the text before sending the message.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVBKIMAGE.cchImageMax">
            <summary>Size of the buffer at the address in pszImage. If information is being sent to the control, this member is ignored.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVBKIMAGE.xOffset">
            <summary>
            Percentage of the control's client area that the image should be offset horizontally. For example, at 0 percent, the image
            will be displayed against the left edge of the control's client area. At 50 percent, the image will be displayed
            horizontally centered in the control's client area. At 100 percent, the image will be displayed against the right edge of
            the control's client area. This member is valid only when LVBKIF_STYLE_NORMAL is specified in ulFlags. If both
            LVBKIF_FLAG_TILEOFFSET and LVBKIF_STYLE_TILE are specified in ulFlags, then the value specifies the pixel, not percentage
            offset, of the first tile. Otherwise, the value is ignored.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVBKIMAGE.yOffset">
            <summary>
            Percentage of the control's client area that the image should be offset vertically. For example, at 0 percent, the image
            will be displayed against the top edge of the control's client area. At 50 percent, the image will be displayed vertically
            centered in the control's client area. At 100 percent, the image will be displayed against the bottom edge of the control's
            client area. This member is valid only when LVBKIF_STYLE_NORMAL is specified in ulFlags. If both LVBKIF_FLAG_TILEOFFSET and
            LVBKIF_STYLE_TILE are specified in ulFlags, then the value specifies the pixel, not percentage offset, of the first tile.
            Otherwise, the value is ignored.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.LVBKIMAGE.#ctor(Vanara.PInvoke.HBITMAP,System.Boolean,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.ComCtl32.LVBKIMAGE"/> class.</summary>
            <param name="bmp">The handle of the background bitmap.</param>
            <param name="isWatermark">if set to <c>true</c> a watermark bitmap is applied.</param>
            <param name="isWatermarkAlphaBlended">if set to <c>true</c> the watermark is alpha blended.</param>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.LVBKIMAGE.#ctor(Vanara.PInvoke.HBITMAP,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.ComCtl32.LVBKIMAGE"/> class.</summary>
            <param name="bmp">The handle of the background bitmap.</param>
            <param name="isTiled">if set to <c>true</c>, the bitmap image is tiled.</param>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.LVBKIMAGE.#ctor(System.String,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.ComCtl32.LVBKIMAGE"/> class.</summary>
            <param name="url">The URL of the background image.</param>
            <param name="isTiled">if set to <c>true</c>, the bitmap image is tiled.</param>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.LVBKIMAGE.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.ComCtl32.LVBKIMAGE"/> class.</summary>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.LVBKIMAGE.#ctor(Vanara.PInvoke.ComCtl32.ListViewBkImageFlag)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.ComCtl32.LVBKIMAGE"/> class.</summary>
            <param name="flags">The flags.</param>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.LVBKIMAGE.Url">
            <summary>Gets or sets the URL.</summary>
            <value>The URL.</value>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.LVBKIMAGE.System#IDisposable#Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.LVCOLUMN">
            <summary>
            Contains information about a column in report view. This structure is used both for creating and manipulating columns. This
            structure supersedes the LV_COLUMN structure.
            </summary>
            <seealso cref="T:System.IDisposable"/>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVCOLUMN.mask">
            <summary>
            Variable specifying which members contain valid information. This member can be zero, or one or more of the following values:
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVCOLUMN.fmt">
            <summary>
            Alignment of the column header and the subitem text in the column. The alignment of the leftmost column is always
            LVCFMT_LEFT; it cannot be changed. This member can be a combination of the following values. Note that not all combinations
            are valid.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVCOLUMN.cx">
            <summary>Width of the column, in pixels.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVCOLUMN.pszText">
            <summary>
            If column information is being set, this member is the address of a null-terminated string that contains the column header
            text. If the structure is receiving information about a column, this member specifies the address of the buffer that
            receives the column header text.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVCOLUMN.cchTextMax">
            <summary>
            Size in TCHARs of the buffer pointed to by the pszText member. If the structure is not receiving information about a column,
            this member is ignored.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVCOLUMN.iSubItem">
            <summary>Index of subitem associated with the column.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVCOLUMN.iImage">
            <summary>
            Version 4.70. Zero-based index of an image within the image list. The specified image will appear within the column.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVCOLUMN.iOrder">
            <summary>
            Version 4.70. Zero-based column offset. Column offset is in left-to-right order. For example, zero indicates the leftmost column.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVCOLUMN.cxMin">
            <summary>Windows Vista. Minimum width of the column in pixels.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVCOLUMN.cxDefault">
            <summary>
            Windows Vista. Application-defined value typically used to store the default width of the column. This member is ignored by
            the list-view control.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVCOLUMN.cxIdeal">
            <summary>
            Windows Vista. Read-only. The ideal width of the column in pixels, as the column may currently be autosized to a lesser width.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.LVCOLUMN.#ctor(Vanara.PInvoke.ComCtl32.ListViewColumMask)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.ComCtl32.LVCOLUMN"/> class.</summary>
            <param name="mask">The mask.</param>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.LVCOLUMN.Format">
            <summary>Gets or sets the format.</summary>
            <value>The format.</value>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.LVCOLUMN.Text">
            <summary>Gets or sets the header text.</summary>
            <value>
            The header text. Setting this value will free any previous buffer and will allocate a new buffer sufficient to hold the string.
            </value>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.LVCOLUMN.Subitem">
            <summary>Gets or sets the index of subitem associated with the column.</summary>
            <value>The index of subitem.</value>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.LVCOLUMN.ImageListIndex">
            <summary>Gets or sets the zero-based index of an image within the image list.</summary>
            <value>The index of and image in the image list.</value>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.LVCOLUMN.ColumnPosition">
            <summary>Gets or sets the column position.</summary>
            <value>The column position.</value>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.LVCOLUMN.DefaultWidth">
            <summary>Gets or sets the default width.</summary>
            <value>The default width.</value>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.LVCOLUMN.MinWidth">
            <summary>Gets or sets the minimum width.</summary>
            <value>The minimum width.</value>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.LVCOLUMN.IdealWidth">
            <summary>Gets or sets the ideal width.</summary>
            <value>The ideal width.</value>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.LVCOLUMN.Width">
            <summary>Gets or sets the width.</summary>
            <value>The width.</value>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.LVCOLUMN.System#IDisposable#Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.LVGROUP">
            <summary>Used to set and retrieve groups.</summary>
            <seealso cref="T:System.IDisposable"/>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVGROUP.cbSize">
            <summary>Size of this structure, in bytes.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVGROUP.mask">
            <summary>Mask that specifies which members of the structure are valid input.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVGROUP.pszHeader">
            <summary>
            Pointer to a null-terminated string that contains the header text when item information is being set. If group information
            is being retrieved, this member specifies the address of the buffer that receives the header text.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVGROUP.cchHeader">
            <summary>
            Size in TCHARs of the buffer pointed to by the pszHeader member. If the structure is not receiving information about a
            group, this member is ignored.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVGROUP.pszFooter">
            <summary>
            Pointer to a null-terminated string that contains the footer text when item information is being set. If group information
            is being retrieved, this member specifies the address of the buffer that receives the footer text.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVGROUP.cchFooter">
            <summary>
            Size in TCHARs of the buffer pointed to by the pszFooter member. If the structure is not receiving information about a
            group, this member is ignored.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVGROUP.iGroupId">
            <summary>ID of the group.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVGROUP.stateMask">
            <summary>
            Mask used with LVM_GETGROUPINFO and LVM_SETGROUPINFO to specify which flags in the state value are being retrieved or set.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVGROUP.state">
            <summary>Flag that can have one of the following values:</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVGROUP.uAlign">
            <summary>
            Indicates the alignment of the header or footer text for the group. It can have one or more of the following values. Use one
            of the header flags. Footer flags are optional.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVGROUP.pszSubtitle">
            <summary>
            Pointer to a null-terminated string that contains the subtitle text when item information is being set. If group information
            is being retrieved, this member specifies the address of the buffer that receives the subtitle text. This element is drawn
            under the header text.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVGROUP.cchSubtitle">
            <summary>
            Size, in TCHARs, of the buffer pointed to by the pszSubtitle member. If the structure is not receiving information about a
            group, this member is ignored.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVGROUP.pszTask">
            <summary>
            Pointer to a null-terminated string that contains the text for a task link when item information is being set. If group
            information is being retrieved, this member specifies the address of the buffer that receives the task text. This item is
            drawn right-aligned opposite the header text. When clicked by the user, the task link generates an LVN_LINKCLICK notification.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVGROUP.cchTask">
            <summary>
            Size in TCHARs of the buffer pointed to by the pszTask member. If the structure is not receiving information about a group,
            this member is ignored.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVGROUP.pszDescriptionTop">
            <summary>
            Pointer to a null-terminated string that contains the top description text when item information is being set. If group
            information is being retrieved, this member specifies the address of the buffer that receives the top description text. This
            item is drawn opposite the title image when there is a title image, no extended image, and uAlign==LVGA_HEADER_CENTER.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVGROUP.cchDescriptionTop">
            <summary>
            Size in TCHARs of the buffer pointed to by the pszDescriptionTop member. If the structure is not receiving information about
            a group, this member is ignored.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVGROUP.pszDescriptionBottom">
            <summary>
            Pointer to a null-terminated string that contains the bottom description text when item information is being set. If group
            information is being retrieved, this member specifies the address of the buffer that receives the bottom description text.
            This item is drawn under the top description text when there is a title image, no extended image, and uAlign==LVGA_HEADER_CENTER.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVGROUP.cchDescriptionBottom">
            <summary>
            Size in TCHARs of the buffer pointed to by the pszDescriptionBottom member. If the structure is not receiving information
            about a group, this member is ignored.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVGROUP.iTitleImage">
            <summary>Index of the title image in the control imagelist.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVGROUP.iExtendedImage">
            <summary>Index of the extended image in the control imagelist.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVGROUP.iFirstItem">
            <summary>Read-only.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVGROUP.cItems">
            <summary>Read-only in non-owner data mode.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVGROUP.pszSubsetTitle">
            <summary>
            NULL if group is not a subset. Pointer to a null-terminated string that contains the subset title text when item information
            is being set. If group information is being retrieved, this member specifies the address of the buffer that receives the
            subset title text.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVGROUP.cchSubsetTitle">
            <summary>
            Size in TCHARs of the buffer pointed to by the pszSubsetTitle member. If the structure is not receiving information about a
            group, this member is ignored.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.LVGROUP.#ctor(Vanara.PInvoke.ComCtl32.ListViewGroupMask,System.String)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.ComCtl32.LVGROUP"/> class.</summary>
            <param name="mask">The mask.</param>
            <param name="header">The header text.</param>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.LVGROUP.DescriptionBottom">
            <summary>Gets or sets the bottom description text.</summary>
            <value>The bottom description text.</value>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.LVGROUP.DescriptionTop">
            <summary>Gets or sets the top description text.</summary>
            <value>The top description text.</value>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.LVGROUP.Footer">
            <summary>Gets or sets the footer.</summary>
            <value>The footer.</value>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.LVGROUP.ID">
            <summary>Gets or sets the identifier.</summary>
            <value>The identifier.</value>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.LVGROUP.TitleImageIndex">
            <summary>Gets or sets the index of the title image.</summary>
            <value>The index of the title image.</value>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.LVGROUP.ExtendedImageIndex">
            <summary>Gets or sets the index of the extended image.</summary>
            <value>The index of the extended image.</value>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.LVGROUP.FirstItem">
            <summary>Gets the first item.</summary>
            <value>The first item.</value>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.LVGROUP.ItemCount">
            <summary>Gets the item count.</summary>
            <value>The item count.</value>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.LVGROUP.Alignment">
            <summary>Gets or sets the alignment.</summary>
            <value>The alignment.</value>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.LVGROUP.Header">
            <summary>Gets or sets the header text.</summary>
            <value>The header text.</value>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.LVGROUP.Subtitle">
            <summary>Gets or sets the subtitle.</summary>
            <value>The subtitle.</value>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.LVGROUP.TaskLink">
            <summary>Gets or sets the task link text.</summary>
            <value>The task link text.</value>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.LVGROUP.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.LVGROUP.SetState(Vanara.PInvoke.ComCtl32.ListViewGroupState,System.Boolean)">
            <summary>Sets the state.</summary>
            <param name="gState">State of the g.</param>
            <param name="on">if set to <c>true</c> [on].</param>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.LVITEM">
            <summary>
            Specifies or receives the attributes of a list-view item. This structure has been updated to support a new mask value
            (LVIF_INDENT) that enables item indenting. This structure supersedes the LV_ITEM structure.
            </summary>
            <seealso cref="T:System.IDisposable"/>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVITEM.mask">
            <summary>
            Set of flags that specify which members of this structure contain data to be set or which members are being requested. This
            member can have one or more of the following flags set:
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVITEM.iItem">
            <summary>Zero-based index of the item to which this structure refers.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVITEM.iSubItem">
            <summary>
            One-based index of the subitem to which this structure refers, or zero if this structure refers to an item rather than a subitem.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVITEM.state">
            <summary>
            Indicates the item's state, state image, and overlay image. The stateMask member indicates the valid bits of this member.
            <para>Bits 0 through 7 of this member contain the item state flags. This can be one or more of the item state values.</para>
            <para>
            Bits 8 through 11 of this member specify the one-based overlay image index. Both the full-sized icon image list and the
            small icon image list can have overlay images. The overlay image is superimposed over the item's icon image. If these bits
            are zero, the item has no overlay image. To isolate these bits, use the LVIS_OVERLAYMASK mask. To set the overlay image
            index in this member, you should use the INDEXTOOVERLAYMASK macro. The image list's overlay images are set with the
            ImageList_SetOverlayImage function.
            </para>
            <para>
            Bits 12 through 15 of this member specify the state image index. The state image is displayed next to an item's icon to
            indicate an application-defined state. If these bits are zero, the item has no state image. To isolate these bits, use the
            LVIS_STATEIMAGEMASK mask. To set the state image index, use the INDEXTOSTATEIMAGEMASK macro. The state image index specifies
            the index of the image in the state image list that should be drawn. The state image list is specified with the
            LVM_SETIMAGELIST message.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVITEM.stateMask">
            <summary>
            Value specifying which bits of the state member will be retrieved or modified. For example, setting this member to
            LVIS_SELECTED will cause only the item's selection state to be retrieved.
            <para>
            This member allows you to modify one or more item states without having to retrieve all of the item states first.For
            example, setting this member to LVIS_SELECTED and state to zero will cause the item's selection state to be cleared, but
            none of the other states will be affected.
            </para>
            <para>To retrieve or modify all of the states, set this member to(UINT)-1.</para>
            <para>You can use the macro ListView_SetItemState both to set and to clear bits.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVITEM.pszText">
            <summary>
            If the structure specifies item attributes, pszText is a pointer to a null-terminated string containing the item text. When
            responding to an LVN_GETDISPINFO notification, be sure that this pointer remains valid until after the next notification has
            been received.
            <para>
            If the structure receives item attributes, pszText is a pointer to a buffer that receives the item text. Note that although
            the list-view control allows any length string to be stored as item text, only the first 260 TCHARs are displayed.
            </para>
            <para>
            If the value of pszText is LPSTR_TEXTCALLBACK, the item is a callback item.If the callback text changes, you must explicitly
            set pszText to LPSTR_TEXTCALLBACK and notify the list-view control of the change by sending an LVM_SETITEM or
            LVM_SETITEMTEXT message.
            </para>
            <para>
            Do not set pszText to LPSTR_TEXTCALLBACK if the list-view control has the LVS_SORTASCENDING or LVS_SORTDESCENDING style.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVITEM.cchTextMax">
            <summary>
            Number of TCHARs in the buffer pointed to by pszText, including the terminating NULL.
            <para>
            This member is only used when the structure receives item attributes.It is ignored when the structure specifies item
            attributes.For example, cchTextMax is ignored during LVM_SETITEM and LVM_INSERTITEM.It is read-only during LVN_GETDISPINFO
            and other LVN_ notifications.
            </para>
            <note>Never copy more than cchTextMax TCHARs—where cchTextMax includes the terminating NULL—into pszText during an LVN_
            notification, otherwise your program can fail.</note>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVITEM.iImage">
            <summary>
            Index of the item's icon in the control's image list. This applies to both the large and small image list. If this member is
            the I_IMAGECALLBACK value, the parent window is responsible for storing the index. In this case, the list-view control sends
            the parent an LVN_GETDISPINFO notification code to retrieve the index when it needs to display the image.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVITEM.lParam">
            <summary>
            Value specific to the item. If you use the LVM_SORTITEMS message, the list-view control passes this value to the
            application-defined comparison function. You can also use the LVM_FINDITEM message to search a list-view control for an item
            with a specified lParam value.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVITEM.iIndent">
            <summary>
            Version 4.70. Number of image widths to indent the item. A single indentation equals the width of an item image. Therefore,
            the value 1 indents the item by the width of one image, the value 2 indents by two images, and so on. Note that this field
            is supported only for items. Attempting to set subitem indentation will cause the calling function to fail.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVITEM.iGroupId">
            <summary>
            Version 6.0 Identifier of the group that the item belongs to, or one of the following values: I_GROUPIDCALLBACK = The
            listview control sends the parent an LVN_GETDISPINFO notification code to retrieve the index of the group; I_GROUPIDNONE =
            The item does not belong to a group.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVITEM.cColumns">
            <summary>
            Version 6.0 Number of data columns (subitems) to display for this item in tile view. The maximum value is 20. If this value
            is I_COLUMNSCALLBACK, the size of the column array and the array itself (puColumns) are obtained by sending a
            LVN_GETDISPINFO notification.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVITEM.puColumns">
            <summary>
            Version 6.0 A pointer to an array of column indices, specifying which columns are displayed for this item, and the order of
            those columns.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVITEM.piColFmt">
            <summary>
            Windows Vista: Not implemented. Windows 7 and later: A pointer to an array of the following flags (alone or in combination),
            specifying the format of each subitem in extended tile view.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.LVITEM.iGroup">
            <summary>Windows Vista: Group index of the item. Valid only for owner data/callback (single item in multiple groups).</summary>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.LVITEM.#ctor(System.Int32,System.Int32,Vanara.PInvoke.ComCtl32.ListViewItemMask,Vanara.PInvoke.ComCtl32.ListViewItemState)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.ComCtl32.LVITEM"/> class.</summary>
            <param name="item">Zero-based index of the item.</param>
            <param name="subitem">One-based index of the subitem.</param>
            <param name="mask">The mask of items to retrieve.</param>
            <param name="stateMask">The state items to retrieve.</param>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.LVITEM.#ctor(System.Int32,System.Int32,System.String)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.ComCtl32.LVITEM"/> class.</summary>
            <param name="item">Zero-based index of the item.</param>
            <param name="subitem">One-based index of the subitem or zero if this structure refers to an item rather than a subitem.</param>
            <param name="text">The item text.</param>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.LVITEM.GroupId">
            <summary>Gets or sets the group identifier.</summary>
            <value>The group identifier.</value>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.LVITEM.ImageIndex">
            <summary>Gets or sets the index of the image.</summary>
            <value>The index of the image.</value>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.LVITEM.Indent">
            <summary>Gets or sets the indent.</summary>
            <value>The indent.</value>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.LVITEM.LParam">
            <summary>Gets or sets the l parameter.</summary>
            <value>The l parameter.</value>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.LVITEM.Text">
            <summary>Gets or sets the text.</summary>
            <value>The text.</value>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.LVITEM.TileColumns">
            <summary>Gets or sets the tile columns.</summary>
            <value>The tile columns.</value>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.LVITEM.GetState(Vanara.PInvoke.ComCtl32.ListViewItemState)">
            <summary>Gets the state.</summary>
            <param name="state">The state.</param>
            <returns>The value of the specified state.</returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.LVITEM.SetState(Vanara.PInvoke.ComCtl32.ListViewItemState,System.Boolean)">
            <summary>Sets the state.</summary>
            <param name="state">The state value to set.</param>
            <param name="value"><c>true</c> to set, <c>false</c> to unset.</param>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.LVITEM.StateFlags">
            <summary>Gets the state flags.</summary>
            <value>The state flags.</value>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.LVITEM.CutOrPaste">
            <summary>Gets or sets a value indicating whether the item is marked for a cut-and-paste operation.</summary>
            <value><c>true</c> if marked for a cut-and-paste operation; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.LVITEM.DropHighlighted">
            <summary>Gets or sets a value indicating whether the item is highlighted as a drag-and-drop target.</summary>
            <value><c>true</c> if highlighted as a drag-and-drop target; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.LVITEM.Focused">
            <summary>Gets or sets a value indicating whether this item has the focus.</summary>
            <value><c>true</c> if focused; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.LVITEM.Selected">
            <summary>Gets or sets a value indicating whether this item is selected.</summary>
            <value><c>true</c> if selected; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.LVITEM.OverlayImageIndex">
            <summary>Gets or sets the index of the overlay image.</summary>
            <value>The index of the overlay image.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">OverlayImageIndex - Overlay image index must be between 0 and 15</exception>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.LVITEM.StateImageIndex">
            <summary>Gets or sets the index of the state image.</summary>
            <value>The index of the state image.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">StateImageIndex - State image index must be between 0 and 15</exception>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.LVITEM.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents this instance.</summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.LVITEM.System#IDisposable#Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.CommonControlMessage">
            <summary>General Control Messages</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CommonControlMessage.CCM_SETBKCOLOR">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CommonControlMessage.CCM_SETCOLORSCHEME">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CommonControlMessage.CCM_GETCOLORSCHEME">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CommonControlMessage.CCM_GETDROPTARGET">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CommonControlMessage.CCM_SETUNICODEFORMAT">
            <summary>
            Sets the Unicode character format flag for the control. This message enables you to change the character set used by the
            control at run time rather than having to re-create the control.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>
            A value that determines the character set that is used by the control. If this value is <c>TRUE</c>, the control will use
            Unicode characters. If this value is <c>FALSE</c>, the control will use ANSI characters.
            </para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the previous Unicode format flag for the control.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CommonControlMessage.CCM_GETUNICODEFORMAT">
            <summary>Gets the Unicode character format flag for the control.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>
            Returns the Unicode format flag for the control. If this value is nonzero, the control is using Unicode characters. If this
            value is zero, the control is using ANSI characters.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CommonControlMessage.CCM_SETVERSION">
            <summary>This message is used to inform the control that you are expecting a behavior associated with a particular version.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>The version number.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>
            Returns the version specified in the previous <c>CCM_SETVERSION</c> message. If wParam is set to a value greater than the
            current DLL version, it returns -1.
            </para>
            </summary>
            <remarks>
            <para>
            In a few cases, a control may behave differently, depending on the version. This primarily applies to bugs that were fixed in
            later versions. The <c>CCM_SETVERSION</c> message enables you to inform the control which behavior is expected. You can
            determine which version you have specified by sending a <c>CCM_GETVERSION</c> message. For an example of how to use this
            message, see Custom Draw With List-View and Tree-View Controls.
            </para>
            <para>
            If you have ComCtl32.dll version 6 installed, regardless of what value you set in wParam, the <c>CCM_SETVERSION</c> message
            returns version 6.
            </para>
            <para>
            <para>Note</para>
            <para>This message only sets the version number for the control to which it is sent.</para>
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CommonControlMessage.CCM_GETVERSION">
            <summary>Gets the version number for a control set by the most recent <c>CCM_SETVERSION</c> message.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>
            Returns the version number set by the most recent <c>CCM_SETVERSION</c> message. If no such message has been sent, it returns zero.
            </para>
            </summary>
            <remarks>
            <para>
            This message does not return the DLL version. See Shell Versions for a discussion of how to use <c>DllGetVersion</c> to
            retrieve the current DLL version.
            </para>
            <para>
            <para>Note</para>
            <para>The version number is set on a control by control basis, and may not be the same for all controls.</para>
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CommonControlMessage.CCM_SETNOTIFYWINDOW">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CommonControlMessage.CCM_SETWINDOWTHEME">
            <summary>Sets the visual style of a control.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>A pointer to a Unicode string that contains the control visual style to set.</para>
            <para><strong>Returns</strong></para>
            <para>The return value is not used.</para>
            </summary>
            <remarks>
            <para>Note</para>
            <para>
            To use this message, you must provide a manifest specifying Comclt32.dll version 6.0. For more information on manifests, see
            Enabling Visual Styles.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CommonControlMessage.CCM_DPISCALE">
            <summary>
            Enables automatic high dots per inch (dpi) scaling in Tree-View controls, List-View controls, ComboBoxEx controls, Header
            controls, Buttons, Toolbar controls, Animation controls, and Image Lists.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Set to <c>TRUE</c>.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>The return value is not used.</para>
            </summary>
            <remarks>
            <para>Quick Launch and Taskbar should not specify a dpi scaling, because the images are already scaled.</para>
            <para>Any control that uses an image list created with the SmallIcon metric should not scale its icons.</para>
            <para>
            <para>Note</para>
            <para>
            To use this API, you must provide a manifest that specifies Comclt32.dll version 6.0. For more information on manifests, see
            Enabling Visual Styles.
            </para>
            </para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.ProgressMessage">
            <summary>Progress Bar Messages</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ProgressMessage.PBM_SETRANGE">
            <summary>Sets the minimum and maximum values for a progress bar and redraws the bar to reflect the new range.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>
            The <c>LOWORD</c> specifies the minimum range value, and the <c>HIWORD</c> specifies the maximum range value. The minimum
            range value must not be negative. By default, the minimum value is zero. The maximum range value must be greater than the
            minimum range value. By default, the maximum range value is 100.
            </para>
            <para><strong>Returns</strong></para>
            <para>
            Returns the previous range values if successful, or zero otherwise. The <c>LOWORD</c> specifies the previous minimum value,
            and the <c>HIWORD</c> specifies the previous maximum value.
            </para>
            </summary>
            <remarks>
            <para>
            If you do not set the range values, the system sets the minimum value to 0 and the maximum value to 100. Because this message
            expresses the range as a 16-bit unsigned integer, it can extend from 0 to 65,535. The minimum value in the range can be from
            0 to 65,535. Likewise, the maximum value can be from 0 to 65,535.
            </para>
            <para>To set a larger range, call <c>PBM_SETRANGE32</c>.</para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ProgressMessage.PBM_SETPOS">
            <summary>Sets the current position for a progress bar and redraws the bar to reflect the new position.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Signed integer that becomes the new position.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the previous position.</para>
            </summary>
            <remarks>
            <para>If wParam is outside the range of the control, the position is set to the closest boundary.</para>
            <para>Do not send this message to a control that has the <c>PBS_MARQUEE</c> style.</para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ProgressMessage.PBM_DELTAPOS">
            <summary>
            Advances the current position of a progress bar by a specified increment and redraws the bar to reflect the new position.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Amount to advance the position.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the previous position.</para>
            </summary>
            <remarks>
            <para>If the increment results in a value outside the range of the control, the position is set to the nearest boundary.</para>
            <para>The behavior of this message is undefined if it is sent to a control that has the <c>PBS_MARQUEE</c> style.</para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ProgressMessage.PBM_SETSTEP">
            <summary>
            Specifies the step increment for a progress bar. The step increment is the amount by which the progress bar increases its
            current position whenever it receives a <c>PBM_STEPIT</c> message. By default, the step increment is set to 10.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>New step increment.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the previous step increment.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ProgressMessage.PBM_STEPIT">
            <summary>
            Advances the current position for a progress bar by the step increment and redraws the bar to reflect the new position. An
            application sets the step increment by sending the <c>PBM_SETSTEP</c> message.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the previous position.</para>
            </summary>
            <remarks>
            When the position exceeds the maximum range value, this message resets the current position so that the progress indicator
            starts over again from the beginning.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ProgressMessage.PBM_SETRANGE32">
            <summary>
            Sets the minimum and maximum values for a progress bar to 32-bit values, and redraws the bar to reflect the new range.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Minimum range value. By default, the minimum value is zero.</para>
            <para><em>lParam</em></para>
            <para>Maximum range value. This value must be greater than wParam. By default, the maximum value is 100.</para>
            <para><strong>Returns</strong></para>
            <para>
            Returns a <c>DWORD</c> value that holds the previous 16-bit low limit in its <c>LOWORD</c> and the previous 16-bit high limit
            in its <c>HIWORD</c>. If the previous ranges were 32-bit values, the return value consists of the <c>LOWORD</c> s of both
            32-bit limits.
            </para>
            </summary>
            <remarks>To retrieve the entire high and low 32-bit values, use the <c>PBM_GETRANGE</c> message.</remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ProgressMessage.PBM_GETRANGE">
            <summary>Retrieves information about the current high and low limits of a given progress bar control.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>
            Flag value specifying which limit value is to be used as the message's return value. This parameter can be one of the
            following values:
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term><c><c>TRUE</c></c></term>
            <term>Return the low limit.</term>
            </item>
            <item>
            <term><c><c>FALSE</c></c></term>
            <term>Return the high limit.</term>
            </item>
            </list>
            <para><em>lParam</em></para>
            <para>
            Pointer to a <c>PBRANGE</c> structure that is to be filled with the high and low limits of the progress bar control. If this
            parameter is set to <c>NULL</c>, the control will return only the limit specified by wParam.
            </para>
            <para><strong>Returns</strong></para>
            <para>
            Returns an INT that represents the limit value specified by wParam. If lParam is not <c>NULL</c>, lParam must point to a
            <c>PBRANGE</c> structure that is to be filled with both limit values.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ProgressMessage.PBM_GETPOS">
            <summary>Retrieves the current position of the progress bar.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns a <c>UINT</c> value that represents the current position of the progress bar.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ProgressMessage.PBM_SETBARCOLOR">
            <summary>Sets the color of the progress indicator bar in the progress bar control.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>
            The <c>COLORREF</c> value that specifies the new progress indicator bar color. Specifying the CLR_DEFAULT value causes the
            progress bar to use its default progress indicator bar color.
            </para>
            <para><strong>Returns</strong></para>
            <para>
            Returns the previous progress indicator bar color, or CLR_DEFAULT if the progress indicator bar color is the default color.
            </para>
            </summary>
            <remarks>When visual styles are enabled, this message has no effect.</remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ProgressMessage.PBM_SETBKCOLOR">
            <summary>Sets the background color in the progress bar.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>
            <c>COLORREF</c> value that specifies the new background color. Specify the CLR_DEFAULT value to cause the progress bar to use
            its default background color.
            </para>
            <para><strong>Returns</strong></para>
            <para>Returns the previous background color, or CLR_DEFAULT if the background color is the default color.</para>
            </summary>
            <remarks>When visual styles are enabled, this message has no effect.</remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ProgressMessage.PBM_SETMARQUEE">
            <summary>Sets the progress bar to marquee mode. This causes the progress bar to move like a marquee.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Indicates whether to turn the marquee mode on or off.</para>
            <para><em>lParam</em></para>
            <para>
            Time, in milliseconds, between marquee animation updates. If this parameter is zero, the marquee animation is updated every
            30 milliseconds.
            </para>
            <para><strong>Returns</strong></para>
            <para>Always returns <c>TRUE</c>.</para>
            </summary>
            <remarks>
            <para>
            Use this message when you do not know the amount of progress toward completion but wish to indicate that progress is being made.
            </para>
            <para>Send the <c>PBM_SETMARQUEE</c> message to start or stop the animation.</para>
            <para>
            <para>Note</para>
            <para>You must set the control style to <c>PBS_MARQUEE</c> before attempting to start the animation.</para>
            </para>
            <para>
            <para>Note</para>
            <para>This message requires ComCtl32.dll version 6.00 or later.</para>
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ProgressMessage.PBM_GETSTEP">
            <summary>
            Retrieves the step increment from a progress bar. The step increment is the amount by which the progress bar increases its
            current position whenever it receives a <c>PBM_STEPIT</c> message. By default, the step increment is set to 10.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the current step increment.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ProgressMessage.PBM_GETBKCOLOR">
            <summary>Gets the background color of the progress bar.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the background color of the progress bar.</para>
            </summary>
            <remarks>
            <para>This is the color set by the <c>PBM_SETBKCOLOR</c> message. The default value is CLR_DEFAULT, which is defined in commctrl.h.</para>
            <para>This function only affects the classic mode, not any visual style.</para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ProgressMessage.PBM_GETBARCOLOR">
            <summary>Gets the color of the progress bar.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the color of the progress bar.</para>
            </summary>
            <remarks>
            <para>
            This is the color set by the <c>PBM_SETBARCOLOR</c> message. The default value is CLR_DEFAULT, which is defined in commctrl.h.
            </para>
            <para>This function only affects the classic mode, not any visual style.</para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ProgressMessage.PBM_SETSTATE">
            <summary>Sets the state of the progress bar.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>State of the progress bar that is being set. One of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term><c>PBST_NORMAL</c></term>
            <term>In progress.</term>
            </item>
            <item>
            <term><c>PBST_ERROR</c></term>
            <term>Error.</term>
            </item>
            <item>
            <term><c>PBST_PAUSED</c></term>
            <term>Paused.</term>
            </item>
            </list>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the previous state.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ProgressMessage.PBM_GETSTATE">
            <summary>Gets the state of the progress bar.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the current state of the progress bar. One of the following values.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term><c>PBST_NORMAL</c></term>
            <term>In progress.</term>
            </item>
            <item>
            <term><c>PBST_ERROR</c></term>
            <term>Error.</term>
            </item>
            <item>
            <term><c>PBST_PAUSED</c></term>
            <term>Paused.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.ProgressState">
            <summary>State of the progress bar used in PBM_SETSTATE and PBM_GETSTATE messages.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ProgressState.PBST_NORMAL">
            <summary>In progress</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ProgressState.PBST_ERROR">
            <summary>Error.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ProgressState.PBST_PAUSED">
            <summary>Paused.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.ProgressStyle">
            <summary>The following control styles are supported by Progress Bar controls:</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ProgressStyle.PBS_SMOOTH">
            <summary>
            Version 4.70 or later. The progress bar displays progress status in a smooth scrolling bar instead of the default segmented
            bar. <note type="note">This style is supported only in the Windows Classic theme. All other themes override this style.</note>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ProgressStyle.PBS_VERTICAL">
            <summary>Version 4.70 or later. The progress bar displays progress status vertically, from bottom to top.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ProgressStyle.PBS_MARQUEE">
            <summary>
            Version 6.0 or later. The progress indicator does not grow in size but instead moves repeatedly along the length of the bar,
            indicating activity without specifying what proportion of the progress is complete. <note type="note">Comctl32.dll version 6
            is not redistributable but it is included in Windows or later. To use Comctl32.dll version 6, specify it in a manifest. For
            more information on manifests, see Enabling Visual Styles.</note>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ProgressStyle.PBS_SMOOTHREVERSE">
            <summary>
            Version 6.0 or later and Windows Vista. Determines the animation behavior that the progress bar should use when moving
            backward (from a higher value to a lower value). If this is set, then a "smooth" transition will occur, otherwise the control
            will "jump" to the lower value.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.PBRANGE">
            <summary>
            Contains information about the high and low limits of a progress bar control. This structure is used with the PBM_GETRANGE message.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.PBRANGE.iLow">
            <summary>Low limit for the progress bar control. This is a signed integer.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.PBRANGE.iHigh">
            <summary>High limit for the progress bar control. This is a signed integer.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.AddPropSheetPageProc">
            <summary>
            Specifies an application-defined callback function that a property sheet extension uses to add a page to a property sheet.
            </summary>
            <param name="hpage">
            <para>Type: <c>HPROPSHEETPAGE</c></para>
            <para>Handle to a property sheet page.</para>
            </param>
            <param name="lParam">
            <para>Type: <c><c>LPARAM</c></c></para>
            <para>Application-defined 32-bit value.</para>
            </param>
            <returns>
            <para>Type: <c><c>BOOL</c></c></para>
            <para>Returns <c>TRUE</c> if successful, or <c>FALSE</c> otherwise.</para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.PropSheetPageProc">
            <summary>
            Specifies an application-defined callback function that a property sheet calls when a page is created and when it is about to be
            destroyed. An application can use this function to perform initialization and cleanup operations for the page.
            </summary>
            <param name="hwnd">Reserved; must be NULL.</param>
            <param name="uMsg">Action flag.</param>
            <param name="ppsp">
            Pointer to a PROPSHEETPAGE structure that defines the page being created or destroyed. See the Remarks section for further discussion.
            </param>
            <returns>The return value depends on the value of the uMsg parameter.</returns>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.PropSheetProc">
            <summary>An application-defined callback function that the system calls when the property sheet is being created and initialized.</summary>
            <param name="hwndDlg">Handle to the property sheet dialog box.</param>
            <param name="uMsg">
            Message being received. This parameter is one of the following values.
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>PSCB_BUTTONPRESSED</term>
            <term>
            Version 6.0 and later.Indicates the user pressed a button in the property sheet dialog box.To enable this, specify
            PSH_USECALLBACK in PROPSHEETHEADER.dwFlags and specify the name of this callback function in PROPSHEETHEADER.pfnCallback. The
            lParam value is one of the following. Note that only PSBTN_CANCEL is valid when you are using the Aero wizard style(PSH_AEROWIZARD).
            <list type="table">
            <listheader>
            <term>Button pressed</term>
            <term>lParam value</term>
            </listheader>
            <item>
            <term>OK</term>
            <term>PSBTN_OK</term>
            </item>
            <item>
            <term>Cancel</term>
            <term>PSBTN_CANCEL</term>
            </item>
            <item>
            <term>Apply</term>
            <term>PSBTN_APPLYNOW</term>
            </item>
            <item>
            <term>Close</term>
            <term>PSBTN_FINISH</term>
            </item>
            </list>
            <para>
            Note that Comctl32.dll versions 6 and later are not redistributable.To use these versions of Comctl32.dll, specify the
            particular version in a manifest. For more information on manifests, see Enabling Visual Styles.
            </para>
            </term>
            </item>
            <item>
            <term>PSCB_INITIALIZED</term>
            <term>Indicates that the property sheet is being initialized. The lParam value is zero for this message.</term>
            </item>
            <item>
            <term>PSCB_PRECREATE</term>
            <term>
            Indicates that the property sheet is about to be created. The hwndDlg parameter is NULL, and the lParam parameter is the address
            of a dialog template in memory.This template is in the form of a DLGTEMPLATE or DLGTEMPLATEEX structure followed by one or more
            DLGITEMTEMPLATE structures.This message is not applicable if you are using the Aero wizard style(PSH_AEROWIZARD).
            </term>
            </item>
            </list>
            </param>
            <param name="lParam">
            Additional information about the message. The meaning of this value depends on the uMsg parameter.
            <para>If uMsg is PSCB_INITIALIZED or PSCB_BUTTONPRESSED, the value of lParam is zero.</para>
            <para>
            If uMsg is PSCB_PRECREATE, then lParam will be a pointer to either a DLGTEMPLATE or DLGTEMPLATEEX structure describing the
            property sheet dialog box. Test the signature of the structure to determine the type. If signature is equal to 0xFFFF then the
            structure is an extended dialog template, otherwise the structure is a standard dialog template.
            </para>
            </param>
            <returns>Returns zero.</returns>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.PropSheetCallbackMessage">
            <summary>Message being received.This parameter is one of the following values.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.PropSheetCallbackMessage.PSCB_BUTTONPRESSED">
            <summary>
            Version 6.0 and later.Indicates the user pressed a button in the property sheet dialog box.To enable this, specify
            PSH_USECALLBACK in PROPSHEETHEADER.dwFlags and specify the name of this callback function in PROPSHEETHEADER.pfnCallback.
            The lParam value is one of the following. Note that only PSBTN_CANCEL is valid when you are using the Aero wizard style(PSH_AEROWIZARD).
            <list type="table">
            <listheader>
            <term>Button pressed</term>
            <term>lParam value</term>
            </listheader>
            <item>
            <term>OK</term>
            <term>PSBTN_OK</term>
            </item>
            <item>
            <term>Cancel</term>
            <term>PSBTN_CANCEL</term>
            </item>
            <item>
            <term>Apply</term>
            <term>PSBTN_APPLYNOW</term>
            </item>
            <item>
            <term>Close</term>
            <term>PSBTN_FINISH</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.PropSheetCallbackMessage.PSCB_INITIALIZED">
            <summary>Indicates that the property sheet is being initialized. The lParam value is zero for this message.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.PropSheetCallbackMessage.PSCB_PRECREATE">
            <summary>
            Indicates that the property sheet is about to be created. The hwndDlg parameter is NULL, and the lParam parameter is the
            address of a dialog template in memory. This template is in the form of a DLGTEMPLATE or DLGTEMPLATEEX structure followed by
            one or more DLGITEMTEMPLATE structures. This message is not applicable if you are using the Aero wizard style (PSH_AEROWIZARD).
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.PropSheetFlags">
            <summary>Flags used by the <see cref="F:Vanara.PInvoke.ComCtl32.PROPSHEETPAGE.dwFlags"/> field.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.PropSheetFlags.PSP_DEFAULT">
            <summary>
            Uses the default meaning for all structure members. This flag is not supported when using the Aero-style wizard (PSH_AEROWIZARD).
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.PropSheetFlags.PSP_DLGINDIRECT">
            <summary>
            Creates the page from the dialog box template in memory pointed to by the pResource member. The PropertySheet function
            assumes that the template that is in memory is not write-protected. A read-only template will cause an exception in some
            versions of Windows.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.PropSheetFlags.PSP_HASHELP">
            <summary>
            Enables the property sheet Help button when the page is active. This flag is not supported when using the Aero-style wizard (PSH_AEROWIZARD).
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.PropSheetFlags.PSP_HIDEHEADER">
            <summary>
            Version 5.80 and later. Causes the wizard property sheet to hide the header area when the page is selected. If a watermark
            has been provided, it will be painted on the left side of the page. This flag should be set for welcome and completion
            pages, and omitted for interior pages. This flag is not supported when using the Aero-style wizard (PSH_AEROWIZARD).
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.PropSheetFlags.PSP_PREMATURE">
            <summary>
            Version 4.71 or later. Causes the page to be created when the property sheet is created. If this flag is not specified, the
            page will not be created until it is selected the first time. This flag is not supported when using the Aero-style wizard (PSH_AEROWIZARD).
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.PropSheetFlags.PSP_RTLREADING">
            <summary>
            Reverses the direction in which pszTitle is displayed. Normal windows display all text, including pszTitle, left-to-right
            (LTR). For languages such as Hebrew or Arabic that read right-to-left (RTL), a window can be mirrored and all text will be
            displayed RTL. If PSP_RTLREADING is set, pszTitle will instead read RTL in a normal parent window, and LTR in a mirrored
            parent window.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.PropSheetFlags.PSP_USECALLBACK">
            <summary>
            Calls the function specified by the pfnCallback member when creating or destroying the property sheet page defined by this structure.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.PropSheetFlags.PSP_USEFUSIONCONTEXT">
            <summary>
            Version 6.0 and later. Use an activation context. To use an activation context, you must set this flag and assign the
            activation context handle to hActCtx. See the Remarks.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.PropSheetFlags.PSP_USEHEADERSUBTITLE">
            <summary>
            Version 5.80 or later. Displays the string pointed to by the pszHeaderSubTitle member as the subtitle of the header area of
            a Wizard97 page. To use this flag, you must also set the PSH_WIZARD97 flag in the dwFlags member of the associated
            PROPSHEETHEADER structure. The PSP_USEHEADERSUBTITLE flag is ignored if PSP_HIDEHEADER is set. In Aero-style wizards, the
            title appears near the top of the client area.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.PropSheetFlags.PSP_USEHEADERTITLE">
            <summary>
            Version 5.80 or later. Displays the string pointed to by the pszHeaderTitle member as the title in the header of a Wizard97
            interior page. You must also set the PSH_WIZARD97 flag in the dwFlags member of the associated PROPSHEETHEADER structure.
            The PSP_USEHEADERTITLE flag is ignored if PSP_HIDEHEADER is set. This flag is not supported when using the Aero-style wizard (PSH_AEROWIZARD).
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.PropSheetFlags.PSP_USEHICON">
            <summary>
            Uses hIcon as the small icon on the tab for the page. This flag is not supported when using the Aero-style wizard (PSH_AEROWIZARD).
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.PropSheetFlags.PSP_USEICONID">
            <summary>
            Uses pszIcon as the name of the icon resource to load and use as the small icon on the tab for the page. This flag is not
            supported when using the Aero-style wizard (PSH_AEROWIZARD).
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.PropSheetFlags.PSP_USEREFPARENT">
            <summary>
            Maintains the reference count specified by the pcRefParent member for the lifetime of the property sheet page created from
            this structure.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.PropSheetFlags.PSP_USETITLE">
            <summary>
            Uses the pszTitle member as the title of the property sheet dialog box instead of the title stored in the dialog box
            template. This flag is not supported when using the Aero-style wizard (PSH_AEROWIZARD).
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.PropSheetHeaderFlags">
            <summary>Flags used by the <see cref="F:Vanara.PInvoke.ComCtl32.PROPSHEETHEADER.dwFlags"/> field.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.PropSheetHeaderFlags.PSH_DEFAULT">
            <summary>
            Uses the default meaning for all structure members, and creates a normal property sheet. This flag has a value of zero and
            is not combined with other flags.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.PropSheetHeaderFlags.PSH_AEROWIZARD">
            <summary>
            Version 6.00 and Windows Vista.. Creates a wizard property sheet that uses the newer Aero style. The PSH_WIZARD flag must
            also be set. The single-threaded apartment (STA) model must be used.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.PropSheetHeaderFlags.PSH_HASHELP">
            <summary>
            Permits property sheet pages to display a Help button. You must also set the PSP_HASHELP flag in the page's PROPSHEETPAGE
            structure when the page is created. If any of the initial property sheet pages enable a Help button, PSH_HASHELP will be set
            automatically. If none of the initial pages enable a Help button, you must explicitly set PSH_HASHELP if you want to have
            Help buttons on any pages that might be added later. This flag is not supported in conjunction with PSH_AEROWIZARD.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.PropSheetHeaderFlags.PSH_HEADER">
            <summary>
            Version 5.80 and later. Indicates that a header bitmap will be used with a Wizard97 wizard. You must also set the
            PSH_WIZARD97 flag. The header bitmap is obtained from the pszbmHeader member, unless the PSH_USEHBMHEADER flag is also set.
            In that case, the header bitmap is obtained from the hbmHeader member. This flag is not supported in conjunction with PSH_AEROWIZARD.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.PropSheetHeaderFlags.PSH_HEADERBITMAP">
            <summary>
            Version 6.00 and Windows Vista..The pszbmHeader member specifies a bitmap that is displayed in the header area. Must be used
            in combination with PSH_AEROWIZARD.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.PropSheetHeaderFlags.PSH_MODELESS">
            <summary>
            Causes the PropertySheet function to create the property sheet as a modeless dialog box instead of as a modal dialog box.
            When this flag is set, PropertySheet returns immediately after the dialog box is created, and the return value from
            PropertySheet is the window handle to the property sheet dialog box. This flag is not supported in conjunction with PSH_AEROWIZARD.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.PropSheetHeaderFlags.PSH_NOAPPLYNOW">
            <summary>Removes the Apply button. This flag is not supported in conjunction with PSH_AEROWIZARD.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.PropSheetHeaderFlags.PSH_NOCONTEXTHELP">
            <summary>
            Version 5.80 and later. Removes the context-sensitive Help button ("?"), which is usually present on the caption bar of
            property sheets. This flag is not valid for wizards. See About Property Sheets for a discussion of how to remove the caption
            bar Help button for earlier versions of the common controls. This flag is not supported in conjunction with PSH_AEROWIZARD.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.PropSheetHeaderFlags.PSH_NOMARGIN">
            <summary>
            Version 6.00 and Windows Vista.. Specifies that no margin is inserted between the page and the frame. Must be used in
            combination with PSH_AEROWIZARD.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.PropSheetHeaderFlags.PSH_PROPSHEETPAGE">
            <summary>Uses the ppsp member and ignores the phpage member when creating the pages for the property sheet.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.PropSheetHeaderFlags.PSH_PROPTITLE">
            <summary>
            Displays a title in the title bar of the property sheet. The title takes the appropriate form for the Windows version. In
            more recent versions of Windows, the title is the string specified by the pszCaption followed by the string "Properties". In
            older versions of Windows, the title is the string "Properties for", followed by the string specified by the pszCaption
            member. This flag is not supported for wizards.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.PropSheetHeaderFlags.PSH_RESIZABLE">
            <summary>
            Allows the wizard to be resized by the user. Maximize and minimize buttons appear in the wizard's frame and the frame is
            sizable. To use this flag, you must also set PSH_AEROWIZARD.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.PropSheetHeaderFlags.PSH_RTLREADING">
            <summary>
            Displays the title of the property sheet (pszCaption) using right-to-left (RTL) reading order for Hebrew or Arabic
            languages. If this flag is not specified, the title is displayed in left-to-right (LTR) reading order.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.PropSheetHeaderFlags.PSH_STRETCHWATERMARK">
            <summary>
            Stretches the watermark in Internet Explorer 4.0-compatible Wizard97-style wizards. This flag is not supported in
            conjunction with PSH_AEROWIZARD. <note>This style flag is only included to provide backward compatibility for certain
            applications. Its use is not recommended, and it is only supported by common controls versions 4.0 and 4.01. With common
            controls version 5.80 and later, this flag is ignored.</note>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.PropSheetHeaderFlags.PSH_USECALLBACK">
            <summary>
            Calls the function specified by the pfnCallback member when initializing the property sheet defined by this structure.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.PropSheetHeaderFlags.PSH_USEHBMHEADER">
            <summary>
            Version 5.80 or later. Obtains the header bitmap from the hbmHeader member instead of the pszbmHeader member. You must also
            set either the PSH_AEROWIZARD flag or the PSH_WIZARD97 flag together with the PSH_HEADER flag.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.PropSheetHeaderFlags.PSH_USEHBMWATERMARK">
            <summary>
            Version 5.80 or later. Obtains the watermark bitmap from the hbmWatermark member instead of the pszbmWatermark member. You
            must also set PSH_WIZARD97 and PSH_WATERMARK. This flag is not supported in conjunction with PSH_AEROWIZARD.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.PropSheetHeaderFlags.PSH_USEHICON">
            <summary>Uses hIcon as the small icon in the title bar of the property sheet dialog box.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.PropSheetHeaderFlags.PSH_USEHPLWATERMARK">
            <summary>
            Version 5.80 or later. Uses the HPALETTE structure pointed to by the hplWatermark member instead of the default palette to
            draw the watermark bitmap and/or header bitmap for a Wizard97 wizard. You must also set PSH_WIZARD97, and PSH_WATERMARK or
            PSH_HEADER. This flag is not supported in conjunction with PSH_AEROWIZARD.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.PropSheetHeaderFlags.PSH_USEICONID">
            <summary>
            Uses pszIcon as the name of the icon resource to load and use as the small icon in the title bar of the property sheet
            dialog box.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.PropSheetHeaderFlags.PSH_USEPAGELANG">
            <summary>
            Version 5.80 or later. Specifies that the language for the property sheet will be taken from the first page's resource. That
            page must be specified by resource identifier.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.PropSheetHeaderFlags.PSH_USEPSTARTPAGE">
            <summary>
            Uses the pStartPage member instead of the nStartPage member when displaying the initial page of the property sheet.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.PropSheetHeaderFlags.PSH_WATERMARK">
            <summary>
            Version 5.80 or later. Specifies that a watermark bitmap will be used with a Wizard97 wizard on pages that have the
            PSP_HIDEHEADER style. You must also set the PSH_WIZARD97 flag. The watermark bitmap is obtained from the pszbmWatermark
            member, unless PSH_USEHBMWATERMARK is set. In that case, the header bitmap is obtained from the hbmWatermark member. This
            flag is not supported in conjunction with PSH_AEROWIZARD.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.PropSheetHeaderFlags.PSH_WIZARD">
            <summary>Creates a wizard property sheet. When using PSH_AEROWIZARD, you must also set this flag.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.PropSheetHeaderFlags.PSH_WIZARD97">
            <summary>
            Version 5.80 or later. Creates a Wizard97-style property sheet, which supports bitmaps in the header of interior pages and
            on the left side of exterior pages. This flag is not supported in conjunction with PSH_AEROWIZARD.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.PropSheetHeaderFlags.PSH_WIZARDCONTEXTHELP">
            <summary>
            Adds a context-sensitive Help button ("?"), which is usually absent from the caption bar of a wizard. This flag is not valid
            for regular property sheets. This flag is not supported in conjunction with PSH_AEROWIZARD.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.PropSheetHeaderFlags.PSH_WIZARDHASFINISH">
            <summary>Always displays the Finish button on the wizard. You must also set either PSH_WIZARD, PSH_WIZARD97, or PSH_AEROWIZARD.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.PropSheetHeaderFlags.PSH_WIZARD_LITE">
            <summary>
            Version 5.80 or later. Uses the Wizard-lite style. This style is similar in appearance to PSH_WIZARD97, but it is
            implemented much like PSH_WIZARD. There are few restrictions on how the pages are formatted. For instance, there are no
            enforced borders, and the PSH_WIZARD_LITE style does not paint the watermark and header bitmaps for you the way Wizard97
            does. This flag is not supported in conjunction with PSH_AEROWIZARD.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.PropSheetPageCallbackAction">
            <summary>Action flag.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.PropSheetPageCallbackAction.PSPCB_ADDREF">
            <summary>Version 5.80 or later. A page is being created. The return value is not used.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.PropSheetPageCallbackAction.PSPCB_RELEASE">
            <summary>A page is being destroyed. The return value is ignored.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.PropSheetPageCallbackAction.PSPCB_CREATE">
            <summary>A dialog box for a page is being created. Return nonzero to allow it to be created, or zero to prevent it.</summary>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.CreatePropertySheetPage(Vanara.PInvoke.ComCtl32.PROPSHEETPAGE)">
            <summary>Creates a new page for a property sheet.</summary>
            <param name="lppsp">
            <para>Type: <c>LPCPROPSHEETPAGE</c></para>
            <para>Pointer to a <c>PROPSHEETPAGE</c> structure that defines a page to be included in a property sheet.</para>
            </param>
            <returns>
            <para>Type: <c>HPROPSHEETPAGE</c></para>
            <para>Returns the handle to the new property page if successful, or <c>NULL</c> otherwise.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.DestroyPropertySheetPage(Vanara.PInvoke.HPROPSHEETPAGE)">
            <summary>
            Destroys a property sheet page. An application must call this function for pages that have not been passed to the
            <c>PropertySheet</c> function.
            </summary>
            <param name="hPSPage">
            <para>Type: <c>HPROPSHEETPAGE</c></para>
            <para>Handle to the property sheet page to delete.</para>
            </param>
            <returns>
            <para>Type: <c><c>BOOL</c></c></para>
            <para>Returns nonzero if successful, or zero otherwise.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.PropertySheet(Vanara.PInvoke.ComCtl32.PROPSHEETHEADER@)">
            <summary>Creates a property sheet and adds the pages defined in the specified property sheet header structure.</summary>
            <param name="lppsph">
            <para>Type: <c>LPCPROPSHEETHEADER</c></para>
            <para>Pointer to a <c>PROPSHEETHEADER</c> structure that defines the frame and pages of a property sheet.</para>
            </param>
            <returns>
            <para>Type: <c><c>INT_PTR</c></c></para>
            <para>For modal property sheets, the return value is as follows:</para>
            <para>
            <list type="table">
            <listheader>
            <term>&amp;gt;=1</term>
            <term>Changes were saved by the user.</term>
            </listheader>
            <item>
            <term>0</term>
            <term>No changes were saved by the user.</term>
            </item>
            <item>
            <term>-1</term>
            <term>An error occurred.</term>
            </item>
            </list>
            </para>
            <para>For modeless property sheets, the return value is the property sheet's window handle.</para>
            <para>The following return values have a special meaning.</para>
            <para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ID_PSREBOOTSYSTEM</term>
            <term>
            A page sent the PSM_REBOOTSYSTEM message to the property sheet. The computer must be restarted for the user's changes to take effect.
            </term>
            </item>
            <item>
            <term>ID_PSRESTARTWINDOWS</term>
            <term>
            A page sent the PSM_RESTARTWINDOWS message to the property sheet. Windows must be restarted for the user's changes to take effect.
            </term>
            </item>
            </list>
            </para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.PROPSHEETHEADER">
            <summary>Defines the frame and pages of a property sheet.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.PROPSHEETHEADER.dwSize">
            <summary>
            Size, in bytes, of this structure. The property sheet manager uses this member to determine which version of the
            PROPSHEETHEADER structure you are using. For more information, see the Remarks.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.PROPSHEETHEADER.dwFlags">
            <summary>Flags that indicate which options to use when creating the property sheet page.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.PROPSHEETHEADER.hwndParent">
            <summary>Handle to the property sheet's owner window.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.PROPSHEETHEADER.hInstance">
            <summary>
            Handle to the instance from which to load the icon or title string resource. If the pszIcon or pszCaption member identifies
            a resource to load, this member must be specified.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.PROPSHEETHEADER.pIcon">
            <summary>
            Handle to the icon to use as the small icon in the title bar of the property sheet dialog box. If the dwFlags member does
            not include PSH_USEHICON, this member is ignored. This member is declared as a union with pszIcon.
            <para><c>OR</c></para>
            <para>
            String icon resource to use as the small icon in the title bar of the property sheet dialog box. This member can specify
            either the identifier of the icon resource or the address of the string that specifies the name of the icon resource. If the
            dwFlags member does not include PSH_USEICONID, this member is ignored. This member is declared as a union with hIcon.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.PROPSHEETHEADER.pszCaption">
            <summary>
            Title of the property sheet dialog box. This member can specify either the identifier of a string resource or the address of
            a string that specifies the title. If the dwFlags member includes PSH_PROPTITLE, the string "Properties for" is inserted at
            the beginning of the title. This field is ignored for Wizard97 wizards. For Aero wizards, the string alone is used for the
            caption, regardless of whether the PSH_PROPTITLE flag is set.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.PROPSHEETHEADER.nPages">
            <summary>Number of elements in the phpage array.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.PROPSHEETHEADER.pStartPage">
            <summary>
            Zero-based index of the initial page that appears when the property sheet dialog box is created. This member is declared as
            a union with pStartPage.
            <para><c>OR</c></para>
            <para>
            Name of the initial page that appears when the property sheet dialog box is created. This member can specify either the
            identifier of a string resource or the address of a string that specifies the name. This member is declared as a union with nStartPage.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.PROPSHEETHEADER.phpage">
            <summary>
            Pointer to an array of PROPSHEETPAGE structures that define the pages in the property sheet. If the dwFlags member does not
            include PSH_PROPSHEETPAGE, this member is ignored. Note that the PROPSHEETPAGE structure is variable in size. Applications
            that parse the array pointed to by ppsp must take the size of each page into account. This member is declared as a union
            with phpage.
            <para><c>OR</c></para>
            <para>
            Pointer to an array of handles to the property sheet pages. Each handle must have been created by a previous call to the
            CreatePropertySheetPage function. If the dwFlags member includes PSH_PROPSHEETPAGE, phpage is ignored and should be set to
            NULL. When the PropertySheet function returns, any HPROPSHEETPAGE handles in the phpage array will have been destroyed. This
            member is declared as a union with ppsp.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.PROPSHEETHEADER.pfnCallback">
            <summary>
            Pointer to an application-defined callback function that is called when the property sheet is initialized. For more
            information about the callback function, see the description of the PropSheetProc function. If the dwFlags member does not
            include PSH_USECALLBACK, this member is ignored.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.PROPSHEETHEADER.hbmWatermark">
            <summary>
            Version 5.80 or later. Handle to the watermark bitmap. If the dwFlags member does not include PSH_USEHBMWATERMARK, this
            member is ignored.
            <para><c>OR</c></para>
            <para>
            Version 5.80 or later. Bitmap resource to use as the watermark. This member can specify either the identifier of the bitmap
            resource or the address of the string that specifies the name of the bitmap resource. If the dwFlags member includes
            PSH_USEHBMWATERMARK, this member is ignored.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.PROPSHEETHEADER.hplWatermark">
            <summary>
            Version 5.80 or later. HPALETTE structure used for drawing the watermark bitmap and/or header bitmap. If the dwFlags member
            does not include PSH_USEHPLWATERMARK, this member is ignored.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.PROPSHEETHEADER.hbmHeader">
            <summary>
            Version 5.80 or later. Handle to the header bitmap. If the dwFlags member does not include PSH_USEHBMHEADER, this member is ignored.
            <para><c>OR</c></para>
            <para>
            Version 5.80 or later. Bitmap resource to use as the header. This member can specify either the identifier of the bitmap
            resource or the address of the string that specifies the name of the bitmap resource. If the dwFlags member includes
            PSH_USEHBMHEADER, this member is ignored.
            </para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.PROPSHEETPAGE">
            <summary>Defines a page in a property sheet.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.PROPSHEETPAGE.dwSize">
            <summary>Size, in bytes, of this structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.PROPSHEETPAGE.dwFlags">
            <summary>Flags that indicate which options to use when creating the property sheet page.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.PROPSHEETPAGE.hInstance">
            <summary>
            Handle to the instance from which to load an icon or string resource. If the pszIcon, pszTitle, pszHeaderTitle, or
            pszHeaderSubTitle member identifies a resource to load, hInstance must be specified.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.PROPSHEETPAGE._pszTemplate">
            <summary>
            Dialog box template to use to create the page. This member can specify either the resource identifier of the template or the
            address of a string that specifies the name of the template. If the PSP_DLGINDIRECT flag in the dwFlags member is set,
            pszTemplate is ignored. This member is declared as a union with pResource.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.PROPSHEETPAGE._hIcon">
            <summary>
            Handle to the icon to use as the icon in the tab of the page. If the dwFlags member does not include PSP_USEHICON, this
            member is ignored. This member is declared as a union with pszIcon.
            <para><c>OR</c></para>
            <para>
            Icon resource to use as the icon in the tab of the page. This member can specify either the identifier of the icon resource
            or the address of the string that specifies the name of the icon resource. To use this member, you must set the
            PSP_USEICONID flag in the dwFlags member. This member is declared as a union with hIcon.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.PROPSHEETPAGE._pszTitle">
            <summary>
            Title of the property sheet dialog box. This title overrides the title specified in the dialog box template. This member can
            specify either the identifier of a string resource or the address of a string that specifies the title. To use this member,
            you must set the PSP_USETITLE flag in the dwFlags member.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.PROPSHEETPAGE.pfnDlgProc">
            <summary>
            Pointer to the dialog box procedure for the page. Because the pages are created as modeless dialog boxes, the dialog box
            procedure must not call the EndDialog function.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.PROPSHEETPAGE.lParam">
            <summary>
            When the page is created, a copy of the page's PROPSHEETPAGE structure is passed to the dialog box procedure with a
            WM_INITDIALOG message. The lParam member is provided to allow you to pass application-specific information to the dialog box
            procedure. It has no effect on the page itself. For more information, see Property Sheet Creation.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.PROPSHEETPAGE._pfnCallback">
            <summary>
            Pointer to an application-defined callback function that is called when the page is created and when it is about to be
            destroyed. For more information about the callback function, see PropSheetPageProc. To use this member, you must set the
            PSP_USECALLBACK flag in the dwFlags member.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.PROPSHEETPAGE._pcRefParent">
            <summary>
            Pointer to the reference count value. To use this member, you must set the PSP_USEREFPARENT flag in the dwFlags member.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.PROPSHEETPAGE._pszHeaderTitle">
            <summary>
            Version 5.80 or later. Title of the header area. To use this member under the Wizard97-style wizard, you must also do the following:
            <list type="bullet">
            <item>
            <term>Set the PSP_USEHEADERTITLE flag in the dwFlags member.</term>
            </item>
            <item>
            <term>Set the PSH_WIZARD97 flag in the dwFlags member of the page's PROPSHEETHEADER structure.</term>
            </item>
            <item>
            <term>Make sure that the PSP_HIDEHEADER flag in the dwFlags member is not set.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.PROPSHEETPAGE._pszHeaderSubTitle">
            <summary>
            Version 5.80 or later. Subtitle of the header area. To use this member, you must do the following:
            <list type="bullet">
            <item>
            <term>Set the PSP_USEHEADERSUBTITLE flag in the dwFlags member.</term>
            </item>
            <item>
            <term>Set the PSH_WIZARD97 flag in the dwFlags member of the page's PROPSHEETHEADER structure.</term>
            </item>
            <item>
            <term>Make sure that the PSP_HIDEHEADER flag in the dwFlags member is not set.</term>
            </item>
            </list>
            <note>This member is ignored when using the Aero-style wizard (PSH_AEROWIZARD).</note>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.PROPSHEETPAGE.hActCtx">
            <summary>
            Version 6.0 or later. An activation context handle. Set this member to the handle that is returned when you create the
            activation context with CreateActCtx. The system will activate this context before creating the dialog box. You do not need
            to use this member if you use a global manifest.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.PROPSHEETPAGE.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.ComCtl32.PROPSHEETPAGE"/> class and sets the value of <see cref="F:Vanara.PInvoke.ComCtl32.PROPSHEETPAGE.dwSize"/>.</summary>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.PROPSHEETPAGE.pszTemplate">
            <summary>
            Dialog box template to use to create the page. This member can specify either the resource identifier of the template or the
            address of a string that specifies the name of the template. If the PSP_DLGINDIRECT flag in the dwFlags member is set,
            pszTemplate is ignored.
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.PROPSHEETPAGE.pResource">
            <summary>
            A pointer to a dialog box template in memory. The PropertySheet function assumes that the template is in writeable memory; a
            read-only template will cause an exception on some versions of Windows. If dwFlags does not include the PSP_DLGINDIRECT
            value, this member is ignored.
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.PROPSHEETPAGE.hIcon">
            <summary>
            A handle to the icon to use as the small icon in the tab for the page. If dwFlags does not include the PSP_USEHICON value,
            this member is ignored.
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.PROPSHEETPAGE.pszIcon">
            <summary>
            Icon resource to use as the small icon in the tab for the page. This member can specify either the identifier of the icon
            resource or the pointer to the string that specifies the name of the icon resource. If dwFlags does not include the
            PSP_USEICONID value, this member is ignored.
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.PROPSHEETPAGE.pszTitle">
            <summary>
            Title of the property sheet dialog box. This title overrides the title specified in the dialog box template. This member can
            specify either the identifier of a string resource or the pointer to a string that specifies the title. If dwFlags does not
            include the PSP_USETITLE value, this member is ignored.
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.PROPSHEETPAGE.pszHeaderTitle">
            <summary>
            Version 5.80 or later. Title of the header area. To use this member under the Wizard97-style wizard, you must also do the following:
            <list type="bullet">
            <item>
            <term>Set the PSP_USEHEADERTITLE flag in the dwFlags member.</term>
            </item>
            <item>
            <term>Set the PSH_WIZARD97 flag in the dwFlags member of the page's PROPSHEETHEADER structure.</term>
            </item>
            <item>
            <term>Make sure that the PSP_HIDEHEADER flag in the dwFlags member is not set.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.PROPSHEETPAGE.pszHeaderSubTitle">
            <summary>
            Version 5.80 or later. Subtitle of the header area. To use this member, you must do the following:
            <list type="bullet">
            <item>
            <term>Set the PSP_USEHEADERSUBTITLE flag in the dwFlags member.</term>
            </item>
            <item>
            <term>Set the PSH_WIZARD97 flag in the dwFlags member of the page's PROPSHEETHEADER structure.</term>
            </item>
            <item>
            <term>Make sure that the PSP_HIDEHEADER flag in the dwFlags member is not set.</term>
            </item>
            </list>
            <note>This member is ignored when using the Aero-style wizard (PSH_AEROWIZARD).</note>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.PROPSHEETPAGE.pfnCallback">
            <summary>
            Pointer to an application-defined callback function that is called when the page is created and when it is about to be
            destroyed. For more information about the callback function, see PropSheetPageProc. To use this member, you must set the
            PSP_USECALLBACK flag in the dwFlags member.
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.PROPSHEETPAGE.pcRefParent">
            <summary>
            Pointer to the reference count value. To use this member, you must set the PSP_USEREFPARENT flag in the dwFlags member.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.PROPSHEETPAGE.System#IDisposable#Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.SafeHPROPSHEETPAGE">
            <summary>Provides a <see cref="T:System.Runtime.InteropServices.SafeHandle"/> to a that releases a created HPROPSHEETPAGE instance at disposal using DestroyPropertySheetPage.</summary>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.SafeHPROPSHEETPAGE.#ctor(System.IntPtr,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.HPROPSHEETPAGE"/> class and assigns an existing handle.</summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
            <param name="ownsHandle">
            <see langword="true"/> to reliably release the handle during the finalization phase; otherwise, <see langword="false"/> (not recommended).
            </param>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.SafeHPROPSHEETPAGE.op_Implicit(Vanara.PInvoke.ComCtl32.SafeHPROPSHEETPAGE)~Vanara.PInvoke.HPROPSHEETPAGE">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.ComCtl32.SafeHPROPSHEETPAGE"/> to <see cref="T:Vanara.PInvoke.HPROPSHEETPAGE"/>.</summary>
            <param name="h">The safe handle instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.SafeHPROPSHEETPAGE.InternalReleaseHandle">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.SBT">
            <summary>Status bar text drawing flags.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.SBT.SBT_NOBORDERS">
            <summary>Prevents borders from being drawn around the specified text.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.SBT.SBT_POPOUT">
            <summary>Draws highlighted borders that make the text stand out.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.SBT.SBT_RTLREADING">
            <summary>
            Indicates that the string pointed to by pszText will be displayed in the opposite direction to the text in the parent window.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.SBT.SBT_NOTABPARSING">
            <summary>Tab characters are ignored.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.SBT.SBT_OWNERDRAW">
            <summary>The text is drawn by the parent window.</summary>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.DrawStatusText(Vanara.PInvoke.HDC,Vanara.PInvoke.RECT@,System.String,Vanara.PInvoke.ComCtl32.SBT)">
            <summary>
            <para>The <c>DrawStatusText</c> function draws the specified text in the style of a status window with borders.</para>
            </summary>
            <param name="hDC">
            <para>Type: <c>HDC</c></para>
            <para>Handle to the display context for the window.</para>
            </param>
            <param name="lprc">
            <para>Type: <c>LPCRECT</c></para>
            <para>
            Pointer to a RECT structure that contains the position, in client coordinates, of the rectangle in which the text is drawn. The
            function draws the borders just inside the edges of the specified rectangle.
            </para>
            </param>
            <param name="pszText">
            <para>Type: <c>LPCTSTR</c></para>
            <para>
            Pointer to a null-terminated string that specifies the text to display. Tab characters in the string determine whether the string
            is left-aligned, right-aligned, or centered.
            </para>
            </param>
            <param name="uFlags">
            <para>Type: <c>UINT</c></para>
            <para>Text drawing flags. This parameter can be a combination of these values:</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>SBT_NOBORDERS</term>
            <term>Prevents borders from being drawn around the specified text.</term>
            </item>
            <item>
            <term>SBT_POPOUT</term>
            <term>Draws highlighted borders that make the text stand out.</term>
            </item>
            <item>
            <term>SBT_RTLREADING</term>
            <term>
            Indicates that the string pointed to by pszText will be displayed in the opposite direction to the text in the parent window.
            </term>
            </item>
            </list>
            </param>
            <returns>
            <para>This function does not return a value.</para>
            </returns>
            <remarks>
            <para>
            Normal windows display text left-to-right (LTR). Windows can be mirrored to display languages such as Hebrew or Arabic that read
            right-to-left (RTL). Normally, the pszText string will be displayed in the same direction as the text in its parent window. If
            SBT_RTLREADING is set, the pszText string will read in the opposite direction from the text in the parent window.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.MenuHelp(System.UInt32,System.IntPtr,System.IntPtr,Vanara.PInvoke.HMENU,Vanara.PInvoke.HINSTANCE,Vanara.PInvoke.HWND,System.IntPtr)">
            <summary>
            Processes <c>WM_MENUSELECT</c> and <c>WM_COMMAND</c> messages and displays Help text about the current menu in the specified
            status window.
            </summary>
            <param name="uMsg">
            <para>Type: <c><c>UINT</c></c></para>
            <para>Message being processed. This can be either <c>WM_MENUSELECT</c> or <c>WM_COMMAND</c>.</para>
            </param>
            <param name="wParam">
            <para>Type: <c><c>WPARAM</c></c></para>
            <para>wParam of the message specified in uMsg.</para>
            </param>
            <param name="lParam">
            <para>Type: <c><c>LPARAM</c></c></para>
            <para>lParam of the message specified in uMsg.</para>
            </param>
            <param name="hMainMenu">
            <para>Type: <c><c>HMENU</c></c></para>
            <para>Handle to the application's main menu.</para>
            </param>
            <param name="hInst">
            <para>Type: <c><c>HINSTANCE</c></c></para>
            <para>Handle to the module that contains the string resources.</para>
            </param>
            <param name="hwndStatus">
            <para>Type: <c><c>HWND</c></c></para>
            <para>Handle to the status window.</para>
            </param>
            <param name="lpwIDs">
            <para>Type: <c>LPUINT</c></para>
            <para>
            Pointer to an array of values that contains pairs of string resource identifiers and menu handles. The function searches the
            array for the handle to the selected menu and, if found, uses the corresponding resource identifier to load the appropriate Help string.
            </para>
            </param>
            <returns>No return value.</returns>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TCM_FIRST">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TCN_FIRST">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.TabControlHitTestFlags">
            <summary>Variable that receives the results of a hit test.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TabControlHitTestFlags.TCHT_NOWHERE">
            <summary>The position is not over a tab.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TabControlHitTestFlags.TCHT_ONITEMICON">
            <summary>The position is over a tab's icon.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TabControlHitTestFlags.TCHT_ONITEMLABEL">
            <summary>The position is over a tab's text.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TabControlHitTestFlags.TCHT_ONITEM">
            <summary>
            The position is over a tab but not over its icon or its text. For owner-drawn tab controls, this value is specified if the
            position is anywhere over a tab.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.TabControlItemMask">
            <summary>Value that specifies which members of TCITEM to retrieve or set.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TabControlItemMask.TCIF_TEXT">
            <summary>The pszText member is valid.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TabControlItemMask.TCIF_IMAGE">
            <summary>The iImage member is valid.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TabControlItemMask.TCIF_RTLREADING">
            <summary>The string pointed to by pszText will be displayed in the direction opposite to the text in the parent window.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TabControlItemMask.TCIF_PARAM">
            <summary>The lParam member is valid.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TabControlItemMask.TCIF_STATE">
            <summary>Version 4.70. The dwState member is valid.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TabControlItemMask.TCIF_ALL">
            <summary>All members are valid.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.TabControlItemStates">
            <summary>
            Tab control items now support an item state to support the TCM_DESELECTALL message. Additionally, the TCITEM structure supports
            item state values.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TabControlItemStates.TCIS_BUTTONPRESSED">
            <summary>
            Version 4.70. The tab control item is selected. This state is only meaningful if the TCS_BUTTONS style flag has been set.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TabControlItemStates.TCIS_HIGHLIGHTED">
            <summary>
            Version 4.71. The tab control item is highlighted, and the tab and text are drawn using the current highlight color. When
            using high-color, this will be a true interpolation, not a dithered color.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TabControlItemStates.TCIS_ALL">
            <summary>Look at all states.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.TabControlMessage">
            <summary>Tab Control Messages</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TabControlMessage.TCM_GETIMAGELIST">
            <summary>
            Retrieves the image list associated with a tab control. You can send this message explicitly or by using the
            <c>TabCtrl_GetImageList</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the handle to the image list if successful, or <c>NULL</c> otherwise.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TabControlMessage.TCM_SETIMAGELIST">
            <summary>
            Assigns an image list to a tab control. You can send this message explicitly or by using the <c>TabCtrl_SetImageList</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Handle to the image list to assign to the tab control.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the handle to the previous image list, or <c>NULL</c> if there is no previous image list.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TabControlMessage.TCM_GETITEMCOUNT">
            <summary>
            Retrieves the number of tabs in the tab control. You can send this message explicitly or by using the
            <c>TabCtrl_GetItemCount</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the number of items if successful, or zero otherwise.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TabControlMessage.TCM_GETITEM">
            <summary>
            Retrieves information about a tab in a tab control. You can send this message explicitly or by using the
            <c>TabCtrl_GetItem</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Index of the tab.</para>
            <para><em>lParam</em></para>
            <para>
            Pointer to a <c>TCITEM</c> structure that specifies the information to retrieve and receives information about the tab. When
            the message is sent, the <c>mask</c> member specifies which attributes to return. If the <c>mask</c> member specifies the
            TCIF_TEXT value, the <c>pszText</c> member must contain the address of the buffer that receives the item text, and the
            <c>cchTextMax</c> member must specify the size of the buffer.
            </para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> if successful, or <c>FALSE</c> otherwise.</para>
            </summary>
            <remarks>
            If the TCIF_TEXT flag is set in the <c>mask</c> member of the <c>TCITEM</c> structure, the control may change the
            <c>pszText</c> member of the structure to point to the new text instead of filling the buffer with the requested text. The
            control may set the <c>pszText</c> member to <c>NULL</c> to indicate that no text is associated with the item.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TabControlMessage.TCM_SETITEM">
            <summary>
            Sets some or all of a tab's attributes. You can send this message explicitly or by using the <c>TabCtrl_SetItem</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Index of the item.</para>
            <para><em>lParam</em></para>
            <para>
            Pointer to a <c>TCITEM</c> structure that contains the new item attributes. The <c>mask</c> member specifies which attributes
            to set. If the <c>mask</c> member specifies the TCIF_TEXT value, the <c>pszText</c> member is the address of a
            null-terminated string and the <c>cchTextMax</c> member is ignored.
            </para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> if successful, or <c>FALSE</c> otherwise.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TabControlMessage.TCM_INSERTITEM">
            <summary>
            Inserts a new tab in a tab control. You can send this message explicitly or by using the <c>TabCtrl_InsertItem</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Index of the new tab.</para>
            <para><em>lParam</em></para>
            <para>
            Pointer to a <c>TCITEM</c> structure that specifies the attributes of the tab. The <c>dwState</c> and <c>dwStateMask</c>
            members of this structure are ignored by this message.
            </para>
            <para><strong>Returns</strong></para>
            <para>Returns the index of the new tab if successful, or -1 otherwise.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TabControlMessage.TCM_DELETEITEM">
            <summary>
            Removes an item from a tab control. You can send this message explicitly or by using the <c>TabCtrl_DeleteItem</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Index of the item to delete.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> if successful, or <c>FALSE</c> otherwise.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TabControlMessage.TCM_DELETEALLITEMS">
            <summary>
            Removes all items from a tab control. You can send this message explicitly or by using the <c>TabCtrl_DeleteAllItems</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> if successful, or <c>FALSE</c> otherwise.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TabControlMessage.TCM_GETITEMRECT">
            <summary>
            Retrieves the bounding rectangle for a tab in a tab control. You can send this message explicitly or by using the
            <c>TabCtrl_GetItemRect</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Index of the tab.</para>
            <para><em>lParam</em></para>
            <para>Pointer to a <c>RECT</c> structure that receives the bounding rectangle of the tab, in viewport coordinates.</para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> if successful, or <c>FALSE</c> otherwise.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TabControlMessage.TCM_GETCURSEL">
            <summary>
            Determines the currently selected tab in a tab control. You can send this message explicitly or by using the
            <c>TabCtrl_GetCurSel</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the index of the selected tab if successful, or -1 if no tab is selected.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TabControlMessage.TCM_SETCURSEL">
            <summary>
            Selects a tab in a tab control. You can send this message explicitly or by using the <c>TabCtrl_SetCurSel</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Index of the tab to select.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the index of the previously selected tab if successful, or -1 otherwise.</para>
            </summary>
            <remarks>
            A tab control does not send a TCN_SELCHANGING or TCN_SELCHANGE notification code when a tab is selected using this message.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TabControlMessage.TCM_HITTEST">
            <summary>
            Determines which tab, if any, is at a specified screen position. You can send this message explicitly or by using the
            <c>TabCtrl_HitTest</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Pointer to a <c>TCHITTESTINFO</c> structure that specifies the screen position to test.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the index of the tab, or -1 if no tab is at the specified position.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TabControlMessage.TCM_SETITEMEXTRA">
            <summary>
            Sets the number of bytes per tab reserved for application-defined data in a tab control. You can send this message explicitly
            or by using the <c>TabCtrl_SetItemExtra</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Number of extra bytes.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> if successful, or <c>FALSE</c> otherwise.</para>
            </summary>
            <remarks>
            <para>
            By default, the number of extra bytes is four. An application that changes the number of extra bytes cannot use the
            <c>TCITEM</c> structure to retrieve and set the application-defined data for a tab. Instead, you must define a new structure
            that consists of the <c>TCITEMHEADER</c> structure followed by application-defined members.
            </para>
            <para>An application should only change the number of extra bytes when a tab control does not contain any tabs.</para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TabControlMessage.TCM_ADJUSTRECT">
            <summary>
            Calculates a tab control's display area given a window rectangle, or calculates the window rectangle that would correspond to
            a specified display area. You can send this message explicitly or by using the <c>TabCtrl_AdjustRect</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>
            Operation to perform. If this parameter is <c>TRUE</c>, lParam specifies a display rectangle and receives the corresponding
            window rectangle. If this parameter is <c>FALSE</c>, lParam specifies a window rectangle and receives the corresponding
            display area.
            </para>
            <para><em>lParam</em></para>
            <para>Pointer to a <c>RECT</c> structure that specifies the given rectangle and receives the calculated rectangle.</para>
            <para><strong>Returns</strong></para>
            <para>No return value.</para>
            </summary>
            <remarks>
            This message applies only to tab controls that are at the top. It does not apply to tab controls that are on the sides or bottom.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TabControlMessage.TCM_SETITEMSIZE">
            <summary>
            Sets the width and height of tabs in a fixed-width or owner-drawn tab control. You can send this message explicitly or by
            using the <c>TabCtrl_SetItemSize</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>
            The <c>LOWORD</c> is an <c>INT</c> value that specifies the new width, in pixels. The <c>HIWORD</c> is an <c>INT</c> value
            that specifies the new height, in pixels.
            </para>
            <para><strong>Returns</strong></para>
            <para>Returns the old width and height. The width is in the <c>LOWORD</c> of the return value, and the height is in the <c>HIWORD</c>.</para>
            </summary>
            <remarks>
            If the width is set to a value less than the image width set by <c>ImageList_Create</c>, the width of the tab is set to the
            lowest value that is greater than the image width.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TabControlMessage.TCM_REMOVEIMAGE">
            <summary>
            Removes an image from a tab control's image list. You can send this message explicitly or by using the
            <c>TabCtrl_RemoveImage</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Index of the image to remove.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>No return value.</para>
            </summary>
            <remarks>
            The tab control updates each tab's image index, so each tab remains associated with the same image as before. If a tab is
            using the image being removed, the tab will be set to have no image.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TabControlMessage.TCM_SETPADDING">
            <summary>
            Sets the amount of space (padding) around each tab's icon and label in a tab control. You can send this message explicitly or
            by using the <c>TabCtrl_SetPadding</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>
            The <c>LOWORD</c> is an <c>INT</c> value that specifies the amount of horizontal padding, in pixels. The <c>HIWORD</c> is an
            <c>INT</c> value that specifies the amount of vertical padding, in pixels.
            </para>
            <para><strong>Returns</strong></para>
            <para>No return value.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TabControlMessage.TCM_GETROWCOUNT">
            <summary>
            Retrieves the current number of rows of tabs in a tab control. You can send this message explicitly or by using the
            <c>TabCtrl_GetRowCount</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the number of rows of tabs.</para>
            </summary>
            <remarks>Only tab controls that have the <c>TCS_MULTILINE</c> style can have multiple rows of tabs.</remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TabControlMessage.TCM_GETTOOLTIPS">
            <summary>
            Retrieves the handle to the tooltip control associated with a tab control. You can send this message explicitly or by using
            the <c>TabCtrl_GetToolTips</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the handle to the tooltip control if successful, or <c>NULL</c> otherwise.</para>
            </summary>
            <remarks>
            A tab control creates a tooltip control if it has the <c>TCS_TOOLTIPS</c> style. You can also assign a tooltip control to a
            tab control by using the <c>TCM_SETTOOLTIPS</c> message.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TabControlMessage.TCM_SETTOOLTIPS">
            <summary>
            Assigns a tooltip control to a tab control. You can send this message explicitly or by using the <c>TabCtrl_SetToolTips</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Handle to the tooltip control.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>No return value.</para>
            </summary>
            <remarks>You can retrieve the tooltip control associated with a tab control by using the <c>TCM_GETTOOLTIPS</c> message.</remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TabControlMessage.TCM_GETCURFOCUS">
            <summary>
            Returns the index of the item that has the focus in a tab control. You can send this message explicitly or by using the
            <c>TabCtrl_GetCurFocus</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the index of the tab item that has the focus.</para>
            </summary>
            <remarks>The item that has the focus may be different than the selected item.</remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TabControlMessage.TCM_SETCURFOCUS">
            <summary>
            Sets the focus to a specified tab in a tab control. You can send this message explicitly or by using the
            <c>TabCtrl_SetCurFocus</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Index of the tab that gets the focus.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>No return value.</para>
            </summary>
            <remarks>
            <para>
            If the tab control has the <c>TCS_BUTTONS</c> style (button mode), the tab with the focus may be different from the selected
            tab. For example, when a tab is selected, the user can press the arrow keys to set the focus to a different tab without
            changing the selected tab. In button mode, <c>TCM_SETCURFOCUS</c> sets the input focus to the button associated with the
            specified tab, but it does not change the selected tab.
            </para>
            <para>
            If the tab control does not have the <c>TCS_BUTTONS</c> style, changing the focus also changes the selected tab. In this
            case, the tab control sends the TCN_SELCHANGING and TCN_SELCHANGE notification codes to its parent window.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TabControlMessage.TCM_SETMINTABWIDTH">
            <summary>
            Sets the minimum width of items in a tab control. You can send this message explicitly or by using the
            <c>TabCtrl_SetMinTabWidth</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>
            Minimum width to be set for a tab control item. If this parameter is set to -1, the control will use the default tab width.
            </para>
            <para><strong>Returns</strong></para>
            <para>Returns an INT value that represents the previous minimum tab width.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TabControlMessage.TCM_DESELECTALL">
            <summary>
            Resets items in a tab control, clearing any that were set to the <c>TCIS_BUTTONPRESSED</c> state. You can send this message
            explicitly or by using the <c>TabCtrl_DeselectAll</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>
            Flag that specifies the scope of the item deselection. If this parameter is set to <c>FALSE</c>, all tab items will be reset.
            If it is set to <c>TRUE</c>, then all tab items except for the one currently selected will be reset.
            </para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>The return value for this message is not used.</para>
            </summary>
            <remarks>This message is only meaningful if the <c>TCS_BUTTONS</c> style flag has been set.</remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TabControlMessage.TCM_HIGHLIGHTITEM">
            <summary>
            Sets the highlight state of a tab item. You can send this message explicitly or by using the <c>TabCtrl_HighlightItem</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>An <c>INT</c> value that specifies the zero-based index of a tab control item.</para>
            <para><em>lParam</em></para>
            <para>
            The <c>LOWORD</c> is a <c>BOOL</c> specifying the highlight state to be set. If this value is <c>TRUE</c>, the tab is
            highlighted; if <c>FALSE</c>, the tab is set to its default state. The <c>HIWORD</c> must be zero.
            </para>
            <para><strong>Returns</strong></para>
            <para>Returns nonzero if successful, or zero otherwise.</para>
            </summary>
            <remarks>In Comctl32.dll version 6.0, this message has no visible effect when a theme is active.</remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TabControlMessage.TCM_SETEXTENDEDSTYLE">
            <summary>
            Sets the extended styles that the tab control will use. You can send this message explicitly or by using the
            <c>TabCtrl_SetExtendedStyle</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>
            A <c>DWORD</c> value that indicates which styles in lParam are to be affected. Only the extended styles in wParam will be
            changed. All other styles will be maintained as they are. If this parameter is zero, then all of the styles in lParam will be affected.
            </para>
            <para><em>lParam</em></para>
            <para>Value specifying the extended tab control styles. This value is a combination of tab control extended styles.</para>
            <para><strong>Returns</strong></para>
            <para>Returns a <c>DWORD</c> value that contains the previous tab control extended styles.</para>
            </summary>
            <remarks>
            <para>
            The wParam parameter allows you to modify one or more extended styles without having to retrieve the existing styles first.
            For example, if you pass <c>TCS_EX_FLATSEPARATORS</c> for wParam and 0 for lParam, the <c>TCS_EX_FLATSEPARATORS</c> style
            will be cleared, but all other styles will remain the same.
            </para>
            <para>For backward compatibility reasons, the <c>TabCtrl_SetExtendedStyle</c> macro has not been updated to use dwExMask.</para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TabControlMessage.TCM_GETEXTENDEDSTYLE">
            <summary>
            Retrieves the extended styles that are currently in use for the tab control. You can send this message explicitly or by using
            the <c>TabCtrl_GetExtendedStyle</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>
            Returns a <c>DWORD</c> value that represents the extended styles currently in use for the tab control. This value is a
            combination of tab control extended styles.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TabControlMessage.TCM_SETUNICODEFORMAT">
            <summary>
            Sets the Unicode character format flag for the control. This message allows you to change the character set used by the
            control at run time rather than having to re-create the control. You can send this message explicitly or use the
            <c>TabCtrl_SetUnicodeFormat</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>
            Determines the character set that is used by the control. If this value is nonzero, the control will use Unicode characters.
            If this value is zero, the control will use ANSI characters.
            </para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the previous Unicode format flag for the control.</para>
            </summary>
            <remarks>See the remarks for <c>CCM_SETUNICODEFORMAT</c> for a discussion of this message.</remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TabControlMessage.TCM_GETUNICODEFORMAT">
            <summary>
            Retrieves the Unicode character format flag for the control. You can send this message explicitly or use the
            <c>TabCtrl_GetUnicodeFormat</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>
            Returns the Unicode format flag for the control. If this value is nonzero, the control is using Unicode characters. If this
            value is zero, the control is using ANSI characters.
            </para>
            </summary>
            <remarks>See the remarks for <c>CCM_GETUNICODEFORMAT</c> for a discussion of this message.</remarks>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.TabControlNotification">
            <summary>Tab Control Notifications</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TabControlNotification.TCN_KEYDOWN">
            <summary>
            <para>
            Notifies a tab control's parent window that a key has been pressed. This notification code is sent in the form of a
            <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>TCN_KEYDOWN pnm = (NMTCKEYDOWN*) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>Pointer to an <c>NMTCKEYDOWN</c> structure.</para>
            <para><strong>Returns</strong></para>
            <para>No return value.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TabControlNotification.TCN_SELCHANGE">
            <summary>
            <para>
            Notifies a tab control's parent window that the currently selected tab has changed. This notification code is sent in the
            form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>TCN_SELCHANGE lpnmhdr = (LPNMHDR) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>Pointer to an <c>NMHDR</c> structure that contains additional information about this notification.</para>
            <para><strong>Returns</strong></para>
            <para>No return value.</para>
            </summary>
            <remarks>To determine the currently selected tab, use the <c>TabCtrl_GetCurSel</c> macro.</remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TabControlNotification.TCN_SELCHANGING">
            <summary>
            <para>
            Notifies a tab control's parent window that the currently selected tab is about to change. This notification code is sent in
            the form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>TCN_SELCHANGING lpnmhdr = (LPNMHDR) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>Pointer to an <c>NMHDR</c> structure that contains additional information about this notification.</para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> to prevent the selection from changing, or <c>FALSE</c> to allow the selection to change.</para>
            </summary>
            <remarks>To determine the currently selected tab, use the <c>TabCtrl_GetCurSel</c> macro.</remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TabControlNotification.TCN_GETOBJECT">
            <summary>
            <para>
            Sent by a tab control when it has the <c>TCS_EX_REGISTERDROP</c> extended style and an object is dragged over a tab item in
            the control. This notification code is sent in the form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>TCN_GETOBJECT lpnmon = (LPNMOBJECTNOTIFY) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>
            Pointer to an <c>NMOBJECTNOTIFY</c> structure that contains information about the tab item the object is dragged over and
            receives data the application returns in response to this message.
            </para>
            <para><strong>Returns</strong></para>
            <para>The application processing this notification code must return zero.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TabControlNotification.TCN_FOCUSCHANGE">
            <summary>
            <para>
            Notifies a tab control's parent window that the button focus has changed. This notification code is sent in the form of a
            <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>TCN_FOCUSCHANGE lpnmh = (LPNMHDR) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>Pointer to an <c>NMHDR</c> structure that contains additional information about this notification.</para>
            <para><strong>Returns</strong></para>
            <para>No return value.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.TabControlStyles">
            <summary>This section lists supported tab control styles.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TabControlStyles.TCS_SCROLLOPPOSITE">
            <summary>Version 4.70. Unneeded tabs scroll to the opposite side of the control when a tab is selected.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TabControlStyles.TCS_BOTTOM">
            <summary>
            Version 4.70. Tabs appear at the bottom of the control. This value equals TCS_RIGHT. This style is not supported if you use
            ComCtl32.dll version 6.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TabControlStyles.TCS_RIGHT">
            <summary>
            Version 4.70. Tabs appear vertically on the right side of controls that use the TCS_VERTICAL style. This value equals
            TCS_BOTTOM. This style is not supported if you use visual styles.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TabControlStyles.TCS_MULTISELECT">
            <summary>
            Version 4.70. Multiple tabs can be selected by holding down the CTRL key when clicking. This style must be used with the
            TCS_BUTTONS style.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TabControlStyles.TCS_FLATBUTTONS">
            <summary>
            Version 4.71. Selected tabs appear as being indented into the background while other tabs appear as being on the same plane
            as the background. This style only affects tab controls with the TCS_BUTTONS style.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TabControlStyles.TCS_FORCEICONLEFT">
            <summary>
            Icons are aligned with the left edge of each fixed-width tab. This style can only be used with the TCS_FIXEDWIDTH style.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TabControlStyles.TCS_FORCELABELLEFT">
            <summary>
            Labels are aligned with the left edge of each fixed-width tab; that is, the label is displayed immediately to the right of
            the icon instead of being centered. This style can only be used with the TCS_FIXEDWIDTH style, and it implies the
            TCS_FORCEICONLEFT style.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TabControlStyles.TCS_HOTTRACK">
            <summary>
            Version 4.70. Items under the pointer are automatically highlighted. You can check whether hot tracking is enabled by calling SystemParametersInfo.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TabControlStyles.TCS_VERTICAL">
            <summary>
            Version 4.70. Tabs appear at the left side of the control, with tab text displayed vertically. This style is valid only when
            used with the TCS_MULTILINE style. To make tabs appear on the right side of the control, also use the TCS_RIGHT style. This
            style is not supported if you use ComCtl32.dll version 6.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TabControlStyles.TCS_TABS">
            <summary>Tabs appear as tabs, and a border is drawn around the display area. This style is the default.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TabControlStyles.TCS_BUTTONS">
            <summary>Tabs appear as buttons, and no border is drawn around the display area.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TabControlStyles.TCS_SINGLELINE">
            <summary>Only one row of tabs is displayed. The user can scroll to see more tabs, if necessary. This style is the default.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TabControlStyles.TCS_MULTILINE">
            <summary>Multiple rows of tabs are displayed, if necessary, so all tabs are visible at once.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TabControlStyles.TCS_RIGHTJUSTIFY">
            <summary>
            The width of each tab is increased, if necessary, so that each row of tabs fills the entire width of the tab control. This
            window style is ignored unless the TCS_MULTILINE style is also specified.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TabControlStyles.TCS_FIXEDWIDTH">
            <summary>All tabs are the same width. This style cannot be combined with the TCS_RIGHTJUSTIFY style.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TabControlStyles.TCS_RAGGEDRIGHT">
            <summary>Rows of tabs will not be stretched to fill the entire width of the control. This style is the default.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TabControlStyles.TCS_FOCUSONBUTTONDOWN">
            <summary>The tab control receives the input focus when clicked.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TabControlStyles.TCS_OWNERDRAWFIXED">
            <summary>The parent window is responsible for drawing tabs.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TabControlStyles.TCS_TOOLTIPS">
            <summary>The tab control has a tooltip control associated with it.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TabControlStyles.TCS_FOCUSNEVER">
            <summary>The tab control does not receive the input focus when clicked.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.TabControlStylesEx">
            <summary>
            The tab control now supports extended styles. These styles are manipulated using the TCM_GETEXTENDEDSTYLE and
            TCM_SETEXTENDEDSTYLE messages and should not be confused with extended window styles that are passed to CreateWindowEx.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TabControlStylesEx.TCS_EX_FLATSEPARATORS">
            <summary>
            Version 4.71. The tab control will draw separators between the tab items. This extended style only affects tab controls that
            have the TCS_BUTTONS and TCS_FLATBUTTONS styles. By default, creating the tab control with the TCS_FLATBUTTONS style sets
            this extended style. If you do not require separators, you should remove this extended style after creating the control.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TabControlStylesEx.TCS_EX_REGISTERDROP">
            <summary>
            Version 4.71. The tab control generates TCN_GETOBJECT notification codes to request a drop target object when an object is
            dragged over the tab items in the control. The application must call CoInitialize or OleInitialize before setting this style.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.TCHITTESTINFO">
            <summary>Contains information about a hit test. This structure supersedes the TC_HITTESTINFO structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TCHITTESTINFO.pt">
            <summary>Position to hit test, in client coordinates.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TCHITTESTINFO.flags">
            <summary>Variable that receives the results of a hit test. The tab control sets this member to one of the following values:</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.TCITEM">
            <summary>
            Specifies or receives the attributes of a tab item. It is used with the TCM_INSERTITEM, TCM_GETITEM, and TCM_SETITEM messages.
            This structure supersedes the TC_ITEM structure.
            </summary>
            <seealso cref="T:System.IDisposable"/>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TCITEM.mask">
            <summary>Value that specifies which members to retrieve or set.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TCITEM.dwState">
            <summary>
            Version 4.70. Specifies the item's current state if information is being retrieved. If item information is being set, this
            member contains the state value to be set for the item. For a list of valid tab control item states, see Tab Control Item
            States. This member is ignored in the TCM_INSERTITEM message.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TCITEM.dwStateMask">
            <summary>
            Version 4.70. Specifies which bits of the dwState member contain valid information. This member is ignored in the
            TCM_INSERTITEM message.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TCITEM.pszText">
            <summary>
            Pointer to a null-terminated string that contains the tab text when item information is being set. If item information is
            being retrieved, this member specifies the address of the buffer that receives the tab text.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TCITEM.cchTextMax">
            <summary>
            Size in TCHARs of the buffer pointed to by the pszText member. If the structure is not receiving information, this member is ignored.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TCITEM.iImage">
            <summary>Index in the tab control's image list, or -1 if there is no image for the tab.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TCITEM.lParam">
            <summary>
            Application-defined data associated with the tab control item. If more or less than 4 bytes of application-defined data exist
            per tab, an application must define a structure and use it instead of the TCITEM structure. The first member of the
            application-defined structure must be a TCITEMHEADER structure.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.TCITEM.#ctor(Vanara.PInvoke.ComCtl32.TabControlItemMask,Vanara.PInvoke.ComCtl32.TabControlItemStates)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.ComCtl32.TCITEM"/> class.</summary>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.TCITEM.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.ComCtl32.TCITEM"/> class.</summary>
            <param name="text">The text.</param>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.TCITEM.Text">
            <summary>Gets or sets the text.</summary>
            <value>The text.</value>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.TCITEM.System#IDisposable#Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.TCITEMHEADER">
            <summary>
            Specifies or receives the attributes of a tab. It is used with the TCM_INSERTITEM, TCM_GETITEM, and TCM_SETITEM messages. This
            structure supersedes the TC_ITEMHEADER structure.
            </summary>
            <seealso cref="T:System.IDisposable"/>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TCITEMHEADER.mask">
            <summary>Value that specifies which members to retrieve or set.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TCITEMHEADER.dwState">
            <summary>
            Version 4.70. Specifies the item's current state if information is being retrieved. If item information is being set, this
            member contains the state value to be set for the item. For a list of valid tab control item states, see Tab Control Item
            States. This member is ignored in the TCM_INSERTITEM message.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TCITEMHEADER.dwStateMask">
            <summary>
            Version 4.70. Specifies which bits of the dwState member contain valid information. This member is ignored in the
            TCM_INSERTITEM message.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TCITEMHEADER.pszText">
            <summary>
            Pointer to a null-terminated string that contains the tab text when item information is being set. If item information is
            being retrieved, this member specifies the address of the buffer that receives the tab text.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TCITEMHEADER.cchTextMax">
            <summary>
            Size in TCHARs of the buffer pointed to by the pszText member. If the structure is not receiving information, this member is ignored.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TCITEMHEADER.iImage">
            <summary>Index in the tab control's image list, or -1 if there is no image for the tab.</summary>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.TCITEMHEADER.#ctor(Vanara.PInvoke.ComCtl32.TabControlItemMask,Vanara.PInvoke.ComCtl32.TabControlItemStates)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.ComCtl32.TCITEM"/> class.</summary>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.TCITEMHEADER.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.ComCtl32.TCITEM"/> class.</summary>
            <param name="text">The text.</param>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.TCITEMHEADER.Text">
            <summary>Gets or sets the text.</summary>
            <value>The text.</value>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.TCITEMHEADER.System#IDisposable#Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.TaskDialogCallbackProc">
            <summary>The signature of the callback that receives messages from the Task Dialog when various events occur.</summary>
            <param name="hwnd">The window handle of the</param>
            <param name="msg">The message being passed.</param>
            <param name="wParam">wParam which is interpreted differently depending on the message.</param>
            <param name="lParam">wParam which is interpreted differently depending on the message.</param>
            <param name="refData">The reference data that was set to TaskDialog.CallbackData.</param>
            <returns>A HRESULT value. The return value is specific to the message being processed.</returns>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.TASKDIALOG_COMMON_BUTTON_FLAGS">
            <summary>
            Specifies the push buttons displayed in the task dialog. If no common buttons are specified and no custom buttons are specified
            using the cButtons and pButtons members, the task dialog will contain the OK button by default. This parameter may be a
            combination of flags
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TASKDIALOG_COMMON_BUTTON_FLAGS.TDCBF_OK_BUTTON">
            <summary>The task dialog contains the push button: OK.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TASKDIALOG_COMMON_BUTTON_FLAGS.TDCBF_YES_BUTTON">
            <summary>The task dialog contains the push button: Yes.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TASKDIALOG_COMMON_BUTTON_FLAGS.TDCBF_NO_BUTTON">
            <summary>The task dialog contains the push button: No.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TASKDIALOG_COMMON_BUTTON_FLAGS.TDCBF_CANCEL_BUTTON">
            <summary>
            The task dialog contains the push button: Cancel. If this button is specified, the task dialog will respond to typical cancel
            actions (Alt-F4 and Escape).
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TASKDIALOG_COMMON_BUTTON_FLAGS.TDCBF_RETRY_BUTTON">
            <summary>The task dialog contains the push button: Retry.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TASKDIALOG_COMMON_BUTTON_FLAGS.TDCBF_CLOSE_BUTTON">
            <summary>The task dialog contains the push button: Close.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.TASKDIALOG_ELEMENTS">
            <summary>Indicates element to update for the TDM_UPDATE_ELEMENT_TEXT message.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TASKDIALOG_ELEMENTS.TDE_CONTENT">
            <summary>The content element.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TASKDIALOG_ELEMENTS.TDE_EXPANDED_INFORMATION">
            <summary>Expanded Information.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TASKDIALOG_ELEMENTS.TDE_FOOTER">
            <summary>Footer.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TASKDIALOG_ELEMENTS.TDE_MAIN_INSTRUCTION">
            <summary>Main Instructions</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.TASKDIALOG_FLAGS">
            <summary>Specifies the behavior of the task dialog.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TASKDIALOG_FLAGS.TDF_ENABLE_HYPERLINKS">
            <summary>
            Enables hyperlink processing for the strings specified in the pszContent, pszExpandedInformation and pszFooter members. When
            enabled, these members may point to strings that contain hyperlinks in the following form:
            <code>
            <![CDATA[<A HREF = "executablestring" > Hyperlink Text</A>]]>
            </code>
            <note type="warning">Enabling hyperlinks when using content from an unsafe source may cause security
            vulnerabilities.</note><note>Task Dialogs will not actually execute any hyperlinks.Hyperlink execution must be handled in the
            callback function specified by pfCallback.For more details, see TaskDialogCallbackProc.</note>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TASKDIALOG_FLAGS.TDF_USE_HICON_MAIN">
            <summary>
            Indicates that the dialog should use the icon referenced by the handle in the hMainIcon member as the primary icon in the
            task dialog. If this flag is specified, the pszMainIcon member is ignored.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TASKDIALOG_FLAGS.TDF_USE_HICON_FOOTER">
            <summary>
            Indicates that the dialog should use the icon referenced by the handle in the hFooterIcon member as the footer icon in the
            task dialog. If this flag is specified, the pszFooterIcon member is ignored.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TASKDIALOG_FLAGS.TDF_ALLOW_DIALOG_CANCELLATION">
            <summary>
            Indicates that the dialog should be able to be closed using Alt-F4, Escape, and the title bar's close button even if no
            cancel button is specified in either the dwCommonButtons or pButtons members.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TASKDIALOG_FLAGS.TDF_USE_COMMAND_LINKS">
            <summary>
            Indicates that the buttons specified in the pButtons member are to be displayed as command links (using a standard task
            dialog glyph) instead of push buttons. When using command links, all characters up to the first new line character in the
            pszButtonText member will be treated as the command link's main text, and the remainder will be treated as the command link's
            note. This flag is ignored if the cButtons member is zero.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TASKDIALOG_FLAGS.TDF_USE_COMMAND_LINKS_NO_ICON">
            <summary>
            Indicates that the buttons specified in the pButtons member are to be displayed as command links (without a glyph) instead of
            push buttons. When using command links, all characters up to the first new line character in the pszButtonText member will be
            treated as the command link's main text, and the remainder will be treated as the command link's note. This flag is ignored
            if the cButtons member is zero.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TASKDIALOG_FLAGS.TDF_EXPAND_FOOTER_AREA">
            <summary>
            Indicates that the string specified by the pszExpandedInformation member is displayed at the bottom of the dialog's footer
            area instead of immediately after the dialog's content. This flag is ignored if the pszExpandedInformation member is NULL.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TASKDIALOG_FLAGS.TDF_EXPANDED_BY_DEFAULT">
            <summary>
            Indicates that the string specified by the pszExpandedInformation member is displayed when the dialog is initially displayed.
            This flag is ignored if the pszExpandedInformation member is NULL.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TASKDIALOG_FLAGS.TDF_VERIFICATION_FLAG_CHECKED">
            <summary>
            Indicates that the verification checkbox in the dialog is checked when the dialog is initially displayed. This flag is
            ignored if the pszVerificationText parameter is NULL.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TASKDIALOG_FLAGS.TDF_SHOW_PROGRESS_BAR">
            <summary>Indicates that a Progress Bar is to be displayed.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TASKDIALOG_FLAGS.TDF_SHOW_MARQUEE_PROGRESS_BAR">
            <summary>Indicates that an Marquee Progress Bar is to be displayed.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TASKDIALOG_FLAGS.TDF_CALLBACK_TIMER">
            <summary>Indicates that the task dialog's callback is to be called approximately every 200 milliseconds.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TASKDIALOG_FLAGS.TDF_POSITION_RELATIVE_TO_WINDOW">
            <summary>
            Indicates that the task dialog is positioned (centered) relative to the window specified by hwndParent. If the flag is not
            supplied (or no hwndParent member is specified), the task dialog is positioned (centered) relative to the monitor.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TASKDIALOG_FLAGS.TDF_RTL_LAYOUT">
            <summary>Indicates that text is displayed reading right to left.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TASKDIALOG_FLAGS.TDF_NO_DEFAULT_RADIO_BUTTON">
            <summary>Indicates that no default item will be selected.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TASKDIALOG_FLAGS.TDF_CAN_BE_MINIMIZED">
            <summary>Indicates that the task dialog can be minimized.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TASKDIALOG_FLAGS.TDF_NO_SET_FOREGROUND">
            <summary>Don't call SetForegroundWindow() when activating the dialog.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TASKDIALOG_FLAGS.TDF_SIZE_TO_CONTENT">
            <summary>
            Indicates that the width of the task dialog is determined by the width of its content area. This flag is ignored if cxWidth
            is not set to 0.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.TASKDIALOG_ICON_ELEMENTS">
            <summary>Indicates which icon element to update for the TDM_UPDATE_ICON message.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TASKDIALOG_ICON_ELEMENTS.TDIE_ICON_MAIN">
            <summary>Main instruction icon.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TASKDIALOG_ICON_ELEMENTS.TDIE_ICON_FOOTER">
            <summary>Footer icon.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.TaskDialogIcon">
            <summary>The System icons the TaskDialog supports for <see cref="F:Vanara.PInvoke.ComCtl32.TASKDIALOGCONFIG.footerIcon"/> and <see cref="F:Vanara.PInvoke.ComCtl32.TASKDIALOGCONFIG.mainIcon"/>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TaskDialogIcon.TD_WARNING_ICON">
            <summary>An exclamation-point icon appears in the task dialog.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TaskDialogIcon.TD_ERROR_ICON">
            <summary>A stop-sign icon appears in the task dialog.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TaskDialogIcon.TD_INFORMATION_ICON">
            <summary>An icon consisting of a lowercase letter i in a circle appears in the task dialog.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TaskDialogIcon.TD_SHIELD_ICON">
            <summary>A shield icon appears in the task dialog.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TaskDialogIcon.TD_SHIELDBLUE_ICON">
            <summary>Shield icon on a blue background. Only available on Windows 8 and later.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TaskDialogIcon.TD_SECURITYWARNING_ICON">
            <summary>Warning Shield icon on a yellow background. Only available on Windows 8 and later.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TaskDialogIcon.TD_SECURITYERROR_ICON">
            <summary>Error Shield icon on a red background. Only available on Windows 8 and later.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TaskDialogIcon.TD_SECURITYSUCCESS_ICON">
            <summary>Success Shield icon on a green background. Only available on Windows 8 and later.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TaskDialogIcon.TD_SHIELDGRAY_ICON">
            <summary>Shield icon on a gray background. Only available on Windows 8 and later.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.TaskDialogMessage">
            <summary>TaskDialogMessage taken from CommCtrl.h.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TaskDialogMessage.TDM_NAVIGATE_PAGE">
            <summary>Recreates a task dialog with new contents, simulating the functionality of a multi-page wizard.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Not used. Must be zero.</para>
            <para><em>lParam</em></para>
            <para>
            A pointer to a <c>TASKDIALOGCONFIG</c> structure that describes the task dialog to create. The calling application must
            allocate this structure and set its members. The values of the members vary depending on the kind of page the user navigates to.
            </para>
            <para><strong>Returns</strong></para>
            <para>The return value is ignored.</para>
            </summary>
            <remarks>
            <para>
            To launch a wizard task dialog, use the <c>TaskDialogIndirect</c> function. As the user navigates using the wizard, send this
            message to the task dialog to display the next page. A new task dialog (looks like a new page) is created with the elements
            specified in the structure pointed to by lParam. At creation, the entire contents of the dialog frame are destroyed and
            reconstructed. As a result, any state information held by controls (for example, a progress bar, expando button, or
            verification checkbox) in the dialog is lost.
            </para>
            <para>
            The layout of the task dialog may fail and this may not be reflected in the return value. A return value of S_OK reflects
            only that the task dialog received the message and attempted to process it. If the layout of the task dialog fails (the task
            dialog cannot be displayed), the dialog will close and an <c>HRESULT</c> code is returned at the registered callback
            function. For more information on the callback function syntax, see TaskDialogCallbackProc.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TaskDialogMessage.TDM_CLICK_BUTTON">
            <summary>Simulates the action of a button click in a task dialog.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>An <c>int</c> that specifies the ID of the button to be clicked.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>The return value is ignored.</para>
            </summary>
            <remarks>
            The button ID specified by wParam is sent to the <c>TaskDialogCallbackProc</c> callback function as part of a
            TDN_BUTTON_CLICKED notification code. After the callback function returns, the task dialog is closed if S_OK was returned
            from the callback function. If S_FALSE was returned from the callback function, the task dialog remains active.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TaskDialogMessage.TDM_SET_MARQUEE_PROGRESS_BAR">
            <summary>Indicates whether the hosted progress bar of a task dialog should be displayed in marquee mode.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>
            A <c>BOOL</c> that indicates whether the progress bar should be shown in marquee mode. A value of <c>TRUE</c> turns on
            marquee mode, and a value of <c>FALSE</c> turns off marquee mode.
            </para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>The return value is ignored.</para>
            </summary>
            <remarks>For information on marquee mode, see Progress Bar Control.</remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TaskDialogMessage.TDM_SET_PROGRESS_BAR_STATE">
            <summary>Sets the state of the progress bar in a task dialog.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>An <c>int</c> that specifies the state of the progress bar. This parameter can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term><c>PBST_NORMAL</c></term>
            <term>Sets the progress bar to the normal state.</term>
            </item>
            <item>
            <term><c>PBST_PAUSED</c></term>
            <term>Sets the progress bar to the paused state.</term>
            </item>
            <item>
            <term><c>PBST_ERROR</c></term>
            <term>Set the progress bar to the error state.</term>
            </item>
            </list>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>If the function succeeds, the return value is non zero.</para>
            <para>If the function fails, the return value is zero. To get extended error information call GetLastError.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TaskDialogMessage.TDM_SET_PROGRESS_BAR_RANGE">
            <summary>Sets the minimum and maximum values for the progress bar in a task dialog.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>
            The <c>LOWORD</c> specifies the minimum value. By default, the minimum value is zero. The <c>HIWORD</c> specifies the maximum
            value. By default, the maximum value is 100.
            </para>
            <para><strong>Returns</strong></para>
            <para>
            Returns the previous minimum and maximum values, if successful, or zero otherwise. The <c>LOWORD</c> contains the minimum
            value, and the <c>HIWORD</c> contains the maximum value.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TaskDialogMessage.TDM_SET_PROGRESS_BAR_POS">
            <summary>Sets the position of the progress bar in a task dialog.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>An <c>int</c> that specifies the new position.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the previous position.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TaskDialogMessage.TDM_SET_PROGRESS_BAR_MARQUEE">
            <summary>Starts and stops the marquee display of the progress bar in a task dialog, and sets the speed of the marquee.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>
            A <c>BOOL</c> that indicates whether to turn the marquee display on or off. Use <c>TRUE</c> to turn on the marquee display,
            or <c>FALSE</c> to turn it off.
            </para>
            <para><em>lParam</em></para>
            <para>
            A <c>UINT</c> that specifies the time, in milliseconds, between marquee animation updates. If this parameter is zero, the
            marquee animation is updated every 30 milliseconds.
            </para>
            <para><strong>Returns</strong></para>
            <para>The return value is ignored.</para>
            </summary>
            <remarks>For information on marquee mode, see Progress Bar Control.</remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TaskDialogMessage.TDM_SET_ELEMENT_TEXT">
            <summary>Updates a text element in a task dialog.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>
            Indicates the element to update. (For an illustration, see About Task Dialogs.) This parameter must be one of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term><c>TDE_CONTENT</c></term>
            <term>Content.</term>
            </item>
            <item>
            <term><c>TDE_EXPANDED_INFORMATION</c></term>
            <term>Expanded information.</term>
            </item>
            <item>
            <term><c>TDE_FOOTER</c></term>
            <term>Footer text.</term>
            </item>
            <item>
            <term><c>TDE_MAIN_INSTRUCTION</c></term>
            <term>Main instruction.</term>
            </item>
            </list>
            <para><em>lParam</em></para>
            <para>The new text to use.</para>
            <para><strong>Returns</strong></para>
            <para>The return value is ignored.</para>
            </summary>
            <remarks>The size or layout of the task dialog may change to accommodate the new text.</remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TaskDialogMessage.TDM_CLICK_RADIO_BUTTON">
            <summary>Simulates the action of a radio button click in a task dialog.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>An <c>int</c> value that specifies the ID of the radio button to be clicked.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>The return value is ignored.</para>
            </summary>
            <remarks>
            The specified radio button ID is sent to the <c>TaskDialogCallbackProc</c> callback function as part of a
            TDN_RADIO_BUTTON_CLICKED notification code. After the callback function returns, the radio button will be selected.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TaskDialogMessage.TDM_ENABLE_BUTTON">
            <summary>Enables or disables a push button in a task dialog.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>An <c>int</c> value that specifies the ID of the push button to be enabled or disabled.</para>
            <para><em>lParam</em></para>
            <para>Specifies button state. Set to 0 to disable the button; set to nonzero to enable the button.</para>
            <para><strong>Returns</strong></para>
            <para>The return value is ignored.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TaskDialogMessage.TDM_ENABLE_RADIO_BUTTON">
            <summary>Enables or disables a radio button in a task dialog.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>An <c>int</c> value that specifies the ID of the radio button to be enabled or disabled.</para>
            <para><em>lParam</em></para>
            <para>Specifies button state. Set to 0 to disable the button; set to nonzero to enable the button.</para>
            <para><strong>Returns</strong></para>
            <para>The return value is ignored.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TaskDialogMessage.TDM_CLICK_VERIFICATION">
            <summary>Simulates a click of the verification checkbox of a task dialog, if it exists.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para><c>TRUE</c> to set the state of the checkbox to be checked; <c>FALSE</c> to set it to be unchecked.</para>
            <para><em>lParam</em></para>
            <para><c>TRUE</c> to set the keyboard focus to the checkbox; <c>FALSE</c> otherwise.</para>
            <para><strong>Returns</strong></para>
            <para>The return value is ignored.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TaskDialogMessage.TDM_UPDATE_ELEMENT_TEXT">
            <summary>Updates a text element in a task dialog.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>
            Indicates the element to update. (For an illustration of the elements, see About Task Dialogs.) This parameter must be one of
            the following values:
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term><c>TDE_CONTENT</c></term>
            <term>Content.</term>
            </item>
            <item>
            <term><c>TDE_EXPANDED_INFORMATION</c></term>
            <term>Expanded information.</term>
            </item>
            <item>
            <term><c>TDE_FOOTER</c></term>
            <term>Footer text.</term>
            </item>
            <item>
            <term><c>TDE_MAIN_INSTRUCTION</c></term>
            <term>Main instruction.</term>
            </item>
            </list>
            <para><em>lParam</em></para>
            <para>Pointer to a Unicode string that contains the new text.</para>
            <para><strong>Returns</strong></para>
            <para>The return value is ignored.</para>
            </summary>
            <remarks>
            <para>
            To avoid clipping, the new text must be no longer than the existing text. Setting the text to a shorter string does not cause
            the dialog box to resize.
            </para>
            <para>
            If the <c>pszExpandedInformation</c> member of the <c>TASKDIALOGCONFIG</c> structure used to create the task dialog was
            <c>NULL</c>, and you send a <c>TDM_UPDATE_ELEMENT_TEXT</c> message with TDE_EXPANDED_INFORMATION, nothing will happen.
            </para>
            <para>The above also applies to the footer and TDE_FOOTER.</para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TaskDialogMessage.TDM_SET_BUTTON_ELEVATION_REQUIRED_STATE">
            <summary>
            Specifies whether a given task dialog button or command link should have a User Account Control (UAC) shield icon; that is,
            whether the action invoked by the button requires elevation.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>The ID of the push button or command link to be updated.</para>
            <para><em>lParam</em></para>
            <para>
            Set to 0 to designate that the action invoked by the button does not require elevation. Set to nonzero to designate that the
            action requires elevation.
            </para>
            <para><strong>Returns</strong></para>
            <para>The return value is ignored.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TaskDialogMessage.TDM_UPDATE_ICON">
            <summary>Refreshes the icon of a task dialog.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Indicates which icon element to update. This parameter must be one of the following values:</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term><c>TDIE_ICON_MAIN</c></term>
            <term>Main icon.</term>
            </item>
            <item>
            <term><c>TDIE_ICON_FOOTER</c></term>
            <term>Footer icon.</term>
            </item>
            </list>
            <para><em>lParam</em></para>
            <para>
            A pointer to a string (PCWSTR) or handle to an icon (HICON) to display. If lParam is <c>NULL</c>, no icon is displayed,
            regardless of the value of wParam.
            </para>
            <para>
            If the value of wParam is TDIE_ICON_MAIN and the TDF_USE_HICON_MAIN flag is set on the <c>dwFlags</c> member of the
            <c>TASKDIALOGCONFIG</c> structure used to create the task dialog, lParam must contain a handle to an icon (HICON) to display.
            </para>
            <para>
            If the value of wParam is TDIE_ICON_FOOTER and the TDF_USE_HICON_FOOTER flag is set on the <c>dwFlags</c> member of the
            <c>TASKDIALOGCONFIG</c> structure used to create the task dialog, lParam must contain a handle to an icon (HICON) to display.
            </para>
            <para>
            If the TDF_USE_HICON_MAIN or TDF_USE_HICON_FOOTER flags are <c>not</c> set on the <c>dwFlags</c> member, lParam must point to
            a null-terminated, Unicode string (PCWSTR) that contains a valid resource identifier passed through the
            <c>MAKEINTRESOURCE</c> macro. The icon is displayed based on the value of wParam: if the value is TDIE_ICON_MAIN, the icon is
            displayed in the header; if the value is TDIE_ICON_FOOTER, the icon is displayed in the footer. The resource must be either
            from the application's resource module (specified in the <c>hInstance</c> member of the <c>TASKDIALOGCONFIG</c> structure),
            or if <c>hInstance</c> is <c>NULL</c>, from the system's resource module (imageres.dll). To identify a system resource, use a
            valid system identifier passed through the <c>MAKEINTRESOURCE</c> macro or one of the following predefined values from commctrl.h:
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term><c>TD_ERROR_ICON</c></term>
            <term>A stop sign icon.</term>
            </item>
            <item>
            <term><c>TD_WARNING_ICON</c></term>
            <term>An exclamation point icon.</term>
            </item>
            <item>
            <term><c>TD_INFORMATION_ICON</c></term>
            <term>A lowercase letter "i" in a circle icon.</term>
            </item>
            <item>
            <term><c>TD_SHIELD_ICON</c></term>
            <term>A security shield icon.</term>
            </item>
            </list>
            <para><strong>Returns</strong></para>
            <para>The return value is ignored.</para>
            </summary>
            <remarks>
            <para>
            The layout of the task dialog with the icon may fail and this may not be reflected in the return value. A return value of
            S_OK reflects only that the task dialog received the message and attempted to process it. If the layout of the task dialog
            fails, the dialog will close and an <c>HRESULT</c> code is returned at the registered callback function. For more information
            on the callback function syntax, see TaskDialogCallbackProc.
            </para>
            <para>
            If the task dialog is created without a footer (that is, the appropriate footer members of the <c>TASKDIALOGCONFIG</c>
            structure used to create the task dialog are <c>NULL</c>) and this message is sent, a footer is not dynamically added to the
            task dialog. The same is true for sending this message to update a header icon when a task dialog is created without a
            header. To add a header or footer at run time, use the <c>TDM_NAVIGATE_PAGE</c> functionality.
            </para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.TaskDialogNotification">
            <summary>Task Dialog callback notifications.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TaskDialogNotification.TDN_CREATED">
            <summary>
            <para>
            Sent by the task dialog after the dialog has been created and before it is displayed. This notification code is received only
            through the task dialog callback function, which can be registered using the <c>TaskDialogIndirect</c> method.
            </para>
            <para>
            <code>TDN_CREATED WPARAM wParam; LPARAM lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>The return value is ignored.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TaskDialogNotification.TDN_NAVIGATED">
            <summary>
            <para>
            Sent by a task dialog when navigation has occurred. This notification code is received only through the task dialog callback
            function, which can be registered using the <c>TaskDialogIndirect</c> method.
            </para>
            <para>
            <code>TDN_NAVIGATED WPARAM wParam; LPARAM lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>The return value is ignored.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TaskDialogNotification.TDN_BUTTON_CLICKED">
            <summary>
            <para>
            Sent by a task dialog when the user selects a button or command link in the task dialog. This notification code is received
            only through the task dialog callback function, which can be registered using the <c>TaskDialogIndirect</c> method.
            </para>
            <para>
            <code>TDN_BUTTON_CLICKED WPARAM wParam; LPARAM lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>An <c>int</c> that specifies the ID of the button or comand link that was selected.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>
            To prevent the task dialog from closing, the application must return <c>S_FALSE</c>, otherwise the task dialog is closed and
            the button ID is returned via the original application call.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TaskDialogNotification.TDN_HYPERLINK_CLICKED">
            <summary>
            <para>
            Sent by a task dialog when the user clicks a hyperlink in the task dialog content. This notification code is received only
            through the task dialog callback function, which can be registered using the <c>TaskDialogIndirect</c> method.
            </para>
            <para>
            <code>TDN_HYPERLINK_CLICKED WPARAM wParam; LPARAM lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Pointer to a wide-character string containing the URL of the hyperlink.</para>
            <para><strong>Returns</strong></para>
            <para>The return value is ignored.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TaskDialogNotification.TDN_TIMER">
            <summary>
            <para>
            Sent by a task dialog approximately every 200 milliseconds. This notification code is sent when the TDF_CALLBACK_TIMER flag
            has been set in the <c>dwFlags</c> member of the <c>TASKDIALOGCONFIG</c> structure that was passed to the
            <c>TaskDialogIndirect</c> function. This notification code is received only through the task dialog callback function, which
            can be registered using the <c>TaskDialogIndirect</c> method.
            </para>
            <para>
            <code>TDN_TIMER WPARAM wParam; LPARAM lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>
            A <c>DWORD</c> that specifies the number of milliseconds since the dialog was created or this notification code returned <c>S_FALSE</c>.
            </para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>To reset the tickcount, the application must return <c>S_FALSE</c>, otherwise the tickcount will continue to increment.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TaskDialogNotification.TDN_DESTROYED">
            <summary>
            <para>
            Sent by a task dialog when it is destroyed and its window handle is no longer valid. This notification code is received only
            through the task dialog callback function, which can be registered using the <c>TaskDialogIndirect</c> method.
            </para>
            <para>
            <code>TDN_DESTROYED WPARAM wParam; LPARAM lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>The return value is ignored.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TaskDialogNotification.TDN_RADIO_BUTTON_CLICKED">
            <summary>
            <para>
            Sent by a task dialog when the user selects a radio button or command link in the task dialog. This notification code is
            received only through the task dialog callback function, which can be registered using the <c>TaskDialogIndirect</c> method.
            </para>
            <para>
            <code>TDN_RADIO_BUTTON_CLICKED WPARAM wParam; LPARAM lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>An <c>int</c> that specifies the ID corresponding to the radio button that was clicked.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>The return value is ignored.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TaskDialogNotification.TDN_DIALOG_CONSTRUCTED">
            <summary>
            <para>
            Sent by a task dialog after the dialog has been created and before it is displayed. This notification code is received only
            through the task dialog callback function, which can be registered using the <c>TaskDialogIndirect</c> method.
            </para>
            <para>
            <code>TDN_DIALOG_CONSTRUCTED WPARAM wParam; LPARAM lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>The return value is ignored.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TaskDialogNotification.TDN_VERIFICATION_CLICKED">
            <summary>
            <para>
            Sent by a task dialog when the user clicks the task dialog verification check box. This notification code is received only
            through the task dialog callback function, which can be registered using the <c>TaskDialogIndirect</c> method.
            </para>
            <para>
            <code>TDN_VERIFICATION_CLICKED WPARAM wParam; LPARAM lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>
            A <c>BOOL</c> that specifies the status of the verification checkbox. It is <c>TRUE</c> if the verification checkbox is
            checked, or <c>FALSE</c> if it is unchecked.
            </para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>The return value is ignored.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TaskDialogNotification.TDN_HELP">
            <summary>
            <para>
            Sent by a task dialog when the user presses F1 on the keyboard while the dialog has focus. This notification code is received
            only through the task dialog callback function, which can be registered using the <c>TaskDialogIndirect</c> method.
            </para>
            <para>
            <code>TDN_HELP WPARAM wParam; LPARAM lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>The return value is ignored.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TaskDialogNotification.TDN_EXPANDO_BUTTON_CLICKED">
            <summary>
            <para>
            Sent by the task dialog when the user clicks on the dialog's expando button. This notification is received only through the
            task dialog callback function, which can be registered using the <c>TaskDialogIndirect</c> method.
            </para>
            <para>
            <code>TDN_EXPANDO_BUTTON_CLICKED WPARAM wParam; LPARAM lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>A <c>BOOL</c> that is <c>TRUE</c> if the dialog is expanded, or <c>FALSE</c> if not.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>The return value is ignored.</para>
            </summary>
            <remarks>
            The example in the Syntax section shows the cast to wParam before sending the notification. <c>LPARAM</c> is not used and
            must be zero.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.TaskDialog(Vanara.PInvoke.HWND,Vanara.PInvoke.HINSTANCE,System.String,System.String,System.String,Vanara.PInvoke.ComCtl32.TASKDIALOG_COMMON_BUTTON_FLAGS,Vanara.PInvoke.SafeResourceId,System.Int32@)">
            <summary>
            The TaskDialog function creates, displays, and operates a task dialog. The task dialog contains application-defined message text
            and title, icons, and any combination of predefined push buttons. This function does not support the registration of a callback
            function to receive notifications.
            </summary>
            <param name="hwndParent">
            Handle to the owner window of the task dialog to be created. If this parameter is NULL, the task dialog has no owner window.
            </param>
            <param name="hInstance">
            Handle to the module that contains the icon resource identified by the pszIcon member, and the string resources identified by the
            pszWindowTitle and pszMainInstruction members. If this parameter is NULL, pszIcon must be NULL or a pointer to a null-terminated,
            Unicode string that contains a system resource identifier, for example, TD_ERROR_ICON.
            </param>
            <param name="pszWindowTitle">
            Pointer to the string to be used for the task dialog title. This parameter is a null-terminated, Unicode string that contains
            either text, or an integer resource identifier passed through the MAKEINTRESOURCE macro. If this parameter is NULL, the filename
            of the executable program is used.
            </param>
            <param name="pszMainInstruction">
            Pointer to the string to be used for the main instruction. This parameter is a null-terminated, Unicode string that contains
            either text, or an integer resource identifier passed through the MAKEINTRESOURCE macro. This parameter can be NULL if no main
            instruction is wanted.
            </param>
            <param name="pszContent">
            Pointer to a string used for additional text that appears below the main instruction, in a smaller font. This parameter is a
            null-terminated, Unicode string that contains either text, or an integer resource identifier passed through the MAKEINTRESOURCE
            macro. Can be NULL if no additional text is wanted.
            </param>
            <param name="dwCommonButtons">
            Specifies the push buttons displayed in the dialog box. This parameter may be a combination of flags from the following group.
            </param>
            <param name="pszIcon">
            Pointer to a string that identifies the icon to display in the task dialog. This parameter must be an integer resource identifier
            passed to the MAKEINTRESOURCE macro or one of the following predefined values. If this parameter is NULL, no icon will be
            displayed. If the hInstance parameter is NULL and one of the predefined values is not used, the TaskDialog function fails.
            </param>
            <param name="pnButton">
            When this function returns, contains a pointer to an integer location that receives one of the standard button result values.
            </param>
            <returns>
            This function can return one of these values.
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>S_OK</term>
            <term>The operation completed successfully.</term>
            </item>
            <item>
            <term>E_OUTOFMEMORY</term>
            <term>There is insufficient memory to complete the operation.</term>
            </item>
            <item>
            <term>E_INVALIDARG</term>
            <term>One or more arguments are not valid.</term>
            </item>
            <item>
            <term>E_FAIL</term>
            <term>The operation failed.</term>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.TaskDialogIndirect(Vanara.PInvoke.ComCtl32.TASKDIALOGCONFIG,System.Int32@,System.Int32@,System.Boolean@)">
            <summary>
            The TaskDialogIndirect function creates, displays, and operates a task dialog. The task dialog contains application-defined
            icons, messages, title, verification check box, command links, push buttons, and radio buttons. This function can register a
            callback function to receive notification messages.
            </summary>
            <param name="pTaskConfig">Pointer to a TASKDIALOGCONFIG structure that contains information used to display the task dialog.</param>
            <param name="pnButton">
            Address of a variable that receives one of the button IDs specified in the pButtons member of the pTaskConfig parameter or a
            standard button ID value.
            </param>
            <param name="pnRadioButton">
            Address of a variable that receives one of the button IDs specified in the pRadioButtons member of the pTaskConfig parameter. If
            this parameter is NULL, no value is returned.
            </param>
            <param name="pfVerificationFlagChecked">
            Address of a variable that receives a value indicating if the verification checkbox was checked when the dialog was dismissed.
            </param>
            <returns>
            This function can return one of these values.
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>S_OK</term>
            <term>The operation completed successfully.</term>
            </item>
            <item>
            <term>E_OUTOFMEMORY</term>
            <term>There is insufficient memory to complete the operation.</term>
            </item>
            <item>
            <term>E_INVALIDARG</term>
            <term>One or more arguments are not valid.</term>
            </item>
            <item>
            <term>E_FAIL</term>
            <term>The operation failed.</term>
            </item>
            </list>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.TASKDIALOG_BUTTON">
            <summary>
            The TASKDIALOG_BUTTON structure contains information used to display a button in a task dialog. The TASKDIALOGCONFIG structure
            uses this structure.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TASKDIALOG_BUTTON.nButtonID">
            <summary>Indicates the value to be returned when this button is selected.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TASKDIALOG_BUTTON.pszButtonText">
            <summary>
            Pointer that references the string to be used to label the button. This parameter can be either a null-terminated string or
            an integer resource identifier passed to the MAKEINTRESOURCE macro. When using Command Links, you delineate the command from
            the note by placing a new line character in the string.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.TASKDIALOGCONFIG">
            <summary>
            The <c>TASKDIALOGCONFIG</c> structure contains information used to display a task dialog. The TaskDialogIndirect function uses
            this structure.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TASKDIALOGCONFIG.cbSize">
            <summary>Specifies the structure size, in bytes.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TASKDIALOGCONFIG.hwndParent">
            <summary>Handle to the parent window. This member can be NULL.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TASKDIALOGCONFIG.hInstance">
            <summary>
            Handle to the module that contains the icon resource identified by the pszMainIcon or pszFooterIcon members, and the string
            resources identified by the pszWindowTitle, pszMainInstruction, pszContent, pszVerificationText, pszExpandedInformation,
            pszExpandedControlText, pszCollapsedControlText or pszFooter members.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TASKDIALOGCONFIG.dwFlags">
            <summary>Specifies the behavior of the task dialog. This parameter can be a combination of flags.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TASKDIALOGCONFIG.dwCommonButtons">
            <summary>
            Specifies the push buttons displayed in the task dialog. If no common buttons are specified and no custom buttons are
            specified using the cButtons and pButtons members, the task dialog will contain the OK button by default. This parameter may
            be a combination of flags.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TASKDIALOGCONFIG.pszWindowTitle">
            <summary>
            Pointer that references the string to be used for the task dialog title. This parameter can be either a null-terminated
            string or an integer resource identifier passed to the MAKEINTRESOURCE macro. If this parameter is NULL, the filename of the
            executable program is used.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TASKDIALOGCONFIG.mainIcon">
            <summary>
            A handle to an Icon that is to be displayed in the task dialog. This member is ignored unless the TDF_USE_HICON_MAIN flag is
            specified. If this member is NULL and the TDF_USE_HICON_MAIN is specified, no icon will be displayed.
            <para><c>OR</c></para>
            <para>
            Pointer that references the icon to be displayed in the task dialog. This parameter is ignored if the USE_HICON_MAIN flag is
            specified. Otherwise, if this parameter is NULL or the hInstance parameter is NULL, no icon will be displayed. This parameter
            must be an integer resource identifier passed to the MAKEINTRESOURCE macro.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TASKDIALOGCONFIG.pszMainInstruction">
            <summary>
            Pointer that references the string to be used for the main instruction. This parameter can be either a null-terminated string
            or an integer resource identifier passed to the MAKEINTRESOURCE macro.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TASKDIALOGCONFIG.pszContent">
            <summary>
            Pointer that references the string to be used for the dialog's primary content. This parameter can be either a
            null-terminated string or an integer resource identifier passed to the MAKEINTRESOURCE macro. If the ENABLE_HYPERLINKS flag
            is specified for the dwFlags member, then this string may contain hyperlinks in the form: <A
            HREF="executablestring">Hyperlink Text</A>. WARNING: Enabling hyperlinks when using content from an unsafe source may cause
            security vulnerabilities.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TASKDIALOGCONFIG.cButtons">
            <summary>
            The number of entries in the pButtons array that is used to create buttons or command links in the task dialog. If this
            member is zero and no common buttons have been specified using the dwCommonButtons member, then the task dialog will have a
            single OK button displayed.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TASKDIALOGCONFIG.pButtons">
            <summary>
            Pointer to an array of TASKDIALOG_BUTTON structures containing the definition of the custom buttons that are to be displayed
            in the task dialog. This array must contain at least the number of entries that are specified by the cButtons member.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TASKDIALOGCONFIG.nDefaultButton">
            <summary>
            The default button for the task dialog. This may be any of the values specified in nButtonID members of one of the
            TASKDIALOG_BUTTON structures in the pButtons array, or one of the IDs corresponding to the buttons specified in the
            dwCommonButtons member. If this member is zero or its value does not correspond to any button ID in the dialog, then the
            first button in the dialog will be the default.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TASKDIALOGCONFIG.cRadioButtons">
            <summary>The number of entries in the pRadioButtons array that is used to create radio buttons in the task dialog.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TASKDIALOGCONFIG.pRadioButtons">
            <summary>
            Pointer to an array of TASKDIALOG_BUTTON structures containing the definition of the radio buttons that are to be displayed
            in the task dialog. This array must contain at least the number of entries that are specified by the cRadioButtons member.
            This parameter can be NULL.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TASKDIALOGCONFIG.nDefaultRadioButton">
            <summary>
            The button ID of the radio button that is selected by default. If this value does not correspond to a button ID, the first
            button in the array is selected by default.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TASKDIALOGCONFIG.pszVerificationText">
            <summary>
            Pointer that references the string to be used to label the verification checkbox. This parameter can be either a
            null-terminated string or an integer resource identifier passed to the MAKEINTRESOURCE macro. If this parameter is NULL, the
            verification checkbox is not displayed in the task dialog. If the pfVerificationFlagChecked parameter of TaskDialogIndirect
            is NULL, the checkbox is not enabled.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TASKDIALOGCONFIG.pszExpandedInformation">
            <summary>
            Pointer that references the string to be used for displaying additional information. This parameter can be either a
            null-terminated string or an integer resource identifier passed to the MAKEINTRESOURCE macro. The additional information is
            displayed either immediately below the content or below the footer text depending on whether the TDF_EXPAND_FOOTER_AREA flag
            is specified. If the TDF_ENABLE_HYPERLINKS flag is specified for the dwFlags member, then this string may contain hyperlinks
            in the form: <A HREF="executablestring">Hyperlink Text</A>. WARNING: Enabling hyperlinks when using content from an unsafe
            source may cause security vulnerabilities.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TASKDIALOGCONFIG.pszExpandedControlText">
            <summary>
            Pointer that references the string to be used to label the button for collapsing the expandable information. This parameter
            can be either a null-terminated string or an integer resource identifier passed to the MAKEINTRESOURCE macro. This member is
            ignored when the pszExpandedInformation member is NULL. If this member is NULL and the pszCollapsedControlText is specified,
            then the pszCollapsedControlText value will be used for this member as well.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TASKDIALOGCONFIG.pszCollapsedControlText">
            <summary>
            Pointer that references the string to be used to label the button for expanding the expandable information. This parameter
            can be either a null-terminated string or an integer resource identifier passed to the MAKEINTRESOURCE macro. This member is
            ignored when the pszExpandedInformation member is NULL. If this member is NULL and the pszCollapsedControlText is specified,
            then the pszCollapsedControlText value will be used for this member as well.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TASKDIALOGCONFIG.footerIcon">
            <summary>
            A handle to an Icon that is to be displayed in the footer of the task dialog. This member is ignored unless the
            TDF_USE_HICON_FOOTER flag is specified and the pszFooterIcon is not. If this member is NULL and the TDF_USE_HICON_FOOTER is
            specified, no icon is displayed.
            <para><c>OR</c></para>
            <para>
            Pointer that references the icon to be displayed in the footer area of the task dialog. This parameter is ignored if the
            TDF_USE_HICON_FOOTER flag is specified, or if pszFooter is NULL. Otherwise, if this parameter is NULL or the hInstance
            parameter is NULL, no icon is displayed. This parameter must be an integer resource identifier passed to the MAKEINTRESOURCE
            macro or one of the predefined values listed for pszMainIcon.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TASKDIALOGCONFIG.pszFooter">
            <summary>
            Pointer to the string to be used in the footer area of the task dialog. This parameter can be either a null-terminated string
            or an integer resource identifier passed to the MAKEINTRESOURCE macro. If the TDF_ENABLE_HYPERLINKS flag is specified for the
            dwFlags member, then this string may contain hyperlinks in this form.
            <para>&lt;A HREF="executablestring"&gt;Hyperlink Text&lt;/A&gt;</para>
            <note type="warning">Enabling hyperlinks when using content from an unsafe source may cause security vulnerabilities.</note>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TASKDIALOGCONFIG.pfCallbackProc">
            <summary>Pointer to an application-defined callback function. For more information see TaskDialogCallbackProc.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TASKDIALOGCONFIG.lpCallbackData">
            <summary>A pointer to application-defined reference data. This value is defined by the caller.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TASKDIALOGCONFIG.cxWidth">
            <summary>
            The width of the task dialog's client area, in dialog units. If 0, the task dialog manager will calculate the ideal width.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.TASKDIALOGCONFIG.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vanara.PInvoke.ComCtl32.TASKDIALOGCONFIG"/> class setting the <see cref="F:Vanara.PInvoke.ComCtl32.TASKDIALOGCONFIG.cbSize"/> field properly.
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.TASKDIALOGCONFIG.WindowTitle">
            <summary>
            The string to be used for the task dialog title. If this parameter is NULL, the filename of the executable program is used.
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.TASKDIALOGCONFIG.MainInstruction">
            <summary>The string to be used for the main instruction.</summary>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.TASKDIALOGCONFIG.Content">
            <summary>
            The string to be used for the dialog's primary content. If the ENABLE_HYPERLINKS flag is specified for the dwFlags member,
            then this string may contain hyperlinks in the form: &lt;A HREF="executablestring"&gt;Hyperlink Text&lt;/A&gt;. WARNING:
            Enabling hyperlinks when using content from an unsafe source may cause security vulnerabilities.
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.TASKDIALOGCONFIG.VerificationText">
            <summary>
            The string to be used to label the verification checkbox. If this parameter is NULL, the verification checkbox is not
            displayed in the task dialog. If the pfVerificationFlagChecked parameter of TaskDialogIndirect is NULL, the checkbox is not enabled.
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.TASKDIALOGCONFIG.ExpandedInformation">
            <summary>
            The string to be used for displaying additional information. The additional information is displayed either immediately below
            the content or below the footer text depending on whether the TDF_EXPAND_FOOTER_AREA flag is specified. If the
            TDF_ENABLE_HYPERLINKS flag is specified for the dwFlags member, then this string may contain hyperlinks in the form: &lt;A
            HREF="executablestring"&gt;Hyperlink Text&lt;/A&gt;. WARNING: Enabling hyperlinks when using content from an unsafe source
            may cause security vulnerabilities.
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.TASKDIALOGCONFIG.ExpandedControlText">
            <summary>
            The string to be used to label the button for collapsing the expandable information. This member is ignored when the
            pszExpandedInformation member is NULL. If this member is NULL and the pszCollapsedControlText is specified, then the
            pszCollapsedControlText value will be used for this member as well.
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.TASKDIALOGCONFIG.CollapsedControlText">
            <summary>
            The string to be used to label the button for expanding the expandable information. This member is ignored when the
            pszExpandedInformation member is NULL. If this member is NULL and the pszCollapsedControlText is specified, then the
            pszCollapsedControlText value will be used for this member as well.
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.TASKDIALOGCONFIG.Footer">
            <summary>
            The string to be used in the footer area of the task dialog. If the TDF_ENABLE_HYPERLINKS flag is specified for the dwFlags
            member, then this string may contain hyperlinks in this form.
            <para>&lt;A HREF="executablestring"&gt;Hyperlink Text&lt;/A&gt;</para>
            <note type="warning">Enabling hyperlinks when using content from an unsafe source may cause security vulnerabilities.</note>
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.TASKDIALOGCONFIG.System#IDisposable#Dispose">
            <inheritdoc/>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TOOLBARCLASSNAME">
            <summary>Window class name for the Toolbar control.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HINST_COMMCTRL">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.CMB">
            <summary>Options for CreateMappedBitmap.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CMB.CMB_NONE">
            <summary>No flags</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.CMB.CMB_MASKED">
            <summary>Uses a bitmap as a mask.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.HICF">
            <summary>Flags that indicate why the hot item has changed in NMTBHOTITEM.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HICF.HICF_ACCELERATOR">
            <summary>The change in the hot item was caused by a shortcut key.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HICF.HICF_ARROWKEYS">
            <summary>The change in the hot item was caused by an arrow key.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HICF.HICF_DUPACCEL">
            <summary>Modifies HICF_ACCELERATOR. If this flag is set, more than one item has the same shortcut key character.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HICF.HICF_ENTERING">
            <summary>
            Modifies the other reason flags. If this flag is set, there is no previous hot item and idOld does not contain valid information.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HICF.HICF_LEAVING">
            <summary>
            Modifies the other reason flags. If this flag is set, there is no new hot item and idNew does not contain valid information.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HICF.HICF_LMOUSE">
            <summary>The change in the hot item resulted from a left-click mouse event.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HICF.HICF_MOUSE">
            <summary>The change in the hot item resulted from a mouse event.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HICF.HICF_OTHER">
            <summary>
            The change in the hot item resulted from an event that could not be determined. This will most often be due to a change in
            focus or the TB_SETHOTITEM message.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HICF.HICF_RESELECT">
            <summary>The change in the hot item resulted from the user entering the shortcut key for an item that was already hot.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HICF.HICF_TOGGLEDROPDOWN">
            <summary>Version 5.80. Causes the button to switch states.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.HIST">
            <summary>Index values for IDB_HIST_LARGE_COLOR and IDB_HIST_SMALL_COLOR</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HIST.HIST_BACK">
            <summary>Move back.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HIST.HIST_FORWARD">
            <summary>Move forward.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HIST.HIST_FAVORITES">
            <summary>Open favorites folder.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HIST.HIST_ADDTOFAVORITES">
            <summary>Add to favorites.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.HIST.HIST_VIEWTREE">
            <summary>View tree.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.IDB">
            <summary>Identifier of a system-defined button image list. Used by TB_LOADIMAGES.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.IDB.IDB_STD_SMALL_COLOR">
            <summary>Standard bitmaps in small size.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.IDB.IDB_STD_LARGE_COLOR">
            <summary>Standard bitmaps in large size.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.IDB.IDB_VIEW_SMALL_COLOR">
            <summary>View bitmaps in small size.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.IDB.IDB_VIEW_LARGE_COLOR">
            <summary>View bitmaps in large size.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.IDB.IDB_HIST_SMALL_COLOR">
            <summary>Windows Explorer bitmaps in small size.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.IDB.IDB_HIST_LARGE_COLOR">
            <summary>Windows Explorer bitmaps in large size.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.IDB.IDB_HIST_NORMAL">
            <summary>Windows Explorer travel buttons and favorites bitmaps in normal state.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.IDB.IDB_HIST_HOT">
            <summary>Windows Explorer travel buttons and favorites bitmaps in hot state.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.IDB.IDB_HIST_DISABLED">
            <summary>Windows Explorer travel buttons and favorites bitmaps in disabled state.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.IDB.IDB_HIST_PRESSED">
            <summary>Windows Explorer travel buttons and favorites bitmaps in pressed state.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.STD">
            <summary>Index values for IDB_STD_LARGE_COLOR and IDB_STD_SMALL_COLOR</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.STD.STD_CUT">
            <summary>Cut operation.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.STD.STD_COPY">
            <summary>Copy operation.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.STD.STD_PASTE">
            <summary>Paste operation.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.STD.STD_UNDO">
            <summary>Undo operation.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.STD.STD_REDOW">
            <summary>Redo operation.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.STD.STD_DELETE">
            <summary>Delete operation.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.STD.STD_FILENEW">
            <summary>New file operation.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.STD.STD_FILEOPEN">
            <summary>Open file operation.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.STD.STD_FILESAVE">
            <summary>Save file operation.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.STD.STD_PRINTPRE">
            <summary>Print preview operation.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.STD.STD_PROPERTIES">
            <summary>Properties operation.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.STD.STD_HELP">
            <summary>Help operation.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.STD.STD_FIND">
            <summary>Find operation.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.STD.STD_REPLACE">
            <summary>Replace operation.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.STD.STD_PRINT">
            <summary>Print operation.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.TBCDRF">
            <summary>
            The value your application can return depends on the current drawing stage. The <c>dwDrawStage</c> member of the associated
            <c>NMCUSTOMDRAW</c> structure holds a value that specifies the drawing stage. You must return one of the following values.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TBCDRF.CDRF_DODEFAULT">
            <summary>
            The control will draw itself. It will not send any additional NM_CUSTOMDRAW notification codes for this paint cycle. This
            occurs when dwDrawStage equals CDDS_PREPAINT.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TBCDRF.CDRF_NEWFONT">
            <summary>
            Your application specified a new font for the item; the control will use the new font. For more information on changing
            fonts, see Changing fonts and colors. This occurs when dwDrawStage equals CDDS_ITEMPREPAINT.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TBCDRF.CDRF_SKIPDEFAULT">
            <summary>
            Your application drew the item manually. The control will not draw the item. This occurs when dwDrawStage equals CDDS_ITEMPREPAINT.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TBCDRF.CDRF_NOTIFYPOSTPAINT">
            <summary>The control will notify the parent after painting an item. This occurs when dwDrawStage equals CDDS_PREPAINT.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TBCDRF.CDRF_NOTIFYITEMDRAW">
            <summary>
            The control will notify the parent of any item-related drawing operations. It will send NM_CUSTOMDRAW notification codes
            before and after drawing items. This occurs when dwDrawStage equals CDDS_PREPAINT.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TBCDRF.CDRF_NOTIFYSUBITEMDRAW">
            <summary>
            Version 4.71. The control will notify the parent when a list-view subitem is being drawn. This occurs when dwDrawStage equals CDDS_PREPAINT.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TBCDRF.CDRF_NOTIFYPOSTERASE">
            <summary>The control will notify the parent after erasing an item. This occurs when dwDrawStage equals CDDS_PREPAINT.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TBCDRF.TBCDRF_BLENDICON">
            <summary>Version 5.00. Blend the button 50 percent with the background. This occurs when dwDrawStage equals CDDS_ITEMPREPAINT.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TBCDRF.TBCDRF_HILITEHOTTRACK">
            <summary>
            Version 4.71. Use the clrHighlightHotTrack member of the NMTBCUSTOMDRAW structure to draw the background of hot-tracked
            items. This occurs when dwDrawStage equals CDDS_ITEMPREPAINT.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TBCDRF.TBCDRF_NOBACKGROUND">
            <summary>Version 5.00. Do not draw button background. This occurs when dwDrawStage equals CDDS_ITEMPREPAINT.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TBCDRF.TBCDRF_NOEDGES">
            <summary>Version 4.71. Do not draw button edges. This occurs when dwDrawStage equals CDDS_ITEMPREPAINT.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TBCDRF.TBCDRF_NOETCHEDEFFECT">
            <summary>Version 4.71. Do not draw etched effect for disabled items. This occurs when dwDrawStage equals CDDS_ITEMPREPAINT.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TBCDRF.TBCDRF_NOMARK">
            <summary>Do not draw default highlight of items that have the TBSTATE_MARKED. This occurs when dwDrawStage equals CDDS_ITEMPREPAINT.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TBCDRF.TBCDRF_NOOFFSET">
            <summary>Version 4.71. Do not offset the button when pressed. This occurs when dwDrawStage equals CDDS_ITEMPREPAINT.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TBCDRF.TBCDRF_USECDCOLORS">
            <summary>Version 6.00, Windows Vista only. Use custom draw colors to render text regardless of visual style.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.TBDDRET">
            <summary>Return value from TBN_DROPDOWN.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TBDDRET.TBDDRET_DEFAULT">
            <summary>The drop-down was handled.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TBDDRET.TBDDRET_NODEFAULT">
            <summary>The drop-down was not handled.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TBDDRET.TBDDRET_TREATPRESSED">
            <summary>The drop-down was handled, but treat the button like a regular button.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.TBIF">
            <summary>Flags used by TBBUTTONINFO.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TBIF.TBIF_BYINDEX">
            <summary>Version 5.80. The wParam sent with a TB_GETBUTTONINFO or TB_SETBUTTONINFO message is an index, not an identifier.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TBIF.TBIF_COMMAND">
            <summary>The idCommand member contains valid information or is being requested.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TBIF.TBIF_IMAGE">
            <summary>The iImage member contains valid information or is being requested.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TBIF.TBIF_LPARAM">
            <summary>The lParam member contains valid information or is being requested.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TBIF.TBIF_SIZE">
            <summary>The cx member contains valid information or is being requested.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TBIF.TBIF_STATE">
            <summary>The fsState member contains valid information or is being requested.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TBIF.TBIF_STYLE">
            <summary>The fsStyle member contains valid information or is being requested.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TBIF.TBIF_TEXT">
            <summary>The pszText member contains valid information or is being requested.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.TBIMHT">
            <summary>Defines where the insertion mark is in relation to iButton in TBINSERTMARK.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TBIMHT.TBIMHT_AFTER">
            <summary>The insertion mark is to the right of the specified button.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TBIMHT.TBIMHT_BACKGROUND">
            <summary>
            The insertion mark is on the background of the toolbar. This flag is only used with the TB_INSERTMARKHITTEST message.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.TBMF">
            <summary>Mask that determines the metric to retrieve in TBMETRICS.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TBMF.TBMF_PAD">
            <summary>Retrieve the cxPad and cyPad values.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TBMF.TBMF_BARPAD">
            <summary>Retrieve the cxBarPad and cyBarPad values.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TBMF.TBMF_BUTTONSPACING">
            <summary>Retrieve the cxButtonSpacing and cyButtonSpacing values.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.TBNF">
            <summary>Set of flags that indicate which members of NMTBDISPINFO are being requested.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TBNF.TBNF_IMAGE">
            <summary>The item's image index is being requested. The image index must be placed in the iImage member.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TBNF.TBNF_TEXT">
            <summary>Not currently implemented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TBNF.TBNF_DI_SETITEM">
            <summary>
            Set this flag when processing TBN_GETDISPINFO; the toolbar control will retain the supplied information and not request it again.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.TBSTATE">
            <summary>State values used by TB_GETSTATE and TB_SETSTATE.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TBSTATE.TBSTATE_CHECKED">
            <summary>The button has the TBSTYLE_CHECK style and is being clicked.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TBSTATE.TBSTATE_ELLIPSES">
            <summary>Version 4.70. The button's text is cut off and an ellipsis is displayed.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TBSTATE.TBSTATE_ENABLED">
            <summary>The button accepts user input. A button that does not have this state is grayed.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TBSTATE.TBSTATE_HIDDEN">
            <summary>The button is not visible and cannot receive user input.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TBSTATE.TBSTATE_INDETERMINATE">
            <summary>The button is grayed.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TBSTATE.TBSTATE_MARKED">
            <summary>Version 4.71. The button is marked. The interpretation of a marked item is dependent upon the application.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TBSTATE.TBSTATE_PRESSED">
            <summary>The button is being clicked.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TBSTATE.TBSTATE_WRAP">
            <summary>The button is followed by a line break. The button must also have the TBSTATE_ENABLED state.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.ToolbarMessage">
            <summary>Toolbar Control Messages</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_CHECKBUTTON">
            <summary>
            Checks or unchecks a given button in a toolbar.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Command identifier of the button to check.</para>
            <para><em>lParam</em></para>
            <para>
            The <c>LOWORD</c> is a <c>BOOL</c> that indicates whether to check or uncheck the specified button. If <c>TRUE</c>, the check
            is added. If <c>FALSE</c>, the check is removed.
            </para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> if successful, or <c>FALSE</c> otherwise.</para>
            </summary>
            <remarks>When a button is checked, it is displayed in the pressed state.</remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_PRESSBUTTON">
            <summary>
            Presses or releases the specified button in a toolbar.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Command identifier of the button to press or release.</para>
            <para><em>lParam</em></para>
            <para>
            The <c>LOWORD</c> is a <c>BOOL</c> that indicates whether to press or release the specified button. If <c>TRUE</c>, the
            button is pressed. If <c>FALSE</c>, the button is released.
            </para>
            <para>The <c>HIWORD</c> must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> if successful, or <c>FALSE</c> otherwise.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_HIDEBUTTON">
            <summary>
            Hides or shows the specified button in a toolbar.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Command identifier of the button to hide or show.</para>
            <para><em>lParam</em></para>
            <para>
            The <c>LOWORD</c> is a <c>BOOL</c> that indicates whether to hide or show the specified button. If <c>TRUE</c>, the button is
            hidden. If <c>FALSE</c>, the button is shown.
            </para>
            <para>The <c>HIWORD</c> must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> if successful, or <c>FALSE</c> otherwise.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_INDETERMINATE">
            <summary>
            Sets or clears the indeterminate state of the specified button in a toolbar.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Command identifier of the button whose indeterminate state is to be set or cleared.</para>
            <para><em>lParam</em></para>
            <para>
            The <c>LOWORD</c> is a <c>BOOL</c> that indicates whether to set or clear the indeterminate state. If <c>TRUE</c>, the
            indeterminate state is set. If <c>FALSE</c>, the state is cleared.
            </para>
            <para>The <c>HIWORD</c> must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> if successful, or <c>FALSE</c> otherwise.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_MARKBUTTON">
            <summary>
            Sets the highlight state of a given button in a toolbar control.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Command identifier for a toolbar button.</para>
            <para><em>lParam</em></para>
            <para>
            The <c>LOWORD</c> is a <c>BOOL</c> that indicates the new highlight state. If <c>TRUE</c>, the button is highlighted. If
            <c>FALSE</c>, the button is set to its default state.
            </para>
            <para>The <c>HIWORD</c> must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns nonzero if successful, or zero otherwise.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_ISBUTTONENABLED">
            <summary>
            Determines whether the specified button in a toolbar is enabled.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Command identifier of the button.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns nonzero if the button is enabled, or zero otherwise.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_ISBUTTONCHECKED">
            <summary>
            Determines whether the specified button in a toolbar is checked.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Command identifier of the button.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns nonzero if the button is checked, or zero otherwise.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_ISBUTTONPRESSED">
            <summary>
            Determines whether the specified button in a toolbar is pressed.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Command identifier of the button.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns nonzero if the button is pressed, or zero otherwise.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_ISBUTTONHIDDEN">
            <summary>
            Determines whether the specified button in a toolbar is hidden.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Command identifier of the button.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns nonzero if the button is hidden, or zero otherwise.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_ISBUTTONINDETERMINATE">
            <summary>
            Determines whether the specified button in a toolbar is indeterminate.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Command identifier of the button.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns nonzero if the button is indeterminate, or zero otherwise.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_ISBUTTONHIGHLIGHTED">
            <summary>
            Checks the highlight state of a toolbar button.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Command identifier for a toolbar button.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns nonzero if the button is highlighted, or zero otherwise.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_SETSTATE">
            <summary>
            Sets the state for the specified button in a toolbar.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Command identifier of the button.</para>
            <para><em>lParam</em></para>
            <para>The <c>LOWORD</c> is a combination of values listed in Toolbar Button States. The <c>HIWORD</c> must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> if successful, or <c>FALSE</c> otherwise.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_GETSTATE">
            <summary>
            Retrieves information about the state of the specified button in a toolbar, such as whether it is enabled, pressed, or checked.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Command identifier of the button for which to retrieve information.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>
            Returns the button state information if successful, or -1 otherwise. The button state information can be a combination of the
            values listed in <c>Toolbar Button States</c>.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_ADDBITMAP">
            <summary>
            Adds one or more images to the list of button images available for a toolbar.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Number of button images in the bitmap. If lParam specifies a system-defined bitmap, this parameter is ignored.</para>
            <para><em>lParam</em></para>
            <para>
            Pointer to a <c>TBADDBITMAP</c> structure that contains the identifier of a bitmap resource and the handle to the module
            instance with the executable file that contains the bitmap resource.
            </para>
            <para><strong>Returns</strong></para>
            <para>Returns the index of the first new image if successful, or -1 otherwise.</para>
            </summary>
            <remarks>
            If the toolbar was created using the <c>CreateWindowEx</c> function, you must send the <c>TB_BUTTONSTRUCTSIZE</c> message to
            the toolbar before sending <c>TB_ADDBITMAP</c>.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_ADDBUTTONSA">
            <summary>
            Adds one or more buttons to a toolbar.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Number of buttons to add.</para>
            <para><em>lParam</em></para>
            <para>
            Pointer to an array of <c>TBBUTTON</c> structures that contain information about the buttons to add. There must be the same
            number of elements in the array as buttons specified by wParam.
            </para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> if successful, or <c>FALSE</c> otherwise.</para>
            </summary>
            <remarks>
            <para>
            If the toolbar was created using the <c>CreateWindowEx</c> function, you must send the <c>TB_BUTTONSTRUCTSIZE</c> message to
            the toolbar before sending <c>TB_ADDBUTTONS</c>.
            </para>
            <para>See <c>TB_SETIMAGELIST</c> for a discussion of how to assign bitmaps to toolbar buttons from one or more image lists.</para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_INSERTBUTTONA">
            <summary>
            Inserts a button in a toolbar.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Zero-based index of a button. The message inserts the new button to the left of this button.</para>
            <para><em>lParam</em></para>
            <para>Pointer to a <c>TBBUTTON</c> structure containing information about the button to insert.</para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> if successful, or <c>FALSE</c> otherwise.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_DELETEBUTTON">
            <summary>
            Deletes a button from the toolbar.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Zero-based index of the button to delete.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> if successful, or <c>FALSE</c> otherwise.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_GETBUTTON">
            <summary>
            Retrieves information about the specified button in a toolbar.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Zero-based index of the button for which to retrieve information.</para>
            <para><em>lParam</em></para>
            <para>Pointer to the <c>TBBUTTON</c> structure that receives the button information.</para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> if successful, or <c>FALSE</c> otherwise.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_BUTTONCOUNT">
            <summary>
            Retrieves a count of the buttons currently in the toolbar.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the count of the buttons.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_COMMANDTOINDEX">
            <summary>
            Retrieves the zero-based index for the button associated with the specified command identifier.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Command identifier associated with the button.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the zero-based index for the button or -1 if the specified command identifier is invalid.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_SAVERESTOREA">
            <summary>
            Send this message to initiate saving or restoring a toolbar state.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>
            Save or restore flag. If this parameter is <c>TRUE</c>, the information is saved. If it is <c>FALSE</c>, the information is restored.
            </para>
            <para><em>lParam</em></para>
            <para>
            Pointer to a <c>TBSAVEPARAMS</c> structure that specifies the registry key, subkey, and value name for the toolbar state information.
            </para>
            <para><strong>Returns</strong></para>
            <para>No return value.</para>
            </summary>
            <remarks>
            <para>
            For version 4.72 and earlier, to use this message to save or restore a toolbar, the parent window of the toolbar control must
            implement a handler for the TBN_GETBUTTONINFO notification code. The toolbar issues this notification to retrieve information
            about each button as it is restored.
            </para>
            <para>
            Version 5.80 includes a new save/restore option. At the beginning of the process, and as each button is saved or restored,
            your application will receive a TBN_SAVE or TBN_RESTORE notification. To use this option, you must implement notification
            handlers to provide the Shell with the bitmap and state information it needs to successfully save or restore the toolbar state.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_SAVERESTOREW">
            <summary>
            Send this message to initiate saving or restoring a toolbar state.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>
            Save or restore flag. If this parameter is <c>TRUE</c>, the information is saved. If it is <c>FALSE</c>, the information is restored.
            </para>
            <para><em>lParam</em></para>
            <para>
            Pointer to a <c>TBSAVEPARAMS</c> structure that specifies the registry key, subkey, and value name for the toolbar state information.
            </para>
            <para><strong>Returns</strong></para>
            <para>No return value.</para>
            </summary>
            <remarks>
            <para>
            For version 4.72 and earlier, to use this message to save or restore a toolbar, the parent window of the toolbar control must
            implement a handler for the TBN_GETBUTTONINFO notification code. The toolbar issues this notification to retrieve information
            about each button as it is restored.
            </para>
            <para>
            Version 5.80 includes a new save/restore option. At the beginning of the process, and as each button is saved or restored,
            your application will receive a TBN_SAVE or TBN_RESTORE notification. To use this option, you must implement notification
            handlers to provide the Shell with the bitmap and state information it needs to successfully save or restore the toolbar state.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_CUSTOMIZE">
            <summary>
            Displays the <c>Customize Toolbar</c> dialog box.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>No return value.</para>
            </summary>
            <remarks>
            <para>Note</para>
            <para>
            The toolbar must handle the TBN_QUERYINSERT and TBN_QUERYDELETE notifications for the <c>Customize Toolbar</c> dialog box to
            appear. If the toolbar does not handle those notifications, <c>TB_CUSTOMIZE</c> has no effect.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_ADDSTRINGA">
            <summary>
            Adds a new string to the toolbar's string pool.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>
            Handle to the module instance with an executable file that contains the string resource. If lParam instead points to a
            character array with one or more strings, set this parameter to <c>NULL</c>.
            </para>
            <para><em>lParam</em></para>
            <para>Resource identifier for the string resource, or a pointer to a TCHAR array. See Remarks.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the index of the first new string if successful, or -1 otherwise.</para>
            </summary>
            <remarks>
            <para>
            If wParam is <c>NULL</c>, lParam points to a character array with one or more null-terminated strings. The last string in the
            array must be terminated with two null characters.
            </para>
            <para>
            If wParam is the HINSTANCE of the application or of another module containing a string resource, lParam is the resource
            identifier of the string. Each item in the string must begin with an arbitrary separator character, and the string must end
            with two such characters. For example, the text for three buttons might appear in the string table as "/New/Open/Save//". The
            message returns the index of "New" in the toolbar's string pool, and the other items are in consecutive positions.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_ADDSTRINGW">
            <summary>
            Adds a new string to the toolbar's string pool.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>
            Handle to the module instance with an executable file that contains the string resource. If lParam instead points to a
            character array with one or more strings, set this parameter to <c>NULL</c>.
            </para>
            <para><em>lParam</em></para>
            <para>Resource identifier for the string resource, or a pointer to a TCHAR array. See Remarks.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the index of the first new string if successful, or -1 otherwise.</para>
            </summary>
            <remarks>
            <para>
            If wParam is <c>NULL</c>, lParam points to a character array with one or more null-terminated strings. The last string in the
            array must be terminated with two null characters.
            </para>
            <para>
            If wParam is the HINSTANCE of the application or of another module containing a string resource, lParam is the resource
            identifier of the string. Each item in the string must begin with an arbitrary separator character, and the string must end
            with two such characters. For example, the text for three buttons might appear in the string table as "/New/Open/Save//". The
            message returns the index of "New" in the toolbar's string pool, and the other items are in consecutive positions.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_GETITEMRECT">
            <summary>
            Retrieves the bounding rectangle of a button in a toolbar.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Zero-based index of the button for which to retrieve information.</para>
            <para><em>lParam</em></para>
            <para>Pointer to a <c>RECT</c> structure that receives the client coordinates of the bounding rectangle.</para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> if successful, or <c>FALSE</c> otherwise.</para>
            </summary>
            <remarks>
            This message does not retrieve the bounding rectangle for buttons whose state is set to the <c>TBSTATE_HIDDEN</c> value.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_BUTTONSTRUCTSIZE">
            <summary>
            Specifies the size of the <c>TBBUTTON</c> structure.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Size, in bytes, of the <c>TBBUTTON</c> structure.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>No return value.</para>
            </summary>
            <remarks>
            <para>The system uses the size to determine which version of the common control dynamic-link library (DLL) is being used.</para>
            <para>
            If an application uses the <c>CreateWindowEx</c> function to create the toolbar, the application must send this message to
            the toolbar before sending the <c>TB_ADDBITMAP</c> or <c>TB_ADDBUTTONS</c> message. The <c>CreateToolbarEx</c> function
            automatically sends <c>TB_BUTTONSTRUCTSIZE</c>, and the size of the <c>TBBUTTON</c> structure is a parameter of the function.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_SETBUTTONSIZE">
            <summary>
            Sets the size of buttons on a toolbar.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>
            The <c>LOWORD</c> specifies the width, in pixels, of the buttons. The <c>HIWORD</c> specifies the height, in pixels, of the buttons.
            </para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> if successful, or <c>FALSE</c> otherwise.</para>
            </summary>
            <remarks>
            <para><c>TB_SETBUTTONSIZE</c> should generally be called after adding buttons.</para>
            <para>
            Use <c>TB_SETBUTTONWIDTH</c> to set the maximum and minimum allowed widths for buttons before they are added. Use
            <c>TB_SETBUTTONSIZE</c> to set the actual size of buttons.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_SETBITMAPSIZE">
            <summary>
            Sets the size of the bitmapped images to be added to a toolbar.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>
            The <c>LOWORD</c> specifies the width, in pixels, of the bitmapped images. The <c>HIWORD</c> specifies the height, in pixels,
            of the bitmapped images.
            </para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> if successful, or <c>FALSE</c> otherwise.</para>
            </summary>
            <remarks>
            The size can be set only before adding any bitmaps to the toolbar. If an application does not explicitly set the bitmap size,
            the size defaults to 16 by 15 pixels.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_AUTOSIZE">
            <summary>
            Causes a toolbar to be resized.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>No return value.</para>
            </summary>
            <remarks>
            An application sends the <c>TB_AUTOSIZE</c> message after causing the size of a toolbar to change either by setting the
            button or bitmap size or by adding strings for the first time.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_GETTOOLTIPS">
            <summary>
            Retrieves the handle to the tooltip control, if any, associated with the toolbar.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the handle to the tooltip control, or <c>NULL</c> if the toolbar has no associated tooltip.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_SETTOOLTIPS">
            <summary>
            Associates a tooltip control with a toolbar.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Handle to the tooltip control.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>No return value.</para>
            </summary>
            <remarks>
            Any buttons added to a toolbar before sending the <c>TB_SETTOOLTIPS</c> message will not be registered with the tooltip control.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_SETPARENT">
            <summary>
            Sets the window to which the toolbar control sends notification messages.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Handle to the window to receive notification messages.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>
            The return value is a handle to the previous notification window, or <c>NULL</c> if there is no previous notification window.
            </para>
            </summary>
            <remarks>
            The <c>TB_SETPARENT</c> message does not change the parent window that was specified when the control was created. Calling
            the <c>GetParent</c> function for a toolbar control will return the actual parent window, not the window specified in
            <c>TB_SETPARENT</c>. To change the control's parent window, call the <c>SetParent</c> function.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_SETROWS">
            <summary>
            Sets the number of rows of buttons in a toolbar.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>
            The <c>LOWORD</c> specifies the number of rows requested. The minimum number of rows is one, and the maximum number of rows
            is equal to the number of buttons in the toolbar.
            </para>
            <para>
            The <c>HIWORD</c> is a <c>BOOL</c> that indicates whether to create more rows than requested when the system cannot create
            the number of rows specified by wParam. If <c>TRUE</c>, the system creates more rows. If <c>FALSE</c>, the system creates
            fewer rows.
            </para>
            <para><em>lParam</em></para>
            <para>Pointer to a <c>RECT</c> structure that receives the bounding rectangle of the toolbar after the rows are set.</para>
            <para><strong>Returns</strong></para>
            <para>No return value.</para>
            </summary>
            <remarks>
            Because the system does not break up button groups when setting the number of rows, the resulting number of rows might differ
            from the number requested.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_GETROWS">
            <summary>
            Retrieves the number of rows of buttons in a toolbar with the <c>TBSTYLE_WRAPABLE</c> style.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the number of rows.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_GETBITMAPFLAGS">
            <summary>
            Retrieves the flags that describe the type of bitmap to be used.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>
            Returns a <c>DWORD</c> value that describes the type of bitmap that should be used. If this return value has the TBBF_LARGE
            flag set, applications should use large bitmaps (24 x 24); otherwise, applications should use small bitmaps (16 x 16). All
            other bits are reserved.
            </para>
            </summary>
            <remarks>
            The value returned by <c>TB_GETBITMAPFLAGS</c> is only advisory. The toolbar control recommends large or small bitmaps based
            upon whether the user has chosen large or small fonts.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_SETCMDID">
            <summary>
            Sets the command identifier of a toolbar button.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Zero-based index of the button whose command identifier is to be set.</para>
            <para><em>lParam</em></para>
            <para>Command identifier.</para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> if successful, or <c>FALSE</c> otherwise.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_CHANGEBITMAP">
            <summary>
            Changes the bitmap for a button in a toolbar.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Command identifier of the button that is to receive a new bitmap.</para>
            <para><em>lParam</em></para>
            <para>
            Zero-based index of an image in the toolbar's image list. The system displays the specified image in the button. Set this
            parameter to I_IMAGECALLBACK, and the toolbar will send the <c>TBN_GETDISPINFO</c> notification to retrieve the image index
            when it is needed.
            </para>
            <para>
            Version 5.81. Set this parameter to I_IMAGENONE to indicate that the button does not have an image. The button layout will
            not include any space for a bitmap, only text.
            </para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> if successful, or <c>FALSE</c> otherwise.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_GETBITMAP">
            <summary>
            Retrieves the index of the bitmap associated with a button in a toolbar.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Command identifier of the button whose bitmap index is to be retrieved.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the index of the bitmap if successful, or zero otherwise.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_GETBUTTONTEXTA">
            <summary>
            Retrieves the display text of a button on a toolbar.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Command identifier of the button whose text is to be retrieved.</para>
            <para><em>lParam</em></para>
            <para>Pointer to a buffer that receives the button text.</para>
            <para><strong>Returns</strong></para>
            <para>
            Returns the length, in characters, of the string pointed to by lParam. The length does not include the terminating null
            character. If unsuccessful, the return value is -1.
            </para>
            </summary>
            <remarks>
            <para>
            <c>Security Warning:</c> Using this message incorrectly might compromise the security of your program. This message does not
            provide a way for you to know the size of the buffer. If you use this message, first call the message passing <c>NULL</c> in
            the lParam, this returns the number of characters, excluding <c>NULL</c> that are required. Then call the message a second
            time to retrieve the string. You should review the Security Considerations: Microsoft Windows Controls before continuing.
            </para>
            <para>The returned string corresponds to the text that is currently displayed by the button.</para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_GETBUTTONTEXTW">
            <summary>
            Retrieves the display text of a button on a toolbar.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Command identifier of the button whose text is to be retrieved.</para>
            <para><em>lParam</em></para>
            <para>Pointer to a buffer that receives the button text.</para>
            <para><strong>Returns</strong></para>
            <para>
            Returns the length, in characters, of the string pointed to by lParam. The length does not include the terminating null
            character. If unsuccessful, the return value is -1.
            </para>
            </summary>
            <remarks>
            <para>
            <c>Security Warning:</c> Using this message incorrectly might compromise the security of your program. This message does not
            provide a way for you to know the size of the buffer. If you use this message, first call the message passing <c>NULL</c> in
            the lParam, this returns the number of characters, excluding <c>NULL</c> that are required. Then call the message a second
            time to retrieve the string. You should review the Security Considerations: Microsoft Windows Controls before continuing.
            </para>
            <para>The returned string corresponds to the text that is currently displayed by the button.</para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_REPLACEBITMAP">
            <summary>
            Replaces an existing bitmap with a new bitmap.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>
            Pointer to a <c>TBREPLACEBITMAP</c> structure that contains the information of the bitmap to be replaced and the new bitmap.
            </para>
            <para><strong>Returns</strong></para>
            <para>Returns nonzero if successful, or zero otherwise.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_SETINDENT">
            <summary>
            Sets the indentation for the first button in a toolbar control.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Value specifying the indentation, in pixels.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns nonzero if successful, or zero otherwise.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_SETIMAGELIST">
            <summary>
            Sets the image list that the toolbar uses to display buttons that are in their default state.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>
            Version 5.80. The index of the list. If you use only one image list, or an earlier version of the common controls, set wParam
            to zero. See Remarks for details on using multiple image lists.
            </para>
            <para><em>lParam</em></para>
            <para>Handle to the image list to set. If this parameter is <c>NULL</c>, no images are displayed in the buttons.</para>
            <para><strong>Returns</strong></para>
            <para>
            Returns the handle to the image list previously used to display buttons in their default state, or <c>NULL</c> if no image
            list was previously set.
            </para>
            </summary>
            <remarks>
            <para>
            <para>Note</para>
            <para>Your application is responsible for freeing the image list after the toolbar is destroyed.</para>
            </para>
            <para>
            The <c>TB_SETIMAGELIST</c> message cannot be combined with <c>TB_ADDBITMAP</c>. It also cannot be used with toolbars created
            with <c>CreateToolbarEx</c>, which calls <c>TB_ADDBITMAP</c> internally. When you create a toolbar with
            <c>CreateToolbarEx</c> or use <c>TB_ADDBITMAP</c> to add images, the toolbar manages the image list internally. Attempting to
            modify it with <c>TB_SETIMAGELIST</c> has unpredictable consequences.
            </para>
            <para>
            With version 5.80 or later of the common controls, button images need not come from the same image list. To use multiple
            image lists for your toolbar button images:
            </para>
            <list type="number">
            <item>
            <term>
            Enable multiple image lists by sending the toolbar control a <c>CCM_SETVERSION</c> message with wParam (the version number)
            set to 5.
            </term>
            </item>
            <item>
            <term>
            For each image list you want to use, send the toolbar control a <c>TB_SETIMAGELIST</c> message. Set wParam to an
            application-defined wParam value that will be used to identify the list. Set lParam to the list's HIMAGELIST handle.
            </term>
            </item>
            <item>
            <term>
            For each button, set the <c>iBitmap</c> member of the button's <c>TBBUTTON</c> structure to MAKELONG(iIndex, iImageID). The
            iImageID value is the ID of the appropriate image list that was defined in step two. The iIndex value is the index of the
            particular image within that list.
            </term>
            </item>
            <item>
            <term>Add the buttons by sending the toolbar control a <c>TB_ADDBUTTONS</c> message.</term>
            </item>
            </list>
            <para>
            The following code fragment illustrates how to add five buttons to a toolbar, with images from three different image lists.
            Support for multiple image lists is enabled with a <c>CCM_SETVERSION</c> message. The image lists are then set and assigned
            IDs of 0-2. The buttons are assigned images from the image lists as follows:
            </para>
            <list type="bullet">
            <item>
            <term>Button 0 is from image list zero (ahim[0]) with index of 1.</term>
            </item>
            <item>
            <term>Button 1 is from image list one (ahim[1]) with an index of 1.</term>
            </item>
            <item>
            <term>Button 2 is from image list two (ahim[2]) with an index of 1.</term>
            </item>
            <item>
            <term>Button 3 is from image list zero (ahim[0]) with an index of 2.</term>
            </item>
            <item>
            <term>Button 4 is from image list one (ahim[1]) with an index of 3.</term>
            </item>
            </list>
            <para>Finally, the buttons are added to the toolbar control with a <c>TB_ADDBUTTONS</c> message.</para>
            <para>
            <code>//Enable multiple image lists SendMessage(hwndTB, CCM_SETVERSION, (WPARAM) 5, 0); //Set the image lists and assign them IDs of 0-2 SendMessage(hwndTB, TB_SETIMAGELIST, 0, (LPARAM)ahiml[0]); SendMessage(hwndTB, TB_SETIMAGELIST, 1, (LPARAM)ahiml[1]); SendMessage(hwndTB, TB_SETIMAGELIST, 2, (LPARAM)ahiml[2]); // Create the five buttons TBBUTTON rgtb[5]; //... initialize the TBBUTTON structures as usual ... //Assign images to each button rgtb[0].iBitmap = MAKELONG(1, 0); rgtb[1].iBitmap = MAKELONG(1, 1); rgtb[2].iBitmap = MAKELONG(1, 2); rgtb[3].iBitmap = MAKELONG(2, 0); rgtb[4].iBitmap = MAKELONG(3, 1); // Add the five buttons to the toolbar control SendMessage(hwndTB, TB_ADDBUTTONS, 5, (LPARAM)(&amp;rgtb);</code>
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_GETIMAGELIST">
            <summary>
            Retrieves the image list that a toolbar control uses to display buttons in their default state. A toolbar control uses this
            image list to display buttons when they are not hot or disabled.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the handle to the image list, or <c>NULL</c> if no image list is set.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_LOADIMAGES">
            <summary>
            Loads system-defined button images into a toolbar control's image list.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Identifier of a system-defined button image list. This parameter can be set to one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term><c>IDB_HIST_LARGE_COLOR</c></term>
            <term>Windows Explorer bitmaps in large size.</term>
            </item>
            <item>
            <term><c>IDB_HIST_SMALL_COLOR</c></term>
            <term>Windows Explorer bitmaps in small size.</term>
            </item>
            <item>
            <term><c>IDB_STD_LARGE_COLOR</c></term>
            <term>Standard bitmaps in large size.</term>
            </item>
            <item>
            <term><c>IDB_STD_SMALL_COLOR</c></term>
            <term>Standard bitmaps in small size.</term>
            </item>
            <item>
            <term><c>IDB_VIEW_LARGE_COLOR</c></term>
            <term>View bitmaps in large size.</term>
            </item>
            <item>
            <term><c>IDB_VIEW_SMALL_COLOR</c></term>
            <term>View bitmaps in small size.</term>
            </item>
            <item>
            <term><c>IDB_HIST_NORMAL</c></term>
            <term>Windows Explorer travel buttons and favorites bitmaps in normal state.</term>
            </item>
            <item>
            <term><c>IDB_HIST_HOT</c></term>
            <term>Windows Explorer travel buttons and favorites bitmaps in hot state.</term>
            </item>
            <item>
            <term><c>IDB_HIST_DISABLED</c></term>
            <term>Windows Explorer travel buttons and favorites bitmaps in disabled state.</term>
            </item>
            <item>
            <term><c>IDB_HIST_PRESSED</c></term>
            <term>Windows Explorer travel buttons and favorites bitmaps in pressed state.</term>
            </item>
            </list>
            <para><em>lParam</em></para>
            <para>Instance handle. This parameter must be set to HINST_COMMCTRL.</para>
            <para><strong>Returns</strong></para>
            <para>
            The count of images in the image list. Returns zero if the toolbar has no image list or if the existing image list is empty.
            </para>
            </summary>
            <remarks>
            You must use the proper image index values when you prepare <c>TBBUTTON</c> structures prior to sending the
            <c>TB_ADDBUTTONS</c> message. For a list of image index values for these preset bitmaps, see Toolbar Standard Button Image
            Index Values.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_GETRECT">
            <summary>
            Retrieves the bounding rectangle for a specified toolbar button.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Command identifier of the button.</para>
            <para><em>lParam</em></para>
            <para>Pointer to a <c>RECT</c> structure that will receive the bounding rectangle information.</para>
            <para><strong>Returns</strong></para>
            <para>Returns nonzero if successful, or zero otherwise.</para>
            </summary>
            <remarks>
            This message does not retrieve the bounding rectangle for buttons whose state is set to the <c>TBSTATE_HIDDEN</c> value.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_SETHOTIMAGELIST">
            <summary>
            Sets the image list that the toolbar control will use to display hot buttons.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Handle to the image list that will be set.</para>
            <para><strong>Returns</strong></para>
            <para>
            Returns the handle to the image list previously used to display hot buttons, or <c>NULL</c> if no image list was previously set.
            </para>
            </summary>
            <remarks>
            A button is hot when the cursor is over it. Toolbar controls must have the <c>TBSTYLE_FLAT</c> or <c>TBSTYLE_LIST</c> style
            to have hot items.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_GETHOTIMAGELIST">
            <summary>
            Retrieves the image list that a toolbar control uses to display hot buttons.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>
            Returns the handle to the image list that the control uses to display hot buttons, or <c>NULL</c> if no hot image list is set.
            </para>
            </summary>
            <remarks>
            A button is hot when the cursor is over it. Toolbar controls must have the <c>TBSTYLE_FLAT</c> or <c>TBSTYLE_LIST</c> style
            to have hot items.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_SETDISABLEDIMAGELIST">
            <summary>
            Sets the image list that the toolbar control will use to display disabled buttons.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Handle to the image list that will be set.</para>
            <para><strong>Returns</strong></para>
            <para>
            Returns the handle to the image list previously used to display disabled buttons, or <c>NULL</c> if no image list was
            previously set.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_GETDISABLEDIMAGELIST">
            <summary>
            Retrieves the image list that a toolbar control uses to display inactive buttons.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the handle to the inactive image list, or <c>NULL</c> if no inactive image list is set.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_SETSTYLE">
            <summary>
            Sets the style for a toolbar control.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Value specifying the styles to be set for the control. This value can be a combination of toolbar control styles.</para>
            <para><strong>Returns</strong></para>
            <para>No return value.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_GETSTYLE">
            <summary>
            Retrieves the styles currently in use for a toolbar control.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns a <c>DWORD</c> value that is a combination of toolbar control styles.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_GETBUTTONSIZE">
            <summary>
            Retrieves the current width and height of toolbar buttons, in pixels.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns a <c>DWORD</c> value that contains the width and height values in the low word and high word, respectively.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_SETBUTTONWIDTH">
            <summary>
            Sets the minimum and maximum button widths in the toolbar control.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>The <c>LOWORD</c> specifies the minimum button width, in pixels. Toolbar buttons will never be narrower than this value.</para>
            <para>
            The <c>HIWORD</c> specifies the maximum button width, in pixels. If button text is too wide, the control displays it with
            ellipsis points.
            </para>
            <para><strong>Returns</strong></para>
            <para>Returns nonzero if successful, or zero otherwise.</para>
            </summary>
            <remarks>
            Use <c>TB_SETBUTTONWIDTH</c> to set the maximum and minimum allowed widths for buttons before they are added. Use
            <c>TB_SETBUTTONSIZE</c> to set the actual size of buttons.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_SETMAXTEXTROWS">
            <summary>
            Sets the maximum number of text rows displayed on a toolbar button.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Maximum number of rows of text that can be displayed.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns nonzero if successful, or zero otherwise.</para>
            </summary>
            <remarks>
            To cause text to wrap, you must set the maximum button width by sending a <c>TB_SETBUTTONWIDTH</c> message. The text wraps at
            a word break; line breaks ("\n") in the text are ignored. Text in TBSTYLE_LIST toolbars is always shown on a single line.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_GETTEXTROWS">
            <summary>
            Retrieves the maximum number of text rows that can be displayed on a toolbar button.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns an INT value representing the maximum number of text rows that the control will display for a button.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_GETOBJECT">
            <summary>
            Retrieves the <c>IDropTarget</c> for a toolbar control.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Identifier of the interface being requested. This value must point to <c>IID_IDropTarget</c>.</para>
            <para><em>lParam</em></para>
            <para>Address that receives the interface pointer. If an error occurs, a <c>NULL</c> pointer is placed in this address.</para>
            <para><strong>Returns</strong></para>
            <para>Returns an <c>HRESULT</c> value indicating success or failure of the operation.</para>
            </summary>
            <remarks>The toolbar's <c>IDropTarget</c> is used by the toolbar when objects are dragged over or dropped onto it.</remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_GETBUTTONINFOW">
            <summary>
            Retrieves extended information for a button in a toolbar.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Command identifier of the button.</para>
            <para><em>lParam</em></para>
            <para>
            Pointer to a <c>TBBUTTONINFO</c> structure that receives the button information. The <c>cbSize</c> and <c>dwMask</c> members
            of this structure must be filled in prior to sending this message.
            </para>
            <para><strong>Returns</strong></para>
            <para>Returns the zero-based index of the button, or -1 if an error occurs.</para>
            </summary>
            <remarks>
            When you use <c>TB_ADDBUTTONS</c> or <c>TB_INSERTBUTTON</c> to place buttons on the toolbar, the button text is commonly
            specified by its string pool index. <c>TB_GETBUTTONINFO</c> will not retrieve this string. To use <c>TB_GETBUTTONINFO</c> to
            retrieve button text, you must first set the text string with <c>TB_SETBUTTONINFO</c>. Once you have set the button text with
            <c>TB_SETBUTTONINFO</c>, you can no longer use the string pool index.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_SETBUTTONINFOW">
            <summary>
            Sets the information for an existing button in a toolbar.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Button identifier.</para>
            <para><em>lParam</em></para>
            <para>
            Pointer to a <c>TBBUTTONINFO</c> structure that contains the new button information. The <c>cbSize</c> and <c>dwMask</c>
            members of this structure must be filled in prior to sending this message.
            </para>
            <para><strong>Returns</strong></para>
            <para>Returns nonzero if successful, or zero otherwise.</para>
            </summary>
            <remarks>
            Text is commonly assigned to buttons when they are added to a toolbar by specifying the index of a string in the toolbar's
            string pool. If you use a <c>TB_SETBUTTONINFO</c> to assign new text to a button, it will permanently override the text from
            the string pool. You can change the text by calling <c>TB_SETBUTTONINFO</c> again, but you cannot reassign the string from
            the string pool.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_GETBUTTONINFOA">
            <summary>
            Retrieves extended information for a button in a toolbar.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Command identifier of the button.</para>
            <para><em>lParam</em></para>
            <para>
            Pointer to a <c>TBBUTTONINFO</c> structure that receives the button information. The <c>cbSize</c> and <c>dwMask</c> members
            of this structure must be filled in prior to sending this message.
            </para>
            <para><strong>Returns</strong></para>
            <para>Returns the zero-based index of the button, or -1 if an error occurs.</para>
            </summary>
            <remarks>
            When you use <c>TB_ADDBUTTONS</c> or <c>TB_INSERTBUTTON</c> to place buttons on the toolbar, the button text is commonly
            specified by its string pool index. <c>TB_GETBUTTONINFO</c> will not retrieve this string. To use <c>TB_GETBUTTONINFO</c> to
            retrieve button text, you must first set the text string with <c>TB_SETBUTTONINFO</c>. Once you have set the button text with
            <c>TB_SETBUTTONINFO</c>, you can no longer use the string pool index.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_SETBUTTONINFOA">
            <summary>
            Sets the information for an existing button in a toolbar.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Button identifier.</para>
            <para><em>lParam</em></para>
            <para>
            Pointer to a <c>TBBUTTONINFO</c> structure that contains the new button information. The <c>cbSize</c> and <c>dwMask</c>
            members of this structure must be filled in prior to sending this message.
            </para>
            <para><strong>Returns</strong></para>
            <para>Returns nonzero if successful, or zero otherwise.</para>
            </summary>
            <remarks>
            Text is commonly assigned to buttons when they are added to a toolbar by specifying the index of a string in the toolbar's
            string pool. If you use a <c>TB_SETBUTTONINFO</c> to assign new text to a button, it will permanently override the text from
            the string pool. You can change the text by calling <c>TB_SETBUTTONINFO</c> again, but you cannot reassign the string from
            the string pool.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_INSERTBUTTONW">
            <summary>
            Inserts a button in a toolbar.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Zero-based index of a button. The message inserts the new button to the left of this button.</para>
            <para><em>lParam</em></para>
            <para>Pointer to a <c>TBBUTTON</c> structure containing information about the button to insert.</para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> if successful, or <c>FALSE</c> otherwise.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_ADDBUTTONSW">
            <summary>
            Adds one or more buttons to a toolbar.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Number of buttons to add.</para>
            <para><em>lParam</em></para>
            <para>
            Pointer to an array of <c>TBBUTTON</c> structures that contain information about the buttons to add. There must be the same
            number of elements in the array as buttons specified by wParam.
            </para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> if successful, or <c>FALSE</c> otherwise.</para>
            </summary>
            <remarks>
            <para>
            If the toolbar was created using the <c>CreateWindowEx</c> function, you must send the <c>TB_BUTTONSTRUCTSIZE</c> message to
            the toolbar before sending <c>TB_ADDBUTTONS</c>.
            </para>
            <para>See <c>TB_SETIMAGELIST</c> for a discussion of how to assign bitmaps to toolbar buttons from one or more image lists.</para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_HITTEST">
            <summary>
            Determines where a point lies in a toolbar control.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>
            Pointer to a <c>POINT</c> structure that contains the x-coordinate of the hit test in the <c>x</c> member and the
            y-coordinate of the hit test in the <c>y</c> member. The coordinates are relative to the toolbar's client area.
            </para>
            <para><strong>Returns</strong></para>
            <para>
            Returns an integer value. If the return value is zero or a positive value, it is the zero-based index of the nonseparator
            item in which the point lies. If the return value is negative, the point does not lie within a button. The absolute value of
            the return value is the index of a separator item or the nearest nonseparator item.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_SETDRAWTEXTFLAGS">
            <summary>
            Sets the text drawing flags for the toolbar.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>
            One or more of the DT_ flags, specified in <c>DrawText</c>, that indicate which bits in lParam will be used when drawing the text.
            </para>
            <para><em>lParam</em></para>
            <para>
            One or more of the DT_ flags, specified in <c>DrawText</c>, that indicate how the button text will be drawn. This value will
            be passed to the <c>DrawText</c> function when the button text is drawn.
            </para>
            <para><strong>Returns</strong></para>
            <para>Returns the previous text drawing flags.</para>
            </summary>
            <remarks>
            The wParam parameter allows you to specify which flags will be used when drawing the text, even if these flags are turned
            off. For example, if you do not want the DT_CENTER flag used when drawing text, you would add the DT_CENTER flag to wParam
            and not specify the DT_CENTER flag in lParam. This prevents the control from passing the DT_CENTER flag to the
            <c>DrawText</c> function.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_GETHOTITEM">
            <summary>
            Retrieves the index of the hot item in a toolbar.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>
            Returns the index of the hot item, or -1 if no hot item is set. Toolbar controls that do not have the <c>TBSTYLE_FLAT</c>
            style do not have hot items.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_SETHOTITEM">
            <summary>
            Sets the hot item in a toolbar.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Index of the item that will be made hot. If this value is -1, none of the items will be hot.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the index of the previous hot item, or -1 if there was no hot item.</para>
            </summary>
            <remarks>The behavior of this message is not defined for toolbars that do not have the <c>TBSTYLE_FLAT</c> style.</remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_SETANCHORHIGHLIGHT">
            <summary>
            Sets the anchor highlight setting for a toolbar.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>
            <c>BOOL</c> value that specifies if anchor highlighting is enabled or disabled. If this value is nonzero, anchor highlighting
            will be enabled. If this value is zero, anchor highlighting will be disabled.
            </para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>
            Returns the previous anchor highlight setting. If this value is nonzero, anchor highlighting was enabled. If this value is
            zero, anchor highlighting was disabled.
            </para>
            </summary>
            <remarks>
            Anchor highlighting in a toolbar means that the last highlighted item will remain highlighted until another item is
            highlighted. This occurs even if the cursor leaves the toolbar control.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_GETANCHORHIGHLIGHT">
            <summary>
            Retrieves the anchor highlight setting for a toolbar.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>
            Returns a Boolean value that indicates if anchor highlighting is set. If this value is nonzero, anchor highlighting is
            enabled. If this value is zero, it is disabled.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_MAPACCELERATORA">
            <summary>
            Determines the ID of the button that corresponds to the specified accelerator character.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>The accelerator character.</para>
            <para><em>lParam</em></para>
            <para>
            Pointer to a <c>UINT</c>. On return, if successful, this parameter will hold the id of the button that has wParam as its
            accelerator character.
            </para>
            <para><strong>Returns</strong></para>
            <para>Returns a nonzero value if one of the buttons has wParam as its accelerator character, or zero otherwise.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_GETINSERTMARK">
            <summary>
            Retrieves the current insertion mark for the toolbar.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Pointer to a <c>TBINSERTMARK</c> structure that receives the insertion mark.</para>
            <para><strong>Returns</strong></para>
            <para>Always returns <c>TRUE</c>.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_SETINSERTMARK">
            <summary>
            Sets the current insertion mark for the toolbar.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Pointer to a <c>TBINSERTMARK</c> structure that contains the insertion mark.</para>
            <para><strong>Returns</strong></para>
            <para>The return value for this message is not used.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_INSERTMARKHITTEST">
            <summary>
            Retrieves the insertion mark information for a point in a toolbar.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Pointer to a <c>POINT</c> structure that contains the hit test coordinates, relative to the client area of the toolbar.</para>
            <para><em>lParam</em></para>
            <para>Pointer to a <c>TBINSERTMARK</c> structure that receives the insertion mark information.</para>
            <para><strong>Returns</strong></para>
            <para>Returns nonzero if the point is an insertion mark, or zero otherwise.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_MOVEBUTTON">
            <summary>
            Moves a button from one index to another.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Zero-based index of the button to be moved.</para>
            <para><em>lParam</em></para>
            <para>Zero-based index where the button will be moved.</para>
            <para><strong>Returns</strong></para>
            <para>Returns nonzero if successful, or zero otherwise.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_GETMAXSIZE">
            <summary>
            Retrieves the total size of all of the visible buttons and separators in the toolbar.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Pointer to a <c>SIZE</c> structure that receives the size of the items.</para>
            <para><strong>Returns</strong></para>
            <para>Returns nonzero if successful, or zero otherwise.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_SETEXTENDEDSTYLE">
            <summary>
            Sets the extended styles for a toolbar control.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Value specifying the new extended styles. This parameter can be a combination of extended styles.</para>
            <para><strong>Returns</strong></para>
            <para>Returns a <c>DWORD</c> that represents the previous extended styles. This value can be a combination of extended styles.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_GETEXTENDEDSTYLE">
            <summary>
            Retrieves the extended styles for a toolbar control.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>
            Returns a <c>DWORD</c> that represents the styles currently in use for the toolbar control. This value can be a combination
            of extended styles.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_GETPADDING">
            <summary>
            Retrieves the padding for a toolbar control.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>
            Returns a <c>DWORD</c> value that contains the horizontal padding in the low word and the vertical padding in the high word,
            in pixels.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_SETPADDING">
            <summary>
            Sets the padding for a toolbar control.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>
            The <c>LOWORD</c> specifies the horizontal padding, in pixels. The <c>HIWORD</c> specifies the vertical padding, in pixels.
            </para>
            <para><strong>Returns</strong></para>
            <para>
            Returns a <c>DWORD</c> value that contains the previous horizontal padding in the <c>LOWORD</c> and the previous vertical
            padding in the <c>HIWORD</c>, in pixels.
            </para>
            </summary>
            <remarks>
            The padding values are used to create a blank area between the edge of the button and the button's image and/or text. Where
            and how much padding is actually applied depends on the type of the button and whether it has an image. The horizontal
            padding is applied to both the right and left of the button, and the vertical padding is applied to both the top and bottom
            of the button. Padding is only applied to buttons that have the <c>TBSTYLE_AUTOSIZE</c> style.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_SETINSERTMARKCOLOR">
            <summary>
            Sets the color used to draw the insertion mark for the toolbar.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para><c>COLORREF</c> value that contains the new insertion mark color.</para>
            <para><strong>Returns</strong></para>
            <para>Returns a <c>COLORREF</c> value that contains the previous insertion mark color.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_GETINSERTMARKCOLOR">
            <summary>
            Retrieves the color used to draw the insertion mark for the toolbar.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns a <c>COLORREF</c> value that contains the current insertion mark color.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_MAPACCELERATORW">
            <summary>
            Determines the ID of the button that corresponds to the specified accelerator character.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>The accelerator character.</para>
            <para><em>lParam</em></para>
            <para>
            Pointer to a <c>UINT</c>. On return, if successful, this parameter will hold the id of the button that has wParam as its
            accelerator character.
            </para>
            <para><strong>Returns</strong></para>
            <para>Returns a nonzero value if one of the buttons has wParam as its accelerator character, or zero otherwise.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_GETSTRINGW">
            <summary>
            Retrieves a string from a toolbar's string pool.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>
            The <c>LOWORD</c> specifies the length of the lParam buffer, in bytes. The <c>HIWORD</c> specifies the index of the string.
            </para>
            <para><em>lParam</em></para>
            <para>Pointer to a buffer used to return the string.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the string length if successful, or -1 otherwise.</para>
            </summary>
            <remarks>
            This message returns the specified string from the toolbar's string pool. It does not necessarily correspond to the text
            string currently being displayed by a button. To retrieve a button's current text string, send the toolbar a
            <c>TB_GETBUTTONTEXT</c> message.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_GETSTRINGA">
            <summary>
            Retrieves a string from a toolbar's string pool.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>
            The <c>LOWORD</c> specifies the length of the lParam buffer, in bytes. The <c>HIWORD</c> specifies the index of the string.
            </para>
            <para><em>lParam</em></para>
            <para>Pointer to a buffer used to return the string.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the string length if successful, or -1 otherwise.</para>
            </summary>
            <remarks>
            This message returns the specified string from the toolbar's string pool. It does not necessarily correspond to the text
            string currently being displayed by a button. To retrieve a button's current text string, send the toolbar a
            <c>TB_GETBUTTONTEXT</c> message.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_SETBOUNDINGSIZE">
            <summary>
            <para>
            [Intended for internal use; not recommended for use in applications. This message may not be supported in future versions of Windows.]
            </para>
            <para>Sets the bounding size for a multi-column toolbar control.</para>
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>
            Pointer to a <c>SIZE</c> structure whose <c>cy</c> member contains the bounding height. The <c>cx</c> member (the width) is ignored.
            </para>
            <para><strong>Returns</strong></para>
            <para>The return value is not used.</para>
            </summary>
            <remarks>
            The bounding size controls how buttons are organized into columns. If the toolbar control does not have the
            <c>TBSTYLE_EX_MULTICOLUMN</c> style, this message has no effect.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_SETHOTITEM2">
            <summary>
            Sets the hot item in a toolbar.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Index of the item that will be made hot. If this value is -1, none of the items will be hot.</para>
            <para><em>lParam</em></para>
            <para>A combination of HICF\_xxx flags. See</para>
            <para>**NMTBHOTITEM**</para>
            <para>.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the index of the previous hot item, or -1 if there was no hot item.</para>
            </summary>
            <remarks>The behavior of this message is not defined for toolbars that do not have the <c>TBSTYLE_FLAT</c> style.</remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_HASACCELERATOR">
            <summary>
            <para>
            [Intended for internal use; not recommended for use in applications. This message may not be supported in future versions of Windows.]
            </para>
            <para>Retrieves a count of toolbar buttons that have the specified accelerator character.</para>
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>A <c>WCHAR</c> representing the input accelerator character to test.</para>
            <para><em>lParam</em></para>
            <para>Pointer to an <c>int</c> that receives the number of buttons that have the accelerator character.</para>
            <para><strong>Returns</strong></para>
            <para>The return value is not used.</para>
            </summary>
            <remarks>
            First, the system queries all toolbar buttons for matching accelerators. If no matches are found, the system sends the
            TBN_MAPACCELERATOR notification to the parent window, requesting the index of the button that has the specified accelerator
            character. If the parent provides an index, the count is set to 1.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_SETLISTGAP">
            <summary>
            Sets the distance between the toolbar buttons on a specific toolbar.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>The gap, in pixels, between buttons on the toolbar.</para>
            <para><em>lParam</em></para>
            <para>Ignored.</para>
            <para><strong>Returns</strong></para>
            <para>No return value.</para>
            </summary>
            <remarks>
            The gap between buttons only applies to the toolbar control window that receives this message. Receipt of this message
            triggers a repaint of the toolbar, if the toolbar is currently visible.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_GETIMAGELISTCOUNT">
            <summary>
            Gets the number of image lists associated with the toolbar.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the number of image lists.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_GETIDEALSIZE">
            <summary>
            Gets the ideal size of the toolbar.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>
            A **BOOL** that indicates whether to retrieve the ideal height or width of the toolbar. Use **TRUE** to retrieve the ideal
            height, **FALSE** to retrieve the ideal width.
            </para>
            <para><em>lParam</em></para>
            <para>
            Pointer to a <c>SIZE</c> structure that receives the height or width at which all buttons would be displayed. If wParam is
            <c>TRUE</c>, only the <c>cy</c> member (height) is valid. If wParam is <c>FALSE</c>, only the <c>cx</c> member (width) is valid.
            </para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> if successful, or <c>FALSE</c> otherwise.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_GETMETRICS">
            <summary>
            Retrieves the metrics of a toolbar control.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Pointer to a <c>TBMETRICS</c> structure that receives the toolbar metrics.</para>
            <para><strong>Returns</strong></para>
            <para>The return value is not used.</para>
            </summary>
            <remarks>
            <para>Note</para>
            <para>
            To use this message, you must provide a manifest specifying Comclt32.dll version 6.0. For more information on manifests, see
            Enabling Visual Styles.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_SETMETRICS">
            <summary>
            Sets the metrics of a toolbar control.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para><c>TBMETRICS</c> structure that contains the toolbar metrics to set.</para>
            <para><strong>Returns</strong></para>
            <para>The return value is not used.</para>
            </summary>
            <remarks>
            <para>Note</para>
            <para>
            To use this message, you must provide a manifest specifying Comclt32.dll version 6.0. For more information on manifests, see
            Enabling Visual Styles.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_GETITEMDROPDOWNRECT">
            <summary>
            Gets the bounding rectangle of the dropdown window for a toolbar item with style <c>BTNS_DROPDOWN</c>.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>The zero-based index of the toolbar control item for which to retrieve the bounding rectangle.</para>
            <para><em>lParam</em></para>
            <para>A pointer to a</para>
            <para>**RECT**</para>
            <para>
            structure to receive the bounding rectangle information. The message sender is responsible for allocating this structure. The
            coordinates returned in the **RECT** structure are expressed as client coordinates.
            </para>
            <para><strong>Returns</strong></para>
            <para>Always returns nonzero.</para>
            </summary>
            <remarks>The item must have the <c>BTNS_DROPDOWN</c> style.</remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_SETPRESSEDIMAGELIST">
            <summary>
            Sets the image list that the toolbar uses to display buttons that are in a pressed state.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>
            The index of the image list. If you use only one image list, set this parameter to zero. See Remarks for details on using
            multiple image lists.
            </para>
            <para><em>lParam</em></para>
            <para>Handle to the image list to set. If this parameter is <c>NULL</c>, no images are displayed in the buttons.</para>
            <para><strong>Returns</strong></para>
            <para>
            Returns the handle to the image list previously used to display buttons in their pressed state, or <c>NULL</c> if no such
            image list was previously set.
            </para>
            </summary>
            <remarks>
            <para>
            <para>Note</para>
            <para>Your application is responsible for freeing the image list after the toolbar is destroyed.</para>
            </para>
            <para>
            The <c>TB_SETPRESSEDIMAGELIST</c> message cannot be combined with <c>TB_ADDBITMAP</c>. It also cannot be used with toolbars
            created with <c>CreateToolbarEx</c>, which calls <c>TB_ADDBITMAP</c> internally. When you create a toolbar with
            <c>CreateToolbarEx</c> or use <c>TB_ADDBITMAP</c> to add images, the toolbar manages the image list internally. Attempting to
            modify it with <c>TB_SETPRESSEDIMAGELIST</c> has unpredictable consequences.
            </para>
            <para>Button images need not come from the same image list. To use multiple image lists for your toolbar button images:</para>
            <list type="number">
            <item>
            <term>
            Enable multiple image lists by sending the toolbar control a <c>CCM_SETVERSION</c> message with wParam (the version number)
            set to 5.
            </term>
            </item>
            <item>
            <term>
            For each image list you want to use, send the toolbar control a <c>TB_SETPRESSEDIMAGELIST</c> message. Set wParam to an
            application-defined wParam value that will be used to identify the list. Set lParam to the list's HIMAGELIST handle.
            </term>
            </item>
            <item>
            <term>
            For each button, set the <c>iBitmap</c> member of the button's <c>TBBUTTON</c> structure to MAKELONG(iIndex, iImageID). The
            iImageID value is the ID of the appropriate image list that was defined in step two. The iIndex value is the index of the
            particular image within that list.
            </term>
            </item>
            <item>
            <term>Add the buttons by sending the toolbar control a <c>TB_ADDBUTTONS</c> message.</term>
            </item>
            </list>
            <para>
            The following code fragment illustrates how to add five buttons to a toolbar, with images from three different image lists.
            Support for multiple image lists is enabled with a <c>CCM_SETVERSION</c> message. The image lists are then set and assigned
            IDs of 0-2. The buttons are assigned images from the image lists as follows:
            </para>
            <list type="bullet">
            <item>
            <term>Button 0 is from image list zero (ahim[0]) with index of 1.</term>
            </item>
            <item>
            <term>Button 1 is from image list one (ahim[1]) with an index of 1.</term>
            </item>
            <item>
            <term>Button 2 is from image list two (ahim[2]) with an index of 1.</term>
            </item>
            <item>
            <term>Button 3 is from image list zero (ahim[0]) with an index of 2.</term>
            </item>
            <item>
            <term>Button 4 is from image list one (ahim[1]) with an index of 3.</term>
            </item>
            </list>
            <para>Finally, the buttons are added to the toolbar control with a <c>TB_ADDBUTTONS</c> message.</para>
            <para>
            <code>// Enable multiple image lists SendMessage(hwndTB, CCM_SETVERSION, (WPARAM) 5, 0); //Set the image lists and assign them IDs of 0-2 SendMessage(hwndTB, TB_SETPRESSEDIMAGELIST, 0, (LPARAM)ahiml[0]); SendMessage(hwndTB, TB_SETPRESSEDIMAGELIST, 1, (LPARAM)ahiml[1]); SendMessage(hwndTB, TB_SETPRESSEDIMAGELIST, 2, (LPARAM)ahiml[2]); // Create the five buttons TBBUTTON rgtb[5]; //... initialize the TBBUTTON structures as usual ... //Assign images to each button rgtb[0].iBitmap = MAKELONG(1, 0); rgtb[1].iBitmap = MAKELONG(1, 1); rgtb[2].iBitmap = MAKELONG(1, 2); rgtb[3].iBitmap = MAKELONG(2, 0); rgtb[4].iBitmap = MAKELONG(3, 1); // Add the five buttons to the toolbar control SendMessage(hwndTB, TB_ADDBUTTONS, 5, (LPARAM)(&amp;rgtb);</code>
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarMessage.TB_GETPRESSEDIMAGELIST">
            <summary>
            Gets the image list that a toolbar control uses to display buttons in a pressed state.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the handle to the image list, or <c>NULL</c> if no image list is set.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.ToolbarNotification">
            <summary>Toolbar Control Notifications</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarNotification.TBN_GETBUTTONINFOA">
            <summary>
            <para>
            Retrieves toolbar customization information and notifies the toolbar's parent window of any changes being made to the
            toolbar. This notification code is sent in the form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>TBN_GETBUTTONINFO lpnmtb = (LPNMTOOLBAR) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>
            Pointer to an <c>NMTOOLBAR</c> structure. The <c>iItem</c> member specifies a zero-based index that provides a count of the
            buttons the Customize Toolbar dialog box displays as both available and present on the toolbar. The <c>pszText</c> member
            specifies the address of the current button text, and <c>cchText</c> specifies its length in characters. The application
            should fill the structure with information about the button.
            </para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> if button information was copied to the specified structure, or <c>FALSE</c> otherwise.</para>
            </summary>
            <remarks>
            The toolbar control allocates a buffer, and the receiver (parent window) must copy the text into that buffer. The
            <c>cchText</c> member contains the length of the buffer allocated by the toolbar when TBN_GETBUTTONINFO is sent to the parent window.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarNotification.TBN_BEGINDRAG">
            <summary>
            <para>
            Notifies a toolbar's parent window that the user has begun dragging a button in a toolbar. This notification code is sent in
            the form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>TBN_BEGINDRAG lpnmtb = (LPNMTOOLBAR) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>
            Pointer to an <c>NMTOOLBAR</c> structure. The <c>iItem</c> member contains the command identifier of the button being dragged.
            </para>
            <para><strong>Returns</strong></para>
            <para>No return value.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarNotification.TBN_ENDDRAG">
            <summary>
            <para>
            Notifies the toolbar's parent window that the user has stopped dragging a button in a toolbar. This notification code is sent
            in the form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>TBN_ENDDRAG lpnmtb = (LPNMTOOLBAR) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>
            Pointer to an <c>NMTOOLBAR</c> structure. The <c>iItem</c> member contains the command identifier of the button being dragged.
            </para>
            <para><strong>Returns</strong></para>
            <para>No return value.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarNotification.TBN_BEGINADJUST">
            <summary>
            <para>
            Notifies a toolbar's parent window that the user has begun customizing a toolbar. This notification code is sent in the form
            of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>TBN_BEGINADJUST lpnmhdr = (LPNMHDR) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>Pointer to an <c>NMHDR</c> structure that contains information about the notification code.</para>
            <para><strong>Returns</strong></para>
            <para>No return value.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarNotification.TBN_ENDADJUST">
            <summary>
            <para>
            Notifies a toolbar's parent window that the user has stopped customizing a toolbar. This notification code is sent in the
            form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>TBN_ENDADJUST lpnmhdr = (LPNMHDR) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>Pointer to an <c>NMHDR</c> structure that contains information about the notification code.</para>
            <para><strong>Returns</strong></para>
            <para>No return value.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarNotification.TBN_RESET">
            <summary>
            <para>
            Notifies the toolbar's parent window that the user has reset the content of the Customize Toolbar dialog box. This
            notification code is sent in the form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>TBN_RESET lpnmhdr = (LPNMHDR) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>Pointer to an <c>NMHDR</c> structure that contains information about the notification code.</para>
            <para><strong>Returns</strong></para>
            <para>Return TBNRF_ENDCUSTOMIZE to close the Customize Toolbar dialog box. All other return values are ignored.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarNotification.TBN_QUERYINSERT">
            <summary>
            <para>
            Notifies the toolbar's parent window whether a button may be inserted to the left of the specified button while the user is
            customizing a toolbar. This notification code is sent in the form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>TBN_QUERYINSERT lpnmtb = (LPNMTOOLBAR) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>
            Pointer to an <c>NMTOOLBAR</c> structure. The <c>iItem</c> member contains the zero-based index of the button to be inserted.
            </para>
            <para><strong>Returns</strong></para>
            <para>
            Return <c>TRUE</c> to allow a button to be inserted in front of the given button, or <c>FALSE</c> to prevent the button from
            being inserted.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarNotification.TBN_QUERYDELETE">
            <summary>
            <para>
            Notifies the toolbar's parent window whether a button may be deleted from a toolbar while the user is customizing the
            toolbar. This notification code is sent in the form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>TBN_QUERYDELETE lpnmtb = (LPNMTOOLBAR) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>
            Pointer to an <c>NMTOOLBAR</c> structure. The <c>iItem</c> member contains the zero-based index of the button to be deleted.
            </para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> to allow the button to be deleted, or <c>FALSE</c> to prevent the button from being deleted.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarNotification.TBN_TOOLBARCHANGE">
            <summary>
            <para>
            Notifies the toolbar's parent window that the user has customized a toolbar. This notification code is sent in the form of a
            <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>TBN_TOOLBARCHANGE lpnmhdr = (LPNMHDR) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>Pointer to an <c>NMHDR</c> structure that contains information about the notification code.</para>
            <para><strong>Returns</strong></para>
            <para>No return value.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarNotification.TBN_CUSTHELP">
            <summary>
            <para>
            Notifies a toolbar's parent window that the user has chosen the Help button in the Customize Toolbar dialog box. This
            notification code is sent in the form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>TBN_CUSTHELP lpnmhdr = (LPNMHDR) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>Pointer to an <c>NMHDR</c> structure that contains information about the notification code.</para>
            <para><strong>Returns</strong></para>
            <para>No return value.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarNotification.TBN_DROPDOWN">
            <summary>
            <para>
            Sent by a toolbar control when the user clicks a dropdown button. This notification code is sent in the form of a
            <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>TBN_DROPDOWN lpnmtb = (LPNMTOOLBAR) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>
            Pointer to an <c>NMTOOLBAR</c> structure that contains information about this notification code. For this notification code,
            only the <c>hdr</c> and <c>iItem</c> members of this structure are valid.
            </para>
            <para><strong>Returns</strong></para>
            <para>Returns one of the following values:</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term><c>TBDDRET_DEFAULT</c></term>
            <term>The drop-down was handled.</term>
            </item>
            <item>
            <term><c>TBDDRET_NODEFAULT</c></term>
            <term>The drop-down was not handled.</term>
            </item>
            <item>
            <term><c>TBDDRET_TREATPRESSED</c></term>
            <term>The drop-down was handled, but treat the button like a regular button.</term>
            </item>
            </list>
            </summary>
            <remarks>
            <para>Note</para>
            <para>
            Dropdown buttons can be plain ( <c>BTNS_DROPDOWN</c> style), display an arrow next to the button image (
            <c>BTNS_WHOLEDROPDOWN</c> style), or display an arrow that is separated from the image ( <c>TBSTYLE_EX_DRAWDDARROWS</c>
            style). If a separated arrow is used, TBN_DROPDOWN is sent only if the user clicks the arrow portion of the button. If the
            user clicks the main part of the button, a <c>WM_COMMAND</c> message with button's ID is sent, just as with a standard
            button. For the other two styles of dropdown button, TBN_DROPDOWN is sent when the user clicks any part of the button.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarNotification.TBN_GETOBJECT">
            <summary>
            <para>
            Sent by a toolbar control that uses the <c>TBSTYLE_REGISTERDROP</c> style to request a drop target object when the pointer
            passes over one of its buttons. This notification code is sent in the form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>TBN_GETOBJECT lpnmon = (LPNMOBJECTNOTIFY) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>
            Pointer to an <c>NMOBJECTNOTIFY</c> structure that contains information about the button that the pointer passed over and
            receives data the application provides in response to this notification code.
            </para>
            <para><strong>Returns</strong></para>
            <para>The application processing this notification code must return zero.</para>
            </summary>
            <remarks>
            <para>
            To provide an object, an application must set values in some members of the <c>NMOBJECTNOTIFY</c> structure at lParam. The
            <c>pObject</c> member must be set to a valid object pointer, and the <c>hResult</c> member must be set to a success flag. To
            comply with Component Object Model (COM) standards, always increment the object's reference count when providing an object pointer.
            </para>
            <para>
            If an application does not provide an object, it must set <c>pObject</c> to <c>NULL</c> and <c>hResult</c> to a failure flag.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarNotification.TBN_HOTITEMCHANGE">
            <summary>
            <para>
            Sent by a toolbar control when the hot (highlighted) item changes. This notification code is sent in the form of a
            <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>TBN_HOTITEMCHANGE lpnmhi = (LPNMTBHOTITEM) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>Pointer to an <c>NMTBHOTITEM</c> structure that contains information about this notification code.</para>
            <para><strong>Returns</strong></para>
            <para>Return zero to allow the item to be highlighted, or nonzero to prevent the item from being highlighted.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarNotification.TBN_DRAGOUT">
            <summary>
            <para>
            Sent by a toolbar control when the user clicks a button and then moves the cursor off the button. This notification code is
            sent in the form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>TBN_DRAGOUT lpnmtb = (LPNMTOOLBAR) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>
            Pointer to an <c>NMTOOLBAR</c> structure that contains information about this notification code. For this notification code,
            only the <c>hdr</c> and <c>iItem</c> members of this structure are valid. The <c>iItem</c> member of this structure contains
            the command identifier of the button being dragged.
            </para>
            <para><strong>Returns</strong></para>
            <para>The return value is ignored.</para>
            </summary>
            <remarks>
            This notification code allows an application to implement drag-and-drop functionality for toolbar buttons. When processing
            this notification code, the application will begin the drag-and-drop operation.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarNotification.TBN_DELETINGBUTTON">
            <summary>
            <para>
            Sent by a toolbar control when a button is about to be deleted. This notification code is sent in the form of a
            <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code> TBN_DELETINGBUTTON lpnmtb = (LPNMTOOLBAR) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>
            Pointer to an <c>NMTOOLBAR</c> structure that contains information about the button being deleted. For this notification
            code, only the <c>hdr</c> and <c>iItem</c> members of this structure are valid. The <c>iItem</c> member of this structure
            contains the command identifier of the button being deleted.
            </para>
            <para><strong>Returns</strong></para>
            <para>The return value is ignored.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarNotification.TBN_GETDISPINFOA">
            <summary>
            <para>
            Retrieves display information for a toolbar item. This notification code is sent in the form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>TBN_GETDISPINFO lptbdi = (LPNMTBDISPINFO) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>
            Pointer to an <c>NMTBDISPINFO</c> structure. The <c>idCommand</c> member specifies the item's command identifier, the
            <c>lParam</c> member contains the item's application-defined data, and the <c>dwMask</c> member specifies what information is
            being requested.
            </para>
            <para><strong>Returns</strong></para>
            <para>The return value is ignored by the control.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarNotification.TBN_GETDISPINFOW">
            <summary>
            <para>
            Retrieves display information for a toolbar item. This notification code is sent in the form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>TBN_GETDISPINFO lptbdi = (LPNMTBDISPINFO) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>
            Pointer to an <c>NMTBDISPINFO</c> structure. The <c>idCommand</c> member specifies the item's command identifier, the
            <c>lParam</c> member contains the item's application-defined data, and the <c>dwMask</c> member specifies what information is
            being requested.
            </para>
            <para><strong>Returns</strong></para>
            <para>The return value is ignored by the control.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarNotification.TBN_GETINFOTIPA">
            <summary>
            <para>
            Retrieves infotip information for a toolbar item. This notification code is sent in the form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>TBN_GETINFOTIP lptbgit = (LPNMTBGETINFOTIP) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>Pointer to an <c>NMTBGETINFOTIP</c> structure that contains item information and receives infotip information.</para>
            <para><strong>Returns</strong></para>
            <para>The return value is ignored by the control.</para>
            </summary>
            <remarks>
            The infotip support in the toolbar allows the toolbar to display tooltips for items that are as large as INFOTIPSIZE
            characters. If this notification code is not processed, the toolbar will use the item's text for the infotip.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarNotification.TBN_GETINFOTIPW">
            <summary>
            <para>
            Retrieves infotip information for a toolbar item. This notification code is sent in the form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>TBN_GETINFOTIP lptbgit = (LPNMTBGETINFOTIP) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>Pointer to an <c>NMTBGETINFOTIP</c> structure that contains item information and receives infotip information.</para>
            <para><strong>Returns</strong></para>
            <para>The return value is ignored by the control.</para>
            </summary>
            <remarks>
            The infotip support in the toolbar allows the toolbar to display tooltips for items that are as large as INFOTIPSIZE
            characters. If this notification code is not processed, the toolbar will use the item's text for the infotip.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarNotification.TBN_GETBUTTONINFOW">
            <summary>
            <para>
            Retrieves toolbar customization information and notifies the toolbar's parent window of any changes being made to the
            toolbar. This notification code is sent in the form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>TBN_GETBUTTONINFO lpnmtb = (LPNMTOOLBAR) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>
            Pointer to an <c>NMTOOLBAR</c> structure. The <c>iItem</c> member specifies a zero-based index that provides a count of the
            buttons the Customize Toolbar dialog box displays as both available and present on the toolbar. The <c>pszText</c> member
            specifies the address of the current button text, and <c>cchText</c> specifies its length in characters. The application
            should fill the structure with information about the button.
            </para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> if button information was copied to the specified structure, or <c>FALSE</c> otherwise.</para>
            </summary>
            <remarks>
            The toolbar control allocates a buffer, and the receiver (parent window) must copy the text into that buffer. The
            <c>cchText</c> member contains the length of the buffer allocated by the toolbar when TBN_GETBUTTONINFO is sent to the parent window.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarNotification.TBN_RESTORE">
            <summary>
            <para>
            Notifies a toolbar's parent window that a toolbar is in the process of being restored. This notification code is sent in the
            form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>TBN_RESTORE lpnmtb = (LPNMTBRESTORE) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>Pointer to an <c>NMTBRESTORE</c> structure.</para>
            <para><strong>Returns</strong></para>
            <para>
            The application should return zero in response to the first <c>TBN_RESTORE</c> notification code received at the start of the
            restore process to continue restoring the button information. If the application returns a nonzero value, the restore process
            is canceled.
            </para>
            </summary>
            <remarks>
            The application will receive this notification code once at the start of the restore process and once for each button. This
            notification code gives you an opportunity to extract the information from the data stream that you saved previously. If you
            haven't saved any information, ignore the notification code. See Toolbar Customization for a more detailed discussion of how
            to handle <c>TBN_RESTORE</c>.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarNotification.TBN_SAVE">
            <summary>
            <para>
            Notifies a toolbar's parent window that a toolbar is in the process of being saved. This notification code is sent in the
            form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>TBN_SAVE lpnmtb = (LPNMTBSAVE) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>Pointer to an <c>NMTBSAVE</c> structure.</para>
            <para><strong>Returns</strong></para>
            <para>No return value.</para>
            </summary>
            <remarks>
            The application will receive this notification code once at the start of the save process and once for each button. This
            notification code gives you an opportunity to add your own information to that saved by the Shell. If you do not wish to add
            information, ignore the notification code. See Toolbar Customization for a more detailed discussion of how to handle TBN_SAVE.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarNotification.TBN_INITCUSTOMIZE">
            <summary>
            <para>
            Notifies a toolbar's parent window that customizing has started. This notification code is sent in the form of a
            <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>TBN_INITCUSTOMIZE lpnmhdr = (LPNMHDR) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>Pointer to the toolbar's <c>NMHDR</c> structure.</para>
            <para><strong>Returns</strong></para>
            <para>Returns TBNRF_HIDEHELP to suppress the Help button.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarNotification.TBN_WRAPHOTITEM">
            <summary>
            <para>
            Notifies an application with two or more toolbars that the hot item is about to change. This notification code is sent in the
            form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>TBN_WRAPHOTITEM lpnmtb = (NMTBWRAPHOTITEM) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>
            A pointer to a structure that contains the old hot item ( <c>iStart</c>) and whether the new hot item is before it (
            <c>iDir</c> = -1) or after it ( <c>iDir</c> = 1), as well as a reason why the hot item is changing.
            </para>
            <para><strong>Returns</strong></para>
            <para><c>TRUE</c> if the application is handling the hot item change itself; otherwise <c>FALSE</c>.</para>
            </summary>
            <remarks>
            <para>The <c>NMTBWRAPHOTITEM</c> structure must be defined by the application as follows:</para>
            <para>
            <code>typedef struct tagNMTBWRAPHOTITEM { NMHDR hdr; int iStart; int iDir; UINT nReason; // HICF_* flags } NMTBWRAPHOTITEM, *LPNMTBWRAPHOTITEM;</code>
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarNotification.TBN_DUPACCELERATOR">
            <summary>
            <para>
            Ascertains whether an accelerator key can be used on two or more active toolbars. This notification code is sent in the form
            of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>TBN_DUPACCELERATOR lpnmtb = (NMTBDUPACCELERATOR) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>
            A pointer to a structure that provides an accelerator and that receives a value specifying whether multiple toolbars respond
            to the same character.
            </para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> if successful, otherwise <c>FALSE</c>.</para>
            </summary>
            <remarks>
            <para>The application must declare the <c>NMTBDUPACCELERATOR</c> structure as follows:</para>
            <para>
            <code>typedef struct tagNMTBDUPACCELERATOR { NMHDR hdr; UINT ch; // The accelerator. BOOL fDup; // TRUE if multiple toolbars respond to the accelerator. } NMTBDUPACCELERATOR, *LPNMTBDUPACCELERATOR;</code>
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarNotification.TBN_WRAPACCELERATOR">
            <summary>
            <para>
            Requests the index of the button in one or more toolbars corresponding to the specified accelerator character. This
            notification code is sent in the form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>TBN_WRAPACCELERATOR lpnmtb = (NMTBWRAPACCELERATOR) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>
            A pointer to a structure that contains the accelerator key character, and that receives the index of the corresponding
            button. The index is -1 if the accelerator does not correspond to a command.
            </para>
            <para><strong>Returns</strong></para>
            <para><c>TRUE</c> if an index is returned, otherwise <c>FALSE</c>.</para>
            </summary>
            <remarks>
            <para>Applications with one or more toolbars may receive this notification code.</para>
            <para>The <c>NMTBWRAPACCELERATOR</c> structure must be defined by the application as follows:</para>
            <para>
            <code>typedef struct tagNMTBWRAPACCELERATOR { NMHDR hdr; UINT ch; int iButton; } NMTBWRAPACCELERATOR, *LPNMTBWRAPACCELERATOR;</code>
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarNotification.TBN_DRAGOVER">
            <summary>
            <para>
            Ascertains whether a <c>TB_MARKBUTTON</c> message should be sent for a button that is being dragged over. This notification
            code is sent in the form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>TBN_DRAGOVER lpnmtb = (NMTBHOTITEM*) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>A pointer to an <c>NMTBHOTITEM</c> structure that specifies which item is being dragged over.</para>
            <para><strong>Returns</strong></para>
            <para><c>FALSE</c> if the toolbar should send a TB_MARKBUTTON message; otherwise <c>TRUE</c>.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarNotification.TBN_MAPACCELERATOR">
            <summary>
            <para>
            Requests the index of the button in the toolbar corresponding to the specified accelerator character. This notification code
            is sent in the form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>TBN_MAPACCELERATOR lpnmtb = (NMCHAR*) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>
            A pointer to an <c>NMCHAR</c> structure that contains the accelerator key character and that receives the index of the
            corresponding button. The <c>dwItemNext</c> field is -1 if the accelerator does not correspond to a command.
            </para>
            <para><strong>Returns</strong></para>
            <para>TRUE if <c>NMCHAR.dwItemNext</c> is set to a value.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.ToolbarStyle">
            <summary>Toolbar Control and Button Styles</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarStyle.TBSTYLE_ALTDRAG">
            <summary>
            Allows users to change a toolbar button's position by dragging it while holding down the ALT key. If this style is not
            specified, the user must hold down the SHIFT key while dragging a button. Note that the CCS_ADJUSTABLE style must be
            specified to enable toolbar buttons to be dragged.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarStyle.TBSTYLE_AUTOSIZE">
            <summary>Equivalent to BTNS_AUTOSIZE. Use TBSTYLE_AUTOSIZE for version 4.72 and earlier.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarStyle.TBSTYLE_BUTTON">
            <summary>Equivalent to BTNS_BUTTON. Use TBSTYLE_BUTTON for version 4.72 and earlier.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarStyle.TBSTYLE_CHECK">
            <summary>Equivalent to BTNS_CHECK. Use TBSTYLE_CHECK for version 4.72 and earlier.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarStyle.TBSTYLE_CHECKGROUP">
            <summary>Equivalent to BTNS_CHECKGROUP. Use TBSTYLE_CHECKGROUP for version 4.72 and earlier.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarStyle.TBSTYLE_CUSTOMERASE">
            <summary>Version 4.70. Generates NM_CUSTOMDRAW notification codes when the toolbar processes WM_ERASEBKGND messages.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarStyle.TBSTYLE_DROPDOWN">
            <summary>Equivalent to BTNS_DROPDOWN. Use TBSTYLE_DROPDOWN for version 4.72 and earlier.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarStyle.TBSTYLE_FLAT">
            <summary>
            Version 4.70. Creates a flat toolbar. In a flat toolbar, both the toolbar and the buttons are transparent and hot-tracking is
            enabled. Button text appears under button bitmaps. To prevent repainting problems, this style should be set before the
            toolbar control becomes visible.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarStyle.TBSTYLE_GROUP">
            <summary>Equivalent to BTNS_GROUP. Use TBSTYLE_GROUP for version 4.72 and earlier.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarStyle.TBSTYLE_LIST">
            <summary>
            Version 4.70. Creates a flat toolbar with button text to the right of the bitmap. Otherwise, this style is identical to
            TBSTYLE_FLAT. To prevent repainting problems, this style should be set before the toolbar control becomes visible.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarStyle.TBSTYLE_NOPREFIX">
            <summary>Equivalent to BTNS_NOPREFIX. Use TBSTYLE_NOPREFIX for version 4.72 and earlier.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarStyle.TBSTYLE_REGISTERDROP">
            <summary>
            Version 4.71. Generates TBN_GETOBJECT notification codes to request drop target objects when the cursor passes over toolbar buttons.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarStyle.TBSTYLE_SEP">
            <summary>Equivalent to BTNS_SEP. Use TBSTYLE_SEP for version 4.72 and earlier.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarStyle.TBSTYLE_TOOLTIPS">
            <summary>Creates a tooltip control that an application can use to display descriptive text for the buttons in the toolbar.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarStyle.TBSTYLE_TRANSPARENT">
            <summary>
            Version 4.71. Creates a transparent toolbar. In a transparent toolbar, the toolbar is transparent but the buttons are not.
            Button text appears under button bitmaps. To prevent repainting problems, this style should be set before the toolbar control
            becomes visible.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarStyle.TBSTYLE_WRAPABLE">
            <summary>
            Creates a toolbar that can have multiple lines of buttons. Toolbar buttons can "wrap" to the next line when the toolbar
            becomes too narrow to include all buttons on the same line. When the toolbar is wrapped, the break will occur on either the
            rightmost separator or the rightmost button if there are no separators on the bar. This style must be set to display a
            vertical toolbar control when the toolbar is part of a vertical rebar control. This style cannot be combined with CCS_VERT.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarStyle.BTNS_BUTTON">
            <summary>
            Version 5.80. Creates a standard button. Use the equivalent style flag, TBSTYLE_BUTTON, for version 4.72 and earlier. This
            flag is defined as 0, and should be used to signify that no other flags are set.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarStyle.BTNS_SEP">
            <summary>
            Version 5.80. Creates a separator, providing a small gap between button groups. A button that has this style does not receive
            user input. Use the equivalent style flag, TBSTYLE_SEP, for version 4.72 and earlier.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarStyle.BTNS_CHECK">
            <summary>
            Version 5.80. Creates a dual-state push button that toggles between the pressed and nonpressed states each time the user
            clicks it. The button has a different background color when it is in the pressed state. Use the equivalent style flag,
            TBSTYLE_CHECK, for version 4.72 and earlier.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarStyle.BTNS_GROUP">
            <summary>
            Version 5.80. When combined with BTNS_CHECK, creates a button that stays pressed until another button in the group is
            pressed. Use the equivalent style flag, TBSTYLE_GROUP, for version 4.72 and earlier.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarStyle.BTNS_CHECKGROUP">
            <summary>
            Version 5.80. Creates a button that stays pressed until another button in the group is pressed, similar to option buttons
            (also known as radio buttons). It is equivalent to combining BTNS_CHECK and BTNS_GROUP. Use the equivalent style flag,
            TBSTYLE_CHECKGROUP, for version 4.72 and earlier.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarStyle.BTNS_DROPDOWN">
            <summary>
            Version 5.80. Creates a drop-down style button that can display a list when the button is clicked. Instead of the WM_COMMAND
            message used for normal buttons, drop-down buttons send a TBN_DROPDOWN notification code. An application can then have the
            notification handler display a list of options. Use the equivalent style flag, TBSTYLE_DROPDOWN, for version 4.72 and earlier.
            <para>
            If the toolbar has the TBSTYLE_EX_DRAWDDARROWS extended style, drop-down buttons will have a drop-down arrow displayed in a
            separate section to their right. If the arrow is clicked, a TBN_DROPDOWN notification code will be sent. If the associated
            button is clicked, a WM_COMMAND message will be sent.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarStyle.BTNS_AUTOSIZE">
            <summary>
            Version 5.80. Specifies that the toolbar control should not assign the standard width to the button. Instead, the button's
            width will be calculated based on the width of the text plus the image of the button. Use the equivalent style flag,
            TBSTYLE_AUTOSIZE, for version 4.72 and earlier.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarStyle.BTNS_NOPREFIX">
            <summary>
            Version 5.80. Specifies that the button text will not have an accelerator prefix associated with it. Use the equivalent style
            flag, TBSTYLE_NOPREFIX, for version 4.72 and earlier.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarStyle.BTNS_SHOWTEXT">
            <summary>
            Version 5.81. Specifies that button text should be displayed. All buttons can have text, but only those buttons with the
            BTNS_SHOWTEXT button style will display it. This button style must be used with the TBSTYLE_LIST style and the
            TBSTYLE_EX_MIXEDBUTTONS extended style. If you set text for buttons that do not have the BTNS_SHOWTEXT style, the toolbar
            control will automatically display it as a tooltip when the cursor hovers over the button. This feature allows your
            application to avoid handling the TBN_GETINFOTIP or TTN_GETDISPINFO notification code for the toolbar.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarStyle.BTNS_WHOLEDROPDOWN">
            <summary>
            Version 5.80. Specifies that the button will have a drop-down arrow, but not as a separate section. Buttons with this style
            behave the same, regardless of whether the TBSTYLE_EX_DRAWDDARROWS extended style is set.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.ToolbarStyleEx">
            <summary>This section lists the extended styles supported by toolbar controls.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarStyleEx.TBSTYLE_EX_DRAWDDARROWS">
            <summary>
            Version 4.71. This style allows buttons to have a separate dropdown arrow. Buttons that have the BTNS_DROPDOWN style will be
            drawn with a dropdown arrow in a separate section, to the right of the button. If the arrow is clicked, only the arrow
            portion of the button will depress, and the toolbar control will send a TBN_DROPDOWN notification code to prompt the
            application to display the dropdown menu. If the main part of the button is clicked, the toolbar control sends a WM_COMMAND
            message with the button's ID. The application normally responds by launching the first command on the menu. There are many
            situations where you may want to have only some of the dropdown buttons on a toolbar with separated arrows. To do so, set the
            TBSTYLE_EX_DRAWDDARROWS extended style. Give those buttons that will not have separated arrows the BTNS_WHOLEDROPDOWN style.
            Buttons with this style will have an arrow displayed next to the image. However, the arrow will not be separate and when any
            part of the button is clicked, the toolbar control will send a TBN_DROPDOWN notification code. To prevent repainting
            problems, this style should be set before the toolbar control becomes visible.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarStyleEx.TBSTYLE_EX_MIXEDBUTTONS">
            <summary>
            Version 5.81. This style allows you to set text for all buttons, but only display it for those buttons with the BTNS_SHOWTEXT
            button style. The TBSTYLE_LIST style must also be set. Normally, when a button does not display text, your application must
            handle TBN_GETINFOTIP or TTN_GETDISPINFO to display a tooltip. With the TBSTYLE_EX_MIXEDBUTTONS extended style, text that is
            set but not displayed on a button will automatically be used as the button's tooltip text. Your application only needs to
            handle TBN_GETINFOTIP or or TTN_GETDISPINFO if it needs more flexibility in specifying the tooltip text.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarStyleEx.TBSTYLE_EX_HIDECLIPPEDBUTTONS">
            <summary>
            Version 5.81. This style hides partially clipped buttons. The most common use of this style is for toolbars that are part of
            a rebar control. If an adjacent band covers part of a button, the button will not be displayed. However, if the rebar band
            has the RBBS_USECHEVRON style, the button will be displayed on the chevron's dropdown menu.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarStyleEx.TBSTYLE_EX_MULTICOLUMN">
            <summary>
            Version 5.82. Intended for internal use; not recommended for use in applications. This style gives the toolbar a vertical
            orientation and organizes the toolbar buttons into columns. The buttons flow down vertically until a button has exceeded the
            bounding height of the toolbar (see TB_SETBOUNDINGSIZE), and then a new column is created. The toolbar flows the buttons in
            this manner until all buttons are positioned. To use this style, the TBSTYLE_EX_VERTICAL style must also be set.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarStyleEx.TBSTYLE_EX_VERTICAL">
            <summary>
            Version 5.82. Intended for internal use; not recommended for use in applications. This style gives the toolbar a vertical
            orientation. Toolbar buttons flow from top to bottom instead of horizontally.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolbarStyleEx.TBSTYLE_EX_DOUBLEBUFFER">
            <summary>
            Version 6. This style requires the toolbar to be double buffered. Double buffering is a mechanism that detects when the
            toolbar has changed.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.VIEW">
            <summary>Index values for IDB_VIEW_LARGE_COLOR and IDB_VIEW_SMALL_COLOR</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.VIEW.VIEW_LARGEICONS">
            <summary>Large icons view.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.VIEW.VIEW_SMALLICONS">
            <summary>Small icons view.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.VIEW.VIEW_LIST">
            <summary>List view.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.VIEW.VIEW_DETAILS">
            <summary>Details view.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.VIEW.VIEW_SORTNAME">
            <summary>Sort by name.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.VIEW.VIEW_SORTSIZE">
            <summary>Sort by size.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.VIEW.VIEW_SORTDATE">
            <summary>Sort by date.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.VIEW.VIEW_SORTTYPE">
            <summary>Sort by type.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.VIEW.VIEW_PARENTFOLDER">
            <summary>Go to parent folder.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.VIEW.VIEW_NETCONNECT">
            <summary>Connect to network drive.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.VIEW.VIEW_NETDISCONNECT">
            <summary>Disconnect to network drive.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.VIEW.VIEW_NEWFOLDER">
            <summary>New folder.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.VIEW.VIEW_VIEWMENU">
            <summary>View menu.</summary>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.CreateMappedBitmap(Vanara.PInvoke.HINSTANCE,Vanara.PInvoke.SafeResourceId,Vanara.PInvoke.ComCtl32.CMB,Vanara.PInvoke.ComCtl32.COLORMAP@,System.Int32)">
            <summary>Creates a bitmap for use in a toolbar.</summary>
            <param name="hInstance">
            <para>Type: <c><c>HINSTANCE</c></c></para>
            <para>Handle to the module instance with the executable file that contains the bitmap resource.</para>
            </param>
            <param name="idBitmap">
            <para>Type: <c><c>INT_PTR</c></c></para>
            <para>Resource identifier of the bitmap resource.</para>
            </param>
            <param name="wFlags">
            <para>Type: <c><c>UINT</c></c></para>
            <para>Bitmap flag. This parameter can be zero or the following value:</para>
            <para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CMB_MASKED</term>
            <term>Uses a bitmap as a mask.</term>
            </item>
            </list>
            </para>
            </param>
            <param name="lpColorMap">
            <para>Type: <c>LPCOLORMAP</c></para>
            <para>
            Pointer to a <c>COLORMAP</c> structure that contains the color information needed to map the bitmaps. If this parameter is
            <c>NULL</c>, the function uses the default color map.
            </para>
            </param>
            <param name="iNumMaps">
            <para>Type: <c>int</c></para>
            <para>Number of color maps pointed to by lpColorMap.</para>
            </param>
            <returns>
            <para>Type: <c><c>HBITMAP</c></c></para>
            <para>
            Returns the handle to the bitmap if successful, or <c>NULL</c> otherwise. To retrieve extended error information, call <c>GetLastError</c>.
            </para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.COLORMAP">
            <summary>Contains information used by the <c>CreateMappedBitmap</c> function to map the colors of the bitmap.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.COLORMAP.from">
            <summary>
            <para>Type: <c><c>COLORREF</c></c></para>
            <para>Color to map from.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.COLORMAP.to">
            <summary>
            <para>Type: <c><c>COLORREF</c></c></para>
            <para>Color to map to.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.NMTBDISPINFO">
            <summary>
            Contains and receives display information for a toolbar item. This structure is used with the TBN_GETDISPINFO notification code.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTBDISPINFO.hdr">
            <summary>
            <para>Type: <c><c>NMHDR</c></c></para>
            <para><c>NMHDR</c> structure that contains additional information about the notification.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTBDISPINFO.dwMask">
            <summary>
            <para>Type: <c><c>DWORD</c></c></para>
            <para>
            Set of flags that indicate which members of this structure are being requested. This can be one or more of the following values.
            </para>
            <para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>TBNF_IMAGE</term>
            <term>The item's image index is being requested. The image index must be placed in the iImage member.</term>
            </item>
            <item>
            <term>TBNF_TEXT</term>
            <term>Not currently implemented.</term>
            </item>
            <item>
            <term>TBNF_DI_SETITEM</term>
            <term>
            Set this flag when processing TBN_GETDISPINFO; the toolbar control will retain the supplied information and not request it again.
            </term>
            </item>
            </list>
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTBDISPINFO.idCommand">
            <summary>
            <para>Type: <c>int</c></para>
            <para>
            Command identifier of the item for which display information is being requested. This member is filled in by the control
            before it sends the notification code.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTBDISPINFO.lParam">
            <summary>
            <para>Type: <c><c>DWORD_PTR</c></c></para>
            <para>
            Application-defined value associated with the item for which display information is being requested. This member is filled in
            by the control before sending the notification code.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTBDISPINFO.iImage">
            <summary>
            <para>Type: <c>int</c></para>
            <para>Image index for the item.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTBDISPINFO.pszText">
            <summary>
            <para>Type: <c><c>LPTSTR</c></c></para>
            <para>Pointer to a character buffer that receives the item's text.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTBDISPINFO.cchText">
            <summary>
            <para>Type: <c>int</c></para>
            <para>Size of the <c>pszText</c> buffer, in characters.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.NMTBGETINFOTIP">
            <summary>
            Contains and receives infotip information for a toolbar item. This structure is used with the TBN_GETINFOTIP notification code.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTBGETINFOTIP.hdr">
            <summary>
            <para>Type: <c><c>NMHDR</c></c></para>
            <para><c>NMHDR</c> structure that contains additional information about the notification.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTBGETINFOTIP.pszText">
            <summary>
            <para>Type: <c><c>LPTSTR</c></c></para>
            <para>Address of a character buffer that receives the infotip text.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTBGETINFOTIP.cchTextMax">
            <summary>
            <para>Type: <c>int</c></para>
            <para>
            Size of the buffer, in characters, at <c>pszText</c>. In most cases, the buffer will be INFOTIPSIZE characters in size, but
            you should always make sure that your application does not copy more than <c>cchTextMax</c> characters to the buffer at <c>pszText</c>.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTBGETINFOTIP.iItem">
            <summary>
            <para>Type: <c>int</c></para>
            <para>
            The command identifier of the item for which infotip information is being requested. This member is filled in by the control
            before sending the notification code.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTBGETINFOTIP.lParam">
            <summary>
            <para>Type: <c><c>LPARAM</c></c></para>
            <para>
            The application-defined value associated with the item for which infotip information is being requested. This member is
            filled in by the control before sending the notification code.
            </para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.NMTBHOTITEM">
            <summary>Contains information used with the TBN_HOTITEMCHANGE notification code.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTBHOTITEM.hdr">
            <summary>
            <para>Type: <c><c>NMHDR</c></c></para>
            <para><c>NMHDR</c> structure that contains additional information about the notification.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTBHOTITEM.idOld">
            <summary>
            <para>Type: <c>int</c></para>
            <para>Command identifier of the previously highlighted item.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTBHOTITEM.idNew">
            <summary>
            <para>Type: <c>int</c></para>
            <para>Command identifier of the item about to be highlighted.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTBHOTITEM.dwFlags">
            <summary>
            <para>Type: <c><c>DWORD</c></c></para>
            <para>Flags that indicate why the hot item has changed. This can be one or more of the following values:</para>
            <para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>HICF_ACCELERATOR</term>
            <term>The change in the hot item was caused by a shortcut key.</term>
            </item>
            <item>
            <term>HICF_ARROWKEYS</term>
            <term>The change in the hot item was caused by an arrow key.</term>
            </item>
            <item>
            <term>HICF_DUPACCEL</term>
            <term>Modifies HICF_ACCELERATOR. If this flag is set, more than one item has the same shortcut key character.</term>
            </item>
            <item>
            <term>HICF_ENTERING</term>
            <term>
            Modifies the other reason flags. If this flag is set, there is no previous hot item and idOld does not contain valid information.
            </term>
            </item>
            <item>
            <term>HICF_LEAVING</term>
            <term>Modifies the other reason flags. If this flag is set, there is no new hot item and idNew does not contain valid information.</term>
            </item>
            <item>
            <term>HICF_LMOUSE</term>
            <term>The change in the hot item resulted from a left-click mouse event.</term>
            </item>
            <item>
            <term>HICF_MOUSE</term>
            <term>The change in the hot item resulted from a mouse event.</term>
            </item>
            <item>
            <term>HICF_OTHER</term>
            <term>
            The change in the hot item resulted from an event that could not be determined. This will most often be due to a change in
            focus or the TB_SETHOTITEM message.
            </term>
            </item>
            <item>
            <term>HICF_RESELECT</term>
            <term>The change in the hot item resulted from the user entering the shortcut key for an item that was already hot.</term>
            </item>
            <item>
            <term>HICF_TOGGLEDROPDOWN</term>
            <term>Version 5.80. Causes the button to switch states.</term>
            </item>
            </list>
            </para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.NMTBRESTORE">
            <summary>
            Allows applications to extract the information that was placed in <c>NMTBSAVE</c> when the toolbar state was saved. This
            structure is passed to applications when they receive a TBN_RESTORE notification code.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTBRESTORE.hdr">
            <summary>
            <para>Type: <c><c>NMHDR</c></c></para>
            <para><c>NMHDR</c> structure that contains additional information about the notification.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTBRESTORE.pData">
            <summary>
            <para>Type: <c><c>DWORD</c>*</c></para>
            <para>
            Pointer to the data stream with the stored save information. It contains Shell-defined blocks of information for each button,
            alternating with application-defined blocks. Applications may also place a block of global data at the start of <c>pData</c>.
            The format and length of the application-defined blocks are determined by the application.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTBRESTORE.pCurrent">
            <summary>
            <para>Type: <c><c>DWORD</c>*</c></para>
            <para>
            Pointer to the current block of application-defined data. After extracting the data, the application must advance
            <c>pCurrent</c> to the end of the block, so it is pointing to the next block of Shell-defined data.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTBRESTORE.cbData">
            <summary>
            <para>Type: <c><c>UINT</c></c></para>
            <para>Size of <c>pData</c>.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTBRESTORE.iItem">
            <summary>
            <para>Type: <c>int</c></para>
            <para>
            Value of -1 indicates that the restore is starting, and <c>pCurrent</c> will point to the start of the data stream.
            Otherwise, it is the zero-based button index, and <c>pCurrent</c> will point to the current button's data.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTBRESTORE.cButtons">
            <summary>
            <para>Type: <c>int</c></para>
            <para>
            Estimate of the number of buttons. Because the estimate is based on the size of the data stream, it might be incorrect. The
            client should update it as appropriate.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTBRESTORE.cbBytesPerRecord">
            <summary>
            <para>Type: <c>int</c></para>
            <para>
            Number of bytes needed to hold the data for each button. When the restore starts, <c>cbBytesPerRecord</c> will be set to the
            size of the Shell-defined data structure. You need to increment it by the size of the structure that holds the
            application-defined data.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTBRESTORE.tbButton">
            <summary>
            <para>Type: <c><c>TBBUTTON</c></c></para>
            <para>
            <c>TBBUTTON</c> structure that contains information about the button currently being restored. Applications must modify this
            structure as necessary before returning.
            </para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.NMTBSAVE">
            <summary>
            This structure is passed to applications when they receive a TBN_SAVE notification code. It contains information about the button
            currently being saved. Applications can modify the values of the members to save additional information.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTBSAVE.hdr">
            <summary>
            <para>Type: <c><c>NMHDR</c></c></para>
            <para>An <c>NMHDR</c> structure that contains additional information about the notification.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTBSAVE.pData">
            <summary>
            <para>Type: <c><c>DWORD</c>*</c></para>
            <para>
            A pointer to the data stream used to store the save information. When complete, it will contain blocks of Shell-defined
            information for each button, alternating with blocks defined by the application. Applications may also choose to place a
            block of global data at the start of <c>pData</c>. The format and length of the application-defined blocks are determined by
            the application. When the save starts, the Shell will pass the amount of memory it needs in <c>cbData</c>, but no memory will
            be allocated. You must allocate enough memory for <c>pData</c> to hold your data, plus the Shell's.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTBSAVE.pCurrent">
            <summary>
            <para>Type: <c><c>DWORD</c>*</c></para>
            <para>
            A pointer to the start of the unused portion of the data stream. You should load your data here, and then advance
            <c>pCurrent</c> to the start of the remaining unused portion. The Shell will then load the information for the next button,
            advance <c>pCurrent</c>, and so on.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTBSAVE.cbData">
            <summary>
            <para>Type: <c><c>UINT</c></c></para>
            <para>
            The size of the data stream. When the save starts, <c>cbData</c> will be set to the amount of data needed by the Shell. You
            should change it to the total amount allocated.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTBSAVE.iItem">
            <summary>
            <para>Type: <c>int</c></para>
            <para>
            This parameter is usually the zero-based index of the button currently being saved. It is set to -1 to indicate that a save
            is starting.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTBSAVE.cButtons">
            <summary>
            <para>Type: <c>int</c></para>
            <para>
            An estimate of the number of buttons. Because it is based on the size of the data stream, it may be incorrect. The client
            should update it as appropriate.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTBSAVE.tbButton">
            <summary>
            <para>Type: <c><c>TBBUTTON</c></c></para>
            <para>A <c>TBBUTTON</c> structure that contains information about the button currently being saved.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.NMTOOLBAR">
            <summary>Contains information used to process toolbar notification codes. This structure supersedes the <c>TBNOTIFY</c> structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTOOLBAR.hdr">
            <summary>
            <para>Type: <c><c>NMHDR</c></c></para>
            <para><c>NMHDR</c> structure that contains additional information about the notification.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTOOLBAR.iItem">
            <summary>
            <para>Type: <c>int</c></para>
            <para>Command identifier of the button associated with the notification code.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTOOLBAR.tbButton">
            <summary>
            <para>Type: <c><c>TBBUTTON</c></c></para>
            <para>
            <c>TBBUTTON</c> structure that contains information about the toolbar button associated with the notification code. This
            member only contains valid information with the TBN_QUERYINSERT and TBN_QUERYDELETE notification codes.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTOOLBAR.cchText">
            <summary>
            <para>Type: <c>int</c></para>
            <para>Count of characters in the button text.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTOOLBAR.pszText">
            <summary>
            <para>Type: <c><c>LPTSTR</c></c></para>
            <para>Address of a character buffer that contains the button text.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTOOLBAR.rcButton">
            <summary>
            <para>Type: <c><c>RECT</c></c></para>
            <para>Version 5.80. A <c>RECT</c> structure that defines the area covered by the button.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.TBADDBITMAP">
            <summary>Adds a bitmap that contains button images to a toolbar.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TBADDBITMAP.hInst">
            <summary>
            <para>Type: <c><c>HINSTANCE</c></c></para>
            <para>
            Handle to the module instance with the executable file that contains a bitmap resource. To use bitmap handles instead of
            resource IDs, set this member to <c>NULL</c>.
            </para>
            <para>
            You can add the system-defined button bitmaps to the list by specifying HINST_COMMCTRL as the <c>hInst</c> member and one of
            the following values as the <c>nID</c> member.
            </para>
            <para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>IDB_STD_LARGE_COLOR</term>
            <term>Large, color standard bitmaps.</term>
            </item>
            <item>
            <term>IDB_STD_SMALL_COLOR</term>
            <term>Small, color standard bitmaps.</term>
            </item>
            <item>
            <term>IDB_VIEW_LARGE_COLOR</term>
            <term>Small large, color view bitmaps.</term>
            </item>
            <item>
            <term>IDB_VIEW_SMALL_COLOR</term>
            <term>Small, color view bitmaps.</term>
            </item>
            <item>
            <term>IDB_HIST_NORMAL</term>
            <term>Windows Explorer travel buttons and favorites bitmaps in normal state.</term>
            </item>
            <item>
            <term>IDB_HIST_HOT</term>
            <term>Windows Explorer travel buttons and favorites bitmaps in hot state.</term>
            </item>
            <item>
            <term>IDB_HIST_DISABLED</term>
            <term>Windows Explorer travel buttons and favorites bitmaps in disabled state.</term>
            </item>
            <item>
            <term>IDB_HIST_PRESSED</term>
            <term>Windows Explorer travel buttons and favorites bitmaps in pressed state.</term>
            </item>
            </list>
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TBADDBITMAP.nID">
            <summary>
            <para>Type: <c><c>UINT_PTR</c></c></para>
            <para>
            If <c>hInst</c> is <c>NULL</c>, set this member to the bitmap handle of the bitmap with the button images. Otherwise, set it
            to the resource identifier of the bitmap with the button images.
            </para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.TBBUTTON">
            <summary>Contains information about a button in a toolbar.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TBBUTTON.iBitmap">
            <summary>
            Zero-based index of the button image. Set this member to I_IMAGECALLBACK, and the toolbar will send the TBN_GETDISPINFO
            notification code to retrieve the image index when it is needed.
            <para>
            Version 5.81. Set this member to I_IMAGENONE to indicate that the button does not have an image.The button layout will not
            include any space for a bitmap, only text.
            </para>
            <para>
            If the button is a separator, that is, if fsStyle is set to BTNS_SEP, iBitmap determines the width of the separator, in
            pixels.For information on selecting button images from image lists, see TB_SETIMAGELIST message.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TBBUTTON.idCommand">
            <summary>
            Command identifier associated with the button. This identifier is used in a WM_COMMAND message when the button is chosen.
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.TBBUTTON.fsState">
            <summary>Button state flags.</summary>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.TBBUTTON.fsStyle">
            <summary>Button style.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TBBUTTON.dwData">
            <summary>Application-defined value.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TBBUTTON.iString">
            <summary>Zero-based index of the button string, or a pointer to a string buffer that contains text for the button.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.TBBUTTONINFO">
            <summary>Contains or receives information for a specific button in a toolbar.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TBBUTTONINFO.cbSize">
            <summary>
            <para>Type: <c><c>UINT</c></c></para>
            <para>Size of the structure, in bytes. This member must be filled in prior to sending the associated message.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TBBUTTONINFO.dwMask">
            <summary>
            <para>Type: <c><c>DWORD</c></c></para>
            <para>
            Set of flags that indicate which members contain valid information. This member must be filled in prior to sending the
            associated message. This can be one or more of the following values.
            </para>
            <para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>TBIF_BYINDEX</term>
            <term>Version 5.80. The wParam sent with a TB_GETBUTTONINFO or TB_SETBUTTONINFO message is an index, not an identifier.</term>
            </item>
            <item>
            <term>TBIF_COMMAND</term>
            <term>The idCommand member contains valid information or is being requested.</term>
            </item>
            <item>
            <term>TBIF_IMAGE</term>
            <term>The iImage member contains valid information or is being requested.</term>
            </item>
            <item>
            <term>TBIF_LPARAM</term>
            <term>The lParam member contains valid information or is being requested.</term>
            </item>
            <item>
            <term>TBIF_SIZE</term>
            <term>The cx member contains valid information or is being requested.</term>
            </item>
            <item>
            <term>TBIF_STATE</term>
            <term>The fsState member contains valid information or is being requested.</term>
            </item>
            <item>
            <term>TBIF_STYLE</term>
            <term>The fsStyle member contains valid information or is being requested.</term>
            </item>
            <item>
            <term>TBIF_TEXT</term>
            <term>The pszText member contains valid information or is being requested.</term>
            </item>
            </list>
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TBBUTTONINFO.idCommand">
            <summary>
            <para>Type: <c>int</c></para>
            <para>Command identifier of the button.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TBBUTTONINFO.iImage">
            <summary>
            <para>Type: <c>int</c></para>
            <para>
            Image index of the button. Set this member to I_IMAGECALLBACK, and the toolbar will send the TBN_GETDISPINFO notification
            code to retrieve the image index when it is needed.
            </para>
            <para>
            Version 5.81. Set this member to I_IMAGENONE to indicate that the button does not have an image. The button layout will not
            include any space for a bitmap, only text.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TBBUTTONINFO.fsState">
            <summary>
            <para>Type: <c><c>BYTE</c></c></para>
            <para>State flags of the button. This can be one or more of the values listed in Toolbar Button States.</para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.TBBUTTONINFO.fsStyle">
            <summary>
            <para>Type: <c><c>BYTE</c></c></para>
            <para>Style flags of the button. This can be one or more of the values listed in Toolbar Control and Button Styles.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TBBUTTONINFO.cx">
            <summary>
            <para>Type: <c><c>WORD</c></c></para>
            <para>Width of the button, in pixels.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TBBUTTONINFO.lParam">
            <summary>
            <para>Type: <c><c>DWORD_PTR</c></c></para>
            <para>Application-defined value associated with the button.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TBBUTTONINFO.pszText">
            <summary>
            <para>Type: <c><c>LPTSTR</c></c></para>
            <para>Address of a character buffer that contains or receives the button text.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TBBUTTONINFO.cchText">
            <summary>
            <para>Type: <c>int</c></para>
            <para>Size of the buffer at <c>pszText</c>. If the button information is being set, this member is ignored.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.TBINSERTMARK">
            <summary>Contains information on the insertion mark in a toolbar control.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TBINSERTMARK.iButton">
            <summary>
            <para>Type: <c>int</c></para>
            <para>Zero-based index of the insertion mark. If this member is -1, there is no insertion mark.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TBINSERTMARK.dwFlags">
            <summary>
            <para>Type: <c><c>DWORD</c></c></para>
            <para>Defines where the insertion mark is in relation to <c>iButton</c>. This can be one of the following values:</para>
            <para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>0</term>
            <term>The insertion mark is to the left of the specified button.</term>
            </item>
            <item>
            <term>TBIMHT_AFTER</term>
            <term>The insertion mark is to the right of the specified button.</term>
            </item>
            <item>
            <term>TBIMHT_BACKGROUND</term>
            <term>The insertion mark is on the background of the toolbar. This flag is only used with the TB_INSERTMARKHITTEST message.</term>
            </item>
            </list>
            </para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.TBMETRICS">
            <summary>Defines the metrics of a toolbar that are used to shrink or expand toolbar items.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TBMETRICS.cbSize">
            <summary>
            <para>Type: <c><c>UINT</c></c></para>
            <para>Size of the <c>TBMETRICS</c> structure.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TBMETRICS.dwMask">
            <summary>
            <para>Type: <c><c>DWORD</c></c></para>
            <para>Mask that determines the metric to retrieve. It can be any combination of the following:</para>
            <para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>TBMF_PAD</term>
            <term>Retrieve the cxPad and cyPad values.</term>
            </item>
            <item>
            <term>TBMF_BARPAD</term>
            <term>Retrieve the cxBarPad and cyBarPad values.</term>
            </item>
            <item>
            <term>TBMF_BUTTONSPACING</term>
            <term>Retrieve the cxButtonSpacing and cyButtonSpacing values.</term>
            </item>
            </list>
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TBMETRICS.cxPad">
            <summary>
            <para>Type: <c>int</c></para>
            <para>Width of the padding inside the toolbar buttons, between the content and the edge of the button.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TBMETRICS.cyPad">
            <summary>
            <para>Type: <c>int</c></para>
            <para>Height of the padding inside the toolbar buttons, between the content and the edge of the button.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TBMETRICS.cxBarPad">
            <summary>
            <para>Type: <c>int</c></para>
            <para>Width of the toolbar. Not used.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TBMETRICS.cyBarPad">
            <summary>
            <para>Type: <c>int</c></para>
            <para>Height of the toolbar. Not used.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TBMETRICS.cxButtonSpacing">
            <summary>
            <para>Type: <c>int</c></para>
            <para>Width of the space between toolbar buttons.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TBMETRICS.cyButtonSpacing">
            <summary>
            <para>Type: <c>int</c></para>
            <para>Height of the space between toolbar buttons.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.TBREPLACEBITMAP">
            <summary>Used with the <c>TB_REPLACEBITMAP</c> message to replace one toolbar bitmap with another.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TBREPLACEBITMAP.hInstOld">
            <summary>
            <para>Type: <c><c>HINSTANCE</c></c></para>
            <para>
            Module instance handle to the bitmap resource being replaced. Set this member to <c>NULL</c> to instead use a bitmap handle.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TBREPLACEBITMAP.nIDOld">
            <summary>
            <para>Type: <c><c>UINT_PTR</c></c></para>
            <para>
            If <c>hInstOld</c> is <c>NULL</c>, set this member to the bitmap handle of the bitmap that is being replaced. Otherwise, set
            it to the resource identifier of the bitmap being replaced.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TBREPLACEBITMAP.hInstNew">
            <summary>
            <para>Type: <c><c>HINSTANCE</c></c></para>
            <para>
            Module instance handle that contains the new bitmap resource. Set this member to <c>NULL</c> to instead use a bitmap handle.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TBREPLACEBITMAP.nIDNew">
            <summary>
            <para>Type: <c><c>UINT_PTR</c></c></para>
            <para>
            If <c>hInstNew</c> is <c>NULL</c>, set this member to the bitmap handle of the bitmap with the new button images. Otherwise,
            set it to the resource identifier of the bitmap with the new button images.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TBREPLACEBITMAP.nButtons">
            <summary>
            <para>Type: <c>int</c></para>
            <para>
            Number of button images contained in the new bitmap. The number of new images should be the same as the number of replaced images.
            </para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.TBSAVEPARAMS">
            <summary>
            Specifies the location in the registry where the <c>TB_SAVERESTORE</c> message stores and retrieves information about the state
            of a toolbar.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TBSAVEPARAMS.hkr">
            <summary>
            <para>Type: <c><c>HKEY</c></c></para>
            <para>Handle to the registry key.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TBSAVEPARAMS.pszSubKey">
            <summary>
            <para>Type: <c><c>LPCTSTR</c></c></para>
            <para>Subkey name.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TBSAVEPARAMS.pszValueName">
            <summary>
            <para>Type: <c><c>LPCTSTR</c></c></para>
            <para>Value name.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.NMTBCUSTOMDRAW">
            <summary>Contains information specific to an NM_CUSTOMDRAW notification code sent by a toolbar control.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTBCUSTOMDRAW.nmcd">
            <summary>
            <para>Type: <c>NMCUSTOMDRAW</c></para>
            <para>
            NMCUSTOMDRAW structure that contains general custom draw information. The <c>uItemState</c> member of this structure can be
            modified so that a toolbar item will be drawn in the specified state without actually changing the item's state.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTBCUSTOMDRAW.hbrMonoDither">
            <summary>
            <para>Type: <c>HBRUSH</c></para>
            <para>
            HBRUSH that the control will use when drawing the background of marked or dithered items. This member is ignored if
            TBCDRF_NOMARK is returned from the NM_CUSTOMDRAW notification code.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTBCUSTOMDRAW.hbrLines">
            <summary>
            <para>Type: <c>HBRUSH</c></para>
            <para>HBRUSH that the control will use when drawing lines on the buttons.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTBCUSTOMDRAW.hpenLines">
            <summary>
            <para>Type: <c>HPEN</c></para>
            <para>HPEN that the control will use when drawing lines on the buttons.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTBCUSTOMDRAW.clrText">
            <summary>
            <para>Type: <c>COLORREF</c></para>
            <para>COLORREF that represents the color that the control will use when drawing text on normal items.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTBCUSTOMDRAW.clrMark">
            <summary>
            <para>Type: <c>COLORREF</c></para>
            <para><c>COLORREF</c> that represents the background color that the control will use when drawing text on marked items.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTBCUSTOMDRAW.clrTextHighlight">
            <summary>
            <para>Type: <c>COLORREF</c></para>
            <para><c>COLORREF</c> that represents the color that the control will use when drawing text on highlighted items.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTBCUSTOMDRAW.clrBtnFace">
            <summary>
            <para>Type: <c>COLORREF</c></para>
            <para><c>COLORREF</c> that represents the face color that the control will use when drawing buttons.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTBCUSTOMDRAW.clrBtnHighlight">
            <summary>
            <para>Type: <c>COLORREF</c></para>
            <para>
            <c>COLORREF</c> that represents the face color that the control will use when drawing highlighted items. An item is
            highlighted if it has the TBSTATE_MARKED style and is contained in a toolbar that has the TBSTYLE_FLAT style.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTBCUSTOMDRAW.clrHighlightHotTrack">
            <summary>
            <para>Type: <c>COLORREF</c></para>
            <para>
            <c>COLORREF</c> that represents the background color that the control will use when drawing text on hot tracked items. This
            member is ignored if TBCDRF_HILITEHOTTRACK is not returned from the NM_CUSTOMDRAW notification code.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTBCUSTOMDRAW.rcText">
            <summary>
            <para>Type: <c>RECT</c></para>
            <para>
            RECT structure that, on entry, contains the rectangle of the item's text. The <c>right</c> and <c>bottom</c> members of this
            structure can be modified to change the width and height, respectively, of the text rectangle of the item.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTBCUSTOMDRAW.nStringBkMode">
            <summary>
            <para>Type: <c>int</c></para>
            <para>
            Background mode that the control will use when drawing the text of a nonhighlighted item. This can be either the TRANSPARENT
            or OPAQUE value.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTBCUSTOMDRAW.nHLStringBkMode">
            <summary>
            <para>Type: <c>int</c></para>
            <para>
            Background mode that the control will use when drawing the text of a highlighted item. This can be either the TRANSPARENT or
            OPAQUE value.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTBCUSTOMDRAW.iListGap">
            <summary>
            <para>Type: <c>int</c></para>
            <para>
            Version 6.0 Specifies the distance between the toolbar button image and the text, in logical pixels, for toolbars that have
            TBSTYLE_LIST style set.
            </para>
            <para>
            Note that Comctl32.dll version 6 is not redistributable but it is included in Windows or later. To use Comctl32.dll version
            6, specify it in a manifest. For more information on manifests, see Enabling Visual Styles.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TTN_FIRST">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.ToolTipIcon">
            <summary>Specify the icon to be displayed.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolTipIcon.TTI_NONE">
            <summary>No icon.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolTipIcon.TTI_INFO">
            <summary>Info icon.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolTipIcon.TTI_WARNING">
            <summary>Warning icon</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolTipIcon.TTI_ERROR">
            <summary>Error Icon</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolTipIcon.TTI_INFO_LARGE">
            <summary>Large error Icon</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolTipIcon.TTI_WARNING_LARGE">
            <summary>Large error Icon</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolTipIcon.TTI_ERROR_LARGE">
            <summary>Large error Icon</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.ToolTipInfoFlags">
            <summary>Flags that control the tooltip display.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolTipInfoFlags.TTF_IDISHWND">
            <summary>Indicates that the uId member is the window handle to the tool. If this flag is not set, uId is the tool's identifier.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolTipInfoFlags.TTF_CENTERTIP">
            <summary>Centers the tooltip window below the tool specified by the uId member.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolTipInfoFlags.TTF_RTLREADING">
            <summary>Indicates that the tooltip text will be displayed in the opposite direction to the text in the parent window.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolTipInfoFlags.TTF_SUBCLASS">
            <summary>
            Indicates that the tooltip control should subclass the tool's window to intercept messages, such as WM_MOUSEMOVE. If this
            flag is not set, you must use the TTM_RELAYEVENT message to forward messages to the tooltip control. For a list of messages
            that a tooltip control processes, see TTM_RELAYEVENT.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolTipInfoFlags.TTF_TRACK">
            <summary>
            Positions the tooltip window next to the tool to which it corresponds and moves the window according to coordinates supplied
            by the TTM_TRACKPOSITION messages. You must activate this type of tool using the TTM_TRACKACTIVATE message.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolTipInfoFlags.TTF_ABSOLUTE">
            <summary>
            Positions the tooltip window at the same coordinates provided by TTM_TRACKPOSITION. This flag must be used with the TTF_TRACK flag.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolTipInfoFlags.TTF_TRANSPARENT">
            <summary>
            Causes the tooltip control to forward mouse event messages to the parent window. This is limited to mouse events that occur
            within the bounds of the tooltip window.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolTipInfoFlags.TTF_PARSELINKS">
            <summary>
            Version 6.0 and later. Indicates that links in the tooltip text should be parsed.
            <para>
            Note that Comctl32.dll version 6 is not redistributable but it is included in Windows or later. To use Comctl32.dll version
            6, specify it in a manifest. For more information on manifests, see Enabling Visual Styles.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolTipInfoFlags.TTF_DI_SETITEM">
            <summary>The TTF di setitem</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.ToolTipMessage">
            <summary>Tooltip Control Messages</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolTipMessage.TTM_ACTIVATE">
            <summary>Activates or deactivates a tooltip control.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>
            Activation flag. If this parameter is <c>TRUE</c>, the tooltip control is activated. If it is <c>FALSE</c>, the tooltip
            control is deactivated.
            </para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>No return value.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolTipMessage.TTM_SETDELAYTIME">
            <summary>Sets the initial, pop-up, and reshow durations for a tooltip control.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Flag that specifies which time value to set. This parameter can be one of the following values</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term><c>TTDT_AUTOPOP</c></term>
            <term>
            Set the amount of time a tooltip window remains visible if the pointer is stationary within a tool's bounding rectangle. To
            return the autopop delay time to its default value, set <c>lParam</c> to -1.
            </term>
            </item>
            <item>
            <term><c>TTDT_INITIAL</c></term>
            <term>
            Set the amount of time a pointer must remain stationary within a tool's bounding rectangle before the tooltip window appears.
            To return the initial delay time to its default value, set <c>lParam</c> to -1.
            </term>
            </item>
            <item>
            <term><c>TTDT_RESHOW</c></term>
            <term>
            Set the amount of time it takes for subsequent tooltip windows to appear as the pointer moves from one tool to another. To
            return the reshow delay time to its default value, set <c>lParam</c> to -1.
            </term>
            </item>
            <item>
            <term><c>TTDT_AUTOMATIC</c></term>
            <term>
            Set all three delay times to default proportions. The autopop time will be ten times the initial time and the reshow time
            will be one fifth the initial time. If this flag is set, use a positive value of <c>lParam</c> to specify the initial time,
            in milliseconds. Set <c>lParam</c> to a negative value to return all three delay times to their default values.
            </term>
            </item>
            </list>
            <para><em>lParam</em></para>
            <para>The <c>LOWORD</c> specifies the delay time, in milliseconds. The <c>HIWORD</c> must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>The return value for this message is not used.</para>
            </summary>
            <remarks>
            <para>
            The default delay times are based on the double-click time. For the default double-click time of 500 ms, the initial,
            autopop, and reshow delay times are 500ms, 5000ms, and 100ms respectively. The following code fragment uses the
            <c>GetDoubleClickTime</c> function to determine the three delay times for any system.
            </para>
            <para>
            <code>initial = GetDoubleClickTime(); autopop = GetDoubleClickTime() * 10; reshow = GetDoubleClickTime() / 5;</code>
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolTipMessage.TTM_ADDTOOL">
            <summary>Registers a tool with a tooltip control.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>
            Pointer to a <c>TOOLINFO</c> structure containing information that the tooltip control needs to display text for the tool.
            The <c>cbSize</c> member of this structure must be filled in before sending this message.
            </para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> if successful, or <c>FALSE</c> otherwise.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolTipMessage.TTM_DELTOOL">
            <summary>Removes a tool from a tooltip control.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>
            Pointer to a <c>TOOLINFO</c> structure. The <c>hwnd</c> and <c>uId</c> members identify the tool to remove, and the
            <c>cbSize</c> member must specify the size of the structure. All other members are ignored.
            </para>
            <para><strong>Returns</strong></para>
            <para>No return value.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolTipMessage.TTM_NEWTOOLRECT">
            <summary>Sets a new bounding rectangle for a tool.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>
            Pointer to a <c>TOOLINFO</c> structure. The <c>hwnd</c> and <c>uId</c> members identify a tool, and the <c>rect</c> member
            specifies the new bounding rectangle. The <c>cbSize</c> member of this structure must be filled in before sending this message.
            </para>
            <para><strong>Returns</strong></para>
            <para>No return value.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolTipMessage.TTM_RELAYEVENT">
            <summary>Passes a mouse message to a tooltip control for processing.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>
            Must be zero. <c>Windows 7 and later:</c> If the position of the tooltip is offset from the cursor position (in order not be
            obstructed by a finger or pointing device), this parameter can contain extra information taken from the <c>WM_MOUSEMOVE</c>
            message. Retrieve this extra information with <c>GetMessageExtraInfo</c>.
            </para>
            <para><em>lParam</em></para>
            <para>Pointer to an <c>MSG</c> structure that contains the message to relay.</para>
            <para><strong>Returns</strong></para>
            <para>No return value.</para>
            </summary>
            <remarks>
            <para>A tooltip control processes only the following messages passed to it by the <c>TTM_RELAYEVENT</c> message:</para>
            <list type="bullet">
            <item>
            <term>WM_LBUTTONDOWN</term>
            </item>
            <item>
            <term>WM_LBUTTONUP</term>
            </item>
            <item>
            <term>WM_MBUTTONDOWN</term>
            </item>
            <item>
            <term>WM_MBUTTONUP</term>
            </item>
            <item>
            <term>WM_MOUSEMOVE</term>
            </item>
            <item>
            <term>WM_NCMOUSEMOVE</term>
            </item>
            <item>
            <term>WM_RBUTTONDOWN</term>
            </item>
            <item>
            <term>WM_RBUTTONUP</term>
            </item>
            </list>
            <para>All other messages are ignored.</para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolTipMessage.TTM_GETTOOLINFO">
            <summary>Retrieves the information that a tooltip control maintains about a tool.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>
            Pointer to a <c>TOOLINFO</c> structure. When sending the message, the <c>hwnd</c> and <c>uId</c> members identify a tool, and
            the <c>cbSize</c> member must specify the size of the structure. When using this message to retrieve the tooltip text, ensure
            that the <c>lpszText</c> member of the <c>TOOLINFO</c> structure points to a valid buffer of adquate size
            </para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> if successful, or <c>FALSE</c> otherwise.</para>
            </summary>
            <remarks>If the tooltip control includes the tool, the <c>TOOLINFO</c> structure receives information about the tool.</remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolTipMessage.TTM_SETTOOLINFO">
            <summary>Sets the information that a tooltip control maintains for a tool.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>
            Pointer to a <c>TOOLINFO</c> structure that specifies the information to set. The <c>cbSize</c> member of this structure must
            be set before sending this message.
            </para>
            <para><strong>Returns</strong></para>
            <para>No return value.</para>
            </summary>
            <remarks>
            <para>
            Some internal properties of a tool are established when the tool is created, and are not recomputed when a
            <c>TTM_SETTOOLINFO</c> message is sent. If you simply assign values to a <c>TOOLINFO</c> structure and pass it to the tooltip
            control with a <c>TTM_SETTOOLINFO</c> message, these properties may be lost. Instead, your application should first request
            the tool's current <c>TOOLINFO</c> structure by sending the tooltip control a <c>TTM_GETTOOLINFO</c> message. Then, modify
            the members of this structure as needed and pass it back to the tooltip control with <c>TTM_SETTOOLINFO</c>.
            </para>
            <para>
            When calling <c>TTM_SETTOOLINFO</c>, the string pointed to by the <c>lpszText</c> member of the <c>TOOLINFO</c> structure
            must not exceed 80 <c>TCHARs</c> in length, including the terminating <c>NULL</c>.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolTipMessage.TTM_HITTEST">
            <summary>
            Tests a point to determine whether it is within the bounding rectangle of the specified tool and, if it is, retrieves
            information about the tool.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>
            Pointer to a <c>TTHITTESTINFO</c> structure. When sending the message, the <c>hwnd</c> member must specify the handle to a
            tool and the <c>pt</c> member must specify the coordinates of a point. If the return value is <c>TRUE</c>, the <c>ti</c>
            member (a <c>TOOLINFO</c> structure) receives information about the tool that occupies the point. The <c>cbSize</c> member of
            the <c>ti</c> structure must be filled in before sending this message.
            </para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> if the tool occupies the specified point, or <c>FALSE</c> otherwise.</para>
            </summary>
            <remarks>
            This message must be sent when the tool has the TTF_TRACK flag set. For more information on this flag, see <c>TOOLINFO</c>.
            TTM_HITTEST will fail if TTF_TRACK is not set, regardless if the hit point is in the tools rectangle or not.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolTipMessage.TTM_GETTEXT">
            <summary>Retrieves the information a tooltip control maintains about a tool.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>The number of **TCHARs**, including the terminating **NULL**, to copy to the buffer pointed to by **lpszText**.</para>
            <para><em>lParam</em></para>
            <para>Pointer to a <c>TOOLINFO</c> structure. Set the <c>cbSize</c> member of this structure to
            <code>sizeof(TOOLINFO)</code>
            before sending this message. Set the <c>hwnd</c> and <c>uId</c> members to identify the tool for which to retrieve
            information. Allocate a buffer of size specified by wParam. Set the <c>lpszText</c> member to point to the buffer to receive
            the tool text.
            </para>
            <para><strong>Returns</strong></para>
            <para>No return value.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolTipMessage.TTM_UPDATETIPTEXT">
            <summary>Sets the tooltip text for a tool.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>
            Pointer to a <c>TOOLINFO</c> structure. The <c>hinst</c> and <c>lpszText</c> members must specify the instance handle and the
            address of the text. The <c>hwnd</c> and <c>uId</c> members identify the tool to update. The <c>cbSize</c> member of this
            structure must be filled in before sending this message.
            </para>
            <para><strong>Returns</strong></para>
            <para>No return value.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolTipMessage.TTM_GETTOOLCOUNT">
            <summary>Retrieves a count of the tools maintained by a tooltip control.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns a count of tools.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolTipMessage.TTM_ENUMTOOLS">
            <summary>
            Retrieves the information that a tooltip control maintains about the current tool that is, the tool for which the tooltip is
            currently displaying text.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Zero-based index of the tool for which to retrieve information.</para>
            <para><em>lParam</em></para>
            <para>
            Pointer to a <c>TOOLINFO</c> structure that receives information about the tool. Set the <c>cbSize</c> member of this
            structure to sizeof(TOOLINFO) before sending this message. Allocate a buffer. Set the <c>lpszText</c> member to point to the
            buffer to receive the tool text. There is no way to determine the required buffer size. However, tool text, as returned at
            the <c>lpszText</c> member of the <c>TOOLINFO</c> structure, has a maximum length of 80 <c>TCHARs</c>, including the
            terminating <c>NULL</c>. If the text exceeds this length, it is truncated.
            </para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>FALSE</c> whether or not a tool was enumerated.</para>
            </summary>
            <remarks>
            <c>Security Warning:</c> Using this message might compromise the security of your program. This message does not provide a
            way for the message receiver to know the size of the buffer or to specify the size of the buffer. You should review the
            Security Considerations: Microsoft Windows Controls before continuing.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolTipMessage.TTM_GETCURRENTTOOL">
            <summary>Retrieves the information for the current tool in a tooltip control.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>
            Pointer to a <c>TOOLINFO</c> structure that receives information about the current tool. If this value is <c>NULL</c>, the
            return value indicates the existence of the current tool without actually retrieving the tool information. If this value is
            not <c>NULL</c>, the <c>cbSize</c> member of the <c>TOOLINFO</c> structure must be filled in before sending this message.
            </para>
            <para><strong>Returns</strong></para>
            <para>
            Returns nonzero if successful, or zero otherwise. If lParam is <c>NULL</c>, returns nonzero if a current tool exists, or zero otherwise.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolTipMessage.TTM_WINDOWFROMPOINT">
            <summary>
            Allows a subclass procedure to cause a tooltip to display text for a window other than the one beneath the mouse cursor.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Pointer to a <c>POINT</c> structure that defines the point to be checked.</para>
            <para><strong>Returns</strong></para>
            <para>
            The return value is the handle to the window that contains the point, or <c>NULL</c> if no window exists at the specified point.
            </para>
            </summary>
            <remarks>
            This message is intended to be processed by an application that subclasses a tooltip. It is not intended to be sent by an
            application. A tooltip sends this message to itself before displaying the text for a window. By changing the coordinates of
            the point specified by lParam, the subclass procedure can cause the tooltip to display text for a window other than the one
            beneath the mouse cursor.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolTipMessage.TTM_TRACKACTIVATE">
            <summary>Activates or deactivates a tracking tooltip.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Value specifying whether tracking is being activated or deactivated. This value can be one of the following:</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term><c>TRUE</c></term>
            <term>Activate tracking.</term>
            </item>
            <item>
            <term><c>FALSE</c></term>
            <term>Deactivate tracking.</term>
            </item>
            </list>
            <para><em>lParam</em></para>
            <para>
            Pointer to a <c>TOOLINFO</c> structure that identifies the tool to which this message applies. The <c>hwnd</c> and <c>uId</c>
            members identify the tool, and the <c>cbSize</c> member specifies the size of the structure. All other members are ignored.
            </para>
            <para><strong>Returns</strong></para>
            <para>The return value for this message is not used.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolTipMessage.TTM_TRACKPOSITION">
            <summary>Sets the position of a tracking tooltip.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>
            The <c>LOWORD</c> specifies the x-coordinate of the point at which the tracking tooltip will be displayed, in screen
            coordinates. The <c>HIWORD</c> specifies the y-coordinate of the point at which the tracking tooltip will be displayed, in
            screen coordinates.
            </para>
            <para><strong>Returns</strong></para>
            <para>The return value for this message is not used.</para>
            </summary>
            <remarks>
            The tooltip control chooses where to display the tooltip window based on the coordinates you provide with this message. This
            causes the tooltip window to appear beside the tool to which it corresponds. To have tooltip windows displayed at specific
            coordinates, include the TTF_ABSOLUTE flag in the <c>uFlags</c> member of the <c>TOOLINFO</c> structure when adding the tool.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolTipMessage.TTM_SETTIPBKCOLOR">
            <summary>Sets the background color in a tooltip window.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>New background color.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>The return value for this message is not used.</para>
            </summary>
            <remarks>When visual styles are enabled, this message has no effect.</remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolTipMessage.TTM_SETTIPTEXTCOLOR">
            <summary>Sets the text color in a tooltip window.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>New text color.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>The return value for this message is not used.</para>
            </summary>
            <remarks>When visual styles are enabled, this message has no effect.</remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolTipMessage.TTM_GETDELAYTIME">
            <summary>Retrieves the initial, pop-up, and reshow durations currently set for a tooltip control.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Flag that specifies which duration value will be retrieved. This parameter can have one of the following values:</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term><c>TTDT_AUTOPOP</c></term>
            <term>
            Retrieve the amount of time the tooltip window remains visible if the pointer is stationary within a tool's bounding rectangle.
            </term>
            </item>
            <item>
            <term><c>TTDT_INITIAL</c></term>
            <term>
            Retrieve the amount of time the pointer must remain stationary within a tool's bounding rectangle before the tooltip window appears.
            </term>
            </item>
            <item>
            <term><c>TTDT_RESHOW</c></term>
            <term>
            Retrieve the amount of time it takes for subsequent tooltip windows to appear as the pointer moves from one tool to another.
            </term>
            </item>
            </list>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns and INT value with the specified duration in milliseconds.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolTipMessage.TTM_GETTIPBKCOLOR">
            <summary>Retrieves the background color in a tooltip window.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns a <c>COLORREF</c> value that represents the background color.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolTipMessage.TTM_GETTIPTEXTCOLOR">
            <summary>Retrieves the text color in a tooltip window.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns a <c>COLORREF</c> value that represents the text color.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolTipMessage.TTM_SETMAXTIPWIDTH">
            <summary>Sets the maximum width for a tooltip window.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Maximum tooltip window width, or -1 to allow any width.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the previous maximum tooltip width.</para>
            </summary>
            <remarks>
            The maximum width value does not indicate a tooltip window's actual width. Rather, if a tooltip string exceeds the maximum
            width, the control breaks the text into multiple lines, using spaces to determine line breaks. If the text cannot be
            segmented into multiple lines, it is displayed on a single line, which may exceed the maximum tooltip width.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolTipMessage.TTM_GETMAXTIPWIDTH">
            <summary>Retrieves the maximum width for a tooltip window.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>
            Returns an <c>INT</c> value that represents the maximum tooltip width, in pixels. If no maximum width was set previously, the
            message returns -1.
            </para>
            </summary>
            <remarks>
            The maximum tooltip width value does not indicate a tooltip window's actual width. Rather, if a tooltip string exceeds the
            maximum width, the control breaks the text into multiple lines, using spaces to determine line breaks. If the text cannot be
            segmented into multiple lines, it will be displayed on a single line. The length of this line may exceed the maximum tooltip width.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolTipMessage.TTM_SETMARGIN">
            <summary>
            Sets the top, left, bottom, and right margins for a tooltip window. A margin is the distance, in pixels, between the tooltip
            window border and the text contained within the tooltip window.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>
            Pointer to a <c>RECT</c> structure that contains the margin information to be set. The members of the <c>RECT</c> structure
            do not define a bounding rectangle. For the purpose of this message, the structure members are interpreted as follows:
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term><c>top</c></term>
            <term>Distance between top border and top of tooltip text, in pixels.</term>
            </item>
            <item>
            <term><c>left</c></term>
            <term>Distance between left border and left end of tooltip text, in pixels.</term>
            </item>
            <item>
            <term><c>bottom</c></term>
            <term>Distance between bottom border and bottom of tooltip text, in pixels.</term>
            </item>
            <item>
            <term><c>right</c></term>
            <term>Distance between right border and right end of tooltip text, in pixels.</term>
            </item>
            </list>
            <para><strong>Returns</strong></para>
            <para>The return value for this message is not used.</para>
            </summary>
            <remarks>
            This message has no effect when the application runs on Windows Vista and visual styles are enabled for the tooltip. You can
            disable visual styles for the tooltip by using <c>SetWindowTheme</c>.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolTipMessage.TTM_GETMARGIN">
            <summary>
            Retrieves the top, left, bottom, and right margins set for a tooltip window. A margin is the distance, in pixels, between the
            tooltip window border and the text contained within the tooltip window.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>
            Pointer to a <c>RECT</c> structure that will receive the margin information. The members of the <c>RECT</c> structure do not
            define a bounding rectangle. For the purpose of this message, the structure members are interpreted as follows:
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term><c>top</c></term>
            <term>Distance between top border and top of tooltip text, in pixels.</term>
            </item>
            <item>
            <term><c>left</c></term>
            <term>Distance between left border and left end of tooltip text, in pixels.</term>
            </item>
            <item>
            <term><c>bottom</c></term>
            <term>Distance between bottom border and bottom of tooltip text, in pixels.</term>
            </item>
            <item>
            <term><c>right</c></term>
            <term>Distance between right border and right end of tooltip text, in pixels.</term>
            </item>
            </list>
            <para><strong>Returns</strong></para>
            <para>The return value for this message is not used.</para>
            </summary>
            <remarks>All four margins default to zero when you create the tooltip control.</remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolTipMessage.TTM_POP">
            <summary>Removes a displayed tooltip window from view.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>The return value for this message is not used.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolTipMessage.TTM_UPDATE">
            <summary>Forces the current tooltip to be redrawn.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>The return value for this message is not used.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolTipMessage.TTM_GETBUBBLESIZE">
            <summary>Returns the width and height of a tooltip control.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Pointer to the tooltip <c>TOOLINFO</c> structure.</para>
            <para><strong>Returns</strong></para>
            <para>
            Returns the width of the tooltip in the low word and the height in the high word if successful. Otherwise, it returns <c>FALSE</c>.
            </para>
            </summary>
            <remarks>
            If the TTF_TRACK and TTF_ABSOLUTE flags are set in the <c>uFlags</c> member of the tooltip <c>TOOLINFO</c> structure, this
            message can be used to help position the tooltip accurately.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolTipMessage.TTM_ADJUSTRECT">
            <summary>
            Calculates a tooltip control's text display rectangle from its window rectangle, or the tooltip window rectangle needed to
            display a specified text display rectangle.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>
            Value that specifies which operation to perform. If <c>TRUE</c>, lParam is used to specify a text-display rectangle and it
            receives the corresponding window rectangle. If <c>FALSE</c>, lParam is used to specify a window rectangle and it receives
            the corresponding text display rectangle.
            </para>
            <para><em>lParam</em></para>
            <para><c>RECT</c> structure to hold either a tooltip window rectangle or a text display rectangle.</para>
            <para><strong>Returns</strong></para>
            <para>Returns a nonzero value if the rectangle is successfully adjusted, and returns zero if an error occurs.</para>
            </summary>
            <remarks>
            <para>
            This message is particularly useful when you want to use a tooltip control to display the full text of a string that is
            usually truncated. It is commonly used with listview and treeview controls. You typically send this message in response to a
            TTN_SHOW notification code so that you can position the tooltip control properly.
            </para>
            <para>
            The tooltip window rectangle is somewhat larger than the text display rectangle that bounds the tooltip string. The window
            origin is also offset up and to the left from the origin of the text display rectangle. To position the text display
            rectangle, you must calculate the corresponding window rectangle and use that rectangle to position the tooltip.
            <c>TTM_ADJUSTRECT</c> handles this calculation for you.
            </para>
            <para>
            If you set wParam to <c>TRUE</c>, <c>TTM_ADJUSTRECT</c> takes the size and position of the desired tooltip text display
            rectangle, and passes back the size and position of the tooltip window needed to display the text in the specified position.
            If you set wParam to <c>FALSE</c>, you can specify a tooltip window rectangle and <c>TTM_ADJUSTRECT</c> will return the size
            and position of its text rectangle.
            </para>
            <para>
            The following code fragment illustrates the use of the <c>TTM_ADJUSTRECT</c> message to position a tooltip control to display
            the full text of a control's string in place of a truncated string. The application-defined <c>GetMyItemRect</c> function
            returns the text rectangle that will be needed to display the tooltip text directly over the truncated string. The details of
            how this function is implemented will depend on the particular control. <c>TTM_ADJUSTRECT</c> is used to send this text
            rectangle to the tooltip control. It returns an appropriately sized and positioned window rectangle that is then used to
            position the tooltip window.
            </para>
            <para>
            <code>case TTN_SHOW: if (MyStringIsTruncated) { RECT rc; GetMyItemRect(&amp;rc); SendMessage(hwndToolTip, TTM_ADJUSTRECT, TRUE, (LPARAM)&amp;rc); SetWindowPos(hwndToolTip, NULL, rc.left, rc.top, 0, 0, SWP_NOSIZE|SWP_NOZORDER|SWP_NOACTIVATE); }</code>
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolTipMessage.TTM_SETTITLE">
            <summary>Adds a standard icon and title string to a tooltip.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>
            Set wParam to one of the following values to specify the icon to be displayed. As of Windows XP SP2 and later, this parameter
            can also contain an <c>HICON</c> value. Any value greater than TTI_ERROR is assumed to be an <c>HICON</c>.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term><c>TTI_NONE</c></term>
            <term>No icon.</term>
            </item>
            <item>
            <term><c>TTI_INFO</c></term>
            <term>Info icon.</term>
            </item>
            <item>
            <term><c>TTI_WARNING</c></term>
            <term>Warning icon</term>
            </item>
            <item>
            <term><c>TTI_ERROR</c></term>
            <term>Error Icon</term>
            </item>
            <item>
            <term><c>TTI_INFO_LARGE</c></term>
            <term>Large error Icon</term>
            </item>
            <item>
            <term><c>TTI_WARNING_LARGE</c></term>
            <term>Large error Icon</term>
            </item>
            <item>
            <term><c>TTI_ERROR_LARGE</c></term>
            <term>Large error Icon</term>
            </item>
            </list>
            <para><em>lParam</em></para>
            <para>Pointer to the title string. You must assign a value to lParam.</para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> if successful, <c>FALSE</c> if not.</para>
            </summary>
            <remarks>
            <para>
            The title of a tooltip appears above the text, in a different font. It is not sufficient to have a title; the tooltip must
            have text as well, or it is not displayed.
            </para>
            <para>When wParam contains an <c>HICON</c>, a copy of the icon is created by the tooltip window.</para>
            <para>
            When calling <c>TTM_SETTITLE</c>, the string pointed to by lParam must not exceed 100 <c>TCHARs</c> in length, including the
            terminating <c>NULL</c>.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolTipMessage.TTM_POPUP">
            <summary>Causes the tooltip to display at the coordinates of the last mouse message.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>The return value is not used.</para>
            </summary>
            <remarks>
            <para>Note</para>
            <para>
            To use this message, you must provide a manifest specifying Comclt32.dll version 6.0. For more information on manifests, see
            Enabling Visual Styles.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolTipMessage.TTM_GETTITLE">
            <summary>Retrieve information concerning the title of a tooltip control.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Pointer to a <c>TTGETTITLE</c> structure that contains information about a tooltip title.</para>
            <para><strong>Returns</strong></para>
            <para>The return value is not used.</para>
            </summary>
            <remarks>
            <para>Note</para>
            <para>
            To use this message, you must provide a manifest specifying Comclt32.dll version 6.0. For more information on manifests, see
            Enabling Visual Styles.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolTipMessage.TTM_SETWINDOWTHEME">
            <summary>Sets the visual style of a tooltip control.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Pointer to a Unicode string that contains the tooltip visual style to set.</para>
            <para><strong>Returns</strong></para>
            <para>The return value is not used.</para>
            </summary>
            <remarks>
            <para>Note</para>
            <para>
            To use this message, you must provide a manifest specifying Comclt32.dll version 6.0. For more information on manifests, see
            Enabling Visual Styles.
            </para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.ToolTipNotification">
            <summary>Tooltip Control Notifications</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolTipNotification.TTN_GETDISPINFO">
            <summary>
            <para>
            Sent by a tooltip control to retrieve information needed to display a tooltip window. This notification code is sent in the
            form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>TTN_GETDISPINFO lpnmtdi = (LPNMTTDISPINFO) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>Pointer to an <c>NMTTDISPINFO</c> structure that identifies the tool that needs text and receives the requested information.</para>
            <para><strong>Returns</strong></para>
            <para>The return value for this notification is not used.</para>
            </summary>
            <remarks>
            Fill the structure's appropriate members to return the requested information to the tooltip control. If your message handler
            sets the <c>uFlags</c> member of the <c>NMTTDISPINFO</c> structure to TTF_DI_SETITEM, the tooltip control stores the
            information and will not request it again.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolTipNotification.TTN_SHOW">
            <summary>
            <para>
            Notifies the owner window that a tooltip control is about to be displayed. This notification code is sent in the form of a
            <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>TTN_SHOW pnmh = (LPNMHDR) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>Pointer to an <c>NMHDR</c> structure.</para>
            <para><strong>Returns</strong></para>
            <para>
            Version 4.70. To display the tooltip in its default location, return zero. To customize the tooltip position, reposition the
            tooltip window with the <c>SetWindowPos</c> function and return <c>TRUE</c>.
            </para>
            <para>
            <para>Note</para>
            <para>For versions earlier than 4.70, there is no return value.</para>
            </para>
            </summary>
            <remarks>
            A tooltip window rectangle is somewhat larger than its text display rectangle, and its origin is offset up and to the left.
            If you need to accurately position the text display rectangle of a tooltip, the <c>TTM_ADJUSTRECT</c> message converts a text
            display rectangle into the corresponding tooltip window rectangle and vice versa.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolTipNotification.TTN_POP">
            <summary>
            <para>
            Notifies the owner window that a tooltip is about to be hidden. This notification code is sent in the form of a
            <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>TTN_POP pnmh = (LPNMHDR) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>Pointer to an <c>NMHDR</c> structure.</para>
            <para><strong>Returns</strong></para>
            <para>No return value.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolTipNotification.TTN_LINKCLICK">
            <summary>
            <para>
            Sent when a text link inside a balloon tooltip is clicked. This notification code is sent in the form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>TTN_LINKCLICK</code>
            </para>
            <para><strong>Returns</strong></para>
            <para>Return value not used.</para>
            </summary>
            <remarks>
            <para>
            Following is an example of when this notification is sent. Assume that your balloon tooltip contains the following text,
            "This is a link". When "link" is clicked, the tooltip control sends a TTN_LINKCLICK notification code.
            </para>
            <para>
            <para>Note</para>
            <para>
            To use this notification code, you must provide a manifest specifying Comclt32.dll version 6.0. For more information on
            manifests, see Enabling Visual Styles.
            </para>
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.ToolTipNotification.TTN_NEEDTEXT">
            <summary>
            <para>
            Sent by a tooltip control to retrieve information needed to display a tooltip window. This notification code is identical to
            TTN_GETDISPINFO. This notification code is sent in the form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>TTN_NEEDTEXT lpnmtdi = (LPNMTTDISPINFO) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>Pointer to an <c>NMTTDISPINFO</c> structure that identifies the tool that needs text and receives the requested information.</para>
            <para><strong>Returns</strong></para>
            <para>The return value for this notification is not used.</para>
            </summary>
            <remarks>
            Fill the structure's appropriate members to return the requested information to the tooltip control. If your message handler
            sets the <c>uFlags</c> member of the <c>NMTTDISPINFO</c> structure to TTF_DI_SETITEM, the tooltip control stores the
            information and will not request it again.
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.NMTTDISPINFO">
            <summary>
            Contains information used in handling the TTN_GETDISPINFO notification code. This structure supersedes the TOOLTIPTEXT structure.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTTDISPINFO.hdr">
            <summary>NMHDR structure that contains additional information about the notification.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTTDISPINFO.lpszText">
            <summary>
            Pointer to a null-terminated string that will be displayed as the tooltip text. If hinst specifies an instance handle, this
            member must be the identifier of a string resource.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTTDISPINFO.szText">
            <summary>
            Buffer that receives the tooltip text. An application can copy the text to this buffer instead of specifying a string address
            or string resource. For tooltip text that exceeds 80 TCHARs, see comments in the remarks section of this document.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTTDISPINFO.hinst">
            <summary>
            Handle to the instance that contains a string resource to be used as the tooltip text. If lpszText is the address of the
            tooltip text string, this member must be NULL.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTTDISPINFO.uFlags">
            <summary>
            Flags that indicates how to interpret the idFrom member of the included NMHDR structure.
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>TTF_IDISHWND</term>
            <description>If this flag is set, idFrom is the tool's handle. Otherwise, it is the tool's identifier.</description>
            </item>
            <item>
            <term>TTF_RTLREADING</term>
            <description>
            Windows can be mirrored to display languages such as Hebrew or Arabic that read right-to-left (RTL). Normally, tooltip text
            is read in same direction as the text in its parent window. To have a tooltip read in the opposite direction from its parent
            window, add the TTF_RTLREADING flag to the uFlags member when processing the notification.
            </description>
            </item>
            <item>
            <term>TTF_DI_SETITEM</term>
            <description>
            Version 4.70. If you add this flag to uFlags while processing the notification, the tooltip control will retain the supplied
            information and not request it again.
            </description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTTDISPINFO.lParam">
            <summary>Version 4.70. Application-defined data associated with the tool.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.TOOLINFO">
            <summary>The TOOLINFO structure contains information about a tool in a tooltip control.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TOOLINFO.cbSize">
            <summary>Size of this structure, in bytes. This member must be specified.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TOOLINFO.uFlags">
            <summary>Flags that control the tooltip display. This member can be a combination of the following values:</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TOOLINFO.hwnd">
            <summary>
            Handle to the window that contains the tool. If lpszText includes the LPSTR_TEXTCALLBACK value, this member identifies the
            window that receives the TTN_GETDISPINFO notification codes.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TOOLINFO.uId">
            <summary>
            Application-defined identifier of the tool. If uFlags includes the TTF_IDISHWND flag, uId must specify the window handle to
            the tool.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TOOLINFO.rect">
            <summary>
            The bounding rectangle coordinates of the tool. The coordinates are relative to the upper-left corner of the client area of
            the window identified by hwnd. If uFlags includes the TTF_IDISHWND flag, this member is ignored.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TOOLINFO.hinst">
            <summary>
            Handle to the instance that contains the string resource for the tool. If lpszText specifies the identifier of a string
            resource, this member is used.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TOOLINFO.lpszText">
            <summary>
            Pointer to the buffer that contains the text for the tool, or identifier of the string resource that contains the text. This
            member is sometimes used to return values. If you need to examine the returned value, must point to a valid buffer of
            sufficient size. Otherwise, it can be set to NULL. If lpszText is set to LPSTR_TEXTCALLBACK, the control sends the
            TTN_GETDISPINFO notification code to the owner window to retrieve the text.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TOOLINFO.lParam">
            <summary>Version 4.70 and later. A 32-bit application-defined value that is associated with the tool.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TOOLINFO.lpReserved">
            <summary>Reserved. Must be set to NULL.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.TTGETTITLE">
            <summary>Provides information about the title of a tooltip control.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TTGETTITLE.dwSize">
            <summary>DWORD that specifies size of structure. Set to sizeof(TTGETTITLE).</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TTGETTITLE.uTitleBitmap">
            <summary>UINT that specifies the tooltip icon.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TTGETTITLE.cch">
            <summary>UINT that specifies the number of characters in the title.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TTGETTITLE.pszTitle">
            <summary>Pointer to a wide character string that contains the title.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.TTHITTESTINFO">
            <summary>
            Contains information that a tooltip control uses to determine whether a point is in the bounding rectangle of the specified tool.
            If the point is in the rectangle, the structure receives information about the tool.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TTHITTESTINFO.hwnd">
            <summary>Handle to the tool or window with the specified tool.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TTHITTESTINFO.pt">
            <summary>Client coordinates of the point to test.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TTHITTESTINFO.ti">
            <summary>
            TOOLINFO structure. If the point specified by pt is in the tool specified by hwnd, this structure receives information about
            the tool. The cbSize member of this structure must be filled in before sending this message.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.TrackBarCustomDraw">
            <summary>Custom Draw values, for example, are specified in the dwItemSpec member of the NMCUSTOMDRAW structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TrackBarCustomDraw.TBCD_CHANNEL">
            <summary>Identifies the channel that the trackbar control's thumb marker slides along.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TrackBarCustomDraw.TBCD_THUMB">
            <summary>Identifies the trackbar control's thumb marker. This is the part of the control that the user moves.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TrackBarCustomDraw.TBCD_TICS">
            <summary>Identifies the tick marks that are displayed along the trackbar control's edge.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.TrackBarMessage">
            <summary>Messages for trackbar.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TrackBarMessage.TBM_GETPOS">
            <summary>
            Retrieves the current logical position of the slider in a trackbar. The logical positions are the integer values in the
            trackbar's range of minimum to maximum slider positions.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns a 32-bit value that specifies the current logical position of the trackbar's slider.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TrackBarMessage.TBM_GETRANGEMIN">
            <summary>Retrieves the minimum position for the slider in a trackbar.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns a 32-bit value that specifies the minimum position in the trackbar's range of minimum to maximum slider positions.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TrackBarMessage.TBM_GETRANGEMAX">
            <summary>Retrieves the maximum position for the slider in a trackbar.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns a 32-bit value that specifies the maximum position in the trackbar's range of minimum to maximum slider positions.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TrackBarMessage.TBM_GETTIC">
            <summary>
            Retrieves the logical position of a tick mark in a trackbar. The logical position can be any of the integer values in the
            trackbar's range of minimum to maximum slider positions.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>
            Zero-based index identifying a tick mark. Valid indexes are in the range from zero to two less than the tick count returned
            by the <c>TBM_GETNUMTICS</c> message.
            </para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the logical position of the specified tick mark, or -1 if wParam does not specify a valid index.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TrackBarMessage.TBM_SETTIC">
            <summary>Sets a tick mark in a trackbar at the specified logical position.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>
            Position of the tick mark. This parameter can be any of the integer values in the trackbar's range of minimum to maximum
            slider positions.
            </para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> if the tick mark is set, or <c>FALSE</c> otherwise.</para>
            </summary>
            <remarks>
            A trackbar creates its own first and last tick marks. Do not use this message to set the first and last tick marks.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TrackBarMessage.TBM_SETPOS">
            <summary>Sets the current logical position of the slider in a trackbar.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>
            Redraw flag. If this parameter is <c>TRUE</c>, the message redraws the control with the slider at the position given by
            lParam. If this parameter is <c>FALSE</c>, the message does not redraw the slider at the new position. Note that the message
            sets the value of the slider position (as returned by the <c>TBM_GETPOS</c> message) regardless of the wParam parameter.
            </para>
            <para><em>lParam</em></para>
            <para>
            New logical position of the slider. Valid logical positions are the integer values in the trackbar's range of minimum to
            maximum slider positions. If this value is outside the control's maximum and minimum range, the position is set to the
            maximum or minimum value.
            </para>
            <para><strong>Returns</strong></para>
            <para>No return value.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TrackBarMessage.TBM_SETRANGE">
            <summary>Sets the range of minimum and maximum logical positions for the slider in a trackbar.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>
            Redraw flag. If this parameter is <c>TRUE</c>, the trackbar is redrawn after the range is set. If this parameter is
            <c>FALSE</c>, the message sets the range but does not redraw the trackbar.
            </para>
            <para><em>lParam</em></para>
            <para>The <c>LOWORD</c> specifies the minimum position for the slider, and the <c>HIWORD</c> specifies the maximum position.</para>
            <para><strong>Returns</strong></para>
            <para>No return value.</para>
            </summary>
            <remarks>
            <para>
            If the current slider position is outside the new range, the <c>TBM_SETRANGE</c> message sets the slider position to the new
            maximum or minimum value.
            </para>
            <para>
            Because this message takes two 16-bit unsigned integer values, the maximum range that this message can specify is from 0 to
            65,535. To specify larger range values, use the <c>TBM_SETRANGEMIN</c> and <c>TBM_SETRANGEMAX</c> messages.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TrackBarMessage.TBM_SETRANGEMIN">
            <summary>Sets the minimum logical position for the slider in a trackbar.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>
            Redraw flag. If this parameter is <c>TRUE</c>, the message redraws the trackbar after the range is set. If this parameter is
            <c>FALSE</c>, the message sets the range but does not redraw the trackbar.
            </para>
            <para><em>lParam</em></para>
            <para>Minimum position for the slider.</para>
            <para><strong>Returns</strong></para>
            <para>No return value.</para>
            </summary>
            <remarks>
            If the current slider position is less than the new minimum, the <c>TBM_SETRANGEMIN</c> message sets the slider position to
            the new minimum value.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TrackBarMessage.TBM_SETRANGEMAX">
            <summary>Sets the maximum logical position for the slider in a trackbar.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>
            Redraw flag. If this parameter is <c>TRUE</c>, the trackbar is redrawn after the range is set. If this parameter is
            <c>FALSE</c>, the message sets the range but does not redraw the trackbar.
            </para>
            <para><em>lParam</em></para>
            <para>Maximum position for the slider.</para>
            <para><strong>Returns</strong></para>
            <para>No return value.</para>
            </summary>
            <remarks>
            If the current slider position is greater than the new maximum, the <c>TBM_SETRANGEMAX</c> message sets the slider position
            to the new maximum value.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TrackBarMessage.TBM_CLEARTICS">
            <summary>
            Removes the current tick marks from a trackbar. This message does not remove the first and last tick marks, which are created
            automatically by the trackbar.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>
            Redraw flag. If this parameter is <c>TRUE</c>, the trackbar is redrawn after the tick marks are cleared. If this parameter is
            <c>FALSE</c>, the message clears the tick marks but does not redraw the trackbar.
            </para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>No return value.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TrackBarMessage.TBM_SETSEL">
            <summary>Sets the starting and ending positions for the available selection range in a trackbar.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>
            Redraw flag. If this parameter is <c>TRUE</c>, the message redraws the trackbar after the selection range is set. If this
            parameter is <c>FALSE</c>, the message sets the selection range but does not redraw the trackbar.
            </para>
            <para><em>lParam</em></para>
            <para>
            The <c>LOWORD</c> specifies the starting logical position for the selection range, and the <c>HIWORD</c> specifies the ending
            logical position.
            </para>
            <para><strong>Returns</strong></para>
            <para>No return value.</para>
            </summary>
            <remarks>
            <para>This message is ignored if the trackbar does not have the <c>TBS_ENABLESELRANGE</c> style.</para>
            <para><c>TBM_SETSEL</c> allows you to restrict the pointer to only a portion of the range available to the progress bar.</para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TrackBarMessage.TBM_SETSELSTART">
            <summary>
            Sets the starting logical position of the current selection range in a trackbar. This message is ignored if the trackbar does
            not have the <c>TBS_ENABLESELRANGE</c> style.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>
            Redraw flag. If this parameter is <c>TRUE</c>, the message redraws the trackbar after the selection range is set. If this
            parameter is <c>FALSE</c>, the message sets the selection range but does not redraw the trackbar.
            </para>
            <para><em>lParam</em></para>
            <para>Starting position of the selection range.</para>
            <para><strong>Returns</strong></para>
            <para>No return value.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TrackBarMessage.TBM_SETSELEND">
            <summary>
            Sets the ending logical position of the current selection range in a trackbar. This message is ignored if the trackbar does
            not have the <c>TBS_ENABLESELRANGE</c> style.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>
            Redraw flag. If this parameter is <c>TRUE</c>, the message redraws the trackbar after the selection range is set. If this
            parameter is <c>FALSE</c>, the message sets the selection range but does not redraw the trackbar.
            </para>
            <para><em>lParam</em></para>
            <para>Ending logical position of the selection range.</para>
            <para><strong>Returns</strong></para>
            <para>No return value.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TrackBarMessage.TBM_GETPTICS">
            <summary>Retrieves the address of an array that contains the positions of the tick marks for a trackbar.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>
            Returns the address of an array of <c>DWORD</c> values. The elements of the array specify the logical positions of the
            trackbar's tick marks, not including the first and last tick marks created by the trackbar. The logical positions can be any
            of the integer values in the trackbar's range of minimum to maximum slider positions.
            </para>
            </summary>
            <remarks>
            The number of elements in the array is two less than the tick count returned by the <c>TBM_GETNUMTICS</c> message. Note that
            the values in the array may include duplicate positions and may not be in sequential order. The returned pointer is valid
            until you change the trackbar's tick marks.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TrackBarMessage.TBM_GETTICPOS">
            <summary>Retrieves the current physical position of a tick mark in a trackbar.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>
            Zero-based index identifying a tick mark. The positions of the first and last tick marks are not directly available via this message.
            </para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>
            Returns the distance, in client coordinates, from the left or top of the trackbar's client area to the specified tick mark.
            The return value is the x-coordinate of the tick mark for a horizontal trackbar or the y-coordinate for a vertical trackbar.
            If wParam is not a valid index, the return value is -1.
            </para>
            </summary>
            <remarks>
            <para>
            Because the first and last tick marks are not available through this message, valid indexes are offset from their tick
            position on the trackbar. If the difference between <c>TBM_GETRANGEMIN</c> and <c>TBM_GETRANGEMAX</c> is less than two, then
            there is no valid index and this message will fail.
            </para>
            <para>
            The following illustrates the relation between the ticks on a trackbar, the ticks available through this message, and their
            zero-based indexes.
            </para>
            <para>
            <code>0 1 2 3 4 5 6 7 8 9 // Tick positions seen on the trackbar. 1 2 3 4 5 6 7 8 // Tick positions whose position can be identified. 0 1 2 3 4 5 6 7 // Index numbers for the identifiable positions.</code>
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TrackBarMessage.TBM_GETNUMTICS">
            <summary>Retrieves the number of tick marks in a trackbar.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>
            If no tick flag is set, it returns 2 for the beginning and ending ticks. If <c>TBS_NOTICKS</c> is set, it returns zero.
            Otherwise, it takes the difference between the range minimum and maximum, divides by the tick frequency, and adds 2.
            </para>
            </summary>
            <remarks>
            The <c>TBM_GETNUMTICS</c> message counts all of the tick marks, including the first and last tick marks created by the trackbar.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TrackBarMessage.TBM_GETSELSTART">
            <summary>Retrieves the starting position of the current selection range in a trackbar.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns a 32-bit value that specifies the starting position of the current selection range.</para>
            </summary>
            <remarks>
            A trackbar can have a selection range only if you specified the <c>TBS_ENABLESELRANGE</c> style when you created it.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TrackBarMessage.TBM_GETSELEND">
            <summary>Retrieves the ending position of the current selection range in a trackbar.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns a 32-bit value that specifies the ending position of the current selection range.</para>
            </summary>
            <remarks>
            A trackbar can have a selection range only if you specified the <c>TBS_ENABLESELRANGE</c> style when you created it.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TrackBarMessage.TBM_CLEARSEL">
            <summary>Clears the current selection range in a trackbar.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Redraw flag. If this parameter is <c>TRUE</c>, the trackbar is redrawn after the selection is cleared.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>No return value.</para>
            </summary>
            <remarks>
            A trackbar can have a selection range only if you specified the <c>TBS_ENABLESELRANGE</c> style when you created it.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TrackBarMessage.TBM_SETTICFREQ">
            <summary>
            Sets the interval frequency for tick marks in a trackbar. For example, if the frequency is set to two, a tick mark is
            displayed for every other increment in the trackbar's range. The default setting for the frequency is one; that is, every
            increment in the range is associated with a tick mark.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Frequency of the tick marks.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>No return value.</para>
            </summary>
            <remarks>The trackbar must have the <c>TBS_AUTOTICKS</c> style to use this message.</remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TrackBarMessage.TBM_SETPAGESIZE">
            <summary>
            Sets the number of logical positions the trackbar's slider moves in response to keyboard input, such as the or keys, or mouse
            input, such as clicks in the trackbar's channel. The logical positions are the integer increments in the trackbar's range of
            minimum to maximum slider positions.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>New page size.</para>
            <para><strong>Returns</strong></para>
            <para>Returns a 32-bit value that specifies the previous page size.</para>
            </summary>
            <remarks>
            The trackbar also sends a <c>WM_HSCROLL</c> or <c>WM_VSCROLL</c> message with the TB_PAGEUP and TB_PAGEDOWN notification
            codes to its parent window when it receives keyboard or mouse input that scrolls the page.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TrackBarMessage.TBM_GETPAGESIZE">
            <summary>
            Retrieves the number of logical positions the trackbar's slider moves in response to keyboard input, such as the or keys, or
            mouse input, such as clicks in the trackbar's channel. The logical positions are the integer increments in the trackbar's
            range of minimum to maximum slider positions.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns a 32-bit value that specifies the page size for the trackbar.</para>
            </summary>
            <remarks>
            The trackbar also sends a <c>WM_HSCROLL</c> or <c>WM_VSCROLL</c> message with the TB_PAGEUP and TB_PAGEDOWN notification
            codes to its parent window when it receives keyboard or mouse input that scrolls the page.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TrackBarMessage.TBM_SETLINESIZE">
            <summary>
            Sets the number of logical positions the trackbar's slider moves in response to keyboard input from the arrow keys, such as
            the or keys. The logical positions are the integer increments in the trackbar's range of minimum to maximum slider positions.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>New line size.</para>
            <para><strong>Returns</strong></para>
            <para>Returns a 32-bit value that specifies the previous line size.</para>
            </summary>
            <remarks>
            <para>The default setting for the line size is 1.</para>
            <para>
            The trackbar also sends a <c>WM_HSCROLL</c> or <c>WM_VSCROLL</c> message with the TB_LINEUP and TB_LINEDOWN notification
            codes to its parent window when the user presses the arrow keys.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TrackBarMessage.TBM_GETLINESIZE">
            <summary>
            Retrieves the number of logical positions the trackbar's slider moves in response to keyboard input from the arrow keys, such
            as the or keys. The logical positions are the integer increments in the trackbar's range of minimum to maximum slider positions.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns a 32-bit value that specifies the line size for the trackbar.</para>
            </summary>
            <remarks>
            <para>The default setting for the line size is 1.</para>
            <para>
            The trackbar also sends a <c>WM_HSCROLL</c> or <c>WM_VSCROLL</c> message with the TB_LINEUP and TB_LINEDOWN notification
            codes to its parent window when the user presses the arrow keys.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TrackBarMessage.TBM_GETTHUMBRECT">
            <summary>Retrieves the size and position of the bounding rectangle for the slider in a trackbar.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>
            Pointer to a <c>RECT</c> structure. The message fills this structure with the bounding rectangle of the trackbar's slider in
            client coordinates of the trackbar's window.
            </para>
            <para><strong>Returns</strong></para>
            <para>No return value.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TrackBarMessage.TBM_GETCHANNELRECT">
            <summary>
            Retrieves the size and position of the bounding rectangle for a trackbar's channel. (The channel is the area over which the
            slider moves. It contains the highlight when a range is selected.)
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>
            Pointer to a <c>RECT</c> structure. The message fills this structure with the channel's bounding rectangle, in client
            coordinates of the trackbar's window.
            </para>
            <para><strong>Returns</strong></para>
            <para>No return value.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TrackBarMessage.TBM_SETTHUMBLENGTH">
            <summary>
            Sets the length of the slider in a trackbar. This message is ignored if the trackbar does not have the <c>TBS_FIXEDLENGTH</c> style.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Length, in pixels, of the slider.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>No return value.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TrackBarMessage.TBM_GETTHUMBLENGTH">
            <summary>Retrieves the length of the slider in a trackbar.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the length, in pixels, of the slider.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TrackBarMessage.TBM_SETTOOLTIPS">
            <summary>Assigns a tooltip control to a trackbar control.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Handle to an existing tooltip control.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>The return value for this message is not used.</para>
            </summary>
            <remarks>
            When a trackbar control is created with the <c>TBS_TOOLTIPS</c> style, it creates a default tooltip control that appears next
            to the slider, displaying the slider's current position.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TrackBarMessage.TBM_GETTOOLTIPS">
            <summary>Retrieves the handle to the tooltip control assigned to the trackbar, if any.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>
            Returns the handle to the tooltip control assigned to the trackbar, or <c>NULL</c> if tooltips are not in use. If the
            trackbar control does not use the <c>TBS_TOOLTIPS</c> style, the return value is <c>NULL</c>.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TrackBarMessage.TBM_SETTIPSIDE">
            <summary>
            Positions a tooltip control used by a trackbar control. Trackbar controls that use the <c>TBS_TOOLTIPS</c> style display tooltips.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Value representing the location at which to display the tooltip control. This value can be one of the following:</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term><c>TBTS_TOP</c></term>
            <term>The tooltip control will be positioned above the trackbar. This flag is for use with horizontal trackbars.</term>
            </item>
            <item>
            <term><c>TBTS_LEFT</c></term>
            <term>The tooltip control will be positioned to the left of the trackbar. This flag is for use with vertical trackbars.</term>
            </item>
            <item>
            <term><c>TBTS_BOTTOM</c></term>
            <term>The tooltip control will be positioned below the trackbar. This flag is for use with horizontal trackbars.</term>
            </item>
            <item>
            <term><c>TBTS_RIGHT</c></term>
            <term>The tooltip control will be positioned to the right of the trackbar. This flag is for use with vertical trackbars.</term>
            </item>
            </list>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>
            Returns a value that represents the tooltip control's previous location. The return value equals one of the possible values
            for wParam.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TrackBarMessage.TBM_SETBUDDY">
            <summary>
            Assigns a window as the buddy window for a trackbar control. Trackbar buddy windows are automatically displayed in a location
            relative to the control's orientation (horizontal or vertical).
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Value specifying the location at which to display the buddy window. This value can be one of the following:</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term><c>TRUE</c></term>
            <term>
            The buddy will appear to the left of the trackbar if the trackbar control uses the <c>TBS_HORZ</c> style. If the trackbar
            uses the <c>TBS_VERT</c> style, the buddy appears above the trackbar control.
            </term>
            </item>
            <item>
            <term><c>FALSE</c></term>
            <term>
            The buddy will appear to the right of the trackbar if the trackbar control uses the <c>TBS_HORZ</c> style. If the trackbar
            uses the <c>TBS_VERT</c> style, the buddy appears below the trackbar control.
            </term>
            </item>
            </list>
            <para><em>lParam</em></para>
            <para>Handle to the window that will be set as the trackbar control's buddy.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the handle to the window that was previously assigned to the control at that location.</para>
            </summary>
            <remarks>
            <para>Note</para>
            <para>
            Trackbar controls support up to two buddy windows. This can be useful when you must display text or images at each end of the control.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TrackBarMessage.TBM_GETBUDDY">
            <summary>
            Retrieves the handle to a trackbar control buddy window at a given location. The specified location is relative to the
            control's orientation (horizontal or vertical).
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Value indicating which buddy window handle will be retrieved, by relative location. This value can be one of the following:</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term><c><c>TRUE</c></c></term>
            <term>
            Retrieves the handle to the buddy to the left of the trackbar. If the trackbar control uses the <c>TBS_VERT</c> style, the
            message will retrieve the buddy above the trackbar.
            </term>
            </item>
            <item>
            <term><c><c>FALSE</c></c></term>
            <term>
            Retrieves the handle to the buddy to the right of the trackbar. If the trackbar control uses the <c>TBS_VERT</c> style, the
            message will retrieve the buddy below the trackbar.
            </term>
            </item>
            </list>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>
            Returns the handle to the buddy window at the location specified by wParam, or <c>NULL</c> if no buddy window exists at that location.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TrackBarMessage.TBM_SETPOSNOTIFY">
            <summary>Sets the current logical position of the slider in a trackbar.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>wParam is unused.</para>
            <para><em>lParam</em></para>
            <para>
            New logical position of the slider. Valid logical positions are the integer values in the trackbar's range of minimum to
            maximum slider positions. If this value is outside the control's maximum and minimum range, the position is set to the
            maximum or minimum value.
            </para>
            <para><strong>Returns</strong></para>
            <para>No return value.</para>
            </summary>
            <remarks>
            Calling <c>TBM_SETPOSNOTIFY</c> will set the trackbar slider location like <c>TBM_SETPOS</c> would, but it will also cause
            the trackbar to notify its parent of a move via a <c>WM_HSCROLL</c> or <c>WM_VSCROLL</c> message.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TrackBarMessage.TBM_SETUNICODEFORMAT">
            <summary>
            Sets the Unicode character format flag for the control. This message allows you to change the character set used by the
            control at run time rather than having to re-create the control.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>
            Determines the character set that is used by the control. If this value is nonzero, the control will use Unicode characters.
            If this value is zero, the control will use ANSI characters.
            </para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the previous Unicode format flag for the control.</para>
            </summary>
            <remarks>See the remarks for <c>CCM_SETUNICODEFORMAT</c> for a discussion of this message.</remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TrackBarMessage.TBM_GETUNICODEFORMAT">
            <summary>Retrieves the Unicode character format flag for the control.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>
            Returns the Unicode format flag for the control. If this value is nonzero, the control is using Unicode characters. If this
            value is zero, the control is using ANSI characters.
            </para>
            </summary>
            <remarks>See the remarks for <c>CCM_GETUNICODEFORMAT</c> for a discussion of this message.</remarks>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.TrackBarNotification">
            <summary>Notification messages for trackbar.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TrackBarNotification.TRBN_THUMBPOSCHANGING">
            <summary>
            <para>
            Notifies that the thumb position on a trackbar is changing. This notification code is sent in the form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>TRBN_THUMBPOSCHANGING lpNMTrbThumbPosChanging = (NMTRBTHUMBPOSCHANGING*) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>
            Pointer to a <c>NMTRBTHUMBPOSCHANGING</c> structure. The caller is responsible for allocating this structure and setting its
            members, including the members of the contained <c>NMHDR</c> structure.
            </para>
            <para><strong>Returns</strong></para>
            <para>Return <c>TRUE</c> to prevent the thumb from moving to the specified position.</para>
            </summary>
            <remarks>Send this notification to clients that do not listen for <c>WM_HSCROLL</c> or <c>WM_VSCROLL</c> messages.</remarks>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.TrackBarScrollNotification">
            <summary>A notification code that indicates the user's interaction with the trackbar.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TrackBarScrollNotification.TB_LINEUP">
            <summary>The user pressed the LEFT ARROW (VK_LEFT) or UP ARROW (VK_UP) key.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TrackBarScrollNotification.TB_LINEDOWN">
            <summary>The user pressed the RIGHT ARROW (VK_RIGHT) or DOWN ARROW (VK_DOWN) key.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TrackBarScrollNotification.TB_PAGEUP">
            <summary>The user clicked the channel above or to the left of the slider (VK_PRIOR).</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TrackBarScrollNotification.TB_PAGEDOWN">
            <summary>The user clicked the channel below or to the right of the slider (VK_NEXT).</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TrackBarScrollNotification.TB_THUMBPOSITION">
            <summary>The trackbar received WM_LBUTTONUP following a TB_THUMBTRACK notification code.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TrackBarScrollNotification.TB_THUMBTRACK">
            <summary>The user dragged the slider.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TrackBarScrollNotification.TB_TOP">
            <summary>The user pressed the HOME key (VK_HOME).</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TrackBarScrollNotification.TB_BOTTOM">
            <summary>The user pressed the END key (VK_END).</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TrackBarScrollNotification.TB_ENDTRACK">
            <summary>The trackbar received WM_KEYUP, meaning that the user released a key that sent a relevant virtual key code.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.TrackBarStyle">
            <summary>The styles used with trackbar controls.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TrackBarStyle.TBS_AUTOTICKS">
            <summary>The trackbar control has a tick mark for each increment in its range of values.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TrackBarStyle.TBS_VERT">
            <summary>The trackbar control is oriented vertically.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TrackBarStyle.TBS_HORZ">
            <summary>The trackbar control is oriented horizontally. This is the default orientation.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TrackBarStyle.TBS_TOP">
            <summary>The trackbar control displays tick marks above the control. This style is valid only with TBS_HORZ.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TrackBarStyle.TBS_BOTTOM">
            <summary>The trackbar control displays tick marks below the control. This style is valid only with TBS_HORZ.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TrackBarStyle.TBS_LEFT">
            <summary>The trackbar control displays tick marks to the left of the control. This style is valid only with TBS_VERT.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TrackBarStyle.TBS_RIGHT">
            <summary>The trackbar control displays tick marks to the right of the control. This style is valid only with TBS_VERT.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TrackBarStyle.TBS_BOTH">
            <summary>
            The trackbar control displays tick marks on both sides of the control. This will be both top and bottom when used with
            TBS_HORZ or both left and right if used with TBS_VERT.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TrackBarStyle.TBS_NOTICKS">
            <summary>The trackbar control does not display any tick marks.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TrackBarStyle.TBS_ENABLESELRANGE">
            <summary>
            The trackbar control displays a selection range only. The tick marks at the starting and ending positions of a selection
            range are displayed as triangles (instead of vertical dashes), and the selection range is highlighted.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TrackBarStyle.TBS_FIXEDLENGTH">
            <summary>The trackbar control allows the size of the slider to be changed with the TBM_SETTHUMBLENGTH message.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TrackBarStyle.TBS_NOTHUMB">
            <summary>The trackbar control does not display a slider.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TrackBarStyle.TBS_TOOLTIPS">
            <summary>
            The trackbar control supports tooltips. When a trackbar control is created using this style, it automatically creates a
            default tooltip control that displays the slider's current position. You can change where the tooltips are displayed by using
            the TBM_SETTIPSIDE message.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TrackBarStyle.TBS_REVERSED">
            <summary>
            This style bit is used for "reversed" trackbars, where a smaller number indicates "higher" and a larger number indicates
            "lower." It has no effect on the control; it is simply a label that can be checked to determine whether a trackbar is normal
            or reversed.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TrackBarStyle.TBS_DOWNISLEFT">
            <summary>
            By default, the trackbar control uses down equal to right and up equal to left. Use the TBS_DOWNISLEFT style to reverse the
            default, making down equal left and up equal right.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TrackBarStyle.TBS_NOTIFYBEFOREMOVE">
            <summary>TrackBar should notify parent before repositioning the slider due to user action (enables snapping).</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TrackBarStyle.TBS_TRANSPARENTBKGND">
            <summary>Background is painted by the parent via the WM_PRINTCLIENT message.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.TrackBarTipSide">
            <summary>Value representing the location at which to display the tooltip control.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TrackBarTipSide.TBTS_TOP">
            <summary>The tooltip control will be positioned above the trackbar. This flag is for use with horizontal trackbars.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TrackBarTipSide.TBTS_LEFT">
            <summary>The tooltip control will be positioned to the left of the trackbar. This flag is for use with vertical trackbars.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TrackBarTipSide.TBTS_BOTTOM">
            <summary>The tooltip control will be positioned below the trackbar. This flag is for use with horizontal trackbars.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TrackBarTipSide.TBTS_RIGHT">
            <summary>The tooltip control will be positioned to the right of the trackbar. This flag is for use with vertical trackbars.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.NMTRBTHUMBPOSCHANGING">
            <summary>Contains information about a trackbar change notification. This message is sent with the TRBN_THUMBPOSCHANGING notification.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTRBTHUMBPOSCHANGING.dwPos">
            <summary>Position on trackbar.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTRBTHUMBPOSCHANGING.hdr">
            <summary>A NMHDR structure that describes the notification.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTRBTHUMBPOSCHANGING.nReason">
            <summary>
            Type of movement as one of the following values: TB_LINEUP, TB_LINEDOWN, TB_PAGEUP, TB_PAGEDOWN, TB_THUMBPOSITION,
            TB_THUMBTRACK, TB_TOP, TB_BOTTOM, or TB_ENDTRACK.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.I_CHILDRENAUTO">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.I_CHILDRENCALLBACK">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TVCDRF_NOIMAGES">
            <summary>TreeView's custom draw return meaning don't draw images. valid on CDRF_NOTIFYITEMPREPAINT</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.PFNTVCOMPARE">
            <summary>
            An application-defined callback function, which is called during a sort operation each time the relative order of two list items
            needs to be compared.
            </summary>
            <param name="lParam1">Corresponds to the lParam member of the first TVITEM structure for the two items being compared.</param>
            <param name="lParam2">Corresponds to the lParam member of the second TVITEM structure for the two items being compared.</param>
            <param name="lParamSort">Corresponds to the lParam member of this structure.</param>
            <returns>
            The callback function must return a negative value if the first item should precede the second, a positive value if the first
            item should follow the second, or zero if the two items are equivalent.
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.AsyncDrawRetFlags">
            <summary>Action that the sender (the tree-view control) should execute on return.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.AsyncDrawRetFlags.ADRF_DRAWSYNC">
            <summary>
            Proceed to draw the image anyway, that is, synchronously extract the image and paint. Assuming the control is on the UI
            thread, use of this flag implies low priority UI performance, since extraction times may vary and the UI could be
            unresponsive for an extended period of time during extraction.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.AsyncDrawRetFlags.ADRF_DRAWNOTHING">
            <summary>Do not draw an image.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.AsyncDrawRetFlags.ADRF_DRAWFALLBACK">
            <summary>Draw fallback text.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.AsyncDrawRetFlags.ADRF_DRAWIMAGE">
            <summary>Draw the image specified by iRetImageIndex.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.TreeViewActionFlag">
            <summary>Specifies the item to retrieve using TVM_GETNEXTITEM or the action for TVM_SELECTITEM.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewActionFlag.TVGN_CARET">
            <summary>Retrieves the currently selected item. You can use the TreeView_GetSelection macro to send this message.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewActionFlag.TVGN_CHILD">
            <summary>
            Retrieves the first child item of the item specified by the hitem parameter. You can use the TreeView_GetChild macro to send
            this message.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewActionFlag.TVGN_DROPHILITE">
            <summary>
            Retrieves the item that is the target of a drag-and-drop operation. You can use the TreeView_GetDropHilight macro to send
            this message.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewActionFlag.TVGN_FIRSTVISIBLE">
            <summary>
            Retrieves the first item that is visible in the tree-view window. You can use the TreeView_GetFirstVisible macro to send this message.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewActionFlag.TVGN_LASTVISIBLE">
            <summary>
            Version 4.71. Retrieves the last expanded item in the tree. This does not retrieve the last item visible in the tree-view
            window. You can use the TreeView_GetLastVisible macro to send this message.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewActionFlag.TVGN_NEXT">
            <summary>Retrieves the next sibling item. You can use the TreeView_GetNextSibling macro to send this message.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewActionFlag.TVGN_NEXTSELECTED">
            <summary>
            Windows Vista and later. Retrieves the next selected item. You can use the TreeView_GetNextSelected macro to send this message.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewActionFlag.TVGN_NEXTVISIBLE">
            <summary>
            Retrieves the next visible item that follows the specified item. The specified item must be visible. Use the TVM_GETITEMRECT
            message to determine whether an item is visible. You can use the TreeView_GetNextVisible macro to send this message.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewActionFlag.TVGN_PARENT">
            <summary>Retrieves the parent of the specified item. You can use the TreeView_GetParent macro to send this message.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewActionFlag.TVGN_PREVIOUS">
            <summary>Retrieves the previous sibling item. You can use the TreeView_GetPrevSibling macro to send this message.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewActionFlag.TVGN_PREVIOUSVISIBLE">
            <summary>
            Retrieves the first visible item that precedes the specified item. The specified item must be visible. Use the
            TVM_GETITEMRECT message to determine whether an item is visible. You can use the TreeView_GetPrevVisible macro to send this message.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewActionFlag.TVGN_ROOT">
            <summary>
            Retrieves the topmost or very first item of the tree-view control. You can use the TreeView_GetRoot macro to send this message.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewActionFlag.TVSI_NOSINGLEEXPAND">
            <summary>
            When a single item is selected, ensures that the treeview does not expand the children of that item. This is valid only if
            used with the TVGN_CARET flag.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.TreeViewExpandFlags">
            <summary>Action to take when using TVM_EXPAND.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewExpandFlags.TVE_COLLAPSE">
            <summary>Collapses the list.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewExpandFlags.TVE_EXPAND">
            <summary>Expands the list.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewExpandFlags.TVE_TOGGLE">
            <summary>Collapses the list if it is expanded or expands it if it is collapsed.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewExpandFlags.TVE_EXPANDPARTIAL">
            <summary>
            Version 4.70. Partially expands the list. In this state the child items are visible and the parent item's plus sign (+),
            indicating that it can be expanded, is displayed. This flag must be used in combination with the TVE_EXPAND flag.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewExpandFlags.TVE_COLLAPSERESET">
            <summary>
            Collapses the list and removes the child items. The TVIS_EXPANDEDONCE state flag is reset. This flag must be used with the
            TVE_COLLAPSE flag.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.TreeViewHitTestFlags">
            <summary>Information about the results of a hit test.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewHitTestFlags.TVHT_NOWHERE">
            <summary>In the client area, but below the last item.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewHitTestFlags.TVHT_ONITEMICON">
            <summary>On the bitmap associated with an item.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewHitTestFlags.TVHT_ONITEMLABEL">
            <summary>On the label (string) associated with an item.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewHitTestFlags.TVHT_ONITEM">
            <summary>On the bitmap or label associated with an item.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewHitTestFlags.TVHT_ONITEMINDENT">
            <summary>In the indentation associated with an item.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewHitTestFlags.TVHT_ONITEMBUTTON">
            <summary>On the button associated with an item.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewHitTestFlags.TVHT_ONITEMRIGHT">
            <summary>In the area to the right of an item.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewHitTestFlags.TVHT_ONITEMSTATEICON">
            <summary>On the state icon for a tree-view item that is in a user-defined state.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewHitTestFlags.TVHT_ABOVE">
            <summary>Above the client area.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewHitTestFlags.TVHT_BELOW">
            <summary>Below the client area.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewHitTestFlags.TVHT_TORIGHT">
            <summary>To the right of the client area.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewHitTestFlags.TVHT_TOLEFT">
            <summary>To the left of the client area.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.TreeViewInsert">
            <summary>Values used as alternatives to tree item handle (HTREEITEM) in TVINSERTSTRUCT.hInsertAfter.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewInsert.TVI_FIRST">
            <summary>Inserts the item at the beginning of the list.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewInsert.TVI_LAST">
            <summary>Inserts the item at the end of the list.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewInsert.TVI_ROOT">
            <summary>Add the item as a root item.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewInsert.TVI_SORT">
            <summary>Inserts the item into the list in alphabetical order.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.TreeViewItemMask">
            <summary>
            Used in <see cref="T:Vanara.PInvoke.ComCtl32.TVITEM"/> and <see cref="T:Vanara.PInvoke.ComCtl32.TVITEMEX"/> mask members to indicate which structure members contain valid data.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewItemMask.TVIF_CHILDREN">
            <summary>The cChildren member is valid.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewItemMask.TVIF_DI_SETITEM">
            <summary>
            The tree-view control will retain the supplied information and will not request it again. This flag is valid only when
            processing the TVN_GETDISPINFO notification.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewItemMask.TVIF_EXPANDEDIMAGE">
            <summary>Version 6.00 and Windows Vista. The iExpandedImage member is valid.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewItemMask.TVIF_HANDLE">
            <summary>The hItem member is valid.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewItemMask.TVIF_IMAGE">
            <summary>The iImage member is valid.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewItemMask.TVIF_INTEGRAL">
            <summary>The iIntegral member is valid.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewItemMask.TVIF_PARAM">
            <summary>The lParam member is valid.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewItemMask.TVIF_SELECTEDIMAGE">
            <summary>The iSelectedImage member is valid.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewItemMask.TVIF_STATE">
            <summary>The state and stateMask members are valid.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewItemMask.TVIF_STATEEX">
            <summary>Version 6.00 and Windows Vista. The uStateEx member is valid.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewItemMask.TVIF_TEXT">
            <summary>The pszText and cchTextMax members are valid.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.TreeViewItemStates">
            <summary>
            Set of bit flags and image list indexes that indicate the item's state. When setting the state of an item, the stateMask member
            indicates the valid bits of this member. When retrieving the state of an item, this member returns the current state for the bits
            indicated in the stateMask member.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewItemStates.TVIS_SELECTED">
            <summary>
            The item is selected. Its appearance depends on whether it has the focus. The item will be drawn using the system colors for selection.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewItemStates.TVIS_CUT">
            <summary>The item is selected as part of a cut-and-paste operation.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewItemStates.TVIS_DROPHILITED">
            <summary>The item is selected as a drag-and-drop target.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewItemStates.TVIS_BOLD">
            <summary>The item is bold.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewItemStates.TVIS_EXPANDED">
            <summary>
            The item's list of child items is currently expanded; that is, the child items are visible. This value applies only to parent items.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewItemStates.TVIS_EXPANDEDONCE">
            <summary>
            The item's list of child items has been expanded at least once. The TVN_ITEMEXPANDING and TVN_ITEMEXPANDED notification codes
            are not generated for parent items that have this state set in response to a TVM_EXPAND message. Using TVE_COLLAPSE and
            TVE_COLLAPSERESET with TVM_EXPAND will cause this state to be reset. This value applies only to parent items.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewItemStates.TVIS_EXPANDPARTIAL">
            <summary>
            Version 4.70. A partially expanded tree-view item. In this state, some, but not all, of the child items are visible and the
            parent item's plus symbol is displayed.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewItemStates.TVIS_OVERLAYMASK">
            <summary>Mask for the bits used to specify the item's overlay image index.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewItemStates.TVIS_STATEIMAGEMASK">
            <summary>Mask for the bits used to specify the item's state image index.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewItemStates.TVIS_USERMASK">
            <summary>Same as TVIS_STATEIMAGEMASK.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewItemStates.TVIF_EXPANDEDIMAGE">
            <summary>Version 6.00 and Windows Vista. The iExpandedImage member is valid.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewItemStates.TVIF_STATEEX">
            <summary>Version 6.00 and Windows Vista. The uStateEx member is valid.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.TreeViewItemStatesEx">
            <summary>Tree view item extended states.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewItemStatesEx.TVIS_EX_FLAT">
            <summary>
            Creates a flat item—the item is virtual and is not visible in the tree; instead, its children take its place in the tree
            hierarchy. This state is valid only when adding an item to the tree-view control.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewItemStatesEx.TVIS_EX_DISABLED">
            <summary>Windows Vista and later. Creates a control that is drawn in gray, that the user cannot interact with.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewItemStatesEx.TVIS_EX_HWND">
            <summary>Creates a separate HWND for the item. This state is valid only when adding an item to the tree-view control.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.TreeViewMessage">
            <summary>
            Tree View Messages
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewMessage.TVM_DELETEITEM">
            <summary>
            Removes an item and all its children from a tree-view control. You can send this message explicitly or by using the
            <c>TreeView_DeleteItem</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>
            <c>HTREEITEM</c> handle to the item to delete. If lParam is set to TVI_ROOT or to <c>NULL</c>, all items are deleted. You can
            also use the <c>TreeView_DeleteAllItems</c> macro to delete all items.
            </para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> if successful, or <c>FALSE</c> otherwise.</para>
            </summary>
            <remarks>
            <para>It is not safe to delete items in response to a notification such as TVN_SELCHANGING.</para>
            <para>Once an item is deleted, its handle is invalid and cannot be used.</para>
            <para>The parent window receives a TVN_DELETEITEM notification code when each item is removed.</para>
            <para>
            If the item label is being edited, the edit operation is canceled and the parent window receives the TVN_ENDLABELEDIT
            notification code.
            </para>
            <para>
            If you delete all items in a tree-view control that has the <c>TVS_NOSCROLL</c> style, items subsequently added may not
            display properly. For more information, see <c>TreeView_DeleteAllItems</c>.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewMessage.TVM_EXPAND">
            <summary>
            The <c>TVM_EXPAND</c> message expands or collapses the list of child items associated with the specified parent item, if any.
            You can send this message explicitly or by using the <c>TreeView_Expand</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Action flag. This parameter can be one or more of the following values:</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term><c>TVE_COLLAPSE</c></term>
            <term>Collapses the list.</term>
            </item>
            <item>
            <term><c>TVE_COLLAPSERESET</c></term>
            <term>
            Collapses the list and removes the child items. The <c>TVIS_EXPANDEDONCE</c> state flag is reset. This flag must be used with
            the TVE_COLLAPSE flag.
            </term>
            </item>
            <item>
            <term><c>TVE_EXPAND</c></term>
            <term>Expands the list.</term>
            </item>
            <item>
            <term><c>TVE_EXPANDPARTIAL</c></term>
            <term>
            Version 4.70. Partially expands the list. In this state the child items are visible and the parent item's plus sign (+),
            indicating that it can be expanded, is displayed. This flag must be used in combination with the TVE_EXPAND flag.
            </term>
            </item>
            <item>
            <term><c>TVE_TOGGLE</c></term>
            <term>Collapses the list if it is expanded or expands it if it is collapsed.</term>
            </item>
            </list>
            <para><em>lParam</em></para>
            <para>Handle to the parent item to expand or collapse.</para>
            <para><strong>Returns</strong></para>
            <para>Returns nonzero if the operation was successful, or zero otherwise.</para>
            </summary>
            <remarks>
            <para>
            Expanding a node that is already expanded is considered a successful operation and <c>SendMessage</c> returns a nonzero
            value. Collapsing a node returns zero if the node is already collapsed; otherwise it returns nonzero. Attempting to expand or
            collapse a node that has no children is considered a failure and <c>SendMessage</c> returns zero.
            </para>
            <para>
            When an item is first expanded by a <c>TVM_EXPAND</c> message, the action generates TVN_ITEMEXPANDING and TVN_ITEMEXPANDED
            notification codes and the item's <c>TVIS_EXPANDEDONCE</c> state flag is set. As long as this state flag remains set,
            subsequent <c>TVM_EXPAND</c> messages do not generate TVN_ITEMEXPANDING or TVN_ITEMEXPANDED notifications. To reset the
            <c>TVIS_EXPANDEDONCE</c> state flag, you must send a <c>TVM_EXPAND</c> message with the TVE_COLLAPSE and TVE_COLLAPSERESET
            flags set. Attempting to explicitly set <c>TVIS_EXPANDEDONCE</c> will result in unpredictable behavior.
            </para>
            <para>
            The expand operation may fail if the owner of the treeview control denies the operation in response to a TVN_ITEMEXPANDING notification.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewMessage.TVM_GETITEMRECT">
            <summary>
            Retrieves the bounding rectangle for a tree-view item and indicates whether the item is visible. You can send this message
            explicitly or by using the <c>TreeView_GetItemRect</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>
            Value specifying the portion of the item for which to retrieve the bounding rectangle. If this parameter is <c>TRUE</c>, the
            bounding rectangle includes only the text of the item. Otherwise, it includes the entire line that the item occupies in the
            tree-view control.
            </para>
            <para><em>lParam</em></para>
            <para>
            Pointer to a <c>RECT</c> structure that, when sending the message, contains the handle of the item to retrieve the rectangle
            for. See the example below for more information on how to place the item handle in this parameter. After returning from the
            message, this parameter contains the bounding rectangle. The coordinates are relative to the upper-left corner of the
            tree-view control.
            </para>
            <para><strong>Returns</strong></para>
            <para>
            If the item is visible and the bounding rectangle was successfully retrieved, the return value is <c>TRUE</c>. Otherwise, the
            message returns <c>FALSE</c> and does not retrieve the bounding rectangle.
            </para>
            </summary>
            <remarks>
            <para>
            When sending this message, the lParam parameter contains the handle of the item that the rectangle is being retrieved for.
            The handle is placed in lParam as shown in the following example:
            </para>
            <para>
            <code>RECT rc; *(HTREEITEM*)&amp;rc = hTreeItem; SendMessage(hwndTreeView, TVM_GETITEMRECT, FALSE, (LPARAM)&amp;rc);</code>
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewMessage.TVM_GETCOUNT">
            <summary>
            Retrieves a count of the items in a tree-view control. You can send this message explicitly or by using the
            <c>TreeView_GetCount</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the count of items.</para>
            </summary>
            <remarks>
            The node count returned by <c>TreeView_GetCount</c> is limited to integer values. If you add a node beyond 32767 the macro
            returns a negative value. After adding 65536 nodes the count returns to zero. When this occurs, the tree-view control appears
            empty with no scrollbars.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewMessage.TVM_GETINDENT">
            <summary>
            Retrieves the amount, in pixels, that child items are indented relative to their parent items. You can send this message
            explicitly or by using the <c>TreeView_GetIndent</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the amount of indentation.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewMessage.TVM_SETINDENT">
            <summary>
            Sets the width of indentation for a tree-view control and redraws the control to reflect the new width. You can send this
            message explicitly or by using the <c>TreeView_SetIndent</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>
            Width, in pixels, of the indentation. If this parameter is less than the system-defined minimum width, the new width is set
            to the system-defined minimum.
            </para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>No return value.</para>
            </summary>
            <remarks>
            The system-defined minimum indent value is typically five pixels, but it is not fixed. To retrieve the exact value of the
            minimum indent on a particular system, send a <c>TVM_SETINDENT</c> message with wParam set to zero. Then send a
            <c>TVM_GETINDENT</c> message to retrieve the minimum indent value.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewMessage.TVM_GETIMAGELIST">
            <summary>
            Retrieves the handle to the normal or state image list associated with a tree-view control. You can send this message
            explicitly or by using the <c>TreeView_GetImageList</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Type of image list to retrieve. This parameter can be one of the following values:</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term><c>TVSIL_NORMAL</c></term>
            <term>
            Indicates the normal image list, which contains selected, nonselected, and overlay images for the items of a tree-view control.
            </term>
            </item>
            <item>
            <term><c>TVSIL_STATE</c></term>
            <term>
            Indicates the state image list. You can use state images to indicate application-defined item states. A state image is
            displayed to the left of an item's selected or nonselected image.
            </term>
            </item>
            </list>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns an HIMAGELIST handle to the specified image list.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewMessage.TVM_SETIMAGELIST">
            <summary>
            Sets the normal or state image list for a tree-view control and redraws the control using the new images. You can send this
            message explicitly or by using the <c>TreeView_SetImageList</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Type of image list to set. This parameter can be one of the following values:</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term><c>TVSIL_NORMAL</c></term>
            <term>
            Indicates the normal image list, which contains selected, nonselected, and overlay images for the items of a tree-view control.
            </term>
            </item>
            <item>
            <term><c>TVSIL_STATE</c></term>
            <term>
            Indicates the state image list. You can use state images to indicate application-defined item states. A state image is
            displayed to the left of an item's selected or nonselected image.
            </term>
            </item>
            </list>
            <para><em>lParam</em></para>
            <para>
            Handle to the image list. If lParam is <c>NULL</c>, the message removes the specified image list from the tree-view control.
            </para>
            <para><strong>Returns</strong></para>
            <para>Returns the handle to the previous image list, if any, or <c>NULL</c> otherwise.</para>
            </summary>
            <remarks>
            The tree-view control will not destroy the image list specified with this message. Your application must destroy the image
            list when it is no longer needed.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewMessage.TVM_GETNEXTITEM">
            <summary>
            Retrieves the tree-view item that bears the specified relationship to a specified item. You can send this message explicitly,
            by using the <c>TreeView_GetNextItem</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Flag specifying the item to retrieve. This parameter can be one of the following values:</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term><c>TVGN_CARET</c></term>
            <term>Retrieves the currently selected item. You can use the <c>TreeView_GetSelection</c> macro to send this message.</term>
            </item>
            <item>
            <term><c>TVGN_CHILD</c></term>
            <term>
            Retrieves the first child item of the item specified by the <c>hitem</c> parameter. You can use the <c>TreeView_GetChild</c>
            macro to send this message.
            </term>
            </item>
            <item>
            <term><c>TVGN_DROPHILITE</c></term>
            <term>
            Retrieves the item that is the target of a drag-and-drop operation. You can use the <c>TreeView_GetDropHilight</c> macro to
            send this message.
            </term>
            </item>
            <item>
            <term><c>TVGN_FIRSTVISIBLE</c></term>
            <term>
            Retrieves the first item that is visible in the tree-view window. You can use the <c>TreeView_GetFirstVisible</c> macro to
            send this message.
            </term>
            </item>
            <item>
            <term><c>TVGN_LASTVISIBLE</c></term>
            <term>
            Version 4.71. Retrieves the last expanded item in the tree. This does not retrieve the last item visible in the tree-view
            window. You can use the <c>TreeView_GetLastVisible</c> macro to send this message.
            </term>
            </item>
            <item>
            <term><c>TVGN_NEXT</c></term>
            <term>Retrieves the next sibling item. You can use the <c>TreeView_GetNextSibling</c> macro to send this message.</term>
            </item>
            <item>
            <term><c>TVGN_NEXTSELECTED</c></term>
            <term>
            <c>Windows Vista and later.</c> Retrieves the next selected item. You can use the <c>TreeView_GetNextSelected</c> macro to
            send this message.
            </term>
            </item>
            <item>
            <term><c>TVGN_NEXTVISIBLE</c></term>
            <term>
            Retrieves the next visible item that follows the specified item. The specified item must be visible. Use the
            <c>TVM_GETITEMRECT</c> message to determine whether an item is visible. You can use the <c>TreeView_GetNextVisible</c> macro
            to send this message.
            </term>
            </item>
            <item>
            <term><c>TVGN_PARENT</c></term>
            <term>Retrieves the parent of the specified item. You can use the <c>TreeView_GetParent</c> macro to send this message.</term>
            </item>
            <item>
            <term><c>TVGN_PREVIOUS</c></term>
            <term>Retrieves the previous sibling item. You can use the <c>TreeView_GetPrevSibling</c> macro to send this message.</term>
            </item>
            <item>
            <term><c>TVGN_PREVIOUSVISIBLE</c></term>
            <term>
            Retrieves the first visible item that precedes the specified item. The specified item must be visible. Use the
            <c>TVM_GETITEMRECT</c> message to determine whether an item is visible. You can use the <c>TreeView_GetPrevVisible</c> macro
            to send this message.
            </term>
            </item>
            <item>
            <term><c>TVGN_ROOT</c></term>
            <term>
            Retrieves the topmost or very first item of the tree-view control. You can use the <c>TreeView_GetRoot</c> macro to send this message.
            </term>
            </item>
            </list>
            <para><em>lParam</em></para>
            <para>Handle to an item.</para>
            <para><strong>Returns</strong></para>
            <para>
            Returns the handle to the item if successful. For most cases, the message returns a <c>NULL</c> value to indicate an error.
            See the Remarks section for details.
            </para>
            </summary>
            <remarks>
            <para>
            This message will return <c>NULL</c> if the item being retrieved is the root node of the tree. For example, if you use this
            message with the TVGN_PARENT flag on a first-level child of the tree view's root node, the message will return <c>NULL</c>.
            </para>
            <para>You can also use one of these related macros:</para>
            <list type="table">
            <listheader>
            <term/>
            </listheader>
            <item>
            <term><c>TreeView_GetChild</c></term>
            </item>
            <item>
            <term><c>TreeView_GetDropHilight</c></term>
            </item>
            <item>
            <term><c>TreeView_GetFirstVisible</c></term>
            </item>
            <item>
            <term><c>TreeView_GetLastVisible</c></term>
            </item>
            <item>
            <term><c>TreeView_GetNextSibling</c></term>
            </item>
            <item>
            <term><c>TreeView_GetNextVisible</c></term>
            </item>
            <item>
            <term><c>TreeView_GetParent</c></term>
            </item>
            <item>
            <term><c>TreeView_GetPrevSibling</c></term>
            </item>
            <item>
            <term><c>TreeView_GetPrevVisible</c></term>
            </item>
            <item>
            <term><c>TreeView_GetRoot</c></term>
            </item>
            <item>
            <term><c>TreeView_GetSelection</c></term>
            </item>
            </list>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewMessage.TVM_SELECTITEM">
            <summary>
            Selects the specified tree-view item, scrolls the item into view, or redraws the item in the style used to indicate the
            target of a drag-and-drop operation. You can send this message explicitly or by using the <c>TreeView_Select</c>,
            <c>TreeView_SelectItem</c>, or <c>TreeView_SelectDropTarget</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Action flag. This parameter can be one of the following values:</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term><c>TVGN_CARET</c></term>
            <term>
            Sets the selection to the specified item. The tree-view control's parent window receives the TVN_SELCHANGING and
            TVN_SELCHANGED notification codes.
            </term>
            </item>
            <item>
            <term><c>TVGN_DROPHILITE</c></term>
            <term>Redraws the specified item in the style used to indicate the target of a drag-and-drop operation.</term>
            </item>
            <item>
            <term><c>TVGN_FIRSTVISIBLE</c></term>
            <term>
            Ensures that the specified item is visible, and, if possible, displays it at the top of the control's window. Tree-view
            controls display as many items as will fit in the window. If the specified item is near the bottom of the control's hierarchy
            of items, it might not become the first visible item, depending on how many items fit in the window.
            </term>
            </item>
            <item>
            <term><c>TVSI_NOSINGLEEXPAND</c></term>
            <term>
            When a single item is selected, ensures that the treeview does not expand the children of that item. This is valid only if
            used with the TVGN_CARET flag.
            </term>
            </item>
            </list>
            <para><em>lParam</em></para>
            <para>Handle to an item. If lParam is <c>NULL</c>, the control is set to have no selected item.</para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> if successful, or <c>FALSE</c> otherwise.</para>
            </summary>
            <remarks>
            <para>
            If the specified item is the child of a collapsed parent item, the parent's list of child items is expanded to reveal the
            specified item. In this case, the control's parent window receives the TVN_ITEMEXPANDING and TVN_ITEMEXPANDED notification codes.
            </para>
            <para>
            Using the <c>TreeView_SelectItem</c> macro is equivalent to sending the <c>TVM_SELECTITEM</c> message with wParam set to the
            TVGN_CARET value. Using the <c>TreeView_SelectDropTarget</c> macro is equivalent to sending the <c>TVM_SELECTITEM</c> message
            with wParam set to the TVGN_DROPHILITE value. Using <c>TreeView_SelectSetFirstVisible</c> is equivalent to sending the
            <c>TVM_SELECTITEM</c> message with wParam set to the TVGN_FIRSTVISIBLE value.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewMessage.TVM_GETEDITCONTROL">
            <summary>
            Retrieves the handle to the edit control being used to edit a tree-view item's text. You can send this message explicitly or
            by using the <c>TreeView_GetEditControl</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the handle to the edit control if successful, or <c>NULL</c> otherwise.</para>
            </summary>
            <remarks>
            <para>
            When label editing begins, an edit control is created, but not positioned or displayed. Before it is displayed, the tree-view
            control sends its parent window an TVN_BEGINLABELEDIT notification code.
            </para>
            <para>
            To customize label editing, implement a handler for TVN_BEGINLABELEDIT and have it send a <c>TVM_GETEDITCONTROL</c> message
            to the tree-view control. If a label is being edited, the return value will be a handle to the edit control. Use this handle
            to customize the edit control by sending the usual <c>EM_XXX</c> messages.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewMessage.TVM_GETVISIBLECOUNT">
            <summary>
            Obtains the number of items that can be fully visible in the client window of a tree-view control. You can send this message
            explicitly or by using the <c>TreeView_GetVisibleCount</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the number of items that can be fully visible in the client window of the tree-view control.</para>
            </summary>
            <remarks>
            <para>
            The number of items that can be fully visible may be greater than the number of items in the control. The control calculates
            this value by dividing the height of the client window by the height of an item.
            </para>
            <para>
            Note that the return value is the number of items that can be fully visible. If you can see all of 20 items and part of one
            more item, the return value is 20.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewMessage.TVM_HITTEST">
            <summary>
            Determines the location of the specified point relative to the client area of a tree-view control. You can send this message
            explicitly or by using the <c>TreeView_HitTest</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>
            Pointer to a <c>TVHITTESTINFO</c> structure. When the message is sent, the <c>pt</c> member specifies the coordinates of the
            point to test. When the message returns, the <c>hItem</c> member is the handle to the item at the specified point or
            <c>NULL</c> if no item occupies the point. Also, when the message returns, the <c>flags</c> member is a hit test value that
            indicates the location of the specified point. For a list of hit test values, see the description of the <c>TVHITTESTINFO</c> structure.
            </para>
            <para><strong>Returns</strong></para>
            <para>
            Returns the handle to the tree-view item that occupies the specified point, or <c>NULL</c> if no item occupies the point.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewMessage.TVM_CREATEDRAGIMAGE">
            <summary>
            Creates a dragging bitmap for the specified item in a tree-view control. The message also creates an image list for the
            bitmap and adds the bitmap to the image list. An application can display the image when dragging the item by using the image
            list functions. You can send this message explicitly or by using the <c>TreeView_CreateDragImage</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Handle to the item that receives the new dragging bitmap.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the handle to the image list to which the dragging bitmap was added if successful, or <c>NULL</c> otherwise.</para>
            </summary>
            <remarks>
            <para>
            If you create a tree-view control without an associated image list, you cannot use the <c>TVM_CREATEDRAGIMAGE</c> message to
            create the image to display during a drag operation. You must implement your own method of creating a drag cursor.
            </para>
            <para>Your application is responsible for destroying the image list when it is no longer needed.</para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewMessage.TVM_SORTCHILDREN">
            <summary>
            Sorts the child items of the specified parent item in a tree-view control. You can send this message explicitly or by using
            the <c>TreeView_SortChildren</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>
            Value that specifies whether the sorting is recursive. Set wParam to <c>TRUE</c> to sort all levels of child items below the
            parent item. Otherwise, only the parent's immediate children are sorted.
            </para>
            <para><em>lParam</em></para>
            <para>Handle to the parent item whose child items are to be sorted.</para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> if successful, or <c>FALSE</c> otherwise.</para>
            </summary>
            <remarks>
            This message alphabetizes the tree items using <c>lstrcmpi</c> on the item name. You can use the <c>TVM_SORTCHILDRENCB</c>
            message to customize the ordering behavior.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewMessage.TVM_ENSUREVISIBLE">
            <summary>
            Ensures that a tree-view item is visible, expanding the parent item or scrolling the tree-view control, if necessary. You can
            send this message explicitly or by using the <c>TreeView_EnsureVisible</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Handle to the item.</para>
            <para><strong>Returns</strong></para>
            <para>
            Returns nonzero if the system scrolled the items in the tree-view control and no items were expanded. Otherwise, the message
            returns zero.
            </para>
            </summary>
            <remarks>
            If the TVM_ENSUREVISIBLE message expands the parent item, the parent window receives the TVN_ITEMEXPANDING and
            TVN_ITEMEXPANDED notification codes.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewMessage.TVM_SORTCHILDRENCB">
            <summary>
            Sorts tree-view items using an application-defined callback function that compares the items. You can send this message
            explicitly or by using the <c>TreeView_SortChildrenCB</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Reserved. Must be zero.</para>
            <para><em>lParam</em></para>
            <para>
            Pointer to a <c>TVSORTCB</c> structure. The <c>lpfnCompare</c> member is the address of the application-defined callback
            function, which is called during the sort operation each time the relative order of two list items needs to be compared. For
            more information about the callback function, see the description of <c>TVSORTCB</c>.
            </para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> if successful, or <c>FALSE</c> otherwise.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewMessage.TVM_ENDEDITLABELNOW">
            <summary>
            Ends the editing of a tree-view item's label. You can send this message explicitly or by using the
            <c>TreeView_EndEditLabelNow</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>
            Variable that indicates whether the editing is canceled without being saved to the label. If this parameter is <c>TRUE</c>,
            the system cancels editing without saving the changes. Otherwise, the system saves the changes to the label.
            </para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> if successful, or <c>FALSE</c> otherwise.</para>
            </summary>
            <remarks>This message causes the TVN_ENDLABELEDIT notification code to be sent to the parent window of the tree-view control.</remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewMessage.TVM_SETTOOLTIPS">
            <summary>
            Sets a tree-view control's child tooltip control. You can send this message explicitly or by using the
            <c>TreeView_SetToolTips</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Handle to a tooltip control.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>
            Returns the handle to tooltip control previously set for the tree-view control, or <c>NULL</c> if tooltips were not
            previously used.
            </para>
            </summary>
            <remarks>
            When created, tree-view controls automatically create a child tooltip control. To prevent a tree-view control from using
            tooltips, create the control with the <c>TVS_NOTOOLTIPS</c> style.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewMessage.TVM_GETTOOLTIPS">
            <summary>
            Retrieves the handle to the child tooltip control used by a tree-view control. You can send this message explicitly or by
            using the <c>TreeView_GetToolTips</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the handle to the child tooltip control, or <c>NULL</c> if the control is not using tooltips.</para>
            </summary>
            <remarks>
            When created, tree-view controls automatically create a child tooltip control. To cause a tree-view control not to use
            tooltips, create the control with the <c>TVS_NOTOOLTIPS</c> style.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewMessage.TVM_SETINSERTMARK">
            <summary>
            Sets the insertion mark in a tree-view control. You can send this message explicitly or by using the
            <c>TreeView_SetInsertMark</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>
            <c>BOOL</c> value that specifies if the insertion mark is placed before or after the specified item. If this argument is
            nonzero, the insertion mark will be placed after the item. If this argument is zero, the insertion mark will be placed before
            the item.
            </para>
            <para><em>lParam</em></para>
            <para>
            <c>HTREEITEM</c> that specifies at which item the insertion mark will be placed. If this argument is <c>NULL</c>, the
            insertion mark is removed.
            </para>
            <para><strong>Returns</strong></para>
            <para>Returns nonzero if successful, or zero otherwise.</para>
            </summary>
            <remarks>
            In some circumstances, the insert mark can appear in two places after a node is expanded. If you are using insertion marks,
            it is recommended that you force a refresh of the control after expanding a node.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewMessage.TVM_SETUNICODEFORMAT">
            <summary>
            Sets the Unicode character format flag for the control. This message allows you to change the character set used by the
            control at run time rather than having to re-create the control. You can send this message explicitly or use the
            <c>TreeView_SetUnicodeFormat</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>
            Determines the character set that is used by the control. If this value is nonzero, the control will use Unicode characters.
            If this value is zero, the control will use ANSI characters.
            </para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the previous Unicode format flag for the control.</para>
            </summary>
            <remarks>See the remarks for <c>CCM_SETUNICODEFORMAT</c> for a discussion of this message.</remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewMessage.TVM_GETUNICODEFORMAT">
            <summary>
            Retrieves the Unicode character format flag for the control. You can send this message explicitly or use the
            <c>TreeView_GetUnicodeFormat</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>
            Returns the Unicode format flag for the control. If this value is nonzero, the control is using Unicode characters. If this
            value is zero, the control is using ANSI characters.
            </para>
            </summary>
            <remarks>See the remarks for <c>CCM_GETUNICODEFORMAT</c> for a discussion of this message.</remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewMessage.TVM_SETITEMHEIGHT">
            <summary>
            Sets the height of the tree-view items. You can send this message explicitly or by using the <c>TreeView_SetItemHeight</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>
            New height of every item in the tree view, in pixels. Heights less than 1 will be set to 1. If this argument is not even and
            the tree-view control does not have the <c>TVS_NONEVENHEIGHT</c> style, this value will be rounded down to the nearest even
            value. If this argument is -1, the control will revert to using its default item height.
            </para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the previous height of the items, in pixels.</para>
            </summary>
            <remarks>
            The tree-view control uses this value for the height of all items. To modify the height of individual items, see the
            description of the <c>iIntegral</c> member of the <c>TVITEMEX</c> structure.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewMessage.TVM_GETITEMHEIGHT">
            <summary>
            Retrieves the current height of the each tree-view item. You can send this message explicitly or by using the
            <c>TreeView_GetItemHeight</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the height of each item, in pixels.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewMessage.TVM_SETBKCOLOR">
            <summary>
            Sets the background color of the control. You can send this message explicitly or by using the <c>TreeView_SetBkColor</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>
            <c>COLORREF</c> value that contains the new background color. If this value is -1, the control will revert to using the
            system color for the background color.
            </para>
            <para><strong>Returns</strong></para>
            <para>
            Returns a <c>COLORREF</c> value that represents the previous background color. If this value is -1, the control was using the
            system color for the background color.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewMessage.TVM_SETTEXTCOLOR">
            <summary>
            Sets the text color of the control. You can send this message explicitly or by using the <c>TreeView_SetTextColor</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>
            <c>COLORREF</c> value that contains the new text color. If this argument is -1, the control will revert to using the system
            color for the text color.
            </para>
            <para><strong>Returns</strong></para>
            <para>
            Returns a <c>COLORREF</c> value that represents the previous text color. If this value is -1, the control was using the
            system color for the text color.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewMessage.TVM_GETBKCOLOR">
            <summary>
            Retrieves the current background color of the control. You can send this message explicitly or by using the
            <c>TreeView_GetBkColor</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>
            Returns a <c>COLORREF</c> value that represents the current background color. If this value is -1, the control is using the
            system color for the background color.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewMessage.TVM_GETTEXTCOLOR">
            <summary>
            Retrieves the current text color of the control. You can send this message explicitly or by using the
            <c>TreeView_GetTextColor</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>
            Returns a <c>COLORREF</c> value that represents the current text color. If this value is -1, the control is using the system
            color for the text color.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewMessage.TVM_SETSCROLLTIME">
            <summary>
            Sets the maximum scroll time for the tree-view control. You can send this message explicitly or by using the
            <c>TreeView_SetScrollTime</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>New maximum scroll time, in milliseconds.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the previous maximum scroll time, in milliseconds.</para>
            </summary>
            <remarks>
            The maximum scroll time is the longest amount of time that a scroll operation can take. Scrolling will be adjusted so that
            the scroll will take place within the maximum scroll time. A scroll operation may take less time than the maximum.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewMessage.TVM_GETSCROLLTIME">
            <summary>
            Retrieves the maximum scroll time for the tree-view control. You can send this message explicitly or by using the
            <c>TreeView_GetScrollTime</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the maximum scroll time, in milliseconds.</para>
            </summary>
            <remarks>
            The maximum scroll time is the longest amount of time that a scroll operation can take. The scrolling will be adjusted so
            that the scroll will take place within the maximum scroll time. A scroll operation may take less time than the maximum.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewMessage.TVM_SETINSERTMARKCOLOR">
            <summary>
            Sets the color used to draw the insertion mark for the tree view. You can send this message explicitly or by using the
            <c>TreeView_SetInsertMarkColor</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para><c>COLORREF</c> value that contains the new insertion mark color.</para>
            <para><strong>Returns</strong></para>
            <para>Returns a <c>COLORREF</c> value that contains the previous insertion mark color.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewMessage.TVM_GETINSERTMARKCOLOR">
            <summary>
            Retrieves the color used to draw the insertion mark for the tree view. You can send this message explicitly or by using the
            <c>TreeView_GetInsertMarkColor</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns a <c>COLORREF</c> value that contains the current insertion mark color.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewMessage.TVM_SETBORDER">
            <summary>
            <para><c>Intended for internal use; not recommended for use in applications.</c></para>
            <para>
            Sets the size of the border for the items in a tree-view control. You can send the message explicitly or by using the
            <c>TreeView_SetBorder</c> macro.
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Action flags. This parameter can be one or more of the following values:</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term><c>TVSBF_XBORDER</c></term>
            <term>Applies the specified border size to the left side of the items in the tree-view control.</term>
            </item>
            <item>
            <term><c>TVSBF_YBORDER</c></term>
            <term>Applies the specified border size to the top of the items in the tree-view control.</term>
            </item>
            </list>
            <para><em>lParam</em></para>
            <para>
            The <c>LOWORD</c> is a <c>SHORT</c> that specifies the size of the left border, in pixels. The <c>HIWORD</c> is a
            <c>SHORT</c> that specifies the size of the top border, in pixels.
            </para>
            <para><strong>Returns</strong></para>
            <para>
            Returns a <c>LONG</c> value that contains the previous border size, in pixels. The <c>LOWORD</c> contains the previous size
            of the horizontal border, and the <c>HIWORD</c> contains the previous size of the vertical border.
            </para>
            </summary>
            <remarks>
            <para><c>Security Warning:</c> Using this message might compromise the security of your program.</para>
            <para>The item border is set just for spacing purposes. A successful setting triggers a recalculation of the scroll bars.</para>
            <para>
            This message may not be supported in future versions of Comctl32.dll. Also, this message is not defined in commctrl.h. Add
            the following definitions to the source files of your application to use the message:
            </para>
            <para>
            <code>#define TVM_SETBORDER (TV_FIRST + 35) #define TVSBF_XBORDER 0x00000001 #define TVSBF_YBORDER 0x00000002</code>
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewMessage.TVM_GETITEMSTATE">
            <summary>
            Retrieves some or all of a tree-view item's state attributes. You can send this message explicitly or by using the
            <c>TreeView_GetItemState</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Handle to the item.</para>
            <para><em>lParam</em></para>
            <para>Mask used to specify the states to query for. It is equivalent to the <c>stateMask</c> member of <c>TVITEMEX</c>.</para>
            <para><strong>Returns</strong></para>
            <para>
            Returns a <c>UINT</c> value with the appropriate state bits set to <c>TRUE</c>. Only those bits that are specified by lParam
            and that are <c>TRUE</c> will be set. This value is equivalent to the <c>state</c> member of <c>TVITEMEX</c>.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewMessage.TVM_SETLINECOLOR">
            <summary>The <c>TVM_SETLINECOLOR</c> message sets the current line color.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>New line color. Use the CLR_DEFAULT value to restore the system default colors.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the previous line color.</para>
            </summary>
            <remarks>
            This message only changes line colors. To change the colors of the '+' and '-' inside the buttons, use the
            <c>TVM_SETTEXTCOLOR</c> message.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewMessage.TVM_GETLINECOLOR">
            <summary>The <c>TVM_GETLINECOLOR</c> message gets the current line color.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the current line color, or the CLR_DEFAULT value if none has been specified.</para>
            </summary>
            <remarks>
            This message only retrieves line colors. To retrieve the colors of the '+' and '-' inside the buttons, use the
            <c>TVM_GETTEXTCOLOR</c> message.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewMessage.TVM_MAPACCIDTOHTREEITEM">
            <summary>Maps an accessibility ID to an <c>HTREEITEM</c>.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>**UINT** that contains the accessibility ID to map to an **HTREEITEM**.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the <c>HTREEITEM</c> that the specified accessibility ID is mapped to.</para>
            </summary>
            <remarks>
            <para>When you add an item to a tree-view control an <c>HTREEITEM</c> returns, which uniquely identifies the item.</para>
            <para>
            <para>Note</para>
            <para>
            To use this message, you must provide a manifest specifying Comclt32.dll version 6.0. For more information on manifests, see
            Enabling Visual Styles.
            </para>
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewMessage.TVM_MAPHTREEITEMTOACCID">
            <summary>Maps an <c>HTREEITEM</c> to an accessibility ID.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>**HTREEITEM** that is mapped to an accessibility ID.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns an accessibility ID.</para>
            </summary>
            <remarks>
            <para>When you add an item to a tree-view control an <c>HTREEITEM</c> handle is returned that uniquely identifies the item.</para>
            <para>
            <para>Note</para>
            <para>
            To use this message, you must provide a manifest specifying Comclt32.dll version 6.0. For more information on manifests, see
            Enabling Visual Styles.
            </para>
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewMessage.TVM_SETEXTENDEDSTYLE">
            <summary>Informs the tree-view control to set extended styles. Send this message or use the macro <c>TreeView_SetExtendedStyle</c>.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Mask used to select the styles to be set.</para>
            <para><em>lParam</em></para>
            <para>Value that indicates the extended style. For more information on styles, see Tree-View Control Extended Styles.</para>
            <para><strong>Returns</strong></para>
            <para>If this message succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </summary>
            <remarks>
            The extended styles for a tree-view control have nothing to do with the extended styles used with function
            <c>CreateWindowEx</c> or function <c>SetWindowLong</c>.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewMessage.TVM_GETEXTENDEDSTYLE">
            <summary>
            Retrieves the extended style for a tree-view control. Send this message explicitly or by using the
            <c>TreeView_GetExtendedStyle</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the value of extended style.For more information on styles, see Tree-View Control Extended Styles.</para>
            </summary>
            <remarks>
            The extended styles for a tree-view control have nothing to do with the extended styles used with function
            <c>CreateWindowEx</c> or function <c>SetWindowLong</c>.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewMessage.TVM_INSERTITEM">
            <summary>
            Inserts a new item in a tree-view control. You can send this message explicitly or by using the <c>TreeView_InsertItem</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Pointer to a <c>TVINSERTSTRUCT</c> structure that specifies the attributes of the tree-view item.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the <c>HTREEITEM</c> handle to the new item if successful, or <c>NULL</c> otherwise.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewMessage.TVM_SETAUTOSCROLLINFO">
            <summary>
            Sets information used to determine auto-scroll characteristics. You can send this message explicitly or by using the
            <c>TreeView_SetAutoScrollInfo</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Specifies pixels per second. The offset to scroll is divided by the wParam to determine the total duration of the auto-scroll.</para>
            <para><em>lParam</em></para>
            <para>
            Specifies the redraw time interval. Redraw at every elasped interval, until the item is scrolled into view. Given wParam, the
            location of the item is calculated and a repaint occurs. Set this value to create smooth scrolling.
            </para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c>.</para>
            </summary>
            <remarks>
            Autoscroll information is used to scroll a nonvisible item into view. The control must have the <c>TVS_EX_AUTOHSCROLL</c>
            extended style. For information on extended styles, see Tree-View Control Extended Styles.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewMessage.TVM_SETHOT">
            <summary>
            <para>
            [Intended for internal use; not recommended for use in applications. This message may not be supported in future versions of Windows.]
            </para>
            <para>
            Sets the hot item for a tree-view control. You can send this message explicitly or by using the <c>TreeView_SetHot</c> macro.
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Handle to the new hot item. If this value is <c>NULL</c>, the tree-view control will be set to have no hot item.</para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> if successful, or <c>FALSE</c> otherwise.</para>
            </summary>
            <remarks>
            <para>
            The hot item is the item that the mouse is hovering over. This message makes an item look like it is the hot item even if the
            mouse is not hovering over it.
            </para>
            <para>This message has no visible effect if the <c>TVS_TRACKSELECT</c> style is not set.</para>
            <para>If it succeeds, this message causes the hot item to be redrawn.</para>
            <para>This message is ignored if lParam is <c>NULL</c> and the tree-view control is tracking the mouse.</para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewMessage.TVM_GETITEM">
            <summary>
            Retrieves some or all of a tree-view item's attributes. You can send this message explicitly or by using the
            <c>TreeView_GetItem</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>
            Pointer to a <c>TVITEM</c> structure that specifies the information to retrieve and receives information about the item. With
            version 4.71 and later, you can use a <c>TVITEMEX</c> structure instead.
            </para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> if successful, or <c>FALSE</c> otherwise.</para>
            </summary>
            <remarks>
            <para>
            When the message is sent, the <c>hItem</c> member of the <c>TVITEM</c> or <c>TVITEMEX</c> structure identifies the item to
            retrieve information about, and the <c>mask</c> member specifies the attributes to retrieve.
            </para>
            <para>
            If the TVIF_TEXT flag is set in the <c>mask</c> member of the <c>TVITEM</c> or <c>TVITEMEX</c> structure, the <c>pszText</c>
            member must point to a valid buffer and the <c>cchTextMax</c> member must be set to the number of characters in that buffer.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewMessage.TVM_SETITEM">
            <summary>
            The <c>TVM_SETITEM</c> message sets some or all of a tree-view item's attributes. You can send this message explicitly or by
            using the <c>TreeView_SetItem</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>
            Pointer to a <c>TVITEM</c> structure that contains the new item attributes. With version 4.71 and later, you can use a
            <c>TVITEMEX</c> structure instead.
            </para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> if successful, or <c>FALSE</c> otherwise.</para>
            </summary>
            <remarks>
            The <c>hItem</c> member of the <c>TVITEM</c> or <c>TVITEMEX</c> structure identifies the item, and the <c>mask</c> member
            specifies which attributes to set.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewMessage.TVM_GETISEARCHSTRING">
            <summary>
            Retrieves the incremental search string for a tree-view control. The tree-view control uses the incremental search string to
            select an item based on characters typed by the user. You can send this message explicitly or by using the
            <c>TreeView_GetISearchString</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Pointer to the buffer that receives the incremental search string.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the number of characters in the incremental search string.</para>
            </summary>
            <remarks>
            <para>
            <c>Security Warning:</c> Using this message incorrectly might compromise the security of your program. You must allocate a
            large enough buffer to hold the string. First call the message passing <c>NULL</c> in lParam. This returns the number of
            characters, excluding <c>NULL</c>, that are required. Then call the message a second time to retrieve the string. You should
            review Security Considerations: Microsoft Windows Controls before continuing.
            </para>
            <para>If the tree-view control is not in incremental search mode, the return value is zero.</para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewMessage.TVM_EDITLABEL">
            <summary>
            Begins in-place editing of the specified item's text, replacing the text of the item with a single-line edit control
            containing the text. This message implicitly selects and focuses the specified item. You can send this message explicitly or
            by using the <c>TreeView_EditLabel</c> macro.
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Handle to the item to edit.</para>
            <para><strong>Returns</strong></para>
            <para>Returns the handle to the edit control used to edit the item text if successful, or <c>NULL</c> otherwise.</para>
            </summary>
            <remarks>
            <para>This message sends a TVN_BEGINLABELEDIT notification code to the parent of the tree-view control.</para>
            <para>
            When the user completes or cancels editing, the edit control is destroyed and the handle is no longer valid. You can subclass
            the edit control, but do not destroy it.
            </para>
            <para>
            The control must have the focus before you send this message to the control. Focus can be set using the <c>SetFocus</c> function.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewMessage.TVM_GETSELECTEDCOUNT">
            <summary>This message is not implemented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewMessage.TVM_SHOWINFOTIP">
            <summary>
            Shows the infotip for a specified item in a tree-view control. You can send this message explicitly or by using the
            <c>TreeView_ShowInfoTip</c> macro..
            <para><strong>Parameters</strong></para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Handle to the item.</para>
            <para><strong>Returns</strong></para>
            <para>Returns zero.</para>
            </summary>
            <remarks>
            Most applications do not use this message. Infotips are shown automatically. For more information, see Using Tree-view
            Infotips in the About Tree-View Controls overview.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewMessage.TVM_GETITEMPARTRECT">
            <summary>This message is not implemented.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.TreeViewNotification">
            <summary>Tree View Notifications</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewNotification.TVN_ASYNCDRAW">
            <summary>
            <para>
            Sent by a tree-view control to its parent when the drawing of a icon or overlay has failed. This notification code is sent in
            the form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>TVN_ASYNCDRAW pnmTVAsynchDraw = (NMTVASYNCDRAW *) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>Pointer to an <c>NMTVASYNCDRAW</c> structure. The <c>NMTVASYNCDRAW</c> structure contains the reason the draw failed.</para>
            <para><strong>Returns</strong></para>
            <para>No return value.</para>
            </summary>
            <remarks>
            <para>
            The tree-view control must have the <c>TVS_EX_DRAWIMAGEASYNC</c> extended style. Note that this is equivalent to list-view's
            LVN_ASYNCDRAWN flag and its corresponding style.
            </para>
            <para>
            This control does not draw asynchronously. Asynchronous is used in the context that the tree-view control does not
            synchronously extract an image if it is not available. (For instance, the image may not be available if the tree-view control
            uses a sparse image list, since the image may be unloaded.) Instead, when an image is not available, the control
            synchronously asks the parent what action to take by sending the parent an TVN_ASYNCDRAW notification with a
            <c>NMTVASYNCDRAW</c> structure. The <c>hr</c> member of this structure describes the reason the control's draw failed. An
            <c>hr</c> result of E_PENDING means the image is not present at all (the image needs to be extracted). Success indicates that
            the image is present but not at the required image quality.
            </para>
            <para>
            The parent sets the <c>dwRetFlags</c> member of the structure to inform the control how to proceed. For instance, the parent
            may return another image, in the <c>iRetImageIndex</c> member, for the control to draw. In this case, the parent sets the
            <c>dwRetFlags</c> member to ADRF_DRAWIMAGE. If the control finds the returned image has not been extracted, yet another
            TVN_ASYNCDRAW notification may be sent by the control.
            </para>
            <para>
            If an image is not available, the idea behind asynchronous is to allow the parent do the extraction in the background so that
            extraction does not block the UI thread, that is, the thread the control is on. The parent may return ADRF_DRAWNOTHING to the
            control, then launch a background thread to extract the icon. Once extracted, the parent may set the icon in the treeview
            control with macro <c>TreeView_SetItem</c>. This causes tree-view to invalidate the item and eventually repaint it with the
            extracted image in the image list.
            </para>
            <para>
            The following code example, to be used as part of a larger program, shows how a parent may process two possible return codes
            in this notification by a control, and decide what action the control should take. Setting <c>dwRetFlags</c> is not shown.
            </para>
            <para>
            <code>case TVN_ASYNCDRAW: NMTVASYNCDRAW *pnm = (NMTVASYNCDRAW *)lParam short dwDrawSuccessFlags = ShortFromResult(pnm-&gt;hr); if (dwDrawSuccessFlags &amp; ILDRF_IMAGELOWQUALITY) { // Need to re-extract the icon } if (dwDrawSuccessFlags &amp; ILDRF_OVERLAYLOWQUALITY) { // Need to re-extract the overlay }</code>
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewNotification.TVN_BEGINDRAG">
            <summary>
            <para>
            Notifies a tree-view control's parent window that a drag-and-drop operation involving the left mouse button is being
            initiated. This notification code is sent in the form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>TVN_BEGINDRAG pnmtv = (LPNMTREEVIEW) lParam</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>
            Pointer to an <c>NMTREEVIEW</c> structure. The <c>itemNew</c> member is a <c>TVITEM</c> structure that contains valid
            information about the item being dragged in the <c>hItem</c>, <c>state</c>, and <c>lParam</c> members. The <c>ptDrag</c>
            member specifies the current screen coordinates of the mouse.
            </para>
            <para><strong>Returns</strong></para>
            <para>The return value is ignored.</para>
            </summary>
            <remarks>A tree-view control that has the <c>TVS_DISABLEDRAGDROP</c> style does not send this notification code.</remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewNotification.TVN_BEGINLABELEDIT">
            <summary>
            <para>
            Notifies a tree-view control's parent window about the start of label editing for an item. This notification code is sent in
            the form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>TVN_BEGINLABELEDIT ptvdi = (LPNMTVDISPINFO) lParam</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>
            Pointer to an <c>NMTVDISPINFO</c> structure. The <c>item</c> member is a <c>TVITEM</c> structure that contains valid
            information about the item being edited in the <c>hItem</c>, <c>state</c>, <c>lParam</c>, and <c>pszText</c> members.
            </para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> to cancel label editing.</para>
            </summary>
            <remarks>
            <para>
            When label editing begins, an edit control is created but not positioned or displayed. Before it is displayed, the tree-view
            control sends its parent window a TVN_BEGINLABELEDIT notification code.
            </para>
            <para>
            To customize label editing, implement a handler for TVN_BEGINLABELEDIT and have it send a <c>TVM_GETEDITCONTROL</c> message
            to the tree-view control. If a label is being edited, the return value will be a handle to the edit control. Use this handle
            to customize the edit control by sending the usual EM_XXX messages.
            </para>
            <para>When the user cancels or completes the editing, the parent window receives a TVN_ENDLABELEDIT notification code.</para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewNotification.TVN_BEGINRDRAG">
            <summary>
            <para>
            Notifies a tree-view control's parent window about the initiation of a drag-and-drop operation involving the right mouse
            button. This notification code is sent in the form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>TVN_BEGINRDRAG pnmtv = (LPNMTREEVIEW) lParam</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>
            Pointer to an <c>NMTREEVIEW</c> structure. The <c>itemNew</c> member is a <c>TVITEM</c> structure that contains valid
            information in the <c>hItem</c>, <c>state</c>, and <c>lParam</c> members about the item to be dragged. The <c>ptDrag</c>
            member specifies the current screen coordinates of the mouse.
            </para>
            <para><strong>Returns</strong></para>
            <para>The return value is ignored.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewNotification.TVN_DELETEITEM">
            <summary>
            <para>
            Notifies a tree-view control's parent window that an item is being deleted. This notification code is sent in the form of a
            <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>TVN_DELETEITEM pnmtv = (LPNMTREEVIEW) lParam</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>
            Pointer to an <c>NMTREEVIEW</c> structure. The <c>itemOld</c> member is a <c>TVITEM</c> structure whose <c>hItem</c> and
            <c>lParam</c> members contain valid information about the item being deleted.
            </para>
            <para><strong>Returns</strong></para>
            <para>The return value is ignored.</para>
            </summary>
            <remarks>
            If the <c>lParam</c> member of the <c>TVITEM</c> structure points to memory allocated by your application, you can free it
            when you receive the TVN_DELETEITEM notification code.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewNotification.TVN_ENDLABELEDIT">
            <summary>
            <para>
            Notifies a tree-view control's parent window about the end of label editing for an item. This notification code is sent in
            the form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>TVN_ENDLABELEDIT ptvdi = (LPNMTVDISPINFO) lParam</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>
            Pointer to an <c>NMTVDISPINFO</c> structure. The <c>item</c> member of this structure is a <c>TVITEM</c> structure whose
            <c>hItem</c>, <c>lParam</c>, and <c>pszText</c> members contain valid information about the item that was edited. If label
            editing was canceled, the <c>pszText</c> member of the <c>TVITEM</c> structure is <c>NULL</c>; otherwise, <c>pszText</c> is
            the address of the edited text.
            </para>
            <para><strong>Returns</strong></para>
            <para>
            If the <c>pszText</c> member is non- <c>NULL</c>, return <c>TRUE</c> to set the item's label to the edited text. Return
            <c>FALSE</c> to reject the edited text and revert to the original label.
            </para>
            </summary>
            <remarks>
            <para>If the <c>pszText</c> member is <c>NULL</c>, the return value is ignored.</para>
            <para>
            If you specified the LPSTR_TEXTCALLBACK value for this item and the <c>pszText</c> member is non- <c>NULL</c>, your
            TVN_ENDLABELEDIT handler should copy the text from <c>pszText</c> to your local storage.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewNotification.TVN_GETDISPINFO">
            <summary>
            <para>
            Requests that a tree-view control's parent window provide information needed to display or sort an item. This notification
            code is sent in the form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>TVN_GETDISPINFO lptvdi = (LPNMTVDISPINFO) lParam</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>
            Pointer to an <c>NMTVDISPINFO</c> structure. The <c>item</c> member is a <c>TVITEM</c> structure whose <c>mask</c>,
            <c>hItem</c>, <c>state</c>, and <c>lParam</c> members specify the type of information required. You must fill the members of
            the structure with the appropriate information.
            </para>
            <para><strong>Returns</strong></para>
            <para>The return value is ignored.</para>
            </summary>
            <remarks>
            <para>This notification code is sent under the following circumstances:</para>
            <list type="bullet">
            <item>
            <term>
            If the <c>pszText</c> member of the item's <c>TVITEM</c> structure is the LPSTR_TEXTCALLBACK value, the control sends this
            notification code to retrieve the item's text. In this case, the <c>mask</c> member of lParam will have the TVIF_TEXT flag set.
            </term>
            </item>
            <item>
            <term>
            If the <c>iImage</c> or <c>iSelectedImage</c> member of the item's <c>TVITEM</c> structure is the I_IMAGECALLBACK value, the
            control sends this notification code to retrieve the index of an item's icons in the control's image list. In this case, if
            the item is selected, the <c>mask</c> member of lParam will have the TVIF_SELECTEDIMAGE flag set. If the item is not
            selected, the <c>mask</c> member of lParam will have the TVIF_IMAGE flag set.
            </term>
            </item>
            <item>
            <term>
            If the <c>cChildren</c> member of the item's <c>TVITEM</c> structure is the I_CHILDRENCALLBACK value, the control sends this
            notification code to retrieve a value that indicates whether the item has child items. In this case, the <c>mask</c> member
            of lParam will have the TVIF_CHILDREN flag set.
            </term>
            </item>
            </list>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewNotification.TVN_GETINFOTIP">
            <summary>
            <para>
            Sent by a tree-view control that has the <c>TVS_INFOTIP</c> style. This notification code is sent when the control is
            requesting additional text information to be displayed in a tooltip. The notification code is sent in the form of a
            <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>TVN_GETINFOTIP lpGetInfoTip = (LPNMTVGETINFOTIP)lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>Pointer to an <c>NMTVGETINFOTIP</c> structure that contains information about this notification code.</para>
            <para><strong>Returns</strong></para>
            <para>The control ignores the return value for this notification code.</para>
            </summary>
            <remarks>This notification code is only sent by tree-view controls that have the <c>TVS_INFOTIP</c> style.</remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewNotification.TVN_ITEMCHANGED">
            <summary>
            <para>
            Notifies a tree-view control's parent window that item attributes have changed. This notification code is sent in the form of
            a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>TVN_ITEMCHANGED pnm = (NMTVITEMCHANGE *) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>
            Pointer to a <c>NMTVITEMCHANGE</c> structure describing the item that changed. The <c>uChanged</c> member is set to TVIF_STATE.
            </para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>FALSE</c> to accept the change, or <c>TRUE</c> to prevent the change.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewNotification.TVN_ITEMCHANGING">
            <summary>
            <para>
            Notifies a tree-view control's parent window that item attributes are about to change. This notification code is sent in the
            form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>TVN_ITEMCHANGING pnm = (NMTVITEMCHANGE *) lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>
            Pointer to an <c>NMTVITEMCHANGE</c> structure describing the item that is changing. The <c>uChanged</c> member is set to TVIF_STATE.
            </para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>FALSE</c> to accept the change, or <c>TRUE</c> to prevent the change.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewNotification.TVN_ITEMEXPANDED">
            <summary>
            <para>
            Notifies a tree-view control's parent window that a parent item's list of child items has expanded or collapsed. This
            notification code is sent in the form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>TVN_ITEMEXPANDED pnmtv = (LPNMTREEVIEW) lParam</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>
            Pointer to an <c>NMTREEVIEW</c> structure. The <c>itemNew</c> member is a <c>TVITEM</c> structure that contains valid
            information about the parent item in the <c>hItem</c>, <c>state</c>, and <c>lParam</c> members. The <c>action</c> member
            indicates whether the list expanded or collapsed. For a list of possible values, see the description of the <c>TVM_EXPAND</c> message.
            </para>
            <para><strong>Returns</strong></para>
            <para>The return value is ignored.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewNotification.TVN_ITEMEXPANDING">
            <summary>
            <para>
            Notifies a tree-view control's parent window that a parent item's list of child items is about to expand or collapse. This
            notification code is sent in the form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>TVN_ITEMEXPANDING pnmtv = (LPNMTREEVIEW) lParam</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>
            Pointer to an <c>NMTREEVIEW</c> structure. The <c>itemNew</c> member is a <c>TVITEM</c> structure that contains valid
            information about the parent item in the <c>hItem</c>, <c>state</c>, and <c>lParam</c> members. The <c>action</c> member
            indicates whether the list is to expand or collapse. For a list of possible values, see the description of the
            <c>TVM_EXPAND</c> message.
            </para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> to prevent the list from expanding or collapsing.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewNotification.TVN_KEYDOWN">
            <summary>
            <para>
            Notifies a tree-view control's parent window that the user pressed a key and the tree-view control has the input focus. This
            notification code is sent in the form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>TVN_KEYDOWN ptvkd = (LPNMTVKEYDOWN) lParam</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>Pointer to an <c>NMTVKEYDOWN</c> structure. The <c>wVKey</c> member specifies the virtual key code.</para>
            <para><strong>Returns</strong></para>
            <para>
            If the <c>wVKey</c> member of lParam is a character key code, the character will be used as part of an incremental search.
            Return nonzero to exclude the character from the incremental search, or zero to include the character in the search. For all
            other keys, the return value is ignored.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewNotification.TVN_SELCHANGED">
            <summary>
            <para>
            Notifies a tree-view control's parent window that the selection has changed from one item to another. This notification code
            is sent in the form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>TVN_SELCHANGED pnmtv = (LPNMTREEVIEW) lParam</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>
            Pointer to an <c>NMTREEVIEW</c> structure. The <c>itemOld</c> and <c>itemNew</c> members of the <c>NMTREEVIEW</c> structure
            are <c>TVITEM</c> structures that contain information about the previously selected item and the newly selected item. Only
            the <c>mask</c>, <c>hItem</c>, <c>state</c>, and <c>lParam</c> members of these structures are valid. The <c>stateMask</c>
            members of the <c>TVITEM</c> structures specified by <c>itemOld</c> and <c>itemNew</c> are undefined on input. The
            <c>action</c> member of the <c>NMTREEVIEW</c> structure indicates the type of action that caused the selection to change. It
            can be one of the following values:
            </para>
            <list type="table">
            <listheader>
            <term>Requirement</term>
            <term>Value</term>
            </listheader>
            <item>
            <term>TVC_BYKEYBOARD</term>
            <term>By a keystroke.</term>
            </item>
            <item>
            <term>TVC_BYMOUSE</term>
            <term>By a mouse click.</term>
            </item>
            <item>
            <term>TVC_UNKNOWN</term>
            <term>Unknown.</term>
            </item>
            </list>
            <para><strong>Returns</strong></para>
            <para>The return value is ignored.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewNotification.TVN_SELCHANGING">
            <summary>
            <para>
            Notifies a tree-view control's parent window that the selection is about to change from one item to another. This
            notification code is sent in the form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>TVN_SELCHANGING pnmtv = (LPNMTREEVIEW) lParam</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>
            Pointer to an <c>NMTREEVIEW</c> structure. The <c>itemOld</c> and <c>itemNew</c> members contain valid information about the
            currently selected item and the newly selected item. The <c>action</c> member indicates whether a mouse or keyboard action is
            causing the selection to change. For a list of possible values, see the description of the TVN_SELCHANGED notification code.
            </para>
            <para><strong>Returns</strong></para>
            <para>Returns <c>TRUE</c> to prevent the selection from changing.</para>
            </summary>
            <remarks>
            When responding to this notification code, applications should not delete the items that are gaining or losing the selection.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewNotification.TVN_SETDISPINFO">
            <summary>
            <para>
            Notifies a tree-view control's parent window that it must update the information it maintains about an item. This
            notification code is sent in the form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>TVN_SETDISPINFO lptvdi = (LPNMTVDISPINFO) lParam</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>
            Pointer to an <c>NMTVDISPINFO</c> structure that describes the item being updated. The <c>hItem</c> member of the
            <c>TVITEM</c> structure specifies the item being updated, and the <c>mask</c> member specifies which attributes of the item
            are being updated.
            </para>
            <para><strong>Returns</strong></para>
            <para>The return value is ignored.</para>
            </summary>
            <remarks>
            <para>
            If the <c>pszText</c> member of the item's <c>TVITEM</c> structure is the LPSTR_TEXTCALLBACK value, the control sends this
            notification to set the item's text. In this case, the <c>mask</c> member of lParam will have the TVIF_TEXT flag set.
            </para>
            <para>
            If the <c>iImage</c> or <c>iSelectedImage</c> member of the item's <c>TVITEM</c> structure is the I_IMAGECALLBACK value, the
            control sends this notification to retrieve the index of the icon image to display. In this case, the <c>mask</c> member of
            lParam will have the TVIF_IMAGE or TVIF_SELECTEDIMAGE flag set.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewNotification.TVN_SINGLEEXPAND">
            <summary>
            <para>
            Sent by a tree-view control with the <c>TVS_SINGLEEXPAND</c> style when the user opens or closes a tree item using a single
            click of the mouse. This notification code is sent in the form of a <c>WM_NOTIFY</c> message.
            </para>
            <para>
            <code>TVN_SINGLEEXPAND lpnmtv = (LPNMTREEVIEW)lParam;</code>
            </para>
            <para><strong>Parameters</strong></para>
            <para><em>lParam</em></para>
            <para>Pointer to an <c>NMTREEVIEW</c> structure that contains information about this notification code.</para>
            <para><strong>Returns</strong></para>
            <para>Return TVNRET_DEFAULT to allow the default behavior to occur. To modify the default behavior, return:</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term><c>TVNRET_SKIPOLD</c></term>
            <term>Skip default processing of the item being unselected.</term>
            </item>
            <item>
            <term><c>TVNRET_SKIPNEW</c></term>
            <term>Skip default processing of the item being selected.</term>
            </item>
            </list>
            </summary>
            <remarks>
            <para>
            To skip default processing of selected and unselected items, return both TVNRET_SKIPOLD and TVNRET_SKIPNEW by combining them
            with a logical OR.
            </para>
            <para>This notification code is only sent by tree-view controls that have the <c>TVS_SINGLEEXPAND</c> style.</para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.TreeViewNotificationReturnBehavior">
            <summary>Used as return values to the TVN_SINGLEEXPAND notification.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewNotificationReturnBehavior.TVNRET_DEFAULT">
            <summary>Allow the default behavior to occur.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewNotificationReturnBehavior.TVNRET_SKIPOLD">
            <summary>Skip default processing of the item being unselected.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewNotificationReturnBehavior.TVNRET_SKIPNEW">
            <summary>Skip default processing of the item being selected.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.TreeViewSelChangedCause">
            <summary>Used in the <see cref="F:Vanara.PInvoke.ComCtl32.NMTREEVIEW.action"/> action member coming through the lParam of a TVN_SELCHANGED notification.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewSelChangedCause.TVC_UNKNOWN">
            <summary>Unknown.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewSelChangedCause.TVC_BYMOUSE">
            <summary>By a mouse click.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewSelChangedCause.TVC_BYKEYBOARD">
            <summary>By a keystroke.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.TreeViewSetBorderFlags">
            <summary>Used as the wParam value in a TVM_SETBORDER message.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewSetBorderFlags.TVSBF_XBORDER">
            <summary>Applies the specified border size to the left side of the items in the tree-view control.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewSetBorderFlags.TVSBF_YBORDER">
            <summary>Applies the specified border size to the top of the items in the tree-view control.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.TreeViewSetImageListType">
            <summary>Used as the wParam value in a TVM_SETIMAGELIST and TVM_GETIMAGELIST messages.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewSetImageListType.TVSIL_NORMAL">
            <summary>
            Indicates the normal image list, which contains selected, nonselected, and overlay images for the items of a tree-view control.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewSetImageListType.TVSIL_STATE">
            <summary>
            Indicates the state image list. You can use state images to indicate application-defined item states. A state image is
            displayed to the left of an item's selected or nonselected image.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.TreeViewStyle">
            <summary>Window styles used when creating tree-view controls.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewStyle.TVS_CHECKBOXES">
            <summary>
            Version 4.70. Enables check boxes for items in a tree-view control. A check box is displayed only if an image is associated
            with the item. When set to this style, the control effectively uses DrawFrameControl to create and set a state image list
            containing two images. State image 1 is the unchecked box and state image 2 is the checked box. Setting the state image to
            zero removes the check box altogether. For more information, see Working with state image indexes.
            <para>Version 5.80. Displays a check box even if no image is associated with the item.</para>
            <para>
            Once a tree-view control is created with this style, the style cannot be removed. Instead, you must destroy the control and
            create a new one in its place. Destroying the tree-view control does not destroy the check box state image list. You must
            destroy it explicitly. Get the handle to the state image list by sending the tree-view control a TVM_GETIMAGELIST message.
            Then destroy the image list with ImageList_Destroy.
            </para>
            <para>
            If you want to use this style, you must set the TVS_CHECKBOXES style with SetWindowLong after you create the treeview
            control, and before you populate the tree. Otherwise, the checkboxes might appear unchecked, depending on timing issues.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewStyle.TVS_DISABLEDRAGDROP">
            <summary>Prevents the tree-view control from sending TVN_BEGINDRAG notification codes.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewStyle.TVS_EDITLABELS">
            <summary>Allows the user to edit the labels of tree-view items.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewStyle.TVS_FULLROWSELECT">
            <summary>
            Version 4.71. Enables full-row selection in the tree view. The entire row of the selected item is highlighted, and clicking
            anywhere on an item's row causes it to be selected. This style cannot be used in conjunction with the TVS_HASLINES style.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewStyle.TVS_HASBUTTONS">
            <summary>
            Displays plus (+) and minus (-) buttons next to parent items. The user clicks the buttons to expand or collapse a parent
            item's list of child items. To include buttons with items at the root of the tree view, TVS_LINESATROOT must also be specified.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewStyle.TVS_HASLINES">
            <summary>Uses lines to show the hierarchy of items.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewStyle.TVS_INFOTIP">
            <summary>Version 4.71. Obtains tooltip information by sending the TVN_GETINFOTIP notification.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewStyle.TVS_LINESATROOT">
            <summary>
            Uses lines to link items at the root of the tree-view control. This value is ignored if TVS_HASLINES is not also specified.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewStyle.TVS_NOHSCROLL">
            <summary>
            Version 5.80. Disables horizontal scrolling in the control. The control will not display any horizontal scroll bars.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewStyle.TVS_NONEVENHEIGHT">
            <summary>
            Version 4.71 Sets the height of the items to an odd height with the TVM_SETITEMHEIGHT message. By default, the height of
            items must be an even value.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewStyle.TVS_NOSCROLL">
            <summary>
            Version 4.71. Disables both horizontal and vertical scrolling in the control. The control will not display any scroll bars.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewStyle.TVS_NOTOOLTIPS">
            <summary>Version 4.70. Disables tooltips.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewStyle.TVS_RTLREADING">
            <summary>
            Version 4.70. Causes text to be displayed from right-to-left (RTL). Usually, windows display text left-to-right (LTR).
            Windows can be mirrored to display languages such as Hebrew or Arabic that read RTL. Typically, tree-view text is displayed
            in the same direction as the text in its parent window. If TVS_RTLREADING is set, tree-view text reads in the opposite
            direction from the text in the parent window.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewStyle.TVS_SHOWSELALWAYS">
            <summary>Causes a selected item to remain selected when the tree-view control loses focus.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewStyle.TVS_SINGLEEXPAND">
            <summary>
            Version 4.71. Causes the item being selected to expand and the item being unselected to collapse upon selection in the tree
            view. If the mouse is used to single-click the selected item and that item is closed, it will be expanded. If the user holds
            down the CTRL key while selecting an item, the item being unselected will not be collapsed.
            <para>
            Version 5.80. Causes the item being selected to expand and the item being unselected to collapse upon selection in the tree
            view. If the user holds down the CTRL key while selecting an item, the item being unselected will not be collapsed.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewStyle.TVS_TRACKSELECT">
            <summary>Version 4.70. Enables hot tracking in a tree-view control.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.TreeViewStyleEx">
            <summary>
            Extended styles used when creating tree-view controls. The value of extended styles is a bitwise combination of these styles.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewStyleEx.TVS_EX_AUTOHSCROLL">
            <summary>Windows Vista. Remove the horizontal scroll bar and auto-scroll depending on mouse position.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewStyleEx.TVS_EX_DIMMEDCHECKBOXES">
            <summary>Windows Vista. Include dimmed checkbox state if the control has the TVS_CHECKBOXES style.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewStyleEx.TVS_EX_DOUBLEBUFFER">
            <summary>Windows Vista. Specifies how the background is erased or filled.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewStyleEx.TVS_EX_DRAWIMAGEASYNC">
            <summary>Windows Vista. Retrieves calendar grid information.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewStyleEx.TVS_EX_EXCLUSIONCHECKBOXES">
            <summary>Windows Vista. Include exclusion checkbox state if the control has the TVS_CHECKBOXES style.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewStyleEx.TVS_EX_FADEINOUTEXPANDOS">
            <summary>
            Windows Vista. Fade expando buttons in or out when the mouse moves away or into a state of hovering over the control.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewStyleEx.TVS_EX_MULTISELECT">
            <summary>Not supported. Do not use.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewStyleEx.TVS_EX_NOINDENTSTATE">
            <summary>Windows Vista. Do not indent the tree view for the expando buttons.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewStyleEx.TVS_EX_NOSINGLECOLLAPSE">
            <summary>
            Windows Vista. Intended for internal use; not recommended for use in applications. Do not collapse the previously selected
            tree-view item unless it has the same parent as the new selection. This style must be used with the TVS_SINGLEEXPAND style.
            <note>This style may not be supported in future versions of Comctl32.dll. Also, this style is not defined in commctrl.h.</note>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewStyleEx.TVS_EX_PARTIALCHECKBOXES">
            <summary>Windows Vista. Include partial checkbox state if the control has the TVS_CHECKBOXES style.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TreeViewStyleEx.TVS_EX_RICHTOOLTIP">
            <summary>Windows Vista. Allow rich tooltips in the tree view (custom drawn with icon and text).</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.TVITEMPART">
            <summary>Tree view button item part.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TVITEMPART.TVGIPR_BUTTON">
            <summary>Button item part.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.HTREEITEM">
            <summary>Provides a handle to a tree view item.</summary>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.HTREEITEM.#ctor(System.IntPtr)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.ComCtl32.HTREEITEM"/> struct.</summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.HTREEITEM.NULL">
            <summary>Returns an invalid handle by instantiating a <see cref="T:Vanara.PInvoke.ComCtl32.HTREEITEM"/> object with <see cref="F:System.IntPtr.Zero"/>.</summary>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.HTREEITEM.IsNull">
            <summary>Gets a value indicating whether this instance is a null handle.</summary>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.HTREEITEM.op_Explicit(Vanara.PInvoke.ComCtl32.HTREEITEM)~System.IntPtr">
            <summary>Performs an explicit conversion from <see cref="T:Vanara.PInvoke.ComCtl32.HTREEITEM"/> to <see cref="T:System.IntPtr"/>.</summary>
            <param name="h">The handle.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.HTREEITEM.op_Implicit(System.IntPtr)~Vanara.PInvoke.ComCtl32.HTREEITEM">
            <summary>Performs an implicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:Vanara.PInvoke.ComCtl32.HTREEITEM"/>.</summary>
            <param name="h">The pointer to a handle.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.HTREEITEM.op_Inequality(Vanara.PInvoke.ComCtl32.HTREEITEM,Vanara.PInvoke.ComCtl32.HTREEITEM)">
            <summary>Implements the operator !=.</summary>
            <param name="h1">The first handle.</param>
            <param name="h2">The second handle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.HTREEITEM.op_Equality(Vanara.PInvoke.ComCtl32.HTREEITEM,Vanara.PInvoke.ComCtl32.HTREEITEM)">
            <summary>Implements the operator ==.</summary>
            <param name="h1">The first handle.</param>
            <param name="h2">The second handle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.HTREEITEM.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.HTREEITEM.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.NMTREEVIEW">
            <summary>
            Contains information about a tree-view notification message. This structure is identical to the NM_TREEVIEW structure, but it has
            been renamed to follow current naming conventions.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTREEVIEW.hdr">
            <summary>NMHDR structure that contains information about this notification message.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTREEVIEW.action">
            <summary>
            Notification-specific action flag. This member is used with the following notification codes: TVN_ITEMEXPANDING,
            TVN_ITEMEXPANDED, TVN_SELCHANGING, TVN_SELCHANGED. For the possible action flag values, see TVM_EXPAND and TVN_SELCHANGED.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTREEVIEW.itemOld">
            <summary>
            TVITEM structure that contains information about the old item state. This member is zero for notification messages that do
            not use it.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTREEVIEW.itemNew">
            <summary>
            TVITEM structure that contains information about the new item state. This member is zero for notification messages that do
            not use it.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTREEVIEW.ptDrag">
            <summary>
            POINT structure that contains the client coordinates of the mouse at the time the event occurred that caused the notification
            message to be sent.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.NMTVASYNCDRAW">
            <summary>
            Contains an explanation of why the draw of an icon or overlay tree item failed. This structure is sent on a TVN_ASYNCDRAW
            notification. Set the dwRetFlags member to indicate what action the control should take. Note that a draw can fail if there is no
            image; in other words, when the icon image has not been extracted.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTVASYNCDRAW.hdr">
            <summary>NMHDR structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTVASYNCDRAW.pimldp">
            <summary>IMAGELISTDRAWPARAMS structure describing the image that failed to draw.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTVASYNCDRAW.hr">
            <summary>
            Result code indicating why the draw failed, either ILDRF_IMAGELOWQUALITY, ILDRF_OVERLAYLOWQUALITY, E_PENDING, or S_OK. A code
            of S_OK indicates that the image is present but not at the required image quality.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTVASYNCDRAW.hItem">
            <summary>Handle of the tree item that failed to draw.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTVASYNCDRAW.lParam">
            <summary>
            Data for hItem. This is the same data for the item that is retrieved with the message TVM_GETITEM using the appropriate mask
            in structure TVITEM. This data is parent specific; the parent can store information that helps it identify the tree item or
            other information. Data is provided in lParam for convenience, so that the parent does not need to send message TVM_GETITEM.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTVASYNCDRAW.dwRetFlags">
            <summary>Action that the sender (the tree-view control) should execute on return.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTVASYNCDRAW.iRetImageIndex">
            <summary>Index of the image to draw in the image list. Used if ADRF_DRAWIMAGE is returned in dwRetFlags.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.NMTVCUSTOMDRAW">
            <summary>Contains information specific to an NM_CUSTOMDRAW (tree view) notification code sent by a tree-view control.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTVCUSTOMDRAW.nmcd">
            <summary>NMCUSTOMDRAW structure that contains general custom draw information.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTVCUSTOMDRAW.clrText">
            <summary>COLORREF value representing the color that will be used to display text foreground in the tree-view control.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTVCUSTOMDRAW.clrTextBk">
            <summary>COLORREF value representing the color that will be used to display text background in the tree-view control.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTVCUSTOMDRAW.iLevel">
            <summary>
            Version 4.71. Zero-based level of the item being drawn. The root item is at level zero, a child of the root item is at level
            one, and so on.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.NMTVDISPINFO">
            <summary>
            Contains and receives display information for a tree-view item. This structure is identical to the TV_DISPINFO structure, but it
            has been renamed to follow current naming conventions.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTVDISPINFO.hdr">
            <summary>NMHDR structure that contains information about this notification.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTVDISPINFO.item">
            <summary>
            TVITEM structure that identifies and contains information about the tree-view item. The mask member of the TVITEM structure
            specifies which information is being set or retrieved.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.NMTVDISPINFOEX">
            <summary>Contains information pertaining to extended TreeView notification information.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTVDISPINFOEX.hdr">
            <summary>NMHDR structure that contains information about this notification.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTVDISPINFOEX.item">
            <summary>Specifies or receives attributes of a TreeView item.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.NMTVGETINFOTIP">
            <summary>
            Contains and receives tree-view item information needed to display a tooltip for an item. This structure is used with the
            TVN_GETINFOTIP notification code.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTVGETINFOTIP.hdr">
            <summary>NMHDR structure that contains information about this notification.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTVGETINFOTIP.pszText">
            <summary>
            Address of a character buffer that contains the text to be displayed. If you want to change the text displayed in the
            tooltip, you will need to modify the contents of this buffer. The size of this buffer is specified by the cchTextMax structure.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTVGETINFOTIP.cchTextMax">
            <summary>
            Size of the buffer at pszText, in characters. Although you should never assume that this buffer will be of any particular
            size, the INFOTIPSIZE value can be used for design purposes.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTVGETINFOTIP.hItem">
            <summary>Tree handle to the item for which the tooltip is being displayed.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTVGETINFOTIP.lParam">
            <summary>Application-defined data associated with the item for which the tooltip is being displayed.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.NMTVITEMCHANGE">
            <summary>
            Contains information on a tree-view item change. This structure is sent with the TVN_ITEMCHANGED and TVN_ITEMCHANGING notifications.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTVITEMCHANGE.hdr">
            <summary>NMHDR structure that contains information about the notification.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTVITEMCHANGE.uChanged">
            <summary>
            Specifies the attribute. The only supported attribute is state. uChanged must have the following value: TVIF_STATE = The
            change is the state attribute.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTVITEMCHANGE.hItem">
            <summary>Handle to the changed tree-view item.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTVITEMCHANGE.uStateNew">
            <summary>Flag that specifies the new item state.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTVITEMCHANGE.uStateOld">
            <summary>Flag that specifies the item's previous state.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTVITEMCHANGE.lParam">
            <summary>Reserved for application specific data. For example, a value to associate with the item.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.NMTVKEYDOWN">
            <summary>
            Contains information about a keyboard event in a tree-view control. This structure is used with the TVN_KEYDOWN notification
            code. The structure is identical to the TV_KEYDOWN structure, but it has been renamed to follow current naming conventions.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTVKEYDOWN.hdr">
            <summary>NMHDR structure that contains information about this notification.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTVKEYDOWN.wVKey">
            <summary>Virtual key code.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMTVKEYDOWN.flags">
            <summary>Always zero.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.TVHITTESTINFO">
            <summary>
            Contains information used to determine the location of a point relative to a tree-view control. This structure is used with the
            TVM_HITTEST message. The structure is identical to the TV_HITTESTINFO structure, but it has been renamed to follow current naming conventions.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TVHITTESTINFO.pt">
            <summary>Client coordinates of the point to test.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TVHITTESTINFO.flags">
            <summary>Variable that receives information about the results of a hit test.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TVHITTESTINFO.hItem">
            <summary>Handle to the item that occupies the point.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.TVINSERTSTRUCT">
            <summary>
            Contains information used to add a new item to a tree-view control. This structure is used with the TVM_INSERTITEM message. The
            structure is identical to the TV_INSERTSTRUCT structure, but it has been renamed to follow current naming conventions.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TVINSERTSTRUCT.hParent">
            <summary>
            Handle to the parent item. If this member is the TVI_ROOT value or NULL, the item is inserted at the root of the tree-view control.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TVINSERTSTRUCT.hInsertAfter">
            <summary>Handle to the item after which the new item is to be inserted, or one of the following values:</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TVINSERTSTRUCT.itemex">
            <summary>Version 4.71. TVITEMEX structure that contains information about the item to add.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.TVITEM">
            <summary>
            Specifies or receives attributes of a tree-view item. This structure is identical to the TV_ITEM structure, but it has been
            renamed to follow current naming conventions. New applications should use this structure.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TVITEM.mask">
            <summary>
            Array of flags that indicate which of the other structure members contain valid data. When this structure is used with the
            TVM_GETITEM message, the mask member indicates the item attributes to retrieve. If used with the TVM_SETITEM message, the
            mask indicates the attributes to set.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TVITEM.hItem">
            <summary>Handle to the item.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TVITEM.state">
            <summary>
            Set of bit flags and image list indexes that indicate the item's state. When setting the state of an item, the stateMask
            member indicates the valid bits of this member. When retrieving the state of an item, this member returns the current state
            for the bits indicated in the stateMask member.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TVITEM.stateMask">
            <summary>
            Bits of the state member that are valid. If you are retrieving an item's state, set the bits of the stateMask member to
            indicate the bits to be returned in the state member. If you are setting an item's state, set the bits of the stateMask
            member to indicate the bits of the state member that you want to set. To set or retrieve an item's overlay image index, set
            the TVIS_OVERLAYMASK bits. To set or retrieve an item's state image index, set the TVIS_STATEIMAGEMASK bits.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TVITEM.pszText">
            <summary>
            Pointer to a null-terminated string that contains the item text if the structure specifies item attributes. If this member is
            the LPSTR_TEXTCALLBACK value, the parent window is responsible for storing the name. In this case, the tree-view control
            sends the parent window a TVN_GETDISPINFO notification code when it needs the item text for displaying, sorting, or editing
            and a TVN_SETDISPINFO notification code when the item text changes. If the structure is receiving item attributes, this
            member is the address of the buffer that receives the item text. Note that although the tree-view control allows any length
            string to be stored as item text, only the first 260 characters are displayed.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TVITEM.cchTextMax">
            <summary>
            Size of the buffer pointed to by the pszText member, in characters. If this structure is being used to set item attributes,
            this member is ignored.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TVITEM.iImage">
            <summary>
            Index in the tree-view control's image list of the icon image to use when the item is in the nonselected state. If this
            member is the I_IMAGECALLBACK value, the parent window is responsible for storing the index. In this case, the tree-view
            control sends the parent a TVN_GETDISPINFO notification code to retrieve the index when it needs to display the image.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TVITEM.iSelectedImage">
            <summary>
            Index in the tree-view control's image list of the icon image to use when the item is in the selected state. If this member
            is the I_IMAGECALLBACK value, the parent window is responsible for storing the index. In this case, the tree-view control
            sends the parent a TVN_GETDISPINFO notification code to retrieve the index when it needs to display the image.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TVITEM.cChildren">
            <summary>
            Flag that indicates whether the item has associated child items. This member can be one of the following values.
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>zero</term>
            <description>The item has no child items.</description>
            </item>
            <item>
            <term>one</term>
            <description>The item has one or more child items.</description>
            </item>
            <item>
            <term>I_CHILDRENCALLBACK</term>
            <description>
            The parent window keeps track of whether the item has child items.In this case, when the tree-view control needs to display
            the item, the control sends the parent a TVN_GETDISPINFO notification code to determine whether the item has child items.
            <para>
            If the tree-view control has the TVS_HASBUTTONS style, it uses this member to determine whether to display the button
            indicating the presence of child items. You can use this member to force the control to display the button even though the
            item does not have any child items inserted. This allows you to display the button while minimizing the control's memory
            usage by inserting child items only when the item is visible or expanded.
            </para>
            </description>
            </item>
            <item>
            <term>I_CHILDRENAUTO</term>
            <description>
            Version 6.0 Intended for internal use; not recommended for use in applications.The tree-view control automatically determines
            whether the item has child items. <note>This flag may not be supported in future versions of Comctl32.dll.Also, this flag is
            not defined in commctrl.h.Add the following definition to the source files of your application to use the flag:</note>
            <code>
            #define I_CHILDRENAUTO (-2)
            </code>
            </description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TVITEM.lParam">
            <summary>A value to associate with the item.</summary>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.TVITEM.Bold">
            <summary>Gets or sets a value indicating whether this <see cref="T:Vanara.PInvoke.ComCtl32.TVITEM"/> is bold.</summary>
            <value><c>true</c> if bold; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.TVITEM.Expanded">
            <summary>Gets or sets a value indicating whether this <see cref="T:Vanara.PInvoke.ComCtl32.TVITEM"/> is expanded.</summary>
            <value><c>true</c> if expanded; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.TVITEM.ExpandedOnce">
            <summary>Gets or sets a value indicating whether child items have been expanded at least once.</summary>
            <value><c>true</c> if child items have been expanded at least once; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.TVITEM.ExpandedPartial">
            <summary>Gets or sets a value indicating whether item is partially expanded.</summary>
            <value><c>true</c> if partially expanded; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.TVITEM.OverlayImageIndex">
            <summary>Gets or sets the index of the overlay image.</summary>
            <value>The index of the overlay image.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">OverlayImageIndex - Overlay image index must be between 0 and 15</exception>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.TVITEM.Selected">
            <summary>Gets or sets a value indicating whether this <see cref="T:Vanara.PInvoke.ComCtl32.TVITEM"/> is selected.</summary>
            <value><c>true</c> if selected; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.TVITEM.SelectedForCut">
            <summary>Gets or sets a value indicating whether item is selected as part of a cut-and-paste operation.</summary>
            <value><c>true</c> if item is selected as part of a cut-and-paste operation; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.TVITEM.SelectedForDragDrop">
            <summary>Gets or sets a value indicating whether item is selected as a drag-and-drop target.</summary>
            <value><c>true</c> if item is selected as a drag-and-drop target; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.TVITEM.State">
            <summary>Gets the state.</summary>
            <value>The state.</value>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.TVITEM.StateImageIndex">
            <summary>Gets or sets the index of the state image.</summary>
            <value>The index of the state image.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">StateImageIndex - State image index must be between 0 and 15</exception>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.TVITEM.Text">
            <summary>Gets the text.</summary>
            <value>The text.</value>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.TVITEM.UseTextCallback">
            <summary>Gets or sets a value indicating whether to use text callback.</summary>
            <value><c>true</c> if to use text callback; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.TVITEM.GetState(Vanara.PInvoke.ComCtl32.TreeViewItemStates)">
            <summary>Gets a value on whether the specified state is set.</summary>
            <param name="itemState">State of the item.</param>
            <returns><c>true</c> if the specified state is set; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.TVITEM.SetState(Vanara.PInvoke.ComCtl32.TreeViewItemStates,System.Boolean)">
            <summary>Sets the state of the specified state.</summary>
            <param name="itemState">State of the item.</param>
            <param name="on">if set to <c>true</c> set this state on.</param>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.TVITEM.SetText(System.IntPtr,System.Int32)">
            <summary>Sets the text.</summary>
            <param name="managedStringPtr">The managed string PTR.</param>
            <param name="stringLen">Length of the string.</param>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.TVITEM.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents this instance.</summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.TVITEMEX">
            <summary>
            Specifies or receives attributes of a tree-view item. This structure is an enhancement to the TVITEM structure. New applications
            should use this structure where appropriate.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TVITEMEX.mask">
            <summary>
            Array of flags that indicate which of the other structure members contain valid data. When this structure is used with the
            TVM_GETITEM message, the mask member indicates the item attributes to retrieve. If used with the TVM_SETITEM message, the
            mask indicates the attributes to set.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TVITEMEX.hItem">
            <summary>Handle to the item.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TVITEMEX.state">
            <summary>
            Set of bit flags and image list indexes that indicate the item's state. When setting the state of an item, the stateMask
            member indicates the valid bits of this member. When retrieving the state of an item, this member returns the current state
            for the bits indicated in the stateMask member.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TVITEMEX.stateMask">
            <summary>
            Bits of the state member that are valid. If you are retrieving an item's state, set the bits of the stateMask member to
            indicate the bits to be returned in the state member. If you are setting an item's state, set the bits of the stateMask
            member to indicate the bits of the state member that you want to set. To set or retrieve an item's overlay image index, set
            the TVIS_OVERLAYMASK bits. To set or retrieve an item's state image index, set the TVIS_STATEIMAGEMASK bits.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TVITEMEX.pszText">
            <summary>
            Pointer to a null-terminated string that contains the item text if the structure specifies item attributes. If this member is
            the LPSTR_TEXTCALLBACK value, the parent window is responsible for storing the name. In this case, the tree-view control
            sends the parent window a TVN_GETDISPINFO notification code when it needs the item text for displaying, sorting, or editing
            and a TVN_SETDISPINFO notification code when the item text changes. If the structure is receiving item attributes, this
            member is the address of the buffer that receives the item text. Note that although the tree-view control allows any length
            string to be stored as item text, only the first 260 characters are displayed.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TVITEMEX.cchTextMax">
            <summary>
            Size of the buffer pointed to by the pszText member, in characters. If this structure is being used to set item attributes,
            this member is ignored.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TVITEMEX.iImage">
            <summary>
            Index in the tree-view control's image list of the icon image to use when the item is in the nonselected state. If this
            member is the I_IMAGECALLBACK value, the parent window is responsible for storing the index. In this case, the tree-view
            control sends the parent a TVN_GETDISPINFO notification code to retrieve the index when it needs to display the image.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TVITEMEX.iSelectedImage">
            <summary>
            Index in the tree-view control's image list of the icon image to use when the item is in the selected state. If this member
            is the I_IMAGECALLBACK value, the parent window is responsible for storing the index. In this case, the tree-view control
            sends the parent a TVN_GETDISPINFO notification code to retrieve the index when it needs to display the image.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TVITEMEX.cChildren">
            <summary>
            Flag that indicates whether the item has associated child items. This member can be one of the following values.
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>zero</term>
            <description>The item has no child items.</description>
            </item>
            <item>
            <term>one</term>
            <description>The item has one or more child items.</description>
            </item>
            <item>
            <term>I_CHILDRENCALLBACK</term>
            <description>
            The parent window keeps track of whether the item has child items.In this case, when the tree-view control needs to display
            the item, the control sends the parent a TVN_GETDISPINFO notification code to determine whether the item has child items.
            <para>
            If the tree-view control has the TVS_HASBUTTONS style, it uses this member to determine whether to display the button
            indicating the presence of child items. You can use this member to force the control to display the button even though the
            item does not have any child items inserted. This allows you to display the button while minimizing the control's memory
            usage by inserting child items only when the item is visible or expanded.
            </para>
            </description>
            </item>
            <item>
            <term>I_CHILDRENAUTO</term>
            <description>
            Version 6.0 Intended for internal use; not recommended for use in applications.The tree-view control automatically determines
            whether the item has child items. <note>This flag may not be supported in future versions of Comctl32.dll.Also, this flag is
            not defined in commctrl.h.Add the following definition to the source files of your application to use the flag:</note>
            <code>
            #define I_CHILDRENAUTO (-2)
            </code>
            </description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TVITEMEX.lParam">
            <summary>A value to associate with the item.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TVITEMEX.iIntegral">
            <summary>The i integral</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TVITEMEX.uStateEx">
            <summary>The u state ex</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TVITEMEX.hwnd">
            <summary>The HWND</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TVITEMEX.iExpandedImage">
            <summary>The i expanded image</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TVITEMEX.iReserved">
            <summary>The i reserved</summary>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.TVITEMEX.Bold">
            <summary>Gets or sets a value indicating whether this <see cref="T:Vanara.PInvoke.ComCtl32.TVITEM"/> is bold.</summary>
            <value><c>true</c> if bold; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.TVITEMEX.Expanded">
            <summary>Gets or sets a value indicating whether this <see cref="T:Vanara.PInvoke.ComCtl32.TVITEM"/> is expanded.</summary>
            <value><c>true</c> if expanded; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.TVITEMEX.ExpandedOnce">
            <summary>Gets or sets a value indicating whether child items have been expanded at least once.</summary>
            <value><c>true</c> if child items have been expanded at least once; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.TVITEMEX.ExpandedPartial">
            <summary>Gets or sets a value indicating whether item is partially expanded.</summary>
            <value><c>true</c> if partially expanded; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.TVITEMEX.OverlayImageIndex">
            <summary>Gets or sets the index of the overlay image.</summary>
            <value>The index of the overlay image.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">OverlayImageIndex - Overlay image index must be between 0 and 15</exception>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.TVITEMEX.Selected">
            <summary>Gets or sets a value indicating whether this <see cref="T:Vanara.PInvoke.ComCtl32.TVITEM"/> is selected.</summary>
            <value><c>true</c> if selected; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.TVITEMEX.SelectedForCut">
            <summary>Gets or sets a value indicating whether item is selected as part of a cut-and-paste operation.</summary>
            <value><c>true</c> if item is selected as part of a cut-and-paste operation; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.TVITEMEX.SelectedForDragDrop">
            <summary>Gets or sets a value indicating whether item is selected as a drag-and-drop target.</summary>
            <value><c>true</c> if item is selected as a drag-and-drop target; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.TVITEMEX.State">
            <summary>Gets the state.</summary>
            <value>The state.</value>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.TVITEMEX.StateImageIndex">
            <summary>Gets or sets the index of the state image.</summary>
            <value>The index of the state image.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">StateImageIndex - State image index must be between 0 and 15</exception>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.TVITEMEX.Text">
            <summary>Gets the text.</summary>
            <value>The text.</value>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.TVITEMEX.UseTextCallback">
            <summary>Gets or sets a value indicating whether to use text callback.</summary>
            <value><c>true</c> if to use text callback; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.TVITEMEX.GetState(Vanara.PInvoke.ComCtl32.TreeViewItemStates)">
            <summary>Gets a value on whether the specified state is set.</summary>
            <param name="itemState">State of the item.</param>
            <returns><c>true</c> if the specified state is set; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.TVITEMEX.SetState(Vanara.PInvoke.ComCtl32.TreeViewItemStates,System.Boolean)">
            <summary>Sets the state of the specified state.</summary>
            <param name="itemState">State of the item.</param>
            <param name="on">if set to <c>true</c> set this state on.</param>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.TVITEMEX.SetText(System.IntPtr,System.Int32)">
            <summary>Sets the text.</summary>
            <param name="managedStringPtr">The managed string PTR.</param>
            <param name="stringLen">Length of the string.</param>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.TVITEMEX.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents this instance.</summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.TVSORTCB">
            <summary>
            Contains information used to sort child items in a tree-view control. This structure is used with the TVM_SORTCHILDRENCB message.
            This structure is identical to the TV_SORTCB structure, but it has been renamed to follow current naming conventions.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TVSORTCB.hParent">
            <summary>Handle to the parent item.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TVSORTCB.lpfnCompare">
            <summary>
            Address of an application-defined callback function, which is called during a sort operation each time the relative order of
            two list items needs to be compared.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TVSORTCB.lParam">
            <summary>
            Application-defined value that gets passed as the lParamSort argument in the callback function specified in lpfnCompare.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.TVGETITEMPARTRECTINFO">
            <summary>
            Contains information for identifying the "hit zone" for a specified part of a tree item. The structure is used with the
            TVM_GETITEMPARTRECT message and the TreeView_GetItemPartRect macro.
            </summary>
            <seealso cref="T:System.IDisposable"/>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TVGETITEMPARTRECTINFO.hti">
            <summary>Handle to the parent item.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TVGETITEMPARTRECTINFO.prc">
            <summary>
            Pointer to a RECT structure to receive the coordinates of the bounding rectangle. The sender of the message (the caller) is
            responsible for allocating this structure.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.TVGETITEMPARTRECTINFO.partID">
            <summary>ID of the item part. This value must be TVGIPR_BUTTON (0x0001).</summary>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.TVGETITEMPARTRECTINFO.#ctor(Vanara.PInvoke.ComCtl32.HTREEITEM)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.ComCtl32.TVGETITEMPARTRECTINFO"/> class.</summary>
            <param name="hTreeNode">The h tree node.</param>
        </member>
        <member name="P:Vanara.PInvoke.ComCtl32.TVGETITEMPARTRECTINFO.Bounds">
            <summary>Gets the bounds.</summary>
            <value>The bounds.</value>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.TVGETITEMPARTRECTINFO.System#IDisposable#Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.UD_MAXVAL">
            <summary>Maximum value for an up-down control.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.UD_MINVAL">
            <summary>Minimum value for an up-down control.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.UPDOWN_CLASS">
            <summary>Window class for the up-down control.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.UpDownMessage">
            <summary>Window messages for the up-down control.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.UpDownMessage.UDM_GETACCEL">
            <summary>Retrieves acceleration information for an up-down control.
            <para>
            <strong>Parameters</strong>
            </para>
            <para><em>wParam</em></para>
            <para>Number of elements in the array specified by lParam.</para>
            <para><em>lParam</em></para>
            <para>Pointer to an array of <c>UDACCEL</c> structures that receive acceleration information.</para>
            <para>
            <strong>Returns</strong>
            </para>
            <para>The return value is the number of accelerators currently set for the control.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.UpDownMessage.UDM_GETBASE">
            <summary>Retrieves the current radix base (that is, either base 10 or 16) for an up-down control.
            <para>
            <strong>Parameters</strong>
            </para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para>
            <strong>Returns</strong>
            </para>
            <para>The return value is the current base value.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.UpDownMessage.UDM_GETBUDDY">
            <summary>Retrieves the handle to the current buddy window.
            <para>
            <strong>Parameters</strong>
            </para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para>
            <strong>Returns</strong>
            </para>
            <para>The return value is the handle to the current buddy window.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.UpDownMessage.UDM_GETPOS">
            <summary>Returns the 32-bit position of an up-down control.
            <para>
            <strong>Parameters</strong>
            </para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Pointer to a <c>BOOL</c> value that is set to zero if the value is successfully retrieved or nonzero if an error occurs. If this parameter is set to <c>NULL</c>, errors are not reported.</para>
            <para>If <c>UDM_GETPOS32</c> is used in a cross-process situation, this parameter must be <c>NULL</c>.</para>
            <para>
            <strong>Returns</strong>
            </para>
            <para>Returns the position of an up-down control with 32-bit precision. Applications must check the lParam value to determine whether the return value is valid.</para>
            </summary>
            <remarks>When it processes this message, the up-down control updates its current position based on the caption of the buddy window. It returns an error if there is no buddy window or if the caption specifies an invalid or out-of-range value.</remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.UpDownMessage.UDM_GETPOS32">
            <summary>Returns the 32-bit position of an up-down control.
            <para>
            <strong>Parameters</strong>
            </para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Pointer to a <c>BOOL</c> value that is set to zero if the value is successfully retrieved or nonzero if an error occurs. If this parameter is set to <c>NULL</c>, errors are not reported.</para>
            <para>If <c>UDM_GETPOS32</c> is used in a cross-process situation, this parameter must be <c>NULL</c>.</para>
            <para>
            <strong>Returns</strong>
            </para>
            <para>Returns the position of an up-down control with 32-bit precision. Applications must check the lParam value to determine whether the return value is valid.</para>
            </summary>
            <remarks>When it processes this message, the up-down control updates its current position based on the caption of the buddy window. It returns an error if there is no buddy window or if the caption specifies an invalid or out-of-range value.</remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.UpDownMessage.UDM_GETRANGE">
            <summary>Retrieves the minimum and maximum positions (range) for an up-down control.
            <para>
            <strong>Parameters</strong>
            </para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para>
            <strong>Returns</strong>
            </para>
            <para>The return value is a 32-bit value that contains the minimum and maximum positions. The <c>LOWORD</c> is the maximum position for the control, and the <c>HIWORD</c> is the minimum position.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.UpDownMessage.UDM_GETRANGE32">
            <summary>Retrieves the 32-bit range of an up-down control.
            <para>
            <strong>Parameters</strong>
            </para>
            <para><em>wParam</em></para>
            <para>Pointer to a signed integer that receives the lower limit of the up-down control range. This parameter may be <c>NULL</c>.</para>
            <para><em>lParam</em></para>
            <para>Pointer to a signed integer that receives the upper limit of the up-down control range. This parameter may be <c>NULL</c>.</para>
            <para>
            <strong>Returns</strong>
            </para>
            <para>The return value for this message is not used.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.UpDownMessage.UDM_GETUNICODEFORMAT">
            <summary>Retrieves the Unicode character format flag for the control.
            <para>
            <strong>Parameters</strong>
            </para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para>
            <strong>Returns</strong>
            </para>
            <para>Returns the Unicode format flag for the control. If this value is nonzero, the control is using Unicode characters. If this value is zero, the control is using ANSI characters.</para>
            </summary>
            <remarks>See the remarks for <c>CCM_GETUNICODEFORMAT</c> for a discussion of this message.</remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.UpDownMessage.UDM_SETACCEL">
            <summary>Sets the acceleration for an up-down control.
            <para>
            <strong>Parameters</strong>
            </para>
            <para><em>wParam</em></para>
            <para>Number of <c>UDACCEL</c> structures specified by aAccels.</para>
            <para><em>lParam</em></para>
            <para>Pointer to an array of <c>UDACCEL</c> structures that contain acceleration information. Elements should be sorted in ascending order based on the <c>nSec</c> member.</para>
            <para>
            <strong>Returns</strong>
            </para>
            <para>Returns <c>TRUE</c> if successful, or <c>FALSE</c> otherwise.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.UpDownMessage.UDM_SETBASE">
            <summary>Sets the radix base for an up-down control. The base value determines whether the buddy window displays numbers in decimal or hexadecimal digits. Hexadecimal numbers are always unsigned, and decimal numbers are signed.
            <para>
            <strong>Parameters</strong>
            </para>
            <para><em>wParam</em></para>
            <para>New base value for the control. This parameter can be 10 for decimal or 16 for hexadecimal.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para>
            <strong>Returns</strong>
            </para>
            <para>The return value is the previous base value. If an invalid base is given, the return value is zero.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.UpDownMessage.UDM_SETBUDDY">
            <summary>Sets the buddy window for an up-down control.
            <para>
            <strong>Parameters</strong>
            </para>
            <para><em>wParam</em></para>
            <para>Handle to the new buddy window.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para>
            <strong>Returns</strong>
            </para>
            <para>The return value is the handle to the previous buddy window.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.UpDownMessage.UDM_SETPOS">
            <summary>Sets the current position for an up-down control with 16-bit precision.
            <para>
            <strong>Parameters</strong>
            </para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>New position for the up-down control. If the parameter is outside the control's specified range, lParam will be set to the nearest valid value.</para>
            <para>
            <strong>Returns</strong>
            </para>
            <para>The return value is the previous position.</para>
            </summary>
            <remarks>This message only supports 16-bit positions. If 32-bit values have been enabled for an up-down control with <c>UDM_SETRANGE32</c>, use <c>UDM_SETPOS32</c>.</remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.UpDownMessage.UDM_SETPOS32">
            <summary>Sets the position of an up-down control with 32-bit precision.
            <para>
            <strong>Parameters</strong>
            </para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>Variable of type integer that specifies the new position for the up-down control. If the parameter is outside the control's specified range, lParam is set to the nearest valid value.</para>
            <para>
            <strong>Returns</strong>
            </para>
            <para>Returns the previous position.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.UpDownMessage.UDM_SETRANGE">
            <summary>Sets the minimum and maximum positions (range) for an up-down control.
            <para>
            <strong>Parameters</strong>
            </para>
            <para><em>wParam</em></para>
            <para>Must be zero.</para>
            <para><em>lParam</em></para>
            <para>The <c>LOWORD</c> is a <c>short</c> that specifies the maximum position for the up-down control, and the <c>HIWORD</c> is a <c>short</c> that specifies the minimum position. Neither position can be greater than the UD_MAXVAL value or less than the UD_MINVAL value. In addition, the difference between the two positions cannot exceed UD_MAXVAL.</para>
            <para>
            <strong>Returns</strong>
            </para>
            <para>No return value.</para>
            </summary>
            <remarks>The maximum position can be less than the minimum position. Clicking the up arrow button moves the current position closer to the maximum position, and clicking the down arrow button moves toward the minimum position.</remarks>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.UpDownMessage.UDM_SETRANGE32">
            <summary>Sets the 32-bit range of an up-down control.
            <para>
            <strong>Parameters</strong>
            </para>
            <para><em>wParam</em></para>
            <para>Signed integer value that represents the new lower limit of the up-down control range.</para>
            <para><em>lParam</em></para>
            <para>Signed integer value that represents the new upper limit of the up-down control range.</para>
            <para>
            <strong>Returns</strong>
            </para>
            <para>The return value for this message is not used.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.UpDownMessage.UDM_SETUNICODEFORMAT">
            <summary>Sets the Unicode character format flag for the control. This message allows you to change the character set used by the control at run time rather than having to re-create the control.
            <para>
            <strong>Parameters</strong>
            </para>
            <para><em>wParam</em></para>
            <para>Determines the character set that is used by the control. If this value is <c>TRUE</c>, the control will use Unicode characters. If this value is <c>FALSE</c>, the control will use ANSI characters.</para>
            <para><em>lParam</em></para>
            <para>Must be zero.</para>
            <para>
            <strong>Returns</strong>
            </para>
            <para>Returns the previous Unicode format flag for the control.</para>
            </summary>
            <remarks>See the remarks for <c>CCM_SETUNICODEFORMAT</c> for a discussion of this message.</remarks>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.UpDownNotification">
            <summary>Notifications for the up-down control.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.UpDownNotification.NM_RELEASEDCAPTURE">
            <summary>
            <para>Notifies a control's parent window that the control is releasing mouse capture. This notification code is sent in the form of a <c>WM_NOTIFY</c> message.</para>
            <para><code>NM_RELEASEDCAPTURE lpnmh = (LPNMHDR) lParam; </code></para>
            <para>
            <strong>Parameters</strong>
            </para>
            <para><em>lParam</em></para>
            <para>A pointer to an <c>NMHDR</c> structure that contains additional information about this notification.</para>
            <para>
            <strong>Returns</strong>
            </para>
            <para>Unless otherwise specified, the control ignores the return value from this notification code.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.UpDownNotification.UDN_DELTAPOS">
            <summary>
            <para>Sent by the operating system to the parent window of an up-down control when the position of the control is about to change. This happens when the user requests a change in the value by pressing the control's up or down arrow. This notification code is sent in the form of a <c>WM_NOTIFY</c> message.</para>
            <para><code>UDN_DELTAPOS lpnmud = (LPNMUPDOWN) lParam; </code></para>
            <para>
            <strong>Parameters</strong>
            </para>
            <para><em>lParam</em></para>
            <para>Pointer to an <c>NMUPDOWN</c> structure that contains information about the position change. The <c>iPos</c> member of this structure contains the current position of the control. The <c>iDelta</c> member of the structure is a signed integer that contains the proposed change in position. If the user has clicked the up button, this is a positive value. If the user has clicked the down button, this is a negative value.</para>
            <para>
            <strong>Returns</strong>
            </para>
            <para>Return nonzero to prevent the change in the control's position, or zero to allow the change.</para>
            </summary>
            <remarks>The UDN_DELTAPOS notification code is sent before the <c>WM_VSCROLL</c> or <c>WM_HSCROLL</c> message, which actually changes the control's position. This lets you examine, allow, modify, or disallow the change.</remarks>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.UpDownStyle">
            <summary>Styles for the up-down control.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.UpDownStyle.UDS_ALIGNLEFT">
            <summary>
            Positions the up-down control next to the left edge of the buddy window. The buddy window is moved to the right, and its
            width is decreased to accommodate the width of the up-down control.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.UpDownStyle.UDS_ALIGNRIGHT">
            <summary>
            Positions the up-down control next to the right edge of the buddy window. The width of the buddy window is decreased to
            accommodate the width of the up-down control.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.UpDownStyle.UDS_ARROWKEYS">
            <summary>
            Causes the up-down control to increment and decrement the position when the UP ARROW and DOWN ARROW keys are pressed.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.UpDownStyle.UDS_AUTOBUDDY">
            <summary>Automatically selects the previous window in the z-order as the up-down control's buddy window.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.UpDownStyle.UDS_HORZ">
            <summary>Causes the up-down control's arrows to point left and right instead of up and down.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.UpDownStyle.UDS_HOTTRACK">
            <summary>
            Causes the control to exhibit "hot tracking" behavior. That is, it highlights the UP ARROW and DOWN ARROW on the control as
            the pointer passes over them. This style requires Windows 98 or Windows 2000. If the system is running Windows 95 or Windows
            NT 4.0, the flag is ignored. To check whether hot tracking is enabled, call SystemParametersInfo.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.UpDownStyle.UDS_NOTHOUSANDS">
            <summary>Does not insert a thousands separator between every three decimal digits.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.UpDownStyle.UDS_SETBUDDYINT">
            <summary>
            Causes the up-down control to set the text of the buddy window (using the WM_SETTEXT message) when the position changes. The
            text consists of the position formatted as a decimal or hexadecimal string.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.UpDownStyle.UDS_WRAP">
            <summary>Causes the position to "wrap" if it is incremented or decremented beyond the ending or beginning of the range.</summary>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.CreateUpDownControl(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,Vanara.PInvoke.HWND,System.Int32,Vanara.PInvoke.HINSTANCE,Vanara.PInvoke.HWND,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates an up-down control. Note: This function is obsolete. It is a 16 bit function and cannot handle 32 bit values for range
            and position.
            </summary>
            <param name="dwStyle">
            <para>Type: <c><c>DWORD</c></c></para>
            <para>
            Window styles for the control. This parameter should include the <c>WS_CHILD</c>, <c>WS_BORDER</c>, and <c>WS_VISIBLE</c> styles,
            and it may include any of the window styles specific to the up-down control.
            </para>
            </param>
            <param name="x">
            <para>Type: <c>int</c></para>
            <para>Horizontal coordinate, in client coordinates, of the upper-left corner of the control.</para>
            </param>
            <param name="y">
            <para>Type: <c>int</c></para>
            <para>Vertical coordinate, in client coordinates, of the upper-left corner of the control.</para>
            </param>
            <param name="cx">
            <para>Type: <c>int</c></para>
            <para>Width, in pixels, of the up-down control.</para>
            </param>
            <param name="cy">
            <para>Type: <c>int</c></para>
            <para>Height, in pixels, of the up-down control.</para>
            </param>
            <param name="hParent">
            <para>Type: <c><c>HWND</c></c></para>
            <para>Handle to the parent window of the up-down control.</para>
            </param>
            <param name="nID">
            <para>Type: <c>int</c></para>
            <para>Identifier for the up-down control.</para>
            </param>
            <param name="hInst">
            <para>Type: <c><c>HINSTANCE</c></c></para>
            <para>Handle to the module instance of the application creating the up-down control.</para>
            </param>
            <param name="hBuddy">
            <para>Type: <c><c>HWND</c></c></para>
            <para>Handle to the window associated with the up-down control. If this parameter is <c>NULL</c>, the control has no buddy window.</para>
            </param>
            <param name="nUpper">
            <para>Type: <c>int</c></para>
            <para>Upper limit (range) of the up-down control.</para>
            </param>
            <param name="nLower">
            <para>Type: <c>int</c></para>
            <para>Lower limit (range) of the up-down control.</para>
            </param>
            <param name="nPos">
            <para>Type: <c>int</c></para>
            <para>Position of the control.</para>
            </param>
            <returns>
            <para>Type: <c><c>HWND</c></c></para>
            <para>
            If the function succeeds, the return value is the window handle to the up-down control. If the function fails, the return value
            is <c>NULL</c>.
            </para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.NMUPDOWN">
            <summary>
            Contains information specific to up-down control notification messages. It is identical to and replaces the <c>NM_UPDOWN</c> structure.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMUPDOWN.hdr">
            <summary>
            <para>Type: <c><c>NMHDR</c></c></para>
            <para><c>NMHDR</c> structure that contains additional information about the notification.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMUPDOWN.iDelta">
            <summary>
            <para>Type: <c>int</c></para>
            <para>Signed integer value that represents the proposed change in the up-down control's position.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.NMUPDOWN.iPos">
            <summary>
            <para>Type: <c>int</c></para>
            <para>Signed integer value that represents the up-down control's current position.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.UDACCEL">
            <summary>Contains acceleration information for an up-down control.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.UDACCEL.nSec">
            <summary>
            <para>Type: <c><c>UINT</c></c></para>
            <para>Amount of elapsed time, in seconds, before the position change increment specified by <c>nInc</c> is used.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.UDACCEL.nInc">
            <summary>
            <para>Type: <c><c>UINT</c></c></para>
            <para>Position change increment to use after the time specified by <c>nSec</c> elapses.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.DA_ERR">
            <summary>Indicates a failure on the DSA_InsertItem when returned.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.DA_LAST">
            <summary>Used by DSA_InsertItem to indicate that the item should be inserted at the end of the array.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.PFNDACOMPARE">
            <summary>Defines the prototype for the compare function used by <c>DSA_Sort</c>.</summary>
            <param name="p1">
            <para>Type: <c>void*</c></para>
            <para>A pointer to the first item in the comparison.</para>
            </param>
            <param name="p2">
            <para>Type: <c>void*</c></para>
            <para>A pointer to the second item in the comparison.</para>
            </param>
            <param name="lParam">
            <para>Type: <c><c>LPARAM</c></c></para>
            <para>Additional data passed to pfnCmp.</para>
            </param>
            <returns>
            <para>Type: <c>int</c></para>
            <para>
            The meaning of the return values depends on the function that uses this callback prototype. The return values for <c>DSA_Sort</c>
            are the following.
            </para>
            <para>
            <list type="table">
            <listheader>
            <term>less than 0</term>
            <term>If p1 should be sorted ahead of p2.</term>
            </listheader>
            <item>
            <term>equal to 0</term>
            <term>If p1 and p2 should be sorted together.</term>
            </item>
            <item>
            <term>greater than 0</term>
            <term>If p1 should be sorted after p2.</term>
            </item>
            </list>
            </para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.PFNDACOMPARECONST">
            <summary>
            Defines the prototype for the compare function used by <c>DSA_Sort</c> when the items being compared are constant objects.
            </summary>
            <param name="p1">
            <para>Type: <c>const void*</c></para>
            <para>A pointer to the first item in the comparison.</para>
            </param>
            <param name="p2">
            <para>Type: <c>const void*</c></para>
            <para>A pointer to the second item in the comparison.</para>
            </param>
            <param name="lParam">
            <para>Type: <c><c>LPARAM</c></c></para>
            <para>Additional data passed to pfnCmp.</para>
            </param>
            <returns>
            <para>Type: <c>int</c></para>
            <para>
            The meaning of the return values depends on the function that uses this callback prototype. The return values for <c>DSA_Sort</c>
            are as follows:
            </para>
            <para>
            <list type="table">
            <listheader>
            <term>less than 0</term>
            <term>If p1 should be sorted ahead of p2.</term>
            </listheader>
            <item>
            <term>equal to 0</term>
            <term>If p1 and p2 should be sorted together.</term>
            </item>
            <item>
            <term>greater than 0</term>
            <term>If p1 should be sorted after p2.</term>
            </item>
            </list>
            </para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.PFNDAENUMCALLBACK">
            <summary>
            Defines the prototype for the callback function used by dynamic structure array (DSA) and dynamic pointer array (DPA) functions.
            </summary>
            <param name="p">
            <para>Type: <c>void*</c></para>
            <para>A pointer to the structure to be enumerated.</para>
            </param>
            <param name="pData">
            <para>Type: <c>void*</c></para>
            <para>The value that was passed in the pData parameter to function <c>DSA_EnumCallback</c>.</para>
            </param>
            <returns>
            <para>Type: <c>int</c></para>
            <para>
            The return value is used to determine whether to terminate or continue the iteration. A return value of zero indicates that the
            iteration should stop; nonzero indicates that the iteration should continue.
            </para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.PFNDAENUMCALLBACKCONST">
            <summary>
            Defines the prototype for the callback function used by dynamic structure array (DSA) and dynamic pointer array (DPA) functions
            when the items involved are pointers to constant data.
            </summary>
            <param name="p">
            <para>Type: <c>const void*</c></para>
            <para>A pointer to the constant structure to be enumerated.</para>
            </param>
            <param name="pData">
            <para>Type: <c>void*</c></para>
            <para>A value that was passed in the pData parameter to function <c>DSA_EnumCallback</c> or function <c>DPA_EnumCallback</c>.</para>
            </param>
            <returns>
            <para>Type: <c>int</c></para>
            <para>
            The return value is used to determine whether to terminate or continue the iteration. A return value of zero indicates that the
            iteration should stop; nonzero indicates that the iteration should continue.
            </para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.PFNDPAMERGE">
            <summary>Defines the prototype for the merge function used by <c>DPA_Merge</c>.</summary>
            <param name="uMsg">
            <para>Type: <c><c>UINT</c></c></para>
            <para>A message that instructs this function how to handle the merge. One of the following values.</para>
            <para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>DPAMM_MERGE0x1</term>
            <term>
            Perform any additional processing needed when merging pvSrc into pvDest. The function should return a pointer to an item that
            contains the result of the merge. The value returned by the merge function is stored into the destination, which overwrites the
            previous value. If the merge function returns NULL, then the merge operation is abandoned.
            </term>
            </item>
            <item>
            <term>DPAMM_DELETE0x2</term>
            <term>Perform any additional processing needed when a delete occurs as part of the merge. The function should return NULL.</term>
            </item>
            <item>
            <term>DPAMM_INSERT0x3</term>
            <term>
            Perform any user-defined processing when the merge results in an item being inserted as part of the merge. The return value of
            this function should point to the item result that is inserted as part of the merge. If the merge function returns NULL, then the
            merge operation is abandoned.
            </term>
            </item>
            </list>
            </para>
            </param>
            <param name="pvDest">
            <para>Type: <c>void*</c></para>
            <para>A pointer to the first item in the merge.</para>
            </param>
            <param name="pvSrc">
            <para>Type: <c>void*</c></para>
            <para>A pointer to the second item in the merge.</para>
            </param>
            <param name="lParam">
            <para>Type: <c><c>LPARAM</c></c></para>
            <para>Additional data that can be used by the merge callback.</para>
            </param>
            <returns>
            A pointer to the item which results from the merge or <c>NULL</c> if there is a failure when <c>DPAMM_MERGE</c> or
            <c>DPAMM_INSERT</c> is used.
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.PFNDPAMERGECONST">
            <summary>Defines the prototype for the merge function used by <c>DPA_Merge</c>, using constant values.</summary>
            <param name="uMsg">
            <para>Type: <c><c>UINT</c></c></para>
            <para>A message that instructs this function how to handle the merge. One of the following values.</para>
            <para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>DPAMM_MERGE0x1</term>
            <term>
            Perform any additional processing needed when merging p2 into p1. The function should return a pointer to an item that contains
            the result of the merge.
            </term>
            </item>
            <item>
            <term>DPAMM_DELETE0x2</term>
            <term>Perform any additional processing needed when a delete occurs as part of the merge. The function should return NULL.</term>
            </item>
            <item>
            <term>DPAMM_INSERT0x3</term>
            <term>
            Perform any user-defined processing when the merge results in an item being inserted as part of the merge. The return value of
            this function should point to the item result that is inserted as part of the merge.
            </term>
            </item>
            </list>
            </para>
            </param>
            <param name="pvDest">
            <para>Type: <c>const void*</c></para>
            <para>A pointer to the destination item in the merge.</para>
            </param>
            <param name="pvSrc">
            <para>Type: <c>const void*</c></para>
            <para>A pointer to the source item in the merge.</para>
            </param>
            <param name="lParam">
            <para>Type: <c><c>LPARAM</c></c></para>
            <para>Additional data that can be used by the merge callback.</para>
            </param>
            <returns>
            <para>Type: <c>const void*</c></para>
            <para>
            A pointer to constant data which results from the merge, or <c>NULL</c> if there is a failure when DPAMM_MERGE or DPAMM_INSERT is used.
            </para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.PFNDPASTREAM">
            <summary>Defines the prototype for the callback function used by <c>DPA_LoadStream</c> and <c>DPA_SaveStream</c>.</summary>
            <param name="pinfo">
            <para>Type: <c>DPASTREAMINFO*</c></para>
            <para>A pointer to a <c>DPASTREAMINFO</c> structure.</para>
            </param>
            <param name="pstream">
            <para>Type: <c>struct IStream*</c></para>
            <para>An <c>IStream</c> object to read from or write to.</para>
            </param>
            <param name="pvInstData">
            <para>Type: <c>void*</c></para>
            <para>A void pointer to callback data that the client passed to <c>DPA_LoadStream</c> or <c>DPA_SaveStream</c>.</para>
            </param>
            <returns>
            <para>Type: <c><c>HRESULT</c></c></para>
            <para>If this function pointer succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.DPAM">
            <summary>
            Options determining the method used to merge the two arrays. DPAM_NORMAL, DPAM_UNION, and DPAM_UNION are mutually exclusive—only
            one of those flags can be set, optionally in conjunction with DPAM_SORTED.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.DPAM.DPAM_SORTED">
            <summary>The arrays are presorted; skip sorting. If this flag is not set, the arrays are sorted before they are merged.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.DPAM.DPAM_NORMAL">
            <summary>
            The final array consists of all of the elements originally present in hdpaDest. If any of those elements are also found in
            hdpaSrc, those elements are merged in the final array. The PFNDPAMERGE callback function is called with the DPAMM_MERGE
            message. When this flag is set, the final size of the array at hdpaDest is the same as its initial size.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.DPAM.DPAM_UNION">
            <summary>
            The final array is the union of all elements in both arrays. Elements found in both arrays are merged in the final array.
            Elements found in only one array or the other are added as found. When this flag is set, the PFNDPAMERGE callback function
            can be called with the DPAMM_MERGE or DPAMM_INSERT message. The final size of the array is at least the size of the larger of
            hdpaDest and hdpaSrc, and at most the sum of the two.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.DPAM.DPAM_INTERSECT">
            <summary>
            Only elements found in both hdpaSrc and hdpaDest are merged to form the final array. When this flag is set, the PFNDPAMERGE
            callback function can be called with the DPAMM_MERGE or DPAMM_DELETE message. The final size of the array can range between 0
            and the smaller of hdpaDest and hdpaSrc.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.DPAMM">
            <summary>A message that instructs this function how to handle the merge.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.DPAMM.DPAMM_MERGE">
            <summary>
            Perform any additional processing needed when merging pvSrc into pvDest. The function should return a pointer to an item that
            contains the result of the merge. The value returned by the merge function is stored into the destination, which overwrites
            the previous value. If the merge function returns NULL, then the merge operation is abandoned.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.DPAMM.DPAMM_DELETE">
            <summary>
            Perform any additional processing needed when a delete occurs as part of the merge. The function should return NULL.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.DPAMM.DPAMM_INSERT">
            <summary>
            Perform any user-defined processing when the merge results in an item being inserted as part of the merge. The return value
            of this function should point to the item result that is inserted as part of the merge. If the merge function returns NULL,
            then the merge operation is abandoned.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.DPAS">
            <summary>Options for DPA_Search.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.DPAS.DPAS_SORTED">
            <summary>Indicates that the DPA is sorted.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.DPAS.DPAS_INSERTBEFORE">
            <summary>
            This value is only valid in conjunction with DPAS_SORTED. If the item is not found, return the position where the item is
            expected to be found in the sorted DPA.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.DPAS.DPAS_INSERTAFTER">
            <summary>
            This value is only valid in conjunction with DPAS_SORTED. If the item is not found, return the position where the item is
            expected to be found in the sorted DPA.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.DPA_AppendPtr(Vanara.PInvoke.HDPA,System.IntPtr)">
            <summary>Inserts a new item at the end of a dynamic pointer array (DPA).</summary>
            <param name="pdpa">A handle to a DPA.</param>
            <param name="pitem">A pointer to the item that is to be inserted.</param>
            <returns>Returns the index of the new item or , if the append action fails.</returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.DPA_Clone(Vanara.PInvoke.HDPA,Vanara.PInvoke.HDPA)">
            <summary>
            <para>
            [ <c>DPA_Clone</c> is available through Windows XP with Service Pack 2 (SP2). It might be altered or unavailable in subsequent versions.]
            </para>
            <para>Duplicates a dynamic pointer array (DPA).</para>
            </summary>
            <param name="hdpaSource">
            <para>Type: <c>const HDPA</c></para>
            <para>A handle to an existing DPA to copy.</para>
            </param>
            <param name="hdpaNew">
            <para>Type: <c>HDPA</c></para>
            <para>When <c>NULL</c>, a new array is copied from hdpaSource.</para>
            <para>
            This parameter can also contain an array created with <c>DPA_Create</c> or <c>DPA_CreateEx</c>. The data is overwritten but the
            original delta size and heap handle retained.
            </para>
            </param>
            <returns>
            <para>Type: <c>HDPA</c></para>
            <para>The handle to the new or altered DPA (hdpaNew) if successful; otherwise, <c>NULL</c>.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.DPA_Create(System.Int32)">
            <summary>
            <para>
            [ <c>DPA_Create</c> is available for use in the operating systems specified in the Requirements section. It may be altered or
            unavailable in subsequent versions.]
            </para>
            <para>Creates a dynamic pointer array (DPA).</para>
            </summary>
            <param name="cpGrow">
            <para>Type: <c>int</c></para>
            <para>The number of elements by which the array should be expanded, if the DPA needs to be enlarged.</para>
            </param>
            <returns>
            <para>Type: <c>HDPA</c></para>
            <para>Returns a handle to a DPA if successful, or <c>NULL</c> if the call fails.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.DPA_CreateEx(System.Int32,Vanara.PInvoke.Kernel32.HHEAP)">
            <summary>Creates a dynamic pointer array (DPA) using a given specified size and heap location.</summary>
            <param name="cpGrow">
            <para>Type: <c>int</c></para>
            <para>The number of elements by which the array should be expanded, if the DPA needs to be enlarged.</para>
            </param>
            <param name="hheap">
            <para>Type: <c><c>HANDLE</c></c></para>
            <para>A handle to the heap where the array is stored.</para>
            </param>
            <returns>
            <para>Type: <c>HDPA</c></para>
            <para>Returns a handle to a DPA if successful, or <c>NULL</c> if the call fails.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.DPA_DeleteAllPtrs(Vanara.PInvoke.HDPA)">
            <summary>
            <para>
            [ <c>DPA_DeleteAllPtrs</c> is available for use in the operating systems specified in the Requirements section. It may be altered
            or unavailable in subsequent versions.]
            </para>
            <para>Removes all items from a dynamic pointer array (DPA) and shrinks the DPA accordingly.</para>
            </summary>
            <param name="pdpa">
            <para>Type: <c>HDPA</c></para>
            <para>Handle to a DPA.</para>
            </param>
            <returns>
            <para>Type: <c><c>BOOL</c></c></para>
            <para>Returns <c>TRUE</c> on success or <c>FALSE</c> on failure.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.DPA_DeletePtr(Vanara.PInvoke.HDPA,System.Int32)">
            <summary>
            <para>
            [ <c>DPA_DeletePtr</c> is available for use in the operating systems specified in the Requirements section. It may be altered or
            unavailable in subsequent versions.]
            </para>
            <para>Removes an item from a dynamic pointer array (DPA). The DPA shrinks if necessary to accommodate the removed item.</para>
            </summary>
            <param name="pdpa">
            <para>Type: <c>HDPA</c></para>
            <para>A handle to a DPA.</para>
            </param>
            <param name="index">
            <para>Type: <c>int</c></para>
            <para>An index of item to be removed from DPA.</para>
            </param>
            <returns>Returns the removed item or <c>NULL</c>, if the call fails.</returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.DPA_Destroy(Vanara.PInvoke.HDPA)">
            <summary>
            <para>
            [ <c>DPA_Destroy</c> is available for use in the operating systems specified in the Requirements section. It may be altered or
            unavailable in subsequent versions.]
            </para>
            <para>Frees a Dynamic Pointer Array (DPA).</para>
            </summary>
            <param name="pdpa">
            <para>Type: <c>HDPA</c></para>
            <para>A handle to a DPA.</para>
            </param>
            <returns>
            <para>Type: <c><c>BOOL</c></c></para>
            <para>Returns <c>TRUE</c> on success, <c>FALSE</c> on failure.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.DPA_DestroyCallback(Vanara.PInvoke.HDPA,Vanara.PInvoke.ComCtl32.PFNDAENUMCALLBACK,System.IntPtr)">
            <summary>
            <para>
            [ <c>DPA_DestroyCallback</c> is available for use in the operating systems specified in the Requirements section. It may be
            altered or unavailable in subsequent versions.]
            </para>
            <para>Calls pfnCB on each element of the dynamic pointer array (DPA), then frees the DPA.</para>
            </summary>
            <param name="pdpa">
            <para>Type: <c>HDPA</c></para>
            <para>A handle to a DPA.</para>
            </param>
            <param name="pfnCB">
            <para>Type: <c><c>PFNDPAENUMCALLBACK</c></c></para>
            <para>A callback function pointer. See <c>PFNDPAENUMCALLBACK</c> for the callback function prototype.</para>
            </param>
            <param name="pData">
            <para>Type: <c>void*</c></para>
            <para>A callback data pointer. pData is passed as a parameter to pfnCB.</para>
            </param>
            <returns>No return value.</returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.DPA_EnumCallback(Vanara.PInvoke.HDPA,Vanara.PInvoke.ComCtl32.PFNDAENUMCALLBACK,System.IntPtr)">
            <summary>
            <para>
            [ <c>DPA_EnumCallback</c> is available for use in the operating systems specified in the Requirements section. It may be altered
            or unavailable in subsequent versions.]
            </para>
            <para>Iterates through the Dynamic Pointer Array (DPA) and calls pfnCB on each item.</para>
            </summary>
            <param name="pdpa">
            <para>Type: <c>HDPA</c></para>
            <para>A handle to a DPA.</para>
            </param>
            <param name="pfnCB">
            <para>Type: <c><c>PFNDPAENUMCALLBACK</c></c></para>
            <para>A callback function pointer. See <c>PFNDPAENUMCALLBACK</c> for the callback function prototype.</para>
            </param>
            <param name="pData">
            <para>Type: <c>void*</c></para>
            <para>A callback data pointer. pData is passed as a parameter to pfnCB.</para>
            </param>
            <returns>No return value.</returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.DPA_FastDeleteLastPtr(Vanara.PInvoke.HDPA)">
            <summary>Deletes the last pointer from a dynamic pointer array (DPA).</summary>
            <param name="hdpa">A handle to an existing DPA.</param>
            <returns>This macro does not return a value.</returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.DPA_FastGetPtr(Vanara.PInvoke.HDPA,System.Int32)">
            <summary>Gets the value of the specified pointer in the dynamic pointer array (DPA).</summary>
            <param name="hdpa">A handle to an existing DPA.</param>
            <param name="i">The index of the DPA item.</param>
            <returns>No return value.</returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.DPA_GetPtr(Vanara.PInvoke.HDPA,System.Int32)">
            <summary>
            <para>
            [ <c>DPA_GetPtr</c> is available for use in the operating systems specified in the Requirements section. It may be altered or
            unavailable in subsequent versions.]
            </para>
            <para>Gets an item from a dynamic pointer array (DPA).</para>
            </summary>
            <param name="pdpa">
            <para>Type: <c>HDPA</c></para>
            <para>A handle to a DPA.</para>
            </param>
            <param name="index">
            <para>Type: <c>int</c></para>
            <para>The index of item to be retrieved.</para>
            </param>
            <returns>Returns the specified item or <c>NULL</c>, if the call fails.</returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.DPA_GetPtrCount(Vanara.PInvoke.HDPA)">
            <summary>Gets the number of pointers in a dynamic pointer array (DPA).</summary>
            <param name="hdpa">A handle to an existing DPA.</param>
            <returns>Returns the number of pointers (elements) the DPA contains.</returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.DPA_GetPtrIndex(Vanara.PInvoke.HDPA,System.IntPtr)">
            <summary>
            <para>
            [ <c>DPA_GetPtrIndex</c> is available through Windows XP with Service Pack 2 (SP2). It might be altered or unavailable in
            subsequent versions.]
            </para>
            <para>Gets the index of a matching item found in a dynamic pointer array (DPA).</para>
            </summary>
            <param name="hdpa">
            <para>Type: <c>HDPA</c></para>
            <para>A handle to an existing DPA.</para>
            </param>
            <param name="pvoid">
            <para>Type: <c>const void*</c></para>
            <para>A pointer to an item to locate in hdpa.</para>
            </param>
            <returns>
            <para>Type: <c>int</c></para>
            <para>The index of the item pointed to by pvoid, if found; otherwise, -1.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.DPA_GetPtrPtr(Vanara.PInvoke.HDPA)">
            <summary>Gets the pointer to the internal pointer array of a dynamic pointer array (DPA).</summary>
            <param name="hdpa">A handle to an existing DPA.</param>
            <returns>
            Returns a pointer to the array of pointers managed by the DPA. To retrieve the number of pointers in the array, call macro <c>DPA_GetPtrCount</c>.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.DPA_GetSize(Vanara.PInvoke.HDPA)">
            <summary>Gets the size of a dynamic pointer array (DPA).</summary>
            <param name="pdpa">
            <para>Type: <c>HDPA</c></para>
            <para>A handle to an existing DPA.</para>
            </param>
            <returns>
            <para>Type: <c><c>ULONGLONG</c></c></para>
            <para>
            Returns the size of the DPA, including the internal bookkeeping information. If pdpa is <c>NULL</c>, the function returns zero.
            </para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.DPA_Grow(Vanara.PInvoke.HDPA,System.Int32)">
            <summary>Changes the number of pointers in a dynamic pointer array (DPA).</summary>
            <param name="hdpa">
            <para>Type: <c>HDPA</c></para>
            <para>A handle to an existing DPA.</para>
            </param>
            <param name="cp">
            <para>Type: <c>int</c></para>
            <para>The number of pointers desired in the DPA.</para>
            </param>
            <returns>
            <para>Type: <c><c>BOOL</c></c></para>
            <para>Returns <c>TRUE</c> if successful, or <c>FALSE</c> otherwise.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.DPA_InsertPtr(Vanara.PInvoke.HDPA,System.Int32,System.IntPtr)">
            <summary>
            <para>
            [ <c>DPA_InsertPtr</c> is available for use in the operating systems specified in the Requirements section. It may be altered or
            unavailable in subsequent versions.]
            </para>
            <para>
            Inserts a new item at a specified position in a dynamic pointer array (DPA). If neccessary, the DPA expands to accommodate the
            new item.
            </para>
            </summary>
            <param name="pdpa">
            <para>Type: <c>HDPA</c></para>
            <para>A handle to a DPA.</para>
            </param>
            <param name="index">
            <para>Type: <c>int</c></para>
            <para>Tbe position where new item is to be inserted.</para>
            </param>
            <param name="p">
            <para>Type: <c>void*</c></para>
            <para>A pointer to the item that is to be inserted.</para>
            </param>
            <returns>
            <para>Type: <c>int</c></para>
            <para>Returns the index of the new item or , if the insertion fails.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.DPA_LoadStream(Vanara.PInvoke.ComCtl32.SafeHDPA@,Vanara.PInvoke.ComCtl32.PFNDPASTREAM,System.Runtime.InteropServices.ComTypes.IStream,System.IntPtr)">
            <summary>
            <para>[ <c>DPA_LoadStream</c> is available in Windows Vista. It might be altered or unavailable in subsequent versions. ]</para>
            <para>Loads the dynamic pointer array (DPA) from a stream by calling the specified callback function to read each element.</para>
            </summary>
            <param name="ppdpa">
            <para>Type: <c>HDPA*</c></para>
            <para>A handle to a DPA.</para>
            </param>
            <param name="pfn">
            <para>Type: <c><c>PFNDPASTREAM</c></c></para>
            <para>The callback function. See <c>PFNDPASTREAM</c> for the callback function prototype.</para>
            </param>
            <param name="pstm">
            <para>Type: <c><c>IStream</c>*</c></para>
            <para>An <c>IStream</c> object.</para>
            </param>
            <param name="pvInstData">
            <para>Type: <c>void*</c></para>
            <para>A pointer to callback data. pvInstData is passed as a parameter to pfn.</para>
            </param>
            <returns>
            <para>Type: <c><c>HRESULT</c></c></para>
            <para>Returns one of the following values.</para>
            <para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>S_OK</term>
            <term>Indicates that the callback function was successful and the element was loaded.</term>
            </item>
            <item>
            <term>S_FALSE</term>
            <term>Indicates that the callback function was unsuccessful in loading the element; however, the process should continue.</term>
            </item>
            <item>
            <term>E_INVALIDARG</term>
            <term>Indicates that one or more of the parameters is invalid.</term>
            </item>
            <item>
            <term>E_FAIL</term>
            <term>Indicates that the stream object could not be read.</term>
            </item>
            <item>
            <term>E_OUTOFMEMORY</term>
            <term>The buffer length is invalid or there was insufficient memory to complete the operation.</term>
            </item>
            </list>
            </para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.DPA_Merge(Vanara.PInvoke.HDPA,Vanara.PInvoke.HDPA,Vanara.PInvoke.ComCtl32.DPAM,Vanara.PInvoke.ComCtl32.PFNDACOMPARE,Vanara.PInvoke.ComCtl32.PFNDPAMERGE,System.IntPtr)">
            <summary>
            <para>
            [ <c>DPA_Merge</c> is available through Windows XP with Service Pack 2 (SP2). It might be altered or unavailable in subsequent versions.]
            </para>
            <para>Combines the contents of two dynamic pointer arrays (DPAs).</para>
            </summary>
            <param name="hdpaDest">
            <para>Type: <c>HDPA</c></para>
            <para>
            A handle to the first DPA. This array can be optionally presorted. When this function returns, contains the handle to the merged array.
            </para>
            </param>
            <param name="hdpaSrc">
            <para>Type: <c>HDPA</c></para>
            <para>A handle to the second DPA. This array can be optionally presorted.</para>
            </param>
            <param name="dwFlags">
            <para>Type: <c><c>DWORD</c></c></para>
            <para>
            Options determining the method used to merge the two arrays. DPAM_NORMAL, DPAM_UNION, and DPAM_UNION are mutually exclusive—only
            one of those flags can be set, optionally in conjunction with DPAM_SORTED.
            </para>
            <para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>DPAM_SORTED0x00000001</term>
            <term>The arrays are presorted; skip sorting. If this flag is not set, the arrays are sorted before they are merged.</term>
            </item>
            <item>
            <term>DPAM_NORMAL0x00000002</term>
            <term>
            The final array consists of all of the elements originally present in hdpaDest. If any of those elements are also found in
            hdpaSrc, those elements are merged in the final array. The PFNDPAMERGE callback function is called with the DPAMM_MERGE message.
            When this flag is set, the final size of the array at hdpaDest is the same as its initial size.
            </term>
            </item>
            <item>
            <term>DPAM_UNION0x00000004</term>
            <term>
            The final array is the union of all elements in both arrays. Elements found in both arrays are merged in the final array.
            Elements found in only one array or the other are added as found. When this flag is set, the PFNDPAMERGE callback function can be
            called with the DPAMM_MERGE or DPAMM_INSERT message. The final size of the array is at least the size of the larger of hdpaDest
            and hdpaSrc, and at most the sum of the two.
            </term>
            </item>
            <item>
            <term>DPAM_INTERSECT0x00000008</term>
            <term>
            Only elements found in both hdpaSrc and hdpaDest are merged to form the final array. When this flag is set, the PFNDPAMERGE
            callback function can be called with the DPAMM_MERGE or DPAMM_DELETE message. The final size of the array can range between 0 and
            the smaller of hdpaDest and hdpaSrc.
            </term>
            </item>
            </list>
            </para>
            </param>
            <param name="pfnCompare">
            <para>Type: <c><c>PFNDPACOMPARE</c></c></para>
            <para>
            The <c>PFNDPACOMPARE</c> callback function that compares two elements, one from each DPA, to determine whether they are the same
            item. If so, the callback function pointed to by pfnCompare is called.
            </para>
            </param>
            <param name="pfnMerge">
            <para>Type: <c><c>PFNDPAMERGE</c></c></para>
            <para>
            The <c>PFNDPAMERGE</c> callback function that merges the contents when an element is found in both DPAs and is found to be the
            same item by <c>PFNDPACOMPARE</c>.
            </para>
            </param>
            <param name="lParam">
            <para>Type: <c><c>LPARAM</c></c></para>
            <para>Additional parameter used to declare the basis of comparison upon which equality is determined.</para>
            </param>
            <returns>
            <para>Type: <c><c>BOOL</c></c></para>
            <para><c>TRUE</c> if successful; otherwise, <c>FALSE</c>.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.DPA_SaveStream(Vanara.PInvoke.HDPA,Vanara.PInvoke.ComCtl32.PFNDPASTREAM,System.Runtime.InteropServices.ComTypes.IStream,System.IntPtr)">
            <summary>
            <para>[ <c>DPA_SaveStream</c> is available in Windows Vista. It might be altered or unavailable in subsequent versions. ]</para>
            <para>
            Saves the dynamic pointer array (DPA) to a stream by writing out a header, and then calling the specified callback function to
            write each element.
            </para>
            </summary>
            <param name="pdpa">
            <para>Type: <c>HDPA</c></para>
            <para>Receives a handle to a DPA.</para>
            </param>
            <param name="pfn">
            <para>Type: <c><c>PFNDPASTREAM</c></c></para>
            <para>The callback function. See <c>PFNDPASTREAM</c> for the callback function prototype.</para>
            </param>
            <param name="pstm">
            <para>Type: <c><c>IStream</c>*</c></para>
            <para>An <c>IStream</c> object.</para>
            </param>
            <param name="pvInstData">
            <para>Type: <c>void*</c></para>
            <para>A pointer to callback data. pvInstData is passed as a parameter to pfn.</para>
            </param>
            <returns>
            <para>Type: <c><c>HRESULT</c></c></para>
            <para>Returns one of the following values.</para>
            <para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>S_OK</term>
            <term>Indicates that the callback function was unsuccessful in saving the element; however, the process should continue.</term>
            </item>
            <item>
            <term>S_FALSE</term>
            <term>Indicates that even though the callback was unsuccessful, the process was uninterrupted.</term>
            </item>
            <item>
            <term>E_INVALIDARG</term>
            <term>Indicates that one or more of the parameters is invalid.</term>
            </item>
            </list>
            </para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.DPA_Search(Vanara.PInvoke.HDPA,System.IntPtr,System.Int32,Vanara.PInvoke.ComCtl32.PFNDACOMPARE,System.IntPtr,Vanara.PInvoke.ComCtl32.DPAS)">
            <summary>
            <para>
            [ <c>DPA_Search</c> is available for use in the operating systems specified in the Requirements section. It may be altered or
            unavailable in subsequent versions.]
            </para>
            <para>Finds an item in a dynamic pointer array (DPA).</para>
            </summary>
            <param name="pdpa">
            <para>Type: <c>HDPA</c></para>
            <para>A handle to a DPA.</para>
            </param>
            <param name="pFind">
            <para>Type: <c>void*</c></para>
            <para>A pointer to search for.</para>
            </param>
            <param name="iStart">
            <para>Type: <c>int</c></para>
            <para>The index at which to start search.</para>
            </param>
            <param name="pfnCmp">
            <para>Type: <c><c>PFNDPACOMPARE</c></c></para>
            <para>A comparison function pointer. See <c>PFNDPACOMPARE</c> for the comparison function prototype.</para>
            </param>
            <param name="lParam">
            <para>Type: <c><c>LPARAM</c></c></para>
            <para>An additional parameter to be passed to pfnCmp.</para>
            </param>
            <param name="options">
            <para>Type: <c><c>UINT</c></c></para>
            <para>This parameter may be one or more of the following.</para>
            <para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>DPAS_SORTED</term>
            <term>Indicates that the DPA is sorted.</term>
            </item>
            <item>
            <term>DPAS_INSERTBEFORE</term>
            <term>
            This value is only valid in conjunction with DPAS_SORTED. If the item is not found, return the position where the item is
            expected to be found in the sorted DPA.
            </term>
            </item>
            <item>
            <term>DPAS_INSERTAFTER</term>
            <term>
            This value is only valid in conjunction with DPAS_SORTED. If the item is not found, return the position where the item is
            expected to be found in the sorted DPA.
            </term>
            </item>
            </list>
            </para>
            </param>
            <returns>
            <para>Type: <c>int</c></para>
            <para>Returns the index where the item was found in the DPA or if the item was not found.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.DPA_SetPtr(Vanara.PInvoke.HDPA,System.Int32,System.IntPtr)">
            <summary>
            <para>
            [ <c>DPA_SetPtr</c> is available for use in the operating systems specified in the Requirements section. It may be altered or
            unavailable in subsequent versions.]
            </para>
            <para>Assigns a value to an item in a dynamic pointer array (DPA).</para>
            </summary>
            <param name="pdpa">
            <para>Type: <c>HDPA</c></para>
            <para>A handle to a DPA.</para>
            </param>
            <param name="index">
            <para>Type: <c>int</c></para>
            <para>The index of the item in the DPA.</para>
            </param>
            <param name="p">
            <para>Type: <c>void*</c></para>
            <para>A pointer to the value to assign to the specified DPA item.</para>
            </param>
            <returns>
            <para>Type: <c><c>BOOL</c></c></para>
            <para>Returns <c>TRUE</c> if successful, or <c>FALSE</c> otherwise.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.DPA_SetPtrCount(Vanara.PInvoke.HDPA,System.Int32)">
            <summary>Sets the number of pointers in a dynamic pointer array (DPA).</summary>
            <param name="hdpa">A handle to an existing DPA.</param>
            <param name="cItems">The number of items in the DPA.</param>
            <returns>Returns the number of pointers (elements) the DPA contains.</returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.DPA_Sort(Vanara.PInvoke.HDPA,Vanara.PInvoke.ComCtl32.PFNDACOMPARE,System.IntPtr)">
            <summary>
            <para>
            [ <c>DPA_Sort</c> is available for use in the operating systems specified in the Requirements section. It may be altered or
            unavailable in subsequent versions.]
            </para>
            <para>Sorts the items in a Dynamic Pointer Array (DPA).</para>
            </summary>
            <param name="pdpa">
            <para>Type: <c>HDPA</c></para>
            <para>A handle to a DPA.</para>
            </param>
            <param name="pfnCmp">
            <para>Type: <c><c>PFNDPACOMPARE</c></c></para>
            <para>A comparison function pointer. See <c>PFNDPACOMPARE</c> for the comparison function prototype.</para>
            </param>
            <param name="lParam">
            <para>Type: <c><c>LPARAM</c></c></para>
            <para>An additional parameter to be passed to pfnCmp.</para>
            </param>
            <returns>
            <para>Type: <c><c>BOOL</c></c></para>
            <para>Returns <c>TRUE</c> on success or <c>FALSE</c> on failure.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.DPA_SortedInsertPtr(Vanara.PInvoke.HDPA,System.IntPtr,System.Int32,Vanara.PInvoke.ComCtl32.PFNDACOMPARE,System.IntPtr,Vanara.PInvoke.ComCtl32.DPAS,System.IntPtr)">
            <summary>Inserts a new item before or after a specified existing item.</summary>
            <param name="pdpa">
            <para>Type: <c>HDPA</c></para>
            <para>A handle to a DPA.</para>
            </param>
            <param name="pFind">
            <para>Type: <c>void*</c></para>
            <para>An item pointer which is used to determine the insertion point for the new item (see Remarks).</para>
            </param>
            <param name="iStart">
            <para>Type: <c>int</c></para>
            <para>The index in the DPA at which to begin searching for pFind.</para>
            </param>
            <param name="pfnCmp">
            <para>Type: <c><c>PFNDPACOMPARE</c></c></para>
            <para>
            A pointer to the comparison function. See <c>PFNDPACOMPARE</c> or <c>PFNDPACOMPARECONST</c> for the comparison function prototype.
            </para>
            </param>
            <param name="lParam">
            <para>Type: <c><c>LPARAM</c></c></para>
            <para>An additional parameter used to pass information to the comparison function pointed to by pfnCmp.</para>
            </param>
            <param name="options">
            <para>Type: <c><c>UINT</c></c></para>
            <para>The insertion point. Must be one of the following values.</para>
            <para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>DPAS_INSERTBEFORE</term>
            <term>Insert the new item before the pFind item.</term>
            </item>
            <item>
            <term>DPAS_INSERTAFTER</term>
            <term>Insert the new item after the pFind item.</term>
            </item>
            </list>
            </para>
            </param>
            <param name="pitem">
            <para>Type: <c>void*</c></para>
            <para>A pointer to the item that is to be inserted.</para>
            </param>
            <returns>Returns the index of the new item or , if the insert action fails.</returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.DSA_AppendItem(Vanara.PInvoke.HDSA,System.IntPtr)">
            <summary>Appends a new item to the end of a dynamic structure array (DSA).</summary>
            <param name="pdsa">A handle to the DSA in which to insert the item.</param>
            <param name="pItem">A pointer to the item that is to be inserted.</param>
            <returns>Returns the index of the new item if the append action succeeds, or if the append action fails.</returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.DSA_Clone(Vanara.PInvoke.HDSA)">
            <summary>Duplicates a dynamic structure array (DSA).</summary>
            <param name="hdsa">
            <para>Type: <c>HDSA</c></para>
            <para>A handle to an existing DSA.</para>
            </param>
            <returns>
            <para>Type: <c>HDSA</c></para>
            <para>Returns a handle to the clone, or <c>NULL</c> if the operation fails.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.DSA_Create(System.Int32,System.Int32)">
            <summary>
            <para>
            [ <c>DSA_Create</c> is available for use in the operating systems specified in the Requirements section. It may be altered or
            unavailable in subsequent versions.]
            </para>
            <para>Creates a dynamic structure array (DSA).</para>
            </summary>
            <param name="cbItem">
            <para>Type: <c>int</c></para>
            <para>The size, in bytes, of the item.</para>
            </param>
            <param name="cbItemGrow">
            <para>Type: <c>int</c></para>
            <para>The number of items by which the array should be incremented, if the DSA needs to be enlarged.</para>
            </param>
            <returns>
            <para>Type: <c>HDSA</c></para>
            <para>Returns a handle to a DSA if successful, or <c>NULL</c> if the creation fails.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.DSA_DeleteAllItems(Vanara.PInvoke.HDSA)">
            <summary>Deletes all items from a dynamic structure array (DSA).</summary>
            <param name="hdsa">
            <para>Type: <c>HDSA</c></para>
            <para>A handle to an existing DSA.</para>
            </param>
            <returns>
            <para>Type: <c><c>BOOL</c></c></para>
            <para><c>TRUE</c> if the items were successfully deleted; otherwise, <c>FALSE</c>.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.DSA_DeleteItem(Vanara.PInvoke.HDSA,System.Int32)">
            <summary>
            <para>
            [ <c>DSA_DeleteItem</c> is available through Windows XP with Service Pack 2 (SP2). It might be altered or unavailable in
            subsequent versions.]
            </para>
            <para>Deletes an item from a dynamic structure array (DSA).</para>
            </summary>
            <param name="hdsa">
            <para>Type: <c>HDSA</c></para>
            <para>A handle to an existing DSA.</para>
            </param>
            <param name="nPosition">
            <para>Type: <c>int</c></para>
            <para>The zero-based index of the item to delete.</para>
            </param>
            <returns>
            <para>Type: <c><c>BOOL</c></c></para>
            <para><c>TRUE</c> if the item was successfully deleted; otherwise, <c>FALSE</c>.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.DSA_Destroy(Vanara.PInvoke.HDSA)">
            <summary>
            <para>
            [ <c>DSA_Destroy</c> is available for use in the operating systems specified in the Requirements section. It may be altered or
            unavailable in subsequent versions.]
            </para>
            <para>Frees a dynamic structure array (DSA).</para>
            </summary>
            <param name="pdsa">
            <para>Type: <c>HDSA</c></para>
            <para>A handle to a DSA to destroy.</para>
            </param>
            <returns>
            <para>Type: <c><c>BOOL</c></c></para>
            <para>Returns <c>TRUE</c> on success, <c>FALSE</c> on failure.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.DSA_DestroyCallback(Vanara.PInvoke.HDSA,Vanara.PInvoke.ComCtl32.PFNDAENUMCALLBACK,System.IntPtr)">
            <summary>
            <para>
            [ <c>DSA_DestroyCallback</c> is available for use in the operating systems specified in the Requirements section. It may be
            altered or unavailable in subsequent versions.]
            </para>
            <para>
            Iterates through a dynamic structure array (DSA), calling a specified callback function on each item. Upon reaching the end of
            the array, the DSA is freed.
            </para>
            </summary>
            <param name="pdsa">
            <para>Type: <c>HDSA</c></para>
            <para>A handle to a DSA to walk and destroy.</para>
            </param>
            <param name="pfnCB">
            <para>Type: <c><c>PFNDSAENUMCALLBACK</c></c></para>
            <para>A callback function pointer. For the callback function prototype, see <c>PFNDSAENUMCALLBACK</c>.</para>
            </param>
            <param name="pData">
            <para>Type: <c>void*</c></para>
            <para>A callback data pointer. This pointer is, in turn, passed as a parameter to pfnCB.</para>
            </param>
            <returns>This function does not return a value.</returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.DSA_EnumCallback(Vanara.PInvoke.HDSA,Vanara.PInvoke.ComCtl32.PFNDAENUMCALLBACK,System.IntPtr)">
            <summary>Iterates through the dynamic structure array (DSA) and calls pfnCB on each item.</summary>
            <param name="hdsa">
            <para>Type: <c>HDSA</c></para>
            <para>A handle to an existing DSA.</para>
            </param>
            <param name="pfnCB">
            <para>Type: <c><c>PFNDAENUMCALLBACK</c>*</c></para>
            <para>A callback function pointer. See <c>PFNDSAENUMCALLBACK</c> for the callback function prototype.</para>
            </param>
            <param name="pData">
            <para>Type: <c>void*</c></para>
            <para>A callback data pointer. pData is passed as a parameter to pfnCB.</para>
            </param>
            <returns>This function does not return a value.</returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.DSA_GetItem(Vanara.PInvoke.HDSA,System.Int32,System.IntPtr)">
            <summary>Gets an element from a dynamic structure array (DSA).</summary>
            <param name="pdsa">
            <para>Type: <c>HDSA</c></para>
            <para>A handle to the DSA containing the element.</para>
            </param>
            <param name="index">
            <para>Type: <c>int</c></para>
            <para>The index of the element to be retrieved (zero-based).</para>
            </param>
            <param name="pitem">
            <para>Type: <c>void*</c></para>
            <para>A pointer to a buffer which is filled with a copy of the specified element of the DSA.</para>
            </param>
            <returns>
            <para>Type: <c><c>BOOL</c></c></para>
            <para>Returns <c>TRUE</c> if successful or <c>FALSE</c> otherwise.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.DSA_GetItemCount(Vanara.PInvoke.HDSA)">
            <summary>Gets the number of items in a dynamic structure array (DSA).</summary>
            <param name="hdsa">A handle to an existing DSA.</param>
            <returns>Returns the number of items in the DSA.</returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.DSA_GetItemPtr(Vanara.PInvoke.HDSA,System.Int32)">
            <summary>
            <para>
            [ <c>DSA_GetItemPtr</c> is available for use in the operating systems specified in the Requirements section. It may be altered or
            unavailable in subsequent versions.]
            </para>
            <para>Gets a pointer to an element from a dynamic structure array (DSA).</para>
            </summary>
            <param name="pdsa">
            <para>Type: <c>HDSA</c></para>
            <para>A handle to the DSA containing the element.</para>
            </param>
            <param name="index">
            <para>Type: <c>int</c></para>
            <para>The index of the element to be retrieved (zero-based).</para>
            </param>
            <returns>Returns a pointer to the specified element or <c>NULL</c> if the call fails.</returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.DSA_GetSize(Vanara.PInvoke.HDSA)">
            <summary>Gets the size of the dynamic structure array (DSA).</summary>
            <param name="hdsa">
            <para>Type: <c>HDSA</c></para>
            <para>A handle to an existing DSA.</para>
            </param>
            <returns>
            <para>Type: <c><c>ULONGLONG</c></c></para>
            <para>
            Returns the size of the DSA, including the internal bookkeeping information, in bytes. If hdsa is <c>NULL</c>, the function
            returns zero.
            </para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.DSA_InsertItem(Vanara.PInvoke.HDSA,System.Int32,System.IntPtr)">
            <summary>
            <para>
            [ <c>DSA_InsertItem</c> is available for use in the operating systems specified in the Requirements section. It may be altered or
            unavailable in subsequent versions.]
            </para>
            <para>Inserts a new item into a dynamic structure array (DSA). If necessary, the DSA expands to accommodate the new item.</para>
            </summary>
            <param name="pdsa">
            <para>Type: <c>HDSA</c></para>
            <para>A handle to the DSA in which to insert the item.</para>
            </param>
            <param name="index">
            <para>Type: <c>int</c></para>
            <para>The position in the DSA where new item is to be inserted, or DSA_APPEND to insert the item at the end of the array.</para>
            </param>
            <param name="pItem">
            <para>Type: <c>void*</c></para>
            <para>A pointer to the item that is to be inserted.</para>
            </param>
            <returns>
            <para>Type: <c>int</c></para>
            <para>Returns the index of the new item if the insertion succeeds, or DSA_ERR () if the insertion fails.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.DSA_SetItem(Vanara.PInvoke.HDSA,System.Int32,System.IntPtr)">
            <summary>
            <para>
            [ <c>DSA_SetItem</c> is available for use in the operating systems specified in the Requirements section. It may be altered or
            unavailable in subsequent versions.]
            </para>
            <para>Inserts a new item into a dynamic structure array (DSA). If necessary, the DSA expands to accommodate the new item.</para>
            </summary>
            <param name="pdsa">
            <para>Type: <c>HDSA</c></para>
            <para>A handle to an existing DSA that contains the element.</para>
            </param>
            <param name="index">
            <para>Type: <c>int</c></para>
            <para>The zero-based index of the item to set.</para>
            </param>
            <param name="pItem">
            <para>Type: <c>void*</c></para>
            <para>A pointer to the item that will replace the specified item in the array.</para>
            </param>
            <returns>
            <para>Type: <c>BOOL</c></para>
            <para>Returns <c>TRUE</c> on success or <c>FALSE</c> on failure.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.DSA_Sort(Vanara.PInvoke.HDSA,Vanara.PInvoke.ComCtl32.PFNDACOMPARE,System.IntPtr)">
            <summary>Sorts the items in a dynamic structure array (DSA).</summary>
            <param name="pdsa">
            <para>Type: <c>HDSA</c></para>
            <para>A handle to an existing DSA.</para>
            </param>
            <param name="pfnCompare">
            <para>Type: <c><c>PFNDACOMPARE</c></c></para>
            <para>A comparison function pointer. See <c>PFNDPACOMPARE</c> for the comparison function prototype.</para>
            </param>
            <param name="lParam">
            <para>Type: <c><c>LPARAM</c></c></para>
            <para>An additional parameter to be passed to pfnCmp.</para>
            </param>
            <returns>
            <para>Type: <c><c>BOOL</c></c></para>
            <para>Returns <c>TRUE</c> on success or <c>FALSE</c> on failure.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.Str_SetPtr(System.IntPtr@,System.String)">
            <summary>Sets ppszCurrent to a copy of pszNew and frees the previous value, if necessary.</summary>
            <param name="ppszCurrent">
            <para>Type: <c><c>LPTSTR</c>*</c></para>
            <para>The address of a pointer to the current string. The current string is freed and the pointer is set to a copy of pszNew.</para>
            </param>
            <param name="pszNew">
            <para>Type: <c><c>LPCTSTR</c></c></para>
            <para>A pointer to the string to copy into ppszCurrent.</para>
            </param>
            <returns>
            <para>Type: <c><c>BOOL</c></c></para>
            <para>Returns <c>TRUE</c> if successful; otherwise, <c>FALSE</c>.</para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.DPASTREAMINFO">
            <summary>Contains a stream item used by the <c>PFNDPASTREAM</c> callback function.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.DPASTREAMINFO.iPos">
            <summary>
            <para>Type: <c>int</c></para>
            <para>An index of the item in the DPA.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ComCtl32.DPASTREAMINFO.pvItem">
            <summary>
            <para>Type: <c>void*</c></para>
            <para>A void pointer to the item data.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.SafeHDPA">
            <summary>Provides a <see cref="T:System.Runtime.InteropServices.SafeHandle"/> to a that releases a created HDPA instance at disposal using DPA_Destroy.</summary>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.SafeHDPA.#ctor(System.IntPtr,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.HDPA"/> class and assigns an existing handle.</summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
            <param name="ownsHandle">
            <see langword="true"/> to reliably release the handle during the finalization phase; otherwise, <see langword="false"/> (not recommended).
            </param>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.SafeHDPA.op_Implicit(Vanara.PInvoke.ComCtl32.SafeHDPA)~Vanara.PInvoke.HDPA">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.ComCtl32.SafeHDPA"/> to <see cref="T:Vanara.PInvoke.HDPA"/>.</summary>
            <param name="h">The safe handle instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.SafeHDPA.InternalReleaseHandle">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.ComCtl32.SafeHDSA">
            <summary>Provides a <see cref="T:System.Runtime.InteropServices.SafeHandle"/> to a that releases a created HDSA instance at disposal using DSA_Destroy.</summary>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.SafeHDSA.#ctor(System.IntPtr,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.HDSA"/> class and assigns an existing handle.</summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
            <param name="ownsHandle">
            <see langword="true"/> to reliably release the handle during the finalization phase; otherwise, <see langword="false"/> (not recommended).
            </param>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.SafeHDSA.op_Implicit(Vanara.PInvoke.ComCtl32.SafeHDSA)~Vanara.PInvoke.HDSA">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.ComCtl32.SafeHDSA"/> to <see cref="T:Vanara.PInvoke.HDSA"/>.</summary>
            <param name="h">The safe handle instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.ComCtl32.SafeHDSA.InternalReleaseHandle">
            <inheritdoc/>
        </member>
    </members>
</doc>
